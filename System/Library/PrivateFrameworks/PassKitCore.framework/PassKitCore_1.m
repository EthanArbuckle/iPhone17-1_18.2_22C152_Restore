id sub_100122FE0()
{
  void *v0;
  void *v1;
  uint64_t vars8;

  v0 = PKHomeDirectoryPath();
  v1 = [v0 stringByAppendingPathComponent:@"LastLocation.archive"];

  return v1;
}

id sub_100123034()
{
  v0 = PKHomeDirectoryPath();
  v1 = [v0 stringByAppendingPathComponent:@"LastBeacons.archive"];

  return v1;
}

void sub_10012361C(uint64_t a1)
{
  v2 = [*(id *)(a1 + 32) transactionSourceIdentifier];
  id v3 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  v4 = [*(id *)(a1 + 40) uniqueID];
  v5 = [*(id *)(*(void *)(a1 + 48) + 24) applePayContainer];
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3032000000;
  v22[3] = sub_1000208BC;
  v22[4] = sub_100020F50;
  id v23 = 0;
  v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    v25 = v4;
    __int16 v26 = 2112;
    v27 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "A payment application was added for pass with uniqueID %{public}@ and transactionSourceIdentifier %@", buf, 0x16u);
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100123910;
  v18[3] = &unk_100738AA0;
  v18[4] = *(void *)(a1 + 48);
  id v19 = *(id *)(a1 + 32);
  id v20 = *(id *)(a1 + 40);
  v21 = v22;
  [v3 addOperation:v18];
  v7 = +[NSNull null];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100123C00;
  v11[3] = &unk_100738AF0;
  v11[4] = *(void *)(a1 + 48);
  v16 = v22;
  id v8 = v5;
  id v12 = v8;
  id v9 = v4;
  id v13 = v9;
  char v17 = *(unsigned char *)(a1 + 72);
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v10 = [v3 evaluateWithInput:v7 completion:v11];

  _Block_object_dispose(v22, 8);
}

void sub_1001238F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100123910(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100123A08;
  v14[3] = &unk_100733FF0;
  v14[4] = v8;
  id v15 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  id v18 = v7;
  uint64_t v19 = v11;
  id v16 = v10;
  id v17 = v6;
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v9, v14);
}

void sub_100123A08(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100123AD0;
  v7[3] = &unk_100738A78;
  v7[4] = v2;
  long long v6 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v6;
  long long v9 = v6;
  id v8 = *(id *)(a1 + 56);
  objc_msgSend(v2, "_queue_relevantTransactionSourceIdentifiersToSyncForPaymentApplication:onPaymentPass:completion:", v3, v4, v7);
}

void sub_100123AD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100123BAC;
  block[3] = &unk_100738A50;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_100123BAC(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_100123C00(uint64_t a1)
{
  v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100123CE4;
  block[3] = &unk_100738AC8;
  uint64_t v10 = *(void *)(a1 + 72);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 80);
  id v7 = *(id *)(a1 + 56);
  id v3 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = v3;
  dispatch_async(v2, block);
}

id sub_100123CE4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) count];
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      int v8 = 138412290;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDCloudStoreTransactionSourceController will sync transactions for transaction source identifiers %@", (uint8_t *)&v8, 0xCu);
    }

    [*(id *)(a1 + 32) passProvisioningDidStartForPassUniqueID:*(void *)(a1 + 40) transactionSourceIdentifiers:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) ignoreExistingRecordHash:*(unsigned __int8 *)(a1 + 80) groupNameSuffix:*(void *)(a1 + 48) completion:*(void *)(a1 + 64)];
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138543362;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDCloudStoreTransactionSourceController will not sync transactions for pass %{public}@ since there are no relevant transaction source identifiers.", (uint8_t *)&v8, 0xCu);
    }
  }
  return [*(id *)(a1 + 56) _updateScheduledActivityIfNeccessary];
}

id sub_100123ED4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_100123FA0(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10012403C;
  v3[3] = &unk_100738B68;
  v3[4] = v1;
  id v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "_queue_performDailyTransactionSyncFromDate:returnRecords:formReport:completion:", v2, 1, 1, v3);
}

void sub_10012403C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 transactionSyncReportItemsByAccountIdentifier];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10012410C;
  v9[3] = &unk_100738B40;
  v9[4] = *(void *)(a1 + 32);
  [v7 enumerateKeysAndObjectsUsingBlock:v9];

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_10012410C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 count])
  {
    id v7 = [objc_alloc((Class)PKAccountTransactionSyncReport) initWithItems:v6 accountIdentifier:v5];
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending account report to PDAccountManager: %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 32) sendAccountReport:v7 trigger:1 completion:0];
  }
}

id sub_1001242B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_backgroundRecordChangeSyncWithCompletion:", *(void *)(a1 + 40));
}

void sub_100124388(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v4 = [v2 paymentPass];

  id v3 = [v4 devicePrimaryPaymentApplication];
  [*(id *)(a1 + 32) didAddPaymentApplication:v3 forPaymentPass:v4 groupNameSuffix:0 ignoreExistingRecordHash:1 completion:*(void *)(a1 + 48)];
}

void sub_1001244B0(uint64_t a1)
{
  [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
  uint64_t v2 = [*(id *)(a1 + 40) transactionSourceIdentifier];
  id v3 = [*(id *)(a1 + 40) associatedPassUniqueID];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:v3];
  id v5 = [v4 paymentPass];

  if (v5)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "An account was added for pass with uniqueID %{public}@ while the pass was already here, trigger fetch to recover account events", buf, 0xCu);
    }

    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = [v5 devicePrimaryPaymentApplication];
    [v7 didAddPaymentApplication:v8 forPaymentPass:v5 groupNameSuffix:PKCloudStoreOperationGroupSuffixAccountAdded ignoreExistingRecordHash:0 completion:0];
  }
  if (v2)
  {
    int v9 = [*(id *)(*(void *)(a1 + 32) + 24) applePayContainer];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001246A8;
    v11[3] = &unk_10072F630;
    id v12 = *(id *)(a1 + 40);
    id v13 = v2;
    id v14 = v9;
    id v10 = v9;
    [v10 canSyncTransactionFromCloudKitForTransactionSourceIdentifier:v13 completion:v11];
  }
}

void sub_1001246A8(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 40);
    CFStringRef v8 = @"account";
    id v4 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
    [v3 passProvisioningDidStartForPassUniqueID:0 transactionSourceIdentifiers:v4 ignoreExistingRecordHash:0 groupNameSuffix:PKCloudStoreOperationGroupSuffixAccountAdded completion:0];
  }
  else
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 32) accountIdentifier];
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      id v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDCloudStoreTransactionSourceController will not sync transaction from CloudKit for account identifier %@ and transactionSourceIdentifier %@", buf, 0x16u);
    }
  }
}

id sub_10012484C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

id sub_1001248C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

id sub_100124944(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_100124D18(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSDate date];
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Setting last transaction record sync date to %{public}@", buf, 0xCu);
  }

  PDSetCloudStoreTransactionSourceControllerLastSync();
  uint64_t v6 = [v3 transactionSyncReportItemsByAccountIdentifier];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100124EBC;
  v10[3] = &unk_100738B40;
  v10[4] = *(void *)(a1 + 32);
  [v6 enumerateKeysAndObjectsUsingBlock:v10];

  uint64_t v7 = *(void *)(a1 + 32);
  CFStringRef v8 = *(NSObject **)(v7 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100125080;
  v9[3] = &unk_10072E1E8;
  v9[4] = v7;
  dispatch_async(v8, v9);
}

void sub_100124EBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  CFStringRef v8 = *(NSObject **)(v7 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100124F88;
  block[3] = &unk_10072E238;
  void block[4] = v7;
  id v12 = v6;
  id v13 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_100124F88(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
  if ([*(id *)(a1 + 40) count])
  {
    id v2 = [objc_alloc((Class)PKAccountTransactionSyncReport) initWithItems:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)];
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sending account report to PDAccountManager: %@", (uint8_t *)&v4, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 32) sendAccountReport:v2 trigger:3 completion:0];
  }
}

id sub_100125080(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_100125088(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001250FC;
  block[3] = &unk_10072E1E8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1001250FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_1001253DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001253FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, 0);
  }
  return result;
}

void sub_10012541C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1001254EC;
  v13[3] = &unk_100738B90;
  uint64_t v10 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v10;
  v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v9, v13);
}

void sub_1001254EC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001255A0;
  v5[3] = &unk_100738A78;
  v5[4] = v2;
  long long v4 = *(_OWORD *)(a1 + 48);
  id v3 = (id)v4;
  long long v7 = v4;
  id v6 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_queue_allRelevantTransactionSourceIdentifiersWithCompletion:", v5);
}

void sub_1001255A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012567C;
  block[3] = &unk_100738A50;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_10012567C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_1001256D0(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001257A0;
  v5[3] = &unk_100738BB8;
  uint64_t v10 = *(void *)(a1 + 64);
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  __int16 v11 = *(_WORD *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v2, v5);
}

void sub_1001257A0(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDCloudStoreTransactionSourceController will sync recently modified transactions for %@", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) allKeys];
  id v5 = +[NSSet setWithArray:v4];

  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 73);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100125924;
  v11[3] = &unk_100738B68;
  uint64_t v10 = *(void **)(a1 + 56);
  void v11[4] = *(void *)(a1 + 48);
  id v12 = v10;
  [v6 backgroundModifiedRecordSyncForTranasctionSourceIdentifiers:v5 fromDate:v7 returnRecords:v8 formReport:v9 completion:v11];
}

void sub_100125924(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100125A00;
  block[3] = &unk_100731830;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100125A00(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_100125CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100125CE4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100125DB4;
  v13[3] = &unk_100738B90;
  uint64_t v10 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v10;
  v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v9, v13);
}

void sub_100125DB4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100125E68;
  v5[3] = &unk_100738A78;
  void v5[4] = v2;
  long long v4 = *(_OWORD *)(a1 + 48);
  id v3 = (id)v4;
  long long v7 = v4;
  id v6 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_queue_allRelevantTransactionSourceIdentifiersWithCompletion:", v5);
}

void sub_100125E68(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100125F44;
  block[3] = &unk_100738A50;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_100125F44(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_100125F98(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(NSObject **)(a1[4] + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100126084;
  v15[3] = &unk_100738C30;
  id v10 = (void *)a1[5];
  uint64_t v9 = a1[6];
  id v19 = v7;
  uint64_t v20 = v9;
  id v16 = v6;
  id v11 = v10;
  uint64_t v12 = a1[4];
  id v17 = v11;
  uint64_t v18 = v12;
  uint64_t v21 = a1[7];
  id v13 = v6;
  id v14 = v7;
  dispatch_async(v8, v15);
}

void sub_100126084(uint64_t a1)
{
  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDCloudStoreTransactionSourceController background record sync starting for: %@", buf, 0xCu);
    }

    long long v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) allKeys];
    id v6 = +[NSSet setWithArray:v5];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10012626C;
    v10[3] = &unk_100738C08;
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v8 = *(void **)(a1 + 56);
    v10[4] = *(void *)(a1 + 48);
    uint64_t v13 = v7;
    id v12 = v8;
    id v11 = *(id *)(a1 + 32);
    [v4 backgroundRecordChangedSyncForTranasctionSourceIdentifiers:v6 completion:v10];
  }
  else
  {
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v9();
  }
}

void sub_10012626C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100126348;
  block[3] = &unk_100738A50;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_100126348(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_10012639C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100126438;
  block[3] = &unk_100737B88;
  long long v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  long long v5 = v3;
  dispatch_async(v1, block);
}

uint64_t sub_100126438(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDCloudStoreTransactionSourceController background record sync completed with error %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

void sub_100126820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void sub_100126850(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100126938;
  v15[3] = &unk_100733FF0;
  void v15[4] = v8;
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  id v16 = v10;
  uint64_t v17 = v11;
  id v19 = v7;
  uint64_t v20 = v12;
  id v18 = v6;
  id v13 = v6;
  id v14 = v7;
  dispatch_async(v9, v15);
}

void sub_100126938(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100126A00;
  v7[3] = &unk_100738A78;
  v7[4] = v2;
  long long v6 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v6;
  long long v9 = v6;
  id v8 = *(id *)(a1 + 56);
  objc_msgSend(v2, "_queue_relevantTransactionSourceIdentifiersToSyncForPaymentApplication:onPaymentPass:completion:", v3, v4, v7);
}

void sub_100126A00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100126ADC;
  block[3] = &unk_100738A50;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_100126ADC(void *a1)
{
  [*(id *)(*(void *)(a1[7] + 8) + 40) addEntriesFromDictionary:a1[4]];
  id v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

void sub_100126B30(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100126C00;
  v13[3] = &unk_100738CA8;
  v13[4] = v8;
  id v14 = v6;
  uint64_t v10 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v10;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v9, v13);
}

void sub_100126C00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100126CB8;
  v6[3] = &unk_100738CD0;
  v6[4] = v2;
  id v8 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  id v7 = v4;
  uint64_t v9 = v5;
  [v3 defaultAccountForFeature:5 completion:v6];
}

void sub_100126CB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100126D90;
  v8[3] = &unk_100738CA8;
  id v9 = v3;
  id v11 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  id v10 = v5;
  uint64_t v12 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_100126D90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v6 = [v2 transactionSourceIdentifier];
    if (v6)
    {
      id v3 = [*(id *)(a1 + 32) accountIdentifier];
      id v4 = +[NSString stringWithFormat:@"Savings Account: %@", v3];

      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) safelySetObject:v4 forKey:v6];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v5();
  }
}

void sub_100126EA0(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100126F3C;
  block[3] = &unk_100737B88;
  long long v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  long long v5 = v3;
  dispatch_async(v1, block);
}

void sub_100126F3C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDCloudStoreTransactionSourceController all relevant transactionSourceIdentifiers: %@", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) copy];
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
  }
}

void sub_100127588(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001275AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1001275C8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = *(void **)(v8 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001276F4;
    v12[3] = &unk_100738D48;
    uint64_t v11 = *(void *)(a1 + 56);
    v12[4] = v8;
    uint64_t v17 = v11;
    id v16 = v7;
    id v13 = v6;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 48);
    [v10 accountWithIdentifier:v9 completion:v12];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_1001276F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001277FC;
  block[3] = &unk_100738D20;
  id v11 = v3;
  long long v9 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v9;
  long long v16 = v9;
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v15 = v7;
  id v8 = v3;
  dispatch_async(v4, block);
}

void sub_1001277FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v2);
    id v3 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      id v6 = [*(id *)(a1 + 56) uniqueID];
      *(_DWORD *)buf = 138412546;
      uint64_t v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "The account with identifier %@ for pass %{public}@ is not on device. Fetching all the accounts now.", buf, 0x16u);
    }
    uint64_t v7 = *(void *)(a1 + 64);
    id v8 = *(void **)(v7 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001279D4;
    v10[3] = &unk_100738CF8;
    uint64_t v9 = *(void *)(a1 + 80);
    v10[4] = v7;
    uint64_t v14 = v9;
    id v11 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 72);
    id v12 = *(id *)(a1 + 40);
    [v8 updateAccountsWithCompletion:v10];
  }
}

void sub_1001279D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100127AC0;
  block[3] = &unk_100730A08;
  uint64_t v11 = *(void *)(a1 + 64);
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_100127AC0(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100127B78;
  v6[3] = &unk_1007344A0;
  id v2 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  uint64_t v3 = objc_msgSend(v2, "pk_firstObjectPassingTest:", v6);
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_100127B78(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 accountIdentifier];
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_100127BFC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (([*(id *)(a1 + 32) hasAssociatedPeerPaymentAccount] & 1) != 0
    && ([*(id *)(*(void *)(a1 + 40) + 8) hasPeerPaymentAccount] & 1) == 0)
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "The peer payment account was missing from device after a provisioning. Updating now.", buf, 2u);
    }

    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(v9 + 16);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100127D44;
    v11[3] = &unk_100738D98;
    void v11[4] = v9;
    id v13 = v7;
    id v12 = v6;
    [v10 updateAccountAndAssociatedAccountsWithCompletion:v11];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_100127D44(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100127DEC;
  v3[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_100127DEC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100127E04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) hasAssociatedPeerPaymentAccount])
  {
    uint64_t v8 = [*(id *)(*(void *)(a1 + 40) + 8) peerPaymentAccount];
    uint64_t v9 = v8;
    if (v8)
    {
      v22 = v7;
      id v23 = v6;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v21 = v8;
      id v10 = [v8 associatedAccountInformation];
      uint64_t v11 = [v10 associatedAccounts];

      id v12 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v25;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(void *)v25 != v14) {
              objc_enumerationMutation(v11);
            }
            uint64_t v16 = *(void **)(*((void *)&v24 + 1) + 8 * i);
            __int16 v17 = [v16 transactionSourceIdentifier];
            if (v17)
            {
              id v18 = [v16 identifier];
              id v19 = [v16 altDSID];
              uint64_t v20 = +[NSString stringWithFormat:@"Peer Payment Associated Account: %@, %@", v18, v19];

              [*(id *)(a1 + 48) safelySetObject:v20 forKey:v17];
            }
          }
          id v13 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
        }
        while (v13);
      }

      id v7 = v22;
      id v6 = v23;
      v22[2](v22, v23, 0);
      uint64_t v9 = v21;
    }
    else
    {
      v7[2](v7, v6, 0);
    }
  }
  else
  {
    v7[2](v7, v6, 0);
  }
}

void sub_100128038(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = *(void **)(v8 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100128148;
    v11[3] = &unk_100738DC0;
    void v11[4] = v8;
    id v12 = *(id *)(a1 + 48);
    id v14 = v7;
    id v13 = v6;
    [v10 accountUsersForAccountWithIdentifier:v9 completion:v11];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_100128148(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10012822C;
  v6[3] = &unk_100730C10;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_10012822C(uint64_t a1)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v25;
    uint64_t v16 = *(void *)v25;
    do
    {
      id v5 = 0;
      id v17 = v3;
      do
      {
        if (*(void *)v25 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v5);
        if (([v6 isCurrentUser] & 1) == 0)
        {
          id v19 = v5;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          id v7 = [v6 transactionSourceIdentifiers];
          id v8 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v8)
          {
            id v9 = v8;
            uint64_t v10 = *(void *)v21;
            do
            {
              for (i = 0; i != v9; i = (char *)i + 1)
              {
                if (*(void *)v21 != v10) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v12 = *(void *)(*((void *)&v20 + 1) + 8 * i);
                id v13 = [v6 description];
                id v14 = +[NSString stringWithFormat:@"Account User: %@", v13];

                [*(id *)(a1 + 40) safelySetObject:v14 forKey:v12];
              }
              id v9 = [v7 countByEnumeratingWithState:&v20 objects:v28 count:16];
            }
            while (v9);
          }

          uint64_t v4 = v16;
          id v3 = v17;
          id v5 = v19;
        }
        id v5 = (char *)v5 + 1;
      }
      while (v5 != v3);
      id v3 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v3);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10012843C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) length]
    && (id v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) != 0
    && [v8 feature] == (id)2)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(NSObject **)(v9 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10012855C;
    v11[3] = &unk_100731EC0;
    void v11[4] = v9;
    id v14 = v7;
    id v12 = v6;
    id v13 = *(id *)(a1 + 48);
    dispatch_async(v10, v11);
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_10012855C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100128620;
  v4[3] = &unk_100738DE8;
  v4[4] = v2;
  id v7 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  [v3 defaultAccountForFeature:5 completion:v4];
}

void sub_100128620(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100128704;
  v6[3] = &unk_100731EC0;
  id v7 = v3;
  id v10 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100128704(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v6 = [v2 transactionSourceIdentifier];
    if (v6)
    {
      id v3 = [*(id *)(a1 + 32) accountIdentifier];
      uint64_t v4 = +[NSString stringWithFormat:@"Savings Account: %@", v3];

      [*(id *)(a1 + 48) safelySetObject:v4 forKey:v6];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
  else
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v5();
  }
}

void sub_100128818(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = *(NSObject **)(v8 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100128924;
    block[3] = &unk_100737C00;
    void block[4] = v8;
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 48);
    id v13 = v10;
    uint64_t v16 = v11;
    id v15 = v7;
    id v14 = v6;
    dispatch_async(v9, block);
  }
  else
  {
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1);
  }
}

void sub_100128924(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001289E4;
  v6[3] = &unk_100738A78;
  void v6[4] = v2;
  long long v5 = *(_OWORD *)(a1 + 56);
  id v4 = (id)v5;
  long long v8 = v5;
  id v7 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_queue_filterRelevantTransactionSourceIdentifiersThatCanSyncWithCloudKit:completion:", v3, v6);
}

void sub_1001289E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100128AC0;
  block[3] = &unk_100738A50;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_100128AC0(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_100128B14(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100128BCC;
  block[3] = &unk_100738E38;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  long long v6 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v6;
  long long v10 = v6;
  dispatch_async(v2, block);
}

void sub_100128BCC(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) uniqueID];
    uint64_t v4 = [*(id *)(a1 + 32) organizationName];
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    *(_DWORD *)buf = 138543874;
    id v13 = v3;
    __int16 v14 = 2112;
    id v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Revelant cloud store transaction source identifiers for payment pass uniqueID %{public}@, pass name %@.\n%@", buf, 0x20u);
  }
  long long v6 = *(NSObject **)(*(void *)(a1 + 40) + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100128D34;
  v9[3] = &unk_100736600;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v10 = v7;
  uint64_t v11 = v8;
  dispatch_async(v6, v9);
}

void sub_100128D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100128F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100128F9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100129078;
  v12[3] = &unk_1007377A0;
  id v7 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  id v16 = v6;
  uint64_t v17 = v9;
  uint64_t v15 = v8;
  id v10 = v6;
  id v11 = v5;
  [v7 addOperation:v12];
}

void sub_100129078(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10012917C;
  v15[3] = &unk_100738EB0;
  id v11 = (void *)a1[7];
  uint64_t v10 = a1[8];
  void v15[4] = a1[6];
  uint64_t v20 = v10;
  id v16 = v11;
  id v12 = (id)a1[5];
  id v18 = v6;
  id v19 = v7;
  id v17 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 canSyncTransactionFromCloudKitForTransactionSourceIdentifier:v9 completion:v15];
}

void sub_10012917C(uint64_t a1, char a2)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100129258;
  v4[3] = &unk_100738E88;
  char v10 = a2;
  uint64_t v9 = *(void *)(a1 + 72);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 56);
  dispatch_async(v3, v4);
}

uint64_t sub_100129258(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) safelySetObject:*(void *)(a1 + 32) forKey:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v3 = *(void *)(a1 + 40);
      int v6 = 138412546;
      uint64_t v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDApplePayCloudStoreContainer will not sync transaction from CloudKit with transactionSourceIdentifier %@, description %@", (uint8_t *)&v6, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100129344(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001293DC;
  v5[3] = &unk_100736600;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  dispatch_async(v2, v5);
}

void sub_1001293DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1001294D4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = PDScheduledActivityExists();
    id v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
    return v3(v1, v2);
  }
  return result;
}

void sub_100129700(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKRule);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [v7 parsePredicateFormat];
  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1001298E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKRule);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [v7 parsePredicateFormat];
  [*(id *)(a1 + 40) addObject:v7];
}

id sub_100129E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10012A06C(id a1, PKRule *a2, id a3)
{
}

void sub_10012A074(id a1, PKRule *a2, id a3)
{
}

void sub_10012A07C(id a1, PKRule *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_OSVersionRequirementRangeForSQLValue();
  [(PKRule *)v3 setOsVersionRequirementRange:v4];
}

void sub_10012A6B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  [*(id *)(a1 + 32) recordExpressUpgradeAttemptStatus:a3];
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v6 = v7;
    if (a3 != 2) {
      id v6 = 0;
    }
    (*(void (**)(uint64_t, id, uint64_t))(v5 + 16))(v5, v6, a3);
  }
}

BOOL sub_10012A7E0(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:a2];
}

void sub_10012AB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  _Block_object_dispose((const void *)(v13 - 208), 8);
  _Block_object_dispose((const void *)(v13 - 160), 8);
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

void sub_10012ABDC(uint64_t a1)
{
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    BOOL v3 = WeakRetained == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    __int16 v8 = WeakRetained;
    objc_msgSend(WeakRetained[6], "invalidateAssertionOfType:withIdentifier:handler:", 1);
    dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;

    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;

    WeakRetained = v8;
  }
}

void sub_10012AC84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  BOOL v3 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10012AD44;
  block[3] = &unk_100739038;
  void block[4] = *(void *)(a1 + 48);
  objc_copyWeak(&v5, (id *)(a1 + 64));
  void block[5] = *(void *)(a1 + 56);
  dispatch_async(v3, block);
  objc_destroyWeak(&v5);
}

void sub_10012AD44(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0;
  }
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    BOOL v6 = WeakRetained == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v9 = WeakRetained;
    objc_msgSend(WeakRetained[6], "invalidateAssertionOfType:withIdentifier:handler:", 1);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    __int16 v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0;

    WeakRetained = v9;
  }
}

void sub_10012ADF0(uint64_t a1, int a2)
{
  if (a2)
  {
    dispatch_resume(*(dispatch_object_t *)(*(void *)(*(void *)(a1 + 72) + 8) + 40));
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10012AFBC;
    v15[3] = &unk_1007390D0;
    objc_copyWeak(&v18, (id *)(a1 + 88));
    id v17 = *(id *)(a1 + 64);
    id v16 = *(id *)(a1 + 48);
    [v4 requestPassUpgrade:v3 pass:v5 diagnosticReason:@"Transit Notification Service Automatic" completion:v15];

    objc_destroyWeak(&v18);
  }
  else
  {
    BOOL v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pass ugprade failed because an assertion could not be acquired", buf, 2u);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10012B36C;
    block[3] = &unk_1007390F8;
    uint64_t v12 = *(void *)(a1 + 80);
    uint64_t v7 = *(NSObject **)(a1 + 56);
    id v8 = *(id *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 72);
    id v11 = v8;
    uint64_t v13 = v9;
    dispatch_async(v7, block);
  }
}

void sub_10012AFA8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10012AFBC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    if (v5 || !v6)
    {
      id v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = a1[4];
        *(_DWORD *)buf = 138412546;
        id v20 = v12;
        __int16 v21 = 2112;
        id v22 = v5;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to upgrade default payment pass to express: %@ %@", buf, 0x16u);
      }

      (*((void (**)(void))a1[5] + 2))();
    }
    else
    {
      id v8 = [objc_alloc((Class)PKExpressPassInformation) initForPaymentPass:v6 withTechologyTest:&stru_100739080];
      if (v8)
      {
        id v9 = [objc_alloc((Class)PKExpressPassConfiguration) initWithPassInformation:v8 forSecureElementPass:v6];
        uint64_t v10 = WeakRetained[3];
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_10012B280;
        v15[3] = &unk_1007390A8;
        objc_copyWeak(&v18, a1 + 6);
        id v17 = a1[5];
        id v16 = a1[4];
        sub_1001903B0(v10, v9, 0, v15);

        objc_destroyWeak(&v18);
      }
      else
      {
        uint64_t v13 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          id v14 = a1[4];
          *(_DWORD *)buf = 138412290;
          id v20 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Express info failed to init: %@", buf, 0xCu);
        }

        (*((void (**)(void))a1[5] + 2))();
      }
    }
  }
  else
  {
    (*((void (**)(void))a1[5] + 2))();
  }
}

void sub_10012B254(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10012B270(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:a2];
}

void sub_10012B280(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
  {
LABEL_9:
    uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_10;
  }
  id v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!a2)
  {
    if (v6)
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to set default payment pass as express.", v8, 2u);
    }

    goto LABEL_9;
  }
  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Set default payment pass as express.", buf, 2u);
  }

  uint64_t v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_10:
  v7();
}

void sub_10012B36C(void *a1)
{
  uint64_t v2 = *(void *)(a1[5] + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  (*(void (**)(void))(a1[4] + 16))();
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1[6] + 8) + 40));
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;
}

void sub_10012B7EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10012B9F0(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setUnknownCount:](v4, "setUnknownCount:", [a3 unsignedIntegerValue]);
}

void sub_10012BA48(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setFoodAndDrinksCount:](v4, "setFoodAndDrinksCount:", [a3 unsignedIntegerValue]);
}

void sub_10012BAA0(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setShoppingCount:](v4, "setShoppingCount:", [a3 unsignedIntegerValue]);
}

void sub_10012BAF8(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setTravelCount:](v4, "setTravelCount:", [a3 unsignedIntegerValue]);
}

void sub_10012BB50(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setServicesCount:](v4, "setServicesCount:", [a3 unsignedIntegerValue]);
}

void sub_10012BBA8(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setFunCount:](v4, "setFunCount:", [a3 unsignedIntegerValue]);
}

void sub_10012BC00(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setHealthCount:](v4, "setHealthCount:", [a3 unsignedIntegerValue]);
}

void sub_10012BC58(id a1, PKPayLaterCardMagnitudes *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterCardMagnitudes setTransportcount:](v4, "setTransportcount:", [a3 unsignedIntegerValue]);
}

void sub_10012BF70(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountVirtualCardStatusUpdate alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = [(AccountVirtualCardStatusUpdate *)v5 virtualCardStatusUpdate];
  [v3 addObject:v4];
}

void sub_10012C230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
  id v4 = [*(id *)(a1 + 48) persistentID];
  id v5 = [*(id *)(a1 + 48) database];
  id v8 = +[VirtualCard virtualCardsForVirtualCardStatusUpdatePID:v4 inDatabase:v5];

  BOOL v6 = *(void **)(a1 + 40);
  uint64_t v7 = [v8 allObjects];
  [v6 setUpdatedVirtualCards:v7];
}

void sub_10012C4FC(id a1, PKAccountVirtualCardStatusUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountVirtualCardStatusUpdate setReason:](v4, "setReason:", [a3 integerValue]);
}

void sub_10012CA5C(id a1, PKPeerPaymentPaymentModeIdentifiers *a2, id a3)
{
}

void sub_10012CB5C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

id sub_10012CF70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateDownloadMissingAssetsActivityWithForcedReschedule:0];
}

void sub_10012CFB4(uint64_t a1)
{
  if (PKPassbookIsSupported())
  {
    uint64_t v2 = [[PDUbiquityManager alloc] initWithDelegate:*(void *)(a1 + 32)];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = v2;

    id v5 = *(void **)(*(void *)(a1 + 32) + 32);
    [v5 start];
  }
  else
  {
    BOOL v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Passbook is not supported - sync disabled", v7, 2u);
    }
  }
}

void sub_10012D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v55 - 192), 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_10012D6D4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10012D768;
  v6[3] = &unk_1007392E8;
  void v6[4] = a1[5];
  id v3 = objc_msgSend(v2, "pk_createArrayByApplyingBlock:", v6);
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10012D768(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", a2);
  id v3 = v2;
  if (v2)
  {
    id v4 = v2;
  }
  else
  {
    id v4 = +[NSNull null];
  }
  id v5 = v4;

  return v5;
}

void sub_10012D7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  unint64_t v2 = *(void *)(a1 + 96);
  unint64_t v4 = v3 * a2;
  if (v3 * a2 < v2)
  {
    BOOL v6 = (char *)(v4 + v3);
    if ((unint64_t)v6 >= v2) {
      BOOL v6 = *(char **)(a1 + 96);
    }
    if (a2 == 1) {
      uint64_t v7 = *(char **)(a1 + 96);
    }
    else {
      uint64_t v7 = v6;
    }
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v31 = v4;
      __int16 v32 = 2048;
      v33 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: beginning image migration for indices [%lu, %lu).", buf, 0x16u);
    }

    BOOL v10 = *(unsigned char *)(a1 + 120) != 0;
    unint64_t v27 = v4;
    if (v4 < (unint64_t)v7)
    {
      uint64_t v29 = 0;
      char v28 = 0;
      id v11 = &dispatch_get_global_queue_ptr;
      *(void *)&long long v9 = 134217984;
      long long v26 = v9;
      while (1)
      {
        uint64_t v13 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v4];
        id v14 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectAtIndexedSubscript:v4];
        uint64_t v15 = [v11[511] null];

        if (v14 == v15)
        {

          id v14 = 0;
          if (v10)
          {
LABEL_13:
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218242;
              unint64_t v31 = v4;
              __int16 v32 = 2112;
              v33 = v13;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: partially migrating images for index %lu, pass (%@).", buf, 0x16u);
            }

            goto LABEL_16;
          }
        }
        else if (v10)
        {
          goto LABEL_13;
        }
        id v16 = v7;
        id v17 = objc_msgSend(*(id *)(a1 + 40), "_cardWithUniqueID:cardDirectoryCoordinator:error:", v13, v14, 0, v26);
        id v18 = (char *)[v17 passType];
        id v19 = [v17 style];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218754;
          unint64_t v31 = v4;
          __int16 v32 = 2048;
          v33 = v18;
          __int16 v34 = 2048;
          id v35 = v19;
          __int16 v36 = 2112;
          v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: migrating images for index %lu, pass (%lu-%ld:%@).", buf, 0x2Au);
        }
        ++v29;

        id v20 = *(void **)(a1 + 40);
        __int16 v21 = [v17 displayProfile];
        [v20 _createImageSetsForCardWithUniqueID:v13 cardDirectoryCoordinator:v14 displayProfile:v21];

        if ((v28 + 1) < 8u)
        {
          ++v28;
          BOOL v10 = 0;
          uint64_t v7 = v16;
LABEL_22:
          id v11 = &dispatch_get_global_queue_ptr;
          goto LABEL_23;
        }
        uint64_t v7 = v16;
        if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 104) < *(double *)(a1 + 112))
        {
          BOOL v10 = 0;
          char v28 = 0;
          goto LABEL_22;
        }
        id v11 = &dispatch_get_global_queue_ptr;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v26;
          unint64_t v31 = v4;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: image migration timing out at index %lu.", buf, 0xCu);
        }

        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8) + 32));
        *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = fmax(*(double *)(*(void *)(*(void *)(a1 + 64)+ 8)+ 24), CFAbsoluteTimeGetCurrent());
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8) + 32));
        char v28 = 0;
LABEL_16:
        BOOL v10 = 1;
LABEL_23:
        if (v7 == (char *)++v4) {
          goto LABEL_31;
        }
      }
    }
    uint64_t v29 = 0;
LABEL_31:
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8) + 32));
    if (v10)
    {
      id v22 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      if (!v22)
      {
        id v23 = objc_alloc_init((Class)NSMutableIndexSet);
        uint64_t v24 = *(void *)(*(void *)(a1 + 72) + 8);
        long long v25 = *(void **)(v24 + 40);
        *(void *)(v24 + 40) = v23;

        id v22 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      }
      objc_msgSend(v22, "addIndexesInRange:", v29 + v27, &v7[-v29 - v27], v26);
    }
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) += v29;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 56) + 8) + 32));
  }
}

void sub_10012DC3C(uint64_t a1)
{
  uint64_t v2 = PDOSTransactionCreate("PDCardFileManager");
  uint64_t v3 = (void *)v2;
  if (*(void *)(a1 + 56))
  {
    id v17 = (void *)v2;
    unint64_t v4 = 0;
    do
    {
      BOOL v6 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v4];
      uint64_t v7 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) objectAtIndexedSubscript:v4];
      id v8 = +[NSNull null];

      if (v7 == v8)
      {

        uint64_t v7 = 0;
      }
      long long v9 = [*(id *)(a1 + 40) _cardWithUniqueID:v6 cardDirectoryCoordinator:v7 error:0];
      id v10 = [v9 passType];
      id v11 = [v9 style];
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218754;
        unint64_t v19 = v4;
        __int16 v20 = 2048;
        CFAbsoluteTime v21 = *(double *)&v10;
        __int16 v22 = 2048;
        id v23 = v11;
        __int16 v24 = 2112;
        long long v25 = v6;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: migrating images for deferred index %lu, pass (%lu-%ld:%@).", buf, 0x2Au);
      }

      uint64_t v13 = *(void **)(a1 + 40);
      id v14 = [v9 displayProfile];
      [v13 _createImageSetsForCardWithUniqueID:v6 cardDirectoryCoordinator:v7 displayProfile:v14];

      ++v4;
      unint64_t v15 = *(void *)(a1 + 56);
    }
    while (v4 < v15);
    uint64_t v3 = v17;
  }
  else
  {
    id v12 = PKLogFacilityTypeGetObject();
    unint64_t v15 = 0;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v16 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 64);
    *(_DWORD *)buf = 134218240;
    unint64_t v19 = v15;
    __int16 v20 = 2048;
    CFAbsoluteTime v21 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: finished deferred image migration for %lu passes in %0.3fs.", buf, 0x16u);
  }
}

void sub_10012DF7C(uint64_t a1)
{
  uint64_t v2 = +[NSFileManager defaultManager];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 40);
  id v24 = 0;
  unint64_t v4 = [v2 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:&__NSArray0__struct options:4 error:&v24];
  id v5 = v24;

  if (!v4)
  {
    BOOL v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unable to enumerate cards directory: %@", buf, 0xCu);
    }
  }
  unint64_t v19 = v5;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v21;
    uint64_t v11 = PKRawPassExtension;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v14 = [v13 lastPathComponent];
        unint64_t v15 = [v14 pathExtension];
        unsigned int v16 = [v15 isEqualToString:v11];

        if (v16)
        {
          id v17 = *(void **)(a1 + 40);
          id v18 = sub_10012E18C(v13);
          [v17 addObject:v18];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v9);
  }
}

id sub_10012E18C(void *a1)
{
  uint64_t v1 = [a1 lastPathComponent];
  uint64_t v2 = [v1 stringByDeletingPathExtension];

  return v2;
}

void sub_10012E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012E47C(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10012E4CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = [v2 objectForKey:NSUnderlyingErrorKey];

  if (!v3) {
    goto LABEL_8;
  }
  uint64_t v4 = [v3 domain];
  if (([v4 isEqualToString:PKPassKitErrorDomain] & 1) == 0)
  {

    goto LABEL_8;
  }
  id v5 = [v3 code];

  if (v5 != (id)-6000)
  {
LABEL_8:
    [*(id *)(a1 + 48) _deletePossibleInvalidCardWithUniqueID:*(void *)(a1 + 40) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    goto LABEL_9;
  }
  BOOL v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping delete of missing object with uniqueID: %@ due to signature check being unreachable", (uint8_t *)&v8, 0xCu);
  }

LABEL_9:
}

void sub_10012E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012E764(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

id sub_10012EAF0()
{
  if (qword_100808C30 != -1) {
    dispatch_once(&qword_100808C30, &stru_100739648);
  }
  v0 = (void *)qword_100808C28;
  return v0;
}

void sub_10012EC6C(uint64_t a1)
{
  id v4 = (id)PDOSTransactionCreate("PDCardFileManager");
  uint64_t v3 = [*(id *)(a1 + 32) _contentForCardWithUniqueID:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10012EED0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012EEFC(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10012EF4C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    uint64_t v4 = sub_1002C515C((id *)[PDPassDaemonData alloc], v3);

    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    BOOL v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

void sub_10012F1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10012F21C(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_10012F26C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = +[NSBundle bundleWithURL:v3];
    id v27 = v3;
    uint64_t v5 = PKPassPrivateDirectoryURLWithPassURL();
    BOOL v6 = +[NSBundle bundleWithURL:v5];

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v28 = a1;
    id obj = *(id *)(a1 + 32);
    id v31 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (!v31) {
      goto LABEL_28;
    }
    uint64_t v30 = *(void *)v39;
    while (1)
    {
      for (id i = 0; i != v31; id i = v23 + 1)
      {
        if (*(void *)v39 != v30) {
          objc_enumerationMutation(obj);
        }
        v33 = (char *)i;
        uint64_t v8 = *(void *)(*((void *)&v38 + 1) + 8 * i);
        id v9 = objc_alloc_init((Class)NSMutableArray);
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        uint64_t v32 = v8;
        uint64_t v10 = sub_100035604(v8);
        id v11 = [v10 countByEnumeratingWithState:&v34 objects:v42 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v35;
          do
          {
            for (j = 0; j != v12; j = (char *)j + 1)
            {
              if (*(void *)v35 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = *(void *)(*((void *)&v34 + 1) + 8 * (void)j);
              unsigned int v16 = sub_100011FDC(v15);
              id v17 = sub_1000215A0(v15);
              id v18 = [v16 createTileForState:v17 childTiles:0 withBundle:v4 privateBundle:v6];

              if (v18) {
                [v9 addObject:v18];
              }
            }
            id v12 = [v10 countByEnumeratingWithState:&v34 objects:v42 count:16];
          }
          while (v12);
        }

        if ([v9 count]) {
          id v19 = [v9 copy];
        }
        else {
          id v19 = 0;
        }
        long long v20 = sub_100011FDC(v32);
        long long v21 = [v20 metadata];
        if ([v21 isGroupType])
        {
          id v22 = [v19 count];

          long long v23 = v33;
          if (!v22) {
            goto LABEL_26;
          }
        }
        else
        {

          long long v23 = v33;
        }
        id v24 = sub_100011FDC(v32);
        long long v25 = sub_1000215A0(v32);
        id v26 = [v24 createTileForState:v25 childTiles:v19 withBundle:v4 privateBundle:v6];

        if (v26) {
          [*(id *)(*(void *)(*(void *)(v28 + 40) + 8) + 40) addObject:v26];
        }

LABEL_26:
      }
      id v31 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
      if (!v31)
      {
LABEL_28:

        id v3 = v27;
        break;
      }
    }
  }
}

void sub_10012F7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10012F7CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10012F86C;
  v4[3] = &unk_100739400;
  uint64_t v6 = *(void *)(a1 + 56);
  long long v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  long long v5 = v3;
  [v1 performCoordinatedAction:v4];
}

void sub_10012F86C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = +[NSFileManager defaultManager];
    long long v5 = [v3 path];
    uint64_t v6 = a1 + 40;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 fileExistsAtPath:v5];
  }
  else
  {
    uint64_t v6 = a1 + 40;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  if (*(unsigned char *)(*(void *)(*(void *)v6 + 8) + 24))
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = v3;
    if (qword_100808C50 != -1) {
      dispatch_once(&qword_100808C50, &stru_100739688);
    }
    if (qword_100808C58)
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = [v8 path];
        int v12 = 138412546;
        uint64_t v13 = v10;
        __int16 v14 = 2112;
        uint64_t v15 = qword_100808C58;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Unable to move %@ due to previous error: %@", (uint8_t *)&v12, 0x16u);
      }
      char v11 = 0;
    }
    else
    {
      char v11 = PKWriteBadPass();
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v11;
  }
}

void sub_10012FB78(uint64_t a1)
{
  id v5 = (id)PDOSTransactionCreate("PDCardFileManager");
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = [*(id *)(a1 + 32) _cachedImageSetContainerForUniqueID:*(void *)(a1 + 40) type:*(void *)(a1 + 72) withDisplayProfile:*(void *)(a1 + 48) displayTraits:*(void *)(a1 + 56)];
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
}

void sub_10012FD38(uint64_t a1)
{
  id v5 = (id)PDOSTransactionCreate("PDCardFileManager");
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = [*(id *)(a1 + 32) _imageSetContainerForUniqueID:*(void *)(a1 + 40) ofType:*(void *)(a1 + 72) withDisplayProfile:*(void *)(a1 + 48) suffix:*(void *)(a1 + 56)];
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
}

void sub_1001303BC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_100130424(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8) + 40;
  uint64_t v5 = *(void *)(a1[8] + 8) + 40;
  uint64_t v6 = *(void *)(a1[9] + 8) + 40;
  uint64_t v7 = *(void *)(a1[10] + 8) + 40;
  id obj = 0;
  unsigned __int8 v8 = objc_msgSend(v2, "_dc_writeCard:writtenCard:diff:daemonData:undecryptableAssets:error:", v3, v4, v5, v6, v7, &obj);
  id v9 = obj;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v8;
  objc_storeStrong((id *)(*(void *)(a1[11] + 8) + 40), v9);
}

void sub_1001305AC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  sub_10012EAF0();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = -[PDCardFileManager localNonUbiquitousCatalogURL]_0();
  [v1 writeToURL:v3 nonUbiquitousCatalogURL:v2 atomically:1];
}

void sub_100130764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013077C(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100130A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100130A84(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_dc_deleteCardWithUniqueID:cardDirectoryCoordinator:", *(void *)(a1 + 40), *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (_BYTE)result;
  return result;
}

id sub_100130FF4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_dc_performCacheMaintenanceActivity");
}

id sub_100131188(uint64_t a1)
{
  return [*(id *)(a1 + 32) _recursivelyCheckRevocationStatusForPassUniqueIdentifiers:*(void *)(a1 + 40) osTransaction:*(void *)(a1 + 48)];
}

void sub_1001312D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001312EC(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = PDDefaultQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001313C0;
  block[3] = &unk_1007394F0;
  id v10 = *(id *)(a1 + 32);
  char v12 = a2;
  char v13 = a3;
  long long v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  long long v11 = v8;
  dispatch_async(v6, block);
}

void sub_1001313C0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) passTypeIdentifier];
  uint64_t v3 = [*(id *)(a1 + 32) serialNumber];
  uint64_t v4 = +[NSString stringWithFormat:@"%@/%@", v2, v3];

  LODWORD(v3) = *(unsigned __int8 *)(a1 + 56);
  uint64_t v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (v6)
    {
      *(_DWORD *)buf = 138412290;
      char v13 = v4;
      id v10 = "Revocation check for pass [%@] failed";
      goto LABEL_11;
    }
LABEL_12:

    goto LABEL_13;
  }
  if (v6)
  {
    CFStringRef v7 = @"REVOKED";
    if (!*(unsigned char *)(a1 + 57)) {
      CFStringRef v7 = @"not revoked";
    }
    *(_DWORD *)buf = 138412546;
    char v13 = v4;
    __int16 v14 = 2112;
    CFStringRef v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Revocation check for pass [%@] succeeded with result: %@", buf, 0x16u);
  }

  long long v8 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v9 = [*(id *)(a1 + 32) uniqueID];
  [v8 notePassWithUniqueID:v9 isRevoked:*(unsigned __int8 *)(a1 + 57)];

  if (*(unsigned char *)(a1 + 57))
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      char v13 = v4;
      id v10 = "Certificate revoked for pass (%@)";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

void sub_100131808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100131820(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100131A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100131A34(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)result;
    id v3 = +[PKImageSet cachedXPCContainerForImageSetWithType:v2[8] displayProfile:v2[4] displayTraits:v2[5] cacheURL:v2[6]];
    uint64_t v4 = *(void *)(v2[7] + 8);
    uint64_t v5 = *(void *)(v4 + 40);
    *(void *)(v4 + 40) = v3;
    return _objc_release_x1(v3, v5);
  }
  return result;
}

id sub_100131A94(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = [*(id *)(a1 + 40) _objectURLForUniqueID:v3];
    int v7 = 138412546;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Content for object with unique ID %@ unavailable at %@", (uint8_t *)&v7, 0x16u);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CardFileManager unable to load content for uniqueID %@", (uint8_t *)&v7, 0xCu);
  }

  return [*(id *)(a1 + 40) _deletePossibleInvalidCardWithUniqueID:*(void *)(a1 + 32) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

void sub_100131E58(uint64_t a1, void *a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    BOOL v6 = [a2 path];
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to instantiate card from %@ - %@: %@", (uint8_t *)&v8, 0x20u);
  }
}

void sub_1001327D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001327F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 48));
  [WeakRetained removeMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 48)];
}

void sub_10013284C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    uint64_t v4 = sub_1002C515C((id *)[PDPassDaemonData alloc], v3);

    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    BOOL v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

void sub_1001328C4(uint64_t a1)
{
  id v2 = (id)PDOSTransactionCreate("PDCardFileManager");
  [*(id *)(a1 + 32) _createImageSetsForCardWithUniqueID:*(void *)(a1 + 40) cardDirectoryCoordinator:*(void *)(a1 + 48) displayProfile:*(void *)(a1 + 56)];
}

id sub_10013291C(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) isInvalidated];
  if ((result & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 48));
    [WeakRetained insertOrReplaceMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 56)];

    uint64_t v4 = *(void **)(a1 + 48);
    return [v4 _evaluateDownloadMissingAssetsActivityWithForcedReschedule:1];
  }
  return result;
}

void sub_100132BC4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  [WeakRetained removeMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 40)];
}

void sub_100133D6C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = *(void **)(a1 + 32);
  __int16 v12 = [*(id *)(a1 + 40) uniqueID];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100133E70;
  v15[3] = &unk_10072E598;
  id v13 = v9;
  id v17 = v13;
  id v14 = v8;
  id v16 = v14;
  [v11 _downloadRemoteAssetsForCardWithUniqueID:v12 completion:v15];
}

uint64_t sub_100133E70(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

id sub_100133E88(uint64_t a1)
{
  atomic_store(0, (unsigned __int8 *)(*(void *)(a1 + 32) + 56));
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: missing remote asset download activity finished.", v4, 2u);
  }

  return [*(id *)(a1 + 32) _evaluateDownloadMissingAssetsActivityWithForcedReschedule:0];
}

void sub_1001343EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v52 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100134440(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_dc_cardDirectoryCoordinatorForUniqueID:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100134490(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([*(id *)(*(void *)(a1[7] + 8) + 40) isInvalidated])
  {
    v9[2](v9, v8, 1);
  }
  else
  {
    uint64_t v11 = (void *)a1[4];
    uint64_t v12 = a1[5];
    uint64_t v13 = *(void *)(a1[6] + 80);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1001345C8;
    v14[3] = &unk_100734130;
    uint64_t v17 = a1[8];
    id v16 = v9;
    id v15 = v8;
    [v11 downloadRemoteAssetItem:v12 withCloudStoreCoordinatorDelegate:v13 completion:v14];
  }
}

uint64_t sub_1001345C8(void *a1, int a2)
{
  if (a2) {
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
  }
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], 0);
}

void sub_1001345F8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001346C0;
  v11[3] = &unk_10072E598;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1001346C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1001346D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) isInvalidated])
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8) {
      (*(void (**)(void))(v8 + 16))();
    }
    goto LABEL_20;
  }
  uint64_t v43 = 0;
  v44 = &v43;
  uint64_t v45 = 0x2020000000;
  char v46 = 0;
  unint64_t v10 = *(void *)(a1 + 80);
  unint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
  id v12 = PKLogFacilityTypeGetObject();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v11 >= v10)
  {
    if (v13)
    {
      unint64_t v16 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 134218242;
      unint64_t v48 = v10;
      __int16 v49 = 2112;
      unint64_t v50 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: Downloaded all %lu pending assets for pass with uniqueID:%@", buf, 0x16u);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 48));
    [WeakRetained removeMissingRemoteAssetsPersistentStoreItemWithUniqueID:*(void *)(a1 + 48)];

    *((unsigned char *)v44 + 24) = 1;
    goto LABEL_13;
  }
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 134218498;
    unint64_t v48 = v11;
    __int16 v49 = 2048;
    unint64_t v50 = v10;
    __int16 v51 = 2112;
    uint64_t v52 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDCardFileManager: Downloaded %lu of %lu pending assets for pass with uniqueID:%@", buf, 0x20u);
  }

  BOOL v15 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) != 0;
  *((unsigned char *)v44 + 24) = v15;
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    if (!v15) {
      goto LABEL_18;
    }
LABEL_13:
    id v18 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_100134B44;
    v40[3] = &unk_100739310;
    uint64_t v19 = *(void *)(a1 + 40);
    long long v20 = *(void **)(a1 + 48);
    v42 = &v43;
    v40[4] = v19;
    id v41 = v20;
    [v18 performCoordinatedAction:v40];
    long long v21 = [*(id *)(a1 + 40) _cardWithUniqueID:*(void *)(a1 + 48) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) error:0];
    id v22 = v21;
    if (v21)
    {
      long long v23 = [v21 displayProfile];
      id v24 = PDHeavyUtilityQueue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100134BF8;
      block[3] = &unk_1007395E0;
      long long v25 = *(void **)(a1 + 48);
      void block[4] = *(void *)(a1 + 40);
      id v26 = v25;
      uint64_t v27 = *(void *)(a1 + 64);
      id v38 = v23;
      uint64_t v39 = v27;
      id v37 = v26;
      id v28 = v23;
      dispatch_block_t v29 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
      dispatch_async(v24, v29);
    }
    if (*((unsigned char *)v44 + 24))
    {
      uint64_t v30 = PDDefaultQueue();
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_100134C58;
      v34[3] = &unk_10072E198;
      id v31 = *(void **)(a1 + 48);
      v34[4] = *(void *)(a1 + 40);
      id v35 = v31;
      dispatch_async(v30, v34);
    }
    goto LABEL_18;
  }
  id v33 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 48));
  [v33 incrementMissingRemoteAssetsPersistentStoreItemDownloadRetriesCountWithUniqueID:*(void *)(a1 + 48)];

  if (*((unsigned char *)v44 + 24)) {
    goto LABEL_13;
  }
LABEL_18:
  _Block_object_dispose(&v43, 8);
  uint64_t v32 = *(void *)(a1 + 56);
  if (v32) {
    (*(void (**)(void))(v32 + 16))();
  }
LABEL_20:
}

void sub_100134B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_100134B44(uint64_t a1, const __CFURL *a2)
{
  if (a2)
  {
    CFBundleRef v3 = CFBundleCreate(kCFAllocatorDefault, a2);
    if (v3)
    {
      CFBundleRef v4 = v3;
      _CFBundleFlushBundleCaches();
      CFRelease(v4);
    }
    id v6 = [*(id *)(a1 + 32) _cacheURLForUniqueID:*(void *)(a1 + 40)];
    uint64_t v5 = +[NSFileManager defaultManager];
    [v5 removeItemAtURL:v6 error:0];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
}

void sub_100134BF8(uint64_t a1)
{
  id v2 = (id)PDOSTransactionCreate("PDCardFileManager");
  [*(id *)(a1 + 32) _createImageSetsForCardWithUniqueID:*(void *)(a1 + 40) cardDirectoryCoordinator:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) displayProfile:*(void *)(a1 + 48)];
}

void sub_100134C58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  [WeakRetained cardFileManager:*(void *)(a1 + 32) didUpdateRemoteAssetsForPassWithUniqueID:*(void *)(a1 + 40)];
}

void sub_100134D5C(id a1)
{
  uint64_t v1 = PKCardsDirectoryURL();
  uint64_t v2 = qword_100808C18;
  qword_100808C18 = v1;
  _objc_release_x1(v1, v2);
}

void sub_100134D94(id a1)
{
  uint64_t v1 = PKCardsCatalogFileURL();
  uint64_t v2 = qword_100808C28;
  qword_100808C28 = v1;
  _objc_release_x1(v1, v2);
}

void sub_100134DCC(id a1)
{
  uint64_t v1 = PKCardsNonUbiquitousCatalogFileURL();
  uint64_t v2 = qword_100808C38;
  qword_100808C38 = v1;
  _objc_release_x1(v1, v2);
}

void sub_100134E04(id a1)
{
  uint64_t v1 = PKHomeDirectoryPath();
  uint64_t v2 = [v1 stringByAppendingPathComponent:@"BadLocalPasses"];
  CFBundleRef v3 = (void *)qword_100808C48;
  qword_100808C48 = v2;

  CFBundleRef v4 = +[NSFileManager defaultManager];
  id v15 = 0;
  unsigned __int8 v5 = [v4 createDirectoryAtPath:qword_100808C48 withIntermediateDirectories:1 attributes:0 error:&v15];
  id v6 = v15;

  if ((v5 & 1) == 0)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v19 = qword_100808C48;
      __int16 v20 = 2112;
      uint64_t v21 = qword_100808C58;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unable to create directory %@: %@", buf, 0x16u);
    }

    if (!v6)
    {
      id v8 = objc_alloc((Class)NSError);
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      id v9 = +[NSString stringWithFormat:@"{Failed to create directory=%@}", qword_100808C48];
      uint64_t v17 = v9;
      unint64_t v10 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
      id v6 = [v8 initWithDomain:PKPassKitErrorDomain code:-1 userInfo:v10];
    }
    unint64_t v11 = +[NSFileManager defaultManager];
    id v12 = PKHomeDirectoryPath();
    unsigned __int8 v13 = [v11 fileExistsAtPath:v12];

    if ((v13 & 1) == 0)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = PKHomeDirectoryPath();
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = (uint64_t)v14;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Home directory does not exist, failed to create intermediaries: %@", buf, 0xCu);
      }
    }
    objc_storeStrong((id *)&qword_100808C58, v6);
  }
}

void sub_10013526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100135284(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithValue:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (v2)
  {
    switch((unint64_t)[*(id *)(a1 + 32) type])
    {
      case 0uLL:
        CFBundleRef v3 = TileValueText;
        uint64_t v4 = [*(id *)(a1 + 32) valueTypeText];
        goto LABEL_7;
      case 1uLL:
        CFBundleRef v3 = TileValueDate;
        uint64_t v4 = [*(id *)(a1 + 32) valueTypeDate];
        goto LABEL_7;
      case 2uLL:
        CFBundleRef v3 = TileValueNumber;
        uint64_t v4 = [*(id *)(a1 + 32) valueTypeNumber];
        goto LABEL_7;
      case 3uLL:
        CFBundleRef v3 = TileValueForeignReference;
        uint64_t v4 = [*(id *)(a1 + 32) valueTypeForeignReference];
LABEL_7:
        unsigned __int8 v5 = (void *)v4;
        id v6 = [(__objc2_class *)v3 insertValue:v4 forBaseValue:v2 inDatabase:*(void *)(a1 + 40)];

        if (v6) {
          goto LABEL_8;
        }
        goto LABEL_9;
      default:
LABEL_8:
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v2);
        uint64_t v7 = 1;
        break;
    }
  }
  else
  {
LABEL_9:
    uint64_t v7 = 0;
  }

  return v7;
}

id *sub_1001355B8(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  unint64_t v11 = 0;
  if (a1 && v8 && v9)
  {
    v15.receiver = a1;
    v15.super_class = (Class)PDPassTileDescriptorDescriptorStatePair;
    id v12 = (id *)objc_msgSendSuper2(&v15, "init");
    unsigned __int8 v13 = v12;
    if (v12)
    {
      objc_storeStrong(v12 + 1, a2);
      objc_storeStrong(v13 + 2, a3);
      objc_storeStrong(v13 + 3, a4);
    }
    a1 = v13;
    unint64_t v11 = a1;
  }

  return v11;
}

void sub_100135A10(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100135B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 48);
  id v5 = [*(id *)(a1 + 32) database];
  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = +[NSNumber numberWithLongLong:a2];
  id v8 = [v6 _predicateForPersistentID:v7];
  id v11 = [v4 anyInDatabase:v5 predicate:v8];

  id v9 = *(void **)(a1 + 40);
  id v10 = [v11 _verificationAttempt];
  [v9 safelyAddObject:v10];
}

void sub_100135E54(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountFundingSourceVerificationAttempt setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100135EAC(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  CFBundleRef v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountFundingSourceVerificationAttempt *)v3 setSentDate:v4];
}

void sub_100135F0C(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  CFBundleRef v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountFundingSourceVerificationAttempt *)v3 setExpiryDate:v4];
}

void sub_100135F6C(id a1, PKAccountFundingSourceVerificationAttempt *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFundingSourceVerificationAttempt setFailureReason:](v4, "setFailureReason:", [a3 integerValue]);
}

id PDSharesFromLegacyCarKeyTables(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = [v4 uniqueID];
  id v6 = [v4 devicePrimaryPaymentApplication];

  uint64_t v7 = [v6 subcredentials];
  id v8 = [v7 anyObject];
  id v9 = [v8 identifier];

  if (v9)
  {
    id v10 = +[AppletSubcredential appletSubcredentialWithIdentifier:v9 inDatabase:v3];
    if (v10)
    {
      dispatch_block_t v29 = v3;
      uint64_t v27 = v10;
      id v11 = [v10 persistentID];
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        id v40 = v5;
        __int16 v41 = 2112;
        v42 = v9;
        __int16 v43 = 2048;
        id v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CarKeyDatabaseMigration: Migrating shares for pass %@, subcredential: %@ (pid: %lld)", buf, 0x20u);
      }
      id v28 = v5;

      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_10013642C;
      v36[3] = &unk_100739790;
      id v13 = objc_alloc_init((Class)NSMutableArray);
      id v37 = v13;
      id v38 = v9;
      uint64_t v14 = objc_retainBlock(v36);
      objc_super v15 = +[NSNumber numberWithLongLong:v11];
      NSErrorUserInfoKey v16 = +[SQLiteComparisonPredicate predicateWithProperty:@"b" equalToValue:v15];
      uint64_t v17 = +[SQLiteEntity queryWithDatabase:v29 predicate:v16];

      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_100136580;
      v33[3] = &unk_1007397B8;
      id v18 = v29;
      id v34 = v18;
      uint64_t v19 = v14;
      id v35 = v19;
      [v17 enumeratePersistentIDsUsingBlock:v33];
      __int16 v20 = +[NSNumber numberWithLongLong:v11];
      uint64_t v21 = +[SQLiteComparisonPredicate predicateWithProperty:@"a" equalToValue:v20];
      id v22 = +[SQLiteEntity queryWithDatabase:v18 predicate:v21];

      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_100136B00;
      v30[3] = &unk_1007397B8;
      id v31 = v18;
      id v32 = v19;
      long long v23 = v19;
      [v22 enumeratePersistentIDsUsingBlock:v30];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v40 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CarKeyDatabaseMigration: migrating shares from old tables before deleting: %@", buf, 0xCu);
      }

      id v24 = v32;
      id v25 = v13;

      id v10 = v27;
      id v5 = v28;
      id v3 = v29;
    }
    else
    {
      id v25 = 0;
    }
  }
  else
  {
    id v25 = 0;
  }

  return v25;
}

id sub_10013642C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      for (id i = 0; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v3, "isSameUnderlyingShareAs:", v9, (void)v12))
        {
          id v10 = v9;

          goto LABEL_11;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  [v3 setSubcredentialIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) addObject:v3];
  id v10 = v3;
LABEL_11:

  return v10;
}

void sub_100136580(uint64_t a1, void *a2)
{
  id v4 = [(SQLiteEntity *)[AppletSubcredentialInvitationReceipt alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v5 = +[NSNumber numberWithLongLong:[(SQLiteEntity *)v4 persistentID]];
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"b" equalToValue:v5];

  uint64_t v7 = +[SQLiteEntity anyInDatabase:*(void *)(a1 + 32) predicate:v6];
  if (v7)
  {
    id v8 = v4;
    id v9 = objc_alloc_init((Class)PKPassCredentialShare);
    id v10 = [(SQLiteEntity *)v8 valueForProperty:@"a"];
    [v9 setIdentifier:v10];

    id v11 = [v7 valueForProperty:@"e"];
    [v9 setChannelTransportIdentifier:v11];

    long long v12 = [v7 valueForProperty:@"c"];
    unsigned int v13 = [v12 BOOLValue];

    long long v14 = [(SQLiteEntity *)v8 valueForProperty:@"f"];

    unsigned int v15 = [v14 BOOLValue];
    uint64_t v16 = 4;
    if (!v15) {
      uint64_t v16 = 5;
    }
    if (v13) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = v15;
    }
    [v9 setTargetDevice:v17];
    [v9 setStatus:2];
    id v18 = [v7 valueForProperty:@"f"];
    unsigned int v19 = [v18 BOOLValue];

    if (v19)
    {
      __int16 v20 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 138412290;
        id v27 = v9;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CarKeyDatabaseMigration: discarding credential share from invite because revoked. %@", (uint8_t *)&v26, 0xCu);
      }

      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = v9;
    }

    if (v21)
    {
      uint64_t v22 = *(void *)(a1 + 40);
      long long v23 = sub_100136908(v7);
      id v24 = (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v23);

      [v24 addCredentialShare:v21];
      [v24 setManageability:1];
      id v25 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = 134218498;
        id v27 = a2;
        __int16 v28 = 2112;
        dispatch_block_t v29 = v21;
        __int16 v30 = 2112;
        id v31 = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CarKeyDatabaseMigration: Migrating invite %lld and creating new credential share: %@ \n Share: %@", (uint8_t *)&v26, 0x20u);
      }
    }
  }
  else
  {
    uint64_t v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v26) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CarKeyDatabaseMigration: Unable to find metadata for invite", (uint8_t *)&v26, 2u);
    }
  }
}

id sub_100136908(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)PKPassShare);
  id v3 = [v1 valueForProperty:@"i"];
  [v2 setGroupIdentifier:v3];
  id v4 = [v1 valueForProperty:@"h"];
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", objc_msgSend(v4, "bytes"));
    uint64_t v7 = [v6 UUIDString];
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v7) {
    id v8 = v7;
  }
  else {
    id v8 = v3;
  }
  [v2 setIdentifier:v8];

  id v9 = [v1 valueForProperty:@"g"];
  id v10 = [v9 unsignedIntegerValue];

  id v11 = [objc_alloc((Class)PKPassSharedEntitlement) initWithCarKeyEntitlementValue:v10];
  id v17 = v11;
  long long v12 = +[NSArray arrayWithObjects:&v17 count:1];
  [v2 setSharedEntitlements:v12];

  unsigned int v13 = [v1 valueForProperty:@"c"];
  unsigned __int8 v14 = [v13 BOOLValue];

  if ((v14 & 1) == 0)
  {
    unsigned int v15 = [v1 valueForProperty:@"e"];
    [v2 setRecipientHandle:v15];
  }
  [v2 setManageability:1];

  return v2;
}

void sub_100136B00(uint64_t a1, uint64_t a2)
{
  id v4 = [(SQLiteEntity *)[SharedAppletSubcredential alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v5 = +[NSNumber numberWithLongLong:[(SQLiteEntity *)v4 persistentID]];
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"a" equalToValue:v5];

  uint64_t v7 = +[SQLiteEntity anyInDatabase:*(void *)(a1 + 32) predicate:v6];
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = sub_100136908(v7);
    id v11 = (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);

    long long v12 = v4;
    id v13 = v8;
    id v14 = objc_alloc_init((Class)PKPassCredentialShare);
    unsigned int v15 = [(SQLiteEntity *)v12 valueForProperty:@"b"];
    [v14 setIdentifier:v15];

    uint64_t v16 = [v13 valueForProperty:@"d"];
    [v14 setChannelTransportIdentifier:v16];

    id v17 = [v13 valueForProperty:@"c"];

    LODWORD(v13) = [v17 BOOLValue];
    if (v13) {
      uint64_t v18 = 4;
    }
    else {
      uint64_t v18 = 0;
    }
    [v14 setTargetDevice:v18];
    unsigned int v19 = [(SQLiteEntity *)v12 valueForProperty:@"d"];
    unint64_t v20 = (unint64_t)[v19 integerValue];

    uint64_t v21 = 0;
    if (v20 <= 5) {
      uint64_t v21 = qword_1005B3550[v20];
    }
    [v14 setStatus:v21];

    uint64_t v22 = [(SQLiteEntity *)v12 valueForProperty:@"c"];
    [v11 setRecipientNickname:v22];

    [v11 addCredentialShare:v14];
    [v11 setManageability:1];
    long long v23 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = 134218498;
      uint64_t v25 = a2;
      __int16 v26 = 2112;
      id v27 = v14;
      __int16 v28 = 2112;
      dispatch_block_t v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CarKeyDatabaseMigration: Migrating shared subcredential %lld and creating new credential share: %@ \n Share: %@", (uint8_t *)&v24, 0x20u);
    }
  }
  else
  {
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v24) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CarKeyDatabaseMigration: Unable to find metadata for shared subcredential", (uint8_t *)&v24, 2u);
    }
  }
}

uint64_t PDUEEKeyFromString(void *a1)
{
  id v1 = a1;
  if ([@"currentRegion" isEqualToString:v1])
  {
    uint64_t v2 = 1;
  }
  else if ([@"isApplePayActive" isEqualToString:v1])
  {
    uint64_t v2 = 2;
  }
  else if ([@"isApplePaySetupAvailable" isEqualToString:v1])
  {
    uint64_t v2 = 104;
  }
  else if ([@"isPrimaryAppleAccountVerified" isEqualToString:v1])
  {
    uint64_t v2 = 105;
  }
  else if ([@"isDeviceRegisteredWithBroker" isEqualToString:v1])
  {
    uint64_t v2 = 106;
  }
  else if ([@"hasPaymentCard" isEqualToString:v1])
  {
    uint64_t v2 = 107;
  }
  else if ([@"hasDebitCard" isEqualToString:v1])
  {
    uint64_t v2 = 108;
  }
  else if ([@"hasApplePayTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 109;
  }
  else if ([@"daysSinceLastTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 110;
  }
  else if ([@"daysSinceOldestPaymentPassIngestDate" isEqualToString:v1])
  {
    uint64_t v2 = 111;
  }
  else if ([@"daysSinceOldestCreditCardIngestDate" isEqualToString:v1])
  {
    uint64_t v2 = 112;
  }
  else if ([@"defaultCreditAccountSetupFeatureState" isEqualToString:v1])
  {
    uint64_t v2 = 3;
  }
  else if ([@"hasDefaultCreditAccount" isEqualToString:v1])
  {
    uint64_t v2 = 4;
  }
  else if ([@"defaultCreditAccountState" isEqualToString:v1])
  {
    uint64_t v2 = 5;
  }
  else if ([@"defaultCreditAccountLifetimeRewards" isEqualToString:v1])
  {
    uint64_t v2 = 6;
  }
  else if ([@"defaultCreditAccountHasPhysicalCard" isEqualToString:v1])
  {
    uint64_t v2 = 7;
  }
  else if ([@"defaultCreditAccountHasVirtualCard" isEqualToString:v1])
  {
    uint64_t v2 = 8;
  }
  else if ([@"defaultCreditAccountHasDynamicSecurityCode" isEqualToString:v1])
  {
    uint64_t v2 = 9;
  }
  else if ([@"defaultCreditAccountRequiresDebtCollectionNotices" isEqualToString:v1])
  {
    uint64_t v2 = 10;
  }
  else if ([@"defaultCreditAccountBalanceStatus" isEqualToString:v1])
  {
    uint64_t v2 = 11;
  }
  else if ([@"defaultCreditAccountCyclesPastDue" isEqualToString:v1])
  {
    uint64_t v2 = 12;
  }
  else if ([@"defaultCreditAccountInGrace" isEqualToString:v1])
  {
    uint64_t v2 = 13;
  }
  else if ([@"defaultCreditAccountInDisasterRecovery" isEqualToString:v1])
  {
    uint64_t v2 = 14;
  }
  else if ([@"defaultCreditAccountHasDisputeOpen" isEqualToString:v1])
  {
    uint64_t v2 = 15;
  }
  else if ([@"defaultCreditAccountDaysSinceDisputeOpened" isEqualToString:v1])
  {
    uint64_t v2 = 16;
  }
  else if ([@"defaultCreditAccountAvailableCredit" isEqualToString:v1])
  {
    uint64_t v2 = 17;
  }
  else if ([@"defaultCreditAccountSupportsShowNotifications" isEqualToString:v1])
  {
    uint64_t v2 = 18;
  }
  else if ([@"defaultCreditAccountPassIsDefault" isEqualToString:v1])
  {
    uint64_t v2 = 19;
  }
  else if ([@"defaultCreditAccountDaysSinceLastTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 20;
  }
  else if ([@"defaultCreditAccountHasInStoreTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 21;
  }
  else if ([@"defaultCreditAccountHasInAppTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 22;
  }
  else if ([@"defaultCreditAccountHasWebTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 23;
  }
  else if ([@"defaultCreditAccountHasVirtualCardTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 24;
  }
  else if ([@"defaultCreditAccountHasPhysicalCardTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 25;
  }
  else if ([@"defaultCreditAccountDaysSinceCreatedDate" isEqualToString:v1])
  {
    uint64_t v2 = 26;
  }
  else if ([@"defaultCreditAccountMerchantIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 31;
  }
  else if ([@"defaultCreditAccountMerchantIdentifiersLast30Days" isEqualToString:v1])
  {
    uint64_t v2 = 32;
  }
  else if ([@"defaultCreditAccountMapsIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 33;
  }
  else if ([@"defaultCreditAccountMapsIdentifiersLast30Days" isEqualToString:v1])
  {
    uint64_t v2 = 34;
  }
  else if ([@"defaultCreditAccountMapsBrandIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 35;
  }
  else if ([@"defaultCreditAccountMapsBrandIdentifiersLast30Days" isEqualToString:v1])
  {
    uint64_t v2 = 36;
  }
  else if ([@"defaultCreditApplicationCount" isEqualToString:v1])
  {
    uint64_t v2 = 37;
  }
  else if ([@"currentDefaultCreditApplictionDaysSinceLastUpdated" isEqualToString:v1])
  {
    uint64_t v2 = 38;
  }
  else if ([@"currentDefaultCreditApplicationState" isEqualToString:v1])
  {
    uint64_t v2 = 39;
  }
  else if ([@"defaultCreditAccountHasAutopaySetup" isEqual:v1])
  {
    uint64_t v2 = 50;
  }
  else if ([@"defaultCreditAccountIsShared" isEqualToString:v1])
  {
    uint64_t v2 = 40;
  }
  else if ([@"defaultCreditAccountAccessLevel" isEqualToString:v1])
  {
    uint64_t v2 = 41;
  }
  else if ([@"defaultCreditAccountIsCoOwner" isEqualToString:v1])
  {
    uint64_t v2 = 42;
  }
  else if ([@"defaultCreditAccountParticipantUsersCount" isEqualToString:v1])
  {
    uint64_t v2 = 43;
  }
  else if ([@"defaultCreditAccountHasUnderageParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 44;
  }
  else if ([@"defaultCreditAccountPhysicalAppleCardStatus" isEqualToString:v1])
  {
    uint64_t v2 = 45;
  }
  else if ([@"daysSincePhysicalAppleCardShipmentUpdate" isEqualToString:v1])
  {
    uint64_t v2 = 46;
  }
  else if ([@"defaultCreditAccountActivePromotionIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 47;
  }
  else if ([@"defaultCreditAccountActivePromotionIdentifiersExpiringSoon" isEqualToString:v1])
  {
    uint64_t v2 = 48;
  }
  else if ([@"defaultCreditAccountDaysUntilActivePromotionExpires" isEqualToString:v1])
  {
    uint64_t v2 = 49;
  }
  else if ([@"anyCreditAccountStateIsClosed" isEqualToString:v1])
  {
    uint64_t v2 = 51;
  }
  else if ([@"anyCreditAccountStateIsRemoved" isEqualToString:v1])
  {
    uint64_t v2 = 52;
  }
  else if ([@"hasPeerPaymentAccount" isEqualToString:v1])
  {
    uint64_t v2 = 64;
  }
  else if ([@"hasPeerPaymentPassProvisioned" isEqualToString:v1])
  {
    uint64_t v2 = 65;
  }
  else if ([@"peerPaymentAccountState" isEqualToString:v1])
  {
    uint64_t v2 = 66;
  }
  else if ([@"peerPaymentAccountStage" isEqualToString:v1])
  {
    uint64_t v2 = 68;
  }
  else if ([@"peerPaymentAccountStateReason" isEqualToString:v1])
  {
    uint64_t v2 = 67;
  }
  else if ([@"peerPaymentAccountHasTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 69;
  }
  else if ([@"peerPaymentAccountHasContactlessTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 71;
  }
  else if ([@"peerPaymentHasOnlinePurchaseTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 70;
  }
  else if ([@"daysSinceLastPeerPaymentTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 72;
  }
  else if ([@"peerPaymentDaysSinceLastP2PTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 73;
  }
  else if ([@"peerPaymentDaysSinceLastP2PTransactionToAnyParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 74;
  }
  else if ([@"peerPaymentAccountHasBalance" isEqualToString:v1])
  {
    uint64_t v2 = 75;
  }
  else if ([@"peerPaymentAccountBalanceBase" isEqualToString:v1])
  {
    uint64_t v2 = 76;
  }
  else if ([@"peerPaymentHasP2PTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 83;
  }
  else if ([@"peerPaymentHasAutoReloadEnabled" isEqualToString:v1])
  {
    uint64_t v2 = 84;
  }
  else if ([@"peerPaymentHasSetupRecurringP2PPayment" isEqualToString:v1])
  {
    uint64_t v2 = 85;
  }
  else if ([@"peerPaymentHasSetupRecurringP2PPaymentForAnyParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 86;
  }
  else if ([@"peerPaymentDaysSinceLastPurchaseTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 87;
  }
  else if ([@"peerPaymentHasSentP2PPayment" isEqualToString:v1])
  {
    uint64_t v2 = 88;
  }
  else if ([@"peerPaymentHasReceivedP2PPayment" isEqualToString:v1])
  {
    uint64_t v2 = 89;
  }
  else if ([@"peerPaymentHasSentDeviceTapTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 90;
  }
  else if ([@"peerPaymentHasReceivedDeviceTapTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 91;
  }
  else if ([@"peerPaymentNumberOfDeviceTapTransactions" isEqualToString:v1])
  {
    uint64_t v2 = 92;
  }
  else if ([@"daysSinceLastDeviceTapSendTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 93;
  }
  else if ([@"deviceLanguage" isEqualToString:v1])
  {
    uint64_t v2 = 77;
  }
  else if ([@"defaultCreditAccountHasActiveInstallment" isEqualToString:v1])
  {
    uint64_t v2 = 27;
  }
  else if ([@"defaultCreditAccountHasUsedInstallments" isEqualToString:v1])
  {
    uint64_t v2 = 28;
  }
  else if ([@"defaultCreditAccountSupportedDestinations" isEqualToString:v1])
  {
    uint64_t v2 = 29;
  }
  else if ([@"defaultCreditAccountRewardsDestination" isEqualToString:v1])
  {
    uint64_t v2 = 30;
  }
  else if ([@"merchantIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 59;
  }
  else if ([@"mapsIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 60;
  }
  else if ([@"mapsBrandIdentifiers" isEqualToString:v1])
  {
    uint64_t v2 = 61;
  }
  else if ([@"hasPaymentTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 62;
  }
  else if ([@"hasTransitTransaction" isEqualToString:v1])
  {
    uint64_t v2 = 63;
  }
  else if ([@"peerPaymentAccountRole" isEqualToString:v1])
  {
    uint64_t v2 = 78;
  }
  else if ([@"peerPaymentAccountDaysSinceCreatedDate" isEqualToString:v1])
  {
    uint64_t v2 = 79;
  }
  else if ([@"peerPaymentAccountDaysSinceIdentifiedDate" isEqualToString:v1])
  {
    uint64_t v2 = 80;
  }
  else if ([@"daysSinceParticipantPeerPaymentAccountIdentifiedDate" isEqualToString:v1])
  {
    uint64_t v2 = 81;
  }
  else if ([@"peerPaymentAccountHasSentMoneyToAnyParticipant" isEqualToString:v1])
  {
    uint64_t v2 = 82;
  }
  else if ([@"passStyles" isEqualToString:v1])
  {
    uint64_t v2 = 53;
  }
  else if ([@"unexpiredPassStyles" isEqualToString:v1])
  {
    uint64_t v2 = 54;
  }
  else if ([@"secureElementCardTypes" isEqualToString:v1])
  {
    uint64_t v2 = 55;
  }
  else if ([@"unexpiredSecureElementCardTypes" isEqualToString:v1])
  {
    uint64_t v2 = 56;
  }
  else if ([@"transitNetworksPresent" isEqualToString:v1])
  {
    uint64_t v2 = 57;
  }
  else if ([@"transitNetworksPresentAndUnexpired" isEqualToString:v1])
  {
    uint64_t v2 = 58;
  }
  else if ([@"peerPaymentFamilyParticipantAccounts" isEqualToString:v1])
  {
    uint64_t v2 = 94;
  }
  else if ([@"familyCircleFamilyOrganizer" isEqualToString:v1])
  {
    uint64_t v2 = 95;
  }
  else if ([@"familyCircleParent" isEqualToString:v1])
  {
    uint64_t v2 = 96;
  }
  else if ([@"familyCircleHasFamily" isEqualToString:v1])
  {
    uint64_t v2 = 97;
  }
  else if ([@"familyCircleCurrentUserAge" isEqualToString:v1])
  {
    uint64_t v2 = 98;
  }
  else if ([@"familyCircleMembersUnderAge" isEqualToString:v1])
  {
    uint64_t v2 = 99;
  }
  else if ([@"familyCircleMembersCount" isEqualToString:v1])
  {
    uint64_t v2 = 100;
  }
  else if ([@"familyCircleDaysSinceNewestJoinedDate" isEqualToString:v1])
  {
    uint64_t v2 = 101;
  }
  else if ([@"familyCircleMinimumMemberAge" isEqualToString:v1])
  {
    uint64_t v2 = 102;
  }
  else if ([@"familyCircleAgeCategory" isEqualToString:v1])
  {
    uint64_t v2 = 103;
  }
  else if ([@"discoveryItemsWithActiveStatus" isEqualToString:v1])
  {
    uint64_t v2 = 113;
  }
  else if ([@"discoveryItemsWithActionedStatus" isEqualToString:v1])
  {
    uint64_t v2 = 114;
  }
  else if ([@"discoveryItemsWithDismissedStatus" isEqualToString:v1])
  {
    uint64_t v2 = 115;
  }
  else if ([@"discoveryItemsWithWaitingForTriggerStatus" isEqualToString:v1])
  {
    uint64_t v2 = 116;
  }
  else if ([@"discoveryItemsExpanded" isEqualToString:v1])
  {
    uint64_t v2 = 117;
  }
  else if ([@"discoveryItemsDismissed" isEqualToString:v1])
  {
    uint64_t v2 = 118;
  }
  else if ([@"discoveryCTAsTapped" isEqualToString:v1])
  {
    uint64_t v2 = 119;
  }
  else if ([@"discoveryCTAsCompleted" isEqualToString:v1])
  {
    uint64_t v2 = 120;
  }
  else if ([@"sentTransitDCINotifications" isEqualToString:v1])
  {
    uint64_t v2 = 121;
  }
  else if ([@"sentTransitOpenLoopUpgradeNotifications" isEqualToString:v1])
  {
    uint64_t v2 = 122;
  }
  else if ([@"sentTransitOpenLoopRenotifiedInMarketNotifications" isEqualToString:v1])
  {
    uint64_t v2 = 123;
  }
  else if ([@"cardTypesWithExpressEnabled" isEqualToString:v1])
  {
    uint64_t v2 = 124;
  }
  else if ([@"supportedMarketsForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 125;
  }
  else if ([@"supportedTransitMarketsForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 126;
  }
  else if ([@"supportedTransitNetworksForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 127;
  }
  else if ([@"expressTransitNetworksForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 128;
  }
  else if ([@"hasTransitPassForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 129;
  }
  else if ([@"hasUnexpiredTransitPassForCurrentLocation" isEqualToString:v1])
  {
    uint64_t v2 = 130;
  }
  else
  {
    id v3 = [v1 componentsSeparatedByString:@"."];
    id v4 = [v3 firstObject];
    unsigned __int8 v5 = [@"currentPlacemark" isEqualToString:v4];

    if (v5)
    {
      uint64_t v2 = 131;
    }
    else if ([@"hasPayLaterAccount" isEqualToString:v1])
    {
      uint64_t v2 = 132;
    }
    else if ([@"isPayLaterHidden" isEqualToString:v1])
    {
      uint64_t v2 = 133;
    }
    else if ([@"hasEverProvisionedPayLaterPass" isEqualToString:v1])
    {
      uint64_t v2 = 134;
    }
    else if ([@"hasPayLaterPass" isEqualToString:v1])
    {
      uint64_t v2 = 135;
    }
    else if ([@"payLaterNumberOfLoans" isEqualToString:v1])
    {
      uint64_t v2 = 136;
    }
    else if ([@"payLaterDaysSinceFirstActiveLoan" isEqualToString:v1])
    {
      uint64_t v2 = 137;
    }
    else if ([@"payLaterNumberOfActiveLoans" isEqualToString:v1])
    {
      uint64_t v2 = 138;
    }
    else if ([@"payLaterNumberOfPendingLoans" isEqualToString:v1])
    {
      uint64_t v2 = 139;
    }
    else if ([@"payLaterNumberOfDelinquentLoans" isEqualToString:v1])
    {
      uint64_t v2 = 140;
    }
    else if ([@"payLaterNumberOfCanceledLoans" isEqualToString:v1])
    {
      uint64_t v2 = 141;
    }
    else if ([@"payLaterNumberOfCompleteLoans" isEqualToString:v1])
    {
      uint64_t v2 = 142;
    }
    else if ([@"hasSavingsAccount" isEqualToString:v1])
    {
      uint64_t v2 = 143;
    }
    else if ([@"savingsAccountDaysSinceCreatedDate" isEqualToString:v1])
    {
      uint64_t v2 = 144;
    }
    else if ([@"savingsAccountHasExternalTransferIn" isEqualToString:v1])
    {
      uint64_t v2 = 145;
    }
    else if ([@"savingsAccountHasExternalTransferOut" isEqualToString:v1])
    {
      uint64_t v2 = 146;
    }
    else if ([@"savingsAccountHasCashTransferIn" isEqualToString:v1])
    {
      uint64_t v2 = 147;
    }
    else if ([@"savingsAccountBinnedBalance" isEqualToString:v1])
    {
      uint64_t v2 = 148;
    }
    else if ([@"installedApps" isEqualToString:v1])
    {
      uint64_t v2 = 149;
    }
    else if ([@"hasPairedWatch" isEqualToString:v1])
    {
      uint64_t v2 = 150;
    }
    else if ([@"enrolledAuthenticationMechanisms" isEqualToString:v1])
    {
      uint64_t v2 = 151;
    }
    else
    {
      id v6 = (__CFString *)v1;
      if (v6 == @"hasIssuerInstallmentCard") {
        goto LABEL_306;
      }
      uint64_t v2 = (uint64_t)v6;
      if (!v6) {
        goto LABEL_329;
      }
      unsigned __int8 v7 = [@"hasIssuerInstallmentCard" isEqualToString:v6];

      if (v7)
      {
LABEL_306:
        uint64_t v2 = 152;
        goto LABEL_329;
      }
      id v8 = (__CFString *)(id)v2;
      if (v8 == @"hasEverMadeIssuerInstallmentTransaction"
        || (uint64_t v9 = v8,
            unsigned __int8 v10 = [@"hasEverMadeIssuerInstallmentTransaction" isEqualToString:v8], v9, (v10 & 1) != 0))
      {
        uint64_t v2 = 153;
      }
      else
      {
        id v11 = v9;
        if (v11 == @"hasBankConnectEligibleCard"
          || (long long v12 = v11,
              unsigned __int8 v13 = [@"hasBankConnectEligibleCard" isEqualToString:v11],
              v12,
              (v13 & 1) != 0))
        {
          uint64_t v2 = 154;
        }
        else
        {
          id v14 = v12;
          if (v14 == @"hasAnyConnectedCardWithBankConnect"
            || (unsigned int v15 = v14,
                unsigned __int8 v16 = [@"hasAnyConnectedCardWithBankConnect" isEqualToString:v14], v15, (v16 & 1) != 0))
          {
            uint64_t v2 = 155;
          }
          else
          {
            id v17 = v15;
            if (v17 == @"hasRewardsCard"
              || (uint64_t v18 = v17,
                  unsigned __int8 v19 = [@"hasRewardsCard" isEqualToString:v17],
                  v18,
                  (v19 & 1) != 0))
            {
              uint64_t v2 = 156;
            }
            else
            {
              unint64_t v20 = v18;
              if (v20 == @"hasEverMadeRewardsTransaction"
                || (uint64_t v21 = v20,
                    unsigned __int8 v22 = [@"hasEverMadeRewardsTransaction" isEqualToString:v20],
                    v21,
                    (v22 & 1) != 0))
              {
                uint64_t v2 = 157;
              }
              else
              {
                long long v23 = v21;
                if (v23 == @"hasAppleAccountCardProvisioned"
                  || (int v24 = v23,
                      unsigned __int8 v25 = [@"hasAppleAccountCardProvisioned" isEqualToString:v23], v24, (v25 & 1) != 0))
                {
                  uint64_t v2 = 158;
                }
                else
                {
                  __int16 v26 = v24;
                  if (v26 == @"daysSinceAppleAccountInStoreTopUp"
                    || (id v27 = v26,
                        unsigned int v28 = [@"daysSinceAppleAccountInStoreTopUp" isEqualToString:v26], v27, v28))
                  {
                    uint64_t v2 = 159;
                  }
                  else
                  {
                    uint64_t v2 = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_329:

  return v2;
}

BOOL sub_1001394C4(id a1, PKPaymentPass *a2, BOOL *a3)
{
  id v3 = a2;
  if ([(PKPaymentPass *)v3 hasAssociatedPeerPaymentAccount])
  {
    if ([(PKPaymentPass *)v3 hasAssociatedPeerPaymentAccount]) {
      BOOL v4 = (id)[(PKPaymentPass *)v3 activationState] != (id)4;
    }
    else {
      BOOL v4 = 0;
    }
  }
  else
  {
    BOOL v4 = 1;
  }

  return v4;
}

BOOL sub_100139760(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [v3 uniqueID];
  unsigned __int8 v5 = *(void **)(a1 + 32);
  id v6 = v4;
  id v7 = v5;
  if (v6 == v7)
  {

    BOOL v10 = 0;
    id v11 = v6;
LABEL_9:

    goto LABEL_10;
  }
  id v8 = v7;
  if (!v6 || !v7)
  {

    goto LABEL_8;
  }
  unsigned __int8 v9 = [v6 isEqualToString:v7];

  if ((v9 & 1) == 0)
  {
LABEL_8:
    id v11 = [v3 devicePrimaryPaymentApplication];
    BOOL v10 = [v11 paymentType] == (id)2;
    goto LABEL_9;
  }
  BOOL v10 = 0;
LABEL_10:

  return v10;
}

void sub_1001398D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001398EC(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ([v6 type] == (id)1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 state];
    *a4 = 1;
  }
}

BOOL sub_10013A588(id a1, PKAccountPayment *a2)
{
  return [(PKAccountPayment *)a2 isRecurring];
}

id sub_10013E998(id a1, PKFamilyMember *a2)
{
  return [(PKFamilyMember *)a2 joinedDate];
}

BOOL sub_10013F340(id a1, PKPayLaterFinancingPlan *a2, unint64_t a3, BOOL *a4)
{
  unint64_t v4 = (unint64_t)[(PKPayLaterFinancingPlan *)a2 state];
  return (v4 > 8) | (0x52u >> v4) & 1;
}

BOOL sub_10013F574(uint64_t a1, void *a2)
{
  return [a2 productType] == *(id *)(a1 + 32);
}

BOOL sub_10013F618(uint64_t a1, void *a2)
{
  return [a2 state] == *(id *)(a1 + 32);
}

BOOL sub_10013FAF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 type] == *(id *)(a1 + 32))
  {
    unint64_t v4 = [v3 associatedPassUniqueID];
    if (v4) {
      BOOL v5 = [v3 eligibility] == (id)1;
    }
    else {
      BOOL v5 = 0;
    }
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_100141570(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10014161C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 11, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100141698(uint64_t a1, void *a2)
{
  id v18 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong((id *)WeakRetained + 16, a2);
    id v6 = [v18 altDSID];
    id v7 = [v5 _unactivatedPhysicalCardForAltDSID:v6];

    id v8 = [v7 latestShippingActivity];
    unsigned __int8 v9 = [v7 latestOrderActivity];
    BOOL v10 = v9;
    if (v7 && v8)
    {
      if (((unint64_t)[v8 shippingStatus] | 2) != 3)
      {
LABEL_13:
        [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];

        goto LABEL_14;
      }
      id v11 = [v8 shippingStatus];
      uint64_t v12 = 2;
      if (v11 != (id)1) {
        uint64_t v12 = 3;
      }
      v5[14] = v12;
      unsigned __int8 v13 = +[NSDate date];
      uint64_t v14 = [v8 timestamp];
    }
    else
    {
      if (!v7 || !v9 || [v9 activity] != (id)1) {
        goto LABEL_13;
      }
      v5[14] = 1;
      unsigned __int8 v13 = +[NSDate date];
      uint64_t v14 = [v10 date];
    }
    unsigned int v15 = (void *)v14;
    [v13 timeIntervalSinceDate:v14];
    double v17 = v16;

    v5[15] = vcvtmd_s64_f64(v17 / 86400.0);
    goto LABEL_13;
  }
LABEL_14:
}

void sub_100141848(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 23, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_1001418C4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = [WeakRetained[5] paymentSetupFeaturesCoordinator];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10014199C;
    v8[3] = &unk_10072E4F8;
    void v8[4] = v6;
    [v7 hasCachedPaymentSetupFeatures:v8];

    objc_storeStrong(v6 + 24, a2);
    [v6 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_10014199C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) paymentSetupFeaturesCoordinator];
    [v3 scheduleStaticPaymentSetupFeaturesFetchForSourceApplicationID:PKPassdBundleIdentifier];
  }
}

void sub_1001419F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    int v24 = WeakRetained;
    id v6 = objc_alloc_init((Class)NSMutableArray);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v7 = v3;
    id v8 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
    id v25 = v3;
    uint64_t v23 = a1;
    if (v8)
    {
      id v9 = v8;
      id v10 = 0;
      uint64_t v11 = *(void *)v27;
      do
      {
        for (id i = 0; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(v7);
          }
          unsigned __int8 v13 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          if ([v13 feature] == (id)2)
          {
            [v6 addObject:v13];
            if (v10)
            {
              if ([v13 isActive])
              {
                id v14 = v13;

                id v10 = v14;
              }
              else if (([v10 isActive] & 1) == 0)
              {
                unsigned int v15 = [v13 lastUpdated];
                double v16 = [v10 lastUpdated];
                id v17 = [v15 compare:v16];

                if (v17 == (id)1)
                {
                  id v18 = v13;

                  id v10 = v18;
                }
              }
            }
            else
            {
              id v10 = v13;
            }
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v9);
    }
    else
    {
      id v10 = 0;
    }

    id v19 = [v6 copy];
    BOOL v5 = v24;
    unint64_t v20 = (void *)v24[21];
    v24[21] = v19;

    uint64_t v21 = (void *)v24[22];
    v24[22] = v10;
    id v22 = v10;

    [v24 _prefetchDataSources:*(void *)(v23 + 32) completion:*(void *)(v23 + 40)];
    id v3 = v25;
  }
}

void sub_100141C28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v11 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 110, a2);
    objc_storeStrong(v11 + 111, a3);
    objc_storeStrong(v11 + 112, a4);
    [v11 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100141CEC(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 25, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100141D68(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    WeakRetained[26] = a2;
    BOOL v5 = WeakRetained;
    [WeakRetained _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
    id WeakRetained = v5;
  }
}

void sub_100141DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = objc_alloc_init((Class)NSMutableSet);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v16;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * (void)v10), "passInformation", (void)v15);
        [v11 cardType];
        id v12 = PKPaymentCardTypeToString();
        [v5 addObject:v12];

        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v8);
  }

  unsigned __int8 v13 = (void *)WeakRetained[113];
  WeakRetained[113] = v5;
  id v14 = v5;

  [WeakRetained _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

void sub_100141F3C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 13, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100141FB8(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    id v5 = objc_alloc((Class)PKAccountServicePayLaterFinancingPlanQuery);
    id v6 = [v3 accountIdentifier];
    id v7 = [v5 initWithAccountIdentifier:v6 queryItems:32];

    id v8 = (void *)WeakRetained[1];
    id v16 = v7;
    uint64_t v9 = +[NSArray arrayWithObjects:&v16 count:1];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100142170;
    v11[3] = &unk_100739A88;
    objc_copyWeak(&v15, a1 + 6);
    id v10 = v7;
    id v12 = v10;
    id v13 = a1[4];
    id v14 = a1[5];
    [v8 financingPlansWithQueries:v9 completion:v11];

    objc_destroyWeak(&v15);
  }
}

void sub_100142154(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100142170(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v4 = [*(id *)(a1 + 32) queryIdentifier];
    id v5 = [v8 objectForKeyedSubscript:v4];

    uint64_t v6 = [v5 relevantFinancingPlans];
    id v7 = (void *)WeakRetained[85];
    WeakRetained[85] = v6;

    [WeakRetained _prefetchDataSources:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_100142220(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 86, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_10014229C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 12, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100142318(id *a1)
{
  if (PKLocationServicesEnabled())
  {
    id v2 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10014258C;
    v12[3] = &unk_100739AD8;
    objc_copyWeak(&v13, a1 + 7);
    [v2 addOperation:v12];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100142750;
    v10[3] = &unk_100739B28;
    objc_copyWeak(&v11, a1 + 7);
    v10[4] = a1[4];
    [v2 addOperation:v10];
    id v3 = +[NSNull null];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100142BC0;
    v6[3] = &unk_100739B50;
    objc_copyWeak(&v9, a1 + 7);
    id v7 = a1[5];
    id v8 = a1[6];
    id v4 = [v2 evaluateWithInput:v3 completion:v6];

    objc_destroyWeak(&v9);
    objc_destroyWeak(&v11);
    objc_destroyWeak(&v13);
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Location services are off. Can't fetch PDUEELocationDataSource.", buf, 2u);
    }

    [a1[4] _prefetchDataSources:a1[5] completion:a1[6]];
  }
}

void sub_100142554(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10014258C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v12 = WeakRetained;
  if (WeakRetained)
  {
    id v13 = (void *)*((void *)WeakRetained + 9);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1001426CC;
    v14[3] = &unk_100739AB0;
    objc_copyWeak(&v17, v10);
    id v16 = v9;
    id v15 = v8;
    [v13 fetchLatestValidLocation:v14];

    objc_destroyWeak(&v17);
  }
  else
  {
    (*((void (**)(id, id, void))v9 + 2))(v9, v8, 0);
  }
}

void sub_1001426B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001426CC(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained) {
    objc_storeStrong(WeakRetained + 108, a2);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100142750(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = WeakRetained;
  if (!WeakRetained) {
    goto LABEL_5;
  }
  if (!WeakRetained[108])
  {
    objc_storeStrong(WeakRetained + 114, (id)qword_100808C60);
    objc_storeStrong(v11 + 115, (id)qword_100808C68);
    objc_storeStrong(v11 + 116, (id)qword_100808C70);
    objc_storeStrong(v11 + 117, (id)qword_100808C78);
LABEL_5:
    v9[2](v9, v8, 0);
    goto LABEL_6;
  }
  id v12 = [WeakRetained[5] sharedWebService];
  id v13 = [v12 context];

  id v14 = [v13 configuration];
  id v15 = [v14 marketsURL];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100142944;
  v18[3] = &unk_100739B00;
  objc_copyWeak(&v22, (id *)(a1 + 40));
  uint64_t v21 = v9;
  id v16 = v8;
  uint64_t v17 = *(void *)(a1 + 32);
  id v19 = v16;
  uint64_t v20 = v17;
  +[PKPaymentMarketsConfiguration paymentMarketsConfigurationWithURL:v15 forDeviceClass:0 version:0 completion:v18];

  objc_destroyWeak(&v22);
LABEL_6:
}

void sub_100142930(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100142944(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v23 = v3;
    id v5 = [v3 marketsForLocation:*(void *)(*(void *)(a1 + 40) + 864)];
    id v6 = objc_alloc_init((Class)NSMutableSet);
    id v7 = objc_alloc_init((Class)NSMutableSet);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v25;
      do
      {
        for (id i = 0; i != v10; id i = (char *)i + 1)
        {
          if (*(void *)v25 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          id v14 = [v13 identifier];
          if (v14)
          {
            [v7 addObject:v14];
            if ([v13 type] == (id)1) {
              [v6 addObject:v14];
            }
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v10);
    }

    id v15 = [v7 copy];
    id v16 = (void *)qword_100808C60;
    qword_100808C60 = (uint64_t)v15;

    id v17 = [v6 copy];
    long long v18 = (void *)qword_100808C68;
    qword_100808C68 = (uint64_t)v17;

    id v3 = v23;
    uint64_t v19 = [v23 supportedTransitNetworksForLocation:*(void *)(*(void *)(a1 + 40) + 864)];
    uint64_t v20 = (void *)qword_100808C70;
    qword_100808C70 = v19;

    uint64_t v21 = [v23 expressTransitNetworksForLocation:*(void *)(*(void *)(a1 + 40) + 864)];
    id v22 = (void *)qword_100808C78;
    qword_100808C78 = v21;

    objc_storeStrong(WeakRetained + 114, (id)qword_100808C60);
    objc_storeStrong(WeakRetained + 115, (id)qword_100808C68);
    objc_storeStrong(WeakRetained + 116, (id)qword_100808C70);
    objc_storeStrong(WeakRetained + 117, (id)qword_100808C78);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100142BC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
}

void sub_100142C10(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100142CEC;
  v3[3] = &unk_100739BA0;
  objc_copyWeak(&v6, (id *)(a1 + 56));
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 fetchLatestValidPlacemark:v3];

  objc_destroyWeak(&v6);
}

void sub_100142CD8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100142CEC(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 109, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100142D68(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 87, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_100142DE4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    objc_storeStrong(WeakRetained + 92, a2);
    [v5 _prefetchDataSources:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

BOOL sub_100143678(uint64_t a1, void *a2)
{
  return [a2 accessLevel] == *(id *)(a1 + 32);
}

Class sub_100144B18()
{
  if (qword_100808C90 != -1) {
    dispatch_once(&qword_100808C90, &stru_100739C08);
  }
  Class result = objc_getClass("FKBankConnectEvaluationManager");
  qword_100808C80 = (uint64_t)result;
  off_100805968 = (uint64_t (*)())sub_100144B7C;
  return result;
}

id sub_100144B7C()
{
  return (id)qword_100808C80;
}

void sub_100144B88(id a1)
{
  qword_100808C88 = (uint64_t)dlopen("/System/Library/Frameworks/FinanceKit.framework/FinanceKit", 2);
}

Class sub_100144BB4()
{
  if (qword_100808CA8 != -1) {
    dispatch_once(&qword_100808CA8, &stru_100739C28);
  }
  Class result = objc_getClass("BKDeviceManager");
  qword_100808C98 = (uint64_t)result;
  off_100805970 = (uint64_t (*)())sub_100144C18;
  return result;
}

id sub_100144C18()
{
  return (id)qword_100808C98;
}

void sub_100144C24(id a1)
{
  qword_100808CA0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BiometricKit.framework/BiometricKit", 2);
}

Class sub_100144C50()
{
  if (qword_100808CA8 != -1) {
    dispatch_once(&qword_100808CA8, &stru_100739C28);
  }
  Class result = objc_getClass("BKDevice");
  qword_100808CB0 = (uint64_t)result;
  off_100805978 = (uint64_t (*)())sub_100144CB4;
  return result;
}

id sub_100144CB4()
{
  return (id)qword_100808CB0;
}

void sub_100144CC0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100145094(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(PDDynamicAssociatedDomainPattern);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_100145320(id a1, PDDynamicAssociatedDomainPattern *a2, id a3)
{
}

id sub_100145644(uint64_t a1, uint64_t a2)
{
  return +[DynamicAssociatedDomainPattern deletePatternsForDomainPID:a2 inDatabase:*(void *)(a1 + 32)];
}

void sub_1001457B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v7 = objc_alloc_init(PDDynamicAssociatedDomain);
  objc_msgSend(*(id *)(a1 + 56), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));

  id v6 = +[DynamicAssociatedDomainPattern patternsForDomainPID:a2 inDatabase:*(void *)(a1 + 40)];
  if ([v6 count])
  {
    [(PDDynamicAssociatedDomain *)v7 setPatterns:v6];
    [*(id *)(a1 + 48) safelyAddObject:v7];
  }
}

void sub_100145984(id a1, PDDynamicAssociatedDomain *a2, id a3)
{
}

uint64_t sub_100145C14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentID];
  id v3 = [*(id *)(a1 + 40) items];
  id v4 = +[AccountStatementMetadataItem insertOrUpdateAccountStatementMetadataItems:v3 forStatementMetadataPID:v2 inDatabase:*(void *)(a1 + 48)];

  id v5 = *(void **)(a1 + 56);
  id v17 = 0;
  id v18 = 0;
  id v6 = [*(id *)(a1 + 32) statementIdentifier];
  id v7 = [*(id *)(a1 + 32) accountIdentifier];
  objc_msgSend(v5, "openingDate:closingDate:statementIdentifier:accountIdentifier:accountType:inDatabase:", &v18, &v17, v6, v7, objc_msgSend(*(id *)(a1 + 32), "accountType"), *(void *)(a1 + 48));
  id v8 = v18;
  id v9 = v17;

  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = (void *)_SQLValueForDate();
  [v10 setValue:v11 forProperty:@"opening_date"];

  id v12 = *(void **)(a1 + 32);
  id v13 = (void *)_SQLValueForDate();
  [v12 setValue:v13 forProperty:@"closing_date"];

  id v14 = *(void **)(a1 + 32);
  id v15 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[AccountStatementMetadataItem allItemsAreProcessedForStatementMetadataPID:v2 inDatabase:*(void *)(a1 + 48)]);
  [v14 setValue:v15 forProperty:@"has_been_processed"];

  return 1;
}

void sub_100146144(uint64_t a1, uint64_t a2)
{
  id v4 = [AccountStatementMetadata alloc];
  id v5 = [*(id *)(a1 + 32) database];
  id v8 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  id v6 = *(void **)(a1 + 40);
  id v7 = [(AccountStatementMetadata *)v8 accountStatementMetadata];
  [v6 safelyAddObject:v7];
}

void sub_1001463E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001463FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001464A0;
  v7[3] = &unk_100732630;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v8 = v4;
  uint64_t v9 = v5;
  sub_100012DC8(v2, v3, v7);

  return 1;
}

uint64_t sub_1001464A0(uint64_t a1, sqlite3_stmt *a2)
{
  [*(id *)(a1 + 32) sqliteBindWithStatement:a2];
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v5;
    return _objc_release_x1(v5, v7);
  }
  return result;
}

uint64_t sub_100146658(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentID];
  +[AccountStatementMetadataItem markItems:*(void *)(a1 + 40) asProcessed:*(unsigned __int8 *)(a1 + 64) error:*(void *)(a1 + 56) forStatementMetadataPID:v2 inDatabase:*(void *)(a1 + 48)];
  id v3 = *(void **)(a1 + 32);
  id v4 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[AccountStatementMetadataItem allItemsAreProcessedForStatementMetadataPID:v2 inDatabase:*(void *)(a1 + 48)]);
  [v3 setValue:v4 forProperty:@"has_been_processed"];

  return 1;
}

uint64_t sub_1001467E0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentID];
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)_SQLValueForDate();
  [v3 setValue:v4 forProperty:@"last_report_date"];

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v5 reportCount] + 1);
  [v5 setValue:v6 forProperty:@"report_count"];

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = [*(id *)(a1 + 48) items];
  +[AccountStatementMetadataItem updateReportDate:v7 forItems:v8 forStatementMetadataPID:v2 inDatabase:*(void *)(a1 + 56)];

  return 1;
}

void sub_100146A08(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100146EE0(id a1, PKAccountStatementMetadata *a2, id a3)
{
}

void sub_100146EE8(id a1, PKAccountStatementMetadata *a2, id a3)
{
}

void sub_100146EF0(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountStatementMetadata *)v3 setOpeningDate:v4];
}

void sub_100146F50(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountStatementMetadata *)v3 setClosingDate:v4];
}

void sub_100146FB0(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadata setHasBeenProcessed:](v4, "setHasBeenProcessed:", [a3 BOOLValue]);
}

void sub_100147008(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountStatementMetadata *)v3 setLastReportDate:v4];
}

void sub_100147068(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadata setReportCount:](v4, "setReportCount:", [a3 integerValue]);
}

void sub_1001470C0(id a1, PKAccountStatementMetadata *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadata setAccountType:](v4, "setAccountType:", [a3 integerValue]);
}

void sub_100147864(uint64_t a1, uint64_t a2)
{
  id v4 = [AccountPayment alloc];
  id v5 = [*(id *)(a1 + 32) database];
  id v8 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = [(AccountPayment *)v8 payment];
  [v6 addObject:v7];
}

void sub_1001480B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
  id v4 = *(void **)(a1 + 40);
  id v5 = [*(id *)(a1 + 48) currencyAmount];
  [v4 setCurrencyAmount:v5];
}

id sub_100148124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1001489F8(id a1, PKAccountPayment *a2, id a3)
{
}

void sub_100148A00(id a1, PKAccountPayment *a2, id a3)
{
}

void sub_100148A08(id a1, PKAccountPayment *a2, id a3)
{
}

void sub_100148A10(id a1, PKAccountPayment *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountPayment *)v3 setPaymentDate:v4];
}

void sub_100148A70(id a1, PKAccountPayment *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountPayment *)v3 setPaymentStatusDate:v4];
}

void sub_100148AD0(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPayment setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100148B28(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPayment setStatusCode:](v4, "setStatusCode:", [a3 integerValue]);
}

void sub_100148B80(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPayment setCancellable:](v4, "setCancellable:", [a3 BOOLValue]);
}

void sub_100148BD8(id a1, PKAccountPayment *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountPayment *)v3 setCancellationExpiryDate:v4];
}

void sub_100148C38(id a1, PKAccountPayment *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountPayment *)v3 setExpectedCreditReleaseDate:v4];
}

void sub_100148C98(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountPayment *)a2 fundingSource];
  [v5 setIdentifier:v4];
}

void sub_100148CF8(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountPayment *)a2 fundingSource];
  id v5 = [v4 integerValue];

  [v6 setType:v5];
}

void sub_100148D68(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountPayment *)a2 fundingSource];
  [v5 setAccountSuffix:v4];
}

void sub_100148DC8(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountPayment *)a2 scheduleDetails];
  id v5 = [v4 integerValue];

  [v6 setFrequency:v5];
}

void sub_100148E38(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountPayment *)a2 scheduleDetails];
  LODWORD(a2) = [v4 intValue];

  [v5 setScheduledDay:(int)a2];
}

void sub_100148EA8(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountPayment *)a2 scheduleDetails];
  id v5 = [v4 integerValue];

  [v6 setPreset:v5];
}

void sub_100148F18(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountPayment *)a2 scheduleDetails];
  id v5 = (void *)_DateForSQLValue();

  [v6 setScheduledDate:v5];
}

void sub_100148F8C(id a1, PKAccountPayment *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountPayment *)a2 scheduleDetails];
  [v5 setPaymentTermsIdentifier:v4];
}

void sub_100149074(id a1, PKAccountPayment *a2, id a3)
{
  id v6 = a3;
  id v4 = [(PKAccountPayment *)a2 fundingSource];
  id v5 = [v4 fundingDetails];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [v5 setName:v6];
  }
}

id sub_100149960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100149D78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(PDNotificationService);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10014A0D0(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10014A0D8(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10014A0E0(id a1, PDNotificationService *a2, id a3)
{
  id v4 = a2;
  -[PDNotificationService setServiceType:](v4, "setServiceType:", [a3 integerValue]);
}

void sub_10014A138(id a1, PDNotificationService *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PDNotificationService *)v3 setServiceURL:v4];
}

void sub_10014A198(id a1, PDNotificationService *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PDNotificationService *)v3 setRegistrationURL:v4];
}

void sub_10014A1F8(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10014A200(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10014A208(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10014A210(id a1, PDNotificationService *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDNotificationService *)v3 setLastUpdatedDate:v4];
}

void sub_10014A270(id a1, PDNotificationService *a2, id a3)
{
}

void sub_10014A278(id a1, PDNotificationService *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDNotificationService *)v3 setLastUpdatedTagDate:v4];
}

void sub_10014A568(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v23 = a1;
    id v6 = objc_alloc_init((Class)NSMutableArray);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v25;
      do
      {
        for (id i = 0; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v25 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          id v13 = objc_alloc_init((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
          id v14 = [v12 publicKeyIdentifier];
          [v13 setPublicKey:v14];

          id v15 = [v12 casdAttestation];
          long long v29 = v15;
          id v16 = +[NSArray arrayWithObjects:&v29 count:1];
          [v13 setAttestation:v16];

          id v17 = [v12 casdSignature];
          [v13 setSignature:v17];

          id v18 = [v12 keyAuthorization];
          [v13 setAuthorization:v18];

          [v6 addObject:v13];
        }
        id v9 = [v7 countByEnumeratingWithState:&v24 objects:v30 count:16];
      }
      while (v9);
    }

    id v19 = [objc_alloc((Class)PKAuxiliaryCapabilityRequirementKeyMaterial) initWithKeyMaterialContents:v6];
    uint64_t v20 = [v7 firstObject];
    uint64_t v21 = [v20 progenitorKeyAttestation];

    if (v21)
    {
      long long v28 = v21;
      id v22 = +[NSArray arrayWithObjects:&v28 count:1];
      [v19 setRootAttestation:v22];
    }
    (*(void (**)(void))(*(void *)(v23 + 32) + 16))();
  }
}

void sub_10014A9E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error from needsPresentmentKeyRefreshForPass: %@", (uint8_t *)&v7, 0xCu);
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v6();
}

uint64_t sub_10014ABC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10014AF64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 32) sharedPeerPaymentWebService];
  id v2 = [v3 context];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

uint64_t sub_10014B1A4(void *a1)
{
  [*(id *)(a1[4] + 32) updateSharedWebServiceContext:a1[5]];
  uint64_t result = a1[6];
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_10014B314(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v3 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v3 preferencesWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v5 = "-[PDPeerPaymentService preferencesWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10014B554(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v3 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v3 updateAccountWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v5 = "-[PDPeerPaymentService updateAccountWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10014B794(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v3 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v3 updateAssociatedAccountsWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v5 = "-[PDPeerPaymentService updateAssociatedAccountsWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10014B9D4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v3 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v3 updateAccountAndAssociatedAccountsWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v5 = "-[PDPeerPaymentService updateAccountAndAssociatedAccountsWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10014BC14(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v3 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v3 updatePreferencesWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v5 = "-[PDPeerPaymentService updatePreferencesWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10014BE7C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v3 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v3 updateMockAccountBalanceByAddingAmount:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v5 = "-[PDPeerPaymentService updateMockAccountBalanceByAddingAmount:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10014C0B8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v4 deleteAccountWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService deleteAccountWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(void))(v3 + 16))();
    }
  }
}

void sub_10014C2F4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v4 deletePreferencesWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService deletePreferencesWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(void))(v3 + 16))();
    }
  }
}

void sub_10014C554(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v4 setPreferences:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService setPreferences:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 48);
    if (v3) {
      (*(void (**)(uint64_t, void, void))(v3 + 16))(v3, 0, 0);
    }
  }
}

void sub_10014C79C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v3 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v3 registrationStatusWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v5 = "-[PDPeerPaymentService registrationStatusWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10014CAF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PDDefaultQueue();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10014CBC8;
  v7[3] = &unk_100730578;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_10014CBC8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10014CC70;
  v4[3] = &unk_1007304D8;
  id v3 = *(void **)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  sub_10020A7B0(v2, v1, v3, v4);
}

uint64_t sub_10014CC70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014CC88(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 rawData];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10014CF2C(uint64_t a1)
{
  [*(id *)(a1 + 32) remoteProcessIdentifier];
  uint64_t v2 = PKBundleIdentifierForPID();
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
  id v4 = *(void **)(a1 + 48);
  id v5 = *(void **)(a1 + 56);
  id v6 = *(void **)(a1 + 64);
  int v7 = *(void **)(a1 + 72);
  id v8 = *(void **)(a1 + 80);
  id v10 = *(void **)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10014D028;
  v11[3] = &unk_1007304D8;
  uint64_t v9 = *(void *)(a1 + 96);
  id v12 = *(id *)(a1 + 88);
  sub_10020AF40(v3, v10, v4, v9, v5, v6, v7, v8, v2, v11);
}

uint64_t sub_10014D028(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014D234(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1 && (uint64_t v2 = *(void **)(a1 + 40)) != 0)
  {
    uint64_t v3 = *(void **)(a1 + 56);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 16);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10014D33C;
    v8[3] = &unk_1007304D8;
    id v5 = *(void **)(a1 + 64);
    id v9 = *(id *)(a1 + 72);
    sub_10020B8F8(v4, v1, v2, v3, v5, v8);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      int v7 = *(void (**)(void))(v6 + 16);
      v7();
    }
  }
}

uint64_t sub_10014D33C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014D4E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10014D594;
  v5[3] = &unk_10073A328;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v2 registrationStatusWithCompletion:v5];
}

uint64_t sub_10014D594(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a2 == 1)
  {
    id v3 = [objc_alloc((Class)PKProtobufPeerPaymentMessage) initWithData:*(void *)(a1 + 32)];
    uint64_t v4 = [*(id *)(v2 + 40) peerPaymentWebServiceCoordinator];
    [v4 receivedPeerPaymentMessage:v3];

    id v5 = [v3 transactionIdentifier];
    id v6 = [v3 memo];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      [*(id *)(*(void *)(v2 + 40) + 40) updatePeerPaymentMemo:v6 forTransactionWithServiceIdentifier:v5];
    }
    id v8 = [v3 requestToken];
    id v9 = *(id **)(v2 + 40);
    if (v8)
    {
      id v10 = [v9 peerPaymentAccountManager];
      id v38 = v8;
      uint64_t v11 = +[NSArray arrayWithObjects:&v38 count:1];
      [v10 deletePeerPaymentPendingRequestsForRequestTokens:v11 completion:0];

      id v12 = *(void **)(v2 + 40);
      id v37 = v8;
      id v13 = +[NSArray arrayWithObjects:&v37 count:1];
      [v12 _removeNotificationsForPeerPaymentPendingRequestWithRequestTokens:v13];
    }
    else
    {
      long long v28 = v6;
      long long v29 = v5;
      uint64_t v30 = v2;
      id v14 = [v9[5] peerPaymentPendingRequestsForPeerPaymentAccount];
      id v15 = +[NSMutableArray array];
      id v16 = [v3 senderAddress];
      id v17 = PKBestGuessNormalizedEmailOrPhoneNumber();

      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id v13 = v14;
      id v18 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v33;
        do
        {
          for (id i = 0; i != v19; id i = (char *)i + 1)
          {
            if (*(void *)v33 != v20) {
              objc_enumerationMutation(v13);
            }
            id v22 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            uint64_t v23 = [v22 requesteeAddress];
            unsigned int v24 = [v23 isEqualToString:v17];

            if (v24)
            {
              long long v25 = [v22 requestToken];
              [v15 addObject:v25];
            }
          }
          id v19 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v19);
      }

      uint64_t v2 = v30;
      if ([v15 count])
      {
        long long v26 = [*(id *)(v30 + 40) peerPaymentWebServiceCoordinator];
        [v26 updatePendingRequestsWithRequestTokens:v15];
      }
      id v6 = v28;
      id v5 = v29;
      id v8 = 0;
    }
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not updating memo for device that is not peer payment registered.", buf, 2u);
    }
  }

  uint64_t result = *(void *)(v2 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014DA8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10014DB54;
  v5[3] = &unk_10073A350;
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = *(id *)(a1 + 56);
  [v2 registrationStatusWithCompletion:v5];
}

uint64_t sub_10014DB54(void *a1, uint64_t a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 1)
  {
    if (v5)
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = a1[5];
      int v9 = 138412546;
      uint64_t v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating peer payment message received date to %@ for transaction with service identifier: %@.", (uint8_t *)&v9, 0x16u);
    }

    [*(id *)(a1[6] + 40) updatePeerPaymentMessageReceivedDate:a1[4] forTransactionWithServiceIdentifier:a1[5]];
  }
  else
  {
    if (v5)
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Not updating peer payment message received date for device that is not peer payment registered.", (uint8_t *)&v9, 2u);
    }
  }
  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014DD84(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (v8
    && ([*(id *)(a1 + 32) serialNumber],
        id v3 = objc_claimAutoreleasedReturnValue(),
        [v8 associatedPassSerialNumber],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        unsigned int v5 = [v3 isEqualToString:v4],
        v4,
        v3,
        v5))
  {
    uint64_t v6 = [v8 currentBalance];
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v6);
  }
}

void sub_10014DF54(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = PDLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier();
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      unsigned int v5 = "-[PDPeerPaymentService lastUsedAlternateFundingSourcePassUniqueIdentifier:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10014E178(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = (const char *)a1[5];
      int v6 = 138412290;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting last used alternative funding source pass unique identifier: %@", (uint8_t *)&v6, 0xCu);
    }

    PDSetLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier();
  }
  else
  {
    int v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPeerPaymentService setLastUsedAlternateFundingSourcePassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v6, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014E3F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  [v2 downloadPassIfNecessaryWithCompletion:*(void *)(a1 + 40)];
}

void sub_10014E588(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014E62C;
  v3[3] = &unk_10072E570;
  id v4 = *(id *)(a1 + 40);
  [v2 registerDeviceWithReason:0 completion:v3];
}

uint64_t sub_10014E62C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014E794(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10014E848;
  v4[3] = &unk_10072E570;
  id v5 = *(id *)(a1 + 40);
  [v2 registerDeviceWithForceReregister:v3 reason:0 completion:v4];
}

uint64_t sub_10014E848(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014E9F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  [v2 registerDeviceWithRegistrationURL:*(void *)(a1 + 40) pushToken:*(void *)(a1 + 48) forceReregister:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];
}

void sub_10014EB94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014EC34;
  v3[3] = &unk_10072E570;
  id v4 = *(id *)(a1 + 40);
  [v2 unregisterDeviceWithCompletion:v3];
}

uint64_t sub_10014EC34(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014ED8C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014EE2C;
  v3[3] = &unk_10072E570;
  id v4 = *(id *)(a1 + 40);
  [v2 initalizeCloudStoreIfNecessaryWithHandler:v3];
}

uint64_t sub_10014EE2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014EF88(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014F028;
  v3[3] = &unk_100732C90;
  id v4 = *(id *)(a1 + 40);
  [v2 cloudStoreStatusWithCompletion:v3];
}

uint64_t sub_10014F028(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014F180(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014F220;
  v3[3] = &unk_10072E570;
  id v4 = *(id *)(a1 + 40);
  [v2 checkTLKsMissingWithCompletion:v3];
}

uint64_t sub_10014F220(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014F378(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10014F418;
  v3[3] = &unk_10072E570;
  id v4 = *(id *)(a1 + 40);
  [v2 resetApplePayManateeViewWithCompletion:v3];
}

uint64_t sub_10014F418(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014F5B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10014F668;
  v5[3] = &unk_1007378B8;
  id v6 = *(id *)(a1 + 56);
  [v2 remoteRegistrationRequest:v3 forHandle:v4 completion:v5];
}

uint64_t sub_10014F668(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10014F7B0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 peerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService peerPaymentPendingRequestsForRequestTokens:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 48);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

void sub_10014F9F0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 peerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v6 = "-[PDPeerPaymentService peerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

void sub_10014FC64(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v2 insertOrUpdatePeerPaymentPendingRequests:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v3 = *(void **)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      _[v3 _scheduleNotificationsForPeerPaymentPendingRequests:v4];
    }
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      id v8 = "-[PDPeerPaymentService insertOrUpdatePeerPaymentPendingRequests:shouldScheduleNotifications:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v7, 0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(void))(v6 + 16))();
    }
  }
}

uint64_t (**sub_10014FED0(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v2 deletePeerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return (uint64_t (**)(void))[v3 _removeNotificationsForPeerPaymentPendingRequestWithRequestTokens:v4];
  }
  else
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      id v8 = "-[PDPeerPaymentService deletePeerPaymentPendingRequestsForRequestTokens:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v7, 0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 48);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }
  return result;
}

uint64_t (**sub_100150110(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v2 deletePeerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:*(void *)(a1 + 40)];

    uint64_t v3 = *(void **)(a1 + 32);
    return (uint64_t (**)(void))_[v3 _removeAllNotificationsForPeerPaymentPendingRequests];
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      int v7 = "-[PDPeerPaymentService deletePeerPaymentPendingRequestsForPeerPaymentAccountWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v6, 0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 40);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }
  return result;
}

void sub_100150350(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v4 recurringPaymentsWithPreventingServerFetch:0 completion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService recurringPaymentsWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

void sub_100150604(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 updateAutoReloadAmount:*(void *)(a1 + 40) threshold:*(void *)(a1 + 48) identifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService updateAutoReloadAmount:threshold:identifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

void sub_100150848(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v4 updateRecurringPaymentsWithCompletion:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService updateRecurringPaymentsWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, void, void))(v3 + 16))(v3, 0, 0);
    }
  }
}

void sub_100150AB0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 insertOrUpdateRecurringPayments:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService insertOrUpdateRecurringPayments:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 48);
    if (v3) {
      (*(void (**)(void))(v3 + 16))();
    }
  }
}

uint64_t (**sub_100150D10(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v2 deleteRecurringPaymentsForIdentifiers:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return (uint64_t (**)(void))_[v3 _removeNotificationsForPeerPaymentRecurringPaymentsWithIdentifiers:v4];
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      id v8 = "-[PDPeerPaymentService deleteRecurringPaymentsForIdentifiers:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v7, 0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 48);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }
  return result;
}

uint64_t (**sub_100150F50(uint64_t a1))(void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v2 deleteAllRecurringPaymentsWithCompletion:*(void *)(a1 + 40)];

    uint64_t v3 = *(void **)(a1 + 32);
    return (uint64_t (**)(void))_[v3 _removeAllNotificationsForPeerPaymentRecurringPayments];
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      int v7 = "-[PDPeerPaymentService deleteAllRecurringPaymentsWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v6, 0xCu);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 40);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }
  return result;
}

void sub_1001511C0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentWebServiceCoordinator];
    [v4 performRecurringPaymentAction:*(void *)(a1 + 56) identifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService performRecurringPaymentAction:identifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 48);
    if (v3) {
      (*(void (**)(uint64_t, void, void))(v3 + 16))(v3, 0, 0);
    }
  }
}

void sub_100151454(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 updateRecurringPaymentMemo:*(void *)(a1 + 40) identifier:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService updateRecurringPaymentMemo:identifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 56);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

void sub_1001516C8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 updateRecurringPaymentStatus:*(void *)(a1 + 56) identifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService updateRecurringPaymentStatus:identifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 48);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

void sub_10015190C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 hasRecurringPayments:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService hasRecurringPayments:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

id sub_100151D6C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 32);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
    return [v3 encryptionCertificateForDestination:v4 forceUpdate:v5 completion:v2];
  }
  else
  {
    int v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      int v9 = "-[PDPeerPaymentService encryptionCertificateForDestination:forceUpdate:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v8, 0xCu);
    }

    id result = *(id *)(a1 + 40);
    if (result) {
      return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0, 0);
    }
  }
  return result;
}

id sub_100151FDC(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = a1[5];
    uint64_t v3 = *(void **)(a1[4] + 32);
    uint64_t v5 = a1[6];
    uint64_t v4 = a1[7];
    return _[v3 encryptData:v2 usingCertificateWithDestination:v4 completion:v5];
  }
  else
  {
    int v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      int v9 = "-[PDPeerPaymentService encryptData:usingCertificateWithDestination:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v8, 0xCu);
    }

    id result = (id)a1[6];
    if (result) {
      return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0, 0);
    }
  }
  return result;
}

void sub_1001522A4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10015234C;
  v4[3] = &unk_1007304D8;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  sub_10020C12C(v2, v3, v1, v4);
}

uint64_t sub_10015234C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001524FC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001525A4;
  v4[3] = &unk_1007304D8;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  sub_10020C4AC(v2, v1, v3, v4);
}

uint64_t sub_1001525A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100152738(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
    [v4 insertOrUpdateDeviceOriginatedNearbyPeerPaymentTransactionWithIdentifier:*(void *)(a1 + 40) memo:*(void *)(a1 + 48) counterpartAppearanceData:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v6 = "-[PDPeerPaymentService insertOrUpdateDeviceOriginatedNearbyPeerPaymentTransactionWithIdentifier:memo:counterp"
           "artAppearanceData:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v3 = *(void *)(a1 + 64);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
}

void sub_100152A14(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100152BB0;
    v7[3] = &unk_10073A3A0;
    uint64_t v2 = *(void **)(a1 + 32);
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    id v3 = *(id *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 32);
    id v11 = v3;
    uint64_t v12 = v4;
    id v13 = *(id *)(a1 + 72);
    [v2 accountWithCompletion:v7];
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v15 = "-[PDPeerPaymentService insertOrUpdateNearbyPeerPaymentSetupNotificationWithTransactionIdentifier:amount:curr"
            "ency:senderName:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 72);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
    }
  }
}

void sub_100152BB0(void *a1, void *a2)
{
  id v3 = [a2 associatedPassUniqueID];
  uint64_t v4 = [PDPeerPaymentNearbySetupUserNotification alloc];
  uint64_t v5 = a1[4];
  uint64_t v6 = PKCurrencyAmountMake();
  int v7 = [(PDPeerPaymentNearbySetupUserNotification *)v4 initWithPassUniqueIdentifier:v3 transactionIdentifier:v5 amount:v6 senderName:a1[7]];

  [*(id *)(a1[8] + 48) insertUserNotification:v7];
  (*(void (**)(void))(a1[9] + 16))();
}

uint64_t sub_100152D8C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 40) peerPaymentCounterpartImageData];
    uint64_t v3 = *(void *)(a1 + 40);
    if (v3)
    {
      uint64_t v6 = v2;
      uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
      uint64_t v2 = v6;
    }
    return _objc_release_x1(v3, v2);
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v8 = "-[PDPeerPaymentService counterpartImageDataWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t result = *(void *)(a1 + 40);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
    }
  }
  return result;
}

uint64_t sub_10015300C(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = [*(id *)(a1[4] + 40) peerPaymentCounterpartImageDataWithIdentifier:a1[5]];
    uint64_t v3 = a1[6];
    if (v3)
    {
      uint64_t v6 = v2;
      uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
      uint64_t v2 = v6;
    }
    return _objc_release_x1(v3, v2);
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v8 = "-[PDPeerPaymentService counterpartImageDataWithIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t result = a1[6];
    if (result) {
      return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
    }
  }
  return result;
}

uint64_t sub_10015328C(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = [*(id *)(a1[4] + 40) peerPaymentCounterpartImageDataForTransactionWithIdentifier:a1[5]];
    uint64_t v3 = a1[6];
    if (v3)
    {
      uint64_t v6 = v2;
      uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
      uint64_t v2 = v6;
    }
    return _objc_release_x1(v3, v2);
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      id v8 = "-[PDPeerPaymentService counterpartImageDataForTransactionWithIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t result = a1[6];
    if (result) {
      return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
    }
  }
  return result;
}

uint64_t sub_1001534E8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 40) deleteAllPeerPaymentCounterpartImageData];
    uint64_t result = *(void *)(a1 + 40);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(result + 16);
      return v3();
    }
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPeerPaymentService deleteAllCounterpartImageDataWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    uint64_t result = *(void *)(a1 + 40);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }
  return result;
}

id sub_100153750(void *a1)
{
  if ([*(id *)(a1[4] + 8) peerPaymentAllAccess])
  {
    uint64_t v2 = a1[5];
    uint64_t v3 = *(void **)(a1[4] + 32);
    uint64_t v4 = a1[6];
    return _[v3 reportFailureDiagnostic:v2 completion:v4];
  }
  else
  {
    int v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      id v8 = "-[PDPeerPaymentService reportFailureDiagnostic:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v7, 0xCu);
    }

    id result = (id)a1[6];
    if (result) {
      return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0, 0);
    }
  }
  return result;
}

void sub_100153B70(uint64_t a1, void *a2)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (id i = 0; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(obj);
        }
        int v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v8 = [v7 requestToken];
        id v9 = +[PDPeerPaymentPendingRequestReceivedUserNotification notificationIdentifierForRequestToken:v8];

        uint64_t v10 = *(void *)(a1 + 32);
        id v11 = *(void **)(v10 + 48);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_100153D10;
        v13[3] = &unk_10073A3F0;
        v13[4] = v10;
        void v13[5] = v7;
        [v11 userNotificationWithIdentifier:v9 completion:v13];
      }
      id v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_100153D10(int8x16_t *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Found existing notification for pending request received. Ignoring.", buf, 2u);
    }
  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100153DF0;
    v6[3] = &unk_10073A3C8;
    int8x16_t v5 = a1[2];
    int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
    [(id)v5.i64[0] accountWithCompletion:v6];
  }
}

void sub_100153DF0(uint64_t a1, void *a2)
{
  id v3 = [a2 associatedPassUniqueID];
  id v4 = [*(id *)(a1 + 32) actions];
  unsigned int v5 = [v4 containsObject:PKPeerPaymentPendingRequestActionReject];

  if (v5)
  {
    uint64_t v6 = *(void **)(a1 + 40);
    int8x16_t v7 = [*(id *)(a1 + 32) requesterAddress];
    id v8 = [v6 _displayNameForAddress:v7];

    id v9 = [[PDPeerPaymentPendingRequestReceivedUserNotification alloc] initWithPendingRequest:*(void *)(a1 + 32) requesterName:v8 forPassUniqueIdentifier:v3];
    if (v9)
    {
      uint64_t v10 = +[NSCalendar currentCalendar];
      id v11 = [*(id *)(a1 + 32) expiryDate];
      uint64_t v12 = [v10 dateByAddingUnit:16 value:-1 toDate:v11 options:0];

      [(PDUserNotification *)v9 setDate:v12];
      id v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        long long v14 = [(PDUserNotification *)v9 notificationIdentifier];
        int v15 = 138412546;
        long long v16 = v14;
        __int16 v17 = 2112;
        id v18 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Scheduling notification for pending request with identifier: %@, scheduled date: %@", (uint8_t *)&v15, 0x16u);
      }
      [*(id *)(*(void *)(a1 + 40) + 48) insertUserNotification:v9];
    }
  }
  else
  {
    id v9 = 0;
    id v8 = 0;
  }
}

void sub_100153FE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) peerPaymentAccountManager];
  [v4 insertOrUpdatePeerPaymentPendingRequests:v3 completion:0];

  id v5 = objc_alloc_init((Class)NSMutableArray);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    id v10 = (id)PKPeerPaymentPendingRequestStatusPending;
    do
    {
      for (id i = 0; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        objc_msgSend(v12, "status", (void)v19);
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        if (v13 == v10)
        {

          long long v16 = v10;
          goto LABEL_16;
        }
        long long v14 = v13;
        if (v13) {
          BOOL v15 = v10 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {

LABEL_15:
          long long v16 = [v12 requestToken];
          [v5 addObject:v16];
LABEL_16:

          continue;
        }
        unsigned __int8 v17 = [v13 isEqualToString:v10];

        if ((v17 & 1) == 0) {
          goto LABEL_15;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v8);
  }

  id v18 = [*(id *)(a1 + 32) peerPaymentAccountManager];
  [v18 deletePeerPaymentPendingRequestsForRequestTokens:v5 completion:0];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001542AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) requestToken];
        uint64_t v9 = +[PDPeerPaymentPendingRequestReceivedUserNotification notificationIdentifierForRequestToken:v8];

        [*(id *)(*(void *)(a1 + 32) + 48) removeUserNotificationWithIdentifier:v9];
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

void sub_100154658(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1 + 32) remoteObjectProxy];
    [v2 pendingRequestsChanged];
  }
}

void sub_1001547B8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1 + 32) remoteObjectProxy];
    [v2 recurringPaymentsChanged];
  }
}

uint64_t sub_100154EDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100155AC0(id a1, NSData *a2)
{
  return [(NSData *)a2 hexEncoding];
}

BOOL sub_100155E94(uint64_t a1, void *a2)
{
  return sub_10045BB34(*(void *)(*(void *)(a1 + 32) + 88), 16, a2);
}

void sub_100155FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100155FEC(uint64_t a1, void *a2, unsigned char *a3)
{
  BOOL result = sub_10045B5F8(*(void *)(*(void *)(a1 + 32) + 88), 1, a2, (void *)3);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  *a3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

id *sub_1001563CC(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id sub_100156DDC(id a1, NSNumber *a2)
{
  uint64_t v2 = [(NSNumber *)a2 unsignedIntValue];
  return +[Pass predicateForPaymentType:v2];
}

void sub_100157024(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v7 = *a4;
  [a4[1] integerValue];
  [a4[2] integerValue];
  id v6 = a4[3];
  if (PKPassSupportsSyncing()) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

id sub_100157CC0(uint64_t a1, void *a2)
{
  return _[a2 supportsMultiTokensWithImplicitlyEnabledNetworks:*(void *)(a1 + 32)];
}

id sub_100157CCC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a2 paymentNetworkIdentifier]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_1001586DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001586F4(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v5 associatedAccountFeatureIdentifier] == *(id *)(a1 + 40))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
}

void sub_100158838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100158850(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v3 preventsWalletDeletion]) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

id sub_100159110(id a1, NSData *a2)
{
  return [(NSData *)a2 hexEncoding];
}

void sub_10015964C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100159664(void *a1)
{
  uint64_t v2 = +[AppletSubcredential appletSubcredentialWithIdentifier:a1[4] inDatabase:*(void *)(a1[5] + 8)];
  id v3 = +[PaymentApplication anyInDatabase:withPersistentID:](PaymentApplication, "anyInDatabase:withPersistentID:", *(void *)(a1[5] + 8), [v2 paymentApplicationPID]);
  id v4 = +[Pass anyInDatabase:withPersistentID:](Pass, "anyInDatabase:withPersistentID:", *(void *)(a1[5] + 8), [v3 passPID]);
  uint64_t v5 = [v4 uniqueID];
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return 1;
}

void sub_10015A3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose((const void *)(v53 - 224), 8);
  _Block_object_dispose((const void *)(v53 - 176), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10015A448(uint64_t a1)
{
  uint64_t v2 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withUniqueID:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v31 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDDatabaseManager: failed to insert pass %@ because it already exists.", buf, 0xCu);
    }

    BOOL v6 = 0;
  }
  else
  {
    id v7 = [*(id *)(a1 + 32) _passTypeForPass:*(void *)(a1 + 48)];
    id v8 = [*(id *)(a1 + 32) _webServiceForPass:*(void *)(a1 + 48) passType:v7];
    if (sub_10045BB34(*(void *)(*(void *)(a1 + 32) + 88), 2, *(void **)(a1 + 48))) {
      int v9 = PKIsMac() ^ 1;
    }
    else {
      LOBYTE(v9) = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v9;
    if (*(void *)(a1 + 56))
    {
      long long v10 = objc_msgSend(*(id *)(a1 + 32), "_transactionServiceForPass:");
      long long v11 = [*(id *)(a1 + 32) _messageServiceForPass:*(void *)(a1 + 56)];
    }
    else
    {
      long long v10 = 0;
      long long v11 = 0;
    }
    id v3 = +[Pass insertPass:*(void *)(a1 + 48) withPassType:v7 webService:v8 transactionService:v10 messageService:v11 daemonPassData:*(void *)(a1 + 64) inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
    BOOL v6 = v3 != 0;
    if (v3)
    {
      if (*(void *)(a1 + 56))
      {
        uint64_t v12 = [*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:*(void *)(a1 + 40)];
        uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8);
        long long v14 = *(void **)(v13 + 40);
        *(void *)(v13 + 40) = v12;
      }
      if ([*(id *)(a1 + 48) isExpired])
      {
        BOOL v15 = *(void **)(a1 + 56);
        if (v15)
        {
          id v16 = [v15 passActivationState];
          BOOL v17 = v16 == (id)4;
          if (v16 == (id)4) {
            uint64_t v18 = 3;
          }
          else {
            uint64_t v18 = 1;
          }
        }
        else
        {
          uint64_t v18 = 2;
          BOOL v17 = 1;
        }
        long long v19 = v3;
      }
      else if ([*(id *)(a1 + 48) isVoided])
      {
        long long v19 = v3;
        BOOL v17 = 1;
        uint64_t v18 = 4;
      }
      else if ([*(id *)(a1 + 48) isPastRelevancy])
      {
        long long v19 = v3;
        BOOL v17 = 1;
        uint64_t v18 = 5;
      }
      else if ([*(id *)(a1 + 48) isExpiredBasedOnSigningDate])
      {
        long long v19 = v3;
        BOOL v17 = 1;
        uint64_t v18 = 6;
      }
      else
      {
        long long v19 = v3;
        BOOL v17 = 0;
        uint64_t v18 = 1;
      }
      [v19 updateWithSortingState:v17 forSortingReason:v18];
      [v3 updateWithLastModifiedSource:*(void *)(a1 + 120)];
      [*(id *)(a1 + 32) adjustGroupsAfterAddingPass:v3];
      if (v10)
      {
        uint64_t v20 = [v10 notificationService];
        uint64_t v21 = *(void *)(*(void *)(a1 + 88) + 8);
        long long v22 = *(void **)(v21 + 40);
        *(void *)(v21 + 40) = v20;
      }
      if (v11)
      {
        uint64_t v23 = [v11 notificationService];
        uint64_t v24 = *(void *)(*(void *)(a1 + 96) + 8);
        long long v25 = *(void **)(v24 + 40);
        *(void *)(v24 + 40) = v23;
      }
      if (v8)
      {
        uint64_t v26 = [v8 webService];
        uint64_t v27 = *(void *)(*(void *)(a1 + 104) + 8);
        long long v28 = *(void **)(v27 + 40);
        *(void *)(v27 + 40) = v26;
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 1;
    }
  }
  return v6;
}

void sub_10015A780(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDDatabaseManager: Processed pass insertion with FKBankConnectPassUpdateProcessor for primaryAccountIdentifier %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10015AF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose((const void *)(v67 - 240), 8);
  _Block_object_dispose((const void *)(v67 - 208), 8);
  _Block_object_dispose((const void *)(v67 - 160), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10015B024(uint64_t a1)
{
  uint64_t v2 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withUniqueID:*(void *)(a1 + 40)];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 pass];
    uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 8);
    BOOL v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if ([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) passType] == (id)1) {
      [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) updateDevicePaymentApplicationsWithSecureElementIdentifiers:*(void *)(a1 + 48)];
    }
    id v7 = [v3 groupingProfile];
    uint64_t v8 = [v3 webService];
    int v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 56);
    long long v11 = [v3 passType];
    uint64_t v12 = [v9 _webServiceForPass:v10 passType:v11];

    if (sub_10045BDA0(*(void **)(*(void *)(a1 + 32) + 88), 2, v3)) {
      char v13 = PKIsMac() ^ 1;
    }
    else {
      char v13 = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v13;
    if (*(void *)(a1 + 64))
    {
      uint64_t v15 = [*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:*(void *)(a1 + 40)];
      uint64_t v16 = *(void *)(*(void *)(a1 + 96) + 8);
      BOOL v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      uint64_t v18 = [v3 transactionService];
      uint64_t v19 = [*(id *)(a1 + 32) _transactionServiceForPass:*(void *)(a1 + 64)];
      uint64_t v20 = [v3 messageService];
      uint64_t v21 = [*(id *)(a1 + 32) _messageServiceForPass:*(void *)(a1 + 64)];
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    [v3 updateWithPass:*(void *)(a1 + 56) webService:v12 transactionSevice:v19 messageService:v21 daemonPassData:*(void *)(a1 + 72)];
    if (*(void *)(a1 + 168) != 5)
    {
      long long v22 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) cloudKitMetadata];
      [v3 udpateWithCloudKitMetadata:v22];

      objc_msgSend(v3, "udpateWithIsCloudKitArchived:", objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "isCloudKitArchived"));
      uint64_t v23 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) cloudKitSecureMetadata];
      [v3 udpateWithCloudKitSecureMetadata:v23];

      objc_msgSend(v3, "udpateWithIsCloudKitSecurelyArchived:", objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "isCloudKitSecurelyArchived"));
    }
    if (*(void *)(a1 + 64))
    {
      uint64_t v24 = [*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:*(void *)(a1 + 40)];
      uint64_t v25 = *(void *)(*(void *)(a1 + 104) + 8);
      uint64_t v26 = *(void **)(v25 + 40);
      *(void *)(v25 + 40) = v24;
    }
    [v3 updateWithLastModifiedSource:*(void *)(a1 + 168)];
    [*(id *)(a1 + 32) adjustGroupsAfterUpdatingPass:v3 oldGroupingProfile:v7];
    if (v18 | v19)
    {
      uint64_t v27 = [(id)v18 notificationService];
      uint64_t v28 = *(void *)(*(void *)(a1 + 112) + 8);
      long long v29 = *(void **)(v28 + 40);
      *(void *)(v28 + 40) = v27;

      uint64_t v30 = [(id)v19 notificationService];
      uint64_t v31 = *(void *)(*(void *)(a1 + 120) + 8);
      long long v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = v30;

      if (v18)
      {
        if (!v19 || (id v33 = [(id)v18 persistentID], v33 != objc_msgSend((id)v19, "persistentID"))) {
          [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v18];
        }
      }
    }
    if (v20 | v21)
    {
      uint64_t v34 = [(id)v20 notificationService];
      uint64_t v35 = *(void *)(*(void *)(a1 + 128) + 8);
      long long v36 = *(void **)(v35 + 40);
      *(void *)(v35 + 40) = v34;

      uint64_t v37 = [(id)v21 notificationService];
      uint64_t v38 = *(void *)(*(void *)(a1 + 136) + 8);
      uint64_t v39 = *(void **)(v38 + 40);
      *(void *)(v38 + 40) = v37;

      if (v20)
      {
        if (!v21 || (id v40 = [(id)v20 persistentID], v40 != objc_msgSend((id)v21, "persistentID"))) {
          [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v20];
        }
      }
    }
    if (!(v8 | v12)) {
      goto LABEL_35;
    }
    uint64_t v41 = [(id)v12 webService];
    uint64_t v42 = *(void *)(*(void *)(a1 + 144) + 8);
    __int16 v43 = *(void **)(v42 + 40);
    *(void *)(v42 + 40) = v41;

    if (v8 && v12)
    {
      id v44 = [(id)v8 persistentID];
      id v45 = [(id)v12 persistentID];
      uint64_t v46 = *(void *)(*(void *)(a1 + 152) + 8);
      if (v44 == v45)
      {
        *(unsigned char *)(v46 + 24) = 0;
LABEL_35:
        *(unsigned char *)(*(void *)(*(void *)(a1 + 160) + 8) + 24) = 1;

        goto LABEL_36;
      }
      *(unsigned char *)(v46 + 24) = 1;
    }
    else
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 152) + 8) + 24) = 1;
      if (!v8) {
        goto LABEL_35;
      }
    }
    v47 = +[NSDate date];
    [(id)v8 updateWithLastDeletionDate:v47];

    [*(id *)(a1 + 32) _deleteWebServiceIfOrphaned:v8];
    goto LABEL_35;
  }
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    int v49 = 138412290;
    uint64_t v50 = v14;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDDatabaseManager: failed to update pass %@ because it no longer exists.", (uint8_t *)&v49, 0xCu);
  }
LABEL_36:

  return v3 != 0;
}

void sub_10015B80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10015B854(void *a1)
{
  uint64_t v2 = +[Pass anyInDatabase:*(void *)(a1[4] + 8) withUniqueID:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 pass];
    uint64_t v5 = *(void *)(a1[6] + 8);
    BOOL v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    id v7 = [v3 webService];
    uint64_t v8 = [v3 transactionService];
    int v9 = [v3 messageService];
    if (sub_10045BDA0(*(void **)(a1[4] + 88), 2, v3)) {
      int v10 = PKIsMac() ^ 1;
    }
    else {
      LOBYTE(v10) = 0;
    }
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v10;
    if (v7)
    {
      uint64_t v11 = [v7 webService];
      uint64_t v12 = *(void *)(a1[8] + 8);
      char v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      uint64_t v14 = +[NSDate date];
      [v7 updateWithLastDeletionDate:v14];
    }
    if (v8)
    {
      uint64_t v15 = [v8 notificationService];
      uint64_t v16 = *(void *)(a1[9] + 8);
      BOOL v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;
    }
    if (v9)
    {
      uint64_t v18 = [v9 notificationService];
      uint64_t v19 = *(void *)(a1[10] + 8);
      uint64_t v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;
    }
  }

  return v3 != 0;
}

void sub_10015BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10015BC30(uint64_t a1)
{
  uint64_t v2 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withUniqueID:*(void *)(a1 + 40)];
  if (v2)
  {
    [*(id *)(a1 + 32) adjustGroupsBeforeRemovingPass:v2];
    uint64_t v3 = [v2 passType];
    uint64_t v4 = [v3 passTypeID];
    id v5 = [v4 copy];
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = [v2 serialNumber];
    id v9 = [v8 copy];
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    uint64_t v12 = [v2 primaryAccountIdentifier];
    id v13 = [v12 copy];
    uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    uint64_t v16 = [v2 webService];
    BOOL v17 = [v2 transactionService];
    uint64_t v18 = [v2 messageService];
    uint64_t v19 = [v2 associatedAccountIdentifier];
    if (v19) {
      [*(id *)(a1 + 32) deleteAccountEventsForAccountIdentifier:v19];
    }
    [v2 deleteFromDatabase];
    sub_10045B7F4(*(void *)(*(void *)(a1 + 32) + 88), *(void **)(a1 + 40));
    uint64_t v20 = +[PKPassPreferencesManager sharedInstance];
    [v20 removeAllPreferencesForPassWithUniqueID:*(void *)(a1 + 40)];

    [*(id *)(a1 + 32) _deleteWebServiceIfOrphaned:v16];
    [*(id *)(a1 + 32) _deletePassTypeIfOrphaned:v3];
    [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v17];
    [*(id *)(a1 + 32) _deleteNotificationServiceIfOrphaned:v18];
  }
  return v2 != 0;
}

void sub_10015BDFC(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDDatabaseManager: Processed pass deletion with FKBankConnectPassUpdateProcessor for primaryAccountIdentifier %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10015C040(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) delegate];
  id v2 = [*(id *)(a1 + 40) copy];
  [v3 passUniqueIdentifiersMovedToExpired:v2];
}

void sub_10015C0A8(uint64_t a1, uint64_t a2)
{
  id v3 = +[PassAnnotations insertPassAnnotationsForSortingState:*(void *)(a1 + 56) forPassPID:a2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  id v4 = [v3 passAnnotations];

  [*(id *)(a1 + 40) setObject:v4 forKeyedSubscript:*(void *)(a1 + 48)];
}

void sub_10015C36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10015C384(uint64_t a1)
{
  id v2 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withUniqueID:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = +[PassLiveRender passLiveRenderInDatabase:*(void *)(*(void *)(a1 + 32) + 8) forPass:v2];
    if (v3)
    {
      id v4 = v3;
      [v3 updateWithEnabled:*(unsigned __int8 *)(a1 + 56)];
    }
    else
    {
      id v4 = +[PassLiveRender insertEnabled:*(unsigned __int8 *)(a1 + 56) forPass:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
    }
    uint64_t v6 = [v4 passLiveRender];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    BOOL v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_10015C794(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) willRemoveTransaction:*(void *)(a1 + 48)];
}

void sub_10015C7E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didRemoveTransactionWithIdentifier:*(void *)(a1 + 48)];
}

void sub_10015C83C(void *a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 80));
    uint64_t v11 = a1[5];
    id v4 = +[NSArray arrayWithObjects:&v11 count:1];
    [WeakRetained removeItems:v4 completion:0];
  }
  else
  {
    id WeakRetained = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[6];
      uint64_t v6 = a1[7];
      int v7 = 138543618;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "PDApplePayCloudStoreContainer will not sync transaction from CloudKit with serviceIdentifier %{public}@ and transactionSourceIdentifier %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10015CDEC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v17 = a1;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        __int16 v9 = [v8 transactionSourceIdentifier];
        uint64_t v10 = [v2 objectForKey:v9];
        uint64_t v11 = v10;
        if (v10) {
          id v12 = v10;
        }
        else {
          id v12 = objc_alloc_init((Class)NSMutableSet);
        }
        id v13 = v12;

        uint64_t v14 = [v8 paymentTransaction];
        [v13 addObject:v14];

        uint64_t v15 = [v8 transactionSourceIdentifier];
        [v2 setValue:v13 forKey:v15];
      }
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v5);
  }

  uint64_t v16 = [*(id *)(v17 + 40) delegate];
  [v16 willRemoveTransactionsWithSourceIdentifierMapping:v2];
}

void sub_10015CFB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 didRemoveTransactionsWithSourceIdentifierMapping:*(void *)(a1 + 40)];
}

void sub_10015D004(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
  uint64_t v8 = [WeakRetained applePayContainer];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10015D0FC;
  v11[3] = &unk_10072F630;
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v6;
  id v13 = v5;
  id v9 = v5;
  id v10 = v6;
  [v8 canSyncTransactionFromCloudKitForTransactionSourceIdentifier:v9 completion:v11];
}

void sub_10015D0FC(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
    [WeakRetained removeItems:*(void *)(a1 + 40) completion:0];
  }
  else
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v4 = *(id *)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (id i = 0; i != v6; id i = (char *)i + 1)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = [*(id *)(*((void *)&v14 + 1) + 8 * i) serviceIdentifier];
          [v3 addObject:v9];
        }
        id v6 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
      }
      while (v6);
    }

    id v10 = [v3 componentsJoinedByString:@", "];
    uint64_t v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      long long v19 = v10;
      __int16 v20 = 2112;
      uint64_t v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PDApplePayCloudStoreContainer will not sync transactions from cloud kit with serviceIdentifiers %{public}@ and transactionSourceIdentifier %@", buf, 0x16u);
    }
  }
}

void sub_10015E0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose((const void *)(v50 - 216), 8);
  _Block_object_dispose((const void *)(v50 - 184), 8);
  _Block_object_dispose((const void *)(v50 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10015E12C(void *a1)
{
  id v2 = +[Pass anyInDatabase:*(void *)(a1[4] + 8) withUniqueID:a1[5]];
  uint64_t v3 = [v2 pass];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2 && *(void *)(*(void *)(a1[6] + 8) + 40))
  {
    id v6 = [v2 webService];
    uint64_t v7 = [v6 webService];
    uint64_t v8 = *(void *)(a1[7] + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    id v10 = [v2 transactionService];
    uint64_t v11 = [v10 notificationService];
    uint64_t v12 = *(void *)(a1[8] + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    long long v14 = [v2 messageService];
    uint64_t v15 = [v14 notificationService];
    uint64_t v16 = *(void *)(a1[9] + 8);
    long long v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    *(void *)(*(void *)(a1[10] + 8) + 24) = sub_10001E02C(*(id *)(a1[4] + 88), *(void **)(*(void *)(a1[6] + 8) + 40));
    sub_10045BBC4(*(void *)(a1[4] + 88), a1[12], *(void **)(*(void *)(a1[6] + 8) + 40));
    *(void *)(*(void *)(a1[11] + 8) + 24) = sub_10001E02C(*(id *)(a1[4] + 88), *(void **)(*(void *)(a1[6] + 8) + 40));
  }
  else
  {
    long long v18 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = a1[5];
      int v21 = 138412290;
      uint64_t v22 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Error: Failed to find a pass in database with unique identifier '%@'.", (uint8_t *)&v21, 0xCu);
    }
  }
  return 1;
}

void sub_10015E32C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didEnableTransactionService:(*(unsigned __int8 *)(a1 + 48) >> 3) & 1];
}

void sub_10015E388(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didEnableMessageService:(*(unsigned __int8 *)(a1 + 48) >> 2) & 1];
}

void sub_10015EB14(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = +[Pass predicateForHasAnyWebService];
  v19[0] = v8;
  id v9 = +[NSNumber numberWithLongLong:a2];
  id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"pass_type_pid" equalToValue:v9];
  v19[1] = v10;
  uint64_t v11 = +[NSArray arrayWithObjects:v19 count:2];
  uint64_t v12 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v11];
  id v13 = +[SQLiteEntity queryWithDatabase:v7 predicate:v12];

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10015ECF4;
  v16[3] = &unk_10073A710;
  long long v14 = *(void **)(a1 + 40);
  v16[4] = *(void *)(a1 + 32);
  id v17 = v14;
  id v18 = v6;
  id v15 = v6;
  +[Pass enumeratePassUniqueIDsAndTypesForQuery:v13 withHandler:v16];
}

void sub_10015ECF4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 88);
  id v8 = a2;
  LODWORD(a3) = sub_10045B5F8(v7, 2, v8, objc_msgSend(+[PKPass classForPassType:](PKPass, "classForPassType:", a3), "defaultSettings"));

  if (a3)
  {
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 48)];
    *a4 = 1;
  }
}

void sub_10015EE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10015EEA8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 88);
  id v8 = a2;
  LODWORD(a3) = sub_10045B5F8(v7, 2, v8, objc_msgSend(+[PKPass classForPassType:](PKPass, "classForPassType:", a3), "defaultSettings"));

  if (a3)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_100160298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001602B0(void *a1, void *a2, unsigned char *a3)
{
  id v5 = (void *)a1[4];
  id v6 = (void *)a1[5];
  id v7 = a2;
  id v8 = [v6 serviceType];
  id v9 = [v7 uniqueID];

  id v10 = [v5 registrationStatusForNotificationServiceType:v8 passUniqueIdentifier:v9];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v10 == (id)1;
  *a3 = *(unsigned char *)(*(void *)(a1[6] + 8) + 24);
}

void sub_100160AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100160ACC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = [*(id *)(a1 + 48) secureElementIdentifier];
  id v5 = [*(id *)(a1 + 48) applicationIdentifier];
  id v6 = +[PaymentApplication anyInDatabase:v3 withPassUniqueIdentifier:v2 secureElementIdentifier:v4 paymentApplicationIdentifier:v5];

  if (v6 && [*(id *)(a1 + 48) supportsSuica])
  {
    id v7 = +[FelicaTransitAppletState anyInDatabase:withPaymentApplicationPID:](FelicaTransitAppletState, "anyInDatabase:withPaymentApplicationPID:", *(void *)(*(void *)(a1 + 32) + 8), [v6 persistentID]);
    id v8 = v7;
    if (v7)
    {
      id v9 = [v7 transitAppletState];
      id v10 = [v9 copy];
      uint64_t v11 = *(void **)(a1 + 56);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100160CE4;
      v21[3] = &unk_10073A788;
      id v12 = v10;
      id v22 = v12;
      [v11 enumerateKeysAndObjectsUsingBlock:v21];
      [v12 setNeedsStationProcessing:0];
      if (([v9 isEqual:v12] & 1) == 0)
      {
        [v8 updateWithAppletState:v12];
        id v13 = +[SecureElementPassField secureElementPassFieldsInDatabase:forPassPID:](SecureElementPassField, "secureElementPassFieldsInDatabase:forPassPID:", *(void *)(*(void *)(a1 + 32) + 8), [v6 passPID]);
        uint64_t v14 = [v9 transitPassPropertiesWithPaymentApplication:*(void *)(a1 + 48) fieldCollection:v13];
        uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
        uint64_t v16 = *(void **)(v15 + 40);
        *(void *)(v15 + 40) = v14;

        uint64_t v17 = [v12 transitPassPropertiesWithPaymentApplication:*(void *)(a1 + 48) fieldCollection:v13];
        uint64_t v18 = *(void *)(*(void *)(a1 + 72) + 8);
        uint64_t v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;
      }
    }
  }
  return 1;
}

void sub_100160CE4(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) shinkansenOriginStationCode];
  int v7 = PKEqualObjects();

  if (v7) {
    [*(id *)(a1 + 32) setShinkansenOriginStationString:v5];
  }
  id v8 = [*(id *)(a1 + 32) shinkansenDestinationStationCode];
  int v9 = PKEqualObjects();

  if (v9) {
    [*(id *)(a1 + 32) setShinkansenDestinationStationString:v5];
  }
  id v10 = [*(id *)(a1 + 32) shinkansenSecondaryOriginStationCode];
  int v11 = PKEqualObjects();

  if (v11) {
    [*(id *)(a1 + 32) setShinkansenSecondaryOriginStationString:v5];
  }
  id v12 = [*(id *)(a1 + 32) shinkansenSecondaryDestinationStationCode];
  int v13 = PKEqualObjects();

  if (v13) {
    [*(id *)(a1 + 32) setShinkansenSecondaryDestinationStationString:v5];
  }
  uint64_t v14 = [*(id *)(a1 + 32) greenCarOriginStationCode];
  int v15 = PKEqualObjects();

  if (v15) {
    [*(id *)(a1 + 32) setGreenCarOriginStationString:v5];
  }
  uint64_t v16 = [*(id *)(a1 + 32) greenCarDestinationStationCode];
  int v17 = PKEqualObjects();

  if (v17) {
    [*(id *)(a1 + 32) setGreenCarDestinationStationString:v5];
  }
}

void sub_100160E78(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateFromTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) toTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

void sub_100161580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001615F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = [*(id *)(a1 + 48) secureElementIdentifier];
  id v5 = [*(id *)(a1 + 48) applicationIdentifier];
  id v6 = +[PaymentApplication anyInDatabase:v3 withPassUniqueIdentifier:v2 secureElementIdentifier:v4 paymentApplicationIdentifier:v5];

  if (v6)
  {
    id v100 = 0;
    id obj = 0;
    id v99 = 0;
    if ([*(id *)(a1 + 48) supportsSuica])
    {
      int v7 = [*(id *)(a1 + 56) felicaHistory];
      id v8 = v7;
      if (!v7 || [v7 type] == (id)1)
      {
        int v9 = +[FelicaTransitAppletState anyInDatabase:withPaymentApplicationPID:](FelicaTransitAppletState, "anyInDatabase:withPaymentApplicationPID:", *(void *)(*(void *)(a1 + 32) + 8), [v6 persistentID]);
        if (v9)
        {
          id v10 = v9;
          int v11 = [v9 transitAppletState];
          uint64_t v12 = [v11 processUpdateWithAppletHistory:v8 concreteTransactions:&v100 ephemeralTransaction:&obj];
          uint64_t v13 = *(void *)(*(void *)(a1 + 96) + 8);
          uint64_t v14 = *(void **)(v13 + 40);
          *(void *)(v13 + 40) = v12;

          if ([v11 isEqual:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)])
          {
            char v15 = 0;
          }
          else
          {
            uint64_t v26 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v27 = [v11 historySequenceNumber];
              [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) historySequenceNumber];
              v29 = uint64_t v28 = v10;
              *(_DWORD *)buf = 138412546;
              uint64_t v104 = (uint64_t)v27;
              __int16 v105 = 2112;
              v106 = v29;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Updating Applet State history sequence number: %@ -> %@", buf, 0x16u);

              id v10 = v28;
            }

            [v10 updateWithAppletState:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
            char v15 = 1;
          }
        }
        else
        {
          id v20 = objc_alloc_init((Class)PKFelicaTransitAppletState);
          uint64_t v21 = [v20 processUpdateWithAppletHistory:v8 concreteTransactions:0 ephemeralTransaction:&obj];
          uint64_t v22 = *(void *)(*(void *)(a1 + 96) + 8);
          uint64_t v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;

          uint64_t v24 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) historySequenceNumber];
            *(_DWORD *)buf = 138412290;
            uint64_t v104 = (uint64_t)v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Inserting Applet State history sequence number: %@", buf, 0xCu);
          }
          id v10 = +[FelicaTransitAppletState insertFelicaTransitAppletState:forPaymentApplicationPID:inDatabase:](FelicaTransitAppletState, "insertFelicaTransitAppletState:forPaymentApplicationPID:inDatabase:", *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), [v6 persistentID], *(void *)(*(void *)(a1 + 32) + 8));
          char v15 = 1;
          int v11 = v20;
        }

        goto LABEL_28;
      }
    }
    else if ([*(id *)(a1 + 48) supportsTransit])
    {
      uint64_t v16 = +[TransitAppletState anyInDatabase:withPaymentApplicationPID:](TransitAppletState, "anyInDatabase:withPaymentApplicationPID:", *(void *)(*(void *)(a1 + 32) + 8), [v6 persistentID]);
      if (v16)
      {
        id v10 = v16;
        int v11 = [v16 transitAppletState];
        uint64_t v17 = [v11 processUpdateWithAppletHistory:*(void *)(a1 + 56) concreteTransactions:&v100 ephemeralTransaction:&obj mutatedBalances:&v99 balanceLabelDictionary:*(void *)(a1 + 64) unitDictionary:*(void *)(a1 + 72) planLabelDictionary:*(void *)(a1 + 80)];
        uint64_t v18 = *(void *)(*(void *)(a1 + 96) + 8);
        uint64_t v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = v17;

        if ([v11 isEqual:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)])
        {
          char v15 = 0;
          goto LABEL_28;
        }
        uint64_t v34 = PKLogFacilityTypeGetObject();
      }
      else
      {
        id v30 = objc_alloc_init((Class)PKTransitAppletState);
        uint64_t v31 = [v30 processUpdateWithAppletHistory:*(void *)(a1 + 56) concreteTransactions:0 ephemeralTransaction:&obj mutatedBalances:&v99 balanceLabelDictionary:*(void *)(a1 + 64) unitDictionary:*(void *)(a1 + 72) planLabelDictionary:*(void *)(a1 + 80)];
        uint64_t v32 = *(void *)(*(void *)(a1 + 96) + 8);
        id v33 = *(void **)(v32 + 40);
        *(void *)(v32 + 40) = v31;

        uint64_t v34 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) historySequenceNumber];
          *(_DWORD *)buf = 138412290;
          uint64_t v104 = (uint64_t)v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Inserting Applet State history sequence number: %@", buf, 0xCu);
        }
        id v10 = +[TransitAppletState insertTransitAppletState:forPaymentApplicationPID:inDatabase:](TransitAppletState, "insertTransitAppletState:forPaymentApplicationPID:inDatabase:", *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), [v6 persistentID], *(void *)(*(void *)(a1 + 32) + 8));
        int v11 = v30;
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        long long v36 = [v11 historySequenceNumber];
        uint64_t v37 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) historySequenceNumber];
        *(_DWORD *)buf = 138412546;
        uint64_t v104 = (uint64_t)v36;
        __int16 v105 = 2112;
        v106 = v37;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Applet state changed to Dirty. Updating Applet State history sequence number: %@ -> %@", buf, 0x16u);
      }
      [v10 updateWithAppletState:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
      char v15 = 1;
LABEL_28:
      uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
      if (v38)
      {
        objc_msgSend(*(id *)(a1 + 32), "_updatePaymentBalancesAndPlansForTransitAppletState:passUniqueIdentifier:paymentApplicationPID:unitDictionary:", v38, *(void *)(a1 + 40), objc_msgSend(v6, "persistentID"), *(void *)(a1 + 72));
        char v39 = v15 ^ 1;
        if (!*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)) {
          char v39 = 1;
        }
        if ((v39 & 1) == 0)
        {
          id v40 = +[SecureElementPassField secureElementPassFieldsInDatabase:forPassPID:](SecureElementPassField, "secureElementPassFieldsInDatabase:forPassPID:", *(void *)(*(void *)(a1 + 32) + 8), [v6 passPID]);
          uint64_t v41 = [v11 transitPassPropertiesWithPaymentApplication:*(void *)(a1 + 48) fieldCollection:v40];
          uint64_t v42 = *(void *)(*(void *)(a1 + 104) + 8);
          __int16 v43 = *(void **)(v42 + 40);
          *(void *)(v42 + 40) = v41;

          uint64_t v44 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) transitPassPropertiesWithPaymentApplication:*(void *)(a1 + 48) fieldCollection:v40];
          uint64_t v45 = *(void *)(*(void *)(a1 + 112) + 8);
          uint64_t v46 = *(void **)(v45 + 40);
          *(void *)(v45 + 40) = v44;
        }
      }
      if ((v15 & 1) == 0 && !*(unsigned char *)(a1 + 144)) {
        goto LABEL_81;
      }
      v47 = *(void **)(a1 + 88);
      if (v47)
      {
        id v48 = v47;
      }
      else
      {
        id v48 = +[NSDate date];
      }
      int v49 = v48;
      v94 = v10;
      if (!obj)
      {
        uint64_t v67 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) enrouteTransitTypes];
        v68 = [v67 lastObject];

        if (v68)
        {
          if ([0 length])
          {
            v69 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v104 = 0;
              _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Retaining Ephemeral Transaction: %@", buf, 0xCu);
            }
          }
          v64 = 0;
        }
        else
        {
          v64 = [v10 paymentTransactionIdentifier];
          if ([v64 length])
          {
            v70 = +[PaymentTransaction anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withIdentifier:v64];
            uint64_t v71 = [v70 paymentTransaction];
            uint64_t v72 = *(void *)(*(void *)(a1 + 128) + 8);
            v73 = *(void **)(v72 + 40);
            *(void *)(v72 + 40) = v71;
          }
          if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40))
          {
            v74 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v104 = (uint64_t)v64;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Removing Ephemeral Transaction: %@", buf, 0xCu);
            }

            uint64_t v62 = 0;
            goto LABEL_64;
          }
        }
LABEL_65:
        v75 = (char *)[v100 count];
        v76 = v75;
        if (!obj)
        {
          if (v75) {
            goto LABEL_68;
          }
          if (!*(unsigned char *)(a1 + 144))
          {
            v76 = 0;
            goto LABEL_68;
          }
        }
        v76 = v75 + 1;
LABEL_68:
        id v77 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v76];
        v78 = v77;
        if (v100) {
          objc_msgSend(v77, "addObjectsFromArray:");
        }
        if (obj) {
          objc_msgSend(v78, "addObject:");
        }
        v93 = v6;
        if (![v78 count] && *(unsigned char *)(a1 + 144) && !*(unsigned char *)(a1 + 145))
        {
          v91 = +[PKPaymentTransaction paymentTransactionWithSource:1];
          [v91 setTransactionType:2];
          [v91 setTransitType:517];
          [v91 setOriginatedByDevice:1];
          [v91 setTransactionStatus:-1];
          [v78 addObject:v91];
        }
        v92 = v11;
        v79 = [*(id *)(a1 + 48) appletCurrencyCode];
        long long v95 = 0u;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        id v80 = v78;
        id v81 = [v80 countByEnumeratingWithState:&v95 objects:v102 count:16];
        if (v81)
        {
          id v82 = v81;
          uint64_t v83 = *(void *)v96;
          do
          {
            v84 = 0;
            v85 = v49;
            do
            {
              if (*(void *)v96 != v83) {
                objc_enumerationMutation(v80);
              }
              v86 = *(void **)(*((void *)&v95 + 1) + 8 * (void)v84);
              [v86 setTransactionDate:v85];
              int v49 = [v85 dateByAddingTimeInterval:0.001];

              [v86 setCurrencyCode:v79];
              v87 = [*(id *)(a1 + 48) stationCodeProvider];
              [v86 setStationCodeProvider:v87];

              [v86 setTransactionStatus:-1];
              [v86 setShouldSuppressDate:*(unsigned __int8 *)(a1 + 145)];
              v84 = (char *)v84 + 1;
              v85 = v49;
            }
            while (v82 != v84);
            id v82 = [v80 countByEnumeratingWithState:&v95 objects:v102 count:16];
          }
          while (v82);
        }

        uint64_t v88 = *(void *)(*(void *)(a1 + 136) + 8);
        v89 = *(void **)(v88 + 40);
        *(void *)(v88 + 40) = v80;

        int v11 = v92;
        id v6 = v93;
        id v10 = v94;
        goto LABEL_81;
      }
      [obj setTransactionStatus:-1];
      uint64_t v50 = [v11 enrouteTransitTypes];
      id v51 = [v50 count];

      if (v51)
      {
        uint64_t v52 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) enrouteTransitTypes];
        uint64_t v53 = [v52 lastObject];

        id v54 = objc_alloc((Class)NSSet);
        uint64_t v55 = [v11 enrouteTransitTypes];
        id v56 = [v54 initWithArray:v55];

        if (v53 && [v56 containsObject:v53]) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), obj);
        }

        id v10 = v94;
      }
      v57 = [v10 paymentTransactionIdentifier];
      if ([v57 length])
      {
        v58 = +[PaymentTransaction anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withIdentifier:v57];
        uint64_t v59 = [v58 paymentTransaction];
        uint64_t v60 = *(void *)(*(void *)(a1 + 128) + 8);
        v61 = *(void **)(v60 + 40);
        *(void *)(v60 + 40) = v59;
      }
      uint64_t v62 = [obj identifier];

      uint64_t v63 = *(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40);
      v64 = PKLogFacilityTypeGetObject();
      BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
      if (v63)
      {
        if (v65)
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v104 = v62;
          v66 = "Replacing Ephemeral Transaction: %@";
LABEL_57:
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, v66, buf, 0xCu);
        }
      }
      else if (v65)
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v104 = (uint64_t)obj;
        v66 = "Inserting Ephemeral Transaction: %@";
        goto LABEL_57;
      }
LABEL_64:

      [v10 setPaymentTransactionIdentifier:v62];
      v64 = v62;
      goto LABEL_65;
    }
    int v11 = 0;
    id v10 = 0;
LABEL_81:
  }
  return 1;
}

void sub_1001621FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateFromTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) toTransitProperties:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

void sub_100162680(uint64_t a1)
{
  id v11 = [*(id *)(a1 + 32) dbPeerPaymentAccount];
  id v2 = [v11 associatedPassUniqueID];
  uint64_t v3 = [*(id *)(a1 + 32) primaryPaymentApplicationForPassUniqueIdentifier:v2];
  uint64_t v4 = [v3 transactionSourceIdentifier];
  id v5 = [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v4];
  if (!v5)
  {
    id v5 = objc_alloc_init((Class)PKPaymentTransaction);
    [v5 setTransactionType:3];
    [v5 addUpdateReasons:256];
    [v5 setServiceIdentifier:*(void *)(a1 + 40)];
    id v6 = +[NSDate date];
    [v5 setTransactionDate:v6];
  }
  int v7 = *(void **)(a1 + 48);
  if (v7)
  {
    id v8 = [v5 peerPaymentMemo];
    unsigned __int8 v9 = [v7 isEqualToString:v8];

    if ((v9 & 1) == 0)
    {
      [v5 setPeerPaymentMemo:*(void *)(a1 + 48)];
      id v10 = [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:v5 transactionSourceIdentifier:v4 transactionArchive:0 originDeviceID:0 insertionMode:0 performTruncation:0 insertedTransaction:0];
    }
  }
}

void sub_1001628BC(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) dbPeerPaymentAccount];
  id v2 = [v8 associatedPassUniqueID];
  uint64_t v3 = [*(id *)(a1 + 32) primaryPaymentApplicationForPassUniqueIdentifier:v2];
  uint64_t v4 = [v3 transactionSourceIdentifier];
  id v5 = [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v4];
  id v6 = v5;
  if (v5 && *(void *)(a1 + 48))
  {
    objc_msgSend(v5, "setPeerPaymentMessageReceivedDate:");
    [v6 addUpdateReasons:512];
    id v7 = [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:v6 transactionSourceIdentifier:v4 transactionArchive:0 originDeviceID:0 insertionMode:0 performTruncation:0 insertedTransaction:0];
  }
}

void sub_100162AC4(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) dbPeerPaymentAccount];
  id v2 = [v8 associatedPassUniqueID];
  uint64_t v3 = [*(id *)(a1 + 32) primaryPaymentApplicationForPassUniqueIdentifier:v2];
  uint64_t v4 = [v3 transactionSourceIdentifier];
  id v5 = [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v4];
  if (!v5)
  {
    id v5 = objc_alloc_init((Class)PKPaymentTransaction);
    [v5 setTransactionType:3];
    [v5 setPeerPaymentPaymentMode:2];
    [v5 addUpdateReasons:256];
    [v5 setServiceIdentifier:*(void *)(a1 + 40)];
    id v6 = +[NSDate date];
    [v5 setTransactionDate:v6];
  }
  [v5 setPeerPaymentMemo:*(void *)(a1 + 48)];
  [v5 setPeerPaymentCounterpartImageRecordIdentifier:*(void *)(a1 + 56)];
  [v5 setOriginatedByDevice:1];
  id v7 = [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:v5 transactionSourceIdentifier:v4 transactionArchive:0 originDeviceID:0 insertionMode:0 performTruncation:0 insertedTransaction:0];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100162F7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didReceiveMessage:*(void *)(a1 + 48)];
}

void sub_100163B4C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didResolvePendingTransitTransactionAmountsWithTransaction:*(void *)(a1 + 48) paymentApplication:*(void *)(a1 + 56) balance:*(void *)(a1 + 64)];
}

uint64_t sub_10016499C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  +[PaymentCommutePlanDetail deleteEntitiesForPass:*(void *)(a1 + 32) inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = *(id *)(a1 + 48);
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = +[PaymentCommutePlanDetail insertPaymentPlan:*(void *)(*((void *)&v17 + 1) + 8 * (void)v7) withPaymentPass:*(void *)(a1 + 32) inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];
        unsigned __int8 v9 = [v8 paymentPlan];
        [v2 addObject:v9];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v5);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = *(NSObject **)(v10 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100164B7C;
  block[3] = &unk_10072E238;
  void block[4] = v10;
  id v15 = *(id *)(a1 + 56);
  id v16 = v2;
  id v12 = v2;
  dispatch_async(v11, block);

  return 1;
}

void sub_100164B7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateToPlans:*(void *)(a1 + 48)];
}

uint64_t sub_1001653F0(uint64_t a1)
{
  +[PaymentBalance deleteEntitiesForPass:*(void *)(a1 + 32) inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 48);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = +[PaymentBalance insertPaymentBalance:withPaymentPass:inDatabase:](PaymentBalance, "insertPaymentBalance:withPaymentPass:inDatabase:", *(void *)(*((void *)&v9 + 1) + 8 * (void)v6), *(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 8), (void)v9);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  return 1;
}

void sub_100165514(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 48) copy];
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateBalancesFrom:v3 toBalances:*(void *)(a1 + 56)];
}

void sub_100165788(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 48) allObjects];
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateBalancesFrom:0 toBalances:v3];
}

void sub_1001658D8(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[NSArray array];
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateBalancesFrom:0 toBalances:v3];
}

void sub_100165B30(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didUpdateBalanceReminder:*(void *)(a1 + 48) forBalanceWithIdentifier:*(void *)(a1 + 56)];
}

void sub_100165D10(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 rescheduleCommutePlanRenewalRemindersForPaymentPassWithUniqueIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_100167ED8(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v9 = 138412802;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating Existing Transaction: %@ with Transaction: %@ for identifier %{public}@", (uint8_t *)&v9, 0x20u);
  }

  [*(id *)(a1 + 56) updateWithPaymentTransaction:*(void *)(a1 + 40)];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    int v9 = 138412546;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating Existing Transaction Archive: %@ with Updated Transaction Archive: %@", (uint8_t *)&v9, 0x16u);
  }

  [*(id *)(a1 + 80) updateWithTransactionArchive:*(void *)(a1 + 72)];
  return 1;
}

void sub_100168010(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_100168068(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_1001680C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) willRemoveTransaction:*(void *)(a1 + 48)];
}

void sub_100168114(void *a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 80));
    uint64_t v11 = a1[5];
    uint64_t v4 = +[NSArray arrayWithObjects:&v11 count:1];
    [WeakRetained removeItems:v4 completion:0];
  }
  else
  {
    id WeakRetained = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[6];
      uint64_t v6 = a1[7];
      int v7 = 138543618;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "PDApplePayCloudStoreContainer will not sync transaction from CloudKit with serviceIdentifier %{public}@ and transactionSourceIdentifier %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10016821C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didRemoveTransactionWithIdentifier:*(void *)(a1 + 48)];
}

void sub_100168424(uint64_t a1)
{
  uint64_t v16 = 0;
  long long v17 = &v16;
  uint64_t v18 = 0x3032000000;
  long long v19 = sub_10002090C;
  long long v20 = sub_100020F78;
  id v21 = [*(id *)(a1 + 32) transactionSourceIdentifier];
  uint64_t v2 = v17[5];
  if (!v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(v4 + 8);
      __int16 v9 = _NSConcreteStackBlock;
      uint64_t v10 = 3221225472;
      uint64_t v11 = sub_10016858C;
      uint64_t v12 = &unk_10073A580;
      uint64_t v13 = v4;
      id v14 = v3;
      id v15 = &v16;
      sub_10000817C(v5, &v9);

      uint64_t v2 = v17[5];
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  uint64_t v6 = objc_msgSend(*(id *)(a1 + 48), "_insertOrUpdatePaymentTransaction:transactionSourceIdentifier:transactionArchive:originDeviceID:insertionMode:performTruncation:insertedTransaction:", *(void *)(a1 + 56), v2, 0, *(void *)(a1 + 64), *(void *)(a1 + 80), *(unsigned __int8 *)(a1 + 96), *(void *)(a1 + 88), v9, v10, v11, v12, v13);
  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  _Block_object_dispose(&v16, 8);
}

void sub_100168574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016858C(uint64_t a1)
{
  uint64_t v2 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withUniqueID:*(void *)(a1 + 40)];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 transactionSourceIdentifier];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      uint64_t v7 = +[TransactionSource insertTransactionSourceWithType:0 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
      uint64_t v8 = [v7 identifier];
      uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      uint64_t v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 138543618;
        uint64_t v20 = v12;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Pass %{public}@ did not have a transaction source, adding one now %@ and notifying the delegate that the pass has been updated", buf, 0x16u);
      }

      objc_msgSend(v3, "updateWithTransactionSourcePID:", objc_msgSend(v7, "persistentID"));
      uint64_t v14 = *(void *)(a1 + 32);
      id v15 = *(NSObject **)(v14 + 32);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100168770;
      v17[3] = &unk_10072E198;
      v17[4] = v14;
      id v18 = *(id *)(a1 + 40);
      dispatch_async(v15, v17);
    }
  }

  return 1;
}

void sub_100168770(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56));
  [WeakRetained passDidUpdateTransactionSourceIdentifierWithPassUniqueIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_100168964(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _insertOrUpdatePaymentTransaction:*(void *)(a1 + 40) transactionSourceIdentifier:*(void *)(a1 + 48) transactionArchive:*(void *)(a1 + 56) originDeviceID:*(void *)(a1 + 64) insertionMode:*(void *)(a1 + 80) performTruncation:*(unsigned __int8 *)(a1 + 96) insertedTransaction:*(void *)(a1 + 88)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_100168C2C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_100168DB8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_100168F14(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

BOOL sub_100168F30(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = a1[4];
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          if (objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "suppressBehavior", (void)v10) != a1[7]) {
            id v8 = objc_msgSend(WeakRetained, "updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:");
          }
          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }
  }
  return WeakRetained != 0;
}

void sub_100169260(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

void sub_1001693FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionSourceIdentifier:*(void *)(a1 + 40) didReceiveTransaction:*(void *)(a1 + 48) oldTransaction:*(void *)(a1 + 56)];
}

NSString *__cdecl sub_1001698C8(id a1, PKPass *a2)
{
  return (NSString *)[(PKPass *)a2 uniqueID];
}

void sub_1001698D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)a4];
  objc_msgSend(v7, "setIsCloudKitArchived:", objc_msgSend(*(id *)(a4 + 8), "BOOLValue"));
  [v7 setCloudKitMetadata:*(void *)(a4 + 16)];
  objc_msgSend(v7, "setIsCloudKitSecurelyArchived:", objc_msgSend(*(id *)(a4 + 24), "BOOLValue"));
  [v7 setCloudKitSecureMetadata:*(void *)(a4 + 32)];
  id v5 = (void *)_DateForSQLValue();
  [v7 setIngestedDate:v5];

  uint64_t v6 = (void *)_DateForSQLValue();
  [v7 setModifiedDate:v6];

  objc_msgSend(v7, "setRevoked:", objc_msgSend(*(id *)(a4 + 56), "BOOLValue"));
}

void sub_100169AA8(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [*(id *)(a1 + 32) cloudKitMetadata];

  if (v3)
  {
    [v7 udpateWithIsCloudKitArchived:1];
    id v4 = [*(id *)(a1 + 32) cloudKitMetadata];
    [v7 udpateWithCloudKitMetadata:v4];
  }
  id v5 = [*(id *)(a1 + 32) cloudKitSecureMetadata];

  if (v5)
  {
    [v7 udpateWithIsCloudKitSecurelyArchived:1];
    uint64_t v6 = [*(id *)(a1 + 32) cloudKitSecureMetadata];
    [v7 udpateWithCloudKitSecureMetadata:v6];
  }
}

void sub_100169DD4(uint64_t a1, void *a2)
{
  id v14 = a2;
  id v3 = (void *)PKCloudStorePassesSyncContainerName;
  id v4 = *(id *)(a1 + 32);
  id v5 = v3;
  if (v4 == v5)
  {

LABEL_10:
    [v14 udpateWithIsCloudKitArchived:0];
    [v14 udpateWithCloudKitMetadata:0];
    goto LABEL_20;
  }
  uint64_t v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
  }
  else
  {
    unsigned int v8 = [v4 isEqualToString:v5];

    if (v8) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = (void *)PKCloudStorePassesSyncSecureContainerName;
  id v10 = *(id *)(a1 + 32);
  id v11 = v9;
  if (v10 == v11)
  {
  }
  else
  {
    long long v12 = v11;
    if (v10 && v11)
    {
      unsigned int v13 = [v10 isEqualToString:v11];

      if (v13) {
        goto LABEL_19;
      }
    }
    else
    {
    }
    [v14 udpateWithIsCloudKitArchived:0];
    [v14 udpateWithCloudKitMetadata:0];
  }
LABEL_19:
  [v14 udpateWithIsCloudKitSecurelyArchived:0];
  [v14 udpateWithCloudKitSecureMetadata:0];
LABEL_20:
}

void sub_10016A86C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 passWithUniqueIdentifier:*(void *)(a1 + 40) didReceiveValueAddedServiceTransaction:*(void *)(a1 + 48)];
}

void sub_10016ACDC(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 48) paymentApplication];
  [v4 paymentPassWithUniqueIdentifier:v2 didUpdateDefaultPaymentApplication:v3];
}

void sub_10016C1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016C200(uint64_t a1, sqlite3_stmt *a2)
{
  [*(id *)(a1 + 32) bindToStatement:a2 bindingIndex:*(void *)(*(void *)(a1 + 80) + 8) + 24];
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8);
    int v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    sqlite3_bind_text(a2, v5, (const char *)[*(id *)(a1 + 40) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      unsigned int v8 = (void *)_DateForSQLValue();
      uint64_t v9 = [v8 dateByAddingTimeInterval:(double)(uint64_t)-*(void *)(a1 + 88)];

      id v10 = *(void **)(a1 + 48);
      if (*(unsigned char *)(a1 + 105)) {
        [v10 closestStartOfYearFromDate:v9];
      }
      else {
      id v11 = [v10 closestStartOfMonthFromDate:v9];
      }

      id v12 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if ([v11 compare:*(void *)(a1 + 56)] == (id)1
        && [v11 compare:*(void *)(a1 + 64)] == (id)-1)
      {
        id v13 = objc_alloc_init((Class)PKPaymentTransactionGroup);
        [v13 setStartDate:v11];
        if (*(unsigned char *)(a1 + 105)) {
          [*(id *)(a1 + 48) nextStartOfYearFromDate:v11];
        }
        else {
        id v14 = PKStartOfNextMonth();
        }
        [v13 setEndDate:v14];

        objc_msgSend(v13, "setTransactionCount:", objc_msgSend(v12, "integerValue"));
        [v13 setType:*(void *)(a1 + 96)];
        [*(id *)(a1 + 72) setObject:v13 forKey:v11];
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_10016C3E4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 64));
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v6 = (void *)_DateForSQLValue();
      id v7 = [v6 dateByAddingTimeInterval:(double)(uint64_t)-*(void *)(a1 + 72)];

      unsigned int v8 = *(void **)(a1 + 32);
      if (*(unsigned char *)(a1 + 88)) {
        [v8 closestStartOfYearFromDate:v7];
      }
      else {
      uint64_t v9 = [v8 closestStartOfMonthFromDate:v7];
      }

      id v10 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if ([v9 compare:*(void *)(a1 + 40)] == (id)1
        && [v9 compare:*(void *)(a1 + 48)] == (id)-1)
      {
        id v11 = [*(id *)(a1 + 56) objectForKey:v9];
        if (v11)
        {
          id v12 = v11;
          objc_msgSend(v11, "setTransactionCount:", (char *)objc_msgSend(v11, "transactionCount") + (void)objc_msgSend(v10, "integerValue"));
        }
        else
        {
          id v12 = objc_alloc_init((Class)PKPaymentTransactionGroup);
          [v12 setStartDate:v9];
          if (*(unsigned char *)(a1 + 88)) {
            [*(id *)(a1 + 32) nextStartOfYearFromDate:v9];
          }
          else {
          id v13 = PKStartOfNextMonth();
          }
          [v12 setEndDate:v13];

          objc_msgSend(v12, "setTransactionCount:", objc_msgSend(v10, "integerValue"));
          [v12 setType:*(void *)(a1 + 80)];
          [*(id *)(a1 + 56) setObject:v12 forKey:v9];
        }
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_10016C5B8(uint64_t a1, sqlite3_stmt *a2)
{
  [*(id *)(a1 + 32) bindToStatement:a2 bindingIndex:*(void *)(*(void *)(a1 + 64) + 8) + 24];
  sqlite3_bind_text(a2, *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), (const char *)[*(id *)(a1 + 40) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int64(a2, *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 1, 0);
  sqlite3_bind_int64(a2, *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 2, 1);
  sqlite3_bind_int64(a2, *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 3, 0);
  sqlite3_bind_int64(a2, *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 4, 8);
  sqlite3_bind_int64(a2, *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 5, 0x7FFFFFFFFFFFFFFFLL);
  sqlite3_bind_int64(a2, *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) + 6, 0x7FFFFFFFFFFFFFFFLL);
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v6 = (void *)_DateForSQLValue();
      id v7 = [v6 dateByAddingTimeInterval:(double)(uint64_t)-*(void *)(a1 + 72)];

      unsigned int v8 = *(void **)(a1 + 48);
      if (*(unsigned char *)(a1 + 80)) {
        [v8 closestStartOfYearFromDate:v7];
      }
      else {
      uint64_t v9 = [v8 closestStartOfMonthFromDate:v7];
      }

      id v10 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v11 = [*(id *)(a1 + 56) objectForKey:v9];
      if (v11) {
        BOOL v12 = v10 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (!v12)
      {
        PKCurrencyStorageNumberToCurrencyDecimal();
        id v13 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
        id v14 = PKCurrencyAmountCreate(v13, *(NSString **)(a1 + 40), 0);
        [v11 setTotalAmount:v14];
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

int64_t sub_10016C7E0(id a1, PKPaymentTransactionGroup *a2, PKPaymentTransactionGroup *a3)
{
  uint64_t v4 = a2;
  id v5 = [(PKPaymentTransactionGroup *)a3 startDate];
  uint64_t v6 = [(PKPaymentTransactionGroup *)v4 startDate];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10016D564(id *a1)
{
  uint64_t v2 = a1 + 9;
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10016D688;
  v4[3] = &unk_10073A9C0;
  objc_copyWeak(&v10, v2);
  id v5 = a1[4];
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  id v9 = a1[8];
  [WeakRetained performTransactionWithBlock:v4];

  objc_destroyWeak(&v10);
}

void sub_10016D674(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10016D688(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  if (WeakRetained)
  {
    long long v36 = [a1[4] merchant];
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    uint64_t v38 = a1;
    id obj = a1[5];
    id v3 = [obj countByEnumeratingWithState:&v46 objects:v50 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v47;
      uint64_t v39 = *(void *)v47;
      do
      {
        id v6 = 0;
        id v40 = v4;
        do
        {
          if (*(void *)v47 != v5) {
            objc_enumerationMutation(obj);
          }
          id v7 = *(void **)(*((void *)&v46 + 1) + 8 * (void)v6);
          id v9 = [v7 statementIdentifier];
          id v10 = [v7 statementDate];
          id v11 = [v7 identifier];
          unsigned int v12 = [WeakRetained hasTransactionWithTransactionIdentifier:v11];
          if (v12) {
            BOOL v13 = v9 == 0;
          }
          else {
            BOOL v13 = 0;
          }
          if (v13)
          {
            [WeakRetained deletePaymentTransactionWithIdentifier:v11];
          }
          else if (v9)
          {
            unsigned int v14 = v12;
            id v15 = [v7 originalAmountDue];
            uint64_t v16 = v15;
            if (v15)
            {
              id v17 = v15;
            }
            else
            {
              id v17 = [v7 amountDue];
            }
            uint64_t v42 = v17;

            if (v10)
            {
              id v18 = +[NSDecimalNumber zero];
              unsigned __int8 v19 = [v42 isEqualToNumber:v18];

              if ((v19 & 1) == 0)
              {
                if (v14
                  && ([WeakRetained paymentTransactionForIdentifier:v11],
                      (uint64_t v20 = objc_claimAutoreleasedReturnValue()) != 0))
                {
                  id v21 = v20;
                  uint64_t v37 = v21;
                }
                else
                {
                  id v21 = objc_alloc_init((Class)PKPaymentTransaction);
                  uint64_t v37 = 0;
                }
                [v21 setTransactionDate:v10];
                [v21 setTransactionStatus:1];
                [v21 setTransactionSource:8];
                [v21 setTransactionType:13];
                [v21 setIdentifier:v11];
                uint64_t v22 = [v38[4] identifier];
                [v21 setReferenceIdentifier:v22];

                [v21 setAmount:v42];
                uint64_t v23 = [v7 currencyCode];
                [v21 setCurrencyCode:v23];

                [v21 setAccountIdentifier:v38[6]];
                [v21 setAccountType:2];
                uint64_t v24 = [v38[4] accountUserAltDSID];
                [v21 setAltDSID:v24];

                if (v36)
                {
                  uint64_t v25 = [v21 merchant];

                  if (!v25)
                  {
                    id v26 = objc_alloc_init((Class)PKMerchant);
                    uint64_t v27 = [v36 name];
                    [v26 setName:v27];

                    uint64_t v28 = [v36 identifier];
                    [v26 setMerchantIdentifier:v28];

                    objc_msgSend(v26, "setIndustryCode:", objc_msgSend(v36, "categoryCode"));
                    uint64_t v29 = [v36 city];
                    [v26 setCity:v29];

                    id v30 = [v36 state];
                    [v26 setState:v30];

                    uint64_t v31 = [v36 postalCode];
                    [v26 setZip:v31];

                    uint64_t v32 = [v36 country];
                    [v26 setRawCountry:v32];

                    [v21 setMerchant:v26];
                  }
                }
                id v33 = [WeakRetained _insertOrUpdatePaymentTransaction:v21 transactionSourceIdentifier:v38[7] transactionArchive:0 originDeviceID:0 insertionMode:0 performTruncation:0 insertedTransaction:0];
                if (v33 && v38[8])
                {
                  uint64_t v34 = PDUtilityQueue();
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472;
                  block[2] = sub_10016DBB0;
                  block[3] = &unk_10072E598;
                  id v45 = v38[8];
                  id v44 = v33;
                  dispatch_async(v34, block);
                }
              }
            }

            uint64_t v5 = v39;
            id v4 = v40;
          }

          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [obj countByEnumeratingWithState:&v46 objects:v50 count:16];
      }
      while (v4);
    }
  }
  return WeakRetained != 0;
}

uint64_t sub_10016DBB0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10016E480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016E498(uint64_t a1)
{
  uint64_t v2 = +[PeerPaymentAccount anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing peer payment account from database", v8, 2u);
    }

    uint64_t v4 = [v2 peerPaymentAccount];
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    [*(id *)(a1 + 32) deletePeerPaymentPendingRequestsForPeerPaymentAccount];
    [v2 deleteFromDatabase];
  }

  return 1;
}

void sub_10016E898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016E8B0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[1];
  uint64_t v4 = [v2 dbPeerPaymentAccount];
  uint64_t v5 = +[PeerPaymentPreferences anyInDatabase:v3 forPeerPaymentAccount:v4];

  if (v5)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing peer payment preferences from database", v11, 2u);
    }

    uint64_t v7 = [v5 peerPaymentPreferences];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    [v5 deleteFromDatabase];
  }

  return 1;
}

uint64_t sub_10016EAAC(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = [v5 longLongValue];

      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      id v9 = [v8 longLongValue];

      if (!v7 && v9 == *(id *)(a1 + 48))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_10016EBF4;
        v11[3] = &unk_10073AA10;
        id v12 = *(id *)(a1 + 40);
        id v13 = v6;
        sub_100012DC8(v10, @"UPDATE payment_transaction SET account_type = ?, account_identifier = ? WHERE pid = ?", v11);
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_10016EBF4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 1);
  sqlite3_bind_text(a2, 2, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int64(a2, 3, *(void *)(a1 + 40));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

void sub_10016FD18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_10016FD44(uint64_t a1, void *a2)
{
  id result = [a2 count];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

id sub_10016FD78(uint64_t a1, void *a2)
{
  id result = [a2 count];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10016FFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100170024(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = v3;
  return _objc_release_x1(v3, v5);
}

void sub_10017006C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v6 = *a4;
  if (objc_msgSend(v5, "containsObject:")) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) removeObject:v6];
  }
  else {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100170464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t sub_1001704A0(uint64_t a1, void *a2)
{
  id v3 = [a2 mutableCopy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = v3;
  return _objc_release_x1(v3, v5);
}

void sub_1001704E8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v6 = *a4;
  if (objc_msgSend(v5, "containsObject:")) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) removeObject:v6];
  }
  else {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100170A24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56));
  [WeakRetained handleDatabaseIntegrityProblem];
}

void sub_100173148(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  id v5 = objc_msgSend(*(id *)(a1 + 40), "insertOrUpdatePaymentTransaction:withPassUniqueIdentifier:paymentApplication:insertionMode:performTruncation:insertedTransaction:", v6, *(void *)(a1 + 48), *(void *)(a1 + 56), 0, (char *)objc_msgSend(*(id *)(a1 + 32), "count") - 1 == a3, 0);
}

id sub_1001731C4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) insertOrUpdateAccountEvent:a2];
}

void sub_1001731D0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = [*(id *)(a1 + 40) transactionSourceIdentifier];
  id v5 = [v3 insertOrUpdatePaymentTransaction:v6 withTransactionSourceIdentifier:v4 insertionMode:0 performTruncation:0 insertedTransaction:0];
}

id sub_10017324C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) insertOrUpdateAccountEvent:a2];
}

void sub_1001736D4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
  id v9 = [WeakRetained applePayContainer];
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1001737EC;
  v16[3] = &unk_10073AB28;
  id v12 = *(id *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 40);
  id v17 = v12;
  uint64_t v18 = v13;
  id v19 = v6;
  id v20 = v7;
  id v14 = v6;
  id v15 = v7;
  [v9 canSyncTransactionToCloudKit:v10 forTransactionSourceIdentifier:v11 completion:v16];
}

uint64_t sub_1001737EC(uint64_t a1, int a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v3();
}

void sub_100173838(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = objc_alloc_init((Class)NSMutableSet);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id obj = *(id *)(a1 + 32);
    id v19 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v19)
    {
      uint64_t v18 = *(void *)v21;
      uint64_t v17 = PKCloudStoreOperationGroupUserActionImplicit;
      do
      {
        for (id i = 0; i != v19; id i = (char *)i + 1)
        {
          if (*(void *)v21 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v4 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          id v5 = *(void **)(a1 + 40);
          id v6 = [v4 serviceIdentifier];
          id v7 = [v5 transactionArchiveForTransactionWithServiceIdentifier:v6 transactionSourceIdentifier:*(void *)(a1 + 48)];

          id v8 = [v7 archiveLocationsWithType:0 isArchived:0];
          id v9 = objc_msgSend(v8, "pk_setByApplyingBlock:", &stru_10073AB48);
          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 80));
          uint64_t v11 = [WeakRetained applePayContainer];
          id v12 = [v11 cloudStoreSpecificKeysForItem:v4];

          id v13 = [objc_alloc((Class)PKCloudStoreUploadItemConfiguration) initWithItem:v4 recordSpecificKeys:v12];
          [v13 setCloudStoreZones:v9];
          [v2 addObject:v13];
          id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 80));
          id v15 = [v14 applePayContainer];
          [v15 updateCloudStoreWithLocalItemsWithConfigurations:v2 groupName:v17 groupNameSuffix:0 qualityOfService:17 completion:0];
        }
        id v19 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v19);
    }
  }
}

id sub_100173A84(id a1, PKPaymentTransactionArchiveLocation *a2)
{
  return [(PKPaymentTransactionArchiveLocation *)a2 cloudStoreZone];
}

PKAccountUser *__cdecl sub_10017482C(id a1, AccountUser *a2)
{
  return (PKAccountUser *)[(AccountUser *)a2 accountUser];
}

BOOL sub_100176320(id a1, PKAccountUser *a2)
{
  return [(PKAccountUser *)a2 isCurrentUser];
}

void sub_100176328(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 paymentPassWithUniqueIdentifier:*(void *)(a1 + 40) didRecomputeCategoryVisualizationMagnitudes:*(void *)(a1 + 48) withStyle:*(void *)(a1 + 56)];
}

NSString *__cdecl sub_100177824(id a1, PKPaymentTransaction *a2)
{
  return (NSString *)[(PKPaymentTransaction *)a2 serviceIdentifier];
}

int64_t sub_10017782C(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 transactionDate];
  id v6 = [v4 transactionDate];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

int64_t sub_10017789C(id a1, id a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 startDate];
  id v6 = [v4 startDate];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_1001794C4(id a1, PayLaterFinancingPlan *a2)
{
  return [(PayLaterFinancingPlan *)a2 financingPlan];
}

uint64_t sub_10017A3DC(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10017A4B8;
  v7[3] = &unk_10073ACF8;
  id v3 = (void *)a1[4];
  id v4 = (void *)a1[6];
  void v7[4] = a1[5];
  id v8 = v2;
  id v9 = v4;
  id v5 = v2;
  [v3 enumerateObjectsUsingBlock:v7];
  +[DiscoveryItem deleteItemsNotIncludingIdentifiers:v5 inDatabase:*(void *)(a1[5] + 8)];

  return 1;
}

void sub_10017A4B8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1[4] + 8);
  id v6 = a2;
  id v11 = +[DiscoveryItem insertOrUpdateItem:v6 itemOrder:a3 inDatabase:v5];
  id v7 = (void *)a1[5];
  id v8 = [v6 identifier];

  [v7 addObject:v8];
  id v9 = (void *)a1[6];
  uint64_t v10 = [v11 item];
  [v9 addObject:v10];
}

void sub_10017A6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017A6B8(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (id i = 0; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v8 = *(void **)(a1 + 40);
        id v9 = objc_msgSend(v7, "identifier", (void)v15);
        uint64_t v10 = [v8 discoveryItemWithIdentifier:v9];

        if (v10)
        {
          objc_msgSend(v7, "setStatus:", objc_msgSend(v10, "status"));
          objc_msgSend(v7, "setViewCount:", objc_msgSend(v10, "viewCount"));
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }

  uint64_t v11 = [*(id *)(a1 + 40) setDiscoveryItems:*(void *)(a1 + 32)];
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  return 1;
}

void sub_10017A94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017A964(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v9 = objc_msgSend(v8, "identifier", (void)v18);
        uint64_t v10 = [*(id *)(a1 + 40) discoveryItemWithIdentifier:v9];
        if (v10)
        {
          id v11 = v10;
          [v10 updateWithDiscoveryItem:v8];
        }
        else
        {
          id v11 = [v8 copy];
          if ([v11 hasTrigger])
          {
            uint64_t v12 = v11;
            uint64_t v13 = 5;
          }
          else
          {
            uint64_t v12 = v11;
            uint64_t v13 = 1;
          }
          [v12 setStatus:v13];
        }
        [v2 addObject:v11];
      }
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v5);
  }

  uint64_t v14 = [*(id *)(a1 + 40) setDiscoveryItems:v2];
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  return 1;
}

void sub_10017AC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017AC40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) discoveryItemsWaitingForTrigger];
  id v3 = objc_alloc_init((Class)NSMutableString);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = v2;
  id v4 = [obj countByEnumeratingWithState:&v38 objects:v45 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v39;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v39 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        id v9 = [v8 triggerRuleIdentifier];
        if (v9)
        {
          uint64_t v10 = [*(id *)(a1 + 40) objectForKeyedSubscript:v9];
          unsigned int v11 = [v10 BOOLValue];

          uint64_t v12 = [v8 identifier];
          uint64_t v13 = (void *)v12;
          uint64_t v14 = "not triggered";
          if (v11) {
            uint64_t v14 = "triggered";
          }
          [v3 appendFormat:@"Applying result for trigger rule identifier: %@\nItem with identifier: %@ %s\n", v9, v12, v14];

          if (v11)
          {
            [v8 setStatus:1];
            id v15 = [*(id *)(a1 + 32) updateDiscoveryItem:v8];
          }
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v38 objects:v45 count:16];
    }
    while (v5);
  }

  uint64_t v32 = +[NSDate now];
  long long v16 = objc_msgSend(*(id *)(a1 + 32), "discoveryItemsForRelevantDate:");
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v17 = [v16 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v35;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v35 != v19) {
          objc_enumerationMutation(v16);
        }
        long long v21 = *(void **)(*((void *)&v34 + 1) + 8 * (void)j);
        if ([v21 status] != (id)5)
        {
          uint64_t v22 = [v21 ruleIdentifier];
          long long v23 = (void *)v22;
          if (v22)
          {
            [v3 appendFormat:@"Applying result for rule identifier: %@\n", v22];
            uint64_t v24 = [*(id *)(a1 + 40) objectForKeyedSubscript:v23];
            id v25 = [v24 BOOLValue];

            [v21 updateForRuleResult:v25];
            id v26 = [*(id *)(a1 + 32) updateDiscoveryItem:v21];
          }
        }
      }
      id v18 = [v16 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }
    while (v18);
  }
  uint64_t v27 = [*(id *)(a1 + 32) discoveryItems];
  uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v29 = *(void **)(v28 + 40);
  *(void *)(v28 + 40) = v27;

  if ([v3 length])
  {
    id v30 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v43 = v3;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }
  }
  return 1;
}

uint64_t sub_10017B19C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v9 = +[Rule insertOrUpdateRule:inDatabase:](Rule, "insertOrUpdateRule:inDatabase:", v8, *(void *)(*(void *)(a1 + 40) + 8), (void)v14);
        uint64_t v10 = [v8 identifier];
        [v2 addObject:v10];

        unsigned int v11 = *(void **)(a1 + 48);
        uint64_t v12 = [v9 rule];
        [v11 addObject:v12];
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  +[Rule deleteRulesNotIncludingIdentifiers:v2 inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];
  return 1;
}

void sub_10017B53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017B554(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10017B620;
  v7[3] = &unk_10073AD20;
  id v3 = (void *)a1[4];
  uint64_t v4 = a1[6];
  void v7[4] = a1[5];
  id v8 = v2;
  uint64_t v9 = v4;
  id v5 = v2;
  [v3 enumerateObjectsUsingBlock:v7];
  +[DiscoveryEngagementMessage deleteEngagementMessagesNotIncludingIdentifiers:v5 inDatabase:*(void *)(a1[5] + 8)];

  return 1;
}

void sub_10017B620(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1[4] + 8);
  id v6 = a2;
  id v11 = +[DiscoveryEngagementMessage insertOrUpdateEngagementMessage:v6 messageOrder:a3 inDatabase:v5];
  id v7 = (void *)a1[5];
  id v8 = [v6 identifier];

  [v7 addObject:v8];
  uint64_t v9 = *(void **)(*(void *)(a1[6] + 8) + 40);
  uint64_t v10 = [v11 engagementMessage];
  [v9 addObject:v10];
}

void sub_10017B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017B83C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(v8, "identifier", (void)v16);
        uint64_t v10 = [*(id *)(a1 + 40) engagementMessageWithIdentifier:v9];
        if (v10)
        {
          id v11 = v10;
          [v10 updateWithDiscoveryEngagementMessage:v8];
        }
        else
        {
          id v11 = [v8 copy];
          [v11 setStatus:1];
        }
        [v2 addObject:v11];
      }
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v5);
  }

  uint64_t v12 = [*(id *)(a1 + 40) updateEngagementMessages:v2];
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  return 1;
}

void sub_10017BAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017BB14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) engagementMessages];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (id i = 0; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v8 = [v7 ruleIdentifier];
        if (v8)
        {
          uint64_t v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:v8];
          id v10 = [v9 BOOLValue];

          [v7 updateForRuleResult:v10];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }
  uint64_t v11 = [*(id *)(a1 + 32) updateEngagementMessages:v2];
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  return 1;
}

void sub_10017BEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017BF14(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v9 = +[DiscoveryNotification insertOrUpdateNotification:inDatabase:](DiscoveryNotification, "insertOrUpdateNotification:inDatabase:", v8, *(void *)(*(void *)(a1 + 40) + 8), (void)v14);
        id v10 = [v8 identifier];
        [v2 addObject:v10];

        uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        uint64_t v12 = [v9 notification];
        [v11 addObject:v12];
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  +[DiscoveryNotification deleteNotificationsNotIncludingIdentifiers:v2 inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];
  return 1;
}

void sub_10017C1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017C1F0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      for (id i = 0; i != v5; id i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(v8, "identifier", (void)v16);
        id v10 = [*(id *)(a1 + 40) discoveryNotificationWithIdentifier:v9];
        if (v10)
        {
          id v11 = v10;
          [v10 updateWithNotification:v8];
        }
        else
        {
          id v11 = v8;
          [v11 setStatus:1];
        }
        [v2 addObject:v11];
      }
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v5);
  }

  uint64_t v12 = [*(id *)(a1 + 40) updateDiscoveryNotifications:v2];
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  return 1;
}

void sub_10017C4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017C4C4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) discoveryNotifications];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      for (id i = 0; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v8 = [v7 ruleIdentifier];
        if (v8)
        {
          uint64_t v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:v8];
          id v10 = [v9 BOOLValue];

          [v7 updateForRuleResult:v10];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }
  uint64_t v11 = [*(id *)(a1 + 32) updateDiscoveryNotifications:v2];
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  return 1;
}

void sub_10017CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017CADC(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = a1[6];
  uint64_t v6 = [*(id *)(v2 + 72) secureElementIdentifiers];
  id v7 = +[PaymentApplication anyInDatabase:v4 withApplicationIdentifier:v3 subcredentialIdentifier:v5 secureElementIdentifiers:v6];

  if (v7)
  {
    id v8 = +[Pass anyInDatabase:withPersistentID:](Pass, "anyInDatabase:withPersistentID:", *(void *)(a1[4] + 8), [v7 passPID]);
    uint64_t v9 = [v8 uniqueID];
    uint64_t v10 = *(void *)(a1[7] + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  return 1;
}

void sub_10017CCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10017CCE0(void *a1)
{
  uint64_t v2 = +[AppletSubcredential appletSubcredentialWithIdentifier:a1[4] inDatabase:*(void *)(a1[5] + 8)];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentApplication anyInDatabase:withPersistentID:](PaymentApplication, "anyInDatabase:withPersistentID:", *(void *)(a1[5] + 8), [v2 paymentApplicationPID]);
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = +[Pass anyInDatabase:withPersistentID:](Pass, "anyInDatabase:withPersistentID:", *(void *)(a1[5] + 8), [v4 passPID]);
      uint64_t v7 = [v6 uniqueID];
      uint64_t v8 = *(void *)(a1[6] + 8);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;
    }
  }
  BOOL v10 = *(void *)(*(void *)(a1[6] + 8) + 40) != 0;

  return v10;
}

uint64_t sub_10017CEBC(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id obj = +[AppletSubcredential appletSubcredentialsWithPairedReaderIdentifier:*(void *)(a1 + 32) inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];
  id v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v16;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = +[PaymentApplication anyInDatabase:withPersistentID:](PaymentApplication, "anyInDatabase:withPersistentID:", *(void *)(*(void *)(a1 + 40) + 8), [*(id *)(*((void *)&v15 + 1) + 8 * (void)v5) paymentApplicationPID]);
        uint64_t v7 = v6;
        if (v6)
        {
          uint64_t v8 = +[Pass anyInDatabase:withPersistentID:](Pass, "anyInDatabase:withPersistentID:", *(void *)(*(void *)(a1 + 40) + 8), [v6 passPID]);
          uint64_t v9 = *(void **)(a1 + 40);
          BOOL v10 = [v8 pass];
          uint64_t v11 = [v9 _registeredPass:v10];
          uint64_t v12 = [v11 secureElementPass];

          if (v12) {
            [*(id *)(a1 + 48) addObject:v12];
          }
        }
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }

  return 1;
}

void sub_10017D1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017D210(void *a1)
{
  id v2 = +[PassShare passShareForCredentialShareIdentifier:a1[4] inDatabase:*(void *)(a1[5] + 8)];
  id v3 = [v2 subcredentialIdentifier];
  if (v3)
  {
    uint64_t v4 = +[AppletSubcredential appletSubcredentialWithIdentifier:v3 inDatabase:*(void *)(a1[5] + 8)];
    uint64_t v5 = [v4 appletSubcredential];
    uint64_t v6 = *(void *)(a1[6] + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  return 1;
}

void sub_10017D388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017D3A0(uint64_t a1)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      for (id i = 0; i != v4; id i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(v7, "identifier", (void)v17);
        uint64_t v9 = +[AppletSubcredential appletSubcredentialWithIdentifier:v8 inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];

        if (v9)
        {
          BOOL v10 = +[PaymentApplication anyInDatabase:withPersistentID:](PaymentApplication, "anyInDatabase:withPersistentID:", *(void *)(*(void *)(a1 + 40) + 8), [v9 paymentApplicationPID]);
          if (v10)
          {
            id v11 = +[AppletSubcredential insertOrUpdateAppletSubcredential:v7 withPaymentApplication:v10 inDatabase:*(void *)(*(void *)(a1 + 40) + 8)];
            uint64_t v12 = *(void **)(a1 + 40);
            uint64_t v13 = [v10 paymentApplication];
            long long v14 = [v12 passUniqueIdentifierWithPaymentApplication:v13];

            long long v15 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 40) + 8) withUniqueID:v14];
            [v15 updateWithLastModifiedSource:4];
          }
          else
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
          }
        }
        else
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v4);
  }

  return 1;
}

uint64_t sub_10017D688(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) secureElementIdentifiers];
  id v3 = +[PaymentApplication anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withApplicationIdentifier:*(void *)(a1 + 40) secureElementIdentifiers:v2];
  id v4 = [*(id *)(a1 + 48) identifier];
  uint64_t v5 = +[AppletSubcredential appletSubcredentialWithIdentifier:v4 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  id v6 = +[AppletSubcredentialRangingSuspensionReasons insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:v5 forPaymentApplication:v3 withReasons:*(void *)(a1 + 56) inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];

  return 1;
}

void sub_10017D9A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 didAddCredentialInvitation:*(void *)(a1 + 40)];
}

uint64_t sub_10017DEA8(uint64_t a1)
{
  return 1;
}

NSCopying *__cdecl sub_10017FBDC(id a1, PDPassAuxiliaryRegistrationRequirementStatus *a2)
{
  return (NSCopying *)[(PDPassAuxiliaryRegistrationRequirementStatus *)a2 requirementIdentifier];
}

uint64_t sub_10017FBE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = [v3 identifier];
  id v6 = [v4 objectForKeyedSubscript:v5];

  if (v6)
  {
    objc_msgSend(v3, "setRegistrationBackoffCounter:", objc_msgSend(v6, "registrationBackoffCounter"));
    uint64_t v7 = [v6 isRegistered] ^ 1;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return v7;
}

uint64_t sub_10017FDA4(uint64_t a1, void *a2)
{
  id v2 = [a2 requirementIdentifier];
  uint64_t v3 = PKEqualObjects();

  return v3;
}

void sub_100180038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180050(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = +[BarcodeCredential insertBarcodeCredentials:*(void *)(a1 + 48) forPaymentApplication:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v3 != 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return v4;
}

void sub_1001801A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001801C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  if (v2) {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = +[BarcodeCredential numberOfValidCredentialsForPaymentApplication:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  }

  return 1;
}

void sub_100180328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180340(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  if (v2) {
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = +[BarcodeCredential numberOfBarcodeCredentialsDisplayedAfterDate:*(void *)(a1 + 48) paymentApplication:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  }

  return 1;
}

void sub_1001804C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001804D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = +[BarcodeCredential firstValidBarcodeCredentialForPaymentApplication:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
    uint64_t v4 = [v3 barcodeCredential];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  return 1;
}

void sub_100180678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180690(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = +[BarcodeCredential lastUsedBarcodeIdentifierForPaymentApplication:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  return 1;
}

void sub_1001807D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001807EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  if (v2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = +[BarcodeCredential removeAllBarcodeCredentialValuesForPaymentApplication:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  }
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

  return v3;
}

void sub_100180930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180948(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  if (v2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = +[BarcodeCredential removeAllBarcodeCredentialsForPaymentApplication:v2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  }
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);

  return v3;
}

void sub_100180ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180AD4(void *a1)
{
  id v2 = +[BarcodeCredential anyInDatabase:*(void *)(a1[4] + 8) withBarcodeIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2) {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = [v2 updateWithDisplayTimestamp:a1[6]];
  }
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24);

  return v4;
}

void sub_100180C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180C5C(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:*(void *)(a1[4] + 8) withIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "anyInDatabase:withPaymentTransactionPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = [v4 updateWithPaymentPINData:a1[6]];
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24);

  return v5;
}

void sub_100180E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180E1C(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:*(void *)(a1[4] + 8) withIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "anyInDatabase:withPaymentTransactionPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = [v4 updateWithTransactionSignatureData:a1[6]];
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24);

  return v5;
}

void sub_100180FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100180FDC(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:*(void *)(a1[4] + 8) withIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "anyInDatabase:withPaymentTransactionPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = [v4 updateWithUserConfirmationData:a1[6]];
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24);

  return v5;
}

void sub_10018115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100181174(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:*(void *)(a1[4] + 8) withIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "anyInDatabase:withPaymentTransactionPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = [v4 addProcessedAuthenticationMechanisms:a1[7]];
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24);

  return v5;
}

void sub_1001812F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10018130C(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:*(void *)(a1[4] + 8) withIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "anyInDatabase:withPaymentTransactionPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = [v4 addDataCollectedAuthenticationMechanisms:a1[7]];
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24);

  return v5;
}

void sub_100181484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10018149C(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:*(void *)(a1[4] + 8) withIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "anyInDatabase:withPaymentTransactionPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = [v4 updateAuthenticationComplete:1];
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24);

  return v5;
}

void sub_100181614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10018162C(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:*(void *)(a1[4] + 8) withIdentifier:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[PaymentTransactionAuthentication anyInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "anyInDatabase:withPaymentTransactionPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = [v4 reset];
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1[6] + 8) + 24);

  return v5;
}

void sub_100181800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100181818(void *a1)
{
  id v2 = +[Pass anyInDatabase:*(void *)(a1[4] + 8) withUniqueID:a1[5]];
  uint64_t v3 = v2;
  if (v2) {
    *(void *)(*(void *)(a1[6] + 8) + 24) = +[BarcodeFetch backgroundFetchRetryLevelForPassPID:inDatabase:](BarcodeFetch, "backgroundFetchRetryLevelForPassPID:inDatabase:", [v2 persistentID], *(void *)(a1[4] + 8));
  }

  return 1;
}

void sub_1001819A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001819BC(void *a1)
{
  id v2 = +[Pass anyInDatabase:*(void *)(a1[4] + 8) withUniqueID:a1[5]];
  uint64_t v3 = v2;
  if (v2) {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = +[BarcodeFetch updateNextBackgroundFetchDate:withBackgroundFetchRetryLevel:forPassPID:inDatabase:](BarcodeFetch, "updateNextBackgroundFetchDate:withBackgroundFetchRetryLevel:forPassPID:inDatabase:", a1[6], a1[8], [v2 persistentID], *(void *)(a1[4] + 8));
  }

  return 1;
}

void sub_100181BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100181BD4(void *a1)
{
  id v2 = +[Pass anyInDatabase:*(void *)(a1[4] + 8) withUniqueID:a1[5]];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[BarcodeFetch anyInDatabase:withPassPID:](BarcodeFetch, "anyInDatabase:withPassPID:", *(void *)(a1[4] + 8), [v2 persistentID]);
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = [v4 nextBackgroundFetchDate];
      uint64_t v7 = *(void *)(a1[6] + 8);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    }
  }
  return 1;
}

void sub_100181D6C(uint64_t a1, void *a2)
{
  id v3 = [a2 longLongValue];
  uint64_t v4 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withPersistentID:v3];
  uint64_t v5 = *(void **)(a1 + 32);
  id v9 = v4;
  uint64_t v6 = [v4 pass];
  uint64_t v7 = [v5 _registeredPass:v6];
  uint64_t v8 = [v7 paymentPass];

  if (v8) {
    [*(id *)(a1 + 40) addObject:v8];
  }
  else {
    +[BarcodeFetch removeBarcodeFetchForPassPID:v3 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  }
}

void sub_100181F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100181F7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100182040;
    v8[3] = &unk_100732630;
    id v5 = v2;
    uint64_t v6 = *(void *)(a1 + 48);
    id v9 = v5;
    uint64_t v10 = v6;
    sub_100012DC8(v4, @"SELECT evaluated_policy_domain_state FROM payment_application_barcode_service_metadata WHERE payment_application_pid = ? LIMIT 1", v8);
  }
  return 1;
}

uint64_t sub_100182040(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, (sqlite3_int64)[*(id *)(a1 + 32) persistentID]);
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void *)(v6 + 40);
    *(void *)(v6 + 40) = v5;
    return _objc_release_x1(v5, v7);
  }
  return result;
}

void sub_1001821D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001821E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _dbPaymentApplicationWithDPANIdentifier:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100182354;
    v16[3] = &unk_100732630;
    id v5 = v2;
    uint64_t v6 = *(void *)(a1 + 56);
    id v17 = v5;
    uint64_t v18 = v6;
    sub_100012DC8(v4, @"DELETE FROM payment_application_barcode_service_metadata WHERE payment_application_pid = ?", v16);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1001823AC;
      v12[3] = &unk_10073AE50;
      id v13 = v5;
      id v8 = *(id *)(a1 + 48);
      uint64_t v9 = *(void *)(a1 + 56);
      id v14 = v8;
      uint64_t v15 = v9;
      sub_100012DC8(v7, @"INSERT INTO payment_application_barcode_service_metadata (payment_application_pid, evaluated_policy_domain_state) VALUES (?, ?)", v12);
    }
  }
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);

  return v10;
}

uint64_t sub_100182354(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, (sqlite3_int64)[*(id *)(a1 + 32) persistentID]);
  uint64_t result = sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1001823AC(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, (sqlite3_int64)[*(id *)(a1 + 32) persistentID]);
  SQLiteBindFoundationValueToStatement(a2, 2, *(NSData **)(a1 + 40));
  uint64_t result = sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_10018257C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100182594(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 unsignedIntegerValue];
  }
}

uint64_t sub_1001826AC(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
  return sub_1000140E0((uint64_t)SQLiteDatabase, a2);
}

void sub_1001827A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001827C0(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 40));
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 unsignedIntegerValue];
  }
}

void sub_100182904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018291C(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 40));
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v4 unsignedIntegerValue];
  }
}

uint64_t sub_100182A2C(sqlite3_int64 *a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, a1[4]);
  sqlite3_bind_int64(a2, 2, a1[5]);
  sqlite3_bind_int64(a2, 3, a1[6]);
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

void sub_100182AB4(id a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 3);
  sqlite3_bind_int64(a2, 2, 1);
  sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

void sub_100182B28(id a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 0);
  sqlite3_bind_int64(a2, 2, 1);
  sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

void sub_100182B9C(id a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 0);
  sqlite3_bind_int64(a2, 2, 4);
  sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

uint64_t sub_100182C70(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 4);
  sqlite3_bind_int64(a2, 2, 2);
  sqlite3_bind_int64(a2, 3, *(void *)(a1 + 32));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

uint64_t sub_100182D58(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 0);
  sqlite3_bind_int64(a2, 2, 4);
  sqlite3_bind_int64(a2, 3, *(void *)(a1 + 32));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

uint64_t sub_100182E40(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 0);
  sqlite3_bind_int64(a2, 2, 2);
  sqlite3_bind_int64(a2, 3, *(void *)(a1 + 32));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

void sub_100182EC8(id a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 0);
  sqlite3_bind_int64(a2, 2, 2);
  sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

uint64_t sub_100182F98(uint64_t a1)
{
  return 1;
}

void sub_1001842DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_100184328(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = [a2 identifier];
  id v15 = [v5 transactionSourceIdentifierForPeerPaymentAccountIdentifier:v6];

  uint64_t v7 = [*(id *)(a1 + 32) transactionWithServiceIdentifier:*(void *)(a1 + 40) transactionSourceIdentifier:v15];
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = [v7 transactionSourceIdentifier];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    uint64_t v12 = [v8 accountIdentifier];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v8 accountType];
    *a3 = 1;
  }
}

void sub_100184ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100184EE8(void *a1)
{
  uint64_t v2 = +[DeviceEnvironment environmentForClient:a1[7] inDatabase:*(void *)(a1[4] + 8)];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = (unsigned char *)a1[8];
  if (v5)
  {
    uint64_t v6 = *(void **)(*(void *)(a1[6] + 8) + 40);
    if (!v6)
    {
LABEL_5:
      unsigned char *v5 = 1;
      return 1;
    }
    if (([v6 isEqual:a1[5]] & 1) == 0)
    {
      id v5 = (unsigned char *)a1[8];
      goto LABEL_5;
    }
  }
  return 1;
}

uint64_t sub_100185048(uint64_t a1)
{
  uint64_t v2 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 32) + 8) withUniqueID:*(void *)(a1 + 40)];
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = +[NFC anyInDatabase:forPassPID:](NFC, "anyInDatabase:forPassPID:", *(void *)(*(void *)(a1 + 32) + 8), [v2 persistentID]);
    id v5 = [v4 nfcPayload];

    id v6 = *(id *)(a1 + 48);
    if (v6 == [v5 payloadState])
    {
      char v7 = 0;
    }
    else
    {
      +[NFC insertOrUpdateNFCPayload:v5 forPass:v3 computedPayloadState:*(void *)(a1 + 48) inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
      char v7 = 1;
    }
    **(unsigned char **)(a1 + 56) = v7;
  }
  return 1;
}

Class sub_1001855BC()
{
  if (qword_100808CC8 != -1) {
    dispatch_once(&qword_100808CC8, &stru_10073B018);
  }
  Class result = objc_getClass("FKBankConnectPassUpdateProcessor");
  qword_100808CB8 = (uint64_t)result;
  off_100805A40 = (uint64_t (*)())sub_100185620;
  return result;
}

id sub_100185620()
{
  return (id)qword_100808CB8;
}

void sub_10018562C(id a1)
{
  qword_100808CC0 = (uint64_t)dlopen("/System/Library/Frameworks/FinanceKit.framework/FinanceKit", 2);
}

id *sub_100185828(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_100186294(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_100186600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10018690C(id a1, TransientUnit *a2, id a3)
{
}

void sub_100186914(id a1, TransientUnit *a2, id a3)
{
}

void sub_10018691C(id a1, TransientUnit *a2, id a3)
{
}

void sub_100186924(id a1, TransientUnit *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(TransientUnit *)v3 setValue:v4];
}

void sub_100186988(id a1, TransientUnit *a2, id a3)
{
  id v4 = a2;
  -[TransientUnit setPlanType:](v4, "setPlanType:", [a3 unsignedIntegerValue]);
}

void sub_1001891A0(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setCreditLimit:v4];
}

void sub_100189204(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setAvailableCredit:v4];
}

void sub_100189268(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setCurrentBalance:v4];
}

void sub_1001892CC(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setAdjustedBalance:v4];
}

void sub_100189330(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setRewardsBalance:v4];
}

void sub_100189394(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setRemainingStatementBalance:v4];
}

void sub_1001893F8(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setRemainingStatementBalanceForInterestCalculation:v4];
}

void sub_10018945C(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setRemainingMinimumPayment:v4];
}

void sub_1001894C0(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setPastDueAmount:v4];
}

void sub_100189524(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountSummary setAutoPayEnabled:](v4, "setAutoPayEnabled:", [a3 BOOLValue]);
}

void sub_10018957C(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountSummary setRequiresDebtCollectionNotices:](v4, "setRequiresDebtCollectionNotices:", [a3 BOOLValue]);
}

void sub_1001895D4(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountSummary setBalanceStatus:](v4, "setBalanceStatus:", [a3 integerValue]);
}

void sub_10018962C(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountSummary setCyclesPastDue:](v4, "setCyclesPastDue:", [a3 integerValue]);
}

void sub_100189684(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountSummary *)v3 setLastPaymentDate:v4];
}

void sub_1001896E4(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountSummary *)v3 setPaymentDueDate:v4];
}

void sub_100189744(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setUnpostedInterest:v4];
}

void sub_1001897A8(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountSummary *)v3 setUnpostedInterestTimestamp:v4];
}

void sub_100189808(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountSummary setInGrace:](v4, "setInGrace:", [a3 BOOLValue]);
}

void sub_100189860(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setChargeOffPreventionAmount:v4];
}

void sub_1001898C4(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setPastDueAmount:v4];
}

void sub_100189928(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setInstallmentBalance:v4];
}

void sub_10018998C(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountSummary *)v3 setRemainingMinimumPaymentExcludedFromInterestCalculation:v4];
}

void sub_1001899F0(id a1, PKCreditAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountSummary setRecoveryPaymentPlansSupported:](v4, "setRecoveryPaymentPlansSupported:", [a3 BOOLValue]);
}

void sub_100189C5C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

CFStringRef PDSharingRelayServerEndpointStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"unknown";
  }
  else {
    return *(&off_10073B410 + a1 - 1);
  }
}

uint64_t PDSharingRelayServerEndpointStatusFromString(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1 == @"nonexistent") {
    goto LABEL_4;
  }
  if (!v1)
  {
LABEL_14:
    uint64_t v4 = 0;
    goto LABEL_15;
  }
  unsigned __int8 v3 = [@"nonexistent" isEqualToString:v1];

  if ((v3 & 1) == 0)
  {
    id v5 = v2;
    if (v5 == @"created"
      || (id v6 = v5,
          unsigned __int8 v7 = [@"created" isEqualToString:v5],
          v6,
          (v7 & 1) != 0))
    {
      uint64_t v4 = 2;
      goto LABEL_15;
    }
    id v8 = v6;
    if (v8 == @"attached"
      || (uint64_t v9 = v8,
          unsigned __int8 v10 = [@"attached" isEqualToString:v8],
          v9,
          (v10 & 1) != 0))
    {
      uint64_t v4 = 3;
      goto LABEL_15;
    }
    id v11 = v9;
    if (v11 == @"deleted"
      || (uint64_t v12 = v11, v13 = [@"deleted" isEqualToString:v11], v12, v13))
    {
      uint64_t v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v4 = 1;
LABEL_15:

  return v4;
}

uint64_t PDSharingRelayServerEndpointStatusIsActive(unint64_t a1)
{
  return (a1 < 5) & (0xCu >> a1);
}

void sub_10018A920(id a1, PKPayLaterAccountTermsDetails *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterAccountTermsDetails setTermsAcceptanceRequired:](v4, "setTermsAcceptanceRequired:", [a3 BOOLValue]);
}

void sub_10018A978(id a1, PKPayLaterAccountTermsDetails *a2, id a3)
{
}

void sub_10018AA78(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

CFStringRef PKWatchExpressStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2) {
    return @"PKWatchExpressStatusUnknown";
  }
  else {
    return off_10073BE08[a1 - 1];
  }
}

id PDExpressTransactionQueue()
{
  if (qword_100808CD0 != -1) {
    dispatch_once(&qword_100808CD0, &stru_10073B490);
  }
  v0 = (void *)qword_100808CD8;
  return v0;
}

void sub_10018AC1C(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  attr = dispatch_queue_attr_make_with_autorelease_frequency(v1, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.passd.express-transaction", attr);
  unsigned __int8 v3 = (void *)qword_100808CD8;
  qword_100808CD8 = (uint64_t)v2;
}

void sub_10018ACE4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

id *sub_10018AD5C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)PDExpressRestorationRequest;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

id *sub_10018AE84(NSObject *a1, void *a2, void *a3, void *a4, void *a5, void *a6, int a7, unsigned int a8)
{
  id v96 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  uint64_t v18 = a6;
  id v97 = a6;
  if (!a1)
  {
    long long v39 = 0;
    long long v41 = v96;
    long long v40 = v97;
    goto LABEL_65;
  }
  long long v19 = a1;
  if (PKSecureElementIsAvailable())
  {
    id obj = v17;
    v108.receiver = a1;
    v108.super_class = (Class)PDExpressPassManager;
    long long v20 = (id *)[&v108 init];
    if (v20)
    {
      long long v21 = v20;
      id v92 = v16;
      id v93 = v15;
      uint64_t v22 = v20 + 1;
      objc_storeStrong(v20 + 1, a2);
      objc_storeStrong(v21 + 2, a3);
      objc_storeStrong(v21 + 3, a4);
      objc_storeWeak(v21 + 4, obj);
      objc_storeStrong(v21 + 5, v18);
      *((_DWORD *)v21 + 30) = 0;
      v21[13] = 0;
      long long v19 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      long long v23 = dispatch_queue_attr_make_initially_inactive(v19);
      dispatch_queue_t v24 = dispatch_queue_create("com.apple.passd.expressPassManager", v23);
      id v25 = v21[9];
      v21[9] = v24;

      dispatch_queue_t v26 = dispatch_queue_create("com.apple.passd.expressPassManager.reply", v19);
      id v27 = v21[10];
      v21[10] = v26;

      id v28 = objc_alloc_init((Class)NSMutableArray);
      id v29 = v21[22];
      v21[22] = v28;

      id v30 = objc_alloc_init((Class)NSMutableArray);
      id v31 = v21[24];
      v21[24] = v30;

      uint64_t v32 = PDExpressPassConfigurations();
      id v33 = objc_alloc_init((Class)NSMutableDictionary);
      id v34 = v33;
      long long v35 = &qword_1005B3000;
      v91 = v32;
      if (a8)
      {
        id v36 = v21[7];
        v21[7] = v33;

        id v34 = objc_alloc_init((Class)NSMutableDictionary);
        if (v32)
        {
          long long v37 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            id v38 = [v32 count];
            LODWORD(buf) = 134217984;
            *(void *)((char *)&buf + 4) = v38;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: database recreating with express pass configurations: %ld", (uint8_t *)&buf, 0xCu);
          }

          goto LABEL_13;
        }
      }
      else if (v32)
      {
LABEL_13:
        long long v106 = 0u;
        long long v107 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        id v42 = v32;
        id v43 = [v42 countByEnumeratingWithState:&v104 objects:v110 count:16];
        if (!v43)
        {
          long long v41 = v96;
LABEL_56:

          id v76 = [v34 copy];
          id v77 = v21[12];
          v21[12] = v76;

          *((unsigned char *)v21 + 64) = a8;
          id v15 = v93;
          if (a8)
          {
            if ([v21[7] count])
            {
              uint64_t v78 = PDOSTransactionCreate("PDExpressPassManager.database_restore");
              id v79 = v21[6];
              v21[6] = (id)v78;
            }
            else
            {
              id v79 = v21[7];
              v21[7] = 0;
            }
          }
          uint64_t v80 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
          id v81 = v21[16];
          v21[16] = (id)v80;

          if (a7)
          {
            PDClearLastUnlockedTime();
            PDClearWasLocked();
          }
          id v82 = v21[9];
          block[0] = _NSConcreteStackBlock;
          block[1] = *v35;
          block[2] = sub_10018B7D8;
          block[3] = &unk_10072E1E8;
          long long v39 = v21;
          id v99 = v39;
          uint64_t v83 = v82;
          dispatch_block_t v84 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
          dispatch_async(v83, v84);

          [v21[2] registerObserver:v39];
          PDNFSecureXPCRegisterSecureElementEventObserver(v39);
          PDNFSecureXPCRegisterExpressTransactionEventObserver(v39);
          PDNFSecureXPCRegisterAccessKeyEventObserver(v39);
          PDScheduledActivityClientRegister();
          [v21[5] registerConsumer:v39];
          *((unsigned char *)v39 + 138) = 1;
          *((unsigned char *)v39 + 136) = 1;
          dispatch_activate((dispatch_object_t)v21[9]);

          id v17 = obj;
          long long v40 = v97;
          id v16 = v92;
          goto LABEL_64;
        }
        id v44 = v43;
        v89 = v19;
        uint64_t v45 = *(void *)v105;
        do
        {
          for (id i = 0; i != v44; id i = (char *)i + 1)
          {
            if (*(void *)v105 != v45) {
              objc_enumerationMutation(v42);
            }
            long long v47 = *(void **)(*((void *)&v104 + 1) + 8 * i);
            long long v48 = [v47 passUniqueIdentifier];
            [v34 setObject:v47 forKeyedSubscript:v48];
            if (a8)
            {
              long long v49 = sub_10018AD5C((id *)[PDExpressRestorationRequest alloc], v47);
              [v21[7] setObject:v49 forKeyedSubscript:v48];
            }
          }
          id v44 = [v42 countByEnumeratingWithState:&v104 objects:v110 count:16];
        }
        while (v44);
LABEL_55:
        long long v41 = v96;
        long long v19 = v89;
        long long v35 = &qword_1005B3000;
        goto LABEL_56;
      }
      v89 = v19;
      uint64_t v50 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = a8;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: migrating to express pass configurations (databaseRecreated: %lu)", (uint8_t *)&buf, 0xCu);
      }

      if (a8) {
        id v51 = 0;
      }
      else {
        id v51 = *v22;
      }
      id v90 = v51;
      uint64_t v52 = PDExpressPassesInformation();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        id v53 = [v52 count];
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v53;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: migrating %ld express passes information", (uint8_t *)&buf, 0xCu);
      }

      id v54 = [v52 count];
      uint64_t v88 = v52;
      if (v54)
      {
        *(void *)&long long buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472;
        v114 = sub_100197D54;
        v115 = &unk_10073BB70;
        BOOL v117 = v90 == 0;
        v86 = &v116;
        id v116 = v90;
        objc_msgSend(v52, "pk_setBySafelyApplyingBlock:", &buf);
        id v55 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v55 = objc_alloc_init((Class)NSSet);
      }
      id v56 = v54;
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        id v57 = [v55 count];
        *(_DWORD *)v111 = 134217984;
        id v112 = v57;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: migrated to %ld express pass configurations", v111, 0xCu);
      }

      id v58 = [v55 count];
      id v59 = v58;
      if (v90 || !v58) {
        PDSetExpressPassConfigurations();
      }
      if (v54 != v59)
      {
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
          sub_100515730();
        }

        id v60 = objc_alloc_init((Class)NSMutableDictionary);
        v61 = +[NSNumber numberWithBool:v90 == 0];
        uint64_t v62 = [v61 stringValue];
        [v60 setObject:v62 forKeyedSubscript:@"DatabaseRecreated"];

        uint64_t v63 = +[NSNumber numberWithUnsignedInteger:v56];
        v64 = [v63 stringValue];
        [v60 setObject:v64 forKeyedSubscript:@"PreMigrationCount"];

        BOOL v65 = +[NSNumber numberWithUnsignedInteger:v59];
        v66 = [v65 stringValue];
        [v60 setObject:v66 forKeyedSubscript:@"PostMigrationCount"];

        id v67 = objc_alloc_init((Class)PKAutoBugCaptureReporter);
        [v67 reportIssueWithDomain:PKAutoBugCaptureReporterDomainWallet type:@"Express" subtype:@"ConfigMigration" subtypeContext:@"MigrationCountMismatch" payload:v60];
      }
      id v68 = objc_msgSend(v55, "copy", v86);

      if (v56) {
      long long v100 = 0u;
      }
      long long v101 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      id v42 = v68;
      id v69 = [v42 countByEnumeratingWithState:&v100 objects:v109 count:16];
      if (v69)
      {
        id v70 = v69;
        uint64_t v71 = *(void *)v101;
        do
        {
          for (j = 0; j != v70; j = (char *)j + 1)
          {
            if (*(void *)v101 != v71) {
              objc_enumerationMutation(v42);
            }
            v73 = *(void **)(*((void *)&v100 + 1) + 8 * (void)j);
            v74 = [v73 passUniqueIdentifier];
            [v34 setObject:v73 forKeyedSubscript:v74];
            if (a8)
            {
              v75 = sub_10018AD5C((id *)[PDExpressRestorationRequest alloc], 0);
              [v21[7] setObject:v75 forKeyedSubscript:v74];
            }
          }
          id v70 = [v42 countByEnumeratingWithState:&v100 objects:v109 count:16];
        }
        while (v70);
      }

      goto LABEL_55;
    }
    long long v19 = 0;
    long long v39 = 0;
  }
  else
  {
    long long v39 = 0;
  }
  long long v41 = v96;
  long long v40 = v97;
LABEL_64:

LABEL_65:
  return v39;
}

id sub_10018B7D8(uint64_t a1)
{
  return sub_10018B7E0(*(id *)(a1 + 32));
}

id sub_10018B7E0(id result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    Class result = (id)PKNearFieldRadioIsAvailable();
    if (result)
    {
      sub_10018B868((unsigned char *)v1);
      sub_10018B940(v1);
      sub_10018BA50((unsigned char *)v1);
      sub_10018BB40(v1, 0);
      atomic_store(1u, (unsigned __int8 *)(v1 + 88));
      dispatch_queue_t v2 = *(void **)(v1 + 40);
      return [v2 recalculateNotificationNames];
    }
    else
    {
      atomic_store(1u, (unsigned __int8 *)(v1 + 88));
    }
  }
  return result;
}

void sub_10018B868(unsigned char *a1)
{
  if (a1)
  {
    int IsEnabled = PKNearFieldRadioIsEnabled();
    if (a1[136] != IsEnabled)
    {
      int v3 = IsEnabled;
      a1[136] = IsEnabled;
      id v4 = PKLogFacilityTypeGetObject();
      BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      if (v3)
      {
        if (!v5) {
          goto LABEL_9;
        }
        __int16 v9 = 0;
        id v6 = "PKExpressPassManager: NFC radio enabled - enabling express mode.";
        objc_super v7 = (uint8_t *)&v9;
      }
      else
      {
        if (!v5) {
          goto LABEL_9;
        }
        __int16 v8 = 0;
        id v6 = "PKExpressPassManager: NFC radio disabled - disabling express mode.";
        objc_super v7 = (uint8_t *)&v8;
      }
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
LABEL_9:

      if (a1[89])
      {
        a1[152] = 1;
        sub_10018BE04((uint64_t)a1, 0);
      }
    }
  }
}

void sub_10018B940(uint64_t a1)
{
  if (a1)
  {
    if ([*(id *)(a1 + 16) hasAssertionsOfType:0])
    {
      if (*(unsigned char *)(a1 + 137)) {
        return;
      }
      *(unsigned char *)(a1 + 137) = 1;
    }
    else
    {
      unsigned int v2 = [*(id *)(a1 + 16) hasAssertionsOfType:5];
      if (*(unsigned __int8 *)(a1 + 137) == v2) {
        return;
      }
      *(unsigned char *)(a1 + 137) = v2;
      if (!v2)
      {
        int v3 = PKLogFacilityTypeGetObject();
        if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_12;
        }
        __int16 v6 = 0;
        id v4 = "PKExpressPassManager: contactless interface enabled - enabling express mode.";
        BOOL v5 = (uint8_t *)&v6;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
LABEL_12:

        if (*(unsigned char *)(a1 + 89))
        {
          *(unsigned char *)(a1 + 152) = 1;
          sub_10018BE04(a1, 0);
        }
        return;
      }
    }
    int v3 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    __int16 v7 = 0;
    id v4 = "PKExpressPassManager: contactless interface disabled - disabling express mode.";
    BOOL v5 = (uint8_t *)&v7;
    goto LABEL_11;
  }
}

void sub_10018BA50(unsigned char *a1)
{
  if (a1)
  {
    unsigned int v2 = +[FMDFMIPManager sharedInstance];
    unsigned int v3 = [v2 lostModeIsActive];

    if (a1[203] != v3)
    {
      a1[203] = v3;
      id v4 = PKLogFacilityTypeGetObject();
      BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      if (v3)
      {
        if (!v5) {
          goto LABEL_9;
        }
        __int16 v9 = 0;
        __int16 v6 = "PKExpressPassManager: device is in lost mode - disabling express mode.";
        __int16 v7 = (uint8_t *)&v9;
      }
      else
      {
        if (!v5) {
          goto LABEL_9;
        }
        __int16 v8 = 0;
        __int16 v6 = "PKExpressPassManager: device exited lost mode - enabling express mode.";
        __int16 v7 = (uint8_t *)&v8;
      }
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
LABEL_9:

      if (a1[89])
      {
        a1[152] = 1;
        sub_10018BE04((uint64_t)a1, 0);
      }
    }
  }
}

void sub_10018BB40(uint64_t a1, int a2)
{
  if (!a1) {
    return;
  }
  uint64_t v4 = geteuid();
  id v5 = sub_100193588();
  __int16 v6 = [v5 identitiesForUser:v4 error:0];
  id v7 = [v6 count];

  if (v7)
  {
    unsigned __int8 v8 = atomic_exchange((atomic_uchar *volatile)(a1 + 200), v5 != 0);
    if (v5)
    {
      sub_1001936C8(a1, v5, a2);

      int v9 = 1;
      if (!a2) {
        return;
      }
      goto LABEL_10;
    }
  }
  else
  {

    unsigned __int8 v8 = atomic_exchange((atomic_uchar *volatile)(a1 + 200), 0);
  }
  if (v8) {
    atomic_store(0, (unsigned __int8 *)(a1 + 201));
  }
  sub_1001937E0((unsigned char *)a1, 0);
  int v9 = 0;
  if (a2)
  {
LABEL_10:
    if (((v9 ^ ((v8 & 1) == 0)) & 1) == 0)
    {
      unsigned __int8 v10 = *(void **)(a1 + 40);
      [v10 recalculateNotificationNames];
    }
  }
}

void sub_10018BC44(uint64_t a1)
{
  if (a1)
  {
    if (PKNearFieldRadioIsAvailable())
    {
      unsigned int v2 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      unsigned int v3 = *(NSObject **)(a1 + 72);
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_10018BCF4;
      v5[3] = &unk_10072E198;
      id v6 = v2;
      uint64_t v7 = a1;
      id v4 = v2;
      dispatch_async(v3, v5);
    }
  }
}

void sub_10018BCF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v1 + 89))
  {
    *(unsigned char *)(v1 + 89) = 1;
    *(unsigned char *)(*(void *)(a1 + 40) + 152) = 1;
    sub_10018BD1C(*(unsigned char **)(a1 + 40));
  }
}

void sub_10018BD1C(unsigned char *a1)
{
  if (a1 && a1[89])
  {
    sub_10018D340((uint64_t)a1, 1);
    if (!a1[184])
    {
      a1[184] = 1;
      objc_initWeak(&location, a1);
      v2[0] = _NSConcreteStackBlock;
      v2[1] = 3221225472;
      v2[2] = sub_100190DB0;
      v2[3] = &unk_10073B550;
      objc_copyWeak(&v3, &location);
      sub_10018BE04((uint64_t)a1, v2);
      objc_destroyWeak(&v3);
      objc_destroyWeak(&location);
    }
  }
}

void sub_10018BDE8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10018BE04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v5 = *(void **)(a1 + 176);
      id v6 = [v3 copy];
      id v7 = objc_retainBlock(v6);
      [v5 addObject:v7];
    }
    if (*(unsigned char *)(a1 + 168))
    {
      sub_10018D340(a1, 0);
    }
    else
    {
      *(unsigned char *)(a1 + 168) = 1;
      sub_10018D340(a1, 0);
      objc_initWeak(&location, (id)a1);
      unsigned __int8 v8 = *(void **)(a1 + 24);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_10018D3AC;
      v9[3] = &unk_10073B550;
      objc_copyWeak(&v10, &location);
      [v8 accessSecureElementManagerSessionWithHandler:v9];
      objc_destroyWeak(&v10);
      objc_destroyWeak(&location);
    }
  }
}

void sub_10018BF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10018BF44(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018BFC0;
    block[3] = &unk_10072E1E8;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10018BFC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 64)) {
    __break(1u);
  }
  *(unsigned char *)(v1 + 64) = 0;
  id v3 = *(id *)(*(void *)(a1 + 32) + 56);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0;

  id v6 = *(id *)(*(void *)(a1 + 32) + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  unsigned __int8 v8 = *(void **)(v7 + 48);
  *(void *)(v7 + 48) = 0;

  if (v3)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = [v3 count];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Attempting to restore %ld express passes...", (uint8_t *)&buf, 0xCu);
    }

    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v48 = 0x2020000000;
    char v49 = 0;
    uint64_t v43 = 0;
    id v44 = &v43;
    uint64_t v45 = 0x2020000000;
    uint64_t v46 = 0;
    uint64_t v39 = 0;
    long long v40 = &v39;
    uint64_t v41 = 0x2020000000;
    uint64_t v42 = 0;
    uint64_t v35 = 0;
    id v36 = &v35;
    uint64_t v37 = 0x2020000000;
    uint64_t v38 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = &v31;
    uint64_t v33 = 0x2020000000;
    uint64_t v34 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10018C44C;
    v24[3] = &unk_10073B4D8;
    uint64_t v11 = *(void *)(a1 + 32);
    dispatch_queue_t v26 = &v43;
    id v27 = &v39;
    v24[4] = v11;
    id v25 = &stru_10073B4B0;
    id v28 = &v35;
    p_long long buf = &buf;
    id v30 = &v31;
    [v3 enumerateKeysAndObjectsUsingBlock:v24];
    if (!*(unsigned char *)(*((void *)&buf + 1) + 24)
      && (sub_10018BD1C(*(unsigned char **)(a1 + 32)), !*(unsigned char *)(*((void *)&buf + 1) + 24))
      || v44[3]
      || v40[3]
      || v36[3]
      || v32[3])
    {
      id v12 = objc_alloc_init((Class)NSMutableDictionary);
      unsigned int v13 = +[NSNumber numberWithUnsignedInteger:v44[3]];
      id v14 = [v13 stringValue];
      [v12 setObject:v14 forKeyedSubscript:@"MissingPassCount"];

      id v15 = +[NSNumber numberWithUnsignedInteger:v40[3]];
      id v16 = [v15 stringValue];
      [v12 setObject:v16 forKeyedSubscript:@"PaymentPassCastFailureCount"];

      id v17 = +[NSNumber numberWithUnsignedInteger:v36[3]];
      uint64_t v18 = [v17 stringValue];
      [v12 setObject:v18 forKeyedSubscript:@"ExpressPassInfoInitFailureCount"];

      long long v19 = +[NSNumber numberWithUnsignedInteger:v32[3]];
      long long v20 = [v19 stringValue];
      [v12 setObject:v20 forKeyedSubscript:@"ExpressPassConfigInitFailureCount"];

      long long v21 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*((void *)&buf + 1) + 24)];
      uint64_t v22 = [v21 stringValue];
      [v12 setObject:v22 forKeyedSubscript:@"AddedAnyMutation"];

      id v23 = objc_alloc_init((Class)PKAutoBugCaptureReporter);
      [v23 reportIssueWithDomain:PKAutoBugCaptureReporterDomainWallet type:@"Express" subtype:@"DatabaseRestoration" subtypeContext:@"QueueMutationFailure" payload:v12];
    }
    _Block_object_dispose(&v31, 8);
    _Block_object_dispose(&v35, 8);
    _Block_object_dispose(&v39, 8);
    _Block_object_dispose(&v43, 8);
    _Block_object_dispose(&buf, 8);
  }
}

void sub_10018C3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

BOOL sub_10018C43C(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:a2];
}

void sub_10018C44C(uint64_t *a1, void *a2, void *a3)
{
  id newValue = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1[4] + 8) passWithUniqueIdentifier:newValue];
  uint64_t v7 = v6;
  if (!v6)
  {
    ++*(void *)(*(void *)(a1[6] + 8) + 24);
    goto LABEL_21;
  }
  id v8 = [v6 passType];
  if (v8 == (id)1) {
    int v9 = v7;
  }
  else {
    int v9 = 0;
  }
  id v10 = v9;
  if (v8 == (id)1)
  {
    id v11 = [objc_alloc((Class)PKExpressPassInformation) initForPaymentPass:v7 withTechologyTest:a1[5]];
    if (!v11)
    {
      ++*(void *)(*(void *)(a1[8] + 8) + 24);
LABEL_19:

      goto LABEL_20;
    }
    if (v5 && (id v12 = v5[1]) != 0)
    {
      unsigned int v13 = v12;
      id v14 = objc_msgSend(objc_alloc((Class)PKExpressPassConfiguration), "initWithPassInformation:isNFCExpressEnabled:isUWBExpressEnabled:", v11, objc_msgSend(v13, "isNFCExpressEnabled"), objc_msgSend(v13, "isUWBExpressEnabled"));
      if (v14)
      {
LABEL_10:
        id v15 = objc_alloc_init(PDExpressMutationRequest);
        id v17 = v15;
        if (v15)
        {
          objc_setProperty_nonatomic_copy(v15, v16, newValue, 16);
          sub_10018ACE4((uint64_t)v17, v14);
          v17->_userInitiated = 0;
        }
        else
        {
          sub_10018ACE4(0, v14);
        }
        sub_10018C664(a1[4], v17);
        *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 1;

        goto LABEL_18;
      }
    }
    else
    {
      id v14 = [objc_alloc((Class)PKExpressPassConfiguration) initWithPassInformation:v11 forSecureElementPass:v7];
      unsigned int v13 = 0;
      if (v14) {
        goto LABEL_10;
      }
    }
    ++*(void *)(*(void *)(a1[10] + 8) + 24);
LABEL_18:

    goto LABEL_19;
  }
  ++*(void *)(*(void *)(a1[7] + 8) + 24);
LABEL_20:

LABEL_21:
}

void sub_10018C664(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v5 = a2;
    id v3 = a2;
    uint64_t v4 = +[NSArray arrayWithObjects:&v5 count:1];

    sub_10018F31C(a1, v4);
  }
}

void sub_10018C7F4(uint64_t a1)
{
}

void sub_10018C7FC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    id v3 = *(NSObject **)(a1 + 72);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10018C8A4;
    v5[3] = &unk_10072E198;
    id v6 = v2;
    uint64_t v7 = a1;
    id v4 = v2;
    dispatch_async(v3, v5);
  }
}

void sub_10018C8A4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104));
  id v2 = [*(id *)(*(void *)(a1 + 40) + 96) count];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104));
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(void **)(v3 + 56);
    *(void *)(v3 + 56) = 0;

    sub_10018C93C(*(void *)(a1 + 40), &__NSDictionary0__struct);
    *(unsigned char *)(*(void *)(a1 + 40) + 152) = 1;
    id v5 = *(unsigned char **)(a1 + 40);
    sub_10018BD1C(v5);
  }
}

void sub_10018C93C(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (os_unfair_lock_s *)(a1 + 104);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    id v5 = [v4 copy];
    id v6 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v5;

    os_unfair_lock_unlock(v3);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100192E84;
    v11[3] = &unk_10073B618;
    id v7 = objc_alloc_init((Class)NSMutableSet);
    id v12 = v7;
    [v4 enumerateKeysAndObjectsUsingBlock:v11];

    PDSetExpressPassConfigurations();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100192E8C;
    v9[3] = &unk_10073B7D8;
    void v9[4] = a1;
    id v10 = v7;
    id v8 = v7;
    sub_10018DBE0(a1, v9);
    dispatch_async(*(dispatch_queue_t *)(a1 + 80), &stru_10073B7F8);
  }
}

void sub_10018CA98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    id v6 = [*(id *)(a1 + 8) passWithUniqueIdentifier:v3];
    if (v6)
    {
      id v7 = PDExpressTransactionQueue();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10018CBAC;
      v8[3] = &unk_100730198;
      id v9 = v4;
      uint64_t v10 = a1;
      id v11 = v6;
      id v12 = v3;
      dispatch_async(v7, v8);
    }
  }
}

void sub_10018CBAC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10018CC50;
  v3[3] = &unk_10073B500;
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  sub_10018CD48(v2, 0, v3);
}

uint64_t sub_10018CC50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) passType] == (id)1)
  {
    id v4 = [*(id *)(a1 + 32) devicePrimaryContactlessPaymentApplication];
    id v5 = [v4 applicationIdentifier];
    id v6 = [v4 subcredentials];
    id v7 = [v6 anyObject];
    id v8 = [v7 identifier];

    if (v5 && ([v3 isAssociated] & 1) == 0) {
      [v3 associateWithApplicationIdentifier:v5 keyIdentifier:v8 terminalReaderIdentifier:0 passUniqueIdentifier:*(void *)(a1 + 40)];
    }
  }
  else
  {
    id v5 = 0;
    id v8 = 0;
  }
  [v3 receiveEvents:4];
  [v3 resolve];

  return 1;
}

uint64_t sub_10018CD48(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!a1) {
    goto LABEL_19;
  }
  id v17 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
  sub_100193D88(a1, &v17, &stru_10073B888);
  uint64_t v6 = *(void *)(a1 + 112);
  id v7 = PKLogFacilityTypeGetObject();
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1005157A4();
    }

    if (v5) {
      sub_100193E58(a1, v5, &v17);
    }
    id v9 = PDUtilityQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100193F2C;
    block[3] = &unk_10072E1E8;
    void block[4] = a1;
    dispatch_async(v9, block);
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: entered express.", buf, 2u);
    }

    id v11 = +[PKExpressTransactionState createForExpressType:a2];
    id v12 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = v11;

    if (!v5 || (sub_100193E58(a1, v5, &v17) & 1) == 0)
    {
      id v10 = v17;
      if (!v17)
      {
        id v10 = objc_alloc_init((Class)NSMutableArray);
        id v17 = v10;
      }
      id v13 = [*(id *)(a1 + 112) copy];
      [v10 addObject:v13];

      goto LABEL_16;
    }
  }
  id v10 = v17;
LABEL_16:
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
  if (v10) {
    sub_100194048(a1, v10);
  }
  BOOL v18 = v6 == 0;

  a1 = v18;
LABEL_19:

  return a1;
}

void sub_10018CF3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
LABEL_9:

    return;
  }
  if (v3)
  {
    if (([v3 isProcessing] & 1) == 0 && objc_msgSend(v4, "standaloneTransactionType"))
    {
      if ([v4 isAssociated])
      {
        id v5 = [v4 passUniqueIdentifier];

        if (!v5)
        {
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472;
          v9[2] = sub_10018D080;
          v9[3] = &unk_10073B528;
          void v9[4] = a1;
          [v4 _populatePassUniqueIdentifierWithLookup:v9];
        }
      }
      uint64_t v6 = PDExpressTransactionQueue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10018D094;
      block[3] = &unk_10072E198;
      void block[4] = a1;
      id v8 = v4;
      dispatch_async(v6, block);
    }
    goto LABEL_9;
  }
  __break(1u);
}

id sub_10018D080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:a2 subcredentialIdentifier:a3];
}

void sub_10018D094(uint64_t a1)
{
}

void sub_10018D0A4(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (!v5
      || [v5 isProcessing]
      || (id v7 = [v6 standaloneTransactionType]) == 0)
    {
      __break(1u);
    }
    id v8 = v7;
    id v9 = [v6 passUniqueIdentifier];
    id v10 = PKLogFacilityTypeGetObject();
    id v11 = v10;
    if (v9)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218242;
        id v18 = v8;
        __int16 v19 = 2112;
        long long v20 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: presenting standalone transaction %ld for %@...", buf, 0x16u);
      }

      id v12 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100195024;
      v14[3] = &unk_10073B940;
      id v15 = v12;
      char v16 = a3;
      id v11 = v12;
      sub_100207204((uint64_t)WeakRetained, v6, a3, v14);
    }
    else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_1005157D8();
    }
  }
}

void sub_10018D26C(unsigned char *a1, int a2)
{
  if (a1 && a1[202] != a2)
  {
    a1[202] = a2;
    id v4 = PKLogFacilityTypeGetObject();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (a2)
    {
      if (!v5) {
        goto LABEL_9;
      }
      __int16 v9 = 0;
      uint64_t v6 = "PKExpressPassManager: device authentication is now locked out - disabling express mode.";
      id v7 = (uint8_t *)&v9;
    }
    else
    {
      if (!v5) {
        goto LABEL_9;
      }
      __int16 v8 = 0;
      uint64_t v6 = "PKExpressPassManager: device authentication is now available - enabling express mode.";
      id v7 = (uint8_t *)&v8;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
LABEL_9:

    if (a1[89])
    {
      a1[152] = 1;
      sub_10018BE04((uint64_t)a1, 0);
    }
  }
}

uint64_t sub_10018D340(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (!*(void *)(result + 160) && (*(unsigned char *)(result + 152) || a2 != 0))
    {
      uint64_t v4 = PDOSTransactionCreate("PDExpressPassManager.session");
      uint64_t v5 = *(void *)(v2 + 160);
      *(void *)(v2 + 160) = v4;
      return _objc_release_x1(v4, v5);
    }
  }
  return result;
}

void sub_10018D3AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained[9];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10018D464;
    v7[3] = &unk_10072E198;
    void v7[4] = WeakRetained;
    id v8 = v3;
    dispatch_sync(v6, v7);
  }
}

void sub_10018D464(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 168) = 0;
  id v2 = [*(id *)(*(void *)(a1 + 32) + 176) copy];
  [*(id *)(*(void *)(a1 + 32) + 176) removeAllObjects];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v7) + 16))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v7));
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v8 + 152))
  {
    __int16 v9 = *(void **)(a1 + 40);
    if (v9)
    {
      sub_10018D5DC(v8, v9);
    }
    else
    {
      id v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
        sub_100515840();
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 160);
  *(void *)(v11 + 160) = 0;
}

void sub_10018D5DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_55;
  }
  int v4 = *(unsigned __int8 *)(a1 + 89);
  if (!*(unsigned char *)(a1 + 89))
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: express manager disabled.", v18, 2u);
    }
  }
  if (*(unsigned char *)(a1 + 202))
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: express mode disabled - device authentication is locked out.", v18, 2u);
    }

    if (!*(unsigned char *)(a1 + 203)) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 203))
  {
LABEL_12:
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: express mode disabled - device in lost mode.", v18, 2u);
    }

    goto LABEL_15;
  }
  if (v4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
    id v13 = [*(id *)(a1 + 96) count];
    BOOL v14 = v13 == 0;
    if (!v13)
    {
      long long v15 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: express mode disabled - no express passes.", v18, 2u);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
    if (*(unsigned char *)(a1 + 137))
    {
      long long v16 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: express mode disabled - contactless interface suppressed.", v18, 2u);
      }

      [*(id *)(a1 + 16) logAssertionsOfTypes:&off_10078C2A0];
      BOOL v14 = 1;
    }
    if (*(unsigned char *)(a1 + 136))
    {
      uint64_t v8 = !v14;
    }
    else
    {
      id v17 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: express mode disabled - nfc radio disabled.", v18, 2u);
      }

      uint64_t v8 = 0;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v8 = -1;
LABEL_16:
  if (*(void *)(a1 + 144) != v8 || *(unsigned char *)(a1 + 138))
  {
    __int16 v9 = [v3 setExpressModesControlState:v8];
    if (v9)
    {
      switch(v8)
      {
        case -1:
          id v10 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            sub_100515944();
          }
          goto LABEL_45;
        case 0:
          id v10 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            sub_1005158DC();
          }
          goto LABEL_45;
        case 1:
          id v10 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
            sub_100515874();
          }
LABEL_45:
          char v11 = 1;
LABEL_53:

          goto LABEL_54;
      }
      char v11 = 1;
LABEL_54:
      *(unsigned char *)(a1 + 152) = v11;

      goto LABEL_55;
    }
    *(unsigned char *)(a1 + 138) = 0;
    *(void *)(a1 + 144) = v8;
    if (v8 == -1)
    {
      id v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v18 = 0;
        id v12 = "PKExpressPassManager: express mode forbidden.";
        goto LABEL_51;
      }
    }
    else if (v8)
    {
      char v11 = 0;
      if (v8 != 1) {
        goto LABEL_54;
      }
      id v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v18 = 0;
        id v12 = "PKExpressPassManager: express mode enabled.";
LABEL_51:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v12, v18, 2u);
      }
    }
    else
    {
      id v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v18 = 0;
        id v12 = "PKExpressPassManager: express mode disabled.";
        goto LABEL_51;
      }
    }
    char v11 = 0;
    goto LABEL_53;
  }
  *(unsigned char *)(a1 + 152) = 0;
LABEL_55:
}

void sub_10018DA14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10018DB7C;
    v16[3] = &unk_10073B578;
    void v16[4] = a1;
    id v17 = v7;
    id v18 = v8;
    id v19 = v9;
    sub_10018DBE0(a1, v16);
    char v11 = *(NSObject **)(a1 + 72);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10018DCC4;
    v13[3] = &unk_10072E198;
    id v14 = v10;
    uint64_t v15 = a1;
    id v12 = v10;
    dispatch_async(v11, v13);
  }
}

void sub_10018DB7C(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 expressPassManager:a1[4] willProcessPaymentApplicationsUpdateFromPriorPaymentApplications:a1[5] toPaymentApplications:a1[6] forPassUniqueIdentifier:a1[7]];
  }
}

void sub_10018DBE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1 && v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    id v5 = [*(id *)(a1 + 128) allObjects];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    uint64_t v6 = *(NSObject **)(a1 + 80);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100193B2C;
    v8[3] = &unk_10072FDC8;
    id v9 = v5;
    id v10 = v4;
    id v7 = v5;
    dispatch_async(v6, v8);
  }
}

void sub_10018DCC4(uint64_t a1)
{
}

void sub_10018DCCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = *(NSObject **)(a1 + 72);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10018DDB0;
      block[3] = &unk_10072E9D8;
      void block[4] = a1;
      id v10 = v5;
      id v11 = v7;
      dispatch_async(v8, block);
    }
    else
    {
      (*((void (**)(id, void))v6 + 2))(v6, 0);
    }
  }
}

void sub_10018DDB0(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) objectForKey:*(void *)(a1 + 40)];
  BOOL v3 = v2 != 0;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  int v4 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10018DE84;
  v5[3] = &unk_10073B5A0;
  id v6 = *(id *)(a1 + 48);
  BOOL v7 = v3;
  dispatch_async(v4, v5);
}

uint64_t sub_10018DE84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10018DE9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    BOOL v7 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018DF64;
    block[3] = &unk_10072E9D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10018DF64(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) objectForKeyedSubscript:*(void *)(a1 + 40)];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  BOOL v3 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10018E040;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10018E040(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10018E054(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018E104;
    block[3] = &unk_10072FFE8;
    void block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_10018E104(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  BOOL v3 = *(void **)(*(void *)(a1 + 32) + 96);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10018E250;
  v11[3] = &unk_10073B5C8;
  uint64_t v13 = *(void *)(a1 + 48);
  id v4 = v2;
  id v12 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v11];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10018E2CC;
  v8[3] = &unk_10072E598;
  id v6 = *(id *)(a1 + 40);
  id v9 = v4;
  id v10 = v6;
  id v7 = v4;
  dispatch_async(v5, v8);
}

void sub_10018E250(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = [v7 passInformation];
  id v5 = [v4 cardType];
  id v6 = *(id *)(a1 + 40);

  if (v5 == v6) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_10018E2CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10018E324(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018E3D4;
    block[3] = &unk_10072FFE8;
    void block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_10018E3D4(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v3 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10018E52C;
  v11[3] = &unk_10073B5C8;
  uint64_t v13 = *(void *)(a1 + 48);
  id v4 = v2;
  id v12 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v11];
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10018E738;
  v8[3] = &unk_10072E598;
  id v6 = *(id *)(a1 + 40);
  id v9 = v4;
  id v10 = v6;
  id v7 = v4;
  dispatch_async(v5, v8);
}

void sub_10018E52C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 passInformation];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10018E5F0;
  v8[3] = &unk_10073B5F0;
  id v6 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v9 = v6;
  id v10 = v4;
  id v7 = v4;
  [v5 enumerateCredentialsWithHandler:v8];
}

void sub_10018E5F0(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = a3;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    while (2)
    {
      for (id i = 0; i != v8; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if (objc_msgSend(v11, "supportsExpress", (void)v14)
          && [v11 technologyType] == *(id *)(a1 + 48))
        {
          id v12 = *(void **)(a1 + 32);
          uint64_t v13 = [*(id *)(a1 + 40) passInformation];
          [v12 addObject:v13];

          *a4 = 1;
          goto LABEL_12;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_12:
}

void sub_10018E738(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10018E790(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    id v5 = *(NSObject **)(a1 + 72);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10018E83C;
    v6[3] = &unk_10072FDC8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10018E83C(uint64_t a1)
{
  id v2 = sub_10018E8FC(*(os_unfair_lock_s **)(a1 + 32));
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10018E9E0;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 40);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

os_unfair_lock_s *sub_10018E8FC(os_unfair_lock_s *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableSet);
    id v3 = v1 + 26;
    os_unfair_lock_lock(v1 + 26);
    id v4 = *(void **)&v1[24]._os_unfair_lock_opaque;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10018E9F4;
    v7[3] = &unk_10073B618;
    id v8 = v2;
    id v5 = v2;
    [v4 enumerateKeysAndObjectsUsingBlock:v7];
    os_unfair_lock_unlock(v3);
    uint64_t v1 = (os_unfair_lock_s *)[v5 copy];
  }
  return v1;
}

uint64_t sub_10018E9E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10018E9F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_10018E9FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018EAC4;
    block[3] = &unk_10072E9D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10018EAC4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  sub_10018EB38(*(void *)(a1 + 32), *(void **)(a1 + 40), v2, *(void **)(a1 + 48));
}

void sub_10018EB38(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = [v7 passUniqueIdentifier];
    if (v10 && [v8 count])
    {
      uint64_t v11 = sub_10018F824(v8);
      id v12 = &qword_1005B3000;
      if (sub_10018F94C(v11, v7))
      {
        sub_10018FAC0(v11, *(void **)(a1 + 8));
        id v33 = 0;
        uint64_t v13 = sub_10018FCF4(v11, (uint64_t)&v33);
        long long v14 = v33;
        if (v13)
        {
          if (sub_10018FF04(v13))
          {
            long long v15 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v37 = v10;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: found conflicts for pass %@.", buf, 0xCu);
            }

            id v16 = objc_alloc_init((Class)NSMutableSet);
            id v17 = objc_alloc_init((Class)NSMutableArray);
            v29[0] = _NSConcreteStackBlock;
            v29[1] = 3221225472;
            v29[2] = sub_100190014;
            v29[3] = &unk_10073B688;
            id v30 = v10;
            id v31 = v17;
            id v18 = v16;
            id v32 = v18;
            id v25 = v17;
            [v13 enumerateObjectsUsingBlock:v29];
            id v19 = v32;
            id v20 = v18;

            id v12 = &qword_1005B3000;
          }
          else
          {
            id v20 = objc_alloc_init((Class)NSSet);
          }
        }
        else
        {
          uint64_t v22 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_1005159AC();
          }

          id v20 = 0;
        }
      }
      else
      {
        long long v14 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_100515A14();
        }
        id v20 = 0;
      }

      id v23 = *(NSObject **)(a1 + 80);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = *v12;
      v26[2] = sub_10019039C;
      v26[3] = &unk_10072E598;
      id v27 = v20;
      id v28 = v9;
      id v24 = v20;
      dispatch_async(v23, v26);
    }
    else
    {
      long long v21 = *(NSObject **)(a1 + 80);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10018F810;
      block[3] = &unk_10072F788;
      uint64_t v35 = v9;
      dispatch_async(v21, block);
      uint64_t v11 = v35;
    }
  }
}

void sub_10018EECC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = a3;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10018F034;
    v17[3] = &unk_10072FC48;
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    id v18 = v10;
    [v9 enumerateObjectsUsingBlock:v17];

    uint64_t v11 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10018F0B4;
    block[3] = &unk_100730578;
    void block[4] = a1;
    id v14 = v7;
    id v15 = v10;
    id v16 = v8;
    id v12 = v10;
    dispatch_async(v11, block);
  }
}

void sub_10018F034(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 passUniqueIdentifier];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = [v6 passUniqueIdentifier];
    [v4 setObject:v6 forKey:v5];
  }
}

void sub_10018F0B4(uint64_t a1)
{
}

void sub_10018F0C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 72);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10018F168;
    v6[3] = &unk_10072E198;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_10018F168(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uniqueID];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104));
  id v3 = [*(id *)(*(void *)(a1 + 40) + 96) objectForKey:v2];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 104));
  if (v3)
  {
    id v4 = objc_alloc_init(PDExpressMutationRequest);
    id v6 = v4;
    if (v4)
    {
      objc_setProperty_nonatomic_copy(v4, v5, v2, 16);
      v6->_userInitiated = 0;
    }
    id v7 = objc_msgSend(objc_alloc((Class)PKExpressPassConfiguration), "initForPaymentPass:isNFCExpressEnabled:isUWBExpressEnabled:withTechologyTest:", *(void *)(a1 + 32), objc_msgSend(v3, "isNFCExpressEnabled"), objc_msgSend(v3, "isUWBExpressEnabled"), &stru_10073B638);
    uint64_t v8 = objc_alloc_init(PDExpressMutationRequest);
    id v10 = v8;
    if (v8)
    {
      objc_setProperty_nonatomic_copy(v8, v9, v2, 16);
      sub_10018ACE4((uint64_t)v10, v7);
      v10->_userInitiated = 0;
    }
    else
    {
      sub_10018ACE4(0, v7);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    v13[0] = v6;
    v13[1] = v10;
    id v12 = +[NSArray arrayWithObjects:v13 count:2];
    sub_10018F31C(v11, v12);
  }
}

BOOL sub_10018F30C(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:a2];
}

void sub_10018F31C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v54 = a1;
  if (a1)
  {
    id v4 = objc_alloc_init((Class)NSMutableArray);
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v44 = v3;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v63 objects:v71 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v64;
      do
      {
        for (id i = 0; i != v7; id i = (char *)i + 1)
        {
          if (*(void *)v64 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v63 + 1) + 8 * i);
          if (v10)
          {
            id v11 = *(id *)(v10 + 16);
            if (v11)
            {
              id v12 = v11;
              id v13 = *(id *)(v10 + 24);
              if (v13)
              {
                [v4 removeObject:v12];
              }
              else if (([v4 containsObject:v12] & 1) == 0)
              {
                [v4 addObject:v12];
              }
            }
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v63 objects:v71 count:16];
      }
      while (v7);
    }

    os_unfair_lock_lock((os_unfair_lock_t)(v54 + 104));
    id v14 = [*(id *)(v54 + 96) mutableCopy];
    os_unfair_lock_unlock((os_unfair_lock_t)(v54 + 104));
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v15 = v5;
    id v16 = [v15 countByEnumeratingWithState:&v59 objects:v70 count:16];
    if (v16)
    {
      id v17 = v16;
      char v53 = 0;
      uint64_t v18 = *(void *)v60;
      id v46 = v15;
      id v47 = v4;
      uint64_t v45 = *(void *)v60;
      do
      {
        id v19 = 0;
        id v48 = v17;
        do
        {
          if (*(void *)v60 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v59 + 1) + 8 * (void)v19);
          if (v20)
          {
            id v21 = *(id *)(v20 + 16);
            id v22 = *(id *)(v20 + 48);
            id v23 = *(void **)(v20 + 24);
          }
          else
          {
            id v22 = 0;
            id v21 = 0;
            id v23 = 0;
          }
          id v24 = v23;
          if (v21) {
            BOOL v25 = v24 == 0;
          }
          else {
            BOOL v25 = 0;
          }
          int v26 = v25;
          if (v25 || v22)
          {
            if (v26)
            {
              id v27 = v24;
              if ([v4 containsObject:v21])
              {
                id v28 = v21;
                uint64_t v29 = [v14 objectForKeyedSubscript:v21];
                if (v29)
                {
                  id v51 = v19;
                  id v30 = PKLogFacilityTypeGetObject();
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 138412290;
                    id v69 = v28;
                    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: immediately removing express pass (%@) from target state for mutation.", buf, 0xCu);
                  }

                  [v14 setObject:0 forKeyedSubscript:v28];
                  char v53 = 1;
                  id v19 = v51;
                }
                id v31 = *(void **)(v54 + 56);
                if (v31) {
                  [v31 removeObjectForKey:v28];
                }

                id v21 = v28;
              }
              id v24 = v27;
            }
            if (v22)
            {
              id v49 = v24;
              id v50 = v21;
              uint64_t v52 = v19;
              id v32 = [v14 allKeys];
              long long v55 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v58 = 0u;
              id v33 = [v32 countByEnumeratingWithState:&v55 objects:v67 count:16];
              if (v33)
              {
                id v34 = v33;
                uint64_t v35 = *(void *)v56;
                do
                {
                  for (j = 0; j != v34; j = (char *)j + 1)
                  {
                    if (*(void *)v56 != v35) {
                      objc_enumerationMutation(v32);
                    }
                    uint64_t v37 = *(void **)(*((void *)&v55 + 1) + 8 * (void)j);
                    uint64_t v38 = objc_msgSend(v14, "objectForKeyedSubscript:", v37, v44);
                    uint64_t v39 = [v38 passInformation];
                    id v40 = [v39 cardType];

                    if (v40 == v22)
                    {
                      uint64_t v41 = PKLogFacilityTypeGetObject();
                      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)long long buf = 138412290;
                        id v69 = v37;
                        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: immediately removing express pass (%@) from target state for type mutation.", buf, 0xCu);
                      }

                      [v14 setObject:0 forKeyedSubscript:v37];
                      char v53 = 1;
                    }
                    uint64_t v42 = *(void **)(v54 + 56);
                    if (v42) {
                      [v42 removeObjectForKey:v37];
                    }
                  }
                  id v34 = [v32 countByEnumeratingWithState:&v55 objects:v67 count:16];
                }
                while (v34);
              }

              id v15 = v46;
              id v4 = v47;
              uint64_t v18 = v45;
              id v17 = v48;
              id v24 = v49;
              id v21 = v50;
              id v19 = v52;
            }
          }

          id v19 = (char *)v19 + 1;
        }
        while (v19 != v17);
        id v43 = [v15 countByEnumeratingWithState:&v59 objects:v70 count:16];
        id v17 = v43;
      }
      while (v43);

      id v3 = v44;
      if (v53) {
        sub_10018C93C(v54, v14);
      }
    }
    else
    {

      id v3 = v44;
    }
    objc_msgSend(*(id *)(v54 + 192), "addObjectsFromArray:", v15, v44);
    sub_10018BD1C((unsigned char *)v54);
  }
}

uint64_t sub_10018F810(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *sub_10018F824(void *a1)
{
  id v1 = a1;
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x3032000000;
  uint64_t v10 = sub_10002091C;
  id v11 = sub_100020F80;
  id v12 = sub_100117168();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001980B8;
  v6[3] = &unk_10073BBC0;
  void v6[4] = &v7;
  [v1 enumerateKeysAndObjectsUsingBlock:v6];
  id v2 = (void *)v8[5];
  if (v2) {
    id v3 = v2;
  }
  else {
    id v3 = sub_100117168();
  }
  id v4 = v3;
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_10018F934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10018F94C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    if (v3)
    {
      uint64_t v17 = 0;
      uint64_t v18 = &v17;
      uint64_t v19 = 0x2020000000;
      char v20 = 1;
      id v6 = [v4 passUniqueIdentifier];
      uint64_t v7 = [v5 passInformation];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100197E18;
      v11[3] = &unk_10073BB98;
      id v8 = v6;
      id v12 = v8;
      id v13 = v7;
      id v14 = v5;
      id v16 = &v17;
      id v15 = v3;
      [v7 enumerateCredentialsWithHandler:v11];
      BOOL v9 = *((unsigned char *)v18 + 24) != 0;

      _Block_object_dispose(&v17, 8);
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 1;
  }

  return v9;
}

void sub_10018FAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018FAC0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100198158;
  v16[3] = &unk_10073BBE8;
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  id v17 = v5;
  sub_100117534((uint64_t)v3, v16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001981FC;
  v14[3] = &unk_10073BC30;
  id v6 = v5;
  id v15 = v6;
  uint64_t v7 = objc_retainBlock(v14);
  while ([v6 count])
  {
    id v8 = objc_msgSend(v6, "keyEnumerator", context);
    BOOL v9 = [v8 nextObject];

    uint64_t v10 = [v4 sortedPassUniqueIdentifiersForGroupContainingPassWithUniqueIdentifier:v9];
    if ([v10 count])
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10019829C;
      v12[3] = &unk_10073BC58;
      id v13 = v7;
      [v10 enumerateObjectsUsingBlock:v12];
      [v6 removeObjectsForKeys:v10];
    }
    else
    {
      ((void (*)(void *, void *, void))v7[2])(v7, v9, 0);
      [v6 removeObjectForKey:v9];
    }
  }
}

id sub_10018FCF4(void *a1, uint64_t a2)
{
  id v3 = a1;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001982B4;
  v18[3] = &unk_10073BC80;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  id v19 = v4;
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  id v15 = sub_100198338;
  id v16 = &unk_10073BCA8;
  id v5 = objc_retainBlock(v18);
  id v17 = v5;
  id v6 = objc_retainBlock(&v13);
  sub_10011783C((uint64_t)v3, v6);
  uint64_t v7 = sub_100117B70(v3, 0);

  id v8 = objc_msgSend((id)PKGetClassNFHardwareManager(), "sharedHardwareManagerWithNoUI", v13, v14, v15, v16);
  BOOL v9 = [v8 validateExpressPassCompatibilityWithConfig:v7 outError:a2];

  if (v9)
  {
    if (sub_100116D60((uint64_t)PDSECredentialConflict, v9, v6))
    {
      uint64_t v10 = [v4 allValues];
      goto LABEL_9;
    }
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_100515A7C();
    }
  }
  else
  {
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_100515A48();
    }
  }

  uint64_t v10 = 0;
LABEL_9:

  return v10;
}

uint64_t sub_10018FF04(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v3 = v1;
    uint64_t v4 = (uint64_t)[v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v9;
      while (2)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v3);
          }
          if (sub_1001901E4(*(void **)(*((void *)&v8 + 1) + 8 * i)))
          {
            uint64_t v4 = 1;
            goto LABEL_12;
          }
        }
        uint64_t v4 = (uint64_t)[v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    uint64_t v4 = 1;
  }

  return v4;
}

void sub_100190014(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1000215A0((uint64_t)v3);
  id v5 = a1[4];
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {

    goto LABEL_7;
  }
  if (v6 && v5)
  {
    unsigned __int8 v8 = [v5 isEqualToString:v6];

    if ((v8 & 1) == 0) {
      goto LABEL_10;
    }
LABEL_7:
    long long v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_1001902C4;
    uint64_t v14 = &unk_10073B660;
    id v15 = a1[4];
    id v16 = a1[5];
    sub_100116810((uint64_t)v3, &v11);
    objc_msgSend(a1[6], "addObjectsFromArray:", a1[5], v11, v12, v13, v14);
    [a1[5] removeAllObjects];

    long long v9 = v15;
    goto LABEL_8;
  }

LABEL_10:
  if (!sub_1001901E4(v3)) {
    goto LABEL_13;
  }
  long long v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = a1[4];
    *(_DWORD *)long long buf = 138412546;
    uint64_t v18 = v7;
    __int16 v19 = 2112;
    id v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: ignoring conflicts with %@ unrelated to pass %@.", buf, 0x16u);
  }
LABEL_8:

LABEL_13:
}

BOOL sub_1001901E4(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = &v6;
    uint64_t v8 = 0x2020000000;
    char v9 = 0;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001983F4;
    v5[3] = &unk_10073BCD0;
    void v5[4] = &v6;
    sub_100116810((uint64_t)v1, v5);
    BOOL v3 = *((unsigned char *)v7 + 24) != 0;
    _Block_object_dispose(&v6, 8);
  }
  else
  {
    BOOL v3 = 1;
  }

  return v3;
}

void sub_1001902AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001902C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = *(id *)(a1 + 32);
  id v10 = v8;
  long long v11 = v10;
  if (v9 == v10)
  {

    goto LABEL_9;
  }
  if (!v10 || !v9)
  {

    goto LABEL_8;
  }
  unsigned __int8 v12 = [v9 isEqualToString:v10];

  if ((v12 & 1) == 0) {
LABEL_8:
  }
    [*(id *)(a1 + 40) addObject:v11];
LABEL_9:
}

uint64_t sub_10019039C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001903B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    if (v7 && ([v7 passUniqueIdentifier], (uint64_t v10 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      long long v11 = (void *)v10;
      unsigned __int8 v12 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      id v13 = *(NSObject **)(a1 + 72);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1001906F8;
      v18[3] = &unk_10073B6B0;
      id v19 = v12;
      id v20 = v11;
      id v21 = v7;
      id v22 = v8;
      uint64_t v23 = a1;
      id v24 = v9;
      id v14 = v11;
      id v15 = v12;
      dispatch_async(v13, v18);
    }
    else
    {
      id v16 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100515AE4();
      }

      if (v9)
      {
        id v17 = *(NSObject **)(a1 + 80);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100190594;
        block[3] = &unk_10072FDC8;
        void block[4] = a1;
        id v26 = v9;
        dispatch_async(v17, block);
      }
    }
  }
}

void sub_100190594(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v4 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  uint64_t v2 = *(void *)(a1 + 40);
  BOOL v3 = sub_100190628(v4);
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1, v3);
}

id sub_100190628(void *a1)
{
  id v1 = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100197E10;
  v4[3] = &unk_10073B618;
  id v2 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v1, "count"));
  id v5 = v2;
  [v1 enumerateKeysAndObjectsUsingBlock:v4];

  return v2;
}

void sub_1001906F8(uint64_t a1)
{
  id v2 = objc_alloc_init(PDExpressMutationRequest);
  self = v2;
  if (v2)
  {
    objc_setProperty_nonatomic_copy(v2, v3, *(id *)(a1 + 40), 16);
    sub_10018ACE4((uint64_t)self, *(void **)(a1 + 48));
    objc_setProperty_nonatomic_copy(self, v4, *(id *)(a1 + 56), 32);
    objc_setProperty_nonatomic_copy(self, v5, *(id *)(a1 + 72), 40);
  }
  else
  {
    sub_10018ACE4(0, *(void **)(a1 + 48));
  }
  sub_10018C664(*(void *)(a1 + 64), self);
}

void sub_100190798(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    if (a2)
    {
      uint64_t v6 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      id v7 = *(NSObject **)(a1 + 72);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1001909D0;
      v11[3] = &unk_10073B760;
      id v12 = v6;
      uint64_t v15 = a2;
      uint64_t v13 = a1;
      id v14 = v5;
      id v8 = v6;
      dispatch_async(v7, v11);
    }
    else
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100515B18();
      }

      if (v5)
      {
        uint64_t v10 = *(NSObject **)(a1 + 80);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100190914;
        block[3] = &unk_10072FDC8;
        void block[4] = a1;
        id v17 = v5;
        dispatch_async(v10, block);
      }
    }
  }
}

void sub_100190914(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v5 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  uint64_t v2 = *(void *)(a1 + 40);
  BOOL v3 = sub_100190628(v5);
  SEL v4 = objc_msgSend(v3, "pk_setByApplyingBlock:", &stru_10073B6F0);
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1, v4);
}

PKExpressPassInformation *__cdecl sub_1001909C8(id a1, PKExpressPassConfiguration *a2)
{
  return (PKExpressPassInformation *)[(PKExpressPassConfiguration *)a2 passInformation];
}

void sub_1001909D0(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(PDExpressMutationRequest);
  BOOL v3 = v2;
  if (v2) {
    v2->_cardTypeToRemove = *(void *)(a1 + 56);
  }
  newValue[0] = _NSConcreteStackBlock;
  newValue[1] = 3221225472;
  newValue[2] = sub_100190A90;
  newValue[3] = &unk_10073B738;
  id v6 = *(id *)(a1 + 48);
  if (v3) {
    objc_setProperty_nonatomic_copy(v3, v4, newValue, 56);
  }
  sub_10018C664(*(void *)(a1 + 40), v3);
}

void sub_100190A90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend(a3, "pk_setByApplyingBlock:", &stru_10073B710);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

PKExpressPassInformation *__cdecl sub_100190B04(id a1, PKExpressPassConfiguration *a2)
{
  return (PKExpressPassInformation *)[(PKExpressPassConfiguration *)a2 passInformation];
}

void sub_100190B0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if (v5)
    {
      id v7 = (void *)PDOSTransactionCreate("PDExpressPassManager");
      id v8 = *(NSObject **)(a1 + 72);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100190D34;
      v12[3] = &unk_100730C10;
      id v13 = v7;
      id v14 = v5;
      uint64_t v15 = a1;
      id v16 = v6;
      id v9 = v7;
      dispatch_async(v8, v12);
    }
    else
    {
      uint64_t v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100515B4C();
      }

      if (v6)
      {
        long long v11 = *(NSObject **)(a1 + 80);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100190CA0;
        block[3] = &unk_10072FDC8;
        void block[4] = a1;
        id v18 = v6;
        dispatch_async(v11, block);
      }
    }
  }
}

void sub_100190CA0(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  id v4 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 104));
  uint64_t v2 = *(void *)(a1 + 40);
  BOOL v3 = sub_100190628(v4);
  (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1, v3);
}

void sub_100190D34(uint64_t a1)
{
  self = objc_alloc_init(PDExpressMutationRequest);
  if (self)
  {
    objc_setProperty_nonatomic_copy(self, v2, *(id *)(a1 + 40), 16);
    objc_setProperty_nonatomic_copy(self, v3, *(id *)(a1 + 56), 40);
  }
  sub_10018C664(*(void *)(a1 + 48), self);
}

void sub_100190DB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    *((unsigned char *)WeakRetained + 184) = 0;
    if (v3)
    {
      sub_100190E60((uint64_t)WeakRetained, v3);
    }
    else
    {
      id v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        sub_100515B80();
      }

      id v7 = [v5[24] copy];
      [v5[24] removeAllObjects];
      sub_100191B60((uint64_t)v5, v7);
    }
  }
}

void sub_100190E60(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_86;
  }
  id v4 = [*(id *)(a1 + 192) copy];
  [*(id *)(a1 + 192) removeAllObjects];
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = [v4 count];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Handling %ld mutations...", buf, 0xCu);
  }
  v87 = v4;

  id v6 = objc_alloc_init((Class)NSMutableArray);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  id v7 = [*(id *)(a1 + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  id v8 = *(id *)(a1 + 8);
  oslog = v5;
  id v9 = v3;
  id v10 = v6;
  id v11 = v7;
  id v12 = objc_alloc_init((Class)NSMutableDictionary);
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_1001984A0;
  v127 = &unk_10073BCF8;
  *(void *)&long long v128 = v8;
  *((void *)&v128 + 1) = v9;
  id v13 = v12;
  v129 = v13;
  id v130 = v10;
  id v14 = v8;
  id v15 = v9;
  id v16 = oslog;
  id v17 = v15;
  id v18 = v10;
  [v11 enumerateKeysAndObjectsUsingBlock:buf];
  id v82 = v11;

  id v19 = v17;
  id v20 = v130;
  id v21 = v13;

  uint64_t v88 = v21;
  id v22 = sub_10018F824(v21);
  sub_10018FAC0(v22, *(void **)(a1 + 8));
  id v122 = 0;
  uint64_t v23 = sub_10018FCF4(v22, (uint64_t)&v122);
  id v24 = v122;
  int v25 = sub_10018FF04(v23);
  if (v25)
  {
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR)) {
      sub_100515D44();
    }

    [v88 removeAllObjects];
    [v18 removeAllObjects];
  }

  if (![v87 count])
  {
    if (v25) {
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  v86 = v22;
  uint64_t v96 = a1;
  id v80 = v3;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  id obj = v87;
  id v94 = [obj countByEnumeratingWithState:&v118 objects:v125 count:16];
  if (!v94)
  {
    id v27 = v88;
    goto LABEL_35;
  }
  uint64_t v26 = *(void *)v119;
  id v27 = v88;
  do
  {
    id v28 = 0;
    do
    {
      if (*(void *)v119 != v26) {
        objc_enumerationMutation(obj);
      }
      uint64_t v29 = *(char **)(*((void *)&v118 + 1) + 8 * (void)v28);
      id v30 = [v27 mutableCopy];
      id v31 = [v18 mutableCopy];
      if (v29)
      {
        int v32 = v29[8];
        if (sub_100191D54(v30, *(void **)(v96 + 8), v19, v31, v29, 1, v29[8]))
        {
LABEL_16:
          id v33 = v30;

          id v34 = v31;
          LOBYTE(v25) = 1;
          uint64_t v35 = v18;
          id v27 = v33;
          id v18 = v34;
        }
        else
        {
          if (!v32) {
            goto LABEL_26;
          }
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR)) {
            sub_100515D04(&v116, v117, oslog);
          }

          id v33 = objc_alloc_init((Class)NSMutableDictionary);
          id v34 = objc_alloc_init((Class)NSMutableArray);

          if (sub_100191D54(v33, *(void **)(v96 + 8), v19, v34, v29, 0, 1))
          {
            id v33 = v33;

            id v34 = v34;
            LOBYTE(v25) = 1;
            uint64_t v35 = v18;
            id v18 = v34;
            id v27 = v33;
          }
          else
          {
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR)) {
              sub_100515CC4(&v114, v115, oslog);
            }
            uint64_t v35 = oslog;
          }
        }

        id v31 = v34;
        id v30 = v33;
        goto LABEL_26;
      }
      if (sub_100191D54(v30, *(void **)(v96 + 8), v19, v31, 0, 1, 0)) {
        goto LABEL_16;
      }
LABEL_26:

      id v28 = (char *)v28 + 1;
    }
    while (v94 != v28);
    id v36 = [obj countByEnumeratingWithState:&v118 objects:v125 count:16];
    id v94 = v36;
  }
  while (v36);
LABEL_35:
  uint64_t v88 = v27;

  id v3 = v80;
  a1 = v96;
  id v16 = oslog;
  id v22 = v86;
  if (v25)
  {
LABEL_36:
    uint64_t v37 = sub_10018F824(v88);

    sub_10018FAC0(v37, *(void **)(a1 + 8));
    id v22 = v37;
  }
LABEL_37:
  v111[0] = _NSConcreteStackBlock;
  v111[1] = 3221225472;
  v111[2] = sub_100192CC0;
  v111[3] = &unk_10073B788;
  id v38 = objc_alloc_init((Class)NSMutableSet);
  id v112 = v38;
  uint64_t v39 = v18;
  v113 = v39;
  sub_100117534((uint64_t)v22, v111);
  id v40 = *(void **)(a1 + 8);
  uint64_t v41 = v22;
  id v42 = v38;
  id v43 = v40;
  id v44 = v43;
  if (v43)
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100199CAC;
    v127 = &unk_100733610;
    id v45 = v43;
    *(void *)&long long v128 = v45;
    *((void *)&v128 + 1) = v42;
    v129 = v41;
    [v45 performTransactionWithBlock:buf];
  }
  contexta = v42;

  id v83 = v41;
  id v46 = sub_100117B70(v41, v19);
  id v47 = [v19 setExpressPassConfig:v46 restoreAuthorization:0];
  if (v47)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
      sub_100515C50();
    }

    id v48 = [v19 setExpressPassConfig:&__NSArray0__struct restoreAuthorization:0];
    [v88 removeAllObjects];
    [v39 removeAllObjects];
  }
  else
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v49 = v39;
      id v50 = [v88 count];
      id v51 = [v49 count];
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v50;
      uint64_t v39 = v49;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v51;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Express configuration set. There are %ld passes in express state with %ld suspended.", buf, 0x16u);
    }
  }
  uint64_t v52 = [*(id *)(a1 + 16) assertionsOfType:1];
  id v53 = [v52 count];

  if (!*(unsigned char *)(a1 + 64))
  {
    uint64_t v54 = v42;
    if (!v53) {
      goto LABEL_49;
    }
    goto LABEL_60;
  }
  uint64_t v54 = v42;
  if (*(void *)(a1 + 56) || v53)
  {
LABEL_60:
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v53;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Skipping sanitization (provisioning assertions: %lu)", buf, 0xCu);
    }
    long long v55 = v16;
    goto LABEL_63;
  }
LABEL_49:
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  long long v55 = [v19 allApplets];
  id v56 = [v55 countByEnumeratingWithState:&v107 objects:v124 count:16];
  if (!v56)
  {
LABEL_63:
    long long v61 = v83;
    goto LABEL_85;
  }
  id v57 = v56;
  id v79 = v39;
  uint64_t v58 = *(void *)v108;
  while (2)
  {
    for (uint64_t i = 0; i != v57; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v108 != v58) {
        objc_enumerationMutation(v55);
      }
      long long v60 = *(void **)(*((void *)&v107 + 1) + 8 * i);
      if (([v60 managedBySP] & 1) == 0
        && ([v60 authTransientConfigurable] & 1) != 0)
      {

        id v62 = objc_alloc_init((Class)NSMutableSet);
        id v63 = objc_alloc_init((Class)NSMutableDictionary);
        v104[0] = _NSConcreteStackBlock;
        v104[1] = 3221225472;
        v104[2] = sub_100192D40;
        v104[3] = &unk_10073B7B0;
        id v64 = v62;
        id v105 = v64;
        id obja = v63;
        id v106 = obja;
        [v88 enumerateKeysAndObjectsUsingBlock:v104];
        id v103 = 0;
        uint64_t v78 = v64;
        LODWORD(v64) = [v19 restoreAuthorizationForAllAppletsExcept:v64 error:&v103];
        id v65 = v103;
        if (v64)
        {
          uint64_t v39 = v79;
          long long v61 = v83;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
          {
            id v66 = [v78 count];
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v66;
            _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: sanitized applet authorization with %lu identifiers excluded.", buf, 0xCu);
          }

          id v67 = [*(id *)(a1 + 8) credentialIdentifiersForAid];
          long long v99 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          id v95 = [v67 countByEnumeratingWithState:&v99 objects:v123 count:16];
          if (v95)
          {
            uint64_t v97 = a1;
            id v81 = v3;
            uint64_t v90 = *(void *)v100;
            *(void *)v89 = v67;
            do
            {
              for (j = 0; j != v95; j = (char *)j + 1)
              {
                id v69 = v65;
                if (*(void *)v100 != v90) {
                  objc_enumerationMutation(v67);
                }
                uint64_t v70 = *(void *)(*((void *)&v99 + 1) + 8 * (void)j);
                uint64_t v71 = [obja objectForKeyedSubscript:v70];
                id v72 = [v71 count];
                v73 = [v67 objectForKeyedSubscript:v70];
                if (v72)
                {
                  id v74 = [objc_alloc((Class)NSMutableSet) initWithSet:v73];
                  [v74 minusSet:v71];

                  v73 = v74;
                }
                id v75 = [v73 count];
                id v98 = v69;
                unsigned int v76 = [v19 restoreAuthorizarionForKeys:v73 onApplet:v70 error:&v98];
                id v65 = v98;

                if (v76)
                {
                  id v77 = oslog;
                  id v67 = *(void **)v89;
                  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 134218498;
                    *(void *)&uint8_t buf[4] = v75;
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v70;
                    *(_WORD *)&buf[22] = 2048;
                    v127 = v72;
                    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: sanitized %lu credentials on aid %@ with %lu remaining as express.", buf, 0x20u);
                  }
                }
                else
                {
                  id v77 = oslog;
                  id v67 = *(void **)v89;
                  if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)long long buf = 134218754;
                    *(void *)&uint8_t buf[4] = v75;
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v70;
                    *(_WORD *)&buf[22] = 2048;
                    v127 = v72;
                    LOWORD(v128) = 2112;
                    *(void *)((char *)&v128 + 2) = v65;
                    _os_log_fault_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_FAULT, "PKExpressPassManager: failed to sanitized %lu credentials on aid %@ with %lu remaining as express. Error: %@", buf, 0x2Au);
                  }
                }
              }
              id v95 = [v67 countByEnumeratingWithState:&v99 objects:v123 count:16];
            }
            while (v95);
            uint64_t v39 = v79;
            id v3 = v81;
            a1 = v97;
            long long v61 = v83;
          }
        }
        else
        {
          id v67 = oslog;
          uint64_t v39 = v79;
          long long v61 = v83;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_FAULT)) {
            sub_100515BB4(v78, (uint64_t)v65, oslog);
          }
        }

        uint64_t v54 = contexta;
        long long v55 = v78;
        goto LABEL_85;
      }
    }
    id v57 = [v55 countByEnumeratingWithState:&v107 objects:v124 count:16];
    if (v57) {
      continue;
    }
    break;
  }
  uint64_t v39 = v79;
  long long v61 = v83;
  uint64_t v54 = v42;
LABEL_85:

  sub_10018C93C(a1, v88);
  *(unsigned char *)(a1 + 152) = 1;
  sub_10018D5DC(a1, v19);
  sub_100191B60(a1, v87);

LABEL_86:
}

void sub_100191B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && [v3 count])
  {
    id v5 = (void *)PDOSTransactionCreate("PDExpressPassManager");
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
    id v6 = [*(id *)(a1 + 96) copy];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
    id v7 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(v6, "count"));
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100192F34;
    v21[3] = &unk_10073B7B0;
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    id v22 = v8;
    id v9 = v7;
    id v23 = v9;
    [v6 enumerateKeysAndObjectsUsingBlock:v21];
    id v10 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100193034;
    block[3] = &unk_10072FF48;
    id v16 = v5;
    id v17 = v4;
    id v18 = v6;
    id v19 = v9;
    id v20 = v8;
    id v11 = v8;
    id v12 = v9;
    id v13 = v6;
    id v14 = v5;
    dispatch_async(v10, block);
  }
}

uint64_t sub_100191D54(void *a1, void *a2, void *a3, void *a4, void *a5, int a6, char a7)
{
  id v99 = a1;
  id v98 = a2;
  id v95 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v96 = v12;
  if (!v12) {
    goto LABEL_47;
  }
  id v13 = v12;
  id v14 = v12[3];
  if (!v14)
  {
    id v20 = v13[6];
    if (v20)
    {
      v106[0] = _NSConcreteStackBlock;
      v106[1] = 3221225472;
      v106[2] = sub_10019932C;
      v106[3] = &unk_10073B5C8;
      id v108 = v20;
      id v21 = objc_alloc_init((Class)NSMutableArray);
      id v107 = v21;
      [v99 enumerateKeysAndObjectsUsingBlock:v106];
      [v99 removeObjectsForKeys:v21];
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      id v22 = v21;
      id v23 = [v22 countByEnumeratingWithState:&v102 objects:v125 count:16];
      if (v23)
      {
        uint64_t v24 = *(void *)v103;
        do
        {
          for (uint64_t i = 0; i != v23; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v103 != v24) {
              objc_enumerationMutation(v22);
            }
            [v11 removeObject:*(void *)(*((void *)&v102 + 1) + 8 * i)];
          }
          id v23 = [v22 countByEnumeratingWithState:&v102 objects:v125 count:16];
        }
        while (v23);
      }

      id v13 = v96;
    }
    id v100 = v13[2];
    if (v100)
    {
      uint64_t v26 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v127 = v100;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Removing pass %@ from express state", buf, 0xCu);
      }

      [v99 removeObjectForKey:v100];
      [v11 removeObject:v100];
      goto LABEL_48;
    }
LABEL_47:
    id v100 = 0;
LABEL_48:
    id v49 = sub_10018F824(v99);
    sub_10018FAC0(v49, v98);
    uint64_t v101 = 0;
    id v50 = sub_10018FCF4(v49, (uint64_t)&v101);
    if (sub_10018FF04(v50))
    {
      id v51 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
        sub_100515DAC();
      }

      [v99 removeAllObjects];
    }

    uint64_t v52 = 1;
    goto LABEL_60;
  }
  id v15 = v14;
  id v16 = PKLogFacilityTypeGetObject();
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (a6)
  {
    if (v17)
    {
      id v18 = v96[2];
      *(_DWORD *)long long buf = 138412290;
      id v127 = v18;
      id v19 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Adding pass %@ to express state.", buf, 0xCu);
    }
  }
  else if (v17)
  {
    id v27 = v96[2];
    *(_DWORD *)long long buf = 138412290;
    id v127 = v27;
    id v28 = v27;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Adding pass %@ to express state without disabling auth.", buf, 0xCu);
  }
  id v92 = [v15 passUniqueIdentifier];
  uint64_t v29 = [v98 passWithUniqueIdentifier:v92];
  id v94 = v29;
  if (v29)
  {
    id v30 = [v29 passType];
    id v31 = v94;
    if (v30 != (id)1) {
      id v31 = 0;
    }
  }
  else
  {
    id v31 = 0;
  }
  id v32 = v31;
  if (a6) {
    id v33 = v96[4];
  }
  else {
    id v33 = 0;
  }
  id v93 = v32;
  id v34 = v15;
  id v90 = v95;
  uint64_t v88 = v33;
  id v35 = v33;
  id v100 = v34;
  id v36 = [v34 passUniqueIdentifier];
  uint64_t v37 = sub_100117168();
  BOOL v38 = sub_10018F94C(v37, v34);
  if (v38)
  {
    long long v111 = 0u;
    long long v112 = 0u;
    long long v110 = 0u;
    long long v109 = 0u;
    uint64_t v39 = [v93 devicePaymentApplications];
    id v40 = [v39 countByEnumeratingWithState:&v109 objects:buf count:16];
    if (v40)
    {
      uint64_t v41 = *(void *)v110;
      do
      {
        for (j = 0; j != v40; j = (char *)j + 1)
        {
          if (*(void *)v110 != v41) {
            objc_enumerationMutation(v39);
          }
          sub_100199438(v37, *(void **)(*((void *)&v109 + 1) + 8 * (void)j), ((unint64_t)[*(id *)(*((void *)&v109 + 1) + 8 * (void)j) supportedRadioTechnologies] & 2) != 0);
        }
        id v40 = [v39 countByEnumeratingWithState:&v109 objects:buf count:16];
      }
      while (v40);
    }
  }
  else
  {
    uint64_t v39 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      sub_100515F90();
    }
  }

  id v43 = objc_alloc_init((Class)NSMutableString);
  [v43 appendString:@"["];
  if (!v38)
  {
    [v43 appendString:@"]"];
LABEL_56:

    uint64_t v52 = 0;
    goto LABEL_57;
  }
  *(void *)v138 = 0;
  *(void *)&v138[8] = v138;
  *(void *)&v138[16] = 0x2020000000;
  LOBYTE(v139) = 1;
  v115 = _NSConcreteStackBlock;
  uint64_t v116 = 3221225472;
  BOOL v117 = sub_10019974C;
  long long v118 = &unk_10073BD70;
  long long v120 = (uint64_t *)v138;
  id v44 = v43;
  long long v119 = v44;
  sub_10011760C((uint64_t)v37, &v115);

  _Block_object_dispose(v138, 8);
  [v44 appendString:@"]"];
  id v45 = sub_100117B70(v37, 0);
  if (!v45)
  {
    id v53 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
      sub_100515DE0((uint64_t)v36);
    }

    goto LABEL_56;
  }
  id v46 = [v90 disableAuthorizationForPasses:v45 authorization:v35];
  id v47 = PKLogFacilityTypeGetObject();
  id v48 = v47;
  if (v46)
  {
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v138 = 138412802;
      *(void *)&v138[4] = v36;
      *(_WORD *)&v138[12] = 2112;
      *(void *)&v138[14] = v44;
      *(_WORD *)&v138[22] = 2112;
      v139 = v46;
      _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "PKExpressPassManager: failed to disable authorization for pass %@ (%@) - %@.", v138, 0x20u);
    }

    goto LABEL_56;
  }
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v138 = 138412546;
    *(void *)&v138[4] = v36;
    *(_WORD *)&v138[12] = 2112;
    *(void *)&v138[14] = v44;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: disabled authorization for pass %@ (%@).", v138, 0x16u);
  }

  id v85 = v99;
  id v78 = v98;
  id v79 = v90;
  id v77 = v11;
  id v81 = v93;
  id v83 = v100;
  id v80 = [v83 passUniqueIdentifier];
  BOOL v114 = 0;
  id v56 = [v83 passInformation];
  int v57 = sub_1001986C0(v81, v56, &v114);

  if ((v57 & 1) == 0)
  {
    goto LABEL_70;
  }
  uint64_t v58 = [v83 passInformation];
  int v59 = sub_100198844(v58, v79, &v114);

  if (!v59)
  {
LABEL_70:
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138413314;
      id v127 = v80;
      __int16 v128 = 1024;
      BOOL v129 = v81 != 0;
      __int16 v130 = 1024;
      int v131 = v57;
      __int16 v132 = 1024;
      int v133 = 0;
      __int16 v134 = 1024;
      BOOL v135 = v114;
      _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "PKExpressPassManager: Unable to add pass %@ to express state (in database: %d, express capable: %d, can be express %d, suspended %d)", buf, 0x24u);
    }
    uint64_t v52 = 0;
    goto LABEL_117;
  }
  [v85 setObject:v83 forKeyedSubscript:v80];
  if (v114 && ([v77 addObject:v80], v114))
  {
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_76;
    }
    *(_DWORD *)long long buf = 138412290;
    id v127 = v80;
    long long v60 = "PKExpressPassManager: Adding pass %@ to express state (suspended).";
  }
  else
  {
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_76;
    }
    *(_DWORD *)long long buf = 138412290;
    id v127 = v80;
    long long v60 = "PKExpressPassManager: Adding pass %@ to express state.";
  }
  _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v60, buf, 0xCu);
LABEL_76:

  unsigned int v76 = sub_10018F824(v85);
  sub_10018FAC0(v76, v78);
  id v113 = 0;
  sub_10018FCF4(v76, (uint64_t)&v113);
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v75 = v113;
  if (!obj)
  {
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
      sub_100515E50((uint64_t)v80);
    }
    id obj = 0;
    goto LABEL_113;
  }
  if (!sub_10018FF04(obj))
  {
    uint64_t v52 = 1;
    goto LABEL_116;
  }
  if ((a7 & 1) == 0)
  {
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
      sub_100515F28();
    }
LABEL_113:
    uint64_t v52 = 0;
    goto LABEL_114;
  }
  v91 = [v83 passUniqueIdentifier];
  long long v111 = 0u;
  long long v112 = 0u;
  long long v110 = 0u;
  long long v109 = 0u;
  id obj = obj;
  id v87 = [obj countByEnumeratingWithState:&v109 objects:buf count:16];
  if (!v87) {
    goto LABEL_106;
  }
  uint64_t v84 = *(void *)v110;
  while (2)
  {
    for (k = 0; k != v87; k = (char *)k + 1)
    {
      if (*(void *)v110 != v84) {
        objc_enumerationMutation(obj);
      }
      id v62 = *(void **)(*((void *)&v109 + 1) + 8 * (void)k);
      id v63 = v85;
      id v64 = v91;
      id v65 = v62;
      if (!v65)
      {

        continue;
      }
      id v66 = v65;
      *(void *)v138 = 0;
      *(void *)&v138[8] = v138;
      *(void *)&v138[16] = 0x2020000000;
      LOBYTE(v139) = 0;
      uint64_t v121 = 0;
      id v122 = &v121;
      uint64_t v123 = 0x2020000000;
      char v124 = 0;
      v115 = _NSConcreteStackBlock;
      uint64_t v116 = 3221225472;
      BOOL v117 = sub_100199B30;
      long long v118 = &unk_10073BDC0;
      long long v119 = v138;
      long long v120 = &v121;
      sub_100116810((uint64_t)v65, &v115);
      if (!*(unsigned char *)(*(void *)&v138[8] + 24))
      {
        _Block_object_dispose(&v121, 8);
        _Block_object_dispose(v138, 8);

        continue;
      }
      id v67 = sub_1000215A0((uint64_t)v66);
      if (!v91) {
        goto LABEL_98;
      }
      id v68 = v64;
      id v69 = v67;
      uint64_t v70 = v69;
      if (v69 == v68)
      {
      }
      else
      {
        if (!v69)
        {

LABEL_98:
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v136 = 138412290;
            v137 = v67;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: resolving conflict by removing pass %@.", v136, 0xCu);
          }

          [v63 removeObjectForKey:v67];
          _Block_object_dispose(&v121, 8);
          _Block_object_dispose(v138, 8);

          continue;
        }
        unsigned __int8 v71 = [v68 isEqualToString:v69];

        if ((v71 & 1) == 0) {
          goto LABEL_98;
        }
      }
      int v72 = *((unsigned __int8 *)v122 + 24);
      if (*((unsigned char *)v122 + 24))
      {
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v136 = 138412290;
          v137 = v70;
          _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "PKExpressPassManager: cannot resolve conflict for preferred pass %@ because of self conflict.", v136, 0xCu);
        }
      }
      else if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v136 = 138412290;
        v137 = v70;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: attempting to keep conflicting pass %@.", v136, 0xCu);
      }

      _Block_object_dispose(&v121, 8);
      _Block_object_dispose(v138, 8);

      if (v72)
      {
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
          sub_100515F28();
        }

        uint64_t v52 = 0;
        id v48 = v68;
        goto LABEL_114;
      }
    }
    id v87 = [obj countByEnumeratingWithState:&v109 objects:buf count:16];
    if (v87) {
      continue;
    }
    break;
  }
LABEL_106:

  v73 = sub_10018F824(v85);
  sub_10018FAC0(v73, v78);

  v115 = 0;
  id v74 = sub_10018FCF4(v73, (uint64_t)&v115);
  id v75 = v115;

  if (sub_10018FF04(v74))
  {
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
      sub_100515EC0();
    }

    uint64_t v52 = 0;
  }
  else
  {
    uint64_t v52 = 1;
  }
  id v48 = v91;
  unsigned int v76 = v73;
  id obj = v74;
LABEL_114:

LABEL_116:
  id v48 = v75;
LABEL_117:

LABEL_57:
  if (a6) {

  }
LABEL_60:

  return v52;
}

void sub_100192C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose((const void *)(v69 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100192CC0(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = sub_100011FD0((uint64_t)v4);
  if (v3)
  {
    [*(id *)(a1 + 32) addObject:v3];
    if ([*(id *)(a1 + 40) containsObject:v3]) {
      sub_10011619C((uint64_t)v4, 1);
    }
  }
}

void sub_100192D40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 passInformation];
  id v8 = *(void **)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v10 = v7;
  id v11 = v8;
  id v12 = v9;
  id v13 = v12;
  if (v10)
  {
    v19[0] = 0;
    v19[1] = v19;
    void v19[2] = 0x2020000000;
    char v20 = 1;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10019A3EC;
    v14[3] = &unk_10073BDE8;
    BOOL v17 = v19;
    id v15 = v12;
    char v18 = 1;
    id v16 = v11;
    [v10 enumerateCredentialsWithHandler:v14];

    _Block_object_dispose(v19, 8);
  }
}

void sub_100192E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100192E84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_100192E8C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [*(id *)(a1 + 40) copy];
    [v5 expressPassManager:v3 didUpdateExpressPassConfigurations:v4];
  }
}

void sub_100192F00(id a1)
{
  id v1 = (const char *)[PKDarwinNotificationEventExpressPassesInformationChanged UTF8String];
  notify_post(v1);
}

void sub_100192F34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 passInformation];
  id v6 = [v5 cardType];

  id v7 = *(void **)(a1 + 32);
  id v8 = +[NSNumber numberWithInteger:v6];
  id v11 = [v7 objectForKeyedSubscript:v8];

  if (!v11)
  {
    id v11 = objc_alloc_init((Class)NSMutableSet);
    id v9 = *(void **)(a1 + 32);
    id v10 = +[NSNumber numberWithInteger:v6];
    [v9 setObject:v11 forKeyedSubscript:v10];
  }
  [v11 addObject:v4];
  [*(id *)(a1 + 40) addObject:v4];
}

void sub_100193034(uint64_t a1)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = *(id *)(a1 + 40);
  id v20 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v20)
  {
    uint64_t v19 = *(void *)v22;
    do
    {
      uint64_t v2 = 0;
      do
      {
        if (*(void *)v22 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void *)(*((void *)&v21 + 1) + 8 * (void)v2);
        if (v3) {
          id v4 = *(void **)(v3 + 24);
        }
        else {
          id v4 = 0;
        }
        id v5 = v4;
        id v6 = [v5 passUniqueIdentifier];
        if (v6 || (!v3 ? (v7 = 0) : (v7 = *(void **)(v3 + 16)), (id v6 = v7) != 0))
        {
          id v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:v6];
          if (!v3) {
            goto LABEL_20;
          }
        }
        else
        {
          id v8 = 0;
          if (!v3)
          {
LABEL_20:
            id v9 = 0;
            goto LABEL_17;
          }
        }
        id v9 = (void (**)(id, uint64_t, void))*(id *)(v3 + 40);
        if (v9)
        {
          uint64_t v10 = PKEqualObjects();
          v9[2](v9, v10, *(void *)(a1 + 56));
        }
        id v11 = *(id *)(v3 + 56);
        if (v11)
        {
          id v12 = (void (**)(void, void, void))v11;
          id v13 = *(void **)(a1 + 64);
          id v14 = +[NSNumber numberWithInteger:*(void *)(v3 + 48)];
          id v15 = [v13 objectForKeyedSubscript:v14];
          BOOL v16 = [v15 count] == 0;

          v12[2](v12, v16, *(void *)(a1 + 56));
        }
LABEL_17:

        uint64_t v2 = (char *)v2 + 1;
      }
      while (v20 != v2);
      id v17 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
      id v20 = v17;
    }
    while (v17);
  }
}

id sub_100193264(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = 0;
  if (a1 && v5)
  {
    uint64_t v16 = 0;
    id v17 = &v16;
    uint64_t v18 = 0x3032000000;
    uint64_t v19 = sub_10002091C;
    id v20 = sub_100020F80;
    id v21 = 0;
    id v8 = objc_alloc_init((Class)NSMutableArray);
    [v8 addObject:v5];
    if (v6) {
      [v8 addObject:v6];
    }
    id v9 = (os_unfair_lock_s *)(a1 + 104);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
    id v10 = [*(id *)(a1 + 96) copy];
    os_unfair_lock_unlock(v9);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10019340C;
    v13[3] = &unk_10073B848;
    id v11 = v8;
    id v14 = v11;
    id v15 = &v16;
    [v10 enumerateKeysAndObjectsUsingBlock:v13];
    id v7 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }

  return v7;
}

void sub_1001933F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10019340C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  id v9 = [v8 passInformation];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100193544;
  v10[3] = &unk_10073B820;
  id v11 = *(id *)(a1 + 32);
  id v12 = &v13;
  [v9 enumerateCredentialsWithHandler:v10];

  if (*((unsigned char *)v14 + 24))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }

  _Block_object_dispose(&v13, 8);
}

void sub_10019352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100193544(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = PKEqualObjects();
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

id sub_100193588()
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  v0 = +[BKDeviceManager availableDevices];
  id v1 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v1; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v8 != v2) {
          objc_enumerationMutation(v0);
        }
        id v4 = *(void **)(*((void *)&v7 + 1) + 8 * i);
        id v5 = [v4 type];
        if (v5 == (id)1)
        {
          if (!PKPearlIsAvailable()) {
            goto LABEL_14;
          }
        }
        else if (v5 == (id)2 && (PKPearlIsAvailable() & 1) != 0)
        {
LABEL_14:
          id v1 = +[BKDevice deviceWithDescriptor:v4 error:0];
          goto LABEL_15;
        }
      }
      id v1 = [v0 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v1) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v1;
}

void sub_1001936C8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (!a1) {
    goto LABEL_15;
  }
  if (!v5) {
    id v6 = sub_100193588();
  }
  uint64_t v11 = 0;
  if (([v6 expressModeState:&v11 forUser:geteuid() error:0] & 1) == 0)
  {
    uint64_t v11 = 0;
    int v8 = atomic_exchange((atomic_uchar *volatile)(a1 + 201), 0) & 1;
LABEL_12:
    sub_1001937E0((unsigned char *)a1, 0);
    LODWORD(v10) = 0;
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  char v7 = v11;
  int v8 = atomic_exchange((atomic_uchar *volatile)(a1 + 201), (v11 & 4) != 0) & 1;
  if ((v7 & 4) == 0) {
    goto LABEL_12;
  }
  unint64_t v9 = v7 & 4;
  if (!v8 && PDScheduledActivityExists()) {
    PDScheduledActivityRemove();
  }
  unint64_t v10 = v9 >> 2;
  sub_10018D26C((unsigned char *)a1, (v11 & 3) != 0);
  if (a3)
  {
LABEL_13:
    if (v10 != v8) {
      [*(id *)(a1 + 40) recalculateNotificationNames];
    }
  }
LABEL_15:
}

void sub_1001937E0(unsigned char *a1, int a2)
{
  if (a1)
  {
    unsigned int v4 = PDGetDeviceLockState();
    int v5 = PDGetWasLocked();
    if (((v5 ^ ((v4 & 1) == 0)) & 1) == 0) {
      PDSetWasLocked();
    }
    double Current = CFAbsoluteTimeGetCurrent();
    char v7 = v4 | a2;
    int v8 = (v4 | a2) ^ 1;
    if ((v5 & v8) == 1)
    {
      PDSetLastUnlockedTime();
      int v9 = 0;
      double v10 = Current + 172800.0;
    }
    else
    {
      PDGetLastUnlockedTime();
      double v10 = v11 + 172800.0;
      int v12 = (v4 >> 1) & 1;
      if (Current >= v11 + 172800.0) {
        int v12 = 1;
      }
      if (v7) {
        int v9 = v12;
      }
      else {
        int v9 = 0;
      }
    }
    sub_10018D26C(a1, v9);
    double v13 = fmax(v10 - Current, 1.0);
    if ((v9 | v8)) {
      double v13 = 0.0;
    }
    sub_1001938EC((uint64_t)a1, v13);
  }
}

void sub_1001938EC(uint64_t a1, double a2)
{
  if (a1)
  {
    if (a2 <= 0.0)
    {
      if (PDScheduledActivityExists())
      {
        PDScheduledActivityRemove();
      }
    }
    else
    {
      id v6 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceNow:a2];
      uint64_t v2 = PDScheduledActivityGetCriteria();
      uint64_t v3 = [v2 startDate];
      if (!v3 || ([v6 timeIntervalSinceDate:v3], fabs(v4) > 3600.0))
      {
        int v5 = +[PDScheduledActivityCriteria maintenanceActivityCriteriaWithStartDate:v6];
        [v5 setRepeating:0];
        PDScheduledActivityRegister();
      }
    }
  }
}

void sub_100193A54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v4 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    [*(id *)(a1 + 128) addObject:v4];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    id v3 = v4;
  }
}

void sub_100193AC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v4 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
    [*(id *)(a1 + 128) removeObject:v4];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
    id v3 = v4;
  }
}

void sub_100193B2C(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

os_unfair_lock_s *sub_100193C28(os_unfair_lock_s *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = result + 27;
    os_unfair_lock_lock(result + 27);
    id v3 = [*(id *)&v1[28]._os_unfair_lock_opaque copy];
    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

void sub_100193C74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_4;
  }
  if (v3)
  {
    uint64_t v5 = PDExpressTransactionQueue();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100193D2C;
    v6[3] = &unk_10072FDC8;
    void v6[4] = a1;
    id v7 = v4;
    dispatch_async(v5, v6);

LABEL_4:
    return;
  }
  __break(1u);
}

void sub_100193D2C(uint64_t a1)
{
  id v2 = sub_100193C28(*(os_unfair_lock_s **)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100193D88(uint64_t a1, void **a2, void *a3)
{
  id result = a3;
  id v6 = result;
  if (!a1) {
    goto LABEL_14;
  }
  if (a2)
  {
    id v7 = *(void **)(a1 + 112);
    if (!v7)
    {
LABEL_12:
      uint64_t v13 = 1;
LABEL_13:

      return (id)v13;
    }
    if (!result)
    {
LABEL_7:
      id v8 = v7;
      long long v9 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = 0;

      if ([v8 isProcessing])
      {
        [v8 resolve];
        long long v10 = *a2;
        if (!*a2)
        {
          id v11 = objc_alloc_init((Class)NSMutableArray);
          int v12 = *a2;
          *a2 = v11;

          long long v10 = *a2;
        }
        [v10 addObject:v8];
      }

      goto LABEL_12;
    }
    if ((*((unsigned int (**)(id))result + 2))(result))
    {
      id v7 = *(void **)(a1 + 112);
      goto LABEL_7;
    }
LABEL_14:
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

id sub_100193E58(uint64_t a1, void *a2, void **a3)
{
  id result = a2;
  id v6 = result;
  if (!a1)
  {
LABEL_10:

    return (id)a1;
  }
  if (result && a3)
  {
    if (*(void *)(a1 + 112) && (*((unsigned int (**)(id))result + 2))(result))
    {
      id v7 = *a3;
      if (!*a3)
      {
        id v8 = objc_alloc_init((Class)NSMutableArray);
        long long v9 = *a3;
        *a3 = v8;

        id v7 = *a3;
      }
      id v10 = [*(id *)(a1 + 112) copy];
      [v7 addObject:v10];

      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

BOOL sub_100193F0C(id a1, PKExpressTransactionState *a2)
{
  return [(PKExpressTransactionState *)a2 isProcessing] ^ 1;
}

void sub_100193F2C(uint64_t a1)
{
}

void sub_100193F40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (!v3)
    {
      __break(1u);
      return;
    }
    id v7 = v3;
    id v5 = objc_alloc_init((Class)NSMutableDictionary);
    [v5 setObject:PKAnalyticsReportEventTypeExpressTransactionError forKey:PKAnalyticsReportEventKey];
    [v5 setObject:PKAnalyticsReportExpressTransactionPageTag forKey:PKAnalyticsReportPageTagKey];
    [v5 setObject:v7 forKey:PKAnalyticsReportErrorTypeKey];
    uint64_t v6 = PKAnalyticsSubjectExpressPresentment;
    +[PKAnalyticsReporter beginSubjectReporting:PKAnalyticsSubjectExpressPresentment];
    +[PKAnalyticsReporter subject:v6 sendEvent:v5];
    +[PKAnalyticsReporter endSubjectReporting:v6];

    id v3 = v7;
  }
}

void sub_100194048(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_23;
  }
  if (!v3) {
    __break(1u);
  }
  uint64_t v5 = a1;
  if (![v3 count]) {
    goto LABEL_23;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (!v7) {
    goto LABEL_22;
  }
  id v8 = v7;
  long long v22 = v4;
  id v9 = 0;
  uint64_t v10 = *(void *)v30;
  do
  {
    for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v30 != v10) {
        objc_enumerationMutation(v6);
      }
      int v12 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      unsigned __int8 v13 = objc_msgSend(v12, "isExpress", v22);
      unsigned __int8 v14 = [v12 isProcessing];
      unsigned __int8 v15 = v14;
      if (v13)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v5 + 32));
        sub_100206A60((uint64_t)WeakRetained, v12);

        if (v15) {
          continue;
        }
      }
      else
      {
        if (v14) {
          continue;
        }
        if ([v12 standaloneTransactionType]) {
          sub_10018D0A4(v5, v12, 0);
        }
      }
      if (!v9) {
        id v9 = objc_alloc_init((Class)NSMutableArray);
      }
      [v9 addObject:v12];
    }
    id v8 = [v6 countByEnumeratingWithState:&v29 objects:v33 count:16];
  }
  while (v8);

  id v4 = v22;
  if (v9)
  {
    id v17 = (void *)PDOSTransactionCreate("PDExpressPassManager.express_transaction.resolved");
    uint64_t v18 = PDDefaultQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100194C04;
    block[3] = &unk_10072E238;
    void block[4] = v5;
    id v27 = v17;
    id v19 = v9;
    id v28 = v19;
    id v20 = v17;
    dispatch_async(v18, block);

    id v21 = PDUtilityQueue();
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100194DD8;
    v23[3] = &unk_10072E198;
    id v24 = v19;
    uint64_t v25 = v5;
    id v6 = v19;
    dispatch_async(v21, v23);

LABEL_22:
  }
LABEL_23:
}

id sub_100194310(uint64_t a1, void *a2)
{
  id result = a2;
  id v4 = result;
  if (!a1)
  {
LABEL_15:

    return (id)a1;
  }
  if (result)
  {
    unsigned __int8 v15 = 0;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
    sub_100193D88(a1, &v15, &stru_10073B8A8);
    uint64_t v5 = *(void *)(a1 + 112);
    id v6 = PKLogFacilityTypeGetObject();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: updating existing express transaction state for generic standalone event.", buf, 2u);
      }

      sub_100193E58(a1, v4, &v15);
      id v8 = v15;
    }
    else
    {
      if (v7)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: creating express transaction state for generic standalone event.", buf, 2u);
      }

      id v9 = +[PKExpressTransactionState createForExpressType:0];
      uint64_t v10 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v9;

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10019452C;
      v12[3] = &unk_10073B8D0;
      id v13 = v4;
      sub_100193E58(a1, v12, &v15);
      [*(id *)(a1 + 112) resolve];
      id v8 = v15;
      if (!v15)
      {
        id v8 = objc_alloc_init((Class)NSMutableArray);
        unsigned __int8 v15 = v8;
      }
      id v11 = [*(id *)(a1 + 112) copy];
      [v8 addObject:v11];
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
    if (v8) {
      sub_100194048(a1, v8);
    }
    BOOL v16 = v5 == 0;

    a1 = v16;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

BOOL sub_10019450C(id a1, PKExpressTransactionState *a2)
{
  return [(PKExpressTransactionState *)a2 isProcessing] ^ 1;
}

uint64_t sub_10019452C(uint64_t a1)
{
  return 0;
}

void *sub_100194554(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  if (!a1)
  {
    uint64_t v42 = 0;
    goto LABEL_65;
  }
  unsigned __int8 v14 = [*(id *)(a1 + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:v11 subcredentialIdentifier:v12];
  if (a2 != 1)
  {
    id v17 = 0;
    goto LABEL_7;
  }
  id result = [v13 aliro];
  if (result)
  {
    BOOL v16 = result;
    if ([result operationSource] != (id)5)
    {
      unsigned __int8 v51 = 0;

LABEL_64:
      uint64_t v42 = v51;
LABEL_65:

      return (void *)v42;
    }
    id v17 = [v16 terminalReaderIdentifier];

LABEL_7:
    id v50 = 0;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
    sub_100193D88(a1, &v50, &stru_10073B8F0);
    uint64_t v18 = *(void **)(a1 + 112);
    if (!v18)
    {
      uint64_t v26 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v53 = a3;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: creating express transaction state for standalone transaction of type %ld.", buf, 0xCu);
      }

      if (v17)
      {
        id v27 = +[PKExpressTransactionState createForStandaloneTransaction:a3 applicationIdentifier:v11 keyIdentifier:v12 passUniqueIdentifier:v14 terminalReaderIdentifier:v17];
      }
      else
      {
        id v27 = +[PKExpressTransactionState createForStandaloneTransaction:a3 applicationIdentifier:v11 keyIdentifier:v12 passUniqueIdentifier:v14];
      }
      long long v30 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v27;

      goto LABEL_26;
    }
    unsigned int v19 = [v18 isAssociated];
    if ((v19 & 1) == 0)
    {
      id v28 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v53 = a3;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: associating existing express transaction state with target of standalone transaction of type %ld.", buf, 0xCu);
      }

      [*(id *)(a1 + 112) associateWithApplicationIdentifier:v11 keyIdentifier:v12 terminalReaderIdentifier:v17 passUniqueIdentifier:v14];
LABEL_22:
      if (v19 & ([*(id *)(a1 + 112) receiveStandaloneTransaction:a3] ^ 1))
      {
        char v29 = 1;
LABEL_60:
        id v31 = v50;
LABEL_61:
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
        if (v31) {
          sub_100194048(a1, v31);
        }
        unsigned __int8 v51 = v29;

        goto LABEL_64;
      }
LABEL_26:
      id v31 = v50;
      if (!v50)
      {
        id v31 = objc_alloc_init((Class)NSMutableArray);
        id v50 = v31;
      }
      id v32 = [*(id *)(a1 + 112) copy];
      [v31 addObject:v32];

      char v29 = 1;
      goto LABEL_61;
    }
    id v48 = v17;
    id v20 = [*(id *)(a1 + 112) applicationIdentifier];
    id v21 = v11;
    long long v22 = v21;
    id v46 = v20;
    uint64_t v47 = a3;
    if (v20 == v21)
    {
    }
    else
    {
      id v23 = v21;
      id v49 = v20;
      if (!v21) {
        goto LABEL_55;
      }
      id v23 = v21;
      id v49 = v20;
      if (!v20) {
        goto LABEL_55;
      }
      id v24 = v20;
      unsigned int v25 = [v20 isEqualToString:v21];

      a3 = v47;
      if (!v25) {
        goto LABEL_57;
      }
    }
    id v45 = v13;
    id v33 = [*(id *)(a1 + 112) keyIdentifier];
    id v34 = v12;
    id v35 = v34;
    id v49 = v33;
    if (v33 == v34)
    {
    }
    else
    {
      if (!v34 || !v33)
      {
        id v23 = v33;
LABEL_53:

LABEL_54:
        id v13 = v45;
LABEL_55:

        a3 = v47;
        goto LABEL_56;
      }
      unsigned int v43 = [v33 isEqualToString:v34];

      if (!v43)
      {
        id v13 = v45;
LABEL_56:

LABEL_57:
        uint64_t v41 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134218498;
          uint64_t v53 = a3;
          __int16 v54 = 2114;
          long long v55 = v22;
          __int16 v56 = 2114;
          int v57 = v46;
          _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "PKExpressPassManager: WARNING IGNORING STANDALONE TRANSACTION OF TYPE %ld: EXPECTED: %{public}@ ACTUAL: %{public}@! Please file a radar.", buf, 0x20u);
        }

        char v29 = 0;
        id v17 = v48;
        goto LABEL_60;
      }
    }
    id v23 = [*(id *)(a1 + 112) terminalReaderIdentifier];
    id v36 = v48;
    id v37 = v36;
    if (v23 == v36)
    {
    }
    else
    {
      if (!v36 || !v23)
      {
        id v35 = v23;
LABEL_52:

        goto LABEL_53;
      }
      unsigned int v38 = [v23 isEqualToString:v36];

      if (!v38) {
        goto LABEL_54;
      }
    }
    id v37 = [*(id *)(a1 + 112) passUniqueIdentifier];
    id v39 = v14;
    id v40 = v39;
    if (v37 == v39)
    {

      id v13 = v45;
      a3 = v47;
LABEL_50:

      id v17 = v48;
      goto LABEL_22;
    }
    if (v39 && v37)
    {
      unsigned __int8 v44 = [v37 isEqualToString:v39];

      id v13 = v45;
      a3 = v47;
      if ((v44 & 1) == 0) {
        goto LABEL_57;
      }
      goto LABEL_50;
    }

    id v35 = v37;
    goto LABEL_52;
  }
  __break(1u);
  return result;
}

BOOL sub_100194AB8(id a1, PKExpressTransactionState *a2)
{
  return [(PKExpressTransactionState *)a2 isProcessing] ^ 1;
}

uint64_t sub_100194AD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (uint64_t (**)(void, void))v3;
  if (!a1) {
    goto LABEL_14;
  }
  if (!v3)
  {
    __break(1u);
LABEL_14:
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 108));
  uint64_t v5 = *(void **)(a1 + 112);
  if (!v5 || ![v5 isProcessing])
  {
    uint64_t v7 = 0;
LABEL_9:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
    goto LABEL_10;
  }
  if ((v4[2](v4, *(void *)(a1 + 112)) & 1) == 0)
  {
    uint64_t v7 = 1;
    goto LABEL_9;
  }
  id v6 = [*(id *)(a1 + 112) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 108));
  if (v6)
  {
    id v10 = v6;
    uint64_t v7 = 1;
    id v8 = +[NSArray arrayWithObjects:&v10 count:1];
    sub_100194048(a1, v8);
  }
  else
  {
    uint64_t v7 = 1;
  }
LABEL_10:

  return v7;
}

void sub_100194C04(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100194CA8;
  v5[3] = &unk_10073B918;
  uint64_t v2 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  sub_10018DBE0(v2, v5);
}

void sub_100194CA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v3, "expressPassManager:didFinishExpressTransactionWithState:", *(void *)(a1 + 48), v9, (void)v10);
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_100194DD8(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if (objc_msgSend(v7, "isAssociated", (void)v8)
          && ([v7 isIgnorable] & 1) == 0)
        {
          sub_100194EF0(*(void *)(a1 + 40), v7);
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100194EF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
LABEL_11:

    return;
  }
  if (v3)
  {
    id v6 = [v4 passUniqueIdentifier];
    if (v6)
    {
      uint64_t v7 = [*(id *)(a1 + 8) passWithUniqueIdentifier:v6];
      if (v7)
      {
        if ([v4 type] == (id)5) {
          uint64_t v8 = 3;
        }
        else {
          uint64_t v8 = 0;
        }
        long long v9 = PDHeavyQueue();
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_1001977B8;
        v10[3] = &unk_10072F6E8;
        id v11 = v6;
        +[PKWalletTransactionSignal donateSignalForPass:v7 transactionType:v8 queue:v9 completion:v10];
      }
    }

    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_100195024(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + 40) && (a2 & 1) == 0)
  {
    id v2 = (const char *)[PKNotifyEventOutstandingExpressTransactionReady cStringUsingEncoding:4];
    return notify_post(v2);
  }
  return result;
}

void sub_100195140(uint64_t a1)
{
}

void *sub_100195274(uint64_t a1)
{
  return sub_100194554(*(void *)(a1 + 40), *(void *)(a1 + 72), 1, *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64));
}

void *sub_1001953B8(uint64_t a1)
{
  return sub_100194554(*(void *)(a1 + 40), *(void *)(a1 + 72), 2, *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64));
}

void sub_1001953D0(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = *(void **)(a1 + 8);
    id v4 = a2;
    uint64_t v5 = [v4 applicationIdentifier];
    id v6 = [v4 keyIdentifier];

    id v8 = [v3 passUniqueIdentifierWithPaymentApplicationIdentifier:v5 subcredentialIdentifier:v6];

    if (v8)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      sub_100205C84((uint64_t)WeakRetained, v8, 1, &stru_10073B960);
    }
  }
}

void sub_10019549C(id a1, BOOL a2)
{
  if (!a2)
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10051602C();
    }
  }
}

void sub_1001954EC(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = *(void **)(a1 + 8);
    id v4 = a2;
    uint64_t v5 = [v4 applicationIdentifier];
    id v6 = [v4 keyIdentifier];

    id v8 = [v3 passUniqueIdentifierWithPaymentApplicationIdentifier:v5 subcredentialIdentifier:v6];

    if (v8)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      sub_100205C84((uint64_t)WeakRetained, v8, 6, &stru_10073B980);
    }
  }
}

void sub_1001955B8(id a1, BOOL a2)
{
  if (!a2)
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10051602C();
    }
  }
}

void sub_1001956DC(uint64_t a1)
{
}

void sub_1001956E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_83;
  }
  switch((unint64_t)[v3 type])
  {
    case 0uLL:
      id v5 = v4;
      unint64_t v6 = (unint64_t)[v5 technologyType];
      uint64_t v7 = v6;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      uint64_t v84 = sub_10002091C;
      id v85 = sub_100020F80;
      id v86 = 0;
      uint64_t v77 = 0;
      id v78 = &v77;
      uint64_t v79 = 0x3032000000;
      id v80 = sub_10002091C;
      id v81 = sub_100020F80;
      id v82 = 0;
      v75[0] = 0;
      v75[1] = v75;
      v75[2] = 0x3032000000;
      v75[3] = sub_10002091C;
      v75[4] = sub_100020F80;
      id v76 = 0;
      if (v6 <= 7 && ((1 << v6) & 0xEA) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
        id v8 = [*(id *)(a1 + 96) copy];
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
        v74[0] = _NSConcreteStackBlock;
        v74[1] = 3221225472;
        v74[2] = sub_1001965D8;
        v74[3] = &unk_10073B9D0;
        v74[4] = buf;
        v74[5] = &v77;
        v74[7] = v7;
        v74[6] = v75;
        [v8 enumerateKeysAndObjectsUsingBlock:v74];
      }
      v73[0] = _NSConcreteStackBlock;
      v73[1] = 3221225472;
      v73[2] = sub_100196810;
      v73[3] = &unk_10073B9F8;
      v73[4] = buf;
      v73[5] = &v77;
      v73[6] = v75;
      sub_10018CD48(a1, v7, v73);
      _Block_object_dispose(v75, 8);

      _Block_object_dispose(&v77, 8);
      _Block_object_dispose(buf, 8);

      goto LABEL_83;
    case 1uLL:
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 3221225472;
      v69[2] = sub_100196914;
      v69[3] = &unk_10073BA20;
      v69[4] = a1;
      if ((sub_100194AD8(a1, v69) & 1) == 0)
      {
        long long v9 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100516094();
        }

        long long v10 = PDUtilityQueue();
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100196A80;
        block[3] = &unk_10072E1E8;
        void block[4] = a1;
        dispatch_async(v10, block);
      }
      goto LABEL_83;
    case 2uLL:
      id v11 = v4;
      long long v12 = [v11 applicationIdentifier];
      long long v13 = [v11 keyIdentifier];
      if (v12)
      {
        unsigned __int8 v14 = sub_100193264(a1, v12, v13);
        unsigned __int8 v15 = [v14 passUniqueIdentifier];
      }
      else
      {
        unsigned __int8 v15 = 0;
      }
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472;
      v63[2] = sub_100196A94;
      v63[3] = &unk_10073BA48;
      id v64 = v12;
      id v65 = v13;
      id v66 = v15;
      uint64_t v67 = a1;
      id v28 = v12;
      id v29 = v13;
      id v30 = v15;
      if ((sub_100194AD8(a1, v63) & 1) == 0)
      {
        id v31 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_1005160C8();
        }
      }
      goto LABEL_83;
    case 3uLL:
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      uint64_t v84 = sub_10002091C;
      id v85 = sub_100020F80;
      id v86 = 0;
      uint64_t v77 = 0;
      id v78 = &v77;
      uint64_t v79 = 0x3032000000;
      id v80 = sub_10002091C;
      id v81 = sub_100020F80;
      id v82 = 0;
      v62[0] = _NSConcreteStackBlock;
      v62[1] = 3221225472;
      v62[2] = sub_100196BE8;
      v62[3] = &unk_10073BA70;
      v62[4] = buf;
      v62[5] = &v77;
      if (sub_100194AD8(a1, v62))
      {
        if (*(void *)(*(void *)&buf[8] + 40))
        {
          BOOL v16 = PDUtilityQueue();
          v61[0] = _NSConcreteStackBlock;
          v61[1] = 3221225472;
          v61[2] = sub_100196C70;
          v61[3] = &unk_10073BA98;
          v61[4] = a1;
          v61[5] = buf;
          v61[6] = &v77;
          dispatch_async(v16, v61);
        }
      }
      else
      {
        id v27 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          sub_1005160FC();
        }
      }
      _Block_object_dispose(&v77, 8);

      _Block_object_dispose(buf, 8);
      goto LABEL_83;
    case 4uLL:
      id v17 = v4;
      switch((unint64_t)[v17 status])
      {
        case 0uLL:
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000;
          uint64_t v84 = sub_10002091C;
          id v85 = sub_100020F80;
          id v86 = 0;
          uint64_t v77 = 0;
          id v78 = &v77;
          uint64_t v79 = 0x3032000000;
          id v80 = sub_10002091C;
          id v81 = sub_100020F80;
          id v82 = 0;
          v60[0] = _NSConcreteStackBlock;
          v60[1] = 3221225472;
          v60[2] = sub_1001972C8;
          v60[3] = &unk_10073BA70;
          v60[4] = buf;
          v60[5] = &v77;
          if (sub_100194AD8(a1, v60))
          {
            if (*(void *)(*(void *)&buf[8] + 40))
            {
              uint64_t v18 = PDUtilityQueue();
              v59[0] = _NSConcreteStackBlock;
              v59[1] = 3221225472;
              v59[2] = sub_100197350;
              v59[3] = &unk_10073BA98;
              v59[4] = a1;
              v59[5] = buf;
              v59[6] = &v77;
              dispatch_async(v18, v59);
            }
          }
          else
          {
            id v39 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
              sub_100516130();
            }
          }
          _Block_object_dispose(&v77, 8);

          _Block_object_dispose(buf, 8);
          break;
        case 1uLL:
          if ((sub_100194AD8(a1, &stru_10073BAB8) & 1) == 0)
          {
            unsigned int v38 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              sub_100516164();
            }
            goto LABEL_61;
          }
          id v32 = PDUtilityQueue();
          v58[0] = _NSConcreteStackBlock;
          v58[1] = 3221225472;
          v58[2] = sub_10019737C;
          v58[3] = &unk_10072E1E8;
          v58[4] = a1;
          dispatch_async(v32, v58);

          break;
        case 2uLL:
          if (sub_100194AD8(a1, &stru_10073BAD8))
          {
            id v33 = PDUtilityQueue();
            v57[0] = _NSConcreteStackBlock;
            v57[1] = 3221225472;
            v57[2] = sub_10019739C;
            v57[3] = &unk_10072E1E8;
            v57[4] = a1;
            dispatch_async(v33, v57);
          }
          else
          {
            unsigned int v38 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
              sub_100516198();
            }
LABEL_61:
          }
          break;
        case 3uLL:
          id v34 = sub_100193C28((os_unfair_lock_s *)a1);
          id v35 = v34;
          if (v34 && ([(os_unfair_lock_s *)v34 isProcessing] & 1) != 0)
          {
            id v36 = [(os_unfair_lock_s *)v35 TCIs];
            if ([v36 count])
            {
              id v37 = PDDefaultQueue();
              v54[0] = _NSConcreteStackBlock;
              v54[1] = 3221225472;
              v54[2] = sub_1001973B0;
              v54[3] = &unk_10072E238;
              v54[4] = a1;
              long long v55 = v36;
              id v56 = v17;
              id v36 = v36;
              dispatch_async(v37, v54);
            }
            else
            {
              uint64_t v47 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
                sub_100516200();
              }
            }
          }
          else
          {
            id v36 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
              sub_1005161CC();
            }
          }

          break;
        default:
          break;
      }

      goto LABEL_83;
    case 5uLL:
      id v19 = v4;
      id v20 = [v19 applicationIdentifier];
      id v21 = [v19 keyIdentifier];
      if (!v20)
      {
        id v23 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_100516234();
        }
        goto LABEL_71;
      }
      long long v22 = [*(id *)(a1 + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:v20 subcredentialIdentifier:v21];
      id v23 = PKLogFacilityTypeGetObject();
      BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (!v22)
      {
        if (v21)
        {
          if (v24) {
            sub_1005162D0((uint64_t)v20);
          }
        }
        else if (v24)
        {
          sub_100516268();
        }
LABEL_71:
        long long v22 = 0;
        goto LABEL_72;
      }
      if (v21)
      {
        if (v24)
        {
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v20;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v21;
          *(_WORD *)&buf[22] = 2112;
          uint64_t v84 = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "PKExpressPassManager: terminal requested non-express key (%@:%@) for pass %@.", buf, 0x20u);
        }
      }
      else if (v24)
      {
        sub_100516340((uint64_t)v20);
      }
LABEL_72:

      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      uint64_t v84 = sub_10002091C;
      id v85 = sub_100020F80;
      id v86 = 0;
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_100197414;
      v49[3] = &unk_10073BB00;
      id v40 = v20;
      id v50 = v40;
      id v41 = v21;
      id v51 = v41;
      uint64_t v42 = v22;
      uint64_t v52 = v42;
      uint64_t v53 = buf;
      sub_100194310(a1, v49);
      unsigned int v43 = *(void **)(*(void *)&buf[8] + 40);
      if (v43)
      {
        unsigned __int8 v44 = [v43 passUniqueIdentifier];

        if (*(void *)(*(void *)&buf[8] + 40) && v44)
        {
          id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
          sub_100205C84((uint64_t)WeakRetained, v44, 1, &stru_10073BB20);

          id v46 = PDUtilityQueue();
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472;
          v48[2] = sub_1001977A4;
          v48[3] = &unk_10073BB48;
          v48[4] = a1;
          v48[5] = buf;
          dispatch_async(v46, v48);
        }
      }
      else
      {
        unsigned __int8 v44 = v42;
      }

      _Block_object_dispose(buf, 8);
LABEL_83:

      return;
    case 6uLL:
      v71[0] = _NSConcreteStackBlock;
      v71[1] = 3221225472;
      v71[2] = sub_100196894;
      v71[3] = &unk_10073BA20;
      id v72 = v4;
      if ((sub_100194AD8(a1, v71) & 1) == 0)
      {
        unsigned int v25 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_100516060();
        }

        uint64_t v26 = PDUtilityQueue();
        v70[0] = _NSConcreteStackBlock;
        v70[1] = 3221225472;
        v70[2] = sub_100196900;
        v70[3] = &unk_10072E1E8;
        v70[4] = a1;
        dispatch_async(v26, v70);
      }
      goto LABEL_83;
    case 7uLL:
      sub_1001953D0(a1, v4);
      goto LABEL_83;
    case 8uLL:
      sub_1001954EC(a1, v4);
      goto LABEL_83;
    default:
      goto LABEL_83;
  }
}

void sub_100196554(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001965D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 passInformation];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100196698;
  v8[3] = &unk_10073B9A8;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = v6;
  id v9 = v4;
  id v7 = v4;
  [v5 enumerateCredentialsWithHandler:v8];
}

void sub_100196698(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v8 = a3;
  id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v17;
    while (2)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        if (objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * (void)v12), "technologyType", (void)v16) == *(id *)(a1 + 64))
        {

          if (+[PKExpressPassInformation extractApplicationIdentifier:*(void *)(*(void *)(a1 + 40) + 8) + 40 subcredentialIdentifier:*(void *)(*(void *)(a1 + 48) + 8) + 40 fromIdentifiers:v7])
          {
            uint64_t v13 = [*(id *)(a1 + 32) passUniqueIdentifier];
            uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
            unsigned __int8 v15 = *(void **)(v14 + 40);
            *(void *)(v14 + 40) = v13;
          }
          *a4 = 1;
          goto LABEL_13;
        }
        uint64_t v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }

LABEL_13:
}

uint64_t sub_100196810(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(*(void *)(a1[4] + 8) + 40) && ([v3 isAssociated] & 1) == 0)
  {
    [v4 associateWithApplicationIdentifier:*(void *)(*(void *)(a1[4] + 8) + 40) keyIdentifier:*(void *)(*(void *)(a1[5] + 8) + 40) terminalReaderIdentifier:0 passUniqueIdentifier:*(void *)(*(void *)(a1[6] + 8) + 40)];
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t sub_100196894(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) TCIs];
  uint64_t v5 = [v4 set];

  if (v5) {
    [v3 associateWithTCIs:v5];
  }

  return 0;
}

void sub_100196900(uint64_t a1)
{
}

uint64_t sub_100196914(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 passUniqueIdentifier];

  if (v4)
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: exited express.", buf, 2u);
    }
  }
  else
  {
    unsigned int v6 = [v3 isAssociated];
    id v7 = PKLogFacilityTypeGetObject();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v6)
    {
      if (v8) {
        sub_1005163B0();
      }
    }
    else if (v8)
    {
      sub_1005163E4();
    }

    id v9 = PDUtilityQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100196A6C;
    block[3] = &unk_10072E1E8;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v9, block);
  }
  [v3 resolve];

  return 1;
}

void sub_100196A6C(uint64_t a1)
{
}

void sub_100196A80(uint64_t a1)
{
}

uint64_t sub_100196A94(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (uint64_t)[v3 receiveEvents:1];
  if (a1[4])
  {
    if ([v3 isAssociated])
    {
      uint64_t v5 = [v3 applicationIdentifier];
      if ((PKEqualObjects() & 1) == 0)
      {
        unsigned int v6 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          sub_100516418();
        }

        id v7 = PDUtilityQueue();
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100196BD4;
        block[3] = &unk_10072E1E8;
        void block[4] = a1[7];
        dispatch_async(v7, block);
      }
    }
    else
    {
      [v3 associateWithApplicationIdentifier:a1[4] keyIdentifier:a1[5] terminalReaderIdentifier:0 passUniqueIdentifier:a1[6]];
      uint64_t v4 = 1;
    }
  }

  return v4;
}

void sub_100196BD4(uint64_t a1)
{
}

id sub_100196BE8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 receiveEvents:2];
  if (v4)
  {
    uint64_t v5 = [v3 passUniqueIdentifier];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = [v3 applicationIdentifier];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  return v4;
}

void sub_100196C70(uint64_t *a1)
{
}

void sub_100196C90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  if (a1)
  {
    if (!v5) {
      __break(1u);
    }
    uint64_t v8 = [*(id *)(a1 + 8) passWithUniqueIdentifier:v5];
    if (!v8)
    {
LABEL_49:

      goto LABEL_50;
    }
    __int16 v54 = v7;
    id v9 = objc_alloc_init((Class)NSMutableDictionary);
    [v9 setObject:PKAnalyticsReportEventTypeExpressTransaction forKey:PKAnalyticsReportEventKey];
    [v9 setObject:PKAnalyticsReportExpressTransactionPageTag forKey:PKAnalyticsReportPageTagKey];
    id v10 = v9;
    id v11 = v8;
    uint64_t v12 = v11;
    if (!v10)
    {
LABEL_29:

      id v35 = [v12 secureElementPass];
      id v36 = (char *)[v35 cardType];

      if ((unint64_t)(v36 - 1) <= 1)
      {
        uint64_t v37 = [v12 organizationName];
        unsigned int v38 = (void *)v37;
        if (v37) {
          uint64_t v39 = v37;
        }
        else {
          uint64_t v39 = PKAnalyticsReportUnknownValue;
        }
        [v10 setObject:v39 forKey:PKAnalyticsReportIssuerNameKey];
      }
      if ([(__CFString *)v6 length])
      {
        uint64_t v52 = v8;
        id v40 = [v12 paymentPass];
        uint64_t v53 = v6;
        id v41 = [v40 paymentApplicationForAID:v6];

        [v41 paymentNetworkIdentifier];
        uint64_t v42 = PKPaymentNetworkNameForPaymentCredentialType();
        [v10 safelySetObject:v42 forKey:PKAnalyticsReportPaymentNetworkNameKey];
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        id v43 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", v41, 0);
        id v44 = [v43 countByEnumeratingWithState:&v55 objects:v59 count:16];
        if (v44)
        {
          id v45 = v44;
          id v46 = 0;
          uint64_t v47 = *(void *)v56;
          while (2)
          {
            for (uint64_t i = 0; i != v45; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v56 != v47) {
                objc_enumerationMutation(v43);
              }
              id v49 = *(void **)(*((void *)&v55 + 1) + 8 * i);
              if (v46 && v46 != [*(id *)(*((void *)&v55 + 1) + 8 * i) paymentType])
              {

                id v50 = @"multiple";
                goto LABEL_47;
              }
              id v46 = [v49 paymentType];
            }
            id v45 = [v43 countByEnumeratingWithState:&v55 objects:v59 count:16];
            if (v45) {
              continue;
            }
            break;
          }
        }

        PKPaymentMethodTypeToString();
        id v50 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_47:

        [v10 safelySetObject:v50 forKey:PKAnalyticsReportPaymentMethodTypeKey];
        uint64_t v8 = v52;
        uint64_t v6 = v53;
      }
      uint64_t v51 = PKAnalyticsSubjectExpressPresentment;
      +[PKAnalyticsReporter beginSubjectReporting:PKAnalyticsSubjectExpressPresentment];
      +[PKAnalyticsReporter subject:v51 sendEvent:v10];
      +[PKAnalyticsReporter endSubjectReporting:v51];

      id v7 = v54;
      goto LABEL_49;
    }
    id v13 = [v11 passType];
    if ((unint64_t)v13 + 1 >= 3) {
      uint64_t v14 = (__CFString *)PKAnalyticsReportUnknownValue;
    }
    else {
      uint64_t v14 = off_10073BE20[(void)v13 + 1];
    }
    [v10 setObject:v14 forKeyedSubscript:PKAnalyticsReportPassTypeKey];

    unint64_t v15 = (unint64_t)[v12 style];
    if (v15 < 0xD && ((0x13FFu >> v15) & 1) != 0) {
      long long v16 = off_10073BE38[v15];
    }
    else {
      long long v16 = (__CFString *)PKAnalyticsReportUnknownValue;
    }
    long long v17 = v6;
    [v10 setObject:v16 forKeyedSubscript:PKAnalyticsReportPassStyleKey];

    long long v18 = [v12 nfcPayload];
    long long v19 = PKAnalyticsReportSwitchToggleResultValue();
    [v10 setObject:v19 forKeyedSubscript:PKAnalyticsReportPassHasNFCKey];

    id v20 = v12;
    if ([v20 passType] == (id)1)
    {
      id v21 = [v20 secureElementPass];
      id v22 = [v21 cardType];
      if ((unint64_t)v22 <= 4) {
        uint64_t v6 = (__CFString *)*(id *)*(&off_10073BEA0 + (void)v22);
      }
    }
    else
    {
      uint64_t v6 = @"other";
    }

    [v10 setObject:v6 forKeyedSubscript:PKAnalyticsReportPassProductTypeKey];
    id v23 = [v20 secureElementPass];
    if ([v23 isIdentityPass])
    {
      BOOL v24 = (char *)[v23 identityType];
      if ((unint64_t)(v24 - 1) < 3)
      {
        id v25 = *(&off_10073BEC8 + (void)(v24 - 1));
        goto LABEL_24;
      }
    }
    else if ([v23 isAccessPass])
    {
      id v26 = [v23 accessType];
      if ((unint64_t)v26 < 7)
      {
        id v25 = *(&off_10073BEE0 + (void)v26);
        goto LABEL_24;
      }
    }
    id v25 = PKAnalyticsReportUnknownValue;
LABEL_24:

    [v10 setObject:v25 forKeyedSubscript:PKAnalyticsReportPassProductSubtypeKey];
    id v27 = [v20 secureElementPass];
    id v28 = [v27 devicePaymentApplications];
    [v28 count];

    id v29 = PKAnalyticsReportSwitchToggleResultValue();

    [v10 setObject:v29 forKeyedSubscript:PKAnalyticsReportCoBadgeEnableKey];
    id v30 = [v20 secureElementPass];
    id v31 = PKAnalyticsReportUnknownValue;
    id v32 = [v30 organizationName];
    if ([v32 length])
    {
      unint64_t v33 = (unint64_t)[v30 cardType];
      if (v33 <= 4 && ((1 << v33) & 0x16) != 0)
      {
        id v34 = v32;

        id v31 = v34;
      }
    }

    [v10 setObject:v31 forKeyedSubscript:PKAnalyticsReportIssuerNameKey];
    uint64_t v6 = v17;
    goto LABEL_29;
  }
LABEL_50:
}

id sub_1001972C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 receiveEvents:4];
  if (v4)
  {
    uint64_t v5 = [v3 passUniqueIdentifier];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    uint64_t v8 = [v3 applicationIdentifier];
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  return v4;
}

void sub_100197350(uint64_t *a1)
{
}

BOOL sub_100197370(id a1, PKExpressTransactionState *a2)
{
  return [(PKExpressTransactionState *)a2 receiveEvents:256];
}

void sub_10019737C(uint64_t a1)
{
}

BOOL sub_100197390(id a1, PKExpressTransactionState *a2)
{
  return [(PKExpressTransactionState *)a2 receiveEvents:512];
}

void sub_10019739C(uint64_t a1)
{
}

void sub_1001973B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 208);
  id v3 = [*(id *)(a1 + 48) brandCode];
  objc_msgSend(v2, "initiateNativePairingIfPossibleFromTCIs:brandCode:", v1, objc_msgSend(v3, "integerValue"));
}

uint64_t sub_100197414(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = (void **)(a1 + 4);
  uint64_t v4 = a1[4];
  unsigned __int8 v6 = [v3 isAssociated];
  if (v4)
  {
    if (v6)
    {
      id v7 = [v3 applicationIdentifier];
      uint64_t v8 = [v3 keyIdentifier];
      uint64_t v9 = *v5;
      id v10 = v7;
      id v11 = v9;
      if (v10 == v11)
      {
      }
      else
      {
        uint64_t v12 = v11;
        if (!v10 || !v11)
        {

          goto LABEL_18;
        }
        unsigned __int8 v13 = [v10 isEqualToString:v11];

        if ((v13 & 1) == 0)
        {
LABEL_18:
          long long v19 = PKLogFacilityTypeGetObject();
          BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
          if (!v8)
          {
            if (v20) {
              sub_100516564();
            }
            goto LABEL_36;
          }
          if (v20)
          {
            id v21 = *v5;
            int v29 = 138543874;
            id v30 = v10;
            __int16 v31 = 2114;
            id v32 = v8;
            __int16 v33 = 2114;
            id v34 = v21;
            id v22 = "PKExpressPassManager: WARNING EXPRESS KEY (%{public}@:%{public}@) IN USE. DOES NOT MATCH REQUESTED APP"
                  "LET %{public}@! Please file a radar.";
LABEL_31:
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v29, 0x20u);
            goto LABEL_36;
          }
          goto LABEL_36;
        }
      }
      uint64_t v14 = (void *)a1[5];
      id v15 = v8;
      id v16 = v14;
      if (v15 == v16)
      {
      }
      else
      {
        long long v17 = v16;
        if (!v15 || !v16)
        {

          if (!v15)
          {
            long long v19 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
              sub_1005164F8();
            }
            goto LABEL_36;
          }
LABEL_28:
          id v26 = (void *)a1[5];
          long long v19 = PKLogFacilityTypeGetObject();
          BOOL v27 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
          if (!v26)
          {
            if (v27) {
              sub_100516484();
            }
            goto LABEL_36;
          }
          if (v27)
          {
            int v29 = 138543874;
            id v30 = v10;
            __int16 v31 = 2114;
            id v32 = v15;
            __int16 v33 = 2114;
            id v34 = v26;
            id v22 = "PKExpressPassManager: WARNING EXPRESS KEY (%{public}@:%{public}@) IN USE. DOES NOT MATCH REQUESTED KEY"
                  " %{public}@! Please file a radar.";
            goto LABEL_31;
          }
LABEL_36:

          uint64_t v4 = 0;
          goto LABEL_37;
        }
        unsigned __int8 v18 = [v15 isEqualToString:v16];

        if ((v18 & 1) == 0) {
          goto LABEL_28;
        }
      }

      uint64_t v4 = 0;
    }
    else
    {
      [v3 associateWithApplicationIdentifier:a1[4] keyIdentifier:a1[5] terminalReaderIdentifier:0 passUniqueIdentifier:a1[6]];
      uint64_t v4 = 1;
    }
  }
  else if (v6)
  {
    goto LABEL_37;
  }
  [v3 receiveEvents:1024];
  if ([v3 isIgnorable])
  {
    id v23 = [v3 copy];
    uint64_t v24 = *(void *)(a1[7] + 8);
    id v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;
  }
LABEL_37:

  return v4;
}

void sub_100197718(id a1, BOOL a2)
{
  if (!a2)
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: remote alert did not present - fall back to foreground app.", v3, 2u);
    }

    notify_post((const char *)[PKNotifyEventOutstandingExpressTransactionReady cStringUsingEncoding:4]);
  }
}

void sub_1001977A4(uint64_t a1)
{
}

void sub_1001977B8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_1005165D0();
    }
  }
}

void sub_1001979D4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:PKDarwinNotificationEventLostModeStateChanged])
  {
    id v2 = *(unsigned char **)(a1 + 40);
    sub_10018BA50(v2);
  }
  else
  {
    unsigned int v3 = [*(id *)(a1 + 32) isEqualToString:@"com.apple.BiometricKit.enrollmentChanged"];
    uint64_t v4 = *(void *)(a1 + 40);
    if (v3)
    {
      sub_10018BB40(v4, 1);
    }
    else
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 201));
      if (v5)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        sub_1001936C8(v8, 0, 1);
      }
      else
      {
        int v6 = [*(id *)(a1 + 32) isEqualToString:@"com.apple.springboard.lock-with-force-biolockout"];
        if (v6) {
          PDClearLastUnlockedTime();
        }
        id v7 = *(unsigned char **)(a1 + 40);
        sub_1001937E0(v7, v6);
      }
    }
  }
}

void sub_100197B80(uint64_t a1)
{
}

void sub_100197C54(uint64_t a1)
{
}

void sub_100197C5C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 208), a2);
  }
}

id sub_100197D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 passUniqueIdentifier];
  if (*(unsigned char *)(a1 + 40))
  {
    id v5 = [objc_alloc((Class)PKExpressPassConfiguration) initWithPassInformation:v3 isNFCExpressEnabled:1 isUWBExpressEnabled:1];
  }
  else
  {
    uint64_t v6 = [*(id *)(a1 + 32) paymentApplicationsForPassUniqueIdentifier:v4];
    id v5 = [objc_alloc((Class)PKExpressPassConfiguration) initWithPassInformation:v3 forPaymentApplications:v6];

    id v3 = (id)v6;
  }

  return v5;
}

id sub_100197E10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

void sub_100197E18(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v13 = a2;
  id v7 = a3;
  uint64_t v8 = [PDSECredentialEntry alloc];
  uint64_t v9 = *(void **)(a1 + 32);
  char v10 = [*(id *)(a1 + 40) isUserChoice];
  id v11 = objc_msgSend(v7, "pk_arrayCopy");

  uint64_t v12 = sub_100115780((id *)&v8->super.isa, v9, v10, v11);
  if (v12)
  {
    sub_100116044((uint64_t)v12, (int)[*(id *)(a1 + 48) isNFCExpressEnabled]);
    sub_1001160F0((uint64_t)v12, (int)[*(id *)(a1 + 48) isUWBExpressEnabled]);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = sub_100197F48(*(void **)(a1 + 56), v13, v12, 3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
    *a4 = 1;
  }
}

uint64_t sub_100197F48(void *a1, void *a2, void *a3, char a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!v7) {
    goto LABEL_11;
  }
  id v10 = v7;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v11 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (!v11) {
    goto LABEL_10;
  }
  id v12 = v11;
  uint64_t v13 = *(void *)v19;
  do
  {
    uint64_t v14 = 0;
    id v15 = v10;
    do
    {
      if (*(void *)v19 != v13) {
        objc_enumerationMutation(v8);
      }
      sub_100117394((uint64_t)v15, *(void **)(*((void *)&v18 + 1) + 8 * (void)v14), 1);
      id v10 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v14 = (char *)v14 + 1;
      id v15 = v10;
    }
    while (v12 != v14);
    id v12 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  }
  while (v12);
  if (v10)
  {
LABEL_10:
    uint64_t v16 = sub_1001172A4((uint64_t)v10, v9, a4);
  }
  else
  {
LABEL_11:
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_1001980B8(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  if (!sub_10018F94C(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3))
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10051663C();
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = 0;

    *a4 = 1;
  }
}

void sub_100198158(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = sub_100011FD0((uint64_t)v5);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (!v4)
  {
    id v4 = objc_alloc_init((Class)NSMutableArray);
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
  [v4 addObject:v5];
}

void sub_1001981FC(uint64_t a1, uint64_t a2, char a3)
{
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10019828C;
  v5[3] = &unk_10073BC08;
  char v6 = a3;
  [v4 enumerateObjectsUsingBlock:v5];
}

void sub_10019828C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10019829C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, a3 != 0);
}

id sub_1001982B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:v3];
  if (!v4)
  {
    id v4 = sub_10011662C([PDSECredentialPass alloc], v3);
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
  }
  id v5 = v4;

  return v5;
}

void sub_100198338(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
  id v9 = a4;
  id v10 = a2;
  id v12 = (id)v8(v7, a3);
  id v11 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  sub_1001166C0(v12, v10, v11);
}

void sub_1001983F4(uint64_t a1, void *a2, void *a3, void *a4, unsigned char *a5)
{
  id v12 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v12) {
    char v11 = sub_100117140((uint64_t)v12) ^ 1;
  }
  else {
    char v11 = 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v11;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *a5 = 1;
  }
}

void sub_1001984A0(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v19 = 0;
  id v8 = [a1[4] passWithUniqueIdentifier:v5];
  id v9 = v8;
  if (v8)
  {
    if ([v8 passType] == (id)1) {
      id v10 = v9;
    }
    else {
      id v10 = 0;
    }
  }
  else
  {
    id v10 = 0;
  }
  id v11 = v10;
  id v12 = [v6 passInformation];
  int v13 = sub_1001986C0(v11, v12, &v19);

  if ((v13 & 1) == 0)
  {

    goto LABEL_12;
  }
  uint64_t v14 = [v6 passInformation];
  int v15 = sub_100198844(v14, a1[5], &v19);

  if (!v15)
  {
LABEL_12:
    int v16 = 0;
    goto LABEL_13;
  }
  [a1[6] setObject:v6 forKeyedSubscript:v5];
  if (v19) {
    [a1[7] addObject:v5];
  }
  int v16 = 1;
LABEL_13:
  long long v17 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    long long v18 = "removing";
    *(_DWORD *)long long buf = 136316418;
    if (v16) {
      long long v18 = "adding";
    }
    long long v21 = v18;
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 1024;
    BOOL v25 = v11 != 0;
    __int16 v26 = 1024;
    int v27 = v13;
    __int16 v28 = 1024;
    int v29 = v16;
    __int16 v30 = 1024;
    BOOL v31 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Updating express state %s pass %@ (in database: %d, express capable: %d, can be express %d, should suspend: %d).", buf, 0x2Eu);
  }
}

uint64_t sub_1001986C0(void *a1, void *a2, BOOL *a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v20 = 0;
  long long v21 = &v20;
  uint64_t v22 = 0x2020000000;
  BOOL v23 = v5 != 0;
  uint64_t v16 = 0;
  long long v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  if (v5)
  {
    [v5 uniqueID];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001989C4;
    v11[3] = &unk_10073BD20;
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    id v12 = v7;
    uint64_t v14 = &v20;
    id v13 = v5;
    int v15 = &v16;
    [v6 enumerateCredentialsWithHandler:v11];
  }
  if (a3)
  {
    BOOL v8 = *a3 || *((unsigned char *)v17 + 24) != 0;
    *a3 = v8;
  }
  uint64_t v9 = *((unsigned __int8 *)v21 + 24);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);

  return v9;
}

void sub_100198820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100198844(void *a1, void *a2, BOOL *a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v22 = 0;
  BOOL v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 1;
  uint64_t v18 = 0;
  char v19 = &v18;
  uint64_t v20 = 0x2020000000;
  char v21 = 0;
  id v7 = [v5 passUniqueIdentifier];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10019908C;
  v13[3] = &unk_10073BD48;
  id v8 = v6;
  id v14 = v8;
  id v9 = v7;
  id v15 = v9;
  uint64_t v16 = &v18;
  long long v17 = &v22;
  [v5 enumerateCredentialsWithHandler:v13];
  if (a3)
  {
    BOOL v10 = *a3 || *((unsigned char *)v19 + 24) != 0;
    *a3 = v10;
  }
  uint64_t v11 = *((unsigned __int8 *)v23 + 24);

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);

  return v11;
}

void sub_1001989A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001989C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v63 = 0;
  id v64 = 0;
  id v49 = v5;
  if ((+[PKExpressPassInformation extractApplicationIdentifier:&v64 subcredentialIdentifier:&v63 fromIdentifiers:v5] & 1) == 0)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100516710();
    }

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    id v23 = 0;
    goto LABEL_31;
  }
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id v8 = [*(id *)(a1 + 40) devicePaymentApplications];
  id v9 = [v8 countByEnumeratingWithState:&v59 objects:v75 count:16];
  if (!v9)
  {
LABEL_24:

    goto LABEL_28;
  }
  id v10 = v9;
  uint64_t v11 = *(void *)v60;
  uint64_t v44 = *(void *)v60;
  id v45 = v6;
  id v48 = v8;
LABEL_8:
  uint64_t v12 = 0;
  id v46 = v10;
  while (1)
  {
    if (*(void *)v60 != v11) {
      objc_enumerationMutation(v8);
    }
    id v13 = *(void **)(*((void *)&v59 + 1) + 8 * v12);
    id v14 = [v13 applicationIdentifier];
    int v15 = PKEqualObjects();

    if (v15) {
      break;
    }
LABEL_22:
    if ((id)++v12 == v10)
    {
      id v10 = [v8 countByEnumeratingWithState:&v59 objects:v75 count:16];
      id v6 = v45;
      if (v10) {
        goto LABEL_8;
      }
      goto LABEL_24;
    }
  }
  if (v63)
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v16 = [v13 subcredentials];
    id v17 = [v16 countByEnumeratingWithState:&v55 objects:v74 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v56;
      while (2)
      {
        for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v56 != v19) {
            objc_enumerationMutation(v16);
          }
          char v21 = [*(id *)(*((void *)&v55 + 1) + 8 * i) identifier];
          char v22 = PKEqualObjects();

          if (v22)
          {

            id v8 = v48;
            goto LABEL_27;
          }
        }
        id v18 = [v16 countByEnumeratingWithState:&v55 objects:v74 count:16];
        if (v18) {
          continue;
        }
        break;
      }
    }

    id v10 = v46;
    id v8 = v48;
    uint64_t v11 = v44;
    goto LABEL_22;
  }
LABEL_27:
  id v23 = v13;

  id v6 = v45;
  if (v23) {
    goto LABEL_31;
  }
LABEL_28:
  uint64_t v24 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    sub_1005166A4();
  }

  id v23 = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
LABEL_31:
  id v25 = [v23 state];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v23 supportsExpress];
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      __int16 v26 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v42 = *(void *)(a1 + 32);
        unsigned int v43 = [v23 supportsOptionalAuthentication];
        int buf = 138413058;
        uint64_t v67 = v42;
        __int16 v68 = 2112;
        uint64_t v69 = v49;
        __int16 v70 = 2050;
        id v71 = v25;
        __int16 v72 = 1026;
        unsigned int v73 = v43;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "PKExpressPassManager: removing invalid express pass (%@: %@) from target state because the application is not supported (state %{public}ld, optional authentication %{public}d).", (uint8_t *)&buf, 0x26u);
      }
    }
  }
  uint64_t v47 = v23;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v27 = v6;
  id v28 = [v27 countByEnumeratingWithState:&v51 objects:v65 count:16];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = *(void *)v52;
    do
    {
      for (j = 0; j != v29; j = (char *)j + 1)
      {
        if (*(void *)v52 != v30) {
          objc_enumerationMutation(v27);
        }
        id v32 = *(void **)(*((void *)&v51 + 1) + 8 * (void)j);
        char v50 = 0;
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:byHardware:](PKSecureElement, "supportsExpressForAutomaticSelectionTechnologyType:byHardware:", [v32 technologyType], &v50);
          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
            goto LABEL_46;
          }
          __int16 v33 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            uint64_t v41 = *(void *)(a1 + 32);
            int buf = 138412546;
            uint64_t v67 = v41;
            __int16 v68 = 2112;
            uint64_t v69 = v49;
            _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "PKExpressPassManager: removing invalid express pass (%@: %@) from target state due to missing support.", (uint8_t *)&buf, 0x16u);
          }

          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
          {
LABEL_46:
            if (v50)
            {
              if (PKPaymentApplicationStateIsPersonalized())
              {
                id v34 = [*(id *)(a1 + 40) effectiveContactlessPaymentApplicationState];
                if (PKPaymentApplicationStateIsPersonalized()) {
                  goto LABEL_57;
                }
                id v35 = PKLogFacilityTypeGetObject();
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v36 = *(void *)(a1 + 32);
                  int buf = 138412802;
                  uint64_t v67 = v36;
                  __int16 v68 = 2112;
                  uint64_t v69 = v49;
                  __int16 v70 = 2050;
                  id v71 = v34;
                  uint64_t v37 = v35;
                  unsigned int v38 = "PKExpressPassManager: suspending express pass (%@: %@) due to contactless application state %{public}ld.";
                  goto LABEL_55;
                }
LABEL_56:

                *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
                goto LABEL_57;
              }
              id v35 = PKLogFacilityTypeGetObject();
              if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_56;
              }
              uint64_t v40 = *(void *)(a1 + 32);
              int buf = 138412802;
              uint64_t v67 = v40;
              __int16 v68 = 2112;
              uint64_t v69 = v49;
              __int16 v70 = 2050;
              id v71 = v25;
              uint64_t v37 = v35;
              unsigned int v38 = "PKExpressPassManager: suspending express pass (%@: %@) due to application state %{public}ld.";
            }
            else
            {
              id v35 = PKLogFacilityTypeGetObject();
              if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_56;
              }
              uint64_t v39 = *(void *)(a1 + 32);
              int buf = 138412802;
              uint64_t v67 = v39;
              __int16 v68 = 2112;
              uint64_t v69 = v49;
              __int16 v70 = 2050;
              id v71 = v25;
              uint64_t v37 = v35;
              unsigned int v38 = "PKExpressPassManager: suspending express pass (%@: %@) due to lack of hardware support %{public}ld.";
            }
LABEL_55:
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v38, (uint8_t *)&buf, 0x20u);
            goto LABEL_56;
          }
        }
LABEL_57:
        if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
          goto LABEL_60;
        }
      }
      id v29 = [v27 countByEnumeratingWithState:&v51 objects:v65 count:16];
    }
    while (v29);
  }
LABEL_60:
}

void sub_10019908C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  id v22 = 0;
  +[PKExpressPassInformation extractApplicationIdentifier:&v22 subcredentialIdentifier:0 fromIdentifiers:v6];
  if (v22
    && (objc_msgSend(*(id *)(a1 + 32), "appletWithIdentifier:"),
        (id v7 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v8 = v7;
    unsigned int v9 = [v7 lifecycleState];
    if (v9 != 15)
    {
      unsigned int v10 = v9;
      uint64_t v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)int buf = 138412802;
        uint64_t v24 = v12;
        __int16 v25 = 2112;
        id v26 = v6;
        __int16 v27 = 2048;
        uint64_t v28 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: suspending express pass (%@: %@) - lifecycle state %ld.", buf, 0x20u);
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    unsigned __int8 v13 = [v8 authTransientConfigurable];
    unsigned int v14 = [v8 authTransientSupport];
    unsigned int v15 = v14;
    if ((v13 & 1) == 0 && v14)
    {
      uint64_t v16 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        sub_1005168E4();
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
      unsigned int v17 = v15;
    }
    else {
      unsigned int v17 = 0;
    }
    if (v17 == 1)
    {
      id v18 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
        sub_100516878();
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    }
  }
  else
  {
    uint64_t v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
      sub_10051680C();
    }

    id v8 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  int v20 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  *a4 = v20 ^ 1;
  if (!v20)
  {
    char v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT)) {
      sub_10051677C();
    }
  }
}

void sub_10019932C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 passInformation];
  id v7 = [v6 cardType];
  id v8 = *(id *)(a1 + 40);

  if (v7 == v8)
  {
    unsigned int v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138412546;
      id v12 = v5;
      __int16 v13 = 2048;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: Removing pass %@ from express state due to card type %ld", (uint8_t *)&v11, 0x16u);
    }

    [*(id *)(a1 + 32) addObject:v5];
  }
}

void sub_100199438(void *a1, void *a2, char a3)
{
  id v21 = a1;
  id v17 = a2;
  id v18 = [v17 applicationIdentifier];
  if (v18)
  {
    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0x2020000000;
    char v30 = 0;
    id v4 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
    [v4 addObject:v18];
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1001998BC;
    v26[3] = &unk_10073BD98;
    uint64_t v28 = v29;
    id v20 = v4;
    id v27 = v20;
    id v5 = objc_retainBlock(v26);
    uint64_t v16 = [v17 subcredentials];
    if ([v16 count])
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v6 = v16;
      id v7 = [v6 countByEnumeratingWithState:&v22 objects:v31 count:16];
      if (v7)
      {
        uint64_t v8 = *(void *)v23;
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v23 != v8) {
              objc_enumerationMutation(v6);
            }
            uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
            int v11 = [v10 identifier];
            if (v11)
            {
              ((void (*)(void *, void *))v5[2])(v5, v11);
              id v12 = sub_100199970(v21, v20);
              sub_100116330((uint64_t)v12, a3 & 1);
              __int16 v13 = [PassApplicationSubcredentialState alloc];
              uint64_t v14 = [v10 aliroGroupResolvingKeys];
              unsigned int v15 = [(PassApplicationSubcredentialState *)v13 initWithAliroGroupResolvingKeys:v14];

              sub_100199ACC(v12, v15);
            }
          }
          id v7 = [v6 countByEnumeratingWithState:&v22 objects:v31 count:16];
        }
        while (v7);
      }
    }
    else
    {
      sub_100199970(v21, v20);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      sub_100116330((uint64_t)v6, a3 & 1);
    }

    _Block_object_dispose(v29, 8);
  }
}

void sub_10019970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_10019974C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    [*(id *)(a1 + 32) appendString:@", "];
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    char v11 = 1;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        if ((v11 & 1) == 0) {
          objc_msgSend(*(id *)(a1 + 32), "appendString:", @":", (void)v14);
        }
        objc_msgSend(*(id *)(a1 + 32), "appendString:", v13, (void)v14);
        char v11 = 0;
      }
      id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      char v11 = 0;
    }
    while (v9);
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
}

uint64_t sub_1001998BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(a1 + 32);
    id v7 = v4;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      id v3 = [v5 setObject:v4 atIndexedSubscript:1];
      id v4 = v7;
    }
    else
    {
      id v3 = [v5 addObject:v4];
      id v4 = v7;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
  else if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v3 = [*(id *)(a1 + 32) removeObjectAtIndex:1];
    id v4 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  return _objc_release_x1(v3, v4);
}

id sub_100199970(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    id v5 = v3;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        id v9 = 0;
        uint64_t v10 = v5;
        do
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v4);
          }
          sub_100117394((uint64_t)v10, *(void **)(*((void *)&v13 + 1) + 8 * (void)v9), 0);
          id v5 = (id)objc_claimAutoreleasedReturnValue();

          id v9 = (char *)v9 + 1;
          uint64_t v10 = v5;
        }
        while (v7 != v9);
        id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }
    char v11 = sub_100117D1C((uint64_t)v5);
  }
  else
  {
    char v11 = 0;
  }

  return v11;
}

void sub_100199ACC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [a2 aliroGroupResolvingKeys];
  sub_100116408((uint64_t)v3, v4);
}

void sub_100199B30(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7 && (sub_100117140((uint64_t)v7) & 1) != 0) {
    goto LABEL_14;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  id v10 = v8;
  id v11 = v9;
  id v12 = v11;
  if (v10 == v11)
  {
  }
  else
  {
    if (!v10 || !v11)
    {

      goto LABEL_11;
    }
    unsigned int v13 = [v10 isEqualToString:v11];

    if (!v13) {
      goto LABEL_11;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
LABEL_11:
  long long v14 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138412546;
    id v16 = v10;
    __int16 v17 = 2112;
    id v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "PKExpressPassManager: detected conflict between passes %@ and %@.", (uint8_t *)&v15, 0x16u);
  }

LABEL_14:
}

uint64_t sub_100199CAC(id *a1)
{
  [a1[4] deviceSecureElementPassUniqueIDs];
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v25 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
  if (v25)
  {
    uint64_t v24 = *(void *)v55;
    do
    {
      for (uint64_t i = 0; i != v25; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v55 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v31 = *(void *)(*((void *)&v54 + 1) + 8 * i);
        uint64_t v1 = [a1[4] passWithUniqueIdentifier:v31];
        id v27 = v1;
        if (v1)
        {
          BOOL v2 = [v1 passType] == (id)1;
          uint64_t v1 = v27;
          if (v2)
          {
            id v3 = v27;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            id v34 = v3;
            id v30 = [v3 devicePaymentApplications];
            id v33 = [v30 countByEnumeratingWithState:&v50 objects:v63 count:16];
            if (!v33) {
              goto LABEL_41;
            }
            uint64_t v32 = *(void *)v51;
            while (1)
            {
              uint64_t v4 = 0;
              do
              {
                if (*(void *)v51 != v32)
                {
                  uint64_t v5 = v4;
                  objc_enumerationMutation(v30);
                  uint64_t v4 = v5;
                }
                uint64_t v35 = v4;
                id v6 = *(void **)(*((void *)&v50 + 1) + 8 * v4);
                uint64_t v36 = [v6 applicationIdentifier];
                if (v36)
                {
                  unsigned int v7 = [v6 supportedRadioTechnologies];
                  if ([a1[5] containsObject:v31])
                  {
                    sub_100199438(a1[6], v6, (v7 & 2) != 0);
                    goto LABEL_39;
                  }
                  [v6 state];
                  if (PKPaymentApplicationStateSupportsExpress())
                  {
                    unsigned int v38 = (void *)sub_1001156BC((uint64_t)PDSECredentialEntry, v34, v6);
                    if (v38)
                    {
                      v48[0] = 0;
                      v48[1] = v48;
                      v48[2] = 0x2020000000;
                      char v49 = 0;
                      id v8 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
                      [v8 addObject:v36];
                      v45[0] = _NSConcreteStackBlock;
                      v45[1] = 3221225472;
                      v45[2] = sub_10019A338;
                      v45[3] = &unk_10073BD98;
                      uint64_t v47 = v48;
                      id v40 = v8;
                      id v46 = v40;
                      id v9 = objc_retainBlock(v45);
                      sub_100116330((uint64_t)v38, (v7 >> 1) & 1);
                      sub_100116044((uint64_t)v38, 0);
                      sub_1001160F0((uint64_t)v38, 0);
                      id v29 = [v6 subcredentials];
                      if ([v29 count])
                      {
                        long long v43 = 0u;
                        long long v44 = 0u;
                        long long v41 = 0u;
                        long long v42 = 0u;
                        uint64_t v37 = v29;
                        id v10 = [v37 countByEnumeratingWithState:&v41 objects:v62 count:16];
                        if (v10)
                        {
                          uint64_t v11 = *(void *)v42;
                          do
                          {
                            for (j = 0; j != v10; j = (char *)j + 1)
                            {
                              if (*(void *)v42 != v11) {
                                objc_enumerationMutation(v37);
                              }
                              unsigned int v13 = *(void **)(*((void *)&v41 + 1) + 8 * (void)j);
                              long long v14 = [v13 identifier];
                              if (v14)
                              {
                                ((void (*)(void *, void *))v9[2])(v9, v14);
                                id v15 = [v38 copy];
                                id v16 = [PassApplicationSubcredentialState alloc];
                                __int16 v17 = [v13 aliroGroupResolvingKeys];
                                id v18 = [(PassApplicationSubcredentialState *)v16 initWithAliroGroupResolvingKeys:v17];

                                sub_100199ACC(v15, v18);
                                if ((sub_100197F48(a1[6], v40, v15, 1) & 1) == 0)
                                {
                                  uint64_t v19 = PKLogFacilityTypeGetObject();
                                  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                                  {
                                    id v20 = [v34 uniqueID];
                                    *(_DWORD *)int buf = 138412546;
                                    long long v59 = v20;
                                    __int16 v60 = 2112;
                                    id v61 = v40;
                                    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "PKExpressPassManager: Unable to add ASC entry for pass (%@: %@) to hardware state.", buf, 0x16u);
                                  }
                                }
                              }
                            }
                            id v10 = [v37 countByEnumeratingWithState:&v41 objects:v62 count:16];
                          }
                          while (v10);
                        }
                        goto LABEL_37;
                      }
                      if ((sub_100197F48(a1[6], v40, v38, 1) & 1) == 0)
                      {
                        uint64_t v37 = PKLogFacilityTypeGetObject();
                        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                        {
                          id v21 = [v34 uniqueID];
                          *(_DWORD *)int buf = 138412546;
                          long long v59 = v21;
                          __int16 v60 = 2112;
                          id v61 = v40;
                          _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "PKExpressPassManager: Unable to add ASC entry for pass (%@: %@) to hardware state.", buf, 0x16u);
                        }
LABEL_37:
                      }
                      _Block_object_dispose(v48, 8);
                    }
                  }
                }
LABEL_39:

                uint64_t v4 = v35 + 1;
              }
              while ((id)(v35 + 1) != v33);
              id v33 = [v30 countByEnumeratingWithState:&v50 objects:v63 count:16];
              if (!v33)
              {
LABEL_41:

                uint64_t v1 = v27;
                break;
              }
            }
          }
        }
      }
      id v25 = [obj countByEnumeratingWithState:&v54 objects:v64 count:16];
    }
    while (v25);
  }

  return 1;
}

void sub_10019A2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

uint64_t sub_10019A338(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v7 = v4;
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      id v3 = [v5 setObject:v4 atIndexedSubscript:1];
      id v4 = v7;
    }
    else
    {
      id v3 = [v5 addObject:v4];
      id v4 = v7;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
  else if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v3 = [*(id *)(a1 + 32) removeObjectAtIndex:1];
    id v4 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  return _objc_release_x1(v3, v4);
}

void sub_10019A3EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v8 = 0;
  id v9 = 0;
  if (+[PKExpressPassInformation extractApplicationIdentifier:&v9 subcredentialIdentifier:&v8 fromIdentifiers:a2])
  {
    if (!v8) {
      goto LABEL_8;
    }
    id v6 = *(void **)(a1 + 32);
    if (v6)
    {
      id v7 = [v6 objectForKeyedSubscript:v9];
      if (!v7)
      {
        id v7 = objc_alloc_init((Class)NSMutableSet);
        [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v9];
      }
      [v7 addObject:v8];
    }
    if (*(unsigned char *)(a1 + 56)) {
LABEL_8:
    }
      [*(id *)(a1 + 40) addObject:v9];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    *a4 = 1;
  }
}

void sub_10019A4C8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_10019A4E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10019A538(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void sub_10019A570(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_10019A8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10019A910(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithValue:*(void *)(a1 + 32) forBaseValue:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

void sub_10019AAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v9 = *(id *)(a4 + 24);
  id v10 = *(void **)(a1 + 32);
  id v12 = v9;
  if (v9)
  {
    uint64_t v11 = PKCurrencyStorageNumberToCurrencyDecimal();
    [v10 setContent:v11];

    [*(id *)(a1 + 32) setCurrencyCode:v12];
  }
  else
  {
    [v10 setContent:*(void *)(a4 + 8)];
  }
  objc_msgSend(*(id *)(a1 + 32), "setNumberStyle:", (int)_PKEnumValueFromString(), 1, 1, 3, 3, 4, 4, 5, 5);
  *a6 = 1;
}

void sub_10019B3C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10019B568(id a1, PKApplyFooterContent *a2, id a3)
{
}

id sub_10019C8E8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 72));
  [*(id *)(*(void *)(a1 + 32) + 80) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Handle<%@> End Tracking", (uint8_t *)&v5, 0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_lock_removeAncillaryServiceForTracker:", *(void *)(a1 + 48));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 72));
  return [*(id *)(a1 + 32) _handleDidInvalidateForTransportIdentifier:*(void *)(a1 + 40)];
}

id sub_10019CADC(uint64_t a1, void *a2)
{
  return [a2 handleOutstandingShareMessage:*(void *)(a1 + 32) transportIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_10019CD40(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10019CEEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_10019D0C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10019D418(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = a2;
  id v5 = [v3 transportIdentifier];
  [v4 handleOutstandingShareMessage:v2 transportIdentifier:v5];
}

id sub_10019D5F0(uint64_t a1, void *a2)
{
  return _[a2 channelWasRemotelyTerminatedWithTransportIdentifier:*(void *)(a1 + 32)];
}

uint64_t sub_10019E06C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10019E218(uint64_t a1, int a2, uint64_t a3)
{
  if (a3 || !a2)
  {
    id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);
    return (id)v8();
  }
  else
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 16);
    uint64_t v9 = *(void *)(a1 + 40);
    id v5 = +[NSArray arrayWithObjects:&v9 count:1];
    uint64_t v6 = [*(id *)(a1 + 48) transportIdentifier];
    [v4 insertOrUpdateSharingMessages:v5 storePayloads:0 transportIdentifier:v6];

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    id result = [*(id *)(a1 + 56) type];
    if (result == (id)1) {
      return [*(id *)(*(void *)(a1 + 32) + 96) scheduleNextCheckIfNeeded];
    }
  }
  return result;
}

void sub_10019E44C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0, v6);
    }
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = [v5 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v5);
          }
          id v12 = *(void **)(*(void *)(a1 + 32) + 16);
          uint64_t v22 = *(void *)(*((void *)&v18 + 1) + 8 * i);
          unsigned int v13 = +[NSArray arrayWithObjects:&v22 count:1];
          long long v14 = [*(id *)(a1 + 40) transportIdentifier];
          [v12 insertOrUpdateSharingMessages:v13 storePayloads:1 transportIdentifier:v14];
        }
        id v9 = [v5 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v9);
    }
    id v15 = *(void **)(*(void *)(a1 + 32) + 16);
    id v16 = [*(id *)(a1 + 40) transportIdentifier];
    __int16 v17 = [v15 sharingMessagesForTransportIdentifier:v16];

    [*(id *)(a1 + 40) didReceiveMessages:v17];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10019E720(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!v5 && a2)
  {
    id v6 = objc_msgSend(*(id *)(a1 + 32), "transportIdentifier", 0);
    [*(id *)(*(void *)(a1 + 40) + 16) deleteSharingEndpointForTransportIdentifier:v6];
    [*(id *)(*(void *)(a1 + 40) + 16) deleteSharingMessagesForTransportIdentifier:v6];

    id v5 = 0;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v8);
    id v5 = v8;
  }
}

void sub_10019E8CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (!v5 && a2)
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 16);
    uint64_t v7 = objc_msgSend(*(id *)(a1 + 40), "transportIdentifier", 0);
    [v6 deleteSharingEndpointForTransportIdentifier:v7];

    id v5 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v9);
    id v5 = v9;
  }
}

void sub_10019EE10(uint64_t a1, void *a2)
{
  objc_msgSend(a2, "pk_arrayBySafelyApplyingBlock:", &stru_10073C040);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10019EE78(id a1, IDSDevice *a2)
{
  uint64_t v2 = a2;
  if ([(IDSDevice *)v2 deviceType] == (id)2)
  {
    id v3 = (void *)IDSCopyIDForDevice();
    id v4 = +[PKSharingIDSChannelDescriptor createWithDeviceIdentifier:v3];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

BOOL sub_10019F158(id a1, PDSharingChannel_AncillaryService *a2)
{
  uint64_t v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_10019F28C(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = [*(id *)(a1 + 32) type];
  if (!v9) {
    goto LABEL_9;
  }
  if (v3 != (id)1) {
    goto LABEL_9;
  }
  id v4 = [[PDSharingChannel_BLEProximityVerificationAncillaryService alloc] initDetectorWithAdvertisement:*(void *)(a1 + 32) remoteDevice:v9 delegate:*(void *)(a1 + 40) completion:*(void *)(a1 + 56)];
  if (!v4) {
    goto LABEL_9;
  }
  id v5 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 72));
  id v6 = *(void **)(*(void *)(a1 + 40) + 80);
  uint64_t v7 = [*(id *)(a1 + 48) transportIdentifier];
  uint64_t v8 = [v6 objectForKeyedSubscript:v7];

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "_lock_addAncillaryService:forTracker:", v5, v8);
  }
  else
  {

    id v5 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 72));

  if (v5)
  {
    [v5 start];
  }
  else
  {
LABEL_9:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1001A0424(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[CreditAccountStatement alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(CreditAccountStatement *)v5 creditAccountStatement];
  [v3 addObject:v4];
}

void sub_1001A0624(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[CreditAccountStatement alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(CreditAccountStatement *)v5 creditAccountStatement];
  [v3 addObject:v4];
}

void sub_1001A0AFC(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[CreditAccountStatement alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_1001A1638(id a1, PKCreditAccountStatement *a2, id a3)
{
}

void sub_1001A1640(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountStatement *)v3 setOpeningDate:v4];
}

void sub_1001A16A0(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountStatement *)v3 setClosingDate:v4];
}

void sub_1001A1700(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountStatement *)v3 setPaymentDueDate:v4];
}

void sub_1001A1760(id a1, PKCreditAccountStatement *a2, id a3)
{
}

void sub_1001A1768(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setStatementBalance:v4];
}

void sub_1001A17CC(id a1, PKCreditAccountStatement *a2, id a3)
{
  if (a3)
  {
    id v3 = a2;
    PKCurrencyStorageNumberToCurrencyDecimal();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [(PKCreditAccountStatement *)v3 setTotalBalance:v4];
  }
}

void sub_1001A1838(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setMinimumDue:v4];
}

void sub_1001A189C(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setPurchases:v4];
}

void sub_1001A1900(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setFeesCharged:v4];
}

void sub_1001A1964(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setInterestCharged:v4];
}

void sub_1001A19C8(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setBalanceTransfers:v4];
}

void sub_1001A1A2C(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setPaymentsAndCredits:v4];
}

void sub_1001A1A90(id a1, PKCreditAccountStatement *a2, id a3)
{
  if (a3)
  {
    id v3 = a2;
    PKCurrencyStorageNumberToCurrencyDecimal();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [(PKCreditAccountStatement *)v3 setPayments:v4];
  }
}

void sub_1001A1AFC(id a1, PKCreditAccountStatement *a2, id a3)
{
  if (a3)
  {
    id v3 = a2;
    PKCurrencyStorageNumberToCurrencyDecimal();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [(PKCreditAccountStatement *)v3 setCredits:v4];
  }
}

void sub_1001A1B68(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setRewardsBalance:v4];
}

void sub_1001A1BCC(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setRewardsEarned:v4];
}

void sub_1001A1C30(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setRewardsRedeemed:v4];
}

void sub_1001A1C94(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setRewardsYTD:v4];
}

void sub_1001A1CF8(id a1, PKCreditAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountStatement *)v3 setRewardsLifetime:v4];
}

void sub_1001A1D5C(id a1, PKCreditAccountStatement *a2, id a3)
{
}

void sub_1001A1E5C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

id sub_1001A2298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a3 values:a4];
}

void sub_1001A245C(id a1, PKTransactionReleasedDataApplication *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    -[PKTransactionReleasedDataApplication setClient:](v4, "setClient:", [a3 unsignedIntegerValue]);
  }
}

void sub_1001A24BC(id a1, PKTransactionReleasedDataApplication *a2, id a3)
{
  if (a3) {
    -[PKTransactionReleasedDataApplication setBundleIdentifier:](a2, "setBundleIdentifier:");
  }
}

void sub_1001A24CC(id a1, PKTransactionReleasedDataApplication *a2, id a3)
{
  if (a3) {
    -[PKTransactionReleasedDataApplication setUsageDescription:](a2, "setUsageDescription:");
  }
}

id sub_1001A2780(uint64_t a1, uint64_t a2)
{
  return +[ASCAssociatedReaderIDReaderCA deleteAssociatedReaderIDReaderCAForAssociatedReaderIDPID:a2 inDatabase:*(void *)(a1 + 32)];
}

void sub_1001A2C0C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v9 = objc_alloc_init((Class)PKASCAssociatedReaderID);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v9 withProperties:v7 values:a4];

  if (v9)
  {
    uint64_t v8 = +[ASCAssociatedReaderIDReaderCA associatedReaderIDReaderCAForAssociatedReaderIDPID:a2 inDatabase:*(void *)(a1 + 40)];
    [v9 setReaderCA:v8];

    [*(id *)(a1 + 48) addObject:v9];
  }
}

void sub_1001A2E28(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1001A3074(id a1, PKASCAssociatedReaderID *a2, id a3)
{
}

void sub_1001A307C(id a1, PKASCAssociatedReaderID *a2, id a3)
{
  id v4 = a2;
  -[PKASCAssociatedReaderID setPriority:](v4, "setPriority:", [a3 unsignedIntegerValue]);
}

void sub_1001A3400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A3418(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithMetadata:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (!v2) {
    goto LABEL_10;
  }
  id v3 = [*(id *)(a1 + 32) type];
  if (v3 == (id)3)
  {
    id v4 = TileMetadataVerticalFlowGroup;
    uint64_t v5 = [*(id *)(a1 + 32) metadataTypeVerticalFlowGroup];
    goto LABEL_8;
  }
  if (v3 == (id)2)
  {
    id v4 = TileMetadataHorizontalFlowGroup;
    uint64_t v5 = [*(id *)(a1 + 32) metadataTypeHorizontalFlowGroup];
LABEL_8:
    id v6 = (void *)v5;
    id v7 = [(__objc2_class *)v4 insertMetadata:v5 forBaseMetadata:v2 inDatabase:*(void *)(a1 + 40)];

    if (v7) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  if (v3 == (id)1)
  {
    id v4 = TileMetadataRKE;
    uint64_t v5 = [*(id *)(a1 + 32) metadataTypeVehicleFunction];
    goto LABEL_8;
  }
LABEL_9:
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v2);
  uint64_t v8 = 1;
LABEL_11:

  return v8;
}

void sub_1001A3798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001A37B8(uint64_t a1, void *a2, id *a3)
{
  id v10 = a2;
  id v5 = *a3;
  if (v5)
  {
    id v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (!v6)
    {
      id v7 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      id v6 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    [v6 addObject:v5];
  }
}

void sub_1001A3B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_1001A3B74(uint64_t a1, uint64_t a2, id *a3)
{
  id v14 = +[NSNull null];
  id v5 = *a3;
  if (v5 == v14)
  {

    id v5 = 0;
  }
  PKPassTileTypeFromString();
  id v6 = a3[1];
  if (v6) {
    BOOL v7 = v6 == v14;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    id v8 = a3[2];

    if (v8 == v14)
    {

      id v8 = 0;
    }
    id v9 = +[PKPassTileMetadata _createMetadataForType:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) identifier:v6 context:PKPassTileContextFromString()];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v5 = a3[3];
    if (v5 == v14)
    {

      id v5 = 0;
    }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setPreferredStyle:PKPassTileStyleFromString()];
    id v12 = a3[4];
    if (v12 == v14)
    {

      id v12 = 0;
    }
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "setSelectable:", objc_msgSend(v12, "BOOLValue"));
    id v13 = a3[5];

    if (v13 == v14)
    {

      id v13 = 0;
    }
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "setShowInPrearm:", objc_msgSend(v13, "BOOLValue"));
  }
}

void sub_1001A460C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v15 = objc_alloc_init((Class)PKPayLaterPayment);
  id v8 = [PayLaterPayment alloc];
  id v9 = [*(id *)(a1 + 32) database];
  uint64_t v10 = [(SQLiteEntity *)v8 initWithPersistentID:a2 inDatabase:v9];

  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v15 withProperties:v7 values:a4];
  uint64_t v11 = [(PayLaterPayment *)v10 _amount];
  [v15 setAmount:v11];

  id v12 = [(PayLaterPayment *)v10 _interestPaid];
  [v15 setInterestPaid:v12];

  id v13 = [(PayLaterPayment *)v10 _principalPaid];
  [v15 setPrincipalPaid:v13];

  id v14 = +[PayLaterPaymentFundingSource paymentFundingSourcesForPaymentPID:a2 inDatabase:*(void *)(a1 + 48)];
  [v15 setFundingSources:v14];

  [*(id *)(a1 + 56) safelyAddObject:v15];
}

void sub_1001A5224(id a1, PKPayLaterPayment *a2, id a3)
{
}

void sub_1001A522C(id a1, PKPayLaterPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterPayment setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1001A5284(id a1, PKPayLaterPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterPayment setSubtype:](v4, "setSubtype:", [a3 integerValue]);
}

void sub_1001A52DC(id a1, PKPayLaterPayment *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterPayment *)v3 setPostedDate:v4];
}

void sub_1001A533C(id a1, PKPayLaterPayment *a2, id a3)
{
}

void *sub_1001A5360(void *a1)
{
  if (!a1) {
    return 0;
  }
  v6.receiver = a1;
  v6.super_class = (Class)PDFieldDetectorManager;
  uint64_t v1 = objc_msgSendSuper2(&v6, "init");
  id v2 = v1;
  if (v1)
  {
    *((_DWORD *)v1 + 3) = 0;
    uint64_t v3 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
    id v4 = (void *)v2[3];
    v2[3] = v3;

    PDNFSecureXPCRegisterFieldDetectEventObserver(v2);
  }
  return v2;
}

void sub_1001A5428(uint64_t a1)
{
  if (a1)
  {
    id v2 = sub_10002149C();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001A54B4;
    block[3] = &unk_10072E1E8;
    void block[4] = a1;
    dispatch_async(v2, block);
  }
}

void sub_1001A54B4(uint64_t a1)
{
  char v1 = 0;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(*(void *)(a1 + 32) + 8), (unsigned __int8 *)&v1, 1u);
  if (v1)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 48) = PDFieldDetectAvailable();
    uint64_t v3 = *(void *)(a1 + 32);
    sub_1001A5514(v3);
  }
}

void sub_1001A5514(uint64_t a1)
{
  if (a1 && PKNearFieldRadioIsAvailable())
  {
    int v2 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v3 = PKLogFacilityTypeGetObject();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (!v4) {
        goto LABEL_9;
      }
      __int16 v16 = 0;
      id v5 = "PDFieldDetectManager: enabling field detection...";
      objc_super v6 = (uint8_t *)&v16;
    }
    else
    {
      if (!v4) {
        goto LABEL_9;
      }
      *(_WORD *)int buf = 0;
      id v5 = "PDFieldDetectManager: disabling field detection...";
      objc_super v6 = buf;
    }
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
LABEL_9:

    id v7 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
    unsigned int v8 = [v7 setFieldDetectEnabled:*(unsigned __int8 *)(a1 + 48)];
    id v9 = PKLogFacilityTypeGetObject();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        __int16 v14 = 0;
        uint64_t v11 = "PDFieldDetectManager: pushed field detection state to nearfield.";
        id v12 = (uint8_t *)&v14;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
      }
    }
    else if (v10)
    {
      __int16 v13 = 0;
      uint64_t v11 = "PDFieldDetectManager: failed to push field detection state to nearfield.";
      id v12 = (uint8_t *)&v13;
      goto LABEL_14;
    }
  }
}

void sub_1001A5650(uint64_t a1)
{
  if (a1)
  {
    unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 8));
    if (v1)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001A5708;
      block[3] = &unk_10072E1E8;
      void block[4] = a1;
      int v2 = sub_10002149C();
      dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
      dispatch_async(v2, v3);
    }
  }
}

void sub_1001A5708(uint64_t a1)
{
  int v2 = PDFieldDetectAvailable();
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v3 + 48) != v2)
  {
    *(unsigned char *)(v3 + 48) = v2;
    uint64_t v4 = *(void *)(a1 + 32);
    sub_1001A5514(v4);
  }
}

void sub_1001A5760(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (os_unfair_lock_s *)(a1 + 12);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    objc_storeWeak((id *)(a1 + 16), v4);

    os_unfair_lock_unlock(v3);
  }
}

id *sub_1001A57C8(os_unfair_lock_s *a1)
{
  unsigned __int8 v1 = (id *)a1;
  if (a1)
  {
    int v2 = a1 + 3;
    os_unfair_lock_lock(a1 + 3);
    unsigned __int8 v1 = (id *)v1[4];
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

void sub_1001A58CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 40))
  {
    [*(id *)(v2 + 40) invalidate];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  id v5 = sub_100007FA0((os_unfair_lock_s *)v2);
  objc_super v6 = v5;
  if (v5 && [v5 fieldDetectorManagerShouldSuppressFieldEvents:*(void *)(a1 + 32)])
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDFieldDetectorManager: ignoring field entrance.", buf, 2u);
    }
  }
  else
  {
    id v8 = [*(id *)(a1 + 40) terminalType];
    id v9 = PKLogFacilityTypeGetObject();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v8 == (id)5)
    {
      if (v10)
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDFieldDetectorManager: ignoring connection handover entrance.", buf, 2u);
      }
    }
    else
    {
      if (v10)
      {
        uint64_t v11 = *(void *)(a1 + 40);
        *(_DWORD *)int buf = 138412290;
        uint64_t v27 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDFieldDetectorManager: did enter field %@.", buf, 0xCu);
      }

      uint64_t v12 = PKAnalyticsSubjectFieldDetect;
      +[PKAnalyticsReporter beginSubjectReporting:PKAnalyticsSubjectFieldDetect];
      id v13 = objc_alloc_init((Class)NSMutableDictionary);
      [v13 setObject:PKAnalyticsReportEventTypeFieldEntered forKeyedSubscript:PKAnalyticsReportEventKey];
      __int16 v14 = *(void **)(a1 + 40);
      id v15 = v13;
      unint64_t v16 = (unint64_t)[v14 terminalType];
      if (v16 <= 5)
      {
        if (((1 << v16) & 0x2D) == 0)
        {
          uint64_t v17 = PKAnalyticsReportReaderTypeKey;
          if (v16 != 1) {
            [v15 setObject:@"identity" forKeyedSubscript:PKAnalyticsReportReaderTypeKey];
          }
          [v15 setObject:@"payment" forKeyedSubscript:v17];
        }
        [v15 setObject:PKAnalyticsReportOtherValue forKeyedSubscript:PKAnalyticsReportReaderTypeKey];
      }

      +[PKAnalyticsReporter subject:v12 sendEvent:v15];
      if (PKFieldPropertiesCanLookupSecondaryProperties())
      {
        [*(id *)(a1 + 40) setSecondaryPropertiesRequired:1];
        uint64_t v18 = *(void *)(a1 + 40);
        id v19 = sub_10002149C();
        id v20 = +[PKFieldPropertiesProbe createProbeForProperties:v18 queue:v19];
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(void **)(v21 + 40);
        *(void *)(v21 + 40) = v20;

        uint64_t v23 = *(void *)(a1 + 32);
        uint64_t v24 = *(void **)(v23 + 40);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_1001A5C2C;
        v25[3] = &unk_10073C590;
        v25[4] = v23;
        [v24 beginWithCompletion:v25];
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
        sub_1001A5CE4(*(void *)(a1 + 32), *(void **)(a1 + 40));
      }
    }
  }
}

void sub_1001A5C2C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = *(id *)(*(void *)(a1 + 32) + 40);
  if (v6 == v9)
  {
    [v6 invalidate];
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0;

    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12));
    sub_1001A5CE4(*(void *)(a1 + 32), v5);
  }
}

void sub_1001A5CE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 12));
    id v4 = [*(id *)(a1 + 24) allObjects];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 12));
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        id v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v9), "fieldDetectorManager:didEnterFieldWithProperties:", a1, v3, (void)v10);
          id v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
  }
}

void sub_1001A5E70(id a1)
{
  unsigned __int8 v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, -1);
  attr = dispatch_queue_attr_make_with_autorelease_frequency(v1, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.passd.field-detect", attr);
  id v3 = (void *)qword_100808CE8;
  qword_100808CE8 = (uint64_t)v2;
}

id sub_1001A613C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) deviceSupportsCredentials];
  if (result)
  {
    id v3 = objc_alloc((Class)PKBluetoothMonitorer);
    uint64_t v8 = CBManagerNeedsRestrictedStateOperation;
    id v9 = &__kCFBooleanTrue;
    id v4 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    id v5 = [v3 initWithManagerOptions:v4];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = v5;

    return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "setDelegate:");
  }
  return result;
}

void sub_1001A6EE0(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v7, "state", (void)v10) == (id)1)
        {
          uint64_t v8 = *(void **)(a1 + 40);
          id v9 = [v7 identifier];
          LOBYTE(v8) = [v8 containsObject:v9];

          if ((v8 & 1) == 0) {
            [*(id *)(*(void *)(a1 + 48) + 8) credentialDidActivateWithCredential:v7 completion:0];
          }
        }
        [*(id *)(a1 + 48) didUpdateCredential:v7 onPassWithIdentifier:*(void *)(a1 + 56)];
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

uint64_t sub_1001A7494(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_1001A7588(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_1001A767C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_1001A7770(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

void sub_1001A8068(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

uint64_t sub_1001A809C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (a3) {
      a2 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_1001A80BC(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 7);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = (void *)*((void *)WeakRetained + 11);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001A8200;
    v7[3] = &unk_10073C678;
    id v11 = a1[6];
    id v8 = v3;
    id v9 = a1[4];
    id v10 = a1[5];
    objc_copyWeak(&v12, a1 + 7);
    [v6 performHandlerOnSharedWebServiceQueue:v7];
    objc_destroyWeak(&v12);
  }
  else
  {
    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_1001A81EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A8200(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1001A8360;
    v6[3] = &unk_10073C650;
    uint64_t v4 = *(void *)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 48);
    objc_copyWeak(&v10, (id *)(a1 + 64));
    [v3 passAtURL:v4 completion:v6];
    objc_destroyWeak(&v10);
  }
  else
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Unable to get shared web service", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1001A834C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A8360(id *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 == 1 && v5)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001A84D4;
    v9[3] = &unk_10073C628;
    id v10 = a1[4];
    id v13 = a1[6];
    id v11 = a1[5];
    objc_copyWeak(&v14, a1 + 7);
    id v12 = v6;
    [v12 downloadRemoteAssetsWithCompletion:v9];

    objc_destroyWeak(&v14);
  }
  else
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to download new pass", v8, 2u);
    }

    (*((void (**)(void))a1[6] + 2))();
  }
}

void sub_1001A84C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A84D4(id *a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2)
  {
    if (v5)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to download new pass assets", buf, 2u);
      }

      (*((void (**)(void))a1[7] + 2))();
    }
    else
    {
      id v8 = PDDefaultQueue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001A8648;
      block[3] = &unk_10073C600;
      id v10 = a1[4];
      id v11 = a1[5];
      objc_copyWeak(&v14, a1 + 8);
      id v12 = a1[6];
      id v13 = a1[7];
      dispatch_async(v8, block);

      objc_destroyWeak(&v14);
    }
  }
}

void sub_1001A8648(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)&void v6[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating pass for registered credential: %@", v6, 0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  id v5 = WeakRetained;
  *(void *)uint64_t v6 = 0;
  if (WeakRetained) {
    [WeakRetained[9] writeCard:*(void *)(a1 + 48) source:1 error:v6];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1001A8744(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 8);
  id v5 = (void *)WeakRetained[11];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001A8870;
  v6[3] = &unk_10073C6F0;
  id v7 = a1[4];
  objc_copyWeak(&v11, a1 + 8);
  id v9 = a1[6];
  id v8 = a1[5];
  id v10 = a1[7];
  [v5 registerCredentialWithRequest:v3 completion:v6];

  objc_destroyWeak(&v11);
}

void sub_1001A885C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001A8870(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 passURL];
  uint64_t v5 = [v3 credentialAttestation];
  uint64_t v6 = (void *)v5;
  if (v4 && v5)
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 8);
    if (WeakRetained)
    {
      id v8 = [objc_alloc((Class)PKAppletSubcredential) initWithIdentifier:a1[5]];
      id v9 = (void *)WeakRetained[1];
      id v10 = [v3 vehicleMobilizationEncryptedContainer];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1001A8AD8;
      v15[3] = &unk_10073C6C8;
      id v16 = a1[4];
      id v17 = a1[5];
      id v19 = a1[7];
      id v18 = v4;
      id v20 = a1[6];
      [v9 updateTrackingAttestation:v6 forCredential:v8 encryptedContainer:v10 completion:v15];

LABEL_12:
      goto LABEL_13;
    }
    id v14 = a1[6];
    if (!v14) {
      goto LABEL_12;
    }
    id v13 = (void (*)(void))*((void *)v14 + 2);
LABEL_11:
    v13();
    goto LABEL_12;
  }
  id v11 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = a1[5];
    *(_DWORD *)int buf = 138412290;
    id v22 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Registering credential (%@) failed", buf, 0xCu);
  }

  if (a1[6])
  {
    id WeakRetained = +[NSError errorWithDomain:PKSubcredentialProvisioningErrorDomain code:7 userInfo:0];
    id v13 = (void (*)(void))*((void *)a1[6] + 2);
    goto LABEL_11;
  }
LABEL_13:
}

void sub_1001A8AD8(void *a1, int a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      uint64_t v6 = a1[5];
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Registered credential: %@", (uint8_t *)&v9, 0xCu);
    }

    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    if (v5)
    {
      uint64_t v7 = a1[5];
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to register credential: %@", (uint8_t *)&v9, 0xCu);
    }

    if (a1[8])
    {
      id v8 = +[NSError errorWithDomain:PKSubcredentialProvisioningErrorDomain code:7 userInfo:0];
      (*(void (**)(void))(a1[8] + 16))();
    }
  }
}

void sub_1001A8CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001A8D0C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(v2);
  [WeakRetained[11] backgroundRegisterCredentialWithRequest:v3];
}

id sub_1001A8F30(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _removeBackgroundRegistrationRequestForCredentials:*(void *)(a1 + 40) withPaymentWebService:a2];
}

void sub_1001A9064(uint64_t a1, int a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) count];
    CFStringRef v6 = @"No";
    if (a2) {
      CFStringRef v6 = @"Yes";
    }
    int v7 = 134218242;
    id v8 = v5;
    __int16 v9 = 2112;
    CFStringRef v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished restoring %ld credentials in database. Success: %@)", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1001A9228(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v24;
    *(void *)&long long v5 = 138412546;
    long long v17 = v5;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v3);
        }
        uint64_t v10 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        id v11 = objc_msgSend(*(id *)(a1 + 32), "member:", v10, v17);
        if (v11)
        {
          PKAppletSubcredentialMergeDeviceCredential();
          id v12 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = v17;
            uint64_t v28 = v11;
            __int16 v29 = 2112;
            uint64_t v30 = v10;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Inflated credential %@ from %@", buf, 0x16u);
          }

          ++v7;
        }
      }
      id v6 = [v3 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v13 = *(NSObject **)(*(void *)(a1 + 40) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001A9448;
  block[3] = &unk_100731AD8;
  uint64_t v22 = v7;
  id v14 = *(id *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  id v16 = *(void **)(a1 + 48);
  id v19 = v14;
  uint64_t v20 = v15;
  id v21 = v16;
  dispatch_async(v13, block);
}

uint64_t sub_1001A9448(uint64_t a1)
{
  [*(id *)(a1 + 32) count];
  [*(id *)(*(void *)(a1 + 40) + 64) updateAppletSubcredentials:*(void *)(a1 + 32)];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1001A9A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001A9AC8(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 64), "passShareForCredentialShareIdentifier:", v7, (void)v14);
        if ([*(id *)(*(void *)(a1 + 40) + 64) deletePassCredentialShareForIdentifier:v7])
        {
          ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          if (v8)
          {
            __int16 v9 = [v8 credentialShares];
            id v10 = [v9 count];

            if (v10 == (id)1)
            {
              id v11 = *(void **)(*(void *)(a1 + 40) + 64);
              id v12 = [v8 identifier];
              [v11 deletePassShareWithIdentifier:v12];
            }
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }

  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != 0;
}

void sub_1001A9F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001A9F90(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 64) updatePassCredentialShareIdentifier:a1[5] updatedStatus:1 updatedIdentifier:a1[6]];
  uint64_t v3 = *(void *)(a1[7] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(a1[7] + 8) + 40)) {
    return 0;
  }
  uint64_t v5 = [*(id *)(a1[4] + 64) passShareForCredentialShareIdentifier:a1[6]];
  id v6 = *(void **)(a1[4] + 64);
  uint64_t v7 = [v5 subcredentialIdentifier];
  uint64_t v8 = [v6 appletSubcredentialWithIdentifier:v7];
  uint64_t v9 = *(void *)(a1[8] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  return *(void *)(*(void *)(a1[7] + 8) + 40) != 0;
}

void sub_1001AA554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001AA590(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = (void *)*((void *)WeakRetained + 11);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001AA690;
    v7[3] = &unk_10073C790;
    objc_copyWeak(&v9, v2);
    id v8 = *(id *)(a1 + 32);
    [v5 performHandlerOnSharedWebServiceQueue:v7];

    objc_destroyWeak(&v9);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
    }
  }
}

void sub_1001AA67C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001AA690(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  uint64_t v6 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained[11] initiateConsistencyCheck];
    uint64_t v3 = v6;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, void))(v4 + 16))(v4, 0);
    uint64_t v3 = v6;
  }
  return _objc_release_x1(v4, v3);
}

void sub_1001AA704(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 appletSubcredentialManager:*(void *)(a1 + 32) didTerminateProvisioningForCredential:*(void *)(a1 + 40)];
  }
}

void sub_1001AACA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001AACC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v21 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v20 = v3;
  if (WeakRetained)
  {
    if (!v3)
    {
LABEL_5:
      uint64_t v7 = a1;
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "No reason to decline related invitations", (uint8_t *)&buf, 2u);
      }

      uint64_t v9 = *(void *)(v7 + 40);
      if (v9) {
        (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0);
      }
      goto LABEL_26;
    }
    uint64_t v4 = a1;
    uint64_t v5 = [v3 domain];
    if ([v5 isEqualToString:PKSubcredentialProvisioningErrorDomain])
    {
      id v6 = [v3 code];

      a1 = v4;
      if (v6 != (id)11) {
        goto LABEL_5;
      }
    }
    else
    {
    }
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Found reason to decline related invitations: %@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v12 = dispatch_group_create();
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v40 = 0x2020000000;
    uint64_t v41 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v13 = [WeakRetained invitations];
    id v14 = [v13 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v15) {
            objc_enumerationMutation(v13);
          }
          uint64_t v17 = *(void *)(*((void *)&v32 + 1) + 8 * i);
          if ([*(id *)(v4 + 32) isSameInvitationAsInvitation:v17])
          {
            dispatch_group_enter(v12);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v36 = 138412290;
              uint64_t v37 = v17;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Declining related invite: %@", v36, 0xCu);
            }

            uint64_t v18 = (void *)WeakRetained[1];
            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472;
            v27[2] = sub_1001AB128;
            v27[3] = &unk_10073C830;
            objc_copyWeak(&v31, v21);
            uint64_t v28 = v12;
            uint64_t v29 = v17;
            p_long long buf = &buf;
            [v18 declineSharingInvitation:v17 completion:v27];

            objc_destroyWeak(&v31);
          }
        }
        id v14 = [v13 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v14);
    }

    id v19 = WeakRetained[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001AB328;
    block[3] = &unk_10073C858;
    long long v26 = &buf;
    id v24 = *(id *)(v4 + 32);
    id v25 = *(id *)(v4 + 40);
    dispatch_group_notify(v12, v19, block);

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
LABEL_26:
}

void sub_1001AB0F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001AB128(uint64_t a1, char a2)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001AB1F4;
    block[3] = &unk_10073C808;
    char v11 = a2;
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v7 = *(void **)(a1 + 32);
    void block[4] = *(void *)(a1 + 40);
    void block[5] = WeakRetained;
    id v9 = v7;
    dispatch_async(v6, block);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_1001AB1F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) identifier];
  int v3 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully declined related invite: %@", (uint8_t *)&v6, 0xCu);
    }

    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  }
  else
  {
    if (v5)
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to decline related invite: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  [*(id *)(a1 + 40) removeSharingInvitationWithIdentifier:v2];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1001AB328(void *a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1[6] + 8) + 24);
    uint64_t v4 = a1[4];
    int v6 = 134218242;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Declined %ld invitations related to invitation: %@", (uint8_t *)&v6, 0x16u);
  }

  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, *(void *)(*(void *)(a1[6] + 8) + 24) != 0);
  }
  return result;
}

void sub_1001ABB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id location)
{
  objc_destroyWeak(v41);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001ABB88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  int v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  __int16 v8 = WeakRetained;
  if (WeakRetained)
  {
    if (!v5 || v6)
    {
      char v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        int v15 = 138412546;
        uint64_t v16 = v14;
        __int16 v17 = 2112;
        uint64_t v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unable to send invitation for request (%@): %@", (uint8_t *)&v15, 0x16u);
      }
    }
    else
    {
      uint64_t v9 = (void *)*((void *)WeakRetained + 8);
      uint64_t v10 = [*(id *)(a1 + 32) identifier];
      char v11 = [v9 passShareForIdentifier:v10];

      [v11 addCredentialShare:v5];
      uint64_t v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        int v15 = 138412546;
        uint64_t v16 = v13;
        __int16 v17 = 2112;
        uint64_t v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Fulfilled invitation request (%@): %@", (uint8_t *)&v15, 0x16u);
      }

      if (([v8 addPassShare:v11 onCredentialWithIdentifier:*(void *)(a1 + 48)] & 1) == 0)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v15) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to add invite receipt to the database", (uint8_t *)&v15, 2u);
        }
      }
    }
  }
}

uint64_t sub_1001ABF08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001AC278(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 sessionDidChangeConnectionStatus:*(void *)(a1 + 32)];
  }
}

void sub_1001AC3A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 sessionDidReceiveData:*(void *)(a1 + 32)];
  }
}

void sub_1001AC5AC(uint64_t a1, void *a2)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        __int16 v8 = [v7 identifier];
        unsigned int v9 = [v8 isEqualToString:*(void *)(a1 + 32)];

        if (v9)
        {
          id v4 = v7;
          goto LABEL_11;
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 88);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001AC788;
  v12[3] = &unk_10073C918;
  id v13 = v4;
  id v14 = *(id *)(a1 + 32);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v11 = v4;
  [v10 performHandlerOnSharedWebServiceQueue:v12];
}

void sub_1001AC788(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  if (v4)
  {
    id v5 = [v4 credentialState];
    if (v5 == (id)21) {
      goto LABEL_9;
    }
    id v6 = v5;
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[5];
      *(_DWORD *)long long v23 = 138412546;
      *(void *)&void v23[4] = v8;
      *(_WORD *)&v23[12] = 2048;
      *(void *)&v23[14] = v6;
      unsigned int v9 = "Registering credential %@ in unexpected state: %ld";
      uint64_t v10 = v7;
      uint32_t v11 = 22;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, v23, v11);
    }
  }
  else
  {
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a1[5];
      *(_DWORD *)long long v23 = 138412290;
      *(void *)&void v23[4] = v12;
      unsigned int v9 = "Unable to find matching KML credential to register with identifier: %@";
      uint64_t v10 = v7;
      uint32_t v11 = 12;
      goto LABEL_7;
    }
  }

LABEL_9:
  id v13 = (void *)a1[4];
  if (!v13) {
    id v13 = (void *)a1[6];
  }
  id v14 = v13;
  id v15 = [v14 trackingRequest];
  if (!v15)
  {
    id v16 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = a1[5];
      *(_DWORD *)long long v23 = 138412290;
      *(void *)&void v23[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Registering credential %@ without an attestation!", v23, 0xCu);
    }
  }
  id v18 = objc_msgSend(objc_alloc((Class)PKCarKeyCredentialRegistrationMetadata), "initWithMake:model:keyType:", 0, 0, objc_msgSend(v14, "isSharedCredential", *(_OWORD *)v23, *(void *)&v23[16]));
  id v19 = [objc_alloc((Class)PKPaymentRegisterTrackCredentialRequest) initWithCredential:v14 registrationData:v15 metadata:v18];
  if (!v19)
  {
    long long v20 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = a1[5];
      *(_DWORD *)long long v23 = 138412290;
      *(void *)&void v23[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Unable to create credential registration request for credential: %@", v23, 0xCu);
    }
  }
  uint64_t v22 = a1[7];
  if (v22) {
    (*(void (**)(uint64_t, id))(v22 + 16))(v22, v19);
  }
}

uint64_t sub_1001ACB00(uint64_t a1, void *a2)
{
  id v3 = [a2 backgroundContext];
  id v4 = [*(id *)(a1 + 32) identifier];
  id v5 = PKCredentialRegistrationRecordNameForCredentialIdentifier();
  id v11 = [v3 backgroundDownloadRecordForRecordName:v5];

  if (v11)
  {
    if ([v11 taskType] == (id)5)
    {
      id v6 = v11;
      goto LABEL_6;
    }
  }
  id v7 = objc_msgSend(objc_alloc((Class)PKCarKeyCredentialRegistrationMetadata), "initWithMake:model:keyType:", 0, 0, objc_msgSend(*(id *)(a1 + 32), "isSharedCredential"));
  id v8 = [objc_alloc((Class)PKPaymentRegisterTrackCredentialRequest) initWithCredential:*(void *)(a1 + 32) registrationData:*(void *)(a1 + 40) metadata:v7];
  [*(id *)(*(void *)(a1 + 48) + 88) backgroundRegisterCredentialWithRequest:v8];

  id v6 = 0;
LABEL_6:
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    id v12 = v6;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v9, 1);
    id v6 = v12;
  }
  return _objc_release_x1(v9, v6);
}

void sub_1001AD020(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 appletSubcredentialManager:a1[4] didUpdateCredential:a1[5] onPassWithIdentifier:a1[6] oldShares:a1[7]];
  }
}

void sub_1001AD610(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001AD664(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v9 = +[NSUUID UUID];
    uint64_t v10 = [v9 UUIDString];
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;

    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = *(void **)(*(void *)(a1 + 32) + 80);
    uint64_t v15 = *(void *)(*(void *)(v13 + 8) + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1001AD798;
    v16[3] = &unk_100731C90;
    id v18 = v8;
    id v17 = v6;
    [v14 acquireAssertionOfType:1 withIdentifier:v15 reason:@"Unsigned pass provisioning" handler:v16];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

uint64_t sub_1001AD798(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unable to acquire provisioning assertion", v5, 2u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001AD82C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(a1 + 32) + 88);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001AD90C;
  v13[3] = &unk_100737728;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v16 = v7;
  uint64_t v17 = v10;
  id v14 = v9;
  id v15 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 performHandlerOnSharedWebServiceQueue:v13];
}

void sub_1001AD90C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001AD9CC;
  v7[3] = &unk_10073C990;
  long long v6 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v6;
  long long v9 = v6;
  id v8 = *(id *)(a1 + 40);
  [a2 passAtURL:v4 completion:v7];
}

void sub_1001AD9CC(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
  uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
  if (!v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to download pass after credential registration", v8, 2u);
    }

    uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v6 == 0);
}

void sub_1001ADA9C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [*(id *)(a1[4] + 104) secureElementIdentifiers];
  long long v9 = +[PKDownloadRemoteAssetConfiguration configurationWithSEIDs:v8];

  uint64_t v10 = *(void **)(*(void *)(a1[5] + 8) + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001ADBB4;
  v14[3] = &unk_10073C9B8;
  uint64_t v11 = a1[6];
  id v16 = v7;
  uint64_t v17 = v11;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  [v10 downloadRemoteAssetsWithConfiguration:v9 completion:v14];
}

void sub_1001ADBB4(void *a1, int a2, void *a3)
{
  id v6 = a3;
  if (a2)
  {
    id v7 = v6;
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
    (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
    id v6 = v7;
  }
}

void sub_1001ADC44(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PDDefaultQueue();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001ADD1C;
  v13[3] = &unk_100738B90;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v9;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v8, v13);
}

uint64_t sub_1001ADD1C(void *a1)
{
  [*(id *)(a1[4] + 72) writeCard:*(void *)(*(void *)(a1[7] + 8) + 40) source:4 error:0];
  uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

void sub_1001ADD7C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 88);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001ADE6C;
    v10[3] = &unk_10073CA08;
    long long v13 = *(_OWORD *)(a1 + 40);
    id v12 = v7;
    id v11 = v6;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_1001ADE6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 targetDevice];
  if (PKTargetDeviceSupportsExpress())
  {
    id v5 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) paymentPass];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001AE030;
    v8[3] = &unk_10073C9E0;
    int8x16_t v11 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
    id v10 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    [v4 paymentWebService:v3 handlePotentialExpressPass:v5 withCompletionHandler:v8];
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) uniqueID];
      *(_DWORD *)long long buf = 138412546;
      long long v13 = v7;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping enabling express for %@. Target device (%@) does not support express", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_1001AE030(void *a1, void *a2)
{
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = [a2 count] != 0;
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [*(id *)(*(void *)(a1[7] + 8) + 40) uniqueID];
    id v5 = (void *)v4;
    if (*(unsigned char *)(*(void *)(a1[6] + 8) + 24)) {
      CFStringRef v6 = @"Yes";
    }
    else {
      CFStringRef v6 = @"No";
    }
    int v8 = 138412546;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    CFStringRef v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Enabling express for %@. Success %@", (uint8_t *)&v8, 0x16u);
  }
  return (*(uint64_t (**)(void))(a1[5] + 16))();
}

void sub_1001AE15C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v13 = a3;
  CFStringRef v6 = a4;
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
  {
    id v7 = PKLocalizedShareableCredentialString(@"EXPRESS_NOTIFICATION_TITLE");
    int v8 = [*(id *)(*(void *)(a1[6] + 8) + 40) localizedDescription];
    uint64_t v9 = PKLocalizedShareableCredentialString(@"EXPRESS_NOTIFICATION_MESSAGE", @"%@", v8);

    __int16 v10 = [PDPassExpressModeEnabledUserNotification alloc];
    CFStringRef v11 = [*(id *)(*(void *)(a1[6] + 8) + 40) uniqueID];
    id v12 = [(PDPassExpressModeEnabledUserNotification *)v10 initWithTitle:v7 message:v9 forPassUniqueIdentifier:v11 hideDisableAction:2 promoteDuration:604800.0];

    [*(id *)(a1[4] + 96) insertUserNotification:v12];
  }
  v6[2](v6, v13, 0);
}

void sub_1001AE2A4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  [*(id *)(a1[5] + 80) invalidateAssertionOfType:1 withIdentifier:*(void *)(*(void *)(a1[6] + 8) + 40) handler:0];
  CFStringRef v6 = @"No";
  if (!*(void *)(*(void *)(a1[7] + 8) + 40) && ![v5 isCanceled]) {
    CFStringRef v6 = @"Yes";
  }
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(a1[7] + 8) + 40);
    int v9 = 138412546;
    CFStringRef v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Finished downloading car key after credential registration with success: %@. %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_1001AE838(uint64_t a1, int a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "failed";
    uint64_t v6 = *(void *)(a1 + 40);
    if (a2) {
      id v5 = "succeeded";
    }
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2080;
    CFStringRef v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Tracking credential (%@) %s", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t sub_1001AEFB0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 64) rangingSuspensionReasonForAppletSubcredential:*(void *)(a1 + 40) forPaymentApplicationID:*(void *)(a1 + 48)] != *(id *)(a1 + 64))
  {
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 64), "updateRangingSuspensionReasons:onCredential:forPaymentApplicationID:");
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56));
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 48) allObjects];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1001AF0BC;
    v6[3] = &unk_10073CAA8;
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(a1 + 40);
    void v6[4] = *(void *)(a1 + 32);
    uint64_t v9 = v3;
    id v7 = v4;
    id v8 = *(id *)(a1 + 56);
    [v2 enumerateObjectsUsingBlock:v6];
  }
  return 1;
}

void sub_1001AF0BC(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 appletSubcredentialManager:a1[4] didUpdateRangingSuspensionReasons:a1[7] forCredential:a1[5] forPaymentApplication:a1[6]];
  }
}

void sub_1001AF64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_alloc_init(PDPassAuxiliaryRegistrationRequirementStatus);
  [(PDPassAuxiliaryRegistrationRequirementStatus *)v5 setIsRegistered:0];
  [(PDPassAuxiliaryRegistrationRequirementStatus *)v5 setRequirementIdentifier:*(void *)a3];
  -[PDPassAuxiliaryRegistrationRequirementStatus setRegistrationBackoffCounter:](v5, "setRegistrationBackoffCounter:", [*(id *)(a3 + 8) integerValue]);
  [*(id *)(a1 + 32) addObject:v5];
}

void sub_1001AF8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_alloc_init(PDPassAuxiliaryRegistrationRequirementStatus);
  [(PDPassAuxiliaryRegistrationRequirementStatus *)v5 setRequirementIdentifier:*(void *)a3];
  -[PDPassAuxiliaryRegistrationRequirementStatus setIsRegistered:](v5, "setIsRegistered:", [*(id *)(a3 + 8) BOOLValue]);
  -[PDPassAuxiliaryRegistrationRequirementStatus setRegistrationBackoffCounter:](v5, "setRegistrationBackoffCounter:", [*(id *)(a3 + 16) integerValue]);
  [*(id *)(a1 + 32) addObject:v5];
}

void sub_1001B0018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B0038(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[PassAuxiliaryRegistrationRequirement alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v6 = v3;
    id v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(SQLiteEntity *)v6 setValue:v5 forProperty:@"e"];

    id v3 = v6;
  }
  else
  {
    *(unsigned char *)(v4 + 24) = 0;
  }
}

void sub_1001B021C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B0234(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[PassAuxiliaryRegistrationRequirement alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v6 = v3;
    id v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(SQLiteEntity *)v6 setValue:v5 forProperty:@"e"];

    id v3 = v6;
  }
  else
  {
    *(unsigned char *)(v4 + 24) = 0;
  }
}

void sub_1001B0930(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(NSObject **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001B0A04;
  v9[3] = &unk_1007367B8;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1001B0A04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32));
}

void sub_1001B0B4C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(NSObject **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001B0C20;
  v9[3] = &unk_1007367B8;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1001B0C20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32));
}

void sub_1001B0D80(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(NSObject **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001B0E54;
  v9[3] = &unk_1007367B8;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1001B0E54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001B0FA8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(NSObject **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001B107C;
  v9[3] = &unk_1007367B8;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1001B107C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001B11D0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(NSObject **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001B12A4;
  v9[3] = &unk_1007367B8;
  id v7 = *(id *)(a1 + 48);
  char v13 = a2;
  id v12 = v7;
  id v10 = v5;
  id v11 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1001B12A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001B1510(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001B15FC;
  v10[3] = &unk_100731F10;
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

uint64_t sub_1001B15FC(void *a1)
{
  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

id sub_1001B1B48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) invalidateWithSource:2 completion:0];
}

id sub_1001B1B58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) invalidateWithSource:2 completion:0];
}

uint64_t sub_1001B1C78(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001B1C90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001B1F88(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001B1FA0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001B25C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKASCAssociatedReaderIDReaderCA);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  objc_msgSend(*(id *)(a1 + 40), "pk_safelyAddObject:", v7);
}

void sub_1001B2748(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1001B2964(id a1, PKASCAssociatedReaderIDReaderCA *a2, id a3)
{
}

void sub_1001B296C(id a1, PKASCAssociatedReaderIDReaderCA *a2, id a3)
{
}

uint64_t sub_1001B2ABC(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithPropertyValues:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  id v3 = [v2 persistentID];
  uint64_t v4 = [*(id *)(a1 + 48) minimumAmounts];
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:v4 forRewardsCriteriaPID:v3 type:1 inDatabase:*(void *)(a1 + 40)];

  id v5 = [*(id *)(a1 + 48) maximumAmounts];
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:v5 forRewardsCriteriaPID:v3 type:2 inDatabase:*(void *)(a1 + 40)];

  return 1;
}

void sub_1001B2F90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v10 = objc_alloc_init((Class)PKPaymentOfferRewardsCriteria);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v10 withProperties:v7 values:a4];

  id v8 = +[PaymentOfferCurrencyAmount currencyAmountForRewardsCriteriaPID:a2 type:1 inDatabase:*(void *)(a1 + 40)];
  [v10 setMinimumAmounts:v8];

  id v9 = +[PaymentOfferCurrencyAmount currencyAmountForRewardsCriteriaPID:a2 type:2 inDatabase:*(void *)(a1 + 40)];
  [v10 setMaximumAmounts:v9];

  [*(id *)(a1 + 48) safelyAddObject:v10];
}

id sub_1001B31EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1001B3528(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_1001B3530(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferRewardsCriteria setEligibility:](v4, "setEligibility:", [a3 integerValue]);
}

void sub_1001B3588(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferRewardsCriteria setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1001B35E0(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_1001B35E8(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_1001B35F0(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
}

void sub_1001B35F8(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPaymentOfferRewardsCriteria *)v3 setRedemptionTermsURL:v4];
}

void sub_1001B3658(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  id v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = +[NSSet setWithArray:v6];
  [(PKPaymentOfferRewardsCriteria *)v4 setSupportedCurrencyCodes:v5];
}

void sub_1001B36EC(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentOfferRewardsCriteria setSupportedDeferredPayments:](v4, "setSupportedDeferredPayments:", [a3 BOOLValue]);
}

void sub_1001B3744(id a1, PKPaymentOfferRewardsCriteria *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentOfferRewardsCriteria setSupportedRecurringPayments:](v4, "setSupportedRecurringPayments:", [a3 BOOLValue]);
}

void PDNFSecureXPCEventHandleSecureElementEvent(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5 || (id v7 = v6) == 0) {
    __break(1u);
  }
  id v8 = (const char *)PKGetConstantStringNF_SECURE_XPC_EVENT_KEY_EVENT_SIMPLE_STRING();
  switch(a1)
  {
    case 0:
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      id string_ptr = v7;
      id v10 = [string_ptr countByEnumeratingWithState:&v58 objects:v66 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v59;
        do
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v59 != v12) {
              objc_enumerationMutation(string_ptr);
            }
            id v14 = *(void **)(*((void *)&v58 + 1) + 8 * i);
            if (objc_opt_respondsToSelector()) {
              [v14 secureElementDidRunScriptsFromTSM];
            }
          }
          id v11 = [string_ptr countByEnumeratingWithState:&v58 objects:v66 count:16];
        }
        while (v11);
      }
      goto LABEL_63;
    case 1:
      id v15 = xpc_dictionary_get_value(v5, v8);
      id string_ptr = (id)xpc_string_get_string_ptr(v15);
      if (string_ptr)
      {
        id v16 = [objc_alloc((Class)NSString) initWithUTF8String:string_ptr];
        uint64_t v17 = [v16 componentsSeparatedByString:@":"];
        if ([v17 count] == (id)2)
        {
          id v18 = [v17 objectAtIndexedSubscript:0];
          id string_ptr = [v17 objectAtIndexedSubscript:1];
        }
        else
        {
          id v18 = v16;
          id string_ptr = 0;
        }

        if (v18)
        {
          id v40 = v5;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          id v34 = v7;
          id v35 = [v34 countByEnumeratingWithState:&v54 objects:v65 count:16];
          if (v35)
          {
            id v36 = v35;
            uint64_t v37 = *(void *)v55;
            do
            {
              for (j = 0; j != v36; j = (char *)j + 1)
              {
                if (*(void *)v55 != v37) {
                  objc_enumerationMutation(v34);
                }
                uint64_t v39 = *(void **)(*((void *)&v54 + 1) + 8 * (void)j);
                if (objc_opt_respondsToSelector()) {
                  [v39 secureElementDidUpdateAppletStateForApplicationIdentifier:v18 keyIdentifier:string_ptr];
                }
              }
              id v36 = [v34 countByEnumeratingWithState:&v54 objects:v65 count:16];
            }
            while (v36);
          }

          id v5 = v40;
          goto LABEL_62;
        }
      }
      else
      {
      }
      id v18 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: applet state update event missing identifiers.", buf, 2u);
      }
LABEL_62:

LABEL_63:
LABEL_64:

      return;
    case 2:
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id string_ptr = v7;
      id v19 = [string_ptr countByEnumeratingWithState:&v49 objects:v64 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v50;
        do
        {
          for (k = 0; k != v20; k = (char *)k + 1)
          {
            if (*(void *)v50 != v21) {
              objc_enumerationMutation(string_ptr);
            }
            long long v23 = *(void **)(*((void *)&v49 + 1) + 8 * (void)k);
            if (objc_opt_respondsToSelector()) {
              [v23 secureElementExpressConfigurationNeedsUpdate];
            }
          }
          id v20 = [string_ptr countByEnumeratingWithState:&v49 objects:v64 count:16];
        }
        while (v20);
      }
      goto LABEL_63;
    case 3:
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      id string_ptr = v7;
      id v24 = [string_ptr countByEnumeratingWithState:&v45 objects:v63 count:16];
      if (v24)
      {
        id v25 = v24;
        uint64_t v26 = *(void *)v46;
        do
        {
          for (m = 0; m != v25; m = (char *)m + 1)
          {
            if (*(void *)v46 != v26) {
              objc_enumerationMutation(string_ptr);
            }
            uint64_t v28 = *(void **)(*((void *)&v45 + 1) + 8 * (void)m);
            if (objc_opt_respondsToSelector()) {
              [v28 secureElementExpressConfigurationDidFail];
            }
          }
          id v25 = [string_ptr countByEnumeratingWithState:&v45 objects:v63 count:16];
        }
        while (v25);
      }
      goto LABEL_63;
    case 4:
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id string_ptr = v7;
      id v29 = [string_ptr countByEnumeratingWithState:&v41 objects:v62 count:16];
      if (v29)
      {
        id v30 = v29;
        uint64_t v31 = *(void *)v42;
        do
        {
          for (n = 0; n != v30; n = (char *)n + 1)
          {
            if (*(void *)v42 != v31) {
              objc_enumerationMutation(string_ptr);
            }
            long long v33 = *(void **)(*((void *)&v41 + 1) + 8 * (void)n);
            if (objc_opt_respondsToSelector()) {
              [v33 secureElementRadioStateChanged];
            }
          }
          id v30 = [string_ptr countByEnumeratingWithState:&v41 objects:v62 count:16];
        }
        while (v30);
      }
      goto LABEL_63;
    default:
      goto LABEL_64;
  }
}

void sub_1001B4E40(_Unwind_Exception *a1)
{
}

id sub_1001B4F44(id a1, PKPaymentPass *a2)
{
  return [(PKPaymentPass *)a2 uniqueID];
}

void sub_1001B4F4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001B5044;
  v14[3] = &unk_10073CDB0;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 48);
  void v14[4] = *(void *)(a1 + 40);
  uint64_t v19 = v8;
  id v15 = v10;
  id v11 = *(id *)(a1 + 56);
  id v17 = v6;
  id v18 = v7;
  id v16 = v11;
  id v12 = v6;
  id v13 = v7;
  sub_10018E790(v9, v14);
}

void sub_1001B5044(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableSet);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v34 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = [*(id *)(*((void *)&v33 + 1) + 8 * i) passUniqueIdentifier];
        [v4 addObject:v10];
      }
      id v7 = [v5 countByEnumeratingWithState:&v33 objects:v37 count:16];
    }
    while (v7);
  }

  id v11 = objc_alloc((Class)NSMutableArray);
  id v12 = *(void **)(a1 + 32);
  id v13 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) firstObject];
  uint64_t v14 = [v12 sortedPassUniqueIdentifiersForGroupContainingPassWithUniqueIdentifier:v13];
  id v15 = (void *)v14;
  if (v14) {
    id v16 = (void *)v14;
  }
  else {
    id v16 = &__NSArray0__struct;
  }
  id v17 = [v11 initWithArray:v16];

  id v18 = [objc_alloc((Class)NSSet) initWithArray:v17];
  id v19 = [objc_alloc((Class)NSMutableArray) initWithArray:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  [*(id *)(a1 + 32) _readerIDPriorityForPasses:*(void *)(a1 + 40) readerID:*(void *)(a1 + 48)];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1001B52FC;
  v28[3] = &unk_10073CD88;
  id v29 = (id)objc_claimAutoreleasedReturnValue();
  id v30 = v4;
  id v31 = v18;
  id v32 = v17;
  id v20 = v17;
  id v21 = v18;
  id v22 = v4;
  id v23 = v29;
  [v19 sortUsingComparator:v28];
  uint64_t v24 = *(void *)(*(void *)(a1 + 72) + 8);
  id v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = v19;
  id v26 = v19;

  (*(void (**)(void, void, void, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), *(void *)(a1 + 56), 0, v27);
}

uint64_t sub_1001B52FC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] objectForKeyedSubscript:v5];
  id v8 = [v7 unsignedIntegerValue];
  if (v8) {
    unint64_t v9 = (unint64_t)v8;
  }
  else {
    unint64_t v9 = -1;
  }

  id v10 = [a1[4] objectForKeyedSubscript:v6];
  id v11 = [v10 unsignedIntegerValue];
  if (v11) {
    unint64_t v12 = (unint64_t)v11;
  }
  else {
    unint64_t v12 = -1;
  }

  if (v9 == v12)
  {
    unsigned int v13 = [a1[5] containsObject:v5];
    unsigned int v14 = [a1[5] containsObject:v6];
    if (v13 == v14
      && (unsigned int v13 = [a1[6] containsObject:v5],
          unsigned int v14 = [a1[6] containsObject:v6],
          v13 == v14))
    {
      id v16 = [a1[7] indexOfObject:v5];
      id v17 = [a1[7] indexOfObject:v6];
      uint64_t v18 = -1;
      if (v16 >= v17) {
        uint64_t v18 = 1;
      }
      if (v16 == v17) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v18;
      }
    }
    else if ((v13 & (v14 ^ 1)) != 0)
    {
      uint64_t v15 = -1;
    }
    else
    {
      uint64_t v15 = 1;
    }
  }
  else if (v9 < v12)
  {
    uint64_t v15 = -1;
  }
  else
  {
    uint64_t v15 = 1;
  }

  return v15;
}

void sub_1001B5430(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = a4;
  BOOL v9 = (*(unsigned char *)(a1 + 72) || *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    && [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count] == 0;
  if (![*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count] && *(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), "addObject:");
  }
  id v10 = [objc_alloc((Class)PKFieldMetadata) initWithAssociatedPassIdentifiers:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) shouldIgnoreField:v9 foundExplicitlyRequestedPass:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)];
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
  unint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  v8[2](v8, v7, 0);
}

uint64_t sub_1001B5558(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1001B6654(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = *(void **)(a1 + 40);
  id v7 = a3;
  id v13 = [v6 _sharingMessageForProperties:v7 values:a4];
  id v8 = [v7 indexOfObject:@"a"];

  BOOL v9 = v13;
  if (v13) {
    BOOL v10 = v8 == (id)0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    id v11 = *(id *)(a4 + 8 * (void)v8);
    id v12 = [*(id *)(a1 + 32) objectForKeyedSubscript:v11];
    if (!v12)
    {
      id v12 = objc_alloc_init((Class)NSMutableArray);
      [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:v11];
    }
    [v12 addObject:v13];

    BOOL v9 = v13;
  }
}

void sub_1001B684C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 40), "_sharingMessageForProperties:values:");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) safelyAddObject:v2];
}

void sub_1001B69B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001B69C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [(id)objc_opt_class() _sharingMessageForProperties:v5 values:a3];

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_1001B6DC4(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) indexOfObject:a2];
  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL) {
    id v4 = 0;
  }
  else {
    id v4 = *(id *)(*(void *)(a1 + 40) + 8 * (void)v3);
  }
  return v4;
}

void sub_1001B76C8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1001B7850(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKPeerPaymentAssociatedAccountRemovalRecord);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  uint64_t v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    uint64_t v7 = v8;
  }
}

void sub_1001B79A4(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
}

void sub_1001B79AC(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAssociatedAccountRemovalRecord setReason:](v4, "setReason:", [a3 integerValue]);
}

void sub_1001B7A04(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentAssociatedAccountRemovalRecord *)v3 setDate:v4];
}

void sub_1001B7A64(id a1, PKPeerPaymentAssociatedAccountRemovalRecord *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAssociatedAccountRemovalRecord setHasPresentedNotification:](v4, "setHasPresentedNotification:", [a3 BOOLValue]);
}

void sub_1001B821C(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v20 = a3;
  id v23 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x3032000000;
  v42[3] = sub_10002097C;
  v42[4] = sub_100020FB0;
  id v43 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v38 objects:v46 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        BOOL v9 = objc_msgSend(v8, "identifier", v20);
        BOOL v10 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          long long v45 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updating iso blob with sub credential identifier %@", buf, 0xCu);
        }

        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_1001B86FC;
        v37[3] = &unk_10073CEC8;
        v37[4] = v42;
        id v11 = objc_retainBlock(v37);
        id v12 = [*(id *)(a1 + 40) objectForKey:v9];
        if (v12)
        {
          id v13 = [*(id *)(a1 + 48) objectForKey:v9];
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472;
          v28[2] = sub_1001B8714;
          v28[3] = &unk_10073CF18;
          void v28[4] = *(void *)(a1 + 56);
          id v29 = v12;
          id v14 = v13;
          id v30 = v14;
          id v31 = v8;
          id v32 = *(id *)(a1 + 64);
          id v33 = v22;
          id v15 = *(id *)(a1 + 72);
          uint64_t v16 = *(void *)(a1 + 88);
          id v34 = v15;
          uint64_t v36 = v16;
          long long v35 = v11;
          [v23 addOperation:v28];
        }
        else
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            long long v45 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unable to find corresponding iso blob for identifier %@", buf, 0xCu);
          }

          id v14 = +[NSError errorWithDomain:PKPassKitErrorDomain code:3 userInfo:0];
          ((void (*)(void *, id))v11[2])(v11, v14);
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v38 objects:v46 count:16];
    }
    while (v5);
  }

  id v17 = +[NSNull null];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001B887C;
  v24[3] = &unk_10073CF40;
  id v18 = v20;
  id v25 = v18;
  id v26 = *(id *)(a1 + 80);
  uint64_t v27 = v42;
  id v19 = [v23 evaluateWithInput:v17 completion:v24];

  _Block_object_dispose(v42, 8);
}

void sub_1001B86C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1001B86FC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (v5) {
    a2 = v4;
  }
  objc_storeStrong(v3, a2);
}

void sub_1001B8714(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 40);
  id v17 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001B8828;
  v18[3] = &unk_10073CEF0;
  uint64_t v13 = *(void *)(a1 + 96);
  id v20 = *(id *)(a1 + 88);
  id v21 = v7;
  id v19 = v6;
  id v14 = v6;
  id v15 = v7;
  [v17 _updateISO18013Blob:v16 metadata:v8 subcredential:v9 paymentPass:v10 store:v11 priorSubcredentialIdentifiers:v12 cardType:v13 completion:v18];
}

uint64_t sub_1001B8828(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

uint64_t sub_1001B887C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1001B8A24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001B8AF4;
  v11[3] = &unk_10073CF90;
  uint64_t v9 = *(void **)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  id v13 = v7;
  id v10 = v7;
  [v9 _isoCredentialIdentifierForSubCredentialId:a3 cardType:v8 store:a2 completion:v11];
}

uint64_t sub_1001B8AF4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) safelyAddObject:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

id sub_1001B8B44(uint64_t a1)
{
  return [*(id *)(a1 + 32) deleteCredentialsForCredentialIds:*(void *)(a1 + 40) completion:0];
}

void sub_1001B8E38(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v16 = a3;
  id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x3032000000;
  v34[3] = sub_10002097C;
  v34[4] = sub_100020FB0;
  id v35 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = *(id *)(a1 + 32);
  id v6 = [obj countByEnumeratingWithState:&v30 objects:v36 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v31;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v31 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v30 + 1) + 8 * (void)v8);
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_1001B9130;
        v24[3] = &unk_10073D008;
        int8x16_t v19 = *(int8x16_t *)(a1 + 32);
        id v10 = (id)v19.i64[0];
        int8x16_t v25 = vextq_s8(v19, v19, 8uLL);
        uint64_t v26 = v9;
        id v11 = v18;
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v28 = v34;
        uint64_t v29 = v12;
        id v27 = v11;
        [v5 addOperation:v24];

        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v30 objects:v36 count:16];
    }
    while (v6);
  }

  id v13 = +[NSNull null];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001B92C0;
  v20[3] = &unk_10073CF40;
  id v14 = v16;
  id v21 = v14;
  id v22 = *(id *)(a1 + 48);
  id v23 = v34;
  id v15 = [v5 evaluateWithInput:v13 completion:v20];

  _Block_object_dispose(v34, 8);
}

void sub_1001B9104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void sub_1001B9130(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = [*(id *)(a1 + 40) objectForKey:*(void *)(a1 + 48)];
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1001B9244;
  v16[3] = &unk_1007307C0;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  id v18 = v7;
  uint64_t v19 = v12;
  id v17 = v6;
  id v14 = v6;
  id v15 = v7;
  [v8 _updateISO18013Blob:v9 metadata:0 subcredential:v10 paymentPass:0 store:v11 priorSubcredentialIdentifiers:0 cardType:v13 completion:v16];
}

void sub_1001B9244(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

uint64_t sub_1001B92C0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

void sub_1001B946C(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 32);
  if (v3)
  {
    *(void *)(v2 + 32) = v3 - 1;
  }
  else
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempted over-decrement access counter", v7, 2u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (!*(void *)(v5 + 32))
  {
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0;

    uint64_t v5 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
}

void sub_1001B96E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v17 = v5;
      __int16 v18 = 2112;
      uint64_t v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ISO credential identifier %@ found for access subCredentialId %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 40);
    uint64_t v10 = PKISO18013CredentialStoragePartitionUnifiedAccess;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001B9898;
    v11[3] = &unk_10073D080;
    id v12 = v9;
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 56);
    [v12 createCredentialInPartition:v10 options:0 completion:v11];
  }
}

void sub_1001B9898(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error creating ISO credential for subCredentialId: %@ error: %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001B9A30;
    v11[3] = &unk_10073D058;
    id v12 = v5;
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    [v9 associateExternalPresentmentKeyWithCredential:v12 publicKeyIdentifier:v10 completion:v11];
  }
}

void sub_1001B9A30(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = a1[5];
      int v9 = 138412546;
      uint64_t v10 = v6;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error associating ISO credential for subCredentialId: %@ error: %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else if (v5)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = (void *)a1[5];
    int v9 = 138412546;
    uint64_t v10 = v7;
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ISO credential identifier %@ create for access, and linked to subCredentialId %@", (uint8_t *)&v9, 0x16u);
  }

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1001B9C08(uint64_t a1, void *a2)
{
  id v4 = PKISO18013CredentialStoragePartitionIdentity;
  id v5 = a2;
  id v6 = objc_alloc_init((Class)DCCredentialOptions);
  [v6 setReaderAuthenticationPolicy:1];
  [v6 setPresentmentAuthPolicy:2];
  [v6 setPayloadProtectionPolicy:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001B9D14;
  v7[3] = &unk_10073D0D0;
  id v8 = v4;
  id v9 = *(id *)(a1 + 32);
  [v5 createCredentialInPartition:v4 options:v6 completion:v7];
}

void sub_1001B9D14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      id v9 = *(void **)(a1 + 32);
      int v11 = 138412546;
      id v12 = v9;
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error creating ISO credential for partition: %@ error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else if (v8)
  {
    uint64_t v10 = *(void **)(a1 + 32);
    int v11 = 138412546;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ISO credential identifier partition: %@ create for %@", (uint8_t *)&v11, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BA118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001BA148(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001BA214;
  v11[3] = &unk_10073D120;
  long long v14 = *(_OWORD *)(a1 + 40);
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  [v8 getGlobalThirdPartyProgenitorKeyAttestation:v11];
}

void sub_1001BA214(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v14 = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1[6] + 8);
    id v7 = v5;
    BOOL v8 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v7;
LABEL_3:

    goto LABEL_5;
  }
  uint64_t v9 = [a2 attestationData];
  uint64_t v10 = *(void *)(a1[7] + 8);
  int v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  if (!a2)
  {
    id v12 = [objc_alloc((Class)NSError) initWithDomain:PKIdentityErrorDomain code:0 userInfo:0];
    uint64_t v13 = *(void *)(a1[6] + 8);
    BOOL v8 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
    goto LABEL_3;
  }
LABEL_5:
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_1001BA2FC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001BA3C8;
  v11[3] = &unk_100731998;
  long long v14 = *(_OWORD *)(a1 + 40);
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  [v8 boundAppletPresentmentACL:v11];
}

void sub_1001BA3C8(void *a1, void *a2, void *a3)
{
  id v13 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = *(void *)(a1[6] + 8);
    id v9 = v6;
    id v10 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v9;
LABEL_3:

    goto LABEL_5;
  }
  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), a2);
  if (!*(void *)(*(void *)(a1[7] + 8) + 40))
  {
    id v11 = [objc_alloc((Class)NSError) initWithDomain:PKIdentityErrorDomain code:0 userInfo:0];
    uint64_t v12 = *(void *)(a1[6] + 8);
    id v10 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
    goto LABEL_3;
  }
LABEL_5:
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

uint64_t sub_1001BA4C8(void *a1)
{
  id v3 = a1 + 4;
  uint64_t v2 = a1[4];
  if (*(void *)(*(void *)(v3[1] + 8) + 40)) {
    return (*(uint64_t (**)(uint64_t, void, void))(v2 + 16))(v2, 0, 0);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void))(v2 + 16))(v2, *(void *)(*(void *)(a1[6] + 8) + 40), *(void *)(*(void *)(a1[7] + 8) + 40));
  }
}

void sub_1001BAAA8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1001BAAEC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001BABD8;
  v15[3] = &unk_10073D170;
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  id v17 = v7;
  uint64_t v18 = v11;
  id v16 = v6;
  id v13 = v6;
  id v14 = v7;
  [v8 _isoCredentialIdentifierForSubCredentialId:v9 cardType:v12 store:v10 completion:v15];
}

void sub_1001BABD8(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) == 0);
}

void sub_1001BAC54(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001BAD34;
  v13[3] = &unk_10073D1C0;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 propertiesOfCredential:v9 completion:v13];
}

uint64_t sub_1001BAD34(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 payloadIngestionHash];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v6();
}

void sub_1001BAD94(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = [*(id *)(a1 + 48) isoFormat];
  id v12 = v11;
  if (v11)
  {
    id v13 = v11;
    if (v13 != @"unencrypted")
    {
      id v14 = v13;
      unsigned __int8 v15 = [(__CFString *)v13 isEqualToString:@"unencrypted"];

      if ((v15 & 1) == 0)
      {
        id v20 = v14;
        if (v20 == @"ecv3sh_encrypted"
          || (id v21 = v20,
              unsigned __int8 v22 = [(__CFString *)v20 isEqualToString:@"ecv3sh_encrypted"],
              v21,
              (v22 & 1) != 0))
        {
          uint64_t v16 = 1;
          goto LABEL_5;
        }
        id v23 = v21;
        if (v23 == @"hpke_encrypted"
          || (uint64_t v24 = v23,
              unsigned __int8 v25 = [(__CFString *)v23 isEqualToString:@"hpke_encrypted"],
              v24,
              (v25 & 1) != 0))
        {
          uint64_t v16 = 2;
          goto LABEL_5;
        }
        uint64_t v26 = v24;
        if (v26 == @"aliro"
          || (id v27 = v26,
              unsigned __int8 v28 = [(__CFString *)v26 isEqualToString:@"aliro"],
              v27,
              (v28 & 1) != 0))
        {
          uint64_t v16 = 4;
          goto LABEL_5;
        }
        uint64_t v29 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v36 = v27;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Unknown ISO format %@", buf, 0xCu);
        }
      }
    }
  }
  uint64_t v16 = 0;
LABEL_5:

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1001BB01C;
  v30[3] = &unk_10073D1E8;
  uint64_t v34 = *(void *)(a1 + 72);
  id v17 = *(id *)(a1 + 56);
  id v32 = v6;
  id v33 = v7;
  id v31 = v17;
  id v18 = v6;
  id v19 = v7;
  [v9 replacePayloadOfCredential:v8 withPayload:v10 format:v16 completion:v30];
}

void sub_1001BB01C(void *a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), a2);
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      int v8 = 138412546;
      id v9 = v4;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Could not replace ISO blob with error %@ for credential %@", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)a1[4];
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Replaced ISO blob for credential %@", (uint8_t *)&v8, 0xCu);
    }
  }

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1001BB184(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  id v9 = *(void **)(a1 + 32);
  unint64_t v10 = (unint64_t)[*(id *)(a1 + 40) state];
  if (v10 > 0xF) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = qword_1005B3608[v10];
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001BB298;
  v15[3] = &unk_10073D238;
  id v12 = *(id *)(a1 + 48);
  id v17 = v6;
  id v18 = v7;
  id v16 = v12;
  id v13 = v6;
  id v14 = v7;
  [v9 setStateOfCredential:v8 to:v11 completion:v15];
}

void sub_1001BB298(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      id v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Could not update state of ISO blob with error %@ for credential %@.", (uint8_t *)&v6, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001BB37C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  __int16 v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BB45C;
  v12[3] = &unk_10073D260;
  long long v15 = *(_OWORD *)(a1 + 48);
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  [v8 propertiesOfCredential:v9 completion:v12];
}

void sub_1001BB45C(uint64_t a1, void *a2)
{
  id v5 = [a2 payloadIngestionHash];
  int v3 = PKEqualObjects() ^ 1;
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  if (!*(unsigned char *)(v4 + 24)) {
    LOBYTE(v3) = 0;
  }
  *(unsigned char *)(v4 + 24) = v3;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BB4EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(void, void, void))v9;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      id v16 = 0;
      id v12 = +[NSJSONSerialization JSONObjectWithData:v11 options:0 error:&v16];
      id v13 = v16;
      if (!v13 && v12)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v14 = [v12 objectForKey:PKPassBundleISO18013BlobMetadataElementsChanged];
          if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            [*(id *)(a1 + 40) _elementsChanged:v14 forPass:*(void *)(a1 + 48)];
          }
          else
          {
            long long v15 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Could not find elements changed in metadata", buf, 2u);
            }
          }
          id v13 = 0;
LABEL_18:

          ((void (**)(void, id, void))v10)[2](v10, v8, 0);
          goto LABEL_19;
        }
        id v13 = 0;
      }
    }
    else
    {
      id v13 = 0;
      id v12 = 0;
    }
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Could not read ISOBlob metadata with error %@", buf, 0xCu);
    }
    goto LABEL_18;
  }
  (*((void (**)(id, id, void))v9 + 2))(v9, v8, 0);
LABEL_19:
}

uint64_t sub_1001BB724(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1001BB804(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001BB958;
  v15[3] = &unk_10073D2D8;
  id v16 = a3;
  id v17 = *(id *)(a1 + 48);
  id v6 = v16;
  id v7 = objc_retainBlock(v15);
  id v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BBA9C;
  v12[3] = &unk_10073D328;
  id v13 = v5;
  id v14 = v7;
  id v10 = v5;
  uint64_t v11 = v7;
  [v9 _isoCredentialIdentifierForSubCredentialId:v8 cardType:3 store:v10 completion:v12];
}

void sub_1001BB958(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void (**)(uint64_t))(v8 + 16);
  id v10 = a3;
  id v11 = a2;
  v9(v8);
  id v12 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (v10) {
      BOOL v13 = v11 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    CFStringRef v14 = @"N";
    if (!v13) {
      CFStringRef v14 = @"Y";
    }
    int v15 = 138412546;
    CFStringRef v16 = v14;
    __int16 v17 = 2112;
    id v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Generated ISO encryption certificate - generated keys: %@ error: %@", (uint8_t *)&v15, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BBA9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1001BBB9C;
    v6[3] = &unk_10073D300;
    int v3 = *(void **)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    [v3 generateDeviceEncryptionKeyForCredential:a2 completion:v6];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = +[NSError errorWithDomain:PKPaymentErrorDomain code:0 userInfo:0];
    (*(void (**)(uint64_t, void, void, id))(v4 + 16))(v4, 0, 0, v5);
  }
}

void sub_1001BBB9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v8 = [v6 attestation];
  id v7 = [v6 publicKeyCOSEKey];

  if (!v5 && v8 && v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    if (!v5)
    {
      id v5 = +[NSError errorWithDomain:PKPaymentErrorDomain code:0 userInfo:0];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1001BBD54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BBE40;
  v12[3] = &unk_10073D3A0;
  id v13 = v5;
  id v14 = v6;
  uint64_t v9 = *(void *)(a1 + 56);
  id v15 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  [v7 _isoCredentialIdentifierForSubCredentialId:v8 cardType:v9 store:v11 completion:v12];
}

void sub_1001BBE40(uint64_t a1, uint64_t a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001BBEF0;
  v5[3] = &unk_10073D378;
  uint64_t v4 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  [v4 generateDeviceEncryptionKeyForCredential:a2 completion:v5];
}

void sub_1001BBEF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Generated encryption key: %@ error: %@", (uint8_t *)&v8, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BC0B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BC1A0;
  v12[3] = &unk_10073D3A0;
  id v13 = v5;
  id v14 = v6;
  uint64_t v9 = *(void *)(a1 + 56);
  id v15 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  [v7 _isoCredentialIdentifierForSubCredentialId:v8 cardType:v9 store:v11 completion:v12];
}

void sub_1001BC1A0(uint64_t a1, uint64_t a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001BC250;
  v5[3] = &unk_10073D378;
  uint64_t v4 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  [v4 generateKeySigningKeyForCredential:a2 completion:v5];
}

void sub_1001BC250(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Generated key signing key: %@ error: %@", (uint8_t *)&v8, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BC424(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BC518;
  v12[3] = &unk_10073D3F0;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  id v13 = v5;
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  [v7 _isoCredentialIdentifierForSubCredentialId:v8 cardType:v9 store:v11 completion:v12];
}

void sub_1001BC518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001BC5D0;
  v6[3] = &unk_10073D3C8;
  id v5 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  [v5 generatePresentmentKeysForCredential:a2 numKeys:v4 completion:v6];
}

void sub_1001BC5D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    id v9 = v5;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Generated presentment key: %@ error: %@", (uint8_t *)&v8, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BC814(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001BC8E4;
  v7[3] = &unk_10073D440;
  id v9 = a3;
  id v5 = *(void **)(a1 + 32);
  id v8 = v5;
  id v10 = *(id *)(a1 + 40);
  id v6 = v9;
  [a2 propertiesOfCredential:v5 completion:v7];
}

void sub_1001BC8E4(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = a1[5];
  id v7 = *(void (**)(uint64_t))(v6 + 16);
  id v8 = a2;
  v7(v6);
  unsigned int v9 = [v8 needsPresentmentKeyRefresh];

  id v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = a1[4];
    int v12 = 138412802;
    uint64_t v13 = v11;
    __int16 v14 = 1024;
    unsigned int v15 = v9;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Needs presentment key refresh for credential %@: %d, error: %@", (uint8_t *)&v12, 0x1Cu);
  }

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1001BCFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_1001BD004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v4)
  {
    if (v4 != a2 && *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0)
    {
      uint64_t v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v_Block_object_dispose(&STACK[0x400], 8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Multiple element categories changed", (uint8_t *)&v8, 2u);
      }

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
  else
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      uint64_t v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Category changed: %lu", (uint8_t *)&v8, 0xCu);
    }

    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  }
}

void sub_1001BD1E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  id v5 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001BD310;
  v10[3] = &unk_10073D4E0;
  id v11 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001BD6D0;
  v7[3] = &unk_10073D508;
  id v8 = v11;
  id v9 = *(id *)(a1 + 40);
  id v6 = v11;
  [v5 _performOperationOnCredentials:v3 operation:v10 completion:v7];
}

void sub_1001BD310(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BD40C;
  v12[3] = &unk_10073D4B8;
  id v16 = a4;
  id v13 = v8;
  id v14 = v7;
  id v15 = *(id *)(a1 + 32);
  id v9 = v7;
  id v10 = v16;
  id v11 = v8;
  [v9 propertiesOfCredential:v11 completion:v12];
}

void sub_1001BD40C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v17 = v8;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to fetch properties for %@, received error: %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v9 = *(void **)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1001BD5B4;
    v11[3] = &unk_1007305C8;
    id v12 = v9;
    id v13 = v5;
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 56);
    [v10 checkCompletenessOfCredential:v12 completion:v11];
  }
}

void sub_1001BD5B4(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412546;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to fetch completeness for %@, received error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    id v6 = +[PKSEConsistencyCheckDeviceCredential deviceCredentialWithISOCredentialProperties:*(void *)(a1 + 40) hasKeyMeterial:a2 < 2];
    [*(id *)(a1 + 48) addObject:v6];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_1001BD6D0(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    int v5 = 134217984;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "allCredentialsWithCompletion found %lu credentials", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BD7A0(id a1, DCCredentialStore *a2, NSString *a3, id a4)
{
  id v6 = a2;
  uint64_t v7 = a3;
  id v8 = a4;
  uint64_t v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Deleting ISO18013 credential with identifier: %@", buf, 0xCu);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BD8F0;
  v12[3] = &unk_10073D508;
  id v13 = v7;
  id v14 = v8;
  id v10 = v8;
  id v11 = v7;
  [(DCCredentialStore *)v6 deleteCredential:v11 completion:v12];
}

void sub_1001BD8F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to delete ISO18013 credential %@ with error: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BDA5C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    id v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updating ISO18013 credential with identifier: %@ to state: %lu", buf, 0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001BDBD0;
  v15[3] = &unk_10073D508;
  id v16 = v8;
  id v17 = v9;
  id v13 = v9;
  id v14 = v8;
  [v7 setStateOfCredential:v14 to:v12 completion:v15];
}

void sub_1001BDBD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to update ISO18013 credential %@ with error: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BDD98(id *a1, void *a2, void *a3)
{
  id v14 = a2;
  id v13 = a3;
  id v15 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x3032000000;
  void v29[3] = sub_10002097C;
  void v29[4] = sub_100020FB0;
  id v30 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v5 = a1[4];
  id v6 = [v5 countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v26;
    do
    {
      __int16 v8 = 0;
      do
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v25 + 1) + 8 * (void)v8);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_1001BE07C;
        v20[3] = &unk_10073D5B8;
        id v23 = a1[5];
        id v21 = v14;
        uint64_t v22 = v9;
        uint64_t v24 = v29;
        objc_msgSend(v15, "addOperation:", v20, v13);

        __int16 v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v6);
  }

  id v10 = +[NSNull null];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1001BE1EC;
  v16[3] = &unk_10073CF40;
  id v11 = v13;
  id v17 = v11;
  id v18 = a1[6];
  id v19 = v29;
  id v12 = [v15 evaluateWithInput:v10 completion:v16];

  _Block_object_dispose(v29, 8);
}

void sub_1001BE050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1001BE07C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v9 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v10 = a1[4];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001BE16C;
  v15[3] = &unk_10073D590;
  uint64_t v11 = a1[7];
  id v17 = v7;
  uint64_t v18 = v11;
  id v16 = v6;
  id v12 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v8 + 16);
  id v13 = v6;
  id v14 = v7;
  v12(v8, v10, v9, v15);
}

void sub_1001BE16C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v4 + 40);
  id v5 = (id *)(v4 + 40);
  id v6 = v7;
  if (v7) {
    a2 = v6;
  }
  objc_storeStrong(v5, a2);
  id v8 = v2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1001BE1EC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1001BE2E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = PKISO18013CredentialStoragePartitionIdentity;
  id v7 = a2;
  id v8 = [&__NSArray0__struct arrayByAddingObject:v6];
  uint64_t v9 = [v8 arrayByAddingObject:PKISO18013CredentialStoragePartitionUnifiedAccess];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001BE3FC;
  v11[3] = &unk_10073D608;
  id v12 = v5;
  id v13 = *(id *)(a1 + 32);
  id v10 = v5;
  [v7 credentialIdentifiersInPartitions:v9 completion:v11];
}

void sub_1001BE3FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001BE4D4;
  v5[3] = &unk_100738B40;
  id v6 = objc_alloc_init((Class)NSMutableArray);
  id v4 = v6;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_1001BE4D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:");
}

void sub_1001BE5CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 64);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001BE6E8;
  v12[3] = &unk_10073D658;
  id v13 = v5;
  id v14 = *(id *)(a1 + 48);
  id v16 = v6;
  id v15 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 56);
  id v10 = v6;
  id v11 = v5;
  [v7 _isoCredentialIdentifierForSubCredentialId:v8 cardType:v9 store:v11 completion:v12];
}

void sub_1001BE6E8(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1001BE7C8;
  v6[3] = &unk_10073D630;
  id v9 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 64);
  [v4 generateAccountKeyAuthorizationForCredential:a2 accountKeyIdentifier:v5 completion:v6];
}

void sub_1001BE7C8(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  (*(void (**)(void))(a1[6] + 16))();
  id v10 = PKLogFacilityTypeGetObject();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8 && v7 && !v9)
  {
    if (v11)
    {
      uint64_t v12 = a1[4];
      uint64_t v13 = a1[5];
      int v18 = 138412546;
      uint64_t v19 = v12;
      __int16 v20 = 2112;
      uint64_t v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Generate accountKAK for ISO18013 credential %@ with identifier: %@", (uint8_t *)&v18, 0x16u);
    }

    uint64_t v14 = a1[7];
    id v24 = v8;
    id v15 = +[NSArray arrayWithObjects:&v24 count:1];
    (*(void (**)(uint64_t, id, void *, void))(v14 + 16))(v14, v7, v15, 0);
  }
  else
  {
    if (v11)
    {
      uint64_t v16 = a1[4];
      uint64_t v17 = a1[5];
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 2112;
      id v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to generate accountKAK for ISO18013 credential %@ with identifier %@. Error: %@", (uint8_t *)&v18, 0x20u);
    }

    (*(void (**)(void))(a1[7] + 16))();
  }
}

void sub_1001BEA4C(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001BEB1C;
  v7[3] = &unk_10073D6A8;
  id v9 = a3;
  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = v5;
  id v10 = *(id *)(a1 + 40);
  id v6 = v9;
  [a2 isAccountKeySigningKeyAvailableForAccountKeyIdentifier:v5 completion:v7];
}

void sub_1001BEB1C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void))(a1[5] + 16))();
  if (v4)
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to check accountKAK existence for identifier: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
}

id _SQLValueForIdentifiers(void *a1)
{
  id v1 = a1;
  if (!v1
    || (+[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:0], (uint64_t v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v2 = +[NSNull null];
  }

  return v2;
}

id _IdentifiersForSQLValue(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc((Class)NSSet);
  uint64_t v3 = objc_opt_class();
  id v4 = objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(), 0);
  uint64_t v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v4 fromData:v1 error:0];

  return v5;
}

void sub_1001BEF04(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[PaymentSetupFeature alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(PaymentSetupFeature *)v5 paymentSetupFeature];
  [v3 addObject:v4];
}

id sub_1001BF79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1001BFB74(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  _IdentifiersForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentSetupFeature *)v4 setIdentifiers:v5];
}

void sub_1001BFBD8(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_1001BFBE0(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentSetupFeature setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1001BFC38(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentSetupFeature setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1001BFC90(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentSetupFeature setSupportedOptions:](v4, "setSupportedOptions:", [a3 integerValue]);
}

void sub_1001BFCE8(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentSetupFeature setSupportedDevices:](v4, "setSupportedDevices:", [a3 integerValue]);
}

void sub_1001BFD40(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_1001BFD48(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_1001BFD50(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentSetupFeature setFeatureIdentifier:](v4, "setFeatureIdentifier:", [a3 integerValue]);
}

void sub_1001BFDA8(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_1001BFDB0(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentSetupFeature *)v3 setLastUpdated:v4];
}

void sub_1001BFE10(id a1, PKPaymentSetupFeature *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentSetupFeature *)v3 setExpiry:v4];
}

void sub_1001BFE70(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentSetupFeature setProductType:](v4, "setProductType:", [a3 integerValue]);
}

void sub_1001BFEC8(id a1, PKPaymentSetupFeature *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentSetupFeature setProductState:](v4, "setProductState:", [a3 integerValue]);
}

void sub_1001BFF20(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_1001BFF28(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_1001BFF30(id a1, PKPaymentSetupFeature *a2, id a3)
{
}

void sub_1001C02D4(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v5 = a3;
  if (a1 && v22 && v5)
  {
    id v6 = v5;
    int v7 = sub_1001C04D4(a1, 0);
    id v8 = [objc_alloc((Class)NSURL) initWithString:v6];
    uint64_t v9 = [v8 host];
    id v10 = (void *)v9;
    if (v8 && v9)
    {
      id v21 = [objc_alloc((Class)NSURLComponents) initWithURL:v8 resolvingAgainstBaseURL:1];
      BOOL v11 = [v21 URL];
      uint64_t v12 = [v11 pathComponents];

      uint64_t v13 = [v12 lastObject];

      id v14 = objc_alloc((Class)NSURL);
      id v15 = [v8 scheme];
      uint64_t v16 = +[NSString stringWithFormat:@"%@://%@", v15, v10];
      id v17 = [v14 initWithString:v16];

      int v18 = [v8 fragment];
      if (v18)
      {
        id v19 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v18 options:0];
        if (v19) {
          [v22 setPayloadEncryptionPassword:v19];
        }
      }
      int v7 = v17;
    }
    else
    {
      uint64_t v13 = v6;
    }
    if (v13) {
      id v20 = v13;
    }
    else {
      id v20 = v6;
    }
    [v22 setTransportIdentifier:v20];
    [v22 setRelayServerHost:v7];
  }
}

id sub_1001C04D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [*(id *)(a1 + 8) sharedWebServiceContext];
    id v5 = v4;
    if (v3)
    {
      id v6 = [v4 regionForIdentifier:v3];
      int v7 = v6;
      if (v6)
      {
        id v8 = [v6 regionCode];
      }
      else
      {
        id v8 = v3;
      }
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = PKCurrentRegion();
    }
    id v10 = [v5 configuration];
    BOOL v11 = [v10 relayServerHostForRegion:v9];

    if (!v11)
    {
      BOOL v11 = PKSharingRelayServerURLForCurrentEnvironment();
    }
    id v12 = objc_alloc((Class)NSURL);
    uint64_t v13 = [@"https://" stringByAppendingString:v11];
    id v14 = [v12 initWithString:v13];
  }
  else
  {
    id v14 = 0;
  }

  return v14;
}

void sub_1001C0870(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 32) transportIdentifier];
    int v7 = PKSharingLoggableMailboxAddress();
    int v8 = 138543619;
    uint64_t v9 = v7;
    __int16 v10 = 2113;
    id v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "RelayServer: pinged remote mailbox %{public}@ with result: %{private}@", (uint8_t *)&v8, 0x16u);
  }
  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v4 == 0, v4);
}

void sub_1001C0980(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(void **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001C3EF0;
    v10[3] = &unk_10073DB18;
    id v11 = v7;
    id v12 = v8;
    uint64_t v13 = a3;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
}

void sub_1001C0AEC(PDSharingMailboxPayload *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    __int16 v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [v7 transportIdentifier];
      id v12 = PKSharingLoggableMailboxAddress();
      *(_DWORD *)long long buf = 138543619;
      id v31 = v12;
      __int16 v32 = 2113;
      id v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "RelayServer: Putting payload for remote mailbox %{public}@ \n\n %{private}@", buf, 0x16u);
    }
    [v7 setProvisioningType:2];
    uint64_t v13 = [PDSharingRelayServerUpdateMailboxRequest alloc];
    id v14 = [v7 transportIdentifier];
    id v15 = [v7 relayServerHost];
    uint64_t v16 = [(PDSharingRelayServerRequest *)v13 initWithMailboxIdentifier:v14 relayServerHost:v15];

    id v17 = [v7 deviceClaim];
    [(PDSharingRelayServerRequest *)v16 setDeviceClaim:v17];

    int v18 = sub_1001C13DC((uint64_t)a1, v7, 0);
    id v19 = [v8 payload];
    id v20 = sub_1001C157C(a1, (uint64_t)v19, v18);
    [(PDSharingRelayServerUpdateMailboxRequest *)v16 setPayload:v20];

    id v21 = [v8 identifier];
    [(PDSharingRelayServerRequest *)v16 setCorrelationIdentifier:v21];

    id v22 = [v7 transportIdentifier];
    id v23 = [v7 relayServerHost];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1001C2254;
    v25[3] = &unk_10073DA00;
    long long v26 = v16;
    long long v27 = a1;
    id v28 = v7;
    id v29 = v9;
    id v24 = v16;
    sub_1001C1960((uint64_t)a1, v22, v23, 0, v25);
  }
}

void sub_1001C0DB8(PDSharingMailboxPayload *a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    id v12 = PKLogFacilityTypeGetObject();
    uint64_t v13 = v12;
    if (a4 >= 4)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [v9 transportIdentifier];
        id v15 = PKSharingLoggableMailboxAddress();
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "RelayServer: Unable to creating remote mailbox %{public}@, max attempts reached", (uint8_t *)&buf, 0xCu);
      }
      NSErrorUserInfoKey v65 = NSLocalizedDescriptionKey;
      CFStringRef v66 = @"max attempts";
      uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1];
      id v17 = +[NSError errorWithDomain:PKAddSecureElementPassErrorDomain code:0 userInfo:v16];
      v11[2](v11, 0, v17);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138477827;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "RelayServer: Creating remote mailbox \n\n %{private}@", (uint8_t *)&buf, 0xCu);
    }

    int v18 = [v9 transportIdentifier];
    id v19 = [PDSharingRelayServerCreateMailboxRequest alloc];
    id v20 = [v9 relayServerHost];
    id v21 = [(PDSharingRelayServerRequest *)v19 initWithMailboxIdentifier:v18 relayServerHost:v20];

    id v22 = sub_1001C13DC((uint64_t)a1, v9, 1);
    id v23 = [v10 payload];
    id v24 = sub_1001C157C(a1, (uint64_t)v23, v22);
    [(PDSharingRelayServerCreateMailboxRequest *)v21 setPayload:v24];

    long long v25 = [v10 displayInformation];
    [(PDSharingRelayServerCreateMailboxRequest *)v21 setDisplayInformation:v25];

    long long v26 = sub_1001C16A4((uint64_t)a1, v9);
    [(PDSharingRelayServerRequest *)v21 setDeviceClaim:v26];

    -[PDSharingRelayServerCreateMailboxRequest setTimeToLive:](v21, "setTimeToLive:", [v9 timeToLive]);
    long long v27 = [v10 identifier];
    [(PDSharingRelayServerRequest *)v21 setCorrelationIdentifier:v27];

    id v28 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    unint64_t v36 = a4;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v61 = 0x3032000000;
    long long v62 = sub_10002098C;
    id v63 = sub_100020FB8;
    id v64 = 0;
    v55[0] = _NSConcreteStackBlock;
    v55[1] = 3221225472;
    v55[2] = sub_1001C1748;
    v55[3] = &unk_100738AA0;
    id v29 = v9;
    id v56 = v29;
    id v30 = v21;
    long long v57 = v30;
    long long v58 = a1;
    p_long long buf = &buf;
    [v28 addOperation:v55];
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_1001C1B98;
    v52[3] = &unk_100730730;
    v52[4] = a1;
    id v31 = v30;
    long long v53 = v31;
    long long v54 = &buf;
    [v28 addOperation:v52];
    v50[0] = 0;
    v50[1] = v50;
    v50[2] = 0x3032000000;
    v50[3] = sub_10002098C;
    v50[4] = sub_100020FB8;
    id v51 = 0;
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_1001C1DF4;
    v46[3] = &unk_10072E638;
    v46[4] = a1;
    __int16 v32 = v31;
    long long v47 = v32;
    long long v48 = v50;
    long long v49 = &buf;
    [v28 addOperation:v46];
    id v33 = +[NSNull null];
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_1001C1F8C;
    v37[3] = &unk_10073D9B0;
    id v43 = &buf;
    id v34 = v18;
    id v38 = v34;
    id v39 = v29;
    long long v40 = a1;
    id v41 = v10;
    unint64_t v45 = v36;
    long long v42 = v11;
    long long v44 = v50;
    id v35 = [v28 evaluateWithInput:v33 completion:v37];

    _Block_object_dispose(v50, 8);
    _Block_object_dispose(&buf, 8);
  }
}

void sub_1001C13A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

id sub_1001C13DC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = [v5 payloadEncryptionPassword];
    if (!v7 && a3)
    {
      id v8 = [*(id *)(a1 + 8) sharedWebService];
      id v9 = [v8 context];
      id v10 = [v9 configuration];
      id v11 = [v8 targetDevice];
      id v12 = [v11 deviceRegion];
      uint64_t v13 = [v10 featureWithType:5 inRegion:v12];

      size_t v14 = (unint64_t)fmax((double)(unint64_t)[v13 relayServerPasswordLength], 16.0);
      arc4random_buf((char *)&v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
      id v7 = +[NSData dataWithBytes:(char *)&v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0) length:v14];
      [v6 setPayloadEncryptionPassword:v7];
      [*(id *)(a1 + 24) endpointWasUpdated:v6 oldTransportIdentifier:0];
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

PDSharingMailboxPayload *sub_1001C157C(PDSharingMailboxPayload *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    id v5 = PKAESGCMEncrypt();
    uint64_t v6 = PDSharingMailboxPayloadEncryptionSchemeFromKeyLength((uint64_t)[v4 length]);
    if (v6)
    {
      a1 = [[PDSharingMailboxPayload alloc] initWithData:v5 scheme:v6];
    }
    else
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138477827;
        id v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RelayServer: Unable to determine encryption scheme from key %{private}@", (uint8_t *)&v9, 0xCu);
      }

      a1 = 0;
    }
  }
  return a1;
}

id sub_1001C16A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = [v3 deviceClaim];
    if (!v5)
    {
      id v6 = objc_alloc_init((Class)NSUUID);
      id v5 = [v6 UUIDString];

      [v4 setDeviceClaim:v5];
      [*(id *)(a1 + 24) endpointWasUpdated:v4 oldTransportIdentifier:0];
    }
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_1001C1748(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) provisioningType] == (id)2)
  {
    [*(id *)(a1 + 40) setAccessRights:@"RWD"];
    uint64_t v8 = *(void *)(a1 + 48);
    int v9 = [*(id *)(a1 + 32) transportIdentifier];
    id v10 = [*(id *)(a1 + 32) relayServerHost];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1001C189C;
    v13[3] = &unk_10073D938;
    id v11 = *(id *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
    id v14 = v11;
    uint64_t v17 = v12;
    id v16 = v7;
    id v15 = v6;
    sub_1001C1960(v8, v9, v10, 0, v13);
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_1001C189C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (a2 && !v7)
  {
    int v9 = *(void **)(a1 + 32);
    id v10 = a3;
    [v9 setNotificationToken:a2];
    [*(id *)(a1 + 32) setNotificationTopic:v10];
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v8;
  id v13 = v8;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), v13 != 0);
}

void sub_1001C1960(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (a1)
  {
    uint64_t v11 = sub_1001C3868(a1, a3);
    if ((a4 & 1) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      uint64_t v12 = [*(id *)(a1 + 56) objectForKeyedSubscript:v11];
      uint64_t v13 = [v12 firstObject];
      if (v13)
      {
        id v14 = (void *)v13;
        [v12 removeObjectAtIndex:0];
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
        v10[2](v10, v14, v11, 0);

LABEL_9:
        goto LABEL_10;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
    }
    id v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "RelayServer: Creating push token for '%@'", buf, 0xCu);
    }

    id v16 = [v9 dataUsingEncoding:4];
    uint64_t v17 = [v16 SHA1Hash];
    uint64_t v12 = [v17 hexEncoding];

    int v18 = *(void **)(a1 + 40);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1001C3C94;
    void v19[3] = &unk_10073DAC8;
    char v22 = a4;
    v19[4] = a1;
    id v20 = v11;
    id v21 = v10;
    [v18 generateSingleUsePushTokenForTopic:v20 identifier:v12 completion:v19];

    goto LABEL_9;
  }
LABEL_10:
}

void sub_1001C1B98(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = [*(id *)(a1 + 40) payload];
  id v10 = [v9 data];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001C1CA0;
  v15[3] = &unk_10073D960;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  id v18 = v7;
  uint64_t v19 = v12;
  id v16 = v11;
  id v17 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_1001C1D34(v8, v10, v15);
}

void sub_1001C1CA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setDeviceAttestation:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), v8 != 0);
}

void sub_1001C1D34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = [a2 SHA256Hash];
    id v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001C3E04;
    v8[3] = &unk_1007372C8;
    id v9 = v5;
    [v7 attestChallenge:v6 completion:v8];
  }
}

void sub_1001C1DF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = objc_opt_class();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001C1EE0;
  v13[3] = &unk_10073D988;
  long long v16 = *(_OWORD *)(a1 + 48);
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  sub_1001C0980(v8, v9, v10, v13);
}

void sub_1001C1EE0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v11 != 0);
}

void sub_1001C1F8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  if (v8)
  {
    if ([v8 code] != (id)401)
    {
LABEL_11:
      id v14 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [*(id *)(a1 + 40) transportIdentifier];
        long long v16 = PKSharingLoggableMailboxAddress();
        uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
        int v24 = 138412546;
        long long v25 = v16;
        __int16 v26 = 2112;
        uint64_t v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "RelayServer: Created remote mailbox %@ with error: %@", (uint8_t *)&v24, 0x16u);
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
      goto LABEL_14;
    }
  }
  else
  {
    unsigned __int8 v9 = [v7 isCanceled];
    if ([*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) code] != (id)401)
    {
      if ((v9 & 1) == 0)
      {
        uint64_t v19 = *(void **)(a1 + 40);
        uint64_t v18 = *(void *)(a1 + 48);
        id v20 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) mailboxURL];
        sub_1001C02D4(v18, v19, v20);

        id v21 = *(void **)(a1 + 40);
        char v22 = +[NSDate now];
        [v21 setCreatedAt:v22];

        [*(id *)(a1 + 40) setMailboxStatus:2];
        objc_msgSend(*(id *)(a1 + 40), "setDoesRemoteMailboxSupportPushNotifications:", objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), "supportsPushNotifications"));
        uint64_t v23 = *(void *)(a1 + 48);
        if (v23) {
          [*(id *)(v23 + 24) endpointWasUpdated:*(void *)(a1 + 40) oldTransportIdentifier:*(void *)(a1 + 32)];
        }
      }
      goto LABEL_11;
    }
  }
  uint64_t v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = PKSharingLoggableMailboxAddress();
    int v24 = 138412290;
    long long v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "RelayServer: Could not create remote mailbox %@, mailbox identifier already in use.", (uint8_t *)&v24, 0xCu);
  }
  [*(id *)(a1 + 40) rollTransportIdentifer];
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12)
  {
    [*(id *)(v12 + 24) endpointWasUpdated:*(void *)(a1 + 40) oldTransportIdentifier:*(void *)(a1 + 32)];
    uint64_t v13 = *(void *)(a1 + 48);
  }
  else
  {
    uint64_t v13 = 0;
  }
  sub_1001C0DB8(v13, *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 88) + 1, *(void *)(a1 + 64));
LABEL_14:
}

void sub_1001C2254(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a2 && !a4)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = a3;
    [v6 setNotificationToken:a2];
    [*(id *)(a1 + 32) setNotificationTopic:v7];
  }
  unsigned __int8 v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = objc_opt_class();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001C2350;
  v13[3] = &unk_10073D9D8;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  id v14 = v11;
  uint64_t v15 = v12;
  id v16 = *(id *)(a1 + 56);
  sub_1001C0980(v8, v9, v10, v13);
}

void sub_1001C2350(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [*(id *)(a1 + 32) transportIdentifier];
    unsigned __int8 v9 = PKSharingLoggableMailboxAddress();
    int v13 = 138543618;
    id v14 = v9;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RelayServer: Updated remote mailbox %{public}@ with result: %{public}@", (uint8_t *)&v13, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 32), "setDoesRemoteMailboxSupportPushNotifications:", objc_msgSend(v5, "supportsPushNotifications"));
  uint64_t v10 = *(void **)(a1 + 32);
  id v11 = +[NSDate now];
  [v10 setUpdatedAt:v11];

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    [*(id *)(v12 + 24) endpointWasUpdated:*(void *)(a1 + 32) oldTransportIdentifier:0];
  }
  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v6 == 0, v6);
}

void sub_1001C2660(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (((unint64_t)[v6 code] & 0xFFFFFFFFFFFFFFFBLL) == 0x190) {
      [*(id *)(a1 + 40) setMailboxStatus:4];
    }
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v8 = sub_1001C13DC(*(void *)(a1 + 32), *(void **)(a1 + 40), 0);
    if (v8)
    {
      unsigned __int8 v9 = [v5 payload];
      uint64_t v10 = *(void *)(a1 + 32);
      id v29 = 0;
      id v11 = sub_1001C29B0(v10, v9, v8, &v29);
      id v12 = v29;
      id v7 = v12;
      if (v12) {
        id v13 = v12;
      }

      if (v11)
      {
        id v14 = [v5 displayInfo];
        id v28 = 0;
        __int16 v15 = +[PKSharingMessage specializedMessageFromPayload:v11 displayInformation:v14 outError:&v28];
        id v16 = v28;

        if (!v15 || v16)
        {
          uint64_t v18 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            id v19 = [objc_alloc((Class)NSString) initWithData:v11 encoding:4];
            *(_DWORD *)long long buf = 138477827;
            id v31 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "RelayServer: Unable to serialize message from %{private}@", buf, 0xCu);
          }
          id v20 = v16;

          uint64_t v17 = 0;
          id v7 = v20;
        }
        else
        {
          unint64_t v36 = v15;
          uint64_t v17 = +[NSArray arrayWithObjects:&v36 count:1];
        }
        if (![*(id *)(a1 + 40) mailboxStatus]) {
          [*(id *)(a1 + 40) setMailboxStatus:3];
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
      id v7 = 0;
    }
  }
  id v21 = *(void **)(a1 + 40);
  char v22 = +[NSDate now];
  [v21 setUpdatedAt:v22];

  uint64_t v23 = *(void *)(a1 + 32);
  if (v23) {
    [*(id *)(v23 + 24) endpointWasUpdated:*(void *)(a1 + 40) oldTransportIdentifier:0];
  }
  int v24 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    long long v25 = [*(id *)(a1 + 40) transportIdentifier];
    __int16 v26 = PKSharingLoggableMailboxAddress();
    *(_DWORD *)long long buf = 138543875;
    id v31 = v26;
    __int16 v32 = 2113;
    id v33 = v17;
    __int16 v34 = 2114;
    id v35 = v7;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "RelayServer: Fetched content from remote mailbox %{public}@. Messages: %{private}@ Error: %{public}@", buf, 0x20u);
  }
  if (v7) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v17;
  }
  (*(void (**)(void, void *, void *))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v27, v7);
}

id sub_1001C29B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {
    id v6 = a3;
    id v7 = [a2 data];
    uint64_t v8 = PKAESGCMDecrypt();

    if (a4 && !v8)
    {
      NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
      CFStringRef v12 = @"Unable to decrypt payload";
      unsigned __int8 v9 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
      *a4 = +[NSError errorWithDomain:PKAddSecureElementPassErrorDomain code:0 userInfo:v9];
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8;
}

void sub_1001C2CDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [*(id *)(a1 + 32) transportIdentifier];
    unsigned __int8 v9 = PKSharingLoggableMailboxAddress();
    int v13 = 138543619;
    id v14 = v9;
    __int16 v15 = 2113;
    id v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RelayServer: Deleted remote mailbox %{public}@ with result: %{private}@", (uint8_t *)&v13, 0x16u);
  }
  [*(id *)(a1 + 32) setMailboxStatus:4];
  uint64_t v10 = *(void **)(a1 + 32);
  NSErrorUserInfoKey v11 = +[NSDate now];
  [v10 setUpdatedAt:v11];

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    [*(id *)(v12 + 24) endpointWasUpdated:*(void *)(a1 + 32) oldTransportIdentifier:0];
  }
  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v6 == 0, v6);
}

void sub_1001C30DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [*(id *)(a1 + 32) transportIdentifier];
    unsigned __int8 v9 = PKSharingLoggableMailboxAddress();
    int v13 = 138543618;
    id v14 = v9;
    __int16 v15 = 2114;
    id v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RelayServer: relinquished remote mailbox %{public}@ with result: %{public}@", (uint8_t *)&v13, 0x16u);
  }
  [*(id *)(a1 + 32) setMailboxStatus:0];
  uint64_t v10 = *(void **)(a1 + 32);
  NSErrorUserInfoKey v11 = +[NSDate now];
  [v10 setUpdatedAt:v11];

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    [*(id *)(v12 + 24) endpointWasUpdated:*(void *)(a1 + 32) oldTransportIdentifier:0];
  }
  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v6 == 0, v6);
}

void sub_1001C384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001C3868(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (PKSharingUseThirdPartyPushTopic())
    {
      id v4 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v18 = 0;
      }

      uint64_t v5 = PKSharingRelayServerThirdPartyPushTopic();
      goto LABEL_13;
    }
    if (!v3)
    {
      uint64_t v5 = PKSharingRelayServerPushTopicForCurrentEnvironment();
LABEL_13:
      id v16 = (void *)v5;
      goto LABEL_14;
    }
    id v6 = [*(id *)(a1 + 8) sharedWebService];
    id v7 = [v6 context];
    uint64_t v8 = [v7 configuration];
    unsigned __int8 v9 = [v6 targetDevice];
    uint64_t v10 = [v9 deviceRegion];
    NSErrorUserInfoKey v11 = [v8 featureWithType:5 inRegion:v10];

    if (v11
      && ([v11 relayServerHostsToUseThirdPartyPushTopic],
          uint64_t v12 = objc_claimAutoreleasedReturnValue(),
          [v3 host],
          int v13 = objc_claimAutoreleasedReturnValue(),
          unsigned int v14 = [v12 containsObject:v13],
          v13,
          v12,
          v14))
    {
      uint64_t v15 = PKSharingRelayServerThirdPartyPushTopic();
    }
    else
    {
      uint64_t v15 = PKSharingRelayServerPushTopicForCurrentEnvironment();
    }
    id v16 = (void *)v15;
  }
  else
  {
    id v16 = 0;
  }
LABEL_14:

  return v16;
}

void sub_1001C3A10(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init((Class)NSUUID);
  unsigned __int8 v9 = [v8 UUIDString];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001C3B10;
  v14[3] = &unk_10073DA78;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v16 = v7;
  uint64_t v17 = v10;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  sub_1001C1960(v11, v9, 0, 1, v14);
}

void sub_1001C3B10(uint64_t a1, int a2, int a3, id obj)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), obj);
  id v6 = obj;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001C3B80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v8)
  {
    unsigned __int8 v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138543362;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "RelayServer: Failed to prewarm endpoint creation with error: %{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C3C94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138543362;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RelayServer: Failed to generate push notification token with result: %{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v8 = [v5 hexEncoding];
  if (v8 && *(unsigned char *)(a1 + 56))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
    id v9 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
    if (!v9)
    {
      id v9 = objc_alloc_init((Class)NSMutableArray);
      [*(id *)(*(void *)(a1 + 32) + 56) setObject:v9 forKeyedSubscript:*(void *)(a1 + 40)];
    }
    [v9 addObject:v8];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 48));
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001C3E04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138543362;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RelayServer: Failed to generate app attestation. %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C3EF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) relayServerHost];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) _urlRequest];
    id v6 = [v3 nextTaskID];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001C40B0;
    v12[3] = &unk_10073DAF0;
    long long v11 = *(_OWORD *)(a1 + 40);
    id v7 = (id)v11;
    long long v13 = v11;
    [v3 performRequest:v5 taskIdentifier:v6 retries:1 authHandling:0 completionHandler:v12];
  }
  else
  {
    int v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v15 = (id)objc_opt_class();
      id v9 = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "RelayServer: Request missing host, unable to perform request: %{public}@", buf, 0xCu);
    }
    uint64_t v10 = *(void *)(a1 + 40);
    id v5 = +[NSError pkSharingError:1];
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v5);
  }
}

void sub_1001C40B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = v9;
LABEL_3:
    id v11 = 0;
    goto LABEL_10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v12 = (uint64_t)[v8 statusCode];
    if (v12 >= 300)
    {
      uint64_t v13 = v12;
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      CFStringRef v16 = @"Received non 2XX http status code";
      unsigned int v14 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      uint64_t v10 = +[NSError errorWithDomain:PKAddSecureElementPassErrorDomain code:v13 userInfo:v14];

      if (v10) {
        goto LABEL_3;
      }
    }
  }
  id v11 = [objc_alloc(*(Class *)(a1 + 40)) initWithData:v7];
  if (v11)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = +[NSError errorWithDomain:PKAddSecureElementPassErrorDomain code:0 userInfo:0];
  }
LABEL_10:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1001C48A8(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSString) initWithFormat:@"%li|%@%@", PKRandomNumberOfLength(), @"VerificationCheck.", v1];

  return v2;
}

void sub_1001C492C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 32) uniqueID];
      int v6 = 138412546;
      id v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to cancel proofing session for pass '%@', error: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1001C4A94()
{
  PDDefaultQueue();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  PDScheduledActivityClientRegister();
}

id *sub_1001C5740(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_1001C5F40(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[PushProvisioningSharingMetadata alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(PushProvisioningSharingMetadata *)v5 sharingMetaData];
  [v3 addObject:v4];
}

void sub_1001C60D4(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[PushProvisioningSharingMetadata alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(PushProvisioningSharingMetadata *)v5 sharingMetaData];
  [v3 addObject:v4];
}

void sub_1001C6304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C631C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  id v3 = [*(id *)(a1 + 32) sharingInstanceIdentifier];
  uint64_t v4 = [v2 pushProvisioningSharingMetadataForProvisioningSharingIdentifier:v3 inDatabase:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  int v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v7)
  {
    [v7 _updateProvisioningSharingMetadata:*(void *)(a1 + 32)];
  }
  else
  {
    id v8 = [objc_alloc(*(Class *)(a1 + 56)) initWithSharingMetadata:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  return 1;
}

id sub_1001C6488(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) sharingInstanceIdentifier];
  uint64_t v4 = [v2 pushProvisioningSharingMetadataForProvisioningSharingIdentifier:v3 inDatabase:*(void *)(a1 + 40)];

  if (v4) {
    id v5 = [v4 deleteFromDatabase];
  }
  else {
    id v5 = 0;
  }

  return v5;
}

id sub_1001C6780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1001C6930(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = [a3 stringValue];
  [(PKPushProvisioningSharingMetadata *)v4 setSharingInstanceIdentifier:v5];
}

void sub_1001C6994(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPushProvisioningSharingMetadata setSharingStatus:](v4, "setSharingStatus:", [a3 integerValue]);
}

void sub_1001C69EC(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = [a3 stringValue];
  [(PKPushProvisioningSharingMetadata *)v4 setProvisioningCredentialHash:v5];
}

void sub_1001C6A50(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPushProvisioningSharingMetadata setSource:](v4, "setSource:", [a3 integerValue]);
}

void sub_1001C6AA8(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
}

void sub_1001C6AB0(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPushProvisioningSharingMetadata *)v3 setCreatedAt:v4];
}

void sub_1001C6B10(id a1, PKPushProvisioningSharingMetadata *a2, id a3)
{
  id v4 = a2;
  -[PKPushProvisioningSharingMetadata setSecurityOptions:](v4, "setSecurityOptions:", [a3 integerValue]);
}

void sub_1001C94E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C9500(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

void sub_1001CAD48(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8));
  int v24 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(*(void *)(a1 + 40) + 24) count]);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 40) + 24);
  id v3 = [v2 countByEnumeratingWithState:&v31 objects:v42 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v32;
    do
    {
      int v6 = 0;
      do
      {
        if (*(void *)v32 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v31 + 1) + 8 * (void)v6);
        id v30 = 0;
        id v8 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v7, 1, &v30, context);
        id v9 = v30;
        if (v8)
        {
          [v24 addObject:v8];
        }
        else
        {
          uint64_t v10 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            id v39 = v9;
            __int16 v40 = 2112;
            uint64_t v41 = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "PDNetworkTask failed to archive with error: %@, task: %@", buf, 0x16u);
          }
        }
        int v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v31 objects:v42 count:16];
    }
    while (v4);
  }

  id v11 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(*(void *)(a1 + 40) + 16) count]);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v23 = a1;
  id v12 = *(id *)(*(void *)(a1 + 40) + 16);
  id v13 = [v12 countByEnumeratingWithState:&v26 objects:v37 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v27;
    do
    {
      CFStringRef v16 = 0;
      do
      {
        if (*(void *)v27 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v26 + 1) + 8 * (void)v16);
        id v25 = 0;
        uint64_t v18 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v17, 1, &v25, context);
        id v19 = v25;
        if (v18)
        {
          [v11 addObject:v18];
        }
        else
        {
          id v20 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            id v39 = v19;
            __int16 v40 = 2112;
            uint64_t v41 = v17;
            _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "PDNetworkTask failed to archive with error: %@, task: %@", buf, 0x16u);
          }
        }
        CFStringRef v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      id v14 = [v12 countByEnumeratingWithState:&v26 objects:v37 count:16];
    }
    while (v14);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v23 + 40) + 8));
  v35[0] = @"scheduled";
  v35[1] = @"enqueued";
  v36[0] = v24;
  v36[1] = v11;
  id v21 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:2];
  [v21 writeToFile:*(void *)(*(void *)(v23 + 40) + 48) atomically:1];
  PKExcludePathFromBackup();

  *(unsigned char *)(*(void *)(v23 + 40) + 76) = 0;
}

id sub_1001CB858(uint64_t a1)
{
  return [*(id *)(a1 + 32) _tryToDequeueTasks];
}

id sub_1001CB96C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _tryToDequeueTasks];
}

NSString *__cdecl sub_1001CBCA0(id a1, PKCreditAccountMergeSummaryAccountDetails *a2)
{
  return (NSString *)[(PKCreditAccountMergeSummaryAccountDetails *)a2 accountIdentifier];
}

void sub_1001CC024(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKCreditAccountMergeSummaryAccountDetails);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  uint64_t v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    uint64_t v7 = v8;
  }
}

void sub_1001CC2A4(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
}

void sub_1001CC2AC(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
}

void sub_1001CC2B4(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountMergeSummaryAccountDetails *)v3 setStatementBalance:v4];
}

void sub_1001CC318(id a1, PKCreditAccountMergeSummaryAccountDetails *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountMergeSummaryAccountDetails *)v3 setCurrentBalance:v4];
}

void PDNFSecureXPCEventHandleContactlessPresentationEvent(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5 || (uint64_t v7 = v6) == 0) {
    __break(1u);
  }
  if (!a1)
  {
    id v8 = [[PDContactlessPresentationEventPreArm alloc] _init];
    if (v8)
    {
      id v9 = v8;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v10 = v7;
      id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v16;
        do
        {
          id v14 = 0;
          do
          {
            if (*(void *)v16 != v13) {
              objc_enumerationMutation(v10);
            }
            objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * (void)v14), "receivedSecureContactlessPresentationEvent:", v9, (void)v15);
            id v14 = (char *)v14 + 1;
          }
          while (v12 != v14);
          id v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v12);
      }
    }
  }
}

void sub_1001CD468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CD49C(uint64_t a1, void *a2, void *a3)
{
  id v4 = (id *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _handleConnectionSuccessWithResponse:v6 data:v5];
}

void sub_1001CD514(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleConnectionFailureWithError:v3];
}

void sub_1001CD7C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void (***)(void, void, void))(v2 + 48);
  if (v3 && !*(unsigned char *)(v2 + 41))
  {
    v3[2](v3, *(void *)(v2 + 32), *(void *)(v2 + 24));
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void (***)(void, void, void))(v2 + 48);
  }
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x400], 8) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = 0;
}

void sub_1001CD8E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  if (v3 && !*(unsigned char *)(v2 + 41))
  {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(void **)(v2 + 48);
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x400], 8) = 0;

  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 56);
  *(void *)(v5 + 56) = 0;
}

id PDTaskError(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a2;
  id v15 = [objc_alloc((Class)NSString) initWithFormat:v13 arguments:&a9];

  long long v16 = +[NSString stringWithFormat:@"%@ encountered error: %@", v14, v15];

  if (v12)
  {
    v25[0] = NSLocalizedDescriptionKey;
    v25[1] = NSUnderlyingErrorKey;
    v26[0] = v16;
    v26[1] = v12;
    long long v17 = (void **)v26;
    long long v18 = (NSErrorUserInfoKey *)v25;
    uint64_t v19 = 2;
  }
  else
  {
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    int v24 = v16;
    long long v17 = &v24;
    long long v18 = &v23;
    uint64_t v19 = 1;
  }
  id v20 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v18 count:v19];
  id v21 = +[NSError errorWithDomain:@"PDTaskErrorDomain" code:a1 userInfo:v20];

  return v21;
}

id PDTaskWarning(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a2;
  id v15 = [objc_alloc((Class)NSString) initWithFormat:v13 arguments:&a9];

  long long v16 = +[NSString stringWithFormat:@"%@ warning: %@", v14, v15];

  if (v12)
  {
    v25[0] = NSLocalizedDescriptionKey;
    v25[1] = NSUnderlyingErrorKey;
    v26[0] = v16;
    v26[1] = v12;
    long long v17 = (void **)v26;
    long long v18 = (NSErrorUserInfoKey *)v25;
    uint64_t v19 = 2;
  }
  else
  {
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    int v24 = v16;
    long long v17 = &v24;
    long long v18 = &v23;
    uint64_t v19 = 1;
  }
  id v20 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v18 count:v19];
  id v21 = +[NSError errorWithDomain:@"PDTaskWarningDomain" code:a1 userInfo:v20];

  return v21;
}

id _SQLValueForEncryptionCertificates(void *a1)
{
  id v1 = a1;
  if (!v1
    || (+[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:0], (uint64_t v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v2 = +[NSNull null];
  }

  return v2;
}

id _EncryptionCertificatesForSQLValue(void *a1)
{
  id v1 = a1;
  v6[0] = objc_opt_class();
  v6[1] = objc_opt_class();
  uint64_t v2 = +[NSArray arrayWithObjects:v6 count:2];
  uint64_t v3 = +[NSSet setWithArray:v2];
  uint64_t v4 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v3 fromData:v1 error:0];

  return v4;
}

void sub_1001CEEDC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1001CF0E4(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentEncryptionCertificate setDestination:](v4, "setDestination:", [a3 integerValue]);
}

void sub_1001CF13C(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentEncryptionCertificate setEncryptionScheme:](v4, "setEncryptionScheme:", [a3 integerValue]);
}

void sub_1001CF194(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentEncryptionCertificate setCertificatesVersion:](v4, "setCertificatesVersion:", [a3 integerValue]);
}

void sub_1001CF1EC(id a1, PKPeerPaymentEncryptionCertificate *a2, id a3)
{
  uint64_t v4 = a2;
  _EncryptionCertificatesForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentEncryptionCertificate *)v4 setEncryptionCertificates:v5];
}

void sub_1001CF6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1001CF6DC(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

void sub_1001CF858(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  id v11 = [v9 _propertySetters];
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_1001CFB9C(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_1001CFBA4(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_1001CFBAC(id a1, PKPendingShareableCredential *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPendingShareableCredential setSource:](v4, "setSource:", [a3 integerValue]);
}

void sub_1001CFC04(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_1001CFC0C(id a1, PKPendingShareableCredential *a2, id a3)
{
  uint64_t v3 = a2;
  [(PKPendingShareableCredential *)v3 setSecurityOptions:PKPushProvisioningSecurityOptionsFromString()];
}

void sub_1001CFC64(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_1001CFC6C(id a1, PKPendingShareableCredential *a2, id a3)
{
}

void sub_1001D016C(void *a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = +[PDGetPassTask taskWithWebService:a1[4] updateContext:a1[5] source:2];
    id v10 = (id)v3;
    if (v3)
    {
      uint64_t v4 = (void *)a1[7];
      if (v4)
      {
        id v5 = *(void **)(a1[6] + 48);
        id v6 = [v4 copy];
        uint64_t v7 = +[NSValue valueWithPointer:v10];
        [v5 setObject:v6 forKey:v7];

        uint64_t v3 = (uint64_t)v10;
      }
    }
    [*(id *)(a1[6] + 40) performTask:v3];
  }
  else
  {
    uint64_t v8 = a1[7];
    if (v8)
    {
      id v9 = *(void (**)(void))(v8 + 16);
      v9();
    }
  }
}

void sub_1001D09B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 pushToken];
  unsigned __int8 v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if ((v5 & 1) == 0)
  {
    id v6 = [*(id *)(*(void *)(a1 + 40) + 24) passesForWebService:v3];
    [v3 setPushToken:*(void *)(a1 + 32)];
    [v3 generateNewDeviceIdentifier];
    [*(id *)(*(void *)(a1 + 40) + 24) updateWebService:v3];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001D0ABC;
    v7[3] = &unk_1007331D8;
    void v7[4] = *(void *)(a1 + 40);
    id v8 = v3;
    [v6 enumerateObjectsUsingBlock:v7];
  }
}

void sub_1001D0ABC(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "settingEnabled:forPass:", 2))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [v6 serialNumber];
    unsigned __int8 v5 = [v6 authenticationToken];
    [v3 _registerWithSerialNumber:v4 authToken:v5 webService:*(void *)(a1 + 40)];
  }
}

void sub_1001D1568(void *a1)
{
  id v2 = +[PDRegistrationTask registerTaskWithWebService:a1[4] serialNumber:a1[5] authToken:a1[6]];
  [*(id *)(a1[7] + 40) performTask:v2];
}

void sub_1001D1B0C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 passUniqueIdentifier];
  uint64_t v4 = [v6 serialNumber];
  if ([*(id *)(*(void *)(a1 + 32) + 24) settingEnabled:2 forPassWithUniqueIdentifier:v3]&& objc_msgSend(*(id *)(a1 + 40), "containsObject:", v4))
  {
    unsigned __int8 v5 = +[PDGetPassTask taskWithWebService:*(void *)(a1 + 48) updateContext:v6 source:1];
    [v5 setServerRequested:*(unsigned __int8 *)(a1 + 56)];
    [*(id *)(*(void *)(a1 + 32) + 40) performTask:v5];
    [*(id *)(a1 + 40) removeObject:v4];
  }
}

id sub_1001D2224(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass())) {
    id v4 = [v3 pertainsToPassTypeIdentifier:*(void *)(a1 + 32) serialNumber:*(void *)(a1 + 40)];
  }
  else {
    id v4 = 0;
  }

  return v4;
}

uint64_t sub_1001D2364(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && [v3 pertainsToPassTypeIdentifier:*(void *)(a1 + 32) serialNumber:*(void *)(a1 + 40)])
  {
    uint64_t v4 = [v3 userRequested] ^ 1;
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id sub_1001D246C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    uint64_t v4 = [v3 passTypeIdentifier];
    id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

void sub_1001D2A60(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

CFStringRef PDCloudStoreContainerStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE) {
    return @"unknown";
  }
  else {
    return off_10073FB80[a1 - 1];
  }
}

CFStringRef PDCloudStoreContainerStateToUserString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE) {
    return @"N/A";
  }
  else {
    return off_10073FBF8[a1 - 1];
  }
}

void sub_1001D3068(id *a1)
{
  [a1[4] setIsSetup:0];
  unsigned int v2 = objc_msgSend(a1[4], "_queue_canInitializeContainer");
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [a1[4] description];
    id v5 = (void *)v4;
    CFStringRef v6 = @"NO";
    if (v2) {
      CFStringRef v6 = @"YES";
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v34 = v4;
    __int16 v35 = 2114;
    CFStringRef v36 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Container %@ can be initialized %{public}@", buf, 0x16u);
  }
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [a1[4] description];
      CFStringRef v8 = (const __CFString *)a1[5];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v34 = (uint64_t)v7;
      __int16 v35 = 2114;
      CFStringRef v36 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting initialCloudDatabaseSetup for container %@, operationGroupNameSuffix: %{public}@", buf, 0x16u);
    }
    if (a1[6])
    {
      os_unfair_lock_lock((os_unfair_lock_t)a1[4] + 16);
      uint64_t v9 = (void *)*((void *)a1[4] + 1);
      id v10 = objc_retainBlock(a1[6]);
      [v9 addObject:v10];

      os_unfair_lock_unlock((os_unfair_lock_t)a1[4] + 16);
    }
    if (PKForceCloudStoreInitializationFailure())
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "**** PKForceCloudStoreInitializationFailure switch is on!! Forcing cloud store error.", buf, 2u);
      }

      *((void *)a1[4] + 22) = 3;
      objc_initWeak((id *)buf, a1[4]);
      id v11 = a1[4];
      id v12 = a1[5];
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_1001D3590;
      v31[3] = &unk_10073E058;
      objc_copyWeak(&v32, (id *)buf);
      objc_msgSend(v11, "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:", 3, v12, 3, v31);
      objc_destroyWeak(&v32);
      objc_destroyWeak((id *)buf);
    }
    else
    {
      long long v18 = a1[4];
      if (*((void *)v18 + 22) == 15 && !v18[48])
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v34 = (uint64_t)v18;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The cloud store %@ is already setup.", buf, 0xCu);
        }

        [a1[4] _markEndCloudStoreDatabaseSetupWithSuccess:1 error:0];
      }
      else if (v18[129])
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v34 = (uint64_t)v18;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "All cloud store %@ setup is already in progress. The completion will be called when it is finished.", buf, 0xCu);
        }
      }
      else
      {
        v18[129] = 1;
        uint64_t v19 = a1 + 4;
        *((void *)a1[4] + 22) = 1;
        id v20 = a1[4];
        id v22 = a1[5];
        id v21 = a1 + 5;
        NSErrorUserInfoKey v23 = [v20 reportContainerChangeIntervalBeginEventWithType:2 stateName:0 objectNames:0 operationGroupName:0 operationGroupNameSuffix:v22];
        objc_msgSend(*v19, "_queue_startCloudStoreInitializationTimer");
        objc_initWeak((id *)buf, *v19);
        id v24 = *v19;
        id v25 = *v21;
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_1001D3668;
        v27[3] = &unk_10073E080;
        objc_copyWeak(&v30, (id *)buf);
        id v26 = v23;
        id v28 = v26;
        id v29 = *v21;
        objc_msgSend(v24, "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:", 1, v25, 3, v27);

        objc_destroyWeak(&v30);
        objc_destroyWeak((id *)buf);
      }
    }
  }
  else
  {
    id v13 = (void (**)(id, void, void *))a1[6];
    if (v13)
    {
      id v14 = a1[4];
      id v15 = [v14 description];
      long long v16 = +[NSString stringWithFormat:@"Cannot initialize container %@", v15];
      long long v17 = [v14 errorWithCode:-5001 description:v16];
      v13[2](v13, 0, v17);
    }
  }
}

void sub_1001D3554(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1001D3590(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  CFStringRef v6 = WeakRetained[20];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001D3654;
  v9[3] = &unk_10072E198;
  id v10 = WeakRetained;
  id v11 = v4;
  id v7 = v4;
  CFStringRef v8 = WeakRetained;
  dispatch_async(v6, v9);
}

id sub_1001D3654(uint64_t a1)
{
  return [*(id *)(a1 + 32) _markEndCloudStoreDatabaseSetupWithSuccess:0 error:*(void *)(a1 + 40)];
}

void sub_1001D3668(id *a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v7 = WeakRetained[20];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D3764;
  block[3] = &unk_10072FEF8;
  id v12 = WeakRetained;
  id v8 = a1[4];
  char v16 = a2;
  id v13 = v8;
  id v14 = v5;
  id v15 = a1[5];
  id v9 = v5;
  id v10 = WeakRetained;
  dispatch_async(v7, block);
}

id sub_1001D3764(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = (objc_class *)objc_opt_class();
      id v4 = NSStringFromClass(v3);
      *(_DWORD *)long long buf = 138412290;
      id v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed initialCloudDatabaseSetup for class %@", buf, 0xCu);
    }
    id v5 = [*(id *)(*(void *)(a1 + 32) + 152) container];
    CFStringRef v6 = [v5 containerIdentifier];
    id v7 = PKCurrentCloudStoreApplePayContainerName();
    id v8 = v6;
    id v9 = v7;
    if (v8 == v9)
    {
    }
    else
    {
      id v10 = v9;
      if (v8) {
        BOOL v11 = v9 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {

LABEL_17:
        goto LABEL_18;
      }
      unsigned __int8 v16 = [v8 isEqualToString:v9];

      if ((v16 & 1) == 0)
      {
LABEL_18:
        [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:0];
        *(unsigned char *)(*(void *)(a1 + 32) + 129) = 0;
        objc_msgSend(*(id *)(a1 + 32), "_queue_cancelCloudStoreInitializationTimer");
        uint64_t v17 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v17 + 128))
        {
          if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Processing account changed notification by trying to initalize the cloud store again.", buf, 2u);
          }

          *(unsigned char *)(*(void *)(a1 + 32) + 12_Block_object_dispose(&STACK[0x400], 8) = 0;
          return [*(id *)(a1 + 32) initialCloudDatabaseSetupWithOperationGroupNameSuffix:*(void *)(a1 + 56) completion:0];
        }
        else
        {
          if (*(unsigned char *)(v17 + 32))
          {
            if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cloud Store setup is complete, but we have to invalidate the cloud store. Invalidating cloud store now.", buf, 2u);
            }

            [*(id *)(a1 + 32) invalidateCloudStoreWithOperationGroupNameSuffix:*(void *)(a1 + 56) clearCache:1 completion:0];
            long long v18 = *(void **)(a1 + 32);
            uint64_t v19 = *(void *)(a1 + 48);
            uint64_t v20 = 0;
          }
          else
          {
            *(unsigned char *)(v17 + 12_Block_object_dispose(&STACK[0x400], 8) = 0;
            long long v18 = *(void **)(a1 + 32);
            uint64_t v20 = *(unsigned __int8 *)(a1 + 64);
            uint64_t v19 = *(void *)(a1 + 48);
          }
          return [v18 _markEndCloudStoreDatabaseSetupWithSuccess:v20 error:v19];
        }
      }
    }
    id v5 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64), @"success"];
    id v22 = v5;
    id v8 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    PKAnalyticsSendEvent();
    goto LABEL_17;
  }
  [0 reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:0];
  objc_msgSend(*(id *)(a1 + 32), "_queue_cancelCloudStoreInitializationTimer");
  id v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 48);
  return [v12 _markEndCloudStoreDatabaseSetupWithSuccess:v13 error:v14];
}

uint64_t sub_1001D3CE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_queue_canInitializeContainer");
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);
  return v3(v1, v2);
}

void sub_1001D409C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v3 = @"YES";
    if (*(unsigned char *)(a1 + 64)) {
      CFStringRef v4 = @"YES";
    }
    else {
      CFStringRef v4 = @"NO";
    }
    if (!*(unsigned char *)(a1 + 65)) {
      CFStringRef v3 = @"NO";
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 40);
    *(_DWORD *)long long buf = 138544386;
    uint64_t v34 = v5;
    __int16 v35 = 2114;
    CFStringRef v36 = v4;
    __int16 v37 = 2114;
    double v38 = *(double *)&v3;
    __int16 v39 = 2114;
    uint64_t v40 = v6;
    __int16 v41 = 2114;
    uint64_t v42 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "invalidateCloudStoreWithOperationGroupNameSuffix called with suffix %{public}@, clearCache %{public}@, resultOfZoneRecreation %{public}@, zoneNames %{public}@, lastInvalidationDate %{public}@", buf, 0x34u);
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v8 + 129) && !*(unsigned char *)(v8 + 48))
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cannot detach from cloud store while a setup is in process. When the setup is complete, the cloud store will be invalidated.", buf, 2u);
    }

    uint64_t v14 = *(void *)(a1 + 48);
    if (*(unsigned char *)(a1 + 65) && *(void *)(v14 + 40))
    {
      id v15 = +[NSDate date];
      [v15 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 48) + 40)];
      double v17 = v16;

      BOOL v18 = v17 >= 60.0;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 40);
        CFStringRef v20 = @"NO";
        *(_DWORD *)long long buf = 138543874;
        if (v17 >= 60.0) {
          CFStringRef v20 = @"YES";
        }
        uint64_t v34 = v19;
        __int16 v35 = 2114;
        CFStringRef v36 = v20;
        __int16 v37 = 2048;
        double v38 = v17;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "lastInvalidationDate is %{public}@, shouldInvalidateCloudStore %{public}@, secondsSinceLastInvalidation %f", buf, 0x20u);
      }

      uint64_t v14 = *(void *)(a1 + 48);
    }
    else
    {
      BOOL v18 = 1;
    }
    *(unsigned char *)(v14 + 32) = v18;
    if (*(void *)(a1 + 56))
    {
      id v22 = *(os_unfair_lock_s **)(a1 + 48);
      uint64_t v21 = (id *)(a1 + 48);
      os_unfair_lock_lock(v22 + 16);
      NSErrorUserInfoKey v23 = (void *)*((void *)*v21 + 1);
      id v24 = objc_retainBlock(v21[1]);
      [v23 addObject:v24];

      os_unfair_lock_unlock((os_unfair_lock_t)*v21 + 16);
    }
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v34 = v8;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invalidating cloud store for class %@.", buf, 0xCu);
    }

    id v9 = [*(id *)(a1 + 48) reportContainerChangeIntervalBeginEventWithType:4 stateName:0 objectNames:*(void *)(a1 + 40) operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 32)];
    *(void *)(*(void *)(a1 + 48) + 176) = 2;
    objc_initWeak((id *)buf, *(id *)(a1 + 48));
    id v10 = *(void **)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 32);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_1001D44E0;
    v26[3] = &unk_10073E0D0;
    objc_copyWeak(&v31, (id *)buf);
    id v30 = *(id *)(a1 + 56);
    char v32 = *(unsigned char *)(a1 + 64);
    int8x16_t v25 = *(int8x16_t *)(a1 + 40);
    id v12 = (id)v25.i64[0];
    int8x16_t v27 = vextq_s8(v25, v25, 8uLL);
    id v28 = *(id *)(a1 + 32);
    id v13 = v9;
    id v29 = v13;
    objc_msgSend(v10, "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:", 2, v11, 3, v26);

    objc_destroyWeak(&v31);
    objc_destroyWeak((id *)buf);
  }
}

void sub_1001D44BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001D44E0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v7 = WeakRetained[20];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001D4610;
  v12[3] = &unk_10073E0A8;
  id v13 = WeakRetained;
  id v19 = *(id *)(a1 + 64);
  char v20 = a2;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v8;
  char v21 = *(unsigned char *)(a1 + 80);
  id v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v10 = v5;
  uint64_t v11 = WeakRetained;
  dispatch_async(v7, v12);
}

uint64_t sub_1001D4610(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = +[NSDate date];
    uint64_t v3 = *(void *)(a1 + 32);
    CFStringRef v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating lastInvalidationDate to %{public}@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 48), "_queue_didInvalidateContainer:", *(unsigned __int8 *)(a1 + 89));
    if (*(unsigned char *)(a1 + 89))
    {
      if ([*(id *)(a1 + 56) count])
      {
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v7 = *(id *)(a1 + 56);
        id v8 = [v7 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v19;
          do
          {
            for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v19 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void *)(*((void *)&v18 + 1) + 8 * i);
              if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v13 = *(void *)(a1 + 32);
                *(_DWORD *)long long buf = 138412546;
                uint64_t v23 = v12;
                __int16 v24 = 2112;
                uint64_t v25 = v13;
                _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Clearing zone %@ in local database after invalidating %@", buf, 0x16u);
              }

              [*(id *)(*(void *)(a1 + 32) + 152) clearCacheInContainerForZoneName:v12];
            }
            id v9 = [v7 countByEnumeratingWithState:&v18 objects:v26 count:16];
          }
          while (v9);
        }

        [*(id *)(a1 + 48) reportContainerChangeSignpostEventType:5 stateName:0 objectNames:*(void *)(a1 + 56) changeToken:0 error:*(void *)(a1 + 40) operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 64)];
      }
      else
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v23 = v17;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Clearing local database after invalidating %@", buf, 0xCu);
        }

        [*(id *)(*(void *)(a1 + 32) + 152) clearCacheInContainer];
        [*(id *)(a1 + 48) reportContainerChangeSignpostEventType:6 stateName:0 objectNames:0 changeToken:0 error:*(void *)(a1 + 40) operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 64)];
      }
    }
    else
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v23 = v16;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not clearing local database after invalidating for %@", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 72) error:*(void *)(a1 + 40)];
    uint64_t result = *(void *)(a1 + 80);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 40));
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 80);
    if (result)
    {
      uint64_t v15 = *(uint64_t (**)(void))(result + 16);
      return v15();
    }
  }
  return result;
}

id sub_1001D4B30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_cloudStoreAccountInformationWithCompletion:", *(void *)(a1 + 40));
}

void sub_1001D4BF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D4CCC;
  block[3] = &unk_10072E9D8;
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1001D4CCC(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) accountStatus];
    uint64_t v3 = CKStringFromAccountStatus();
    unsigned int v4 = [*(id *)(a1 + 32) supportsDeviceToDeviceEncryption];
    CFStringRef v5 = @"NO";
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 138412802;
    id v9 = v3;
    if (v4) {
      CFStringRef v5 = @"YES";
    }
    __int16 v10 = 2114;
    CFStringRef v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Apple Account status: %@, supportsDeviceToDeviceEncryption: %{public}@, with error: %@", (uint8_t *)&v8, 0x20u);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return result;
}

id sub_1001D4EC0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:", *(void *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 64), *(void *)(a1 + 48));
}

void sub_1001D57F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1001D5850(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v5 = *(NSObject **)(v4 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D5924;
  block[3] = &unk_100730288;
  void block[4] = v4;
  id v11 = v3;
  id v6 = *(id *)(a1 + 40);
  int v8 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v12 = v6;
  uint64_t v14 = v7;
  id v13 = v8;
  id v9 = v3;
  dispatch_async(v5, block);
}

id sub_1001D5924(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:", *(void *)(a1 + 40), 7, *(void *)(a1 + 48), *(void *)(a1 + 64), 1, *(void *)(a1 + 56));
}

void sub_1001D5940(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v5 = *(NSObject **)(v4 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D5A14;
  block[3] = &unk_100730288;
  void block[4] = v4;
  id v11 = v3;
  id v6 = *(id *)(a1 + 40);
  int v8 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v12 = v6;
  uint64_t v14 = v7;
  id v13 = v8;
  id v9 = v3;
  dispatch_async(v5, block);
}

id sub_1001D5A14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:", *(void *)(a1 + 40), 8, *(void *)(a1 + 48), *(void *)(a1 + 64), 1, *(void *)(a1 + 56));
}

void sub_1001D5A30(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(NSObject **)(v5 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D5B04;
  block[3] = &unk_100730288;
  void block[4] = v5;
  id v12 = v4;
  id v7 = *(id *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v13 = v7;
  uint64_t v15 = v8;
  id v14 = v9;
  id v10 = v4;
  dispatch_async(v6, block);
}

id sub_1001D5B04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:", *(void *)(a1 + 40), 9, *(void *)(a1 + 48), *(void *)(a1 + 64), 1, *(void *)(a1 + 56));
}

void sub_1001D5B20(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(NSObject **)(v5 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D5BF4;
  block[3] = &unk_100730288;
  void block[4] = v5;
  id v12 = v4;
  id v7 = *(id *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v13 = v7;
  uint64_t v15 = v8;
  id v14 = v9;
  id v10 = v4;
  dispatch_async(v6, block);
}

id sub_1001D5BF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:", *(void *)(a1 + 40), 13, *(void *)(a1 + 48), *(void *)(a1 + 64), 1, *(void *)(a1 + 56));
}

void sub_1001D5C10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    WeakRetained[22] = 11;
    uint64_t v5 = WeakRetained;
    [WeakRetained _setContainerState:11 operationGroupNameSuffix:*(void *)(a1 + 32) retryCount:*(void *)(a1 + 56) completion:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3) {
      goto LABEL_6;
    }
    uint64_t v5 = 0;
    id v4 = [0 errorWithCode:-4000 description:@"An unknown error occured"];
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v4);
  }
  id WeakRetained = v5;
LABEL_6:
}

void sub_1001D5CBC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(NSObject **)(v5 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D5D90;
  block[3] = &unk_100730288;
  void block[4] = v5;
  id v12 = v4;
  id v7 = *(id *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v13 = v7;
  uint64_t v15 = v8;
  id v14 = v9;
  id v10 = v4;
  dispatch_async(v6, block);
}

id sub_1001D5D90(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:", *(void *)(a1 + 40), 12, *(void *)(a1 + 48), *(void *)(a1 + 64), 1, *(void *)(a1 + 56));
}

void sub_1001D5DAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(NSObject **)(v5 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D5E80;
  block[3] = &unk_100730288;
  void block[4] = v5;
  id v12 = v4;
  id v7 = *(id *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  id v13 = v7;
  uint64_t v15 = v8;
  id v14 = v9;
  id v10 = v4;
  dispatch_async(v6, block);
}

id sub_1001D5E80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processResultWithError:nextExpectedState:operationGroupNameSuffix:retryCount:shouldRetry:completion:", *(void *)(a1 + 40), 2, *(void *)(a1 + 48), *(void *)(a1 + 64), 1, *(void *)(a1 + 56));
}

id sub_1001D640C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSetupAssistantStateFrom:2 toState:3];
}

id sub_1001D6904(uint64_t a1)
{
  [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:20 stateName:0 objectNames:0 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
  [*(id *)(a1 + 32) _updateSetupAssistantStateIfNecessary];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return _objc_msgSend(v2, "_queue_cloudStoreAccountChanged:", v3);
}

void sub_1001D69E4(uint64_t a1)
{
  PKAnalyticsSendEvent();
  uint64_t v2 = +[NSNotificationCenter defaultCenter];
  [v2 removeObserver:*(void *)(a1 + 32) name:CKIdentityUpdateNotification object:0];

  [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:21 stateName:0 objectNames:0 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 120))
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Keychain syncing has finished. A cloud store reset is currently happening. Ignoring notification.", buf, 2u);
    }
  }
  else
  {
    int v5 = *(unsigned __int8 *)(v3 + 129);
    id v6 = PKLogFacilityTypeGetObject();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Keychain syncing has finished. A cloud store setup is currently happening. Ignoring notification.", buf, 2u);
      }
    }
    else
    {
      if (v7)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Keychain syncing has finished. Trying to setup the container again", buf, 2u);
      }

      uint64_t v8 = *(void **)(a1 + 32);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1001D6BB8;
      v9[3] = &unk_1007300F8;
      void v9[4] = v8;
      [v8 initialCloudDatabaseSetupWithOperationGroupNameSuffix:PKCloudStoreOperationGroupSuffixCKIdentityUpdateNotification completion:v9];
    }
  }
}

void sub_1001D6BB8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  BOOL v7 = *(NSObject **)(v6 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D6C5C;
  block[3] = &unk_100730438;
  char v11 = a2;
  void block[4] = v6;
  id v10 = v5;
  id v8 = v5;
  dispatch_async(v7, block);
}

void sub_1001D6C5C(uint64_t a1)
{
  CFStringRef v12 = @"success";
  uint64_t v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  id v13 = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  PKAnalyticsSendEvent();

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136));
  [WeakRetained cloudStoreContainerShouldUnscheduleAllBackgroundActivities:*(void *)(a1 + 32)];

  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v7 = @"YES";
    }
    else {
      CFStringRef v7 = @"NO";
    }
    int v8 = 138543618;
    CFStringRef v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[PDCloudStoreContainer _keychainSyncFinishedFired]: Finished cloud database setup with success %{public}@, error %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1001D6F60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFStringRef v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001D706C;
  v10[3] = &unk_10073E1C0;
  id v11 = v6;
  id v12 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = v5;
  id v15 = *(id *)(a1 + 48);
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

void sub_1001D706C(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = *(void **)(a1 + 56);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v13 = v7;
      __int16 v14 = 2112;
      uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "All zones were created after zone create request: %@, error %@", buf, 0x16u);
    }

    uint64_t v2 = [*(id *)(*(void *)(a1 + 48) + 152) subscriptionsForDatabaseZones:*(void *)(a1 + 56)];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Creating subscriptions for create zone request %@", buf, 0xCu);
    }

    id v8 = *(void **)(a1 + 48);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001D72C8;
    v10[3] = &unk_10073E198;
    uint64_t v9 = *(void *)(a1 + 64);
    id v11 = *(id *)(a1 + 72);
    objc_msgSend(v8, "_queue_createSubscriptionsByDatabaseIdentifier:operationGroupNameSuffix:completion:", v2, v9, v10);
    id v5 = v11;
    goto LABEL_11;
  }
  uint64_t v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Creation of %lu zones %@ failed with error %@", [*(id *)(a1 + 40) count], *(void *)(a1 + 40), *(void *)(a1 + 32));
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    id v5 = [*(id *)(a1 + 48) errorWithCode:-4012 description:v2];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
LABEL_11:
  }
}

void sub_1001D72C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFStringRef v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412546;
    id v10 = v5;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Subscriptions created for create zone request %@, with error %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, BOOL, id))(v8 + 16))(v8, v6 == 0, v6);
  }
}

void sub_1001D74E0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) == 0xE)
  {
    if ([*(id *)(v1 + 40) count])
    {
      uint64_t v3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void **)(v1 + 40);
        *(_DWORD *)long long buf = 138412290;
        __int16 v68 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Trying to insert or update items %@...", buf, 0xCu);
      }

      id v36 = objc_alloc_init((Class)NSMutableDictionary);
      long long v61 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      id obj = *(id *)(v1 + 40);
      id v40 = [obj countByEnumeratingWithState:&v61 objects:v66 count:16];
      if (v40)
      {
        uint64_t v38 = 0;
        uint64_t v39 = *(void *)v62;
        oslog = v3;
        do
        {
          uint64_t v5 = 0;
          do
          {
            if (*(void *)v62 != v39) {
              objc_enumerationMutation(obj);
            }
            uint64_t v45 = v5;
            id v6 = *(void **)(*((void *)&v61 + 1) + 8 * v5);
            long long v44 = [v6 item];
            id v43 = [v6 recordSpecificKeys];
            id v42 = [v6 codingType];
            id v47 = objc_alloc_init((Class)NSMutableDictionary);
            long long v57 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            __int16 v41 = v6;
            CFStringRef v7 = [v6 cloudStoreZones];
            id v8 = [v7 countByEnumeratingWithState:&v57 objects:v65 count:16];
            if (v8)
            {
              id v9 = v8;
              uint64_t v10 = *(void *)v58;
              do
              {
                for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v58 != v10) {
                    objc_enumerationMutation(v7);
                  }
                  id v12 = *(void **)(*((void *)&v57 + 1) + 8 * i);
                  uint64_t v13 = [*(id *)(*(void *)(v1 + 32) + 152) databaseForCloudStoreZone:v12];
                  if (v13)
                  {
                    uint64_t v14 = v1;
                    uint64_t v15 = *(void **)(v1 + 32);
                    id v16 = +[NSSet setWithObject:v12];
                    uint64_t v17 = [v15 filterCloudStoreZones:v16 action:1 inContainerDatabase:v13];

                    if ([v17 count])
                    {
                      long long v18 = [v13 identifier];
                      id v19 = [v47 objectForKey:v18];

                      if (!v19)
                      {
                        id v19 = objc_alloc_init((Class)NSMutableSet);
                        long long v20 = [v13 identifier];
                        [v47 setObject:v19 forKey:v20];
                      }
                      [v19 addObject:v12];
                    }
                    else
                    {
                      id v19 = oslog;
                      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)long long buf = 138412290;
                        __int16 v68 = v12;
                        id v19 = oslog;
                        _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Filtering cloud store zone %@ from upload action", buf, 0xCu);
                      }
                    }

                    uint64_t v1 = v14;
                  }
                }
                id v9 = [v7 countByEnumeratingWithState:&v57 objects:v65 count:16];
              }
              while (v9);
            }

            if ([v47 count]) {
              id v21 = [v47 copy];
            }
            else {
              id v21 = 0;
            }
            if (![v21 count])
            {
              uint64_t v22 = [*(id *)(*(void *)(v1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItem:v44 action:1];

              id v21 = (id)v22;
            }
            if ([v21 count])
            {
              uint64_t v23 = [v44 recordTypesAndNamesForCodingType:v42];
              if ([v23 count])
              {
                v50[0] = _NSConcreteStackBlock;
                v50[1] = 3221225472;
                v50[2] = sub_1001D7CE0;
                v50[3] = &unk_10073E260;
                id v51 = v36;
                id v24 = v23;
                uint64_t v25 = *(void *)(v1 + 32);
                id v52 = v24;
                uint64_t v53 = v25;
                id v54 = v44;
                id v55 = v43;
                id v56 = v42;
                [v21 enumerateKeysAndObjectsUsingBlock:v50];
                if (v38 & 0x100000000) != 0 || (objc_opt_respondsToSelector()) {
                  BYTE4(v3_Block_object_dispose(&STACK[0x400], 8) = 1;
                }
                else {
                  BYTE4(v3_Block_object_dispose(&STACK[0x400], 8) = [v41 detectConflicts];
                }
                if (v38) {
                  LOBYTE(v3_Block_object_dispose(&STACK[0x400], 8) = 1;
                }
                else {
                  LOBYTE(v3_Block_object_dispose(&STACK[0x400], 8) = [v41 returnRecords];
                }

                id v26 = v51;
              }
              else
              {
                if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138412290;
                  __int16 v68 = v44;
                  _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "There are no record types or names associated with item %@", buf, 0xCu);
                }
                id v26 = oslog;
              }
            }
            else
            {
              if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                __int16 v68 = v44;
                _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "There is no databases associated with item %@", buf, 0xCu);
              }
              uint64_t v23 = oslog;
            }

            uint64_t v5 = v45 + 1;
          }
          while ((id)(v45 + 1) != v40);
          id v40 = [obj countByEnumeratingWithState:&v61 objects:v66 count:16];
        }
        while (v40);
      }
      else
      {
        uint64_t v38 = 0;
      }

      uint64_t v34 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:6 storeChanges:0 returnRecords:v38 & 1 qualityOfService:*(void *)(v1 + 72) groupName:*(void *)(v1 + 48) groupNameSuffix:*(void *)(v1 + 56)];
      [(PDCloudStoreRecordsRequest *)v34 setRecordsToSaveByDatabaseIdentifier:v36];
      [(PDCloudStoreRecordsRequest *)v34 setDetectConflicts:BYTE4(v38) & 1];
      __int16 v35 = *(void **)(v1 + 32);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_1001D8294;
      void v48[3] = &unk_1007343D8;
      id v49 = *(id *)(v1 + 64);
      [v35 executeRecordsRequest:v34 completion:v48];
    }
    else
    {
      uint64_t v32 = *(void *)(v1 + 64);
      if (v32)
      {
        long long v33 = *(void (**)(void))(v32 + 16);
        v33();
      }
    }
  }
  else
  {
    int8x16_t v27 = PDCloudStoreContainerStateToString(v2);
    id v28 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer updateCloudStoreWithLocalItemsWithConfigurations:groupName:groupNameSuffix:qualityOfService:completion:]_block_invoke", v27);

    id v29 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      __int16 v68 = v28;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v30 = *(void *)(v1 + 64);
    if (v30)
    {
      id v31 = [*(id *)(v1 + 32) _cannotPerformActionErrorWithFailureReason:v28];
      (*(void (**)(uint64_t, void, void, void *))(v30 + 16))(v30, 0, 0, v31);
    }
  }
}

void sub_1001D7CE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = a3;
  id v31 = [obj countByEnumeratingWithState:&v38 objects:v48 count:16];
  if (v31)
  {
    uint64_t v7 = *(void *)v39;
    *(void *)&long long v6 = 138412802;
    long long v29 = v6;
    do
    {
      for (uint64_t i = 0; i != v31; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v5, v29);
        __int16 v11 = v10;
        if (v10) {
          id v12 = v10;
        }
        else {
          id v12 = objc_alloc_init((Class)NSMutableSet);
        }
        id v13 = v12;

        long long v33 = v13;
        [*(id *)(a1 + 32) setObject:v13 forKey:v5];
        uint64_t v14 = [v9 recordZone];
        id v15 = objc_alloc_init((Class)NSMutableArray);
        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472;
        v34[2] = sub_1001D8088;
        v34[3] = &unk_10073E238;
        id v16 = *(void **)(a1 + 40);
        uint64_t v17 = *(void **)(a1 + 56);
        v34[4] = *(void *)(a1 + 48);
        id v35 = v17;
        id v32 = v14;
        id v36 = v32;
        id v18 = v15;
        id v37 = v18;
        [v16 enumerateObjectsUsingBlock:v34];
        id v19 = [objc_alloc((Class)PKCloudStoreRecord) initWithRecords:v18];
        [v19 setCloudStoreSpecificKeys:*(void *)(a1 + 64)];
        long long v20 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = PKCloudStoreCodingTypeToString();
          *(_DWORD *)long long buf = 138412290;
          id v43 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Uploading record with coding type %@", buf, 0xCu);
        }
        [*(id *)(a1 + 56) encodeWithCloudStoreCoder:v19 codingType:*(void *)(a1 + 72)];
        uint64_t v22 = [v19 records];
        [v33 addObjectsFromArray:v22];

        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = [v9 zoneName];
          uint64_t v24 = v7;
          id v25 = v5;
          uint64_t v26 = *(void *)(a1 + 56);
          int8x16_t v27 = [v19 records];
          id v28 = [v27 count];
          *(_DWORD *)long long buf = v29;
          id v43 = v23;
          __int16 v44 = 2112;
          uint64_t v45 = v26;
          id v5 = v25;
          uint64_t v7 = v24;
          __int16 v46 = 2048;
          id v47 = v28;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Inserting items to zone \"%@\": %@, with %ld records", buf, 0x20u);
        }
      }
      id v31 = [obj countByEnumeratingWithState:&v38 objects:v48 count:16];
    }
    while (v31);
  }
}

void sub_1001D8088(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1001D8144;
  v5[3] = &unk_10073E210;
  uint64_t v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [a2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_1001D8144(id *a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  id v6 = [a1[4] containerManager];
  id v7 = [v6 container];
  id v8 = [v7 containerIdentifier];

  if ((objc_opt_respondsToSelector() & 1) == 0
    || ([a1[5] systemFieldsDataForCloudStoreWithIdentifier:v8],
        (uint64_t v9 = objc_claimAutoreleasedReturnValue()) == 0)
    || (uint64_t v10 = (void *)v9,
        +[CKRecord pk_recordWithSystemFieldsData:v9],
        id v11 = (id)objc_claimAutoreleasedReturnValue(),
        v10,
        !v11))
  {
    id v12 = objc_alloc((Class)CKRecordID);
    id v13 = [a1[6] zoneID];
    id v14 = [v12 initWithRecordName:v5 zoneID:v13];

    id v11 = [objc_alloc((Class)CKRecord) initWithRecordType:v15 recordID:v14];
  }
  [a1[7] addObject:v11];
}

void sub_1001D8294(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Update of records failed with error %@", (uint8_t *)&v12, 0xCu);
    }
  }
  if (*(void *)(a1 + 32))
  {
    id v8 = [v5 cloudStoreRecords];
    uint64_t v9 = [v8 allItems];

    uint64_t v10 = [v5 conflictingCloudStoreRecords];
    id v11 = [v10 allItems];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1001D85D4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001D86D0;
  v13[3] = &unk_100738B18;
  id v14 = v7;
  id v15 = v6;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v16 = v9;
  uint64_t v17 = v10;
  char v19 = *(unsigned char *)(a1 + 56);
  id v18 = *(id *)(a1 + 48);
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v8, v13);
}

uint64_t sub_1001D86D0(uint64_t a1)
{
  if (*(void *)(a1 + 32) || ![*(id *)(a1 + 40) count])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v4 = [*(id *)(a1 + 32) debugDescription];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v11 = v3;
      __int16 v12 = 2114;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unable to create record zones %{public}@ due to error: %{public}@", buf, 0x16u);
    }
    goto LABEL_9;
  }
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully created record zones.", buf, 2u);
  }

  id v6 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001D88C8;
  v9[3] = &unk_10072F3A0;
  void v9[4] = *(void *)(a1 + 56);
  [v6 enumerateKeysAndObjectsUsingBlock:v9];
  if (*(unsigned char *)(a1 + 72))
  {
    id v7 = [PDCloudStoreRecordsRequest alloc];
    uint64_t v2 = [(PDCloudStoreRecordsRequest *)v7 initWithRequestType:0 storeChanges:1 returnRecords:0 qualityOfService:17 groupName:PKCloudStoreOperationGroupInitialSetup groupNameSuffix:0];
    [v2 setShouldSaveToken:1];
    [*(id *)(a1 + 56) executeRecordsRequest:v2 completion:0];
LABEL_9:
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 40), *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001D88C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v24 = v5;
  id v7 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForIdentifier:v5];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v25 objects:v32 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        id v14 = [v13 zoneID];
        id v15 = [v14 zoneName];

        id v16 = *(void **)(*(void *)(a1 + 32) + 152);
        uint64_t v17 = [v13 zoneID];
        id v18 = [v16 cloudStoreZoneForZoneID:v17 inContainerDatabase:v7];

        if (!v18)
        {
          char v19 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            id v31 = v15;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "The zone \"%{public}@\" did not exist before. Informing delegate that a new zone was created.", buf, 0xCu);
          }

          long long v20 = [*(id *)(a1 + 32) delegate];
          uint64_t v21 = *(void *)(a1 + 32);
          uint64_t v22 = [*(id *)(v21 + 152) containerName];
          objc_msgSend(v20, "cloudStoreContainer:createdZoneWithName:forContainerName:scope:", v21, v15, v22, objc_msgSend(v7, "scope"));

          if (v15)
          {
            long long v29 = v15;
            uint64_t v23 = +[NSArray arrayWithObjects:&v29 count:1];
          }
          else
          {
            uint64_t v23 = 0;
          }
          [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:9 stateName:0 objectNames:v23 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v25 objects:v32 count:16];
    }
    while (v10);
  }

  [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:v24 didCreateZones:v8];
}

void sub_1001D8D24(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 160);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001D8E04;
  v12[3] = &unk_100730578;
  id v13 = v6;
  id v14 = v7;
  uint64_t v15 = v8;
  id v16 = *(id *)(a1 + 40);
  id v10 = v7;
  id v11 = v6;
  dispatch_async(v9, v12);
}

uint64_t sub_1001D8E04(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count] && !*(void *)(a1 + 40))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Successfully created subscriptions", buf, 2u);
    }

    id v5 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001D8F80;
    v7[3] = &unk_10072F3A0;
    void v7[4] = *(void *)(a1 + 48);
    [v5 enumerateKeysAndObjectsUsingBlock:v7];
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Failed to create subscriptions with error %@", buf, 0xCu);
    }
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return result;
}

id sub_1001D8F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didCreateSubscriptions:a3];
}

void sub_1001D90DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 96);
  id v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  uint64_t v15 = sub_1001D92FC;
  id v16 = &unk_10073E300;
  uint64_t v17 = v2;
  id v18 = *(id *)(a1 + 40);
  id v4 = [v3 indexOfObjectPassingTest:&v13];
  if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(*(id *)(a1 + 40), "addCompletion:", *(void *)(a1 + 48), v13, v14, v15, v16, v17);
    [*(id *)(*(void *)(a1 + 32) + 96) addObject:*(void *)(a1 + 40)];
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Records request queued %@", buf, 0xCu);
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_executeNextFecthRequestIfPossible");
  }
  else
  {
    id v7 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "objectAtIndex:", v4, v13, v14, v15, v16, v17);
    [*(id *)(a1 + 32) coalesceRequest:v7 withNewRequest:*(void *)(a1 + 40)];
    [v7 addCompletion:*(void *)(a1 + 48)];
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v20 = v9;
      __int16 v21 = 2112;
      uint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Records request coalesced %@ onto existing request %@", buf, 0x16u);
    }

    id v10 = [v7 qualityOfService];
    id v11 = [*(id *)(a1 + 40) qualityOfService];
    __int16 v12 = v7;
    if ((uint64_t)v10 <= (uint64_t)v11) {
      __int16 v12 = *(void **)(a1 + 40);
    }
    objc_msgSend(v7, "setQualityOfService:", objc_msgSend(v12, "qualityOfService"));
  }
}

id sub_1001D92FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) canCoalesceRequest:a2 withNewRequest:*(void *)(a1 + 40)];
  if (result) {
    *a4 = 1;
  }
  return result;
}

void sub_1001DA810(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001DA854(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 160);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001DA934;
  v11[3] = &unk_100730198;
  void v11[4] = v7;
  id v12 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

id sub_1001DA934(uint64_t a1)
{
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 104) callCompletionsWithResponse:*(void *)(a1 + 56) error:*(void *)(a1 + 48)];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 104);
  *(void *)(v2 + 104) = 0;

  id v4 = *(void **)(a1 + 32);
  return objc_msgSend(v4, "_queue_executeNextFecthRequestIfPossible");
}

void sub_1001DA994(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([*(id *)(a1 + 32) shouldContinueWithRequest:*(void *)(*(void *)(a1 + 32) + 104)])
  {
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(*(void *)(v11 + 8) + 40);
    uint64_t v13 = v10[13];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1001DAB7C;
    v16[3] = &unk_10073E350;
    uint64_t v21 = v11;
    void v16[4] = v10;
    id v17 = *(id *)(a1 + 40);
    id v18 = v8;
    id v19 = *(id *)(a1 + 48);
    id v20 = v9;
    [v10 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v7 deletedRecordsByDatabaseIdentifier:v18 carriedOverRecordsByDatabaseIdentifier:v12 conflictingRecordsByDatabaseIdentifier:0 request:v13 completion:v16];
  }
  else
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 104);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Records request aborting %@", buf, 0xCu);
    }

    (*((void (**)(id, void))v9 + 2))(v9, 0);
  }
}

void sub_1001DAB7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
  if ([*(id *)(*(void *)(a1 + 32) + 104) returnRecords])
  {
    [*(id *)(a1 + 40) applyCloudRecordArray:v5];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001DAC70;
    v8[3] = &unk_10072F3A0;
    id v7 = *(void **)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v7 enumerateKeysAndObjectsUsingBlock:v8];
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1001DAC70(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v8 = [v5 objectForKey:v7];
  id v9 = v8;
  if (v8) {
    id v10 = v8;
  }
  else {
    id v10 = objc_alloc_init((Class)NSMutableSet);
  }
  id v11 = v10;

  [v11 unionSet:v6];
  [*(id *)(a1 + 32) setObject:v11 forKey:v7];
}

void sub_1001DAD24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104);
    int v8 = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Records request completed %@ with error %@", (uint8_t *)&v8, 0x16u);
  }

  id v6 = objc_alloc_init(PDCloudStoreRecordsResponse);
  [(PDCloudStoreRecordsResponse *)v6 setCloudStoreRecords:*(void *)(a1 + 40)];
  id v7 = [*(id *)(a1 + 48) copy];
  [(PDCloudStoreRecordsResponse *)v6 setDeletedRecordsByDatabaseIdentifier:v7];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1001DAE44(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[13];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001DAF20;
  v9[3] = &unk_10073E3C8;
  id v10 = *(id *)(a1 + 40);
  id v11 = v5;
  id v8 = v5;
  [v6 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:a2 deletedRecordsByDatabaseIdentifier:&__NSDictionary0__struct carriedOverRecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v7 completion:v9];
}

void sub_1001DAF20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(PDCloudStoreRecordsResponse);
  [(PDCloudStoreRecordsResponse *)v4 setCloudStoreRecords:v3];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001DAFEC;
  v6[3] = &unk_1007304D8;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v5 + 16))(v5, v4, v6);
}

uint64_t sub_1001DAFEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001DAFFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Records request completed %@ with error %@", (uint8_t *)&v7, 0x16u);
  }

  id v6 = objc_alloc_init(PDCloudStoreRecordsResponse);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001DB0F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 32);
  if (v7) {
    [v7 applyCloudRecordArray:v5];
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v8 = objc_alloc_init(PDCloudStoreRecordsResponse);
    [(PDCloudStoreRecordsResponse *)v8 setCloudStoreRecords:v5];
    uint64_t v9 = *(void *)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001DB200;
    v10[3] = &unk_1007304D8;
    id v11 = v6;
    (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v9 + 16))(v9, v8, v10);
  }
  else
  {
    (*((void (**)(id, uint64_t))v6 + 2))(v6, 1);
  }
}

uint64_t sub_1001DB200(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001DB210(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc((Class)CKQuery);
  id v21 = [v8 initWithRecordType:PKCloudTransactionRecordType predicate:*(void *)(a1 + 32)];
  uint64_t v9 = *(id **)(a1 + 40);
  id v10 = [v9[13] batchLimit];
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  id v20 = v10;
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v12 = [*(id *)(*(void *)(a1 + 40) + 104) cloudStoreZone];
  uint64_t v13 = [v12 recordZone];
  uint64_t v14 = *(void *)(a1 + 64);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1001DB3F8;
  v27[3] = &unk_10073E3F0;
  void v27[4] = *(void *)(a1 + 40);
  id v28 = *(id *)(a1 + 88);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1001DB5BC;
  v22[3] = &unk_10073E468;
  id v23 = *(id *)(a1 + 72);
  id v15 = *(id *)(a1 + 80);
  id v25 = v6;
  id v26 = v7;
  id v24 = v15;
  id v16 = v6;
  id v17 = v7;
  [v9 fetchRecordsWithQuery:v21 batchLimit:v20 operationGroupName:v11 operationGroupNameSuffix:v19 qualityOfService:v18 zone:v13 containerDatabase:v14 batchHandler:v27 completion:v22];
}

void sub_1001DB3F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[13];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001DB4D4;
  v9[3] = &unk_10073E440;
  void v9[4] = v6;
  id v10 = *(id *)(a1 + 40);
  id v11 = v5;
  id v8 = v5;
  [v6 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:a2 deletedRecordsByDatabaseIdentifier:0 carriedOverRecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v7 completion:v9];
}

void sub_1001DB4D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 104) ignoreRecordsBeforeDate];
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transactions from since %@ fetched.", (uint8_t *)&v6, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1001DB5BC(uint64_t a1)
{
  [*(id *)(a1 + 32) setCloudStoreRecords:*(void *)(a1 + 40)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v2();
}

void sub_1001DB608(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v18 = a2;
  id v20 = a3;
  id v7 = a4;
  id v8 = [objc_alloc((Class)CKQuery) initWithRecordType:*(void *)(a1 + 32) predicate:*(void *)(a1 + 40)];
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2020000000;
  v27[3] = 0;
  uint64_t v9 = *(id **)(a1 + 48);
  id v19 = [v9[13] batchLimit];
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 64);
  id v11 = [*(id *)(*(void *)(a1 + 48) + 104) cloudStoreZone];
  uint64_t v12 = [v11 recordZone];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001DB810;
  v24[3] = &unk_10073E4B8;
  id v26 = v27;
  uint64_t v13 = *(void *)(a1 + 72);
  id v25 = *(id *)(a1 + 80);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001DB9D8;
  v21[3] = &unk_100731538;
  id v14 = v7;
  id v23 = v14;
  id v15 = v20;
  id v22 = v15;
  [v9 fetchRecordsWithQuery:v8 batchLimit:v19 operationGroupName:v10 operationGroupNameSuffix:v17 qualityOfService:v16 zone:v12 containerDatabase:v13 batchHandler:v24 completion:v21];

  _Block_object_dispose(v27, 8);
}

void sub_1001DB7F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1001DB810(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v15 = a3;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        id v11 = [v5 objectForKey:v10];
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v11 count];
        uint64_t v12 = [*(id *)(a1 + 32) objectForKey:v10];
        if (v12)
        {
          id v13 = [v11 allObjects];
          [v12 addObjectsFromArray:v13];
        }
        else
        {
          id v14 = *(void **)(a1 + 32);
          id v13 = [v11 mutableCopy];
          [v14 setObject:v13 forKey:v10];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v7);
  }
  if (v15) {
    v15[2](v15, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < 0xC9uLL);
  }
}

uint64_t sub_1001DB9D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1001DB9F0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = v8[13];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001DBB00;
  v14[3] = &unk_10073E508;
  void v14[4] = v8;
  id v15 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v17 = v6;
  id v18 = v7;
  id v16 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v9 deletedRecordsByDatabaseIdentifier:0 carriedOverRecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v10 completion:v14];
}

uint64_t sub_1001DBB00(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 104) ignoreRecordsBeforeDate];
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Events from since %@ processed.", (uint8_t *)&v5, 0xCu);
  }
  [*(id *)(a1 + 40) setCloudStoreRecords:*(void *)(a1 + 48)];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

uint64_t sub_1001DBBE4(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 104) ignoreRecordsBeforeDate];
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 104);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Records request since %@ succeeded %@", (uint8_t *)&v6, 0x16u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001DBCD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 104);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Records request with custom query %@ completed", buf, 0xCu);
  }

  [v5 enumerateKeysAndObjectsUsingBlock:&stru_10073E548];
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = v9[13];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001DBF3C;
  v12[3] = &unk_10073E440;
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v15 = v6;
  id v11 = v6;
  [v9 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v5 deletedRecordsByDatabaseIdentifier:0 carriedOverRecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v10 completion:v12];
}

void sub_1001DBE64(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = a2;
    NSUInteger v8 = [(NSSet *)a3 count];

    int v9 = 134218242;
    NSUInteger v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Number of records fetched: %ld for database %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_1001DBF3C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  NSUInteger v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Processed custom query batch", buf, 2u);
  }

  __int16 v11 = *(void **)(a1 + 32);
  if (v11) {
    [v11 applyCloudRecordArray:v7];
  }
  if (*(void *)(a1 + 40))
  {
    id v12 = objc_alloc_init(PDCloudStoreRecordsResponse);
    [(PDCloudStoreRecordsResponse *)v12 setCloudStoreRecords:v7];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1001DC0A4;
    v14[3] = &unk_1007304D8;
    uint64_t v13 = *(void *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v13 + 16))(v13, v12, v14);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_1001DC0A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001DC0B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Records request with custom query %@, failed with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
  [*(id *)(a1 + 40) setCloudStoreRecords:*(void *)(a1 + 48)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1001DC1A8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = PKLogFacilityTypeGetObject();
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 104);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v32 = v15;
      __int16 v33 = 2112;
      id v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Records request with upload %@, failed with error %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (v14)
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 104);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v32 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Records modification request succesfully completed %@", buf, 0xCu);
    }

    [v9 enumerateKeysAndObjectsUsingBlock:&stru_10073E590];
    id v17 = objc_alloc_init((Class)NSMutableDictionary);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1001DC52C;
    v28[3] = &unk_100734400;
    uint64_t v18 = *(void *)(a1 + 32);
    id v29 = v17;
    uint64_t v30 = v18;
    id v19 = v17;
    [v10 enumerateKeysAndObjectsUsingBlock:v28];
    if ([v19 count]) {
      id v20 = v19;
    }
    else {
      id v20 = 0;
    }
    id v21 = v20;

    id v22 = *(void **)(a1 + 32);
    uint64_t v23 = v22[13];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1001DC740;
    v25[3] = &unk_10073E5B8;
    id v26 = v21;
    id v27 = *(id *)(a1 + 40);
    id v24 = v21;
    [v22 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v9 deletedRecordsByDatabaseIdentifier:v24 carriedOverRecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:v11 request:v23 completion:v25];
  }
}

void sub_1001DC454(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  int v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a2;
    NSUInteger v8 = [(NSSet *)a3 count];

    int v9 = 134218242;
    NSUInteger v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Number of records uploaded: %ld for database %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_1001DC52C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v20 = v5;
  if ([v6 count])
  {
    id v7 = objc_alloc_init((Class)NSMutableSet);
    [*(id *)(a1 + 32) setObject:v7 forKey:v5];
  }
  else
  {
    id v7 = 0;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        BOOL v14 = *(void **)(a1 + 40);
        uint64_t v15 = [v13 recordName];
        uint64_t v16 = [v14 recordTypeFromRecordName:v15];

        id v17 = [objc_alloc((Class)PKCloudDeletedRecord) initWithRecordID:v13 recordType:v16];
        [v7 addObject:v17];
      }
      id v10 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v10);
  }

  uint64_t v18 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = [v8 count];
    *(_DWORD *)long long buf = 134218242;
    id v26 = v19;
    __int16 v27 = 2112;
    id v28 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Number of records deleted: %ld for database %@", buf, 0x16u);
  }
}

void sub_1001DC740(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = a2;
  id v8 = objc_alloc_init(PDCloudStoreRecordsResponse);
  [(PDCloudStoreRecordsResponse *)v8 setCloudStoreRecords:v7];

  [(PDCloudStoreRecordsResponse *)v8 setDeletedRecordsByDatabaseIdentifier:*(void *)(a1 + 32)];
  [(PDCloudStoreRecordsResponse *)v8 setConflictingCloudStoreRecords:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001DC7EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v23;
    while (2)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = [v7 objectForKeyedSubscript:*(void *)(*((void *)&v22 + 1) + 8 * (void)v11)];
        id v13 = [v12 count];

        if (v13)
        {

          goto LABEL_14;
        }
        uint64_t v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  if (v6)
  {
    BOOL v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 104);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v27 = v15;
      __int16 v28 = 2112;
      id v29 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Records request with recordIDs %@, failed with error %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
LABEL_14:
    uint64_t v16 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 104);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Records request with recordIDs %@, successfully fetched.", buf, 0xCu);
    }

    [v7 enumerateKeysAndObjectsUsingBlock:&stru_10073E600];
    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v19 = v18[13];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1001DCB70;
    v20[3] = &unk_10073E628;
    id v21 = *(id *)(a1 + 40);
    [v18 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v7 deletedRecordsByDatabaseIdentifier:0 carriedOverRecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v19 completion:v20];
  }
}

void sub_1001DCA98(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = a2;
    NSUInteger v8 = [(NSSet *)a3 count];

    int v9 = 134218242;
    NSUInteger v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Number of records fetched: %ld for database %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_1001DCB70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(PDCloudStoreRecordsResponse);
  [(PDCloudStoreRecordsResponse *)v4 setCloudStoreRecords:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001DCBF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    NSUInteger v8 = [*(id *)(*(void *)(a1 + 32) + 104) ckQuery];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Records request with raw query %@ completed batch.", buf, 0xCu);
  }
  if ([*(id *)(*(void *)(a1 + 32) + 104) returnRecords])
  {
    int v9 = objc_alloc_init(PDCloudStoreRecordsResponse);
    id v10 = objc_alloc_init((Class)PKCloudRecordArray);
  }
  else
  {
    int v9 = 0;
    id v10 = 0;
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001DCE34;
  v15[3] = &unk_100734400;
  void v15[4] = *(void *)(a1 + 32);
  id v11 = v10;
  id v16 = v11;
  [v5 enumerateKeysAndObjectsUsingBlock:v15];
  [*(id *)(a1 + 40) applyCloudRecordArray:v11];
  if (*(void *)(a1 + 48))
  {
    [(PDCloudStoreRecordsResponse *)v9 setCloudStoreRecords:v11];
    uint64_t v12 = *(void *)(a1 + 48);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1001DD01C;
    v13[3] = &unk_1007304D8;
    id v14 = v6;
    (*(void (**)(uint64_t, PDCloudStoreRecordsResponse *, void *))(v12 + 16))(v12, v9, v13);
  }
  else
  {
    (*((void (**)(id, uint64_t))v6 + 2))(v6, 1);
  }
}

void sub_1001DCE34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218242;
    id v24 = [v6 count];
    __int16 v25 = 2112;
    id v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Batch contains %ld records for database %@", buf, 0x16u);
  }

  if ([*(id *)(*(void *)(a1 + 32) + 104) returnRecords])
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v17 = v6;
    id v8 = v6;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v18 + 1) + 8 * (void)v12);
          id v14 = objc_alloc((Class)PKCloudRecordObject);
          uint64_t v15 = +[NSSet setWithObject:v13];
          id v16 = [v14 initWithRecords:v15];

          [*(id *)(a1 + 40) addCloudRecord:v16 forContainerDatabaseIdentifier:v5];
          uint64_t v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v10);
    }

    id v6 = v17;
  }
}

uint64_t sub_1001DD01C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001DD02C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setCloudStoreRecords:*(void *)(a1 + 40)];
  if (v3)
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 104);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Records request with custom query %@, failed with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1001DD120(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001DD248;
  v14[3] = &unk_10073E6A0;
  id v15 = v6;
  id v21 = *(id *)(a1 + 64);
  id v16 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v17 = v8;
  uint64_t v18 = v9;
  id v19 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 72);
  id v20 = v10;
  uint64_t v22 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v7, v14);
}

void sub_1001DD248(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    v2();
  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001DD3D0;
    v12[3] = &unk_100734400;
    id v13 = objc_alloc_init((Class)NSMutableDictionary);
    id v3 = *(void **)(a1 + 40);
    id v14 = *(id *)(a1 + 48);
    id v4 = v13;
    [v3 enumerateKeysAndObjectsUsingBlock:v12];
    id v5 = *(void **)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 88);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001DD560;
    v10[3] = &unk_10073E678;
    uint64_t v8 = *(void *)(a1 + 72);
    id v9 = *(id *)(a1 + 80);
    void v10[4] = *(void *)(a1 + 56);
    id v11 = v9;
    [v5 fetchRecordsWithRecordIDsByDatabaseIdentifier:v4 operationGroupName:v6 operationGroupNameSuffix:v8 qualityOfService:v7 completion:v10];
  }
}

void sub_1001DD3D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v17 = objc_alloc_init((Class)NSMutableSet);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:");
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v13 = objc_alloc((Class)CKRecordID);
        uint64_t v14 = *(void *)(a1 + 40);
        id v15 = [v12 zoneID];
        id v16 = [v13 initWithRecordName:v14 zoneID:v15];

        if (v16) {
          [v17 addObject:v16];
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v9);
  }
}

void sub_1001DD560(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 allKeys];
  id v5 = [v4 firstObject];

  id v6 = [v3 objectForKey:v5];

  id v7 = [v6 anyObject];

  if (v7)
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 104);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v19 = v9;
      __int16 v20 = 2112;
      long long v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Records request with recordIDs %@, successfully fetched %@ record", buf, 0x16u);
    }

    uint64_t v10 = *(void **)(a1 + 32);
    id v16 = v5;
    id v11 = +[NSSet setWithObject:v7];
    id v17 = v11;
    id v12 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 104);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1001DD778;
    v14[3] = &unk_10073E628;
    id v15 = *(id *)(a1 + 40);
    [v10 processFetchedCloudStoreDataWithModifiedRecordsByDatabaseIdentifier:v12 deletedRecordsByDatabaseIdentifier:0 carriedOverRecordsByDatabaseIdentifier:0 conflictingRecordsByDatabaseIdentifier:0 request:v13 completion:v14];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001DD778(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(PDCloudStoreRecordsResponse);
  [(PDCloudStoreRecordsResponse *)v4 setCloudStoreRecords:v3];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001DE1F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  if (v9)
  {
    uint64_t v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [v8 recordType];
      int v17 = 138543618;
      long long v18 = v9;
      __int16 v19 = 2114;
      __int16 v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received error: %{public}@ instead of record of type: %{public}@", (uint8_t *)&v17, 0x16u);
    }
  }
  else
  {
    id v12 = [v8 recordID];
    uint64_t v10 = [v12 recordName];

    uint64_t v13 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = [v8 recordType];
      id v15 = [v8 modifiedByDevice];
      id v16 = [v8 modificationDate];
      int v17 = 138544130;
      long long v18 = v10;
      __int16 v19 = 2114;
      __int16 v20 = v14;
      __int16 v21 = 2114;
      uint64_t v22 = v15;
      __int16 v23 = 2114;
      id v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received record: %{public}@ of type: %{public}@ modified by: %{public}@ on: %{public}@", (uint8_t *)&v17, 0x2Au);
    }
    if (v8) {
      [*(id *)(a1 + 32) addObject:v8];
    }
  }
}

void sub_1001DE3EC(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a6;
  id v13 = [*(id *)(a1 + 32) copy];
  [*(id *)(a1 + 32) removeAllObjects];
  uint64_t v14 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = [v10 zoneName];
    *(_DWORD *)long long buf = 138543362;
    id v42 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "initial CKFetchRecordZoneChangesOperation received completion block %{public}@", buf, 0xCu);
  }
  uint64_t v16 = *(void *)(a1 + 40);
  int v17 = *(NSObject **)(v16 + 160);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001DE65C;
  v24[3] = &unk_10073E768;
  id v25 = v12;
  id v26 = v10;
  char v38 = *(unsigned char *)(a1 + 112);
  uint64_t v27 = v16;
  id v28 = v11;
  id v29 = *(id *)(a1 + 48);
  char v39 = a5;
  id v30 = *(id *)(a1 + 56);
  char v40 = *(unsigned char *)(a1 + 113);
  id v31 = *(id *)(a1 + 64);
  id v32 = *(id *)(a1 + 72);
  id v18 = *(id *)(a1 + 80);
  uint64_t v19 = *(void *)(a1 + 104);
  id v33 = v18;
  uint64_t v37 = v19;
  id v35 = *(id *)(a1 + 88);
  id v36 = *(id *)(a1 + 96);
  id v34 = v13;
  id v20 = v13;
  id v21 = v11;
  id v22 = v10;
  id v23 = v12;
  dispatch_async(v17, v24);
}

void sub_1001DE65C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 40) zoneName];
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v34 = v3;
      __int16 v35 = 2112;
      uint64_t v36 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "initial sync CKFetchRecordZoneChangesOperation zoneFetchCompletion failed for zone %@: %@", buf, 0x16u);
    }
  }
  else if ([*(id *)(*(void *)(a1 + 48) + 104) requestType] == (id)1)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1001DE9B4;
    v16[3] = &unk_10073E718;
    char v28 = *(unsigned char *)(a1 + 136);
    int v17 = *(id *)(a1 + 56);
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    id v18 = v5;
    uint64_t v19 = v6;
    id v20 = *(id *)(a1 + 64);
    char v29 = *(unsigned char *)(a1 + 137);
    id v21 = *(id *)(a1 + 72);
    char v30 = *(unsigned char *)(a1 + 138);
    id v22 = *(id *)(a1 + 80);
    id v23 = *(id *)(a1 + 88);
    id v7 = *(id *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 128);
    id v24 = v7;
    uint64_t v27 = v8;
    id v25 = *(id *)(a1 + 112);
    id v26 = *(id *)(a1 + 120);
    uint64_t v9 = objc_retainBlock(v16);
    if ([*(id *)(a1 + 104) count])
    {
      uint64_t v10 = *(void *)(a1 + 104);
      uint64_t v11 = *(void *)(a1 + 112);
      uint64_t v31 = *(void *)(a1 + 64);
      uint64_t v32 = v10;
      id v12 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1001DED28;
      v14[3] = &unk_10073E740;
      void v14[4] = *(void *)(a1 + 48);
      id v15 = v9;
      (*(void (**)(uint64_t, void *, void *))(v11 + 16))(v11, v12, v14);
    }
    else
    {
      ((void (*)(void *, void))v9[2])(v9, *(unsigned __int8 *)(a1 + 137));
    }

    uint64_t v2 = v17;
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 40) zoneName];
      *(_DWORD *)long long buf = 138543362;
      id v34 = v13;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "initial sync CKFetchRecordZoneChangesOperation was cancelled %{public}@", buf, 0xCu);
    }
  }
}

void sub_1001DE9B4(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = [*(id *)(a1 + 40) zoneName];
      int v24 = 138412546;
      id v25 = v5;
      __int16 v26 = 2114;
      uint64_t v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "initial sync CKFetchRecordZoneChangesOperation saving token %@ for zone %{public}@", (uint8_t *)&v24, 0x16u);
    }
    id v7 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 32) requiringSecureCoding:1 error:0];
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void **)(*(void *)(a1 + 48) + 152);
    uint64_t v10 = +[NSDate date];
    [v9 containerDatabaseIdentifier:v8 didUpdateChangeToken:v7 fetchTimestamp:v10 forZoneID:*(void *)(a1 + 40)];
  }
  if (*(unsigned char *)(a1 + 121)) {
    BOOL v11 = a2 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!*(unsigned char *)(a1 + 121))
    {
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = [*(id *)(a1 + 40) zoneName];
        int v24 = 138543362;
        id v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "initial sync CKFetchRecordZoneChangesOperation no more changes in zone %{public}@", (uint8_t *)&v24, 0xCu);
      }
      if (*(unsigned char *)(a1 + 120)) {
        [*(id *)(*(void *)(a1 + 48) + 152) containerDatabaseIdentifier:*(void *)(a1 + 56) didFinishInitialSync:1 forZoneID:*(void *)(a1 + 40)];
      }
      uint64_t v14 = *(void *)(a1 + 104);
      if (v14) {
        (*(void (**)(uint64_t, void))(v14 + 16))(v14, 0);
      }
    }
  }
  else
  {
    id v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = [*(id *)(a1 + 40) zoneName];
      int v24 = 138543362;
      id v25 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "initial sync CKFetchRecordZoneChangesOperation issuing followup for zone %{public}@", (uint8_t *)&v24, 0xCu);
    }
    id v18 = [*(id *)(*(void *)(a1 + 48) + 152) cloudStoreZoneForZoneID:*(void *)(a1 + 40) inContainerDatabase:*(void *)(a1 + 64)];
    uint64_t v19 = [[PDCloudStoreTokenRecordFetchCloudStoreZoneAndChangeToken alloc] initWithCloudStoreZone:v18 changeToken:*(void *)(a1 + 32)];
    id v20 = objc_alloc_init(PDCloudStoreTokenRecordFetchConfiguration);
    [(PDCloudStoreTokenRecordFetchConfiguration *)v20 setShouldSaveToken:*(unsigned __int8 *)(a1 + 120)];
    [(PDCloudStoreTokenRecordFetchConfiguration *)v20 setUseStoredChangeToken:*(unsigned __int8 *)(a1 + 122)];
    id v21 = +[NSSet setWithObject:v19];
    [(PDCloudStoreTokenRecordFetchConfiguration *)v20 setCloudStoreZonesAndChangeTokens:v21];

    [(PDCloudStoreTokenRecordFetchConfiguration *)v20 setContainerDatabase:*(void *)(a1 + 64)];
    id v22 = [*(id *)(a1 + 72) ignoreRecordsBeforeDate];
    [(PDCloudStoreTokenRecordFetchConfiguration *)v20 setIgnoreRecordsBeforeDate:v22];

    id v23 = [*(id *)(a1 + 72) ignoreRecordsAfterDate];
    [(PDCloudStoreTokenRecordFetchConfiguration *)v20 setIgnoreRecordsAfterDate:v23];

    -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreChangesMadeByThisDevice:](v20, "setIgnoreChangesMadeByThisDevice:", [*(id *)(a1 + 72) ignoreChangesMadeByThisDevice]);
    -[PDCloudStoreTokenRecordFetchConfiguration setBatchLimit:](v20, "setBatchLimit:", [*(id *)(a1 + 72) batchLimit]);
    objc_msgSend(*(id *)(a1 + 48), "_queue_fetchInitialRecordsUsingConfiguration:operationGroupName:operationGroupNameSuffix:qualityOfService:batchHandler:completion:", v20, *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 112), *(void *)(a1 + 96), *(void *)(a1 + 104));
  }
}

void sub_1001DED28(uint64_t a1, char a2)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001DEDC0;
  v4[3] = &unk_10073B5A0;
  id v5 = *(id *)(a1 + 40);
  char v6 = a2;
  dispatch_async(v3, v4);
}

uint64_t sub_1001DEDC0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1001DEDD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 160);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001DEED0;
  v7[3] = &unk_10072FEA8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1001DEED0(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "initial sync CKFetchRecordZoneChangesOperation fetchRecordZoneChangesCompletionBlock called", buf, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Zone changes completion block called with error: %@", buf, 0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001DF04C;
    v9[3] = &unk_10072E570;
    uint64_t v8 = *(void *)(a1 + 64);
    id v10 = *(id *)(a1 + 72);
    objc_msgSend(v4, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v5, 0, v6, v7, v8, v9);
  }
}

uint64_t sub_1001DF04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_1001DFEE4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2C0], 8);
  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose(&STACK[0x3C0], 8);
  _Unwind_Resume(a1);
}

void sub_1001DFF7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 changeToken];
  id v5 = objc_alloc_init((Class)CKFetchRecordZoneChangesConfiguration);
  uint64_t v6 = [v3 cloudStoreZone];
  if (v4)
  {
    id v7 = v4;
LABEL_5:
    uint64_t v8 = v7;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    id v7 = [*(id *)(*(void *)(a1 + 32) + 152) changeTokenForCloudStoreStore:v6];
    goto LABEL_5;
  }
  uint64_t v8 = 0;
LABEL_6:
  uint64_t v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [v8 data];
    id v11 = [v6 zoneName];
    *(_DWORD *)long long buf = 138412546;
    char v30 = v10;
    __int16 v31 = 2114;
    uint64_t v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Using server change token %@ for zone %{public}@", buf, 0x16u);
  }
  if (*(unsigned char *)(a1 + 80) && !v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Stored token was requested but no token present, overriding operation as initial downnload and QoS as utility", buf, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 17;
    [*(id *)(*(void *)(a1 + 32) + 104) setQualityOfService:17];
    uint64_t v12 = PKCloudStoreOperationGroupInitialDownload;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), PKCloudStoreOperationGroupInitialDownload);
    [*(id *)(*(void *)(a1 + 32) + 104) setGroupName:v12];
  }
  [v5 setPreviousServerChangeToken:v8];
  [v5 setResultsLimit:50];
  [*(id *)(a1 + 32) _updateFetchNewestChangesFirstFlagForConfiguration:v5 request:*(void *)(*(void *)(a1 + 32) + 104)];
  if (*(unsigned char *)(a1 + 81)) {
    [v5 setFetchChangesMadeByThisDevice:0];
  }
  id v13 = [v6 recordZone];
  uint64_t v14 = [v13 zoneID];

  [*(id *)(a1 + 40) setObject:v5 forKey:v14];
  [*(id *)(a1 + 48) addObject:v14];
  uint64_t v27 = v3;
  [v3 setChangeToken:v8];
  id v15 = [v14 zoneName];
  __int16 v26 = v4;
  uint64_t v16 = v6;
  if (v15)
  {
    int v17 = [v14 zoneName];
    char v28 = v17;
    id v18 = +[NSArray arrayWithObjects:&v28 count:1];
  }
  else
  {
    id v18 = 0;
  }

  uint64_t v19 = *(void **)(a1 + 32);
  id v20 = [v8 data];
  uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  id v22 = [*(id *)(*(void *)(a1 + 32) + 104) groupName];
  id v23 = [v19 reportContainerChangeIntervalBeginEventWithType:15 stateName:0 objectNames:v18 changeToken:v20 operationGroupName:v21 operationGroupNameSuffix:v22];

  int v24 = *(void **)(a1 + 56);
  id v25 = [v14 zoneName];
  [v24 safelySetObject:v23 forKey:v25];
}

void sub_1001E0310(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 160);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001E0408;
  v7[3] = &unk_100736010;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1001E0408(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) recordID];
  id v3 = [v2 recordName];

  unsigned int v4 = [*(id *)(*(void *)(a1 + 40) + 104) ignoreExistingRecordHash];
  if (*(void *)(a1 + 32))
  {
    unsigned int v5 = v4;
    PKLogFacilityTypeGetObject();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    os_signpost_id_t v7 = os_signpost_id_make_with_pointer(v6, *(const void **)(a1 + 40));
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v8 = v7;
      if (os_signpost_enabled(v6))
      {
        LOWORD(v23) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, v8, "cloudstore:recordChanged", "", (uint8_t *)&v23, 2u);
      }
    }

    uint64_t v9 = [*(id *)(a1 + 32) creationDate];
    id v10 = *(void **)(*(void *)(a1 + 40) + 152);
    id v11 = [*(id *)(a1 + 32) recordID];
    id v12 = [v11 zoneID];
    id v13 = [v10 cloudStoreZoneForZoneID:v12 inContainerDatabase:*(void *)(a1 + 48)];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 144));
    LODWORD(v12) = [WeakRetained hasMatchingCloudStoreRecord:*(void *)(a1 + 32) inCloudStoreZone:v13];

    if ((v12 ^ 1 | v5))
    {
      id v15 = *(void **)(a1 + 56);
      if (v15 && [v15 compare:v9] == (id)1)
      {
        uint64_t v16 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 138543362;
          int v24 = v3;
          int v17 = "Ignoring record before start date %{public}@";
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v23, 0xCu);
        }
      }
      else
      {
        id v18 = *(void **)(a1 + 64);
        if (!v18 || [v18 compare:v9] != (id)-1)
        {
          uint64_t v19 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            id v20 = [*(id *)(a1 + 32) recordType];
            uint64_t v21 = [*(id *)(a1 + 32) modifiedByDevice];
            id v22 = [*(id *)(a1 + 32) modificationDate];
            int v23 = 138544130;
            int v24 = v3;
            __int16 v25 = 2114;
            __int16 v26 = v20;
            __int16 v27 = 2114;
            char v28 = v21;
            __int16 v29 = 2114;
            char v30 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Received record: %{public}@ of type: %{public}@ modified by: %{public}@ on: %{public}@", (uint8_t *)&v23, 0x2Au);
          }
          [*(id *)(a1 + 72) addObject:*(void *)(a1 + 32)];
          goto LABEL_19;
        }
        uint64_t v16 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 138543362;
          int v24 = v3;
          int v17 = "Ignoring record after end date %{public}@";
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v16 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 138543362;
        int v24 = v3;
        int v17 = "Ignoring changed record since the local hash is the same as the remote hash %{public}@";
        goto LABEL_12;
      }
    }

LABEL_19:
  }
}

void sub_1001E076C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  os_signpost_id_t v8 = *(NSObject **)(v7 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E0860;
  block[3] = &unk_10072FF48;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_1001E0860(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v13 = 138543618;
    uint64_t v14 = v3;
    __int16 v15 = 2114;
    uint64_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cloud store record deleted with recordID %{public}@: recordType: %{public}@", (uint8_t *)&v13, 0x16u);
  }

  id v5 = [objc_alloc((Class)PKCloudDeletedRecord) initWithRecordID:*(void *)(a1 + 32) recordType:*(void *)(a1 + 40)];
  if (v5)
  {
    PKLogFacilityTypeGetObject();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    os_signpost_id_t v7 = os_signpost_id_make_with_pointer(v6, *(const void **)(a1 + 48));
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v8 = v7;
      if (os_signpost_enabled(v6))
      {
        LOWORD(v13) = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, v8, "cloudstore:recordDeleted", "", (uint8_t *)&v13, 2u);
      }
    }

    id v9 = *(void **)(*(void *)(a1 + 48) + 152);
    id v10 = [*(id *)(a1 + 32) zoneID];
    id v11 = [v9 cloudStoreZoneForZoneID:v10 inContainerDatabase:*(void *)(a1 + 56)];

    [*(id *)(a1 + 64) addObject:v5];
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 144));
    [WeakRetained removeCloudStoreRecordID:*(void *)(a1 + 32) recordType:*(void *)(a1 + 40) cloudStoreZone:v11];
  }
}

void sub_1001E0A18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 8);
  int v5 = *(unsigned __int8 *)(v4 + 24);
  if (*(unsigned char *)(v4 + 24) && *(uint64_t *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) < 1)
  {
    PKLogFacilityTypeGetObject();
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    os_signpost_id_t v11 = os_signpost_id_make_with_pointer(v10, *(const void **)(a1 + 32));
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v12 = v11;
      if (os_signpost_enabled(v10))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_END, v12, "cloudstore:fetchRecordChangesBlock", "", buf, 2u);
      }
    }

    id v13 = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) count];
    uint64_t v14 = *(void *)(a1 + 32);
    __int16 v15 = *(NSObject **)(v14 + 160);
    if (v13)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1001E0D4C;
      block[3] = &unk_10073E858;
      uint64_t v33 = *(void *)(a1 + 112);
      void block[4] = v14;
      __int16 v35 = *(_WORD *)(a1 + 128);
      id v27 = *(id *)(a1 + 40);
      id v28 = *(id *)(a1 + 48);
      id v29 = *(id *)(a1 + 56);
      id v16 = *(id *)(a1 + 64);
      uint64_t v17 = *(void *)(a1 + 120);
      id v30 = v16;
      uint64_t v34 = v17;
      id v31 = *(id *)(a1 + 80);
      id v32 = *(id *)(a1 + 88);
      dispatch_async(v15, block);

      id v18 = v27;
    }
    else
    {
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1001E0EF8;
      v21[3] = &unk_100730578;
      id v19 = *(id *)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 32);
      id v22 = v19;
      uint64_t v23 = v20;
      id v24 = v3;
      id v25 = *(id *)(a1 + 88);
      dispatch_async(v15, v21);

      id v18 = v22;
    }
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = @"YES";
      if (!v5) {
        CFStringRef v7 = @"NO";
      }
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 104);
      *(_DWORD *)long long buf = 138543874;
      CFStringRef v37 = v7;
      __int16 v38 = 2048;
      uint64_t v39 = v8;
      __int16 v40 = 2112;
      uint64_t v41 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Still processing records fetch because completedProcessingRecordsFetch is %{public}@ and processingRecordsCounter is %ld for request %@", buf, 0x20u);
    }
  }
}

void sub_1001E0D4C(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) count];
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104);
    int v10 = 134218498;
    id v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "There are %lu additional zones that require more items to be fetched %@ for request %@", (uint8_t *)&v10, 0x20u);
  }

  id v6 = objc_alloc_init(PDCloudStoreTokenRecordFetchConfiguration);
  [(PDCloudStoreTokenRecordFetchConfiguration *)v6 setShouldSaveToken:*(unsigned __int8 *)(a1 + 104)];
  [(PDCloudStoreTokenRecordFetchConfiguration *)v6 setUseStoredChangeToken:*(unsigned __int8 *)(a1 + 105)];
  id v7 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) copy];
  [(PDCloudStoreTokenRecordFetchConfiguration *)v6 setCloudStoreZonesAndChangeTokens:v7];

  [(PDCloudStoreTokenRecordFetchConfiguration *)v6 setContainerDatabase:*(void *)(a1 + 40)];
  uint64_t v8 = [*(id *)(a1 + 48) ignoreRecordsBeforeDate];
  [(PDCloudStoreTokenRecordFetchConfiguration *)v6 setIgnoreRecordsBeforeDate:v8];

  uint64_t v9 = [*(id *)(a1 + 48) ignoreRecordsAfterDate];
  [(PDCloudStoreTokenRecordFetchConfiguration *)v6 setIgnoreRecordsAfterDate:v9];

  -[PDCloudStoreTokenRecordFetchConfiguration setIgnoreChangesMadeByThisDevice:](v6, "setIgnoreChangesMadeByThisDevice:", [*(id *)(a1 + 48) ignoreChangesMadeByThisDevice]);
  objc_msgSend(*(id *)(a1 + 32), "_queue_fetchAllRecordsUsingConfiguration:operationGroupName:operationGroupNameSuffix:qualityOfService:batchHandler:completion:", v6, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 96), *(void *)(a1 + 72), *(void *)(a1 + 80));
}

uint64_t sub_1001E0EF8(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "allKeys", 0);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v7];
        [*(id *)(a1 + 40) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v8 error:*(void *)(a1 + 48)];
        [*(id *)(a1 + 32) removeObjectForKey:v7];
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }
    while (v4);
  }

  uint64_t v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 104);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Completed processing records fetch for request %@.", buf, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 48));
  }
  return result;
}

void sub_1001E1094(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a6;
  long long v13 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1001E125C;
  v22[3] = &unk_10073E958;
  id v23 = v12;
  id v24 = v10;
  id v14 = *(id *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  id v25 = v14;
  uint64_t v26 = v15;
  id v16 = *(id *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 112);
  id v27 = v16;
  uint64_t v36 = v17;
  id v28 = *(id *)(a1 + 56);
  id v29 = *(id *)(a1 + 64);
  id v30 = *(id *)(a1 + 72);
  id v31 = *(id *)(a1 + 80);
  id v34 = *(id *)(a1 + 96);
  id v18 = *(id *)(a1 + 88);
  char v38 = a5;
  id v32 = v18;
  id v33 = v11;
  uint64_t v37 = *(void *)(a1 + 120);
  char v39 = *(unsigned char *)(a1 + 128);
  id v35 = *(id *)(a1 + 104);
  id v19 = v11;
  id v20 = v10;
  id v21 = v12;
  dispatch_async(v13, v22);
}

void sub_1001E125C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v4)
    {
      uint64_t v9 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v53 = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CKFetchRecordZoneChangesOperation calling batch handler for zoneID %{public}@", buf, 0xCu);
    }

    id v10 = [*(id *)(*(void *)(a1 + 56) + 152) cloudStoreZoneForZoneID:*(void *)(a1 + 40) inContainerDatabase:*(void *)(a1 + 64)];
    ++*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 24);
    id v11 = [*(id *)(a1 + 72) allObjects];
    id v7 = objc_msgSend(v11, "pk_createArrayBySafelyApplyingBlock:", &stru_10073E8C0);

    if ([v7 count])
    {
      id v12 = *(void **)(a1 + 56);
      long long v13 = [*(id *)(a1 + 40) zoneName];
      [v12 reportContainerChangeSignpostEventType:17 stateName:v13 objectNames:v7 changeToken:0 error:0 operationGroupName:*(void *)(a1 + 80) operationGroupNameSuffix:*(void *)(a1 + 88)];
    }
    id v14 = [*(id *)(a1 + 96) allObjects];
    id v8 = objc_msgSend(v14, "pk_createArrayBySafelyApplyingBlock:", &stru_10073E8E0);

    if ([v8 count])
    {
      uint64_t v15 = *(void **)(a1 + 56);
      id v16 = [*(id *)(a1 + 40) zoneName];
      [v15 reportContainerChangeSignpostEventType:18 stateName:v16 objectNames:v8 changeToken:0 error:0 operationGroupName:*(void *)(a1 + 80) operationGroupNameSuffix:*(void *)(a1 + 88)];
    }
    PKLogFacilityTypeGetObject();
    uint64_t v17 = (id)objc_claimAutoreleasedReturnValue();
    os_signpost_id_t v18 = os_signpost_id_make_with_pointer(v17, *(const void **)(a1 + 56));
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v19 = v18;
      if (os_signpost_enabled(v17))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_BEGIN, v19, "cloudstore:fetchRecordChangesCallBatchHandler", "", buf, 2u);
      }
    }

    uint64_t v20 = *(void *)(a1 + 120);
    uint64_t v50 = *(void *)(a1 + 104);
    id v21 = [*(id *)(a1 + 72) copy];
    id v51 = v21;
    id v22 = +[NSDictionary dictionaryWithObjects:&v51 forKeys:&v50 count:1];
    id v23 = *(void **)(a1 + 96);
    uint64_t v48 = *(void *)(a1 + 104);
    id v24 = [v23 copy];
    id v49 = v24;
    id v25 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_1001E176C;
    v34[3] = &unk_10073E930;
    v34[4] = *(void *)(a1 + 56);
    char v46 = *(unsigned char *)(a1 + 152);
    id v35 = *(id *)(a1 + 40);
    id v36 = v10;
    id v26 = *(id *)(a1 + 112);
    uint64_t v27 = *(void *)(a1 + 144);
    id v37 = v26;
    uint64_t v44 = v27;
    id v38 = *(id *)(a1 + 48);
    id v39 = *(id *)(a1 + 32);
    char v47 = *(unsigned char *)(a1 + 153);
    id v40 = *(id *)(a1 + 104);
    id v41 = *(id *)(a1 + 80);
    id v28 = *(id *)(a1 + 88);
    id v30 = *(void **)(a1 + 128);
    uint64_t v29 = *(void *)(a1 + 136);
    id v42 = v28;
    uint64_t v45 = v29;
    id v43 = v30;
    id v31 = v10;
    id v32 = *(void (**)(uint64_t, void *, void *, void *))(v20 + 16);
    id v33 = v31;
    v32(v20, v22, v25, v34);

    goto LABEL_16;
  }
  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 40) zoneName];
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    uint64_t v53 = v5;
    __int16 v54 = 2112;
    uint64_t v55 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CKFetchRecordZoneChangesOperation zoneFetchCompletion failed for zone %{public}@: %@", buf, 0x16u);
  }
  id v7 = [*(id *)(a1 + 40) zoneName];
  if (v7)
  {
    id v8 = [*(id *)(a1 + 48) objectForKeyedSubscript:v7];
    [*(id *)(a1 + 56) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v8 error:*(void *)(a1 + 32)];
    [*(id *)(a1 + 48) removeObjectForKey:v7];
LABEL_16:
  }
}

id sub_1001E1714(id a1, CKRecord *a2)
{
  uint64_t v2 = [(CKRecord *)a2 recordID];
  id v3 = [v2 recordName];

  return v3;
}

id sub_1001E1764(id a1, PKCloudDeletedRecord *a2)
{
  return [(PKCloudDeletedRecord *)a2 recordName];
}

void sub_1001E176C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(NSObject **)(v3 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E18C8;
  block[3] = &unk_10073E908;
  void block[4] = v3;
  char v21 = a2;
  char v22 = *(unsigned char *)(a1 + 128);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 112);
  id v12 = v5;
  uint64_t v19 = v6;
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  char v23 = *(unsigned char *)(a1 + 129);
  id v15 = *(id *)(a1 + 80);
  id v16 = *(id *)(a1 + 88);
  id v7 = *(id *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 120);
  id v17 = v7;
  uint64_t v20 = v8;
  id v18 = *(id *)(a1 + 104);
  dispatch_async(v4, block);
}

uint64_t sub_1001E18C8(uint64_t a1)
{
  PKLogFacilityTypeGetObject();
  uint64_t v2 = (id)objc_claimAutoreleasedReturnValue();
  os_signpost_id_t v3 = os_signpost_id_make_with_pointer(v2, *(const void **)(a1 + 32));
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = v3;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_END, v4, "cloudstore:fetchRecordChangesCallBatchHandler", "", buf, 2u);
    }
  }

  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"YES";
    if (*(unsigned char *)(a1 + 128)) {
      CFStringRef v7 = @"YES";
    }
    else {
      CFStringRef v7 = @"NO";
    }
    uint64_t v8 = *(void *)(a1 + 40);
    if (!*(unsigned char *)(a1 + 129)) {
      CFStringRef v6 = @"NO";
    }
    *(_DWORD *)long long buf = 138543874;
    CFStringRef v25 = v7;
    __int16 v26 = 2114;
    CFStringRef v27 = v6;
    __int16 v28 = 2114;
    uint64_t v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CKFetchRecordZoneChangesOperation continue: %{public}@, moreComing: %{public}@, for zoneID %{public}@", buf, 0x20u);
  }

  if (*(unsigned char *)(a1 + 128)) {
    BOOL v9 = *(unsigned char *)(a1 + 129) != 0;
  }
  else {
    BOOL v9 = 0;
  }
  if (PKIsWatch() && (PKDeviceIsPluggedIn() & 1) == 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v11 = *(const __CFString **)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      CFStringRef v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CKFetchRecordZoneChangesOperation not fetting from zone %{public}@ again since the device is a watch that is not plugged in.", buf, 0xCu);
    }
  }
  else if (v9)
  {
    id v10 = [[PDCloudStoreTokenRecordFetchCloudStoreZoneAndChangeToken alloc] initWithCloudStoreZone:*(void *)(a1 + 48) changeToken:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) addObject:v10];
    goto LABEL_23;
  }
  id v10 = [*(id *)(a1 + 40) zoneName];
  if (v10)
  {
    id v12 = [*(id *)(a1 + 64) objectForKeyedSubscript:v10];
    [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v12 error:*(void *)(a1 + 72)];
    [*(id *)(a1 + 64) removeObjectForKey:v10];
  }
LABEL_23:

  if (*(unsigned char *)(a1 + 130))
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 56) data];
      id v14 = [*(id *)(a1 + 40) zoneName];
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v25 = v13;
      __int16 v26 = 2114;
      CFStringRef v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CKFetchRecordZoneChangesOperation saving token %@ for zone %{public}@", buf, 0x16u);
    }
    id v15 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 56) requiringSecureCoding:1 error:0];
    id v16 = *(void **)(*(void *)(a1 + 32) + 152);
    uint64_t v17 = *(void *)(a1 + 80);
    id v18 = +[NSDate date];
    [v16 containerDatabaseIdentifier:v17 didUpdateChangeToken:v15 fetchTimestamp:v18 forZoneID:*(void *)(a1 + 40)];

    uint64_t v19 = [*(id *)(a1 + 40) zoneName];
    if (v19)
    {
      uint64_t v20 = [*(id *)(a1 + 40) zoneName];
      char v23 = v20;
      char v21 = +[NSArray arrayWithObjects:&v23 count:1];
    }
    else
    {
      char v21 = 0;
    }

    [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:16 stateName:0 objectNames:v21 changeToken:v15 error:0 operationGroupName:*(void *)(a1 + 88) operationGroupNameSuffix:*(void *)(a1 + 96)];
  }
  --*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 24);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 104) + 16))();
}

void sub_1001E1CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E1DB4;
  block[3] = &unk_10073E9A8;
  uint64_t v14 = *(void *)(a1 + 72);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1001E1DB4(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CKFetchRecordZoneChangesOperation fetchRecordZoneChangesCompletionBlock called", buf, 2u);
  }

  *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Zone changes completion block called with error: %@", buf, 0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001E1F58;
    v9[3] = &unk_10072E570;
    uint64_t v8 = *(void *)(a1 + 64);
    id v10 = *(id *)(a1 + 72);
    objc_msgSend(v4, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v5, 0, v6, v7, v8, v9);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

uint64_t sub_1001E1F58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001E2980(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001E29B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [objc_alloc((Class)PKCloudStoreError) initWithError:v6];

  if ([v7 isChangeTokenExpired])
  {
    id v8 = v5;
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138543362;
      id v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "The server change token expired for zoneID %{public}@.", (uint8_t *)&v10, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:*(void *)(a1 + 40) didUpdateChangeToken:0 fetchTimestamp:0 forZoneID:v8];
  }
}

void sub_1001E2AD4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Trying to fetch and re-create zones in database %{public}@ after a zone not found error", buf, 0xCu);
    }

    int v10 = *(void **)(a1 + 48);
    id v11 = +[NSSet setWithObject:*(void *)(a1 + 40)];
    uint64_t v12 = PKCloudStoreOperationGroupSuffixZoneNotFoundError;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1001E2C7C;
    v13[3] = &unk_1007307C0;
    uint64_t v16 = *(void *)(a1 + 56);
    id v15 = v7;
    id v14 = v6;
    [v10 _fetchAndSaveRecordZonesWithContainerDatabaseIdentifiers:v11 operationGroupNameSuffix:v12 completion:v13];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_1001E2C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    id v7 = *(void **)(v4 + 40);
    id v5 = (id *)(v4 + 40);
    id v6 = v7;
    if (v7) {
      id v8 = v6;
    }
    else {
      id v8 = v3;
    }
    objc_storeStrong(v5, v8);
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138543362;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Trying to fetch and re-create zones in database %{public}@ after a zone not found error", (uint8_t *)&v10, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001E2D68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138543362;
      uint64_t v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Ensuring zone integrity after a zone not found error occured in database %{public}@", (uint8_t *)&v10, 0xCu);
    }

    [*(id *)(a1 + 48) ensureZoneShareIntegrity];
  }
  v7[2](v7, v6, 0);
}

void sub_1001E2E64(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    id v8 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    int v10 = +[NSSet setWithObject:*(void *)(a1 + 48)];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001E2FEC;
    v12[3] = &unk_100736DB0;
    uint64_t v11 = *(void **)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    id v13 = v11;
    id v15 = v7;
    id v14 = v6;
    [v8 resetContainerWithAdditionalZoneIDsByDatabaseIdentifiers:v9 includedCachedZoneForDatabaseIdentifiers:v10 completion:v12];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_1001E2FEC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = *(void *)(a1[7] + 8);
    id v8 = *(void **)(v5 + 40);
    id v6 = (id *)(v5 + 40);
    id v7 = v8;
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = v4;
    }
    objc_storeStrong(v6, v9);
    int v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[4];
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Trying to reset databas %@ with error %@", (uint8_t *)&v12, 0x16u);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1001E30E8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    CFStringRef v25 = v6;
    id v8 = objc_alloc_init((Class)NSMutableSet);
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v9 = *(id *)(a1 + 32);
    id v10 = [v9 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v33;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v33 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = [objc_alloc((Class)CKRecordID) initWithRecordName:CKRecordNameZoneWideShare zoneID:*(void *)(*((void *)&v32 + 1) + 8 * (void)v13)];
          [v8 addObject:v14];

          uint64_t v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v11);
    }

    id v15 = objc_alloc_init(PDCloudStoreRecordsRequestModificationOperationConfiguration);
    [(PDCloudStoreRecordsRequestModificationOperationConfiguration *)v15 setMarkAsParticipantNeedsNewInvitationToken:1];
    uint64_t v16 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Removing zone wide share for recordIDs %{public}@", buf, 0xCu);
    }

    uint64_t v17 = *(void **)(a1 + 40);
    uint64_t v36 = *(void *)(a1 + 48);
    id v18 = [v8 copy];
    id v37 = v18;
    uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
    uint64_t v20 = PKCloudStoreOperationGroupSharedZoneUnrecoverableError;
    uint64_t v21 = PKCloudStoreOperationGroupSuffixUnrecoverableError;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_1001E3408;
    v26[3] = &unk_10073EA20;
    id v27 = *(id *)(a1 + 32);
    id v22 = *(id *)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 56);
    id v28 = v22;
    uint64_t v31 = v23;
    id v30 = v7;
    id v24 = v25;
    id v29 = v25;
    [v17 modifyRecordsOperationWithRecordsToSaveByDatabaseIdentifier:0 recordIDsToDeleteByDatabaseIdentifier:v19 recordModificationOperationConfiguration:v15 emitErrorIfConflictDetected:0 isModifyingShare:1 operationGroupName:v20 operationGroupNameSuffix:v21 qualityOfService:17 completion:v26];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
    id v24 = v6;
  }
}

void sub_1001E3408(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
    int v15 = 138543874;
    uint64_t v16 = v8;
    __int16 v17 = 2112;
    id v18 = v6;
    __int16 v19 = 2114;
    uint64_t v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Completed removing zone share for zoneIDs %{public}@, with error %@ in scope %{public}@", (uint8_t *)&v15, 0x20u);
  }

  uint64_t v10 = *(void *)(a1[8] + 8);
  uint64_t v13 = *(void **)(v10 + 40);
  id v11 = (id *)(v10 + 40);
  uint64_t v12 = v13;
  if (v13) {
    id v14 = v12;
  }
  else {
    id v14 = v6;
  }
  objc_storeStrong(v11, v14);
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_1001E350C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v6 = a4;
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)
    && [*(id *)(a1 + 32) shouldForwardErrorsToRequestCompletionHandlers])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 40));
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == 0);
  }
}

void sub_1001E3788(uint64_t a1)
{
  group = dispatch_group_create();
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v80 objects:v86 count:16];
  if (v3)
  {
    uint64_t v47 = *(void *)v81;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v81 != v47) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v80 + 1) + 8 * i);
        id v6 = [*(id *)(a1 + 32) objectForKey:v5];
        uint64_t v7 = [v6 allObjects];

        id v8 = [v2 objectForKey:v5];
        uint64_t v9 = v8;
        if (v8) {
          id v10 = v8;
        }
        else {
          id v10 = objc_alloc_init((Class)NSMutableArray);
        }
        id v11 = v10;

        if ([v7 count])
        {
          uint64_t v12 = 0;
          unint64_t v13 = 0;
          do
          {
            if ((unint64_t)[v7 count] + v12 <= 0x190) {
              uint64_t v14 = (uint64_t)[v7 count] + v12;
            }
            else {
              uint64_t v14 = 400;
            }
            int v15 = objc_msgSend(v7, "subarrayWithRange:", v13, v14);
            [v11 addObject:v15];

            v13 += 400;
            v12 -= 400;
          }
          while (v13 < (unint64_t)[v7 count]);
        }
        [v2 setObject:v11 forKey:v5];
      }
      id v3 = [obj countByEnumeratingWithState:&v80 objects:v86 count:16];
    }
    while (v3);
  }

  v78[0] = 0;
  v78[1] = v78;
  v78[2] = 0x3032000000;
  v78[3] = sub_1000209BC;
  v78[4] = sub_100020FD0;
  id v79 = objc_alloc_init((Class)NSMutableDictionary);
  v76[0] = 0;
  v76[1] = v76;
  v76[2] = 0x3032000000;
  v76[3] = sub_1000209BC;
  v76[4] = sub_100020FD0;
  id v77 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  id v39 = v2;
  id v38 = [v39 countByEnumeratingWithState:&v72 objects:v85 count:16];
  if (v38)
  {
    uint64_t v37 = *(void *)v73;
    do
    {
      for (j = 0; j != v38; j = (char *)j + 1)
      {
        if (*(void *)v73 != v37) {
          objc_enumerationMutation(v39);
        }
        id obja = *(id *)(*((void *)&v72 + 1) + 8 * (void)j);
        uint64_t v16 = [v39 objectForKey:obja];
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        id v42 = v16;
        id v17 = [v42 countByEnumeratingWithState:&v68 objects:v84 count:16];
        if (v17)
        {
          uint64_t v44 = *(void *)v69;
          do
          {
            id v48 = v17;
            for (k = 0; k != v48; k = (char *)k + 1)
            {
              if (*(void *)v69 != v44) {
                objc_enumerationMutation(v42);
              }
              __int16 v19 = *(void **)(*((void *)&v68 + 1) + 8 * (void)k);
              id v20 = [objc_alloc((Class)CKFetchRecordsOperation) initWithRecordIDs:v19];
              uint64_t v21 = +[CKOperationGroup pk_operationGroupWithName:*(void *)(a1 + 40) suffix:*(void *)(a1 + 48)];
              [v20 setGroup:v21];

              [v20 setQualityOfService:*(void *)(a1 + 72)];
              id v22 = objc_opt_new();
              [v22 setDiscretionaryNetworkBehavior:0];
              [v20 setConfiguration:v22];
              id v23 = objc_msgSend(v19, "pk_createArrayByApplyingBlock:", &stru_10073EA88);
              id v24 = [*(id *)(a1 + 56) reportContainerChangeIntervalBeginEventWithType:19 stateName:0 objectNames:v23 operationGroupName:*(void *)(a1 + 40) operationGroupNameSuffix:*(void *)(a1 + 48)];
              CFStringRef v25 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(*(void *)(a1 + 56) + 160));
              dispatch_time_t v26 = dispatch_time(0, 60000000000);
              dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
              handler[0] = _NSConcreteStackBlock;
              handler[1] = 3221225472;
              handler[2] = sub_1001E4014;
              handler[3] = &unk_10072FF48;
              id v27 = v20;
              uint64_t v28 = *(void *)(a1 + 56);
              id v63 = v27;
              uint64_t v64 = v28;
              id v29 = v23;
              id v65 = v29;
              id v66 = *(id *)(a1 + 40);
              id v67 = *(id *)(a1 + 48);
              dispatch_source_set_event_handler(v25, handler);
              dispatch_resume(v25);
              dispatch_group_enter(group);
              v53[0] = _NSConcreteStackBlock;
              v53[1] = 3221225472;
              v53[2] = sub_1001E414C;
              v53[3] = &unk_10073EAD8;
              v53[4] = *(void *)(a1 + 56);
              id v30 = v25;
              __int16 v54 = v30;
              long long v60 = v76;
              uint64_t v31 = group;
              long long v61 = v78;
              uint64_t v55 = v31;
              id v56 = obja;
              id v32 = v24;
              id v57 = v32;
              id v58 = *(id *)(a1 + 40);
              id v59 = *(id *)(a1 + 48);
              [v27 setFetchRecordsCompletionBlock:v53];
              long long v33 = [*(id *)(*(void *)(a1 + 56) + 152) databaseForIdentifier:obja];
              long long v34 = *(void **)(a1 + 56);
              long long v35 = [v33 database];
              objc_msgSend(v34, "_queue_addOperation:forDatabase:", v27, v35);
            }
            id v17 = [v42 countByEnumeratingWithState:&v68 objects:v84 count:16];
          }
          while (v17);
        }
      }
      id v38 = [v39 countByEnumeratingWithState:&v72 objects:v85 count:16];
    }
    while (v38);
  }

  uint64_t v36 = *(NSObject **)(*(void *)(a1 + 56) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E4648;
  block[3] = &unk_10073EB00;
  id v50 = *(id *)(a1 + 64);
  id v51 = v78;
  id v52 = v76;
  dispatch_group_notify(group, v36, block);

  _Block_object_dispose(v76, 8);
  _Block_object_dispose(v78, 8);
}

void sub_1001E3F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

id sub_1001E3F6C(id a1, CKRecordID *a2)
{
  id v2 = a2;
  id v3 = [(CKRecordID *)v2 recordName];
  id v4 = [(CKRecordID *)v2 zoneID];

  uint64_t v5 = [v4 zoneName];
  id v6 = +[NSString stringWithFormat:@"%@ - %@", v3, v5];

  return v6;
}

void sub_1001E4014(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) operationID];
    *(_DWORD *)long long buf = 138543362;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cloud store record fetch timer fired. Canceling fetch operationID: %{public}@", buf, 0xCu);
  }
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = +[NSString stringWithFormat:@"Cloud store fetching records has timed out. Current timeout is %f seconds.", 0x404E000000000000];
  id v6 = [v4 errorWithCode:-4007 description:v5];

  [*(id *)(a1 + 32) cancelWithUnderlyingError:v6];
  [*(id *)(a1 + 40) reportContainerChangeSignpostEventType:22 stateName:0 objectNames:*(void *)(a1 + 48) changeToken:0 error:v6 operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64)];
}

void sub_1001E414C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E428C;
  block[3] = &unk_10073EAB0;
  id v8 = *(id *)(a1 + 40);
  uint64_t v23 = *(void *)(a1 + 88);
  id v14 = v8;
  id v15 = v6;
  id v16 = *(id *)(a1 + 48);
  id v17 = v5;
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = v9;
  id v20 = v10;
  id v21 = *(id *)(a1 + 72);
  id v22 = *(id *)(a1 + 80);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, block);
}

void sub_1001E428C(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 40);
  }
  objc_storeStrong(v3, v4);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001E4540;
  v24[3] = &unk_1007395E0;
  id v25 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 64);
  id v26 = v6;
  uint64_t v27 = v8;
  uint64_t v28 = v7;
  uint64_t v9 = objc_retainBlock(v24);
  [*(id *)(a1 + 72) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 80) error:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 40))
  {
    id v10 = [objc_alloc((Class)PKCloudStoreError) initWithError:*(void *)(a1 + 40)];
    if (([v10 isPartialErrorWithUnkownItems] & 1) == 0)
    {
      id v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = *(void **)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 64);
        *(_DWORD *)long long buf = 138412546;
        id v30 = v12;
        __int16 v31 = 2112;
        uint64_t v32 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error fetching records %@ in database %@", buf, 0x16u);
      }
    }
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 64);
    id v15 = *(void **)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 96);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1001E4638;
    v22[3] = &unk_10072E570;
    uint64_t v23 = v9;
    objc_msgSend(v15, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v14, 0, v16, v18, v17, v22);
  }
  else
  {
    uint64_t v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [*(id *)(a1 + 56) count];
      uint64_t v21 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 134218242;
      id v30 = v20;
      __int16 v31 = 2112;
      uint64_t v32 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Successfully fetched %lu records for database %@", buf, 0x16u);
    }

    ((void (*)(void *))v9[2])(v9);
  }
}

void sub_1001E4540(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v2 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) objectForKey:*(void *)(a1 + 48)];
    id v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init((Class)NSMutableSet);
    }
    id v7 = v4;

    id v5 = [*(id *)(a1 + 40) allValues];
    id v6 = +[NSSet setWithArray:v5];
    [v7 unionSet:v6];

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:v7 forKey:*(void *)(a1 + 48)];
  }
}

uint64_t sub_1001E4638(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *sub_1001E4648(void *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = result;
    id v3 = [*(id *)(*(void *)(result[5] + 8) + 40) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(*(void *)(v2[6] + 8) + 40));

    id v4 = *(void **)(*(void *)(v2[5] + 8) + 40);
    return [v4 removeAllObjects];
  }
  return result;
}

void sub_1001E478C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if (v2 == 15)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = PKCloudStoreItemTypeToString();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching all items for item type %{public}@...", (uint8_t *)&buf, 0xCu);
    }
    id v5 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItemType:*(void *)(a1 + 48) action:2];
    if ([v5 count])
    {
      id v6 = [*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:*(void *)(a1 + 48)];
      if ([v6 count])
      {
        dispatch_group_t v7 = dispatch_group_create();
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v47 = 0x3032000000;
        id v48 = sub_1000209BC;
        id v49 = sub_100020FD0;
        id v50 = 0;
        id v8 = objc_alloc_init((Class)PKCloudRecordArray);
        id v9 = PKCloudStoreOperationGroupUserActionExplicit;
        id v10 = PKCloudStoreOperationGroupSuffixPassutil;
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        void v36[2] = sub_1001E4D50;
        v36[3] = &unk_10073EB78;
        id v6 = v6;
        id v37 = v6;
        id v11 = v7;
        id v38 = v11;
        char v45 = *(unsigned char *)(a1 + 56);
        id v12 = v9;
        id v39 = v12;
        id v13 = v10;
        uint64_t v14 = *(void *)(a1 + 32);
        id v40 = v13;
        uint64_t v41 = v14;
        id v15 = v8;
        uint64_t v16 = *(void *)(a1 + 48);
        p_long long buf = &buf;
        uint64_t v44 = v16;
        id v42 = v15;
        [v5 enumerateKeysAndObjectsUsingBlock:v36];
        uint64_t v17 = *(NSObject **)(*(void *)(a1 + 32) + 160);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001E5228;
        block[3] = &unk_100736D10;
        id v18 = *(id *)(a1 + 40);
        id v33 = v15;
        id v34 = v18;
        long long v35 = &buf;
        id v19 = v15;
        dispatch_group_notify(v11, v17, block);

        _Block_object_dispose(&buf, 8);
      }
      else
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = PKCloudStoreItemTypeToString();
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v27;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There is no record types associated with item type %{public}@", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v28 = *(void *)(a1 + 40);
        if (!v28) {
          goto LABEL_20;
        }
        id v29 = *(void **)(a1 + 32);
        id v11 = PKCloudStoreItemTypeToString();
        id v30 = +[NSString stringWithFormat:@"There is no record types associated with item type %@", v11];
        __int16 v31 = [v29 errorWithCode:-4001 description:v30];
        (*(void (**)(uint64_t, void, void *))(v28 + 16))(v28, 0, v31);
      }
      goto LABEL_19;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = PKCloudStoreItemTypeToString();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v23;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There is no zone associated with item type %{public}@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v24 = *(void *)(a1 + 40);
    if (v24)
    {
      id v25 = *(void **)(a1 + 32);
      PKCloudStoreItemTypeToString();
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v11 = +[NSString stringWithFormat:@"There is no zone associated with item type %@", v6];
      id v26 = [v25 errorWithCode:-4001 description:v11];
      (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v26);

LABEL_19:
      goto LABEL_20;
    }
  }
  else
  {
    id v20 = PDCloudStoreContainerStateToString(v2);
    id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer allItemsOfItemType:storeLocally:completion:]_block_invoke", v20);

    uint64_t v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v22 = *(void *)(a1 + 40);
    if (v22)
    {
      id v6 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v5];
      (*(void (**)(uint64_t, void, id))(v22 + 16))(v22, 0, v6);
LABEL_20:
    }
  }
}

void sub_1001E4D2C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001E4D50(uint64_t a1, uint64_t a2, void *a3)
{
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = a3;
  id v19 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v19)
  {
    uint64_t v18 = *(void *)v32;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v32 != v18) {
          objc_enumerationMutation(obj);
        }
        uint64_t v20 = v4;
        uint64_t v5 = *(void *)(*((void *)&v31 + 1) + 8 * v4);
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        id v21 = *(id *)(a1 + 32);
        id v6 = [v21 countByEnumeratingWithState:&v27 objects:v35 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v28;
          do
          {
            id v9 = 0;
            do
            {
              if (*(void *)v28 != v8) {
                objc_enumerationMutation(v21);
              }
              uint64_t v10 = *(void *)(*((void *)&v27 + 1) + 8 * (void)v9);
              id v11 = +[NSPredicate predicateWithValue:1];
              id v12 = [objc_alloc((Class)CKQuery) initWithRecordType:v10 predicate:v11];
              dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
              id v13 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:4 storeChanges:*(unsigned __int8 *)(a1 + 96) returnRecords:1 qualityOfService:25 groupName:*(void *)(a1 + 48) groupNameSuffix:*(void *)(a1 + 56)];
              [(PDCloudStoreRecordsRequest *)v13 setCkQuery:v12];
              [(PDCloudStoreRecordsRequest *)v13 setCloudStoreZone:v5];
              uint64_t v14 = *(void **)(a1 + 64);
              v22[0] = _NSConcreteStackBlock;
              v22[1] = 3221225472;
              v22[2] = sub_1001E5008;
              v22[3] = &unk_10073EB50;
              void v22[4] = v14;
              id v15 = *(id *)(a1 + 72);
              uint64_t v16 = *(void *)(a1 + 88);
              uint64_t v25 = *(void *)(a1 + 80);
              uint64_t v26 = v16;
              id v23 = v15;
              id v24 = *(id *)(a1 + 40);
              [v14 executeRecordsRequest:v13 completion:v22];

              id v9 = (char *)v9 + 1;
            }
            while (v7 != v9);
            id v7 = [v21 countByEnumeratingWithState:&v27 objects:v35 count:16];
          }
          while (v7);
        }

        uint64_t v4 = v20 + 1;
      }
      while ((id)(v20 + 1) != v19);
      id v19 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
    }
    while (v19);
  }
}

void sub_1001E5008(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E510C;
  block[3] = &unk_10073EB28;
  id v14 = *(id *)(a1 + 40);
  id v15 = v5;
  uint64_t v8 = *(void *)(a1 + 64);
  id v16 = v6;
  uint64_t v18 = v8;
  long long v12 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v12;
  long long v17 = v12;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, block);
}

void sub_1001E510C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) cloudStoreRecords];
  [v2 applyCloudRecordArray:v3];

  if (*(void *)(a1 + 48))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = PKCloudStoreItemTypeToString();
      uint64_t v6 = *(void *)(a1 + 48);
      int v11 = 138543618;
      long long v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error fetching all items of type %{public}@, error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
  id v10 = *(void **)(v7 + 40);
  uint64_t v8 = (id *)(v7 + 40);
  id v9 = v10;
  if (!v10) {
    id v9 = *(void **)(a1 + 48);
  }
  objc_storeStrong(v8, v9);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1001E5228(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1001E5344(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if (v2 == 15)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching all items for item type...", (uint8_t *)&buf, 2u);
    }

    uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItemType:1 action:2];
    if ([v4 count])
    {
      id v5 = [*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:1];
      uint64_t v6 = [*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:5];
      uint64_t v7 = [v5 arrayByAddingObjectsFromArray:v6];

      uint64_t v8 = [*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:9];
      id v9 = [v7 arrayByAddingObjectsFromArray:v8];

      id v10 = [*(id *)(a1 + 32) primaryRecordTypesForCloudStoreItemType:10];
      int v11 = [v9 arrayByAddingObjectsFromArray:v10];

      if ([v11 count])
      {
        dispatch_group_t v12 = dispatch_group_create();
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v45 = 0x3032000000;
        char v46 = sub_1000209BC;
        uint64_t v47 = sub_100020FD0;
        id v48 = 0;
        id v13 = objc_alloc_init((Class)PKCloudRecordArray);
        id v14 = PKCloudStoreOperationGroupUserActionExplicit;
        id v15 = PKCloudStoreOperationGroupSuffixPassutil;
        id v16 = +[NSPredicate predicateWithFormat:@"creationDate >= %@ AND creationDate <= %@", *(void *)(a1 + 40), *(void *)(a1 + 48)];
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        void v35[2] = sub_1001E58F4;
        v35[3] = &unk_10073EBC8;
        id v36 = v11;
        id v17 = v16;
        id v37 = v17;
        uint64_t v18 = v12;
        id v38 = v18;
        id v30 = v14;
        id v39 = v30;
        id v19 = v15;
        uint64_t v20 = *(void *)(a1 + 32);
        id v40 = v19;
        uint64_t v41 = v20;
        id v21 = v13;
        id v42 = v21;
        p_long long buf = &buf;
        [v4 enumerateKeysAndObjectsUsingBlock:v35];
        uint64_t v22 = *(NSObject **)(*(void *)(a1 + 32) + 160);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1001E5D7C;
        block[3] = &unk_100736D10;
        id v23 = *(id *)(a1 + 56);
        id v32 = v21;
        id v33 = v23;
        long long v34 = &buf;
        id v24 = v21;
        dispatch_group_notify(v18, v22, block);

        _Block_object_dispose(&buf, 8);
      }
      else
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There is no record types associated with the item types", (uint8_t *)&buf, 2u);
        }

        uint64_t v29 = *(void *)(a1 + 56);
        if (!v29) {
          goto LABEL_20;
        }
        uint64_t v18 = [*(id *)(a1 + 32) errorWithCode:-4001 description:@"There is no record types associated with the item types"];
        (*(void (**)(uint64_t, void, NSObject *))(v29 + 16))(v29, 0, v18);
      }

LABEL_20:
      goto LABEL_21;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There is no zone associated with the item types", (uint8_t *)&buf, 2u);
    }

    uint64_t v28 = *(void *)(a1 + 56);
    if (v28)
    {
      int v11 = [*(id *)(a1 + 32) errorWithCode:-4001 description:@"There is no zone associated with the item types"];
      (*(void (**)(uint64_t, void, void *))(v28 + 16))(v28, 0, v11);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v25 = PDCloudStoreContainerStateToString(v2);
    uint64_t v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer applePayContainerItemsFromDate:toDate:completion:]_block_invoke", v25);

    uint64_t v26 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v27 = *(void *)(a1 + 56);
    if (v27)
    {
      int v11 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v4];
      (*(void (**)(uint64_t, void, void *))(v27 + 16))(v27, 0, v11);
      goto LABEL_20;
    }
  }
LABEL_21:
}

void sub_1001E58D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001E58F4(uint64_t a1, uint64_t a2, void *a3)
{
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = a3;
  id v18 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v18)
  {
    uint64_t v17 = *(void *)v29;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v29 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = v4;
        uint64_t v5 = *(void *)(*((void *)&v28 + 1) + 8 * v4);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id v6 = *(id *)(a1 + 32);
        id v7 = [v6 countByEnumeratingWithState:&v24 objects:v32 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v25;
          do
          {
            id v10 = 0;
            do
            {
              if (*(void *)v25 != v9) {
                objc_enumerationMutation(v6);
              }
              id v11 = [objc_alloc((Class)CKQuery) initWithRecordType:*(void *)(*((void *)&v24 + 1) + 8 * (void)v10) predicate:*(void *)(a1 + 40)];
              dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
              dispatch_group_t v12 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:4 storeChanges:0 returnRecords:1 qualityOfService:25 groupName:*(void *)(a1 + 56) groupNameSuffix:*(void *)(a1 + 64)];
              [(PDCloudStoreRecordsRequest *)v12 setCkQuery:v11];
              [(PDCloudStoreRecordsRequest *)v12 setCloudStoreZone:v5];
              id v13 = *(void **)(a1 + 72);
              v20[0] = _NSConcreteStackBlock;
              v20[1] = 3221225472;
              v20[2] = sub_1001E5B88;
              v20[3] = &unk_10073EBA0;
              void v20[4] = v13;
              id v14 = *(id *)(a1 + 80);
              uint64_t v15 = *(void *)(a1 + 88);
              id v21 = v14;
              uint64_t v23 = v15;
              id v22 = *(id *)(a1 + 48);
              [v13 executeRecordsRequest:v12 completion:v20];

              id v10 = (char *)v10 + 1;
            }
            while (v8 != v10);
            id v8 = [v6 countByEnumeratingWithState:&v24 objects:v32 count:16];
          }
          while (v8);
        }

        uint64_t v4 = v19 + 1;
      }
      while ((id)(v19 + 1) != v18);
      id v18 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v18);
  }
}

void sub_1001E5B88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E5C84;
  block[3] = &unk_1007378E0;
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v6;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v11;
  long long v16 = v11;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_1001E5C84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) cloudStoreRecords];
  [v2 applyCloudRecordArray:v3];

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error fetching all items: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8);
  id v9 = *(void **)(v6 + 40);
  id v7 = (id *)(v6 + 40);
  id v8 = v9;
  if (!v9) {
    id v8 = *(void **)(a1 + 48);
  }
  objc_storeStrong(v7, v8);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1001E5D7C(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1001E5E84(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if (v2 == 15)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = PKCloudStoreItemTypeToString();
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing all items for item type %{public}@...", (uint8_t *)&buf, 0xCu);
    }
    id v5 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2];
    id v37 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneName:*(void *)(a1 + 40) inContainerDatabase:v5];
    if (v37)
    {
      id v36 = v5;
      goto LABEL_11;
    }
    id v36 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:3];

    id v37 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneName:*(void *)(a1 + 40) inContainerDatabase:v36];
    if (v37)
    {
LABEL_11:
      id v9 = *(void **)(a1 + 32);
      int v10 = +[NSSet setWithObject:v37];
      id v32 = [v9 filterCloudStoreZones:v10 action:3 inContainerDatabase:v36];

      if ([v32 count])
      {
        long long v31 = [*(id *)(a1 + 32) recordTypesForCloudStoreItemType:*(void *)(a1 + 56)];
        if ([v31 count])
        {
          id v11 = PKCloudStoreOperationGroupUserActionExplicit;
          id v12 = PKCloudStoreOperationGroupSuffixPassutil;
          id v13 = dispatch_group_create();
          *(void *)&long long buf = 0;
          *((void *)&buf + 1) = &buf;
          uint64_t v60 = 0x3032000000;
          long long v61 = sub_1000209BC;
          long long v62 = sub_100020FD0;
          id v63 = 0;
          v56[0] = 0;
          v56[1] = v56;
          v56[2] = 0x3032000000;
          v56[3] = sub_1000209BC;
          v56[4] = sub_100020FD0;
          id v57 = objc_alloc_init((Class)NSMutableSet);
          long long v52 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          id obj = v31;
          id v14 = [obj countByEnumeratingWithState:&v52 objects:v58 count:16];
          if (v14)
          {
            uint64_t v35 = *(void *)v53;
            do
            {
              for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v53 != v35) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v16 = *(void *)(*((void *)&v52 + 1) + 8 * i);
                uint64_t v17 = +[NSPredicate predicateWithValue:1];
                id v18 = [objc_alloc((Class)CKQuery) initWithRecordType:v16 predicate:v17];
                dispatch_group_enter(v13);
                uint64_t v19 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:4 storeChanges:0 returnRecords:1 qualityOfService:25 groupName:v11 groupNameSuffix:v12];
                [(PDCloudStoreRecordsRequest *)v19 setCkQuery:v18];
                [(PDCloudStoreRecordsRequest *)v19 setCloudStoreZone:v37];
                uint64_t v20 = *(void **)(a1 + 32);
                v43[0] = _NSConcreteStackBlock;
                v43[1] = 3221225472;
                v43[2] = sub_1001E6710;
                v43[3] = &unk_10073EC40;
                v43[4] = v20;
                p_long long buf = &buf;
                uint64_t v50 = *(void *)(a1 + 56);
                uint64_t v44 = v13;
                char v51 = *(unsigned char *)(a1 + 64);
                id v45 = v11;
                id v46 = v12;
                id v47 = v36;
                id v49 = v56;
                [v20 executeRecordsRequest:v19 completion:v43];
              }
              id v14 = [obj countByEnumeratingWithState:&v52 objects:v58 count:16];
            }
            while (v14);
          }

          id v21 = *(NSObject **)(*(void *)(a1 + 32) + 160);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1001E6B9C;
          block[3] = &unk_10073EB00;
          id v40 = *(id *)(a1 + 48);
          uint64_t v41 = v56;
          id v42 = &buf;
          dispatch_group_notify(v13, v21, block);

          _Block_object_dispose(v56, 8);
          _Block_object_dispose(&buf, 8);
        }
        else
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            long long v25 = PKCloudStoreItemTypeToString();
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v25;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There is no record types associated with item type %@", (uint8_t *)&buf, 0xCu);
          }
          uint64_t v26 = *(void *)(a1 + 48);
          if (!v26) {
            goto LABEL_31;
          }
          long long v27 = *(void **)(a1 + 32);
          PKCloudStoreItemTypeToString();
          id v11 = (id)objc_claimAutoreleasedReturnValue();
          id v12 = +[NSString stringWithFormat:@"There is no record types associated with item type %@", v11];
          id v13 = [v27 errorWithCode:-4001 description:v12];
          (*(void (**)(uint64_t, void, NSObject *))(v26 + 16))(v26, 0, v13);
        }
      }
      else
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = *(void *)(a1 + 40);
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v22;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "You do not have permission to remove items from zone %@", (uint8_t *)&buf, 0xCu);
        }

        uint64_t v23 = *(void *)(a1 + 48);
        if (!v23) {
          goto LABEL_32;
        }
        long long v24 = *(void **)(a1 + 32);
        long long v31 = +[NSString stringWithFormat:@"You do not have permission to remove items from zone %@", *(void *)(a1 + 40)];
        id v11 = [v24 errorWithCode:-4004 description:v31];
        (*(void (**)(uint64_t, void, id))(v23 + 16))(v23, 0, v11);
      }

LABEL_31:
LABEL_32:

LABEL_33:
      goto LABEL_34;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(a1 + 40);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v28;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There is no zone with the name %{public}@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v29 = *(void *)(a1 + 48);
    if (v29)
    {
      long long v30 = *(void **)(a1 + 32);
      id v37 = +[NSString stringWithFormat:@"There is no zone with the name %@", *(void *)(a1 + 40)];
      id v33 = [v30 errorWithCode:-4001 description:v37];
      (*(void (**)(uint64_t, void, void *))(v29 + 16))(v29, 0, v33);

      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v6 = PDCloudStoreContainerStateToString(v2);
    id v36 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer removeAllItems:inZoneName:storeLocally:completion:]_block_invoke", v6);

    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v36;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      id v38 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v36];
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v38);
    }
  }
LABEL_34:
}

void sub_1001E66C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001E6710(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E684C;
  block[3] = &unk_10073EC18;
  uint64_t v8 = *(void *)(a1 + 72);
  id v15 = v5;
  id v16 = v6;
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v22 = v8;
  uint64_t v24 = v9;
  id v17 = *(id *)(a1 + 40);
  char v25 = *(unsigned char *)(a1 + 96);
  id v18 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v20 = v10;
  uint64_t v21 = v11;
  uint64_t v23 = *(void *)(a1 + 80);
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v7, block);
}

void sub_1001E684C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cloudStoreRecords];
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 8);
  id v6 = *(void **)(v3 + 40);
  uint64_t v4 = (id *)(v3 + 40);
  id v5 = v6;
  if (!v6) {
    id v5 = *(void **)(a1 + 40);
  }
  objc_storeStrong(v4, v5);
  if (*(void *)(a1 + 40))
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = PKCloudStoreItemTypeToString();
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v21 = v8;
      __int16 v22 = 2112;
      uint64_t v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error fetching all items of type %{public}@, error: %@", buf, 0x16u);
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
  else
  {
    id v10 = [v2 allRecordIDs];
    if ([v10 count])
    {
      uint64_t v11 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:6 storeChanges:*(unsigned __int8 *)(a1 + 112) returnRecords:1 qualityOfService:25 groupName:*(void *)(a1 + 56) groupNameSuffix:*(void *)(a1 + 64)];
      id v12 = [*(id *)(a1 + 72) identifier];
      id v18 = v12;
      id v19 = v10;
      id v13 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
      [(PDCloudStoreRecordsRequest *)v11 setRecordIDsByDatabaseIdentifier:v13];

      id v14 = *(void **)(a1 + 80);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1001E6A78;
      v15[3] = &unk_10073EBF0;
      long long v17 = *(_OWORD *)(a1 + 88);
      id v16 = *(id *)(a1 + 48);
      [v14 executeRecordsRequest:v11 completion:v15];
    }
    else
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    }
  }
}

void sub_1001E6A78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v7 + 40);
  uint64_t v8 = (id *)(v7 + 40);
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v6;
  }
  objc_storeStrong(v8, v11);
  if (v6)
  {
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Removal of items failed with error %@", (uint8_t *)&v15, 0xCu);
    }
  }
  id v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v14 = [v5 deletedRecordsForAllDatabaseIdentifiers];
  [v13 addObjectsFromArray:v14];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001E6B9C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    id v3 = [*(id *)(*(void *)(a1[5] + 8) + 40) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(*(void *)(a1[6] + 8) + 40));
  }
}

void sub_1001E6D00(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if (v2 == 15)
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v3 = PKCloudStoreOperationGroupUserActionImplicit;
      uint64_t v4 = [PDCloudStoreRecordsRequest alloc];
      id v5 = [(PDCloudStoreRecordsRequest *)v4 initWithRequestType:8 storeChanges:0 returnRecords:1 qualityOfService:*(void *)(a1 + 64) groupName:v3 groupNameSuffix:PKCloudStoreOperationGroupSuffixRecordFetch];
      [(PDCloudStoreRecordsRequest *)v5 setRecordName:*(void *)(a1 + 40)];
      id v6 = *(void **)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1001E6FDC;
      v16[3] = &unk_1007343D8;
      id v17 = *(id *)(a1 + 48);
      [v6 executeRecordsRequest:v5 completion:v16];
      uint64_t v7 = v17;
    }
    else
    {
      if (!*(void *)(a1 + 48)) {
        return;
      }
      uint64_t v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        PKCloudStoreItemTypeToString();
        id v12 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138543362;
        id v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "There is no record name defined for item type %{public}@", buf, 0xCu);
      }
      id v13 = *(void **)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 48);
      PKCloudStoreItemTypeToString();
      id v5 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue();
      uint64_t v7 = +[NSString stringWithFormat:@"There is no record name defined for item type %{public}@", v5];
      int v15 = [v13 errorWithCode:-4010 description:v7];
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v15);
    }
  }
  else
  {
    uint64_t v8 = PDCloudStoreContainerStateToString(v2);
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer itemOfItemTypeFromAllZones:recordName:qualityOfService:completion:]_block_invoke", v8);
    id v5 = (PDCloudStoreRecordsRequest *)objc_claimAutoreleasedReturnValue();

    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v10 = *(void *)(a1 + 48);
    if (!v10) {
      goto LABEL_13;
    }
    uint64_t v7 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v5];
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v7);
  }

LABEL_13:
}

void sub_1001E6FDC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = [a2 cloudStoreRecords];
    (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, 0);
  }
}

void sub_1001E72CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if (v2 == 15)
  {
    if ([*(id *)(a1 + 40) count])
    {
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v4 = *(id *)(a1 + 40);
      id v5 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v27;
        do
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v27 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void **)(*((void *)&v26 + 1) + 8 * i);
            uint64_t v10 = [v9 recordName];
            uint64_t v11 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 152), "cloudStoreZonesByDatabaseIdentifierForItemType:configuration:action:", objc_msgSend(v9, "itemType"), v9, 2);
            if ([v11 count])
            {
              v23[0] = _NSConcreteStackBlock;
              v23[1] = 3221225472;
              v23[2] = sub_1001E7724;
              v23[3] = &unk_100734400;
              uint64_t v24 = v3;
              id v25 = v10;
              [v11 enumerateKeysAndObjectsUsingBlock:v23];

              id v12 = v24;
            }
            else
            {
              id v12 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                id v32 = v10;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "There is no zone associated with record name %{public}@", buf, 0xCu);
              }
            }
          }
          id v6 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v6);
      }

      id v13 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:5 storeChanges:*(unsigned __int8 *)(a1 + 72) returnRecords:*(unsigned __int8 *)(a1 + 73) qualityOfService:17 groupName:*(void *)(a1 + 48) groupNameSuffix:*(void *)(a1 + 56)];
      [(PDCloudStoreRecordsRequest *)v13 setRecordIDsByDatabaseIdentifier:v3];
      uint64_t v14 = *(void **)(a1 + 32);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1001E78E8;
      v21[3] = &unk_1007343D8;
      id v22 = *(id *)(a1 + 64);
      [v14 executeRecordsRequest:v13 completion:v21];
    }
    else
    {
      if (!*(void *)(a1 + 64)) {
        return;
      }
      id v19 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "There is no query configuration defined", buf, 2u);
      }

      uint64_t v20 = *(void *)(a1 + 64);
      id v3 = [*(id *)(a1 + 32) errorWithCode:-4010 description:@"There is no query configuration defined"];
      (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0, v3);
    }
  }
  else
  {
    int v15 = PDCloudStoreContainerStateToString(v2);
    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer fetchItemsWithQueryConfigurations:returnRecords:storeRecords:groupName:groupSuffix:completion:]_block_invoke", v15);
    id v3 = (id)objc_claimAutoreleasedReturnValue();

    id v16 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v32 = v3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v17 = *(void *)(a1 + 64);
    if (v17)
    {
      id v18 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v3];
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v18);
    }
  }
}

void sub_1001E7724(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  uint64_t v8 = v7;
  if (v7) {
    id v9 = v7;
  }
  else {
    id v9 = objc_alloc_init((Class)NSMutableSet);
  }
  uint64_t v10 = v9;

  [*(id *)(a1 + 32) setObject:v10 forKey:v5];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = v6;
  id v11 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v13) {
          objc_enumerationMutation(obj);
        }
        int v15 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v16 = objc_alloc((Class)CKRecordID);
        uint64_t v17 = *(void *)(a1 + 40);
        id v18 = [v15 recordZone];
        id v19 = [v18 zoneID];
        id v20 = [v16 initWithRecordName:v17 zoneID:v19];

        [v10 addObject:v20];
      }
      id v12 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v12);
  }
}

void sub_1001E78E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = [a2 cloudStoreRecords];
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);
  }
}

void sub_1001E7A58(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if (v2 == 15)
  {
    if (!*(void *)(a1 + 40))
    {
      if (!*(void *)(a1 + 48)) {
        return;
      }
      uint64_t v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = PKCloudStoreItemTypeToString();
        *(_DWORD *)long long buf = 138412290;
        id v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "There is no record name defined for item type %@", buf, 0xCu);
      }
      int v15 = *(void **)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 48);
      PKCloudStoreItemTypeToString();
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      id v4 = +[NSString stringWithFormat:@"There is no record name defined for item type %@", v3];
      uint64_t v17 = [v15 errorWithCode:-4010 description:v4];
      (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v17);

      goto LABEL_19;
    }
    id v3 = PKCloudStoreOperationGroupUserActionImplicit;
    id v4 = [objc_alloc((Class)PKCloudStoreZoneQueryConfiguration) initWithItemType:*(void *)(a1 + 56) recordName:*(void *)(a1 + 40)];
    id v5 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItemType:*(void *)(a1 + 56) configuration:v4 action:2];
    if ([v5 count])
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1001E7ED0;
      v24[3] = &unk_100734400;
      id v25 = objc_alloc_init((Class)NSMutableDictionary);
      id v26 = *(id *)(a1 + 40);
      id v6 = v25;
      [v5 enumerateKeysAndObjectsUsingBlock:v24];
      uint64_t v7 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:5 storeChanges:0 returnRecords:1 qualityOfService:*(void *)(a1 + 64) groupName:v3 groupNameSuffix:0];
      [(PDCloudStoreRecordsRequest *)v7 setRecordIDsByDatabaseIdentifier:v6];
      uint64_t v8 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1001E8070;
      v22[3] = &unk_1007343D8;
      id v23 = *(id *)(a1 + 48);
      [v8 executeRecordsRequest:v7 completion:v22];

      id v9 = v25;
    }
    else
    {
      id v18 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        id v19 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 138543362;
        id v28 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "There is no zone associated with record name %{public}@", buf, 0xCu);
      }

      uint64_t v20 = *(void *)(a1 + 48);
      if (!v20) {
        goto LABEL_18;
      }
      uint64_t v21 = *(void **)(a1 + 32);
      id v6 = +[NSString stringWithFormat:@"There is no zone for item with record name %{public}@", *(void *)(a1 + 40)];
      id v9 = [v21 errorWithCode:-4001 description:v6];
      (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0, v9);
    }

LABEL_18:
    goto LABEL_19;
  }
  uint64_t v10 = PDCloudStoreContainerStateToString(v2);
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer itemOfItemType:recordName:qualityOfService:completion:]_block_invoke", v10);
  id v3 = (id)objc_claimAutoreleasedReturnValue();

  id v11 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v12 = *(void *)(a1 + 48);
  if (!v12) {
    goto LABEL_20;
  }
  id v4 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v3];
  (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0, v4);
LABEL_19:

LABEL_20:
}

void sub_1001E7ED0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)NSMutableSet);
  [*(id *)(a1 + 32) setObject:v7 forKey:v5];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = v6;
  id v8 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v13 = objc_alloc((Class)CKRecordID);
        uint64_t v14 = *(void *)(a1 + 40);
        int v15 = [v12 recordZone];
        uint64_t v16 = [v15 zoneID];
        id v17 = [v13 initWithRecordName:v14 zoneID:v16];

        [v7 addObject:v17];
      }
      id v9 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v9);
  }
}

void sub_1001E8070(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v5 = [a2 cloudStoreRecords];
    id v3 = [v5 allObjects];
    id v4 = [v3 firstObject];
    (*(void (**)(uint64_t, void *, void))(v2 + 16))(v2, v4, 0);
  }
}

void sub_1001E8234(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 176);
  if (v2 == 15)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      id v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Trying to remove items %@...", buf, 0xCu);
    }

    id v5 = objc_alloc_init((Class)NSMutableDictionary);
    if ([*(id *)(a1 + 40) count])
    {
      unint64_t v6 = 0;
      do
      {
        id v7 = [*(id *)(a1 + 40) objectAtIndex:v6];
        id v8 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZonesByDatabaseIdentifierForItem:v7 action:3];
        if ([v8 count])
        {
          id v9 = [v7 recordTypesAndNamesForCodingType:2];
          if ([v9 count])
          {
            v19[0] = _NSConcreteStackBlock;
            v19[1] = 3221225472;
            void v19[2] = sub_1001E8680;
            void v19[3] = &unk_100734450;
            long long v20 = v7;
            id v21 = v5;
            id v22 = v9;
            [v8 enumerateKeysAndObjectsUsingBlock:v19];

            uint64_t v10 = v20;
          }
          else
          {
            BOOL v11 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
            uint64_t v10 = v3;
            if (v11)
            {
              *(_DWORD *)long long buf = 138412290;
              id v24 = v7;
              _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There are no record types or names associated with item %@", buf, 0xCu);
              uint64_t v10 = v3;
            }
          }
        }
        else
        {
          id v9 = v3;
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            id v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "There is no databases associated with item %@", buf, 0xCu);
            id v9 = v3;
          }
        }

        ++v6;
      }
      while (v6 < (unint64_t)[*(id *)(a1 + 40) count]);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Trying to remove items with recordIDs %@...", buf, 0xCu);
    }

    uint64_t v12 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:6 storeChanges:1 returnRecords:0 qualityOfService:*(void *)(a1 + 72) groupName:*(void *)(a1 + 48) groupNameSuffix:*(void *)(a1 + 56)];
    [(PDCloudStoreRecordsRequest *)v12 setRecordIDsByDatabaseIdentifier:v5];
    id v13 = *(void **)(a1 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1001E89E8;
    v17[3] = &unk_1007343D8;
    id v18 = *(id *)(a1 + 64);
    [v13 executeRecordsRequest:v12 completion:v17];

    goto LABEL_22;
  }
  uint64_t v14 = PDCloudStoreContainerStateToString(v2);
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Cannot peform %s: when the container is in state: %@", "-[PDCloudStoreContainer removeItems:groupName:groupNameSuffix:qualityOfService:completion:]_block_invoke", v14);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  int v15 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v16 = *(void *)(a1 + 64);
  if (v16)
  {
    uint64_t v12 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v5];
    (*(void (**)(uint64_t, PDCloudStoreRecordsRequest *))(v16 + 16))(v16, v12);
LABEL_22:
  }
}

void sub_1001E8680(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  id obj = a3;
  id v29 = [obj countByEnumeratingWithState:&v43 objects:v51 count:16];
  if (v29)
  {
    uint64_t v27 = *(void *)v44;
    *(void *)&long long v5 = 138412290;
    long long v24 = v5;
    uint64_t v26 = a1;
    do
    {
      for (uint64_t i = 0; i != v29; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v44 != v27) {
          objc_enumerationMutation(obj);
        }
        id v7 = objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * i), "recordZone", v24);
        if (v7)
        {
          id v8 = [*(id *)(a1 + 40) objectForKey:v28];
          id v9 = v8;
          long long v30 = i;
          if (v8) {
            uint64_t v10 = v8;
          }
          else {
            uint64_t v10 = objc_alloc_init((Class)NSMutableSet);
          }
          BOOL v11 = v10;

          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          id v31 = *(id *)(a1 + 48);
          id v33 = [v31 countByEnumeratingWithState:&v39 objects:v48 count:16];
          if (v33)
          {
            uint64_t v32 = *(void *)v40;
            do
            {
              uint64_t v13 = 0;
              do
              {
                if (*(void *)v40 != v32) {
                  objc_enumerationMutation(v31);
                }
                uint64_t v34 = v13;
                uint64_t v14 = *(void **)(*((void *)&v39 + 1) + 8 * v13);
                long long v35 = 0u;
                long long v36 = 0u;
                long long v37 = 0u;
                long long v38 = 0u;
                int v15 = [v14 allValues];
                id v16 = [v15 countByEnumeratingWithState:&v35 objects:v47 count:16];
                if (v16)
                {
                  id v17 = v16;
                  uint64_t v18 = *(void *)v36;
                  do
                  {
                    for (j = 0; j != v17; j = (char *)j + 1)
                    {
                      if (*(void *)v36 != v18) {
                        objc_enumerationMutation(v15);
                      }
                      uint64_t v20 = *(void *)(*((void *)&v35 + 1) + 8 * (void)j);
                      id v21 = objc_alloc((Class)CKRecordID);
                      id v22 = [v7 zoneID];
                      id v23 = [v21 initWithRecordName:v20 zoneID:v22];

                      [v11 addObject:v23];
                    }
                    id v17 = [v15 countByEnumeratingWithState:&v35 objects:v47 count:16];
                  }
                  while (v17);
                }

                uint64_t v13 = v34 + 1;
              }
              while ((id)(v34 + 1) != v33);
              id v33 = [v31 countByEnumeratingWithState:&v39 objects:v48 count:16];
            }
            while (v33);
          }

          a1 = v26;
          if ([v11 count]) {
            [*(id *)(v26 + 40) setObject:v11 forKey:v28];
          }
          uint64_t i = v30;
        }
        else
        {
          BOOL v11 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(a1 + 32);
            *(_DWORD *)long long buf = v24;
            uint64_t v50 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "There is no zone associated with item %@", buf, 0xCu);
          }
        }
      }
      id v29 = [obj countByEnumeratingWithState:&v43 objects:v51 count:16];
    }
    while (v29);
  }
}

void sub_1001E89E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v8) {
      goto LABEL_7;
    }
    int v13 = 138412290;
    id v14 = v6;
    id v9 = "Removal of items failed with error %@";
    uint64_t v10 = v7;
    uint32_t v11 = 12;
  }
  else
  {
    if (!v8) {
      goto LABEL_7;
    }
    LOWORD(v13) = 0;
    id v9 = "Records successfully removed.";
    uint64_t v10 = v7;
    uint32_t v11 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v13, v11);
LABEL_7:

  uint64_t v12 = *(void *)(a1 + 32);
  if (v12) {
    (*(void (**)(uint64_t, id))(v12 + 16))(v12, v6);
  }
}

void sub_1001E9054(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    int v15 = 138412546;
    uint64_t v16 = v9;
    __int16 v17 = 2112;
    id v18 = v6;
    uint64_t v10 = "Removal of record %@ failed with error %@";
    uint32_t v11 = v7;
    uint32_t v12 = 22;
  }
  else
  {
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    int v15 = 138412290;
    uint64_t v16 = v13;
    uint64_t v10 = "Record %@ removed successfully.";
    uint32_t v11 = v7;
    uint32_t v12 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v15, v12);
LABEL_7:

  uint64_t v14 = *(void *)(a1 + 40);
  if (v14) {
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v6);
  }
}

void sub_1001E924C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2];
  id v3 = [v2 identifier];
  id v4 = objc_alloc_init((Class)NSMutableSet);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = objc_msgSend(v2, "zoneForZoneName:", *(void *)(*((void *)&v17 + 1) + 8 * i), (void)v17);
        uint32_t v11 = [v10 zoneID];

        if (v11) {
          [v4 addObject:v11];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v23 count:16];
    }
    while (v7);
  }

  id v12 = [v4 count];
  uint64_t v13 = *(void **)(a1 + 32);
  id v14 = [v4 count];
  if (v14)
  {
    id v21 = v3;
    id v22 = v4;
    int v15 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    if (v12) {
      goto LABEL_12;
    }
LABEL_16:
    uint64_t v16 = +[NSSet setWithObject:](NSSet, "setWithObject:", v3, (void)v17);
    [v13 resetContainerWithAdditionalZoneIDsByDatabaseIdentifiers:v15 includedCachedZoneForDatabaseIdentifiers:v16 completion:*(void *)(a1 + 48)];

    if (!v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  int v15 = 0;
  if (!v12) {
    goto LABEL_16;
  }
LABEL_12:
  objc_msgSend(v13, "resetContainerWithAdditionalZoneIDsByDatabaseIdentifiers:includedCachedZoneForDatabaseIdentifiers:completion:", v15, 0, *(void *)(a1 + 48), (void)v17);
  if (v14) {
LABEL_13:
  }

LABEL_14:
}

id sub_1001E9560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) containerResetCompletedWithSuccess:a2 error:a3];
}

void sub_1001E9698(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 40) + 112);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v8, "coalesceWithRequest:", *(void *)(a1 + 32), (void)v11))
        {
          uint64_t v9 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void **)(a1 + 32);
            *(_DWORD *)long long buf = 138412546;
            id v16 = v10;
            __int16 v17 = 2112;
            long long v18 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Container reset request coalesced %@ onto existing request %@", buf, 0x16u);
          }

          id v2 = 0;
          goto LABEL_15;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v19 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  if (v2)
  {
    [*(id *)(*(void *)(a1 + 40) + 112) addObject:v2];
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v16 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Container reset request queued %@", buf, 0xCu);
    }
LABEL_15:
  }
  objc_msgSend(*(id *)(a1 + 40), "_executeNextResetRequestIfPossible", (void)v11);
}

void sub_1001E9A04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001E9AC4;
  block[3] = &unk_10072E238;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  dispatch_async(v4, block);
}

id sub_1001E9AC4(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finshed deleted zones and subscriptions for container reset request %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(v4 + 120);
  *(void *)(v4 + 120) = 0;

  objc_msgSend(*(id *)(a1 + 32), "callCompletionsWithSuccess:error:", *(void *)(a1 + 48) == 0);
  [*(id *)(a1 + 40) _executeNextResetRequestIfPossible];
  [*(id *)(a1 + 40) setNextExpectedState:1];
  return [*(id *)(a1 + 40) initialCloudDatabaseSetupWithOperationGroupNameSuffix:PKCloudStoreOperationGroupSuffixUnrecoverableError completion:&stru_10073ED00];
}

void sub_1001E9BC4(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Completed cloud store setup after container reset request", v4, 2u);
  }
}

void sub_1001E9ED8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9
    || ([v8 objectForKey:*(void *)(a1 + 32)],
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        [*(id *)(a1 + 40) zoneID],
        id v11 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v12 = [v10 containsObject:v11],
        v11,
        v10,
        (v12 & 1) == 0))
  {
    __int16 v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Deleted zone with error: %@", buf, 0xCu);
    }

    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Zones deleted by database identifier %@", buf, 0xCu);
    }

    uint64_t v18 = *(void *)(a1 + 56);
    if (v18) {
      (*(void (**)(uint64_t, void, id))(v18 + 16))(v18, 0, v9);
    }
  }
  else
  {
    long long v13 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Successfully deleted zones %@", buf, 0xCu);
    }

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1001EA200;
    v21[3] = &unk_10072F3A0;
    void v21[4] = *(void *)(a1 + 48);
    [v8 enumerateKeysAndObjectsUsingBlock:v21];
    long long v14 = [*(id *)(*(void *)(a1 + 48) + 152) subscriptionIdentifiersForDatabaseZoneIDs:v8];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Deleting subscriptions: %@", buf, 0xCu);
    }

    int v15 = *(void **)(a1 + 48);
    uint64_t v16 = PKCloudStoreOperationGroupSuffixPassutil;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1001EA214;
    void v19[3] = &unk_10073E2D8;
    void v19[4] = v15;
    id v20 = *(id *)(a1 + 56);
    [v15 _subscriptionOperationWithSubscriptionsToSaveByDatabaseIdentifier:0 subscriptionIDsToDeleteByDatabase:v14 operationGroupNameSuffix:v16 completion:v19];
  }
}

id sub_1001EA200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveZoneIDs:a3];
}

void sub_1001EA214(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Deleted subscription identifier with error: %@", buf, 0xCu);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001EA370;
  v12[3] = &unk_10072F3A0;
  void v12[4] = *(void *)(a1 + 32);
  [v8 enumerateKeysAndObjectsUsingBlock:v12];
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, BOOL, id))(v11 + 16))(v11, v9 == 0, v9);
  }
}

id sub_1001EA370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveSubscriptionIdentifiers:a3];
}

void sub_1001EA448(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Creating zone with name %@", buf, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) containerManager];
  id v5 = [v4 databaseForScope:2];

  uint64_t v6 = [v5 identifier];
  if (v6)
  {
    id v7 = [v5 zoneForZoneName:*(void *)(a1 + 32)];
    id v8 = *(void **)(a1 + 40);
    if (v7)
    {
      unsigned __int8 v12 = v6;
      id v9 = +[NSSet setWithObject:v7];
      long long v13 = v9;
      uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
      objc_msgSend(v8, "_queue_createZoneAndSubscriptionsByDatabaseIdentifier:groupSuffix:completion:", v10, 0, *(void *)(a1 + 48));
    }
    else
    {
      uint64_t v11 = +[NSString stringWithFormat:@"There is no zone defined for zone name %@", *(void *)(a1 + 32)];
      id v9 = [v8 errorWithCode:-4001 description:v11];

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    id v7 = [*(id *)(a1 + 40) errorWithCode:-4004 description:@"No private database defined"];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id sub_1001EA6D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_ensureZoneShareIntegrity");
}

void sub_1001EA7FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = [v2 shareURL];
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      id v5 = [*(id *)(a1 + 32) shareInvitationToken];

      if (v5)
      {
        uint64_t v6 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          id v7 = *(void **)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          id v38 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Attempting to accept invitation %@", buf, 0xCu);
        }

        id v8 = +[NSSet setWithObject:objc_opt_class()];
        id v9 = [*(id *)(a1 + 32) shareInvitationToken];
        id v35 = 0;
        uint64_t v10 = +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:v8 fromData:v9 error:&v35];
        id v11 = v35;

        if (v11 || !v10)
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v17 = *(void **)(a1 + 32);
            *(_DWORD *)long long buf = 138412290;
            id v38 = v17;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error unarchiving token data to CKDeviceToDeviceShareInvitationToken %@", buf, 0xCu);
          }

          uint64_t v18 = *(void *)(a1 + 64);
          if (v18) {
            (*(void (**)(uint64_t, void, id))(v18 + 16))(v18, 0, v11);
          }
        }
        else
        {
          unsigned __int8 v12 = [*(id *)(a1 + 32) zoneName];
          if (v12)
          {
            long long v13 = [*(id *)(a1 + 32) zoneName];
            long long v36 = v13;
            id v14 = +[NSArray arrayWithObjects:&v36 count:1];
          }
          else
          {
            id v14 = 0;
          }

          long long v19 = [*(id *)(a1 + 40) reportContainerChangeIntervalBeginEventWithType:23 stateName:0 objectNames:v14 operationGroupName:*(void *)(a1 + 48) operationGroupNameSuffix:*(void *)(a1 + 56)];
          id v20 = objc_alloc_init((Class)NSMutableDictionary);
          id v21 = [*(id *)(a1 + 32) shareURL];
          [v20 setObject:v10 forKey:v21];

          id v22 = *(void **)(a1 + 40);
          uint64_t v23 = *(void *)(a1 + 48);
          uint64_t v24 = *(void *)(a1 + 56);
          uint64_t v25 = *(void *)(a1 + 72);
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472;
          v28[2] = sub_1001EAC24;
          v28[3] = &unk_10073EDF0;
          void v28[4] = v22;
          id v29 = *(id *)(a1 + 32);
          id v33 = *(id *)(a1 + 64);
          id v30 = *(id *)(a1 + 48);
          id v26 = *(id *)(a1 + 56);
          uint64_t v34 = *(void *)(a1 + 72);
          id v31 = v26;
          id v32 = v19;
          id v27 = v19;
          [v22 _shareMetadataWithInvitationTokensByShareURL:v20 operationGroupName:v23 operationGroupNameSuffix:v24 qualityOfService:v25 completion:v28];
        }
        goto LABEL_14;
      }
    }
  }
  id v11 = +[NSString stringWithFormat:@"Cannot accept an invalid invitation %@.", *(void *)(a1 + 32)];
  uint64_t v15 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v38 = v11;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v16 = *(void *)(a1 + 64);
  if (v16)
  {
    uint64_t v10 = [*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v11];
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v10);
LABEL_14:
  }
}

void sub_1001EAC24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001EAD5C;
  block[3] = &unk_10073EDC8;
  id v13 = v5;
  id v14 = *(id *)(a1 + 40);
  id v15 = v6;
  id v20 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 32);
  id v17 = v8;
  uint64_t v18 = v9;
  id v19 = *(id *)(a1 + 64);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, block);
}

void sub_1001EAD5C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) shareURL];
  uint64_t v4 = [v2 objectForKey:v3];

  if (v4 && !*(void *)(a1 + 48))
  {
    id v8 = objc_alloc((Class)CKAcceptSharesOperation);
    id v33 = v4;
    uint64_t v9 = +[NSArray arrayWithObjects:&v33 count:1];
    id v10 = [v8 initWithShareMetadatas:v9];

    id v11 = objc_alloc_init((Class)CKOperationConfiguration);
    [v11 setDiscretionaryNetworkBehavior:0];
    [v10 setConfiguration:v11];
    unsigned __int8 v12 = +[CKOperationGroup pk_operationGroupWithName:*(void *)(a1 + 56) suffix:*(void *)(a1 + 64)];
    [v10 setGroup:v12];
    [v10 setQualityOfService:*(void *)(a1 + 96)];
    id v13 = objc_alloc_init((Class)NSMutableArray);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1001EB084;
    v30[3] = &unk_10073ED50;
    id v31 = *(id *)(a1 + 40);
    id v32 = v13;
    id v14 = v13;
    [v10 setPerShareCompletionBlock:v30];
    id v19 = _NSConcreteStackBlock;
    uint64_t v20 = 3221225472;
    uint64_t v21 = sub_1001EB1CC;
    id v22 = &unk_10073EDA0;
    id v15 = *(void **)(a1 + 80);
    uint64_t v23 = *(void *)(a1 + 72);
    id v24 = v15;
    id v25 = *(id *)(a1 + 40);
    id v28 = *(id *)(a1 + 88);
    id v26 = *(id *)(a1 + 64);
    id v16 = *(id *)(a1 + 56);
    uint64_t v17 = *(void *)(a1 + 96);
    id v27 = v16;
    uint64_t v29 = v17;
    [v10 setAcceptSharesCompletionBlock:&v19];
    uint64_t v18 = objc_msgSend(*(id *)(*(void *)(a1 + 72) + 152), "container", v19, v20, v21, v22, v23);
    [v18 addOperation:v10];
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error fetching share metadata for invitation %@", buf, 0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 88);
    if (v7) {
      (*(void (**)(uint64_t, void, void))(v7 + 16))(v7, 0, *(void *)(a1 + 48));
    }
  }
}

void sub_1001EB084(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = PKLogFacilityTypeGetObject();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v14 = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error accepting share invitation %@, %@", (uint8_t *)&v14, 0x16u);
    }
  }
  else
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 138412290;
      uint64_t v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Successfully accepted invitation %@", (uint8_t *)&v14, 0xCu);
    }

    [*(id *)(a1 + 40) addObject:v8];
  }
}

void sub_1001EB1CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:v3];
  if (v3)
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v20 = v5;
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error accepting share invitation %@, %@", buf, 0x16u);
    }

    uint64_t v6 = *(void *)(a1 + 72);
    if (v6) {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v3);
    }
  }
  else
  {
    id v7 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:3];
    id v8 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1001EB3A0;
    v13[3] = &unk_10073ED78;
    void v13[4] = v8;
    uint64_t v9 = *(void *)(a1 + 56);
    id v14 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 64);
    id v10 = *(id *)(a1 + 56);
    uint64_t v12 = *(void **)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    id v16 = v10;
    uint64_t v18 = v11;
    id v17 = v12;
    [v8 _forceFetchRecordZonesForContainerDatabase:v7 operationGroupNameSuffix:v9 completion:v13];
  }
}

void sub_1001EB3A0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:3];
  id v3 = *(void **)(*(void *)(a1 + 32) + 152);
  uint64_t v4 = [*(id *)(a1 + 40) zoneName];
  uint64_t v5 = [v3 cloudStoreZoneForZoneName:v4 inContainerDatabase:v2];

  if (!v5)
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 40) zoneName];
      *(_DWORD *)long long buf = 138412290;
      id v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error: The shared zone with name %@ is not cached!", buf, 0xCu);
    }
  }
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = [v2 identifier];
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001EB55C;
  v13[3] = &unk_1007378B8;
  uint64_t v12 = *(void *)(a1 + 72);
  id v14 = *(id *)(a1 + 64);
  [v8 fetchRecordsInAcceptedZoneShare:v5 databaseIdentifier:v9 operationGroupName:v10 operationGroupNameSuffix:v11 qualityOfService:v12 completion:v13];
}

uint64_t sub_1001EB55C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, a2);
  }
  return result;
}

void sub_1001EB7AC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "_queue_completedRecordFetchFromNewSharedZone:");
  }
}

void sub_1001EB968(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2];
  id v3 = [v2 zoneForZoneName:*(void *)(a1 + 40)];
  uint64_t v4 = [v3 zoneID];

  id v5 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneID:v4 inContainerDatabase:v2];
  if (*(void *)(a1 + 40))
  {
    uint64_t v41 = *(void *)(a1 + 40);
    uint64_t v6 = +[NSArray arrayWithObjects:&v41 count:1];
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = [*(id *)(a1 + 32) reportContainerChangeIntervalBeginEventWithType:24 stateName:*(void *)(a1 + 48) objectNames:v6 operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64)];
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1001EBD7C;
  v34[3] = &unk_10073EE40;
  v34[4] = *(void *)(a1 + 32);
  id v8 = v7;
  id v35 = v8;
  id v36 = *(id *)(a1 + 72);
  uint64_t v9 = objc_retainBlock(v34);
  if (!v5)
  {
    uint64_t v20 = +[NSString stringWithFormat:@"A cloud store zone is not defined"];
    __int16 v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v38 = v20;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }
LABEL_14:

    id v22 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v20];
    ((void (*)(void *, void, void, void *))v9[2])(v9, 0, 0, v22);

    goto LABEL_15;
  }
  uint64_t v10 = *(void **)(a1 + 48);
  if (!v10)
  {
    uint64_t v20 = +[NSString stringWithFormat:@"Cannot decline an invalid invitation with a nil recipientHandle."];
    __int16 v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v38 = v20;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t v23 = v6;
  id v24 = v4;
  uint64_t v11 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v38 = v10;
    __int16 v39 = 2112;
    long long v40 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Attempting to decline invitation for %@ in %@", buf, 0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 80);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_1001EBDFC;
  v25[3] = &unk_10073EE90;
  id v15 = *(void **)(a1 + 32);
  id v26 = *(id *)(a1 + 40);
  id v32 = v9;
  id v16 = *(id *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  id v27 = v16;
  uint64_t v28 = v17;
  id v29 = v5;
  id v30 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 80);
  id v31 = v18;
  uint64_t v33 = v19;
  [v15 _zoneWideShareForCloudStoreZone:v29 createIfNotExists:1 operationGroupName:v12 operationGroupNameSuffix:v13 qualityOfService:v14 completion:v25];

  uint64_t v20 = v26;
  uint64_t v6 = v23;
  uint64_t v4 = v24;
LABEL_15:
}

void sub_1001EBD7C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  objc_msgSend(*(id *)(a1 + 32), "reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:error:", *(void *)(a1 + 40));
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v7 + 16))(v7, a2, a3, v8);
  }
}

void sub_1001EBDFC(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = v8;
  if (!v7 || v8)
  {
    uint64_t v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = *(void **)(a1 + 32);
      CFStringRef v19 = @"NO";
      *(_DWORD *)long long buf = 138412802;
      if (a3) {
        CFStringRef v19 = @"YES";
      }
      uint64_t v34 = v18;
      __int16 v35 = 2112;
      CFStringRef v36 = v19;
      __int16 v37 = 2112;
      id v38 = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Error fetching share for zone: %@, shareRecordMissing: %@, error: %@", buf, 0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    uint64_t v10 = objc_msgSend(v7, "pk_participantWithRecipientHandle:", *(void *)(a1 + 40));
    id v11 = [v10 permission];
    if (v10)
    {
      id v12 = v11;
      if ([v10 isCurrentUser])
      {
        uint64_t v13 = +[NSString stringWithFormat:@"Cannot remove the current user from the share %@", v10];
        uint64_t v14 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v34 = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
        }

        uint64_t v15 = *(void *)(a1 + 80);
        id v16 = [*(id *)(a1 + 48) _cannotPerformActionErrorWithFailureReason:v13];
        (*(void (**)(uint64_t, void, id, void *))(v15 + 16))(v15, 0, v12, v16);
      }
      else
      {
        [v7 removeParticipant:v10];
        id v22 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          CKStringFromParticipantPermission();
          uint64_t v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138412546;
          uint64_t v34 = v10;
          __int16 v35 = 2112;
          CFStringRef v36 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Removing participant from share %@ with permission %@", buf, 0x16u);
        }
        id v24 = *(void **)(a1 + 48);
        uint64_t v25 = *(void *)(a1 + 56);
        uint64_t v26 = *(void *)(a1 + 64);
        uint64_t v27 = *(void *)(a1 + 72);
        uint64_t v28 = *(void *)(a1 + 88);
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_1001EC1AC;
        void v29[3] = &unk_10073EE68;
        id v30 = v10;
        id v31 = *(id *)(a1 + 80);
        id v32 = v12;
        [v24 _updateShare:v7 cloudStoreZone:v25 operationGroupName:v26 operationGroupNameSuffix:v27 qualityOfService:v28 completion:v29];
      }
    }
    else
    {
      uint64_t v20 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v21 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v34 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "There is no person on the share with the handle %@", buf, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
    }
  }
}

void sub_1001EC1AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed removing participant %@ from share with error %@", (uint8_t *)&v7, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001EC3B4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2];
  id v3 = [v2 zoneForZoneName:*(void *)(a1 + 40)];
  id v4 = [v3 zoneID];

  id v5 = [*(id *)(*(void *)(a1 + 32) + 152) cloudStoreZoneForZoneID:v4 inContainerDatabase:v2];
  if (v5)
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fetching share for zone %@", buf, 0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 72);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1001EC62C;
    v15[3] = &unk_10073EEE0;
    id v10 = *(void **)(a1 + 32);
    id v16 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 64);
    id v17 = v2;
    [v10 _zoneWideShareForCloudStoreZone:v5 createIfNotExists:0 operationGroupName:v7 operationGroupNameSuffix:v8 qualityOfService:v9 completion:v15];

    id v11 = v16;
  }
  else
  {
    id v11 = +[NSString stringWithFormat:@"A cloud store zone is not defined"];
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 64);
    if (v13)
    {
      uint64_t v14 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v11];
      (*(void (**)(uint64_t, void, void, void *))(v13 + 16))(v13, 0, 0, v14);
    }
  }
}

void sub_1001EC62C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = v8;
  if (!v7 || v8)
  {
    id v16 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      int v19 = 138412546;
      uint64_t v20 = v17;
      __int16 v21 = 2112;
      id v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Error fetching share for zone %@, %@", (uint8_t *)&v19, 0x16u);
    }

    uint64_t v18 = *(void *)(a1 + 48);
    if (v18) {
      (*(void (**)(uint64_t, void, uint64_t, void *))(v18 + 16))(v18, 0, a3, v9);
    }
  }
  else
  {
    id v10 = objc_alloc_init((Class)PKCloudRecordArray);
    id v11 = objc_alloc((Class)PKCloudRecordObject);
    id v12 = +[NSSet setWithObject:v7];
    id v13 = [v11 initWithRecords:v12];

    uint64_t v14 = [*(id *)(a1 + 40) identifier];
    [v10 addCloudRecord:v13 forContainerDatabaseIdentifier:v14];

    uint64_t v15 = *(void *)(a1 + 48);
    if (v15) {
      (*(void (**)(uint64_t, id, uint64_t, void))(v15 + 16))(v15, v10, a3, 0);
    }
  }
}

void sub_1001EC930(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  id v87 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForScope:2];
  id v3 = [v87 zoneForZoneName:*(void *)(a1 + 40)];
  id v85 = [v3 zoneID];

  id v86 = [*(id *)(*(void *)v2 + 152) cloudStoreZoneForZoneID:v85 inContainerDatabase:v87];
  if (v86)
  {
    if (*(void *)(a1 + 48))
    {
      if (*(void *)(a1 + 80))
      {
        id v4 = (void *)PKCloudStoreOperationGroupSuffixShareRecordConflict;
        id v5 = *(id *)(a1 + 56);
        id v6 = v4;
        id v7 = v6;
        if (v5 == v6)
        {
          unsigned __int8 v8 = 1;
        }
        else
        {
          unsigned __int8 v8 = 0;
          if (v5 && v6) {
            unsigned __int8 v8 = [v5 isEqualToString:v6];
          }
        }

        if (*(void *)(a1 + 40))
        {
          uint64_t v176 = *(void *)(a1 + 40);
          uint64_t v13 = +[NSArray arrayWithObjects:&v176 count:1];
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (void *)(a1 + 32);
        uint64_t v15 = (id *)(a1 + 48);
        id v16 = (id *)(a1 + 64);
        long long v81 = (id *)(a1 + 56);
        uint64_t v84 = (void *)v13;
        uint64_t v17 = objc_msgSend(*(id *)(a1 + 32), "reportContainerChangeIntervalBeginEventWithType:stateName:objectNames:operationGroupName:operationGroupNameSuffix:", 28, *(void *)(a1 + 48));
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v172 = 0x3032000000;
        v173 = sub_1000209BC;
        v174 = sub_100020FD0;
        id v175 = 0;
        v169[0] = 0;
        v169[1] = v169;
        v169[2] = 0x3032000000;
        v169[3] = sub_1000209BC;
        v169[4] = sub_100020FD0;
        id v170 = 0;
        v157[0] = _NSConcreteStackBlock;
        v157[1] = 3221225472;
        v157[2] = sub_1001ED740;
        v157[3] = &unk_10073EF58;
        v157[4] = *(void *)(a1 + 32);
        id v83 = v17;
        id v158 = v83;
        id v18 = v86;
        id v159 = v18;
        id v160 = *(id *)(a1 + 48);
        unsigned __int8 v168 = v8;
        long long v75 = (id *)(a1 + 40);
        id v19 = *(id *)(a1 + 40);
        uint64_t v20 = *(void *)(a1 + 80);
        long long v80 = (uint64_t *)(a1 + 80);
        id v161 = v19;
        uint64_t v166 = v20;
        id v21 = *(id *)(a1 + 64);
        uint64_t v23 = *(void *)(a1 + 88);
        id v22 = (uint64_t *)(a1 + 88);
        id v162 = v21;
        uint64_t v167 = v23;
        id v164 = (id)*(v22 - 2);
        p_long long buf = &buf;
        id v163 = *v81;
        id v24 = objc_retainBlock(v157);
        v154[0] = _NSConcreteStackBlock;
        v154[1] = 3221225472;
        v154[2] = sub_1001EDB94;
        v154[3] = &unk_10073EF80;
        id v155 = *v15;
        v156 = v169;
        id v78 = objc_retainBlock(v154);
        v151[0] = _NSConcreteStackBlock;
        v151[1] = 3221225472;
        v151[2] = sub_1001EDD64;
        v151[3] = &unk_10073EFA8;
        uint64_t v25 = v24;
        id v153 = v25;
        id v26 = v18;
        id v152 = v26;
        id v76 = objc_retainBlock(v151);
        v146[0] = _NSConcreteStackBlock;
        v146[1] = 3221225472;
        v146[2] = sub_1001EDED8;
        v146[3] = &unk_10073EFF8;
        v146[4] = *v14;
        id v27 = v26;
        id v147 = v27;
        id v148 = *v16;
        id v28 = *v81;
        uint64_t v29 = *v22;
        id v149 = v28;
        uint64_t v150 = v29;
        id v30 = objc_retainBlock(v146);
        v144[0] = _NSConcreteStackBlock;
        v144[1] = 3221225472;
        v144[2] = sub_1001EDFB8;
        v144[3] = &unk_10073F020;
        id v31 = v30;
        id v145 = v31;
        id v32 = objc_retainBlock(v144);
        v141[0] = _NSConcreteStackBlock;
        v141[1] = 3221225472;
        v141[2] = sub_1001EE138;
        v141[3] = &unk_10073F048;
        v141[4] = *v14;
        id v33 = v27;
        id v142 = v33;
        id v143 = *v15;
        uint64_t v34 = objc_retainBlock(v141);
        v135[0] = _NSConcreteStackBlock;
        v135[1] = 3221225472;
        v135[2] = sub_1001EE328;
        v135[3] = &unk_10073F098;
        __int16 v35 = v34;
        uint64_t v36 = *v80;
        id v72 = v35;
        id v138 = v35;
        uint64_t v140 = v36;
        __int16 v37 = v31;
        uint64_t v38 = *v14;
        id v71 = v37;
        id v139 = v37;
        v135[4] = v38;
        id v39 = v33;
        id v136 = v39;
        id v137 = *v15;
        long long v40 = objc_retainBlock(v135);
        v129[0] = _NSConcreteStackBlock;
        v129[1] = 3221225472;
        v129[2] = sub_1001EE644;
        v129[3] = &unk_10073F0C0;
        v129[4] = *v14;
        id v130 = *v15;
        id v41 = v39;
        id v131 = v41;
        id v132 = *v16;
        id v42 = *v81;
        uint64_t v43 = *v22;
        id v133 = v42;
        uint64_t v134 = v43;
        long long v44 = objc_retainBlock(v129);
        v124[0] = _NSConcreteStackBlock;
        v124[1] = 3221225472;
        v124[2] = sub_1001EE65C;
        v124[3] = &unk_10073F160;
        long long v70 = v32;
        id v125 = v70;
        long long v45 = v25;
        id v126 = v45;
        long long v46 = v44;
        id v127 = v46;
        uint64_t v47 = v40;
        id v128 = v47;
        id v48 = objc_retainBlock(v124);
        v121[0] = _NSConcreteStackBlock;
        v121[1] = 3221225472;
        v121[2] = sub_1001EEAB0;
        v121[3] = &unk_10073F1B0;
        long long v69 = v76;
        id v122 = v69;
        id v49 = v48;
        id v123 = v49;
        uint64_t v50 = objc_retainBlock(v121);
        v112[0] = _NSConcreteStackBlock;
        v112[1] = 3221225472;
        v112[2] = sub_1001EEC38;
        v112[3] = &unk_10073F228;
        long long v68 = v78;
        id v115 = v68;
        id v113 = *v15;
        id v51 = v41;
        id v114 = v51;
        id v79 = v50;
        id v116 = v79;
        long long v74 = v46;
        id v117 = v74;
        long long v52 = v45;
        id v118 = v52;
        id v77 = v49;
        id v119 = v77;
        long long v73 = v47;
        id v120 = v73;
        long long v53 = objc_retainBlock(v112);
        v102[0] = _NSConcreteStackBlock;
        v102[1] = 3221225472;
        v102[2] = sub_1001EF30C;
        v102[3] = &unk_10073F278;
        id v103 = *v15;
        id v54 = v51;
        uint64_t v110 = *v80;
        uint64_t v55 = *v14;
        id v104 = v54;
        uint64_t v105 = v55;
        id v106 = *v16;
        id v56 = *v81;
        uint64_t v57 = *v22;
        id v107 = v56;
        uint64_t v111 = v57;
        id v58 = v52;
        id v108 = v58;
        id v59 = v53;
        id v109 = v59;
        uint64_t v60 = objc_retainBlock(v102);
        v97[0] = _NSConcreteStackBlock;
        v97[1] = 3221225472;
        v97[2] = sub_1001EF4B8;
        v97[3] = &unk_10073F2F0;
        v97[4] = *v14;
        id v98 = *v15;
        id v99 = *v75;
        uint64_t v101 = v169;
        long long v61 = v60;
        id v100 = v61;
        long long v62 = objc_retainBlock(v97);
        v88[0] = _NSConcreteStackBlock;
        v88[1] = 3221225472;
        v88[2] = sub_1001EF738;
        v88[3] = &unk_10073F340;
        v88[4] = *v14;
        id v89 = *v15;
        id v90 = v54;
        id v91 = *v16;
        id v63 = *v81;
        uint64_t v64 = *v22;
        id v92 = v63;
        uint64_t v96 = v64;
        id v65 = v58;
        id v93 = v65;
        id v95 = &buf;
        id v66 = v62;
        id v94 = v66;
        id v67 = objc_retainBlock(v88);
        ((void (*)(void))v67[2])();

        _Block_object_dispose(v169, 8);
        _Block_object_dispose(&buf, 8);

        goto LABEL_25;
      }
      uint64_t v84 = +[NSString stringWithFormat:@"Cannot create a share invitiation with unknown permission"];
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v84;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
      }

      uint64_t v10 = *(void *)(a1 + 72);
      if (v10)
      {
LABEL_19:
        long long v82 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v84];
        (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v82);
      }
    }
    else
    {
      uint64_t v84 = +[NSString stringWithFormat:@"Cannot create a share invitiation for a nil recipient handle"];
      id v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v84;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
      }

      uint64_t v10 = *(void *)(a1 + 72);
      if (v10) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v84 = +[NSString stringWithFormat:@"A cloud store zone is not defined"];
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v84;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&buf, 0xCu);
    }

    uint64_t v10 = *(void *)(a1 + 72);
    if (v10) {
      goto LABEL_19;
    }
  }
LABEL_25:
}

void sub_1001ED714(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1001ED740(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v38 = v5;
    __int16 v39 = 2112;
    id v40 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Completed invitation share creation with invitation: %@, error: %@", buf, 0x16u);
  }

  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001EDA68;
  v24[3] = &unk_10073EF30;
  unsigned __int8 v8 = *(void **)(a1 + 40);
  void v24[4] = *(void *)(a1 + 32);
  id v25 = v8;
  id v9 = v6;
  id v26 = v9;
  id v27 = *(id *)(a1 + 48);
  id v28 = *(id *)(a1 + 56);
  char v35 = *(unsigned char *)(a1 + 120);
  id v10 = *(id *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 104);
  id v29 = v10;
  uint64_t v33 = v11;
  id v12 = *(id *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 112);
  id v30 = v12;
  uint64_t v34 = v13;
  id v32 = *(id *)(a1 + 88);
  id v14 = v5;
  id v31 = v14;
  uint64_t v15 = objc_retainBlock(v24);
  id v16 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
  if (v16)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v38 = v16;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Best effort to remove the share lock after an invitation creation completion %@", buf, 0xCu);
    }

    uint64_t v17 = *(void **)(a1 + 32);
    uint64_t v36 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
    id v18 = +[NSArray arrayWithObjects:&v36 count:1];
    uint64_t v19 = *(void *)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 80);
    uint64_t v21 = *(void *)(a1 + 112);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1001EDB84;
    v22[3] = &unk_1007378B8;
    uint64_t v23 = v15;
    [v17 removeItems:v18 groupName:v19 groupNameSuffix:v20 qualityOfService:v21 completion:v22];
  }
  else
  {
    [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:v9];
    ((void (*)(void *))v15[2])(v15);
  }
}

id sub_1001EDA68(uint64_t a1)
{
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 48)
    && (id v2 = [objc_alloc((Class)PKCloudStoreError) initWithError:*(void *)(a1 + 48)]) != 0)
  {
    id v3 = v2;
    unsigned int v4 = [v2 isConflictDetected];
  }
  else
  {
    unsigned int v4 = 0;
  }
  if (*(void *)(a1 + 48)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if (!v4) {
      goto LABEL_14;
    }
  }
  else
  {
    id v6 = [*(id *)(a1 + 32) dataSource];
    [v6 deleteRetryCloudStoreShareOperationBackoffForBackoffType:1 cloudStoreZone:*(void *)(a1 + 56) recipientHandle:*(void *)(a1 + 64)];

    if (!v4) {
      goto LABEL_14;
    }
  }
  if (!*(unsigned char *)(a1 + 120)) {
    return [*(id *)(a1 + 32) createShareInvitationForRecipientHandle:*(void *)(a1 + 64) zoneName:*(void *)(a1 + 72) permission:*(void *)(a1 + 104) operationGroupName:*(void *)(a1 + 80) operationGroupNameSuffix:PKCloudStoreOperationGroupSuffixShareRecordConflict qualityOfService:*(void *)(a1 + 112) completion:*(void *)(a1 + 96)];
  }
LABEL_14:
  id result = *(id *)(a1 + 96);
  if (result)
  {
    unsigned __int8 v8 = (uint64_t (*)(void))*((void *)result + 2);
    return (id)v8();
  }
  return result;
}

uint64_t sub_1001EDB84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1001EDB94(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = objc_msgSend(v3, "pk_participantWithRecipientHandle:", *(void *)(a1 + 32));
  if (!v4)
  {
    BOOL v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v21 = 0;
      __int16 v22 = 2112;
      id v23 = v3;
      __int16 v24 = 2112;
      uint64_t v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Cannot find participant %@ on share %@. Checking aliases %@", buf, 0x20u);
    }

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = objc_msgSend(v3, "pk_participantWithRecipientHandle:", *(void *)(*((void *)&v15 + 1) + 8 * i), (void)v15);
          if (v12)
          {
            unsigned int v4 = (void *)v12;
            goto LABEL_14;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
    unsigned int v4 = 0;
LABEL_14:
  }
  id v13 = v4;

  return v13;
}

void sub_1001EDD64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [a3 invitationToken];
  id v14 = 0;
  id v7 = +[NSKeyedArchiver archivedDataWithRootObject:v6 requiringSecureCoding:1 error:&v14];
  id v8 = v14;

  if (v7)
  {
    id v9 = objc_alloc_init((Class)PKCloudStoreZoneInvitation);
    uint64_t v10 = [v5 URL];
    [v9 setShareURL:v10];

    uint64_t v11 = +[NSDate date];
    [v9 setDateCreated:v11];

    uint64_t v12 = [*(id *)(a1 + 32) zoneName];
    [v9 setZoneName:v12];

    id v13 = [*(id *)(a1 + 32) containerName];
    [v9 setContainerIdentifier:v13];

    [v9 setShareInvitationToken:v7];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001EDED8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001EDFA8;
  v12[3] = &unk_10073EFD0;
  id v13 = v5;
  id v11 = v5;
  [v6 _updateShare:a2 cloudStoreZone:v7 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v12];
}

uint64_t sub_1001EDFA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001EDFB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Removing participant %@ to share %@", buf, 0x16u);
  }

  [v7 removeParticipant:v8];
  uint64_t v11 = *(void *)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001EE128;
  v14[3] = &unk_10073EFD0;
  id v15 = v9;
  uint64_t v12 = *(void (**)(uint64_t, id, void *))(v11 + 16);
  id v13 = v9;
  v12(v11, v7, v14);
}

uint64_t sub_1001EE128(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001EE138(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [*(id *)(a1 + 32) dataSource];
  uint64_t v7 = 1;
  id v8 = [v6 nextPossibleCloudStoreShareOperationForBackoffType:1 cloudStoreZone:*(void *)(a1 + 40) recipientHandle:*(void *)(a1 + 48)];

  if (v8)
  {
    id v9 = +[NSDate date];
    [v9 timeIntervalSinceDate:v8];
    double v11 = v10;

    if (v11 >= 0.0)
    {
      uint64_t v7 = 1;
    }
    else
    {
      uint64_t v12 = +[NSString stringWithFormat:@"Not adding share pariticipant %@ to zone %@ the next possible fetch date is in the future %@", v5, *(void *)(a1 + 40), v8];
      id v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      if (a3)
      {
        v16[0] = NSLocalizedDescriptionKey;
        v16[1] = NSLocalizedFailureReasonErrorKey;
        v17[0] = v12;
        v17[1] = v12;
        id v14 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
        *a3 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-4015 userInfo:v14];
      }
      uint64_t v7 = 0;
    }
  }

  return v7;
}

void sub_1001EE328(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v21 = 0;
  int v11 = (*(uint64_t (**)(void))(v10 + 16))();
  id v12 = 0;
  id v13 = PKLogFacilityTypeGetObject();
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (v14)
    {
      *(_DWORD *)long long buf = 138412546;
      id v23 = v8;
      __int16 v24 = 2112;
      id v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adding participant %@ to share %@", buf, 0x16u);
    }

    [v8 setPermission:*(void *)(a1 + 72)];
    [v7 addParticipant:v8];
    uint64_t v15 = *(void *)(a1 + 64);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1001EE578;
    v17[3] = &unk_10073F070;
    long long v16 = *(void **)(a1 + 40);
    void v17[4] = *(void *)(a1 + 32);
    id v18 = v16;
    id v19 = *(id *)(a1 + 48);
    id v20 = v9;
    (*(void (**)(uint64_t, id, void *))(v15 + 16))(v15, v7, v17);
  }
  else
  {
    if (v14)
    {
      *(_DWORD *)long long buf = 138412802;
      id v23 = v8;
      __int16 v24 = 2112;
      id v25 = v7;
      __int16 v26 = 2112;
      id v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Cannot add participant %@ to share %@ with error: %@", buf, 0x20u);
    }

    (*((void (**)(id, id, id, id))v9 + 2))(v9, v7, v8, v12);
  }
}

void sub_1001EE578(void *a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)a1[4];
  id v7 = a3;
  id v8 = a2;
  id v9 = [v6 dataSource];
  uint64_t v10 = v9;
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  if (a3) {
    [v9 increaseRetryCloudStoreShareOperationBackoffLevelForBackoffType:1 cloudStoreZone:v11 recipientHandle:v12];
  }
  else {
    [v9 deleteRetryCloudStoreShareOperationBackoffForBackoffType:1 cloudStoreZone:v11 recipientHandle:v12];
  }

  uint64_t v13 = a1[7];
  objc_msgSend(v8, "pk_participantWithRecipientHandle:", a1[6]);
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id, id, id))(v13 + 16))(v13, v8, v14, v7);
}

id sub_1001EE644(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _fetchParticipantWithRecipientHandle:*(void *)(a1 + 40) cloudStoreZone:*(void *)(a1 + 48) operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64) qualityOfService:*(void *)(a1 + 72) completion:a2];
}

void sub_1001EE65C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "The token data is not defined for the participant. Attempting to remove and re-add them from the share. %@", buf, 0xCu);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1001EE7F4;
  v14[3] = &unk_10073F138;
  uint64_t v11 = *(void *)(a1 + 32);
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v18 = v9;
  uint64_t v12 = *(void (**)(uint64_t, id, id, void *))(v11 + 16);
  id v13 = v9;
  v12(v11, v7, v8, v14);
}

void sub_1001EE7F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001EE8FC;
    v7[3] = &unk_10073F110;
    uint64_t v6 = *(void *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 48);
    id v8 = v5;
    id v11 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_1001EE8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v7();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001EE9F8;
    v8[3] = &unk_10073F0E8;
    uint64_t v6 = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v6 + 16))(v6, v5, a2, v8);
  }
}

void sub_1001EE9F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [v7 invitationToken];
  id v10 = (void *)v9;
  if (v8 || !v9) {
    id v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else {
    id v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v11();
}

void sub_1001EEAB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 invitationToken];
  if (v7)
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Invitation token data is already defined for participant %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1001EEC28;
    v10[3] = &unk_10073F188;
    uint64_t v9 = *(void *)(a1 + 40);
    id v11 = *(id *)(a1 + 32);
    (*(void (**)(uint64_t, id, id, void *))(v9 + 16))(v9, v5, v6, v10);
  }
}

uint64_t sub_1001EEC28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001EEC38(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412802;
    id v29 = v4;
    __int16 v30 = 2112;
    id v31 = v3;
    __int16 v32 = 2112;
    uint64_t v33 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found CKShareParticipant %@ on share %@ for handle %@", buf, 0x20u);
  }

  id v7 = [v4 invitationToken];

  if (v7)
  {
    if (v4) {
      goto LABEL_5;
    }
LABEL_12:
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1001EF0A8;
    v17[3] = &unk_10073F200;
    uint64_t v14 = *(void *)(a1 + 64);
    id v19 = *(id *)(a1 + 72);
    id v20 = *(id *)(a1 + 88);
    id v18 = v3;
    id v21 = *(id *)(a1 + 80);
    id v22 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v17);

    id v15 = v19;
LABEL_14:

    goto LABEL_15;
  }
  uint64_t v9 = [*(id *)(a1 + 40) shareParticipantWithHandle:*(void *)(a1 + 32)];
  if (!v9)
  {
    id v10 = *(void **)(a1 + 40);
    id v11 = [v4 userIdentity];
    id v12 = [v11 lookupInfo];
    uint64_t v9 = [v10 shareParticipantWithLookupInfo:v12];
  }
  id v13 = [v9 invitationToken];
  [v4 setInvitationToken:v13];

  if (!v4) {
    goto LABEL_12;
  }
LABEL_5:
  id v8 = [v4 invitationToken];

  if (!v8)
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1001EEFB4;
    v23[3] = &unk_10073F110;
    uint64_t v16 = *(void *)(a1 + 64);
    id v25 = *(id *)(a1 + 72);
    id v26 = *(id *)(a1 + 80);
    id v24 = v3;
    id v27 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v23);

    id v15 = v25;
    goto LABEL_14;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Participant is already associated with share %@", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_15:
}

void sub_1001EEFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v6();
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1001EF098;
    v7[3] = &unk_10073F188;
    uint64_t v5 = *(void *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v5 + 16))(v5, v4, a2, v7);
  }
}

uint64_t sub_1001EF098(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001EF0A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001EF1DC;
    v8[3] = &unk_10073F1D8;
    uint64_t v7 = *(void *)(a1 + 48);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 32);
    id v10 = v5;
    id v13 = *(id *)(a1 + 64);
    (*(void (**)(uint64_t, uint64_t, id, void *))(v7 + 16))(v7, v6, v10, v8);
  }
}

void sub_1001EF1DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    if (!v8)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1001EF2FC;
      v14[3] = &unk_10073F188;
      uint64_t v13 = *(void *)(a1 + 56);
      id v15 = *(id *)(a1 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v13 + 16))(v13, v11, v12, v14);

      goto LABEL_6;
    }
    id v10 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
  }
  v10();
LABEL_6:
}

uint64_t sub_1001EF2FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001EF30C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = CKStringFromParticipantPermission();
    *(_DWORD *)long long buf = 138412802;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Creating share invitation for %@ in %@ with permission %@", buf, 0x20u);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 96);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001EF488;
  v11[3] = &unk_10073F250;
  id v12 = *(id *)(a1 + 72);
  id v13 = *(id *)(a1 + 80);
  [v6 _zoneWideShareForCloudStoreZone:v7 createIfNotExists:1 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v11];
}

uint64_t sub_1001EF488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2 || a4) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001EF4B8(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001EF580;
  v7[3] = &unk_10073F2C8;
  void v7[4] = v3;
  id v8 = v2;
  long long v6 = *(_OWORD *)(a1 + 56);
  id v5 = (id)v6;
  long long v9 = v6;
  objc_msgSend(v3, "_queue_aliasesForRecipientHandle:zoneName:completion:", v8, v4, v7);
}

void sub_1001EF580(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001EF65C;
  block[3] = &unk_10073F2A0;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  long long v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  long long v11 = v7;
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1001EF65C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetched aliases %@ for handle %@", (uint8_t *)&v6, 0x16u);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001EF738(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 96);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001EF81C;
  v10[3] = &unk_10073F318;
  uint64_t v7 = *(void *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  long long v9 = *(_OWORD *)(a1 + 80);
  id v8 = (id)v9;
  long long v12 = v9;
  objc_msgSend(v2, "_queue_lockShareCreationForRecipientHandle:cloudStoreZone:operationGroupName:operationGroupNameSuffix:qualityOfService:completion:", v3, v4, v5, v7, v6, v10);
}

void sub_1001EF81C(void *a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (!v6 || a3)
  {
    (*(void (**)(void))(a1[4] + 16))();
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
    (*(void (**)(void))(a1[5] + 16))();
  }
}

void sub_1001EFDCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    id v8 = +[NSString stringWithFormat:@"Error creating share lock: %@, error: %@", *(void *)(a1 + 32), v6];
    long long v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    if (!v7)
    {
      uint64_t v7 = [*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v8];
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v13 = v10;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error creating share lock: %@, error: %@", buf, 0x16u);
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, id, void *))(v11 + 16))(v11, v5, v7);
  }
}

void sub_1001EFF5C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)PKCloudStoreUploadItemConfiguration) initWithItem:v6];

  id v8 = +[NSSet setWithObject:a1[4]];
  [v7 setCloudStoreZones:v8];

  [v7 setDetectConflicts:1];
  [v7 setReturnRecords:1];
  long long v9 = (void *)a1[5];
  id v10 = +[NSSet setWithObject:v7];
  uint64_t v11 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t v13 = a1[8];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001F00B0;
  v15[3] = &unk_100732DC0;
  id v16 = v5;
  id v14 = v5;
  [v9 updateCloudStoreWithLocalItemsWithConfigurations:v10 groupName:v11 groupNameSuffix:v12 qualityOfService:v13 completion:v15];
}

void sub_1001F00B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a2;
  id v12 = [a3 firstObject];
  if ([v12 itemType] == (id)8) {
    id v9 = v12;
  }
  else {
    id v9 = 0;
  }
  id v10 = [v8 firstObject];

  if ([v10 itemType] == (id)8) {
    id v11 = v10;
  }
  else {
    id v11 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001F01A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  uint64_t v17 = a2;
  id v7 = a2;
  id v8 = +[NSArray arrayWithObjects:&v17 count:1];
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001F02F8;
  v13[3] = &unk_10073F3E0;
  uint64_t v11 = *(void *)(a1 + 72);
  id v15 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 56);
  id v16 = v5;
  id v12 = v5;
  [v6 removeItems:v8 groupName:v9 groupNameSuffix:v10 qualityOfService:v11 completion:v13];
}

uint64_t sub_1001F02F8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], a1[6]);
}

void sub_1001F0310(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    uint64_t v10 = [v8 creationDate];
    uint64_t v11 = +[NSDate date];
    [v10 timeIntervalSinceDate:v11];
    double v13 = fabs(v12);

    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v30 = (uint64_t)v8;
      __int16 v31 = 2112;
      uint64_t v32 = v15;
      __int16 v33 = 2048;
      double v34 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Detected a conflicting share lock %@ for requested new share lock %@. The conflicting share lock was created %f seconds ago", buf, 0x20u);
    }

    if (v13 <= 300.0)
    {
      __int16 v18 = +[NSString stringWithFormat:@"Cannot create a share lock %@ since there is a conflicting lock %@", *(void *)(a1 + 32), v8];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v30 = (uint64_t)v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      uint64_t v19 = *(void *)(a1 + 56);
      id v20 = [*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v18];
      (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v20);
    }
    else
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v30 = 5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Conflicting share lock is older then %ld minutes ago. Deleting the record and trying to take over the zone share", buf, 0xCu);
      }

      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      void v26[2] = sub_1001F06C4;
      v26[3] = &unk_10073F430;
      uint64_t v16 = *(void *)(a1 + 48);
      id v28 = *(id *)(a1 + 56);
      int8x16_t v25 = *(int8x16_t *)(a1 + 32);
      id v17 = (id)v25.i64[0];
      int8x16_t v27 = vextq_s8(v25, v25, 8uLL);
      (*(void (**)(uint64_t, id, void *))(v16 + 16))(v16, v8, v26);
    }
  }
  else if (v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v21 = +[NSString stringWithFormat:@"Error: could not upload share lock %@. Bailing out.", *(void *)(a1 + 32)];
    id v22 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v30 = (uint64_t)v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v23 = *(void *)(a1 + 56);
    id v24 = [*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v21];
    (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0, v24);
  }
}

void sub_1001F06C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    if (v8)
    {
      uint64_t v11 = +[NSString stringWithFormat:@"There is still a conflicting share lock even after adding and removing it %@. Bailing out.", v8];
      double v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v17 = v11;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }
    }
    else
    {
      if (v7)
      {
        uint64_t v15 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v17 = v7;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Successfully removed old share lock and added a new share lock %@ uploadedShareLock.", buf, 0xCu);
        }

        uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
        goto LABEL_3;
      }
      uint64_t v11 = +[NSString stringWithFormat:@"Error: could not upload share lock %@. Bailing out.", *(void *)(a1 + 40)];
      double v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v17 = v11;
        goto LABEL_7;
      }
    }

    uint64_t v13 = *(void *)(a1 + 48);
    id v14 = [*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v11];
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v14);

    goto LABEL_9;
  }
  uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
LABEL_3:
  v10();
LABEL_9:
}

id sub_1001F09DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_cloudStoreZoneInvitationDataForInvitation:toRecipient:completion:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_1001F0FEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 cloudStoreRecords];
  id v7 = [v6 allRecordsWithRecordType:CKRecordTypeShare];
  id v8 = [v7 anyObject];

  id v9 = objc_msgSend(v8, "pk_share");
  if (v5)
  {
    id v10 = v5;
    id v11 = [objc_alloc((Class)PKCloudStoreError) initWithError:v10];
    id v12 = v10;
    if ([v11 isPartialError])
    {
      uint64_t v13 = [*(id *)(a1 + 32) recordID];
      uint64_t v14 = [v11 errorForPartialErrorWithObject:v13];
      uint64_t v15 = (void *)v14;
      if (v14) {
        uint64_t v16 = (void *)v14;
      }
      else {
        uint64_t v16 = v10;
      }
      id v12 = v16;
    }
    id v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = *(void **)(a1 + 32);
      int v20 = 138412802;
      id v21 = v18;
      __int16 v22 = 2112;
      id v23 = v10;
      __int16 v24 = 2112;
      id v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Update of share %@ failed with error %@, returnedError %@", (uint8_t *)&v20, 0x20u);
    }
  }
  else
  {
    id v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412290;
      id v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Successfully updated share %@.", (uint8_t *)&v20, 0xCu);
    }
    id v12 = 0;
  }

  [*(id *)(a1 + 40) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 48) error:v12];
  uint64_t v19 = *(void *)(a1 + 56);
  if (v19) {
    (*(void (**)(uint64_t, void *, id))(v19 + 16))(v19, v9, v12);
  }
}

void sub_1001F133C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetching share metadata for urls %@", buf, 0xCu);
  }

  id v4 = objc_alloc((Class)CKFetchShareMetadataOperation);
  id v5 = [*(id *)(a1 + 32) allKeys];
  id v6 = [v4 initWithShareURLs:v5];

  id v7 = objc_alloc_init((Class)CKOperationConfiguration);
  [v7 setDiscretionaryNetworkBehavior:0];
  [v6 setConfiguration:v7];
  [v6 setShareInvitationTokensByShareURL:*(void *)(a1 + 32)];
  id v8 = +[CKOperationGroup pk_operationGroupWithName:*(void *)(a1 + 40) suffix:*(void *)(a1 + 48)];
  [v6 setGroup:v8];
  [v6 setQualityOfService:*(void *)(a1 + 72)];
  id v9 = [*(id *)(a1 + 32) allKeys];
  id v10 = objc_msgSend(v9, "pk_arrayByApplyingBlock:", &stru_10073F498);

  id v11 = [*(id *)(a1 + 56) reportContainerChangeIntervalBeginEventWithType:25 stateName:0 objectNames:v10 operationGroupName:*(void *)(a1 + 40) operationGroupNameSuffix:*(void *)(a1 + 48)];
  id v12 = objc_alloc_init((Class)NSMutableDictionary);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1001F1640;
  v24[3] = &unk_10073F4C0;
  id v25 = *(id *)(a1 + 32);
  id v13 = v12;
  id v26 = v13;
  [v6 setPerShareMetadataBlock:v24];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001F174C;
  v18[3] = &unk_10073E7B8;
  id v19 = *(id *)(a1 + 32);
  id v20 = v13;
  uint64_t v14 = *(void **)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 56);
  id v22 = v11;
  id v23 = v14;
  id v15 = v11;
  id v16 = v13;
  [v6 setFetchShareMetadataCompletionBlock:v18];
  id v17 = [*(id *)(*(void *)(a1 + 56) + 152) container];
  [v17 addOperation:v6];
}

id sub_1001F1638(id a1, NSURL *a2)
{
  return [(NSURL *)a2 absoluteString];
}

void sub_1001F1640(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v11;
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error fetching share metadata for urls %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) setObject:v8 forKey:v7];
  }
}

void sub_1001F174C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error fetching share metadata for urls %@, %@", (uint8_t *)&v10, 0x16u);
    }
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed fetching share metadata for urls %@", (uint8_t *)&v10, 0xCu);
  }

  [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 56) error:v3];
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8)
  {
    id v9 = [*(id *)(a1 + 40) copy];
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v3);
  }
}

void sub_1001F19F4(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v8 = +[NSString stringWithFormat:@"A cloud store zone is not defined"];
    id v9 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 138412290;
    __int16 v31 = v8;
    goto LABEL_11;
  }
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      __int16 v31 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching participant with handle %@", buf, 0xCu);
    }

    unsigned __int8 v4 = [*(id *)(a1 + 48) containsString:@"@"];
    id v5 = objc_alloc((Class)CKUserIdentityLookupInfo);
    uint64_t v6 = *(void *)(a1 + 48);
    if (v4) {
      id v7 = [v5 initWithEmailAddress:v6];
    }
    else {
      id v7 = [v5 initWithPhoneNumber:v6];
    }
    uint64_t v8 = v7;
    uint64_t v11 = [*(id *)(*(void *)(a1 + 40) + 152) container];
    id v12 = objc_alloc_init((Class)NSMutableArray);
    id v13 = objc_alloc((Class)CKFetchShareParticipantsOperation);
    id v29 = v8;
    __int16 v14 = +[NSArray arrayWithObjects:&v29 count:1];
    id v15 = [v13 initWithUserIdentityLookupInfos:v14];

    id v16 = objc_alloc_init((Class)CKOperationConfiguration);
    [v16 setDiscretionaryNetworkBehavior:0];
    [v16 setContainer:v11];
    [v15 setConfiguration:v16];
    id v17 = +[CKOperationGroup pk_operationGroupWithName:*(void *)(a1 + 56) suffix:*(void *)(a1 + 64)];
    [v15 setGroup:v17];
    [v15 setQualityOfService:*(void *)(a1 + 80)];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1001F1DE8;
    v27[3] = &unk_10073F4E8;
    id v18 = v12;
    id v28 = v18;
    [v15 setShareParticipantFetchedBlock:v27];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_1001F1DF4;
    v23[3] = &unk_10073E468;
    int8x16_t v22 = *(int8x16_t *)(a1 + 32);
    id v19 = (id)v22.i64[0];
    int8x16_t v24 = vextq_s8(v22, v22, 8uLL);
    id v20 = *(id *)(a1 + 72);
    id v25 = v18;
    id v26 = v20;
    id v21 = v18;
    [v15 setFetchShareParticipantsCompletionBlock:v23];
    [v11 addOperation:v15];

    goto LABEL_16;
  }
  uint64_t v8 = +[NSString stringWithFormat:@"Cannot fetch participany for a nil recipient handle"];
  id v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    __int16 v31 = v8;
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }
LABEL_12:

  uint64_t v10 = *(void *)(a1 + 72);
  if (v10)
  {
    uint64_t v11 = [*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v8];
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
LABEL_16:
  }
}

id sub_1001F1DE8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_1001F1DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001F1ED8;
  v6[3] = &unk_100730C10;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1001F1ED8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      uint64_t v13 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error creating share for zone %@, %@", (uint8_t *)&v10, 0x16u);
    }

    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0, *(void *)(a1 + 32));
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v10 = 138412290;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully fetched participants %@", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      id v9 = [*(id *)(a1 + 48) firstObject];
      (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v9, 0);
    }
  }
}

void sub_1001F215C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = [v2 zoneName];
    if (v3)
    {
      BOOL v4 = [*(id *)(a1 + 32) zoneName];
      id v38 = v4;
      uint64_t v5 = +[NSArray arrayWithObjects:&v38 count:1];
    }
    else
    {
      uint64_t v5 = 0;
    }

    id v9 = [*(id *)(a1 + 40) reportContainerChangeIntervalBeginEventWithType:26 stateName:0 objectNames:v5 operationGroupName:*(void *)(a1 + 48) operationGroupNameSuffix:*(void *)(a1 + 56)];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_1001F254C;
    v33[3] = &unk_10073F538;
    void v33[4] = *(void *)(a1 + 40);
    id v34 = v9;
    id v35 = *(id *)(a1 + 64);
    id v8 = v9;
    int v10 = objc_retainBlock(v33);
    uint64_t v11 = [*(id *)(*(void *)(a1 + 40) + 152) databaseForScope:2];
    id v12 = objc_alloc((Class)CKRecordID);
    uint64_t v13 = [*(id *)(a1 + 32) recordZone];
    __int16 v14 = [v13 zoneID];
    id v15 = [v12 initWithRecordName:CKRecordNameZoneWideShare zoneID:v14];

    id v16 = [[PDCloudStoreRecordsRequest alloc] initWithRequestType:5 storeChanges:0 returnRecords:1 qualityOfService:*(void *)(a1 + 72) groupName:*(void *)(a1 + 48) groupNameSuffix:*(void *)(a1 + 56)];
    id v17 = [v11 identifier];
    uint64_t v36 = v17;
    id v18 = +[NSSet setWithObject:v15];
    __int16 v37 = v18;
    id v19 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
    [(PDCloudStoreRecordsRequest *)v16 setRecordIDsByDatabaseIdentifier:v19];

    id v20 = *(void **)(a1 + 40);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1001F25F0;
    v25[3] = &unk_10073F5B0;
    void v25[4] = v20;
    id v26 = *(id *)(a1 + 32);
    id v27 = v15;
    char v32 = *(unsigned char *)(a1 + 80);
    id v28 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 72);
    id v30 = v10;
    uint64_t v31 = v22;
    id v29 = v21;
    id v23 = v10;
    id v24 = v15;
    [v20 executeRecordsRequest:v16 completion:v25];

    goto LABEL_10;
  }
  uint64_t v5 = +[NSString stringWithFormat:@"A cloud store zone is not defined"];
  uint64_t v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v40 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 64);
  if (v7)
  {
    id v8 = [*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v5];
    (*(void (**)(uint64_t, void, void, id))(v7 + 16))(v7, 0, 0, v8);
LABEL_10:
  }
}

void sub_1001F254C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v10 = a2;
  id v7 = a4;
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:v7];
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    id v9 = objc_msgSend(v10, "pk_share");
    (*(void (**)(uint64_t, void *, uint64_t, id))(v8 + 16))(v8, v9, a3, v7);
  }
}

void sub_1001F25F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001F272C;
  v15[3] = &unk_10073F588;
  id v16 = v6;
  id v17 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  char v25 = *(unsigned char *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 32);
  id v18 = v8;
  uint64_t v19 = v9;
  id v20 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v12 = *(void **)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  id v21 = v10;
  uint64_t v24 = v11;
  id v22 = v5;
  id v23 = v12;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v7, v15);
}

void sub_1001F272C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      id v5 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      id v26 = v5;
      __int16 v27 = 2112;
      uint64_t v28 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to get zone wide share for zone %@ with error %@", buf, 0x16u);
    }

    id v6 = [objc_alloc((Class)PKCloudStoreError) initWithError:*(void *)(a1 + 32)];
    id v7 = [v6 errorForPartialErrorWithObject:*(void *)(a1 + 48)];
    unsigned int v8 = [v7 isUnknownItemError];
    if (!v8) {
      goto LABEL_11;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      id v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The zone share for %@ is missing", buf, 0xCu);
    }

    if (*(unsigned char *)(a1 + 104))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The zone share does not exist, trying to create it now.", buf, 2u);
      }

      id v10 = objc_alloc((Class)CKShare);
      uint64_t v11 = [*(id *)(a1 + 40) recordZone];
      id v12 = [v11 zoneID];
      id v13 = [v10 initWithRecordZoneID:v12];

      uint64_t v14 = *(void *)(a1 + 40);
      id v15 = *(void **)(a1 + 56);
      uint64_t v16 = *(void *)(a1 + 64);
      uint64_t v17 = *(void *)(a1 + 72);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1001F2A78;
      v22[3] = &unk_10073F560;
      void v22[4] = v15;
      uint64_t v18 = *(void *)(a1 + 96);
      id v23 = *(id *)(a1 + 88);
      char v24 = v8;
      [v15 _updateShare:v13 cloudStoreZone:v14 operationGroupName:v16 operationGroupNameSuffix:v17 qualityOfService:v18 completion:v22];
    }
    else
    {
LABEL_11:
      (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v19 = [*(id *)(a1 + 80) cloudStoreRecords];
      *(_DWORD *)long long buf = 138412290;
      id v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully fetched zone wide share %@.", buf, 0xCu);
    }
    id v20 = [*(id *)(a1 + 80) cloudStoreRecords];
    id v21 = [v20 allRecordsWithRecordType:CKRecordTypeShare];
    id v6 = [v21 anyObject];

    (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
  }
}

void sub_1001F2A78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001F2B5C;
  v11[3] = &unk_1007367B8;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  char v15 = *(unsigned char *)(a1 + 48);
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, v11);
}

uint64_t sub_1001F2B5C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 40));
}

void sub_1001F302C(uint64_t a1)
{
  group = dispatch_group_create();
  id v85 = objc_alloc_init((Class)NSMutableDictionary);
  id v73 = objc_alloc_init((Class)NSMutableDictionary);
  long long v150 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  uint64_t v87 = a1;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v150 objects:v159 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v151;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v151 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v150 + 1) + 8 * i);
        id v7 = [*(id *)(v87 + 32) objectForKey:v6];
        id v8 = [v7 allObjects];

        id v9 = [v85 objectForKey:v6];
        id v10 = v9;
        if (v9) {
          id v11 = v9;
        }
        else {
          id v11 = objc_alloc_init((Class)NSMutableArray);
        }
        id v12 = v11;

        if ([v8 count])
        {
          uint64_t v13 = 0;
          unint64_t v14 = 0;
          do
          {
            if ((unint64_t)[v8 count] + v13 <= 0x190) {
              uint64_t v15 = (uint64_t)[v8 count] + v13;
            }
            else {
              uint64_t v15 = 400;
            }
            uint64_t v16 = objc_msgSend(v8, "subarrayWithRange:", v14, v15);
            [v12 addObject:v16];

            v14 += 400;
            v13 -= 400;
          }
          while (v14 < (unint64_t)[v8 count]);
        }
        [v85 setObject:v12 forKey:v6];
      }
      id v3 = [v2 countByEnumeratingWithState:&v150 objects:v159 count:16];
    }
    while (v3);
  }

  long long v148 = 0u;
  long long v149 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  id v17 = *(id *)(v87 + 40);
  id v18 = [v17 countByEnumeratingWithState:&v146 objects:v158 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v147;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v147 != v19) {
          objc_enumerationMutation(v17);
        }
        uint64_t v21 = *(void *)(*((void *)&v146 + 1) + 8 * (void)j);
        id v22 = [*(id *)(v87 + 40) objectForKey:v21];
        id v23 = [v22 allObjects];

        char v24 = [v73 objectForKey:v21];
        char v25 = v24;
        if (v24) {
          id v26 = v24;
        }
        else {
          id v26 = objc_alloc_init((Class)NSMutableArray);
        }
        __int16 v27 = v26;

        if ([v23 count])
        {
          uint64_t v28 = 0;
          unint64_t v29 = 0;
          do
          {
            if ((unint64_t)[v23 count] + v28 <= 0x190) {
              uint64_t v30 = (uint64_t)[v23 count] + v28;
            }
            else {
              uint64_t v30 = 400;
            }
            uint64_t v31 = objc_msgSend(v23, "subarrayWithRange:", v29, v30);
            [v27 addObject:v31];

            v29 += 400;
            v28 -= 400;
          }
          while (v29 < (unint64_t)[v23 count]);
        }
        [v73 setObject:v27 forKey:v21];
      }
      id v18 = [v17 countByEnumeratingWithState:&v146 objects:v158 count:16];
    }
    while (v18);
  }

  v144[0] = 0;
  v144[1] = v144;
  v144[2] = 0x3032000000;
  v144[3] = sub_1000209BC;
  void v144[4] = sub_100020FD0;
  id v145 = objc_alloc_init((Class)NSMutableDictionary);
  v142[0] = 0;
  v142[1] = v142;
  v142[2] = 0x3032000000;
  v142[3] = sub_1000209BC;
  v142[4] = sub_100020FD0;
  id v143 = objc_alloc_init((Class)NSMutableDictionary);
  v140[0] = 0;
  v140[1] = v140;
  v140[2] = 0x3032000000;
  v140[3] = sub_1000209BC;
  v140[4] = sub_100020FD0;
  id v141 = 0;
  v138[0] = 0;
  v138[1] = v138;
  v138[2] = 0x3032000000;
  v138[3] = sub_1000209BC;
  v138[4] = sub_100020FD0;
  id v139 = 0;
  v136[0] = 0;
  v136[1] = v136;
  v136[2] = 0x3032000000;
  v136[3] = sub_1000209BC;
  uint8_t v136[4] = sub_100020FD0;
  id v137 = 0;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  id obj = v85;
  id v32 = [obj countByEnumeratingWithState:&v132 objects:v157 count:16];
  if (v32)
  {
    uint64_t v69 = *(void *)v133;
    do
    {
      uint64_t v33 = 0;
      do
      {
        if (*(void *)v133 != v69) {
          objc_enumerationMutation(obj);
        }
        uint64_t v79 = *(void *)(*((void *)&v132 + 1) + 8 * v33);
        id v34 = [obj objectForKey:v69];
        uint64_t v71 = v33;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v128 = 0u;
        long long v129 = 0u;
        id v75 = v34;
        id v35 = [v75 countByEnumeratingWithState:&v128 objects:v156 count:16];
        if (v35)
        {
          uint64_t v78 = *(void *)v129;
          do
          {
            uint64_t v36 = 0;
            do
            {
              if (*(void *)v129 != v78) {
                objc_enumerationMutation(v75);
              }
              __int16 v37 = *(void **)(*((void *)&v128 + 1) + 8 * v36);
              id v38 = objc_msgSend(v37, "pk_createArrayBySafelyApplyingBlock:", &stru_10073F5F8);
              __int16 v39 = [*(id *)(v87 + 48) reportContainerChangeIntervalBeginEventWithType:29 stateName:0 objectNames:v38 operationGroupName:*(void *)(v87 + 56) operationGroupNameSuffix:*(void *)(v87 + 64)];
              id v40 = [objc_alloc((Class)CKModifyRecordsOperation) initWithRecordsToSave:v37 recordIDsToDelete:0];
              objc_msgSend(v40, "setMarkAsParticipantNeedsNewInvitationToken:", objc_msgSend(*(id *)(v87 + 72), "markAsParticipantNeedsNewInvitationToken"));
              id v41 = +[CKOperationGroup pk_operationGroupWithName:*(void *)(v87 + 56) suffix:*(void *)(v87 + 64)];
              objc_msgSend(v41, "setQuantity:", objc_msgSend(v37, "count"));
              [v40 setGroup:v41];
              [v40 setQualityOfService:*(void *)(v87 + 88)];
              if (*(unsigned char *)(v87 + 96)) {
                BOOL v42 = 1;
              }
              else {
                BOOL v42 = *(unsigned char *)(v87 + 97) != 0;
              }
              [v40 setSavePolicy:!v42];
              uint64_t v43 = objc_opt_new();
              [v43 setDiscretionaryNetworkBehavior:0];
              [v40 setConfiguration:v43];
              uint64_t v83 = v36;
              dispatch_group_enter(group);
              uint64_t v44 = *(void *)(v87 + 48);
              long long v45 = *(NSObject **)(v44 + 24);
              long long v46 = *(NSObject **)(v44 + 160);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              block[2] = sub_1001F3E48;
              block[3] = &unk_10073F698;
              void block[4] = v44;
              id v116 = v40;
              char v127 = *(unsigned char *)(v87 + 96);
              id v122 = v140;
              id v123 = v138;
              uint64_t v117 = v79;
              id v118 = v39;
              char v124 = v136;
              id v125 = v144;
              id v126 = v142;
              id v119 = group;
              id v120 = *(id *)(v87 + 56);
              id v121 = *(id *)(v87 + 64);
              id v47 = v39;
              id v48 = v40;
              dispatch_group_notify(v45, v46, block);

              uint64_t v36 = v83 + 1;
            }
            while (v35 != (id)(v83 + 1));
            id v35 = [v75 countByEnumeratingWithState:&v128 objects:v156 count:16];
          }
          while (v35);
        }

        uint64_t v33 = v71 + 1;
      }
      while ((id)(v71 + 1) != v32);
      id v32 = [obj countByEnumeratingWithState:&v132 objects:v157 count:16];
    }
    while (v32);
  }

  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  id v74 = v73;
  id v49 = (char *)[v74 countByEnumeratingWithState:&v111 objects:v155 count:16];
  if (v49)
  {
    uint64_t v72 = *(void *)v112;
    do
    {
      uint64_t v50 = 0;
      do
      {
        if (*(void *)v112 != v72) {
          objc_enumerationMutation(v74);
        }
        uint64_t v81 = *(void *)(*((void *)&v111 + 1) + 8 * (void)v50);
        id v51 = objc_msgSend(v74, "objectForKey:");
        id v76 = v50;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        id v77 = v51;
        id v52 = [v77 countByEnumeratingWithState:&v107 objects:v154 count:16];
        if (v52)
        {
          uint64_t v80 = *(void *)v108;
          do
          {
            uint64_t v53 = 0;
            id v84 = v52;
            do
            {
              if (*(void *)v108 != v80) {
                objc_enumerationMutation(v77);
              }
              id v54 = *(void **)(*((void *)&v107 + 1) + 8 * v53);
              id v55 = objc_msgSend(v54, "pk_createArrayBySafelyApplyingBlock:", &stru_10073F6B8);
              id v56 = [*(id *)(v87 + 48) reportContainerChangeIntervalBeginEventWithType:30 stateName:0 objectNames:v55 operationGroupName:*(void *)(v87 + 56) operationGroupNameSuffix:*(void *)(v87 + 64)];
              id v57 = [objc_alloc((Class)CKModifyRecordsOperation) initWithRecordsToSave:0 recordIDsToDelete:v54];
              id v58 = +[CKOperationGroup pk_operationGroupWithName:*(void *)(v87 + 56) suffix:*(void *)(v87 + 64)];
              objc_msgSend(v58, "setQuantity:", objc_msgSend(v54, "count"));
              [v57 setGroup:v58];
              [v57 setQualityOfService:*(void *)(v87 + 88)];
              [v57 setSavePolicy:1];
              id v59 = objc_opt_new();
              [v59 setDiscretionaryNetworkBehavior:0];
              [v57 setConfiguration:v59];
              uint64_t v86 = v53;
              dispatch_group_enter(group);
              uint64_t v60 = *(void *)(v87 + 48);
              long long v61 = *(NSObject **)(v60 + 24);
              long long v62 = *(NSObject **)(v60 + 160);
              v97[0] = _NSConcreteStackBlock;
              v97[1] = 3221225472;
              v97[2] = sub_1001F473C;
              v97[3] = &unk_10073F730;
              v97[4] = v60;
              id v98 = v57;
              id v104 = v136;
              uint64_t v105 = v144;
              id v99 = v56;
              uint64_t v100 = v81;
              id v106 = v142;
              uint64_t v101 = group;
              id v102 = *(id *)(v87 + 56);
              id v103 = *(id *)(v87 + 64);
              id v63 = v56;
              id v64 = v57;
              dispatch_group_notify(v61, v62, v97);

              uint64_t v53 = v86 + 1;
            }
            while (v84 != (id)(v86 + 1));
            id v52 = [v77 countByEnumeratingWithState:&v107 objects:v154 count:16];
          }
          while (v52);
        }

        uint64_t v50 = v76 + 1;
      }
      while (v76 + 1 != v49);
      id v49 = (char *)[v74 countByEnumeratingWithState:&v111 objects:v155 count:16];
    }
    while (v49);
  }

  id v65 = *(NSObject **)(*(void *)(v87 + 48) + 160);
  v88[0] = _NSConcreteStackBlock;
  v88[1] = 3221225472;
  v88[2] = sub_1001F4D10;
  v88[3] = &unk_10073F780;
  id v91 = *(id *)(v87 + 80);
  id v92 = v140;
  id v66 = *(void **)(v87 + 56);
  v88[4] = *(void *)(v87 + 48);
  id v89 = v66;
  id v67 = *(id *)(v87 + 64);
  uint64_t v68 = *(void *)(v87 + 88);
  id v90 = v67;
  id v93 = v144;
  id v94 = v142;
  id v95 = v136;
  uint64_t v96 = v68;
  dispatch_group_notify(group, v65, v88);

  _Block_object_dispose(v136, 8);
  _Block_object_dispose(v138, 8);

  _Block_object_dispose(v140, 8);
  _Block_object_dispose(v142, 8);

  _Block_object_dispose(v144, 8);
}

void sub_1001F3D44(_Unwind_Exception *a1)
{
}

id sub_1001F3DF8(id a1, CKRecord *a2)
{
  id v2 = [(CKRecord *)a2 recordID];
  id v3 = [v2 recordName];

  return v3;
}

void sub_1001F3E48(uint64_t a1)
{
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 24));
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  id v12 = sub_1001F3F8C;
  uint64_t v13 = &unk_10073F670;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  char v23 = *(unsigned char *)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(void **)(a1 + 56);
  uint64_t v14 = v2;
  uint64_t v15 = v4;
  long long v20 = *(_OWORD *)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 104);
  id v16 = v5;
  long long v22 = *(_OWORD *)(a1 + 112);
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v19 = *(id *)(a1 + 80);
  [v3 setModifyRecordsCompletionBlock:&v10];
  uint64_t v6 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 152), "databaseForIdentifier:", *(void *)(a1 + 48), v10, v11, v12, v13, v14, v15);
  id v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = [v6 database];
  objc_msgSend(v8, "_queue_addOperation:forDatabase:", v7, v9);
}

void sub_1001F3F8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F40FC;
  block[3] = &unk_10073F648;
  char v26 = *(unsigned char *)(a1 + 120);
  id v15 = v9;
  long long v23 = *(_OWORD *)(a1 + 80);
  uint64_t v24 = *(void *)(a1 + 96);
  int8x16_t v16 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  id v17 = *(id *)(a1 + 48);
  id v18 = v7;
  id v19 = v8;
  long long v25 = *(_OWORD *)(a1 + 104);
  id v20 = *(id *)(a1 + 56);
  id v21 = *(id *)(a1 + 64);
  id v22 = *(id *)(a1 + 72);
  id v11 = v8;
  id v12 = v7;
  id v13 = v9;
  dispatch_async(v10, block);
}

void sub_1001F40FC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144) && [*(id *)(a1 + 32) code] == (id)2)
  {
    uint64_t v2 = [*(id *)(a1 + 32) userInfo];
    id v3 = [v2 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    uint64_t v4 = [v3 allKeys];
    id v5 = [v4 countByEnumeratingWithState:&v60 objects:v64 count:16];
    if (!v5) {
      goto LABEL_23;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v61;
    while (1)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v61 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v60 + 1) + 8 * i);
        id v10 = [v3 objectForKeyedSubscript:v9];
        if ([v10 code] == (id)14)
        {
          id v11 = *(void **)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
          if (!v11)
          {
            id v12 = objc_alloc_init((Class)NSMutableDictionary);
            uint64_t v13 = *(void *)(*(void *)(a1 + 104) + 8);
            uint64_t v14 = *(void **)(v13 + 40);
            *(void *)(v13 + 40) = v12;

            id v11 = *(void **)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
          }
          id v15 = [v11 objectForKeyedSubscript:*(void *)(a1 + 40)];

          if (!v15)
          {
            id v16 = objc_alloc_init((Class)NSMutableSet);
            [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setObject:v16 forKeyedSubscript:*(void *)(a1 + 40)];
          }
          uint64_t v17 = *(void *)(a1 + 104);
        }
        else
        {
          if ([v10 code] != (id)11) {
            goto LABEL_21;
          }
          id v18 = *(void **)(*(void *)(*(void *)(a1 + 112) + 8) + 40);
          if (!v18)
          {
            id v19 = objc_alloc_init((Class)NSMutableDictionary);
            uint64_t v20 = *(void *)(*(void *)(a1 + 112) + 8);
            id v21 = *(void **)(v20 + 40);
            *(void *)(v20 + 40) = v19;

            id v18 = *(void **)(*(void *)(*(void *)(a1 + 112) + 8) + 40);
          }
          id v22 = [v18 objectForKeyedSubscript:*(void *)(a1 + 40)];

          if (!v22)
          {
            id v23 = objc_alloc_init((Class)NSMutableSet);
            [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) setObject:v23 forKeyedSubscript:*(void *)(a1 + 40)];
          }
          uint64_t v17 = *(void *)(a1 + 112);
        }
        uint64_t v24 = [*(id *)(*(void *)(v17 + 8) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)];
        [v24 addObject:v9];

LABEL_21:
      }
      id v6 = [v4 countByEnumeratingWithState:&v60 objects:v64 count:16];
      if (!v6)
      {
LABEL_23:

        long long v25 = [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)];
        char v26 = (char *)[v25 count];
        __int16 v27 = [*(id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)];
        uint64_t v28 = &v26[(void)[v27 count]];

        if (v28 != [v3 count])
        {
          uint64_t v29 = *(void *)(*(void *)(a1 + 120) + 8);
          id v32 = *(void **)(v29 + 40);
          uint64_t v30 = (id *)(v29 + 40);
          uint64_t v31 = v32;
          if (!v32) {
            uint64_t v31 = *(void **)(a1 + 32);
          }
          objc_storeStrong(v30, v31);
        }

        goto LABEL_31;
      }
    }
  }
  uint64_t v33 = *(void *)(*(void *)(a1 + 120) + 8);
  uint64_t v36 = *(void **)(v33 + 40);
  id v34 = (id *)(v33 + 40);
  id v35 = v36;
  if (!v36) {
    id v35 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v34, v35);
LABEL_31:
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_1001F45A0;
  v51[3] = &unk_10073F620;
  __int16 v37 = *(void **)(a1 + 56);
  v51[4] = *(void *)(a1 + 48);
  id v52 = v37;
  id v53 = *(id *)(a1 + 32);
  id v38 = *(id *)(a1 + 64);
  uint64_t v58 = *(void *)(a1 + 128);
  uint64_t v39 = *(void *)(a1 + 40);
  id v54 = v38;
  uint64_t v55 = v39;
  id v40 = *(id *)(a1 + 72);
  uint64_t v41 = *(void *)(a1 + 136);
  id v56 = v40;
  uint64_t v59 = v41;
  id v57 = *(id *)(a1 + 80);
  BOOL v42 = objc_retainBlock(v51);
  uint64_t v43 = v42;
  uint64_t v44 = *(void *)(a1 + 32);
  if (v44)
  {
    uint64_t v46 = *(void *)(a1 + 40);
    long long v45 = *(void **)(a1 + 48);
    uint64_t v48 = *(void *)(a1 + 88);
    uint64_t v47 = *(void *)(a1 + 96);
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_1001F4724;
    v49[3] = &unk_10072E570;
    uint64_t v50 = v42;
    objc_msgSend(v45, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v44, 0, v46, v48, v47, v49);
  }
  else
  {
    ((void (*)(void *))v42[2])(v42);
  }
}

void sub_1001F45A0(uint64_t a1)
{
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v2 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) objectForKey:*(void *)(a1 + 64)];
    id v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init((Class)NSMutableSet);
    }
    id v11 = v4;

    id v5 = +[NSSet setWithArray:*(void *)(a1 + 56)];
    [v11 unionSet:v5];

    [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setObject:v11 forKey:*(void *)(a1 + 64)];
  }
  else
  {
    id v11 = 0;
  }
  if ([*(id *)(a1 + 72) count])
  {
    id v6 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) objectForKey:*(void *)(a1 + 64)];
    uint64_t v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = objc_alloc_init((Class)NSMutableSet);
    }
    uint64_t v9 = v8;

    id v10 = +[NSSet setWithArray:*(void *)(a1 + 72)];
    [v9 unionSet:v10];

    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setObject:v9 forKey:*(void *)(a1 + 64)];
    id v11 = v9;
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 24));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

uint64_t sub_1001F4724(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1001F4734(id a1, CKRecordID *a2)
{
  return [(CKRecordID *)a2 recordName];
}

void sub_1001F473C(uint64_t a1)
{
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 24));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001F4870;
  v11[3] = &unk_10073F708;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 88);
  void v11[4] = *(void *)(a1 + 32);
  uint64_t v17 = v3;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v6 = *(void **)(a1 + 64);
  id v12 = v4;
  uint64_t v13 = v5;
  long long v18 = *(_OWORD *)(a1 + 96);
  id v14 = v6;
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  [v2 setModifyRecordsCompletionBlock:v11];
  uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 152) databaseForIdentifier:*(void *)(a1 + 56)];
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = [v7 database];
  objc_msgSend(v9, "_queue_addOperation:forDatabase:", v8, v10);
}

void sub_1001F4870(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(NSObject **)(v10 + 160);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1001F49C4;
  v16[3] = &unk_10073F6E0;
  uint64_t v26 = *(void *)(a1 + 80);
  id v17 = v9;
  uint64_t v18 = v10;
  id v19 = *(id *)(a1 + 40);
  id v20 = v7;
  id v12 = *(void **)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 48);
  id v22 = v8;
  long long v27 = *(_OWORD *)(a1 + 88);
  id v23 = v12;
  id v24 = *(id *)(a1 + 64);
  id v25 = *(id *)(a1 + 72);
  id v13 = v8;
  id v14 = v7;
  id v15 = v9;
  dispatch_async(v11, v16);
}

void sub_1001F49C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8);
  uint64_t v5 = *(void **)(v2 + 40);
  uint64_t v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001F4B7C;
  v21[3] = &unk_10073F620;
  id v6 = *(void **)(a1 + 48);
  void v21[4] = *(void *)(a1 + 40);
  id v22 = v6;
  id v23 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 56);
  uint64_t v28 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 64);
  id v9 = *(void **)(a1 + 72);
  id v24 = v7;
  uint64_t v25 = v8;
  id v10 = v9;
  uint64_t v11 = *(void *)(a1 + 120);
  id v26 = v10;
  uint64_t v29 = v11;
  id v27 = *(id *)(a1 + 80);
  id v12 = objc_retainBlock(v21);
  id v13 = v12;
  uint64_t v14 = *(void *)(a1 + 32);
  if (v14)
  {
    id v15 = *(void **)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 96);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1001F4D00;
    void v19[3] = &unk_10072E570;
    id v20 = v12;
    objc_msgSend(v15, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v14, 0, v16, v18, v17, v19);
  }
  else
  {
    ((void (*)(void *))v12[2])(v12);
  }
}

void sub_1001F4B7C(uint64_t a1)
{
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v2 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) objectForKey:*(void *)(a1 + 64)];
    uint64_t v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init((Class)NSMutableSet);
    }
    id v11 = v4;

    uint64_t v5 = +[NSSet setWithArray:*(void *)(a1 + 56)];
    [v11 unionSet:v5];

    [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setObject:v11 forKey:*(void *)(a1 + 64)];
  }
  else
  {
    id v11 = 0;
  }
  if ([*(id *)(a1 + 72) count])
  {
    id v6 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) objectForKey:*(void *)(a1 + 64)];
    id v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = objc_alloc_init((Class)NSMutableSet);
    }
    id v9 = v8;

    id v10 = +[NSSet setWithArray:*(void *)(a1 + 72)];
    [v9 unionSet:v10];

    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setObject:v9 forKey:*(void *)(a1 + 64)];
    id v11 = v9;
  }
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 24));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

uint64_t sub_1001F4D00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001F4D10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
    {
      uint64_t v3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scheduling a follow up download of conflicting records to fault any missing properties.", buf, 2u);
      }

      uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      uint64_t v5 = *(void **)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 96);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1001F4E8C;
      v10[3] = &unk_10073F758;
      uint64_t v8 = *(void *)(a1 + 48);
      id v11 = *(id *)(a1 + 56);
      long long v12 = *(_OWORD *)(a1 + 72);
      [v5 fetchRecordsWithRecordIDsByDatabaseIdentifier:v4 operationGroupName:v6 operationGroupNameSuffix:v8 qualityOfService:v7 completion:v10];
    }
    else
    {
      id v9 = *(void (**)(void))(v2 + 16);
      v9();
    }
  }
}

uint64_t sub_1001F4E8C(void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(a1[4] + 16))(a1[4], *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40), a2, a3);
}

void sub_1001F5274(uint64_t a1)
{
  uint64_t v51 = 0;
  id v52 = &v51;
  uint64_t v53 = 0x2020000000;
  uint64_t v54 = *(void *)(a1 + 104);
  id v2 = objc_alloc_init((Class)NSMutableSet);
  id v3 = objc_alloc_init((Class)CKQueryOperation);
  uint64_t v4 = +[CKOperationGroup pk_operationGroupWithName:*(void *)(a1 + 32)];
  [v3 setGroup:v4];

  [v3 setQualityOfService:*(void *)(a1 + 112)];
  uint64_t v5 = [*(id *)(a1 + 40) zoneID];
  [v3 setZoneID:v5];

  if (v52[3]) {
    NSUInteger v6 = v52[3];
  }
  else {
    NSUInteger v6 = CKQueryOperationMaximumResults;
  }
  v52[3] = v6;
  objc_msgSend(v3, "setResultsLimit:");
  uint64_t v7 = objc_opt_new();
  [v7 setDiscretionaryNetworkBehavior:0];
  [v3 setConfiguration:v7];
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8)
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v57 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fetching records with cursor: %@", buf, 0xCu);
    }

    [v3 setCursor:*(void *)(a1 + 48)];
LABEL_12:
    id v13 = [*(id *)(a1 + 56) predicate];
    uint64_t v14 = [v13 description];
    id v15 = v14;
    if (v14)
    {
      id v16 = v14;
    }
    else
    {
      id v16 = [*(id *)(a1 + 48) description];
    }
    uint64_t v17 = v16;

    uint64_t v18 = [*(id *)(a1 + 40) zoneID];
    id v19 = [v18 zoneName];

    if (v19)
    {
      uint64_t v55 = v19;
      id v20 = +[NSArray arrayWithObjects:&v55 count:1];
    }
    else
    {
      id v20 = 0;
    }
    uint64_t v21 = [*(id *)(a1 + 64) reportContainerChangeIntervalBeginEventWithType:31 stateName:v17 objectNames:v20 operationGroupName:*(void *)(a1 + 32) operationGroupNameSuffix:*(void *)(a1 + 72)];
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_1001F57DC;
    v46[3] = &unk_10073E808;
    v46[4] = *(void *)(a1 + 64);
    id v22 = v2;
    id v47 = v22;
    id v23 = v17;
    id v48 = v23;
    id v49 = *(id *)(a1 + 32);
    id v50 = *(id *)(a1 + 72);
    [v3 setRecordFetchedBlock:v46];
    uint64_t v30 = _NSConcreteStackBlock;
    uint64_t v31 = 3221225472;
    id v32 = sub_1001F5A24;
    uint64_t v33 = &unk_10073F848;
    uint64_t v34 = *(void *)(a1 + 64);
    id v35 = v22;
    id v36 = *(id *)(a1 + 80);
    id v42 = *(id *)(a1 + 96);
    id v24 = v21;
    id v37 = v24;
    id v38 = *(id *)(a1 + 56);
    id v39 = *(id *)(a1 + 40);
    uint64_t v44 = &v51;
    id v40 = *(id *)(a1 + 32);
    id v25 = *(id *)(a1 + 72);
    uint64_t v26 = *(void *)(a1 + 112);
    id v41 = v25;
    uint64_t v45 = v26;
    id v43 = *(id *)(a1 + 88);
    [v3 setQueryCompletionBlock:&v30];
    id v27 = *(void **)(a1 + 64);
    uint64_t v28 = objc_msgSend(*(id *)(a1 + 80), "database", v30, v31, v32, v33, v34);
    objc_msgSend(v27, "_queue_addOperation:forDatabase:", v3, v28);

    goto LABEL_19;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  id v11 = PKLogFacilityTypeGetObject();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v57 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Fetching records with query: %@", buf, 0xCu);
    }

    [v3 setQuery:*(void *)(a1 + 56)];
    goto LABEL_12;
  }
  if (v12)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error: cannot fetch records with no query or cursor defined", buf, 2u);
  }

  uint64_t v29 = *(void *)(a1 + 88);
  if (v29) {
    (*(void (**)(uint64_t, void))(v29 + 16))(v29, 0);
  }
LABEL_19:

  _Block_object_dispose(&v51, 8);
}

void sub_1001F57A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_1001F57DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001F58D8;
  v6[3] = &unk_100736010;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1001F58D8(uint64_t a1)
{
  [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 40) recordID];
  id v3 = +[NSString stringWithFormat:@"Fetched recordID from query %@", v2];

  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id v5 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v8 = v3;
  id v7 = +[NSArray arrayWithObjects:&v8 count:1];
  [v5 reportContainerChangeSignpostEventType:31 stateName:v6 objectNames:v7 changeToken:0 error:0 operationGroupName:*(void *)(a1 + 64) operationGroupNameSuffix:*(void *)(a1 + 72)];
}

void sub_1001F5A24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1001F5BB8;
  v16[3] = &unk_10073F820;
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 32);
  id v27 = v8;
  uint64_t v19 = v9;
  id v20 = *(id *)(a1 + 56);
  id v21 = v5;
  id v22 = *(id *)(a1 + 64);
  id v10 = *(id *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 112);
  id v23 = v10;
  uint64_t v29 = v11;
  id v24 = *(id *)(a1 + 80);
  id v12 = *(id *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 120);
  id v25 = v12;
  uint64_t v30 = v13;
  id v28 = *(id *)(a1 + 104);
  id v26 = v6;
  id v14 = v6;
  id v15 = v5;
  dispatch_async(v7, v16);
}

void sub_1001F5BB8(uint64_t a1)
{
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1001F5ECC;
  v23[3] = &unk_10073F7F8;
  id v24 = *(id *)(a1 + 32);
  id v25 = *(id *)(a1 + 40);
  id v2 = *(id *)(a1 + 112);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void **)(a1 + 56);
  id v33 = v2;
  uint64_t v26 = v3;
  id v27 = v4;
  id v28 = *(id *)(a1 + 64);
  id v29 = *(id *)(a1 + 72);
  id v5 = *(id *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 128);
  id v30 = v5;
  uint64_t v35 = v6;
  id v31 = *(id *)(a1 + 88);
  id v7 = *(id *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 136);
  id v32 = v7;
  uint64_t v36 = v8;
  id v34 = *(id *)(a1 + 120);
  uint64_t v9 = objc_retainBlock(v23);
  id v10 = (void (**)(void, void))v9;
  if (*(void *)(a1 + 104))
  {
    id v11 = [objc_alloc((Class)PKCloudStoreError) initWithError:*(void *)(a1 + 104)];
    if ([v11 isUnknownItemError])
    {
      v10[2](v10, 0);
    }
    else
    {
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 104);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v38 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Error fetch items %@", buf, 0xCu);
      }

      id v14 = *(void **)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 104);
      id v16 = [*(id *)(a1 + 80) zoneID];
      id v17 = [*(id *)(a1 + 40) identifier];
      uint64_t v18 = *(void *)(a1 + 88);
      uint64_t v19 = *(void *)(a1 + 96);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1001F6280;
      v20[3] = &unk_100736EF0;
      id v22 = v10;
      id v21 = *(id *)(a1 + 104);
      objc_msgSend(v14, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v15, v16, v17, v18, v19, v20);
    }
  }
  else
  {
    ((void (*)(void *, void))v9[2])(v9, 0);
  }
}

void sub_1001F5ECC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = [*(id *)(a1 + 40) identifier];
    [v4 setObject:v5 forKey:v6];
  }
  uint64_t v7 = *(void *)(a1 + 104);
  id v8 = [v4 copy];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001F60AC;
  v18[3] = &unk_10073F7D0;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = *(void **)(a1 + 56);
  id v19 = v9;
  uint64_t v20 = v10;
  id v21 = v11;
  id v22 = v3;
  id v23 = *(id *)(a1 + 64);
  id v24 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 120);
  id v25 = v12;
  uint64_t v31 = v13;
  id v26 = *(id *)(a1 + 88);
  id v14 = *(id *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 128);
  id v27 = v14;
  uint64_t v32 = v15;
  id v28 = *(id *)(a1 + 40);
  id v29 = *(id *)(a1 + 104);
  id v30 = *(id *)(a1 + 112);
  id v16 = *(void (**)(uint64_t, id, void *))(v7 + 16);
  id v17 = v3;
  v16(v7, v8, v18);
}

uint64_t (**sub_1001F60AC(uint64_t a1, int a2))(id, void)
{
  id v4 = [*(id *)(a1 + 32) count];
  [*(id *)(a1 + 32) removeAllObjects];
  [*(id *)(a1 + 40) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = PKLogFacilityTypeGetObject();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5 && a2)
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 72);
      id v9 = [*(id *)(a1 + 80) zoneID];
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 138413058;
      uint64_t v15 = v8;
      __int16 v16 = 2112;
      id v17 = v9;
      __int16 v18 = 2048;
      id v19 = v4;
      __int16 v20 = 2112;
      uint64_t v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fetching of records not complete for query %@, in zone %@. Fetched %ld in batch.  Continuing fetching records with cursor: %@", buf, 0x2Au);
    }
    return (uint64_t (**)(id, void))[*(id *)(a1 + 40) _fetchRecordsWithQuery:0 cursor:*(void *)(a1 + 64) batchLimit:*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) operationGroupName:*(void *)(a1 + 88) operationGroupNameSuffix:*(void *)(a1 + 96) qualityOfService:*(void *)(a1 + 136) zone:*(void *)(a1 + 80) containerDatabase:*(void *)(a1 + 104) batchHandler:*(void *)(a1 + 112) completion:*(void *)(a1 + 120)];
  }
  else
  {
    if (v7)
    {
      uint64_t v12 = *(void *)(a1 + 72);
      uint64_t v13 = [*(id *)(a1 + 80) zoneID];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v15 = v12;
      __int16 v16 = 2112;
      id v17 = v13;
      __int16 v18 = 2048;
      id v19 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fetching records complete for query %@. In zone %@. Records fetched: %ld", buf, 0x20u);
    }
    id result = *(uint64_t (***)(id, void))(a1 + 120);
    if (result) {
      return (uint64_t (**)(id, void))result[2](result, *(void *)(a1 + 56));
    }
  }
  return result;
}

uint64_t sub_1001F6280(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1001F6434(id *a1)
{
  group = dispatch_group_create();
  v55[0] = 0;
  v55[1] = v55;
  v55[2] = 0x3032000000;
  v55[3] = sub_1000209BC;
  void v55[4] = sub_100020FD0;
  id v56 = objc_alloc_init((Class)NSMutableDictionary);
  v53[0] = 0;
  v53[1] = v53;
  v53[2] = 0x3032000000;
  v53[3] = sub_1000209BC;
  v53[4] = sub_100020FD0;
  id v54 = objc_alloc_init((Class)NSMutableDictionary);
  v51[0] = 0;
  v51[1] = v51;
  v51[2] = 0x3032000000;
  v51[3] = sub_1000209BC;
  v51[4] = sub_100020FD0;
  id v52 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id obj = a1[4];
  id v29 = [obj countByEnumeratingWithState:&v47 objects:v59 count:16];
  if (v29)
  {
    uint64_t v26 = PKCloudStoreOperationGroupResetSync;
    uint64_t v27 = *(void *)v48;
    uint64_t v25 = PKCloudStoreOperationGroupInitialSetup;
    do
    {
      for (uint64_t i = 0; i != v29; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v48 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v2 = *(void *)(*((void *)&v47 + 1) + 8 * i);
        uint64_t v32 = [a1[5] objectForKey:v2];
        id v3 = [a1[6] objectForKey:v2];
        id v4 = objc_alloc((Class)CKModifySubscriptionsOperation);
        uint64_t v5 = [v32 allObjects];
        uint64_t v6 = [v3 allObjects];
        id v7 = [v4 initWithSubscriptionsToSave:v5 subscriptionIDsToDelete:v6];

        if ([v3 count]) {
          uint64_t v8 = v26;
        }
        else {
          uint64_t v8 = v25;
        }
        id v30 = +[CKOperationGroup pk_operationGroupWithName:v8 suffix:a1[7]];
        [v7 setGroup:v30];
        [v7 setQualityOfService:17];
        id v9 = objc_opt_new();
        [v9 setDiscretionaryNetworkBehavior:0];
        [v7 setConfiguration:v9];
        uint64_t v10 = [v32 allObjects];
        id v11 = objc_msgSend(v10, "pk_createArrayBySafelyApplyingBlock:", &stru_10073F8B0);

        if ([v11 count])
        {
          uint64_t v12 = [a1[8] reportContainerChangeIntervalBeginEventWithType:10 stateName:0 objectNames:v11 operationGroupName:0 operationGroupNameSuffix:a1[7]];
        }
        else
        {
          uint64_t v12 = 0;
        }
        if ([v3 count])
        {
          id v13 = a1[8];
          id v14 = [v3 allObjects];
          uint64_t v15 = [v13 reportContainerChangeIntervalBeginEventWithType:11 stateName:0 objectNames:v14 operationGroupName:0 operationGroupNameSuffix:a1[7]];
        }
        else
        {
          uint64_t v15 = 0;
        }
        __int16 v16 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v58 = v32;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Creating subscriptions %@", buf, 0xCu);
        }

        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v58 = v3;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Deleting subscriptions %@", buf, 0xCu);
        }

        dispatch_group_enter(group);
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_1001F6AF0;
        v38[3] = &unk_10073F928;
        v38[4] = a1[8];
        uint64_t v44 = v51;
        id v17 = v12;
        id v39 = v17;
        id v18 = v15;
        id v40 = v18;
        id v41 = group;
        uint64_t v42 = v2;
        uint64_t v45 = v55;
        uint64_t v46 = v53;
        id v43 = a1[7];
        [v7 setModifySubscriptionsCompletionBlock:v38];
        id v19 = a1;
        __int16 v20 = [*((id *)a1[8] + 19) databaseForIdentifier:v2];
        id v21 = a1[8];
        id v22 = [v20 database];
        objc_msgSend(v21, "_queue_addOperation:forDatabase:", v7, v22);

        a1 = v19;
      }
      id v29 = [obj countByEnumeratingWithState:&v47 objects:v59 count:16];
    }
    while (v29);
  }

  id v23 = *((void *)a1[8] + 20);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F6F7C;
  block[3] = &unk_100737D18;
  id v34 = a1[9];
  uint64_t v35 = v55;
  uint64_t v36 = v53;
  id v37 = v51;
  dispatch_group_notify(group, v23, block);

  _Block_object_dispose(v51, 8);
  _Block_object_dispose(v53, 8);

  _Block_object_dispose(v55, 8);
}

void sub_1001F6A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

id sub_1001F6AE8(id a1, CKSubscription *a2)
{
  return [(CKSubscription *)a2 subscriptionID];
}

void sub_1001F6AF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1001F6C48;
  v17[3] = &unk_10073F900;
  uint64_t v27 = *(void *)(a1 + 80);
  id v18 = v9;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v19 = v11;
  uint64_t v20 = v12;
  id v21 = *(id *)(a1 + 48);
  id v22 = *(id *)(a1 + 56);
  id v23 = v7;
  id v13 = *(void **)(a1 + 72);
  uint64_t v24 = *(void *)(a1 + 64);
  id v25 = v8;
  long long v28 = *(_OWORD *)(a1 + 88);
  id v26 = v13;
  id v14 = v8;
  id v15 = v7;
  id v16 = v9;
  dispatch_async(v10, v17);
}

void sub_1001F6C48(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8);
  uint64_t v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v6 error:*(void *)(a1 + 32)];
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v7 error:*(void *)(a1 + 32)];
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1001F6DFC;
  v21[3] = &unk_10073F8D8;
  id v22 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  uint64_t v26 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void **)(a1 + 88);
  id v23 = v8;
  uint64_t v24 = v9;
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 120);
  id v25 = v11;
  uint64_t v27 = v12;
  id v13 = objc_retainBlock(v21);
  id v14 = v13;
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    id v16 = *(void **)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = *(void *)(a1 + 96);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_1001F6F6C;
    void v19[3] = &unk_10072E570;
    uint64_t v20 = v13;
    objc_msgSend(v16, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v15, 0, v17, 0, v18, v19);
  }
  else
  {
    ((void (*)(void *))v13[2])(v13);
  }
}

void sub_1001F6DFC(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v2 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) objectForKey:*(void *)(a1 + 48)];
    id v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init((Class)NSMutableSet);
    }
    id v12 = v4;

    uint64_t v5 = +[NSSet setWithArray:*(void *)(a1 + 40)];
    [v12 unionSet:v5];

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v12 forKey:*(void *)(a1 + 48)];
  }
  else
  {
    id v12 = 0;
  }
  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v6 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) objectForKey:*(void *)(a1 + 48)];
    uint64_t v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = objc_alloc_init((Class)NSMutableSet);
    }
    uint64_t v10 = v8;

    id v11 = +[NSSet setWithArray:*(void *)(a1 + 56)];
    [v10 unionSet:v11];

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v10 forKey:*(void *)(a1 + 48)];
    uint64_t v9 = v10;
  }
  else
  {
    uint64_t v9 = v12;
  }
}

uint64_t sub_1001F6F6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001F6F7C(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))(result, *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40), *(void *)(*(void *)(a1[7] + 8) + 40));
  }
  return result;
}

void sub_1001F7348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1001F7368(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  id v8 = *(void **)(v5 + 40);
  uint64_t v6 = (id *)(v5 + 40);
  uint64_t v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = a3;
  }
  objc_storeStrong(v6, v9);
  id v10 = a3;
  id v11 = [*(id *)(*(void *)(a1 + 32) + 152) subscriptionIdentifiersForDatabaseZoneIDs:*(void *)(a1 + 40)];
  id v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1001F7460;
  v16[3] = &unk_10073F950;
  long long v15 = *(_OWORD *)(a1 + 56);
  id v14 = (id)v15;
  long long v17 = v15;
  [v12 _deleteSubscriptions:v11 operationGroupNameSuffix:v13 completion:v16];
}

void sub_1001F7460(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v5 + 40);
  uint64_t v6 = (id *)(v5 + 40);
  uint64_t v7 = v8;
  id v10 = v4;
  if (v8) {
    id v4 = v7;
  }
  objc_storeStrong(v6, v4);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
}

void sub_1001F771C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001F77FC;
  v12[3] = &unk_100730C10;
  id v13 = v7;
  id v14 = v6;
  id v9 = *(id *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = v9;
  id v10 = v6;
  id v11 = v7;
  dispatch_async(v8, v12);
}

uint64_t sub_1001F77FC(uint64_t a1)
{
  if (*(void *)(a1 + 32) || ![*(id *)(a1 + 40) count])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unable to delete record zones due to error: %@", buf, 0xCu);
    }

    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(result + 16);
      return v5();
    }
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully deleted zones %@", buf, 0xCu);
    }

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001F799C;
    v9[3] = &unk_10072F3A0;
    id v8 = *(void **)(a1 + 40);
    void v9[4] = *(void *)(a1 + 48);
    [v8 enumerateKeysAndObjectsUsingBlock:v9];
    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(result + 16);
      return v5();
    }
  }
  return result;
}

id sub_1001F799C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveZoneIDs:a3];
}

void sub_1001F7B44(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001F7C24;
  v12[3] = &unk_100730C10;
  id v13 = v7;
  id v14 = v6;
  id v9 = *(id *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = v9;
  id v10 = v6;
  id v11 = v7;
  dispatch_async(v8, v12);
}

uint64_t sub_1001F7C24(uint64_t a1)
{
  if (*(void *)(a1 + 32) || ![*(id *)(a1 + 40) count])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Failed to delete zone subscriptions with error %@", buf, 0xCu);
    }

    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(result + 16);
      return v5();
    }
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully deleted zone subscriptions %@", buf, 0xCu);
    }

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1001F7DC4;
    v9[3] = &unk_10072F3A0;
    id v8 = *(void **)(a1 + 40);
    void v9[4] = *(void *)(a1 + 48);
    [v8 enumerateKeysAndObjectsUsingBlock:v9];
    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      uint64_t v5 = *(uint64_t (**)(void))(result + 16);
      return v5();
    }
  }
  return result;
}

id sub_1001F7DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didRemoveSubscriptionIdentifiers:a3];
}

void sub_1001F7F78(id *a1)
{
  group = dispatch_group_create();
  uint64_t v71 = 0;
  uint64_t v72 = &v71;
  uint64_t v73 = 0x3032000000;
  id v74 = sub_1000209BC;
  id v75 = sub_100020FD0;
  id v76 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v65 = 0;
  id v66 = &v65;
  uint64_t v67 = 0x3032000000;
  uint64_t v68 = sub_1000209BC;
  uint64_t v69 = sub_100020FD0;
  id v70 = objc_alloc_init((Class)NSMutableDictionary);
  v63[0] = 0;
  v63[1] = v63;
  v63[2] = 0x3032000000;
  v63[3] = sub_1000209BC;
  void v63[4] = sub_100020FD0;
  id v64 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id obj = a1[4];
  id v2 = [obj countByEnumeratingWithState:&v59 objects:v81 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v60;
    uint64_t v35 = PKCloudStoreOperationGroupInitialSetup;
    uint64_t v36 = PKCloudStoreOperationGroupResetSync;
    *(void *)&long long v3 = 138412546;
    long long v34 = v3;
    do
    {
      for (uint64_t i = 0; i != v2; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v60 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v59 + 1) + 8 * i);
        id v43 = objc_msgSend(a1[5], "objectForKey:", v6, v34);
        uint64_t v44 = [a1[6] objectForKey:v6];
        uint64_t v42 = [*((id *)a1[7] + 19) databaseForIdentifier:v6];
        if ([v42 scope] == (id)3)
        {
          uint64_t v7 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = v34;
            uint64_t v78 = v43;
            __int16 v79 = 2112;
            uint64_t v80 = v44;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting to save or delete zones in a shared container. Zones trying to create %@. Zones trying to delete %@.", buf, 0x16u);
          }

          if ([v43 count])
          {
            id v8 = [(id)v72[5] objectForKey:v6];
            id v9 = v8;
            if (v8) {
              id v10 = v8;
            }
            else {
              id v10 = objc_alloc_init((Class)NSMutableSet);
            }
            id v13 = v10;

            [v13 unionSet:v43];
            [(id)v72[5] setObject:v13 forKey:v6];
          }
          else
          {
            id v13 = 0;
          }
          if ([v44 count])
          {
            id v30 = [(id)v66[5] objectForKey:v6];
            uint64_t v31 = v30;
            if (v30) {
              id v32 = v30;
            }
            else {
              id v32 = objc_alloc_init((Class)NSMutableSet);
            }
            id v29 = v32;

            [v29 unionSet:v44];
            [(id)v66[5] setObject:v29 forKey:v6];
          }
          else
          {
            id v29 = v13;
          }
        }
        else
        {
          uint64_t v11 = [v43 allObjects];
          id v41 = objc_msgSend(v11, "pk_createArrayBySafelyApplyingBlock:", &stru_10073F9B8);

          if ([v41 count])
          {
            id v12 = [a1[7] reportContainerChangeIntervalBeginEventWithType:7 stateName:0 objectNames:v41 operationGroupName:0 operationGroupNameSuffix:a1[8]];
          }
          else
          {
            id v12 = 0;
          }
          id v14 = [v44 allObjects];
          id v40 = objc_msgSend(v14, "pk_createArrayBySafelyApplyingBlock:", &stru_10073F9F8);

          if ([v40 count])
          {
            uint64_t v15 = [a1[7] reportContainerChangeIntervalBeginEventWithType:8 stateName:0 objectNames:v40 operationGroupName:0 operationGroupNameSuffix:a1[8]];
          }
          else
          {
            uint64_t v15 = 0;
          }
          id v16 = objc_alloc((Class)CKModifyRecordZonesOperation);
          long long v17 = [v43 allObjects];
          uint64_t v18 = [v44 allObjects];
          id v19 = [v16 initWithRecordZonesToSave:v17 recordZoneIDsToDelete:v18];

          if ([v44 count]) {
            uint64_t v20 = v36;
          }
          else {
            uint64_t v20 = v35;
          }
          id v39 = +[CKOperationGroup pk_operationGroupWithName:v20 suffix:a1[8]];
          [v19 setGroup:v39];
          [v19 setQualityOfService:17];
          uint64_t v21 = v4;
          id v22 = v2;
          id v23 = a1;
          uint64_t v24 = objc_opt_new();
          [v24 setDiscretionaryNetworkBehavior:0];
          [v19 setConfiguration:v24];
          dispatch_group_enter(group);
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_1001F8768;
          v50[3] = &unk_10073F928;
          void v50[4] = a1[7];
          id v56 = v63;
          id v25 = v12;
          id v51 = v25;
          id v26 = v15;
          id v52 = v26;
          uint64_t v53 = group;
          uint64_t v54 = v6;
          uint64_t v57 = &v71;
          uint64_t v58 = &v65;
          id v55 = a1[8];
          [v19 setModifyRecordZonesCompletionBlock:v50];
          id v27 = a1[7];
          long long v28 = [v42 database];
          objc_msgSend(v27, "_queue_addOperation:forDatabase:", v19, v28);

          a1 = v23;
          id v2 = v22;
          uint64_t v4 = v21;

          id v29 = v41;
        }
      }
      id v2 = [obj countByEnumeratingWithState:&v59 objects:v81 count:16];
    }
    while (v2);
  }

  id v33 = *((void *)a1[7] + 20);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F8C78;
  block[3] = &unk_100737D18;
  id v46 = a1[9];
  long long v47 = &v71;
  long long v48 = &v65;
  long long v49 = v63;
  dispatch_group_notify(group, v33, block);

  _Block_object_dispose(v63, 8);
  _Block_object_dispose(&v65, 8);

  _Block_object_dispose(&v71, 8);
}

void sub_1001F869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

id sub_1001F8710(id a1, CKRecordZone *a2)
{
  id v2 = [(CKRecordZone *)a2 zoneID];
  long long v3 = [v2 zoneName];

  return v3;
}

id sub_1001F8760(id a1, CKRecordZoneID *a2)
{
  return [(CKRecordZoneID *)a2 zoneName];
}

void sub_1001F8768(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(NSObject **)(*(void *)(a1 + 32) + 160);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1001F88C0;
  v17[3] = &unk_10073F900;
  uint64_t v27 = *(void *)(a1 + 80);
  id v18 = v9;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  id v19 = v11;
  uint64_t v20 = v12;
  id v21 = *(id *)(a1 + 48);
  id v22 = *(id *)(a1 + 56);
  id v23 = v7;
  id v13 = *(void **)(a1 + 72);
  uint64_t v24 = *(void *)(a1 + 64);
  id v25 = v8;
  long long v28 = *(_OWORD *)(a1 + 88);
  id v26 = v13;
  id v14 = v8;
  id v15 = v7;
  id v16 = v9;
  dispatch_async(v10, v17);
}

void sub_1001F88C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 104) + 8);
  uint64_t v5 = *(void **)(v2 + 40);
  long long v3 = (id *)(v2 + 40);
  uint64_t v4 = v5;
  if (!v5) {
    uint64_t v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v6 error:*(void *)(a1 + 32)];
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    [*(id *)(a1 + 48) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:v7 error:*(void *)(a1 + 32)];
  }
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1001F8AF8;
  v23[3] = &unk_10073F8D8;
  id v24 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  uint64_t v28 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 80);
  id v10 = *(void **)(a1 + 88);
  id v25 = v8;
  uint64_t v26 = v9;
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 120);
  id v27 = v11;
  uint64_t v29 = v12;
  id v13 = objc_retainBlock(v23);
  id v14 = v13;
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    id v16 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v31 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Could not create or delete zones with error %@", buf, 0xCu);
    }

    long long v17 = *(void **)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 80);
    uint64_t v20 = *(void *)(a1 + 96);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1001F8C68;
    v21[3] = &unk_10072E570;
    id v22 = v14;
    objc_msgSend(v17, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v18, 0, v19, 0, v20, v21);
  }
  else
  {
    ((void (*)(void *))v13[2])(v13);
  }
}

void sub_1001F8AF8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  if ([*(id *)(a1 + 40) count])
  {
    uint64_t v2 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) objectForKey:*(void *)(a1 + 48)];
    long long v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    else {
      id v4 = objc_alloc_init((Class)NSMutableSet);
    }
    id v12 = v4;

    uint64_t v5 = +[NSSet setWithArray:*(void *)(a1 + 40)];
    [v12 unionSet:v5];

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setObject:v12 forKey:*(void *)(a1 + 48)];
  }
  else
  {
    id v12 = 0;
  }
  if ([*(id *)(a1 + 56) count])
  {
    uint64_t v6 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) objectForKey:*(void *)(a1 + 48)];
    uint64_t v7 = v6;
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = objc_alloc_init((Class)NSMutableSet);
    }
    id v10 = v8;

    id v11 = +[NSSet setWithArray:*(void *)(a1 + 56)];
    [v10 unionSet:v11];

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setObject:v10 forKey:*(void *)(a1 + 48)];
    uint64_t v9 = v10;
  }
  else
  {
    uint64_t v9 = v12;
  }
}

uint64_t sub_1001F8C68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001F8C78(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    id v4 = [*(id *)(*(void *)(a1[5] + 8) + 40) copy];
    id v3 = [*(id *)(*(void *)(a1[6] + 8) + 40) copy];
    (*(void (**)(uint64_t, id, id, void))(v1 + 16))(v1, v4, v3, *(void *)(*(void *)(a1[7] + 8) + 40));
  }
}

void sub_1001F9094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001F90AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 160);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001F91A8;
  v12[3] = &unk_10073FA48;
  uint64_t v9 = *(void *)(a1 + 56);
  id v13 = v6;
  uint64_t v14 = v7;
  uint64_t v18 = v9;
  id v15 = v5;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_1001F91A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 72) + 8);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  uint64_t v7 = *(void **)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001F9288;
  v11[3] = &unk_10073FA20;
  uint64_t v15 = *(void *)(a1 + 72);
  id v9 = v6;
  uint64_t v10 = *(void *)(a1 + 40);
  id v12 = v9;
  uint64_t v13 = v10;
  id v14 = *(id *)(a1 + 64);
  objc_msgSend(v7, "_queue_createZonesByDatabaseIdentifier:shouldFetchData:operationGroupNameSuffix:completion:", v9, 0, v8, v11);
}

void sub_1001F9288(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v8 = *(void **)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  uint64_t v7 = v8;
  if (v8) {
    id v9 = v7;
  }
  else {
    id v9 = v4;
  }
  objc_storeStrong(v6, v9);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_1001F9420;
  void v19[3] = &unk_10072F3A0;
  uint64_t v10 = *(void **)(a1 + 32);
  void v19[4] = *(void *)(a1 + 40);
  [v10 enumerateKeysAndObjectsUsingBlock:v19];
  id v11 = [*(id *)(*(void *)(a1 + 40) + 152) databaseForScope:3];
  if (v11)
  {
    id v12 = [*(id *)(*(void *)(a1 + 40) + 152) zonesThatNeedToBeCreated];
    uint64_t v13 = [v11 identifier];
    id v14 = [v12 objectForKey:v13];
    id v15 = [v14 count];

    if (v15)
    {
      id v16 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "The device is missing a zone share. Ensuring zone integrity now.", (uint8_t *)&v18, 2u);
      }

      [*(id *)(a1 + 40) ensureZoneShareIntegrity];
    }
  }
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17) {
    (*(void (**)(uint64_t, void))(v17 + 16))(v17, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
}

id sub_1001F9420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) containerDatabaseIdentifier:a2 didCreateZones:a3];
}

void sub_1001F9518(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetching all Record Zones in database %@", (uint8_t *)&buf, 0xCu);
  }

  id v4 = dispatch_group_create();
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v43 = 0x3032000000;
  uint64_t v44 = sub_1000209BC;
  uint64_t v45 = sub_100020FD0;
  id v46 = objc_alloc_init((Class)NSMutableDictionary);
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x3032000000;
  v38[3] = sub_1000209BC;
  v38[4] = sub_100020FD0;
  id v39 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id obj = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
  if (v5)
  {
    uint64_t v22 = *(void *)v35;
    uint64_t v21 = PKCloudStoreOperationGroupInitialSetup;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v35 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(a1 + 40);
        uint64_t v40 = *(void *)(*((void *)&v34 + 1) + 8 * (void)v6);
        uint64_t v7 = v40;
        id v9 = +[NSArray arrayWithObjects:&v40 count:1];
        uint64_t v10 = [v8 reportContainerChangeIntervalBeginEventWithType:32 stateName:0 objectNames:v9 operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 48)];

        id v11 = +[CKFetchRecordZonesOperation fetchAllRecordZonesOperation];
        id v12 = +[CKOperationGroup pk_operationGroupWithName:v21 suffix:*(void *)(a1 + 48)];
        [v11 setGroup:v12];

        [v11 setQualityOfService:17];
        uint64_t v13 = objc_opt_new();
        [v13 setDiscretionaryNetworkBehavior:0];
        [v11 setConfiguration:v13];
        dispatch_group_enter(v4);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_1001F99C0;
        v27[3] = &unk_10073FAE8;
        void v27[4] = *(void *)(a1 + 40);
        id v32 = v38;
        id v14 = v10;
        id v28 = v14;
        id v15 = v4;
        p_long long buf = &buf;
        uint64_t v29 = v15;
        uint64_t v30 = v7;
        id v31 = *(id *)(a1 + 48);
        [v11 setFetchRecordZonesCompletionBlock:v27];
        id v16 = [*(id *)(*(void *)(a1 + 40) + 152) databaseForIdentifier:v7];
        uint64_t v17 = *(void **)(a1 + 40);
        __int16 v18 = [v16 database];
        objc_msgSend(v17, "_queue_addOperation:forDatabase:", v11, v18);

        id v6 = (char *)v6 + 1;
      }
      while (v5 != v6);
      id v5 = [obj countByEnumeratingWithState:&v34 objects:v41 count:16];
    }
    while (v5);
  }

  uint64_t v19 = *(NSObject **)(*(void *)(a1 + 40) + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F9FD4;
  block[3] = &unk_10073EB00;
  id v24 = *(id *)(a1 + 56);
  id v25 = &buf;
  uint64_t v26 = v38;
  dispatch_group_notify(v4, v19, block);

  _Block_object_dispose(v38, 8);
  _Block_object_dispose(&buf, 8);
}

void sub_1001F997C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001F99C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001F9AD8;
  block[3] = &unk_10073FAC0;
  uint64_t v21 = *(void *)(a1 + 72);
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v18 = v5;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void **)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 80);
  uint64_t v19 = v9;
  id v20 = v10;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, block);
}

void sub_1001F9AD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 88) + 8);
  id v5 = *(void **)(v2 + 40);
  uint64_t v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 32);
  }
  objc_storeStrong(v3, v4);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1001F9CF4;
  v20[3] = &unk_10073FA98;
  id v6 = *(void **)(a1 + 48);
  void v20[4] = *(void *)(a1 + 40);
  id v21 = v6;
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void *)(a1 + 72);
  id v24 = v7;
  uint64_t v25 = v9;
  uint64_t v26 = v8;
  uint64_t v10 = objc_retainBlock(v20);
  id v11 = v10;
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    uint64_t v13 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v28 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Could not fetch record zones with error %@", buf, 0xCu);
    }

    uint64_t v15 = *(void *)(a1 + 32);
    id v14 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 72);
    uint64_t v16 = *(void *)(a1 + 80);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1001F9FC4;
    v18[3] = &unk_10072E570;
    id v19 = v11;
    objc_msgSend(v14, "_queue_processOperationError:forZoneID:containerDatabaseIdentifier:operationGroupName:operationGroupNameSuffix:completion:", v15, 0, v17, 0, v16, v18);
  }
  else
  {
    ((void (*)(void *))v10[2])(v10);
  }
}

void sub_1001F9CF4(uint64_t a1)
{
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sucessfully fetched record zones %@", buf, 0xCu);
  }

  id v4 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  id v5 = objc_alloc((Class)NSSet);
  id v6 = [*(id *)(a1 + 64) allValues];
  id v7 = [v5 initWithArray:v6];
  [v4 setObject:v7 forKey:*(void *)(a1 + 72)];

  id v8 = [objc_alloc((Class)CKRecordZoneID) initWithZoneName:CKRecordZoneDefaultName ownerName:CKCurrentUserDefaultName];
  id v9 = [*(id *)(a1 + 64) mutableCopy];
  [v9 removeObjectForKey:v8];
  uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  id v11 = [v9 allValues];
  uint64_t v12 = +[NSSet setWithArray:v11];
  [v10 setObject:v12 forKey:*(void *)(a1 + 72)];

  id v13 = objc_alloc_init((Class)NSMutableSet);
  id v14 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1001F9F64;
  v18[3] = &unk_10072F3A0;
  id v15 = v13;
  id v19 = v15;
  [v14 enumerateKeysAndObjectsUsingBlock:v18];
  if ([v15 count])
  {
    uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    uint64_t v17 = [v15 allObjects];
    [v16 removeObjectsForKeys:v17];
  }
}

void sub_1001F9F64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (![a3 count]) {
    [*(id *)(a1 + 32) addObject:v5];
  }
}

uint64_t sub_1001F9FC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001F9FD4(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1001FA15C(uint64_t a1)
{
  dispatch_group_t v2 = dispatch_group_create();
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x3032000000;
  v14[3] = sub_1000209BC;
  void v14[4] = sub_100020FD0;
  id v15 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001FA2F0;
  v10[3] = &unk_10073FB60;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 48);
  void v10[4] = *(void *)(a1 + 40);
  id v11 = v4;
  id v5 = v2;
  uint64_t v12 = v5;
  id v13 = v14;
  [v3 enumerateKeysAndObjectsUsingBlock:v10];
  id v6 = *(NSObject **)(*(void *)(a1 + 40) + 160);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1001FA81C;
  v7[3] = &unk_100736600;
  id v8 = *(id *)(a1 + 56);
  id v9 = v14;
  dispatch_group_notify(v5, v6, v7);

  _Block_object_dispose(v14, 8);
}

void sub_1001FA2D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001FA2F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fetching all subscriptions in database %@", buf, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  id v27 = v3;
  id v6 = +[NSArray arrayWithObjects:&v27 count:1];
  id v7 = [v5 reportContainerChangeIntervalBeginEventWithType:12 stateName:0 objectNames:v6 operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 40)];

  id v8 = +[CKFetchSubscriptionsOperation fetchAllSubscriptionsOperation];
  id v9 = +[CKOperationGroup pk_operationGroupWithName:PKCloudStoreOperationGroupInitialSetup suffix:*(void *)(a1 + 40)];
  [v8 setGroup:v9];

  [v8 setQualityOfService:17];
  uint64_t v10 = objc_opt_new();
  [v10 setDiscretionaryNetworkBehavior:0];
  [v8 setConfiguration:v10];
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
  id v18 = _NSConcreteStackBlock;
  uint64_t v19 = 3221225472;
  id v20 = sub_1001FA568;
  uint64_t v21 = &unk_10073FB38;
  uint64_t v22 = *(void *)(a1 + 32);
  id v23 = v7;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  id v25 = v3;
  uint64_t v26 = v12;
  id v24 = v11;
  id v13 = v3;
  id v14 = v7;
  [v8 setFetchSubscriptionCompletionBlock:&v18];
  id v15 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 152), "databaseForIdentifier:", v13, v18, v19, v20, v21, v22);
  uint64_t v16 = *(void **)(a1 + 32);
  uint64_t v17 = [v15 database];
  objc_msgSend(v16, "_queue_addOperation:forDatabase:", v8, v17);
}

void sub_1001FA568(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FA678;
  block[3] = &unk_10073FB10;
  void block[4] = v7;
  id v14 = *(id *)(a1 + 40);
  id v15 = v6;
  id v16 = *(id *)(a1 + 48);
  id v17 = v5;
  long long v12 = *(_OWORD *)(a1 + 56);
  id v9 = (id)v12;
  long long v18 = v12;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

void sub_1001FA678(uint64_t a1)
{
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  uint64_t v2 = *(void *)(*(void *)(a1 + 80) + 8);
  id v5 = *(void **)(v2 + 40);
  id v3 = (id *)(v2 + 40);
  id v4 = v5;
  if (!v5) {
    id v4 = *(void **)(a1 + 48);
  }
  objc_storeStrong(v3, v4);
  id v6 = *(void **)(a1 + 64);
  if (v6 && !*(void *)(a1 + 48))
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully fetched subscriptions %@", (uint8_t *)&v12, 0xCu);
    }

    id v10 = *(void **)(*(void *)(a1 + 32) + 152);
    uint64_t v11 = *(void *)(a1 + 72);
    uint64_t v7 = [*(id *)(a1 + 64) allValues];
    id v8 = +[NSSet setWithArray:v7];
    [v10 containerDatabaseIdentifier:v11 didCreateSubscriptions:v8];
    goto LABEL_10;
  }
  uint64_t v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 48) debugDescription];
    int v12 = 138412290;
    id v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to fetch subscriptions with error %@", (uint8_t *)&v12, 0xCu);
LABEL_10:
  }
}

uint64_t sub_1001FA81C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

id sub_1001FAAD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:", *(void *)(*(void *)(a1 + 32) + 176), *(void *)(a1 + 40), *(void *)(a1 + 56) - 1, *(void *)(a1 + 48));
}

void sub_1001FAF7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FAFF0;
  block[3] = &unk_10072E1E8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_1001FAFF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136));
  [WeakRetained cloudStoreContainerShouldScheduleSetupActivity:*(void *)(a1 + 32)];
}

id sub_1001FB4E8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_cloudStoreInitializationTimerFired");
}

void sub_1001FC730(uint64_t a1)
{
  uint64_t v2 = *(double **)(a1 + 32);
  if (v2[4] == 0.0)
  {
    id v3 = [v2 _descriptors];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1001FC7F8;
    v5[3] = &unk_10073FC90;
    id v4 = *(void **)(a1 + 40);
    void v5[4] = *(void *)(a1 + 32);
    id v6 = v4;
    +[CCFullSetDonation fullSetDonationWithItemType:46120 descriptors:v3 completion:v5];
  }
}

void sub_1001FC7F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1001FC8D8;
  v11[3] = &unk_100730C10;
  id v12 = v6;
  id v13 = v5;
  id v8 = *(id *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = v8;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, v11);
}

void sub_1001FC8D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 || (uint64_t v4 = *(void *)(a1 + 40)) == 0)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Donation rejected with error: %@ ", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1001FCA18;
    v6[3] = &unk_1007378B8;
    id v5 = *(void **)(a1 + 48);
    id v7 = *(id *)(a1 + 56);
    [v5 _performFullSetDonation:v4 withCompletion:v6];
  }
}

uint64_t sub_1001FCA18(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_1001FCC20(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIDs];
  id v12 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x3032000000;
  v21[3] = sub_1000209CC;
  void v21[4] = sub_100020FD8;
  id v22 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = v2;
  id v3 = [obj countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v18;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v17 + 1) + 8 * (void)v5);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_1001FCEE0;
        v16[3] = &unk_100730730;
        void v16[4] = *(void *)(a1 + 32);
        void v16[5] = v6;
        v16[6] = v21;
        [v12 addOperation:v16];
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v17 objects:v23 count:16];
    }
    while (v3);
  }

  id v8 = +[NSNull null];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001FD03C;
  v13[3] = &unk_10073FCE0;
  uint64_t v9 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v9;
  id v15 = v21;
  id v10 = [v12 evaluateWithInput:v8 completion:v13];

  _Block_object_dispose(v21, 8);
}

void sub_1001FCEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1001FCEE0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [*(id *)(a1[4] + 16) passWithUniqueIdentifier:a1[5]];
  uint64_t v9 = (void *)a1[4];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1001FCFD0;
  v13[3] = &unk_1007307C0;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 removeSignalForPass:v8 completion:v13];
}

void sub_1001FCFD0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001FD03C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FD0D8;
  block[3] = &unk_10073FCB8;
  void block[4] = v2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_async(v3, block);
}

uint64_t sub_1001FD0D8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updateVersion:", 0.0);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

void sub_1001FD274(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updateVersion:", *(double *)(*(void *)(a1 + 32) + 32) + 1.0);
  uint64_t v2 = [*(id *)(a1 + 32) _descriptors];
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = (unint64_t)*(double *)(v3 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1001FD38C;
  v6[3] = &unk_10073FD30;
  uint64_t v5 = *(void *)(a1 + 64);
  void v6[4] = v3;
  uint64_t v10 = v5;
  id v7 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 48);
  +[CCIncrementalSetDonation incrementalSetDonationWithItemType:46120 descriptors:v2 version:v4 validity:@"passes" completion:v6];
}

void sub_1001FD38C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001FD4A0;
  block[3] = &unk_10073FD08;
  uint64_t v8 = *(void *)(a1 + 64);
  id v14 = v6;
  uint64_t v20 = v8;
  id v15 = *(id *)(a1 + 40);
  id v19 = *(id *)(a1 + 56);
  id v16 = v5;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v17 = v9;
  uint64_t v18 = v10;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, block);
}

void sub_1001FD4A0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 80);
      unint64_t v4 = [*(id *)(a1 + 40) uniqueID];
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134218498;
      uint64_t v24 = v3;
      __int16 v25 = 2112;
      uint64_t v26 = v4;
      __int16 v27 = 2112;
      uint64_t v28 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unable to start set donation action :%ld for pass: %@ error: %@", buf, 0x20u);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    return;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v6 = *(id *)(a1 + 48);
    id v7 = v6;
    uint64_t v8 = *(void *)(a1 + 80);
    if (v8 == 1)
    {
      uint64_t v18 = [*(id *)(a1 + 40) uniqueID];
      id v21 = 0;
      [v7 removeItemWithSourceItemIdentifier:v18 error:&v21];
      id v10 = v21;

      if (v10)
      {
LABEL_9:
        id v11 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 80);
          id v13 = [*(id *)(a1 + 40) uniqueID];
          uint64_t v14 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 134218498;
          uint64_t v24 = v12;
          __int16 v25 = 2112;
          uint64_t v26 = v13;
          __int16 v27 = 2112;
          uint64_t v28 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unable to perform set donation action :%ld for pass: %@ error: %@", buf, 0x20u);
        }
        [v7 cancel];
        goto LABEL_17;
      }
    }
    else if (!v8)
    {
      uint64_t v9 = *(void *)(a1 + 56);
      id v22 = 0;
      [v6 addOrUpdateItem:v9 error:&v22];
      id v10 = v22;
      if (v10) {
        goto LABEL_9;
      }
    }
    id v20 = 0;
    [v7 finish:&v20];
    id v10 = v20;
    if (!v10)
    {
LABEL_18:
      uint64_t v19 = *(void *)(a1 + 72);
      if (v19) {
        (*(void (**)(uint64_t, id))(v19 + 16))(v19, v10);
      }

      return;
    }
LABEL_17:
    objc_msgSend(*(id *)(a1 + 64), "_queue_updateVersion:", (double)(unint64_t)objc_msgSend(v7, "priorVersion"));
    goto LABEL_18;
  }
  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = *(void **)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  [v16 _performFullSetDonation:v15 withCompletion:v17];
}

void sub_1001FD834(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIDs];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [obj countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v2)
  {
    id v3 = v2;
    unint64_t v4 = 0;
    uint64_t v5 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v22 + 1) + 8 * i);
        uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 16) passWithUniqueIdentifier:v7];
        id v10 = *(void **)(a1 + 32);
        id v11 = [v9 allSemantics];
        uint64_t v12 = [v10 _createPassInstanceForPassUniqueID:v7 semantics:v11];

        if (v12)
        {
          id v13 = *(void **)(a1 + 40);
          id v21 = v4;
          [v13 registerItem:v12 error:&v21];
          id v14 = v21;

          if (v14)
          {
            uint64_t v15 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v27 = v14;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Donation of item unable to finish with error: %@ ", buf, 0xCu);
            }

            unint64_t v4 = v14;
          }
          else
          {
            unint64_t v4 = 0;
          }
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v3);
  }
  else
  {
    unint64_t v4 = 0;
  }

  id v16 = *(void **)(a1 + 40);
  id v20 = v4;
  [v16 finish:&v20];
  id v17 = v20;

  if (v17)
  {
    uint64_t v18 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v27 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Donation was unable to finish with error: %@ ", buf, 0xCu);
    }

    [*(id *)(a1 + 40) cancel];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001FE600(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)(a1 + 40) + 64));
  if (v1 == *(_DWORD *)(a1 + 48))
  {
    int v3 = 0;
    atomic_compare_exchange_strong((atomic_uint *volatile)(*(void *)(a1 + 40) + 60), (unsigned int *)&v3, 1u);
    if (!v3)
    {
      unint64_t v4 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting ubiquity manager", buf, 2u);
      }

      id v5 = objc_alloc_init((Class)ACAccountStore);
      id v6 = objc_msgSend(v5, "aa_primaryAppleAccount");
      if (!v6)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No primary apple account", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", 0);
        goto LABEL_47;
      }
      uint64_t v7 = +[NSFileManager defaultManager];
      uint64_t v8 = [v7 ubiquityIdentityToken];

      if (!v8)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ubiquity is not responding", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", 0);
        goto LABEL_46;
      }
      uint64_t v9 = [v7 URLForUbiquityContainerIdentifier:PKUbiquityContainerIdentifier];
      id v10 = [v9 URLByAppendingPathComponent:@"UbiquitousCards" isDirectory:1];

      if (!v10)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ubiquity container does not exist or is not available (URL is nil)", buf, 2u);
        }

        objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", 0);
        goto LABEL_45;
      }
      unsigned int v11 = [v7 isUbiquitousItemAtURL:v10];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v12 = @"is NOT";
        if (v11) {
          CFStringRef v12 = @"is";
        }
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v22 = v10;
        __int16 v23 = 2112;
        CFStringRef v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ %@ ubiquitous", buf, 0x16u);
      }

      if (v11)
      {
        [*(id *)(a1 + 40) setUbiquitousURL:v10];
        PDWatchFSEventsAtURL(v10);
      }
      unsigned int v13 = [v6 isEnabledForDataclass:ACAccountDataclassUbiquity];
      unsigned int v14 = [v6 isEnabledForDataclass:ACAccountDataclassShoebox];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v15 = @"OFF";
        if (v13) {
          CFStringRef v15 = @"ON";
        }
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Ubiquity switch: %@", buf, 0xCu);
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v16 = @"OFF";
        if (v14) {
          CFStringRef v16 = @"ON";
        }
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v22 = v16;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Passbook switch: %@", buf, 0xCu);
      }

      if ((v13 & v14) == 1)
      {
        if (v11)
        {
LABEL_26:
          objc_msgSend(*(id *)(a1 + 40), "_queue_startAlreadyUbiquitous");
          uint64_t v17 = 2;
LABEL_40:
          id v20 = 0;
          unsigned __int8 v18 = [v7 startDownloadingUbiquitousItemAtURL:v10 error:&v20];
          uint64_t v19 = (__CFString *)v20;
          if ((v18 & 1) == 0)
          {
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              CFStringRef v22 = v19;
              _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "startDownloadingUbiquitousItemAtURL failed: %@", buf, 0xCu);
            }
          }
          objc_msgSend(*(id *)(a1 + 40), "_queue_startWithTokenFinishedWithFinalState:", v17);

LABEL_45:
LABEL_46:

LABEL_47:
          return;
        }
        PKSharedCacheRemoveObjectForKey();
        if (objc_msgSend(*(id *)(a1 + 40), "_queue_startNotYetUbiquitousWithDestinationURL:", v10))
        {
          [*(id *)(a1 + 40) setUbiquitousURL:v10];
          PDWatchFSEventsAtURL(v10);
          goto LABEL_26;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          CFStringRef v22 = v10;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ did not become ubiquitous, abort", buf, 0xCu);
        }
      }
      uint64_t v17 = 0;
      goto LABEL_40;
    }
  }
}

void PDWatchFSEventsAtURL(void *a1)
{
  unsigned int v1 = [a1 path];
  PKSharedCacheSetObjectForKey();
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  id v3 = v1;
  xpc_dictionary_set_string(v2, "Path", (const char *)[v3 UTF8String]);
  unint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "registering to wake on fsevents for URL: %@", (uint8_t *)&v5, 0xCu);
  }

  xpc_set_event();
}

id sub_1001FEE30(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

void sub_1001FEE3C(id *a1)
{
  xpc_object_t v2 = [a1[5] ubiquitousURL];
  if (v2 && (int BoolForKey = PKSharedCacheGetBoolForKey(), v2, !BoolForKey))
  {
    if ([a1[7] supportsSyncing])
    {
      *(void *)&long long v27 = 0;
      *((void *)&v27 + 1) = &v27;
      uint64_t v28 = 0x2020000000;
      char v29 = 0;
      id v6 = a1[5];
      uint64_t v7 = *((void *)v6 + 2);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1001FF1DC;
      v20[3] = &unk_100739568;
      void v20[4] = v6;
      id v21 = a1[6];
      CFStringRef v22 = &v27;
      dispatch_sync(v7, v20);
      int v8 = *(unsigned __int8 *)(*((void *)&v27 + 1) + 24);
      uint64_t v9 = PKLogFacilityTypeGetObject();
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (v10)
        {
          id v11 = a1[6];
          *(_DWORD *)long long buf = 138412290;
          id v26 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Aborting because there is a newer pending update for pass: %@", buf, 0xCu);
        }
      }
      else
      {
        if (v10)
        {
          id v14 = a1[6];
          *(_DWORD *)long long buf = 138412290;
          id v26 = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "inserting ubiquitous version of pass: %@", buf, 0xCu);
        }

        uint64_t v9 = [objc_alloc((Class)NSFileCoordinator) initWithFilePresenter:a1[5]];
        CFStringRef v15 = [a1[5] ubiquitousURL];
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        void v17[2] = sub_1001FF228;
        v17[3] = &unk_10073FD80;
        id v16 = a1[6];
        void v17[4] = a1[5];
        id v18 = v16;
        id v19 = a1[7];
        [v9 coordinateWritingItemAtURL:v15 options:8 error:0 byAccessor:v17];
      }
      _Block_object_dispose(&v27, 8);
    }
    else
    {
      CFStringRef v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = [a1[7] uniqueID];
        LODWORD(v27) = 138412290;
        *(void *)((char *)&v27 + 4) = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Invalid attempt to insert non-ubiquitous version of pass: %@", (uint8_t *)&v27, 0xCu);
      }
    }
  }
  else
  {
    id v4 = a1[5];
    int v5 = *((void *)v4 + 2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001FF1D0;
    block[3] = &unk_10072E198;
    void block[4] = v4;
    id v24 = a1[6];
    dispatch_sync(v5, block);
  }
}

void sub_1001FF1B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_1001FF1D0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_1001FF1DC(void *a1)
{
  [*(id *)(a1[4] + 40) removeObject:a1[5]];
  id result = [*(id *)(a1[4] + 40) countForObject:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result != 0;
  return result;
}

void sub_1001FF228(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSFileManager defaultManager];
  int v5 = [*(id *)(a1 + 32) ubiquitousURL];
  id v6 = [v5 path];
  unsigned __int8 v7 = [v4 fileExistsAtPath:v6];

  if (v7)
  {
    id v8 = 0;
    goto LABEL_4;
  }
  uint64_t v9 = +[NSFileManager defaultManager];
  BOOL v10 = [*(id *)(a1 + 32) ubiquitousURL];
  id v15 = 0;
  unsigned __int8 v11 = [v9 createDirectoryAtURL:v10 withIntermediateDirectories:0 attributes:0 error:&v15];
  id v8 = v15;

  if (v11)
  {
LABEL_4:
    if ([*(id *)(a1 + 32) passWillBeDeleted:*(void *)(a1 + 40)])
    {
      CFStringRef v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Pass %@ no longer exist, don't copy it", buf, 0xCu);
      }
    }
    else
    {
      CFStringRef v12 = [*(id *)(a1 + 32) _urlForCardWithUniqueID:*(void *)(a1 + 40) relativeToDirectoryURL:v3];
      sub_1001FF444(*(void **)(a1 + 48), v12);
    }
    goto LABEL_10;
  }
  CFStringRef v12 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [v8 localizedDescription];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v17 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to recreate cards directory: %@", buf, 0xCu);
  }
LABEL_10:
}

void sub_1001FF444(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v3 uniqueID];
    *(_DWORD *)long long buf = 138412546;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "copying %@ to %@", buf, 0x16u);
  }
  if (v4)
  {
    id v7 = objc_alloc((Class)NSFileWrapper);
    id v8 = [v3 serializedFileWrapper];
    id v9 = [v7 initWithSerializedRepresentation:v8];

    id v13 = 0;
    unsigned __int8 v10 = [v9 writeToURL:v4 options:1 originalContentsURL:0 error:&v13];
    id v11 = v13;
    if ((v10 & 1) == 0)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v12 = [v11 localizedDescription];
        *(_DWORD *)long long buf = 138412290;
        id v15 = v12;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to write pass: %@", buf, 0xCu);
      }
    }
  }
}

id sub_1001FF6CC(void *a1)
{
  id result = [*(id *)(a1[4] + 48) countForObject:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result != 0;
  return result;
}

id sub_1001FF7A4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) addObject:*(void *)(a1 + 40)];
}

void sub_1001FF8E0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) ubiquitousURL];
  if (v2 && (id v3 = (void *)v2, BoolForKey = PKSharedCacheGetBoolForKey(), v3, !BoolForKey))
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "removing ubiquitous version of pass: %@", buf, 0xCu);
    }

    id v9 = [objc_alloc((Class)NSFileCoordinator) initWithFilePresenter:*(void *)(a1 + 40)];
    unsigned __int8 v10 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    CFStringRef v12 = [v10 ubiquitousURL];
    id v13 = [v10 _urlForCardWithUniqueID:v11 relativeToDirectoryURL:v12];

    [v9 coordinateWritingItemAtURL:v13 options:1 error:0 byAccessor:&stru_10073FDC0];
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = *(NSObject **)(v14 + 16);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1001FFC38;
    v16[3] = &unk_10072E198;
    void v16[4] = v14;
    id v17 = *(id *)(a1 + 48);
    dispatch_sync(v15, v16);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(NSObject **)(v5 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001FFB1C;
    block[3] = &unk_10072E198;
    void block[4] = v5;
    id v19 = *(id *)(a1 + 48);
    dispatch_sync(v6, block);
  }
}

id sub_1001FFB1C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

void sub_1001FFB28(id a1, NSURL *a2)
{
  uint64_t v2 = a2;
  id v3 = +[NSFileManager defaultManager];
  id v8 = 0;
  unsigned __int8 v4 = [v3 removeItemAtURL:v2 error:&v8];

  id v5 = v8;
  if ((v4 & 1) == 0)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [v5 localizedDescription];
      *(_DWORD *)long long buf = 138412290;
      unsigned __int8 v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Failed to delete card: %@", buf, 0xCu);
    }
  }
}

id sub_1001FFC38(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

id sub_1001FFC44(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

void sub_1001FFD1C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) ubiquitousURL];
  if (v2)
  {
    id v3 = (void *)v2;
    char BoolForKey = PKSharedCacheGetBoolForKey();

    if ((BoolForKey & 1) == 0)
    {
      id v5 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "updating ubiquitous version of catalog: %@", buf, 0xCu);
      }

      id v7 = [objc_alloc((Class)NSFileCoordinator) initWithFilePresenter:*(void *)(a1 + 40)];
      id v8 = [*(id *)(a1 + 40) ubiquitousURL];
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1001FFEA4;
      v10[3] = &unk_100739388;
      id v9 = *(void **)(a1 + 48);
      void v10[4] = *(void *)(a1 + 40);
      id v11 = v9;
      [v7 coordinateWritingItemAtURL:v8 options:8 error:0 byAccessor:v10];
    }
  }
}

void sub_1001FFEA4(uint64_t a1, uint64_t a2)
{
  id v6 = [*(id *)(a1 + 32) _urlForCatalogRelativeToDirectoryURL:a2];
  id v3 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72));
  id v5 = [WeakRetained localNonUbiquitousCatalogURL];
  [v3 writeToURL:v6 nonUbiquitousCatalogURL:v5 atomically:1];
}

void sub_100200200(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Coordinated read successful at URL %@", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100200698(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 134217984;
    uint64_t v5 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "persisting event identifier: %llu", (uint8_t *)&v4, 0xCu);
  }

  id v3 = +[NSNumber numberWithUnsignedLongLong:a1];
  PKSharedCacheSetObjectForKey();
}

void sub_100200918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100200938()
{
  id v0 = PKHomeDirectoryPath();
  uint64_t v1 = [v0 stringByAppendingPathComponent:@"UbiquitousCards"];
  uint64_t v2 = +[NSURL fileURLWithPath:v1];

  return v2;
}

void sub_1002009B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    id v18 = v8;
    __int16 v19 = 2112;
    uint64_t v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting %@ to be ubiquitous with destination %@", buf, 0x16u);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  unsigned __int8 v10 = *(void **)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 32);
  id v16 = 0;
  unsigned __int8 v13 = [v10 setUbiquitous:1 itemAtURL:v12 destinationURL:v11 error:&v16];
  id v14 = v16;
  if (v13)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting ubiquitous URL: %@", buf, 0xCu);
    }

    [*(id *)(a1 + 56) setUbiquitousURL:v6];
  }
  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [v14 localizedDescription];
      *(_DWORD *)long long buf = 138412290;
      id v18 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error making pre-ubiquitous URL ubiquitous: %@", buf, 0xCu);
    }
  }
}

void sub_100201200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100201234(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = +[NSFileManager defaultManager];
  NSURLResourceKey v15 = NSURLUbiquitousItemDownloadingStatusKey;
  id v5 = +[NSArray arrayWithObjects:&v15 count:1];
  id v12 = 0;
  uint64_t v6 = [v4 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:v5 options:4 error:&v12];

  id v7 = v12;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;

  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    unsigned __int8 v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [v7 localizedDescription];
      *(_DWORD *)long long buf = 138412290;
      id v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unable to read card ids: %@", buf, 0xCu);
    }
  }
}

void sub_100201644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100201670(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v2 == 0;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v4 = +[PKPass createWithFileURL:a2 warnings:0 error:0];
    id v5 = v4;
    if (v4)
    {
      [v4 setUniqueID:*(void *)(a1 + 40)];
      uint64_t v6 = PDDefaultQueue();
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100201788;
      v7[3] = &unk_10072E198;
      void v7[4] = *(void *)(a1 + 32);
      id v8 = v5;
      dispatch_sync(v6, v7);
    }
    else
    {
      sub_1002017DC(*(void **)(a1 + 40), *(void **)(a1 + 48));
    }
  }
}

void sub_100201788(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 ubiquitousCardDidChange:*(void *)(a1 + 40)];
}

void sub_1002017DC(void *a1, void *a2)
{
  uint64_t v3 = qword_100808D00;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&qword_100808D00, &stru_10073FEA0);
  }
  PKWriteBadPass();
}

void sub_100201994(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v11 = v10;
        if (!atomic_load((unsigned int *)(*(void *)(a1 + 40) + 60)))
        {

          id v4 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v16 = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "\tTerminating copy of local cards to ubiquity.", v16, 2u);
          }
          goto LABEL_15;
        }
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72));
        id v14 = [WeakRetained existingCardWithUniqueID:v9];

        if (v14 && [v14 supportsSyncing])
        {
          NSURLResourceKey v15 = [*(id *)(a1 + 40) _urlForCardWithUniqueID:v9 relativeToDirectoryURL:v3];
          sub_1001FF444(v14, v15);
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_15:
}

void sub_100201F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_100201F70(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v2 == 0;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    id v4 = +[PKPass createWithFileURL:a2 warnings:0 error:0];
    id v5 = [v4 manifestHash];
    id v6 = [*(id *)(a1 + 40) manifestHash];
    unsigned int v7 = [v5 isEqualToData:v6];

    id v8 = PKLogFacilityTypeGetObject();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 48);
        int v16 = 138412290;
        uint64_t v17 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@ - card manifests are equivalent", (uint8_t *)&v16, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        uint64_t v11 = *(void *)(a1 + 48);
        int v16 = 138412290;
        uint64_t v17 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@ - card manifests differ", (uint8_t *)&v16, 0xCu);
      }

      id v12 = [v4 modificationDate];
      unsigned __int8 v13 = [*(id *)(a1 + 40) modificationDate];
      id v14 = [v12 compare:v13];

      if (v14 == (id)-1) {
        NSURLResourceKey v15 = *(void **)(a1 + 56);
      }
      else {
        NSURLResourceKey v15 = *(void **)(a1 + 64);
      }
      [v15 addObject:*(void *)(a1 + 48)];
    }
  }
}

void sub_100202450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100202474(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 72);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = [WeakRetained localNonUbiquitousCatalogURL];
  uint64_t v6 = +[PKCatalog catalogWithContentsOfURL:v4 nonUbiquitousCatalogURL:v5];

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100202604(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60));
  id v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 138412290;
      id v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "coordinated read succeeded at: %@", buf, 0xCu);
    }

    uint64_t v7 = +[NSFileManager defaultManager];
    id v8 = [v3 path];
    unsigned int v9 = [v7 fileExistsAtPath:v8];

    if (v9)
    {
      uint64_t v10 = +[PKPass createWithFileURL:*(void *)(a1 + 40) warnings:0 error:0];
      BOOL v11 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        if (v11)
        {
          id v12 = *(void **)(a1 + 48);
          *(_DWORD *)long long buf = 138412290;
          id v35 = v12;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "valid card: %@", buf, 0xCu);
        }

        [v10 setUniqueID:*(void *)(a1 + 48)];
        unsigned __int8 v13 = PDDefaultQueue();
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_100202AC4;
        v31[3] = &unk_10072E238;
        void v31[4] = *(void *)(a1 + 32);
        id v14 = &v32;
        id v32 = *(id *)(a1 + 48);
        NSURLResourceKey v15 = (id *)&v33;
        id v33 = v10;
        int v16 = v31;
      }
      else
      {
        if (v11)
        {
          id v24 = *(void **)(a1 + 48);
          *(_DWORD *)long long buf = 138412290;
          id v35 = v24;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "invalid card: %@", buf, 0xCu);
        }

        unsigned __int8 v13 = PDDefaultQueue();
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_100202BD4;
        v28[3] = &unk_10072E238;
        void v28[4] = *(void *)(a1 + 32);
        id v14 = &v29;
        id v29 = *(id *)(a1 + 48);
        NSURLResourceKey v15 = &v30;
        id v30 = v3;
        int v16 = v28;
      }
      dispatch_sync(v13, v16);

      __int16 v23 = *v14;
LABEL_25:

      goto LABEL_26;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "card package missing, checking for fault at: %@", buf, 0xCu);
    }

    uint64_t v17 = +[NSFileManager defaultManager];
    id v27 = 0;
    unsigned __int8 v18 = [v17 startDownloadingUbiquitousItemAtURL:v3 error:&v27];
    uint64_t v10 = v27;

    BOOL v19 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if ((v18 & 1) == 0)
    {
      if (v19)
      {
        uint64_t v21 = *(void **)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        id v35 = v21;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "card package removed: %@", buf, 0xCu);
      }

      CFStringRef v22 = PDDefaultQueue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100202CEC;
      block[3] = &unk_10072E198;
      void block[4] = *(void *)(a1 + 32);
      id v26 = *(id *)(a1 + 48);
      dispatch_sync(v22, block);

      __int16 v23 = v26;
      goto LABEL_25;
    }
    if (v19)
    {
      long long v20 = *(void **)(a1 + 48);
      *(_DWORD *)long long buf = 138412290;
      id v35 = v20;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "faulting in card package: %@", buf, 0xCu);
    }
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 138412290;
      id v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "coordinated read succeeded and ignored at: %@", buf, 0xCu);
    }
    uint64_t v10 = v5;
  }
LABEL_26:
}

void sub_100202AC4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) passWillBeDeleted:*(void *)(a1 + 40)])
  {
    unsigned int v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "pass will be deleted so do not add it back: %@", buf, 0xCu);
    }
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 ubiquitousCardDidChange:*(void *)(a1 + 48)];
  }
}

void sub_100202BD4(id *a1)
{
  if ([a1[4] passWillBeDeleted:a1[5]])
  {
    unsigned int v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = a1[5];
      *(_DWORD *)long long buf = 138412290;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "pass will be deleted so do not add it back: %@", buf, 0xCu);
    }
  }
  else
  {
    sub_1002017DC(a1[5], a1[6]);
    id v4 = [a1[4] delegate];
    [v4 ubiquitousCardWithUniqueIDRemoved:a1[5]];
  }
}

void sub_100202CEC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 ubiquitousCardWithUniqueIDRemoved:*(void *)(a1 + 40)];
}

void sub_100202DF0(uint64_t a1, void *a2)
{
  if (atomic_load((unsigned int *)(*(void *)(a1 + 32) + 60)))
  {
    id v4 = (id *)(*(void *)(a1 + 32) + 72);
    id v5 = a2;
    id WeakRetained = objc_loadWeakRetained(v4);
    uint64_t v7 = [WeakRetained localNonUbiquitousCatalogURL];
    id v9 = +[PKCatalog catalogWithContentsOfURL:v5 nonUbiquitousCatalogURL:v7];

    id v8 = v9;
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "_queue_copyCatalogToLocalStore:", v9);
      id v8 = v9;
    }
  }
}

void sub_100202FFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 ubiquitousCatalogDidChange:*(void *)(a1 + 40)];
}

void sub_1002031AC(uint64_t a1, uint64_t a2)
{
  id v6 = [*(id *)(a1 + 32) _urlForCatalogRelativeToDirectoryURL:a2];
  id v3 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72));
  id v5 = [WeakRetained localNonUbiquitousCatalogURL];
  [v3 writeToURL:v6 nonUbiquitousCatalogURL:v5 atomically:1];
}

void sub_100203524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100203550(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSFileManager defaultManager];
  NSURLResourceKey v15 = NSURLContentModificationDateKey;
  id v5 = +[NSArray arrayWithObjects:&v15 count:1];
  id v12 = 0;
  uint64_t v6 = [v4 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:v5 options:4 error:&v12];

  id v7 = v12;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v6;

  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = [v7 localizedDescription];
      *(_DWORD *)long long buf = 138412290;
      id v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unable list files in ubiquitous directory: %@", buf, 0xCu);
    }
  }
}

void sub_100203B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100203B84(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v3 + 40);
  id v4 = [v2 replaceItemAtURL:a2 options:0 error:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
}

id sub_100204050(void *a1)
{
  id result = [*(id *)(a1[4] + 32) countForObject:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = result != 0;
  if (!*(unsigned char *)(*(void *)(a1[6] + 8) + 24))
  {
    uint64_t v3 = a1[5];
    id v4 = *(void **)(a1[4] + 32);
    return [v4 addObject:v3];
  }
  return result;
}

void sub_1002040C4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v23 = 0;
  [v2 getResourceValue:&v23 forKey:NSURLUbiquitousItemDownloadingStatusKey error:0];
  uint64_t v3 = (__CFString *)v23;
  if ((PKSharedCacheGetBoolForKey() & 1) == 0)
  {
    if (atomic_load((unsigned int *)(*(void *)(a1 + 48) + 60)))
    {
      if (!v3
        || ([(__CFString *)v3 isEqualToString:NSURLUbiquitousItemDownloadingStatusCurrent] & 1) != 0)
      {
        objc_msgSend(*(id *)(a1 + 48), "_queue_resolveURLIfNecessary:", *(void *)(a1 + 40));
        id v5 = [*(id *)(a1 + 40) URLByDeletingLastPathComponent];
        uint64_t v6 = [v5 lastPathComponent];

        if ([v6 isEqualToString:@"UbiquitousCards"])
        {
          id v7 = [*(id *)(a1 + 40) pathExtension];
          unsigned int v8 = [v7 isEqualToString:PKRawPassExtension];

          id v9 = *(void **)(a1 + 40);
          if (v8)
          {
            uint64_t v10 = [v9 URLByDeletingPathExtension];
            BOOL v11 = [v10 lastPathComponent];

            if (([*(id *)(a1 + 48) passWillBeDeleted:v11] & 1) == 0) {
              objc_msgSend(*(id *)(a1 + 48), "_queue_handlePassUpdate:", v11);
            }
            goto LABEL_16;
          }
          BOOL v19 = [v9 lastPathComponent];
          unsigned int v20 = [v19 isEqualToString:@"CatalogOfRecord.plist"];

          if (v20)
          {
            objc_msgSend(*(id *)(a1 + 48), "_queue_handleCatalogUpdate");
            goto LABEL_17;
          }
          BOOL v11 = PKLogFacilityTypeGetObject();
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_16;
          }
          *(_WORD *)long long buf = 0;
          id v14 = "Presented subitem not recognized; ignoring";
          NSURLResourceKey v15 = v11;
          uint32_t v16 = 2;
        }
        else
        {
          BOOL v11 = PKLogFacilityTypeGetObject();
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
LABEL_16:

            goto LABEL_17;
          }
          *(_DWORD *)long long buf = 138412290;
          CFStringRef v25 = @"UbiquitousCards";
          id v14 = "Presented subitem not immediately contained by %@ directory; ignoring";
          NSURLResourceKey v15 = v11;
          uint32_t v16 = 12;
        }
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
        goto LABEL_16;
      }
    }
  }
  uint64_t v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v12 = *(const __CFString **)(a1 + 40);
    CFStringRef v13 = &stru_10075AAD8;
    if (v3) {
      CFStringRef v13 = v3;
    }
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v25 = v12;
    __int16 v26 = 2112;
    CFStringRef v27 = v13;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ignoring subitem change at URL: %@ %@", buf, 0x16u);
  }
LABEL_17:

  uint64_t v17 = *(void *)(a1 + 48);
  unsigned __int8 v18 = *(NSObject **)(v17 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002043F4;
  block[3] = &unk_10072E198;
  void block[4] = v17;
  id v22 = *(id *)(a1 + 40);
  dispatch_sync(v18, block);
}

id sub_1002043F4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) removeObject:*(void *)(a1 + 40)];
}

void sub_100204524(uint64_t a1)
{
  if (PKSharedCacheGetBoolForKey())
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring subitem did appear at URL: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    objc_msgSend(v4, "_queue_resolveURLIfNecessary:", v5);
  }
}

uint64_t sub_100204754(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002047D8(uint64_t a1)
{
}

id PDLastFSEventsURL()
{
  id v0 = PKSharedCacheGetStringForKey();
  if (v0)
  {
    uint64_t v1 = +[NSURL fileURLWithPath:v0];
  }
  else
  {
    uint64_t v1 = 0;
  }

  return v1;
}

void sub_100204928(id a1)
{
  uint64_t v1 = PKHomeDirectoryPath();
  uint64_t v2 = [v1 stringByAppendingPathComponent:@"BadUbiquitousPasses"];
  uint64_t v3 = (void *)qword_100808CF8;
  qword_100808CF8 = v2;

  id v4 = +[NSFileManager defaultManager];
  [v4 createDirectoryAtPath:qword_100808CF8 withIntermediateDirectories:1 attributes:0 error:0];
}

void *sub_1002049B8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v6 = a2;
  id v7 = a3;
  self;
  unsigned int v8 = [PDContaclessRemoteInterfacePresentationContext alloc];
  if (v8)
  {
    v15.receiver = v8;
    v15.super_class = (Class)PDContaclessRemoteInterfacePresentationContext;
    id v9 = objc_msgSendSuper2(&v15, "init");
    uint64_t v10 = v9;
    if (v9) {
      v9[3] = a4;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = [v6 copy];
  CFStringRef v12 = (void *)v10[1];
  v10[1] = v11;

  CFStringRef v13 = (void *)v10[2];
  v10[2] = v7;

  return v10;
}

void sub_100204B20(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    *(unsigned char *)(a1 + 12) = 1;
    id v3 = *(id *)(a1 + 16);
    id v4 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;

    id v5 = *(id *)(a1 + 24);
    id v6 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;

    id v7 = *(id *)(a1 + 32);
    unsigned int v8 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;

    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;

    os_unfair_lock_unlock(v2);
    if (v3) {
      sub_100224394((uint64_t)v3);
    }
    if (v5) {
      [v5 invalidate];
    }
    if (v7)
    {
      id v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        sub_100516B90();
      }

      CFStringRef v12 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v13 = [v12 releaseAssertion:v7];
    }
    if (v9)
    {
      id v14 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
        sub_100516B28();
      }

      objc_super v15 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v16 = [v15 releaseAssertion:v9];
    }
  }
}

void sub_100204CAC(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (!a1)
  {
LABEL_5:
    id v3 = v6;
    goto LABEL_9;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  if (*(unsigned char *)(a1 + 12))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    id v3 = v6;
    if (!v6) {
      goto LABEL_9;
    }
    sub_100224394((uint64_t)v6);
    goto LABEL_5;
  }
  id v4 = *(id *)(a1 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  if (v4)
  {
    sub_100224394((uint64_t)v4);
  }
  id v3 = 0;
LABEL_9:
}

os_unfair_lock_s *sub_100204D64(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 2;
    os_unfair_lock_lock(result + 2);
    id v3 = *(id *)&v1[4]._os_unfair_lock_opaque;
    id v4 = *(void **)&v1[4]._os_unfair_lock_opaque;
    *(void *)&v1[4]._os_unfair_lock_opaque = 0;

    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

void sub_100204DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (!v3)
    {
      __break(1u);
      return;
    }
    id v6 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (*(unsigned char *)(a1 + 12))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      [v6 invalidate];
      id v3 = v6;
    }
    else
    {
      id v4 = *(id *)(a1 + 24);
      id v5 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v6;

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      if (v4)
      {
        [v4 invalidate];
      }
      id v3 = 0;
    }
  }
}

os_unfair_lock_s *sub_100204E7C(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 2;
    os_unfair_lock_lock(result + 2);
    id v3 = *(id *)&v1[6]._os_unfair_lock_opaque;
    id v4 = *(void **)&v1[6]._os_unfair_lock_opaque;
    *(void *)&v1[6]._os_unfair_lock_opaque = 0;

    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

void sub_100204EDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_12;
  }
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (*(unsigned char *)(a1 + 12))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      id v5 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        sub_100516B90();
      }

      id v6 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v7 = [v6 releaseAssertion:v4];
    }
    else
    {
      id v6 = *(id *)(a1 + 32);
      unsigned int v8 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v4;

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      if (!v6)
      {
        id v4 = 0;
        goto LABEL_12;
      }
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        sub_100516B90();
      }

      uint64_t v10 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v11 = [v10 releaseAssertion:v6];

      id v4 = 0;
    }

LABEL_12:
    return;
  }
  __break(1u);
}

os_unfair_lock_s *sub_100205014(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 2;
    os_unfair_lock_lock(result + 2);
    id v3 = *(id *)&v1[8]._os_unfair_lock_opaque;
    id v4 = *(void **)&v1[8]._os_unfair_lock_opaque;
    *(void *)&v1[8]._os_unfair_lock_opaque = 0;

    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

void sub_100205074(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1) {
    goto LABEL_12;
  }
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (*(unsigned char *)(a1 + 12))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      id v5 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
        sub_100516B28();
      }

      id v6 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v7 = [v6 releaseAssertion:v4];
    }
    else
    {
      id v6 = *(id *)(a1 + 40);
      unsigned int v8 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v4;

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
      if (!v6)
      {
        id v4 = 0;
        goto LABEL_12;
      }
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        sub_100516B28();
      }

      uint64_t v10 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v11 = [v10 releaseAssertion:v6];

      id v4 = 0;
    }

LABEL_12:
    return;
  }
  __break(1u);
}

os_unfair_lock_s *sub_1002051AC(os_unfair_lock_s *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 2;
    os_unfair_lock_lock(result + 2);
    id v3 = *(id *)&v1[10]._os_unfair_lock_opaque;
    id v4 = *(void **)&v1[10]._os_unfair_lock_opaque;
    *(void *)&v1[10]._os_unfair_lock_opaque = 0;

    os_unfair_lock_unlock(v2);
    return (os_unfair_lock_s *)v3;
  }
  return result;
}

id *sub_1002052A8(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v31.receiver = a1;
    v31.super_class = (Class)PDRemoteInterfacePresenter;
    id v11 = (id *)objc_msgSendSuper2(&v31, "init");
    a1 = v11;
    if (v11)
    {
      *((_DWORD *)v11 + 2) = 0;
      objc_storeStrong(v11 + 27, a2);
      objc_storeStrong(a1 + 29, a4);
      uint64_t v12 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
      id v13 = a1[5];
      a1[5] = (id)v12;

      id v14 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, -1);
      objc_super v15 = dispatch_queue_attr_make_with_autorelease_frequency(v14, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);

      dispatch_queue_t v16 = dispatch_queue_create("com.apple.passd.remoteinterfacepresenter", v15);
      id v17 = a1[2];
      a1[2] = v16;

      id v18 = objc_alloc_init((Class)NSMutableArray);
      id v19 = a1[8];
      a1[8] = v18;

      if (PKNearFieldRadioIsAvailable())
      {
        unsigned int v20 = PDUtilityQueue();
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100205560;
        block[3] = &unk_10072E1E8;
        id v30 = a1;
        dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
        dispatch_async(v20, v21);
      }
      unsigned __int8 v22 = atomic_load(byte_100808D08);
      if (v22) {
        goto LABEL_12;
      }
      os_unfair_lock_lock(&stru_100808D0C);
      if (dword_1008065F8 == -1)
      {
        unsigned __int8 v23 = atomic_load(byte_100808D08);
        if (v23) {
          goto LABEL_11;
        }
        id v24 = PDDefaultQueue();
        uint32_t v25 = notify_register_dispatch("com.apple.springboard.finishedstartup", &dword_1008065F8, v24, &stru_100740618);

        if (v25)
        {
          dword_1008065F8 = -1;
          goto LABEL_11;
        }
        byte_100808D10 = 0;
      }
      sub_100210FD0();
LABEL_11:
      os_unfair_lock_unlock(&stru_100808D0C);
LABEL_12:
      PDNFSecureXPCRegisterContactlessPresentationEventObserver(a1);
      sub_10001204C((uint64_t)a1[27], a1);
      [a1[29] registerObserver:a1];
      objc_storeStrong(a1 + 28, a3);
      [a1[28] registerConsumer:a1];
      id v26 = [objc_alloc((Class)PKAccessoryDeviceMonitor) initWithDelegate:a1];
      id v27 = a1[25];
      a1[25] = v26;
    }
  }

  return a1;
}

void sub_100205560(uint64_t a1)
{
}

void sub_10020556C(uint64_t a1, int a2)
{
  if (a1)
  {
    int IsAvailable = PKNearFieldRadioIsAvailable();
    if (IsAvailable) {
      int IsAvailable = PDContactlessInterfaceAvailable();
    }
    id v5 = (unsigned __int8 *)(a1 + 144);
    if (a2)
    {
      atomic_store(IsAvailable, v5);
      sub_1002057D0(a1);
    }
    else if (IsAvailable != (atomic_exchange((atomic_uchar *volatile)v5, IsAvailable) & 1))
    {
      sub_1002057D0(a1);
      id v6 = *(void **)(a1 + 224);
      [v6 recalculateNotificationNames];
    }
  }
}

void sub_1002057D0(uint64_t a1)
{
  if (a1)
  {
    v30[0] = 0;
    v30[1] = v30;
    v30[2] = 0x3032000000;
    v30[3] = sub_1000209EC;
    void v30[4] = sub_100020FE8;
    id v31 = 0;
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 144));
    if (v3 & 1) != 0 && (unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 48)), (v4)) {
      int v5 = PDDeviceUILocked();
    }
    else {
      int v5 = 0;
    }
    if (*(unsigned __int8 *)(a1 + 145) != v5)
    {
      id v7 = (void **)(a1 + 176);
      id v6 = *(NSObject **)(a1 + 176);
      *(unsigned char *)(a1 + 145) = v5;
      if (v5)
      {
        if (v6)
        {
          dispatch_source_cancel(v6);
          id v8 = *v7;
          void *v7 = 0;
        }
        if ([*(id *)(a1 + 152) isCanceled])
        {
          id v9 = *(void **)(a1 + 152);
          *(void *)(a1 + 152) = 0;
        }
        if (*(void *)(a1 + 152) || *(void *)(a1 + 168))
        {
          id v10 = 0;
        }
        else
        {
          id v18 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
          v28[0] = 0;
          v28[1] = v28;
          v28[2] = 0x2020000000;
          int v29 = -1;
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          v27[2] = sub_10021027C;
          v27[3] = &unk_100730D50;
          void v27[4] = a1;
          void v27[5] = v28;
          [v18 addOperation:v27];
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          void v26[2] = sub_100210450;
          v26[3] = &unk_10072E610;
          void v26[4] = a1;
          v26[5] = v28;
          [v18 addOperation:v26];
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          void v25[2] = sub_1002107C0;
          v25[3] = &unk_1007405B0;
          void v25[4] = v28;
          void v25[5] = v30;
          [v18 addOperation:v25];
          id v19 = +[NSNull null];
          id v10 = [v18 evaluatorWithInput:v19];

          uint64_t v20 = [v10 cancelable];
          dispatch_block_t v21 = *(void **)(a1 + 152);
          *(void *)(a1 + 152) = v20;

          _Block_object_dispose(v28, 8);
        }
        if (!*(void *)(a1 + 160))
        {
          uint64_t v11 = PDOSTransactionCreate("PDRemoteInterfacePresenter.boost");
          uint64_t v12 = *(void **)(a1 + 160);
          *(void *)(a1 + 160) = v11;
        }
        os_unfair_lock_unlock(v2);
        if (v10)
        {
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_100210A14;
          v22[3] = &unk_1007405D8;
          void v22[4] = a1;
          void v22[5] = v30;
          id v13 = [v10 evaluateWithCompletion:v22];
        }
        goto LABEL_22;
      }
      if (!v6)
      {
        id v14 = PDDefaultQueue();
        dispatch_source_t v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v14);

        objc_storeStrong((id *)(a1 + 176), v15);
        dispatch_time_t v16 = dispatch_time(0, 5000000000);
        dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0x2CB41780uLL);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100210928;
        handler[3] = &unk_10072E198;
        void handler[4] = a1;
        dispatch_source_t v24 = v15;
        id v17 = v15;
        dispatch_source_set_event_handler(v17, handler);
        dispatch_resume(v17);
      }
    }
    os_unfair_lock_unlock(v2);
LABEL_22:
    _Block_object_dispose(v30, 8);
  }
}

void sub_100205BD8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100205C84(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 48));
    if (v9)
    {
      id v10 = PDExpressTransactionQueue();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100206960;
      v11[3] = &unk_100731AD8;
      void v11[4] = a1;
      id v12 = v7;
      uint64_t v14 = a3;
      id v13 = v8;
      dispatch_async(v10, v11);
    }
    else
    {
      sub_100206358(a1);
      if (v8) {
        (*((void (**)(id, void))v8 + 2))(v8, 0);
      }
    }
  }
}

void sub_100205F0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1002049B8((uint64_t)PDContaclessRemoteInterfacePresentationContext, 0, *(void **)(a1 + 40), 1);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_100205F78(v1, v2, 0);
}

void sub_100205F78(uint64_t a1, void *a2, void *a3)
{
  int v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = PDExpressTransactionQueue();
    dispatch_assert_queue_V2(v7);

    id v8 = (void *)PDOSTransactionCreate("PDRemoteInterfacePresenter");
    unsigned __int8 v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_100516BF8();
    }

    if (v5) {
      uint64_t v10 = v5[3];
    }
    else {
      uint64_t v10 = 0;
    }
    id v11 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_10020DE2C;
    v44[3] = &unk_100740340;
    id v12 = v5;
    id v45 = v12;
    uint64_t v46 = a1;
    [v11 addOperation:v44];
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_10020E1EC;
    v40[3] = &unk_100740368;
    uint64_t v43 = v10;
    id v13 = v12;
    id v41 = v13;
    uint64_t v42 = a1;
    [v11 addOperation:v40];
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_10020E508;
    v39[3] = &unk_100740388;
    v39[4] = v10;
    [v11 addOperation:v39];
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    void v36[2] = sub_10020E6AC;
    v36[3] = &unk_100740368;
    void v36[4] = a1;
    uint64_t v14 = v13;
    id v37 = v14;
    uint64_t v38 = v10;
    [v11 addOperation:v36];
    [v11 addOperation:&stru_100740418];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10020EEAC;
    v33[3] = &unk_100740368;
    uint64_t v35 = v10;
    void v33[4] = a1;
    dispatch_source_t v15 = v14;
    id v34 = v15;
    [v11 addOperation:v33];
    dispatch_time_t v16 = *(void **)(a1 + 80);
    if (v16)
    {
      id v17 = v16;
      id v18 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = 0;

      id v19 = *(NSObject **)(a1 + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10020F2C8;
      block[3] = &unk_10072E1E8;
      id v32 = v17;
      id v20 = v17;
      dispatch_async(v19, block);
    }
    dispatch_block_t v21 = objc_alloc_init(PDRemoteAlertPresentationEvaluationContactless);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_10020F2D0;
    v25[3] = &unk_1007404A8;
    id v26 = v8;
    uint64_t v27 = a1;
    uint64_t v28 = v15;
    uint64_t v30 = v10;
    id v29 = v6;
    id v22 = v8;
    uint64_t v23 = [v11 evaluateWithInput:v21 completion:v25];
    dispatch_source_t v24 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v23;
  }
}

void sub_100206358(uint64_t a1)
{
  if (!a1) {
    return;
  }
  unsigned __int8 v1 = atomic_load(byte_100808D08);
  if ((v1 & 1) == 0)
  {
    os_unfair_lock_lock(&stru_100808D0C);
    if (dword_1008065F8 == -1)
    {
      unsigned __int8 v2 = atomic_load(byte_100808D08);
      if (v2) {
        goto LABEL_8;
      }
      unsigned __int8 v3 = PDDefaultQueue();
      uint32_t v4 = notify_register_dispatch("com.apple.springboard.finishedstartup", &dword_1008065F8, v3, &stru_100740618);

      if (v4)
      {
        dword_1008065F8 = -1;
        goto LABEL_8;
      }
      byte_100808D10 = 0;
    }
    sub_100210FD0();
LABEL_8:
    os_unfair_lock_unlock(&stru_100808D0C);
  }
  unsigned __int8 v5 = atomic_load(byte_100808D08);
  if ((v5 & 1) != 0 && PDContactlessInterfaceAvailable())
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Requesting Passcode Unlock from SpringBoard", v7, 2u);
    }

    SBSRequestPasscodeUnlockUI();
  }
}

uint64_t sub_1002064CC(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)a1;
  if (a1)
  {
    uint32_t v4 = a1 + 2;
    os_unfair_lock_lock(a1 + 2);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v5 = *(id *)(v2 + 64);
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v12;
      while (2)
      {
        unsigned __int8 v9 = 0;
        do
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          if (sub_100224D50(*(void *)(*((void *)&v11 + 1) + 8 * (void)v9)) == a2)
          {

            uint64_t v2 = 1;
            goto LABEL_14;
          }
          unsigned __int8 v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }

    uint64_t v2 = a2 == 1 && *(void *)(v2 + 72) != 0;
LABEL_14:
    os_unfair_lock_unlock(v4);
  }
  return v2;
}

void sub_1002067CC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = +[PKAccessoryDevice mockAccessoryDevice];
    unsigned __int8 v3 = *(void **)(a1 + 208);
    *(void *)(a1 + 20_Block_object_dispose(&STACK[0x390], 8) = v2;

    uint32_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 208);
      int v6 = 136315394;
      id v7 = "/Library/Caches/com.apple.xbs/Sources/Wallet/passd/PDRemoteInterfacePresenter.m";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s - attachMockSleeveAccessory getting called with %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1002068AC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = PDUtilityQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100206954;
    block[3] = &unk_10072E1E8;
    void block[4] = a1;
    dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
    dispatch_async(v2, v3);
  }
}

void sub_100206954(uint64_t a1)
{
}

void sub_100206960(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  dispatch_block_t v3 = sub_1002049B8((uint64_t)PDContaclessRemoteInterfacePresentationContext, *(void **)(a1 + 40), 0, *(void *)(a1 + 56));
  uint32_t v4 = *(void **)(a1 + 48);
  id v5 = v3;
  if (v4)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100206A50;
    v6[3] = &unk_1007304D8;
    id v7 = v4;
    sub_100205F78(v2, v5, v6);
  }
  else
  {
    sub_100205F78(v2, v3, 0);
  }
}

uint64_t sub_100206A50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100206A60(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (!a1) {
    goto LABEL_44;
  }
  if (v4)
  {
    int v6 = [v4 passUniqueIdentifier];
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    uint64_t v7 = *(void *)(a1 + 56);
    BOOL v8 = (!v7
       || (uint64_t v7 = (uint64_t)[(id)v7 isRelatedToState:v5], !v7)
       || (uint64_t v7 = sub_100206DAC(v7, *(void **)(a1 + 56)), (v7 & 1) == 0))
      && sub_100206DAC(v7, v5);
    uint64_t v9 = *(void **)(a1 + 72);
    if (v9)
    {
      uint64_t v10 = [v9 state];
      long long v11 = [v10 transactionState];
      unsigned int v12 = [v11 isRelatedToState:v5];

      if (v12) {
        id v13 = *(id *)(a1 + 72);
      }
      else {
        id v13 = 0;
      }
    }
    else
    {
      id v13 = 0;
    }
    objc_storeStrong((id *)(a1 + 56), a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    if (v13)
    {
      id v14 = +[PKExpressTransactionBannerHandleState createForTransactionState:v5];
      [v13 setState:v14];
    }
    if (v6) {
      BOOL v15 = v8;
    }
    else {
      BOOL v15 = 0;
    }
    if (!v15) {
      goto LABEL_43;
    }
    unsigned __int8 v16 = atomic_load((unsigned __int8 *)(a1 + 48));
    id v17 = PKLogFacilityTypeGetObject();
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if ((v16 & 1) == 0)
    {
      if (v18)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter [express]: ERROR: pass for express transaction identified but passd ready!", buf, 2u);
      }
      id v19 = v17;
LABEL_42:

LABEL_43:
LABEL_44:

      return;
    }
    if (v18)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter [express]: pass for express transaction identified - presenting.", buf, 2u);
    }

    id v20 = (void *)PDOSTransactionCreate("PDRemoteInterfacePresenter");
    id v19 = sub_1002049B8((uint64_t)PDContaclessRemoteInterfacePresentationContext, v6, 0, 5);
    if (SBSIsSystemApertureAvailable())
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
        sub_100516C94();
      }

      if (sub_1002064CC((os_unfair_lock_s *)a1, 0))
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          sub_100516C2C();
        }
      }
      else
      {
        dispatch_block_t v21 = [*(id *)(a1 + 24) sortedPassUniqueIdentifiersForGroupContainingPassWithUniqueIdentifier:v6];
        id v22 = [v21 count];

        if ((unint64_t)v22 < 2)
        {
          int v23 = 1;
LABEL_38:
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          void v26[2] = sub_100206E00;
          v26[3] = &unk_10072E4F8;
          id v27 = v20;
          id v24 = v20;
          uint32_t v25 = objc_retainBlock(v26);
          if (v23) {
            sub_100206E8C(a1, v19, v25);
          }
          else {
            sub_100205F78(a1, v19, v25);
          }

          goto LABEL_42;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          sub_100516C60();
        }
      }
    }
    int v23 = 0;
    goto LABEL_38;
  }
  __break(1u);
}

BOOL sub_100206DAC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isIgnorable])
  {
    BOOL v3 = 0;
  }
  else
  {
    id v4 = [v2 passUniqueIdentifier];
    BOOL v3 = v4 != 0;
  }
  return v3;
}

void sub_100206E00(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter [express]: UI not present - attempt to fallback to foreground app.", v3, 2u);
    }

    notify_post((const char *)[PKNotifyEventOutstandingExpressTransactionReady cStringUsingEncoding:4]);
  }
}

void sub_100206E8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = PDExpressTransactionQueue();
    dispatch_assert_queue_V2(v7);

    BOOL v8 = (void *)PDOSTransactionCreate("PDRemoteInterfacePresenter");
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_100516CC8();
    }

    uint64_t v10 = *(void **)(a1 + 80);
    if (v10)
    {
      id v11 = v10;
      unsigned int v12 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = 0;

      id v13 = *(NSObject **)(a1 + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10020DD78;
      block[3] = &unk_10072E1E8;
      id v31 = v11;
      id v14 = v11;
      dispatch_async(v13, block);
    }
    if (!v5) {
      goto LABEL_25;
    }
    for (uint64_t i = (void *)v5[1]; ; uint64_t i = 0)
    {
      id v16 = i;
      if (!sub_10020D92C(a1, v5, v16 != 0, 1uLL)) {
        break;
      }
      if (!v16
        || (id v17 = +[PKExpressTransactionBannerHandleRequest createForPassUniqueIdentifier:v16]) == 0)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v33 = v16;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: failed to create contactless banner handle for pass: %@.", buf, 0xCu);
        }

        break;
      }
      BOOL v18 = v17;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
      id v19 = *(void **)(a1 + 72);
      if (v19)
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          id v33 = v19;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: inconsistency error - already presented banner handle %p - invalidating.", buf, 0xCu);
        }

        [*(id *)(a1 + 72) invalidate];
      }
      if (*(void *)(a1 + 56))
      {
        id v20 = +[PKBannerHandle createHandleForRequest:v18 queue:*(void *)(a1 + 16)];
        dispatch_block_t v21 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = v20;

        id v22 = *(void **)(a1 + 72);
        id v23 = +[PKExpressTransactionBannerHandleState createForTransactionState:*(void *)(a1 + 56)];
        [v22 setState:v23];

        id v24 = *(id *)(a1 + 72);
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        void v26[2] = sub_10020DD80;
        v26[3] = &unk_1007402F0;
        void v26[4] = a1;
        id v27 = v8;
        id v28 = v24;
        id v29 = v6;
        id v25 = v24;
        [v25 displayWithCompletion:v26];

        goto LABEL_22;
      }
      __break(1u);
LABEL_25:
      ;
    }
    if (v6) {
      (*((void (**)(id, void))v6 + 2))(v6, 0);
    }
LABEL_22:
  }
}

void sub_100207204(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (!a1)
  {
LABEL_13:

    return;
  }
  if (v7)
  {
    if (![v7 isProcessing])
    {
      id v9 = [v7 standaloneTransactionType];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = [v7 passUniqueIdentifier];
        if (v11)
        {
          unsigned int v12 = (void *)v11;
          id v13 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472;
          v37[2] = sub_100207520;
          v37[3] = &unk_10073FEF0;
          void v37[4] = a1;
          id v39 = v10;
          id v14 = v12;
          id v38 = v14;
          [v13 addOperation:v37];
          v35[0] = 0;
          v35[1] = v35;
          void v35[2] = 0x3032000000;
          v35[3] = sub_1000209EC;
          void v35[4] = sub_100020FE8;
          id v36 = 0;
          BOOL v15 = [*(id *)(a1 + 24) passWithUniqueIdentifier:v14];
          id v16 = [v15 secureElementPass];

          id v17 = [v7 terminalReaderIdentifier];
          BOOL v18 = objc_msgSend(v17, "pk_decodeHexadecimal");

          if (v16)
          {
            unsigned int v19 = [v16 isHomeKeyPass];
            if (v18) {
              unsigned int v20 = v19;
            }
            else {
              unsigned int v20 = 0;
            }
            if (v20 == 1)
            {
              v34[0] = _NSConcreteStackBlock;
              v34[1] = 3221225472;
              v34[2] = sub_100207928;
              v34[3] = &unk_100730D50;
              v34[4] = v18;
              void v34[5] = v35;
              [v13 addOperation:v34];
            }
          }

          dispatch_block_t v21 = (void *)PDOSTransactionCreate("PDRemoteInterfacePresenter");
          id v22 = +[NSNull null];
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          void v26[2] = sub_100207A74;
          v26[3] = &unk_10073FF40;
          id v23 = v21;
          id v27 = v23;
          uint64_t v28 = a1;
          id v24 = v14;
          char v33 = a3;
          id v29 = v24;
          id v31 = v35;
          id v32 = v10;
          id v30 = v8;
          id v25 = [v13 evaluateWithInput:v22 completion:v26];

          _Block_object_dispose(v35, 8);
          goto LABEL_13;
        }
      }
    }
  }
  __break(1u);
}

void sub_100207500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100207520(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ((sub_100207784(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0 || !PKDeviceLocked())
  {
LABEL_10:
    v7[2](v7, v6, 0);
    goto LABEL_11;
  }
  if (!PKIsPairedWithWatch())
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v15 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
      uint64_t v16 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      id v23 = v15;
      __int16 v24 = 2112;
      uint64_t v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No watch was connected presenting UI for standalone transaction:%@ for pass: %@", buf, 0x16u);
    }
    goto LABEL_10;
  }
  id v8 = objc_alloc_init(off_1008064C8());
  id v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    id v23 = v10;
    __int16 v24 = 2112;
    uint64_t v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Asking watch to present UI for standalone transaction:%@ for pass: %@", buf, 0x16u);
  }
  unsigned int v12 = *(void **)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1002077E0;
  v17[3] = &unk_10073FEC8;
  uint64_t v21 = v13;
  id v18 = v12;
  unsigned int v20 = v7;
  id v19 = v6;
  [v8 presentStandaloneTransaction:v13 forPassUniqueIdentifier:v18 completion:v17];

LABEL_11:
}

uint64_t sub_100207784(os_unfair_lock_s *a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (a1)
  {
    id v2 = a1 + 2;
    os_unfair_lock_lock(a1 + 2);
    if ([*(id *)(v1 + 64) count]) {
      uint64_t v1 = 1;
    }
    else {
      uint64_t v1 = *(void *)(v1 + 72) != 0;
    }
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

uint64_t sub_1002077E0(void *a1, uint64_t a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      id v6 = +[NSNumber numberWithInteger:a1[7]];
      uint64_t v7 = a1[4];
      int v11 = 138412546;
      unsigned int v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      id v8 = "Watch was able to present UI for standalone transaction:%@ for pass: %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v11, 0x16u);
    }
  }
  else if (v5)
  {
    id v6 = +[NSNumber numberWithInteger:a1[7]];
    uint64_t v9 = a1[4];
    int v11 = 138412546;
    unsigned int v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    id v8 = "Watch was unable to present UI for standalone transaction:%@ for pass: %@";
    goto LABEL_6;
  }

  return (*(uint64_t (**)(void, void, uint64_t))(a1[6] + 16))(a1[6], a1[5], a2);
}

void sub_100207928(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init((Class)PKHMHomeManager);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100207A10;
  v13[3] = &unk_10073FF18;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v9;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 fetchLockAccessoryWithTerminalReaderIdentifier:v10 withCompletion:v13];
}

uint64_t sub_100207A10(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = [a2 name];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    BOOL v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v6();
}

void sub_100207A74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 isCanceled])
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if (!v5) {
      return;
    }
    id v6 = *(void (**)(void))(v5 + 16);
    goto LABEL_14;
  }
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 40) + 48));
  if ((v7 & 1) != 0 && *(void *)(a1 + 48))
  {
    id v8 = (void *)sub_100207D04(PKServiceBundleIdentifier);
    uint64_t v9 = [v8 currentState];
    int v10 = sub_100207C88(v9);

    int v11 = sub_100207784(*(os_unfair_lock_s **)(a1 + 40));
    id v12 = (void *)sub_100207D04(PKCredentialSharingUIViewServiceBundleIdentifier);
    __int16 v13 = [v12 currentState];
    if (sub_100207C88(v13))
    {

LABEL_11:
      uint64_t v17 = *(void *)(a1 + 40);
      id v18 = *(void **)(a1 + 48);
      uint64_t v19 = *(void *)(a1 + 72);
      unsigned int v20 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100207D68;
      v22[3] = &unk_10072FDC8;
      id v23 = *(id *)(a1 + 32);
      id v24 = *(id *)(a1 + 56);
      sub_100207D84(v17, v18, v20, v19, v10, v22);

      return;
    }
    id v14 = (void *)sub_100207D04(PKSubcredentialUIServiceBundleIdentifier);
    id v15 = [v14 currentState];
    int v16 = sub_100207C88(v15);

    if (v16 || !(v10 | v11) || *(unsigned char *)(a1 + 80)) {
      goto LABEL_11;
    }
  }
  uint64_t v21 = *(void *)(a1 + 56);
  if (!v21) {
    return;
  }
  id v6 = *(void (**)(void))(v21 + 16);
LABEL_14:
  v6();
}

uint64_t sub_100207C88(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1
    && ([v1 endowmentNamespaces],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        unsigned int v4 = [v3 containsObject:FBSSceneVisibilityEndowmentNamespace],
        v3,
        v4))
  {
    [v2 taskState];
    uint64_t IsRunning = RBSTaskStateIsRunning();
  }
  else
  {
    uint64_t IsRunning = 0;
  }

  return IsRunning;
}

uint64_t sub_100207D04(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = +[RBSProcessPredicate predicateMatchingBundleIdentifier:a1];
  uint64_t v2 = +[RBSProcessHandle handleForPredicate:v1 error:0];

  return v2;
}

uint64_t sub_100207D68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

void sub_100207D84(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a6;
  if (a1)
  {
    id v14 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020DC30;
    block[3] = &unk_1007402C8;
    id v16 = v11;
    id v17 = v12;
    uint64_t v19 = a4;
    char v20 = a5;
    id v18 = v13;
    dispatch_async(v14, block);
  }
}

void sub_100207E80(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    id v13 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100207F90;
    block[3] = &unk_100731F38;
    void block[4] = a1;
    id v15 = v11;
    id v16 = v9;
    id v17 = v10;
    id v18 = v12;
    dispatch_async(v13, block);
  }
}

void sub_100207F90(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 9uLL, 0))
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 120);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = *(void *)(a1 + 32);
      unsigned int v4 = *(void **)(v3 + 120);
      *(void *)(v3 + 120) = 0;
    }
    id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100208740;
    v18[3] = &unk_10072E5C0;
    void v18[4] = *(void *)(a1 + 32);
    [v5 addOperation:v18];
    id v6 = +[NSNull null];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_100208950;
    v13[3] = &unk_10073FFB0;
    unsigned __int8 v7 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v7;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    id v17 = *(id *)(a1 + 64);
    uint64_t v8 = [v5 evaluateWithInput:v6 completion:v13];
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 120);
    *(void *)(v9 + 120) = v8;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 64);
    if (v11)
    {
      id v12 = *(void (**)(void))(v11 + 16);
      v12();
    }
  }
}

BOOL sub_100208170(BOOL a1, unint64_t a2, void **a3)
{
  BOOL v3 = a1;
  if (a1)
  {
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_10020D8C8;
    v41[3] = &unk_1007402A0;
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v42 = v6;
    unsigned __int8 v7 = objc_retainBlock(v41);
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v3 + 48));
    ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, (v8 & 1) == 0, @"Protected Data is not available");
    int v9 = off_1008064D0();
    uint64_t v10 = sub_1002064CC((os_unfair_lock_s *)v3, a2);
    unsigned __int8 v11 = atomic_load(byte_100808D08);
    if ((v11 & 1) == 0)
    {
      os_unfair_lock_lock(&stru_100808D0C);
      if (dword_1008065F8 == -1)
      {
        unsigned __int8 v12 = atomic_load(byte_100808D08);
        if ((v12 & 1) == 0)
        {
          uint64_t v40 = a3;
          id v13 = PDDefaultQueue();
          uint32_t v39 = notify_register_dispatch("com.apple.springboard.finishedstartup", &dword_1008065F8, v13, &stru_100740618);

          if (v39)
          {
            dword_1008065F8 = -1;
          }
          else
          {
            byte_100808D10 = 0;
            sub_100210FD0();
          }
          a3 = v40;
        }
      }
      else
      {
        sub_100210FD0();
      }
      os_unfair_lock_unlock(&stru_100808D0C);
    }
    ((void (*)(void *, void, const __CFString *))v7[2])(v7, v9 ^ 1u, @"Setup Assistant has not completed");
    ((void (*)(void *, uint64_t, const __CFString *))v7[2])(v7, v10, @"Interface is currently active");
    unsigned __int8 v14 = atomic_load(byte_100808D08);
    ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, (v14 & 1) == 0, @"SpringBoard is not ready");
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v3 + 50));
    ((void (*)(void *, void, const __CFString *))v7[2])(v7, v15 & 1, @"Lost Mode is active");
    switch(a2)
    {
      case 0uLL:
      case 1uLL:
        BOOL v19 = PKNearFieldRadioIsAvailable() == 0;
        ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, v19, @"Near Field Radio is not available");
        BOOL v20 = PKSecureElementIsAvailable() == 0;
        ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, v20, @"Secure Element does not exist");
        BOOL v21 = PDContactlessInterfaceAvailable();
        ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, !v21, @"Contactless interface is not available");
        ((void (*)(void *, void, const __CFString *))v7[2])(v7, +[PKWalletVisibility isWalletVisible] ^ 1, @"Wallet is not visible");
        id v22 = (void *)sub_100207D04(PKServiceBundleIdentifier);
        id v23 = [v22 currentState];

        if (sub_100207C88(v23)) {
          uint64_t v24 = PKDeviceLocked() ^ 1;
        }
        else {
          uint64_t v24 = 0;
        }
        ((void (*)(void *, uint64_t, const __CFString *))v7[2])(v7, v24, @"Passbook is Foregrounded");

        break;
      case 2uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xBuLL:
      case 0xCuLL:
        BOOL v16 = PKSecureElementIsAvailable() == 0;
        ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, v16, @"Secure Element does not exist");
        ((void (*)(void *, id, const __CFString *))v7[2])(v7, +[PKSecureElement isInFailForward], @"Secure Element in fail forward");
        goto LABEL_13;
      case 3uLL:
        BOOL v25 = PKSecureElementIsAvailable() == 0;
        ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, v25, @"Secure Element does not exist");
        ((void (*)(void *, id, const __CFString *))v7[2])(v7, +[PKSecureElement isInFailForward], @"Secure Element in fail forward");
        BOOL v26 = !PDContactlessInterfaceAvailable();
        ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, v26, @"Contactless interface is not available");
        break;
      case 4uLL:
LABEL_13:
        uint64_t v17 = PKDeviceLocked();
        ((void (*)(void *, uint64_t, const __CFString *))v7[2])(v7, v17, @"Device is locked");
        break;
      case 0xAuLL:
      case 0xDuLL:
      case 0xEuLL:
        BOOL v18 = PKSecureElementIsAvailable() == 0;
        ((void (*)(void *, BOOL, const __CFString *))v7[2])(v7, v18, @"Secure Element does not exist");
        ((void (*)(void *, id, const __CFString *))v7[2])(v7, +[PKSecureElement isInFailForward], @"Secure Element in fail forward");
        break;
      default:
        break;
    }
    id v27 = [v6 count];
    BOOL v3 = v27 == 0;
    if (v27)
    {
      id v28 = objc_alloc((Class)NSString);
      if (a2 >= 0xF)
      {
        __break(1u);
        JUMPOUT(0x100208704);
      }
      id v29 = v28;
      uint64_t v30 = (uint64_t)*(&off_100740678 + a2);
      id v31 = [v6 componentsJoinedByString:@", "];
      id v32 = [v29 initWithFormat:@"Cannot Present Remote Interface of type: %@ for the following reason(s): %@", v30, v31];

      char v33 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v46 = v32;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }

      if (a3)
      {
        NSErrorUserInfoKey v43 = NSLocalizedDescriptionKey;
        id v44 = v32;
        +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
        v35 = id v34 = a3;
        uint64_t v36 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:v35];
        id v37 = *v34;
        *id v34 = (void *)v36;
      }
    }
  }
  return v3;
}

void sub_100208740(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if ((PKDeviceLocked() & 1) != 0 || PDDeviceUILocked())
  {
    id v8 = v6;
    id v7 = v5;
    SBSRequestPasscodeUnlockUI();
  }
  else
  {
    (*((void (**)(id, id, void))v6 + 2))(v6, v5, 0);
  }
}

void sub_10020882C(uint64_t a1, char a2)
{
  unsigned int v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002088E8;
  v7[3] = &unk_1007367B8;
  id v10 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  char v11 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, v7);
}

uint64_t sub_1002088E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v3 = !sub_100208170(*(void *)(a1 + 40), 9uLL, 0);
  }
  else {
    BOOL v3 = 1;
  }
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, BOOL))(v1 + 16);
  return v4(v1, v2, v3);
}

void sub_100208950(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = a1[4];
  if (*(id *)(v9 + 120) == v7)
  {
    *(void *)(v9 + 120) = 0;
  }
  if ([v8 isCanceled])
  {
    uint64_t v10 = a1[8];
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
  else
  {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    unsigned __int8 v12 = v11;
    uint64_t v13 = a1[5];
    if (v13) {
      [v11 setObject:v13 forKeyedSubscript:PKPassbookUIServiceOrientation];
    }
    uint64_t v14 = a1[6];
    if (v14) {
      [v12 setObject:v14 forKeyedSubscript:PKPassbookUIServiceIssuerBindingIssuerData];
    }
    uint64_t v15 = a1[7];
    if (v15) {
      [v12 setObject:v15 forKeyedSubscript:PKPassbookUIServiceIssuerBindingSignatureData];
    }
    id v16 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v17 = [v16 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKAddPassesRemoteAlertViewController"];
    id v18 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v18 setUserInfo:v12];
    BOOL v19 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v17, v18, 0);
    BOOL v20 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v19, 9uLL);
    BOOL v21 = (void *)a1[8];
    if (v21)
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100208B5C;
      v22[3] = &unk_10072F788;
      id v23 = v21;
      sub_100224844((uint64_t)v20, v22);
    }
    sub_100208B70(a1[4], v20);
    sub_1002245F4((uint64_t)v20, &stru_10073FF88);
  }
}

uint64_t sub_100208B5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100208B70(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (!a1) {
    goto LABEL_4;
  }
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    [*(id *)(a1 + 64) addObject:v4];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100210D40;
    v5[3] = &unk_10072E198;
    void v5[4] = a1;
    id v6 = v4;
    sub_100224844((uint64_t)v6, v5);

LABEL_4:
    return;
  }
  __break(1u);
}

void sub_100208C34(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Issuer Binding Remote Alert presented with success: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100208CF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    id v8 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100208DBC;
    block[3] = &unk_1007315D8;
    void block[4] = a1;
    id v11 = v6;
    id v10 = v5;
    dispatch_async(v8, block);
  }
}

void sub_100208DBC(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 0xAuLL, 0))
  {
    BOOL v2 = *(void **)(*(void *)(a1 + 32) + 128);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = *(void *)(a1 + 32);
      CFStringRef v4 = *(void **)(v3 + 128);
      *(void *)(v3 + 12_Block_object_dispose(&STACK[0x390], 8) = 0;
    }
    v21[0] = 0;
    v21[1] = v21;
    v21[2] = 0x3032000000;
    v21[3] = sub_1000209EC;
    void v21[4] = sub_100020FE8;
    id v22 = 0;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10020904C;
    v20[3] = &unk_10073A648;
    void v20[4] = v21;
    id v5 = objc_retainBlock(v20);
    id v6 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_10020909C;
    void v19[3] = &unk_10072E610;
    void v19[4] = *(void *)(a1 + 32);
    void v19[5] = v21;
    [v6 addOperation:v19];
    id v7 = +[NSNull null];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10020926C;
    v15[3] = &unk_100740028;
    id v8 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 32);
    id v16 = v8;
    uint64_t v9 = v5;
    id v17 = v9;
    id v18 = *(id *)(a1 + 48);
    uint64_t v10 = [v6 evaluateWithInput:v7 completion:v15];
    uint64_t v11 = *(void *)(a1 + 32);
    unsigned __int8 v12 = *(void **)(v11 + 128);
    *(void *)(v11 + 12_Block_object_dispose(&STACK[0x390], 8) = v10;

    _Block_object_dispose(v21, 8);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      uint64_t v14 = *(void (**)(void))(v13 + 16);
      v14();
    }
  }
}

void sub_100209034(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10020904C(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) invalidate];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

void sub_10020909C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init((Class)SFClient);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100209194;
  v15[3] = &unk_10073FFD8;
  uint64_t v12 = *(void *)(a1 + 32);
  id v16 = v6;
  id v17 = v7;
  void v15[4] = v12;
  id v13 = v6;
  id v14 = v7;
  [v11 startProxCardTransactionWithOptions:31 completion:v15];
}

void sub_100209194(uint64_t a1, char a2)
{
  CFStringRef v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020924C;
  block[3] = &unk_100736830;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  char v8 = a2;
  dispatch_async(v4, block);
}

uint64_t sub_10020924C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), *(unsigned char *)(a1 + 48) == 0);
}

void sub_10020926C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(id *)(v9 + 128) == v7)
  {
    *(void *)(v9 + 12_Block_object_dispose(&STACK[0x390], 8) = 0;
  }
  if ([v8 isCanceled])
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
  else
  {
    id v11 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v12 = [v11 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKProxCardAlertViewController"];
    id v13 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    uint64_t v23 = PKPassbookUIServiceProxCardRequest;
    id v14 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 40) requiringSecureCoding:1 error:0];
    uint64_t v24 = v14;
    uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];

    [v13 setUserInfo:v15];
    id v16 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v12, v13, 0);
    id v17 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v16, 0xAuLL);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100209510;
    v20[3] = &unk_100740000;
    id v21 = *(id *)(a1 + 48);
    id v22 = *(id *)(a1 + 56);
    sub_100224844((uint64_t)v17, v20);
    sub_100208B70(*(void *)(a1 + 32), v17);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100209570;
    v18[3] = &unk_10072E4F8;
    id v19 = *(id *)(a1 + 40);
    sub_1002245F4((uint64_t)v17, v18);
  }
}

uint64_t sub_100209510(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_100209570(uint64_t a1, int a2)
{
  CFStringRef v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) proxCardType];
    uint64_t v5 = PKProxCardTypeToString();
    id v6 = (void *)v5;
    CFStringRef v7 = @"NO";
    if (a2) {
      CFStringRef v7 = @"YES";
    }
    int v8 = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    CFStringRef v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@ Remote Alert presented with success: %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_100209660(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    CFStringRef v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100209728;
    block[3] = &unk_10072E9D8;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_100209728(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 0xCuLL, 0))
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 136);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = *(void *)(a1 + 32);
      CFStringRef v4 = *(void **)(v3 + 136);
      *(void *)(v3 + 136) = 0;
    }
    id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1002098E0;
    v16[3] = &unk_10072E5C0;
    void v16[4] = *(void *)(a1 + 32);
    [v5 addOperation:v16];
    id v6 = +[NSNull null];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_100209AF0;
    v13[3] = &unk_100732FA8;
    CFStringRef v7 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v7;
    id v15 = *(id *)(a1 + 48);
    uint64_t v8 = [v5 evaluateWithInput:v6 completion:v13];
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 136);
    *(void *)(v9 + 136) = v8;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      id v12 = *(void (**)(void))(v11 + 16);
      v12();
    }
  }
}

void sub_1002098E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if ((PKDeviceLocked() & 1) != 0 || PDDeviceUILocked())
  {
    id v8 = v6;
    id v7 = v5;
    SBSRequestPasscodeUnlockUI();
  }
  else
  {
    (*((void (**)(id, id, void))v6 + 2))(v6, v5, 0);
  }
}

void sub_1002099CC(uint64_t a1, char a2)
{
  CFStringRef v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100209A88;
  v7[3] = &unk_1007367B8;
  id v10 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  char v11 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, v7);
}

uint64_t sub_100209A88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v3 = !sub_100208170(*(void *)(a1 + 40), 0xCuLL, 0);
  }
  else {
    BOOL v3 = 1;
  }
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t, BOOL))(v1 + 16);
  return v4(v1, v2, v3);
}

void sub_100209AF0(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = a1[4];
  if (*(id *)(v9 + 136) == v7)
  {
    *(void *)(v9 + 136) = 0;
  }
  if ([v8 isCanceled])
  {
    uint64_t v10 = a1[6];
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
  else
  {
    id v11 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v12 = [v11 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKProvisioningContinuityAlertViewController"];
    id v13 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v13 setUserInfo:a1[5]];
    id v14 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v12, v13, 0);
    id v15 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v14, 0xCuLL);
    id v16 = (void *)a1[6];
    if (v16)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_100209C94;
      v17[3] = &unk_10072F788;
      id v18 = v16;
      sub_100224844((uint64_t)v15, v17);
    }
    sub_100208B70(a1[4], v15);
    sub_1002245F4((uint64_t)v15, &stru_100740048);
  }
}

uint64_t sub_100209C94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100209CA8(id a1, BOOL a2)
{
  BOOL v2 = a2;
  BOOL v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Provisioning Continuity Remote Alert presented with success: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100209D68(uint64_t a1, void *a2)
{
  if (a1) {
    sub_100205C84(a1, a2, 6, 0);
  }
}

void sub_100209D7C(uint64_t a1, void *a2, char a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (a1)
  {
    if (a3)
    {
      uint64_t v18 = 2;
    }
    else
    {
      id v19 = [v13 requestType];
      uint64_t v18 = 2;
      if (v19 == (id)1) {
        uint64_t v18 = 4;
      }
    }
    BOOL v20 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100209ED4;
    block[3] = &unk_1007316A0;
    void block[4] = a1;
    uint64_t v26 = v18;
    id v22 = v13;
    char v27 = a3;
    id v23 = v15;
    id v24 = v14;
    id v25 = v17;
    dispatch_async(v20, block);
  }
}

void sub_100209ED4(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), *(void *)(a1 + 72), 0))
  {
    id v2 = objc_alloc((Class)NSMutableDictionary);
    v42[0] = @"paymentRequest";
    id v38 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 40) requiringSecureCoding:1 error:0];
    v43[0] = v38;
    v42[1] = @"awaitingRemoteNetworkPaymentRequest";
    id v37 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
    v43[1] = v37;
    v42[2] = @"hostIdentifier";
    BOOL v3 = [*(id *)(a1 + 48) identifier];
    v43[2] = v3;
    v42[3] = @"hostSceneIdentifier";
    uint64_t v4 = [*(id *)(a1 + 48) sceneIdentifier];
    int v5 = (void *)v4;
    if (v4) {
      CFStringRef v6 = (const __CFString *)v4;
    }
    else {
      CFStringRef v6 = &stru_10075AAD8;
    }
    v43[3] = v6;
    v42[4] = @"hostLocalizedAppName";
    id v7 = [*(id *)(a1 + 48) applicationName];
    v43[4] = v7;
    void v42[5] = @"hostBundleIdentifier";
    uint64_t v8 = [*(id *)(a1 + 48) bundleIdentifier];
    uint64_t v9 = (void *)v8;
    if (v8) {
      CFStringRef v10 = (const __CFString *)v8;
    }
    else {
      CFStringRef v10 = &stru_10075AAD8;
    }
    void v43[5] = v10;
    v42[6] = @"hostApplicationIdentifier";
    uint64_t v11 = [*(id *)(a1 + 48) applicationIdentifier];
    id v12 = (void *)v11;
    if (v11) {
      CFStringRef v13 = (const __CFString *)v11;
    }
    else {
      CFStringRef v13 = &stru_10075AAD8;
    }
    v43[6] = v13;
    v42[7] = @"hostSceneBundleIdentifier";
    uint64_t v14 = [*(id *)(a1 + 48) sceneBundleIdentifier];
    id v15 = (void *)v14;
    if (v14) {
      CFStringRef v16 = (const __CFString *)v14;
    }
    else {
      CFStringRef v16 = &stru_10075AAD8;
    }
    v43[7] = v16;
    v42[8] = @"hostTeamID";
    uint64_t v17 = [*(id *)(a1 + 48) teamID];
    uint64_t v18 = (void *)v17;
    if (v17) {
      CFStringRef v19 = (const __CFString *)v17;
    }
    else {
      CFStringRef v19 = &stru_10075AAD8;
    }
    v43[8] = v19;
    BOOL v20 = +[NSDictionary dictionaryWithObjects:v43 forKeys:v42 count:9];
    id v21 = [v2 initWithDictionary:v20];

    id v22 = v21;
    id v23 = [*(id *)(a1 + 48) analyticsSubject];
    if ([v23 length])
    {
      [v21 setObject:v23 forKey:PKPassbookUIServiceAnalyticsSubject];
      id v24 = [*(id *)(a1 + 48) analyticsArchivedSessionToken];
      if (v24) {
        [v22 setObject:v24 forKey:PKPassbookUIServiceAnalyticsSessionTokenArchive];
      }
    }
    id v25 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v26 = [v25 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKPaymentAuthorizationRemoteAlertViewController"];
    id v27 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v27 setUserInfo:v22];
    id v28 = objc_alloc_init((Class)SBSRemoteAlertActivationContext);
    [v28 setActivatingForSiri:1];
    [v28 setShouldStashPictureInPictureIfNeeded:1];
    if ([*(id *)(a1 + 48) omitPresentationTarget])
    {
      id v29 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Payment sheet requested no presentation target required.", buf, 2u);
      }
    }
    else
    {
      id v29 = +[BSProcessHandle processHandleForNSXPCConnection:*(void *)(a1 + 56)];
      id v32 = +[SBSRemoteAlertPresentationTargetPredicate predicateForProcess:v29];
      id v33 = [objc_alloc((Class)SBSRemoteAlertPresentationTarget) initWithTargetPredicate:v32];
      [v33 setShouldDismissOnUILock:1];
      if (PKIsPad()) {
        [v33 setRequiresFullscreenPresentation:1];
      }
      [v28 setPresentationTarget:v33];
    }
    id v34 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v26, v27, v28);
    uint64_t v35 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v34, *(void *)(a1 + 72));
    uint64_t v36 = sub_100223A48((uint64_t)PDRemoteAlertActivationTracker, &stru_100740068, &stru_100740088, *(void **)(*(void *)(a1 + 32) + 16));
    sub_10022492C((uint64_t)v35, v36);

    sub_100208B70(*(void *)(a1 + 32), v35);
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_10020A4B0;
    v39[3] = &unk_10073E740;
    v39[4] = *(void *)(a1 + 32);
    id v40 = *(id *)(a1 + 64);
    sub_1002245F4((uint64_t)v35, v39);
  }
  else
  {
    uint64_t v30 = *(void *)(a1 + 64);
    if (v30)
    {
      id v31 = *(void (**)(void))(v30 + 16);
      v31();
    }
  }
}

void sub_10020A430(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v2 = (const __CFString *)PKDarwinNotificationEventInAppPresented;
  CFNotificationCenterPostNotification(DarwinNotifyCenter, v2, 0, 0, 1u);
}

void sub_10020A470(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v2 = (const __CFString *)PKDarwinNotificationEventInAppDismissed;
  CFNotificationCenterPostNotification(DarwinNotifyCenter, v2, 0, 0, 1u);
}

void sub_10020A4B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4) {
      return;
    }
    int v5 = 0;
  }
  else
  {
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 16), &stru_1007400A8);
    if (!*(void *)(a1 + 40)) {
      return;
    }
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    CFStringRef v6 = PKLocalizedPaymentString(@"IN_APP_PAYMENT_ERROR_INTERFACE_ACTIVATION_FAILED");
    uint64_t v9 = v6;
    id v7 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    int v5 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:v7];

    uint64_t v4 = *(void *)(a1 + 40);
  }
  (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, a2, v5);
}

void sub_10020A5E4(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v2 = (const __CFString *)PKDarwinNotificationEventInAppDismissed;
  CFNotificationCenterPostNotification(DarwinNotifyCenter, v2, 0, 0, 1u);
}

void sub_10020A624(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 48));
    if (v6)
    {
      sub_10020A6BC(a1, v7, v5);
    }
    else
    {
      sub_100206358(a1);
      if (v5) {
        (*((void (**)(id, void))v5 + 2))(v5, 0);
      }
    }
  }
}

void sub_10020A6BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)PDOSTransactionCreate("PDRemoteInterfacePresenter");
    NSErrorUserInfoKey v8 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10020FCB4;
    v10[3] = &unk_100730578;
    id v11 = v7;
    uint64_t v12 = a1;
    id v13 = v5;
    id v14 = v6;
    id v9 = v7;
    dispatch_async(v8, v10);
  }
}

void sub_10020A7B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    CFStringRef v10 = *(NSObject **)(a1 + 16);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10020A8A0;
    v11[3] = &unk_100730578;
    void v11[4] = a1;
    id v12 = v8;
    id v13 = v7;
    id v14 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_10020A8A0(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 5uLL, 0))
  {
    CFStringRef v2 = *(void **)(*(void *)(a1 + 32) + 88);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(v3 + 88);
      *(void *)(v3 + 8_Block_object_dispose(&STACK[0x390], 8) = 0;
    }
    id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10020AA6C;
    v17[3] = &unk_10072E5C0;
    void v17[4] = *(void *)(a1 + 32);
    [v5 addOperation:v17];
    id v6 = +[NSNull null];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10020AC7C;
    v13[3] = &unk_1007400F0;
    id v7 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v7;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    uint64_t v8 = [v5 evaluateWithInput:v6 completion:v13];
    uint64_t v9 = *(void *)(a1 + 32);
    CFStringRef v10 = *(void **)(v9 + 88);
    *(void *)(v9 + 8_Block_object_dispose(&STACK[0x390], 8) = v8;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      id v12 = *(void (**)(void))(v11 + 16);
      v12();
    }
  }
}

void sub_10020AA6C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if ((PKDeviceLocked() & 1) != 0 || PDDeviceUILocked())
  {
    id v8 = v6;
    id v7 = v5;
    SBSRequestPasscodeUnlockUI();
  }
  else
  {
    (*((void (**)(id, id, void))v6 + 2))(v6, v5, 0);
  }
}

void sub_10020AB58(uint64_t a1, char a2)
{
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10020AC14;
  v7[3] = &unk_1007367B8;
  id v10 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  char v11 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, v7);
}

uint64_t sub_10020AC14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v3 = !sub_100208170(*(void *)(a1 + 40), 5uLL, 0);
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, BOOL))(v1 + 16);
  return v4(v1, v2, v3);
}

void sub_10020AC7C(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = a1[4];
  if (*(id *)(v9 + 88) == v7)
  {
    *(void *)(v9 + 8_Block_object_dispose(&STACK[0x390], 8) = 0;
  }
  if ([v8 isCanceled])
  {
    uint64_t v10 = a1[7];
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
  else
  {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    id v12 = v11;
    uint64_t v13 = a1[5];
    if (v13) {
      [v11 setObject:v13 forKeyedSubscript:PKPassbookUIServiceOrientation];
    }
    uint64_t v14 = a1[6];
    if (v14) {
      [v12 setObject:v14 forKeyedSubscript:PKPassbookUIServiceVerificationResponseData];
    }
    id v15 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v16 = [v15 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKPeerPaymentIdentityVerificationRemoteAlertViewController"];
    id v17 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v17 setUserInfo:v12];
    uint64_t v18 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v16, v17, 0);
    CFStringRef v19 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v18, 5uLL);
    BOOL v20 = (void *)a1[7];
    if (v20)
    {
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10020AE6C;
      v21[3] = &unk_10072F788;
      id v22 = v20;
      sub_100224844((uint64_t)v19, v21);
    }
    sub_100208B70(a1[4], v19);
    sub_1002245F4((uint64_t)v19, &stru_1007400C8);
  }
}

uint64_t sub_10020AE6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10020AE80(id a1, BOOL a2)
{
  BOOL v2 = a2;
  BOOL v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Peer Payment identity verification presented with success: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10020AF40(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  id v25 = a2;
  id v17 = a3;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  id v23 = a10;
  if (a1)
  {
    id v24 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020B0EC;
    block[3] = &unk_100740160;
    void block[4] = a1;
    id v27 = v19;
    id v28 = v25;
    id v29 = v17;
    uint64_t v35 = a4;
    id v30 = v18;
    id v31 = v20;
    id v32 = v22;
    id v33 = v21;
    id v34 = v23;
    dispatch_async(v24, block);
  }
}

void sub_10020B0EC(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 6uLL, 0))
  {
    BOOL v2 = *(void **)(*(void *)(a1 + 32) + 96);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = *(void *)(a1 + 32);
      CFStringRef v4 = *(void **)(v3 + 96);
      *(void *)(v3 + 96) = 0;
    }
    id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_10020B324;
    v25[3] = &unk_10072E5C0;
    void v25[4] = *(void *)(a1 + 32);
    [v5 addOperation:v25];
    CFStringRef v6 = +[NSNull null];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10020B534;
    v15[3] = &unk_100740138;
    id v7 = *(void **)(a1 + 40);
    void v15[4] = *(void *)(a1 + 32);
    id v16 = v7;
    id v17 = *(id *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 104);
    id v18 = v8;
    uint64_t v24 = v9;
    id v19 = *(id *)(a1 + 64);
    id v20 = *(id *)(a1 + 72);
    id v21 = *(id *)(a1 + 80);
    id v22 = *(id *)(a1 + 88);
    id v23 = *(id *)(a1 + 96);
    uint64_t v10 = [v5 evaluateWithInput:v6 completion:v15];
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(v11 + 96);
    *(void *)(v11 + 96) = v10;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 96);
    if (v13)
    {
      uint64_t v14 = *(void (**)(void))(v13 + 16);
      v14();
    }
  }
}

void sub_10020B324(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if ((PKDeviceLocked() & 1) != 0 || PDDeviceUILocked())
  {
    id v8 = v6;
    id v7 = v5;
    SBSRequestPasscodeUnlockUI();
  }
  else
  {
    (*((void (**)(id, id, void))v6 + 2))(v6, v5, 0);
  }
}

void sub_10020B410(uint64_t a1, char a2)
{
  CFStringRef v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10020B4CC;
  v7[3] = &unk_1007367B8;
  id v10 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  char v11 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, v7);
}

uint64_t sub_10020B4CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v3 = !sub_100208170(*(void *)(a1 + 40), 6uLL, 0);
  }
  else {
    BOOL v3 = 1;
  }
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t, BOOL))(v1 + 16);
  return v4(v1, v2, v3);
}

void sub_10020B534(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(id *)(v9 + 96) == v7)
  {
    *(void *)(v9 + 96) = 0;
  }
  if ([v8 isCanceled])
  {
    uint64_t v10 = *(void *)(a1 + 96);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
  else
  {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    id v12 = v11;
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      [v11 setObject:v13 forKey:PKPassbookUIServiceOrientation];
    }
    uint64_t v14 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 48) requiringSecureCoding:1 error:0];
    [v12 setObject:v14 forKey:@"account"];

    id v15 = *(void **)(a1 + 56);
    if (v15)
    {
      id v16 = [v15 amount];
      [v12 setObject:v16 forKey:@"amount"];

      id v17 = [*(id *)(a1 + 56) currency];
      [v12 setObject:v17 forKey:@"currency"];
    }
    id v18 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 104)];
    [v12 setObject:v18 forKey:@"state"];

    uint64_t v19 = *(void *)(a1 + 64);
    if (v19) {
      [v12 setObject:v19 forKey:@"senderAddress"];
    }
    uint64_t v20 = *(void *)(a1 + 72);
    if (v20) {
      [v12 setObject:v20 forKey:@"hostSceneIdentifier"];
    }
    uint64_t v21 = *(void *)(a1 + 80);
    if (v21) {
      [v12 setObject:v21 forKey:@"hostBundleIdentifier"];
    }
    uint64_t v22 = *(void *)(a1 + 88);
    if (v22) {
      [v12 setObject:v22 forKey:@"hostSceneBundleIdentifier"];
    }
    id v23 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v24 = [v23 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKPeerPaymentRegistrationRemoteAlertViewController"];
    id v25 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v25 setUserInfo:v12];
    id v26 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v24, v25, 0);
    id v27 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v26, 6uLL);
    id v28 = *(void **)(a1 + 96);
    if (v28)
    {
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10020B824;
      void v29[3] = &unk_10072F788;
      id v30 = v28;
      sub_100224844((uint64_t)v27, v29);
    }
    sub_100208B70(*(void *)(a1 + 32), v27);
    sub_1002245F4((uint64_t)v27, &stru_100740110);
  }
}

uint64_t sub_10020B824(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10020B838(id a1, BOOL a2)
{
  BOOL v2 = a2;
  BOOL v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Peer Payment registration flow presented with success: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10020B8F8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (a1)
  {
    id v16 = *(NSObject **)(a1 + 16);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10020BA30;
    v17[3] = &unk_10072FEA8;
    void v17[4] = a1;
    id v18 = v11;
    id v19 = v12;
    id v20 = v13;
    id v21 = v14;
    id v22 = v15;
    dispatch_async(v16, v17);
  }
}

void sub_10020BA30(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 7uLL, 0))
  {
    BOOL v2 = *(void **)(*(void *)(a1 + 32) + 104);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = *(void *)(a1 + 32);
      CFStringRef v4 = *(void **)(v3 + 104);
      *(void *)(v3 + 104) = 0;
    }
    id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_10020BC24;
    void v19[3] = &unk_10072E5C0;
    void v19[4] = *(void *)(a1 + 32);
    [v5 addOperation:v19];
    CFStringRef v6 = +[NSNull null];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10020BE34;
    v13[3] = &unk_1007401A8;
    id v7 = *(void **)(a1 + 40);
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v7;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    id v17 = *(id *)(a1 + 64);
    id v18 = *(id *)(a1 + 72);
    uint64_t v8 = [v5 evaluateWithInput:v6 completion:v13];
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(v9 + 104);
    *(void *)(v9 + 104) = v8;
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 72);
    if (v11)
    {
      id v12 = *(void (**)(void))(v11 + 16);
      v12();
    }
  }
}

void sub_10020BC24(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if ((PKDeviceLocked() & 1) != 0 || PDDeviceUILocked())
  {
    id v8 = v6;
    id v7 = v5;
    SBSRequestPasscodeUnlockUI();
  }
  else
  {
    (*((void (**)(id, id, void))v6 + 2))(v6, v5, 0);
  }
}

void sub_10020BD10(uint64_t a1, char a2)
{
  CFStringRef v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10020BDCC;
  v7[3] = &unk_1007367B8;
  id v10 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  char v11 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, v7);
}

uint64_t sub_10020BDCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v3 = !sub_100208170(*(void *)(a1 + 40), 7uLL, 0);
  }
  else {
    BOOL v3 = 1;
  }
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t, BOOL))(v1 + 16);
  return v4(v1, v2, v3);
}

void sub_10020BE34(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(id *)(v9 + 104) == v7)
  {
    *(void *)(v9 + 104) = 0;
  }
  if ([v8 isCanceled])
  {
    uint64_t v10 = *(void *)(a1 + 72);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
  else
  {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    id v12 = [*(id *)(a1 + 40) absoluteString];
    [v11 setObject:v12 forKeyedSubscript:@"termsURL"];

    [v11 setObject:*(void *)(a1 + 48) forKeyedSubscript:@"termsIdentifier"];
    [v11 setObject:*(void *)(a1 + 56) forKeyedSubscript:@"passUniqueID"];
    uint64_t v13 = *(void *)(a1 + 64);
    if (v13) {
      [v11 setObject:v13 forKeyedSubscript:PKPassbookUIServiceOrientation];
    }
    id v14 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v15 = [v14 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKPeerPaymentTermsAndConditionsRemoteAlertViewController"];
    id v16 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v16 setUserInfo:v11];
    id v17 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v15, v16, 0);
    id v18 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v17, 7uLL);
    id v19 = *(void **)(a1 + 72);
    if (v19)
    {
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10020C058;
      v20[3] = &unk_10072F788;
      id v21 = v19;
      sub_100224844((uint64_t)v18, v20);
    }
    sub_100208B70(*(void *)(a1 + 32), v18);
    sub_1002245F4((uint64_t)v18, &stru_100740180);
  }
}

uint64_t sub_10020C058(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10020C06C(id a1, BOOL a2)
{
  BOOL v2 = a2;
  BOOL v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Peer Payment terms and confitions presented with success: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10020C12C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10020C204;
    v10[3] = &unk_100731AD8;
    void v10[4] = a1;
    id v11 = v7;
    uint64_t v13 = a2;
    id v12 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_10020C204(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 0xDuLL, 0))
  {
    id v2 = [*(id *)(a1 + 40) mutableCopy];
    BOOL v3 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
    [v2 setObject:v3 forKeyedSubscript:@"uiHost"];

    id v4 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v5 = [v4 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKPeerPaymentSenderRemoteAlertViewController"];
    id v6 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v6 setUserInfo:v2];
    id v7 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v5, v6, 0);
    id v8 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v7, 0xDuLL);
    uint64_t v9 = *(void **)(a1 + 48);
    if (v9)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10020C3D8;
      v12[3] = &unk_10072F788;
      id v13 = v9;
      sub_100224844((uint64_t)v8, v12);
    }
    sub_100208B70(*(void *)(a1 + 32), v8);
    sub_1002245F4((uint64_t)v8, &stru_1007401C8);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10)
    {
      id v11 = *(void (**)(void))(v10 + 16);
      v11();
    }
  }
}

uint64_t sub_10020C3D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10020C3EC(id a1, BOOL a2)
{
  BOOL v2 = a2;
  BOOL v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Peer Payment sender remote alert presented with success: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10020C4AC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10020C584;
    v10[3] = &unk_100731AD8;
    void v10[4] = a1;
    id v11 = v7;
    uint64_t v13 = a3;
    id v12 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_10020C584(BOOL *a1)
{
  if (sub_100208170(a1[4], 0xEuLL, 0))
  {
    BOOL v2 = *(void **)(a1[4] + 104);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = a1[4];
      CFStringRef v4 = *(void **)(v3 + 104);
      *(void *)(v3 + 104) = 0;
    }
    id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10020C740;
    v20[3] = &unk_10072E5C0;
    void v20[4] = a1[4];
    [v5 addOperation:v20];
    CFStringRef v6 = +[NSNull null];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10020C950;
    v16[3] = &unk_100740210;
    id v7 = (void *)a1[5];
    void v16[4] = a1[4];
    id v8 = v7;
    uint64_t v10 = (void *)a1[6];
    BOOL v9 = a1[7];
    id v17 = v8;
    BOOL v19 = v9;
    id v18 = v10;
    uint64_t v11 = [v5 evaluateWithInput:v6 completion:v16];
    uint64_t v12 = a1[4];
    uint64_t v13 = *(void **)(v12 + 104);
    *(void *)(v12 + 104) = v11;
  }
  else
  {
    uint64_t v14 = a1[6];
    if (v14)
    {
      id v15 = *(void (**)(void))(v14 + 16);
      v15();
    }
  }
}

void sub_10020C740(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  if ((PKDeviceLocked() & 1) != 0 || PDDeviceUILocked())
  {
    id v8 = v6;
    id v7 = v5;
    SBSRequestPasscodeUnlockUI();
  }
  else
  {
    (*((void (**)(id, id, void))v6 + 2))(v6, v5, 0);
  }
}

void sub_10020C82C(uint64_t a1, char a2)
{
  CFStringRef v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10020C8E8;
  v7[3] = &unk_1007367B8;
  id v10 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  char v11 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, v7);
}

uint64_t sub_10020C8E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v3 = !sub_100208170(*(void *)(a1 + 40), 0xEuLL, 0);
  }
  else {
    BOOL v3 = 1;
  }
  CFStringRef v4 = *(uint64_t (**)(uint64_t, uint64_t, BOOL))(v1 + 16);
  return v4(v1, v2, v3);
}

void sub_10020C950(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = a1[4];
  if (*(id *)(v9 + 104) == v7)
  {
    *(void *)(v9 + 104) = 0;
  }
  if ([v8 isCanceled])
  {
    uint64_t v10 = a1[6];
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0);
    }
  }
  else
  {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v12 = v11;
    uint64_t v13 = a1[5];
    if (v13) {
      [v11 setObject:v13 forKeyedSubscript:PKPassbookUIServiceOrientation];
    }
    uint64_t v14 = +[NSNumber numberWithUnsignedInteger:a1[7]];
    [v12 setObject:v14 forKeyedSubscript:@"uiHost"];

    id v15 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v16 = [v15 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKPeerPaymentReceiverRemoteAlertViewController"];
    id v17 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v17 setUserInfo:v12];
    id v18 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v16, v17, 0);
    BOOL v19 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v18, 0xEuLL);
    id v20 = (void *)a1[6];
    if (v20)
    {
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10020CB54;
      v21[3] = &unk_10072F788;
      id v22 = v20;
      sub_100224844((uint64_t)v19, v21);
    }
    sub_100208B70(a1[4], v19);
    sub_1002245F4((uint64_t)v19, &stru_1007401E8);
  }
}

uint64_t sub_10020CB54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10020CB68(id a1, BOOL a2)
{
  BOOL v2 = a2;
  BOOL v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (v2) {
      CFStringRef v4 = @"YES";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Peer Payment receiver remote alert presented with success: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10020CC28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (PKPassbookIsCurrentlyDeletedByUser())
    {
      PKShowAlertForWalletUninstalled();
    }
    else
    {
      if ([v3 length])
      {
        CFStringRef v4 = PKLocalizedPaymentString(@"REMOTE_SETUP_ALERT_BODY");
        int v5 = PKStringWithValidatedFormat();
      }
      else
      {
        int v5 = PKLocalizedPaymentString(@"REMOTE_SETUP_ALERT_BODY_NO_APP_NAME");
      }
      v10[0] = kCFUserNotificationAlertHeaderKey;
      CFStringRef v6 = PKLocalizedPaymentString(@"REMOTE_SETUP_ALERT_TITLE");
      v11[0] = v6;
      v11[1] = v5;
      v10[1] = kCFUserNotificationAlertMessageKey;
      v10[2] = kCFUserNotificationDefaultButtonTitleKey;
      id v7 = PKLocalizedPaymentString(@"REMOTE_SETUP_ALERT_ADD");
      v11[2] = v7;
      v10[3] = kCFUserNotificationOtherButtonTitleKey;
      id v8 = PKLocalizedPaymentString(@"REMOTE_SETUP_ALERT_CLOSE");
      v11[3] = v8;
      uint64_t v9 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:4];

      sub_10020CDE4(a1, v9, &stru_100740230);
    }
  }
}

void sub_10020CDD8(id a1)
{
}

void sub_10020CDE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = [a2 mutableCopy];
    [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:kCFUserNotificationAlertTopMostKey];
    [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:PKUserNotificationDontDismissOnUnlock];
    [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:PKUserNotificationAllowMenuButtonDismissal];
    char v7 = 0;
    atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 49), (unsigned __int8 *)&v7, 1u);
    if (v7)
    {
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Already presenting a setup alert - ignoring", v9, 2u);
      }
    }
    else
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10020CF58;
      v10[3] = &unk_100740258;
      void v10[4] = a1;
      id v11 = v5;
      +[PKUserNotificationAgent presentNotificationWithParameters:v6 responseHandler:v10];
    }
  }
}

uint64_t sub_10020CF58(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16))();
  }
  return result;
}

void sub_10020CF7C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    uint64_t v13 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020D08C;
    block[3] = &unk_100731F38;
    void block[4] = a1;
    id v15 = v11;
    id v16 = v9;
    id v17 = v10;
    id v18 = v12;
    dispatch_async(v13, block);
  }
}

void sub_10020D08C(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 32), 8uLL, 0))
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    [v2 setObject:*(void *)(a1 + 40) forKeyedSubscript:PKPassbookUIServiceOrientation];
    id v3 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 48) requiringSecureCoding:1 error:0];
    if (v3) {
      [v2 setObject:v3 forKey:@"paymentSetupRequest"];
    }
    id v4 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v5 = [v4 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKPaymentSetupRemoteAlertViewController"];
    id v6 = objc_alloc_init((Class)SBSRemoteAlertActivationContext);
    if (*(void *)(a1 + 56))
    {
      char v7 = +[BSProcessHandle processHandleForNSXPCConnection:](BSProcessHandle, "processHandleForNSXPCConnection:");
      id v8 = +[SBSRemoteAlertPresentationTargetPredicate predicateForProcess:v7];
      id v9 = [objc_alloc((Class)SBSRemoteAlertPresentationTarget) initWithTargetPredicate:v8];
      [v6 setPresentationTarget:v9];
    }
    id v10 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v10 setUserInfo:v2];
    id v11 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v5, v10, v6);
    id v12 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v11, 8uLL);
    sub_100208B70(*(void *)(a1 + 32), v12);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10020D2F4;
    v15[3] = &unk_1007304D8;
    id v16 = *(id *)(a1 + 64);
    sub_1002245F4((uint64_t)v12, v15);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 64);
    if (v13)
    {
      uint64_t v14 = *(void (**)(void))(v13 + 16);
      v14();
    }
  }
}

uint64_t sub_10020D2F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10020D30C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_4;
  }
  if (v5)
  {
    char v7 = (void *)PDOSTransactionCreate("PDRemoteInterfacePresenter");
    id v8 = *(NSObject **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10020D408;
    v10[3] = &unk_100730578;
    id v11 = v7;
    id v12 = v5;
    uint64_t v13 = a1;
    id v14 = v6;
    id v9 = v7;
    dispatch_async(v8, v10);

LABEL_4:
    return;
  }
  __break(1u);
}

void sub_10020D408(uint64_t a1)
{
  sub_10034CE24(*(os_unfair_lock_s **)(a1 + 40));
  id v2 = (id *)objc_claimAutoreleasedReturnValue();
  if (!v2) {
    __break(1u);
  }
  id v3 = v2;
  id v4 = sub_10034C024(v2);
  if (!v4)
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v17 = v10;
    id v11 = "PDRemoteInterfacePresenter [application_authorization]: handle %p not registered - missing configuration.";
    goto LABEL_13;
  }
  if (sub_100208170(*(void *)(a1 + 48), 0xBuLL, 0))
  {
    id v5 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v4, 0xBuLL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10020D680;
    v14[3] = &unk_10072E1E8;
    id v15 = *(id *)(a1 + 40);
    sub_100224844((uint64_t)v5, v14);
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 134218240;
      uint64_t v17 = v7;
      __int16 v18 = 2048;
      BOOL v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter [application_authorization]: registering handle %p with alert handle %p.", buf, 0x16u);
    }

    sub_100208B70(*(void *)(a1 + 48), v5);
    sub_1002245F4((uint64_t)v5, &stru_100740278);
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8) {
      (*(void (**)(void))(v8 + 16))();
    }

    goto LABEL_16;
  }
  id v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v17 = v12;
    id v11 = "PDRemoteInterfacePresenter [application_authorization]: handle %p not registered - presentation not allowed.";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
  }
LABEL_14:

  sub_10034C978(*(void *)(a1 + 40), 0);
  uint64_t v13 = *(void *)(a1 + 56);
  if (v13) {
    (*(void (**)(void))(v13 + 16))();
  }
LABEL_16:
}

void sub_10020D680(uint64_t a1)
{
}

void sub_10020D68C(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      __int16 v8 = 0;
      id v5 = "PDRemoteInterfacePresenter [application_authorization]: presented.";
      id v6 = (uint8_t *)&v8;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
    }
  }
  else if (v4)
  {
    __int16 v7 = 0;
    id v5 = "PDRemoteInterfacePresenter [application_authorization]: presentation failed.";
    id v6 = (uint8_t *)&v7;
    goto LABEL_6;
  }
}

void sub_10020D720(uint64_t a1)
{
  if (a1)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 48));
    BOOL v2 = PDUtilityQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020D7D4;
    block[3] = &unk_10072E1E8;
    void block[4] = a1;
    dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
    dispatch_async(v2, v3);
  }
}

void sub_10020D7D4(uint64_t a1)
{
}

void sub_10020D7DC(uint64_t a1)
{
  if (a1)
  {
    BOOL v2 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (*(unsigned char *)(a1 + 184))
    {
      *(unsigned char *)(a1 + 184) = 0;
      dispatch_block_t v3 = *(void **)(a1 + 192);
      if (v3)
      {
        id v4 = v3;
        id v5 = *(void **)(a1 + 192);
        *(void *)(a1 + 192) = 0;
      }
      id v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int16 v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Payment Interface Launch Detected", v7, 2u);
      }

      os_unfair_lock_unlock(v2);
      if (v3)
      {
        [v3 invalidate];
      }
    }
    else
    {
      os_unfair_lock_unlock(v2);
    }
  }
}

uint64_t sub_10020D8C8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = v5;
    if (a2)
    {
      id v8 = v5;
      id v5 = [*(id *)(a1 + 32) addObject:v5];
      id v6 = v8;
    }
  }
  else
  {
    __break(1u);
  }
  return _objc_release_x1(v5, v6);
}

uint64_t sub_10020D92C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v8 = a2;
  if (!a1) {
    goto LABEL_26;
  }
  BOOL v9 = sub_100208170(a1, a4, 0);
  if (v9 && (a3 & 1) == 0)
  {
    if (PDContactlessInterfaceAvailable())
    {
      BOOL v9 = 1;
    }
    else
    {
      a3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled((os_log_t)a3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)a3, OS_LOG_TYPE_DEFAULT, "Preventing presentation of Remote Interface of type: PDRemoteInterfaceTypeContactless because passes are not visible and no explicit identifier is requested.", buf, 2u);
      }

      BOOL v9 = 0;
    }
  }
  if (!v8)
  {
    unint64_t v10 = 0;
    if (v9) {
      goto LABEL_11;
    }
LABEL_26:
    uint64_t v17 = 0;
    goto LABEL_27;
  }
  unint64_t v10 = v8[3];
  if (!v9) {
    goto LABEL_26;
  }
LABEL_11:
  if (v10 == 4 || v10 == 1)
  {
    a3 = [*(id *)(a1 + 232) assertionsOfType:0];
    id v11 = [(id)a3 count];
    id v4 = [*(id *)(a1 + 232) assertionsOfType:5];
    BOOL v12 = (char *)[v4 count] + (void)v11 == 0;
  }
  else
  {
    BOOL v12 = 1;
  }
  if (v10 == 4 || v10 == 1)
  {
  }
  if (!v12)
  {
    __int16 v18 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Preventing presentation of Remote Interface of type: PDRemoteInterfaceTypeContactless because assertions are currently suppressing the interface.", v24, 2u);
    }

    [*(id *)(a1 + 232) logAssertionsOfTypes:&off_10078C2D0];
    goto LABEL_26;
  }
  if (v10 == 1)
  {
    id v13 = [objc_alloc((Class)CARSessionStatus) initAndWaitUntilSessionUpdated];
    id v14 = [v13 currentSession];

    if (v14
      && ([v14 configuration],
          id v15 = objc_claimAutoreleasedReturnValue(),
          id v16 = [v15 transportType],
          v15,
          (unint64_t)v16 <= 2))
    {
      id v20 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Preventing presentation of Remote Interface of type: PDRemoteInterfaceTypeContactless because of CarPlay.", v23, 2u);
      }

      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = 1;
    }

    if (a4) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v17 = 1;
    if (a4) {
      goto LABEL_27;
    }
  }
  if (v17)
  {
    uint64_t v17 = 1;
    if (v10 <= 6 && ((1 << v10) & 0x62) != 0)
    {
      uint64_t v17 = 1;
      if (sub_1002064CC((os_unfair_lock_s *)a1, 1))
      {
        id v21 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: preventing contactless remote alert in favor of contactless banner.", v22, 2u);
        }

        goto LABEL_26;
      }
    }
  }
LABEL_27:

  return v17;
}

void sub_10020DC30(uint64_t a1)
{
  id v2 = +[PKStandaloneTransactionBannerHandleRequest createForPassUniqueIdentifier:*(void *)(a1 + 32) withDisplayableName:*(void *)(a1 + 40) transactionType:*(void *)(a1 + 56) walletForeground:*(unsigned __int8 *)(a1 + 64)];
  if (v2)
  {
    dispatch_block_t v3 = PDDefaultQueue();
    id v4 = +[PKBannerHandle createHandleForRequest:v2 queue:v3];

    [v4 displayWithCompletion:0];
    [v4 invalidate];
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: failed to create standalone banner handle for pass: %@.", (uint8_t *)&v9, 0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(void))(v8 + 16))();
    }
  }
}

id sub_10020DD78(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancel];
}

void sub_10020DD80(uint64_t a1, void *a2)
{
  id v7 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 72);
  if (v4 == *(void **)(a1 + 48))
  {
    *(void *)(v3 + 72) = 0;

    uint64_t v3 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 8));
  [*(id *)(a1 + 48) invalidate];
  uint64_t v5 = *(void *)(a1 + 56);
  id v6 = v7;
  if (v5)
  {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, [v7 result] != 0);
    id v6 = v7;
  }
}

void sub_10020DE2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10 && (id v11 = *(id *)(v10 + 8)) != 0)
  {
    id v13 = v11;
    if (v8)
    {
      v8[48] = 1;
      objc_setProperty_nonatomic_copy(v8, v12, v11, 56);
    }
    (*((void (**)(id, unsigned char *, void))v9 + 2))(v9, v8, 0);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8));
    id v13 = *(id *)(*(void *)(a1 + 40) + 24);
    id v14 = *(id *)(*(void *)(a1 + 40) + 32);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8));
    if (v13)
    {
      id v15 = *(void **)(a1 + 32);
      if (v15) {
        id v15 = (void *)v15[2];
      }
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_10020DFE4;
      v17[3] = &unk_100740318;
      __int16 v18 = v15;
      id v20 = v9;
      BOOL v19 = v8;
      id v16 = v18;
      [v13 fieldMetadataForFieldWithProperties:v16 withExpressPassManager:v14 completion:v17];
    }
    else
    {
      (*((void (**)(id, unsigned char *, uint64_t))v9 + 2))(v9, v8, 1);
    }
  }
}

void sub_10020DFE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && ![v3 shouldIgnoreField])
  {
    id v7 = PDExpressTransactionQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020E160;
    block[3] = &unk_10072E9D8;
    id v9 = v4;
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    dispatch_async(v7, block);
  }
  else
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Ignoring entered field: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10020E160(uint64_t a1)
{
  id newValue = [*(id *)(a1 + 32) associatedPassIdentifiers];
  if ([newValue count])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    unsigned __int8 v3 = [*(id *)(a1 + 32) foundExplicitlyRequestedPass];
    if (v2) {
      *(unsigned char *)(v2 + 4_Block_object_dispose(&STACK[0x390], 8) = v3;
    }
    uint64_t v5 = *(void **)(a1 + 40);
    if (v5) {
      objc_setProperty_nonatomic_copy(v5, v4, newValue, 64);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10020E1EC(void *a1, uint64_t a2, void *a3, void *a4)
{
  self = a3;
  uint64_t v6 = a4;
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v8 = +[NSNumber numberWithInteger:a1[6]];
  [v7 setObject:v8 forKeyedSubscript:PKPassbookUIServiceSource];

  id v9 = +[NSNumber numberWithUnsignedChar:PKDeviceBacklightActive()];
  [v7 setObject:v9 forKeyedSubscript:PKPassbookUIServiceBacklightActive];

  id v10 = +[PKAnalyticsReporter archivedSessionTokenForSubject:PKAnalyticsSubjectFieldDetect];
  if (v10) {
    [v7 setObject:v10 forKeyedSubscript:PKPassbookUIServiceAnalyticsSessionTokenArchive];
  }
  if (self)
  {
    id v11 = self[7];
    if (v11)
    {
      BOOL v12 = v11;
      [v7 setObject:v11 forKeyedSubscript:PKPassbookUIServiceUniquePassIdentifier];
      goto LABEL_14;
    }
    uint64_t v13 = PDDefaultPaymentPassUniqueIdentifier();
    id v14 = self[8];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = a1[4];
      if (v16)
      {
        id v17 = *(id *)(v16 + 16);
        if (v17)
        {
          __int16 v18 = +[NSKeyedArchiver archivedDataWithRootObject:v17 requiringSecureCoding:1 error:0];
          [v7 setObject:v18 forKeyedSubscript:PKPassbookUIServiceFieldProperties];
        }
      }
      else
      {
        id v17 = 0;
      }
      [v7 setObject:v15 forKeyedSubscript:PKPassbookUIServiceFieldPassUniqueIdentifiers];

      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v13 = PDDefaultPaymentPassUniqueIdentifier();
  }
  [v7 setObject:v13 forKeyedSubscript:PKPassbookUIServiceUniquePassIdentifier];
LABEL_13:

  BOOL v12 = 0;
LABEL_14:
  if (+[PKSecureElement isInFailForward]) {
    [v7 setObject:0 forKeyedSubscript:PKPassbookUIServiceUniquePassIdentifier];
  }
  BOOL v19 = +[NSNumber numberWithUnsignedLongLong:mach_absolute_time()];
  [v7 setObject:v19 forKeyedSubscript:PKPassbookUIServicePresentationStartTime];

  id v20 = *(void **)(a1[5] + 208);
  if (v20)
  {
    id v21 = [v20 dictionary];
    [v7 setObject:v21 forKeyedSubscript:PKPassbookUIServiceAccessoryDeviceDictionary];

    id v22 = [*(id *)(a1[5] + 208) endpointUUID];
    [v7 setObject:v22 forKeyedSubscript:PKPassbookUIServiceAccessoryDeviceUUID];
  }
  if (self) {
    objc_setProperty_nonatomic_copy(self, (SEL)self, v7, 72);
  }
  v6[2](v6);
}

void sub_10020E508(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a3;
  id v22 = v6;
  if (v6) {
    id v7 = (void *)v6[9];
  }
  else {
    id v7 = 0;
  }
  id v8 = v7;
  uint64_t v9 = PKPassbookUIServiceAccessoryDeviceDictionary;
  id v10 = a4;
  uint64_t v11 = [v8 objectForKeyedSubscript:v9];
  CFStringRef v12 = @"PKPaymentRemoteAlertViewController";
  if (v11)
  {
    uint64_t v13 = (void *)v11;
    id v14 = [v8 objectForKeyedSubscript:PKPassbookUIServiceAccessoryDeviceUUID];
    if (v14)
    {
      uint64_t v15 = *(void *)(a1 + 32);

      if (((v15 - 1) & 0xFFFFFFFFFFFFFFFBLL) == 0) {
        CFStringRef v12 = @"PKAccessoryDeviceExpressAlertViewController";
      }
    }
    else
    {
    }
  }
  id v16 = objc_alloc((Class)SBSRemoteAlertDefinition);
  id v17 = [v16 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:v12];
  id v18 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
  [v18 setUserInfo:v8];
  BOOL v19 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v17, v18, 0);
  id v20 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v19, 0);
  uint64_t v21 = sub_100224D50((uint64_t)v20);
  if (v22) {
    v22[10] = v21;
  }
  sub_100204CAC((uint64_t)v22, v20);
  (*((void (**)(id, void *, void))v10 + 2))(v10, v22, 0);
}

void sub_10020E6AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    BOOL v9 = *((unsigned char *)v7 + 48) != 0;
    unint64_t v10 = *((void *)v7 + 10);
  }
  else
  {
    BOOL v9 = 0;
    unint64_t v10 = 0;
  }
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10020E914;
  v27[3] = &unk_10072E1E8;
  id v11 = v7;
  id v28 = v11;
  [a2 addCancelAction:v27];
  if (sub_10020D92C(*(void *)(a1 + 32), *(void **)(a1 + 40), v9, v10))
  {
    int v12 = PDDeviceUILocked();
    int v13 = v12;
    if (*(void *)(a1 + 48) != 5)
    {
      if (v12)
      {
        if ((PKAccessPassVisibilityEnabled() & 1) == 0)
        {
          id v14 = +[MCProfileConnection sharedConnection];
          unsigned int v15 = [v14 effectiveBoolValueForSetting:MCFeatureCardsWhileLockedAllowed];

          if (v15 != 1)
          {
            uint64_t v21 = _NSConcreteStackBlock;
            uint64_t v22 = 3221225472;
            id v23 = sub_10020E91C;
            id v24 = &unk_1007403B0;
            id v26 = v8;
            id v25 = v11;
            SBSRequestPasscodeUnlockUI();

            id v17 = v26;
            goto LABEL_15;
          }
        }
      }
    }
    if (v13 && *(void *)(a1 + 48) == 1)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10020EA14;
      v18[3] = &unk_1007403D8;
      id v19 = v11;
      id v20 = v8;
      sub_10020EBB8(v16, @"Lockscreen Contactless Interface", v18);

      id v17 = v19;
LABEL_15:

      goto LABEL_13;
    }
    (*((void (**)(id, id, void))v8 + 2))(v8, v11, 0);
  }
  else
  {
    (*((void (**)(id, id, uint64_t))v8 + 2))(v8, v11, 1);
  }
LABEL_13:
}

void sub_10020E914(uint64_t a1)
{
}

void sub_10020E91C(uint64_t a1, int a2)
{
  if (a2)
  {
    unsigned __int8 v3 = PDExpressTransactionQueue();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10020E9FC;
    v5[3] = &unk_10072E598;
    id v7 = *(id *)(a1 + 40);
    id v6 = *(id *)(a1 + 32);
    dispatch_async(v3, v5);
  }
  else
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v4();
  }
}

uint64_t sub_10020E9FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10020EA14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PDExpressTransactionQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020EAE8;
  block[3] = &unk_10072E9D8;
  id v7 = v3;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_10020EAE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Biometric Assertion Acquired", buf, 2u);
    }

    sub_100204DC4(*(void *)(a1 + 40), *(void **)(a1 + 32));
  }
  else
  {
    if (v4)
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Biometric Assertion Not Acquired", v6, 2u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10020EBB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!a1) {
    goto LABEL_4;
  }
  if (v6)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002101CC;
    v9[3] = &unk_1007404F8;
    id v10 = objc_alloc_init((Class)SBSBiometricsService);
    id v11 = v7;
    id v8 = v10;
    [v8 acquireUnlockSuppressionAssertionForReason:v5 completion:v9];

LABEL_4:
    return;
  }
  __break(1u);
}

void sub_10020EC94(id a1, PKAsyncOperationState *a2, PDRemoteAlertPresentationEvaluationContactless *a3, id a4)
{
  id v5 = a3;
  id v6 = (void (**)(id, PDRemoteAlertPresentationEvaluationContactless *, void))a4;
  id v7 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
  id v16 = 0;
  id v8 = [v7 requestAssertion:5 error:&v16];
  id v9 = v16;

  id v10 = PKLogFacilityTypeGetObject();
  id v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100516D64();
    }

    sub_100204EDC((uint64_t)v5, v8);
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: failed to acquire nearfield informative assertion - %@.", buf, 0xCu);
    }
  }
  int v12 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
  id v15 = 0;
  int v13 = [v12 requestAssertion:3 error:&v15];
  id v14 = v15;

  if (v13)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      sub_100516CFC();
    }

    sub_100205074((uint64_t)v5, v13);
  }
  else
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: failed to acquire nearfield informative assertion - %@.", buf, 0xCu);
    }
  }
  v6[2](v6, v5, 0);
}

void sub_10020EEAC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = sub_100204D64((os_unfair_lock_s *)v6);
  if (*(void *)(a1 + 48) != 1 || (PKPearlIsAvailable() & 1) != 0 || (PKUserIntentIsAvailable() & 1) != 0)
  {
    id v9 = 0;
  }
  else
  {
    id v20 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Starting TouchID Pre-Arm...", buf, 2u);
    }

    id v9 = objc_alloc_init((Class)LAContext);
    [v9 prearmTouchIDWithReply:&stru_100740438];
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10020F1D8;
  v21[3] = &unk_100730198;
  id v22 = v9;
  id v23 = sub_100204E7C((os_unfair_lock_s *)v6);
  id v24 = sub_100205014((os_unfair_lock_s *)v6);
  id v25 = sub_1002051AC((os_unfair_lock_s *)v6);
  id v10 = v25;
  id v11 = v24;
  int v12 = v23;
  id v13 = v9;
  id v14 = objc_retainBlock(v21);
  id v15 = v14;
  if (v8) {
    sub_100224844((uint64_t)v8, v14);
  }
  else {
    ((void (*)(void *))v14[2])(v14);
  }
  sub_100204CAC((uint64_t)v6, v8);
  if (v6)
  {
    BOOL v16 = *((unsigned char *)v6 + 48) != 0;
    unint64_t v17 = *((void *)v6 + 10);
  }
  else
  {
    BOOL v16 = 0;
    unint64_t v17 = 0;
  }
  unsigned int v18 = sub_10020D92C(*(void *)(a1 + 32), *(void **)(a1 + 40), v16, v17) ^ 1;
  if (v8) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 1;
  }
  v7[2](v7, v6, v19);
}

void sub_10020F0EC(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  BOOL v4 = a3;
  id v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      LOWORD(v1_PDOpenPaymentSetupUI(0, 0) = 0;
      id v7 = "TouchID Pre-Arm Started";
      id v8 = v5;
      uint32_t v9 = 2;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v10, v9);
    }
  }
  else if (v6)
  {
    int v10 = 138412290;
    id v11 = v4;
    id v7 = "TouchID Pre-Arm Failed with Error: %@";
    id v8 = v5;
    uint32_t v9 = 12;
    goto LABEL_6;
  }
}

void sub_10020F1D8(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  [*(id *)(a1 + 40) invalidate];
  if (*(void *)(a1 + 48))
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
      sub_100516DCC();
    }

    BOOL v3 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
    id v4 = [v3 releaseAssertion:*(void *)(a1 + 48)];
  }
  if (*(void *)(a1 + 56))
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_100516DCC();
    }

    BOOL v6 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
    id v7 = [v6 releaseAssertion:*(void *)(a1 + 56)];
  }
}

id sub_10020F2C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancel];
}

void sub_10020F2D0(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint32_t v9 = sub_100204D64(v7);
  if ([v8 isCanceled])
  {
    int v10 = PDExpressTransactionQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020F8BC;
    block[3] = &unk_10072E198;
    void block[4] = *(void *)(a1 + 40);
    id v42 = v8;
    dispatch_async(v10, block);

    goto LABEL_5;
  }
  if (!a2)
  {
LABEL_8:
    id v15 = PKLogFacilityTypeGetObject();
    PKTimeProfileBegin();

    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v16 = *(void **)(a1 + 48);
      if (v16) {
        BOOL v16 = (void *)v16[1];
      }
      unint64_t v17 = v16;
      unsigned int v18 = *(void **)(a1 + 48);
      if (v18) {
        unsigned int v18 = (void *)v18[2];
      }
      uint64_t v19 = v18;
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v17;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Attempting Activate Contactless Payment Interface for Pass: %@ or Field Properties: %@", buf, 0x16u);
    }
    if (PKPearlIsAvailable())
    {
      uint64_t v20 = *(void *)(a1 + 64);
      if (v20 == 1)
      {
        PKAnalyticsSendEvent();
      }
      else if (!v20)
      {
        PKAnalyticsSendEvent();
        uint64_t v48 = PKAnalyticsSubjectFieldDetect;
        uint64_t v21 = +[NSArray arrayWithObjects:&v48 count:1];
        v46[0] = PKAnalyticsReportEventKey;
        v46[1] = PKAnalyticsReportButtonTagKey;
        v47[0] = PKAnalyticsReportEventTypeButtonTap;
        v47[1] = PKAnalyticsReportButtonTagDoubleClick;
        id v22 = +[NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:2];
        +[PKAnalyticsReporter subjects:v21 sendEvent:v22];
      }
    }
    CFStringRef v44 = @"source";
    id v23 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
    id v45 = v23;
    id v24 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
    PKAnalyticsSendEvent();

    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_10020F8D8;
    v38[3] = &unk_10072F840;
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v39 = *(void *)(a1 + 40);
    uint64_t v40 = v25;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_10020FA18;
    v37[3] = &unk_10072F840;
    void v37[4] = v39;
    void v37[5] = v25;
    id v26 = sub_100223A48((uint64_t)PDRemoteAlertActivationTracker, v38, v37, *(void **)(v39 + 16));
    sub_10022492C((uint64_t)v9, v26);

    sub_100208B70(*(void *)(a1 + 40), v9);
    IOPMAssertionID AssertionID = 0;
    v49[0] = @"AssertType";
    v49[1] = @"AssertLevel";
    *(void *)long long buf = @"PreventUserIdleSystemSleep";
    *(void *)&uint8_t buf[8] = &off_10078B070;
    v49[2] = @"AssertName";
    v49[3] = @"TimeoutSeconds";
    *(void *)&uint8_t buf[16] = @"Wallet Remote Interface";
    id v51 = &off_10078B088;
    CFDictionaryRef v27 = +[NSDictionary dictionaryWithObjects:buf forKeys:v49 count:4];
    if (IOPMAssertionCreateWithProperties(v27, &AssertionID)) {
      IOPMAssertionID v28 = 0;
    }
    else {
      IOPMAssertionID v28 = AssertionID;
    }

    if (v28)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v28;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: acquired power assertion: Wallet Remote Interface (%d)", buf, 8u);
      }
    }
    kdebug_trace();
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10020FB1C;
    v32[3] = &unk_100740480;
    id v33 = *(id *)(a1 + 32);
    IOPMAssertionID v36 = v28;
    id v29 = *(id *)(a1 + 56);
    uint64_t v34 = *(void *)(a1 + 40);
    id v35 = v29;
    sub_1002245F4((uint64_t)v9, v32);

    id v14 = v33;
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (*(id *)(v11 + 80) == v8)
  {
    *(void *)(v11 + 8_PDOpenPaymentSetupUI(0, 0) = 0;

    goto LABEL_8;
  }
LABEL_5:
  sub_100224394((uint64_t)v9);
  int v12 = *(void **)(a1 + 56);
  if (v12)
  {
    id v13 = *(NSObject **)(*(void *)(a1 + 40) + 16);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10020FCA0;
    v30[3] = &unk_10072F788;
    id v31 = v12;
    dispatch_async(v13, v30);
    id v14 = v31;
LABEL_27:
  }
  sub_100204B20((uint64_t)v7);
}

void sub_10020F8BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  BOOL v3 = *(void **)(v1 + 80);
  if (v3 == v2)
  {
    *(void *)(v1 + 8_PDOpenPaymentSetupUI(0, 0) = 0;
  }
}

void sub_10020F8D8(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  id v3 = (id)PKTimeProfileEnd();

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Contactless Interface Activation.", buf, 2u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v4 = [*(id *)(*(void *)(a1 + 32) + 40) allObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10020FA0C;
  v5[3] = &unk_100740458;
  void v5[4] = *(void *)(a1 + 40);
  [v4 enumerateObjectsUsingBlock:v5];
  if (!*(void *)(a1 + 40) && PKHomeButtonIsAvailable()) {
    PKSetContactlessInterfaceHomeButtonSourceHasOccurred();
  }
}

id sub_10020FA0C(uint64_t a1, void *a2)
{
  return [a2 contactlessInterfaceDidPresentFromSource:*(void *)(a1 + 32)];
}

void sub_10020FA18(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Contactless Interface Deactivation.", buf, 2u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v3 = [*(id *)(*(void *)(a1 + 32) + 40) allObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10020FB10;
  v4[3] = &unk_100740458;
  void v4[4] = *(void *)(a1 + 40);
  [v3 enumerateObjectsUsingBlock:v4];
}

id sub_10020FB10(uint64_t a1, void *a2)
{
  return [a2 contactlessInterfaceDidDismissFromSource:*(void *)(a1 + 32)];
}

void sub_10020FB1C(uint64_t a1, char a2)
{
  int v4 = *(_DWORD *)(a1 + 56);
  if (v4)
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: released power assertion: Wallet Remote Interface (%d)", buf, 8u);
    }

    IOPMAssertionRelease(*(_DWORD *)(a1 + 56));
  }
  if ((a2 & 1) == 0)
  {
    BOOL v6 = PKLogFacilityTypeGetObject();
    id v7 = (id)PKTimeProfileEnd();
  }
  id v8 = *(void **)(a1 + 48);
  if (v8)
  {
    uint32_t v9 = *(NSObject **)(*(void *)(a1 + 40) + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10020FC88;
    v10[3] = &unk_10073B5A0;
    id v11 = v8;
    char v12 = a2;
    dispatch_async(v9, v10);
  }
}

uint64_t sub_10020FC88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10020FCA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10020FCB4(uint64_t a1)
{
  if (sub_100208170(*(void *)(a1 + 40), 3uLL, 0))
  {
    CFStringRef v21 = @"remotePaymentRequest";
    uint64_t v2 = +[NSKeyedArchiver archivedDataWithRootObject:*(void *)(a1 + 48) requiringSecureCoding:1 error:0];
    id v22 = v2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];

    id v4 = objc_alloc((Class)SBSRemoteAlertDefinition);
    id v5 = [v4 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKContinuityPaymentRemoteAlertViewController"];
    id v6 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
    [v6 setUserInfo:v3];
    id v7 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v5, v6, 0);
    id v8 = sub_1002241A4((uint64_t)PDRemoteAlertHandle, v7, 3uLL);
    sub_100208B70(*(void *)(a1 + 40), v8);
    if (PDDeviceUILocked())
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_10020FF78;
      v17[3] = &unk_1007404D0;
      uint32_t v9 = (id *)v18;
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = *(id *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      v18[0] = v11;
      v18[1] = v12;
      uint64_t v19 = v8;
      id v20 = *(id *)(a1 + 56);
      sub_10020EBB8(v10, @"Lockscreen Continuity Payment Interface", v17);
    }
    else
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1002101B4;
      v15[3] = &unk_1007304D8;
      uint32_t v9 = &v16;
      id v16 = *(id *)(a1 + 56);
      sub_1002245F4((uint64_t)v8, v15);
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13)
    {
      int v14 = *(void (**)(void))(v13 + 16);
      v14();
    }
  }
}

void sub_10020FF78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Biometric Assertion Acquired", buf, 2u);
  }

  id v5 = *(NSObject **)(*(void *)(a1 + 40) + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002100A0;
  v7[3] = &unk_100730578;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002100A0(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100210194;
  v6[3] = &unk_10072E1E8;
  uint64_t v2 = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  sub_100224844(v2, v6);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10021019C;
  v4[3] = &unk_1007304D8;
  id v5 = *(id *)(a1 + 56);
  sub_1002245F4(v3, v4);
}

id sub_100210194(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_10021019C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002101B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1002101CC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 invalidate];
}

void sub_100210210(id a1, unsigned __int8 a2)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unlock Complete", v3, 2u);
  }
}

void sub_10021027C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)sub_100207D04(PKPassbookUIServiceBundleIdentifier);
  id v11 = [v10 currentState];
  uint64_t v12 = v11;
  if (v11 && [v11 taskState] != 1)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v10 pid];
    v9[2](v9, v8, 0);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
    unsigned __int8 v13 = [v7 isCanceled];
    uint64_t v14 = *(void *)(a1 + 32);
    if (v13)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 8));
      v9[2](v9, v8, 1);
    }
    else
    {
      *(unsigned char *)(v14 + 184) = 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
      id v16 = v9;
      id v15 = v8;
      PDWakePassbookUIServiceInBackground();
    }
  }
}

uint64_t sub_100210410(void *a1, char a2, int a3)
{
  if ((a2 & 1) == 0) {
    return (*(uint64_t (**)(void, void, uint64_t))(a1[5] + 16))(a1[5], a1[4], 1);
  }
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = a3;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], 0);
}

void sub_100210450(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) & 0x80000000) != 0
    || [v7 isCanceled])
  {
    v9[2](v9, v8, 1);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v10 + 184) && !*(void *)(v10 + 192))
    {
      id v11 = +[RBSTarget targetWithPid:*(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
      uint64_t v12 = +[RBSDomainAttribute attributeWithDomain:@"com.apple.PassbookUIService" name:@"LaunchAssist"];
      uint64_t v19 = v12;
      unsigned __int8 v13 = +[NSArray arrayWithObjects:&v19 count:1];

      id v14 = [objc_alloc((Class)RBSAssertion) initWithExplanation:@"Payment Interface Launch Assertion" target:v11 attributes:v13];
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 192), v14);

      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
      if (v14)
      {
        id v15 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          id v18 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: aquiring launch assertion %p...", buf, 0xCu);
        }

        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_1002106C4;
        v16[3] = &unk_100740588;
        void v16[4] = *(void *)(a1 + 32);
        [v14 acquireWithInvalidationHandler:v16];
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 8));
    }
    v9[2](v9, v8, 0);
  }
}

void sub_1002106C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134217984;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: invalidated launch assertion %p...", (uint8_t *)&v9, 0xCu);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(id *)(v8 + 192) == v5)
  {
    *(void *)(v8 + 192) = 0;

    uint64_t v8 = *(void *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 8));
}

void sub_1002107C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  uint64_t v8 = a4;
  if ([a2 isCanceled])
  {
    v8[2](v8, v7, 1);
  }
  else
  {
    int v9 = +[RBSTarget targetWithPid:*(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
    id v10 = +[RBSDomainAttribute attributeWithDomain:@"com.apple.PassbookUIService" name:@"JetsamBoost"];
    id v15 = v10;
    id v11 = +[NSArray arrayWithObjects:&v15 count:1];

    id v12 = [objc_alloc((Class)RBSAssertion) initWithExplanation:@"Payment Interface Boost Assertion" target:v9 attributes:v11];
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 4_PDOpenPaymentSetupUI(0, 0) = v12;

    v8[2](v8, v7, 0);
  }
}

void sub_100210928(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 176);
  if (v3 == *(NSObject **)(a1 + 40))
  {
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 176);
    *(void *)(v4 + 176) = 0;

    uint64_t v6 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v6 + 145))
    {
      __break(1u);
      return;
    }
    id v7 = *(void **)(v6 + 168);
    if (v7)
    {
      [v7 invalidate];
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(void **)(v8 + 168);
      *(void *)(v8 + 16_Block_object_dispose(&STACK[0x390], 8) = 0;

      uint64_t v6 = *(void *)(a1 + 32);
    }
    id v10 = *(void **)(v6 + 152);
    if (v10)
    {
      [v10 cancel];
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = *(void **)(v11 + 152);
      *(void *)(v11 + 152) = 0;

      uint64_t v6 = *(void *)(a1 + 32);
    }
    uint64_t v13 = *(void **)(v6 + 160);
    *(void *)(v6 + 16_PDOpenPaymentSetupUI(0, 0) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 184) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
    id v14 = *(void **)(v2 + 192);
    if (v14)
    {
      [v14 invalidate];
      uint64_t v15 = *(void *)(a1 + 32);
      id v16 = *(void **)(v15 + 192);
      *(void *)(v15 + 192) = 0;

      uint64_t v2 = *(void *)(a1 + 32);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
}

void sub_100210A14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  id v6 = a4;
  os_unfair_lock_lock(v5);
  id v7 = *(id *)(*(void *)(a1 + 32) + 152);
  unsigned __int8 v8 = [v6 isCanceled];

  if (v7 != v6) {
    unsigned __int8 v8 = 1;
  }
  if ((v8 & 1) == 0) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 168), *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  if (v7 == v6)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 152);
    *(void *)(v9 + 152) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v11)
  {
    if (v8)
    {
      [v11 invalidate];
    }
    else
    {
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        id v16 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: aquiring boost assertion %p...", buf, 0xCu);
      }

      uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100210BEC;
      v14[3] = &unk_100740588;
      void v14[4] = *(void *)(a1 + 32);
      [v13 acquireWithInvalidationHandler:v14];
    }
  }
}

void sub_100210BEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v7 = *(id *)(*(void *)(a1 + 32) + 168);
  unsigned __int8 v8 = PKLogFacilityTypeGetObject();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7 == v5)
  {
    if (v9)
    {
      int v11 = 134218242;
      id v12 = v5;
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: unexpectedly invalidated boost assertion %p - %@.", (uint8_t *)&v11, 0x16u);
    }

    uint64_t v10 = *(void *)(a1 + 32);
    unsigned __int8 v8 = *(NSObject **)(v10 + 168);
    *(void *)(v10 + 16_Block_object_dispose(&STACK[0x390], 8) = 0;
  }
  else if (v9)
  {
    int v11 = 134217984;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDRemoteInterfacePresenter: invalidated boost assertion %p.", (uint8_t *)&v11, 0xCu);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
}

void sub_100210D40(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  [*(id *)(*(void *)(a1 + 32) + 64) removeObjectIdenticalTo:*(void *)(a1 + 40)];
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_unlock(v2);
}

void sub_100210D90(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    objc_storeStrong((id *)(a1 + 24), a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

void sub_100210E04(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    objc_storeStrong((id *)(a1 + 32), a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

uint64_t sub_100210FD0()
{
  uint64_t result = dword_1008065F8;
  if (dword_1008065F8 != -1 && (byte_100808D10 & 1) == 0)
  {
    uint64_t state64 = 0;
    uint64_t result = notify_get_state(dword_1008065F8, &state64);
    if (!result)
    {
      byte_100808D10 = 1;
      if (state64)
      {
        atomic_store(1u, byte_100808D08);
        uint64_t result = notify_cancel(dword_1008065F8);
        dword_1008065F8 = -1;
      }
    }
  }
  return result;
}

void sub_10021104C(id a1, int a2)
{
  os_unfair_lock_lock(&stru_100808D0C);
  atomic_store(1u, byte_100808D08);
  if (dword_1008065F8 != -1)
  {
    notify_cancel(dword_1008065F8);
    dword_1008065F8 = -1;
  }
  os_unfair_lock_unlock(&stru_100808D0C);
}

Class sub_1002110B8()
{
  if (qword_100808D28 != -1) {
    dispatch_once(&qword_100808D28, &stru_100740638);
  }
  Class result = objc_getClass("NPKCompanionAgentConnection");
  qword_100808D18 = (uint64_t)result;
  off_1008064C8 = (uint64_t (*)())sub_10021111C;
  return result;
}

id sub_10021111C()
{
  return (id)qword_100808D18;
}

void sub_100211128(id a1)
{
  qword_100808D20 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit", 2);
}

uint64_t sub_100211154()
{
  if (qword_100808D38 != -1) {
    dispatch_once(&qword_100808D38, &stru_100740658);
  }
  id v0 = (uint64_t (*)())dlsym((void *)qword_100808D30, "BYSetupAssistantHasCompletedInitialRun");
  off_1008064D0 = v0;
  return v0();
}

void sub_1002111BC(id a1)
{
  qword_100808D30 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
}

void sub_1002111E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_1002113D8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 8) peerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 32)];
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v6 = v2;
      uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
      uint64_t v2 = v6;
    }
    return _objc_release_x1(v3, v2);
  }
  else
  {
    id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v4();
  }
}

uint64_t sub_100211514(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) peerPaymentPendingRequestsForPeerPaymentAccount];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = v2;
    uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
    uint64_t v2 = v5;
  }
  return _objc_release_x1(v3, v2);
}

uint64_t sub_100211640(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) insertOrUpdatePeerPaymentPendingRequests:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _handlePeerPaymentPendingRequestsChanged];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_100211764(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) deletePeerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _handlePeerPaymentPendingRequestsChanged];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_10021185C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) deletePeerPaymentPendingRequestsForPeerPaymentAccount];
  [*(id *)(a1 + 32) _handlePeerPaymentPendingRequestsChanged];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1002118C8(id a1, PDPeerPaymentAccountManagerObserver *a2)
{
  uint64_t v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDPeerPaymentAccountManagerObserver *)v2 peerPaymentAccountManagerPendingRequestsChanged];
  }
}

void sub_100211CAC(uint64_t a1)
{
  [*(id *)(a1 + 32) _handleRecurringPaymentsChanged];
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 8) peerPaymentRecurringPaymentWithIdentifier:*(void *)(a1 + 40)];
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
  }
}

uint64_t sub_100211DF4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) deletePeerPaymentRecurringPaymentsForIdentifiers:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _handleRecurringPaymentsChanged];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_100211EEC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) deleteAllPeerPaymentRecurringPayments];
  [*(id *)(a1 + 32) _handleRecurringPaymentsChanged];
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_100212010(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) insertOrUpdatePeerPaymentRecurringPayments:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _handleRecurringPaymentsChanged];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_100212580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Uploaded memo for recurring payment %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_100212644(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, a1[4]);
  }
  id v3 = (void *)a1[5];
  return [v3 _handleRecurringPaymentsChanged];
}

uint64_t sub_1002129C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_100212B90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_100212BBC(id a1, PDPeerPaymentAccountManagerObserver *a2)
{
  uint64_t v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDPeerPaymentAccountManagerObserver *)v2 peerPaymentAccountManagerRecurringPaymentsChanged];
  }
}

void sub_100212EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "NearbyPeerPayment: Finished uploading counterpart image data to CloudKit with identifier %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100212FBC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ([v5 hasNotificationServiceData])
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 24);
    int v7 = [v5 transactionSourceIdentifier];
    [v6 processPaymentTransaction:v5 forTransactionSourceIdentifier:v7];
  }
  uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002130A8;
  v9[3] = &unk_10073B5A0;
  id v10 = *(id *)(a1 + 40);
  char v11 = a2;
  dispatch_async(v8, v9);
}

uint64_t sub_1002130A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_100213210(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_100213374(uint64_t a1, uint64_t a2)
{
  id v4 = [(SQLiteEntity *)[Account alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = [(Account *)v4 account];
  if (v3) {
    [*(id *)(a1 + 40) addObject:v3];
  }
}

id sub_100214E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10021534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100215364(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  id v3 = [*(id *)(a1 + 32) accountIdentifier];
  id v4 = [v2 accountWithIdentifier:v3 inDatabase:*(void *)(a1 + 40)];

  +[CreditAccountDetails deleteVirtualCardEncryptedDataForAccountPID:inDatabase:](CreditAccountDetails, "deleteVirtualCardEncryptedDataForAccountPID:inDatabase:", [v4 persistentID], *(void *)(a1 + 40));
  uint64_t v5 = [v4 account];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4_PDOpenPaymentSetupUI(0, 0) = v5;

  return 1;
}

void sub_1002159CC(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100215A24(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setStateReason:](v4, "setStateReason:", [a3 integerValue]);
}

void sub_100215A7C(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setBlockAllAccountAccess:](v4, "setBlockAllAccountAccess:", [a3 BOOLValue]);
}

void sub_100215AD4(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setBlockNotifications:](v4, "setBlockNotifications:", [a3 BOOLValue]);
}

void sub_100215B2C(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setIsCloudAccount:](v4, "setIsCloudAccount:", [a3 BOOLValue]);
}

void sub_100215B84(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100215BDC(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setAccessLevel:](v4, "setAccessLevel:", [a3 integerValue]);
}

void sub_100215C34(id a1, PKAccount *a2, id a3)
{
}

void sub_100215C3C(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setFeature:](v4, "setFeature:", [a3 integerValue]);
}

void sub_100215C94(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setAccountStateDirty:](v4, "setAccountStateDirty:", [a3 BOOLValue]);
}

void sub_100215CEC(id a1, PKAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccount *)v3 setLastUpdated:v4];
}

void sub_100215D4C(id a1, PKAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKAccount *)v3 setAccountBaseURL:v4];
}

void sub_100215DAC(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKAccount *)v4 setCloudStoreZoneNames:v5];
}

void sub_100215E18(id a1, PKAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKAccount *)v3 setApplyServiceURL:v4];
}

void sub_100215E78(id a1, PKAccount *a2, id a3)
{
  id v4 = a2;
  -[PKAccount setSharedAccount:](v4, "setSharedAccount:", [a3 BOOLValue]);
}

void sub_100215ED0(id a1, PKAccount *a2, id a3)
{
}

void sub_100215ED8(id a1, PKAccount *a2, id a3)
{
  uint64_t v6 = a2;
  id v4 = [a3 componentsSeparatedByString:@","];
  if (v4)
  {
    id v5 = [objc_alloc((Class)NSSet) initWithArray:v4];
    [(PKAccount *)v6 setPreviousAccountIdentifiers:v5];
  }
}

void sub_100215F64(id a1, PKAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKAccount *)v3 setPaymentServicesBaseURL:v4];
}

void sub_100215FC4(id a1, PKAccount *a2, id a3)
{
}

void sub_100216428(uint64_t a1, uint64_t a2)
{
  id v4 = [SavingsAccountStatement alloc];
  id v5 = [*(id *)(a1 + 32) database];
  long long v8 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  uint64_t v6 = *(void **)(a1 + 40);
  long long v7 = [(SavingsAccountStatement *)v8 savingsAccountStatement];
  [v6 addObject:v7];
}

void sub_100216BFC(id a1, PKSavingsAccountStatement *a2, id a3)
{
}

void sub_100216C04(id a1, PKSavingsAccountStatement *a2, id a3)
{
}

void sub_100216C0C(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKSavingsAccountStatement *)v3 setOpeningDate:v4];
}

void sub_100216C6C(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKSavingsAccountStatement *)v3 setClosingDate:v4];
}

void sub_100216CCC(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountStatement *)v3 setOpeningBalance:v4];
}

void sub_100216D30(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountStatement *)v3 setClosingBalance:v4];
}

void sub_100216D94(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountStatement *)v3 setInterestEarned:v4];
}

void sub_100216DF8(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountStatement *)v3 setTotalDeposits:v4];
}

void sub_100216E5C(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountStatement *)v3 setTotalDailyCashDeposits:v4];
}

void sub_100216EC0(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountStatement *)v3 setTotalWithdrawn:v4];
}

void sub_100216F24(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountStatement *)v3 setAPY:v4];
}

void sub_100216F88(id a1, PKSavingsAccountStatement *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountStatement setStatementPeriodDays:](v4, "setStatementPeriodDays:", [a3 integerValue]);
}

void sub_1002170D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10021758C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v7 = (void *)PDOSTransactionCreate("PDPassUpgradeController.add_pass");
  long long v8 = PDDefaultQueue();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002176A0;
  v12[3] = &unk_100730578;
  id v13 = v7;
  id v14 = *(id *)(a1 + 32);
  id v15 = v5;
  id v16 = v6;
  id v9 = v6;
  id v10 = v5;
  id v11 = v7;
  dispatch_async(v8, v12);
}

void sub_1002176A0(uint64_t a1)
{
  id v5 = 0;
  unsigned int v2 = [*(id *)(a1 + 40) writeCard:*(void *)(a1 + 48) source:1 error:&v5];
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    if (v2) {
      id v4 = 0;
    }
    else {
      id v4 = v5;
    }
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_100217A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100217AB8(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
  uint64_t v2 = *(void *)(a1[6] + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  if (v3)
  {
    *(void *)(v2 + 4_PDOpenPaymentSetupUI(0, 0) = 0;

    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[4];
      int v8 = 138412290;
      uint64_t v9 = v5;
      id v6 = "Stopping delaying exit for pass upgrade %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      int v8 = 138412290;
      uint64_t v9 = v7;
      id v6 = "Already stopped delaying exit for pass upgrade %@";
      goto LABEL_6;
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
}

uint64_t sub_100217BE0(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Timing out delaying exit for pass upgrade %@", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_100217CA4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_100218164(id a1, PKPayLaterAccountProductDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = +[NSTimeZone timeZoneWithName:a3];
  [(PKPayLaterAccountProductDetails *)v4 setProductTimeZone:v5];
}

void sub_10021837C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void *sub_100218A4C(void *a1, uint64_t a2)
{
  if (a1)
  {
    a1 = +[Pass dynamicStateInDatabase:a1[1] forPassUniqueID:a2];
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_100218A9C(uint64_t a1)
{
  if (a1)
  {
    id v3 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 8);
    id v5 = +[SQLiteHasAssociatedEntityPredicate predicateWithAssociatedEntityClass:objc_opt_class()];
    uint64_t v6 = +[SQLiteEntity queryWithDatabase:v4 predicate:v5];

    CFStringRef v13 = @"pass.unique_id";
    uint64_t v7 = +[NSArray arrayWithObjects:&v13 count:1];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100218C48;
    v11[3] = &unk_100731258;
    id v12 = v3;
    id v8 = v3;
    [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v11];

    id v9 = [v8 copy];
  }
  else
  {
    id v9 = 0;
  }
  return v9;
}

id sub_100218C48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "pk_safelyAddObject:", *a4);
}

void *sub_100218C54(void *a1, int a2, uint64_t a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = +[Pass anyInDatabase:a1[1] withUniqueID:a3];
    if (v5)
    {
      uint64_t v6 = +[PassRelevancyModel passRelevancyModelInDatabase:v3[1] forPass:v5];
      uint64_t v7 = v6;
      int v8 = a2 ^ 1;
      if (((a2 ^ 1) & 1) != 0 || v6)
      {
        if (!v6) {
          int v8 = 0;
        }
        if (v8 == 1) {
          [v6 deleteFromDatabase];
        }
        id v3 = 0;
      }
      else
      {
        uint64_t v7 = +[PassRelevancyModel insertForPass:v5 inDatabase:v3[1]];
        id v3 = [v7 passRelevancyModel];
      }
    }
    else
    {
      id v3 = 0;
    }
  }
  return v3;
}

void sub_1002191D0(id a1, PKAccountEnhancedMerchantBehavior *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKAccountEnhancedMerchantBehavior setMinRefreshPeriod:](v4, "setMinRefreshPeriod:");
}

void sub_10021931C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100219CCC(id a1, PKCreditAccountRates *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 integerValue];
  PKPercentageStorageIntegerToDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountRates *)v4 setAprForPurchases:v5];
}

void sub_100219E2C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10021A1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10021A1FC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) stateOverride];
  if (!v2)
  {
    uint64_t v4 = 0;
    goto LABEL_5;
  }
  id v3 = (void *)v2;
  uint64_t v4 = +[TileState insertState:v2 inDatabase:*(void *)(a1 + 40)];

  if (v4)
  {
LABEL_5:
    id v6 = [objc_alloc(*(Class *)(a1 + 56)) initWithState:*(void *)(a1 + 32) tileStateOverride:v4 inDatabase:*(void *)(a1 + 40)];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    int v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 4_PDOpenPaymentSetupUI(0, 0) = v6;

    BOOL v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
    return v5;
  }
  return 0;
}

void sub_10021A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10021A57C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v12 = a3;
  id v7 = *(id *)(a4 + 8 * a1[7]);
  if (v7)
  {
    if (!*(void *)(*(void *)(a1[6] + 8) + 40))
    {
      id v8 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v9 = *(void *)(a1[6] + 8);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 4_PDOpenPaymentSetupUI(0, 0) = v8;
    }
    id v11 = +[TileDescriptorState _createStateForPID:withProperties:values:propertySetters:indices:inDatabase:](TileDescriptorState, "_createStateForPID:withProperties:values:propertySetters:indices:inDatabase:", a2, v12, a4, a1[4], a1[8], a1[9], a1[5]);
    [*(id *)(*(void *)(a1[6] + 8) + 40) setObject:v11 forKeyedSubscript:v7];
  }
}

void sub_10021A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10021A7C4(void *a1, void *a2, uint64_t a3)
{
  BOOL v5 = (void *)a1[4];
  id v6 = a2;
  id v7 = +[TileDescriptorState _createStateForPID:withProperties:values:propertySetters:indices:inDatabase:](TileDescriptorState, "_createStateForPID:withProperties:values:propertySetters:indices:inDatabase:", [v5 persistentID], v6, a3, a1[5], a1[7], a1[8], *(void *)(a1[4] + 8));

  uint64_t v8 = *(void *)(a1[6] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4_PDOpenPaymentSetupUI(0, 0) = v7;
}

void sub_10021AB40(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMutablePassTileDescriptorState setSupported:](v4, "setSupported:", [a3 BOOLValue]);
}

void sub_10021AB98(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMutablePassTileDescriptorState setEnabled:](v4, "setEnabled:", [a3 unsignedIntegerValue]);
}

void sub_10021ABF0(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
}

void sub_10021ABF8(id a1, PKMutablePassTileDescriptorState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKMutablePassTileDescriptorState setInProgress:](v4, "setInProgress:", [a3 BOOLValue]);
}

id _SQLValueForSupportedLocalizations(void *a1)
{
  id v1 = a1;
  if (!v1
    || (+[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:0], (uint64_t v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v2 = +[NSNull null];
  }

  return v2;
}

id _SupportedLocalizationsForSQLValue(void *a1)
{
  id v1 = a1;
  v6[0] = objc_opt_class();
  v6[1] = objc_opt_class();
  uint64_t v2 = +[NSArray arrayWithObjects:v6 count:2];
  id v3 = +[NSSet setWithArray:v2];
  uint64_t v4 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v3 fromData:v1 error:0];

  return v4;
}

void sub_10021B180(uint64_t a1, uint64_t a2)
{
  BOOL v5 = [(SQLiteEntity *)[DiscoveryItem alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = [(DiscoveryItem *)v5 item];
  [v3 addObject:v4];
}

void sub_10021B3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [(SQLiteEntity *)[DiscoveryItem alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = [(SQLiteEntity *)v4 valueForProperty:@"identifier"];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_10021B5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = *(id *)(a4 + 8);
  BOOL v5 = +[NSNull null];
  if (PKEqualObjects()) {
    id v6 = 0;
  }
  else {
    id v6 = v8;
  }
  id v7 = v6;

  if (v7) {
    [*(id *)(a1 + 32) addObject:v7];
  }
}

void sub_10021C0C8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = a3;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = a2;
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0;
    uint64_t v21 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v24;
    do
    {
      uint64_t v9 = 0;
      id v20 = v6;
      uint64_t v10 = v19 + 8 * (void)v6;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v23 + 1) + 8 * (void)v9);
        id v12 = *(void **)(v10 + 8 * (void)v9);
        CFStringRef v13 = +[NSNull null];
        if (v12 == v13) {
          id v14 = 0;
        }
        else {
          id v14 = *(void **)(v10 + 8 * (void)v9);
        }
        id v15 = v14;

        if ([v11 isEqualToString:@"relevant_date_range_start_date"])
        {
          id v16 = (void *)v7;
          uint64_t v7 = _DateForSQLValue();
        }
        else if ([v11 isEqualToString:@"relevant_date_range_end_date"])
        {
          id v16 = (void *)v21;
          uint64_t v21 = _DateForSQLValue();
        }
        else
        {
          uint64_t v17 = [*(id *)(a1 + 32) objectForKey:v11];
          id v16 = (void *)v17;
          if (v17) {
            (*(void (**)(uint64_t, void, id))(v17 + 16))(v17, *(void *)(a1 + 40), v15);
          }
        }

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v5 != v9);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      id v6 = (char *)v9 + (void)v20;
    }
    while (v5);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v7 = 0;
  }
  if (v7 | v21)
  {
    id v18 = [objc_alloc((Class)PKDiscoveryRelevantDateRange) initWithStartDate:v7 endDate:v21];
    [*(id *)(a1 + 40) setRelevantDateRange:v18];
  }
}

void sub_10021CA10(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_10021CA18(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setVersion:](v4, "setVersion:", [a3 integerValue]);
}

void sub_10021CA70(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10021CAC8(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_10021CB20(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_10021CB28(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_10021CB30(id a1, PKDiscoveryItem *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKDiscoveryItem *)v3 setLayoutBundleURL:v4];
}

void sub_10021CB90(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  _SupportedLocalizationsForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKDiscoveryItem *)v4 setSupportedLocalizations:v5];
}

void sub_10021CBF4(id a1, PKDiscoveryItem *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_OSVersionRequirementRangeForSQLValue();
  [(PKDiscoveryItem *)v3 setOsVersionRange:v4];
}

void sub_10021CC54(id a1, PKDiscoveryItem *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_HardwareVersionRangeForSQLValue();
  [(PKDiscoveryItem *)v3 setHardwareVersionRange:v4];
}

void sub_10021CCB4(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setViewCount:](v4, "setViewCount:", [a3 integerValue]);
}

void sub_10021CD0C(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setMaxViewCount:](v4, "setMaxViewCount:", [a3 integerValue]);
}

void sub_10021CD64(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setMaxViewCountLargeCard:](v4, "setMaxViewCountLargeCard:", [a3 integerValue]);
}

void sub_10021CDBC(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setShouldBadge:](v4, "setShouldBadge:", [a3 BOOLValue]);
}

void sub_10021CE14(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setPriority:](v4, "setPriority:", [a3 integerValue]);
}

void sub_10021CE6C(id a1, PKDiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryItem setEntitledToForceLargeCard:](v4, "setEntitledToForceLargeCard:", [a3 BOOLValue]);
}

void sub_10021CEC4(id a1, PKDiscoveryItem *a2, id a3)
{
}

void sub_10021CFDC(id a1, DiscoveryItem *a2, id a3)
{
  id v4 = a2;
  -[DiscoveryItem setItemOrder:](v4, "setItemOrder:", [a3 integerValue]);
}

id sub_10021D034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10021D35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10021D374(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) invitation];
  uint64_t v3 = [*(id *)(a1 + 32) share];
  id v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    BOOL v11 = 0;
  }
  else
  {
    id v6 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 4_PDOpenPaymentSetupUI(0, 0) = v6;

    id v14 = v2;
    uint64_t v9 = +[NSArray arrayWithObjects:&v14 count:1];
    +[SharingMessage insertOrUpdateSharingMessages:v9 storePayloads:1 transportIdentifier:@"Empty" inDatabase:*(void *)(a1 + 48)];

    CFStringRef v13 = v4;
    uint64_t v10 = +[NSArray arrayWithObjects:&v13 count:1];
    +[PassShare insertOrUpdatePassShares:v10 forPassPID:0 inDatabase:*(void *)(a1 + 48)];

    BOOL v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
  }

  return v11;
}

void sub_10021D608(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v17 = a3;
  uint64_t v9 = *(void **)(a1 + 48);
  uint64_t v10 = [v9 _propertySetters];
  [v9 applyPropertySetters:v10 toObject:*(void *)(a1 + 32) withProperties:v17 values:a4];

  id v11 = *(id *)(a4 + 8 * (void)[v17 indexOfObject:@"b"]);
  if (v11)
  {
    id v12 = +[SharingMessage sharingMessageForMessageIdentifier:v11 inDatabase:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) setInvitation:v12];
  }
  CFStringRef v13 = *(void **)(a4 + 8 * (void)[v17 indexOfObject:@"c"]);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = v13;
    id v16 = +[PassShare passShareForIdentifier:v15 inDatabase:v14];
    [*(id *)(a1 + 32) setShare:v16];
  }
  *a6 = 1;
}

void sub_10021DA00(id a1, PKPendingStatefulTransferProvisioning *a2, id a3)
{
}

void sub_10021DA08(id a1, PKPendingStatefulTransferProvisioning *a2, id a3)
{
}

void sub_10021DA10(id a1, PKPendingStatefulTransferProvisioning *a2, id a3)
{
}

void sub_10021E374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose((const void *)(v67 - 208), 8);
  _Unwind_Resume(a1);
}

id sub_10021E3DC(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v4 = [a2 activationOptions];
    BOOL v5 = [v4 activationCode];
    id v6 = v5;
    if (v5)
    {
      *a3 = v5;
      id v7 = [v4 optionsWithoutValues];
    }
    else
    {
      id v8 = [objc_alloc((Class)PKPassShareActivationOption) initWithDefaultIdentifierForType:1];
      uint64_t v9 = +[NSNumber numberWithInteger:PKRandomNumberOfLength()];
      uint64_t v10 = [v9 stringValue];

      [v8 setValue:v10];
      id v11 = v10;
      *a3 = v11;
      id v12 = objc_alloc((Class)PKPassShareActivationOptions);
      id v15 = v8;
      CFStringRef v13 = +[NSArray arrayWithObjects:&v15 count:1];
      id v7 = [v12 initWithOptions:v13];
    }
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

void sub_10021E55C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = [*(id *)(a1 + 40) shareData];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10021E658;
  v15[3] = &unk_1007410F0;
  uint64_t v10 = *(void **)(a1 + 48);
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  id v18 = v7;
  uint64_t v19 = v12;
  id v16 = v11;
  id v17 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_10021E6F8(v8, v9, v10, v15);
}

void sub_10021E658(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setEncryptedShareData:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4_PDOpenPaymentSetupUI(0, 0) = v5;
  id v10 = v5;

  if (a2) {
    BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  uint64_t v9 = !v8;
  (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), v9);
}

void sub_10021E6F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = [v8 devicePrimaryPaymentApplication];
    id v11 = [v10 dpanIdentifier];

    if (v11)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100221894;
      v15[3] = &unk_1007413B0;
      id v17 = v9;
      id v16 = v7;
      sub_100220D5C(a1, v8, v15);

      uint64_t v12 = v17;
    }
    else
    {
      id v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [v8 uniqueID];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Unable to find dpanIdentifier for %@", buf, 0xCu);
      }
      uint64_t v12 = +[NSError pkSharingError:1];
      (*((void (**)(id, void, void *))v9 + 2))(v9, 0, v12);
    }
  }
}

void sub_10021E8C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10021E9B0;
  v15[3] = &unk_10073D960;
  id v10 = *(void **)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  id v18 = v7;
  uint64_t v19 = v12;
  id v16 = v11;
  id v17 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_10021EA4C(v8, v9, v10, v15);
}

void sub_10021E9B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setFidoSignedChallenge:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4_PDOpenPaymentSetupUI(0, 0) = v5;
  id v8 = v5;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0);
}

void sub_10021EA4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v40[0] = 0;
    v40[1] = v40;
    v40[2] = 0x3032000000;
    v40[3] = sub_100020A3C;
    void v40[4] = sub_100021010;
    id v41 = 0;
    v38[0] = 0;
    v38[1] = v38;
    v38[2] = 0x3032000000;
    v38[3] = sub_100020A3C;
    void v38[4] = sub_100021010;
    id v39 = 0;
    v36[0] = 0;
    v36[1] = v36;
    void v36[2] = 0x3032000000;
    v36[3] = sub_100020A3C;
    void v36[4] = sub_100021010;
    id v37 = 0;
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3032000000;
    v34[3] = sub_100020A3C;
    v34[4] = sub_100021010;
    id v35 = 0;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1002210CC;
    void v29[3] = &unk_100731970;
    void v29[4] = a1;
    id v11 = v7;
    id v30 = v11;
    id v31 = v38;
    uint64_t v32 = v36;
    id v33 = v40;
    [v10 addOperation:v29];
    v27[0] = 0;
    v27[1] = v27;
    v27[2] = 0x3032000000;
    v27[3] = sub_100020A3C;
    void v27[4] = sub_100021010;
    id v28 = 0;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_10022128C;
    v26[3] = &unk_100730D50;
    void v26[4] = a1;
    void v26[5] = v27;
    [v10 addOperation:v26];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_1002213BC;
    v18[3] = &unk_100741360;
    id v19 = v11;
    uint64_t v21 = v27;
    id v22 = v36;
    long long v23 = v38;
    id v20 = v8;
    long long v24 = v40;
    long long v25 = v34;
    [v10 addOperation:v18];
    uint64_t v12 = +[NSNull null];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100221654;
    v14[3] = &unk_1007377C8;
    id v16 = v34;
    id v17 = v40;
    id v15 = v9;
    id v13 = [v10 evaluateWithInput:v12 completion:v14];

    _Block_object_dispose(v27, 8);
    _Block_object_dispose(v34, 8);

    _Block_object_dispose(v36, 8);
    _Block_object_dispose(v38, 8);

    _Block_object_dispose(v40, 8);
  }
}

void sub_10021EE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 240), 8);
  _Block_object_dispose((const void *)(v49 - 192), 8);
  _Block_object_dispose((const void *)(v49 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10021EE68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = objc_opt_class();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10021EF54;
  v14[3] = &unk_100741118;
  long long v11 = *(_OWORD *)(a1 + 64);
  long long v17 = *(_OWORD *)(a1 + 48);
  long long v18 = v11;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  sub_10021F124(v8, v9, v10, v14);
}

void sub_10021EF54(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
  uint64_t v7 = [v5 shareVouchers];
  uint64_t v8 = *(void *)(a1[7] + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4_PDOpenPaymentSetupUI(0, 0) = v7;

  uint64_t v10 = [v5 displayInformationOpenGraphUrl];
  uint64_t v11 = *(void *)(a1[8] + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4_PDOpenPaymentSetupUI(0, 0) = v10;

  uint64_t v13 = *(void *)(*(void *)(a1[6] + 8) + 40);
  if (v13)
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      uint64_t v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to create share with partner, %@", (uint8_t *)&v19, 0xCu);
    }
  }
  id v15 = *(void **)(*(void *)(a1[9] + 8) + 40);
  id v16 = [v5 shareIdentifier];
  if (v16)
  {
    [v15 setIdentifier:v16];
  }
  else
  {
    long long v17 = [*(id *)(*(void *)(a1[9] + 8) + 40) identifier];
    [v15 setIdentifier:v17];
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 40)) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = *(void *)(*(void *)(a1[7] + 8) + 40) == 0;
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v18);
}

void sub_10021F124(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = *(void **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100221A88;
    v10[3] = &unk_1007413D8;
    id v11 = v7;
    uint64_t v12 = a1;
    id v13 = v8;
    uint64_t v14 = a3;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
}

void sub_10021F1F8(void *a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1[7] + 8) + 40);
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[5];
  id v11 = 0;
  uint64_t v5 = sub_10021F290(v3, v2, v4, &v11);
  id v6 = v11;
  uint64_t v7 = *(void *)(a1[6] + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4_PDOpenPaymentSetupUI(0, 0) = v5;

  uint64_t v9 = *(void *)(a1[8] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 4_PDOpenPaymentSetupUI(0, 0) = v6;
}

id sub_10021F290(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {
    id v6 = a3;
    id v7 = a2;
    id v8 = objc_alloc_init((Class)PKDAManager);
    id v22 = 0;
    uint64_t v9 = [v8 decryptPayload:v7 groupIdentifier:v6 outError:&v22];

    id v10 = v22;
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = [v11 localizedDescription];
        *(_DWORD *)long long buf = 138412290;
        long long v24 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to decrypt share voucher: %@", buf, 0xCu);
      }
      id v14 = v11;
      *a4 = v14;
    }
    else
    {
      id v21 = 0;
      id v14 = +[NSJSONSerialization JSONObjectWithData:v9 options:0 error:&v21];
      id v15 = v21;
      if (!v15)
      {
LABEL_11:

        goto LABEL_12;
      }
      id v16 = v15;
      long long v17 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v18 = [v16 localizedDescription];
        *(_DWORD *)long long buf = 138412290;
        long long v24 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to read share voucher %@", buf, 0xCu);
      }
      id v19 = v16;
      *a4 = v19;
    }
    id v14 = 0;
    goto LABEL_11;
  }
  id v14 = 0;
LABEL_12:
  return v14;
}

void sub_10021F4B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  uint64_t v9 = PKLogFacilityTypeGetObject();
  id v10 = v9;
  if (v8)
  {
    id v11 = 0;
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
      int v26 = 138412290;
      CFDictionaryRef v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Share voucher: %@", (uint8_t *)&v26, 0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = [*(id *)(*(void *)(a1 + 40) + 8) sharedWebService];
    id v15 = +[PKSharingMessageDisplayInformationManager displayInformationForAccessPass:v13 webService:v14];

    if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)) {
      objc_msgSend(v15, "setOpenGraphURL:");
    }
    id v16 = objc_alloc_init((Class)PKSharingMesageProprietaryData);
    long long v17 = [*(id *)(a1 + 48) displayableSharedEntitlements];
    [v16 setDisplayableSharedEntitlements:v17];

    objc_msgSend(v16, "setAccessType:", objc_msgSend(*(id *)(a1 + 32), "accessType"));
    id v11 = [objc_alloc((Class)PKSharingPushProvisioningInvitation) initWithDisplayInformation:v15 provisioningVouchersByOEM:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) activationOptions:*(void *)(a1 + 56) proprietaryData:v16];
    if (!v11)
    {
      uint64_t v18 = PDBasicError();
      uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 4_PDOpenPaymentSetupUI(0, 0) = v18;
    }
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = [*(id *)(a1 + 32) uniqueID];
    uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    int v26 = 138412802;
    CFDictionaryRef v27 = v21;
    __int16 v28 = 2112;
    id v29 = v11;
    __int16 v30 = 2112;
    uint64_t v31 = v22;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Created share for %@ with result %@ %@", (uint8_t *)&v26, 0x20u);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)) {
    BOOL v23 = 1;
  }
  else {
    BOOL v23 = v11 == 0;
  }
  if (v23)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    long long v24 = objc_alloc_init(PDCreateShareContext);
    [(PDCreateShareContext *)v24 addInvite:v11 primary:1];
    long long v25 = [v11 provisioningCredentialHash];
    [(PDCreateShareContext *)v24 setExpectedProvisioningCredentialHash:v25];

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_10021FCC8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10021FCF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = [*(id *)(a1 + 40) shareData];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10021FDF0;
  v14[3] = &unk_100741190;
  id v10 = *(void **)(a1 + 48);
  id v15 = *(id *)(a1 + 40);
  id v16 = v6;
  uint64_t v11 = *(void *)(a1 + 56);
  id v17 = v7;
  uint64_t v18 = v11;
  id v12 = v6;
  id v13 = v7;
  sub_10021E6F8(v8, v9, v10, v14);
}

uint64_t sub_10021FDF0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setEncryptedShareData:a2];
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v3();
}

void sub_10021FE54(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10021FF40;
  v15[3] = &unk_10073D960;
  id v10 = *(void **)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  id v18 = v7;
  uint64_t v19 = v12;
  id v16 = v11;
  id v17 = v6;
  id v13 = v6;
  id v14 = v7;
  sub_10021EA4C(v8, v9, v10, v15);
}

void sub_10021FF40(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setFidoSignedChallenge:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4_PDOpenPaymentSetupUI(0, 0) = v5;
  id v8 = v5;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0);
}

void sub_10021FFDC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = objc_opt_class();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1002200C8;
  v13[3] = &unk_1007411B8;
  long long v16 = *(_OWORD *)(a1 + 48);
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  sub_10021F124(v8, v9, v10, v13);
}

void sub_1002200C8(void *a1, void *a2, id obj)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), obj);
  id v6 = obj;
  id v7 = a2;
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = v7 != 0;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_100220174(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = [*(id *)(a1 + 32) uniqueID];
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    int v13 = 138412546;
    id v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Updated share for %@ with result %@", (uint8_t *)&v13, 0x16u);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8);
  char v12 = *(unsigned char *)(v11 + 24);
  if (v12) {
    char v12 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == 0;
  }
  *(unsigned char *)(v11 + 24) = v12;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

NSCopying *__cdecl sub_100220548(id a1, PKPassShare *a2)
{
  return (NSCopying *)[(PKPassShare *)a2 identifier];
}

void sub_100220550(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5 || a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = [v5 statuses];
    if (v7)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100220684;
      v8[3] = &unk_100741248;
      id v9 = *(id *)(a1 + 32);
      id v10 = v6;
      [v7 enumerateKeysAndObjectsUsingBlock:v8];
    }
    else
    {
      [v6 addObjectsFromArray:*(void *)(a1 + 40)];
    }
    (*(void (**)(void, void, id, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), 0, v6, 0);
  }
}

void sub_100220684(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  if (v7)
  {
    id v8 = [v6 unsignedIntegerValue];
    if (v8 != (id)405)
    {
      if (v8 == (id)404)
      {
        int v13 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 138412290;
          id v15 = v5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SharingManagementService: unable to find share %@ to revoke. Revoking it to clean up local state", (uint8_t *)&v14, 0xCu);
        }
      }
      else if (v8 != (id)200)
      {
        id v9 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 138412546;
          id v15 = v6;
          __int16 v16 = 2112;
          id v17 = v5;
          id v10 = "SharingManagementService: unknown result '%@' returned for share %@";
          uint64_t v11 = v9;
          uint32_t v12 = 22;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, v12);
          goto LABEL_10;
        }
        goto LABEL_10;
      }
      [*(id *)(a1 + 40) addObject:v7];
      goto LABEL_15;
    }
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v5;
      id v10 = "SharingManagementService: share %@ is not revokable";
      uint64_t v11 = v9;
      uint32_t v12 = 12;
      goto LABEL_9;
    }
LABEL_10:
  }
LABEL_15:
}

void sub_100220964(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100220A34;
  v9[3] = &unk_100741298;
  id v10 = v5;
  id v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v8 = v5;
  sub_100220B5C(v6, v7, 1, v9);
}

void sub_100220A34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = a3;
  if (v6 | *(void *)(a1 + 32))
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(a1 + 40) uniqueID];
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138412802;
      id v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      unint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to prewarmed create share for pass %@. \n certificateError: %@ \n fidoError: %@", (uint8_t *)&v10, 0x20u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100220B5C(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = [v7 fidoProfile];
    int v10 = [v7 devicePrimaryPaymentApplication];
    id v11 = [v10 dpanIdentifier];
    __int16 v12 = [*(id *)(a1 + 16) objectForKeyedSubscript:v11];
    if (!v12
      || (a3 & 1) != 0
      || ([*(id *)(a1 + 16) setObject:0 forKeyedSubscript:v11],
          double Current = CFAbsoluteTimeGetCurrent(),
          [v12 createdAt],
          Current - v14 >= 300.0))
    {
      unint64_t v15 = objc_alloc_init(PDSharingManagementRetrieveFIDOChallengeRequest);
      [(PDSharingManagementRetrieveFIDOChallengeRequest *)v15 setDpanIdentifier:v11];
      [(PDSharingManagementRetrieveFIDOChallengeRequest *)v15 setFidoProfile:v9];
      __int16 v16 = [v7 passTypeIdentifier];
      [(PDSharingManagementRequest *)v15 setRegionIdentifier:v16];

      uint64_t v17 = objc_opt_class();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_10022178C;
      v18[3] = &unk_100741388;
      id v22 = v8;
      char v23 = a3;
      id v19 = v9;
      uint64_t v20 = a1;
      id v21 = v11;
      sub_10021F124(a1, v15, v17, v18);
    }
    else
    {
      (*((void (**)(id, void *, void))v8 + 2))(v8, v12, 0);
    }
  }
}

void sub_100220D5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = [v6 devicePrimaryPaymentApplication];
    id v8 = [v7 dpanIdentifier];

    uint64_t v9 = objc_alloc_init(PDSharingManagementRetrievePartnerEncryptionCertificateRequest);
    int v10 = [v6 passTypeIdentifier];
    [(PDSharingManagementRequest *)v9 setRegionIdentifier:v10];

    id v11 = [v6 serialNumber];

    [(PDSharingManagementRetrievePartnerEncryptionCertificateRequest *)v9 setPassSerialNumber:v11];
    uint64_t v12 = objc_opt_class();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100220EB4;
    v14[3] = &unk_1007412E8;
    id v15 = v8;
    id v16 = v5;
    id v13 = v8;
    sub_100220FF8(a1, v9, v12, v14);
  }
}

void sub_100220EB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v12 = 138412290;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Unable to fetch partner encryption certificate for dpan %@", (uint8_t *)&v12, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = [v5 certificate];
    id v11 = [v5 supportedEncryptionSchemes];
    (*(void (**)(uint64_t, void *, void *, void))(v9 + 16))(v9, v10, v11, 0);
  }
}

void sub_100220FF8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(void **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100221D30;
    v10[3] = &unk_1007413D8;
    id v11 = v7;
    uint64_t v12 = a1;
    id v13 = v8;
    uint64_t v14 = a3;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
}

void sub_1002210CC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002211B0;
  v12[3] = &unk_100741310;
  long long v15 = *(_OWORD *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 64);
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  sub_100220B5C(v8, v9, 0, v12);
}

void sub_1002211B0(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = [v6 challenge];
  uint64_t v8 = *(void *)(a1[6] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 4_PDOpenPaymentSetupUI(0, 0) = v7;

  uint64_t v10 = [v6 profile];

  uint64_t v11 = *(void *)(a1[7] + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4_PDOpenPaymentSetupUI(0, 0) = v10;

  uint64_t v13 = *(void *)(a1[8] + 8);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 4_PDOpenPaymentSetupUI(0, 0) = v5;
  id v15 = v5;

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[8] + 8) + 40) != 0);
}

void sub_10022128C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10022135C;
  v12[3] = &unk_100741338;
  uint64_t v9 = *(void *)(a1 + 40);
  id v14 = v7;
  uint64_t v15 = v9;
  id v13 = v6;
  id v10 = v6;
  id v11 = v7;
  [v8 performHandlerOnSharedWebServiceQueue:v12];
}

uint64_t sub_10022135C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 targetDevice];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4_PDOpenPaymentSetupUI(0, 0) = v3;

  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v6();
}

void sub_1002213BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = [*(id *)(a1 + 32) devicePrimaryPaymentApplication];
  uint64_t v9 = [v8 subcredentials];
  id v10 = [v9 anyObject];
  uint64_t v20 = [v10 identifier];

  id v19 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v11 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) relyingPartyIdentifier];
  uint64_t v12 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) accountHash];
  id v13 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) keyHash];
  id v14 = objc_msgSend(v13, "pk_decodeHexadecimal");
  id v15 = [objc_alloc((Class)NSData) initWithBase64EncodedString:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) options:0];
  uint64_t v16 = *(void *)(a1 + 40);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100221594;
  v21[3] = &unk_100731998;
  long long v24 = *(_OWORD *)(a1 + 72);
  id v22 = v6;
  id v23 = v7;
  id v17 = v6;
  id v18 = v7;
  [v19 signWithFidoKeyForRelyingParty:v11 relyingPartyAccountHash:v12 fidoKeyHash:v14 challenge:v15 publicKeyIdentifier:v20 externalizedAuth:v16 completion:v21];
}

void sub_100221594(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
  id v10 = a3;
  uint64_t v6 = *(void *)(a1[7] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4_PDOpenPaymentSetupUI(0, 0) = v5;
  id v8 = v5;

  if (v10) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = *(void *)(*(void *)(a1[7] + 8) + 40) == 0;
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v9);
}

void sub_100221654(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v9 = @"No";
    if (*(void *)(*(void *)(a1[5] + 8) + 40)) {
      CFStringRef v9 = @"Yes";
    }
    uint64_t v10 = *(void *)(*(void *)(a1[6] + 8) + 40);
    int v12 = 138412546;
    CFStringRef v13 = v9;
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: attempted to sign fido challenge success: %@, error: %@", (uint8_t *)&v12, 0x16u);
  }

  if (*(void *)(*(void *)(a1[6] + 8) + 40)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(*(void *)(a1[5] + 8) + 40);
  }
  (*(void (**)(void, uint64_t))(a1[4] + 16))(a1[4], v11);
}

void sub_10022178C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v10 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = [v5 keyHash];
    [v6 setKeyHash:v7];

    id v8 = objc_alloc_init(PDFidoChallenge);
    [(PDFidoChallenge *)v8 setProfile:*(void *)(a1 + 32)];
    CFStringRef v9 = [v10 fidoChallenge];
    [(PDFidoChallenge *)v8 setChallenge:v9];

    if (*(unsigned char *)(a1 + 64))
    {
      [(PDFidoChallenge *)v8 setCreatedAt:CFAbsoluteTimeGetCurrent()];
      [*(id *)(*(void *)(a1 + 40) + 16) setObject:v8 forKeyedSubscript:*(void *)(a1 + 48)];
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100221894(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      id v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to encrypt PDSharingManagementCreateShareRequest: %@", (uint8_t *)&v16, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v11 = [v8 firstObject];
    PKPrivacyEncryptionSchemeFromString();

    int v12 = PKPublicKeyFromCertificate();
    CFStringRef v13 = PKEncryptDataUsingPrivacyScheme();

    if (v13)
    {
      __int16 v14 = 0;
    }
    else
    {
      uint64_t v15 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to encrypt PDSharingManagementCreateShareRequest", (uint8_t *)&v16, 2u);
      }

      __int16 v14 = +[NSError errorWithDomain:PKEncryptionErrorDomain code:1 userInfo:0];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100221A88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 context];
  id v5 = [*(id *)(a1 + 32) regionIdentifier];
  id v6 = [v4 regionForIdentifier:v5];
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [v4 primaryRegion];
  }
  id v9 = v8;

  id v10 = [v9 partnerServiceURL];
  if (v10)
  {
    uint64_t v11 = [v3 targetDevice];
    [*(id *)(a1 + 32) setTargetDevice:v11];
    int v12 = *(void **)(a1 + 32);
    CFStringRef v13 = [v11 appleAccountInformation];
    __int16 v14 = [v12 urlRequestWithServiceURL:v10 appleAccountInformation:v13];

    sub_100221C30(*(void *)(a1 + 40), v3, *(void *)(a1 + 56), v14, *(void **)(a1 + 48));
  }
  else
  {
    uint64_t v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Error: unable to find partner services url for request", v17, 2u);
    }

    uint64_t v16 = *(void *)(a1 + 48);
    uint64_t v11 = +[NSError pkSharingError:1];
    (*(void (**)(uint64_t, void, void *))(v16 + 16))(v16, 0, v11);
  }
}

void sub_100221C30(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (a1)
  {
    id v11 = a4;
    id v12 = [v9 nextTaskID];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_100221F8C;
    v13[3] = &unk_100741428;
    id v14 = v9;
    uint64_t v16 = a3;
    id v15 = v10;
    [v14 performRequest:v11 taskIdentifier:v12 retries:1 authHandling:0 completionHandler:v13];
  }
}

void sub_100221D30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 context];
  id v5 = [*(id *)(a1 + 32) regionIdentifier];
  id v6 = [v4 regionForIdentifier:v5];
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
  }
  else
  {
    id v8 = [v4 primaryRegion];
  }
  id v9 = v8;

  id v10 = [v9 brokerURL];
  if (v10)
  {
    id v11 = [v3 targetDevice];
    id v12 = [v3 context];
    CFStringRef v13 = [v12 deviceID];

    if (v13)
    {
      [*(id *)(a1 + 32) setTargetDevice:v11];
      id v14 = *(void **)(a1 + 32);
      id v15 = [v11 appleAccountInformation];
      uint64_t v16 = [v14 urlRequestWithServiceURL:v10 deviceIdentifier:v13 appleAccountInformation:v15];

      sub_100221C30(*(void *)(a1 + 40), v3, *(void *)(a1 + 56), v16, *(void **)(a1 + 48));
    }
    else
    {
      id v19 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Error: failed to fetch device id", v21, 2u);
      }

      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v16 = +[NSError pkSharingError:1];
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v16);
    }
  }
  else
  {
    id v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Error: unable to find broker url for request", buf, 2u);
    }

    uint64_t v18 = *(void *)(a1 + 48);
    id v11 = +[NSError pkSharingError:1];
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v11);
  }
}

void sub_100221F8C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v23 = 0;
  long long v24 = &v23;
  uint64_t v25 = 0x3032000000;
  int v26 = sub_100020A3C;
  CFDictionaryRef v27 = sub_100021010;
  id v28 = 0;
  id v10 = (void *)a1[4];
  uint64_t v16 = _NSConcreteStackBlock;
  uint64_t v17 = 3221225472;
  uint64_t v18 = sub_1002221A0;
  id v19 = &unk_100741400;
  uint64_t v11 = a1[6];
  id v21 = &v23;
  uint64_t v22 = v11;
  id v12 = v7;
  id v20 = v12;
  id v13 = [v10 _resultForResponse:v8 error:v9 successHandler:&v16];
  if (!v9 && v13 != (id)1)
  {
    NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
    CFStringRef v30 = @"Received non 2XX http status code";
    id v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1, v16, v17, v18, v19);
    id v9 = +[NSError errorWithDomain:PKSharingErrorDomain code:7 userInfo:v14];
  }
  if (v9) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v24[5];
  }
  (*(void (**)(void, uint64_t, id))(a1[5] + 16))(a1[5], v15, v9);

  _Block_object_dispose(&v23, 8);
}

void sub_100222180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002221A0(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 48)) initWithData:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4_PDOpenPaymentSetupUI(0, 0) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) != 0;
}

id sub_1002225A0(uint64_t a1, uint64_t a2)
{
  return +[PaymentRewardsRedemptionDetails deletePaymentRewardsRedemptionDetailsForPKPaymentRewardsRedemptionPID:a2 inDatabase:*(void *)(a1 + 32)];
}

uint64_t sub_1002225B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) details];
  id v3 = +[PaymentRewardsRedemptionDetails insertOrUpdatePaymentRewardsRedemptionDetails:v2 forPaymentRewardsRedemptionPID:*(void *)(a1 + 48) inDatabase:*(void *)(a1 + 40)];

  return 1;
}

id sub_1002229AC(id a1, NSString *a2)
{
  return [(NSString *)a2 lowercaseString];
}

id sub_1002229B4(id a1, NSString *a2)
{
  return [(NSString *)a2 uppercaseString];
}

void sub_1002229BC(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[PaymentRewardsRedemption alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = [(PaymentRewardsRedemption *)v5 paymentRewardsRedemption];
  [v3 safelyAddObject:v4];
}

void sub_100222C0C(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[PaymentRewardsRedemption alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = [(PaymentRewardsRedemption *)v5 paymentRewardsRedemption];
  [v3 safelyAddObject:v4];
}

void sub_1002233B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100223694(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
}

void sub_10022369C(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
}

void sub_1002236A4(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentRewardsRedemption setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1002236FC(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPaymentRewardsRedemption *)v3 setStatusLink:v4];
}

void sub_10022375C(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
}

void sub_100223764(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentRewardsRedemption *)v3 setUpdatedAt:v4];
}

void sub_1002237C4(id a1, PKPaymentRewardsRedemption *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentRewardsRedemption *)v3 setCreatedAt:v4];
}

void *sub_100223A48(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  if (!v8 || !v6 || !v7)
  {
    __break(1u);
    goto LABEL_11;
  }
  id v9 = [PDRemoteAlertActivationTracker alloc];
  if (!v9)
  {
LABEL_11:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  v19.receiver = v9;
  v19.super_class = (Class)PDRemoteAlertActivationTracker;
  id v10 = objc_msgSendSuper2(&v19, "init");
  uint64_t v11 = v10;
  if (v10) {
    *((_DWORD *)v10 + 9) = 0;
  }
LABEL_7:
  id v12 = (void *)v11[1];
  v11[1] = v8;
  id v13 = v8;

  id v14 = objc_retainBlock(v6);
  uint64_t v15 = (void *)v11[2];
  v11[2] = v14;

  id v16 = objc_retainBlock(v7);
  uint64_t v17 = (void *)v11[3];
  v11[3] = v16;

  return v11;
}

void sub_100223BB8(uint64_t a1)
{
  if (!a1) {
    return;
  }
  id v2 = (os_unfair_lock_s *)(a1 + 36);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 36));
  if (*(unsigned char *)(a1 + 32))
  {
    os_unfair_lock_unlock(v2);
    return;
  }
  *(unsigned char *)(a1 + 32) = 1;
  if (*(unsigned char *)(a1 + 33))
  {
    id v4 = (void **)(a1 + 24);
    id v3 = *(void **)(a1 + 24);
    if (!v3)
    {
      id v9 = 0;
      goto LABEL_14;
    }
    id v5 = *(NSObject **)(a1 + 8);
    if (v5)
    {
      dispatch_async(v5, v3);
      id v9 = 0;
    }
    else
    {
      id v9 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 24));
    }
  }
  else
  {
    id v6 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;

    id v9 = 0;
    id v4 = (void **)(a1 + 24);
  }
  id v7 = *v4;
  PKPaymentRewardsRedemption *v4 = 0;

LABEL_14:
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x390], 8) = 0;

  os_unfair_lock_unlock(v2);
  if (v9)
  {
    v9[2]();
  }
}

void sub_100223CE4(uint64_t a1)
{
  if (a1)
  {
    id v2 = (os_unfair_lock_s *)(a1 + 36);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 36));
    *(unsigned char *)(a1 + 33) = 1;
    if (*(unsigned char *)(a1 + 32) || (id v3 = *(void **)(a1 + 16)) == 0)
    {
      os_unfair_lock_unlock(v2);
    }
    else
    {
      id v4 = *(NSObject **)(a1 + 8);
      if (v4)
      {
        dispatch_async(v4, v3);
        id v6 = 0;
      }
      else
      {
        id v6 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 16));
      }
      id v5 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = 0;

      os_unfair_lock_unlock(v2);
      if (v6)
      {
        v6[2]();
      }
    }
  }
}

id *sub_100223E1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a2;
  self;
  id v9 = sub_100223EB8((id *)[PDRemoteAlertConfiguration alloc], v8);

  id v10 = v9[2];
  v9[2] = v6;
  id v11 = v6;

  id v12 = v9[3];
  v9[3] = v7;

  return v9;
}

id *sub_100223EB8(id *a1, void *a2)
{
  uint64_t result = a2;
  id v5 = result;
  if (!a1) {
    goto LABEL_5;
  }
  if (result)
  {
    v7.receiver = a1;
    v7.super_class = (Class)PDRemoteAlertConfiguration;
    id v6 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v6;
    if (v6) {
      objc_storeStrong(v6 + 1, a2);
    }
LABEL_5:

    return a1;
  }
  __break(1u);
  return result;
}

atomic_uchar *sub_100223F54(atomic_uchar *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (atomic_exchange(result + 32, 1u))
    {
      __break(1u);
    }
    else
    {
      id v2 = +[SBSRemoteAlertHandle newHandleWithDefinition:*((void *)result + 1) configurationContext:*((void *)result + 2)];
      id v3 = (void *)*((void *)v1 + 1);
      *((void *)v1 + 1) = 0;

      id v4 = (void *)*((void *)v1 + 2);
      *((void *)v1 + 2) = 0;

      return (atomic_uchar *)v2;
    }
  }
  return result;
}

void sub_100223FBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (!v3 || (atomic_exchange((atomic_uchar *volatile)(a1 + 33), 1u) & 1) != 0)
    {
      __break(1u);
      return;
    }
    id v5 = v3;
    [v3 activateWithContext:*(void *)(a1 + 24)];
    id v4 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;

    id v3 = v5;
  }
}

void *sub_100224080(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = [a1 process];
  id v3 = [v2 legacyHandle];
  if (v3)
  {
    id v4 = +[SBSRemoteAlertPresentationTargetPredicate predicateForProcess:v3];
    id v5 = [a1 sceneID];
    [v4 setScenePersistentIdentifier:v5];
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      id v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PKRemoteAlertPresentationTarget: could not convert RBSProcessHandle %p to BSProcessHandle.", (uint8_t *)&v8, 0xCu);
    }

    id v4 = 0;
  }

  return v4;
}

void *sub_1002241A4(uint64_t a1, void *a2, unint64_t a3)
{
  id v4 = a2;
  self;
  id v5 = sub_100224204([PDRemoteAlertHandle alloc], v4, a3);

  return v5;
}

void *sub_100224204(void *a1, void *a2, unint64_t a3)
{
  id v6 = a2;
  objc_super v7 = v6;
  if (a1)
  {
    if (!v6) {
      goto LABEL_9;
    }
    v12.receiver = a1;
    v12.super_class = (Class)PDRemoteAlertHandle;
    id v8 = objc_msgSendSuper2(&v12, "init");
    a1 = v8;
    if (v8)
    {
      *((_DWORD *)v8 + 4) = 0;
      objc_storeStrong((id *)v8 + 1, a2);
      a1[7] = a3;
      id v9 = PKLogFacilityTypeGetObject();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
LABEL_7:

        goto LABEL_8;
      }
      if (a3 < 0xF)
      {
        uint64_t v10 = (uint64_t)*(&off_100741588 + a3);
        *(_DWORD *)long long buf = 134218242;
        id v14 = a1;
        __int16 v15 = 2114;
        uint64_t v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDRemoteAlertHandle (%p): %{public}@ created.", buf, 0x16u);
        goto LABEL_7;
      }
LABEL_9:
      __break(1u);
    }
  }
LABEL_8:

  return a1;
}

void sub_100224394(uint64_t a1)
{
  if (a1)
  {
    id v2 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (*(unsigned char *)(a1 + 49))
    {
      os_unfair_lock_unlock(v2);
      id v3 = 0;
      id v4 = 0;
      id v5 = 0;
    }
    else
    {
      id v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v27 = a1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDRemoteAlertHandle (%p): invalidated.", buf, 0xCu);
      }

      *(unsigned char *)(a1 + 49) = 1;
      id v5 = *(id *)(a1 + 64);
      objc_super v7 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;

      id v8 = *(void **)(a1 + 32);
      if (v8)
      {
        id v4 = objc_retainBlock(v8);
        id v9 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = 0;
      }
      else
      {
        id v4 = 0;
      }
      id v3 = *(void **)(a1 + 40);
      if (v3)
      {
        id v10 = v3;
        id v11 = *(void **)(a1 + 40);
        *(void *)(a1 + 4_PDOpenPaymentSetupUI(0, 0) = 0;
      }
      objc_super v12 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x390], 8) = 0;

      id v13 = *(void **)(a1 + 24);
      if (v13)
      {
        id v14 = v13;
        __int16 v15 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = 0;
      }
      os_unfair_lock_unlock(v2);
      if (v5) {
        sub_100223BB8((uint64_t)v5);
      }
      if (v4) {
        v4[2](v4, 0);
      }
      if (v3)
      {
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v16 = v3;
        id v17 = [v16 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (v17)
        {
          id v18 = v17;
          uint64_t v19 = *(void *)v22;
          do
          {
            id v20 = 0;
            do
            {
              if (*(void *)v22 != v19) {
                objc_enumerationMutation(v16);
              }
              (*(void (**)(void))(*(void *)(*((void *)&v21 + 1) + 8 * (void)v20) + 16))(*(void *)(*((void *)&v21 + 1) + 8 * (void)v20));
              id v20 = (char *)v20 + 1;
            }
            while (v18 != v20);
            id v18 = [v16 countByEnumeratingWithState:&v21 objects:v25 count:16];
          }
          while (v18);
        }
      }
      if (v13)
      {
        [v13 unregisterObserver:a1];
        [v13 invalidate];
      }
    }
  }
}

void sub_1002245F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (!*(unsigned char *)(a1 + 48))
    {
      *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x390], 8) = 1;
      if (*(unsigned char *)(a1 + 49))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
        if (v3) {
          v3[2](v3, 0);
        }
        id v4 = 0;
LABEL_7:
        sub_100224394(a1);
LABEL_15:

        goto LABEL_16;
      }
      id v4 = *(id *)(a1 + 8);
      id v5 = sub_100223F54(*(atomic_uchar **)(a1 + 8));
      objc_storeStrong((id *)(a1 + 24), v5);
      id v6 = objc_retainBlock(v3);
      objc_super v7 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v6;

      id v8 = PKLogFacilityTypeGetObject();
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (!v5)
      {
        if (v9)
        {
          int v12 = 134217984;
          uint64_t v13 = a1;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDRemoteAlertHandle (%p): failed to create SBSRemoteAlertHandle.", (uint8_t *)&v12, 0xCu);
        }

        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
        id v3 = 0;
        goto LABEL_7;
      }
      if (v9)
      {
        int v12 = 134218240;
        uint64_t v13 = a1;
        __int16 v14 = 2048;
        __int16 v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDRemoteAlertHandle (%p): created SBSRemoteAlertHandle %p.", (uint8_t *)&v12, 0x16u);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_14:

        [(atomic_uchar *)v5 registerObserver:a1];
        sub_100223FBC((uint64_t)v4, v5);

        id v3 = 0;
        goto LABEL_15;
      }
      unint64_t v10 = *(void *)(a1 + 56);
      if (v10 < 0xF)
      {
        id v11 = (atomic_uchar *)*(&off_100741588 + v10);
        int v12 = 134218242;
        uint64_t v13 = a1;
        __int16 v14 = 2114;
        __int16 v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDRemoteAlertHandle (%p): %{public}@ started.", (uint8_t *)&v12, 0x16u);
        goto LABEL_14;
      }
    }
    __break(1u);
  }
LABEL_16:
}

void sub_100224844(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (!v3)
    {
      __break(1u);
      return;
    }
    unint64_t v10 = v3;
    id v4 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (*(unsigned char *)(a1 + 49))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      v10[2]();
      id v3 = v10;
    }
    else
    {
      id v5 = *(void **)(a1 + 40);
      if (!v5)
      {
        id v6 = objc_alloc_init((Class)NSMutableArray);
        objc_super v7 = *(void **)(a1 + 40);
        *(void *)(a1 + 4_PDOpenPaymentSetupUI(0, 0) = v6;

        id v5 = *(void **)(a1 + 40);
      }
      id v8 = [v10 copy];
      id v9 = objc_retainBlock(v8);
      [v5 addObject:v9];

      os_unfair_lock_unlock(v4);
      id v3 = 0;
    }
  }
}

void sub_10022492C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    id v4 = *(id *)(a1 + 64);
    objc_storeStrong((id *)(a1 + 64), a2);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    if (v4) {
      sub_100223BB8((uint64_t)v4);
    }
  }
}

uint64_t sub_100224D50(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t sub_1002254D8(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 48)) initWithPeerPaymentAccount:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40) associatedPeerPaymentAccountPID:*(void *)(a1 + 56)];
  if (v2)
  {
    id v3 = +[TransactionSource insertTransactionSourceWithType:1 inDatabase:*(void *)(a1 + 40)];
    id v4 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 persistentID]);
    [v2 setValue:v4 forProperty:@"transaction_source_pid"];
  }
  return 1;
}

id sub_100225E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100226490(uint64_t a1, uint64_t a2)
{
  id v4 = [(SQLiteEntity *)[PeerPaymentAccount alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = [(PeerPaymentAccount *)v4 peerPaymentAccount];
  if (v3) {
    [*(id *)(a1 + 40) addObject:v3];
  }
}

void sub_10022770C(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_100227714(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentAccount *)v3 setCreatedDate:v4];
}

void sub_100227774(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentAccount *)v3 setIdentifiedDate:v4];
}

void sub_1002277D4(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setRole:](v4, "setRole:", [a3 integerValue]);
}

void sub_10022782C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100227884(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setStateReason:](v4, "setStateReason:", [a3 integerValue]);
}

void sub_1002278DC(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setSendRestrictionType:](v4, "setSendRestrictionType:", [a3 integerValue]);
}

void sub_100227934(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setReceiveRestrictionType:](v4, "setReceiveRestrictionType:", [a3 integerValue]);
}

void sub_10022798C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setStage:](v4, "setStage:", [a3 integerValue]);
}

void sub_1002279E4(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1002279EC(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_1002279F4(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentAccount *)v3 setMaximumBalance:v4];
}

void sub_100227A58(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setIdentityVerificationRequired:](v4, "setIdentityVerificationRequired:", [a3 BOOLValue]);
}

void sub_100227AB0(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentAccount *)v3 setAmountRemainingUntilIdentityVerification:v4];
}

void sub_100227B14(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setTermsAcceptanceRequired:](v4, "setTermsAcceptanceRequired:", [a3 BOOLValue]);
}

void sub_100227B6C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setAccountStateDirty:](v4, "setAccountStateDirty:", [a3 BOOLValue]);
}

void sub_100227BC4(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentAccount *)v3 setLastUpdated:v4];
}

void sub_100227C24(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccount setProactiveFetchPeriod:](v4, "setProactiveFetchPeriod:");
}

void sub_100227C78(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccount setAccountFetchAfterTransactionWaitPeriod:](v4, "setAccountFetchAfterTransactionWaitPeriod:");
}

void sub_100227CCC(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccount setAccountFetchAfterTransactionWaitTolerance:](v4, "setAccountFetchAfterTransactionWaitTolerance:");
}

void sub_100227D20(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_100227D28(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPeerPaymentAccount *)v3 setTermsURL:v4];
}

void sub_100227D88(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPeerPaymentAccount *)v3 setAssociatedPassURL:v4];
}

void sub_100227DE8(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_100227DF0(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_100227DF8(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setPendingPaymentCount:](v4, "setPendingPaymentCount:", [a3 integerValue]);
}

void sub_100227E50(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setIdentityVerificationForDisbursementsRequired:](v4, "setIdentityVerificationForDisbursementsRequired:", [a3 BOOLValue]);
}

void sub_100227EA8(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setHasDisplayedAssociatedAccountActiveNotification:](v4, "setHasDisplayedAssociatedAccountActiveNotification:", [a3 BOOLValue]);
}

void sub_100227F00(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = +[NSSet setWithArray:v6];
  [(PKPeerPaymentAccount *)v4 setCloudStoreZoneNames:v5];
}

void sub_100227F94(id a1, PKPeerPaymentAccount *a2, id a3)
{
}

void sub_100227F9C(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setDeviceScoreEncryptedPayloadVersion:](v4, "setDeviceScoreEncryptedPayloadVersion:", [a3 integerValue]);
}

void sub_100227FF4(id a1, PKPeerPaymentAccount *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccount setHasRecurringPayments:](v4, "setHasRecurringPayments:", [a3 BOOLValue]);
}

void sub_100228510(id a1, PKAppleBalanceAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAppleBalanceAccountSummary *)v3 setCurrentBalance:v4];
}

void sub_10022866C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100228A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100228A7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) secondaryAccessory];
  if (!v2)
  {
    id v3 = 0;
    goto LABEL_5;
  }
  id v3 = +[TileAccessory insertAccessory:v2 inDatabase:*(void *)(a1 + 40)];
  if (v3)
  {
LABEL_5:
    id v5 = [objc_alloc(*(Class *)(a1 + 64)) initWithState:*(void *)(a1 + 32) forBaseState:*(void *)(a1 + 48) forSecondaryAccessory:v3 inDatabase:*(void *)(a1 + 40)];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    objc_super v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 4_PDOpenPaymentSetupUI(0, 0) = v5;

    BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
    goto LABEL_6;
  }
  BOOL v4 = 0;
LABEL_6:

  return v4;
}

void sub_100228CB4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, unsigned char *a6)
{
  id v21 = +[NSNull null];
  if (*a4 == v21) {
    id v9 = 0;
  }
  else {
    id v9 = (void *)_DateForSQLValue();
  }
  id v10 = a4[1];
  if (v10 == v21) {
    id v10 = 0;
  }
  id v11 = v10;
  id v12 = a4[2];
  if (v12 == v21) {
    id v12 = 0;
  }
  id v13 = v12;
  if (v9)
  {
    if (v11)
    {
      [v11 doubleValue];
      __int16 v15 = +[NSTimeZone timeZoneForSecondsFromGMT:(uint64_t)v14];
    }
    else
    {
      __int16 v15 = 0;
    }
    id v16 = *(void **)(a1 + 32);
    id v17 = [objc_alloc((Class)PKDateContainer) initWithDate:v9 timeZone:v15];
    [v16 setAvailableFrom:v17];
  }
  if (v13)
  {
    id v18 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileAccessory alloc], "initWithPersistentID:inDatabase:", [v13 longLongValue], *(void *)(a1 + 40));
    uint64_t v19 = *(void **)(a1 + 32);
    id v20 = [(TileAccessory *)v18 passTileAccessory];
    [v19 setSecondaryAccessory:v20];
  }
  *a6 = 1;
}

uint64_t sub_100229300(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10022941C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229534(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229668(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10022979C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229888(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229A3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229B68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229C54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229D50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100229F00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10022AE28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10022AFC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10022B0F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_10022B228(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_10022B370(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_10022B4BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10022B6D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 count];
  id v8 = [objc_alloc((Class)NSMutableSet) initWithCapacity:v7];
  id v9 = [objc_alloc((Class)NSMutableSet) initWithCapacity:v7];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        __int16 v15 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v16 = objc_msgSend(v15, "identifier", (void)v19);
        if (([v8 containsObject:v16] & 1) == 0)
        {
          [v8 addObject:v16];
          [v9 addObject:v15];
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }

  uint64_t v17 = *(void *)(a1 + 32);
  if (v17)
  {
    id v18 = [v9 copy];
    (*(void (**)(uint64_t, id, id))(v17 + 16))(v17, v18, v6);
  }
}

uint64_t sub_10022C04C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

uint64_t sub_10022C264(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

uint64_t sub_10022C3C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10022CA68(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [v5 count];
  if (a3 || !v6)
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      id v10 = "-[PDAccountService virtualCardsInKeychainWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to retrieve virtual cards stored in keychain for method: %s", (uint8_t *)&v9, 0xCu);
    }

    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v7();
}

uint64_t sub_10022DB20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10022F72C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

uint64_t sub_1002316F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    id v5 = +[Pass predicateForUniqueID:v3];
    id v6 = +[SQLiteEntity queryWithDatabase:v4 predicate:v5 orderingProperties:0 orderingDirections:0 limit:1];

    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x2020000000;
    uint64_t v13 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100231F48;
    v9[3] = &unk_100741AE0;
    void v9[4] = &v10;
    [v6 enumeratePersistentIDsUsingBlock:v9];
    uint64_t v7 = v11[3];
    _Block_object_dispose(&v10, 8);
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_100231814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100231F48(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1002326B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002328A8(id a1, PKCreditAccountMergeSummary *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountMergeSummary *)v3 setMergeDate:v4];
}

void sub_100232908(id a1, PKCreditAccountMergeSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountMergeSummary *)v3 setTotalBalance:v4];
}

uint64_t sub_1002337A4()
{
  if (qword_100808D48 != -1) {
    dispatch_once(&qword_100808D48, &stru_100741B60);
  }
  id v0 = (uint64_t (*)())dlsym((void *)qword_100808D40, "BYSetupAssistantNeedsToRun");
  off_1008066C0 = v0;
  return v0();
}

void sub_10023380C(id a1)
{
  qword_100808D40 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
}

Class sub_100233838()
{
  if (qword_100808D48 != -1) {
    dispatch_once(&qword_100808D48, &stru_100741B60);
  }
  Class result = objc_getClass("BYSetupUserDisposition");
  qword_100808D50 = (uint64_t)result;
  off_1008066C8 = (uint64_t (*)())sub_10023389C;
  return result;
}

id sub_10023389C()
{
  return (id)qword_100808D50;
}

uint64_t sub_1002338A8()
{
  if (qword_100808D48 != -1) {
    dispatch_once(&qword_100808D48, &stru_100741B60);
  }
  uint64_t result = *(void *)dlsym((void *)qword_100808D40, "BYSetupAssistantFinishedDarwinNotification");
  qword_100808D58 = result;
  off_1008066D0 = sub_100233918;
  return result;
}

uint64_t sub_100233918()
{
  return qword_100808D58;
}

void sub_10023410C(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002341D0;
  v7[3] = &unk_10072E238;
  id v8 = a2;
  id v9 = a3;
  id v10 = *(id *)(a1 + 32);
  id v5 = v9;
  id v6 = v8;
  [v10 onWorkQueue:v7];
}

void sub_1002341D0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountStatus];
  if (*(void *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "setOperationError:");
    id v3 = *(void **)(a1 + 48);
    uint64_t v4 = 3;
LABEL_11:
    [v3 advanceToNextState:v4];
    return;
  }
  id v5 = v2;
  id v3 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 32)) {
    BOOL v6 = v5 == (id)1;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v4 = 5;
    goto LABEL_11;
  }
  id v7 = [v3 errorWithCode:-4008 description:@"User has an invalid account state"];
  [*(id *)(a1 + 48) setOperationError:v7];
  [*(id *)(a1 + 48) advanceToNextState:3];
}

void sub_1002352C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(PDWebService);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

id sub_1002354CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10023585C(id a1, PDWebService *a2, id a3)
{
}

void sub_100235864(id a1, PDWebService *a2, id a3)
{
}

void sub_10023586C(id a1, PDWebService *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = +[NSURL URLWithString:a3];
  [(PDWebService *)v4 setServiceURL:v5];
}

void sub_1002358E4(id a1, PDWebService *a2, id a3)
{
}

void sub_1002358EC(id a1, PDWebService *a2, id a3)
{
}

id sub_100235BA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) applyPushNotificationToken:*(void *)(a1 + 40)];
}

void sub_100235D90(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pushNotificationTopics];
  [*(id *)(a1 + 32) applyPushNotificationToken:*(void *)(a1 + 40)];
  if ([v2 containsObject:*(void *)(a1 + 48)]) {
    [*(id *)(a1 + 32) handlePushNotificationForTopic:*(void *)(a1 + 48) userInfo:*(void *)(a1 + 56)];
  }
}

id sub_100235F7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) applyPushNotificationToken:*(void *)(a1 + 40)];
}

void sub_100236658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10023666C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleToken:0 forTokenInfo:*(void *)(a1 + 32) fromTimeout:1];
}

void sub_100236B5C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = objc_alloc_init((Class)PKPassProvisioningMetadata);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v6 withProperties:v5 values:a3];

  [*(id *)(a1 + 40) addObject:v6];
}

void sub_100236E30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100236F48(id a1, PKPassProvisioningMetadata *a2, id a3)
{
  id v3 = a2;
  [(PKPassProvisioningMetadata *)v3 setSourceDeviceType:PKPassProvisioningMetadataSourceDeviceTypeFromString()];
}

void sub_100236FA0(id a1, PKPassProvisioningMetadata *a2, id a3)
{
}

void sub_1002371FC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v9 = [objc_alloc((Class)PKPendingProvisioningReceipt) initForDatabase];
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v9 withProperties:v5 values:a3];
  id v6 = [v5 indexOfObject:@"f"];

  id v7 = -[SQLiteEntity initWithPersistentID:inDatabase:]([PendingProvisioning alloc], "initWithPersistentID:inDatabase:", [*(id *)(a3 + 8 * (void)v6) longLongValue], *(void *)(a1 + 40));
  id v8 = [(PendingProvisioning *)v7 pendingProvisioning];
  [v9 setPendingProvisioning:v8];

  [*(id *)(a1 + 48) addObject:v9];
}

void sub_1002374E4(uint64_t a1, uint64_t a2)
{
  id v2 = [(SQLiteEntity *)[PendingProvisioningReceipt alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [(PendingProvisioningReceipt *)v2 deleteFromDatabase];
}

void sub_100237648(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:a1[5] toObject:a1[6] withProperties:v5 values:a3];
  id v6 = [v5 indexOfObject:@"f"];

  id v9 = -[SQLiteEntity initWithPersistentID:inDatabase:]([PendingProvisioning alloc], "initWithPersistentID:inDatabase:", [*(id *)(a3 + 8 * (void)v6) longLongValue], *(void *)(a1[4] + 8));
  id v7 = (void *)a1[6];
  id v8 = [(PendingProvisioning *)v9 pendingProvisioning];
  [v7 setPendingProvisioning:v8];
}

void sub_100237AF0(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
}

void sub_100237AF8(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
  id v3 = a2;
  [(PKPendingProvisioningReceipt *)v3 setType:PKPendingProvisioningReceiptTypeFromString()];
}

void sub_100237B50(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKPendingProvisioningReceipt setCreatedAt:](v4, "setCreatedAt:");
}

void sub_100237BA4(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
}

void sub_100237BAC(id a1, PKPendingProvisioningReceipt *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:0];

    [(PKPendingProvisioningReceipt *)v5 setError:v6];
  }
}

void sub_100237E94(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  if (*a4)
  {
    id v5 = *a4;
    objc_msgSend(v5, "pk_stringIfNotEmpty");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "pk_safelyAddObject:", v6);
  }
}

void sub_100238E68(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100238F20;
  v4[3] = &unk_10072E198;
  id v5 = v2;
  id v6 = *(id *)(a1 + 40);
  [v5 insertOrReplaceAccount:v3 extended:1 deleteSensitiveData:0 completion:v4];
}

void sub_100238F20(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)v2[3];
  id v4 = [v2 _mockAccountUsers];
  id v5 = [*(id *)(a1 + 40) accountIdentifier];
  id v6 = [v3 insertOrUpdateAccountUsers:v4 forAccountWithIdentifier:v5];

  id v7 = *(void **)(a1 + 32);
  id v8 = (void *)v7[3];
  id v11 = [v7 _mockPhysicalCards];
  id v9 = [*(id *)(a1 + 40) accountIdentifier];
  id v10 = [v8 replacePhysicalCards:v11 forAccountWithIdentifier:v9];
}

void sub_1002390FC(uint64_t a1)
{
  [*(id *)(a1 + 32) _updatePushTopics];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) sharedWebServiceContext];
  uint64_t v3 = [v2 regions];

  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v6)
  {
    id v7 = v6;
    LOBYTE(v_Block_object_dispose(&STACK[0x390], 8) = 0;
    uint64_t v9 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v12 = objc_msgSend(v5, "objectForKey:", v11, (void)v34);
        uint64_t v13 = v12;
        if (v8) {
          unsigned int v8 = 1;
        }
        else {
          unsigned int v8 = [v12 hasAccounts];
        }
        double v14 = [v13 accountServiceURL];
        if (v14) {
          [v4 setObject:v14 forKey:v11];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v34 objects:v42 count:16];
    }
    while (v7);

    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = (unsigned char *)(v15 + 80);
    if ((v8 ^ (*(unsigned char *)(v15 + 80) == 0)))
    {
      int v17 = 0;
      if (!*(unsigned char *)(v15 + 80)) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
  }
  else
  {

    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(unsigned __int8 *)(v18 + 80);
    id v16 = (unsigned char *)(v18 + 80);
    if (!v19)
    {
      if (PKEqualObjects()) {
        goto LABEL_50;
      }
      LOBYTE(v17) = 0;
      goto LABEL_33;
    }
    LOBYTE(v_Block_object_dispose(&STACK[0x390], 8) = 0;
  }
  unsigned char *v16 = v8;
  long long v20 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 80)) {
      CFStringRef v21 = @"YES";
    }
    else {
      CFStringRef v21 = @"NO";
    }
    *(_DWORD *)long long buf = 138412290;
    id v39 = (const char *)v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "hasAccounts changed to %@", buf, 0xCu);
  }

  uint64_t v15 = *(void *)(a1 + 32);
  int v17 = 1;
  if (*(unsigned char *)(v15 + 80))
  {
LABEL_24:
    if (!objc_msgSend(*(id *)(v15 + 64), "count", (void)v34))
    {
      long long v22 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "hasAccounts YES but no accounts on disk", buf, 2u);
      }

      int v17 = 1;
    }
  }
LABEL_28:
  if (PKEqualObjects())
  {
    if (!v17) {
      goto LABEL_50;
    }
    long long v23 = *(void **)(*(void *)(a1 + 32) + 72);
    goto LABEL_44;
  }
LABEL_33:
  uint64_t v24 = *(void *)(a1 + 32);
  if (*(void *)(v24 + 72) && !v4)
  {
    uint64_t v25 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = +[NSThread callStackSymbols];
      *(_DWORD *)long long buf = 136315394;
      id v39 = "-[PDAccountManager _paymentWebServiceContextChanged]_block_invoke";
      __int16 v40 = 2112;
      id v41 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s previously had account URLs now nil: %@", buf, 0x16u);
    }
    uint64_t v24 = *(void *)(a1 + 32);
  }
  objc_storeStrong((id *)(v24 + 72), v4);
  uint64_t v27 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = *(const char **)(*(void *)(a1 + 32) + 72);
    *(_DWORD *)long long buf = 138412290;
    id v39 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Account URLs changed to %@", buf, 0xCu);
  }

  long long v23 = *(void **)(*(void *)(a1 + 32) + 72);
  if (v23) {
    char v29 = 1;
  }
  else {
    char v29 = v17;
  }
  if (v29)
  {
LABEL_44:
    if (objc_msgSend(v23, "count", (void)v34))
    {
      CFStringRef v30 = +[PKAppleAccountManager sharedInstance];
      uint64_t v31 = [v30 appleAccountInformation];
      unsigned int v32 = [v31 aidaAccountAvailable];

      if (v32)
      {
        [*(id *)(a1 + 32) updateAccountsWithCompletion:&stru_100741DB0];
      }
      else
      {
        id v33 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "ignoring paymentWebServiceContextChange since aidaAccount is unavailable", buf, 2u);
        }
      }
    }
  }
LABEL_50:
}

void sub_100239594(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Account updated following context and account URL change", v4, 2u);
  }
}

void sub_100239748(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void *sub_1002398B8(void *result)
{
  uint64_t v1 = result[4];
  if (*(unsigned char *)(v1 + 56))
  {
    id v2 = result;
    *(unsigned char *)(v1 + 56) = 0;
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to restore accounts after database restoration", v4, 2u);
    }

    return [(id)v2[4] updateAccountsWithCompletion:&stru_100741DD0];
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10023994C(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Accounts updated following database restoration", v4, 2u);
  }
}

void sub_10023A3DC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_mergeAccounts:featureFailures:", *(void *)(a1 + 40), 0);
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023A484;
    block[3] = &unk_10072F788;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_10023A484(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10023A574(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    id v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023A628;
    block[3] = &unk_10072F788;
    id v6 = v3;
    dispatch_async(v4, block);
  }
}

uint64_t sub_10023A628(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10023AABC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _queueIndexOfAccountWithIdentifier:*(void *)(a1 + 40)];
  if (v2 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v3 = 0;
  }
  else
  {
    id v4 = v2;
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 64) objectAtIndex:v2];
    [*(id *)(*(void *)(a1 + 32) + 64) removeObjectAtIndex:v4];
    [*(id *)(*(void *)(a1 + 32) + 24) deleteAccountWithIdentifier:*(void *)(a1 + 40)];
    if (v3)
    {
      [*(id *)(a1 + 32) postAccountChangedNotification];
      id v5 = *(void **)(a1 + 32);
      uint64_t v11 = v3;
      id v6 = +[NSArray arrayWithObjects:&v11 count:1];
      [v5 _processDeletedAccounts:v6];
    }
  }
  long long v7 = *(void **)(a1 + 48);
  if (v7)
  {
    long long v8 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023AC24;
    block[3] = &unk_10072F788;
    id v10 = v7;
    dispatch_async(v8, block);
  }
}

uint64_t sub_10023AC24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10023AD20(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    id v2 = *(void **)(a1 + 32);
    uint64_t v3 = [*(id *)(a1 + 40) accountIdentifier];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10023ADDC;
    v4[3] = &unk_10072E9B0;
    void v4[4] = *(void *)(a1 + 32);
    id v5 = *(id *)(a1 + 48);
    [v2 accountWithIdentifier:v3 completion:v4];
  }
}

void sub_10023ADDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10023AE94;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_10023AE94(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10023AF94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_10023B048;
    v6[3] = &unk_10072E598;
    id v8 = v4;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10023B048(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10023B0F4(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(*(void *)(a1 + 32) + 24) setNeedsSyncWithFinanceForAllTransactions];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10023B1A4;
  v4[3] = &unk_10073B5A0;
  id v5 = *(id *)(a1 + 40);
  unsigned __int8 v6 = v2;
  dispatch_async(v3, v4);
}

uint64_t sub_10023B1A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_10023B264(id a1)
{
  uint64_t v1 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Finished refreshing BAA certs and keys", v2, 2u);
  }
}

void sub_10023B2D0(id a1, PKApplePayTrustSession *a2)
{
  unsigned __int8 v2 = a2;
  id v3 = v2;
  if (v2)
  {
    [(PKApplePayTrustSession *)v2 deleteKeyWithIdentifier:PKApplePayTrustKeyDefaultIdentifier];
    [(PKApplePayTrustSession *)v3 invalidateSession];
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v7 = 0;
      id v5 = "Apple Pay Trust key deleted.";
      unsigned __int8 v6 = (uint8_t *)&v7;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
    }
  }
  else
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      id v5 = "Failed to start Apple Pay Trust session for key deletion on iCloud log out.";
      unsigned __int8 v6 = buf;
      goto LABEL_6;
    }
  }
}

void sub_10023B438(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_deleteAccounts");
  unsigned __int8 v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023B4D8;
    block[3] = &unk_10072F788;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_10023B4D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10023B5C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10023B670;
    v4[3] = &unk_10072E598;
    id v6 = v1;
    id v5 = *(id *)(a1 + 40);
    dispatch_async(v3, v4);
  }
}

uint64_t sub_10023B670(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10023BBF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v3, "accountManager:didAddAccount:", *(void *)(a1 + 40), v9, (void)v10);
        }
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_10023BD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated user info for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023BDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated scheduled payments for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023BEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated physical cards for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023BF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated shared account cloud store for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023C034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated shared account users for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023C0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated promotions for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023C1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated enhanced merchants for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023CEF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        __int16 v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v9, "count", (void)v12) == (id)2)
        {
          uint64_t v10 = [v9 objectAtIndexedSubscript:0];
          long long v11 = [v9 objectAtIndexedSubscript:1];
          if (objc_opt_respondsToSelector()) {
            [v3 accountManager:*(void *)(a1 + 40) didUpdateAccount:v11 oldAccount:v10];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

uint64_t sub_10023D064(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [*(id *)(a1 + 32) identifier];
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_10023D0FC(id a1, PKVirtualCard *a2, PKAccount *a3, NSError *a4)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Completed attempt to proactively fetch virtual card", v5, 2u);
  }
}

id sub_10023D168(uint64_t a1)
{
  return +[PKHomeScreenWidgetController reloadWidget:PKHomeScreenWidgetKindAppleCard budgeted:0 reason:*(void *)(a1 + 32)];
}

void sub_10023D18C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = a3;
    uint64_t v8 = [v6 accountIdentifier];

    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated payment plans for account %@ since recoveryPaymentPlansSupported is now YES or account state changed. Error: %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_10023D270(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [*(id *)(a1 + 40) accountIdentifier];
    [v5 accountManager:v3 creditRecoveryPaymentPlansChangedForAccountIdentifier:v4];
  }
}

void sub_10023D2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated shared account cloud store following an account becoming shared for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023D3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated shared account users following an account becoming shared for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10023D65C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v3, "accountManager:didRemoveAccount:", *(void *)(a1 + 40), v9, (void)v10);
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_10023D89C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10023D998;
  v9[3] = &unk_100741FD8;
  id v10 = v3;
  id v5 = *(id *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  id v15 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_10023D998(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) creditDetails];
  id v3 = [v2 currencyCode];

  if (*(void *)(a1 + 32)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    id v65 = +[NSDecimalNumber zero];
    id v5 = *(void **)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = PKCurrentUserAltDSID();
    id v10 = [v5 _promoRewardsMerchantNamesFromDate:v6 toDate:v7 accountIdentifier:v8 altDSID:v9 rewardPercentage:&v65];

    if ([v10 count] && (unint64_t)objc_msgSend(v10, "count") <= 3)
    {
      id v11 = v65;
      uint64_t v12 = +[NSDecimalNumber zero];
      if (v11 == (id)v12)
      {
      }
      else
      {
        id v13 = (void *)v12;
        id v14 = v65;
        id v15 = +[NSDecimalNumber notANumber];

        if (v14 != v15)
        {
          int v16 = 0;
          uint64_t v58 = 0;
          long long v59 = 0;
          id v17 = 0;
          id v18 = 0;
          goto LABEL_14;
        }
      }
    }
    int v19 = *(void **)(a1 + 40);
    long long v20 = PKStartOfMonth();
    CFStringRef v21 = PKEndOfMonth();
    uint64_t v22 = *(void *)(a1 + 64);
    long long v23 = PKCurrentUserAltDSID();
    id v64 = 0;
    uint64_t v24 = [v19 _rewardsAmountFromDate:v20 toDate:v21 accountIdentifier:v22 altDSID:v23 rewardTypes:&v64];
    id v18 = v64;

    long long v59 = PKCurrencyAmountCreate(v24, v3, 0);
    uint64_t v25 = *(void **)(a1 + 40);
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v27 = *(void *)(a1 + 56);
    uint64_t v28 = *(void *)(a1 + 64);
    char v29 = PKCurrentUserAltDSID();
    id v63 = 0;
    CFStringRef v30 = [v25 _rewardsAmountFromDate:v26 toDate:v27 accountIdentifier:v28 altDSID:v29 rewardTypes:&v63];
    id v17 = v63;

    uint64_t v58 = PKCurrencyAmountCreate(v30, v3, 0);

    int v16 = 1;
LABEL_14:
    uint64_t v31 = [v17 anyObject];
    unsigned int v32 = (char *)[v31 integerValue];

    if ((unint64_t)(v32 - 2) >= 2)
    {
      if (v32 == (char *)1)
      {
        long long v34 = [*(id *)(*(void *)(a1 + 40) + 24) peerPaymentAccount];
        long long v35 = [v34 associatedPassUniqueID];

        if (v35)
        {
          id v36 = v35;
        }
        else
        {
          id v36 = [*(id *)(a1 + 32) associatedPassUniqueID];
        }
        id v33 = v36;

        if (v16) {
          goto LABEL_25;
        }
      }
      else
      {
        id v33 = 0;
        if (v16)
        {
LABEL_25:
          if ([v18 containsObject:&off_10078B160]) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = [v18 containsObject:&off_10078B178] ^ 1;
          }
          if ([v17 containsObject:&off_10078B160]) {
            unsigned int v43 = 0;
          }
          else {
            unsigned int v43 = [v17 containsObject:&off_10078B178] ^ 1;
          }
          uint64_t v57 = v10;
          if (v42) {
            BOOL v44 = [v18 count] == (id)1;
          }
          else {
            BOOL v44 = 0;
          }
          id v45 = v18;
          if (v43)
          {
            id v46 = [v17 count];
            BOOL v47 = v46 == (id)1;
            if (v46 == (id)1 && v44)
            {
              uint64_t v49 = (void *)v58;
              id v18 = v45;
              __int16 v40 = [[PDPassPaymentDailyDailyCashWithAmountUserNotification alloc] initWithDailyAmount:v58 monthlyAmount:v59 date:*(void *)(a1 + 48) forPassUniqueIdentifier:v33 dailyRewardTypes:v17 monthlyRewardTypes:v45];
              if ([(PDPassPaymentDailyDailyCashWithAmountUserNotification *)v40 hasValidContent])
              {
                id v10 = v57;
LABEL_58:
                uint64_t v54 = *(NSObject **)(*(void *)(a1 + 40) + 144);
                block[0] = _NSConcreteStackBlock;
                block[1] = 3221225472;
                block[2] = sub_10023DFC8;
                block[3] = &unk_10072E598;
                id v55 = *(id *)(a1 + 72);
                long long v61 = v40;
                id v62 = v55;
                id v56 = v40;
                dispatch_async(v54, block);

                goto LABEL_59;
              }

              id v41 = PKLogFacilityTypeGetObject();
              id v10 = v57;
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Daily Cash amount notification suppressed due to malformed content", buf, 2u);
              }
              __int16 v40 = 0;
LABEL_57:

              goto LABEL_58;
            }
          }
          else
          {
            BOOL v47 = 0;
          }
          id v41 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v50 = @"NO";
            if (v47) {
              CFStringRef v51 = @"YES";
            }
            else {
              CFStringRef v51 = @"NO";
            }
            if (v44) {
              CFStringRef v52 = @"YES";
            }
            else {
              CFStringRef v52 = @"NO";
            }
            *(_DWORD *)long long buf = 138413058;
            CFStringRef v67 = v51;
            if (v43) {
              CFStringRef v53 = @"YES";
            }
            else {
              CFStringRef v53 = @"NO";
            }
            __int16 v68 = 2112;
            CFStringRef v69 = v52;
            __int16 v70 = 2112;
            CFStringRef v71 = v53;
            if (v42) {
              CFStringRef v50 = @"YES";
            }
            __int16 v72 = 2112;
            CFStringRef v73 = v50;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Daily cash notification suppressed due to a period of mixed destinations or statement credit; dailyPeriodC"
              "ontainsSingleDestination: %@; monthlyPeriodContainsSingleDestination: %@; dailyEventPeriodRedeemsToAccount"
              ": %@; monthlyEventPeriodRedeemsToAccount: %@",
              buf,
              0x2Au);
          }
          __int16 v40 = 0;
          id v18 = v45;
          id v10 = v57;
LABEL_56:
          uint64_t v49 = (void *)v58;
          goto LABEL_57;
        }
      }
    }
    else
    {
      id v33 = [*(id *)(a1 + 32) associatedPassUniqueID];
      if (v16) {
        goto LABEL_25;
      }
    }
    long long v37 = [PDPassPaymentDailyDailyCashWithPercentageUserNotification alloc];
    id v38 = v65;
    id v39 = objc_msgSend(v10, "pk_arrayCopy");
    __int16 v40 = [(PDPassPaymentDailyDailyCashWithPercentageUserNotification *)v37 initWithPercentage:v38 merchantNames:v39 monthlyAmount:v59 date:*(void *)(a1 + 48) forPassUniqueIdentifier:v33];

    id v41 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Daily Cash percent notification generated", buf, 2u);
    }
    goto LABEL_56;
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
LABEL_59:
}

uint64_t sub_10023DFC8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10023E7C4(uint64_t a1)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64);
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (([v8 accountStateDirty] & 1) == 0)
        {
          char v5 = 1;
          [v8 setAccountStateDirty:1];
          id v9 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccount:v8];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v4);
  }
  else
  {
    char v5 = 0;
  }

  id v10 = [*(id *)(*(void *)(a1 + 32) + 24) accounts];
  id v11 = [v10 allObjects];
  uint64_t v12 = +[NSMutableArray arrayWithArray:v11];
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  if (v5) {
    [*(id *)(a1 + 32) postAccountChangedNotification];
  }
  id v15 = *(void **)(a1 + 40);
  if (v15)
  {
    int v16 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023E9C8;
    block[3] = &unk_10072F788;
    id v18 = v15;
    dispatch_async(v16, block);
  }
}

uint64_t sub_10023E9C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10023EA9C(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        if (([v8 accountStateDirty] & 1) == 0)
        {
          id v9 = objc_msgSend(*(id *)(a1 + 40), "errorForFeature:", objc_msgSend(v8, "feature"));
          if (v9)
          {
            char v5 = 1;
            [v8 setAccountStateDirty:1];
            id v10 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccount:v8];
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v4);
  }
  else
  {
    char v5 = 0;
  }

  id v11 = [*(id *)(*(void *)(a1 + 32) + 24) accounts];
  uint64_t v12 = [v11 allObjects];
  uint64_t v13 = +[NSMutableArray arrayWithArray:v12];
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 64);
  *(void *)(v14 + 64) = v13;

  if (v5) {
    [*(id *)(a1 + 32) postAccountChangedNotification];
  }
  int v16 = *(void **)(a1 + 48);
  if (v16)
  {
    id v17 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023ECCC;
    block[3] = &unk_10072F788;
    id v19 = v16;
    dispatch_async(v17, block);
  }
}

uint64_t sub_10023ECCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10023EDA0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _queueIndexOfAccountWithIdentifier:*(void *)(a1 + 40)];
  if (v2 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v3 = v2;
    id v4 = [*(id *)(*(void *)(a1 + 32) + 64) objectAtIndex:v2];
    if ([v4 accountStateDirty])
    {
    }
    else
    {
      [v4 setAccountStateDirty:1];
      char v5 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccount:v4];
      [*(id *)(*(void *)(a1 + 32) + 64) replaceObjectAtIndex:v3 withObject:v5];

      [*(id *)(a1 + 32) postAccountChangedNotification];
    }
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10023EECC;
    block[3] = &unk_10072F788;
    id v9 = v6;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10023EECC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100241390(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) fetchAllVirtualCardsForAccountIdentifier:*(void *)(a1 + 40) completion:0];
    [*(id *)(a1 + 32) userInfoForAccountIdentifier:*(void *)(a1 + 40) forceFetch:0 completion:0];
    [*(id *)(a1 + 32) updateFinancingPlansForAccountWithIdentifier:*(void *)(a1 + 40) pageOffset:0 limit:0 ignoreLastUpdatedDate:1 forceFetch:0 completion:0];
    id v4 = *(void **)(a1 + 32);
    char v5 = (void *)v4[20];
    uint64_t v6 = [v4 _setupNotificationIdentifierForAccountIdentifier:*(void *)(a1 + 40)];
    [v5 removeUserNotificationWithIdentifier:v6];

    if ([v3 isSharedAccount])
    {
      uint64_t v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fetching users and shared account cloud store zones after pass provisioning", v8, 2u);
      }

      [*(id *)(a1 + 32) updateAccountUsersForAccountWithIdentifier:*(void *)(a1 + 40) completion:0];
      [*(id *)(a1 + 32) updateSharedAccountCloudStoreWithAccountIdentifier:*(void *)(a1 + 40) completion:0];
    }
  }
}

void sub_100241608(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pass removed: removing locally stored virtual cards on the associated account with identifier: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1002416B4(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pass removed: removing financing plans on the associated account with identifier: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100241760(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 feature] == (id)2)
  {
    PKSharedCacheSetBoolForKey();
    PKSharedCacheSetObjectForKey();
    PKSharedCacheSetBoolForKey();
    PKSharedCacheSetBoolForKey();
    id v4 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v5 = [v3 transactionSourceIdentifier];
    if ([v5 length]) {
      [v4 addObject:v5];
    }
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002418AC;
    v9[3] = &unk_10072FC70;
    id v10 = v4;
    id v11 = v7;
    id v8 = v4;
    [v7 accountUsersForAccountWithIdentifier:v6 completion:v9];
  }
}

void sub_1002418AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v25;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v7);
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        id v9 = [v8 transactionSourceIdentifiers];
        id v10 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v21;
          do
          {
            uint64_t v13 = 0;
            do
            {
              if (*(void *)v21 != v12) {
                objc_enumerationMutation(v9);
              }
              [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v20 + 1) + 8 * (void)v13)];
              uint64_t v13 = (char *)v13 + 1;
            }
            while (v11 != v13);
            id v11 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
          }
          while (v11);
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v5);
  }
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v14 = *(NSObject **)(*(void *)(a1 + 40) + 136);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100241AB0;
    v17[3] = &unk_10072E198;
    id v15 = *(id *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    id v18 = v15;
    uint64_t v19 = v16;
    dispatch_async(v14, v17);
  }
}

void sub_100241AB0(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Pass removed: deleting transactions for source ids %@", (uint8_t *)&v7, 0xCu);
  }

  id v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(*(void *)(a1 + 40) + 24);
  id v6 = [v4 copy];
  [v5 deleteAllTransactionsFromTransactionSourceIdentifiers:v6];
}

void sub_100241C24(uint64_t a1)
{
  uint64_t v1 = a1;
  if ([*(id *)(*(void *)(a1 + 32) + 72) count])
  {
    id v29 = objc_alloc_init((Class)NSMutableArray);
    id v28 = objc_alloc_init((Class)NSMutableArray);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v2 = *(id *)(*(void *)(v1 + 32) + 64);
    id v3 = [v2 countByEnumeratingWithState:&v34 objects:v42 count:16];
    if (!v3) {
      goto LABEL_29;
    }
    id v4 = v3;
    uint64_t v5 = *(void *)v35;
    while (1)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v8 = (char *)objc_msgSend(v7, "state", v28);
        [v7 state];
        id v9 = PKAccountStateToString();
        if (([v7 provisioningAllowed] & 1) == 0)
        {
          id v17 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = [v7 accountIdentifier];
            *(_DWORD *)long long buf = 138412546;
            id v39 = v19;
            __int16 v40 = 2112;
            id v41 = v9;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Account: %@ with state: %@ does not allow provisioning and will not be offered", buf, 0x16u);
          }
          goto LABEL_26;
        }
        if ((unint64_t)(v8 - 1) < 4)
        {
          uint64_t v10 = v1;
          id v11 = *(void **)(*(void *)(v1 + 32) + 24);
          uint64_t v12 = [v7 associatedPassUniqueID];
          unsigned int v13 = [v11 passExistsWithUniqueID:v12];

          uint64_t v14 = PKLogFacilityTypeGetObject();
          BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          if (v13)
          {
            if (v15)
            {
              uint64_t v16 = [v7 accountIdentifier];
              *(_DWORD *)long long buf = 138412546;
              id v39 = v16;
              __int16 v40 = 2112;
              id v41 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Account: %@ with state: %@ is on device", buf, 0x16u);
            }
            id v17 = [v7 copy];
            id v18 = v28;
          }
          else
          {
            if (v15)
            {
              long long v22 = [v7 accountIdentifier];
              *(_DWORD *)long long buf = 138412546;
              id v39 = v22;
              __int16 v40 = 2112;
              id v41 = v9;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Account: %@ with state: %@ is valid for provisioning", buf, 0x16u);
            }
            id v17 = [v7 copy];
            id v18 = v29;
          }
          [v18 addObject:v17];
          uint64_t v1 = v10;
LABEL_26:

          goto LABEL_27;
        }
        if (v8) {
          BOOL v20 = v8 == (char *)5;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20)
        {
          id v17 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            long long v21 = [v7 accountIdentifier];
            *(_DWORD *)long long buf = 138412546;
            id v39 = v21;
            __int16 v40 = 2112;
            id v41 = v9;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Account: %@ with state: %@ is not valid for provisioning", buf, 0x16u);
          }
          goto LABEL_26;
        }
LABEL_27:
      }
      id v4 = [v2 countByEnumeratingWithState:&v34 objects:v42 count:16];
      if (!v4)
      {
LABEL_29:

        long long v23 = *(NSObject **)(*(void *)(v1 + 32) + 144);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1002420C4;
        block[3] = &unk_100731830;
        id v24 = *(id *)(v1 + 40);
        id v31 = v29;
        id v32 = v28;
        id v33 = v24;
        id v25 = v28;
        id v26 = v29;
        dispatch_async(v23, block);

        return;
      }
    }
  }
  long long v27 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Skipping account update as we don't have account URLs", buf, 2u);
  }

  (*(void (**)(void))(*(void *)(v1 + 40) + 16))();
}

uint64_t sub_1002420C4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100242184(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64);
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        id v9 = *(void **)(*(void *)(a1 + 32) + 24);
        uint64_t v10 = [v8 associatedPassUniqueID];
        LODWORD(v9) = [v9 passExistsWithUniqueID:v10];

        if (v9)
        {
          id v11 = [v8 copy];
          [v2 addObject:v11];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v5);
  }

  uint64_t v12 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100242360;
  v15[3] = &unk_10072E598;
  id v13 = *(id *)(a1 + 40);
  id v16 = v2;
  id v17 = v13;
  id v14 = v2;
  dispatch_async(v12, v15);
}

uint64_t sub_100242360(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10024241C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      int v7 = 0;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v7) copy];
        [v2 addObject:v8];

        int v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }

  id v9 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002425BC;
  v12[3] = &unk_10072E598;
  id v10 = *(id *)(a1 + 40);
  id v13 = v2;
  id v14 = v10;
  id v11 = v2;
  dispatch_async(v9, v12);
}

uint64_t sub_1002425BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100242698(id *a1)
{
  id v2 = objc_msgSend(a1[4], "_queue_accountWithIdentifier:", a1[5]);
  id v3 = *((void *)a1[4] + 18);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100242774;
  block[3] = &unk_10072E9D8;
  id v6 = v2;
  id v7 = a1[5];
  id v8 = a1[6];
  id v4 = v2;
  dispatch_async(v3, block);
}

uint64_t sub_100242774(void *a1)
{
  if (!a1[4])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = a1[5];
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No account with identifier: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_100242A78(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableSet);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v10, "feature", (void)v13) == *(id *)(a1 + 40)) {
          [v4 addObject:v10];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = [v4 copy];
  (*(void (**)(uint64_t, id))(v11 + 16))(v11, v12);
}

void sub_100242C98(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountWithVirtualCardIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100242D74;
  block[3] = &unk_10072E9D8;
  id v6 = v2;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v4 = v2;
  dispatch_async(v3, block);
}

uint64_t sub_100242D74(void *a1)
{
  if (!a1[4])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = a1[5];
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No account with virtual card identifier: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_100242F04(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) associatedAccountIdentifierForPassWithUniqueIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 24) accountWithIdentifier:v2];
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10024300C;
  v7[3] = &unk_100730578;
  id v8 = v3;
  id v9 = v2;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v5 = v2;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_10024300C(void *a1)
{
  if (!a1[4])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = a1[5];
      uint64_t v4 = a1[6];
      int v6 = 138412546;
      uint64_t v7 = v3;
      __int16 v8 = 2112;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@ for pass with uniqueID: %@", (uint8_t *)&v6, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(a1[7] + 16))();
}

void sub_100243460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_100243490(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100243540;
    v6[3] = &unk_100741E20;
    id v8 = v4;
    id v7 = v3;
    [v5 accountsWithCompletion:v6];
  }
}

uint64_t sub_100243540(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32));
}

void sub_100243554(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v7) creditDetails];
        uint64_t v9 = +[NSDate date];
        [v8 setLastUpdatedDate:v9];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v5);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(NSObject **)(v10 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100243700;
  block[3] = &unk_10072E9D8;
  void block[4] = v10;
  id v14 = v3;
  id v15 = *(id *)(a1 + 40);
  id v12 = v3;
  dispatch_async(v11, block);
}

uint64_t sub_100243700(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_mergeAccounts:featureFailures:", *(void *)(a1 + 40), 0);
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_100243750(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100243814;
  v6[3] = &unk_100742140;
  void v6[4] = v2;
  long long v9 = *(_OWORD *)(a1 + 56);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 72);
  id v7 = v4;
  uint64_t v10 = v5;
  char v11 = *(unsigned char *)(a1 + 80);
  id v8 = *(id *)(a1 + 48);
  [v3 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_100243814(uint64_t a1, void *a2)
{
  id v3 = [a2 context];
  id v4 = [v3 regions];

  id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v35;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v6);
        }
        char v11 = [v6 objectForKey:*(void *)(*((void *)&v34 + 1) + 8 * (void)v10)];
        id v12 = [v11 accountServiceURL];

        if (v12)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472;
          v29[2] = sub_100243ADC;
          void v29[3] = &unk_1007420A0;
          void v29[4] = *(void *)(a1 + 32);
          id v13 = v11;
          uint64_t v14 = *(void *)(a1 + 64);
          id v30 = v13;
          uint64_t v32 = v14;
          id v15 = *(id *)(a1 + 40);
          uint64_t v16 = *(void *)(a1 + 72);
          id v31 = v15;
          uint64_t v33 = v16;
          [v5 addOperation:v29];
        }
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v8);
  }

  long long v17 = +[NSNull null];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100244000;
  v23[3] = &unk_100742118;
  char v28 = *(unsigned char *)(a1 + 80);
  void v23[4] = *(void *)(a1 + 32);
  long long v22 = *(_OWORD *)(a1 + 48);
  id v18 = (id)v22;
  long long v25 = v22;
  uint64_t v26 = *(void *)(a1 + 72);
  id v19 = *(id *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 64);
  id v24 = v19;
  uint64_t v27 = v20;
  id v21 = [v5 evaluateWithInput:v17 completion:v23];
}

void sub_100243ADC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(a1 + 32) + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100243BDC;
  v16[3] = &unk_100742078;
  id v9 = *(id *)(a1 + 40);
  char v11 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  id v17 = v9;
  uint64_t v22 = v10;
  id v12 = v11;
  uint64_t v13 = *(void *)(a1 + 32);
  id v18 = v12;
  uint64_t v19 = v13;
  id v20 = v6;
  id v21 = v7;
  uint64_t v23 = *(void *)(a1 + 64);
  id v14 = v6;
  id v15 = v7;
  [v8 performHandlerOnSharedWebServiceQueue:v16];
}

void sub_100243BDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceAccountsRequest);
  id v5 = [*(id *)(a1 + 32) accountServiceURL];
  [v4 setAccountServicesURL:v5];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100243CF4;
  v10[3] = &unk_100742050;
  uint64_t v15 = *(void *)(a1 + 72);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v11 = v6;
  uint64_t v12 = v7;
  id v14 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 80);
  id v13 = v8;
  uint64_t v16 = v9;
  [v3 accountsWithRequest:v4 completion:v10];
}

void sub_100243CF4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = [v7 featureFailures];
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 4_PDOpenPaymentSetupUI(0, 0) = v8;

  id v11 = *(void **)(a1 + 32);
  uint64_t v12 = [v7 accounts];

  [v11 addObjectsFromArray:v12];
  id v13 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (v13)
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [v13 description];
      *(_DWORD *)long long buf = 138412290;
      id v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Could not update some accounts with feature failures %@", buf, 0xCu);
    }
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_100243FD0;
    v25[3] = &unk_10072E598;
    id v27 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 48);
    [v16 _accountsAreInDirtyWithFeatureFailures:v17 completion:v25];

    id v18 = v27;
  }
  else
  {
    if (!v6)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_10;
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
    uint64_t v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [v6 description];
      *(_DWORD *)long long buf = 138412290;
      id v29 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Could not update accounts with error %@", buf, 0xCu);
    }
    id v21 = *(void **)(a1 + 40);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100243FE8;
    v22[3] = &unk_10072E598;
    id v24 = *(id *)(a1 + 56);
    id v23 = *(id *)(a1 + 48);
    [v21 accountsAreInDirtyStateWithCompletion:v22];

    id v18 = v24;
  }

LABEL_10:
}

uint64_t sub_100243FD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_100243FE8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 1);
}

void sub_100244000(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(unsigned char *)(a1 + 80) && !*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    uint64_t v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Error: Accounts on disk but missing URL or push topic - forcing a re-register. FILE A RADAR !", buf, 2u);
    }

    uint64_t v16 = [*(id *)(*(void *)(a1 + 32) + 32) deviceRegistrationServiceCoordinator];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1002441FC;
    v24[3] = &unk_1007420C8;
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 64);
    id v25 = v17;
    uint64_t v26 = v18;
    [v16 performDeviceRegistrationForReason:@"Missing Account URL/Topic" brokerURL:0 action:1 forceApplePayRegister:1 forcePeerPaymentRegister:1 completion:v24];

    id v14 = v25;
    goto LABEL_9;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(NSObject **)(v8 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100244218;
    block[3] = &unk_1007420F0;
    void block[4] = v8;
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 72);
    id v20 = v10;
    uint64_t v22 = v11;
    id v12 = *(id *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 64);
    id v21 = v12;
    uint64_t v23 = v13;
    dispatch_async(v9, block);

    id v14 = v20;
LABEL_9:

    goto LABEL_10;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_10:
}

uint64_t sub_1002441FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

uint64_t sub_100244218(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_mergeAccounts:featureFailures:", *(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_1002443A8(uint64_t a1)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64);
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v22;
    while (2)
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        id v7 = objc_msgSend(v6, "accountIdentifier", (void)v21);
        uint64_t v8 = *(void **)(a1 + 40);
        id v9 = v7;
        id v10 = v8;
        if (v9 == v10)
        {

LABEL_18:
          id v3 = [v6 copy];
          goto LABEL_19;
        }
        uint64_t v11 = v10;
        if (v9) {
          BOOL v12 = v10 == 0;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
        }
        else
        {
          unsigned int v13 = [v9 isEqualToString:v10];

          if (v13) {
            goto LABEL_18;
          }
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v21 objects:v29 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_19:

  if (!*(unsigned char *)(a1 + 56))
  {
    if (([v3 accountStateDirty] & 1) == 0)
    {
      BOOL v16 = *(unsigned char *)(a1 + 56) != 0;
      goto LABEL_25;
    }
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Account with identifier %@ is dirty, forcing extended account update", buf, 0xCu);
    }
  }
  BOOL v16 = 1;
LABEL_25:
  if (objc_msgSend(v3, "feature", (void)v21) == (id)3 || objc_msgSend(v3, "feature") == (id)5)
  {
    id v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      [v3 feature];
      uint64_t v18 = PKFeatureIdentifierToString();
      uint64_t v19 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v26 = v18;
      __int16 v27 = 2112;
      uint64_t v28 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Not fetching an extended account for account type: %@, identifier: %@", buf, 0x16u);
    }
    BOOL v16 = 0;
  }
  id v20 = [[PDAccountManagerAccountRequest alloc] initWithAccountIdentifier:*(void *)(a1 + 40)];
  [(PDAccountManagerAccountRequest *)v20 setFetchExtendedAccount:v16];
  [(PDAccountManagerAccountRequest *)v20 addCompletion:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) _addAccountManagerFetchRequest:v20];
}

void sub_100244ACC(uint64_t a1)
{
  if ((PKUIOnlyDemoModeEnabled() & 1) != 0 || PKStoreDemoModeEnabled())
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      id v5 = [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)];
      (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v5, 0);
    }
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100244C00;
    v6[3] = &unk_100742208;
    void v6[4] = v4;
    id v7 = v3;
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v4 accountWithIdentifier:v7 completion:v6];
  }
}

void sub_100244C00(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 feature];
    uint64_t v5 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
    id v6 = [*((id *)a1[4] + 3) nextPossibleFetchDateForAccountType:v5 endpointType:3 accountIdentifier:a1[5]];
    if (([a1[6] fromPush] & 1) == 0)
    {
      if (v6)
      {
        id v7 = +[NSDate date];
        [v7 timeIntervalSinceDate:v6];
        double v9 = v8;

        if (v9 < 0.0)
        {
          id v10 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            id v11 = a1[5];
            *(_DWORD *)long long buf = 138412546;
            id v41 = v11;
            __int16 v42 = 2112;
            unsigned int v43 = v6;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Not fetching account users %@ because the next possible fetch date is in the future %@", buf, 0x16u);
          }

          id v12 = [*((id *)a1[4] + 3) accountUsersForAccountWithIdentifier:a1[5]];
          id v13 = a1[7];
          if (!v13) {
            goto LABEL_18;
          }
          id v14 = *((void *)a1[4] + 18);
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472;
          v37[2] = sub_100244FF4;
          v37[3] = &unk_10072E598;
          uint64_t v15 = &v39;
          id v39 = v13;
          BOOL v16 = &v38;
          id v12 = v12;
          id v38 = v12;
          id v17 = v37;
          goto LABEL_17;
        }
      }
    }
    if (([a1[6] fromPush] & 1) == 0)
    {
      id v12 = [*((id *)a1[4] + 3) accountUsersForAccountWithIdentifier:a1[5]];
      if (([a1[4] _shouldProactivelyFetchAccountUsersForAccount:v4 users:v12] & 1) == 0)
      {
        id v25 = a1[7];
        if (!v25)
        {
LABEL_18:

          goto LABEL_19;
        }
        id v14 = *((void *)a1[4] + 18);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10024500C;
        block[3] = &unk_10072E598;
        uint64_t v15 = &v36;
        id v36 = v25;
        BOOL v16 = &v35;
        id v12 = v12;
        id v35 = v12;
        id v17 = block;
LABEL_17:
        dispatch_async(v14, v17);

        goto LABEL_18;
      }
    }
    id v18 = objc_alloc_init((Class)PKAccountWebServiceAccountUsersRequest);
    [v18 setAccountIdentifier:a1[5]];
    uint64_t v19 = [v4 accountBaseURL];
    [v18 setBaseURL:v19];

    id v20 = a1[4];
    long long v21 = (void *)v20[4];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100245024;
    void v28[3] = &unk_1007421E0;
    id v29 = v18;
    id v30 = v20;
    id v31 = a1[5];
    uint64_t v33 = v5;
    id v32 = a1[7];
    id v22 = v18;
    [v21 performHandlerOnSharedWebServiceQueue:v28];

LABEL_19:
    goto LABEL_20;
  }
  id v23 = a1[7];
  if (v23)
  {
    long long v24 = *((void *)a1[4] + 18);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_10024565C;
    v26[3] = &unk_10072F788;
    id v27 = v23;
    dispatch_async(v24, v26);
    id v6 = v27;
    goto LABEL_19;
  }
LABEL_20:
}

uint64_t sub_100244FF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_10024500C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100245024(void *a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002450E0;
  v9[3] = &unk_1007421B8;
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[6];
  void v9[4] = a1[5];
  id v6 = v5;
  double v8 = (void *)a1[7];
  uint64_t v7 = a1[8];
  id v10 = v6;
  uint64_t v12 = v7;
  id v11 = v8;
  [a2 accountUsersWithRequest:v4 completion:v9];
}

void sub_1002450E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  double v8 = *(NSObject **)(v7 + 136);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002451D4;
  v14[3] = &unk_100733A20;
  id v15 = v6;
  uint64_t v16 = v7;
  id v9 = *(id *)(a1 + 40);
  id v11 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  id v17 = v9;
  uint64_t v20 = v10;
  id v18 = v5;
  id v19 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v8, v14);
}

void sub_1002451D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(*(void *)(a1 + 40) + 24);
  if (v2)
  {
    uint64_t v4 = [v3 accountUsersForAccountWithIdentifier:*(void *)(a1 + 48)];
    if (v4)
    {
      id v5 = v4;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v6 = [v4 countByEnumeratingWithState:&v42 objects:v47 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v43;
        do
        {
          id v9 = 0;
          do
          {
            if (*(void *)v43 != v8) {
              objc_enumerationMutation(v5);
            }
            [*(id *)(*((void *)&v42 + 1) + 8 * (void)v9) setDirty:1];
            id v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          id v7 = [v5 countByEnumeratingWithState:&v42 objects:v47 count:16];
        }
        while (v7);
      }
      id v10 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountUsers:v5 forAccountWithIdentifier:*(void *)(a1 + 48)];
    }
    else
    {
      id v10 = 0;
    }
    [*(id *)(*(void *)(a1 + 40) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 72) endpointType:3 accountIdentifier:*(void *)(a1 + 48)];
    id v25 = *(void **)(a1 + 64);
    if (v25)
    {
      uint64_t v26 = *(NSObject **)(*(void *)(a1 + 40) + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002455C8;
      block[3] = &unk_100731830;
      id v23 = &v41;
      id v41 = v25;
      long long v24 = &v39;
      id v10 = v10;
      id v39 = v10;
      id v40 = *(id *)(a1 + 32);
      dispatch_async(v26, block);

      goto LABEL_25;
    }
  }
  else
  {
    [v3 deleteRetryBackoffForAccountType:*(void *)(a1 + 72) endpointType:3 accountIdentifier:*(void *)(a1 + 48)];
    id v10 = [*(id *)(a1 + 56) users];
    if (v10)
    {
      id v11 = +[NSDate date];
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v12 = v10;
      id v13 = [v12 countByEnumeratingWithState:&v34 objects:v46 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v35;
        do
        {
          uint64_t v16 = 0;
          do
          {
            if (*(void *)v35 != v15) {
              objc_enumerationMutation(v12);
            }
            [*(id *)(*((void *)&v34 + 1) + 8 * (void)v16) setLastUpdated:v11];
            uint64_t v16 = (char *)v16 + 1;
          }
          while (v14 != v16);
          id v14 = [v12 countByEnumeratingWithState:&v34 objects:v46 count:16];
        }
        while (v14);
      }

      id v17 = [*(id *)(*(void *)(a1 + 40) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 48)];
      id v18 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountUsers:v12 forAccountWithIdentifier:*(void *)(a1 + 48)];

      id v19 = *(void **)(a1 + 40);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_1002455E0;
      v30[3] = &unk_100742190;
      void v30[4] = v19;
      id v10 = v18;
      id v31 = v10;
      id v32 = v17;
      id v33 = *(id *)(a1 + 48);
      id v20 = v17;
      [v19 _accessObserversWithHandler:v30];
    }
    long long v21 = *(void **)(a1 + 64);
    if (v21)
    {
      id v22 = *(NSObject **)(*(void *)(a1 + 40) + 144);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100245644;
      v27[3] = &unk_10072E598;
      id v23 = &v29;
      id v29 = v21;
      long long v24 = &v28;
      id v10 = v10;
      id v28 = v10;
      dispatch_async(v22, v27);
LABEL_25:
    }
  }
}

uint64_t sub_1002455C8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1002455E0(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] accountUsersChanged:a1[5] oldUsers:a1[6] accountIdentifier:a1[7]];
  }
}

uint64_t sub_100245644(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10024565C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10024587C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed updating shared account cloud store proactively account %@", buf, 0xCu);
  }

  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 40) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100245994;
  block[3] = &unk_10072F788;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

uint64_t sub_100245994(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002459AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100245A8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100245B60;
  v9[3] = &unk_100731EC0;
  id v10 = v3;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_100245B60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  if ((unint64_t)v2 > 4 || v2 == (id)1)
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100245D2C;
    v15[3] = &unk_1007318A8;
    int8x16_t v11 = *(int8x16_t *)(a1 + 32);
    id v6 = (id)v11.i64[0];
    int8x16_t v16 = vextq_s8(v11, v11, 8uLL);
    id v17 = *(id *)(a1 + 56);
    id v7 = objc_retainBlock(v15);
    id v8 = [*(id *)(*(void *)(a1 + 40) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 48)];
    if ([*(id *)(a1 + 40) _shouldProactivelyFetchAccountUsersForAccount:*(void *)(a1 + 32) users:v8])
    {
      id v10 = *(void **)(a1 + 40);
      id v9 = *(void **)(a1 + 48);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100245EB0;
      v12[3] = &unk_100742258;
      void v12[4] = v10;
      id v13 = v9;
      id v14 = v7;
      [v10 updateAccountUsersForAccountWithIdentifier:v13 completion:v12];
    }
    else
    {
      ((void (*)(void *, void *))v7[2])(v7, v8);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4)
    {
      id v5 = *(void (**)(void))(v4 + 16);
      v5();
    }
  }
}

void sub_100245D2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100245DE8;
  v8[3] = &unk_1007315D8;
  void v8[4] = v4;
  id v6 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  objc_msgSend(v4, "_queue_updateSharedAccountCloudStoreIfNeccessaryForAccount:completion:", v5, v8);
}

void sub_100245DE8(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100245E90;
  v3[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_100245E90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100245EB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100245F7C;
  block[3] = &unk_1007315D8;
  id v8 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = v5;
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_100245F7C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed updating account users proactively account %@", (uint8_t *)&v5, 0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002460E4(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 64);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v8, "feature", (void)v13) == *(id *)(a1 + 48))
        {
          id v9 = [v8 accountIdentifier];
          id v10 = [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:v9];
          if ([v10 count]) {
            [v2 setObject:v10 forKey:v9];
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  id v12 = [v2 copy];
  (*(void (**)(uint64_t, id))(v11 + 16))(v11, v12);
}

void sub_100246328(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if (objc_msgSend(v10, "feature", (void)v15) == *(id *)(a1 + 48))
        {
          uint64_t v11 = [v10 accountIdentifier];
          id v12 = [*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:v11];
          if ([v12 count]) {
            [v4 setObject:v12 forKey:v11];
          }
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v7);
  }

  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = [v4 copy];
  (*(void (**)(uint64_t, id))(v13 + 16))(v13, v14);
}

void sub_1002465A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceDeleteAccountUserRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  [v4 setAccountUserAltDSID:*(void *)(a1 + 40)];
  id v5 = [v3 accountBaseURL];

  [v4 setBaseURL:v5];
  id v6 = *(void **)(*(void *)(a1 + 48) + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002466B0;
  v8[3] = &unk_1007422F8;
  id v9 = v4;
  id v10 = *(id *)(a1 + 56);
  id v7 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v8];
}

void sub_1002466B0(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100246740;
  v4[3] = &unk_1007422D0;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 deleteAccountUserWithRequest:v3 completion:v4];
}

uint64_t sub_100246740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_10024686C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = *(void **)(*(void *)(a1 + 32) + 24);
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = a2;
    id v7 = [v4 accountUserWithAltDSID:v3 accountIdentifier:v5];
    id v8 = objc_alloc_init((Class)PKAccountWebServiceUpdateAccountUserPreferencesRequest);
    [v8 setAccountIdentifier:*(void *)(a1 + 48)];
    [v8 setAccountUserAltDSID:*(void *)(a1 + 40)];
    [v8 setAccountUserPreferences:*(void *)(a1 + 56)];
    objc_msgSend(v8, "setAccountUserAccessLevel:", objc_msgSend(v7, "accessLevel"));
    id v9 = [v6 accountBaseURL];

    [v8 setBaseURL:v9];
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1002469DC;
    v13[3] = &unk_10073C918;
    id v14 = v8;
    uint64_t v15 = v10;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 64);
    id v12 = v8;
    [v11 performHandlerOnSharedWebServiceQueue:v13];
  }
}

void sub_1002469DC(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100246A94;
  v6[3] = &unk_100742348;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 updateAccountUserPreferencesWithRequest:v4 completion:v6];
}

void sub_100246A94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 accountUser];
  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100246B90;
    v9[3] = &unk_100742320;
    id v11 = *(id *)(a1 + 48);
    id v10 = v5;
    [v7 insertOrUpdateLocalAccountUser:v6 forAccountWithIdentifier:v8 completion:v9];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_100246B90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32));
}

void sub_100246CB4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountUserWithAltDSID:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)];
  uint64_t v3 = v2;
  if (v2)
  {
    [v2 setNotificationSettings:*(void *)(a1 + 56)];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100246E00;
    v11[3] = &unk_100742398;
    id v6 = &v12;
    id v12 = *(id *)(a1 + 64);
    [v4 insertOrUpdateLocalAccountUser:v3 forAccountWithIdentifier:v5 completion:v11];
LABEL_5:

    goto LABEL_6;
  }
  id v7 = *(void **)(a1 + 64);
  if (v7)
  {
    uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100246E1C;
    v9[3] = &unk_10072F788;
    id v6 = &v10;
    id v10 = v7;
    dispatch_async(v8, v9);
    goto LABEL_5;
  }
LABEL_6:
}

uint64_t sub_100246E00(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

uint64_t sub_100246E1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100246F28(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountUser:*(void *)(a1 + 48) forAccountWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 24) accountUsersForAccountWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v5 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1002470BC;
  v13[3] = &unk_100742190;
  void v13[4] = v5;
  id v6 = v4;
  id v14 = v6;
  id v7 = v2;
  id v15 = v7;
  id v16 = *(id *)(a1 + 40);
  [v5 _accessObserversWithHandler:v13];
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100247120;
    v10[3] = &unk_10072E598;
    id v12 = v8;
    id v11 = v3;
    dispatch_async(v9, v10);
  }
}

void sub_1002470BC(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] accountUsersChanged:a1[5] oldUsers:a1[6] accountIdentifier:a1[7]];
  }
}

uint64_t sub_100247120(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1002473D4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[6];
  if (v4)
  {
    id v6 = (void *)a1[4];
    uint64_t v5 = a1[5];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100247490;
    v7[3] = &unk_1007423C0;
    id v9 = v4;
    id v8 = v3;
    [v6 accountWithIdentifier:v5 completion:v7];
  }
}

uint64_t sub_100247490(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32));
}

void sub_1002474A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceAccountRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  uint64_t v5 = [v3 accountBaseURL];
  [v4 setBaseURL:v5];

  [v4 setExtended:*(unsigned __int8 *)(a1 + 56)];
  id v6 = *(void **)(*(void *)(a1 + 40) + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002475E4;
  v12[3] = &unk_100742438;
  id v13 = v4;
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v11.i64[0];
  int8x16_t v14 = vextq_s8(v11, v11, 8uLL);
  id v8 = *(id *)(a1 + 48);
  char v17 = *(unsigned char *)(a1 + 56);
  id v15 = v3;
  id v16 = v8;
  id v9 = v3;
  id v10 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v12];
}

void sub_1002475E4(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002476B8;
  v6[3] = &unk_100742410;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v9 = *(id *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  id v8 = *(id *)(a1 + 56);
  [a2 accountWithRequest:v4 completion:v6];
}

void sub_1002476B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v6 description];
      *(_DWORD *)long long buf = 138412290;
      id v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not update account with error %@", buf, 0xCu);
    }
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1002479D8;
    v24[3] = &unk_10072E598;
    id v26 = *(id *)(a1 + 56);
    id v25 = v6;
    [v9 accountIsInDirtyStateWithIdentifier:v10 completion:v24];

    int8x16_t v11 = v26;
    goto LABEL_21;
  }
  int8x16_t v11 = [v5 account];
  id v12 = +[NSDate date];
  [v11 setLastUpdated:v12];

  id v13 = [v11 accountIdentifier];
  int8x16_t v14 = *(void **)(a1 + 40);
  id v15 = v13;
  id v16 = v14;
  if (v15 == v16)
  {
  }
  else
  {
    char v17 = v16;
    if (!v15 || !v16)
    {

LABEL_18:
      long long v21 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Received account identifier does not match requested account identifier", buf, 2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_21;
    }
    unsigned int v18 = [v15 isEqualToString:v16];

    if (!v18) {
      goto LABEL_18;
    }
  }
  if (!*(unsigned char *)(a1 + 64) && [*(id *)(a1 + 48) accountStateDirty]) {
    [v11 setAccountStateDirty:1];
  }
  id v19 = *(void **)(a1 + 32);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 64);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1002479EC;
  v22[3] = &unk_10072F788;
  id v23 = *(id *)(a1 + 56);
  [v19 insertOrReplaceAccount:v11 extended:v20 deleteSensitiveData:0 completion:v22];
  if (*(unsigned char *)(a1 + 64)) {
    [*(id *)(a1 + 32) _processPhysicalCardsFromExtendedAccountResponse:v5 accountIdentifier:*(void *)(a1 + 40)];
  }

LABEL_21:
}

uint64_t sub_1002479D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1002479EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100247A00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 creditDetails];
  id v5 = +[NSDate date];
  [v4 setLastUpdatedDate:v5];

  id v6 = +[NSDate date];
  [v3 setLastUpdated:v6];

  uint64_t v7 = *(unsigned __int8 *)(a1 + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100247B0C;
  v9[3] = &unk_10072F788;
  id v8 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  [v8 insertOrReplaceAccount:v3 extended:v7 deleteSensitiveData:0 completion:v9];
}

uint64_t sub_100247B0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100247BF4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 40)];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    char v5 = 0;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (![v8 expirationYear] || !objc_msgSend(v8, "expirationMonth"))
        {
          id v9 = *(void **)(a1 + 48);
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472;
          void v18[2] = sub_100247E28;
          v18[3] = &unk_1007424B0;
          void v18[4] = v8;
          id v10 = objc_msgSend(v9, "pk_firstObjectPassingTest:", v18);
          id v11 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePhysicalCard:v10 forAccountWithIdentifier:*(void *)(a1 + 40)];

          char v5 = 1;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v4);
    if (v5)
    {
      id v12 = [*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 40)];
      id v13 = *(void **)(a1 + 32);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100247EC0;
      v15[3] = &unk_1007424D8;
      void v15[4] = v13;
      id v16 = v12;
      id v17 = *(id *)(a1 + 40);
      id v14 = v12;
      [v13 _accessObserversWithHandler:v15];
    }
  }
}

uint64_t sub_100247E28(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [*(id *)(a1 + 32) identifier];
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_100247EC0(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_10024806C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((PKUIOnlyDemoModeEnabled() & 1) == 0 && (PKStoreDemoModeEnabled() & 1) == 0)
  {
    if (![v3 isCloudAccount])
    {
      id v12 = objc_alloc_init((Class)PKAccountWebServiceAccountDeleteRequest);
      [v12 setAccountIdentifier:*(void *)(a1 + 40)];
      id v13 = [v3 accountBaseURL];
      [v12 setBaseURL:v13];

      uint64_t v14 = *(void *)(a1 + 32);
      id v15 = *(void **)(v14 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_1002482DC;
      void v19[3] = &unk_10073C918;
      id v20 = v12;
      uint64_t v21 = v14;
      id v22 = *(id *)(a1 + 40);
      id v23 = *(id *)(a1 + 48);
      id v16 = v12;
      [v15 performHandlerOnSharedWebServiceQueue:v19];

      goto LABEL_14;
    }
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v11 = *(void **)(a1 + 48);
    if (v11)
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1002482C8;
      v24[3] = &unk_10072F788;
      id v25 = v11;
      [v7 deleteLocalAccountWithIdentifier:v8 completion:v24];
      id v10 = v25;
      goto LABEL_11;
    }
LABEL_12:
    [v7 deleteLocalAccountWithIdentifier:v8 completion:0];
    goto LABEL_14;
  }
  id v4 = (__CFString *)*(id *)(a1 + 40);
  if (v4 == @"1234567890"
    || (id v5 = v4) != 0
    && (unsigned int v6 = [(__CFString *)v4 isEqualToString:@"1234567890"],
        v5,
        v6))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = *(void **)(a1 + 48);
    if (v9)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1002484A0;
      v17[3] = &unk_10072F788;
      id v18 = v9;
      [v7 deleteLocalAccountWithIdentifier:v8 completion:v17];
      id v10 = v18;
LABEL_11:

      goto LABEL_14;
    }
    goto LABEL_12;
  }
LABEL_14:
}

uint64_t sub_1002482C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002482DC(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100248394;
  v6[3] = &unk_100742500;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 deleteAccountWithRequest:v4 completion:v6];
}

void sub_100248394(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, id))(v7 + 16))(v7, v6);
    }
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(a1 + 48);
    if (v10)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10024848C;
      v11[3] = &unk_10072F788;
      id v12 = v10;
      [v8 deleteLocalAccountWithIdentifier:v9 completion:v11];
    }
    else
    {
      [*(id *)(a1 + 32) deleteLocalAccountWithIdentifier:*(void *)(a1 + 40) completion:0];
    }
  }
}

uint64_t sub_10024848C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002484A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10024855C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) defaultAccountForFeature:*(void *)(a1 + 48) forAccounts:a2];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

uint64_t sub_10024879C(void *a1)
{
  id v1 = a1;
  id v2 = [v1 accessLevel];
  if (v2 == (id)2)
  {
    unint64_t v3 = (unint64_t)[v1 state] - 1;
    if (v3 < 5)
    {
      uint64_t v4 = &unk_1005B3878;
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_9;
  }
  if (v2 != (id)1) {
    goto LABEL_8;
  }
  unint64_t v3 = (unint64_t)[v1 state] - 1;
  if (v3 >= 5) {
    goto LABEL_8;
  }
  uint64_t v4 = &unk_1005B3850;
LABEL_7:
  uint64_t v5 = v4[v3];
LABEL_9:

  return v5;
}

void sub_1002489A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceAccountActionRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  [v4 setAccountUserAltDSID:*(void *)(a1 + 40)];
  [v4 setAction:*(void *)(a1 + 48)];
  uint64_t v5 = [v3 accountBaseURL];

  [v4 setBaseURL:v5];
  id v6 = *(void **)(*(void *)(a1 + 56) + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100248ACC;
  v11[3] = &unk_10073C918;
  id v12 = v4;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void **)(a1 + 64);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = v9;
  id v10 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v11];
}

void sub_100248ACC(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100248B7C;
  v8[3] = &unk_100742578;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [a2 accountActionWithRequest:v4 completion:v8];
}

void sub_100248B7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 account];
  id v7 = v6;
  if (!v5 && v6)
  {
    uint64_t v8 = [v6 accountIdentifier];
    id v9 = *(void **)(a1 + 32);
    id v10 = v8;
    id v11 = v9;
    if (v10 == v11)
    {
    }
    else
    {
      id v12 = v11;
      if (!v10 || !v11)
      {

        goto LABEL_13;
      }
      unsigned int v13 = [v10 isEqualToString:v11];

      if (!v13)
      {
LABEL_13:
        id v17 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received account identifier does not match requested account identifier", v19, 2u);
        }

        uint64_t v18 = *(void *)(a1 + 48);
        if (v18)
        {
          id v15 = *(void (**)(void))(v18 + 16);
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100248D58;
    v20[3] = &unk_100731830;
    id v16 = *(void **)(a1 + 40);
    id v23 = *(id *)(a1 + 48);
    id v21 = v7;
    id v22 = 0;
    [v16 insertOrReplaceAccount:v21 extended:0 deleteSensitiveData:0 completion:v20];

    goto LABEL_18;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    id v15 = *(void (**)(void))(v14 + 16);
LABEL_17:
    v15();
  }
LABEL_18:
}

void sub_100248D58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(a1 + 40));
  }
}

void sub_100248EF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceTermsRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  [v4 setTermsAccepted:*(unsigned __int8 *)(a1 + 64)];
  [v4 setTermsIdentifier:*(void *)(a1 + 40)];
  id v5 = [v3 accountBaseURL];

  [v4 setBaseURL:v5];
  uint64_t v6 = *(void **)(*(void *)(a1 + 48) + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100249008;
  v9[3] = &unk_100737B10;
  id v10 = v4;
  id v7 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 48);
  id v12 = v7;
  id v8 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v9];
}

void sub_100249008(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002490AC;
  v6[3] = &unk_1007425A0;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 accountTermsWithRequest:v4 completion:v6];
}

void sub_1002490AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100249160;
    v7[3] = &unk_10072E598;
    id v9 = v5;
    id v8 = v4;
    dispatch_async(v6, v7);
  }
}

uint64_t sub_100249160(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100249244(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    switch((unint64_t)[v3 type])
    {
      case 0uLL:
      case 2uLL:
      case 3uLL:
        uint64_t v5 = *(void *)(a1 + 48);
        if (v5) {
          (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, 0, 0);
        }
        break;
      case 1uLL:
        uint64_t v11 = *(void **)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(unsigned __int8 *)(a1 + 56);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_1002494BC;
        v14[3] = &unk_100742618;
        id v15 = *(id *)(a1 + 48);
        [v11 _creditUserInfoForAccountIdentifier:v12 forceFetch:v13 completion:v14];
        id v10 = v15;
        goto LABEL_9;
      case 4uLL:
        id v8 = *(void **)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_100249424;
        v16[3] = &unk_1007425F0;
        id v17 = *(id *)(a1 + 48);
        [v8 _savingsUserInfoForAccountIdentifier:v9 completion:v16];
        id v10 = v17;
LABEL_9:

        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      id v7 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);
    }
  }
}

void sub_100249424(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init((Class)PKAccountUserInfo);
  [v6 setSavingsUserInfo:v5];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v6, v8);
  }
}

void sub_1002494BC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = a2;
  id v6 = objc_alloc_init((Class)PKAccountUserInfo);
  [v6 setCreditPrimaryUser:v5];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v6, v8);
  }
}

void sub_1002497B0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v7 || !v5) {
    PKSharedCacheSetBoolForKey();
  }
  else {
    id v7 = *(id *)(a1 + 32);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_10024993C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100249A70;
    v9[3] = &unk_1007426B8;
    id v10 = *(id *)(a1 + 40);
    id v11 = v3;
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 32);
    id v12 = v5;
    uint64_t v13 = v6;
    id v14 = *(id *)(a1 + 56);
    [v4 performHandlerOnSharedWebServiceQueue:v9];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
}

void sub_100249A70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceAccountUpdateUserInfoRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) accountBaseURL];
  [v4 setBaseURL:v5];

  objc_msgSend(v4, "setFeatureIdentifier:", objc_msgSend(*(id *)(a1 + 40), "feature"));
  [v4 setContact:*(void *)(a1 + 48)];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100249BA4;
  v6[3] = &unk_100742690;
  void v6[4] = *(void *)(a1 + 56);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 64);
  [v3 accountUpdateUserInfoWithRequest:v4 completion:v6];
}

void sub_100249BA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    id v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      id v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Error updating user info %@", (uint8_t *)&v19, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v8 = [*(id *)(*(void *)(a1 + 32) + 24) primaryAccountIdentifierForAssociatedAccountIdentifier:*(void *)(a1 + 40)];
    if (v8)
    {
      id v9 = +[PKPaymentOptionsDefaults defaults];
      id v10 = [v9 defaultBillingAddressForPrimaryAccountIdentifier:*(void *)(a1 + 40)];

      if (v10) {
        [v9 deleteDefaultBillingAddressForPrimaryAccountIdentifier:*(void *)(a1 + 40)];
      }
      id v11 = [v9 defaultBillingAddressForPrimaryAccountIdentifier:v8];
      id v12 = *(id *)(a1 + 48);
      if (v11)
      {
        id v13 = [*(id *)(a1 + 48) mutableCopy];
        id v14 = [v11 givenName];
        [v13 setGivenName:v14];

        id v15 = [v11 familyName];
        [v13 setFamilyName:v15];

        id v16 = [v13 copy];
        id v12 = v16;
      }
      [v9 setDefaultBillingAddress:v12 forPrimaryAccountIdentifier:v8];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      uint64_t v18 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Cannot set userInfo for nil primaryAccountIdentifier", (uint8_t *)&v19, 2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
}

void sub_10024A098(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10024A1B8;
    v9[3] = &unk_10073C918;
    id v10 = *(id *)(a1 + 40);
    id v5 = v3;
    uint64_t v6 = *(void *)(a1 + 32);
    id v11 = v5;
    uint64_t v12 = v6;
    id v13 = *(id *)(a1 + 48);
    [v4 performHandlerOnSharedWebServiceQueue:v9];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
  }
}

void sub_10024A1B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceAccountUserInfoRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) accountBaseURL];
  [v4 setBaseURL:v5];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10024A2B8;
  v6[3] = &unk_1007426E0;
  void v6[4] = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 56);
  [v3 accountUserInfoWithRequest:v4 completion:v6];
}

void sub_10024A2B8(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 primaryUser];
  id v7 = (void *)v6;
  if (!v5 && a2 && v6)
  {
    id v8 = [*(id *)(a1[4] + 24) primaryAccountIdentifierForAssociatedAccountIdentifier:a1[5]];
    if (v8)
    {
      id v9 = +[PKPaymentOptionsDefaults defaults];
      [v9 setDefaultBillingAddress:v7 forPrimaryAccountIdentifier:v8];
      (*(void (**)(void))(a1[6] + 16))();
    }
    else
    {
      id v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Cannot set userInfo for nil primaryAccountIdentifier", (uint8_t *)&v12, 2u);
      }

      (*(void (**)(void))(a1[6] + 16))();
    }
  }
  else
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error updating user info %@", (uint8_t *)&v12, 0xCu);
    }

    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_10024A5B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10024A688;
  v6[3] = &unk_10073C918;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_10024A688(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceAccountUserInfoRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) accountBaseURL];
  [v4 setBaseURL:v5];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10024A770;
  v7[3] = &unk_100742708;
  uint64_t v6 = *(void **)(a1 + 56);
  void v7[4] = *(void *)(a1 + 48);
  id v8 = v6;
  [v3 savingsAccountUserInfoWithRequest:v4 completion:v7];
}

void sub_10024A770(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024A84C;
  block[3] = &unk_100731830;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_10024A84C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 32) userInfo];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(a1 + 40));
  }
}

void sub_10024AB04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((unint64_t)[v3 feature] > 4)
  {
    id v6 = objc_alloc_init((Class)PKAccountWebServiceDeleteBeneficiaryRequest);
    [v6 setAccountIdentifier:*(void *)(a1 + 32)];
    [v6 setBeneficiaryIdentifier:*(void *)(a1 + 40)];
    id v7 = [v3 accountBaseURL];
    [v6 setBaseURL:v7];

    id v8 = *(void **)(*(void *)(a1 + 48) + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10024AC60;
    v10[3] = &unk_1007422F8;
    id v11 = v6;
    id v12 = *(id *)(a1 + 56);
    id v9 = v6;
    [v8 performHandlerOnSharedWebServiceQueue:v10];
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4)
    {
      id v5 = +[NSError errorWithDomain:PKAccountErrorDomain code:10 userInfo:0];
      (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
    }
  }
}

void sub_10024AC60(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10024ACF0;
  v4[3] = &unk_100742730;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 accountDeleteBeneficiaryWithRequest:v3 completion:v4];
}

uint64_t sub_10024ACF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_10024ADD0(id *a1)
{
  id v47 = objc_alloc_init((Class)NSMutableDictionary);
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id obj = a1[4];
  id v2 = [obj countByEnumeratingWithState:&v56 objects:v63 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v57;
    uint64_t v41 = *(void *)v57;
    long long v42 = a1;
    do
    {
      id v5 = 0;
      id v44 = v3;
      do
      {
        if (*(void *)v57 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v56 + 1) + 8 * (void)v5);
        id v8 = [v6 accountIdentifier];

        if (v8)
        {
          id v9 = [v6 accountIdentifier];
          id v10 = [v47 objectForKey:v9];
          id v11 = v10;
          if (v10)
          {
            unsigned __int8 v12 = [v10 BOOLValue];
            [a1[5] _queueIndexOfAccountWithIdentifier:v9];
            if ((v12 & 1) == 0) {
              goto LABEL_9;
            }
LABEL_16:
            uint64_t v18 = v7;
            PKLogFacilityTypeGetObject();
            int v19 = (id)objc_claimAutoreleasedReturnValue();
            os_signpost_id_t v20 = os_signpost_id_make_with_pointer(v19, a1[5]);
            if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              os_signpost_id_t v21 = v20;
              if (os_signpost_enabled(v19))
              {
                *(_WORD *)long long buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_BEGIN, v21, "cloudstore:insertAccountEvent", "", buf, 2u);
              }
            }

            unsigned __int8 v22 = [*((id *)a1[5] + 3) insertOrUpdateAccountEvent:v6];
            id v23 = v19;
            os_signpost_id_t v24 = os_signpost_id_make_with_pointer(v23, a1[5]);
            if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              os_signpost_id_t v25 = v24;
              if (os_signpost_enabled(v23))
              {
                *(_WORD *)long long buf = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_INTERVAL_END, v25, "cloudstore:insertAccountEvent", "", buf, 2u);
              }
            }

            switch((unint64_t)[v6 type])
            {
              case 1uLL:
                [a1[5] _processRewardsRedemptionEvent:v6];
                break;
              case 2uLL:
                [a1[5] _processRewardsAddedEvent:v6];
                break;
              case 3uLL:
                [a1[5] _publishStatementsChangedForAccountIdentifier:v9];
                break;
              case 7uLL:
                [a1[5] _processPaymentFailed:v6];
                break;
              case 0xBuLL:
              case 0xCuLL:
                [a1[5] _notifyPhysicalCardsChangedWithAccountEvent:v6];
                break;
              case 0xDuLL:
                [a1[5] _processVirtualCardStatusUpdateEvent:v6];
                break;
              case 0xFuLL:
                [a1[5] _processUserInfoUpdateEvent:v6];
                break;
              default:
                break;
            }
            id v36 = a1[5];
            v50[0] = _NSConcreteStackBlock;
            v50[1] = 3221225472;
            v50[2] = sub_10024B4EC;
            v50[3] = &unk_100742780;
            char v51 = v22 ^ 1;
            void v50[4] = v36;
            void v50[5] = v6;
            objc_msgSend(v36, "_accessObserversWithHandler:", v50, v41);
            id v3 = v44;
            id v7 = v18;
          }
          else
          {
            id v16 = [*((id *)a1[5] + 3) passUniqueIdentifierWithAssociatedAccountIdentifier:v9];

            if (v16)
            {
              id v17 = +[NSNumber numberWithBool:1];
              [v47 setObject:v17 forKey:v9];

              [a1[5] _queueIndexOfAccountWithIdentifier:v9];
              goto LABEL_16;
            }
            long long v43 = v7;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            id v46 = *((id *)a1[5] + 8);
            id v26 = [v46 countByEnumeratingWithState:&v52 objects:v62 count:16];
            if (v26)
            {
              id v27 = v26;
              uint64_t v28 = *(void *)v53;
LABEL_26:
              uint64_t v29 = 0;
              while (1)
              {
                if (*(void *)v53 != v28) {
                  objc_enumerationMutation(v46);
                }
                id v30 = *(void **)(*((void *)&v52 + 1) + 8 * v29);
                objc_msgSend(v30, "accountIdentifier", v41);
                id v31 = (id)objc_claimAutoreleasedReturnValue();
                id v32 = v9;
                id v33 = v32;
                if (v31 == v32) {
                  break;
                }
                if (v9 && v31)
                {
                  unsigned int v34 = [v31 isEqualToString:v32];

                  if (v34) {
                    goto LABEL_49;
                  }
                }
                else
                {
                }
                if (v27 == (id)++v29)
                {
                  id v27 = [v46 countByEnumeratingWithState:&v52 objects:v62 count:16];
                  if (v27) {
                    goto LABEL_26;
                  }
                  goto LABEL_37;
                }
              }

LABEL_49:
              a1 = v42;
              id v37 = [v42[5] _accountSupportsTransactionsWithoutPass:v30];

              id v38 = +[NSNumber numberWithBool:v37];
              [v47 setObject:v38 forKey:v33];

              [v42[5] _queueIndexOfAccountWithIdentifier:v33];
              uint64_t v4 = v41;
              id v3 = v44;
              id v11 = 0;
              id v7 = v43;
              if ((v37 & 1) == 0) {
                goto LABEL_9;
              }
              goto LABEL_16;
            }
LABEL_37:

            long long v35 = +[NSNumber numberWithBool:0];
            [v47 setObject:v35 forKey:v9];

            a1 = v42;
            [v42[5] _queueIndexOfAccountWithIdentifier:v9];
            uint64_t v4 = v41;
            id v3 = v44;
            id v11 = 0;
            id v7 = v43;
LABEL_9:
            id v13 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              [v6 identifier];
              v15 = id v14 = v7;
              *(_DWORD *)long long buf = 138412290;
              long long v61 = v15;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Not inserting account event %@ because pass is not present", buf, 0xCu);

              id v7 = v14;
            }
          }
          goto LABEL_46;
        }
        id v9 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Event with missing account identifier", buf, 2u);
        }
LABEL_46:

        id v5 = (char *)v5 + 1;
      }
      while (v5 != v3);
      id v39 = [obj countByEnumeratingWithState:&v56 objects:v63 count:16];
      id v3 = v39;
    }
    while (v39);
  }

  id v40 = *((void *)a1[5] + 18);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024B594;
  block[3] = &unk_10072F788;
  id v49 = a1[6];
  dispatch_async(v40, block);
}

uint64_t sub_10024B4EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (*(unsigned char *)(a1 + 48)) {
    goto LABEL_2;
  }
  if (objc_opt_respondsToSelector())
  {
    [v4 accountManager:*(void *)(a1 + 32) didAddAccountEvent:*(void *)(a1 + 40)];
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 48))
  {
LABEL_2:
    if (objc_opt_respondsToSelector()) {
      [v4 accountManager:*(void *)(a1 + 32) didUpdateAccountEvent:*(void *)(a1 + 40)];
    }
  }
LABEL_6:
  return _objc_release_x4();
}

uint64_t sub_10024B594(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10024B674(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10024B738;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10024B738(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10024B898(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40) altDSID:0 types:*(void *)(a1 + 48) startDate:*(void *)(a1 + 56) endDate:*(void *)(a1 + 64) orderedByDate:*(void *)(a1 + 80) limit:*(void *)(a1 + 88)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024B970;
  block[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 72);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, block);
}

uint64_t sub_10024B970(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10024BA4C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEventWithIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10024BB10;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10024BB10(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10024BBE8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          id v9 = *(void **)(*(void *)(a1 + 32) + 24);
          id v10 = [v8 identifier];
          [v9 deleteAccountEventWithIdentifier:v10];

          uint64_t v11 = *(void *)(a1 + 32);
          unsigned __int8 v12 = *(NSObject **)(v11 + 144);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10024BE04;
          block[3] = &unk_10072E198;
          void block[4] = v11;
          void block[5] = v8;
          dispatch_async(v12, block);
        }
        id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v5);
    }
    id v13 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10024BED8;
    v15[3] = &unk_10072F788;
    id v16 = *(id *)(a1 + 48);
    dispatch_async(v13, v15);
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(void))(v14 + 16))();
    }
  }
}

id sub_10024BE04(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10024BE78;
  v2[3] = &unk_100741EA8;
  return [*(id *)(a1 + 32) _accessObserversWithHandler:v2];
}

void sub_10024BE78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:*(void *)(a1 + 32) didRemoveAccountEvent:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10024BED8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10024BFB4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEventWithIdentifier:*(void *)(a1 + 40)];
  if (v2)
  {
    [*(id *)(*(void *)(a1 + 32) + 24) deleteAccountEventWithIdentifier:*(void *)(a1 + 40)];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10024C0A4;
    block[3] = &unk_10072E9D8;
    void block[4] = v3;
    id v7 = v2;
    id v8 = *(id *)(a1 + 48);
    dispatch_async(v4, block);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }
}

void sub_10024C0A4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10024C14C;
  v8[3] = &unk_100741EA8;
  void v8[4] = v2;
  id v9 = *(id *)(a1 + 40);
  [v2 _accessObserversWithHandler:v8];
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v7, v3, v4, v5, v6);
  }
}

void sub_10024C14C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:*(void *)(a1 + 32) didRemoveAccountEvent:*(void *)(a1 + 40)];
  }
}

void sub_10024C290(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEventsForAccountIdentifier:*(void *)(a1 + 40) excludingTypes:*(void *)(a1 + 48)];
  id v3 = v2;
  if (v2)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          id v9 = *(void **)(*(void *)(a1 + 32) + 24);
          id v10 = [v8 identifier];
          [v9 deleteAccountEventWithIdentifier:v10];

          uint64_t v11 = *(void *)(a1 + 32);
          unsigned __int8 v12 = *(NSObject **)(v11 + 144);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10024C4B0;
          block[3] = &unk_10072E198;
          void block[4] = v11;
          void block[5] = v8;
          dispatch_async(v12, block);
        }
        id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v5);
    }
    id v13 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10024C584;
    v15[3] = &unk_10072F788;
    id v16 = *(id *)(a1 + 56);
    dispatch_async(v13, v15);
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14) {
      (*(void (**)(void))(v14 + 16))();
    }
  }
}

id sub_10024C4B0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10024C524;
  v2[3] = &unk_100741EA8;
  return [*(id *)(a1 + 32) _accessObserversWithHandler:v2];
}

void sub_10024C524(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:*(void *)(a1 + 32) didRemoveAccountEvent:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10024C584(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10024C694(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) lastRedemptionEventToDestination:*(void *)(a1 + 64) forAccountIdentifier:*(void *)(a1 + 40) altDSID:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10024C760;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10024C760(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10024D874(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8 * (void)v7);
        id v9 = [*(id *)(a1 + 32) identifier];
        id v10 = [v8 identifier];
        int v11 = PKEqualObjects();

        if (v11)
        {
          unsigned __int8 v12 = *(void **)(a1 + 32);
          id v13 = [v8 keychainCardCredentials];
          [v12 setKeychainCardCredentials:v13];

          uint64_t v14 = *(void **)(a1 + 32);
          id v15 = [v8 displayName];
          [v14 setDisplayName:v15];

          [*(id *)(a1 + 32) writeKeychainVirtualCardToKeychain];
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v5);
  }
}

void sub_10024DACC(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_10024E6A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (!v6) {
      goto LABEL_22;
    }
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = *(void *)(a1 + 40);
      id v30 = [v7 localizedDescription];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v43 = v29;
      __int16 v44 = 2112;
      long long v45 = v30;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error downloading credit statements for %@: %@", buf, 0x16u);
    }
  }
  else
  {
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v38 objects:v47 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          id v15 = [v14 identifier];
          [v8 setObject:v14 forKey:v15];
        }
        id v11 = [v9 countByEnumeratingWithState:&v38 objects:v47 count:16];
      }
      while (v11);
    }

    uint64_t v16 = [*(id *)(*(void *)(a1 + 32) + 24) creditAccountStatementsForAccountIdentifier:*(void *)(a1 + 40)];
    id v17 = objc_alloc((Class)NSMutableSet);
    long long v18 = [v8 allKeys];
    id v19 = [v17 initWithArray:v18];

    id v33 = (void *)v16;
    [v19 minusSet:v16];
    id v20 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v9, "count"));
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v21 = v19;
    id v22 = [v21 countByEnumeratingWithState:&v34 objects:v46 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v35;
      do
      {
        for (j = 0; j != v23; j = (char *)j + 1)
        {
          if (*(void *)v35 != v24) {
            objc_enumerationMutation(v21);
          }
          id v26 = [v8 objectForKey:*(void *)(*((void *)&v34 + 1) + 8 * (void)j)];
          [v20 addObject:v26];
        }
        id v23 = [v21 countByEnumeratingWithState:&v34 objects:v46 count:16];
      }
      while (v23);
    }

    [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateCreditStatements:v20 forAccountIdentifier:*(void *)(a1 + 40)];
    id v27 = [*(id *)(a1 + 32) _cacheKeyForCreditStatementsWithAccountIdentifier:*(void *)(a1 + 40)];
    uint64_t v28 = +[NSDate date];
    PKSharedCacheSetObjectForKey();

    [*(id *)(a1 + 32) _publishStatementsChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }

LABEL_22:
  uint64_t v31 = *(void *)(a1 + 48);
  if (v31)
  {
    id v32 = [*(id *)(*(void *)(a1 + 32) + 24) creditAccountStatementsForAccountIdentifier:*(void *)(a1 + 40)];
    (*(void (**)(uint64_t, void *, void *))(v31 + 16))(v31, v32, v7);
  }
}

void sub_10024EAD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v20 = v3;
    id v5 = [v3 allAccountIdentifiers];
    id v6 = objc_alloc_init((Class)NSMutableSet);
    id v7 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_10024ED7C;
          v24[3] = &unk_100733E60;
          void v24[4] = *(void *)(a1 + 32);
          void v24[5] = v13;
          id v25 = v6;
          [v7 addOperation:v24];
        }
        id v10 = [v8 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v10);
    }

    uint64_t v14 = +[NSNull null];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10024EECC;
    v21[3] = &unk_1007341D0;
    id v15 = *(id *)(a1 + 40);
    id v22 = v6;
    id v23 = v15;
    id v16 = v6;
    id v17 = [v7 evaluateWithInput:v14 completion:v21];

    id v4 = v20;
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 40);
    if (v18)
    {
      id v19 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v19);
    }
  }
}

void sub_10024ED7C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10024EE60;
  v13[3] = &unk_1007427F8;
  id v10 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  [v8 _creditStatementsForAccountIdentifier:v9 completion:v13];
}

void sub_10024EE60(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count]) {
    [*(id *)(a1 + 32) unionSet:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10024EECC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
  }
}

void sub_10024F00C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 136);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10024F130;
    v10[3] = &unk_100730578;
    id v11 = v3;
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = *(id *)(a1 + 48);
    dispatch_async(v5, v10);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      uint64_t v9 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
    }
  }
}

void sub_10024F130(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) allAccountIdentifiers];
  id v3 = objc_alloc_init((Class)NSMutableSet);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = [*(id *)(*(void *)(a1 + 48) + 24) creditStatementWithIdentifier:*(void *)(*((void *)&v16 + 1) + 8 * (void)v8) accountIdentifiers:v2];
        objc_msgSend(v3, "pk_safelyAddObject:", v9);

        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }

  id v10 = *(NSObject **)(*(void *)(a1 + 48) + 144);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10024F2F8;
  v13[3] = &unk_10072E598;
  id v11 = *(id *)(a1 + 56);
  id v14 = v3;
  id v15 = v11;
  id v12 = v3;
  dispatch_async(v10, v13);
}

void sub_10024F2F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
  }
}

void sub_10024F4B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:*(void *)(a1 + 32) statementsChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }
}

void sub_10024F874(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceStatementsRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = [v3 accountBaseURL];

  [v4 setBaseURL:v5];
  id v6 = *(void **)(*(void *)(a1 + 40) + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10024F970;
  v8[3] = &unk_1007422F8;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v7 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v8];
}

void sub_10024F970(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10024FA00;
  v4[3] = &unk_100742848;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 accountStatementsWithRequest:v3 completion:v4];
}

void sub_10024FA00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10024FAE4;
  block[3] = &unk_100731830;
  id v8 = *(id *)(a1 + 32);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_10024FAE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) statements];
  (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, *(void *)(a1 + 40));
}

void sub_10024FC10(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10024FCC4;
  v4[3] = &unk_100742528;
  void v4[4] = v3;
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v3 accountWithIdentifier:v5 completion:v4];
}

void sub_10024FCC4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 24);
  id v5 = a2;
  id v6 = [v4 lastSavingsStatementForAccountIdentifier:v3];
  id v7 = [v6 openingDate];
  id v8 = objc_alloc_init((Class)PKAccountWebServiceDocumentRequest);
  [v8 setAccountIdentifier:*(void *)(a1 + 40)];
  id v9 = [v5 accountBaseURL];

  [v8 setBaseURL:v9];
  [v8 setType:1];
  if (v7)
  {
    [v8 setBeginDate:v7];
    id v10 = +[NSDate date];
    [v8 setEndDate:v10];
  }
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10024FE58;
  v15[3] = &unk_1007426B8;
  id v16 = v8;
  uint64_t v17 = v11;
  id v18 = *(id *)(a1 + 40);
  id v19 = v6;
  id v20 = *(id *)(a1 + 48);
  id v13 = v6;
  id v14 = v8;
  [v12 performHandlerOnSharedWebServiceQueue:v15];
}

void sub_10024FE58(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10024FF24;
  v6[3] = &unk_100742870;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [a2 savingsAccountStatementsWithRequest:v4 completion:v6];
}

void sub_10024FF24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 136);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100250028;
  v12[3] = &unk_10073B6B0;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v17 = v6;
  id v18 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, v12);
}

void sub_100250028(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) statements];
  if ([v2 count])
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteSavingsAccountStatementsWithoutPDFForAccount:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateSavingsAccountStatements:v2 forAccountIdentifier:*(void *)(a1 + 48)];
  }
  uint64_t v3 = [*(id *)(*(void *)(a1 + 40) + 24) savingsAccountStatementsForAccountIdentifier:*(void *)(a1 + 48)];

  uint64_t v4 = [v3 firstObject];
  int v5 = PKEqualObjects();

  if (v5) {
    [*(id *)(a1 + 40) _publishStatementsChangedForAccountIdentifier:*(void *)(a1 + 48)];
  }
  id v6 = *(NSObject **)(*(void *)(a1 + 40) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100250170;
  block[3] = &unk_100731830;
  id v11 = *(id *)(a1 + 72);
  id v9 = v3;
  id v10 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_100250170(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_100250254(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) savingsAccountStatementsForAccountIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100250318;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100250318(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1002503FC(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002504B0;
  v4[3] = &unk_100742528;
  void v4[4] = v3;
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v3 accountWithIdentifier:v5 completion:v4];
}

void sub_1002504B0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 24);
  id v5 = a2;
  id v6 = [v4 lastAccountTaxFormForAccountIdentifier:v3];
  id v7 = [v6 openingDate];

  id v8 = objc_alloc_init((Class)PKAccountWebServiceDocumentRequest);
  [v8 setAccountIdentifier:*(void *)(a1 + 40)];
  id v9 = [v5 accountBaseURL];

  [v8 setBaseURL:v9];
  [v8 setType:2];
  if (v7)
  {
    [v8 setBeginDate:v7];
    id v10 = +[NSDate date];
    [v8 setEndDate:v10];
  }
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100250634;
  v14[3] = &unk_10073C918;
  id v15 = v8;
  uint64_t v16 = v11;
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 48);
  id v13 = v8;
  [v12 performHandlerOnSharedWebServiceQueue:v14];
}

void sub_100250634(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002506EC;
  v6[3] = &unk_1007428C0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 accountTaxFormsWithRequest:v4 completion:v6];
}

void sub_1002506EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002507DC;
  block[3] = &unk_100742898;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_1002507DC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) taxForms];
  if ([v2 count])
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteAccountTaxFormsWithoutPDFForAccount:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountTaxForms:v2 forAccountIdentifier:*(void *)(a1 + 48)];
  }
  uint64_t v3 = [*(id *)(*(void *)(a1 + 40) + 24) accountTaxFormsForAccountIdentifier:*(void *)(a1 + 48)];
  uint64_t v4 = [v3 allObjects];

  id v5 = *(NSObject **)(*(void *)(a1 + 40) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100250900;
  block[3] = &unk_100731830;
  id v10 = *(id *)(a1 + 64);
  id v8 = v4;
  id v9 = *(id *)(a1 + 56);
  id v6 = v4;
  dispatch_async(v5, block);
}

uint64_t sub_100250900(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1002509E4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountTaxFormsForAccountIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = [v2 allObjects];

  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100250AB8;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100250AB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100250C40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 24);
    id v6 = [v3 associatedPassUniqueID];
    LOBYTE(v5) = [v5 passExistsWithUniqueID:v6];

    if (v5)
    {
      uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_100250E54;
      v16[3] = &unk_100742960;
      id v20 = *(id *)(a1 + 48);
      id v17 = *(id *)(a1 + 40);
      id v8 = v4;
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 32);
      id v18 = v8;
      uint64_t v19 = v9;
      [v7 paymentHardwareStatusWithType:1 completion:v16];

      id v10 = v20;
LABEL_13:

      goto LABEL_14;
    }
    id v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Error calling create virtual card, no pass locally provisioned", buf, 2u);
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      uint64_t v13 = PKAccountErrorDomain;
      uint64_t v14 = 7;
      goto LABEL_12;
    }
  }
  else
  {
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error calling create virtual card, no account", buf, 2u);
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      uint64_t v13 = PKAccountErrorDomain;
      uint64_t v14 = 3;
LABEL_12:
      id v10 = +[NSError errorWithDomain:v13 code:v14 userInfo:0];
      (*(void (**)(uint64_t, void, void, void *))(v12 + 16))(v12, 0, 0, v10);
      goto LABEL_13;
    }
  }
LABEL_14:
}

void sub_100250E54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 canDecryptBAAEncryptedData])
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v25 = 0x3032000000;
    long long v26 = sub_100020A5C;
    long long v27 = sub_100021020;
    id v28 = objc_alloc_init((Class)PKAccountWebServiceCreateVirtualCardRequest);
    [*(id *)(*((void *)&buf + 1) + 40) setAccountIdentifier:*(void *)(a1 + 32)];
    uint64_t v4 = *(void **)(*((void *)&buf + 1) + 40);
    id v5 = [*(id *)(a1 + 40) accountBaseURL];
    [v4 setBaseURL:v5];

    [*(id *)(*((void *)&buf + 1) + 40) setType:*(void *)(a1 + 64)];
    uint64_t v18 = 0;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x3032000000;
    uint64_t v21 = sub_100020A5C;
    id v22 = sub_100021020;
    id v23 = objc_alloc_init((Class)PKVirtualCardEncryptionFields);
    id v6 = (void *)v19[5];
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(v7 + 144);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_100251168;
    v13[3] = &unk_100742938;
    p_long long buf = &buf;
    id v17 = &v18;
    void v13[4] = v7;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 56);
    [v6 prepareCertificateWithQueue:v8 completion:v13];

    _Block_object_dispose(&v18, 8);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [v3 description];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error calling create virtual card, hardware doesn't support BAA certificate generation with status: %@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      uint64_t v12 = +[NSError errorWithDomain:PKAccountErrorDomain code:4 userInfo:0];
      (*(void (**)(uint64_t, void, void, void *))(v11 + 16))(v11, 0, 0, v12);
    }
  }
}

void sub_100251130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100251168(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setEncryptionFields:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100251234;
  v4[3] = &unk_100742910;
  uint64_t v7 = *(void *)(a1 + 56);
  void v4[4] = v2;
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  [v3 performHandlerOnSharedWebServiceQueue:v4];
}

void sub_100251234(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1002512F4;
  v6[3] = &unk_1007428E8;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  [a2 createVirtualCardWithRequest:v4 completion:v6];
}

void sub_1002512F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 virtualCard];
  id v7 = [v6 identifier];

  if (v5 || !v7)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, void, id))(v11 + 16))(v11, 0, 0, v5);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(NSObject **)(v8 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100251420;
    block[3] = &unk_100742898;
    void block[4] = v8;
    id v13 = *(id *)(a1 + 40);
    id v14 = v6;
    id v10 = *(id *)(a1 + 48);
    id v15 = 0;
    id v16 = v10;
    dispatch_async(v9, block);
  }
}

void sub_100251420(id *a1)
{
  id v2 = a1[4];
  id v3 = [a1[5] accountIdentifier];
  uint64_t v4 = objc_msgSend(v2, "_queue_accountWithIdentifier:", v3);

  if (v4)
  {
    id v5 = [v4 creditDetails];
    [v5 addOrUpdateVirtualCard:a1[6]];

    id v6 = objc_msgSend(a1[4], "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", v4, 1, 0);
    id v7 = *((void *)a1[4] + 18);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100251560;
    v8[3] = &unk_100731F10;
    id v12 = a1[8];
    id v9 = a1[6];
    id v10 = a1[5];
    id v11 = a1[7];
    dispatch_async(v7, v8);
  }
}

void sub_100251560(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, uint64_t, id, void))(v2 + 16))(v2, v3, v4, *(void *)(a1 + 48));
}

void sub_100251848(uint64_t a1, void *a2)
{
  id v3 = a2;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100251BEC;
  v30[3] = &unk_1007429B0;
  id v31 = *(id *)(a1 + 56);
  id v4 = objc_retainBlock(v30);
  if (!v3)
  {
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Error calling virtual card action, no account", buf, 2u);
    }

    uint64_t v13 = PKAccountErrorDomain;
    uint64_t v14 = 3;
    goto LABEL_14;
  }
  id v5 = *(void **)(*(void *)(a1 + 32) + 24);
  id v6 = [v3 associatedPassUniqueID];
  LOBYTE(v5) = [v5 passExistsWithUniqueID:v6];

  if ((v5 & 1) == 0)
  {
    id v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Error calling virtual card action, no pass locally provisioned", buf, 2u);
    }

    uint64_t v13 = PKAccountErrorDomain;
    uint64_t v14 = 7;
LABEL_14:
    id v16 = +[NSError errorWithDomain:v13 code:v14 userInfo:0];
    ((void (*)(void *, void, void, void *))v4[2])(v4, 0, 0, v16);
    goto LABEL_17;
  }
  id v7 = [v3 creditDetails];
  uint64_t v8 = [v7 virtualCards];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_100251C04;
  v27[3] = &unk_100741F70;
  id v28 = *(id *)(a1 + 40);
  id v9 = objc_msgSend(v8, "pk_anyObjectPassingTest:", v27);

  if ([v9 hasSensitiveCredentials] && *(void *)(a1 + 64) == 1)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Virtual card already has encrypted data, suppress fetch", buf, 2u);
    }

    id v11 = [v3 copy];
    ((void (*)(void *, void *, id, void))v4[2])(v4, v9, v11, 0);
  }
  else
  {
    uint64_t v17 = *(void **)(*(void *)(a1 + 32) + 32);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100251C88;
    v20[3] = &unk_100742A78;
    uint64_t v25 = v4;
    id v21 = *(id *)(a1 + 48);
    id v22 = v3;
    id v18 = *(id *)(a1 + 40);
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 32);
    id v23 = v18;
    uint64_t v24 = v19;
    [v17 paymentHardwareStatusWithType:1 completion:v20];

    id v11 = v25;
  }

  id v16 = v28;
LABEL_17:
}

uint64_t sub_100251BEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100251C04(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_100251C88(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 canDecryptBAAEncryptedData])
  {
    id v4 = objc_alloc_init((Class)PKAccountWebServiceVirtualCardManageRequest);
    [v4 setAccountIdentifier:*(void *)(a1 + 32)];
    id v5 = [*(id *)(a1 + 40) accountBaseURL];
    [v4 setBaseURL:v5];

    [v4 setVirtualCardIdentifier:*(void *)(a1 + 48)];
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(v7 + 144);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_100251EB4;
    v16[3] = &unk_100742A50;
    void v16[4] = v7;
    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 72);
    id v17 = v9;
    uint64_t v21 = v10;
    id v18 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 64);
    id v19 = v4;
    id v20 = v11;
    id v12 = v4;
    [v12 setAction:v6 withQueue:v8 completion:v16];
  }
  else
  {
    uint64_t v13 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = [v3 description];
      *(_DWORD *)long long buf = 138412290;
      id v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Error calling virtual card action, hardware doesn't support BAA certificate generation with status: %@", buf, 0xCu);
    }
    uint64_t v15 = *(void *)(a1 + 64);
    id v12 = +[NSError errorWithDomain:PKAccountErrorDomain code:4 userInfo:0];
    (*(void (**)(uint64_t, void, void, id))(v15 + 16))(v15, 0, 0, v12);
  }
}

void sub_100251EB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100251FA0;
    v11[3] = &unk_100742A28;
    id v6 = v3;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 40);
    id v12 = v6;
    uint64_t v13 = v7;
    id v9 = v8;
    uint64_t v10 = *(void *)(a1 + 72);
    id v14 = v9;
    uint64_t v17 = v10;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 64);
    [v5 performHandlerOnSharedWebServiceQueue:v11];
  }
}

void sub_100251FA0(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100252074;
  v8[3] = &unk_100742A00;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 72);
  id v9 = v6;
  uint64_t v12 = v7;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  [a2 virtualCardActionWithRequest:v4 completion:v8];
}

void sub_100252074(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 virtualCard];
  uint64_t v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v6 description];
    *(_DWORD *)long long buf = 138412290;
    id v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Manage virtual card response with: %@", buf, 0xCu);
  }
  id v9 = [v6 identifier];

  if (v5 || !v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(NSObject **)(v10 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100252258;
    block[3] = &unk_1007429D8;
    void block[4] = v10;
    id v16 = *(id *)(a1 + 40);
    id v12 = v6;
    uint64_t v13 = *(void *)(a1 + 64);
    id v17 = v12;
    uint64_t v21 = v13;
    id v18 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    id v19 = 0;
    id v20 = v14;
    dispatch_async(v11, block);
  }
}

void sub_100252258(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) accountIdentifier];
  uint64_t v4 = objc_msgSend(v2, "_queue_accountWithIdentifier:", v3);

  if (v4)
  {
    id v5 = [v4 creditDetails];
    [v5 addOrUpdateVirtualCard:*(void *)(a1 + 48)];

    if ((*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      id v6 = [v4 creditDetails];
      [v6 removeVirtualCard:*(void *)(a1 + 56)];
    }
    id v7 = objc_msgSend(*(id *)(a1 + 32), "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", v4, 1, 0);
    uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1002523C4;
    v9[3] = &unk_100731F10;
    id v13 = *(id *)(a1 + 72);
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 64);
    dispatch_async(v8, v9);
  }
}

void sub_1002523C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, uint64_t, id, void))(v2 + 16))(v2, v3, v4, *(void *)(a1 + 48));
}

void sub_1002524FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100252624;
    v10[3] = &unk_10073C918;
    id v11 = v3;
    id v6 = *(id *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 32);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = *(id *)(a1 + 48);
    [v5 performHandlerOnSharedWebServiceQueue:v10];
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      id v9 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
      (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0, 0, v9);
    }
  }
}

void sub_100252624(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceVirtualCardListRequest);
  id v5 = [*(id *)(a1 + 32) accountBaseURL];
  [v4 setBaseURL:v5];

  [v4 setAccountIdentifier:*(void *)(a1 + 40)];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100252728;
  v6[3] = &unk_100742AC8;
  void v6[4] = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 56);
  [v3 virtualCardListWithRequest:v4 completion:v6];
}

void sub_100252728(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc((Class)NSSet);
  id v8 = [v6 virtualCards];

  id v9 = [v7 initWithArray:v8];
  if (v5 || !v9)
  {
    uint64_t v13 = *(void *)(a1 + 48);
    if (v13) {
      (*(void (**)(uint64_t, void, void, id))(v13 + 16))(v13, 0, 0, v5);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(NSObject **)(v10 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100252880;
    block[3] = &unk_100742898;
    void block[4] = v10;
    id v15 = *(id *)(a1 + 40);
    id v16 = v9;
    id v12 = *(id *)(a1 + 48);
    id v17 = 0;
    id v18 = v12;
    dispatch_async(v11, block);
  }
}

void sub_100252880(id *a1)
{
  id v2 = a1[4];
  id v3 = [a1[5] accountIdentifier];
  id v4 = objc_msgSend(v2, "_queue_accountWithIdentifier:", v3);

  if (v4)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v5 = a1[6];
    id v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          id v11 = [v10 identifier];

          if (v11)
          {
            id v12 = [v4 creditDetails];
            [v12 addOrUpdateVirtualCard:v10];
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v7);
    }

    uint64_t v13 = objc_msgSend(a1[4], "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", v4, 1, 0);

    id v14 = *((void *)a1[4] + 18);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100252A94;
    block[3] = &unk_100731830;
    id v19 = a1[8];
    id v17 = v13;
    id v18 = a1[7];
    id v15 = v13;
    dispatch_async(v14, block);
  }
}

void sub_100252A94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v5 = [*(id *)(a1 + 32) creditDetails];
    id v3 = [v5 virtualCards];
    id v4 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, void *, id, void))(v1 + 16))(v1, v3, v4, *(void *)(a1 + 40));
  }
}

void sub_100252E58(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100252F68;
  block[3] = &unk_100742AF0;
  id v17 = v6;
  id v18 = v7;
  id v9 = *(id *)(a1 + 40);
  id v11 = *(void **)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  id v19 = v9;
  uint64_t v23 = v10;
  id v12 = v11;
  uint64_t v13 = *(void *)(a1 + 32);
  id v22 = v12;
  uint64_t v20 = v13;
  id v21 = *(id *)(a1 + 48);
  id v14 = v7;
  id v15 = v6;
  dispatch_async(v8, block);
}

void sub_100252F68(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    id v4 = objc_alloc_init(PDVirtualCardDecryptionRequest);
    [(PDVirtualCardDecryptionRequest *)v4 setVirtualCard:*(void *)(a1 + 32)];
    [(PDVirtualCardDecryptionRequest *)v4 setAuthorization:*(void *)(a1 + 48)];
    [(PDVirtualCardDecryptionRequest *)v4 setAction:*(void *)(a1 + 80)];
    [(PDVirtualCardDecryptionRequest *)v4 setCompletion:*(void *)(a1 + 72)];
    [*(id *)(a1 + 56) _queueDecryptionRequest:v4];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetching virtual card failed, fallback to Keychain", buf, 2u);
    }

    id v3 = *(NSObject **)(*(void *)(a1 + 56) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002530D4;
    block[3] = &unk_10072FDC8;
    id v6 = *(id *)(a1 + 64);
    id v7 = *(id *)(a1 + 72);
    dispatch_async(v3, block);
  }
}

void sub_1002530D4(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) keychainCardCredentials];
  if (v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v2 = [*(id *)(a1 + 32) keychainVirtualCard];
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = [v2 keychainCardCredentials];
    (*(void (**)(uint64_t, void *, void))(v3 + 16))(v3, v4, 0);
  }
}

void sub_100253188(uint64_t a1)
{
  id v2 = objc_alloc_init(PDVirtualCardDecryptionRequest);
  [(PDVirtualCardDecryptionRequest *)v2 setVirtualCard:*(void *)(a1 + 32)];
  [(PDVirtualCardDecryptionRequest *)v2 setAuthorization:*(void *)(a1 + 40)];
  [(PDVirtualCardDecryptionRequest *)v2 setAction:*(void *)(a1 + 64)];
  [(PDVirtualCardDecryptionRequest *)v2 setCompletion:*(void *)(a1 + 56)];
  [*(id *)(a1 + 48) _queueDecryptionRequest:v2];
}

void sub_100253494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  objc_destroyWeak(v18);
  _Block_object_dispose(&a18, 8);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1002534D0(uint64_t a1, int a2, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002535B4;
  v9[3] = &unk_100742B80;
  objc_copyWeak(v13, (id *)(a1 + 64));
  v13[1] = (id)cf;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v11 = v6;
  uint64_t v12 = v7;
  uint64_t v8 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v8;
  dispatch_async(v5, v9);

  objc_destroyWeak(v13);
}

void sub_1002535B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v3 = *(void *)(a1 + 72);
  if (WeakRetained)
  {
    if (v3)
    {
      uint64_t v37 = 0;
      id v4 = PKDecryptDeviceDataWithError();
      id v5 = 0;
      if (v4)
      {
        v34[0] = 0;
        id v6 = +[NSJSONSerialization JSONObjectWithData:v4 options:0 error:v34];
        id v7 = v34[0];
        *((unsigned char *)WeakRetained + 104) = 0;
        if ([*((id *)WeakRetained + 14) count]) {
          [*((id *)WeakRetained + 14) removeObjectAtIndex:0];
        }
        if (v7)
        {
          uint64_t v8 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            id v9 = [v7 description];
            *(_DWORD *)long long buf = 138412290;
            long long v41 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error: cannot serialize decrypted card data because it's not in JSON format: %@", buf, 0xCu);
          }
          id v10 = *((void *)WeakRetained + 18);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100253EBC;
          block[3] = &unk_10072E598;
          id v33 = *(id *)(a1 + 48);
          id v32 = v7;
          dispatch_async(v10, block);

          id v11 = v33;
        }
        else
        {
          id v27 = v5;
          uint64_t v26 = v6;
          id v15 = [objc_alloc((Class)PKVirtualCardCredentials) initWithDictionary:v6];
          id v11 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) identifier];
          id v16 = [*(id *)(*(void *)(a1 + 32) + 24) accountWithVirtualCardIdentifier:v11];
          unsigned int v17 = [v16 supportsDynamicSecurityCodes];
          if ([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) hasDynamicSecurityCode])BOOL v18 = v17 == 0; {
          else
          }
            BOOL v18 = 1;
          if (!v18)
          {
            uint64_t v25 = *(void **)(a1 + 32);
            id v19 = [*(id *)(a1 + 40) action];
            uint64_t v20 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) securityCodeIdentifier];
            id v21 = [v16 accountIdentifier];
            [v25 noteSecurityCodeActivityWithAction:v19 forSecurityCodeIdentifier:v20 forVirtualCardIdentifier:v11 forAccountIdentifier:v21 completion:&stru_100742B58];
          }
          id v22 = *((void *)WeakRetained + 18);
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472;
          v28[2] = sub_100253F7C;
          void v28[3] = &unk_10072E598;
          id v23 = *(id *)(a1 + 48);
          id v29 = v15;
          id v30 = v23;
          id v24 = v15;
          dispatch_async(v22, v28);

          id v6 = v26;
          id v5 = v27;
        }

        [WeakRetained _executeDecryptionRequests];
      }
      else
      {
        id v14 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Fatal error decrypting virtual card", buf, 2u);
        }

        v34[1] = _NSConcreteStackBlock;
        v34[2] = (id)3221225472;
        v34[3] = sub_100253B48;
        v34[4] = &unk_10072FDC8;
        id v35 = WeakRetained;
        id v36 = *(id *)(a1 + 48);
        PKForceRefreshBAACertificateAndKey();

        id v7 = v35;
      }

      CFRelease(*(CFTypeRef *)(a1 + 72));
    }
    else
    {
      uint64_t v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Fatal error: no reference key from Device Identity", buf, 2u);
      }

      *((unsigned char *)WeakRetained + 104) = 0;
      if ([*((id *)WeakRetained + 14) count]) {
        [*((id *)WeakRetained + 14) removeObjectAtIndex:0];
      }
      uint64_t v13 = *((void *)WeakRetained + 18);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_100253ACC;
      v38[3] = &unk_10072F788;
      id v39 = *(id *)(a1 + 48);
      dispatch_async(v13, v38);
      [WeakRetained _executeDecryptionRequests];
    }
  }
  else if (v3)
  {
    CFRelease(*(CFTypeRef *)(a1 + 72));
  }
}

void sub_100253ACC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = objc_alloc((Class)NSError);
  id v3 = [v2 initWithDomain:PKAccountErrorDomain code:6 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v3);
}

void sub_100253B48(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100253BEC;
  v3[3] = &unk_1007346F0;
  id v4 = v2;
  id v5 = *(id *)(a1 + 40);
  [v4 accountsWithCompletion:v3];
}

void sub_100253BEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(a1 + 32);
        id v9 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v7) accountIdentifier];
        [v8 deleteVirtualCardEncryptedDataForAccountIdentifier:v9 completion:0];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
  id v10 = *(void **)(a1 + 32);
  id v11 = v10[17];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100253D7C;
  v12[3] = &unk_10072FDC8;
  uint64_t v13 = v10;
  id v14 = *(id *)(a1 + 40);
  dispatch_async(v11, v12);
}

void sub_100253D7C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 104) = 0;
  if ([*(id *)(*(void *)(a1 + 32) + 112) count]) {
    [*(id *)(*(void *)(a1 + 32) + 112) removeObjectAtIndex:0];
  }
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100253E40;
  block[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);
  [*(id *)(a1 + 32) _executeDecryptionRequests];
}

void sub_100253E40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = objc_alloc((Class)NSError);
  id v3 = [v2 initWithDomain:PKAccountErrorDomain code:5 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v3);
}

uint64_t sub_100253EBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100253ED4(id a1, PKVirtualCard *a2, NSError *a3)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    uint64_t v6 = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Called noteSecurityCodeActivityWithAction after decryption with error: %@", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_100253F7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10025410C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100254288;
    v10[3] = &unk_100742C48;
    id v15 = *(id *)(a1 + 56);
    id v11 = v3;
    id v12 = *(id *)(a1 + 40);
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 32);
    id v13 = v5;
    uint64_t v14 = v6;
    [v4 paymentHardwareStatusWithType:1 completion:v10];

    id v7 = v15;
LABEL_7:

    goto LABEL_8;
  }
  uint64_t v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error calling legacy virtual card, no account", buf, 2u);
  }

  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    id v7 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v7);
    goto LABEL_7;
  }
LABEL_8:
}

void sub_100254288(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 canDecryptBAAEncryptedData])
  {
    id v4 = [*(id *)(a1 + 32) creditDetails];
    id v5 = [v4 virtualCardWithIdentifier:*(void *)(a1 + 40)];

    uint64_t v6 = [v5 keychainVirtualCard];

    if (v6)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Virtual card is already in Keychain, no need to fetch", (uint8_t *)&buf, 2u);
      }

      uint64_t v8 = *(void *)(a1 + 64);
      if (v8) {
        (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
      }
    }
    else
    {
      id v12 = objc_alloc_init((Class)PKAccountWebServiceVirtualCardLegacyCredentialsRequest);
      [v12 setAccountIdentifier:*(void *)(a1 + 48)];
      id v13 = [*(id *)(a1 + 32) accountBaseURL];
      [v12 setBaseURL:v13];

      [v12 setVirtualCardIdentifier:*(void *)(a1 + 40)];
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v26 = 0x3032000000;
      id v27 = sub_100020A5C;
      id v28 = sub_100021020;
      id v29 = objc_alloc_init((Class)PKVirtualCardEncryptionFields);
      uint64_t v14 = *(void **)(*((void *)&buf + 1) + 40);
      uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 144);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_1002545D4;
      void v19[3] = &unk_100742C20;
      id v16 = v12;
      p_long long buf = &buf;
      uint64_t v17 = *(void *)(a1 + 56);
      long long v18 = *(void **)(a1 + 64);
      id v20 = v16;
      uint64_t v21 = v17;
      id v23 = v18;
      id v22 = *(id *)(a1 + 32);
      [v14 prepareOneTimeCertificateWithQueue:v15 completion:v19];

      _Block_object_dispose(&buf, 8);
    }
    goto LABEL_12;
  }
  uint64_t v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [v3 description];
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error calling legacy virtual card, hardware doesn't support BAA certificate generation with status: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11)
  {
    id v5 = +[NSError errorWithDomain:PKAccountErrorDomain code:4 userInfo:0];
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v5);
LABEL_12:
  }
}

void sub_1002545B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002545D4(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 && !v5)
  {
    CFRetain(a2);
    [*(id *)(a1 + 32) setEncryptionFields:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    id v7 = *(void **)(*(void *)(a1 + 40) + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100254760;
    v18[3] = &unk_100742BF8;
    uint64_t v8 = (id *)v19;
    v19[0] = *(id *)(a1 + 32);
    v21[1] = a2;
    uint64_t v9 = (id *)v21;
    id v10 = *(id *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(void **)(a1 + 48);
    v21[0] = v10;
    v19[1] = v11;
    id v20 = v12;
    [v7 performHandlerOnSharedWebServiceQueue:v18];

LABEL_6:
    goto LABEL_7;
  }
  id v13 = *(void **)(a1 + 56);
  if (v13)
  {
    uint64_t v14 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100254CA4;
    block[3] = &unk_10072E598;
    uint64_t v8 = &v17;
    id v17 = v13;
    uint64_t v9 = &v16;
    id v16 = v6;
    dispatch_async(v14, block);
    goto LABEL_6;
  }
LABEL_7:
}

void sub_100254760(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100254824;
  v8[3] = &unk_100742BD0;
  long long v7 = *(_OWORD *)(a1 + 56);
  id v5 = (id)v7;
  long long v10 = v7;
  uint64_t v6 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = v6;
  [a2 virtualCardLegacyCredentialsWithRequest:v4 completion:v8];
}

void sub_100254824(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 virtualCard];
  long long v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = [v6 description];
    *(_DWORD *)long long buf = 138412290;
    long long v38 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Legacy credentials virtual card response with: %@", buf, 0xCu);
  }
  if (!v5 && v6)
  {
    uint64_t v36 = 0;
    id v9 = PKDecryptDeviceDataWithError();
    id v10 = 0;
    if (v10)
    {
      uint64_t v11 = *(void **)(a1 + 48);
      if (!v11)
      {
LABEL_20:

        goto LABEL_21;
      }
      id v12 = *(NSObject **)(*(void *)(a1 + 32) + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100254C54;
      block[3] = &unk_10072E598;
      id v35 = v11;
      id v34 = v10;
      dispatch_async(v12, block);

      id v13 = v35;
LABEL_19:

      goto LABEL_20;
    }
    id v32 = 0;
    id v16 = +[NSJSONSerialization JSONObjectWithData:v9 options:0 error:&v32];
    id v13 = v32;
    if (v13)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = [v13 description];
        *(_DWORD *)long long buf = 138412290;
        long long v38 = v17;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error: cannot serialize decrypted card data because it's not in JSON format: %@", buf, 0xCu);
      }
      long long v18 = *(void **)(a1 + 48);
      if (!v18) {
        goto LABEL_18;
      }
      id v19 = *(NSObject **)(*(void *)(a1 + 32) + 144);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100254C68;
      void v29[3] = &unk_10072E598;
      id v31 = v18;
      id v30 = v13;
      dispatch_async(v19, v29);

      id v20 = v31;
    }
    else
    {
      id v20 = [objc_alloc((Class)PKVirtualCardCredentials) initWithDictionary:v16];
      [*(id *)(a1 + 40) feature];
      uint64_t v21 = PKLocalizedFeatureString();
      [v6 setDisplayName:v21];

      [v6 setKeychainCardCredentials:v20];
      [v6 writeKeychainVirtualCardToKeychain];
      id v22 = *(void **)(a1 + 48);
      if (v22)
      {
        id v23 = *(NSObject **)(*(void *)(a1 + 32) + 144);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100254C7C;
        v27[3] = &unk_10072F788;
        id v28 = v22;
        dispatch_async(v23, v27);
      }
    }

LABEL_18:
    goto LABEL_19;
  }
  uint64_t v14 = *(void **)(a1 + 48);
  if (v14)
  {
    uint64_t v15 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100254C90;
    v24[3] = &unk_10072E598;
    id v26 = v14;
    id v25 = v5;
    dispatch_async(v15, v24);

    id v10 = v26;
LABEL_21:
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

uint64_t sub_100254C54(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100254C68(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100254C7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100254C90(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100254CA4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100254D58(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 48);
  id v4 = a2;
  id v5 = [PDAccountPromptForVirtualCardDetailNotification alloc];
  uint64_t v6 = [v4 accountIdentifier];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = [v4 associatedPassUniqueID];

  id v10 = [(PDAccountPromptForVirtualCardDetailNotification *)v5 initWithAccountIdentifier:v6 virtualCardIdentifier:v7 forPassUniqueIdentifier:v8];
  id v9 = *(void **)(*(void *)(a1 + 40) + 160);
  if (v3) {
    [v9 insertUserNotification:v10];
  }
  else {
    [v9 removeUserNotification:v10];
  }
}

void sub_100254ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 creditDetails];
  id v5 = [v4 virtualCards];

  if (v5)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          [v11 setEncryptedData:0];
          [v11 setEphemeralPublicKey:0];
        }
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v8);
    }

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1002550A0;
    v14[3] = &unk_10072F788;
    id v12 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    [v12 insertOrReplaceAccount:v3 extended:1 deleteSensitiveData:1 completion:v14];
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      (*(void (**)(void))(v13 + 16))();
    }
  }
}

uint64_t sub_1002550A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100255178(uint64_t a1, void *a2)
{
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v32 objects:v39 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v33;
    uint64_t v22 = *(void *)v33;
    while (2)
    {
      id v6 = 0;
      id v23 = v4;
      do
      {
        if (*(void *)v33 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v6);
        if ([v7 type] == (id)1)
        {
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          id v8 = [v7 creditDetails];
          uint64_t v9 = [v8 virtualCards];

          id v10 = [v9 countByEnumeratingWithState:&v28 objects:v38 count:16];
          if (v10)
          {
            id v11 = v10;
            uint64_t v12 = *(void *)v29;
LABEL_9:
            uint64_t v13 = 0;
            while (1)
            {
              if (*(void *)v29 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void **)(*((void *)&v28 + 1) + 8 * v13);
              id v15 = [v14 identifier];
              char v16 = PKEqualObjects();

              if (v16) {
                break;
              }
              if (v11 == (id)++v13)
              {
                id v11 = [v9 countByEnumeratingWithState:&v28 objects:v38 count:16];
                if (v11) {
                  goto LABEL_9;
                }
                goto LABEL_15;
              }
            }
            long long v17 = +[NSDate date];
            [v14 setLastAutoFilledBySafari:v17];

            id v18 = v7;
            uint64_t v5 = v22;
            id v4 = v23;
            if (!v18) {
              goto LABEL_17;
            }

            v26[0] = _NSConcreteStackBlock;
            v26[1] = 3221225472;
            void v26[2] = sub_1002554F4;
            v26[3] = &unk_10072F788;
            uint64_t v21 = *(void **)(a1 + 40);
            id v27 = *(id *)(a1 + 48);
            [v21 insertOrReplaceAccount:v18 extended:1 deleteSensitiveData:0 completion:v26];

            goto LABEL_24;
          }
LABEL_15:

          uint64_t v5 = v22;
          id v4 = v23;
        }
LABEL_17:
        id v6 = (char *)v6 + 1;
      }
      while (v6 != v4);
      id v4 = [obj countByEnumeratingWithState:&v32 objects:v39 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  long long v19 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "No matching virtual card to update", buf, 2u);
  }

  if (*(void *)(a1 + 48))
  {
    NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
    CFStringRef v37 = @"PDAccountManager could not save the virtual card's last AutoFilled date because no matching virtual card was found";
    id v20 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
    id v18 = +[NSError errorWithDomain:PKPassKitErrorDomain code:0 userInfo:v20];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_24:
  }
}

uint64_t sub_1002554F4(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Virtual card used in Safari, last used date updated locally", v4, 2u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100255640(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v3 = [v16 creditDetails];
  id v4 = [v3 virtualCards];

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v11 = [v10 identifier];
        if ([v10 supportsLocalStorage])
        {
          uint64_t v12 = *(void **)(a1 + 32);
          uint64_t v13 = [v16 accountIdentifier];
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          void v17[2] = sub_10025584C;
          v17[3] = &unk_100742CB8;
          void v17[4] = *(void *)(a1 + 32);
          id v14 = v11;
          id v18 = v14;
          id v19 = *(id *)(a1 + 40);
          [v12 performVirtualCardAction:1 forVirtualCardIdentifier:v14 forAccountIdentifier:v13 completion:v17];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v7);
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v15) {
    (*(void (**)(void))(v15 + 16))();
  }
}

void sub_10025584C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Proactively fetched virtual card encrypted data with error: %@", (uint8_t *)&v7, 0xCu);
  }

  [*(id *)(a1 + 32) fetchKeychainCredentialForVirtualCardIdentifier:*(void *)(a1 + 40) forAccountIdentifier:*(void *)(a1 + 48) completion:&stru_100742C90];
}

void sub_10025591C(id a1, NSError *a2)
{
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Proactively fetched virtual card keychain data with error: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100255AD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(*(void *)(a1 + 32) + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100255BD4;
  v10[3] = &unk_100742D30;
  id v11 = *(id *)(a1 + 40);
  id v12 = v3;
  id v13 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  int v7 = *(void **)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  id v14 = v5;
  uint64_t v17 = v6;
  id v8 = v7;
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = v8;
  id v9 = v3;
  [v4 performHandlerOnSharedWebServiceQueue:v10];
}

void sub_100255BD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceVirtualCardSecurityCodeActivityRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = [*(id *)(a1 + 40) accountBaseURL];
  [v4 setBaseURL:v5];

  [v4 setVirtualCardIdentifier:*(void *)(a1 + 48)];
  [v4 setSecurityCodeIdentifier:*(void *)(a1 + 56)];
  [v4 setAction:*(void *)(a1 + 80)];
  uint64_t v6 = +[NSDate date];
  [v4 setTimestamp:v6];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100255D30;
  v9[3] = &unk_100742D08;
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 64);
  id v12 = v7;
  void v9[4] = v8;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  [v3 virtualCardSecurityCodeActivity:v4 completion:v9];
}

void sub_100255D30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_100255EE0;
  v18[3] = &unk_100742CE0;
  id v6 = *(id *)(a1 + 56);
  void v18[4] = *(void *)(a1 + 32);
  id v19 = v6;
  id v7 = a2;
  uint64_t v8 = objc_retainBlock(v18);
  id v9 = [v7 virtualCard];

  id v10 = [v9 identifier];

  if (v5 || !v10)
  {
    ((void (*)(void *, void, id))v8[2])(v8, 0, v5);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(NSObject **)(v11 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100255FD4;
    block[3] = &unk_100731F38;
    void block[4] = v11;
    id v14 = *(id *)(a1 + 40);
    id v15 = v9;
    id v16 = *(id *)(a1 + 48);
    uint64_t v17 = v8;
    dispatch_async(v12, block);
  }
}

void sub_100255EE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100255FBC;
    block[3] = &unk_100731830;
    id v12 = v7;
    id v10 = v5;
    id v11 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_100255FBC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100255FD4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) accountIdentifier];
  id v4 = objc_msgSend(v2, "_queue_accountWithIdentifier:", v3);

  if (v4)
  {
    id v5 = [v4 creditDetails];
    [v5 addOrUpdateVirtualCard:*(void *)(a1 + 48)];

    id v6 = objc_msgSend(*(id *)(a1 + 32), "_queue_insertOrReplaceAccount:extended:deleteSensitiveData:", v4, 1, 0);

    id v7 = [v6 creditDetails];
    uint64_t v8 = [v7 virtualCardWithIdentifier:*(void *)(a1 + 56)];

    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100256114;
    v12[3] = &unk_10072E598;
    id v10 = *(id *)(a1 + 64);
    id v13 = v8;
    id v14 = v10;
    id v11 = v8;
    dispatch_async(v9, v12);
  }
}

uint64_t sub_100256114(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100256210(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_queue_accountWithIdentifier:", *(void *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_queue_updatePhysicalCardsIfNecessaryForAccount:", v2);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 40)];
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002562F8;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1002562F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1002563E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = a3;
    id v8 = [v6 accountIdentifier];

    int v9 = 138412546;
    id v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed updating physical cards proactively for account %@. Error: %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_100256750(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1002567CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002568B8;
  block[3] = &unk_100734360;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1002568B8(id *a1)
{
  if (a1[4])
  {
    if ((PKUIOnlyDemoModeEnabled() & 1) != 0 || PKStoreDemoModeEnabled())
    {
      id v2 = (void (**)(id, void *, void))a1[8];
      if (v2)
      {
        id v3 = (void *)*((void *)a1[6] + 3);
        id v24 = [a1[4] accountIdentifier];
        id v4 = [v3 physicalCardsForAccountWithIdentifier:v24];
        v2[2](v2, v4, 0);
      }
    }
    else
    {
      id v9 = [a1[4] type];
      if ((unint64_t)v9 > 4 || v9 == (id)1)
      {
        if (([a1[7] force] & 1) != 0
          || ([a1[6] _shouldProactivelyFetchEndpoint:10 metadataType:7 fetchPeriodEndpoint:9 account:a1[4]] & 1) != 0)
        {
          *(void *)&long long buf = 0;
          *((void *)&buf + 1) = &buf;
          uint64_t v38 = 0x3032000000;
          id v39 = sub_100020A5C;
          long long v40 = sub_100021020;
          id v13 = [*((id *)a1[6] + 3) accountEndpointMetadataForAccountIdentifier:a1[5] endpoint:7];
          id v14 = v13;
          if (v13) {
            id v15 = v13;
          }
          else {
            id v15 = [[PDAccountWebServiceEndpointMetadata alloc] initWithAccountIdentifier:a1[5] endpoint:7];
          }
          long long v41 = v15;

          id v16 = objc_alloc_init((Class)PKAccountWebServicePhysicalCardsRequest);
          uint64_t v17 = [a1[4] accountBaseURL];
          [v16 setBaseURL:v17];

          [v16 setAccountIdentifier:a1[5]];
          id v18 = (void *)*((void *)a1[6] + 4);
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          void v25[2] = sub_100256DF8;
          v25[3] = &unk_100742DD0;
          id v19 = v16;
          id v20 = a1[6];
          id v26 = v19;
          id v27 = v20;
          id v28 = a1[4];
          p_long long buf = &buf;
          id v29 = a1[5];
          id v30 = a1[8];
          [v18 performHandlerOnSharedWebServiceQueue:v25];

          _Block_object_dispose(&buf, 8);
        }
        else
        {
          long long v21 = [*((id *)a1[6] + 3) physicalCardsForAccountWithIdentifier:a1[5]];
          id v22 = a1[8];
          if (v22)
          {
            long long v23 = *((void *)a1[6] + 18);
            v32[0] = _NSConcreteStackBlock;
            v32[1] = 3221225472;
            v32[2] = sub_100256DE0;
            v32[3] = &unk_10072E598;
            id v34 = v22;
            id v33 = v21;
            dispatch_async(v23, v32);
          }
        }
      }
      else
      {
        id v11 = a1[8];
        if (v11)
        {
          id v12 = (void (*)(void))*((void *)v11 + 2);
          v12();
        }
      }
    }
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = a1[5];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@", (uint8_t *)&buf, 0xCu);
    }

    id v7 = a1[8];
    if (v7)
    {
      id v8 = *((void *)a1[6] + 18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100256D64;
      block[3] = &unk_10072F788;
      id v36 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_100256D44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100256D64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_100256DE0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100256DF8(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100256ECC;
  v8[3] = &unk_100742DA8;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 72);
  id v9 = v6;
  uint64_t v12 = v7;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  [a2 physicalCardsWithRequest:v4 completion:v8];
}

void sub_100256ECC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100256FDC;
  block[3] = &unk_100742D80;
  id v13 = *(id *)(a1 + 40);
  id v14 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v15 = v8;
  id v16 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v17 = v5;
  id v18 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

void sub_100256FDC(uint64_t a1)
{
  [*(id *)(a1 + 32) feature];
  uint64_t v2 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
  id v3 = *(void **)(a1 + 40);
  if (!v3)
  {
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:v2 endpointType:10 accountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:0];
    id v13 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    id v14 = +[NSDate date];
    [v13 setLastUpdated:v14];

    uint64_t v15 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 4_PDOpenPaymentSetupUI(0, 0) = v15;

    id v18 = *(void **)(*(void *)(a1 + 48) + 24);
    uint64_t v19 = [*(id *)(a1 + 64) physicalCards];
    id v20 = [v18 replacePhysicalCards:v19 forAccountWithIdentifier:*(void *)(a1 + 56)];

    long long v21 = *(void **)(a1 + 48);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1002573FC;
    v32[3] = &unk_1007424D8;
    void v32[4] = v21;
    id v9 = v20;
    id v33 = v9;
    id v34 = *(id *)(a1 + 56);
    [v21 _accessObserversWithHandler:v32];
    id v22 = [*(id *)(a1 + 64) expirationMessaging];
    id v23 = [v22 count];

    if (v23)
    {
      id v24 = *(void **)(a1 + 48);
      id v25 = [*(id *)(a1 + 64) expirationMessaging];
      [v24 processPhysicalCardExpirationMessaging:v25 physicalCards:v9 account:*(void *)(a1 + 32)];
    }
    id v26 = *(void **)(a1 + 72);
    if (v26)
    {
      id v27 = *(NSObject **)(*(void *)(a1 + 48) + 144);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100257460;
      void v28[3] = &unk_100731830;
      id v31 = v26;
      id v29 = v9;
      id v30 = *(id *)(a1 + 40);
      dispatch_async(v27, v28);
    }
    uint64_t v12 = v33;
    goto LABEL_11;
  }
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 description];
    *(_DWORD *)long long buf = 138412290;
    long long v40 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Could not fetch physical cards with error %@", buf, 0xCu);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:1];
  uint64_t v6 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 4_PDOpenPaymentSetupUI(0, 0) = v6;

  id v9 = [*(id *)(*(void *)(a1 + 48) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:v2 endpointType:10 accountIdentifier:*(void *)(a1 + 56)];
  id v10 = *(void **)(a1 + 72);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002573E4;
    block[3] = &unk_100731830;
    id v38 = v10;
    id v9 = v9;
    id v36 = v9;
    id v37 = *(id *)(a1 + 40);
    dispatch_async(v11, block);

    uint64_t v12 = v38;
LABEL_11:
  }
}

uint64_t sub_1002573E4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1002573FC(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_100257460(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1002575B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceRequestPhysicalCardRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  id v5 = [v3 accountBaseURL];

  [v4 setBaseURL:v5];
  [v4 setOrder:*(void *)(a1 + 40)];
  [v4 setDeviceMetadata:*(void *)(a1 + 48)];
  [v4 setAccountUserAltDSID:*(void *)(a1 + 56)];
  uint64_t v6 = *(void **)(*(void *)(a1 + 64) + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002576EC;
  v10[3] = &unk_100742E70;
  id v11 = v4;
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 64);
  id v14 = v7;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 32);
  id v9 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v10];
}

void sub_1002576EC(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002577B8;
  v8[3] = &unk_100742E48;
  id v9 = v4;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  id v12 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [a2 requestPhysicalCardWithRequest:v9 completion:v8];
}

void sub_1002577B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (!v7 || v9)
  {
    if (!v8 || v9)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      if (v21) {
        (*(void (**)(uint64_t, void, void, void, void, void *))(v21 + 16))(v21, 0, 0, 0, 0, v10);
      }
    }
    else
    {
      uint64_t v19 = *(void **)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100257978;
      v22[3] = &unk_100742E20;
      id v23 = *(id *)(a1 + 56);
      [v19 _handlePhysicalCardRequestResponse:v8 forAccountIdentifier:v20 completion:v22];
    }
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = [v7 referenceIdentifier];
    id v13 = [v11 manifestHashWithReferenceIdentifier:v12];

    id v14 = objc_alloc((Class)PKApplePayTrustSignatureRequest);
    uint64_t v15 = PKApplePayTrustKeyDefaultIdentifier;
    uint64_t v16 = [v7 nonce];
    id v17 = [v14 initWithKeyIdentifier:v15 manifestHash:v13 nonce:v16];

    uint64_t v18 = *(void *)(a1 + 56);
    if (v18) {
      (*(void (**)(uint64_t, id, void, void, void, void))(v18 + 16))(v18, v17, *(void *)(a1 + 32), 0, 0, 0);
    }
  }
}

uint64_t sub_100257978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, void))(result + 16))(result, 0, 0, a2, a3, 0);
  }
  return result;
}

void sub_100257ABC(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100257B74;
  v6[3] = &unk_100742EC0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 applePayTrustSignatureRequestWithRequest:v4 completion:v6];
}

void sub_100257B74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void, void *))(v10 + 16))(v10, 0, 0, v7);
    }
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) accountIdentifier];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100257C74;
    v11[3] = &unk_100742E20;
    id v12 = *(id *)(a1 + 48);
    [v8 _handlePhysicalCardRequestResponse:v5 forAccountIdentifier:v9 completion:v11];
  }
}

uint64_t sub_100257C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 16))(result, a2, a3, 0);
  }
  return result;
}

void sub_100257D74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) physicalCard];
    if (v4)
    {
      id v5 = (void *)v4;
      id v6 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdatePhysicalCard:v4 forAccountWithIdentifier:*(void *)(a1 + 48)];

      id v7 = [*(id *)(*(void *)(a1 + 40) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 48)];
      id v8 = *(void **)(a1 + 40);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_100257F94;
      v21[3] = &unk_1007424D8;
      void v21[4] = v8;
      id v22 = v7;
      id v23 = *(id *)(a1 + 48);
      id v9 = v7;
      [v8 _accessObserversWithHandler:v21];
    }
    else
    {
      id v6 = 0;
    }
    id v12 = *(void **)(a1 + 56);
    if (v12)
    {
      id v13 = *(NSObject **)(*(void *)(a1 + 40) + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100257FF8;
      block[3] = &unk_100731830;
      id v20 = v12;
      id v6 = v6;
      id v18 = v6;
      id v19 = v3;
      dispatch_async(v13, block);
    }
    goto LABEL_9;
  }
  uint64_t v10 = *(void **)(a1 + 56);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100258010;
    v14[3] = &unk_10072E598;
    id v15 = 0;
    id v16 = v10;
    dispatch_async(v11, v14);

    id v6 = v16;
LABEL_9:
  }
}

void sub_100257F94(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_100257FF8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_100258010(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_10025810C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) updatedPhysicalCards];
    if (v4)
    {
      id v5 = (void *)v4;
      id v6 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdatePhysicalCards:v4 forAccountWithIdentifier:*(void *)(a1 + 48)];

      id v7 = [*(id *)(*(void *)(a1 + 40) + 24) physicalCardsForAccountWithIdentifier:*(void *)(a1 + 48)];
      id v8 = *(void **)(a1 + 40);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_10025832C;
      v21[3] = &unk_1007424D8;
      void v21[4] = v8;
      id v22 = v7;
      id v23 = *(id *)(a1 + 48);
      id v9 = v7;
      [v8 _accessObserversWithHandler:v21];
    }
    else
    {
      id v6 = 0;
    }
    id v12 = *(void **)(a1 + 56);
    if (v12)
    {
      id v13 = *(NSObject **)(*(void *)(a1 + 40) + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100258390;
      block[3] = &unk_100731830;
      id v20 = v12;
      id v6 = v6;
      id v18 = v6;
      id v19 = v3;
      dispatch_async(v13, block);
    }
    goto LABEL_9;
  }
  uint64_t v10 = *(void **)(a1 + 56);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1002583A8;
    v14[3] = &unk_10072E598;
    id v15 = 0;
    id v16 = v10;
    dispatch_async(v11, v14);

    id v6 = v16;
LABEL_9:
  }
}

void sub_10025832C(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] physicalCardsChanged:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_100258390(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1002583A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_10025851C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServicePhysicalCardActionRequest);
  [v4 setAction:*(void *)(a1 + 32)];
  [v4 setPhysicalCardIdentifier:*(void *)(a1 + 40)];
  [v4 setAccountIdentifier:*(void *)(a1 + 48)];
  id v5 = [v3 accountBaseURL];

  [v4 setBaseURL:v5];
  [v4 setDeviceMetadata:*(void *)(a1 + 56)];
  [v4 setAccountUserAltDSID:*(void *)(a1 + 64)];
  id v6 = *(void **)(*(void *)(a1 + 72) + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100258664;
  v10[3] = &unk_100742E70;
  id v11 = v4;
  id v7 = *(id *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 72);
  id v14 = v7;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 48);
  id v9 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v10];
}

void sub_100258664(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100258730;
  v8[3] = &unk_100742F10;
  id v9 = v4;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  id v12 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  [a2 physicalCardActionWithRequest:v9 completion:v8];
}

void sub_100258730(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (!v7 || v9)
  {
    if (!v8 || v9)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      if (v21) {
        (*(void (**)(uint64_t, void, void, void, void, void *))(v21 + 16))(v21, 0, 0, 0, 0, v10);
      }
    }
    else
    {
      id v19 = *(void **)(a1 + 40);
      uint64_t v20 = *(void *)(a1 + 48);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1002588F0;
      v22[3] = &unk_100742EE8;
      id v23 = *(id *)(a1 + 56);
      [v19 _handlePhysicalCardActionResponse:v8 forAccountIdentifier:v20 completion:v22];
    }
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = [v7 referenceIdentifier];
    id v13 = [v11 manifestHashWithReferenceIdentifier:v12];

    id v14 = objc_alloc((Class)PKApplePayTrustSignatureRequest);
    uint64_t v15 = PKApplePayTrustKeyDefaultIdentifier;
    id v16 = [v7 nonce];
    id v17 = [v14 initWithKeyIdentifier:v15 manifestHash:v13 nonce:v16];

    uint64_t v18 = *(void *)(a1 + 56);
    if (v18) {
      (*(void (**)(uint64_t, id, void, void, void, void))(v18 + 16))(v18, v17, *(void *)(a1 + 32), 0, 0, 0);
    }
  }
}

uint64_t sub_1002588F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, void))(result + 16))(result, 0, 0, a2, a3, 0);
  }
  return result;
}

void sub_100258A34(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100258AEC;
  v6[3] = &unk_100742F60;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 applePayTrustSignatureRequestWithRequest:v4 completion:v6];
}

void sub_100258AEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, void, void *))(v10 + 16))(v10, 0, 0, v7);
    }
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) accountIdentifier];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100258BEC;
    v11[3] = &unk_100742EE8;
    id v12 = *(id *)(a1 + 48);
    [v8 _handlePhysicalCardActionResponse:v5 forAccountIdentifier:v9 completion:v11];
  }
}

uint64_t sub_100258BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 16))(result, a2, a3, 0);
  }
  return result;
}

void sub_100258CD0(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = [a2 identifier];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100258DB8;
    v7[3] = &unk_100731B50;
    uint64_t v5 = *(void *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    [v3 activatePhysicalCardWithIdentifier:v4 activationCode:v5 completion:v7];
  }
  else
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v6();
  }
}

uint64_t sub_100258DB8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2 == 0);
}

void sub_100258E7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 accountIdentifier];
    [*(id *)(*(void *)(a1 + 32) + 24) physicalCardsForAccountWithIdentifier:v5];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      id v9 = 0;
      uint64_t v10 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v6);
          }
          id v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          id v13 = objc_msgSend(v12, "state", (void)v15);
          if (v13 == (id)1)
          {
            id v14 = v12;

            id v9 = v14;
            goto LABEL_17;
          }
          if (!v9 && v13 != (id)5) {
            id v9 = v12;
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
    else
    {
      id v9 = 0;
    }
LABEL_17:

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100259194(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
LABEL_29:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_30;
  }
  if (![*(id *)(a1 + 32) containsString:@"wallet://activate/nfc"]) {
    goto LABEL_26;
  }
  uint64_t v4 = +[NSURLComponents componentsWithString:*(void *)(a1 + 32)];
  [v4 queryItems];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = [v5 countByEnumeratingWithState:&v31 objects:v40 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v32;
    id v26 = v4;
    while (2)
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        id v11 = [v10 name];
        if (v11 != @"uid")
        {
          id v12 = v11;
          if (!v11) {
            continue;
          }
          unsigned int v13 = [(__CFString *)v11 isEqualToString:@"uid"];

          if (!v13) {
            continue;
          }
        }
        id v14 = [v10 value];
        uint64_t v4 = v26;
        goto LABEL_16;
      }
      id v7 = [v5 countByEnumeratingWithState:&v31 objects:v40 count:16];
      id v14 = 0;
      uint64_t v4 = v26;
      if (v7) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v14 = 0;
  }
LABEL_16:

  if (!v14)
  {
LABEL_26:
    id v23 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      id v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Cannot parse activation code from %@", buf, 0xCu);
    }

    goto LABEL_29;
  }
  long long v15 = [v3 accountIdentifier];
  [*(id *)(*(void *)(a1 + 40) + 24) physicalCardsForAccountWithIdentifier:v15];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v16 = (id)objc_claimAutoreleasedReturnValue();
  id v17 = [v16 countByEnumeratingWithState:&v27 objects:v39 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v28;
    while (2)
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v28 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void **)(*((void *)&v27 + 1) + 8 * (void)j);
        if (+[PKPhysicalCard physicalCard:v21 matchesActivationCode:v14])
        {
          id v25 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412546;
            id v36 = v14;
            __int16 v37 = 2112;
            id v38 = v21;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Found phyical card that matches activation code %@, %@", buf, 0x16u);
          }

          id v22 = v21;
          goto LABEL_34;
        }
      }
      id v18 = [v16 countByEnumeratingWithState:&v27 objects:v39 count:16];
      if (v18) {
        continue;
      }
      break;
    }
  }
  id v22 = 0;
LABEL_34:

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_30:
}

uint64_t sub_10025989C(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_100259920(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  id v16 = a6;
  id v8 = [a4 count];
  if (v16) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = v8 == 0;
  }
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = [v16 domain];
  if (![v10 isEqualToString:NSURLErrorDomain])
  {

LABEL_10:
    id v11 = [v16 domain];
    unsigned int v12 = [v11 isEqualToString:PKWebServiceErrorDomain];

    if (v12
      || ([v16 domain],
          unsigned int v13 = objc_claimAutoreleasedReturnValue(),
          unsigned int v14 = [v13 isEqualToString:PKPaymentWebServiceErrorDomain],
          v13,
          v14))
    {
      [v16 code];
    }
    goto LABEL_15;
  }
  if ([v16 code] == (id)-1009)
  {

    goto LABEL_15;
  }
  id v15 = [v16 code];

  if (v15 != (id)-1001) {
    goto LABEL_10;
  }
LABEL_15:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100259B8C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) billPaymentSelectedSuggestedAmountDataEventsForAccountIdentifier:*(void *)(a1 + 40) withStatementIdentifier:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100259C54;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

void sub_100259C54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) allObjects];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_100259DC4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) billPaymentSelectedSuggestedAmountDataEventsForAccountIdentifier:*(void *)(a1 + 40) withStartDate:*(void *)(a1 + 48) endDate:*(void *)(a1 + 56)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100259E8C;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 64);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

void sub_100259E8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) allObjects];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

id sub_10025A06C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) updateScheduledPaymentsWithAccount:a2 completion:0];
}

void sub_10025A148(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 type];
    if ((unint64_t)v5 > 4 || v5 == (id)1)
    {
      if ([v4 accessLevel] != (id)2)
      {
        BOOL v9 = *(NSObject **)(*(void *)(a1 + 40) + 136);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10025A2EC;
        v12[3] = &unk_100730578;
        id v10 = *(id *)(a1 + 32);
        uint64_t v11 = *(void *)(a1 + 40);
        id v13 = v10;
        uint64_t v14 = v11;
        id v15 = v4;
        id v16 = *(id *)(a1 + 48);
        dispatch_async(v9, v12);

        goto LABEL_6;
      }
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Not updating scheduled payments for account identifier %@ since this is a participant account.", buf, 0xCu);
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0, 0);
  }
LABEL_6:
}

void sub_10025A2EC(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating scheduled payments for account identifier %@", buf, 0xCu);
  }

  id v4 = *(void **)(*(void *)(a1 + 40) + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10025A43C;
  v7[3] = &unk_100742E70;
  id v8 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  int8x16_t v6 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v6.i64[0];
  int8x16_t v9 = vextq_s8(v6, v6, 8uLL);
  [v4 performHandlerOnSharedWebServiceQueue:v7];
}

void sub_10025A43C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServicePaymentsRequest);
  id v5 = [a1[4] accountIdentifier];
  [v4 setAccountIdentifier:v5];

  int8x16_t v6 = [a1[4] accountBaseURL];
  [v4 setBaseURL:v6];

  id v7 = a1[4];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10025A578;
  v10[3] = &unk_100743000;
  id v13 = a1[7];
  int8x16_t v9 = *((int8x16_t *)a1 + 2);
  id v8 = (id)v9.i64[0];
  int8x16_t v11 = vextq_s8(v9, v9, 8uLL);
  id v12 = a1[6];
  [v3 paymentsWithRequest:v4 account:v7 completion:v10];
}

void sub_10025A578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v6 description];
      *(_DWORD *)long long buf = 138412290;
      id v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not update scheduled payments with error %@", buf, 0xCu);
    }
    uint64_t v9 = *(void *)(a1 + 56);
    if (v9) {
      (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v6);
    }
  }
  else
  {
    id v10 = *(NSObject **)(*(void *)(a1 + 32) + 136);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10025A734;
    v14[3] = &unk_100742FD8;
    id v11 = v5;
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(a1 + 40);
    id v15 = v11;
    uint64_t v16 = v12;
    id v17 = v13;
    id v20 = *(id *)(a1 + 56);
    id v18 = 0;
    id v19 = *(id *)(a1 + 48);
    dispatch_async(v10, v14);
  }
}

void sub_10025A734(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) payments];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 24) setScheduledPayments:v2 forAccount:*(void *)(a1 + 48)];

  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v3, *(void *)(a1 + 56));
  }
  id v5 = [*(id *)(a1 + 40) _cacheKeyForScheduledPaymentsWithAccountIdentifier:*(void *)(a1 + 64)];
  id v6 = +[NSDate date];
  PKSharedCacheSetObjectForKey();

  id v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10025A878;
  v9[3] = &unk_100742190;
  void v9[4] = v7;
  id v10 = *(id *)(a1 + 64);
  id v11 = v3;
  id v12 = *(id *)(a1 + 48);
  id v8 = v3;
  [v7 _accessObserversWithHandler:v9];
}

void sub_10025A878(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (objc_opt_respondsToSelector()) {
    [v6 accountManager:*(void *)(a1 + 32) scheduledPaymentsChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }
  if (objc_opt_respondsToSelector())
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 56) accountIdentifier];
    [v6 accountManager:v3 didSetScheduledPayments:v4 forAccountIdentifier:v5];
  }
}

void sub_10025AB10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 24);
    id v6 = [v3 associatedPassUniqueID];
    LOBYTE(v5) = [v5 passExistsWithUniqueID:v6];

    if ((v5 & 1) == 0)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Scheduling setup reminder for account id %@", buf, 0xCu);
      }

      [v4 feature];
      uint64_t v9 = [PDWalletUserNotification alloc];
      id v10 = PKLocalizedFeatureString();
      id v11 = PKLocalizedFeatureString();
      id v12 = [(PDGenericUserNotification *)v9 initWithTitle:v10 message:v11];

      id v13 = [*(id *)(a1 + 32) _setupNotificationIdentifierForAccountIdentifier:*(void *)(a1 + 40)];
      [(PDUserNotification *)v12 setNotificationIdentifier:v13];

      uint64_t v14 = +[NSDate date];
      id v15 = [v14 dateByAddingTimeInterval:86400.0];
      [(PDUserNotification *)v12 setDate:v15];

      uint64_t v16 = PKURLActionSetup;
      uint64_t v17 = PKURLActionFeature;
      id v18 = PKFeatureIdentifierToString();
      id v19 = +[NSString stringWithFormat:@"%@/%@/%@", v16, v17, v18];
      [(PDUserNotification *)v12 setCustomActionRoute:v19];

      [(PDUserNotification *)v12 setReissueBannerOnUpdate:0];
      [*(id *)(*(void *)(a1 + 32) + 160) insertUserNotification:v12];
    }
  }
  uint64_t v20 = *(void *)(a1 + 48);
  if (v20) {
    (*(void (**)(void))(v20 + 16))();
  }
}

uint64_t sub_10025AED4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10025AFC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025B0A4;
  block[3] = &unk_100732C18;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  char v13 = *(unsigned char *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10025B0A4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 creditDetails];
  uint64_t v4 = [v3 installmentPlans];

  id v5 = +[NSPredicate predicateWithFormat:@"identifier IN %@", *(void *)(a1 + 40)];
  uint64_t v6 = [v4 filteredSetUsingPredicate:v5];

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * (void)v11) setUserViewedIntroduction:*(unsigned __int8 *)(a1 + 64)];
        uint64_t v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10025B278;
  v14[3] = &unk_10072E598;
  id v12 = *(void **)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  void v14[4] = *(void *)(a1 + 48);
  id v15 = v13;
  [v12 updateAccount:v2 completion:v14];
}

void sub_10025B278(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025B30C;
    block[3] = &unk_10072F788;
    id v4 = v1;
    dispatch_async(v2, block);
  }
}

uint64_t sub_10025B30C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10025B480(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10025B5A4;
  v8[3] = &unk_100743028;
  id v9 = v3;
  id v16 = *(id *)(a1 + 80);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 32);
  id v14 = v5;
  uint64_t v15 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_10025B5A4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v5 = [[PDAccountManagerExportTransactionRequest alloc] initWithAccountIdentifier:*(void *)(a1 + 40) statementIdentifier:0 type:0 trigger:0 statementStartDate:*(void *)(a1 + 48) statementEndDate:*(void *)(a1 + 56) fileFormat:*(void *)(a1 + 64) productTimeZone:*(void *)(a1 + 72)];
    [(PDAccountManagerExportTransactionRequest *)v5 addCompletion:*(void *)(a1 + 88)];
    [*(id *)(a1 + 80) _addAccountManagerFetchRequest:v5];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Error exporting transaction data, no account", buf, 2u);
    }

    uint64_t v3 = *(void *)(a1 + 88);
    if (v3)
    {
      id v4 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v4);
    }
  }
}

void sub_10025B7C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10025B8B8;
  v11[3] = &unk_10073E288;
  id v12 = v3;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v16 = v5;
  uint64_t v13 = v6;
  id v14 = v7;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 64);
  id v15 = v8;
  uint64_t v17 = v9;
  id v10 = v3;
  dispatch_async(v4, v11);
}

void sub_10025B8B8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    switch((unint64_t)[v2 type])
    {
      case 0uLL:
      case 2uLL:
      case 3uLL:
        id v3 = *(NSObject **)(*(void *)(a1 + 40) + 144);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10025BB7C;
        block[3] = &unk_10072F788;
        id v19 = *(id *)(a1 + 64);
        dispatch_async(v3, block);
        id v4 = v19;
        break;
      case 1uLL:
        id v8 = [*(id *)(*(void *)(a1 + 40) + 24) creditStatementWithIdentifier:*(void *)(a1 + 48) accountIdentifier:*(void *)(a1 + 56)];
        goto LABEL_10;
      case 4uLL:
        id v8 = [*(id *)(*(void *)(a1 + 40) + 24) savingsStatementWithIdentifier:*(void *)(a1 + 48) accountIdentifier:*(void *)(a1 + 56)];
LABEL_10:
        uint64_t v9 = v8;
        id v4 = [v8 openingDate];
        id v7 = [v9 closingDate];

        goto LABEL_11;
      default:
        id v7 = 0;
        id v4 = 0;
LABEL_11:
        id v10 = [PDAccountManagerExportTransactionRequest alloc];
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t v11 = *(void *)(a1 + 56);
        uint64_t v13 = *(void *)(a1 + 72);
        id v14 = [*(id *)(a1 + 32) productTimeZone];
        id v15 = [(PDAccountManagerExportTransactionRequest *)v10 initWithAccountIdentifier:v11 statementIdentifier:v12 type:1 trigger:v13 statementStartDate:v4 statementEndDate:v7 fileFormat:@"json" productTimeZone:v14];

        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_10025BC0C;
        v16[3] = &unk_100743078;
        void v16[4] = *(void *)(a1 + 40);
        id v17 = *(id *)(a1 + 64);
        [(PDAccountManagerExportTransactionRequest *)v15 addCompletion:v16];
        [*(id *)(a1 + 40) _addAccountManagerFetchRequest:v15];

        break;
    }
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error calling account statement metadata, no account", buf, 2u);
    }

    uint64_t v6 = *(void *)(a1 + 64);
    id v4 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v4);
  }
}

void sub_10025BB7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:10 userInfo:0];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_10025BC0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 statementMetadata];
  id v7 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountStatementMetadata:v6];

  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    uint64_t v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received statement metadata %@", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v7, v5);
  }
}

void sub_10025BDF8(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10025BEB8;
  v5[3] = &unk_100730578;
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v2, v5);
}

void sub_10025BEB8(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deleting statement metadata for statement identifier %@ and account identifier %@", buf, 0x16u);
  }

  [*(id *)(*(void *)(a1 + 48) + 24) deleteAccountStatementMetadataForStatementIdentifier:*(void *)(a1 + 32) accountIdentifier:*(void *)(a1 + 40)];
  id v5 = *(NSObject **)(*(void *)(a1 + 48) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025BFEC;
  block[3] = &unk_10072F788;
  id v7 = *(id *)(a1 + 56);
  dispatch_async(v5, block);
}

uint64_t sub_10025BFEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10025C09C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025C158;
  block[3] = &unk_10072E9D8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10025C158(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v7) accountIdentifier];
        uint64_t v9 = [*(id *)(*(void *)(a1 + 40) + 24) accountStatementMetadataForAccountIdentifier:v8];
        if ([v9 count]) {
          [v2 safelySetObject:v9 forKey:v8];
        }

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v5);
  }

  id v10 = *(NSObject **)(*(void *)(a1 + 40) + 144);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  id v13[2] = sub_10025C328;
  v13[3] = &unk_10072E598;
  id v11 = *(id *)(a1 + 48);
  id v14 = v2;
  id v15 = v11;
  id v12 = v2;
  dispatch_async(v10, v13);
}

void sub_10025C328(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if ([*(id *)(a1 + 32) count])
    {
      id v4 = [*(id *)(a1 + 32) copy];
      (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v4, 0);
    }
    else
    {
      id v3 = *(void (**)(uint64_t, void, void))(v1 + 16);
      v3(v1, 0, 0);
    }
  }
}

void sub_10025C4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v4 = *(NSObject **)(v3 + 136);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025C68C;
    block[3] = &unk_100730578;
    void block[4] = v3;
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    dispatch_async(v4, block);

    id v5 = v8;
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v3 + 144);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10025C5FC;
    v11[3] = &unk_10072F788;
    id v12 = *(id *)(a1 + 56);
    dispatch_async(v6, v11);
    id v5 = v12;
  }
}

void sub_10025C5FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_10025C68C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountStatementMetadataForStatementIdentifier:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10025C754;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10025C754(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0);
  }
  return result;
}

void sub_10025C8B8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10025C980;
  v4[3] = &unk_100738DE8;
  void v4[4] = v2;
  id v7 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [v2 accountWithIdentifier:v3 completion:v4];
}

void sub_10025C980(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [*(id *)(a1 + 40) statementIdentifier];
    id v5 = [*(id *)(a1 + 40) statementStartDate];
    id v6 = [*(id *)(a1 + 40) statementEndDate];
    id v7 = objc_alloc_init((Class)PKAccountWebServiceExportTransactionDataRequest);
    objc_msgSend(v7, "setType:", objc_msgSend(*(id *)(a1 + 40), "type"));
    id v8 = [v3 accountIdentifier];
    [v7 setAccountIdentifier:v8];

    id v9 = [v3 accountBaseURL];
    [v7 setBaseURL:v9];

    id v10 = [*(id *)(a1 + 40) fileFormat];
    [v7 setFileFormat:v10];

    [v7 setBeginDate:v5];
    [v7 setEndDate:v6];
    [v7 setStatementIdentifier:v4];
    id v11 = [v3 productTimeZone];
    [v7 setProductTimeZone:v11];

    objc_msgSend(v7, "setTrigger:", objc_msgSend(*(id *)(a1 + 40), "trigger"));
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138413058;
      uint64_t v25 = v13;
      __int16 v26 = 2112;
      long long v27 = v4;
      __int16 v28 = 2112;
      long long v29 = v5;
      __int16 v30 = 2112;
      long long v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Requesting account statement metadata for account %@, statement %@, startDate %@, endDate %@", buf, 0x2Au);
    }

    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = *(void **)(v14 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_10025CD08;
    v18[3] = &unk_100737868;
    id v19 = v7;
    uint64_t v20 = v14;
    id v21 = *(id *)(a1 + 56);
    id v16 = v7;
    [v15 performHandlerOnSharedWebServiceQueue:v18];
  }
  else
  {
    long long v17 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025CC78;
    block[3] = &unk_10072F788;
    id v23 = *(id *)(a1 + 56);
    dispatch_async(v17, block);
    id v4 = v23;
  }
}

void sub_10025CC78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_10025CD08(void *a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10025CDA0;
  v5[3] = &unk_1007430C8;
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[6];
  void v5[4] = a1[5];
  id v6 = v4;
  [a2 exportTransactionDataWithRequest:v3 completion:v5];
}

void sub_10025CDA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error getting account statement metadata %@", buf, 0xCu);
    }
  }
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025CF00;
  block[3] = &unk_100731830;
  id v9 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v9;
  id v13 = v5;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_10025CF00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 32) exportedTransactionInfo];
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v3, *(void *)(a1 + 40));
  }
}

void sub_10025D3F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Account idenifier for zoneName %@, %@", (uint8_t *)&v7, 0x16u);
  }

  id v6 = [[PDAccountManagerCreatedZoneRequest alloc] initWithZoneAccountIdentifier:v3 containerName:*(void *)(a1 + 40) zoneName:*(void *)(a1 + 32)];
  [*(id *)(a1 + 48) _addAccountManagerFetchRequest:v6];
}