void sub_100429970(id a1, PKPassTileDescriptor *a2, id a3)
{
  [(PKPassTileDescriptor *)a2 setDefaultStateIdentifier:a3];
}

void sub_100429978(id a1, PKPassTileDescriptor *a2, id a3)
{
  v4 = a2;
  -[PKPassTileDescriptor setDefaultEnabled:](v4, "setDefaultEnabled:", [a3 BOOLValue]);
}

void sub_100429D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_100429D28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v10 = a3;
  id v16 = v10;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v11 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v10 = v16;
  }
  LOBYTE(v15) = 0;
  id v14 = objc_msgSend(*(id *)(a1 + 64), "_createDescriptorStatePairForPID:withProperties:values:propertySetters:indices:inDatabase:supportGroups:", a2, v10, a4, *(void *)(a1 + 32), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 40), v15);
  if (v14)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v14];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    *a6 = 1;
  }
}

void sub_10042A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 168), 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10042A304(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v10 = a3;
  id v16 = v10;
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    id v11 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v10 = v16;
  }
  LOBYTE(v15) = 0;
  id v14 = objc_msgSend(*(id *)(a1 + 80), "_createUpdatedDescriptorPairForPID:transform:withProperties:values:propertySetters:indices:inDatabase:updated:supportGroups:", a2, *(void *)(a1 + 48), v10, a4, *(void *)(a1 + 32), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 64) + 8) + 24, v15);
  if (v14)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v14];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    *a6 = 1;
  }
}

void sub_10042A778(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  id v12 = 0;
  v3 = [v2 _checkEndpointsToBePolledOrDetermineNextPollDate:&v12];
  id v4 = v12;
  if (*(unsigned char *)(*(void *)(a1 + 32) + 57))
  {
    v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_100517B70(v5);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 57) = 0;
    v6 = *(void **)(a1 + 32);
    uint64_t v7 = 1;
LABEL_11:
    [v6 checkForNewSharingMessagesWithShouldCheckAllEndpoint:v7 completion:0];
    goto LABEL_12;
  }
  if ([v3 count]
    || ([v4 timeIntervalSinceNow], v8 < 0.0)
    || *(unsigned char *)(*(void *)(a1 + 32) + 57))
  {
    v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_100517AB4(v9);
    }

    v6 = *(void **)(a1 + 32);
    uint64_t v7 = 0;
    goto LABEL_11;
  }
  if (v4)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_100517AF8((uint64_t)v4, v10);
    }

    id v11 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v4];
    [v11 setReason:@"check for new sharing messages"];
    [v11 setRequireNetworkConnectivity:1];
    PDScheduledActivityRemove();
    PDScheduledActivityRegister();
  }
LABEL_12:
}

void sub_10042A9CC(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 56))
  {
    int v2 = *(unsigned __int8 *)(a1 + 48);
    v3 = PKLogFacilityTypeGetObject();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDSharingManager: checking outstanding messages already in progress, deferring.", buf, 2u);
      }

      *(unsigned char *)(*(void *)(a1 + 32) + 57) = 1;
    }
    else
    {
      if (v4)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDSharingManager: checking outstanding messages already in progress, skipping.", buf, 2u);
      }
    }
  }
  else
  {
    v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Checking for outstanding messages on tracked endpoints", buf, 2u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 56) = 1;
    v6 = (void *)PDOSTransactionCreate("PDSharingManager");
    uint64_t v7 = *(id **)(a1 + 32);
    if (*(unsigned char *)(a1 + 48))
    {
      double v8 = [v7[4] sharingEndpoints];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_10042ACE0;
      v25[3] = &unk_100750A08;
      v25[4] = *(void *)(a1 + 32);
      v9 = objc_msgSend(v8, "pk_objectsPassingTest:", v25);
    }
    else
    {
      v9 = [v7 _checkEndpointsToBePolledOrDetermineNextPollDate:0];
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v22;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v22 != v13) {
            objc_enumerationMutation(v10);
          }
          [*(id *)(a1 + 32) _updateEndpointHasOutstandingMessages:*(void *)(*((void *)&v21 + 1) + 8 * i) hasOutstandingMessages:1 didCheckForNewMessages:0];
        }
        id v12 = [v10 countByEnumeratingWithState:&v21 objects:v27 count:16];
      }
      while (v12);
    }

    uint64_t v15 = *(void **)(a1 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10042ACEC;
    v18[3] = &unk_1007315D8;
    v18[4] = v15;
    id v16 = *(id *)(a1 + 40);
    id v19 = v6;
    id v20 = v16;
    id v17 = v6;
    [v15 _processOutstandingEndpointsAndMessagesWithCompletion:v18];
  }
}

id sub_10042ACE0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _canEndpointBePolledOrCleanUpEndpoint:a2];
}

void sub_10042ACEC(uint64_t a1)
{
  int v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Finished checking for outstanding messages.", buf, 2u);
  }

  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
  v3 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10042ADD8;
  block[3] = &unk_10072F788;
  id v5 = *(id *)(a1 + 48);
  dispatch_async(v3, block);
  [*(id *)(a1 + 32) scheduleNextCheckIfNeeded];
}

uint64_t sub_10042ADD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10042B320(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  v9 = [WeakRetained channelForEndpoint:*(void *)(a1 + 40)];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10042B41C;
  v13[3] = &unk_1007372F0;
  uint64_t v10 = *(void *)(a1 + 40);
  v13[4] = *(void *)(a1 + 32);
  v13[5] = v10;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v9 checkOutstandingMessagesOn:v10 completion:v13];
}

void sub_10042B41C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  double v8 = *(NSObject **)(v7 + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10042B514;
  v11[3] = &unk_10073B6B0;
  v11[4] = *(void *)(a1 + 40);
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v16 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

void sub_10042B514(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) transportIdentifier];
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      id v6 = PKSharingLoggableMailboxAddress();
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      long long v24 = v6;
      __int16 v25 = 2112;
      uint64_t v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Endpoint %@ failed to check for outstanding messages error: %@", buf, 0x16u);
    }
  }
  else
  {
    if (v5)
    {
      double v8 = *(void **)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412547;
      long long v24 = v8;
      __int16 v25 = 2113;
      uint64_t v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Endpoint %@ found outstanding messages:\n %{private}@", buf, 0x16u);
    }

    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    BOOL v4 = *(id *)(a1 + 48);
    id v10 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v18;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v18 != v12) {
            objc_enumerationMutation(v4);
          }
          uint64_t v14 = *(void *)(*((void *)&v17 + 1) + 8 * i);
          if ((objc_msgSend(*(id *)(*(void *)(a1 + 56) + 32), "hasSharingMessage:transportIdentifier:", v14, v2, (void)v17) & 1) == 0)
          {
            id v15 = *(void **)(*(void *)(a1 + 56) + 32);
            uint64_t v21 = v14;
            id v16 = +[NSArray arrayWithObjects:&v21 count:1];
            [v15 insertOrUpdateSharingMessages:v16 storePayloads:1 transportIdentifier:v2];
          }
        }
        id v11 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
      }
      while (v11);
    }
  }

  [*(id *)(a1 + 56) _updateEndpointHasOutstandingMessages:*(void *)(a1 + 32) hasOutstandingMessages:0 didCheckForNewMessages:1];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10042B778(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = *(void **)(*(void *)(a1 + 32) + 32);
  uint64_t v7 = a4;
  id v8 = a3;
  uint64_t v9 = [v6 allOutstandingSharingMessages];
  if ([v9 count])
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Processing unseen outstanding messages", buf, 2u);
    }
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10042B8A8;
  v11[3] = &unk_100738B40;
  v11[4] = *(void *)(a1 + 32);
  [v9 enumerateKeysAndObjectsUsingBlock:v11];
  v7[2](v7, v8, 0);
}

void sub_10042B8A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(*(void *)(a1 + 32) + 32) sharingEndpointForTransportIdentifier:a2];
  if (v6)
  {
    long long v27 = 0uLL;
    long long v28 = 0uLL;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v26;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v26 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
          [WeakRetained handleOutstandingShareMessage:v12 endpoint:v6];
        }
        id v9 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
      }
      while (v9);
    }
  }
  else
  {
    long long v23 = 0uLL;
    long long v24 = 0uLL;
    long long v21 = 0uLL;
    long long v22 = 0uLL;
    id v14 = v5;
    id v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v22;
      do
      {
        for (j = 0; j != v16; j = (char *)j + 1)
        {
          if (*(void *)v22 != v17) {
            objc_enumerationMutation(v14);
          }
          long long v19 = *(void **)(*(void *)(a1 + 32) + 32);
          long long v20 = objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * (void)j), "identifier", (void)v21);
          [v19 deleteSharingMessageForIdentifier:v20];
        }
        id v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
      }
      while (v16);
    }
  }
}

void sub_10042BA94(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = *(void **)(*(void *)(a1 + 32) + 24);
  id v7 = a4;
  id v8 = a3;
  id v15 = [v6 sharedWebService];
  id v9 = [v15 context];
  uint64_t v10 = [v9 configuration];
  [v10 sharingMessageCacheTimeToLiveInterval];
  double v12 = v11;

  id v13 = *(void **)(*(void *)(a1 + 32) + 32);
  id v14 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceNow:-v12];
  [v13 deleteSharingMessagesOlderThan:v14];

  v7[2](v7, v8, 0);
}

uint64_t sub_10042BB8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id _SQLValueForCertificateChain(void *a1)
{
  id v1 = a1;
  if (!v1
    || (+[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:0], (int v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    int v2 = +[NSNull null];
  }

  return v2;
}

id _CertificateChainForSQLValue(void *a1)
{
  id v1 = a1;
  v6[0] = objc_opt_class();
  v6[1] = objc_opt_class();
  int v2 = +[NSArray arrayWithObjects:v6 count:2];
  uint64_t v3 = +[NSSet setWithArray:v2];
  BOOL v4 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v3 fromData:v1 error:0];

  return v4;
}

void sub_10042C99C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10042CB34(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10042CB3C(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAppleBalanceInStoreTopUpToken setTokenType:](v4, "setTokenType:", [a3 integerValue]);
}

void sub_10042CB94(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10042CB9C(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAppleBalanceInStoreTopUpToken *)v3 setExpirationDate:v4];
}

void sub_10042CBFC(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalanceInStoreTopUpToken setState:](v4, "setState:", [a3 integerValue]);
}

void sub_10042CC54(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKAppleBalanceInStoreTopUpToken *)v3 setTermsURL:v4];
}

void sub_10042CCB4(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
  id v4 = a2;
  _CertificateChainForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAppleBalanceInStoreTopUpToken *)v4 setCertificateChain:v5];
}

void sub_10042CD18(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10042CD20(id a1, PKAppleBalanceInStoreTopUpToken *a2, id a3)
{
}

void sub_10042DEB0(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountBalanceSummary *)v3 setOpeningDate:v4];
}

void sub_10042DF10(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountBalanceSummary *)v3 setClosingDate:v4];
}

void sub_10042DF70(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setPurchases:v4];
}

void sub_10042DFD4(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setPendingPurchases:v4];
}

void sub_10042E038(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setBalanceTransfers:v4];
}

void sub_10042E09C(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setInterestCharged:v4];
}

void sub_10042E100(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setFeesCharged:v4];
}

void sub_10042E164(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setPaymentsAndCredits:v4];
}

void sub_10042E1C8(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  if (a3)
  {
    uint64_t v3 = a2;
    PKCurrencyStorageNumberToCurrencyDecimal();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [(PKCreditAccountBalanceSummary *)v3 setPayments:v4];
  }
}

void sub_10042E234(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  if (a3)
  {
    uint64_t v3 = a2;
    PKCurrencyStorageNumberToCurrencyDecimal();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [(PKCreditAccountBalanceSummary *)v3 setCredits:v4];
  }
}

void sub_10042E2A0(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setPayments:v4];
}

void sub_10042E304(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setCredits:v4];
}

void sub_10042E368(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setRewardsEarned:v4];
}

void sub_10042E3CC(id a1, PKCreditAccountBalanceSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountBalanceSummary *)v3 setRewardsRedeemed:v4];
}

void sub_10042E528(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10042F010(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v12 = objc_alloc_init((Class)PKPayLaterAccountProduct);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v12 withProperties:v7 values:a4];

  id v8 = [*(id *)(a1 + 40) database];
  id v9 = +[PayLaterAccountProductDetails payLaterProductDetailsForProductPID:a2 inDatabase:v8];

  [v12 setProductDetails:v9];
  uint64_t v10 = [*(id *)(a1 + 40) database];
  double v11 = +[PayLaterAccountProductEligibleSpend payLaterProductEligibleSpendForProductPID:a2 inDatabase:v10];

  [v12 setEligibleSpend:v11];
  [*(id *)(a1 + 48) addObject:v12];
}

void sub_10042F4C0(id a1, PKPayLaterAccountProduct *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountProduct setProductType:](v4, "setProductType:", [a3 integerValue]);
}

void sub_10042F8D4(id a1)
{
  id v1 = +[NSDate dateWithTimeIntervalSinceNow:3600.0];
  id v2 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v1];

  [v2 setRepeating:1];
  [v2 setRequireNetworkConnectivity:1];
  [v2 setRequireMainsPower:1];
  [v2 setRequireScreenSleep:1];
  [v2 setRepeatInterval:86400.0];
  PDScheduledActivityRegister();
}

void sub_10042FCB4(uint64_t a1, uint64_t a2, id a3)
{
  id v6 = [*(id *)(*(void *)(a1 + 32) + 144) indexingMetadataStatusForType:a2];
  id v7 = [*(id *)(*(void *)(a1 + 32) + 144) indexingMetadataVersionForType:a2];
  if (v6 == (id)1)
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 134217984;
      uint64_t v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reseting metadata status for type %lu", (uint8_t *)&v10, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 144) updateIndexingMetadataStatus:0 version:v7 forType:a2];
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
    *(unsigned char *)(*(void *)(a1 + 32) + 12) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
    id v6 = 0;
  }
  if (v7 != a3)
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 134218240;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      id v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Spotlight type %lu version has changed to %ld.", (uint8_t *)&v10, 0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 144) markAllIndexedContentForReindexingOfType:a2];
    [*(id *)(*(void *)(a1 + 32) + 144) updateIndexingMetadataStatus:v6 version:a3 forType:a2];
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
    *(unsigned char *)(*(void *)(a1 + 32) + 12) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  }
}

uint64_t sub_100430140(uint64_t a1)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v16;
    *(void *)&long long v4 = 138412290;
    long long v14 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        id v9 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 144), "indexerItemWithUniqueIdentifier:", v8, v14, (void)v15);
        int v10 = v9;
        if (v9)
        {
          uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 144);
          __int16 v12 = [v9 domainIdentifier];
          objc_msgSend(v11, "insertOrUpdateIndexerItemWithIdentifier:domainIdentifier:searchableItemData:type:status:error:", v8, v12, 0, objc_msgSend(v10, "type"), 0, 0);
        }
        else
        {
          __int16 v12 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v14;
            uint64_t v20 = v8;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No matching item for searchable item %@", buf, 0xCu);
          }
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v15 objects:v21 count:16];
    }
    while (v5);
  }

  return 1;
}

void sub_10043047C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting index reset", v7, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *(void **)(v3 + 64);
  if (v4)
  {
    [v4 cancel];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  id v5 = *(void **)(v3 + 72);
  if (v5)
  {
    [v5 cancel];
    uint64_t v3 = *(void *)(a1 + 32);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 16));
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v6 + 8))
  {
    *(unsigned char *)(v6 + 10) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
    objc_msgSend(*(id *)(a1 + 32), "_queue_completeReset");
  }
}

void sub_1004305F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reset completed, indexing will restart.", buf, 2u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  id v5 = [*(id *)(*(void *)(a1 + 32) + 80) copy];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 80);
  *(void *)(v6 + 80) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 10) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v13 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v14;
    do
    {
      __int16 v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v8);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v12) + 16))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v12));
        __int16 v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v13 objects:v18 count:16];
    }
    while (v10);
  }

  objc_msgSend(*(id *)(a1 + 32), "_performIndexingOperationsWithOrigin:", 1, (void)v13);
}

void sub_1004308A8(id a1, PDSpotlightIndexerObserver *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDSpotlightIndexerObserver *)v2 indexingStarted];
  }
}

void sub_100430970(id a1, PDSpotlightIndexerObserver *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDSpotlightIndexerObserver *)v2 indexingCompleted];
  }
}

void sub_100430C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_100430C74(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  id v9 = [*(id *)(a1 + 40) unsignedIntegerValue];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100430D54;
  v13[3] = &unk_100730708;
  uint64_t v10 = *(void *)(a1 + 48);
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 _checkConsistencyForItemsOfType:v9 withCompletion:v13];
}

uint64_t sub_100430D54(void *a1, char a2)
{
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) |= a2;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], 0);
}

void sub_100430D80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && os_variant_has_internal_ui())
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Spotlight index is missing items that should be indexed, reporting to ABC", v10, 2u);
    }

    id v9 = objc_alloc_init((Class)PKAutoBugCaptureReporter);
    [v9 reportIssueWithDomain:PKAutoBugCaptureReporterDomainWallet type:@"PDSpotlightIndexer" subtype:@"SpotlightIndexMissingItems" subtypeContext:0 payload:0];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100431190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004311B8(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  id v5 = *(void **)(v4 + 144);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100431278;
  v8[3] = &unk_100734FC8;
  id v9 = v3;
  uint64_t v10 = v4;
  id v6 = (void *)a1[5];
  uint64_t v12 = a1[6];
  id v11 = v6;
  id v7 = v3;
  [v5 performTransactionWithBlock:v8];
}

uint64_t sub_100431278(uint64_t a1)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v20;
    *(void *)&long long v4 = 138412546;
    long long v18 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        id v9 = *(void **)(*(void *)(a1 + 40) + 144);
        uint64_t v10 = objc_msgSend(v8, "uniqueIdentifier", v18, (void)v19);
        LOBYTE(v9) = [v9 updateIndexerItemWithIdentifier:v10 type:*(void *)(a1 + 56) status:2];

        if ((v9 & 1) == 0)
        {
          id v11 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = [v8 uniqueIdentifier];
            uint64_t v13 = *(void *)(a1 + 48);
            *(_DWORD *)buf = v18;
            long long v24 = v12;
            __int16 v25 = 2112;
            uint64_t v26 = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Item %@ of type %@ exists in Spotlight but not local database, marking for deletion", buf, 0x16u);
          }
          id v14 = *(void **)(*(void *)(a1 + 40) + 144);
          id v15 = [v8 uniqueIdentifier];
          uint64_t v16 = [v8 domainIdentifier];
          [v14 insertOrUpdateIndexerItemWithIdentifier:v15 domainIdentifier:v16 searchableItemData:0 type:*(void *)(a1 + 56) status:3 error:0];
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v19 objects:v27 count:16];
    }
    while (v5);
  }

  return 1;
}

void sub_100431488(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 <= (unint64_t)[WeakRetained foundItemCount])
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = v4 - (void)[WeakRetained foundItemCount];
  }
  uint64_t v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = [WeakRetained foundItemCount];
    uint64_t v9 = *(void *)(a1 + 64);
    int v10 = 134218754;
    uint64_t v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    __int16 v14 = 2048;
    id v15 = v8;
    __int16 v16 = 2048;
    uint64_t v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%lu %@ items missing from Spotlight index (%lu indexed, should be %lu or greater)", (uint8_t *)&v10, 0x2Au);
  }

  [*(id *)(*(void *)(a1 + 40) + 144) markAllVerifyingContentForReindexingOfType:*(void *)(a1 + 72)];
  (*(void (**)(void, BOOL))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v5 != 0);
}

void sub_1004318F0(uint64_t a1)
{
  kdebug_trace();
  id v2 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  unint64_t v3 = v2;
  if (!*(void *)(a1 + 48))
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100431DA4;
    v23[3] = &unk_10072E5C0;
    v23[4] = *(void *)(a1 + 32);
    [v2 addOperation:v23];
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100431F2C;
  v22[3] = &unk_10072E5C0;
  v22[4] = *(void *)(a1 + 32);
  [v3 addOperation:v22];
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  char v21 = 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v4 + 11)) {
    goto LABEL_6;
  }
  if ([*(id *)(v4 + 32) willRequireProcessing])
  {
    uint64_t v4 = *(void *)(a1 + 32);
LABEL_6:
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100431FE4;
    v19[3] = &unk_10072E5C0;
    v19[4] = v4;
    [v3 addOperation:v19];
    sub_10043227C();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1004322E8;
    v18[3] = &unk_10072E5C0;
    v18[4] = *(void *)(a1 + 32);
    [v3 addOperation:v18];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100432540;
    v17[3] = &unk_100737CA0;
    v17[4] = *(void *)(a1 + 32);
    v17[5] = v20;
    v17[6] = *(void *)(a1 + 48);
    [v3 addOperation:v17];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100432670;
    v16[3] = &unk_10072E5C0;
    v16[4] = *(void *)(a1 + 32);
    [v3 addOperation:v16];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100432754;
    v15[3] = &unk_10072E5C0;
    v15[4] = *(void *)(a1 + 32);
    [v3 addOperation:v15];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100432838;
    v14[3] = &unk_10072E5C0;
    v14[4] = *(void *)(a1 + 32);
    [v3 addOperation:v14];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10043291C;
    v13[3] = &unk_10072E5C0;
    void v13[4] = *(void *)(a1 + 32);
    [v3 addOperation:v13];
    goto LABEL_8;
  }
  sub_10043227C();
LABEL_8:
  if (!*(void *)(a1 + 48))
  {
    sub_10043227C();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100432A00;
    v12[3] = &unk_10072E5C0;
    v12[4] = *(void *)(a1 + 32);
    [v3 addOperation:v12];
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100432C18;
  v11[3] = &unk_100730D50;
  v11[4] = *(void *)(a1 + 32);
  void v11[5] = v20;
  [v3 addOperation:v11];
  uint64_t v5 = +[NSNull null];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100432DF4;
  v9[3] = &unk_1007405D8;
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = [v3 evaluateWithInput:v5 completion:v9];
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(v7 + 64);
  *(void *)(v7 + 64) = v6;

  _Block_object_dispose(v20, 8);
}

void sub_100431D8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100431DA4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100431E6C;
  v11[3] = &unk_10073FFD8;
  id v12 = v6;
  id v13 = v7;
  v11[4] = v8;
  id v9 = v6;
  id v10 = v7;
  [v8 _checkConsistencyWithCompletion:v11];
}

void sub_100431E6C(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 176);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100431F14;
  v3[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_100431F14(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100431F2C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Deleting duplicate index items", v9, 2u);
  }

  [*(id *)(*(void *)(a1 + 32) + 144) deleteDuplicateIndexerItems];
  v7[2](v7, v6, 0);
}

void sub_100431FE4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(*(void *)(a1 + 32) + 144) spotlightIndexingVersion] == (id)4)
  {
    v7[2](v7, v6, 0);
  }
  else
  {
    [*(id *)(a1 + 32) _indexingStarted];
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Existing indexing version does not match current version, resetting indexing", buf, 2u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10043212C;
    v11[3] = &unk_10073D238;
    v11[4] = v9;
    id v13 = v7;
    id v12 = v6;
    [v10 deleteAllSearchableItemsWithCompletionHandler:v11];
  }
}

void sub_10043212C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deletion completed", buf, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 176);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100432220;
  block[3] = &unk_1007315D8;
  void block[4] = v3;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  dispatch_async(v4, block);
}

uint64_t sub_100432220(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 144) resetIndexedContent];
  [*(id *)(*(void *)(a1 + 32) + 144) updateSpotlightIndexingVersion:4];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

void sub_10043227C()
{
  v0 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "FinHealthCore/FinHealth new framework detected", v1, 2u);
  }
}

void sub_1004322E8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(*(void *)(a1 + 32) + 144) indexingMetadataVersionForType:3] == (id)2)
  {
    v7[2](v7, v6, 0);
  }
  else
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "FinHealth controller needs syncing", buf, 2u);
    }

    uint64_t v9 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100432428;
    v10[3] = &unk_100750EC8;
    v10[4] = v9;
    id v12 = v7;
    id v11 = v6;
    [v9 accessSuggestionsController:v10];
  }
}

void sub_100432428(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v6 transactionsRequireSyncing];
  [v6 sendAllTransactionFeatures];

  [*(id *)(*(void *)(a1 + 32) + 144) updateIndexingMetadataStatus:2 version:2 forType:3];
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 176);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100432528;
  v8[3] = &unk_10072E598;
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  dispatch_async(v7, v8);
  v5[2](v5);
}

uint64_t sub_100432528(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100432540(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100432640;
  v17[3] = &unk_100730708;
  uint64_t v8 = a1[5];
  id v19 = v7;
  uint64_t v20 = v8;
  id v18 = v6;
  id v9 = v6;
  id v10 = v7;
  id v11 = objc_retainBlock(v17);
  id v12 = objc_retainBlock(v11);
  uint64_t v13 = a1[4];
  __int16 v14 = *(void **)(v13 + 96);
  *(void *)(v13 + 96) = v12;

  uint64_t v15 = a1[6];
  if (v15 == 2) {
    uint64_t v16 = 2;
  }
  else {
    uint64_t v16 = v15 == 1;
  }
  [*(id *)(a1[4] + 32) triggerAggregatorWithTriggerOrigin:v16];
}

uint64_t sub_100432640(void *a1, char a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], 0);
}

void sub_100432670(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100432734;
  v11[3] = &unk_1007370E8;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchPassesMetadataWithCompletion:", v11);
}

uint64_t sub_100432734(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2 != 2);
}

void sub_100432754(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100432818;
  v11[3] = &unk_1007370E8;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchTransactionsMetadataWithCompletion:", v11);
}

uint64_t sub_100432818(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2 != 2);
}

void sub_100432838(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1004328FC;
  v11[3] = &unk_1007370E8;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchFinanceKitTransactionsMetadataWithCompletion:", v11);
}

uint64_t sub_1004328FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2 != 2);
}

void sub_10043291C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1004329E0;
  v11[3] = &unk_1007370E8;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_fetchFinanceKitAccountsMetadataWithCompletion:", v11);
}

uint64_t sub_1004329E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2 != 2);
}

void sub_100432A00(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100432B38;
  v15[3] = &unk_10072E598;
  id v7 = a4;
  id v17 = v7;
  id v8 = v6;
  id v16 = v8;
  id v9 = objc_retainBlock(v15);
  id v10 = objc_retainBlock(v9);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 104);
  *(void *)(v11 + 104) = v10;

  id v13 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Fetching updated transaction features", v14, 2u);
  }

  [*(id *)(a1 + 32) accessSuggestionsController:&stru_100750F08];
}

uint64_t sub_100432B38(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetched updated transaction features", v4, 2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100432BBC(id a1, FHSearchSuggestionController *a2, id a3)
{
  id v4 = (void (**)(void))a3;
  [(FHSearchSuggestionController *)a2 reevaluateTransactionFeatures];
  v4[2]();
}

void sub_100432C18(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
    *(unsigned char *)(*(void *)(a1 + 32) + 11) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  }
  id v10 = *(void **)(a1 + 32);
  if (!v10[6])
  {
    id v11 = [objc_alloc((Class)PKServicePaymentTransactionImageGenerator) initWithPassKitServicesXPCService:*(void *)(*(void *)(a1 + 32) + 56)];
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 48);
    *(void *)(v12 + 48) = v11;

    id v10 = *(void **)(a1 + 32);
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100432D60;
  v16[3] = &unk_1007315D8;
  id v17 = v8;
  id v18 = v9;
  v16[4] = v10;
  id v14 = v8;
  id v15 = v9;
  objc_msgSend(v10, "_queue_processAllIndexingBatchesWithCompletion:", v16);
}

uint64_t sub_100432D60(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Spotlight indexing operation completed.", v6, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = 0;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100432DF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = 0;

  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = [v5 isCanceled];
    CFStringRef v10 = @"NO";
    if (v9) {
      CFStringRef v10 = @"YES";
    }
    int v15 = 138412290;
    CFStringRef v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overall indexing operation completed, was canceled: %@", (uint8_t *)&v15, 0xCu);
  }

  kdebug_trace();
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(unsigned __int8 *)(v11 + 10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 16));
  [*(id *)(a1 + 32) _indexingCompleted];
  if (v12)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reset was pending, resetting now", (uint8_t *)&v15, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_completeReset");
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
}

uint64_t sub_100432F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100432F94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1004332B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 136)) {
    CFStringRef v5 = @"YES";
  }
  else {
    CFStringRef v5 = @"NO";
  }
  CFStringRef v44 = v5;
  if (*(unsigned char *)(a1 + 137)) {
    CFStringRef v6 = @"YES";
  }
  else {
    CFStringRef v6 = @"NO";
  }
  CFStringRef v42 = v6;
  v50 = [*(id *)(a1 + 32) objectForKeyedSubscript:&off_10078B9A0];
  id v39 = [v50 unsignedIntegerValue];
  v49 = [*(id *)(a1 + 32) objectForKeyedSubscript:&off_10078B988];
  id v37 = [v49 unsignedIntegerValue];
  v48 = [*(id *)(a1 + 32) objectForKeyedSubscript:&off_10078B9D0];
  id v35 = [v48 unsignedIntegerValue];
  v47 = [*(id *)(a1 + 32) objectForKeyedSubscript:&off_10078B9E8];
  id v33 = [v47 unsignedIntegerValue];
  v46 = [*(id *)(a1 + 40) objectForKeyedSubscript:&off_10078B9A0];
  id v32 = [v46 unsignedIntegerValue];
  v40 = [*(id *)(a1 + 40) objectForKeyedSubscript:&off_10078B988];
  id v30 = [v40 unsignedIntegerValue];
  v38 = [*(id *)(a1 + 40) objectForKeyedSubscript:&off_10078B9D0];
  id v28 = [v38 unsignedIntegerValue];
  v36 = [*(id *)(a1 + 40) objectForKeyedSubscript:&off_10078B9E8];
  id v26 = [v36 unsignedIntegerValue];
  v34 = [*(id *)(a1 + 48) objectForKeyedSubscript:&off_10078B9A0];
  id v24 = [v34 unsignedIntegerValue];
  v31 = [*(id *)(a1 + 48) objectForKeyedSubscript:&off_10078B988];
  id v22 = [v31 unsignedIntegerValue];
  v29 = [*(id *)(a1 + 48) objectForKeyedSubscript:&off_10078B9D0];
  id v21 = [v29 unsignedIntegerValue];
  long long v27 = [*(id *)(a1 + 48) objectForKeyedSubscript:&off_10078B9E8];
  id v19 = [v27 unsignedIntegerValue];
  __int16 v25 = [*(id *)(a1 + 56) objectForKeyedSubscript:&off_10078B9A0];
  id v18 = [v25 unsignedIntegerValue];
  long long v23 = [*(id *)(a1 + 56) objectForKeyedSubscript:&off_10078B988];
  id v17 = [v23 unsignedIntegerValue];
  uint64_t v20 = [*(id *)(a1 + 56) objectForKeyedSubscript:&off_10078B9D0];
  id v16 = [v20 unsignedIntegerValue];
  id v7 = [*(id *)(a1 + 56) objectForKeyedSubscript:&off_10078B9E8];
  id v8 = [v7 unsignedIntegerValue];
  unsigned int v9 = [*(id *)(a1 + 64) objectForKeyedSubscript:&off_10078B9A0];
  id v10 = [v9 unsignedIntegerValue];
  uint64_t v11 = [*(id *)(a1 + 64) objectForKeyedSubscript:&off_10078B988];
  id v12 = [v11 unsignedIntegerValue];
  uint64_t v13 = [*(id *)(a1 + 64) objectForKeyedSubscript:&off_10078B9D0];
  id v14 = [v13 unsignedIntegerValue];
  int v15 = [*(id *)(a1 + 64) objectForKeyedSubscript:&off_10078B9E8];
  +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Fetching metadata: %@.\nIndexing: %@.\nNeeds Indexing / Indexing / Indexed / Count in Spotlight\nPasses: %lu / %lu / %lu (SP:%lu) / %lu.\nCard Numbers:%lu / %lu / %lu (SP:%lu) / %lu.\nTransactions:%lu / %lu / %lu (SP:%lu) / %lu. \nFinanceKit Transactions:%lu / %lu / %lu / %lu. \nFinanceKit Accounts:%lu / %lu / %lu / %lu. \nRegions per type: %lu / %lu / %lu / %lu / %lu.\nRegions not localized: %lu\nTransactions missing regions: %lu", v44, v42, v39, v37, v35, a2, v33, v32, v30, v28, a4, v26, v24, v22, v21, a3,
    v19,
    v18,
    v17,
    v16,
    v8,
    v10,
    v12,
    v14,
    [v15 unsignedIntegerValue],
    *(void *)(a1 + 80),
    *(void *)(a1 + 88),
    *(void *)(a1 + 96),
    *(void *)(a1 + 104),
    *(void *)(a1 + 112),
    *(void *)(a1 + 120),
  v51 = *(void *)(a1 + 128));

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_100433974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1004339B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100433A68;
  v9[3] = &unk_100750FA8;
  CFStringRef v6 = *(void **)(a1 + 32);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v5;
  uint64_t v13 = a3;
  long long v7 = *(_OWORD *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v12 = v7;
  id v8 = v5;
  [v6 addOperation:v9];
}

void sub_100433A68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  unsigned int v9 = +[NSString stringWithFormat:@"contentType == %@", *(void *)(a1 + 40)];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100433B70;
  v13[3] = &unk_100750F80;
  uint64_t v18 = *(void *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 64);
  long long v16 = *(_OWORD *)(a1 + 48);
  long long v17 = v10;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v8 _performQueryWithQueryString:v9 completion:v13];
}

void sub_100433B70(void *a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = a1[10];
  if (v7 == 4)
  {
    uint64_t v8 = a1[8];
  }
  else if (v7 == 1)
  {
    uint64_t v8 = a1[7];
  }
  else
  {
    if (v7) {
      goto LABEL_8;
    }
    uint64_t v8 = a1[6];
  }
  *(void *)(*(void *)(v8 + 8) + 24) = a2;
LABEL_8:
  id v9 = v6;
  if (v6) {
    objc_storeStrong((id *)(*(void *)(a1[9] + 8) + 40), a3);
  }
  (*(void (**)(void))(a1[5] + 16))();
}

uint64_t sub_100433C24(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1[4] + 16))(a1[4], *(void *)(*(void *)(a1[5] + 8) + 24), *(void *)(*(void *)(a1[6] + 8) + 24), *(void *)(*(void *)(a1[7] + 8) + 24), *(void *)(*(void *)(a1[8] + 8) + 40));
}

void sub_100433E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100433E30(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id, id))(v5 + 16))(v5, [WeakRetained foundItemCount], v6);
  }
}

void sub_100433F58(id a1)
{
  uint64_t v1 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Spotlight reset completed after region reset.", v2, 2u);
  }
}

void sub_100434194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004341C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating passes metadata", buf, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    [*(id *)(*(void *)(a1 + 32) + 144) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) version:*(void *)(a1 + 56) forType:0];
  }
  if (*(unsigned char *)(a1 + 73))
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating pass details metadata", buf, 2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    [*(id *)(*(void *)(a1 + 32) + 144) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) version:*(void *)(a1 + 64) forType:4];
  }
  id v4 = [*(id *)(*(void *)(a1 + 32) + 144) passUniqueIDs];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v19;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        if (*(unsigned char *)(a1 + 72))
        {
          long long v10 = *(void **)(*(void *)(a1 + 32) + 144);
          uint64_t v11 = +[PKCoreSpotlightUtilities spotlightIdentifierForPassUniqueIdentifier:*(void *)(*((void *)&v18 + 1) + 8 * i)];
          [v10 insertOrUpdateIndexerItemWithIdentifier:v11 domainIdentifier:0 searchableItemData:0 type:0 status:0 error:0];
        }
        if (*(unsigned char *)(a1 + 73))
        {
          id v12 = [*(id *)(*(void *)(a1 + 32) + 144) passWithUniqueIdentifier:v9];
          if ([*(id *)(a1 + 32) _supportsCardInformationItemForPass:v12])
          {
            uint64_t v13 = *(void **)(*(void *)(a1 + 32) + 144);
            id v14 = +[PKCoreSpotlightUtilities spotlightIdentifierForCardInformationUniqueIdentifier:v9];
            [v13 insertOrUpdateIndexerItemWithIdentifier:v14 domainIdentifier:0 searchableItemData:0 type:4 status:0 error:0];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
    }
    while (v6);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 2;
    [*(id *)(*(void *)(a1 + 32) + 144) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) version:*(void *)(a1 + 56) forType:0];
    id v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Passes metadata updated", buf, 2u);
    }
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 2;
    [*(id *)(*(void *)(a1 + 32) + 144) updateIndexingMetadataStatus:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) version:*(void *)(a1 + 64) forType:4];
    long long v16 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Pass details metadata updated", buf, 2u);
    }
  }
  return 1;
}

void sub_100434744(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10043475C(void *a1, void *a2, void *a3, uint64_t a4, char a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a6;
  id v13 = [v10 count];
  id v14 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v23 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Transactions metadata batch of %lu received", buf, 0xCu);
  }

  if (v13 && v13 == [v11 count])
  {
    uint64_t v15 = a1[4];
    long long v16 = *(void **)(v15 + 144);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100434990;
    v18[3] = &unk_100734FC8;
    id v21 = v13;
    v18[4] = v15;
    id v19 = v10;
    id v20 = v11;
    [v16 performTransactionWithBlock:v18];
  }
  if (a5)
  {
    if (v12) {
      v12[2](v12);
    }
  }
  else
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Transactions metadata updated", buf, 2u);
    }

    *(void *)(*(void *)(a1[6] + 8) + 24) = 2;
    [*(id *)(a1[4] + 144) updateIndexingMetadataStatus:*(void *)(*(void *)(a1[6] + 8) + 24) version:a1[7] forType:1];
    uint64_t v17 = a1[5];
    if (v17) {
      (*(void (**)(uint64_t, void))(v17 + 16))(v17, *(void *)(*(void *)(a1[6] + 8) + 24));
    }
  }
}

uint64_t sub_100434990(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 144);
      id v4 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v2];
      id v5 = +[PKCoreSpotlightUtilities spotlightIdentifierForTransactionIdentifier:v4];
      id v6 = [*(id *)(a1 + 48) objectAtIndexedSubscript:v2];
      [v3 insertOrUpdateIndexerItemWithIdentifier:v5 domainIdentifier:v6 searchableItemData:0 type:1 status:0 error:0];

      ++v2;
    }
    while (v2 < *(void *)(a1 + 56));
  }
  return 1;
}

void sub_1004352A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v30 = a4;
  id v10 = [*(id *)(a1 + 32) searchableItemData];
  if (v10) {
    id v11 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v10 error:0];
  }
  else {
    id v11 = 0;
  }
  id v41 = 0;
  id v12 = [v11 decodeTopLevelObjectOfClass:objc_opt_class() forKey:NSKeyedArchiveRootObjectKey error:&v41];
  id v13 = v41;
  if (v13
    || ([v12 uniqueIdentifier],
        id v24 = objc_claimAutoreleasedReturnValue(),
        id v25 = [v24 length],
        v24,
        !v25))
  {

    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [*(id *)(a1 + 32) uniqueIdentifier];
      *(_DWORD *)buf = 138412546;
      v43 = v15;
      __int16 v44 = 2112;
      id v45 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Error decoding searchable item from indexer item %@: %@", buf, 0x16u);
    }
  }
  else if (v12)
  {
    [*(id *)(a1 + 48) addObject:v12];
    [*(id *)(a1 + 56) addObject:*(void *)(a1 + 32)];
    id v26 = *(void **)(a1 + 64);
    long long v27 = [v12 uniqueIdentifier];
    [v26 addObject:v27];

    v30[2](v30, v8, 0);
    goto LABEL_23;
  }
  id v29 = v7;
  id v16 = [*(id *)(a1 + 32) type];
  uint64_t v17 = [*(id *)(a1 + 32) uniqueIdentifier];
  if (v16 == (id)4) {
    +[PKCoreSpotlightUtilities passUniqueIdentifierFromCardInformationSpotlightIdentifier:v17];
  }
  else {
  id v12 = +[PKCoreSpotlightUtilities passUniqueIdentifierFromSpotlightIdentifier:v17];
  }

  long long v18 = [*(id *)(*(void *)(a1 + 40) + 144) passWithUniqueIdentifier:v12];
  if (v18)
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1004356D4;
    v31[3] = &unk_1007510B8;
    id v32 = *(id *)(a1 + 48);
    id v19 = *(id *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 32);
    id v33 = v19;
    uint64_t v34 = v20;
    id v35 = *(id *)(a1 + 64);
    id v21 = v12;
    uint64_t v22 = *(void *)(a1 + 40);
    id v36 = v21;
    uint64_t v37 = v22;
    id v40 = v16;
    id v39 = v30;
    id v38 = v8;
    id v23 = objc_retainBlock(v31);
    if (v16 == (id)4) {
      +[PKCoreSpotlightUtilities searchableItemForCardNumberFromPass:v18 completion:v23];
    }
    else {
      +[PKCoreSpotlightUtilities searchableItemForPass:v18 passKitServicesXPCService:*(void *)(*(void *)(a1 + 40) + 56) completion:v23];
    }
  }
  else
  {
    id v28 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v43 = v12;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Pass %@ no longer exists, deleting item", buf, 0xCu);
    }

    [*(id *)(a1 + 32) deleteFromDatabase];
    v30[2](v30, v8, 0);
  }

  id v7 = v29;
LABEL_23:
}

void sub_1004356D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) addObject:v3];
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 48)];
    id v4 = *(void **)(a1 + 56);
    id v5 = [v3 uniqueIdentifier];
    [v4 addObject:v5];
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      int v12 = 138412290;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unable to acquire searchable item for pass id %@", (uint8_t *)&v12, 0xCu);
    }

    id v8 = +[NSError errorWithDomain:@"PDSpotlightErrorDomain" code:0 userInfo:0];
    uint64_t v9 = *(void **)(*(void *)(a1 + 72) + 144);
    id v10 = [*(id *)(a1 + 48) uniqueIdentifier];
    id v11 = [*(id *)(a1 + 48) domainIdentifier];
    objc_msgSend(v9, "insertOrUpdateIndexerItemWithIdentifier:domainIdentifier:searchableItemData:type:status:error:", v10, v11, 0, *(void *)(a1 + 96), objc_msgSend(*(id *)(a1 + 48), "status"), v8);
  }
  (*(void (**)(void))(*(void *)(a1 + 88) + 16))();
}

void sub_10043587C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [*(id *)(a1 + 32) identifier];
  uint64_t v9 = [*(id *)(a1 + 40) objectForKey:v8];
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = [v10 identifier];
  if (!v11) {
    goto LABEL_34;
  }
  int v12 = (void *)v11;
  unsigned int v13 = [v10 hasNotificationServiceData];

  if (!v13) {
    goto LABEL_34;
  }
  unint64_t v14 = (unint64_t)[v10 transactionType];
  if (v14 > 0xE) {
    goto LABEL_34;
  }
  if (((1 << v14) & 0x6CE3) == 0)
  {
    if (v14 == 3)
    {
      id v41 = [v10 peerPaymentCounterpartHandle];

      if (v41) {
        goto LABEL_10;
      }
      goto LABEL_35;
    }
LABEL_34:

    goto LABEL_35;
  }
  id v15 = [v10 transactionStatus];
  if ([v10 hasBackingData])
  {
    if (v15 == (id)8)
    {
      uint64_t v16 = [v10 amount];
      if (!v16) {
        goto LABEL_34;
      }
      uint64_t v17 = (void *)v16;
      long long v18 = [v10 amount];
      +[NSDecimalNumber zero];
      v20 = id v19 = v9;
      unsigned __int8 v21 = [v18 isEqualToNumber:v20];

      uint64_t v9 = v19;
      if (v21) {
        goto LABEL_34;
      }
    }
  }
  id v22 = [v10 suppressBehavior];

  if (v22 != (id)1)
  {
LABEL_10:
    id v23 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v24 = [*(id *)(a1 + 32) associatedReceiptUniqueID];
    v56 = (void *)v24;
    v57 = v9;
    if (v24)
    {
      id v25 = [*(id *)(*(void *)(a1 + 48) + 144) transactionReceiptWithUniqueID:v24];
      if (v25)
      {
        [*(id *)(*(void *)(a1 + 48) + 152) registerDatabaseTransactionReceipt:v25];
        if ([v25 state])
        {
          v52 = v8;
          id v54 = v6;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          v51 = v25;
          id v26 = [v25 lineItems];
          id v27 = [v26 countByEnumeratingWithState:&v68 objects:v74 count:16];
          if (v27)
          {
            id v28 = v27;
            uint64_t v29 = *(void *)v69;
            do
            {
              for (i = 0; i != v28; i = (char *)i + 1)
              {
                if (*(void *)v69 != v29) {
                  objc_enumerationMutation(v26);
                }
                v31 = *(void **)(*((void *)&v68 + 1) + 8 * i);
                id v32 = [v31 title];
                if ([v32 length]) {
                  [v23 addObject:v32];
                }
                id v33 = [v31 subtitle];
                if ([v33 length]) {
                  [v23 addObject:v33];
                }
                uint64_t v34 = [v31 secondarySubtitle];
                if ([v34 length]) {
                  [v23 addObject:v34];
                }
              }
              id v28 = [v26 countByEnumeratingWithState:&v68 objects:v74 count:16];
            }
            while (v28);
          }

          id v8 = v52;
          id v6 = v54;
          id v25 = v51;
        }
      }
    }
    id v35 = [*(id *)(*(void *)(a1 + 48) + 144) passUniqueIdentifierForTransactionWithIdentifier:v8];
    if (!v35)
    {
      id v36 = *(void **)(*(void *)(a1 + 48) + 144);
      uint64_t v37 = [*(id *)(a1 + 32) transactionSourceIdentifier];
      id v38 = [v36 transactionSourceTypeForTransactionSourceIdentifier:v37];

      if (v38 == (id)2)
      {
        id v39 = *(void **)(*(void *)(a1 + 48) + 144);
        id v40 = [*(id *)(a1 + 32) accountIdentifier];
        id v35 = [v39 passUniqueIdentifierWithAssociatedAccountIdentifier:v40];
      }
      else
      {
        id v35 = 0;
      }
    }
    v55 = [*(id *)(a1 + 56) objectForKey:v8];
    v53 = [*(id *)(a1 + 64) objectForKey:v8];
    uint64_t v50 = *(void *)(a1 + 32);
    id v43 = [v23 copy];
    uint64_t v44 = *(void *)(a1 + 48);
    uint64_t v49 = *(void *)(v44 + 48);
    uint64_t v45 = *(void *)(v44 + 112);
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_100435E4C;
    v58[3] = &unk_1007510E0;
    id v59 = *(id *)(a1 + 72);
    id v60 = *(id *)(a1 + 80);
    uint64_t v9 = v57;
    id v61 = v57;
    id v62 = *(id *)(a1 + 88);
    id v46 = v8;
    uint64_t v47 = *(void *)(a1 + 48);
    id v63 = v46;
    uint64_t v64 = v47;
    id v65 = v35;
    id v67 = v7;
    id v66 = v6;
    id v48 = v35;
    +[PKCoreSpotlightUtilities searchableItemForTransaction:v50 passUniqueIdentifier:v48 regions:v55 tags:v53 keywords:v43 imageGenerator:v49 contactResolver:v45 completion:v58];

    goto LABEL_41;
  }
LABEL_35:
  if (v9)
  {
    [*(id *)(a1 + 96) addObject:v9];
  }
  else
  {
    CFStringRef v42 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v73 = v8;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Could not find item for transaction %@", buf, 0xCu);
    }
  }
  (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
LABEL_41:
}

void sub_100435E4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) addObject:v3];
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 48)];
    id v4 = *(void **)(a1 + 56);
    id v5 = [v3 uniqueIdentifier];
    [v4 addObject:v5];
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unable to acquire searchable item for transaction id %@", (uint8_t *)&v9, 0xCu);
    }

    id v8 = +[NSError errorWithDomain:@"PDSpotlightErrorDomain" code:0 userInfo:0];
    objc_msgSend(*(id *)(*(void *)(a1 + 72) + 144), "insertOrUpdateIndexerItemWithIdentifier:domainIdentifier:searchableItemData:type:status:error:", *(void *)(a1 + 64), *(void *)(a1 + 80), 0, objc_msgSend(*(id *)(a1 + 48), "type"), objc_msgSend(*(id *)(a1 + 48), "status"), v8);
  }
  (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
}

void sub_100435FD8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 176);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100436144;
  block[3] = &unk_100751180;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v19 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 32);
  id v20 = v9;
  uint64_t v21 = v10;
  id v22 = *(id *)(a1 + 88);
  id v11 = *(id *)(a1 + 96);
  id v24 = v6;
  id v25 = v7;
  id v23 = v11;
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v8, block);
}

void sub_100436144(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  [v2 addObjectsFromArray:*(void *)(a1 + 32)];
  id v3 = [*(id *)(a1 + 40) allValues];
  [v2 addObjectsFromArray:v3];

  id v4 = [*(id *)(a1 + 48) allValues];
  [v2 addObjectsFromArray:v4];

  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v2 count];
    id v7 = [*(id *)(a1 + 32) count];
    int64_t v8 = v7 - (unsigned char *)[*(id *)(a1 + 56) count];
    id v9 = [*(id *)(a1 + 56) count];
    id v10 = [*(id *)(a1 + 64) count];
    id v11 = [*(id *)(a1 + 72) count];
    *(_DWORD *)buf = 134219008;
    id v27 = v6;
    __int16 v28 = 2048;
    int64_t v29 = v8;
    __int16 v30 = 2048;
    id v31 = v9;
    __int16 v32 = 2048;
    id v33 = v10;
    __int16 v34 = 2048;
    id v35 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Indexing %lu items (%lu transactions/ %lu passes/ %lu FinanceKit Transactions/ %lu FinanceKit Accounts)", buf, 0x34u);
  }

  uint64_t v12 = *(void *)(a1 + 80);
  id v13 = *(void **)(v12 + 144);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1004363F0;
  v23[3] = &unk_100738A00;
  id v24 = v2;
  uint64_t v25 = v12;
  id v14 = v2;
  [v13 performTransactionWithBlock:v23];
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  id v17 = *(void **)(v15 + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100436548;
  v18[3] = &unk_100751158;
  v18[4] = v15;
  id v19 = *(id *)(a1 + 32);
  id v20 = *(id *)(a1 + 96);
  id v22 = *(id *)(a1 + 112);
  id v21 = *(id *)(a1 + 104);
  [v17 indexSearchableItems:v16 completionHandler:v18];
}

uint64_t sub_1004363F0(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        int64_t v8 = *(void **)(*(void *)(a1 + 40) + 144);
        id v9 = objc_msgSend(v7, "uniqueIdentifier", (void)v12);
        id v10 = [v7 domainIdentifier];
        objc_msgSend(v8, "insertOrUpdateIndexerItemWithIdentifier:domainIdentifier:searchableItemData:type:status:error:", v9, v10, 0, objc_msgSend(v7, "type"), 1, 0);
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  return 1;
}

void sub_100436548(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 176);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100436640;
  v7[3] = &unk_10073B6B0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100436640(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v16 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Could not index spotlight items with error %@", buf, 0xCu);
    }

    uint64_t v4 = 2 * (*(void *)(a1 + 32) == 0);
  }
  else
  {
    uint64_t v4 = 2;
  }
  uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 144);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100436820;
  v11[3] = &unk_100734FC8;
  id v12 = *(id *)(a1 + 48);
  uint64_t v14 = v4;
  int8x16_t v8 = *(int8x16_t *)(a1 + 32);
  id v6 = (id)v8.i64[0];
  int8x16_t v13 = vextq_s8(v8, v8, 8uLL);
  [v5 performTransactionWithBlock:v11];
  id v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100436974;
  v9[3] = &unk_100751130;
  id v10 = *(id *)(a1 + 56);
  [v7 _accessObserversWithHandler:v9];
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

uint64_t sub_100436820(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        int8x16_t v8 = *(void **)(*(void *)(a1 + 40) + 144);
        uint64_t v9 = objc_msgSend(v7, "uniqueIdentifier", (void)v12);
        id v10 = [v7 domainIdentifier];
        objc_msgSend(v8, "insertOrUpdateIndexerItemWithIdentifier:domainIdentifier:searchableItemData:type:status:error:", v9, v10, 0, objc_msgSend(v7, "type"), *(void *)(a1 + 56), *(void *)(a1 + 48));
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  return 1;
}

void sub_100436974(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = [*(id *)(a1 + 32) copy];
    [v4 indexedItemsWithIdentifiers:v3];
  }
}

void sub_1004369E4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100436AB0;
  v12[3] = &unk_1007315D8;
  id v13 = v6;
  id v14 = v7;
  v12[4] = v9;
  id v10 = v6;
  id v11 = v7;
  objc_msgSend(v9, "_queue_processItemsToDelete:completion:", v8, v12);
}

uint64_t sub_100436AB0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), 0);
}

void sub_100436AC8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = [v7 isCanceled];
    CFStringRef v10 = @"NO";
    if (v9) {
      CFStringRef v10 = @"YES";
    }
    int v14 = 138412290;
    CFStringRef v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Batch completed, canceled: %@", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 32);
  long long v12 = *(void **)(v11 + 72);
  *(void *)(v11 + 72) = 0;

  if ([v7 isCanceled])
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      (*(void (**)(void))(v13 + 16))();
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_queue_processAllIndexingBatchesWithCompletion:", *(void *)(a1 + 40));
  }
}

void sub_100436E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100436EC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 176);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100436F90;
  block[3] = &unk_10073F2A0;
  id v10 = v3;
  uint64_t v11 = v4;
  long long v8 = *(_OWORD *)(a1 + 40);
  id v6 = (id)v8;
  long long v12 = v8;
  id v7 = v3;
  dispatch_async(v5, block);
}

void sub_100436F90(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Could not delete spotlight items with error %@", buf, 0xCu);
    }

    uint64_t v4 = (void *)a1[4];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void **)(a1[5] + 144);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1004370DC;
  v9[3] = &unk_10074FAE8;
  uint64_t v12 = a1[7];
  id v6 = v4;
  uint64_t v7 = a1[5];
  id v10 = v6;
  uint64_t v11 = v7;
  [v5 performTransactionWithBlock:v9];
  uint64_t v8 = a1[6];
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

uint64_t sub_1004370DC(void *a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(*(void *)(a1[6] + 8) + 40);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v6);
        if (a1[4])
        {
          uint64_t v8 = *(void **)(a1[5] + 144);
          unsigned int v9 = [*(id *)(*((void *)&v12 + 1) + 8 * (void)v6) uniqueIdentifier];
          id v10 = [v7 domainIdentifier];
          objc_msgSend(v8, "insertOrUpdateIndexerItemWithIdentifier:domainIdentifier:searchableItemData:type:status:error:", v9, v10, 0, objc_msgSend(v7, "type"), 3, a1[4]);
        }
        else
        {
          objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v6), "deleteFromDatabase", (void)v12);
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  return 1;
}

id sub_1004374B4(id a1, PKPaymentTransaction *a2)
{
  return [(PKPaymentTransaction *)a2 identifier];
}

void sub_1004377A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(v2 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100437868;
  v5[3] = &unk_100751210;
  v5[4] = v2;
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  +[PKCoreSpotlightUtilities searchableItemForPass:v3 passKitServicesXPCService:v4 completion:v5];
}

void sub_100437868(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  id v11 = 0;
  uint64_t v4 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v11];
  id v5 = v11;
  if (!v5)
  {
LABEL_7:
    uint64_t v8 = *(void *)(a1 + 40);
    unsigned int v9 = *(void **)(*(void *)(a1 + 32) + 144);
    id v10 = [*(id *)(a1 + 48) groupingID];
    [v9 insertOrUpdateIndexerItemWithIdentifier:v8 domainIdentifier:v10 searchableItemData:v4 type:0 status:0 error:0];

    [*(id *)(a1 + 32) _performIndexingOperationsWithOrigin:1];
    goto LABEL_8;
  }
  id v6 = v5;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v13 = v3;
    __int16 v14 = 2114;
    long long v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Archiving error for item %@, error: %{public}@", buf, 0x16u);
  }

LABEL_8:
}

void sub_1004379C8(uint64_t *a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100437A84;
  v4[3] = &unk_100751210;
  uint64_t v2 = a1[4];
  id v3 = (void *)a1[6];
  v4[4] = a1[5];
  id v5 = v3;
  id v6 = (id)a1[4];
  +[PKCoreSpotlightUtilities searchableItemForCardNumberFromPass:v2 completion:v4];
}

void sub_100437A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  id v11 = 0;
  uint64_t v4 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v11];
  id v5 = v11;
  if (!v5)
  {
LABEL_7:
    uint64_t v8 = *(void *)(a1 + 40);
    unsigned int v9 = *(void **)(*(void *)(a1 + 32) + 144);
    id v10 = [*(id *)(a1 + 48) groupingID];
    [v9 insertOrUpdateIndexerItemWithIdentifier:v8 domainIdentifier:v10 searchableItemData:v4 type:4 status:0 error:0];

    [*(id *)(a1 + 32) _performIndexingOperationsWithOrigin:1];
    goto LABEL_8;
  }
  id v6 = v5;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v13 = v3;
    __int16 v14 = 2114;
    long long v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Archiving error for item %@, error: %{public}@", buf, 0x16u);
  }

LABEL_8:
}

void sub_100438010(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1004380F4;
    v8[3] = &unk_10073C000;
    uint64_t v7 = *(void *)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    id v11 = v6;
    [a2 deleteDataForPassesWithSourceIdentifiers:v7 completion:v8];
  }
  else
  {
    (*((void (**)(id))v5 + 2))(v5);
  }
}

void sub_1004380F4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = [*(id *)(a1 + 32) uniqueID];
    uint64_t v8 = *(void *)(a1 + 40);
    v9[0] = 67109890;
    v9[1] = a2;
    __int16 v10 = 2112;
    id v11 = v5;
    __int16 v12 = 2112;
    id v13 = v7;
    __int16 v14 = 2112;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FinHealth deleteDataForPassesWithSourceIdentifiers completed with status: %d, error %@, passUniqueID: %@, transactionSourceIdentifiers: %@", (uint8_t *)v9, 0x26u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10043841C(uint64_t a1, void *a2, void (**a3)(void))
{
  if (a2)
  {
    uint64_t v4 = a3;
    [a2 reevaluateTransactionFeatures];
  }
  else
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = a3;
    [v5 triggerIndexing];
  }
  a3[2]();
}

void sub_1004385B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100438688;
    v8[3] = &unk_10073D508;
    id v9 = v7;
    id v10 = v6;
    [a2 deleteTransactionByTransactionIdentifier:v9 completion:v8];
  }
  else
  {
    (*((void (**)(id))v5 + 2))(v5);
  }
}

void sub_100438688(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412546;
      uint64_t v7 = v5;
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Could not report deleted transaction %@ to suggestions controller with error %@", (uint8_t *)&v6, 0x16u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id *sub_100438968(id *result)
{
  if (!*((unsigned char *)result + 40)) {
    return (id *)[result[4] _performIndexingOperationsWithOrigin:1];
  }
  return result;
}

void sub_100438980(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    __int16 v8 = off_100807260(*(void **)(a1 + 32));
    uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100438AB0;
    v12[3] = &unk_100751288;
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v13 = v10;
    uint64_t v14 = v11;
    id v15 = v7;
    id v16 = *(id *)(a1 + 48);
    [v5 transactionUpdated:v8 deferFeatureComputation:v9 completion:v12];
  }
  else
  {
    (*((void (**)(id))v6 + 2))(v6);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100438AB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = [*(id *)(a1 + 32) identifier];
      int v9 = 138412546;
      id v10 = v8;
      __int16 v11 = 2112;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not report transaction %@ to suggestions controller with error %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    [*(id *)(a1 + 40) _parseFeatureResponse:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

id *sub_100438CD4(id *result)
{
  if (!*((unsigned char *)result + 40)) {
    return (id *)[result[4] _performIndexingOperationsWithOrigin:1];
  }
  return result;
}

id *sub_100438DE8(id *result)
{
  if (!*((unsigned char *)result + 40)) {
    return (id *)[result[4] _performIndexingOperationsWithOrigin:1];
  }
  return result;
}

void sub_100439294(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(*(void *)(a1 + 32) + 144);
    id v7 = a2;
    __int16 v8 = [v6 dbPeerPaymentAccount];
    int v9 = [v8 currentBalance];

    id v10 = [v9 amount];
    __int16 v11 = [v9 currency];
    id v12 = *(void **)(*(void *)(a1 + 32) + 144);
    id v13 = [v12 dbPeerPaymentAccount];
    uint64_t v14 = [v13 associatedPassUniqueID];
    id v15 = [v12 transactionSourceIdentifiersForPassUniqueIdentifier:v14];
    id v16 = [v15 allObjects];
    id v17 = [v16 firstObject];

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100439458;
    v21[3] = &unk_100730550;
    id v22 = v10;
    id v23 = v11;
    id v24 = v17;
    id v25 = v5;
    id v18 = v17;
    id v19 = v11;
    id v20 = v10;
    [v7 updatePeerPaymentAccountBalanceWithTransactionSourceId:v18 amount:v20 currencyCode:v19 completion:v21];
  }
}

void sub_100439458(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v16 = 138412290;
      id v17 = v4;
      id v7 = "Could not send current peer payment balance to Fin Health with error %@";
      __int16 v8 = v5;
      uint32_t v9 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v16, v9);
    }
  }
  else if (v6)
  {
    id v10 = (void *)a1[4];
    uint64_t v11 = a1[5];
    uint64_t v12 = a1[6];
    int v16 = 138412802;
    id v17 = v10;
    __int16 v18 = 2112;
    uint64_t v19 = v11;
    __int16 v20 = 2112;
    uint64_t v21 = v12;
    id v7 = "Peer Payment account balance of %@ %@ for transactionSourceId=%@ sent to Fin Health";
    __int16 v8 = v5;
    uint32_t v9 = 32;
    goto LABEL_6;
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(a1[7] + 16))(a1[7], v13, v14, v15);
}

id sub_1004397A4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 120);
  if (v3)
  {
    *(void *)(v2 + 120) = v3 - 1;
  }
  else
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempted over-decrement of suggestions controller access counter", v6, 2u);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  return [*(id *)(a1 + 32) _releaseSuggestionsControllerIfNecessary];
}

void sub_100439904(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  BOOL v6 = a3;
  if (v5)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100439A38;
    v10[3] = &unk_1007512D8;
    id v11 = *(id *)(a1 + 32);
    uint64_t v12 = v6;
    [v5 deleteAllData:v10];
  }
  else
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint32_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not invoke FinHealth deleteAllData: controller was nil", v9, 2u);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(void))(v8 + 16))();
    }
    v6[2](v6);
  }
}

void sub_100439A38(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109378;
    v8[1] = a2;
    __int16 v9 = 2112;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FinHealth deleteAllData completed with status: %d, error: %@", (uint8_t *)v8, 0x12u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100439DC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  BOOL v6 = a3;
  if (v5)
  {
    uint64_t v7 = off_100807260(*(void **)(a1 + 32));
    uint64_t v8 = *(unsigned __int8 *)(a1 + 56);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100439F3C;
    v15[3] = &unk_100751288;
    id v9 = *(id *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = *(void **)(a1 + 48);
    id v16 = v9;
    uint64_t v17 = v10;
    id v18 = v11;
    uint64_t v19 = v6;
    [v5 transactionUpdated:v7 deferFeatureComputation:v8 completion:v15];
  }
  else
  {
    uint64_t v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Could not invoke FinHealth updateFinHealthTransactionWithCompletion: controller was nil", v14, 2u);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13) {
      (*(void (**)(void))(v13 + 16))();
    }
    v6[2](v6);
  }
}

void sub_100439F3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    uint64_t v8 = [*(id *)(a1 + 32) identifier];
    int v15 = 138412546;
    id v16 = v8;
    __int16 v17 = 2112;
    id v18 = v6;
    id v9 = "Could not report transaction %@ to suggestions controller with error %@";
    uint64_t v10 = v7;
    uint32_t v11 = 22;
  }
  else
  {
    [*(id *)(a1 + 40) _parseFeatureResponse:v5];
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    uint64_t v8 = [*(id *)(a1 + 32) identifier];
    int v15 = 138412290;
    id v16 = v8;
    id v9 = "Finhealth Account event update complete %@";
    uint64_t v10 = v7;
    uint32_t v11 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v15, v11);

LABEL_7:
  uint64_t v14 = *(void *)(a1 + 48);
  if (v14) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v14, v12, v13);
  }
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v12, v13);
}

void sub_10043A2EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 104);
  if (v2)
  {
    (*(void (**)(void))(v2 + 16))();
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 104);
    *(void *)(v3 + 104) = 0;
  }
}

void sub_10043B2C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[12];
  if (v3)
  {
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, *(unsigned __int8 *)(a1 + 40));
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 96);
    *(void *)(v4 + 96) = 0;
  }
  else
  {
    [v2 _indexingCompleted];
  }
}

void sub_10043B50C(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_10043B698(id a1)
{
  uint64_t v1 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "FinHealth data deleted after database restoration", v2, 2u);
  }
}

id sub_10043B9C4(void *a1)
{
  uint64_t v1 = qword_100808F90;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  off_100807260 = (uint64_t (*)())dlsym((void *)qword_100808F88, "TransactionFromPKPaymentTransaction");
  uint64_t v3 = ((void (*)(id))off_100807260)(v2);

  return v3;
}

void sub_10043BA58(id a1)
{
  qword_100808F88 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FinHealthCore.framework/FinHealthCore", 2);
}

Class sub_10043BA84()
{
  if (qword_100808FA8 != -1) {
    dispatch_once(&qword_100808FA8, &stru_100751360);
  }
  Class result = objc_getClass("FHSearchSuggestionController");
  qword_100808F98 = (uint64_t)result;
  off_100807268 = (uint64_t (*)())sub_10043BAE8;
  return result;
}

id sub_10043BAE8()
{
  return (id)qword_100808F98;
}

void sub_10043BAF4(id a1)
{
  qword_100808FA0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/FinHealth.framework/FinHealth", 2);
}

id sub_10043BB20()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeRegular");
  objc_storeStrong((id *)&qword_100808F30, *v0);
  off_100807270 = (uint64_t (*)())sub_10043BBB4;
  uint64_t v1 = (void *)qword_100808F30;
  return v1;
}

id sub_10043BBB4()
{
  return (id)qword_100808F30;
}

id sub_10043BBC0()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeIrregular");
  objc_storeStrong((id *)&qword_100808F38, *v0);
  off_100807278 = (uint64_t (*)())sub_10043BC54;
  uint64_t v1 = (void *)qword_100808F38;
  return v1;
}

id sub_10043BC54()
{
  return (id)qword_100808F38;
}

id sub_10043BC60()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeRecurring");
  objc_storeStrong((id *)&qword_100808F28, *v0);
  off_100807280 = (uint64_t (*)())sub_10043BCF4;
  uint64_t v1 = (void *)qword_100808F28;
  return v1;
}

id sub_10043BCF4()
{
  return (id)qword_100808F28;
}

id sub_10043BD00()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeTopMerchant");
  objc_storeStrong((id *)&qword_100808EE8, *v0);
  off_100807288 = (uint64_t (*)())sub_10043BD94;
  uint64_t v1 = (void *)qword_100808EE8;
  return v1;
}

id sub_10043BD94()
{
  return (id)qword_100808EE8;
}

id sub_10043BDA0()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeFavoriteRestaurant");
  objc_storeStrong((id *)&qword_100808EF0, *v0);
  off_100807290 = (uint64_t (*)())sub_10043BE34;
  uint64_t v1 = (void *)qword_100808EF0;
  return v1;
}

id sub_10043BE34()
{
  return (id)qword_100808EF0;
}

id sub_10043BE40()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeAmountAboveAverage");
  objc_storeStrong((id *)&qword_100808EF8, *v0);
  off_100807298 = (uint64_t (*)())sub_10043BED4;
  uint64_t v1 = (void *)qword_100808EF8;
  return v1;
}

id sub_10043BED4()
{
  return (id)qword_100808EF8;
}

id sub_10043BEE0()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeAmountBelowAverage");
  objc_storeStrong((id *)&qword_100808F00, *v0);
  off_1008072A0 = (uint64_t (*)())sub_10043BF74;
  uint64_t v1 = (void *)qword_100808F00;
  return v1;
}

id sub_10043BF74()
{
  return (id)qword_100808F00;
}

id sub_10043BF80()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypePeakSpend");
  objc_storeStrong((id *)&qword_100808F08, *v0);
  off_1008072A8 = (uint64_t (*)())sub_10043C014;
  uint64_t v1 = (void *)qword_100808F08;
  return v1;
}

id sub_10043C014()
{
  return (id)qword_100808F08;
}

id sub_10043C020()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypePeakSpendMonthly");
  objc_storeStrong((id *)&qword_100808F10, *v0);
  off_1008072B0 = (uint64_t (*)())sub_10043C0B4;
  uint64_t v1 = (void *)qword_100808F10;
  return v1;
}

id sub_10043C0B4()
{
  return (id)qword_100808F10;
}

id sub_10043C0C0()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeFrequentShop");
  objc_storeStrong((id *)&qword_100808F18, *v0);
  off_1008072B8 = (uint64_t (*)())sub_10043C154;
  uint64_t v1 = (void *)qword_100808F18;
  return v1;
}

id sub_10043C154()
{
  return (id)qword_100808F18;
}

id sub_10043C160()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeAmountVeryExpensive");
  objc_storeStrong((id *)&qword_100808F20, *v0);
  off_1008072C0 = (uint64_t (*)())sub_10043C1F4;
  uint64_t v1 = (void *)qword_100808F20;
  return v1;
}

id sub_10043C1F4()
{
  return (id)qword_100808F20;
}

id sub_10043C200()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeDispute");
  objc_storeStrong((id *)&qword_100808F40, *v0);
  off_1008072C8 = (uint64_t (*)())sub_10043C294;
  uint64_t v1 = (void *)qword_100808F40;
  return v1;
}

id sub_10043C294()
{
  return (id)qword_100808F40;
}

id sub_10043C2A0()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeRecentPayment");
  objc_storeStrong((id *)&qword_100808F48, *v0);
  off_1008072D0 = (uint64_t (*)())sub_10043C334;
  uint64_t v1 = (void *)qword_100808F48;
  return v1;
}

id sub_10043C334()
{
  return (id)qword_100808F48;
}

id sub_10043C340()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureAggregateTypeRecentDispute");
  objc_storeStrong((id *)&qword_100808F50, *v0);
  off_1008072D8 = (uint64_t (*)())sub_10043C3D4;
  uint64_t v1 = (void *)qword_100808F50;
  return v1;
}

id sub_10043C3D4()
{
  return (id)qword_100808F50;
}

id sub_10043C3E0()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureCompoundTypeEventTagging");
  objc_storeStrong((id *)&qword_100808F60, *v0);
  off_1008072E0 = (uint64_t (*)())sub_10043C474;
  uint64_t v1 = (void *)qword_100808F60;
  return v1;
}

id sub_10043C474()
{
  return (id)qword_100808F60;
}

id sub_10043C480()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureCompoundTypeTripEvents");
  objc_storeStrong((id *)&qword_100808F68, *v0);
  off_1008072E8 = (uint64_t (*)())sub_10043C514;
  uint64_t v1 = (void *)qword_100808F68;
  return v1;
}

id sub_10043C514()
{
  return (id)qword_100808F68;
}

id sub_10043C520()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureCompoundTypeSoldProducts");
  objc_storeStrong((id *)&qword_100808F78, *v0);
  off_1008072F0 = (uint64_t (*)())sub_10043C5B4;
  uint64_t v1 = (void *)qword_100808F78;
  return v1;
}

id sub_10043C5B4()
{
  return (id)qword_100808F78;
}

id sub_10043C5C0()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureCompoundTypeRelatedMerchants");
  objc_storeStrong((id *)&qword_100808F70, *v0);
  off_1008072F8 = (uint64_t (*)())sub_10043C654;
  uint64_t v1 = (void *)qword_100808F70;
  return v1;
}

id sub_10043C654()
{
  return (id)qword_100808F70;
}

id sub_10043C660()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureCompoundTypePointsOfInterest");
  objc_storeStrong((id *)&qword_100808F58, *v0);
  off_100807300 = (uint64_t (*)())sub_10043C6F4;
  uint64_t v1 = (void *)qword_100808F58;
  return v1;
}

id sub_10043C6F4()
{
  return (id)qword_100808F58;
}

id sub_10043C700()
{
  if (qword_100808F90 != -1) {
    dispatch_once(&qword_100808F90, &stru_100751340);
  }
  v0 = (id *)dlsym((void *)qword_100808F88, "FHSmartFeatureCompoundTypeRecurringChange");
  objc_storeStrong((id *)&qword_100808F80, *v0);
  off_100807308 = (uint64_t (*)())sub_10043C794;
  uint64_t v1 = (void *)qword_100808F80;
  return v1;
}

id sub_10043C794()
{
  return (id)qword_100808F80;
}

uint64_t sub_10043C8F8(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    LOBYTE(v6) = 1;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        id v9 = objc_alloc(*(Class *)(a1 + 48));
        id v10 = objc_msgSend(v9, "initWithEvent:inDatabase:", v8, *(void *)(a1 + 40), (void)v12);
        uint64_t v6 = v6 & (v10 != 0);
      }
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_10043CC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_alloc_init((Class)PKChangeHistoryEvent);
  uint64_t v6 = *(void **)(a1 + 48);
  long long v7 = *(void **)(a1 + 32);
  uint64_t v8 = [v7 allKeys];
  [v6 applyPropertySetters:v7 toObject:v9 withProperties:v8 values:a4];

  [*(id *)(a1 + 40) addObject:v9];
}

uint64_t sub_10043CE3C(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    LODWORD(v6) = 1;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(a1 + 48);
        id v9 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "identifier", (void)v13);
        id v10 = [v8 predicateForChangeEventWithIdentifier:v9];

        uint32_t v11 = [*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 40) predicate:v10];
        uint64_t v6 = v6 & [v11 deleteAllEntities];
      }
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

id sub_10043D134(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 32) predicate:*(void *)(a1 + 40)];
  id v2 = [v1 deleteAllEntities];

  return v2;
}

void sub_10043D5FC(id a1, PKChangeHistoryEvent *a2, id a3)
{
}

void sub_10043D604(id a1, PKChangeHistoryEvent *a2, id a3)
{
  id v4 = a2;
  -[PKChangeHistoryEvent setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10043D65C(id a1, PKChangeHistoryEvent *a2, id a3)
{
  id v4 = a2;
  -[PKChangeHistoryEvent setRecordType:](v4, "setRecordType:", [a3 integerValue]);
}

void sub_10043D6B4(id a1, PKChangeHistoryEvent *a2, id a3)
{
}

void sub_10043D6BC(id a1, PKChangeHistoryEvent *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKChangeHistoryEvent *)v3 setTimestamp:v4];
}

void sub_10043DCD8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

id sub_10043DE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a3 values:a4];
}

void sub_10043DF14(id a1, PKPeerPaymentPreferencesProfileAppearance *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesProfileAppearance setShareLastName:](v4, "setShareLastName:", [a3 BOOLValue]);
}

void sub_10043DF6C(id a1, PKPeerPaymentPreferencesProfileAppearance *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesProfileAppearance setShareProfilePicture:](v4, "setShareProfilePicture:", [a3 BOOLValue]);
}

void sub_10043ECF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v14 = a3;
  id v6 = objc_alloc_init((Class)PKPaymentTransactionFeeItem);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v6 withProperties:v14 values:a4];
  [v14 indexOfObject:@"amount"];
  PKCurrencyStorageNumberToCurrencyDecimal();
  long long v7 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  uint64_t v8 = (NSString *)*(id *)(a4 + 8 * (void)[v14 indexOfObject:@"currency"]);
  if (v7)
  {
    id v9 = +[NSDecimalNumber notANumber];
    unsigned __int8 v10 = [(NSDecimalNumber *)v7 isEqualToNumber:v9];

    if ((v10 & 1) == 0)
    {
      if (v8)
      {
        uint32_t v11 = PKCurrencyAmountCreate(v7, v8, 0);
        [v6 setCurrencyAmount:v11];
      }
    }
  }
  id v12 = *(id *)(a4 + 8 * (void)[v14 count] - 8);
  id v13 = [*(id *)(a1 + 40) objectForKey:v12];
  if (!v13)
  {
    id v13 = objc_alloc_init((Class)NSMutableArray);
    [*(id *)(a1 + 40) setObject:v13 forKey:v12];
  }
  [v13 addObject:v6];
}

void sub_10043EF80(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = a2;
  +[SQLiteEntity applyPropertySetters:v5 toObject:v6 withProperties:v7 values:a3];
  [v7 indexOfObject:@"amount"];
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v14 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  id v8 = [v7 indexOfObject:@"currency"];

  id v9 = (NSString *)*(id *)(a3 + 8 * (void)v8);
  if (v14)
  {
    unsigned __int8 v10 = +[NSDecimalNumber notANumber];
    unsigned __int8 v11 = [(NSDecimalNumber *)v14 isEqualToNumber:v10];

    if ((v11 & 1) == 0)
    {
      if (v9)
      {
        id v12 = *(void **)(a1 + 40);
        id v13 = PKCurrencyAmountCreate(v14, v9, 0);
        [v12 setCurrencyAmount:v13];
      }
    }
  }
}

void sub_10043F228(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v13 = objc_alloc_init((Class)PKPaymentTransactionFeeItem);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  [v6 indexOfObject:@"amount"];
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v7 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  id v8 = [v6 indexOfObject:@"currency"];

  id v9 = (NSString *)*(id *)(a4 + 8 * (void)v8);
  if (v7)
  {
    unsigned __int8 v10 = +[NSDecimalNumber notANumber];
    unsigned __int8 v11 = [(NSDecimalNumber *)v7 isEqualToNumber:v10];

    if ((v11 & 1) == 0)
    {
      if (v9)
      {
        id v12 = PKCurrencyAmountCreate(v7, v9, 0);
        [v13 setCurrencyAmount:v12];
      }
    }
  }
  [*(id *)(a1 + 40) addObject:v13];
}

void sub_10043F594(id a1, PKPaymentTransactionFeeItem *a2, id a3)
{
}

void sub_10043F59C(id a1, PKPaymentTransactionFeeItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionFeeItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10043F5F4(id a1, PKPaymentTransactionFeeItem *a2, id a3)
{
}

void sub_10043FA10(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10043FA28(uint64_t a1, sqlite3_stmt *a2)
{
  +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 32) persistentID]);
  id v4 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  SQLiteBindFoundationValueToStatement(a2, 1, v4);

  uint64_t result = sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_10043FBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10043FBEC(uint64_t a1, sqlite3_stmt *a2)
{
  +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 32) persistentID]);
  id v4 = (NSNumber *)objc_claimAutoreleasedReturnValue();
  SQLiteBindFoundationValueToStatement(a2, 1, v4);

  uint64_t result = sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_10043FDC0(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v12 + 1) + 8 * (void)v6);
        id v8 = *(void **)(a1 + 40);
        id v9 = objc_alloc(*(Class *)(a1 + 64));
        id v10 = objc_msgSend(v9, "initWithBarcodeCredential:withPaymentApplication:inDatabase:", v7, *(void *)(a1 + 48), *(void *)(a1 + 56), (void)v12);
        [v8 safelyAddObject:v10];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v4);
  }

  return 1;
}

id sub_1004401A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10044097C(id a1, PKBarcodeCredential *a2, id a3)
{
}

void sub_100440984(id a1, PKBarcodeCredential *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKBarcodeCredential *)v3 setExpirationTimestamp:v4];
}

void sub_1004409E4(id a1, PKBarcodeCredential *a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  uint64_t v9 = objc_opt_class();
  id v6 = +[NSArray arrayWithObjects:&v9 count:1];
  uint64_t v7 = +[NSSet setWithArray:v6];
  id v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKBarcodeCredential *)v5 setValue:v8];
}

void sub_100440BC0(uint64_t a1, uint64_t a2)
{
  id v4 = [BarcodeCredential alloc];
  uint64_t v5 = [*(id *)(a1 + 32) database];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  [*(id *)(a1 + 40) safelyAddObject:v6];
}

void sub_1004413A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id *location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

int64_t sub_1004413E8(id a1, PKPassAuxiliaryRegistrationRequirement *a2, PKPassAuxiliaryRegistrationRequirement *a3)
{
  id v4 = a3;
  uint64_t v5 = [(PKPassAuxiliaryRegistrationRequirement *)a2 identifier];
  id v6 = [(PKPassAuxiliaryRegistrationRequirement *)v4 identifier];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_100441458(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) isReferencing:a2];
}

void sub_100441464(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([*(id *)(a1 + 32) containsObject:v3] & 1) == 0)
  {
    [*(id *)(a1 + 32) addObject:v3];
    id v4 = [*(id *)(a1 + 40) objectForKeyedSubscript:v3];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * (void)v8);
          id WeakRetained = (void (**)(id, void))objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 56)
                                                                                                  + 8)
                                                                                      + 40));
          WeakRetained[2](WeakRetained, v9);

          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }
    [*(id *)(a1 + 48) addObject:v3];
  }
}

void sub_100441760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100441778(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100441788(uint64_t a1)
{
}

void sub_100441790(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v13 = a2;
  uint64_t v7 = [v13 identifier];
  id v8 = *(void **)(a1 + 32);
  id v9 = v7;
  id v10 = v8;
  if (v9 == v10)
  {

    goto LABEL_7;
  }
  long long v11 = v10;
  if (!v9 || !v10)
  {

    goto LABEL_9;
  }
  unsigned int v12 = [v9 isEqualToString:v10];

  if (v12)
  {
LABEL_7:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
  }
LABEL_9:
}

uint64_t PKPassEligibleForAuxiliaryCapabilityRegistration(void *a1)
{
  uint64_t v1 = [a1 auxiliaryRegistrationRequirements];
  id v2 = [v1 allRequirements];
  id v3 = [v2 count];

  if (PKIsMac()) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = PKIsTV() ^ 1;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

void sub_100441AE0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:0];
    id v2 = PKAuxiliaryCapabilityManagerPerformScheduledCheckRetrySeconds();
    if (v2)
    {
      id v3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 138412290;
        uint64_t v7 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scheduling schedule activity for ever %@ minutes.", (uint8_t *)&v6, 0xCu);
      }

      double v4 = (double)(uint64_t)[v2 integerValue] * 60.0;
    }
    else
    {
      [v1 setRequireScreenSleep:1];
      [v1 setRequireMainsPower:1];
      double v4 = 86400.0;
    }
    [v1 setRepeatInterval:v4];
    [v1 setRequireNetworkConnectivity:1];
    [v1 setRepeating:1];
    [v1 setReason:@"check pass registration state"];
    id v5 = PDScheduledActivityGetCriteria();
    if (!v5 || (PKEqualObjects() & 1) == 0) {
      PDScheduledActivityRegister();
    }
  }
}

id sub_100441D10(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 72) addObject:*(void *)(a1 + 40)];
}

id sub_100441DB4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 72) removeObject:*(void *)(a1 + 40)];
}

void sub_100441DC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = v3;
  if (a1 && v3)
  {
    id v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100441E6C;
    v6[3] = &unk_10072FDC8;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_100441E6C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) allObjects];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    double v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      int v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        ++v6;
      }
      while (v4 != v6);
      double v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_100442038(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = [v2 devicePaymentApplications];
    BOOL v4 = [v3 count] == 0;
  }
  else
  {
    BOOL v4 = 1;
  }
  int v6 = (PDARRISO18013DecryptionProvider *)a1[5];
  uint64_t v5 = (void *)a1[6];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10044210C;
  v9[3] = &unk_1007516C8;
  id v7 = v5;
  uint64_t v8 = a1[5];
  id v10 = v7;
  uint64_t v11 = v8;
  BOOL v12 = v4;
  sub_1004423E0(v6, v7, !v4, v9);
}

void sub_10044210C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    BOOL v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = [*(id *)(a1 + 32) uniqueID];
      *(_DWORD *)buf = 138412546;
      long long v15 = v5;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "passAddedOrUpdated: Failed to check current status for pass: %@, with error: %@", buf, 0x16u);
    }
  }
  int v6 = *(void **)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100442268;
  v10[3] = &unk_1007516C8;
  char v13 = *(unsigned char *)(a1 + 48);
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 40);
  id v11 = v8;
  uint64_t v12 = v9;
  [v7 registerAuxiliaryCapabilitiesForPass:v8 force:0 sessionExchangeToken:0 completion:v10];
}

void sub_100442268(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v5 = @"new";
    }
    else {
      CFStringRef v5 = @"existing";
    }
    int v6 = [*(id *)(a1 + 32) uniqueID];
    *(_DWORD *)buf = 138412802;
    CFStringRef v11 = v5;
    __int16 v12 = 2112;
    char v13 = v6;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "passAddedOrUpdated: Auxiliary registration finished for %@ pass: %@, with error: %@", buf, 0x20u);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1004423D4;
  v8[3] = &unk_1007516A0;
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 32);
  sub_100441DC0(v7, v8);
}

id sub_1004423D4(uint64_t a1, void *a2)
{
  return _[a2 registeredPassForAuxiliaryCapabilityPass:*(void *)(a1 + 32)];
}

void sub_1004423E0(PDARRISO18013DecryptionProvider *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = [v7 uniqueID];
    id v10 = [v7 auxiliaryRegistrationRequirements];
    CFStringRef v11 = [v10 allRequirements];
    __int16 v12 = sub_1004438C8(a1, v11, 0);

    if ([v12 count])
    {
      char v13 = [v7 devicePaymentApplications];
      id v14 = [v13 count];

      if (v14)
      {
        id v15 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v37 = 0x3032000000;
        id v38 = sub_100441778;
        id v39 = sub_100441788;
        id v40 = 0;
        v34[0] = 0;
        v34[1] = v34;
        v34[2] = 0x3032000000;
        v34[3] = sub_100441778;
        v34[4] = sub_100441788;
        id v35 = 0;
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_100446B14;
        v28[3] = &unk_100751960;
        v28[4] = a1;
        id v16 = v12;
        id v29 = v16;
        id v30 = v7;
        id v31 = v34;
        p_long long buf = &buf;
        uint64_t v33 = a3;
        [v15 addOperation:v28];
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_100446CC0;
        v24[3] = &unk_10072E638;
        v24[4] = a1;
        id v25 = v16;
        id v26 = v34;
        id v27 = &buf;
        [v15 addOperation:v24];
        id v17 = +[NSNull null];
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_100447040;
        void v20[3] = &unk_1007342E8;
        v20[4] = a1;
        id v21 = v9;
        id v23 = &buf;
        id v22 = v8;
        id v18 = [v15 evaluateWithInput:v17 completion:v20];

        _Block_object_dispose(v34, 8);
        _Block_object_dispose(&buf, 8);
      }
      else
      {
        uint64_t v19 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v9;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Skipping capability registration check for %@ because pass missing payment application", (uint8_t *)&buf, 0xCu);
        }

        (*((void (**)(id, void))v8 + 2))(v8, 0);
      }
    }
    else
    {
      (*((void (**)(id, void))v8 + 2))(v8, 0);
    }
  }
}

void sub_1004427A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

NSCopying *__cdecl sub_1004429E4(id a1, PKPassAuxiliaryRegistrationDecryptionRequirement *a2)
{
  id v2 = [(PKPassAuxiliaryRegistrationDecryptionRequirement *)a2 type];
  return (NSCopying *)+[NSNumber numberWithUnsignedInteger:v2];
}

void sub_100442A28(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v23;
    id v7 = (void *)PKPassSharingBundleFileName;
    *(void *)&long long v4 = 138412546;
    long long v21 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v2);
        }
        id v9 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v10 = objc_msgSend(v9, "localURL", v21);
        CFStringRef v11 = [v10 lastPathComponent];

        id v12 = v11;
        id v13 = v7;
        id v14 = v13;
        if (v12 == v13)
        {

LABEL_15:
          id v17 = [*(id *)(a1 + 40) objectForKeyedSubscript:&off_10078BA00];
          id v18 = PKLogFacilityTypeGetObject();
          BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          if (v17)
          {
            if (v19)
            {
              *(_DWORD *)long long buf = v21;
              id v27 = v12;
              __int16 v28 = 2112;
              id v29 = v17;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Updating requirement to not registered because unable to handle asset %@. Requirement: %@", buf, 0x16u);
            }

            [*(id *)(*(void *)(a1 + 48) + 8) updateAuxiliaryRegistrationRequirement:v17 pass:*(void *)(a1 + 56) isRegistered:0];
          }
          else
          {
            if (v19)
            {
              [&off_10078BA00 unsignedIntegerValue];
              __int16 v20 = PKDeviceDecryptionTypeToString();
              *(_DWORD *)long long buf = 138412290;
              id v27 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%@ decryption type found, but no corresponding decryption requirement found", buf, 0xCu);
            }
          }
          goto LABEL_24;
        }
        if (v12) {
          BOOL v15 = v7 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {
        }
        else
        {
          unsigned int v16 = [v12 isEqualToString:v13];

          if (v16) {
            goto LABEL_15;
          }
        }
        id v17 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v27 = v9;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No valid decryption type found for %@", buf, 0xCu);
        }
LABEL_24:
      }
      id v5 = [v2 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v5);
  }
}

void sub_100442D04(uint64_t a1, char a2)
{
  if (a1)
  {
    int v3 = PKAuxiliaryCapabilityManagerDisabled();
    long long v4 = PKLogFacilityTypeGetObject();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Skipping scheduled check of pass registration state because manager disabled", buf, 2u);
      }
      uint64_t v6 = v4;
    }
    else
    {
      if (v5)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Beginning scheduled check of pass registration state", buf, 2u);
      }

      uint64_t v6 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
      id v7 = [*(id *)(a1 + 8) passesOfType:1];
      id v8 = [v7 objectsPassingTest:&stru_100751D70];

      if ([v8 count])
      {
        CFAbsoluteTimeGetCurrent();
        char v29 = 0;
        PDAuxiliaryCapabilityLastRemoteFetchTime();
        PDSetAuxiliaryCapabilityLastRemoteFetchTime();
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10044AED8;
        v28[3] = &unk_10072E5C0;
        v28[4] = a1;
        [v6 addOperation:v28];
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        BOOL v15 = v8;
        id obj = v8;
        id v9 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v17 = *(void *)v25;
          do
          {
            for (i = 0; i != v10; i = (char *)i + 1)
            {
              if (*(void *)v25 != v17) {
                objc_enumerationMutation(obj);
              }
              uint64_t v12 = *(void *)(*((void *)&v24 + 1) + 8 * i);
              v23[0] = _NSConcreteStackBlock;
              v23[1] = 3221225472;
              v23[2] = sub_10044AFB4;
              v23[3] = &unk_10072E5C0;
              void v23[4] = a1;
              [v6 addOperation:v23];
              v21[0] = _NSConcreteStackBlock;
              v21[1] = 3221225472;
              v21[2] = sub_10044B094;
              v21[3] = &unk_100751D98;
              char v22 = a2;
              void v21[4] = a1;
              v21[5] = v12;
              [v6 addOperation:v21];
              v19[0] = _NSConcreteStackBlock;
              v19[1] = 3221225472;
              v19[2] = sub_10044B190;
              v19[3] = &unk_100751D98;
              char v20 = a2;
              v19[4] = a1;
              void v19[5] = v12;
              [v6 addOperation:v19];
            }
            id v10 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
          }
          while (v10);
        }

        id v13 = +[NSNull null];
        id v14 = [v6 evaluateWithInput:v13 completion:&stru_100751DD8];

        id v8 = v15;
      }
      else
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No passes have auxiliary capability requirements.", buf, 2u);
        }
      }
    }
  }
}

void sub_10044328C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uniqueID];
  id v3 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  v42[0] = 0;
  v42[1] = v42;
  v42[2] = 0x3032000000;
  v42[3] = sub_100441778;
  v42[4] = sub_100441788;
  id v43 = @"initial";
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x3032000000;
  v40[3] = sub_100441778;
  v40[4] = sub_100441788;
  id v41 = 0;
  id v13 = +[NSMapTable pk_createStrongPointerPersonalityToStrongObjects];
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x3032000000;
  v38[3] = sub_100441778;
  v38[4] = sub_100441788;
  id v39 = 0;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100443750;
  v32[3] = &unk_1007449F8;
  uint64_t v35 = v42;
  id v36 = v38;
  long long v4 = *(void **)(a1 + 48);
  v32[4] = *(void *)(a1 + 40);
  id v33 = v4;
  __int16 v34 = v2;
  uint64_t v37 = v40;
  [v3 addOperation:v32];
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x3032000000;
  v30[3] = sub_100441778;
  v30[4] = sub_100441788;
  id v31 = 0;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100443AE0;
  v24[3] = &unk_100751758;
  long long v26 = v42;
  long long v27 = v38;
  int8x16_t v12 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v12.i64[0];
  int8x16_t v25 = vextq_s8(v12, v12, 8uLL);
  __int16 v28 = v30;
  char v29 = v40;
  [v3 addOperation:v24];
  for (unint64_t i = 0; i < (unint64_t)[*(id *)(a1 + 48) count]; ++i)
  {
    id v7 = [*(id *)(a1 + 48) objectAtIndexedSubscript:i];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10044413C;
    v23[3] = &unk_1007517A8;
    v23[9] = v30;
    v23[10] = i;
    v23[7] = v42;
    v23[8] = v38;
    void v23[4] = v7;
    void v23[5] = v13;
    v23[6] = *(void *)(a1 + 40);
    [v3 addOperation:v23];
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100444420;
  v22[3] = &unk_1007517D0;
  v22[4] = *(void *)(a1 + 40);
  void v22[5] = v42;
  v22[6] = v38;
  v22[7] = v30;
  v22[8] = v40;
  [v3 addOperation:v22];
  id v8 = +[NSNull null];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100444964;
  v14[3] = &unk_100751820;
  id v9 = *(void **)(a1 + 48);
  v14[4] = *(void *)(a1 + 40);
  id v18 = v40;
  BOOL v19 = v38;
  char v20 = v30;
  long long v21 = v42;
  id v15 = v9;
  id v10 = *(id *)(a1 + 56);
  id v16 = v13;
  id v17 = v10;
  id v11 = [v3 evaluateWithInput:v8 completion:v14];

  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v38, 8);

  _Block_object_dispose(v40, 8);
  _Block_object_dispose(v42, 8);
}

void sub_1004436FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100443750(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateProviders";

  char v19 = 0;
  uint64_t v10 = sub_1004438C8(*(PDARRISO18013DecryptionProvider **)(a1 + 32), *(void **)(a1 + 40), &v19);
  uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8);
  int8x16_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  BOOL v13 = 0;
  if (!v19)
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Pass %@ has no valid providers for all requirements", buf, 0xCu);
    }

    uint64_t v16 = +[NSError errorWithDomain:PKPassKitErrorDomain code:1 userInfo:0];
    uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    BOOL v13 = v19 == 0;
  }
  v7[2](v7, v6, v13);
}

PKProviderForCapabilityMap *sub_1004438C8(PDARRISO18013DecryptionProvider *a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  char v19 = v5;
  if (a1)
  {
    id v6 = v5;
    if (a3) {
      *a3 = 1;
    }
    id v7 = objc_alloc_init(PKProviderForCapabilityMap);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v8 = v6;
    id v9 = [v8 countByEnumeratingWithState:&v20 objects:v26 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v21;
      do
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(v8);
          }
          BOOL v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          id v14 = [v13 role];
          if (v14 == (id)1)
          {
            uint64_t v15 = sub_10044ADD0(a1, v13);
          }
          else
          {
            if (v14 != (id)2) {
              goto LABEL_15;
            }
            uint64_t v15 = sub_10044AC74(a1, v13);
          }
          uint64_t v16 = (void *)v15;
          if (v15)
          {
            [(PKProviderForCapabilityMap *)v7 addCapability:v13 provider:v15];

            continue;
          }
LABEL_15:
          uint64_t v17 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            int8x16_t v25 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unable to find valid provider for auxiliary requirement %@", buf, 0xCu);
          }

          if (a3) {
            *a3 = 0;
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v20 objects:v26 count:16];
      }
      while (v10);
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_100443AE0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateContext";

  id v10 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  int8x16_t v12 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100443BE8;
  v15[3] = &unk_100751730;
  long long v18 = *(_OWORD *)(a1 + 64);
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  sub_100443C94(v11, v10, v12, 0, v15);
}

void sub_100443BE8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v11 != 0);
}

void sub_100443C94(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = &v36;
    uint64_t v38 = 0x2020000000;
    uint64_t v39 = 0;
    uint64_t v32 = 0;
    id v33 = &v32;
    uint64_t v34 = 0x2020000000;
    char v35 = 0;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1004472A4;
    v31[3] = &unk_1007519F0;
    void v31[4] = &v36;
    v31[5] = &v32;
    [v9 enumerateCapabilities:v31];
    if (*((unsigned char *)v33 + 24))
    {
      id v13 = +[NSString stringWithFormat:@"Incompatible auxiliary registration providers requested"];
      id v14 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v43 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Context creation failed with error '%@'", buf, 0xCu);
      }

      NSErrorUserInfoKey v40 = NSDebugDescriptionErrorKey;
      id v41 = v13;
      uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
      id v16 = +[NSError errorWithDomain:PKPassKitErrorDomain code:1 userInfo:v15];
      v12[2](v12, 0, v16);
    }
    else
    {
      id v17 = [PDAuxiliaryCapabilityRequirementContext alloc];
      long long v18 = [*(id *)(a1 + 24) primarySecureElementIdentifier];
      id v13 = [(PDAuxiliaryCapabilityRequirementContext *)v17 initWithPass:v10 primarySEID:v18];

      if (v37[3] != 1)
      {
        [(PDAuxiliaryCapabilityRequirementContext *)v13 setSecureElement:*(void *)(a1 + 24)];
        ((void (**)(id, PDAuxiliaryCapabilityRequirementContext *, void *))v12)[2](v12, v13, 0);
LABEL_15:

        _Block_object_dispose(&v32, 8);
        _Block_object_dispose(&v36, 8);
        goto LABEL_16;
      }
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10044732C;
      v28[3] = &unk_100751A18;
      id v30 = v12;
      id v13 = v13;
      char v29 = v13;
      char v19 = objc_retainBlock(v28);
      long long v20 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        long long v21 = [v10 uniqueID];
        *(_DWORD *)long long buf = 138412290;
        id v43 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Obtaining SE session to perform auxiliary register for pass %@", buf, 0xCu);
      }
      if (v11)
      {
        uint64_t v22 = *(void *)(a1 + 64);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_100447470;
        v26[3] = &unk_10074DB20;
        long long v27 = v19;
        +[PKSecureElement accessSecureElementManagerSessionWithSessionExchangeToken:v11 callbackQueue:v22 handler:v26];
      }
      else
      {
        long long v23 = *(void **)(a1 + 24);
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_100447480;
        v24[3] = &unk_100731A38;
        void v24[4] = a1;
        int8x16_t v25 = v19;
        [v23 accessSecureElementManagerSessionWithHandler:v24];
      }
      uint64_t v15 = v30;
    }

    goto LABEL_15;
  }
LABEL_16:
}

void sub_100444100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_10044413C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = +[NSString stringWithFormat:@"ExistingKeyMaterialCheck%lu", a1[10]];
  uint64_t v9 = *(void *)(a1[7] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = [*(id *)(*(void *)(a1[8] + 8) + 40) providerForCapability:a1[4]];
  if (objc_opt_respondsToSelector())
  {
    uint64_t v12 = *(void *)(*(void *)(a1[9] + 8) + 40);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100444304;
    v24[3] = &unk_100751780;
    uint64_t v13 = a1[8];
    long long v25 = *((_OWORD *)a1 + 2);
    uint64_t v14 = a1[6];
    id v28 = v7;
    uint64_t v29 = v13;
    uint64_t v26 = v14;
    id v27 = v6;
    id v15 = v6;
    id v16 = v7;
    [v11 existingKeyMaterialForRequirement:(void)v25 context:v12 completion:v24];

    id v17 = v28;
  }
  else
  {
    long long v18 = *(NSObject **)(a1[6] + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100444408;
    block[3] = &unk_10072E598;
    id v22 = v6;
    id v23 = v7;
    id v19 = v6;
    id v20 = v7;
    dispatch_async(v18, block);

    id v17 = v23;
  }
}

void sub_100444304(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2 == 1)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) removeCapability:*(void *)(a1 + 32)];
    if (v5) {
      [*(id *)(a1 + 40) setObject:v5 forKey:*(void *)(a1 + 32)];
    }
  }
  id v6 = *(NSObject **)(*(void *)(a1 + 48) + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004443F0;
  v7[3] = &unk_10072E598;
  id v9 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 56);
  dispatch_async(v6, v7);
}

uint64_t sub_1004443F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_100444408(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100444420(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1[5] + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"GenerateKeys";

  uint64_t v10 = a1[4];
  id v11 = *(void **)(*(void *)(a1[6] + 8) + 40);
  uint64_t v12 = *(void **)(*(void *)(a1[7] + 8) + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100444530;
  v16[3] = &unk_1007307C0;
  uint64_t v13 = a1[8];
  id v18 = v7;
  uint64_t v19 = v13;
  id v17 = v6;
  id v14 = v6;
  id v15 = v7;
  sub_1004445A4(v10, v11, v12, 1, v16);
}

void sub_100444530(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v4 != 0);
}

void sub_1004445A4(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v29 = a2;
  id v9 = a3;
  id v28 = a5;
  if (a1)
  {
    uint64_t v10 = [v9 pass];
    id v11 = [v10 uniqueID];

    uint64_t v12 = [v9 validCertificateIdentifiers];
    id v13 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v53[0] = 0;
    v53[1] = v53;
    v53[2] = 0x3032000000;
    v53[3] = sub_100441778;
    v53[4] = sub_100441788;
    id v54 = 0;
    id v14 = objc_alloc_init((Class)NSMutableArray);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_1004481F4;
    v46[3] = &unk_100751B48;
    id v15 = v13;
    id v47 = v15;
    id v16 = v9;
    id v48 = v16;
    v51 = v53;
    char v52 = a4;
    id v17 = v11;
    id v49 = v17;
    id v18 = v14;
    id v50 = v18;
    [v29 enumerateCapabilities:v46];
    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472;
    v39[2] = sub_1004485AC;
    v39[3] = &unk_100732190;
    id v19 = v18;
    id v40 = v19;
    id v20 = v17;
    id v41 = v20;
    uint64_t v42 = a1;
    id v21 = v16;
    id v43 = v21;
    id v22 = v29;
    id v44 = v22;
    uint64_t v45 = v53;
    [v15 addOperation:v39];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100448B24;
    v33[3] = &unk_100751BE8;
    id v23 = v15;
    id v34 = v23;
    id v24 = v20;
    id v35 = v24;
    id v36 = v21;
    uint64_t v38 = v53;
    id v25 = v12;
    id v37 = v25;
    [v22 enumerateInTopologicalOrderWithContext:v36 enumerator:v33];
    uint64_t v26 = +[NSNull null];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100449008;
    v30[3] = &unk_10073FCE0;
    v30[4] = a1;
    id v31 = v28;
    uint64_t v32 = v53;
    id v27 = [v23 evaluateWithInput:v26 completion:v30];

    _Block_object_dispose(v53, 8);
  }
}

void sub_10044494C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100444964(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(NSObject **)(v6 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  long long v8 = *(_OWORD *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 64);
  long long v18 = v8;
  block[2] = sub_100444A40;
  block[3] = &unk_1007517F8;
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = v9;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_100444A40(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)
    || [*(id *)(a1 + 32) isCanceled])
  {
    sub_100444B34(*(void *)(a1 + 40), *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40));
    sub_100444C30(*(void *)(a1 + 40), *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(void **)(a1 + 48));
  }
  uint64_t v2 = *(void *)(a1 + 64);
  id v5 = [*(id *)(a1 + 56) copy];
  id v3 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) deviceOwnedKeyMaterials];
  id v4 = [v3 copy];
  (*(void (**)(uint64_t, id, id, void))(v2 + 16))(v2, v5, v4, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40));
}

void sub_100444B34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = [v5 pass];
    long long v8 = [v7 uniqueID];

    id v9 = [v5 deviceOwnedKeyMaterials];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1004490F4;
    v11[3] = &unk_100751C10;
    void v11[4] = v9;
    id v12 = v8;
    id v13 = v5;
    id v10 = v8;
    [v6 enumerateCapabilities:v11];
  }
}

void sub_100444C30(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1 && os_variant_has_internal_ui())
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Reporting registration failure!", v16, 2u);
    }

    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    id v12 = [v8 domain];
    [v11 setObject:v12 forKeyedSubscript:@"error.domain"];

    id v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 code]);
    [v11 setObject:v13 forKeyedSubscript:@"error.code"];

    id v14 = objc_msgSend(v9, "pk_arrayByApplyingBlock:", &stru_100751AD0);
    [v11 setObject:v14 forKeyedSubscript:@"capabilities"];

    id v15 = objc_alloc_init((Class)PKAutoBugCaptureReporter);
    [v15 reportIssueWithDomain:PKAutoBugCaptureReporterDomainWallet type:@"AuxiliaryCapabilityManager" subtype:@"RegistrationFailure" subtypeContext:v7 payload:v11];
  }
}

void sub_100444E70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 64);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100444F04;
  v3[3] = &unk_10072E198;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_100444F04(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 secureElementPass];

  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100444FD0;
  v6[3] = &unk_10072F6E8;
  id v7 = v3;
  id v5 = v3;
  [v4 registerAuxiliaryCapabilitiesForPass:v5 force:1 sessionExchangeToken:0 completion:v6];
}

void sub_100444FD0(uint64_t a1, void *a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = a2;
    id v7 = [v5 uniqueID];

    int v8 = 138412546;
    id v9 = v7;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "registerAuxiliaryCapabilityForPassUniqueIdentifier: Auxiliary registration finished for pass: %@, with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1004451A8(uint64_t a1)
{
}

void sub_1004451C0(uint64_t a1, void *a2, int a3, void *a4, char a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a6;
  if (a1)
  {
    id v14 = [v11 uniqueID];
    if (PKAuxiliaryCapabilityManagerDisabled())
    {
      id v15 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Skipping capability registration for %@ because manager disabled", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      id v16 = [v11 devicePaymentApplications];
      id v17 = [v16 count];

      if (v17)
      {
        if (a3) {
          [*(id *)(a1 + 8) updateAuxiliaryRegistrationRequirementsForPass:v11 isRegistered:0];
        }
        long long v18 = sub_10044593C(a1, v11, a3);
        if (v18)
        {
          id v19 = [*(id *)(a1 + 80) objectForKeyedSubscript:v14];

          if (v19)
          {
            id v20 = [*(id *)(a1 + 80) objectForKeyedSubscript:v14];
            id v21 = objc_retainBlock(v13);
            [v20 addObject:v21];

            id v22 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v14;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Pass %@ is already being registered - coalescing request", (uint8_t *)&buf, 0xCu);
            }
          }
          else
          {
            id v23 = objc_alloc((Class)NSMutableArray);
            id v24 = objc_retainBlock(v13);
            id v25 = objc_msgSend(v23, "initWithObjects:", v24, 0);
            [*(id *)(a1 + 80) setObject:v25 forKeyedSubscript:v14];

            id v26 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
            *(void *)&long long buf = 0;
            *((void *)&buf + 1) = &buf;
            uint64_t v61 = 0x3032000000;
            id v62 = sub_100441778;
            id v63 = sub_100441788;
            uint64_t v64 = @"initial";
            v58[0] = 0;
            v58[1] = v58;
            v58[2] = 0x3032000000;
            v58[3] = sub_100441778;
            void v58[4] = sub_100441788;
            id v59 = 0;
            v56[0] = 0;
            v56[1] = v56;
            v56[2] = 0x3032000000;
            v56[3] = sub_100441778;
            v56[4] = sub_100441788;
            id v57 = 0;
            v51[0] = _NSConcreteStackBlock;
            v51[1] = 3221225472;
            v51[2] = sub_1004459E8;
            v51[3] = &unk_100751848;
            v55 = v56;
            p_long long buf = &buf;
            v51[4] = a1;
            id v30 = v18;
            id v52 = v30;
            id v29 = v14;
            id v53 = v29;
            [v26 addOperation:v51];
            v49[0] = 0;
            v49[1] = v49;
            v49[2] = 0x3032000000;
            v49[3] = sub_100441778;
            v49[4] = sub_100441788;
            id v50 = 0;
            v42[0] = _NSConcreteStackBlock;
            v42[1] = 3221225472;
            v42[2] = sub_100445B3C;
            v42[3] = &unk_100751870;
            uint64_t v45 = &buf;
            id v46 = v56;
            v42[4] = a1;
            id v43 = v11;
            id v44 = v12;
            id v47 = v49;
            id v48 = v58;
            [v26 addOperation:v42];
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_100445CFC;
            v41[3] = &unk_1007517D0;
            v41[4] = a1;
            v41[5] = &buf;
            v41[6] = v56;
            v41[7] = v49;
            v41[8] = v58;
            [v26 addOperation:v41];
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3221225472;
            v40[2] = sub_100445E80;
            v40[3] = &unk_1007517D0;
            v40[4] = a1;
            void v40[5] = &buf;
            v40[6] = v49;
            v40[7] = v56;
            v40[8] = v58;
            [v26 addOperation:v40];
            v39[0] = _NSConcreteStackBlock;
            v39[1] = 3221225472;
            v39[2] = sub_100446374;
            v39[3] = &unk_1007517D0;
            void v39[4] = a1;
            v39[5] = &buf;
            v39[6] = v56;
            v39[7] = v49;
            v39[8] = v58;
            [v26 addOperation:v39];
            id v27 = +[NSNull null];
            v31[0] = _NSConcreteStackBlock;
            v31[1] = 3221225472;
            v31[2] = sub_10044671C;
            v31[3] = &unk_100751910;
            void v31[4] = a1;
            id v34 = v58;
            id v35 = v56;
            id v36 = v49;
            char v38 = a5;
            id v37 = &buf;
            id v32 = v30;
            id v33 = v29;
            id v28 = [v26 evaluateWithInput:v27 completion:v31];

            _Block_object_dispose(v49, 8);
            _Block_object_dispose(v56, 8);

            _Block_object_dispose(v58, 8);
            _Block_object_dispose(&buf, 8);
          }
        }
        else
        {
          (*((void (**)(id, void))v13 + 2))(v13, 0);
        }

        goto LABEL_20;
      }
      id v15 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Skipping capability registration for %@ because pass missing payment application", (uint8_t *)&buf, 0xCu);
      }
    }

    (*((void (**)(id, void))v13 + 2))(v13, 0);
LABEL_20:
  }
}

void sub_1004458F0(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

id sub_10044593C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1 && PKPassEligibleForAuxiliaryCapabilityRegistration(v5))
  {
    id v7 = [*(id *)(a1 + 8) unregisteredAuxiliaryCapabilityRequirementsForPass:v6];
    id v8 = [v7 mutableCopy];

    if (a3)
    {
      id v9 = v8;
    }
    else
    {
      objc_msgSend(v8, "pk_objectsPassingTest:", &stru_1007519C8);
      id v9 = (id)objc_claimAutoreleasedReturnValue();
    }
    __int16 v10 = v9;
  }
  else
  {
    __int16 v10 = 0;
  }

  return v10;
}

void sub_1004459E8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateProviders";

  uint64_t v10 = sub_1004438C8(*(PDARRISO18013DecryptionProvider **)(a1 + 32), *(void **)(a1 + 40), 0);
  uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  if ([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count])
  {
    v7[2](v7, v6, 0);
  }
  else
  {
    id v13 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      int v15 = 138412290;
      uint64_t v16 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Pass %@ has no valid providers for unregistered requirements", (uint8_t *)&v15, 0xCu);
    }

    v7[2](v7, v6, 1);
  }
}

void sub_100445B3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"CreateContext";

  uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v13 = *(void **)(a1 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100445C50;
  v16[3] = &unk_100751730;
  long long v19 = *(_OWORD *)(a1 + 72);
  id v17 = v6;
  id v18 = v7;
  id v14 = v6;
  id v15 = v7;
  sub_100443C94(v11, v10, v12, v13, v16);
}

void sub_100445C50(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v11 != 0);
}

void sub_100445CFC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1[5] + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"GenerateKeys";

  uint64_t v10 = a1[4];
  id v11 = *(void **)(*(void *)(a1[6] + 8) + 40);
  id v12 = *(void **)(*(void *)(a1[7] + 8) + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100445E0C;
  v16[3] = &unk_1007307C0;
  uint64_t v13 = a1[8];
  id v18 = v7;
  uint64_t v19 = v13;
  id v17 = v6;
  id v14 = v6;
  id v15 = v7;
  sub_1004445A4(v10, v11, v12, 0, v16);
}

void sub_100445E0C(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v4 != 0);
}

void sub_100445E80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"RegisterKeys";

  uint64_t v10 = *(void **)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v15[1] = 3221225472;
  v15[2] = sub_100445F8C;
  v15[3] = &unk_100751898;
  long long v18 = v11;
  uint64_t v19 = *(void *)(a1 + 64);
  id v16 = v6;
  id v17 = v7;
  void v15[4] = v10;
  id v13 = v6;
  id v14 = v7;
  sub_1004461B0(v10, v12, v15);
}

void sub_100445F8C(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2) {
    sub_100446038(a1[4], *(void **)(*(void *)(a1[7] + 8) + 40), a2, *(void **)(*(void *)(a1[8] + 8) + 40));
  }
  uint64_t v6 = *(void *)(a1[9] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  (*(void (**)(uint64_t, uint64_t, BOOL))(a1[6] + 16))(a1[6], a1[5], v8 != 0);
}

void sub_100446038(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = a4;
    id v9 = a2;
    uint64_t v10 = [v9 deviceOwnedKeyMaterials];
    long long v11 = [v9 serverOwnedKeyMaterials];

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10044AA2C;
    v18[3] = &unk_100751D28;
    id v19 = v10;
    id v20 = v11;
    id v12 = v11;
    id v13 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10044AB78;
    v15[3] = &unk_100751D50;
    id v17 = objc_retainBlock(v18);
    id v16 = v7;
    id v14 = v17;
    [v8 enumerateCapabilities:v15];
  }
}

void sub_1004461B0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = [v5 pass];
    id v8 = [v7 uniqueID];

    if ([v5 hasKeyMaterialToRegister])
    {
      id v9 = sub_10044A26C(a1, v5);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10044A468;
      v12[3] = &unk_100731A10;
      id v13 = v8;
      id v14 = v9;
      id v15 = a1;
      id v16 = v6;
      id v10 = v9;
      sub_10044754C((uint64_t)a1, v5, v12);
    }
    else
    {
      long long v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No key material to register for %@", buf, 0xCu);
      }

      (*((void (**)(id, void, void))v6 + 2))(v6, 0, 0);
    }
  }
}

void sub_100446374(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1[5] + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = @"StoreKeys";

  uint64_t v10 = a1[4];
  long long v11 = *(void **)(*(void *)(a1[6] + 8) + 40);
  id v12 = *(void **)(*(void *)(a1[7] + 8) + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100446480;
  v16[3] = &unk_1007307C0;
  uint64_t v13 = a1[8];
  id v18 = v7;
  uint64_t v19 = v13;
  id v17 = v6;
  id v14 = v6;
  id v15 = v7;
  sub_1004464F4(v10, v11, v12, v16);
}

void sub_100446480(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v4 != 0);
}

void sub_1004464F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = [v8 pass];
    long long v11 = [v10 uniqueID];
    v24[0] = 0;
    v24[1] = v24;
    v24[2] = 0x3032000000;
    v24[3] = sub_100441778;
    void v24[4] = sub_100441788;
    id v25 = 0;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100449208;
    v19[3] = &unk_100751C60;
    id v12 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    id v20 = v12;
    id v13 = v11;
    id v21 = v13;
    id v22 = v8;
    id v23 = v24;
    [v7 enumerateCapabilities:v19];
    id v14 = +[NSNull null];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100449618;
    v16[3] = &unk_10073FCE0;
    void v16[4] = a1;
    id v17 = v9;
    id v18 = v24;
    id v15 = [v12 evaluateWithInput:v14 completion:v16];

    _Block_object_dispose(v24, 8);
  }
}

void sub_100446704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10044671C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(NSObject **)(v6 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100446804;
  block[3] = &unk_1007518E8;
  id v12 = v5;
  uint64_t v13 = v6;
  long long v8 = *(_OWORD *)(a1 + 56);
  char v18 = *(unsigned char *)(a1 + 88);
  long long v9 = *(_OWORD *)(a1 + 72);
  long long v16 = v8;
  long long v17 = v9;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_100446804(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)
    || [*(id *)(a1 + 32) isCanceled])
  {
    sub_100444B34(*(void *)(a1 + 40), *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40));
    if (*(unsigned char *)(a1 + 96)) {
      sub_100444C30(*(void *)(a1 + 40), *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(void **)(a1 + 48));
    }
    int v2 = 0;
  }
  else
  {
    int v2 = 1;
  }
  sub_1004469F8(*(void *)(a1 + 40), *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40));
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"N";
    if (v2) {
      CFStringRef v4 = @"Y";
    }
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    *(_DWORD *)long long buf = 138412802;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    CFStringRef v12 = v4;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registered auxiliary requirements for pass %@. success: %@ error: %@", buf, 0x20u);
  }

  id v7 = [*(id *)(*(void *)(a1 + 40) + 80) objectForKey:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 40) + 80) removeObjectForKey:*(void *)(a1 + 56)];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100446AF4;
  v8[3] = &unk_1007518C0;
  void v8[4] = *(void *)(a1 + 64);
  [v7 enumerateObjectsUsingBlock:v8];
}

void sub_1004469F8(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = [v5 requirementsSuccessfullyRegistered];
    long long v8 = [v5 pass];

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10044A1E0;
    v11[3] = &unk_100751C10;
    id v12 = v7;
    uint64_t v13 = a1;
    id v14 = v8;
    id v9 = v8;
    id v10 = v7;
    [v6 enumerateCapabilities:v11];
  }
}

uint64_t sub_100446AF4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
}

void sub_100446B14(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v10 = *(void **)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100446C00;
  v13[3] = &unk_100751938;
  uint64_t v17 = *(void *)(a1 + 72);
  long long v16 = *(_OWORD *)(a1 + 56);
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  sub_100443C94(v8, v9, v10, 0, v13);
}

void sub_100446C00(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  [*(id *)(*(void *)(a1[6] + 8) + 40) setSource:a1[8]];
  uint64_t v9 = *(void *)(a1[7] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v11 != 0);
}

void sub_100446CC0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[4];
  uint64_t v9 = (void *)a1[5];
  id v10 = *(void **)(*(void *)(a1[6] + 8) + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100446DA8;
  v14[3] = &unk_1007307C0;
  uint64_t v11 = a1[7];
  id v16 = v7;
  uint64_t v17 = v11;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  sub_100446E1C(v8, v9, v10, v14);
}

void sub_100446DA8(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v4 != 0);
}

void sub_100446E1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    unint64_t v10 = (unint64_t)[v8 source];
    unsigned int v11 = (v10 < 4) & (0xDu >> (v10 & 0xF));
    BOOL v12 = [v8 source] == 0;
    id v13 = [v8 pass];
    id v14 = [v13 uniqueID];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100449704;
    v22[3] = &unk_100751CD8;
    id v23 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    uint64_t v24 = a1;
    BOOL v29 = v12;
    id v25 = v13;
    id v26 = v14;
    char v30 = v11;
    id v27 = v8;
    id v28 = v7;
    id v15 = v14;
    id v16 = v13;
    id v17 = v23;
    [v28 enumerateInTopologicalOrderWithContext:v27 enumerator:v22];
    char v18 = +[NSNull null];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10044A0FC;
    void v20[3] = &unk_100747FA8;
    v20[4] = a1;
    id v21 = v9;
    id v19 = [v17 evaluateWithInput:v18 completion:v20];
  }
}

void sub_100447040(uint64_t a1)
{
  int v2 = *(NSObject **)(*(void *)(a1 + 32) + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004470F4;
  block[3] = &unk_100751988;
  id v6 = *(id *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 48);
  id v3 = (id)v4;
  long long v7 = v4;
  dispatch_async(v2, block);
}

uint64_t sub_1004470F4(void *a1)
{
  int v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void *)(*(void *)(a1[6] + 8) + 40);
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finished checking registration status for pass %@. error: %@", (uint8_t *)&v6, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[5] + 16))();
}

BOOL sub_1004471D0(id a1, PKPassAuxiliaryRegistrationRequirement *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)[(PKPassAuxiliaryRegistrationRequirement *)v4 registrationBackoffCounter];
  if (v5 >= 26)
  {
    int v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Excluding unregistered requirement because max backoff count reached. %@", (uint8_t *)&v8, 0xCu);
    }
  }
  return v5 < 26;
}

id sub_1004472A4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 requiresNFSESessionForOperation:0];
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void *)(v7 + 24);
  switch(v8)
  {
    case 1:
      if (result) {
        return result;
      }
      goto LABEL_7;
    case 0:
      uint64_t v9 = 1;
      if (!result) {
        uint64_t v9 = 2;
      }
      *(void *)(v7 + 24) = v9;
      return result;
    case 2:
      int v10 = (int)result;
      break;
    default:
      int v10 = 0;
      break;
  }
  if (v10 == 1)
  {
LABEL_7:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10044732C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setSeSession:a2];
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v8 = NSDebugDescriptionErrorKey;
    CFStringRef v9 = @"Failed to obtain NFSecureElementManagerSession with token for auxiliary capability register.";
    int v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    uint64_t v7 = +[NSError errorWithDomain:v5 code:-1 userInfo:v6];
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v7);
  }
}

uint64_t sub_100447470(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100447480(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100447538;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_sync(v4, v7);
}

uint64_t sub_100447538(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10044754C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = [a2 seSession];
    if (v6)
    {
      v5[2](v5, v6);
    }
    else
    {
      uint64_t v7 = *(void **)(a1 + 24);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_100447628;
      v8[3] = &unk_100731A38;
      void v8[4] = a1;
      id v9 = v5;
      [v7 accessSecureElementManagerSessionWithHandler:v8];
    }
  }
}

void sub_100447628(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004476E0;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_sync(v4, v7);
}

uint64_t sub_1004476E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1004476F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Checking server for registration state", buf, 2u);
    }

    id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    *(void *)long long buf = 0;
    id v16 = buf;
    uint64_t v17 = 0x3032000000;
    char v18 = sub_100441778;
    id v19 = sub_100441788;
    id v20 = 0;
    v13[0] = 0;
    v13[1] = v13;
    v13[2] = 0x3032000000;
    v13[3] = sub_100441778;
    void v13[4] = sub_100441788;
    id v14 = 0;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100447980;
    v12[3] = &unk_100736BF8;
    void v12[4] = a1;
    void v12[5] = buf;
    v12[6] = v13;
    [v5 addOperation:v12];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100447D1C;
    v11[3] = &unk_10072E610;
    void v11[4] = a1;
    void v11[5] = v13;
    [v5 addOperation:v11];
    id v6 = +[NSNull null];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_1004480C4;
    v8[3] = &unk_10073DAA0;
    int v10 = buf;
    id v9 = v3;
    id v7 = [v5 evaluateWithInput:v6 completion:v8];

    _Block_object_dispose(v13, 8);
    _Block_object_dispose(buf, 8);
  }
}

void sub_10044795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100447980(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init((Class)PKAuxiliaryCapabilityRegistrationStateRequest);
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(void **)(v9 + 16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100447A80;
  v14[3] = &unk_100751A90;
  id v15 = v8;
  uint64_t v16 = v9;
  long long v19 = *(_OWORD *)(a1 + 40);
  id v17 = v6;
  id v18 = v7;
  id v11 = v6;
  id v12 = v7;
  id v13 = v8;
  [v10 performHandlerOnSharedWebServiceQueue:v14];
}

void sub_100447A80(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100447B4C;
  v8[3] = &unk_100751A68;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 72);
  void v8[4] = *(void *)(a1 + 40);
  uint64_t v11 = v5;
  long long v7 = *(_OWORD *)(a1 + 56);
  id v6 = (id)v7;
  long long v10 = v7;
  id v9 = *(id *)(a1 + 48);
  [a2 checkAuxiliaryCapabilityRegistrationStateWithRequest:v4 completion:v8];
}

void sub_100447B4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = *(NSObject **)(*(void *)(a1 + 32) + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100447C5C;
  block[3] = &unk_100751A40;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = a2;
  id v15 = v8;
  id v16 = v7;
  long long v13 = *(_OWORD *)(a1 + 48);
  id v10 = (id)v13;
  long long v18 = v13;
  id v17 = *(id *)(a1 + 40);
  id v11 = v7;
  id v12 = v8;
  dispatch_async(v9, block);
}

uint64_t sub_100447C5C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = v2;
  if (!v2)
  {
    if (*(void *)(a1 + 80) == 1) {
      goto LABEL_6;
    }
    id v3 = PDBasicError();
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v3);
  if (!v2) {

  }
LABEL_6:
  uint64_t v4 = [*(id *)(a1 + 40) unregisteredRequirements];
  uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v7();
}

void sub_100447D1C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v27 = a3;
  id v26 = a4;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v6 = a1;
  id obj = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v30 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v30)
  {
    uint64_t v29 = *(void *)v39;
    do
    {
      for (unint64_t i = 0; i != v30; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v29) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        id v9 = *(void **)(*(void *)(v6 + 32) + 8);
        id v10 = objc_msgSend(v8, "dpanIdentifier", v26);
        id v11 = [v9 paymentApplicationWithDPANIdentifier:v10];

        id v12 = [*(id *)(*(void *)(v6 + 32) + 8) passWithPaymentApplication:v11];
        long long v13 = [v12 secureElementPass];

        if (v13)
        {
          id v31 = v11;
          id v32 = i;
          uint64_t v33 = [v13 uniqueID];
          id v14 = [v8 requirementIdentifiers];
          long long v34 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          id v15 = [v13 auxiliaryRegistrationRequirements];
          id v16 = [v15 allRequirements];

          id v17 = [v16 countByEnumeratingWithState:&v34 objects:v46 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v35;
            do
            {
              for (j = 0; j != v18; j = (char *)j + 1)
              {
                if (*(void *)v35 != v19) {
                  objc_enumerationMutation(v16);
                }
                id v21 = *(void **)(*((void *)&v34 + 1) + 8 * (void)j);
                id v22 = [v21 identifier];
                unsigned int v23 = [v14 containsObject:v22];

                if (v23)
                {
                  uint64_t v24 = PKLogFacilityTypeGetObject();
                  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 138412546;
                    uint64_t v43 = v33;
                    __int16 v44 = 2112;
                    uint64_t v45 = v21;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Server requested to update registration status to NO for pass %@ for requirement: %@", buf, 0x16u);
                  }

                  [v21 setRegistrationBackoffCounter:0];
                  [*(id *)(*(void *)(v6 + 32) + 8) updateAuxiliaryRegistrationRequirement:v21 pass:v13 isRegistered:0];
                }
              }
              id v18 = [v16 countByEnumeratingWithState:&v34 objects:v46 count:16];
            }
            while (v18);
          }

          id v11 = v31;
          unint64_t i = v32;
          id v25 = v33;
        }
        else
        {
          id v25 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v43 = (uint64_t)v8;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Unable to find pass for unregistered requirements %@", buf, 0xCu);
          }
        }
      }
      id v30 = [obj countByEnumeratingWithState:&v38 objects:v47 count:16];
    }
    while (v30);
  }

  v26[2](v26, v27, 0);
}

void sub_1004480C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v9 = PKLogFacilityTypeGetObject();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      int v14 = 138412290;
      uint64_t v15 = v8;
      id v11 = "Failed to check registration state, error %@";
      id v12 = v9;
      uint32_t v13 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v14, v13);
    }
  }
  else if (v10)
  {
    LOWORD(v14) = 0;
    id v11 = "Finished checking server for registration state";
    id v12 = v9;
    uint32_t v13 = 2;
    goto LABEL_6;
  }

  (*(void (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

id sub_1004481EC(id a1, PKPassAuxiliaryRegistrationRequirement *a2)
{
  return [(PKPassAuxiliaryRegistrationRequirement *)a2 identifier];
}

void sub_1004481F4(uint64_t a1, void *a2, void *a3)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100448300;
  v10[3] = &unk_100751B20;
  id v11 = a2;
  id v12 = a3;
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 64);
  id v13 = v6;
  uint64_t v16 = v7;
  char v17 = *(unsigned char *)(a1 + 72);
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 56);
  id v8 = v12;
  id v9 = v11;
  [v5 addOperation:v10];
}

void sub_100448300(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  id v8 = [*(id *)(a1 + 32) keyCreationMetadata];

  if (v8)
  {
    v7[2](v7, v6, 0);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v9 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100448450;
    v12[3] = &unk_100751AF8;
    uint64_t v18 = *(void *)(a1 + 72);
    char v19 = *(unsigned char *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 64);
    char v17 = v7;
    id v16 = v6;
    [v9 requiresMetadataToGenerateKeyMaterial:v10 context:v11 completion:v12];
  }
}

void sub_100448450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
  }
  else if (v5 && *(unsigned char *)(a1 + 80))
  {
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v13 = 138412546;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      uint64_t v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Missing required local metadata for pass %@ for requirement: %@", (uint8_t *)&v13, 0x16u);
    }

    uint64_t v10 = PDBasicError();
    uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
  else
  {
    [*(id *)(a1 + 48) safelyAddObject:v5];
  }
  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), *(void *)(a1 + 56), *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) != 0);
}

void sub_1004485AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Requesting key creation metadata for pass %@", buf, 0xCu);
    }

    uint64_t v10 = *(void **)(*(void *)(a1 + 48) + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100448774;
    v13[3] = &unk_100751B98;
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 64);
    id v11 = *(id *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 72);
    id v17 = v11;
    uint64_t v20 = v12;
    id v19 = v7;
    id v18 = v6;
    [v10 performHandlerOnSharedWebServiceQueue:v13];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_100448774(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)PKAuxiliaryCapabilityKeyCreationMetadataRequest);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) pass];
  id v7 = [v4 initWithCapabilityStates:v5 pass:v6];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1004488A8;
  v10[3] = &unk_100751B70;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 72);
  id v8 = (id)v9;
  long long v14 = v9;
  id v13 = *(id *)(a1 + 64);
  [v3 auxiliaryCapabilityKeyCreationMetadataWithRequest:v7 completion:v10];
}

void sub_1004488A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) capabilities];
  id v8 = [v5 entriesForCapabilities:v7];

  if (!v5 || v6)
  {
    uint64_t v20 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v31 = v21;
      __int16 v32 = 2112;
      id v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Failed to fetch key creation metadata from server for pass %@ error %@", buf, 0x16u);
    }

    uint64_t v22 = v6;
    if (!v6)
    {
      uint64_t v22 = PDBasicError();
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v22);
    if (!v6) {

    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    unsigned int v23 = v8;
    id v24 = v5;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v26;
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v12) {
            objc_enumerationMutation(v9);
          }
          long long v14 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          id v15 = *(void **)(a1 + 32);
          id v16 = objc_msgSend(v14, "capability", v23, v24, (void)v25);
          id v17 = [v16 identifier];
          id v18 = [v15 capabilityForIdentifier:v17];

          id v19 = [v14 metadata];
          [v18 setKeyCreationMetadata:v19];
        }
        id v11 = [v9 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v11);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    id v8 = v23;
    id v5 = v24;
  }
}

void sub_100448B24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100448C2C;
  v12[3] = &unk_1007447A0;
  id v7 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v6;
  id v16 = *(id *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 56);
  id v8 = (id)v11;
  long long v17 = v11;
  id v9 = v6;
  id v10 = v5;
  [v7 addOperation:v12];
}

void sub_100448C2C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v28 = v9;
    __int16 v29 = 2112;
    uint64_t v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Creating key for pass %@ for requirement: %@", buf, 0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 40);
  long long v11 = *(void **)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100448DEC;
  v19[3] = &unk_100751BC0;
  id v20 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 72);
  id v21 = v14;
  uint64_t v26 = v15;
  id v22 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v24 = v6;
  id v25 = v7;
  id v23 = v16;
  id v17 = v6;
  id v18 = v7;
  [v11 generateKeyMaterialForRequirement:v12 context:v13 completion:v19];
}

void sub_100448DEC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      int v21 = 138412802;
      uint64_t v22 = v11;
      __int16 v23 = 2112;
      uint64_t v24 = v12;
      __int16 v25 = 2112;
      id v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to create key for pass %@ for requirement: %@. Error: %@", (uint8_t *)&v21, 0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), a4);
    goto LABEL_10;
  }
  if (v7)
  {
    uint64_t v13 = [*(id *)(a1 + 48) deviceOwnedKeyMaterials];
    [v13 setObject:v7 forKey:*(void *)(a1 + 40)];

    if (!v8) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  id v14 = *(void **)(a1 + 56);
  uint64_t v15 = [*(id *)(a1 + 40) identifier];
  [v14 addObject:v15];

  if (v8)
  {
LABEL_9:
    id v16 = *(void **)(a1 + 56);
    id v17 = [v8 allObjects];
    [v16 addObjectsFromArray:v17];

    goto LABEL_10;
  }
  id v18 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 40);
    int v21 = 138412546;
    uint64_t v22 = v19;
    __int16 v23 = 2112;
    uint64_t v24 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "WARNING: Empty key generation response found with pass %@ for requirement: %@", (uint8_t *)&v21, 0x16u);
  }

LABEL_10:
  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 72) + 16))(*(void *)(a1 + 72), *(void *)(a1 + 64), *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) != 0);
}

void sub_100449008(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 64);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004490D8;
    v7[3] = &unk_100736600;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    id v8 = v4;
    uint64_t v9 = v5;
    dispatch_async(v3, v7);
  }
  else
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v6();
  }
}

uint64_t sub_1004490D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1004490F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (void *)a1[4];
  id v7 = a3;
  id v8 = [v6 objectForKey:v5];
  uint64_t v9 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[5];
    int v11 = 138412546;
    uint64_t v12 = v10;
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Cleaning up for newly created keys for pass %@ for requirement: %@", (uint8_t *)&v11, 0x16u);
  }

  [v7 requirementRegistrationFailed:v8 forRequirement:v5 context:a1[6]];
}

void sub_100449208(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1004492F4;
  v12[3] = &unk_100734040;
  id v7 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v6;
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  id v16 = v8;
  uint64_t v17 = v9;
  id v10 = v6;
  id v11 = v5;
  [v7 addOperation:v12];
}

void sub_1004492F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v30 = v9;
    __int16 v31 = 2112;
    uint64_t v32 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Storing key material for pass %@ for requirement: %@", buf, 0x16u);
  }

  id v11 = *(void **)(a1 + 48);
  uint64_t v12 = [*(id *)(a1 + 56) deviceOwnedKeyMaterials];
  id v13 = [v12 objectForKey:*(void *)(a1 + 40)];
  id v14 = [*(id *)(a1 + 56) serverOwnedKeyMaterials];
  id v15 = [v14 objectForKey:*(void *)(a1 + 40)];
  uint64_t v16 = *(void *)(a1 + 56);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100449500;
  v22[3] = &unk_100751C38;
  uint64_t v17 = *(void *)(a1 + 40);
  id v23 = *(id *)(a1 + 32);
  id v24 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 64);
  id v27 = v7;
  uint64_t v28 = v19;
  id v25 = v18;
  id v26 = v6;
  id v20 = v6;
  id v21 = v7;
  [v11 requirementRegistrationSuccess:v13 serverKeyMaterial:v15 forRequirement:v17 context:v16 completion:v22];
}

void sub_100449500(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Failed to store key material for pass %@ error %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    id v4 = [*(id *)(a1 + 40) requirementsSuccessfullyRegistered];
    [v4 addObject:*(void *)(a1 + 48)];
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v9 = *(void **)(v6 + 40);
  id v7 = (id *)(v6 + 40);
  id v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v3;
  }
  objc_storeStrong(v7, v10);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100449618(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 64);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004496E8;
    v7[3] = &unk_100736600;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    id v8 = v4;
    uint64_t v9 = v5;
    dispatch_async(v3, v7);
  }
  else
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v6();
  }
}

uint64_t sub_1004496E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100449704(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100449828;
  v12[3] = &unk_100751CB0;
  id v7 = *(void **)(a1 + 32);
  id v8 = *(void **)(a1 + 48);
  void v12[4] = *(void *)(a1 + 40);
  id v13 = v5;
  id v14 = v8;
  char v19 = *(unsigned char *)(a1 + 80);
  id v9 = *(id *)(a1 + 56);
  char v20 = *(unsigned char *)(a1 + 81);
  id v15 = v9;
  id v16 = v6;
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v10 = v6;
  id v11 = v5;
  [v7 addOperation:v12];
}

void sub_100449828(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  unsigned __int8 v8 = [*(id *)(*(void *)(a1 + 32) + 8) isAuxiliaryRegistrationRequirementRegistered:*(void *)(a1 + 40) pass:*(void *)(a1 + 48)];
  if (v8)
  {
    if (([*(id *)(a1 + 40) canLocallyInvalidateRegistrationState] & 1) == 0)
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = *(void *)(a1 + 56);
        uint64_t v27 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v41 = v26;
        __int16 v42 = 2112;
        uint64_t v43 = v27;
        uint64_t v12 = "Requirement is registered and canLocallyInvalidateRegistrationState is false, skipping. For pass %@ for requirement: %@";
        goto LABEL_16;
      }
LABEL_17:

LABEL_21:
      v7[2](v7, v6, 0);
      goto LABEL_22;
    }
    if (!*(unsigned char *)(a1 + 89))
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v41 = v10;
        __int16 v42 = 2112;
        uint64_t v43 = v11;
        uint64_t v12 = "Requirement is registered and shouldCheckRegisteredRequirement is false, skipping. For pass %@ for requirement: %@";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v12, buf, 0x16u);
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  else if (!*(unsigned char *)(a1 + 88))
  {
    unsigned int v13 = [*(id *)(a1 + 40) canLocallyValidateRegistrationState];
    id v14 = PKLogFacilityTypeGetObject();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (!v13)
    {
      if (v15)
      {
        uint64_t v28 = *(void *)(a1 + 56);
        uint64_t v29 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v41 = v28;
        __int16 v42 = 2112;
        uint64_t v43 = v29;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Registration status already not registered, skipping. For pass %@ for requirement: %@", buf, 0x16u);
      }

      goto LABEL_21;
    }
    if (v15)
    {
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v41 = v16;
      __int16 v42 = 2112;
      uint64_t v43 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Registration status not registered, but allowing local validation. For pass %@ for requirement: %@", buf, 0x16u);
    }
  }
  id v18 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v41 = v19;
    __int16 v42 = 2112;
    uint64_t v43 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Checking registration status for pass %@ for requirement: %@", buf, 0x16u);
  }

  uint64_t v21 = *(void *)(a1 + 40);
  id v23 = *(void **)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 72);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100449BDC;
  v30[3] = &unk_100751C88;
  unsigned __int8 v39 = v8;
  id v31 = *(id *)(a1 + 56);
  id v24 = *(id *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 32);
  id v32 = v24;
  uint64_t v33 = v25;
  id v34 = *(id *)(a1 + 48);
  id v35 = *(id *)(a1 + 80);
  id v36 = *(id *)(a1 + 72);
  long long v38 = v7;
  id v37 = v6;
  [v23 isRegisteredForRequirement:v21 context:v22 completion:v30];

LABEL_22:
}

uint64_t sub_100449BDC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if ((a2 == 1) != (*(unsigned char *)(a1 + 96) == 0))
    {
      if (a2 != 1)
      {
        id v4 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v5 = *(const __CFString **)(a1 + 32);
          uint64_t v6 = *(void *)(a1 + 40);
          int v12 = 138412546;
          CFStringRef v13 = v5;
          __int16 v14 = 2112;
          uint64_t v15 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Capability already not registration for pass %@ for requirement: %@", (uint8_t *)&v12, 0x16u);
        }

LABEL_12:
        sub_100449DA0(*(void *)(a1 + 48), *(void **)(a1 + 40), *(void **)(a1 + 64), *(void **)(a1 + 72));
      }
    }
    else
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v8 = @"No";
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        if (a2 == 1) {
          CFStringRef v8 = @"Yes";
        }
        int v12 = 138412802;
        CFStringRef v13 = v8;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        __int16 v16 = 2112;
        uint64_t v17 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating registration status to '%@' for pass %@ for requirement: %@", (uint8_t *)&v12, 0x20u);
      }

      [*(id *)(a1 + 40) setRegistrationBackoffCounter:0];
      [*(id *)(*(void *)(a1 + 48) + 8) updateAuxiliaryRegistrationRequirement:*(void *)(a1 + 40) pass:*(void *)(a1 + 56) isRegistered:a2 == 1];
      if (a2 != 1) {
        goto LABEL_12;
      }
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 88) + 16))();
}

void sub_100449DA0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v37 = a4;
  if (a1)
  {
    uint64_t v9 = a1;
    uint64_t v10 = [v8 providerForCapability:v7];
    if (objc_opt_respondsToSelector())
    {
      uint64_t v11 = [v10 associatedRequirementsForRequirement:v7 context:v37];
      int v12 = v11;
      if (v11 && [v11 count])
      {
        id v34 = v10;
        id v35 = v7;
        CFStringRef v13 = [v37 pass];
        __int16 v14 = [v8 capabilities];
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        uint64_t v33 = v12;
        id obj = v12;
        id v15 = [obj countByEnumeratingWithState:&v42 objects:v50 count:16];
        if (v15)
        {
          id v16 = v15;
          uint64_t v17 = *(void *)v43;
          id v18 = v41;
          uint64_t v39 = v9;
          do
          {
            uint64_t v19 = 0;
            id v36 = v16;
            do
            {
              if (*(void *)v43 != v17) {
                objc_enumerationMutation(obj);
              }
              uint64_t v20 = *(void *)(*((void *)&v42 + 1) + 8 * (void)v19);
              v40[0] = _NSConcreteStackBlock;
              v40[1] = 3221225472;
              v41[0] = sub_10044A1D4;
              v41[1] = &unk_100751628;
              v41[2] = v20;
              uint64_t v21 = objc_msgSend(v14, "pk_firstObjectPassingTest:", v40);
              if (v21
                && [*(id *)(v9 + 8) isAuxiliaryRegistrationRequirementRegistered:v21 pass:v13])
              {
                uint64_t v22 = v18;
                uint64_t v23 = v17;
                id v24 = v14;
                uint64_t v25 = v13;
                id v26 = v8;
                uint64_t v27 = PKLogFacilityTypeGetObject();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v28 = [v37 pass];
                  uint64_t v29 = [v28 uniqueID];
                  *(_DWORD *)long long buf = 138412546;
                  id v47 = v29;
                  __int16 v48 = 2112;
                  id v49 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Updating registration status to 'NO' for pass %@ for associated requirement: %@", buf, 0x16u);
                }
                [v21 setRegistrationBackoffCounter:0];
                uint64_t v30 = *(void **)(v39 + 8);
                id v31 = [v37 pass];
                id v32 = v30;
                uint64_t v9 = v39;
                [v32 updateAuxiliaryRegistrationRequirement:v21 pass:v31 isRegistered:0];

                id v8 = v26;
                sub_100449DA0(v39, v21, v26, v37);
                CFStringRef v13 = v25;
                __int16 v14 = v24;
                uint64_t v17 = v23;
                id v18 = v22;
                id v16 = v36;
              }

              uint64_t v19 = (char *)v19 + 1;
            }
            while (v16 != v19);
            id v16 = [obj countByEnumeratingWithState:&v42 objects:v50 count:16];
          }
          while (v16);
        }

        uint64_t v10 = v34;
        id v7 = v35;
        int v12 = v33;
      }
    }
  }
}

void sub_10044A0FC(uint64_t a1, int a2)
{
  if (a2)
  {
    int v2 = *(NSObject **)(*(void *)(a1 + 32) + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10044A1C0;
    block[3] = &unk_10072F788;
    id v5 = *(id *)(a1 + 40);
    dispatch_async(v2, block);
  }
  else
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
}

uint64_t sub_10044A1C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10044A1D4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) isReferencing:a2];
}

void sub_10044A1E0(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v6 = a2;
  id v4 = objc_msgSend(v3, "containsObject:");
  if (v4) {
    id v5 = 0;
  }
  else {
    id v5 = (char *)[v6 registrationBackoffCounter] + 1;
  }
  [v6 setRegistrationBackoffCounter:v5];
  [*(id *)(a1[5] + 8) updateAuxiliaryRegistrationRequirement:v6 pass:a1[6] isRegistered:v4];
}

id sub_10044A26C(id a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = [v3 pass];
    a1 = [objc_alloc((Class)PKAuxiliaryCapabilityRegisterRequest) initWithPass:v5];
    id v6 = objc_alloc_init((Class)NSMutableArray);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v7 = objc_msgSend(v5, "devicePaymentApplications", 0);
    id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          int v12 = [*(id *)(*((void *)&v19 + 1) + 8 * i) dpanIdentifier];
          [v6 addObject:v12];
        }
        id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v9);
    }

    id v13 = [v6 copy];
    [a1 setDpanIdentifiers:v13];

    __int16 v14 = [v4 validCertificateIdentifiers];
    id v15 = [v14 allObjects];
    [a1 setValidCertificatesOnDevice:v15];

    id v16 = [v4 deviceOwnedKeyMaterials];
    uint64_t v17 = [v16 dictionaryRepresentation];
    [a1 setDeviceOwnedKeyMaterials:v17];
  }
  return a1;
}

void sub_10044A468(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Signing aux register request for pass %@", buf, 0xCu);
  }

  id v6 = [*(id *)(a1 + 40) _dataToSign];
  id v25 = 0;
  id v24 = 0;
  id v7 = +[PKSecureElement signChallenge:v6 signatureEntanglementMode:1 session:v3 signatureInfo:&v25 error:&v24];
  id v8 = v25;
  id v9 = v24;

  if (v9)
  {
    uint64_t v10 = *(NSObject **)(*(void *)(a1 + 48) + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10044A724;
    block[3] = &unk_10072E598;
    uint64_t v11 = &v23;
    id v23 = *(id *)(a1 + 56);
    id v22 = v9;
    dispatch_async(v10, block);
    int v12 = v22;
  }
  else
  {
    [*(id *)(a1 + 40) setSignatureData:v7];
    [*(id *)(a1 + 40) setSignatureInfo:v8];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v27 = v13;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Performing aux register request for pass %@", buf, 0xCu);
    }

    __int16 v14 = *(void **)(*(void *)(a1 + 48) + 16);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10044A73C;
    v17[3] = &unk_10073C918;
    uint64_t v11 = (id *)v18;
    id v15 = *(id *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    v18[0] = v15;
    v18[1] = v16;
    id v19 = *(id *)(a1 + 32);
    id v20 = *(id *)(a1 + 56);
    [v14 performHandlerOnSharedWebServiceQueue:v17];

    int v12 = v19;
  }
}

uint64_t sub_10044A724(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_10044A73C(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10044A7F4;
  v6[3] = &unk_100751D00;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 registerAuxiliaryCapabilityWithRequest:v4 completion:v6];
}

void sub_10044A7F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = *(NSObject **)(*(void *)(a1 + 32) + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10044A8F4;
  block[3] = &unk_10073FD58;
  id v14 = v8;
  uint64_t v18 = a2;
  id v15 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v16 = v7;
  id v17 = v10;
  id v11 = v7;
  id v12 = v8;
  dispatch_async(v9, block);
}

uint64_t sub_10044A8F4(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2 || a1[8] != 1)
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[5];
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      uint64_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to register key material with server for pass %@ error %@", (uint8_t *)&v7, 0x16u);
    }

    return (*(uint64_t (**)(void))(a1[7] + 16))();
  }
  else
  {
    id v3 = *(uint64_t (**)(void))(a1[7] + 16);
    return v3();
  }
}

void sub_10044AA2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v15 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    id v9 = [*(id *)(a1 + 32) objectForKey:v15];
    if (!v9)
    {
      id v9 = objc_alloc_init((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
      [*(id *)(a1 + 32) setObject:v9 forKey:v15];
    }
    uint64_t v10 = [v9 contents];
    id v11 = [v10 firstObject];
    [v11 setCertificateChain:v7];
  }
  if (v8)
  {
    id v12 = [*(id *)(a1 + 40) objectForKey:v15];
    if (!v12)
    {
      id v12 = objc_alloc_init((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
      [*(id *)(a1 + 40) setObject:v12 forKey:v15];
    }
    uint64_t v13 = [v12 contents];
    id v14 = [v13 firstObject];
    [v14 setCertificateChain:v8];
  }
}

void sub_10044AB78(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v3 = [v11 role];
  if (v3 == (id)2)
  {
    id v6 = v11;
    if ([v6 type] == (id)4)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = [*(id *)(a1 + 32) deviceSignatureCertificateChain];
      uint64_t v9 = [*(id *)(a1 + 32) serverSignatureCertificateChain];
      goto LABEL_8;
    }
LABEL_9:

    uint64_t v5 = v11;
    goto LABEL_10;
  }
  BOOL v4 = v3 == (id)1;
  uint64_t v5 = v11;
  if (v4)
  {
    id v6 = v11;
    if ([v6 type] == (id)4)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = [*(id *)(a1 + 32) deviceDecryptionCertificateChain];
      uint64_t v9 = [*(id *)(a1 + 32) serverDecryptionCertificateChain];
LABEL_8:
      uint64_t v10 = (void *)v9;
      (*(void (**)(uint64_t, id, void *, uint64_t))(v7 + 16))(v7, v6, v8, v9);

      goto LABEL_9;
    }
    goto LABEL_9;
  }
LABEL_10:
}

_TtC5passd26PDARRFidoSignatureProvider *sub_10044AC74(void *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    uint64_t v5 = 0;
    switch((unint64_t)[v3 type])
    {
      case 1uLL:
      case 2uLL:
        id v6 = _TtC5passd35PDARRUnifiedAccessSignatureProvider;
        goto LABEL_5;
      case 3uLL:
        uint64_t v7 = objc_alloc_init(_TtC5passd26PDARRFidoSignatureProvider);
        goto LABEL_14;
      case 5uLL:
        uint64_t v7 = [[PDARRISO18013SignatureProvider alloc] initWithISO18013Manager:a1[5]];
        goto LABEL_14;
      case 6uLL:
        uint64_t v7 = [[_TtC5passd25PDARRCCCSignatureProvider alloc] initWithWebServiceCoordinator:a1[2]];
        goto LABEL_14;
      case 7uLL:
      case 8uLL:
        id v6 = _TtC5passd27PDARRAliroSignatureProvider;
LABEL_5:
        uint64_t v7 = (_TtC5passd26PDARRFidoSignatureProvider *)[[v6 alloc] initWithSubcredentialManager:a1[7]];
        goto LABEL_14;
      case 9uLL:
        id v8 = _TtC5passd33PDARRCoreIDCredAccountKeyProvider;
        goto LABEL_13;
      case 0xAuLL:
        id v8 = _TtC5passd40PDARRISO18013BiometricBindingACLProvider;
        goto LABEL_13;
      case 0xBuLL:
        id v8 = _TtC5passd34PDARRISO18013KeySigningKeyProvider;
        goto LABEL_13;
      case 0xCuLL:
        id v8 = _TtC5passd31PDARRISO18013CredentialProvider;
LABEL_13:
        uint64_t v7 = (_TtC5passd26PDARRFidoSignatureProvider *)[[v8 alloc] initWithIso18013Manager:a1[5]];
LABEL_14:
        uint64_t v5 = v7;
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

PDARRISO18013DecryptionProvider *sub_10044ADD0(PDARRISO18013DecryptionProvider *a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (a1)
  {
    switch((unint64_t)[v3 type])
    {
      case 1uLL:
        uint64_t v5 = [[PDARRISO18013DecryptionProvider alloc] initWithISO18013Manager:a1[2]._isoManager];
        goto LABEL_10;
      case 2uLL:
        id v6 = PDARRSyncedKMLDecryptionProvider;
        goto LABEL_9;
      case 3uLL:
        uint64_t v5 = [[_TtC5passd36PDARRUnifiedAccessDecryptionProvider alloc] initWithSubcredentialManager:a1[3]._isoManager];
        goto LABEL_10;
      case 4uLL:
        uint64_t v5 = [[PDARRBarcodeDecryptionProvider alloc] initWithBarcodeCertificateManager:a1[3].super.isa];
        goto LABEL_10;
      case 5uLL:
        id v6 = _TtC5passd26PDARRCCCDecryptionProvider;
LABEL_9:
        uint64_t v5 = (PDARRISO18013DecryptionProvider *)objc_alloc_init(v6);
LABEL_10:
        a1 = v5;
        break;
      default:
        a1 = 0;
        break;
    }
  }

  return a1;
}

BOOL sub_10044AED0(id a1, PKSecureElementPass *a2, BOOL *a3)
{
  return PKPassEligibleForAuxiliaryCapabilityRegistration(a2);
}

void sub_10044AED8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10044AF9C;
  v11[3] = &unk_100731538;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  sub_1004476F4(v8, v11);
}

uint64_t sub_10044AF9C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10044AFB4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 64);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10044B07C;
  v11[3] = &unk_10072E598;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_10044B07C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10044B094(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  if (*(unsigned char *)(a1 + 48)) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 2;
  }
  id v11 = *(PDARRISO18013DecryptionProvider **)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10044B178;
  v14[3] = &unk_100731538;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v8;
  sub_1004423E0(v11, v10, v9, v14);
}

uint64_t sub_10044B178(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10044B190(int8x16_t *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  int8x16_t v8 = vextq_s8(a1[2], a1[2], 8uLL);
  uint64_t v9 = a1[2].i64[0];
  block[2] = sub_10044B26C;
  block[3] = &unk_10072E3F0;
  __int8 v10 = a1[3].i8[0];
  id v11 = *(NSObject **)(v9 + 64);
  __int8 v18 = v10;
  int8x16_t v15 = v8;
  id v16 = v6;
  id v17 = v7;
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v11, block);
}

void sub_10044B26C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64)) {
    char v2 = 1;
  }
  else {
    char v2 = [*(id *)(a1 + 32) isIdentityPass];
  }
  BOOL v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10044B344;
  v5[3] = &unk_100731538;
  id v7 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  sub_1004451C0(v3, v4, 0, 0, v2, v5);
}

uint64_t sub_10044B344(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10044B35C(id a1, BOOL a2, NSNull *a3, PKCancelable *a4)
{
  BOOL v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished scheduled check of pass registration state", v5, 2u);
  }
}

void sub_10044B4C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [a3 auxiliaryRegistrationRequirementPushTopic];
  objc_msgSend(v3, "pk_safelyAddObject:", v4);
}

void sub_10044BAA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKMapsBrand);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_10044BC88(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc_init((Class)PKMapsBrand);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];
  uint64_t v9 = +[NSNumber numberWithLongLong:a2];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  __int8 v10 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v9, 0);
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v17;
    do
    {
      id v14 = 0;
      do
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        int8x16_t v15 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v14) merchant];
        [v15 setMapsBrand:v8];

        id v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v12);
  }
}

void sub_10044C20C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10044C398(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKMapsBrand);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10044C9F8(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  -[PKMapsBrand setIdentifier:](v4, "setIdentifier:", [a3 unsignedLongLongValue]);
}

void sub_10044CA50(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  -[PKMapsBrand setResultProviderIdentifier:](v4, "setResultProviderIdentifier:", [a3 intValue]);
}

void sub_10044CAA8(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_10044CAB0(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_10044CAB8(id a1, PKMapsBrand *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMapsBrand *)v3 setURL:v4];
}

void sub_10044CB18(id a1, PKMapsBrand *a2, id a3)
{
  id v4 = a2;
  -[PKMapsBrand setCategory:](v4, "setCategory:", [a3 integerValue]);
}

void sub_10044CB70(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_10044CB78(id a1, PKMapsBrand *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMapsBrand *)v3 setLogoURL:v4];
}

void sub_10044CBD8(id a1, PKMapsBrand *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMapsBrand *)v3 setBusinessChatURL:v4];
}

void sub_10044CC38(id a1, PKMapsBrand *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMapsBrand *)v3 setHeroImageURL:v4];
}

void sub_10044CC98(id a1, PKMapsBrand *a2, id a3)
{
}

void sub_10044CCA0(id a1, PKMapsBrand *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKMapsBrand *)v3 setLastProcessedDate:v4];
}

void sub_10044CD00(id a1, PKMapsBrand *a2, id a3)
{
}

id _SQLValueForImageURLs(void *a1)
{
  id v1 = a1;
  if (!v1
    || (+[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:0], (char v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    char v2 = +[NSNull null];
  }

  return v2;
}

id _ImageURLsForSQLValue(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc((Class)NSSet);
  uint64_t v3 = objc_opt_class();
  id v4 = objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(), 0);
  id v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v4 fromData:v1 error:0];

  return v5;
}

id *sub_10044D2F4(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_10044D9CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10044DD58(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_10044DD60(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_10044DD68(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_10044DD70(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_10044DD78(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  id v4 = a2;
  -[PKCreditInstallmentPlanProduct setUpgradeEligible:](v4, "setUpgradeEligible:", [a3 BOOLValue]);
}

void sub_10044DDD0(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  id v4 = a2;
  -[PKCreditInstallmentPlanProduct setWarrantyYears:](v4, "setWarrantyYears:", [a3 unsignedIntegerValue]);
}

void sub_10044DE28(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
}

void sub_10044DE30(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  id v4 = a2;
  _ImageURLsForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditInstallmentPlanProduct *)v4 setIconURLs:v5];
}

void sub_10044DE94(id a1, PKCreditInstallmentPlanProduct *a2, id a3)
{
  id v4 = a2;
  _ImageURLsForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditInstallmentPlanProduct *)v4 setSplashImageURLs:v5];
}

void sub_10044E9CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v16 = objc_alloc_init((Class)PKPayLaterFinancingOption);
  id v8 = [(SQLiteEntity *)[PayLaterFinancingOption alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v16 withProperties:v7 values:a4];

  uint64_t v9 = [(PayLaterFinancingOption *)v8 _totalAmount];
  [v16 setTotalAmount:v9];

  __int8 v10 = [(PayLaterFinancingOption *)v8 _totalInterest];
  [v16 setTotalInterest:v10];

  id v11 = [(PayLaterFinancingOption *)v8 _totalPrincipal];
  [v16 setTotalPrincipal:v11];

  id v12 = [(PayLaterFinancingOption *)v8 _totalFees];
  [v16 setTotalFees:v12];

  uint64_t v13 = [(PayLaterFinancingOption *)v8 _installmentAmount];
  [v16 setInstallmentAmount:v13];

  id v14 = [(PayLaterFinancingOption *)v8 _installmentFees];
  [v16 setInstallmentFees:v14];

  int8x16_t v15 = +[PayLaterFinancingOptionInstallment payLaterFinancingOptionInstallmentsForFinancingOptionPID:a2 inDatabase:*(void *)(a1 + 32)];
  [v16 setInstallments:v15];
  [*(id *)(a1 + 48) safelyAddObject:v16];
}

void sub_10044EE2C(id a1, PKPayLaterFinancingOption *a2, id a3)
{
}

void sub_10044EE34(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingOption setProductType:](v4, "setProductType:", [a3 integerValue]);
}

void sub_10044EE8C(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingOption setInstallmentCount:](v4, "setInstallmentCount:", [a3 integerValue]);
}

void sub_10044EEE4(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingOption setHasAPR:](v4, "setHasAPR:", [a3 BOOLValue]);
}

void sub_10044EF3C(id a1, PKPayLaterFinancingOption *a2, id a3)
{
  id v4 = a2;
  [a3 integerValue];
  PKPercentageStorageIntegerToDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPayLaterFinancingOption *)v4 setApr:v5];
}

uint64_t PDSharingChannelEndpointPollingBackoffDuration()
{
  return 14400;
}

uint64_t PDAggressiveSharingChannelEndpointPollingBackoffDuration(unint64_t a1)
{
  uint64_t v1 = 30;
  uint64_t v2 = 60;
  uint64_t v3 = 14400;
  if (a1 < 0x3C) {
    uint64_t v3 = 3600;
  }
  if (a1 >= 0x32) {
    uint64_t v2 = v3;
  }
  if (a1 >= 0xA) {
    uint64_t v1 = v2;
  }
  if (a1 >= 5) {
    return v1;
  }
  else {
    return 15;
  }
}

void sub_10044F97C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v13 = objc_alloc_init((Class)PKPassAutomaticSelectionCriterion);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v13 withProperties:v7 values:a4];

  id v8 = [v13 type];
  [v13 setTechnologyType:PKPassAutomaticSelectionTechnologyTypeFromType()];

  uint64_t v9 = +[PaymentAutomaticSelectionTCI primaryTCIsInDatabase:*(void *)(a1 + 40) forPaymentAutomaticSelectionCriterionPID:a2];
  [v13 setPrimaryTCIs:v9];

  __int8 v10 = +[PaymentAutomaticSelectionTCI TCIsInDatabase:*(void *)(a1 + 40) forPaymentAutomaticSelectionCriterionPID:a2];
  [v13 setTCIs:v10];

  id v11 = +[PaymentAutomaticSelectionReaderId readerIDsInDatabase:*(void *)(a1 + 40) forPaymentAutomaticSelectionCriterionPID:a2];
  [v13 setReaderIDs:v11];

  id v12 = +[ASCAssociatedReaderID associatedReaderIDsForAutomaticSelectionCriterionPID:a2 inDatabase:*(void *)(a1 + 40)];
  [v13 setAssociatedReaderIDs:v12];

  [*(id *)(a1 + 48) addObject:v13];
}

uint64_t sub_10044FCD8(uint64_t a1)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v6);
        id v8 = objc_alloc(*(Class *)(a1 + 64));
        id v9 = objc_msgSend(v8, "initWithCriterion:forPaymentApplication:database:", v7, *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v17);
        if (v9)
        {
          __int8 v10 = [v7 primaryTCIs];
          id v11 = [v7 TCIs];
          id v12 = +[PaymentAutomaticSelectionTCI insertPrimaryTCIs:v10 TCIs:v11 withPaymentAutomaticSelectionCriterion:v9 inDatabase:*(void *)(a1 + 48)];

          id v13 = [v7 readerIDs];
          id v14 = +[PaymentAutomaticSelectionReaderId insertReaderIds:v13 withPaymentAutomaticSelectionCriterion:v9 inDatabase:*(void *)(a1 + 48)];

          int8x16_t v15 = [v7 associatedReaderIDs];
          +[ASCAssociatedReaderID insertOrUpdateAssociatedReaderIDs:forAutomaticSelectionCriterionPID:inDatabase:](ASCAssociatedReaderID, "insertOrUpdateAssociatedReaderIDs:forAutomaticSelectionCriterionPID:inDatabase:", v15, [v9 persistentID], *(void *)(a1 + 48));

          [*(id *)(a1 + 56) addObject:v9];
        }

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v4);
  }

  return 1;
}

void sub_1004501AC(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
}

void sub_1004501B4(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
}

void sub_1004501BC(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
  id v4 = a2;
  -[PKPassAutomaticSelectionCriterion setSupportsExpress:](v4, "setSupportsExpress:", [a3 BOOLValue]);
}

void sub_100450214(id a1, PKPassAutomaticSelectionCriterion *a2, id a3)
{
  id v4 = a2;
  -[PKPassAutomaticSelectionCriterion setSupportsInSessionExpress:](v4, "setSupportsInSessionExpress:", [a3 BOOLValue]);
}

void sub_100450E58(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[VirtualCard alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(VirtualCard *)v5 virtualCard];
  [v3 addObject:v4];
}

id sub_1004517C0(uint64_t a1)
{
  [*(id *)(a1 + 32) setObjectOrNull:0 forKey:@"g"];
  id v2 = *(void **)(a1 + 32);
  return [v2 setObjectOrNull:0 forKey:@"h"];
}

uint64_t sub_1004519F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) _predicateForCreditAccountDetailsPID:*(void *)(a1 + 48)];
  id v3 = [*(id *)(a1 + 40) queryWithDatabase:*(void *)(a1 + 32) predicate:v2];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100451AC0;
  v5[3] = &unk_100731020;
  id v6 = *(id *)(a1 + 32);
  [v3 enumeratePersistentIDsUsingBlock:v5];

  return 1;
}

void sub_100451AC0(uint64_t a1, uint64_t a2)
{
  id v2 = [(SQLiteEntity *)[VirtualCard alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [(VirtualCard *)v2 removeVirtualCardEncryptedData];
}

void sub_100451D50(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1004522BC(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[VirtualCard alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(VirtualCard *)v5 virtualCard];
  [v3 addObject:v4];
}

void sub_1004526D8(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1004526E0(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1004526E8(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100452740(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_100452748(id a1, PKVirtualCard *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKVirtualCard *)v3 setLastUpdatedDate:v4];
}

void sub_1004527A8(id a1, PKVirtualCard *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v4 options:0];

    [(PKVirtualCard *)v5 setEncryptedData:v6];
  }
}

void sub_100452838(id a1, PKVirtualCard *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v4 options:0];

    [(PKVirtualCard *)v5 setEphemeralPublicKey:v6];
  }
}

void sub_1004528C8(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1004528D0(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100452928(id a1, PKVirtualCard *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKVirtualCard *)v3 setLastAutoFilledBySafari:v4];
}

void sub_100452988(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setSupportsLocalStorage:](v4, "setSupportsLocalStorage:", [a3 BOOLValue]);
}

void sub_1004529E0(id a1, PKVirtualCard *a2, id a3)
{
}

void sub_1004529E8(id a1, PKVirtualCard *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKVirtualCard *)v3 setSecurityCodeExpiration:v4];
}

void sub_100452A48(id a1, PKVirtualCard *a2, id a3)
{
  id v4 = a2;
  -[PKVirtualCard setHasDynamicSecurityCode:](v4, "setHasDynamicSecurityCode:", [a3 BOOLValue]);
}

void sub_100452F4C(id a1, PKAccountPromotionBehavior *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKAccountPromotionBehavior setMinRefreshPeriod:](v4, "setMinRefreshPeriod:");
}

void sub_100452FA0(id a1, PKAccountPromotionBehavior *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPromotionBehavior setMaxImpressionCount:](v4, "setMaxImpressionCount:", [a3 integerValue]);
}

void sub_100452FF8(id a1, PKAccountPromotionBehavior *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKAccountPromotionBehavior setTimeVisibleAfterCompleted:](v4, "setTimeVisibleAfterCompleted:");
}

void sub_100453144(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

uint64_t sub_100453A0C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v4 = v3;
  if (v3)
  {
    id v6 = v3;
    id v3 = [*(id *)(a1 + 40) addObject:v3];
    id v4 = v6;
  }
  return _objc_release_x1(v3, v4);
}

id sub_100453CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10045407C(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
}

void sub_100454084(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
}

void sub_10045408C(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
  id v3 = a2;
  [(PKTransitAppletCommutePlan *)v3 setStatus:PKTransitAppletCommutePlanStatusFromString()];
}

void sub_1004540E4(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKTransitAppletCommutePlan *)v3 setStartDate:v4];
}

void sub_100454144(id a1, PKTransitAppletCommutePlan *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKTransitAppletCommutePlan *)v3 setExpirationDate:v4];
}

uint64_t sub_1004542F0(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1004543B0;
  v4[3] = &unk_1007525A8;
  uint64_t v8 = *(void *)(a1 + 64);
  id v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v2 enumerateObjectsUsingBlock:v4];

  return 1;
}

void sub_1004543B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(objc_class **)(a1 + 56);
  id v6 = a2;
  id v7 = [[v5 alloc] initWithPaymentRewardsBalance:v6 paymentPass:*(void *)(a1 + 32) orderIndex:a3 inDatabase:*(void *)(a1 + 40)];

  [*(id *)(a1 + 48) safelyAddObject:v7];
}

void sub_100454748(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKPaymentRewardsBalance);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];
  id v7 = [*(id *)(a1 + 48) _monetaryValueUsingProperties:v6 values:a4];

  [v8 setMonetaryValue:v7];
  [*(id *)(a1 + 40) safelyAddObject:v8];
}

void sub_100454C8C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
  id v6 = *(void **)(a1 + 48);
  id v7 = [(id)objc_opt_class() _monetaryValueUsingProperties:v5 values:a3];

  [v6 setMonetaryValue:v7];
}

void sub_100454F28(id a1, PKPaymentRewardsBalance *a2, id a3)
{
}

void sub_100454F30(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentRewardsBalance setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100454F88(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  [a3 integerValue];
  PKCurrencyStorageIntegerToCurrencyDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentRewardsBalance *)v4 setValue:v5];
}

void sub_100454FF8(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  [a3 integerValue];
  PKCurrencyStorageIntegerToCurrencyDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentRewardsBalance *)v4 setConversionRate:v5];
}

void sub_100455060(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentRewardsBalance setRoundingStrategy:](v4, "setRoundingStrategy:", [a3 integerValue]);
}

void sub_1004550B8(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentRewardsBalance setEligibility:](v4, "setEligibility:", [a3 integerValue]);
}

void sub_100455110(id a1, PKPaymentRewardsBalance *a2, id a3)
{
}

void sub_100455118(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPaymentRewardsBalance *)v3 setProgramURL:v4];
}

void sub_100455178(id a1, PKPaymentRewardsBalance *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentRewardsBalance *)v3 setLastFetchedAt:v4];
}

void sub_100455754(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) sharedWebService];
  id v3 = [v2 targetDevice];
  if (v2 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v8 = [v3 trustedDeviceEnrollmentInfoForWebService:v2];
  }
  else
  {
    id v8 = 0;
  }
  id v4 = objc_alloc_init(off_100807430());
  id v5 = [v4 watchPaymentWebService];
  id v6 = [v5 targetDevice];
  if (v5 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v7 = [v6 trustedDeviceEnrollmentInfoForWebService:v5];
  }
  else
  {
    id v7 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100455AC0(id result)
{
  uint64_t v1 = *((void *)result + 8);
  if (v1 == 1) {
    return _[*((id *)result + 4) remoteTrustedDeviceEnrollmentSignatureWithAccountDSID:*((void *)result + 5) sessionData:*((void *)result + 6) handler:*((void *)result + 7)];
  }
  if (!v1) {
    return _[*((id *)result + 4) localTrustedDeviceEnrollmentSignatureWithAccountDSID:*((void *)result + 5) sessionData:*((void *)result + 6) handler:*((void *)result + 7)];
  }
  return result;
}

void sub_100455D80(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  __int8 v10 = [v8 certificates];
  id v11 = [v10 certificateOfType:0];

  [v8 certificateVersion];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

Class sub_100456038()
{
  if (qword_100808FC0 != -1) {
    dispatch_once(&qword_100808FC0, &stru_100752770);
  }
  Class result = objc_getClass("NPKCompanionAgentConnection");
  qword_100808FB0 = (uint64_t)result;
  off_100807430 = (uint64_t (*)())sub_10045609C;
  return result;
}

id sub_10045609C()
{
  return (id)qword_100808FB0;
}

void sub_1004560A8(id a1)
{
  qword_100808FB8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit", 2);
}

void sub_100456CBC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100456E48(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKCreditAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_100457510(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_100457518(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountFeatureDescriptor *)v3 setMinimumAmount:v4];
}

void sub_10045757C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountFeatureDescriptor *)v3 setMaximumAmount:v4];
}

void sub_1004575E0(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKCreditAccountFeatureDescriptor *)v4 setSupportedNetworks:v5];
}

void sub_10045764C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_100457654(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMerchantCapabilities:](v4, "setMerchantCapabilities:", [a3 unsignedIntegerValue]);
}

void sub_1004576AC(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setPaymentFundingSourceTypes:](v4, "setPaymentFundingSourceTypes:", [a3 unsignedIntegerValue]);
}

void sub_100457704(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setPaymentFrequencies:](v4, "setPaymentFrequencies:", [a3 unsignedIntegerValue]);
}

void sub_10045775C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setPaymentPresets:](v4, "setPaymentPresets:", [a3 unsignedIntegerValue]);
}

void sub_1004577B4(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1004577BC(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1004577C4(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKCreditAccountFeatureDescriptor *)v4 setSupportedFileFormatsForTransactionData:v5];
}

void sub_100457830(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMaximumAccountUsers:](v4, "setMaximumAccountUsers:", [a3 unsignedIntegerValue]);
}

void sub_100457888(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMinimumOwnerAge:](v4, "setMinimumOwnerAge:", [a3 unsignedIntegerValue]);
}

void sub_1004578E0(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountFeatureDescriptor setMinimumParticipantAge:](v4, "setMinimumParticipantAge:", [a3 unsignedIntegerValue]);
}

void sub_100457938(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_OSVersionRequirementRangeForSQLValue();
  [(PKCreditAccountFeatureDescriptor *)v3 setOsVersionRange:v4];
}

void sub_100457998(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKCreditAccountFeatureDescriptor *)v4 setSupportedDestinations:v5];
}

void sub_100457A04(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  [a3 integerValue];
  PKPercentageStorageIntegerToDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountFeatureDescriptor *)v4 setSavingsAPY:v5];
}

void sub_100457A6C(id a1, PKCreditAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  [a3 integerValue];
  PKPercentageStorageIntegerToDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountFeatureDescriptor *)v4 setSavingsInterestRate:v5];
}

void sub_100457CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100457D14(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithValue:*(void *)(a1 + 32) forBaseValue:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

id sub_100457ED0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unsigned char *a6)
{
  id result = [*(id *)(a1 + 32) setContent:*a4];
  *a6 = 1;
  return result;
}

void sub_1004583F0(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[PaymentOfferAssociatedWebDomain alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = [(SQLiteEntity *)v5 valueForProperty:@"a"];
  id v4 = (void *)_URLForSQLValue();

  objc_msgSend(*(id *)(a1 + 40), "pk_safelyAddObject:", v4);
}

void sub_1004586BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKAppletSubcredentialSharingInvitation);
  +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_100458908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100458920(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  uint64_t v3 = [*(id *)(a1 + 32) identifier];
  id v4 = [v2 invitationWithIdentifier:v3 inDatabase:*(void *)(a1 + 40)];

  if (!v4)
  {
    id v5 = objc_alloc(*(Class *)(a1 + 56));
    id v6 = [*(id *)(a1 + 56) _dictionaryFromSharedCredentialInvitation:*(void *)(a1 + 32)];
    id v7 = [v5 initWithPropertyValues:v6 inDatabase:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
}

id sub_100458E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100458FFC(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_100459004(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_10045900C(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_100459014(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_10045901C(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_100459024(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = objc_alloc((Class)NSUUID);
    id v7 = v4;
    id v8 = [v7 bytes];

    id v9 = [v6 initWithUUIDBytes:v8];
    [(PKAppletSubcredentialSharingInvitation *)v5 setSharingSessionIdentifier:v9];
  }
}

void sub_1004590CC(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredentialSharingInvitation setEntitlement:](v4, "setEntitlement:", [a3 unsignedIntegerValue]);
}

void sub_100459124(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredentialSharingInvitation setForWatch:](v4, "setForWatch:", [a3 BOOLValue]);
}

void sub_10045917C(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_100459184(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_10045918C(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
}

void sub_100459194(id a1, PKAppletSubcredentialSharingInvitation *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredentialSharingInvitation setSupportedRadioTechnologies:](v4, "setSupportedRadioTechnologies:", [a3 integerValue]);
}

id sub_10045938C(uint64_t a1)
{
  id v11 = 0;
  uint64_t v1 = +[NSData dataWithContentsOfURL:a1 options:0 error:&v11];
  id v2 = v11;
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    id v10 = 0;
    id v6 = +[NSJSONSerialization JSONObjectWithData:v1 options:0 error:&v10];
    id v7 = v10;
    id v4 = v7;
    id v5 = 0;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      id v5 = v6;
    }
  }
  else
  {
    id v4 = v2;
    id v5 = 0;
  }

  return v5;
}

NSCopying *__cdecl sub_100459BBC(id a1, NSDictionary *a2)
{
  return (NSCopying *)[(NSDictionary *)a2 PKStringForKey:@"groupIdentifier"];
}

void sub_100459BCC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = objc_msgSend(a3, "pk_groupDictionaryByApplyingBlock:", &stru_100752C10);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100459D4C;
  v8[3] = &unk_100752C38;
  id v9 = v5;
  id v10 = a1[4];
  id v11 = a1[5];
  id v12 = a1[6];
  id v13 = a1[7];
  id v7 = v5;
  [v6 enumerateKeysAndObjectsUsingBlock:v8];
}

NSNumber *__cdecl sub_100459CDC(id a1, NSDictionary *a2)
{
  id v2 = [(NSDictionary *)a2 PKDictionaryForKey:@"keyConfiguration"];
  BOOL v3 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v2 PKIntegerForKey:@"rights"]);

  return (NSNumber *)v3;
}

void sub_100459D4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = objc_alloc_init((Class)PKPassShare);
  id v6 = +[NSUUID UUID];
  id v7 = [v6 UUIDString];

  [v5 setIdentifier:v7];
  [v5 setGroupIdentifier:*(void *)(a1 + 32)];
  [v5 setManageability:1];
  [v5 setSubcredentialIdentifier:*(void *)(a1 + 40)];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if ((objc_msgSend(v5, "appendCredentialShareDictionary:entitlements:", v13, *(void *)(a1 + 48), (void)v18) & 1) == 0)
        {
          id v14 = *(void **)(a1 + 56);
          int8x16_t v15 = [v13 PKStringForKey:@"keyID"];
          [v14 safelyAddObject:v15];
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v10);
  }

  id v16 = [v5 credentialShares];
  id v17 = [v16 count];

  if (v17) {
    [*(id *)(a1 + 64) addObject:v5];
  }
}

void sub_10045A4B8(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v3 = v2;
  if (v2)
  {
    id v4 = [v2 PKStringForKey:@"identifier"];
    if (!v4)
    {
      id v5 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        v106 = v3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDPassShareBundle: Unable to create entitlement from %@. Missing subcredentialID.", buf, 0xCu);
      }
      goto LABEL_81;
    }
    id v5 = [v3 PKDictionaryForKey:@"entitlement"];
    id v6 = [objc_alloc((Class)PKPassEntitlement) initWithSubcredentialDictionary:v5 active:1 subcredentialIdentifier:v4];
    if (!v6)
    {
      if (!v5)
      {
LABEL_80:

LABEL_81:
        goto LABEL_82;
      }
      id v46 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        v106 = v3;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "PDPassShareBundle: Unable to create entitlement from %@", buf, 0xCu);
      }
LABEL_79:

      goto LABEL_80;
    }
    v77 = v6;
    [*(id *)(a1 + 32) addObject:v6];
    long long v69 = v5;
    id v7 = [v5 objectForKeyedSubscript:@"accountRole"];

    long long v70 = v3;
    long long v68 = [v3 PKDictionaryForKey:@"sharing"];
    id v8 = [v68 PKArrayContaining:objc_opt_class() forKey:@"entitlements"];
    id v9 = v8;
    v78 = v4;
    if (v7)
    {
      id v10 = objc_alloc_init((Class)NSMutableDictionary);
      long long v95 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      id obj = v9;
      id v11 = [obj countByEnumeratingWithState:&v95 objects:v104 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v96;
        uint64_t v71 = *(void *)v96;
        do
        {
          id v14 = 0;
          id v73 = v12;
          do
          {
            if (*(void *)v96 != v13) {
              objc_enumerationMutation(obj);
            }
            int8x16_t v15 = *(void **)(*((void *)&v95 + 1) + 8 * (void)v14);
            id v16 = [v15 PKArrayContaining:objc_opt_class() forKey:@"accessProfiles"];
            if (!v16)
            {
              uint64_t v17 = [v15 PKNumberForKey:@"accessProfile"];
              long long v18 = (void *)v17;
              if (v17)
              {
                uint64_t v103 = v17;
                id v16 = +[NSArray arrayWithObjects:&v103 count:1];
              }
              else
              {
                id v16 = 0;
              }
            }
            uint64_t v19 = [v15 PKStringForKey:@"accountRole"];
            long long v20 = (void *)v19;
            if (v16) {
              BOOL v21 = v19 == 0;
            }
            else {
              BOOL v21 = 1;
            }
            if (!v21)
            {
              long long v93 = 0u;
              long long v94 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              v75 = v16;
              id v22 = v16;
              id v23 = [v22 countByEnumeratingWithState:&v91 objects:v102 count:16];
              if (v23)
              {
                id v24 = v23;
                uint64_t v25 = *(void *)v92;
                do
                {
                  for (unint64_t i = 0; i != v24; unint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v92 != v25) {
                      objc_enumerationMutation(v22);
                    }
                    uint64_t v27 = *(void *)(*((void *)&v91 + 1) + 8 * i);
                    id v28 = [v10 objectForKeyedSubscript:v27];
                    if (!v28)
                    {
                      id v28 = objc_alloc_init((Class)NSMutableArray);
                      [v10 setObject:v28 forKeyedSubscript:v27];
                    }
                    [v28 addObject:v20];
                  }
                  id v24 = [v22 countByEnumeratingWithState:&v91 objects:v102 count:16];
                }
                while (v24);
              }

              uint64_t v13 = v71;
              id v12 = v73;
              id v16 = v75;
            }

            id v14 = (char *)v14 + 1;
          }
          while (v14 != v12);
          id v12 = [obj countByEnumeratingWithState:&v95 objects:v104 count:16];
        }
        while (v12);
      }

      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      id v29 = v10;
      id v30 = [v29 countByEnumeratingWithState:&v87 objects:v101 count:16];
      if (v30)
      {
        id v31 = v30;
        uint64_t v32 = *(void *)v88;
        do
        {
          for (j = 0; j != v31; j = (char *)j + 1)
          {
            if (*(void *)v88 != v32) {
              objc_enumerationMutation(v29);
            }
            uint64_t v34 = *(void *)(*((void *)&v87 + 1) + 8 * (void)j);
            id v35 = objc_alloc((Class)PKPassEntitlement);
            id v36 = [v29 objectForKeyedSubscript:v34];
            id v37 = [v35 initWithCarKeyProfile:v34 roles:v36 active:0 subcredentialIdentifier:v78];

            if (v37)
            {
              long long v38 = [v37 value];
              uint64_t v39 = [v77 value];
              unsigned int v40 = [v38 isEqualToNumber:v39];

              if (v40)
              {
                uint64_t v41 = [v37 shareability];
                [v77 setShareability:v41];

                long long v42 = [v37 visibility];
                [v77 setVisibility:v42];

                long long v43 = [v37 manageability];
                [v77 setManageability:v43];
              }
              else
              {
                [*(id *)(a1 + 32) addObject:v37];
              }
            }
            else
            {
              long long v44 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                v106 = v70;
                _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "PDPassShareBundle: Unable to create entitlement from %@", buf, 0xCu);
              }
            }
          }
          id v31 = [v29 countByEnumeratingWithState:&v87 objects:v101 count:16];
        }
        while (v31);
      }

      long long v45 = obj;
      goto LABEL_78;
    }
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    v76 = v8;
    id v47 = [v8 countByEnumeratingWithState:&v83 objects:v100 count:16];
    if (v47)
    {
      id v48 = v47;
      uint64_t v49 = *(void *)v84;
      do
      {
        for (k = 0; k != v48; k = (char *)k + 1)
        {
          if (*(void *)v84 != v49) {
            objc_enumerationMutation(v76);
          }
          id v51 = [objc_alloc((Class)PKPassEntitlement) initWithSubcredentialDictionary:*(void *)(*((void *)&v83 + 1) + 8 * (void)k) active:0 subcredentialIdentifier:v4];
          id v52 = v51;
          if (v51)
          {
            id v53 = [v51 value];
            id v54 = [v6 value];
            unsigned __int8 v55 = [v53 isEqualToNumber:v54];

            if ((v55 & 1) == 0) {
              [*(id *)(a1 + 32) addObject:v52];
            }
          }
          else
          {
            v56 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              v106 = v70;
              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "PDPassShareBundle: Unable to create entitlement from %@", buf, 0xCu);
            }
          }
        }
        id v48 = [v76 countByEnumeratingWithState:&v83 objects:v100 count:16];
      }
      while (v48);
    }
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    id v57 = *(id *)(a1 + 32);
    id v58 = [v57 countByEnumeratingWithState:&v79 objects:v99 count:16];
    if (!v58)
    {
LABEL_77:

      long long v45 = v76;
LABEL_78:

      id v5 = v69;
      BOOL v3 = v70;
      id v6 = v77;
      id v4 = v78;
      id v46 = v68;
      goto LABEL_79;
    }
    id v59 = v58;
    uint64_t v60 = *(void *)v80;
LABEL_66:
    uint64_t v61 = 0;
    while (1)
    {
      if (*(void *)v80 != v60) {
        objc_enumerationMutation(v57);
      }
      id v62 = *(void **)(*((void *)&v79 + 1) + 8 * v61);
      uint64_t v63 = [v62 shareability];
      if (!v63) {
        goto LABEL_74;
      }
      uint64_t v64 = (void *)v63;
      uint64_t v65 = [v62 visibility];
      if (!v65) {
        break;
      }
      id v66 = (void *)v65;
      id v67 = [v62 manageability];

      if (!v67) {
        goto LABEL_74;
      }
LABEL_75:
      [v62 setHasRemainingShares:1];
      if (v59 == (id)++v61)
      {
        id v59 = [v57 countByEnumeratingWithState:&v79 objects:v99 count:16];
        if (!v59) {
          goto LABEL_77;
        }
        goto LABEL_66;
      }
    }

LABEL_74:
    [v62 setShareability:&off_10078C5A0];
    [v62 setVisibility:&off_10078C5B8];
    [v62 setManageability:&off_10078C5D0];
    goto LABEL_75;
  }
LABEL_82:
}

BOOL sub_10045AEDC(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v2 = sub_1003A4618((uint64_t)ApplicationMessageRegistration, a2, *(void **)(a1 + 8));
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL sub_10045AF38(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v2 = sub_1003A4968((uint64_t)ApplicationMessageRegistration, a2, *(void **)(a1 + 8));
  BOOL v3 = v2 != 0;

  return v3;
}

BOOL sub_10045AF94(BOOL result, void *a2, id *a3)
{
  if (result) {
    return sub_1003A4C08((uint64_t)ApplicationMessageRegistration, a2, a3, *(void **)(result + 8));
  }
  return result;
}

void **sub_10045AFBC(void **a1, void *a2)
{
  if (a1)
  {
    sub_1003A4FCC((uint64_t)ApplicationMessageRegistration, a1[1], a2);
    a1 = (void **)objc_claimAutoreleasedReturnValue();
    uint64_t v2 = vars8;
  }
  return a1;
}

void **sub_10045B00C(void **result)
{
  if (result) {
    return (void **)sub_1003A5410((uint64_t)ApplicationMessageRegistration, result[1]);
  }
  return result;
}

void *sub_10045B034(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    a1 = +[TileDescriptor descriptorsInDatabase:a1[1] forPassUniqueID:a2 context:a3];
    uint64_t v3 = vars8;
  }
  return a1;
}

void *sub_10045B088(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    a1 = +[TileDescriptor updatePassTileDescriptorStatesInDatabase:a1[1] forPassUniqueID:a2 forContext:a3 withTransform:a4];
    uint64_t v4 = vars8;
  }
  return a1;
}

void *sub_10045B0E0(void *a1, uint64_t a2)
{
  if (a1)
  {
    a1 = +[TileDescriptorStateParticipant passUniqueIdentifiersForTileDescriptorStateParticipantWithIdentifier:a2 inDatabase:a1[1]];
    uint64_t v2 = vars8;
  }
  return a1;
}

void *sub_10045B130(void *result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (void *)+[TileDescriptorStateParticipant setPassTileDescriptorStateParticipantIDs:a2 forPassUniqueID:a3 inDatabase:result[1]];
  }
  return result;
}

BOOL sub_10045B160(BOOL result, uint64_t a2)
{
  if (result) {
    return +[TileDescriptorStateParticipant removeParticipantsForPassUniqueID:a2 inDatabase:*(void *)(result + 8)];
  }
  return result;
}

id *sub_10045B18C()
{
  self;
  v0 = PKObjectSettingsManagerArchivePath();
  id v1 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:v0];
  uint64_t v2 = sub_10045B20C((id *)[PDObjectSettingsManager alloc], v1);

  return v2;
}

id *sub_10045B20C(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)PDObjectSettingsManager;
    uint64_t v4 = (id *)objc_msgSendSuper2(&v16, "init");
    a1 = v4;
    if (v4)
    {
      *((_DWORD *)v4 + 2) = 0;
      if (v3) {
        id v5 = v3;
      }
      else {
        id v5 = objc_alloc_init((Class)NSMutableDictionary);
      }
      id v6 = a1[2];
      a1[2] = v5;

      id v7 = objc_alloc_init((Class)NSMutableArray);
      id v8 = a1[2];
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10045B404;
      v14[3] = &unk_10074F930;
      id v9 = v7;
      id v15 = v9;
      [v8 enumerateKeysAndObjectsUsingBlock:v14];
      id v10 = [v9 count];
      if (v10)
      {
        uint64_t v11 = (uint64_t)v10;
        id v12 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
          sub_100517BB4(v11, v12);
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          uint64_t v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager: removing %lu invalid entires.", buf, 0xCu);
        }

        [a1[2] removeObjectsForKeys:v9];
        sub_10045B49C((uint64_t)a1);
      }
    }
  }

  return a1;
}

void sub_10045B404(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_10045B49C(uint64_t a1)
{
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 24))
    {
      *(unsigned char *)(a1 + 24) = 1;
      uint64_t v2 = (void *)PDOSTransactionCreate("PDObjectSettingsManager");
      dispatch_time_t v3 = dispatch_time(0, 1000000000);
      uint64_t v4 = PDHeavyQueue();
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_10045B9C8;
      v6[3] = &unk_10072E198;
      id v7 = v2;
      uint64_t v8 = a1;
      id v5 = v2;
      dispatch_after(v3, v4, v6);
    }
  }
}

BOOL sub_10045B584(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  BOOL v5 = 0;
  if (a1 && v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    id v6 = [*(id *)(a1 + 16) objectForKeyedSubscript:v4];
    BOOL v5 = v6 != 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }

  return v5;
}

BOOL sub_10045B5F8(BOOL result, uint64_t a2, void *a3, void *a4)
{
  if (result) {
    return ((unint64_t)sub_10001E0A8(result, a3, a4) & a2) != 0;
  }
  return result;
}

void sub_10045B634(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = v7;
  if (a1 && v7)
  {
    if (a2 == a4)
    {
      sub_10045B7F4(a1, v7);
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
      id v9 = +[NSNumber numberWithUnsignedInteger:a2];
      id v10 = [*(id *)(a1 + 16) objectForKeyedSubscript:v8];
      char v11 = PKEqualObjects();

      id v12 = PKLogFacilityTypeGetObject();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          int v16 = 138412290;
          uint64_t v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager: preserving non-default settings for %@.", (uint8_t *)&v16, 0xCu);
        }
      }
      else
      {
        if (v13)
        {
          int v16 = 138412290;
          uint64_t v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager: writing non-default settings for %@.", (uint8_t *)&v16, 0xCu);
        }

        id v14 = *(void **)(a1 + 16);
        id v15 = +[NSNumber numberWithUnsignedInteger:a2];
        [v14 setObject:v15 forKey:v8];

        sub_10045B49C(a1);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    }
  }
}

void sub_10045B7F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    BOOL v5 = [*(id *)(a1 + 16) objectForKeyedSubscript:v4];

    id v6 = PKLogFacilityTypeGetObject();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        int v8 = 138412290;
        id v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager: restoring default settings for %@.", (uint8_t *)&v8, 0xCu);
      }

      [*(id *)(a1 + 16) removeObjectForKey:v4];
      sub_10045B49C(a1);
    }
    else
    {
      if (v7)
      {
        int v8 = 138412290;
        id v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager: preserving default settings for %@.", (uint8_t *)&v8, 0xCu);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  }
}

id *sub_10045B944(os_unfair_lock_s *a1)
{
  id v1 = (id *)a1;
  if (a1)
  {
    uint64_t v2 = a1 + 2;
    os_unfair_lock_lock(a1 + 2);
    id v1 = [v1[2] allKeys];
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

uint64_t sub_10045B9A0()
{
  uint64_t v0 = self;
  return _PKRemoveObjectSettingsManagerSafeHavenArchive(v0);
}

void sub_10045B9C8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8));
  *(unsigned char *)(*(void *)(a1 + 40) + 24) = 0;
  uint64_t v2 = PKObjectSettingsManagerArchivePath();
  id v3 = PKLogFacilityTypeGetObject();
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(*(void *)(a1 + 40) + 16) count];
      int v6 = 134217984;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager: archiving %lu entries to disk.", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 16) writeToFile:v2 atomically:1];
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_100517C2C(v4);
    }

    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager: failed to archive to disk - missing archive path.", (uint8_t *)&v6, 2u);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8));
}

BOOL sub_10045BB34(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  id v5 = a3;
  int v6 = objc_opt_class();
  id v7 = sub_10001E12C(a1, v6);
  int v8 = [v5 uniqueID];

  BOOL v9 = ((unint64_t)sub_10001E0A8(a1, v8, v7) & a2) != 0;
  return v9;
}

void sub_10045BBC4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    int v6 = objc_opt_class();
    id v7 = sub_10001E12C(a1, v6);
    id v8 = [v5 uniqueID];

    sub_10045B634(a1, a2, v8, (uint64_t)v7);
  }
}

id *sub_10045BC58(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfURL:v2];

  uint64_t v4 = sub_10045B20C((id *)[PDObjectSettingsManager alloc], v3);
  return v4;
}

id sub_10045BCD4(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      a1 = objc_msgSend(+[PKPass classForPassType:](PKPass, "classForPassType:", objc_msgSend(v3, "passFlavor")), "defaultSettings");
    }
    else
    {
      uint64_t v4 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDObjectSettingsManager (DatabasePassAdditions): Error: expected parameter to be of type 'Pass'.", v6, 2u);
      }

      a1 = 0;
    }
  }

  return a1;
}

BOOL sub_10045BDA0(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  id v5 = a3;
  id v6 = sub_10045BCD4(a1, v5);
  id v7 = [v5 uniqueID];

  BOOL v8 = ((unint64_t)sub_10001E0A8((uint64_t)a1, v7, v6) & a2) != 0;
  return v8;
}

uint64_t sub_10045C40C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v7 = objc_msgSend(*(id *)(a1 + 48), "_predicateForAccountPID:", objc_msgSend(v5, "longLongValue"));
      BOOL v8 = [*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 32) predicate:v7];
      BOOL v9 = [*(id *)(a1 + 48) _sharedAccountCloudStoreForQuery:v8];
      [*(id *)(a1 + 40) setObject:v9 forKey:v6];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_10045C7B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10045C940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a3 values:a4];
  id v6 = [*(id *)(a1 + 48) database];
  id v7 = +[SharedAccountCloudStoreZone sharedAccountCloudStoreZonesForSharedAccountCloudStorePID:a2 inDatabase:v6];

  [*(id *)(a1 + 40) setSharedAccountCloudStoreZones:v7];
}

void sub_10045CB74(id a1, PKSharedAccountCloudStore *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKSharedAccountCloudStore setDirty:](v4, "setDirty:", [a3 BOOLValue]);
}

void sub_10045CBCC(id a1, PKSharedAccountCloudStore *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKSharedAccountCloudStore *)v3 setLastUpdated:v4];
}

void sub_10045CC2C(id a1, PKSharedAccountCloudStore *a2, id a3)
{
}

void sub_10045D510(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountUserInfoUpdate alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(AccountUserInfoUpdate *)v5 userInfoUpdate];
  [v3 addObject:v4];
}

id sub_10045D784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10045D92C(id a1, PKAccountUserInfoUpdate *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountUserInfoUpdate *)v3 setUpdatedDate:v4];
}

void sub_10045DDF0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10045DFD0(id a1, PKPayLaterFinancingPlanTermsDetails *a2, id a3)
{
}

id sub_10045E9FC(uint64_t a1)
{
  if (PKDiscoveryShouldProcessLocaleChange()) {
    objc_msgSend(*(id *)(a1 + 32), "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:", 1, &stru_100752D80);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10045EB80;
  v5[3] = &unk_10072FC20;
  void v5[4] = v2;
  return [v3 accountsWithCompletion:v5];
}

void sub_10045EA98(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  PKSetDiscoveryShouldProcessLocaleChange();
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      int v8 = 138412290;
      BOOL v9 = v2;
      id v5 = "Error - Update Discovery Manifest failed for locale change at start up, %@";
      id v6 = v3;
      uint32_t v7 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v8, v7);
    }
  }
  else if (v4)
  {
    LOWORD(v8) = 0;
    id v5 = "Updated Discovery Manifest for locale change at start up";
    id v6 = v3;
    uint32_t v7 = 2;
    goto LABEL_6;
  }
}

void sub_10045EB80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 264);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10045EC1C;
  v7[3] = &unk_10072E198;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10045EC1C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) defaultAccountForFeature:2 forAccounts:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
    id v5 = [v2 associatedPassUniqueID];
    unsigned int v6 = [v4 passExistsWithUniqueID:v5];
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint32_t v7 = [*(id *)(*(void *)(a1 + 32) + 32) defaultAccountForFeature:3 forAccounts:*(void *)(a1 + 40)];
  id v8 = v7;
  if (v7)
  {
    BOOL v9 = *(void **)(*(void *)(a1 + 32) + 8);
    id v10 = [v7 associatedPassUniqueID];
    char v11 = [v9 passExistsWithUniqueID:v10] ^ 1;
  }
  else
  {
    char v11 = 1;
  }
  id v12 = [*(id *)(*(void *)(a1 + 32) + 32) defaultAccountForFeature:5 forAccounts:*(void *)(a1 + 40)];
  BOOL v13 = v12;
  if (v12) {
    unsigned int v14 = v6;
  }
  else {
    unsigned int v14 = 0;
  }
  BOOL v15 = v14 == 1 && [v12 state] != (id)4;
  int v16 = [*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAccount];
  uint64_t v17 = v16;
  if (v16)
  {
    uint64_t v18 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v19 = [v16 associatedPassUniqueID];
    LODWORD(v18) = [v18 passExistsWithUniqueID:v19];

    if (v18)
    {
      long long v20 = *(void **)(a1 + 32);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10045EF34;
      v27[3] = &unk_10072E4F8;
      v27[4] = v20;
      [v20 loadDialogRequestsForPlacement:PKEngagementAppleCashDashboardPlacement completion:v27];
    }
  }
  if (!v6)
  {
    if (v11) {
      goto LABEL_18;
    }
LABEL_22:
    id v23 = *(void **)(a1 + 32);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10045F004;
    v25[3] = &unk_10072E4F8;
    v25[4] = v23;
    [v23 loadDialogRequestsForPlacement:PKEngagementPayLaterDashboardPlacement completion:v25];
    if (!v15) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  id v22 = *(void **)(a1 + 32);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10045EF9C;
  v26[3] = &unk_10072E4F8;
  void v26[4] = v22;
  [v22 loadDialogRequestsForPlacement:PKEngagementAppleCardDashboardPlacement completion:v26];
  if ((v11 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_18:
  if (v15)
  {
LABEL_19:
    BOOL v21 = *(void **)(a1 + 32);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10045F06C;
    v24[3] = &unk_10072E4F8;
    void v24[4] = v21;
    [v21 loadDialogRequestsForPlacement:PKEngagementSavingsDashboardPlacement completion:v24];
  }
LABEL_20:
}

void sub_10045EF34(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCashDashboardPlacement];
  }
}

void sub_10045EF9C(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCardDashboardPlacement];
  }
}

void sub_10045F004(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementPayLaterDashboardPlacement];
  }
}

void sub_10045F06C(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementSavingsDashboardPlacement];
  }
}

void sub_10045F0E4(id a1)
{
}

void sub_10045F200(uint64_t a1)
{
  uint64_t v2 = (void *)PDDarwinNotificationFamilyCircleChanged;
  id v7 = *(id *)(a1 + 32);
  id v3 = v2;
  if (v7 == v3)
  {

LABEL_12:
    unsigned int v6 = *(void **)(a1 + 40);
    _[v6 familyCircleChanged];
    return;
  }
  if (v7) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int v5 = [v7 isEqualToString:v3];

    if (!v5) {
      return;
    }
    goto LABEL_12;
  }
}

void sub_10045F3D8(uint64_t a1)
{
  uint64_t v2 = (void *)PKEngagementPassesPlacement;
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  if (v3 == v4)
  {

    goto LABEL_10;
  }
  unsigned int v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {

LABEL_13:
    BOOL v9 = *(void **)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10045F57C;
    v11[3] = &unk_100737AC0;
    void v11[4] = v10;
    id v12 = v9;
    [v10 loadDialogRequestsForPlacement:v12 completion:v11];

    return;
  }
  unsigned int v7 = [v3 isEqualToString:v4];

  if (!v7) {
    goto LABEL_13;
  }
LABEL_10:
  id v8 = *(void **)(a1 + 40);
  objc_msgSend(v8, "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:", 0, &stru_100752DC0);
}

void sub_10045F510(id a1, NSError *a2)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Processed discovery items after engagement update", v3, 2u);
  }
}

void sub_10045F57C(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:*(void *)(a1 + 40)];
  }
}

void sub_10045F6FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  id v4 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10045F7D4;
  v6[3] = &unk_100752DE8;
  void v6[4] = v4;
  id v7 = v3;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 32);
  id v5 = v3;
  [v4 _articleLayoutForDiscoveryItem:v5 completion:v6];
}

void sub_10045F7D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10045F8DC;
  v12[3] = &unk_100736010;
  id v13 = v6;
  id v14 = v5;
  id v15 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 32);
  id v16 = v8;
  uint64_t v17 = v9;
  id v18 = *(id *)(a1 + 56);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_10045F8DC(uint64_t a1)
{
  if (*(void *)(a1 + 32) || (id v8 = *(void **)(a1 + 40)) == 0)
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = objc_opt_class();
      id v4 = *(void **)(a1 + 48);
      id v5 = v3;
      id v6 = [v4 identifier];
      uint64_t v7 = *(void *)(a1 + 32);
      int v14 = 138412802;
      id v15 = v3;
      __int16 v16 = 2112;
      uint64_t v17 = v6;
      __int16 v18 = 2112;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Failed to get Discovery Article Layout for Discovery Item Identifier: %@ with error: %@", (uint8_t *)&v14, 0x20u);
    }
  }
  else
  {
    [v8 setItem:*(void *)(a1 + 48)];
    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = sub_10045FA48(*(void **)(a1 + 48));
    [v9 localizeWithBundle:v10];

    id v11 = *(void **)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = [*(id *)(a1 + 48) identifier];
    [v11 setObject:v12 forKey:v13];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

id sub_10045FA48(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc((Class)NSBundle);
  id v3 = sub_10046ACDC(v1);

  id v4 = [v2 initWithURL:v3];
  return v4;
}

void sub_10045FB8C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x3032000000;
  long long v20 = sub_100020E08;
  BOOL v21 = sub_1000211F8;
  id v22 = [*(id *)(*(void *)(a1 + 32) + 8) discoveryItemWithIdentifier:*(void *)(a1 + 40)];
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3032000000;
  v15[3] = sub_100020E08;
  void v15[4] = sub_1000211F8;
  id v16 = 0;
  if (!v18[5])
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10045FE20;
    v12[3] = &unk_100730BC0;
    id v3 = *(void **)(a1 + 40);
    void v12[4] = *(void *)(a1 + 32);
    int v14 = &v17;
    id v13 = v3;
    [v2 addOperation:v12];
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100460170;
  v11[3] = &unk_100736BF8;
  void v11[4] = *(void *)(a1 + 32);
  void v11[5] = &v17;
  void v11[6] = v15;
  [v2 addOperation:v11];
  id v4 = +[NSNull null];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100460314;
  v7[3] = &unk_100738E60;
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v10 = v15;
  id v9 = *(id *)(a1 + 48);
  id v6 = [v2 evaluateWithInput:v4 completion:v7];

  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_10045FDFC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10045FE20(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1[4] + 16);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10045FF00;
  v13[3] = &unk_100752E60;
  id v14 = v6;
  id v10 = (void *)a1[5];
  uint64_t v9 = a1[6];
  id v16 = v7;
  uint64_t v17 = v9;
  id v15 = v10;
  id v11 = v6;
  id v12 = v7;
  [v8 performHandlerOnSharedWebServiceQueue:v13];
}

void sub_10045FF00(uint64_t a1, void *a2)
{
  if (a2)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10045FFF8;
    v5[3] = &unk_100752E38;
    uint64_t v9 = *(void *)(a1 + 56);
    id v6 = *(id *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    id v7 = *(id *)(a1 + 32);
    [a2 discoveryManifestWithCompletion:v5];
  }
  else
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v4();
  }
}

void sub_10045FFF8(uint64_t a1, void *a2)
{
  id v3 = [a2 manifest];
  id v4 = [v3 discoveryItems];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1004600EC;
  v8[3] = &unk_100752E10;
  id v9 = *(id *)(a1 + 32);
  uint64_t v5 = objc_msgSend(v4, "pk_firstObjectPassingTest:", v8);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 40), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == 0);
}

uint64_t sub_1004600EC(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_100460170(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v13[0] = _NSConcreteStackBlock;
  int8x16_t v9 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  v13[1] = 3221225472;
  v13[2] = sub_100460250;
  v13[3] = &unk_100752E88;
  int8x16_t v16 = v9;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v8 _articleLayoutForDiscoveryItem:v10 completion:v13];
}

void sub_100460250(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v6 = a2;
  [*(id *)(*(void *)(a1[6] + 8) + 40) setItem:*(void *)(*(void *)(a1[7] + 8) + 40)];
  id v4 = *(void **)(*(void *)(a1[6] + 8) + 40);
  id v5 = sub_10045FA48(*(void **)(*(void *)(a1[7] + 8) + 40));
  [v4 localizeWithBundle:v5];

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v6 == 0);
}

void sub_100460314(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004603F4;
  block[3] = &unk_100752EB0;
  id v13 = v5;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v14 = v7;
  uint64_t v15 = v8;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v11;
  long long v16 = v11;
  id v10 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_1004603F4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCanceled])
  {
    id v2 = objc_alloc_init((Class)PKDiscoveryItem);
    [v2 setIdentifier:*(void *)(a1 + 40)];
    if (sub_1004604E0(v2))
    {
      uint64_t v3 = [*(id *)(a1 + 48) _discoveryArticleLayoutFromBundleForDiscoveryItem:v2 error:0];
      uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
      id v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = v3;

      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setItem:v2];
      id v6 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      id v7 = sub_10045FA48(v2);
      [v6 localizeWithBundle:v7];
    }
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v8();
}

id sub_1004604E0(void *a1)
{
  id v1 = a1;
  id v2 = +[NSFileManager defaultManager];
  uint64_t v3 = sub_10046ACDC(v1);

  uint64_t v4 = [v3 path];
  id v5 = [v2 fileExistsAtPath:v4];

  return v5;
}

void sub_100460640(uint64_t a1)
{
  if (((unint64_t)[*(id *)(a1 + 32) _currentMessagesBundleVersion] & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100460908;
  v30[3] = &unk_100752F18;
  uint64_t v4 = *(void **)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  void v30[4] = *(void *)(a1 + 32);
  uint64_t v32 = v3;
  id v31 = v4;
  id v5 = objc_retainBlock(v30);
  id v6 = [v2 paymentPass];
  unsigned int v7 = [v6 hasAssociatedPeerPaymentAccount];

  if (!v7)
  {
    id v14 = [v2 paymentPass];
    uint64_t v15 = [v14 associatedAccountServiceAccountIdentifier];

    if (v15)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void **)(v16 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100460D54;
      v22[3] = &unk_100752F90;
      void v22[4] = v16;
      id v10 = &v23;
      long long v11 = (id *)&v24;
      id v23 = *(id *)(a1 + 40);
      id v24 = v5;
      v25[1] = 2;
      id v12 = (id *)v25;
      v25[0] = *(id *)(a1 + 48);
      __int16 v18 = v5;
      [v17 defaultAccountForFeature:2 completion:v22];
      goto LABEL_6;
    }

LABEL_8:
    uint64_t v19 = *(NSObject **)(*(void *)(a1 + 32) + 272);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100460F98;
    void v20[3] = &unk_10072F788;
    id v21 = *(id *)(a1 + 48);
    dispatch_async(v19, v20);
    id v2 = v21;
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 48);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100460AF4;
  v26[3] = &unk_100752F68;
  void v26[4] = v8;
  id v10 = &v27;
  long long v11 = (id *)&v28;
  id v27 = v2;
  id v28 = v5;
  v29[1] = 1;
  id v12 = (id *)v29;
  v29[0] = *(id *)(a1 + 48);
  id v13 = v5;
  [v9 accountWithPreventingServerFetch:0 completion:v26];
LABEL_6:

LABEL_9:
}

void sub_100460908(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (a2)
  {
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
    id v5 = +[NSDate date];
    id v2 = [v4 engagementMessagesForPassQualifier:v2 relevantDate:v5 active:*(void *)(a1 + 48)];
  }
  id v6 = [*(id *)(a1 + 32) _filterEngagementMessagesForViewCount:v2];

  [v6 enumerateObjectsUsingBlock:&stru_100752EF0];
  unsigned int v7 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100460AE0;
  v10[3] = &unk_10072E598;
  id v8 = *(id *)(a1 + 40);
  id v11 = v6;
  id v12 = v8;
  id v9 = v6;
  dispatch_async(v7, v10);
}

void sub_100460A24(id a1, PKDiscoveryEngagementMessage *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  sub_100460A80();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKDiscoveryEngagementMessage *)v4 localizeWithBundle:v5];
}

id sub_100460A80()
{
  id v0 = objc_alloc((Class)NSBundle);
  id v1 = sub_100467EC4();
  id v2 = [v0 initWithURL:v1];

  return v2;
}

uint64_t sub_100460AE0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100460AF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100460BE0;
  v8[3] = &unk_100752F40;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(void **)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v5;
  id v13 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_100460BE0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) associatedPassSerialNumber];
  id v3 = [*(id *)(a1 + 40) serialNumber];
  id v4 = v2;
  id v5 = v3;
  if (v4 == v5)
  {

    goto LABEL_10;
  }
  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {

LABEL_13:
    id v10 = *(NSObject **)(*(void *)(a1 + 48) + 272);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100460D40;
    block[3] = &unk_10072F788;
    id v12 = *(id *)(a1 + 64);
    dispatch_async(v10, block);

    return;
  }
  unsigned __int8 v8 = [v4 isEqualToString:v5];

  if ((v8 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  id v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  v9();
}

uint64_t sub_100460D40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100460D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100460E40;
  v8[3] = &unk_100752F40;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(void **)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v5;
  id v13 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_100460E40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) associatedPassUniqueID];
  id v3 = *(void **)(a1 + 40);
  id v4 = v2;
  id v5 = v3;
  if (v4 == v5)
  {

    goto LABEL_10;
  }
  id v6 = v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {

LABEL_13:
    id v10 = *(NSObject **)(*(void *)(a1 + 48) + 272);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100460F84;
    block[3] = &unk_10072F788;
    id v12 = *(id *)(a1 + 64);
    dispatch_async(v10, block);

    return;
  }
  unsigned int v8 = [v4 isEqualToString:v5];

  if (!v8) {
    goto LABEL_13;
  }
LABEL_10:
  id v9 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
  v9();
}

uint64_t sub_100460F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100460F98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100461070(void *a1)
{
  uint64_t v1 = a1[6];
  if (a1[4])
  {
    id v3 = objc_msgSend(*(id *)(a1[5] + 136), "objectForKeyedSubscript:");
    (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v3, 0);

    id v4 = (void *)a1[4];
    id v5 = (void *)a1[5];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100461184;
    v8[3] = &unk_100737AC0;
    void v8[4] = v5;
    id v9 = v4;
    [v5 loadDialogRequestsForPlacement:v9 completion:v8];
  }
  else
  {
    id v6 = *(void (**)(uint64_t, void *))(v1 + 16);
    uint64_t v7 = a1[6];
    v6(v7, &__NSArray0__struct);
  }
}

void sub_100461184(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1004612C4(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Dismissing dialog request with identifier:%@ for placement:%@", buf, 0x16u);
  }

  if (*(void *)(a1 + 40))
  {
    id v5 = objc_msgSend(*(id *)(*(void *)(a1 + 48) + 136), "objectForKeyedSubscript:");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100461434;
    v8[3] = &unk_100752FB8;
    id v9 = *(id *)(a1 + 32);
    id v6 = objc_msgSend(v5, "pk_createArrayByRemovingObjectsPassingTest:", v8);
    [*(id *)(*(void *)(a1 + 48) + 136) setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

id sub_100461434(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1004617B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004617DC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init((Class)NSMutableArray);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v21 = v2;
  id obj = [v2 messageActions];
  id v25 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
  if (v25)
  {
    uint64_t v23 = *(void *)v37;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v37 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = v4;
        id v5 = *(void **)(*((void *)&v36 + 1) + 8 * v4);
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        id v6 = [v5 placementsMap];
        uint64_t v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];

        id v8 = [v7 countByEnumeratingWithState:&v32 objects:v42 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v33;
          do
          {
            for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v33 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void *)(*((void *)&v32 + 1) + 8 * i);
              uint64_t v13 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                uint64_t v41 = v12;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "received AMS engagement request: %{public}@", buf, 0xCu);
              }

              [v3 addObject:v12];
            }
            id v9 = [v7 countByEnumeratingWithState:&v32 objects:v42 count:16];
          }
          while (v9);
        }

        uint64_t v4 = v26 + 1;
      }
      while ((id)(v26 + 1) != v25);
      id v25 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
    }
    while (v25);
  }

  uint64_t v14 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v41 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "fetched AMSEngagementMessageRequests for placement %{public}@", buf, 0xCu);
  }

  uint64_t v16 = *(id *)(a1 + 40);
  uint64_t v17 = v16;
  os_signpost_id_t v18 = *(void *)(a1 + 72);
  if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_END, v18, "com.apple.passkit.dashboard.message-fetch", "", buf, 2u);
  }

  uint64_t v19 = *(NSObject **)(*(void *)(a1 + 48) + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100461BA0;
  block[3] = &unk_100753008;
  objc_copyWeak(&v31, (id *)(a1 + 64));
  id v28 = v3;
  id v29 = *(id *)(a1 + 32);
  id v30 = *(id *)(a1 + 56);
  id v20 = v3;
  dispatch_async(v19, block);

  objc_destroyWeak(&v31);
}

void sub_100461BA0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 32), "count"));
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v5 = *(id *)(a1 + 32);
    id v6 = (id *)[v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v18;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (id *)((char *)i + 1))
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          uint64_t v10 = [v9 makeDialogRequest];
          if (v10 && [v9 presentationAction]) {
            [v4 addObject:v10];
          }
        }
        uint64_t v7 = (id *)[v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v7);
    }

    uint64_t v11 = [WeakRetained[17] objectForKeyedSubscript:*(void *)(a1 + 40)];
    id v12 = [v11 count];
    id v13 = [v4 count];
    if (v12 == v13)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100461E00;
      v15[3] = &unk_100752FE0;
      unint64_t i = &v16;
      id v14 = v4;
      id v16 = v14;
      objc_msgSend(v11, "pk_countObjectsPassingTest:", v15);
      [v14 count];
    }
    [WeakRetained[17] setObject:v4 forKeyedSubscript:*(void *)(a1 + 40)];
    [WeakRetained[18] setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    if (v12 == v13) {
  }
    }
}

uint64_t sub_100461E00(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = [a2 identifier];
  id v6 = [*(id *)(a1 + 32) objectAtIndexedSubscript:a3];
  uint64_t v7 = [v6 identifier];
  id v8 = v5;
  id v9 = v7;
  uint64_t v10 = v9;
  if (v8 == v9)
  {
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    if (v8 && v9) {
      uint64_t v11 = (uint64_t)[v8 isEqualToString:v9];
    }
  }

  return v11;
}

void sub_100461F78(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) engagementMessageWithIdentifier:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 status];
    id v5 = [v3 type];
    if (v5 != (id)3) {
      [v3 updatedStatusForAction:*(void *)(a1 + 56)];
    }
    id v6 = [*(id *)(*(void *)(a1 + 32) + 8) updateEngagementMessage:v3];
    unsigned __int8 v7 = [v6 isTerminalStatus];
    if (v5 == (id)3) {
      char v8 = 1;
    }
    else {
      char v8 = v7;
    }
    [*(id *)(*(void *)(a1 + 32) + 88) performedAction:*(void *)(a1 + 56) onEngagementMessage:v3];
    if (v4 != [v3 status])
    {
      unsigned int v9 = [v3 isTerminalStatus];
      if (v5 != (id)3 && v9 != 0) {
        objc_msgSend(*(id *)(a1 + 32), "_queue_updateDiscoveryEngagementMessageStatusDefaults");
      }
    }
  }
  else
  {
    uint64_t v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = objc_opt_class();
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138412802;
      id v21 = v12;
      __int16 v22 = 2112;
      uint64_t v23 = v13;
      __int16 v24 = 2048;
      uint64_t v25 = v14;
      id v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@: No Discovery Item found for updateDiscoveryItemWithIdentifier: called with item identifier: %@ and action: %ld", buf, 0x20u);
    }
    char v8 = 0;
  }
  id v16 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10046218C;
  v17[3] = &unk_10073B5A0;
  id v18 = *(id *)(a1 + 48);
  char v19 = v8;
  dispatch_async(v16, v17);
}

uint64_t sub_10046218C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10046226C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) discoveryItemWithIdentifier:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 status];
    [v3 updatedStatusForAction:*(void *)(a1 + 56)];
    id v5 = [*(id *)(*(void *)(a1 + 32) + 8) updateDiscoveryItem:v3];
    unsigned __int8 v6 = [v5 isTerminalStatus];
    [*(id *)(*(void *)(a1 + 32) + 88) performedAction:*(void *)(a1 + 56) onDiscoveryItem:v3];
    if (v4 != [v3 status] && objc_msgSend(v3, "isTerminalStatus")) {
      objc_msgSend(*(id *)(a1 + 32), "_queue_updateDiscoveryItemStatusDefaults");
    }
    [*(id *)(*(void *)(a1 + 32) + 64) updateWalletBadgeCount];
  }
  else
  {
    unsigned __int8 v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      char v8 = objc_opt_class();
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 138412802;
      long long v17 = v8;
      __int16 v18 = 2112;
      uint64_t v19 = v9;
      __int16 v20 = 2048;
      uint64_t v21 = v10;
      id v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: No Discovery Item found for updateDiscoveryItemWithIdentifier: called with item identifier: %@ and action: %ld", buf, 0x20u);
    }
    unsigned __int8 v6 = 0;
  }
  id v12 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10046246C;
  v13[3] = &unk_10073B5A0;
  id v14 = *(id *)(a1 + 48);
  unsigned __int8 v15 = v6;
  dispatch_async(v12, v13);
}

uint64_t sub_10046246C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

id sub_1004626BC(void *a1)
{
  return [*(id *)(a1[4] + 88) tappedDiscoveryItemCTA:a1[6] itemIdentifier:a1[5] cardSize:a1[7]];
}

void sub_100462810(void *a1, void *a2)
{
  id v3 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1004628C8;
  v9[3] = &unk_100753080;
  id v5 = (void *)a1[4];
  id v4 = (void *)a1[5];
  id v10 = v3;
  id v11 = v5;
  id v6 = v4;
  uint64_t v7 = a1[6];
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = v3;
  [v5 fetchWelcomeCardCount:v9];
}

id sub_1004628C8(uint64_t a1, uint64_t a2)
{
  id v3 = (char *)[*(id *)(a1 + 32) count] + a2;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(void **)(*(void *)(a1 + 40) + 88);
  uint64_t v6 = *(void *)(a1 + 56);
  return _[v5 discoveryItemWithIdentifier:v4 launchedWithReferralSource:v6 cardCount:v3];
}

void sub_1004629D4(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 paymentSetupSupportedInRegion] == (id)1;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100462A80;
  block[3] = &unk_10073A378;
  BOOL v8 = v3;
  void block[4] = v4;
  id v7 = *(id *)(a1 + 40);
  dispatch_async(v5, block);
}

uint64_t sub_100462A80(uint64_t a1)
{
  if (PKSecureElementIsAvailable() && *(unsigned char *)(a1 + 48))
  {
    +[PKSecureElement isInFailForward];
    uint64_t v2 = a1 + 32;
    [*(id *)(*(void *)(a1 + 32) + 8) passExistsWithPassType:1];
  }
  else
  {
    uint64_t v2 = a1 + 32;
    [*(id *)(*(void *)(a1 + 32) + 8) passExistsWithPassType:1];
  }
  if (([*(id *)(*(void *)v2 + 8) passExistsWithPassType:0] & 1) == 0) {
    PKBarcodePassWelcomeCardDismissed();
  }
  BOOL v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

id sub_100462CB4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isPeerPaymentPass])
  {
    uint64_t v2 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100462E6C;
    v11[3] = &unk_10072E4F8;
    void v11[4] = v2;
    [v2 loadDialogRequestsForPlacement:PKEngagementAppleCashDashboardPlacement completion:v11];
  }
  if ([*(id *)(a1 + 32) isAppleCardPass])
  {
    BOOL v3 = *(void **)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100462ED4;
    v10[3] = &unk_10072E4F8;
    void v10[4] = v3;
    [v3 loadDialogRequestsForPlacement:PKEngagementAppleCardDashboardPlacement completion:v10];
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100462F3C;
    v9[3] = &unk_10072F200;
    void v9[4] = v4;
    [v5 defaultAccountForFeature:5 completion:v9];
  }
  id result = [*(id *)(a1 + 32) isPayLaterPass];
  if (result)
  {
    id v7 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_1004630C4;
    v8[3] = &unk_10072E4F8;
    void v8[4] = v7;
    return [v7 loadDialogRequestsForPlacement:PKEngagementPayLaterDashboardPlacement completion:v8];
  }
  return result;
}

void sub_100462E6C(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCashDashboardPlacement];
  }
}

void sub_100462ED4(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementAppleCardDashboardPlacement];
  }
}

void sub_100462F3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 264);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100462FD8;
  v7[3] = &unk_10072E198;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void *sub_100462FD8(void *result)
{
  if (result[4])
  {
    uint64_t v1 = (void *)result[5];
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10046305C;
    v2[3] = &unk_10072E4F8;
    v2[4] = v1;
    return [v1 loadDialogRequestsForPlacement:PKEngagementSavingsDashboardPlacement completion:v2];
  }
  return result;
}

void sub_10046305C(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementSavingsDashboardPlacement];
  }
}

void sub_1004630C4(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
    [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) dialogRequestsChangedForPlacement:PKEngagementPayLaterDashboardPlacement];
  }
}

void sub_100463384(uint64_t a1)
{
  if ([*(id *)(a1 + 32) updateReasonIsInitialDownload]) {
    return;
  }
  BOOL v2 = [*(id *)(a1 + 40) transactionStatus] == (id)1
    || [*(id *)(a1 + 32) transactionStatus] != (id)1;
  if ([*(id *)(a1 + 32) accountType] == (id)2)
  {
    id v3 = [*(id *)(a1 + 32) transactionType];
    uint64_t v4 = [*(id *)(a1 + 32) altDSID];
    BOOL v5 = (PKAltDSIDIsCurrentUser() & 1) == 0
      && [*(id *)(*(void *)(a1 + 48) + 8) transactionSourceTypeForTransactionSourceIdentifier:*(void *)(a1 + 56)] != 0;

    if (v3) {
      char v6 = 1;
    }
    else {
      char v6 = v2;
    }
    if ((v6 & 1) != 0 || v5) {
      return;
    }
    id v7 = [*(id *)(a1 + 32) rewards];
    id v8 = [v7 promotionalRewardsItems];
    id v9 = [v8 count];

    if (v9) {
      +[PKEngagementEventTrigger fireDefaultCreditAccountReceivedBonusDailyCashEvent];
    }
    id v10 = [*(id *)(a1 + 32) merchant];
    id v11 = [v10 mapsBrand];

    id v12 = [*(id *)(a1 + 32) merchant];
    uint64_t v13 = [v12 mapsMerchant];

    id v14 = (char *)[*(id *)(a1 + 32) cardType];
    unsigned __int8 v15 = [v7 enhancedMerchantRewardsItems];
    id v16 = [v15 count];

    if (v11 && (unint64_t)(v14 - 7) >= 0xFFFFFFFFFFFFFFFELL && !v16)
    {
      long long v17 = *(void **)(*(void *)(a1 + 48) + 8);
      __int16 v18 = [*(id *)(a1 + 32) accountIdentifier];
      uint64_t v19 = [v17 accountEnhancedMerchantsForAccountIdentifier:v18];

      __int16 v20 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v11 identifier]);
      BOOL v39 = v2;
      long long v37 = v11;
      long long v38 = v7;
      long long v36 = v13;
      if (v13)
      {
        uint64_t v21 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v13 identifier]);
      }
      else
      {
        uint64_t v21 = 0;
      }
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v22 = v19;
      id v23 = [v22 countByEnumeratingWithState:&v40 objects:v44 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = *(void *)v41;
        while (2)
        {
          for (unint64_t i = 0; i != v24; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v41 != v25) {
              objc_enumerationMutation(v22);
            }
            id v27 = *(void **)(*((void *)&v40 + 1) + 8 * i);
            id v28 = objc_msgSend(v27, "brandMUIDs", v36, v37, v38);
            id v29 = [v27 excludedMUIDs];
            unsigned int v30 = [v28 containsObject:v20];
            if (v21) {
              unsigned int v31 = [v29 containsObject:v21];
            }
            else {
              unsigned int v31 = 0;
            }
            if (v31) {
              unsigned int v32 = 0;
            }
            else {
              unsigned int v32 = v30;
            }
            if (v32 == 1)
            {
              +[PKEngagementEventTrigger fireDefaultCreditAccountPurchaseMissedApplePayMerchantRewardsEvent];

              goto LABEL_38;
            }
          }
          id v24 = [v22 countByEnumeratingWithState:&v40 objects:v44 count:16];
          if (v24) {
            continue;
          }
          break;
        }
      }
LABEL_38:

      BOOL v2 = v39;
      id v11 = v37;
      id v7 = v38;
      uint64_t v13 = v36;
    }
  }
  if (objc_msgSend(*(id *)(a1 + 32), "accountType", v36, v37, v38) == (id)4)
  {
    uint64_t v33 = *(void *)(a1 + 40);
    if ([*(id *)(a1 + 32) transactionType] == (id)6)
    {
      id v34 = [*(id *)(a1 + 32) topUpType];
      if (!v33 && v34 == (id)6) {
        +[PKEngagementEventTrigger fireAppleAccountInStoreTopUpEvent];
      }
    }
  }
  if ([*(id *)(a1 + 32) peerPaymentType] == (id)1
    || [*(id *)(a1 + 32) peerPaymentType] == (id)2)
  {
    char v35 = [*(id *)(a1 + 32) peerPaymentPaymentMode] != (id)2 || v2;
    if ((v35 & 1) == 0) {
      +[PKEngagementEventTrigger firePeerPaymentDeviceTapTransactionAddedEvent];
    }
  }
}

void sub_100463B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100463BB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6 || ![v5 count])
    {
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 138412290;
        id v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Discovery manager failed to get placemark, error: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    else
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Discovery manager got a new placemark", (uint8_t *)&v11, 2u);
      }

      id v10 = *(void **)(a1 + 32);
      id v8 = [v5 firstObject];
      [v10 _putLatestValidPlacemarkAndNotify:v8];
    }

    [WeakRetained processLocationUpdate];
  }
}

void sub_100463F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100463F54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v6 || ![v5 count])
    {
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 138412290;
        id v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Discovery manager failed to get placemark, error: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    else
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Discovery manager got a new placemark", (uint8_t *)&v11, 2u);
      }

      id v10 = *(void **)(a1 + 32);
      id v8 = [v5 firstObject];
      [v10 _putLatestValidPlacemarkAndNotify:v8];
    }

    [WeakRetained processLocationUpdate];
  }
}

void sub_100464524(id a1, NSError *a2)
{
  BOOL v2 = a2;
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error processing Discovery Items after account promotions updated: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

id sub_100464C38(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _shouldReprocessForTransaction:*(void *)(a1 + 40) previousTransactionProcessingDate:*(void *)(*(void *)(a1 + 32) + 296)];
  if (result)
  {
    id v3 = objc_alloc_init((Class)NSDate);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 296);
    *(void *)(v4 + 296) = v3;

    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received transactions updated event", v7, 2u);
    }

    return +[PKEngagementEventTrigger fireTransactionsUpdatedEvent];
  }
  return result;
}

id sub_100464D6C(uint64_t a1)
{
  PKSetDiscoveryShouldProcessLocaleChange();
  BOOL v2 = *(void **)(a1 + 32);
  return objc_msgSend(v2, "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:", 1, &stru_1007530E8);
}

void sub_100464DB4(id a1, NSError *a2)
{
  BOOL v2 = a2;
  PKSetDiscoveryShouldProcessLocaleChange();
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      int v8 = 138412290;
      id v9 = v2;
      id v5 = "Error - Update Discovery Manifest failed for locale change, %@";
      id v6 = v3;
      uint32_t v7 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v8, v7);
    }
  }
  else if (v4)
  {
    LOWORD(v8) = 0;
    id v5 = "Updated Discovery Manifest for locale change";
    id v6 = v3;
    uint32_t v7 = 2;
    goto LABEL_6;
  }
}

void sub_100465208(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_100465248(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 40));
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = WeakRetained[33];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100465328;
    v12[3] = &unk_100730198;
    id v13 = v6;
    id v14 = v8;
    id v10 = v5;
    uint64_t v11 = *(void *)(a1 + 32);
    id v15 = v10;
    uint64_t v16 = v11;
    dispatch_async(v9, v12);
  }
}

id sub_100465328(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = objc_opt_class();
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)int v8 = 138412546;
      *(void *)&void v8[4] = v3;
      *(_WORD *)&v8[12] = 2112;
      *(void *)&v8[14] = v4;
      id v5 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@: Error during rules evaluation for discovery notifications: %@", v8, 0x16u);
    }
  }
  else
  {
    id v6 = [*(id *)(*(void *)(a1 + 40) + 8) updateDiscoveryNotificationsForRuleResults:*(void *)(a1 + 48)];
    objc_msgSend(*(id *)(a1 + 40), "_queue_insertDiscoveryNotificationsIfNecessary");
  }
  objc_msgSend(*(id *)(a1 + 40), "_queue_scheduleTaskForNextAction", *(_OWORD *)v8, *(void *)&v8[16]);
  *(unsigned char *)(*(void *)(a1 + 40) + 249) = 0;
  return objc_msgSend(*(id *)(a1 + 40), "_queue_performNextProcessingDiscoveryObjects");
}

void sub_10046572C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100465744(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 160);
  if (v3)
  {
    uint64_t v4 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    objc_storeStrong(v4, v3);
  }
  else
  {
    id v5 = *(void **)(v2 + 208);
    id v6 = objc_retainBlock(*(id *)(a1 + 40));
    [v5 addObject:v6];

    uint32_t v7 = *(void **)(a1 + 32);
    _objc_msgSend(v7, "_lock_startLocationQueryTimeoutIfNecessary");
  }
}

void sub_1004658F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100465908(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 168);
  if (v3)
  {
    uint64_t v4 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    objc_storeStrong(v4, v3);
  }
  else
  {
    id v5 = *(void **)(v2 + 216);
    id v6 = objc_retainBlock(*(id *)(a1 + 40));
    [v5 addObject:v6];

    uint32_t v7 = *(void **)(a1 + 32);
    _objc_msgSend(v7, "_lock_startLocationQueryTimeoutIfNecessary");
  }
}

void sub_100465B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100465B88(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 160), *(id *)(a1 + 40));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 208) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = *(void **)(*(void *)(a1 + 32) + 208);
  return [v5 removeAllObjects];
}

void sub_100465DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100465DD8(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 168), *(id *)(a1 + 40));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 216) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = *(void **)(*(void *)(a1 + 32) + 216);
  return [v5 removeAllObjects];
}

void sub_100465FBC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100465FD0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    v36[0] = 0;
    v36[1] = v36;
    v36[2] = 0x3032000000;
    v36[3] = sub_100020E08;
    v36[4] = sub_1000211F8;
    id v37 = 0;
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3032000000;
    v34[3] = sub_100020E08;
    v34[4] = sub_1000211F8;
    id v35 = 0;
    uint64_t v28 = 0;
    id v29 = &v28;
    uint64_t v30 = 0x3032000000;
    unsigned int v31 = sub_100020E08;
    unsigned int v32 = sub_1000211F8;
    id v33 = 0;
    uint64_t v22 = 0;
    id v23 = &v22;
    uint64_t v24 = 0x3032000000;
    uint64_t v25 = sub_100020E08;
    uint64_t v26 = sub_1000211F8;
    id v27 = 0;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10046636C;
    v21[3] = &unk_100753138;
    void v21[6] = v36;
    v21[7] = &v28;
    uint64_t v4 = *(void *)(a1 + 32);
    void v21[4] = WeakRetained;
    v21[5] = v4;
    v21[8] = v34;
    v21[9] = &v22;
    [WeakRetained _executeWithLock:v21];
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = (id)v29[5];
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v39 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v18;
      do
      {
        int v8 = 0;
        do
        {
          if (*(void *)v18 != v7) {
            objc_enumerationMutation(v5);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v17 + 1) + 8 * (void)v8) + 16))();
          int v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v5 countByEnumeratingWithState:&v17 objects:v39 count:16];
      }
      while (v6);
    }

    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v9 = (id)v23[5];
    id v10 = [v9 countByEnumeratingWithState:&v13 objects:v38 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v14;
      do
      {
        id v12 = 0;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v9);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v12) + 16))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v12));
          id v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v9 countByEnumeratingWithState:&v13 objects:v38 count:16];
      }
      while (v10);
    }

    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&v28, 8);

    _Block_object_dispose(v34, 8);
    _Block_object_dispose(v36, 8);
  }
}

void sub_100466310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

id sub_10046636C(void *a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(a1[4] + 224));
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void **)(v2 + 224);
  *(void *)(v2 + 224) = 0;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 160));
  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), *(id *)(a1[5] + 208));
  [*(id *)(a1[5] + 208) removeAllObjects];
  objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), *(id *)(a1[4] + 168));
  objc_storeStrong((id *)(*(void *)(a1[9] + 8) + 40), *(id *)(a1[5] + 216));
  uint64_t v4 = *(void **)(a1[5] + 216);
  return [v4 removeAllObjects];
}

void sub_1004665DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100466694;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100466694(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100466740(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) discoveryItems];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100466804;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 40);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100466804(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1004668FC(id *a1)
{
  objc_storeStrong((id *)a1[4] + 38, a1[5]);
  objc_msgSend(a1[4], "_queue_updateWithServerDiscoveryItems:", a1[6]);
  if (![a1[6] count])
  {
    [a1[4] _cleanArticleLayoutsDirectories];
    [a1[4] _updateDiscoveryItemStatusDefaultsForUpdatedItems:&__NSArray0__struct];
  }
  uint64_t v2 = *((void *)a1[4] + 34);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004669CC;
  block[3] = &unk_10072F788;
  id v4 = a1[7];
  dispatch_async(v2, block);
}

uint64_t sub_1004669CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1004669DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100466A94;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100466A94(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100466B6C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2 || ![v2 count])
  {
    id v3 = [*(id *)(a1 + 40) _deleteMessagesBundle];
    [*(id *)(a1 + 40) _updateDiscoveryEngagementMessageStatusDefaultsForUpdatedMessages:0];
    objc_msgSend(*(id *)(a1 + 40), "_queue_updateDiscoveryNotificationsStatusDefaultsForUpdatedNotifications:", 0);
    objc_msgSend(*(id *)(a1 + 40), "_queue_updateWithServerNotifications:", 0);
    [*(id *)(a1 + 40) _processUpdatedNotifications];
  }
  objc_msgSend(*(id *)(a1 + 40), "_queue_updateWithServerEngagementMessages:", *(void *)(a1 + 32));
  id v4 = *(NSObject **)(*(void *)(a1 + 40) + 272);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100466C54;
  block[3] = &unk_10072F788;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

uint64_t sub_100466C54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100466D28(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) deleteEngagementMessageWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 272);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100466DC8;
  block[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

uint64_t sub_100466DC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100466E70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 64);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100466F08;
  v3[3] = &unk_1007346F0;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  [v2 userNotificationsOfType:27 completion:v3];
}

void sub_100466F08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100466FC4;
  block[3] = &unk_10072E9D8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_100466FC4(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Removing discovery user notifications %@", buf, 0xCu);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*(void *)(a1 + 40) + 64) removeUserNotification:*(void *)(*((void *)&v12 + 1) + 8 * (void)v8)];
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  uint64_t v9 = *(NSObject **)(*(void *)(a1 + 40) + 272);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100467180;
  block[3] = &unk_10072F788;
  id v11 = *(id *)(a1 + 48);
  dispatch_async(v9, block);
}

uint64_t sub_100467180(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100467250(uint64_t a1)
{
  unsigned int v2 = +[PKEngagementEventTrigger fireEngagementEventNamed:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2)
  {
    id v4 = *(void (**)(uint64_t, void))(v3 + 16);
    v4(v3, 0);
  }
  else
  {
    id v5 = +[NSError errorWithDomain:PKPassKitErrorDomain code:1 userInfo:0];
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }
}

id sub_1004673AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_shouldUpdateDiscoveryManifestWithCompletion:", *(void *)(a1 + 40));
}

void sub_100467580(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10046763C;
  block[3] = &unk_10072E9D8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_10046763C(void *a1)
{
  *(unsigned char *)(a1[4] + 248) = 0;
  uint64_t v2 = a1[5];
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching discovery manifest returned error: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_1004677B0(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100467840;
  v4[3] = &unk_100753160;
  id v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [a2 discoveryManifestWithCompletion:v4];
}

void sub_100467840(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100467924;
  v12[3] = &unk_100731EC0;
  id v13 = v6;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v5;
  uint64_t v15 = v9;
  id v16 = v8;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_100467924(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v2();
  }
  else
  {
    id v3 = [*(id *)(a1 + 40) manifest];
    objc_msgSend(*(id *)(a1 + 48), "_queue_processDiscoveryManifest:completion:", v3, *(void *)(a1 + 56));
  }
}

id sub_100467A74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_processDiscoveryManifest:completion:", *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_100467E40(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _cleanArticleLayoutsDirectories];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100467EA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100467EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100467EC4()
{
  id v0 = PKDiscoveryDirectoryPath();
  uint64_t v1 = [v0 stringByAppendingPathComponent:@"messages"];
  uint64_t v2 = +[NSURL fileURLWithPath:v1];

  id v3 = [v2 URLByAppendingPathExtension:@"pkmessage"];

  return v3;
}

uint64_t sub_100467F5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [*(id *)(a1 + 32) _discoveryMessageManifestFromBundle:a2 withError:a3];
  id v6 = v5;
  if (a3 && !*a3)
  {
    id v8 = v5;
    id v5 = objc_msgSend(*(id *)(a1 + 32), "_queue_processDownloadedMessagesManifest:", v5);
    id v6 = v8;
  }
  return _objc_release_x1(v5, v6);
}

void sub_100467FD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10046806C;
  block[3] = &unk_10073A378;
  void block[4] = v1;
  char v5 = *(unsigned char *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);
}

void sub_10046806C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004680FC;
  v3[3] = &unk_1007378B8;
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_queue_processDiscoveryItemsAndMessagesShouldForceBadgeCountUpdate:completion:", v1, v3);
}

uint64_t sub_1004680FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1004681BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1004681D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10046829C;
  block[3] = &unk_100732858;
  objc_copyWeak(&v10, (id *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v10);
}

void sub_10046829C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "_queue_processExistingDiscoveryUserNotifications:", *(void *)(a1 + 32));
    id v4 = +[NSDate date];
    uint64_t v5 = [*(id *)(*(void *)(a1 + 40) + 8) discoveryNotificationsToScheduleForDate:v4];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          [v10 scheduleDeliveryForCurrentDate:v4];
          id v11 = [v3[1] insertOrUpdateDiscoveryNotification:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
    }
    objc_msgSend(v3, "_queue_insertDiscoveryNotificationsIfNecessary");
    objc_msgSend(v3, "_queue_scheduleTaskForNextAction");
  }
}

void sub_1004684E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));

  if (WeakRetained)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(NSObject **)(v5 + 272);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004685A4;
    v7[3] = &unk_10072E198;
    void v7[4] = v5;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_1004685A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
  [WeakRetained defaultDiscoveryManager:*(void *)(a1 + 32) sendDiscoveryArticleLayoutsUpdated:*(void *)(a1 + 40)];
}

void sub_1004685F8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 152));
  [WeakRetained sendDiscoveryEngagementMessagesUpdatedToDefaultDiscoveryManager:*(void *)(a1 + 32)];
}

void sub_10046892C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004689C0;
  block[3] = &unk_100735E20;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_1004689C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[249] = 0;
    uint64_t v2 = WeakRetained;
    objc_msgSend(WeakRetained, "_queue_performNextProcessingDiscoveryObjects");
    id WeakRetained = v2;
  }
}

void sub_100469240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,id location)
{
  objc_destroyWeak(v48);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a42, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1004692C4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v11 = WeakRetained;
  if (WeakRetained)
  {
    long long v12 = (void *)*((void *)WeakRetained + 6);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100469410;
    v15[3] = &unk_100753200;
    objc_copyWeak(&v19, (id *)(a1 + 40));
    id v17 = v9;
    id v13 = v8;
    uint64_t v14 = *(void *)(a1 + 32);
    id v16 = v13;
    uint64_t v18 = v14;
    [v12 accountWithPreventingServerFetch:0 completion:v15];

    objc_destroyWeak(&v19);
  }
  else
  {
    (*((void (**)(id, id, uint64_t))v9 + 2))(v9, v8, 1);
  }
}

void sub_1004693FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100469410(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[33];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10046950C;
    v7[3] = &unk_100738A50;
    uint64_t v11 = *(void *)(a1 + 48);
    id v8 = v3;
    id v10 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v6, v7);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_10046950C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) associatedPassUniqueID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v5();
}

void sub_10046956C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v11 = WeakRetained;
  if (WeakRetained)
  {
    long long v12 = (void *)*((void *)WeakRetained + 4);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1004696B8;
    v15[3] = &unk_100753228;
    objc_copyWeak(&v19, (id *)(a1 + 40));
    id v17 = v9;
    id v13 = v8;
    uint64_t v14 = *(void *)(a1 + 32);
    id v16 = v13;
    uint64_t v18 = v14;
    [v12 defaultAccountForFeature:2 completion:v15];

    objc_destroyWeak(&v19);
  }
  else
  {
    (*((void (**)(id, id, uint64_t))v9 + 2))(v9, v8, 1);
  }
}

void sub_1004696A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1004696B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[33];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1004697B4;
    v7[3] = &unk_100738A50;
    uint64_t v11 = *(void *)(a1 + 48);
    id v8 = v3;
    id v10 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v6, v7);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_1004697B4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) associatedPassUniqueID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v5();
}

void sub_100469814(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  if (!WeakRetained)
  {
    v7[2](v7, v6, 1);
    goto LABEL_22;
  }
  uint64_t v26 = v7;
  id v27 = v6;
  uint64_t v28 = sub_100460A80();
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v9 = *(id *)(a1 + 32);
  id v10 = [v9 countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (!v10) {
    goto LABEL_20;
  }
  id v11 = v10;
  uint64_t v12 = *(void *)v30;
  do
  {
    for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v30 != v12) {
        objc_enumerationMutation(v9);
      }
      uint64_t v14 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      long long v15 = objc_msgSend(v14, "relevantDateRange", v26, v27);
      id v16 = [v14 scheduledDeliveryDate];
      unsigned int v17 = [v15 isValidForTime:v16];

      if (v17)
      {
        if ([v14 passQualifier] == (id)1)
        {
          uint64_t v18 = *(void *)(a1 + 48);
          goto LABEL_15;
        }
        if ([v14 passQualifier] == (id)2)
        {
          uint64_t v18 = *(void *)(a1 + 56);
LABEL_15:
          id v22 = *(id *)(*(void *)(v18 + 8) + 40);
        }
        else
        {
          id v22 = 0;
        }
        [v14 localizeWithBundle:v28];
        id v23 = (void *)*((void *)WeakRetained + 8);
        uint64_t v24 = [[PDDiscoveryUserNotification alloc] initWithDiscoveryNotification:v14 passUniqueIdentifier:v22];
        [v23 insertUserNotification:v24];

        [v14 setDelivered:1];
        id v25 = [*((id *)WeakRetained + 1) insertOrUpdateDiscoveryNotification:v14];

        continue;
      }
      id v19 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v34 = v20;
        __int16 v35 = 2112;
        long long v36 = v14;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%@: Discovery Notification had invalid schedule delivery date: %@", buf, 0x16u);
      }

      [v14 setScheduledDeliveryDate:0];
      id v21 = [*((id *)WeakRetained + 1) insertOrUpdateDiscoveryNotification:v14];
    }
    id v11 = [v9 countByEnumeratingWithState:&v29 objects:v37 count:16];
  }
  while (v11);
LABEL_20:

  id v7 = v26;
  id v6 = v27;
  v26[2](v26, v27, 0);

LABEL_22:
}

void sub_100469B04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 isCanceled])
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      int v7 = 138412290;
      id v8 = WeakRetained;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Operation to insert notifications was cancelled.", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_100469E4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8) + 16))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8));
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
}

void sub_100469F6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10046A06C;
  block[3] = &unk_100730B70;
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = v5;
  long long v12 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v12;
  long long v18 = v12;
  id v17 = *(id *)(a1 + 40);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

uint64_t sub_10046A06C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v2);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_queue_restoreDiscoveryItemStatusFromDefaultsIfNecessaryWithServerItems:", *(void *)(a1 + 48));
    id v3 = [*(id *)(*(void *)(a1 + 40) + 8) updateDiscoveryItemsWithDialogRequestSourcedItems:*(void *)(a1 + 48)];
  }
  id v4 = PKLogFacilityTypeGetObject();
  id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Updated %lu items", [*(id *)(a1 + 48) count]);
  id v6 = (id)PKTimeProfileEnd();

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);
  return v7();
}

void sub_10046A154(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  PKTimeProfileBegin();
  uint64_t v8 = *(unsigned __int8 *)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10046A23C;
  v13[3] = &unk_1007307C0;
  id v10 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v9;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  objc_msgSend(v10, "_queue_evaluateRulesAndForceBadgeCountUpdate:completion:", v8, v13);
}

void sub_10046A23C(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  id v4 = PKLogFacilityTypeGetObject();
  id v5 = +[NSString stringWithFormat:@"Error: %@", v7];
  id v6 = (id)PKTimeProfileEnd();

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10046A310(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_10046A32C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v22 = a3;
  if (v22)
  {
    id v6 = 0;
  }
  else
  {
    id v6 = +[NSMutableArray array];
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v23 = v5;
  id obj = [v5 messageActions];
  id v27 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
  if (v27)
  {
    uint64_t v26 = *(void *)v34;
    uint64_t v25 = PKEngagementPassesPlacement;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v34 != v26) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = v7;
        uint64_t v8 = *(void **)(*((void *)&v33 + 1) + 8 * v7);
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        uint64_t v9 = [v8 placementsMap];
        id v10 = [v9 objectForKeyedSubscript:v25];

        id v11 = [v10 countByEnumeratingWithState:&v29 objects:v39 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v30;
          do
          {
            for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v30 != v13) {
                objc_enumerationMutation(v10);
              }
              id v15 = *(void **)(*((void *)&v29 + 1) + 8 * i);
              [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendFormat:@"received AMS engagement request: %@", v15];
              uint64_t v16 = [v15 engagementRequest];
              id v17 = +[PKDiscoveryItem activeItemFromEngagementRequest:v16];
              [v6 safelyAddObject:v17];
            }
            id v12 = [v10 countByEnumeratingWithState:&v29 objects:v39 count:16];
          }
          while (v12);
        }

        uint64_t v7 = v28 + 1;
      }
      while ((id)(v28 + 1) != v27);
      id v27 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
    }
    while (v27);
  }

  long long v18 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v38 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  uint64_t v20 = *(void *)(a1 + 32);
  id v21 = [v6 copy];
  (*(void (**)(uint64_t, id, id))(v20 + 16))(v20, v21, v22);
}

void sub_10046A838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10046A85C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10046A964;
  v12[3] = &unk_1007532C8;
  objc_copyWeak(&v17, (id *)(a1 + 48));
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v13 = v6;
  uint64_t v14 = v8;
  id v15 = v5;
  char v18 = *(unsigned char *)(a1 + 56);
  id v16 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);

  objc_destroyWeak(&v17);
}

void sub_10046A964(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 64));
  if (WeakRetained)
  {
    if (*(void *)(a1 + 32))
    {
      id v3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v12 = WeakRetained;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%@: Error evaluating rules for Discovery Objects", buf, 0xCu);
      }
    }
    else
    {
      unsigned __int8 v4 = [*(id *)(*(void *)(a1 + 40) + 8) activeDiscoveryItemRequiringBadgeExistsForRelevantDate:0];
      id v3 = [*(id *)(*(void *)(a1 + 40) + 8) updateDiscoveryNotificationsForRuleResults:*(void *)(a1 + 48)];
      objc_msgSend(WeakRetained, "_queue_updateDiscoveryNotificationsStatusDefaultsForUpdatedNotifications:", v3);
      [*(id *)(a1 + 40) _processUpdatedNotifications];
      if (*(unsigned char *)(a1 + 72)
        || (v4 & 1) != 0
        || (id v5 = *(void **)(*(void *)(a1 + 40) + 8),
            +[NSDate now],
            id v6 = objc_claimAutoreleasedReturnValue(),
            LODWORD(v5) = [v5 activeDiscoveryItemRequiringBadgeExistsForRelevantDate:v6],
            v6,
            v5))
      {
        [WeakRetained[8] updateWalletBadgeCount];
      }
      [WeakRetained _callDelegateWithLayoutsForUpdatedDiscoveryItemsAndMessages];
    }

    uint64_t v7 = *(NSObject **)(*(void *)(a1 + 40) + 272);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_10046AB48;
    v8[3] = &unk_10072E598;
    id v10 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 32);
    dispatch_async(v7, v8);
  }
}

uint64_t sub_10046AB48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10046ACDC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_10046C3A4();
  id v3 = [v1 identifier];

  unsigned __int8 v4 = [v2 stringByAppendingPathComponent:v3];

  id v5 = +[NSURL fileURLWithPath:v4];
  id v6 = [v5 URLByAppendingPathExtension:@"pkarticle"];

  return v6;
}

void sub_10046AD8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10046AE68;
  block[3] = &unk_100731830;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10046AE68(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10046AF80(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = v3;
    id v5 = 0;
    id v6 = 0;
  }
  else
  {
    uint64_t v7 = (void *)a1[4];
    uint64_t v8 = a1[5];
    id v10 = 0;
    id v6 = [v7 _discoveryArticleLayoutFromBundleForDiscoveryItem:v8 error:&v10];
    id v4 = v10;
    id v5 = v4;
  }
  uint64_t v9 = a1[6];
  if (v9) {
    (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v6, v4);
  }
}

void sub_10046B12C(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_10046B1F8;
  v6[3] = &unk_100753368;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [a2 discoveryBundleForURL:v4 completion:v6];
}

void sub_10046B1F8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10046B2FC;
  block[3] = &unk_100753340;
  id v12 = v7;
  id v13 = v6;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, block);
}

void sub_10046B2FC(uint64_t a1)
{
  uint64_t v2 = (__CFBundle *)*(id *)(a1 + 32);
  if (v2)
  {
    CFBundleRef v3 = v2;
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      CFBundleRef v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fetching messages bundle failed with error: %@", buf, 0xCu);
    }
    goto LABEL_34;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = +[NSFileManager defaultManager];
    [v4 removeItemAtURL:*(void *)(a1 + 48) error:0];
    id v5 = [*(id *)(a1 + 48) pathExtension];
    PKTemporaryItemURLWithExtension();
    id v6 = (NSURL *)objc_claimAutoreleasedReturnValue();

    if (!*(void *)(a1 + 40))
    {
      id v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Attempting to cache nil data", buf, 2u);
      }

      goto LABEL_29;
    }
    PKTemporaryItemPrepareDirectory();
    PKUnarchiverZip(*(NSData **)(a1 + 40), v6);
    if (*(void *)(a1 + 56))
    {
      id v7 = +[NSBundle bundleWithURL:v6];
      uint64_t v8 = *(void *)(a1 + 56);
      v26[1] = 0;
      (*(void (**)(void))(v8 + 16))();
      id v9 = (__CFBundle *)0;
      if (v9)
      {
        CFBundleRef v3 = v9;
        id v10 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          CFBundleRef v28 = v3;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Processing temp bundle failed with error: %@", buf, 0xCu);
        }

LABEL_32:
        goto LABEL_33;
      }
    }
    id v12 = [*(id *)(a1 + 48) URLByDeletingLastPathComponent];
    id v13 = [v12 path];

    id v14 = +[NSFileManager defaultManager];
    unsigned __int8 v15 = [v14 fileExistsAtPath:v13];

    if (v15)
    {
      id v16 = 0;
    }
    else
    {
      uint64_t v19 = +[NSFileManager defaultManager];
      v26[0] = 0;
      unsigned __int8 v20 = [v19 createDirectoryAtPath:v13 withIntermediateDirectories:1 attributes:0 error:v26];
      id v16 = (__CFBundle *)v26[0];

      if ((v20 & 1) == 0 && v16)
      {
        id v21 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          PKDiscoveryDirectoryPath();
          id v22 = (__CFBundle *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)long long buf = 138412546;
          CFBundleRef v28 = v22;
          __int16 v29 = 2112;
          CFBundleRef v30 = v16;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Could not create directory at %@ with error: %@", buf, 0x16u);
        }
        goto LABEL_29;
      }
    }

    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v25 = v16;
    unsigned int v18 = [v4 copyItemAtURL:v6 toURL:v17 error:&v25];
    CFBundleRef v3 = v25;

    if (!v18 || v3)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = *(__CFBundle **)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        CFBundleRef v28 = v23;
        __int16 v29 = 2112;
        CFBundleRef v30 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to copy discovery bundle to %@ with error: %@", buf, 0x16u);
      }
      goto LABEL_32;
    }
    CFBundleRef v3 = CFBundleCreate(kCFAllocatorDefault, *(CFURLRef *)(a1 + 48));
    if (!v3)
    {
LABEL_33:

      goto LABEL_34;
    }
    _CFBundleFlushBundleCaches();
    CFRelease(v3);
LABEL_29:
    CFBundleRef v3 = 0;
    goto LABEL_33;
  }
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Trying to cache empty data", buf, 2u);
  }
  CFBundleRef v3 = 0;
LABEL_34:

  uint64_t v24 = *(void *)(a1 + 64);
  if (v24) {
    (*(void (**)(uint64_t, CFBundleRef))(v24 + 16))(v24, v3);
  }
}

void sub_10046C17C(uint64_t a1)
{
  uint64_t v2 = +[NSFileManager defaultManager];
  CFBundleRef v3 = sub_10046C3A4();
  unsigned int v4 = [v2 fileExistsAtPath:v3];

  if (v4)
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 8) nonTerminalDiscoveryItemIdentifiers];
    id v6 = sub_10046C3A4();
    id v7 = +[NSURL URLWithString:v6];
    v15[0] = NSURLNameKey;
    v15[1] = NSURLPathKey;
    uint64_t v8 = +[NSArray arrayWithObjects:v15 count:2];
    id v9 = [v2 enumeratorAtURL:v7 includingPropertiesForKeys:v8 options:1 errorHandler:&stru_1007533D0];

    id v10 = [v9 allObjects];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10046C3F8;
    v12[3] = &unk_1007533F8;
    id v13 = v5;
    id v14 = v2;
    id v11 = v5;
    [v10 enumerateObjectsUsingBlock:v12];
  }
}

BOOL sub_10046C350(id a1, NSURL *a2, NSError *a3)
{
  unsigned int v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100517C70((uint64_t)a3, v4);
  }

  return 0;
}

id sub_10046C3A4()
{
  id v0 = PKDiscoveryDirectoryPath();
  id v1 = [v0 stringByAppendingPathComponent:@"Articles"];

  return v1;
}

void sub_10046C3F8(uint64_t a1, void *a2)
{
  uint64_t v9 = 0;
  CFBundleRef v3 = [a2 path];
  unsigned int v4 = [v3 lastPathComponent];
  id v5 = [v4 stringByDeletingPathExtension];

  if (([*(id *)(a1 + 32) containsObject:v5] & 1) == 0)
  {
    unsigned int v6 = [*(id *)(a1 + 40) removeItemAtPath:v3 error:&v9];
    uint64_t v7 = v9;
    if (!v6 || v9)
    {
      uint64_t v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        uint64_t v11 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Couldn't remove stale discovery bundle due to error: %{public}@", buf, 0xCu);
      }
    }
  }
}

id sub_10046C6D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  id v5 = [v3 identifier];
  unsigned int v6 = [v4 objectForKeyedSubscript:v5];

  id v7 = [v6 longValue];
  if (v6)
  {
    [v3 setStatus:v7];
    id v8 = v3;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id sub_10046CB90(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  id v5 = [v3 identifier];
  unsigned int v6 = [v4 objectForKeyedSubscript:v5];

  id v7 = [v6 longValue];
  if (v6)
  {
    [v3 setStatus:v7];
    id v8 = v3;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

id sub_10046CFF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(a1 + 32);
  id v5 = [v3 identifier];
  unsigned int v6 = [v4 objectForKeyedSubscript:v5];

  id v7 = [v6 longValue];
  if (v6)
  {
    [v3 setStatus:v7];
    id v8 = v3;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

uint64_t sub_10046D4B0()
{
  if (qword_100808FD0 != -1) {
    dispatch_once(&qword_100808FD0, &stru_100753490);
  }
  id v0 = (uint64_t (*)())dlsym((void *)qword_100808FC8, "BYSetupAssistantHasCompletedInitialRun");
  off_100807498 = v0;
  return v0();
}

void sub_10046D518(id a1)
{
  qword_100808FC8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
}

void sub_10046D69C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = PKSharedPeerPaymentWebServiceContextPath();
  [v1 archiveAtPath:v2];

  id v3 = +[NSDistributedNotificationCenter defaultCenter];
  [v3 postNotificationName:PDSharedPeerPaymentWebServiceDidChangeNotification object:0];
}

void sub_10046E28C(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Migrating local peer payment transactions to include the peer payment account identifier", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  [WeakRetained addPeerPaymentAccountIdentifierToDatabaseTransactions];
}

void sub_10046E314(uint64_t a1, void *a2)
{
  id v3 = [a2 associatedPassUniqueID];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  id v5 = [WeakRetained passWithUniqueIdentifier:v3];
  unsigned int v6 = [v5 paymentPass];

  id v7 = [v6 deviceTransactionSourceIdentifiers];
  if ([v7 count])
  {
    uint64_t v18 = a1;
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v26 = v3;
      __int16 v27 = 2112;
      CFBundleRef v28 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fetching all transactions from the cloud store associated with the peer payment pass %@, deviceTransactionSourceIdentifiers: %@", buf, 0x16u);
    }
    uint64_t v17 = v6;

    id v9 = objc_alloc_init((Class)NSMutableDictionary);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id obj = v7;
    id v10 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v21;
      do
      {
        for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void *)(*((void *)&v20 + 1) + 8 * i);
          unsigned __int8 v15 = +[NSString stringWithFormat:@"paymentApplication, %@, %@", v3, @"Apple Cash"];
          [v9 setObject:v15 forKeyedSubscript:v14];
        }
        id v11 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v11);
    }

    a1 = v18;
    id v16 = [*(id *)(*(void *)(v18 + 32) + 208) applePayContainer];
    [v16 passProvisioningDidStartForPassUniqueID:v3 transactionSourceIdentifiers:v9 ignoreExistingRecordHash:0 groupNameSuffix:PKCloudStoreOperationGroupSuffixPeerPaymentAccountAdded completion:0];

    unsigned int v6 = v17;
  }
  [*(id *)(a1 + 32) updatePreferencesWithCompletion:0];
}

id sub_10046E588(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "registerConsumer:");
}

void sub_10046E700(uint64_t a1)
{
}

void sub_10046E7AC(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v35 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deleting shared peer payment webservice… (reason: '%{public}@')", buf, 0xCu);
  }

  id v4 = *(id *)(*(void *)(a1 + 40) + 56);
  id v5 = [*(id *)(*(void *)(a1 + 40) + 208) applePayContainer];
  [v5 invalidateCloudStoreIfPossibleWithOperationGroupNameSuffix:PKCloudStoreOperationGroupSuffixPKDeletePeerPaymentWebService clearCache:1];

  unsigned __int8 v6 = [v4 needsRegistration];
  id v7 = *(unsigned char **)(a1 + 40);
  if (v6)
  {
    [v7 deleteAccountWithCompletion:0];
    [v4 invalidate];
    [*(id *)(a1 + 40) _updatePushTopics];
  }
  else
  {
    v7[168] = 1;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10046EBE4;
    v33[3] = &unk_100730120;
    uint64_t v8 = *(void *)(a1 + 32);
    void v33[4] = *(void *)(a1 + 40);
    [v4 diagnosticSessionWithReason:v8 sessionHandler:v33];
  }
  id v9 = +[NSFileManager defaultManager];
  id v10 = PKSharedPeerPaymentWebServiceContextPath();
  [v9 removeItemAtPath:v10 error:0];

  uint64_t v11 = *(void *)(a1 + 40);
  if (*(void *)(v11 + 56))
  {
    [*(id *)(v11 + 8) unregisterConsumer:*(void *)(a1 + 40)];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Recreating shared webservice…", buf, 2u);
    }

    uint64_t v12 = PKSharedPeerPaymentWebServiceContextPath();
    id v13 = +[PKPeerPaymentWebServiceContext contextWithArchive:v12];

    id v14 = objc_alloc((Class)PKPeerPaymentWebService);
    id v15 = [objc_alloc((Class)PKPeerPaymentWebServiceTargetDevice) initWithTargetDeviceDelegate:*(void *)(a1 + 40)];
    id v16 = [v14 initWithContext:v13 targetDevice:v15 archiver:*(void *)(*(void *)(a1 + 40) + 48)];
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void **)(v17 + 56);
    *(void *)(v17 + 56) = v16;

    uint64_t v19 = PDDefaultQueue();
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10046ED84;
    v32[3] = &unk_10072E1E8;
    v32[4] = *(void *)(a1 + 40);
    dispatch_async(v19, v32);

    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(v11 + 56);
  }
  else
  {
    uint64_t v20 = 0;
  }
  [(id)v11 _updateSharedCacheWithWebService:v20];
  long long v21 = +[NSDistributedNotificationCenter defaultCenter];
  [v21 postNotificationName:PDSharedPeerPaymentWebServiceDidChangeNotification object:0];

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104));
  uint64_t v23 = [WeakRetained peerPaymentAccount];
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v25 = *(void **)(v24 + 64);
  *(void *)(v24 + 64) = v23;

  id v26 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104));
  uint64_t v27 = [v26 peerPaymentPreferences];
  uint64_t v28 = *(void *)(a1 + 40);
  __int16 v29 = *(void **)(v28 + 72);
  *(void *)(v28 + 72) = v27;

  [*(id *)(a1 + 40) _postAccountChangedNotification];
  CFBundleRef v30 = +[NSDistributedNotificationCenter defaultCenter];
  [v30 postNotificationName:PDPeerPaymentServicePreferencesChangedDistributedNotification object:0 userInfo:0 deliverImmediately:0];

  long long v31 = +[PKPeerPaymentRecipientCache sharedCache];
  LOBYTE(v26) = [v31 purgeCache];

  if ((v26 & 1) == 0)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Failed to purge the peer payment recipient cache.", buf, 2u);
    }
  }
}

void sub_10046EBE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10046EC78;
  v5[3] = &unk_100732CB8;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  [v4 peerPaymentUnregisterWithCompletion:v5];
}

id sub_10046EC78(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10046ED04;
  v4[3] = &unk_10072E1E8;
  void v4[4] = v2;
  [v2 deleteAccountWithCompletion:v4];
  [*(id *)(a1 + 40) invalidate];
  return [*(id *)(a1 + 32) _updatePushTopics];
}

void sub_10046ED04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10046ED78;
  block[3] = &unk_10072E1E8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_10046ED78(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 168) = 0;
  return result;
}

id sub_10046ED84(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "registerConsumer:");
}

void sub_10046EE84(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) context];
  id v7 = [v2 pushToken];

  [*(id *)(*(void *)(a1 + 32) + 56) setContext:*(void *)(a1 + 40)];
  if (v7)
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 56) context];
    id v4 = [v3 pushToken];
    unsigned __int8 v5 = [v7 isEqualToString:v4];

    if ((v5 & 1) == 0)
    {
      id v6 = [*(id *)(*(void *)(a1 + 32) + 56) context];
      [v6 setPushToken:v7];
    }
  }
  [*(id *)(a1 + 32) _archiveSharedPeerPaymentWebServiceContext];
}

uint64_t sub_10046F008(uint64_t a1)
{
  if ((PKUseMockSURFServer() & 1) != 0
    || PKStoreDemoModeEnabled()
    || ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration] & 1) != 0)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    unsigned __int8 v4 = [*(id *)(*(void *)(a1 + 32) + 72) isDirty];
    uint64_t v5 = *(void *)(a1 + 32);
    if ((v4 & 1) != 0
      || (v6 = [*(id *)(v5 + 72) isOutOfDate], uint64_t v5 = *(void *)(a1 + 32), (v6 & 1) != 0)
      || !*(void *)(v5 + 72))
    {
      if (!*(unsigned char *)(v5 + 136)) {
        [(id)v5 _updatePreferencesWithCompletion:0];
      }
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  return v2();
}

void sub_10046F300(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id v3 = objc_alloc_init((Class)PKPeerPaymentIdentityVerificationRequest);
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) context];
    objc_msgSend(v3, "setDevSigned:", objc_msgSend(v2, "devSigned"));

    [*(id *)(*(void *)(a1 + 32) + 56) peerPaymentIdentityVerificationRequest:v3 completion:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10046F434(uint64_t a1)
{
  if ((PKIsTV() & 1) != 0 || PKIsMac())
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
LABEL_6:

      uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
      return v5();
    }
    *(_WORD *)long long buf = 0;
    id v3 = "Returning peer payment registration status device not compatible due to unsupported platform";
    unsigned __int8 v4 = buf;
LABEL_5:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    goto LABEL_6;
  }
  if (!PKSecureElementIsAvailable())
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    __int16 v14 = 0;
    id v3 = "Returning peer payment registration status device not compatible for device without secure element";
    unsigned __int8 v4 = (uint8_t *)&v14;
    goto LABEL_5;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    unsigned int v7 = [*(id *)(*(void *)(a1 + 32) + 224) _canRegisterForPeerPayment];
    uint64_t v8 = PKLogFacilityTypeGetObject();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Returning peer payment registration status device not registered", v12, 2u);
      }

      uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      if (v9)
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Returning peer payment registration status not eligible", v11, 2u);
      }

      uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    }
  }
  else
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning peer payment registration status registered", v13, 2u);
    }

    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  return v5();
}

void sub_10046F6A4(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Handling companion serial number changed", buf, 2u);
  }

  id v3 = *(id *)(*(void *)(a1 + 32) + 56);
  if (([v3 needsRegistration] & 1) == 0)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int8 v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scheduling a peer payment register to update server with our new companion serial number…", v4, 2u);
    }

    [*(id *)(a1 + 32) _schedulePeerPaymentReregisterActivityForReason:@"serial number changed re-register"];
  }
}

void sub_10046FAA4(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration] & 1) != 0
    || *(unsigned char *)(a1 + 72))
  {
    if (*(void *)(a1 + 40))
    {
      if (*(void *)(a1 + 48))
      {
        uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 216);
        if (*(void *)(a1 + 56)) {
          CFStringRef v3 = *(const __CFString **)(a1 + 56);
        }
        else {
          CFStringRef v3 = @"Peer Payment Registration";
        }
        uint64_t v4 = *(unsigned __int8 *)(a1 + 72);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_10046FCB4;
        v11[3] = &unk_1007534E0;
        id v12 = *(id *)(a1 + 64);
        [v2 performDeviceRegistrationForReason:v3 brokerURL:0 action:1 forceApplePayRegister:0 forcePeerPaymentRegister:v4 completion:v11];

        return;
      }
      uint64_t v5 = PKLogFacilityTypeGetObject();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)long long buf = 0;
      unsigned __int8 v6 = "Cannot register with the peer payment server. Registration url is nil.";
    }
    else
    {
      uint64_t v5 = PKLogFacilityTypeGetObject();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_18;
      }
      *(_WORD *)long long buf = 0;
      unsigned __int8 v6 = "Cannot register with the peer payment server. Push token is nil.";
    }
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
LABEL_18:

    uint64_t v9 = *(void *)(a1 + 64);
    if (v9)
    {
      id v10 = PKDisplayableErrorForCommonType();
      (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
    }
    return;
  }
  unsigned int v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "The peer payment service is already registered.", buf, 2u);
  }

  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v8, 1, 0);
  }
}

void sub_10046FCB4(uint64_t a1, char a2, void *a3, void *a4)
{
  id v11 = a3;
  uint64_t v7 = a4;
  unint64_t v8 = a2 & 0x20 | (unint64_t)v7;
  BOOL v9 = v8 != 0;
  if (!v8)
  {
    uint64_t v7 = PKDisplayableErrorForCommonType();
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, BOOL, uint64_t))(v10 + 16))(v10, v9, v7);
  }
}

void sub_10046FE54(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v16 = v3;
    __int16 v17 = 2112;
    uint64_t v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to register with the peer payment service with url: '%@' pushToken: %@", buf, 0x16u);
  }

  unsigned __int8 v5 = [*(id *)(*(void *)(a1 + 48) + 56) needsRegistration];
  if ((v5 & 1) != 0 || *(unsigned char *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    unint64_t v8 = *(void **)(v6 + 56);
    uint64_t v9 = *(void *)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100470014;
    v11[3] = &unk_100753558;
    void v11[4] = v6;
    char v13 = v5 ^ 1;
    char v14 = *(unsigned char *)(a1 + 65);
    id v12 = *(id *)(a1 + 56);
    [v8 peerPaymentRegisterWithURL:v9 pushToken:v7 completion:v11];
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skipped registration with the peer payment service because already registered.", buf, 2u);
    }

    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t, void))(v10 + 16))(v10, 1, 0);
    }
  }
}

void sub_100470014(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(NSObject **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004700FC;
  block[3] = &unk_10073E0F8;
  void block[4] = v7;
  id v12 = v5;
  id v13 = v6;
  __int16 v15 = *(_WORD *)(a1 + 48);
  id v14 = *(id *)(a1 + 40);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_1004700FC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 65);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1004701B4;
  v6[3] = &unk_100753530;
  void v6[4] = v1;
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  objc_msgSend(v1, "_queue_processRegistrationResponse:registrationError:previouslyRegistered:abridgedRegistration:completion:", v2, v5, v3, v4, v6);
}

void sub_1004701B4(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) _archiveSharedPeerPaymentWebServiceContext];
  if (a2 == 4)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully registered with the peer payment service.", (uint8_t *)&v14, 2u);
    }

    PKSetUserHasDisabledPeerPayment();
  }
  else
  {
    if (!v5)
    {
      id v5 = +[NSError errorWithDomain:PKPeerPaymentWebServiceErrorDomain code:0 userInfo:0];
    }
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 3) {
        CFStringRef v8 = @"unknown";
      }
      else {
        CFStringRef v8 = off_100753BE0[a2];
      }
      int v14 = 138543618;
      CFStringRef v15 = v8;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to register with the peer payment service with state: %{public}@ and error: %@", (uint8_t *)&v14, 0x16u);
    }
  }
  [*(id *)(a1 + 32) _updatePushTopics];
  id v9 = +[PKPeerPaymentRecipientCache sharedCache];
  unsigned __int8 v10 = [v9 purgeCache];

  if ((v10 & 1) == 0)
  {
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to purge the peer payment recipient cache.", (uint8_t *)&v14, 2u);
    }
  }
  id v12 = +[NSDistributedNotificationCenter defaultCenter];
  [v12 postNotificationName:PKPeerPaymentRegistrationStatusChangedNotification object:0 userInfo:0 options:1];

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, BOOL, id))(v13 + 16))(v13, a2 == 4, v5);
  }
}

void sub_10047084C(void *a1, int a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1[4] + 56) removeDiagnosticReason:a1[5]];
  id v6 = PKLogFacilityTypeGetObject();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5 || !a2)
  {
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v12 = a1[5];
    int v14 = 138412546;
    uint64_t v15 = v12;
    __int16 v16 = 2112;
    id v17 = v5;
    id v9 = "Unregister failed for reason \"%@\", with error %@.";
    unsigned __int8 v10 = v6;
    uint32_t v11 = 22;
  }
  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v8 = a1[5];
    int v14 = 138412290;
    uint64_t v15 = v8;
    id v9 = "Unregister was successful for reason \"%@\".";
    unsigned __int8 v10 = v6;
    uint32_t v11 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
LABEL_8:

  uint64_t v13 = a1[7];
  if (v13) {
    (*(void (**)(uint64_t, void, void))(v13 + 16))(v13, a1[8], a1[6]);
  }
}

uint64_t sub_100470988(void *a1)
{
  [*(id *)(a1[4] + 56) removeDiagnosticReason:a1[5]];
  uint64_t result = a1[7];
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1004709E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _peerPaymentErrorStateForRegistrationResponse:*(void *)(a1 + 40) error:*(void *)(a1 + 48) expectsPass:*(unsigned char *)(a1 + 64) == 0];
  if (v2 == (id)4)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 4, *(void *)(a1 + 48));
    }
    if (([*(id *)(*(void *)(a1 + 32) + 64) supportsThresholdTopUp] & 1) != 0
      || ([*(id *)(*(void *)(a1 + 32) + 64) supportsRecurringPayments] & 1) != 0
      || [*(id *)(*(void *)(a1 + 32) + 64) hasRecurringPayments])
    {
      [*(id *)(a1 + 32) updateRecurringPaymentsWithCompletion:0];
    }
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = v4[8];
    [v4 _updateEncryptionCertificatesIfNeededWithAccount:v5];
  }
  else
  {
    unint64_t v6 = (unint64_t)v2;
    BOOL v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (v6 > 3) {
        CFStringRef v8 = @"unknown";
      }
      else {
        CFStringRef v8 = off_100753BE0[v6];
      }
      *(_DWORD *)long long buf = 138543362;
      CFStringRef v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDPeerPaymentWebServiceCoordinator: non-nil error state registering %{public}@", buf, 0xCu);
    }

    if (*(unsigned char *)(a1 + 65))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      if (v9) {
        (*(void (**)(uint64_t, unint64_t, void))(v9 + 16))(v9, v6, *(void *)(a1 + 48));
      }
    }
    else
    {
      if (v6 > 3) {
        CFStringRef v10 = @"unknown";
      }
      else {
        CFStringRef v10 = off_100753BE0[v6];
      }
      [*(id *)(*(void *)(a1 + 32) + 56) addDiagnosticReason:v10];
      uint32_t v11 = *(void **)(a1 + 32);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_100470C58;
      v12[3] = &unk_100753580;
      void v12[4] = v11;
      uint64_t v13 = (__CFString *)v10;
      id v15 = *(id *)(a1 + 56);
      unint64_t v16 = v6;
      id v14 = *(id *)(a1 + 48);
      [v11 unregisterDeviceWithCompletion:v12];
    }
  }
}

uint64_t sub_100470C58(void *a1)
{
  [*(id *)(a1[4] + 56) removeDiagnosticReason:a1[5]];
  uint64_t result = a1[7];
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_100470CB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100470D7C;
  v7[3] = &unk_100730238;
  id v8 = v3;
  uint64_t v9 = v4;
  char v11 = *(unsigned char *)(a1 + 48);
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100470D7C(uint64_t a1)
{
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0;
    id v6 = 0;
    uint64_t v7 = *(void *)v24;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v2);
        }
        uint64_t v9 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        if (objc_msgSend(v9, "isMe", (void)v23))
        {
          id v10 = v9;

          id v6 = v10;
        }
        else if ([v9 memberType] == (id)1 || objc_msgSend(v9, "memberType") == (id)2)
        {
          ++v5;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v4);
  }
  else
  {
    uint64_t v5 = 0;
    id v6 = 0;
  }

  [*(id *)(*(void *)(a1 + 40) + 64) setAccountStateDirty:1];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104));
  uint64_t v12 = [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 40) + 64)];
  uint64_t v13 = *(void *)(a1 + 40);
  id v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  if ([v6 memberType] == (id)1
    || [v6 memberType] == (id)2
    || [v6 canSharePeerPaymentAccount] && v5 >= 1)
  {
    if (objc_msgSend(*(id *)(*(void *)(a1 + 40) + 64), "supportsFamilySharing", (void)v23))
    {
      id v15 = [*(id *)(*(void *)(a1 + 40) + 64) associatedAccountInformation];
      if (!v15)
      {
        id v15 = objc_alloc_init((Class)PKPeerPaymentAssociatedAccountInformation);
        [*(id *)(*(void *)(a1 + 40) + 64) setAssociatedAccountInformation:v15];
      }
      [v15 setAssociatedAccountStateDirty:1];
      id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 104));
      uint64_t v17 = [v16 insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 40) + 64)];
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void **)(v18 + 64);
      *(void *)(v18 + 64) = v17;
    }
    uint64_t v20 = *(void **)(a1 + 40);
    long long v21 = +[NSSet setWithObject:@"CashReasonNewRegistration"];
    [v20 updateAccountAndAssociatedAccountsWithDiagnosticReasons:v21 abridgedRegistration:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }
  else
  {
    long long v22 = *(void **)(a1 + 40);
    long long v21 = +[NSSet setWithObject:@"CashReasonNewRegistration", (void)v23];
    [v22 updateAccountWithDiagnosticReasons:v21 abridgedRegistration:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 48)];
  }
}

void sub_100471134(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "The peer payment service is already unregistered.", buf, 2u);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 1, 0);
    }
  }
  else
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 64) associatedPassUniqueID];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100471274;
    v8[3] = &unk_10073C000;
    void v8[4] = v5;
    id v9 = v4;
    id v10 = *(id *)(a1 + 40);
    id v7 = v4;
    [v6 peerPaymentUnregisterWithCompletion:v8];
  }
}

void sub_100471274(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 || !a2)
  {
    char v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to unregister from the peer payment service.", (uint8_t *)&v14, 2u);
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0, v5);
      }
      else
      {
        uint64_t v13 = PKDisplayableErrorForCommonType();
        (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v13);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 32) deleteSharedWebServiceWithDiagnosticReason:@"User Initiated Unregister"];
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Successfully unregistered from the peer payment service.", (uint8_t *)&v14, 2u);
    }

    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 138412290;
        uint64_t v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing peer payment pass with unique id %@", (uint8_t *)&v14, 0xCu);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
      [WeakRetained deleteCardWithUniqueID:*(void *)(a1 + 40) forReason:6 withDiagnosticReason:@"Peer Payment Unregister"];
    }
    id v9 = +[NSDistributedNotificationCenter defaultCenter];
    [v9 postNotificationName:PKPeerPaymentRegistrationStatusChangedNotification object:0 userInfo:0 options:1];

    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t, void))(v10 + 16))(v10, 1, 0);
    }
  }
}

void sub_1004719CC(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDPeerPaymentWebServiceCoordinatorObserver *)v2 peerPaymentWebServiceCoordinatorDidDeleteAccount];
  }
}

void sub_100471B98(uint64_t a1)
{
  id v2 = [objc_alloc((Class)PKPeerPaymentUpdatePreferencesRequest) initWithPeerPaymentPreferences:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100471C58;
  v5[3] = &unk_100753638;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 48);
  [v4 peerPaymentUpdatePreferencesWithRequest:v2 completion:v5];
}

void sub_100471C58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100471D38;
  v11[3] = &unk_100730578;
  id v12 = v5;
  uint64_t v13 = v7;
  id v14 = v6;
  id v15 = *(id *)(a1 + 40);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_100471D38(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) peerPaymentPreferences];
  objc_msgSend(*(id *)(a1 + 40), "_writePreferences:withError:");
  uint64_t v2 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 48))
  {
    if (!v2) {
      goto LABEL_7;
    }
    uint64_t v3 = *(void (**)(void))(v2 + 16);
  }
  else
  {
    if (!v2) {
      goto LABEL_7;
    }
    uint64_t v3 = *(void (**)(void))(v2 + 16);
  }
  v3();
LABEL_7:
}

void sub_1004721BC(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 224);
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 64) associatedPassUniqueID];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 64) associatedPassURL];
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v5 + 168)
    || (id v10 = *(void **)(v5 + 56)) == 0
    || [v10 needsRegistration])
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v7 = "Not downloading the peer payment pass because the user in unregistered.";
    goto LABEL_4;
  }
  if (PKStoreDemoModeEnabled())
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (!v11) {
      goto LABEL_8;
    }
    id v9 = *(void (**)(void))(v11 + 16);
    goto LABEL_7;
  }
  if (v3) {
    BOOL v12 = v4 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12 && v2 != 0)
  {
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    v37[2] = sub_100472510;
    v37[3] = &unk_100753660;
    v37[4] = *(void *)(a1 + 32);
    id v14 = v4;
    id v38 = v14;
    id v39 = v3;
    id v40 = *(id *)(a1 + 40);
    id v15 = objc_retainBlock(v37);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1004726EC;
    v32[3] = &unk_100730C10;
    id v16 = v2;
    id v33 = v16;
    id v34 = v14;
    uint64_t v17 = v15;
    uint64_t v35 = *(void *)(a1 + 32);
    id v36 = v17;
    uint64_t v18 = objc_retainBlock(v32);
    long long v24 = _NSConcreteStackBlock;
    uint64_t v25 = 3221225472;
    long long v26 = sub_1004729E4;
    uint64_t v27 = &unk_100732118;
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v19 = v18;
    id v30 = v19;
    id v29 = v16;
    uint64_t v20 = v17;
    id v31 = v20;
    long long v21 = objc_retainBlock(&v24);
    id v22 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 64), "role", v24, v25, v26, v27, v28);
    long long v23 = (void ***)v19;
    if (v22)
    {
      if (v22 != (id)1)
      {
LABEL_30:

        goto LABEL_8;
      }
      if ([*(id *)(*(void *)(a1 + 32) + 64) termsAcceptanceRequired]) {
        long long v23 = (void ***)v19;
      }
      else {
        long long v23 = v21;
      }
    }
    ((void (*)(void))v23[2])();
    goto LABEL_30;
  }
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v7 = "Not downloading the peer payment pass because there is no pass unique ID or passURL defined.";
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 2u);
  }
LABEL_5:

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    id v9 = *(void (**)(void))(v8 + 16);
LABEL_7:
    v9();
  }
LABEL_8:
}

void sub_100472510(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004725D4;
  block[3] = &unk_100732C18;
  char v9 = a2;
  void block[4] = v3;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  dispatch_async(v4, block);
}

uint64_t sub_1004725D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 168)
    || (id v8 = *(void **)(v2 + 56)) == 0
    || (v9 = *(unsigned __int8 *)(a1 + 64), unsigned int v10 = [v8 needsRegistration], v6 = v9 != 0, v10))
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v11 = 138412290;
      uint64_t v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing downloaded peer payment pass %@ since the user is unregistered.", (uint8_t *)&v11, 0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
    [WeakRetained deleteCardWithUniqueID:*(void *)(a1 + 48) forReason:6 withDiagnosticReason:@"peer payment web service unregistered"];

    BOOL v6 = 0;
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, v6);
  }
  return result;
}

void sub_1004726EC(uint64_t a1)
{
  uint64_t v2 = (void *)PDOSTransactionCreate("PDPeerPaymentWebServiceCoordinator.pass.download");
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1004727B4;
  v8[3] = &unk_1007536B0;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 48);
  id v9 = v2;
  uint64_t v10 = v6;
  id v11 = v5;
  id v7 = v2;
  [v3 passAtURL:v4 completion:v8];
}

void sub_1004727B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2 == 1 && v5)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_1004728A8;
    v9[3] = &unk_100753688;
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = v7;
    uint64_t v11 = v8;
    id v12 = v6;
    id v13 = *(id *)(a1 + 48);
    [v12 downloadRemoteAssetsWithCompletion:v9];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1004728A8(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = PDDefaultQueue();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100472974;
    v7[3] = &unk_100730578;
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void **)(a1 + 48);
    id v8 = v4;
    uint64_t v9 = v5;
    id v10 = v6;
    id v11 = *(id *)(a1 + 56);
    dispatch_async(v3, v7);
  }
}

uint64_t sub_100472974(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[5] + 112));
  [WeakRetained writeCard:a1[6] source:1 error:0];

  uint64_t v3 = *(uint64_t (**)(void))(a1[7] + 16);
  return v3();
}

void sub_1004729E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 208);
  uint64_t v3 = PKCurrentCloudStoreApplePayContainerName();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100472AC0;
  v6[3] = &unk_100753750;
  id v9 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  id v10 = *(id *)(a1 + 56);
  [v2 cloudStoreStatusForContainer:v3 completion:v6];
}

void sub_100472AC0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  unsigned __int8 v8 = [v6 supportsDeviceToDeviceEncryption];
  id v9 = PKLogFacilityTypeGetObject();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Participant with no terms required and HSA2, attempting pass provisioning", buf, 2u);
    }

    *(void *)long long buf = 0;
    uint64_t v28 = buf;
    uint64_t v29 = 0x3032000000;
    id v30 = sub_100020E18;
    id v31 = sub_100021200;
    id v32 = 0;
    v25[0] = 0;
    v25[1] = v25;
    void v25[2] = 0x3032000000;
    v25[3] = sub_100020E18;
    v25[4] = sub_100021200;
    id v26 = 0;
    id v11 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100472DF0;
    void v20[3] = &unk_1007536D8;
    long long v23 = buf;
    id v12 = *(id *)(a1 + 32);
    long long v24 = v25;
    uint64_t v13 = *(void *)(a1 + 40);
    id v21 = v12;
    uint64_t v22 = v13;
    [v11 addOperation:v20];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100473048;
    v19[3] = &unk_100736BF8;
    void v19[4] = *(void *)(a1 + 40);
    void v19[5] = buf;
    void v19[6] = v25;
    [v11 addOperation:v19];
    id v14 = +[NSNull null];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10047347C;
    v16[3] = &unk_100753728;
    id v17 = *(id *)(a1 + 48);
    id v18 = *(id *)(a1 + 56);
    id v15 = [v11 evaluateWithInput:v14 completion:v16];

    _Block_object_dispose(v25, 8);
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (v10)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Participant with no terms required, but does not have HSA2, not attempting pass provisioning", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100472DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100472DF0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [objc_alloc((Class)PKPaymentProvisioningController) initWithWebService:a1[4] localPaymentService:0];
  uint64_t v9 = *(void *)(a1[6] + 8);
  BOOL v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = [objc_alloc((Class)PKPeerPaymentCredential) initWithPeerPaymentAccount:*(void *)(a1[5] + 64)];
  uint64_t v12 = *(void *)(a1[7] + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  uint64_t v14 = a1[7];
  id v15 = *(void **)(*(void *)(a1[6] + 8) + 40);
  uint64_t v22 = *(void *)(*(void *)(v14 + 8) + 40);
  id v16 = +[NSArray arrayWithObjects:&v22 count:1];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100472F70;
  v19[3] = &unk_100736EF0;
  id v20 = v6;
  id v21 = v7;
  id v17 = v6;
  id v18 = v7;
  [v15 associateCredentials:v16 withCompletionHandler:v19];
}

void sub_100472F70(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Peer Payment failed to setup provisioning controller: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100473048(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(NSObject **)(v8 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10047311C;
  block[3] = &unk_100753700;
  id v13 = v6;
  id v14 = v7;
  void block[4] = v8;
  long long v15 = *(_OWORD *)(a1 + 40);
  id v10 = v6;
  id v11 = v7;
  dispatch_async(v9, block);
}

void sub_10047311C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) targetDevice];
  if (v2)
  {
    char v3 = objc_opt_respondsToSelector();
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    if (v3)
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 56);
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1004732CC;
      v12[3] = &unk_100736EF0;
      id v14 = *(id *)(a1 + 48);
      id v13 = *(id *)(a1 + 40);
      [v2 provisionPeerPaymentPassWithProvisioningController:v4 peerPaymentWebService:v5 credential:v6 completion:v12];

      id v7 = v14;
    }
    else
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      _DWORD v9[2] = sub_1004733A4;
      v9[3] = &unk_100736EF0;
      id v11 = *(id *)(a1 + 48);
      id v10 = *(id *)(a1 + 40);
      [v2 provisionPeerPaymentPassWithProvisioningController:v4 credential:v8 completion:v9];

      id v7 = v11;
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1004732CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pass provisioning failed with error %@", (uint8_t *)&v6, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1004733A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pass provisioning failed with error %@", (uint8_t *)&v6, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10047347C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 isCanceled])
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Defaulting to shell pass.", v8, 2u);
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v7();
  }
}

void sub_10047370C(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Submitting device score identifiers for transaction %@", (uint8_t *)&v10, 0xCu);
  }

  id v4 = objc_alloc_init((Class)PKPeerPaymentSubmitDeviceScoreIdentifiersRequest);
  uint64_t v5 = [*(id *)(a1 + 32) serviceIdentifier];
  uint64_t v6 = [*(id *)(a1 + 32) sendDeviceScoreIdentifier];
  uint64_t v7 = [*(id *)(a1 + 32) requestDeviceScoreIdentifier];
  uint64_t v8 = v7;
  if (v5)
  {
    if (v6 | v7)
    {
      [v4 setPaymentIdentifier:v5];
      [v4 setSendDeviceScoreIdentifier:v6];
      [v4 setRequestDeviceScoreIdentifier:v8];
      [*(id *)(*(void *)(a1 + 40) + 56) submitDeviceScoreIdentifiersWithRequest:v4 completion:*(void *)(a1 + 48)];
      goto LABEL_14;
    }
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cannot submit device score identifiers without a serviceIdentifier", (uint8_t *)&v10, 2u);
    }

    if (v6 | v8) {
      goto LABEL_12;
    }
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cannot submit device score identifiers without a sendDeviceScoreIdentifier or requestDeviceScoreIdentifier defined.", (uint8_t *)&v10, 2u);
  }

LABEL_12:
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, 0, 0);
  }
LABEL_14:
}

id sub_100473990(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 208) cloudStoreStatusWithCompletion:*(void *)(a1 + 40)];
}

id sub_100473A38(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 208) checkTLKsMissingWithCompletion:*(void *)(a1 + 40)];
}

id sub_100473ADC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 208) resetApplePayManateeViewWithCompletion:*(void *)(a1 + 40)];
}

id sub_100473BCC(void *a1)
{
  return [*(id *)(a1[4] + 16) sendRemoteRegistrationRequest:a1[5] forHandle:a1[6] completion:a1[7]];
}

void sub_100473EDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 64) associatedPassUniqueID];
  id v4 = [WeakRetained passWithUniqueIdentifier:v3];
  id v6 = [v4 paymentPass];

  uint64_t v5 = v6;
  if (!v6)
  {
    [*(id *)(a1 + 32) _downloadAssociatedPeerPaymentPassWithCompletion:0];
    uint64_t v5 = 0;
  }
}

uint64_t sub_100473F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1004741A0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 56) context];
  uint64_t v3 = [v2 serviceURL];

  if (([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration] & 1) != 0 || !v3)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scheduled peer payment re-register no longer needed as we are currently unregistered. Unscheduling.", v7, 2u);
    }

    PDScheduledActivityRemove();
  }
  else
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 56) context];
    uint64_t v5 = [v4 pushToken];

    [*(id *)(a1 + 32) registerDeviceWithRegistrationURL:v3 pushToken:v5 forceReregister:1 reason:*(void *)(a1 + 40) completion:&stru_100753770];
  }
}

void sub_1004742B0(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  id v4 = a3;
  uint64_t v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sucessfully re-registered. Unscheduling peer payment re-register activity.", buf, 2u);
    }

    PDScheduledActivityRemove();
  }
  else
  {
    if (v6)
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to re-register with peer payment re-register activity.", v7, 2u);
    }
  }
}

void sub_1004743F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    int v6 = 0;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v9 isMe]) {
          v6 |= [v9 isOrganizer];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
    if (v6)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(NSObject **)(v10 + 32);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_100474564;
      v13[3] = &unk_10072F840;
      uint64_t v12 = *(void *)(a1 + 40);
      void v13[4] = v10;
      void v13[5] = v12;
      dispatch_async(v11, v13);
    }
  }
}

void sub_100474564(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation];
  id v3 = [v2 associatedAccountInvitations];

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id obj = v3;
  id v4 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v33;
    *(void *)&long long v5 = 138412546;
    long long v30 = v5;
    do
    {
      for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        uint64_t v10 = objc_msgSend(v9, "altDSID", v30);
        if ([v9 status] == (id)1)
        {
          if (v10)
          {
            uint64_t v11 = [*(id *)(a1 + 32) _associatedAccountRemoteRegistrationActivityIdentifierForAltDSID:v10];
            unsigned __int8 v12 = [v9 registrationResult];
            unsigned __int8 v13 = [v9 registrationResult];
            int v14 = PDScheduledActivityExists();
            int v15 = v14;
            if ((v12 & 0x10) != 0 && (v13 & 0x20) != 0)
            {
              long long v16 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                id v37 = v10;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "The users %@ is already broker and peer payment registered. Not scheduling a remote registration activity.", buf, 0xCu);
              }

              if (v15)
              {
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138412290;
                  id v37 = v9;
                  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Removing remote registration activity for invitation %@ since it is already broker and peer payment registered.", buf, 0xCu);
                }

                PDScheduledActivityRemove();
              }
            }
            else if (v14)
            {
              long long v17 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                id v37 = v10;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "An associated account remote registration request is already scheduled for altDSID %@.", buf, 0xCu);
              }
            }
            else
            {
              id v18 = (char *)[v9 remoteRegistrationRequestLevel];
              if ((unint64_t)v18 >= 8) {
                uint64_t v19 = 8;
              }
              else {
                uint64_t v19 = (uint64_t)v18;
              }
              double v20 = dbl_1005B3B20[v19];
              [v9 setRemoteRegistrationRequestLevel:v18 + 1];
              id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
              uint64_t v22 = [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)];
              uint64_t v23 = *(void *)(a1 + 32);
              long long v24 = *(void **)(v23 + 64);
              *(void *)(v23 + 64) = v22;

              if (v19)
              {
                uint64_t v25 = +[NSDate dateWithTimeIntervalSinceNow:v20];
              }
              else
              {
                uint64_t v25 = 0;
              }
              id v26 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = v30;
                id v37 = v10;
                __int16 v38 = 2112;
                id v39 = v25;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Scheduling peer payment remote registration activity for altDSID %@ at time %@.", buf, 0x16u);
              }

              uint64_t v27 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v25];
              [v27 setRequireNetworkConnectivity:1];
              unint64_t v28 = *(void *)(a1 + 40);
              if (v28 > 3) {
                uint64_t v29 = 0;
              }
              else {
                uint64_t v29 = off_100753C00[v28];
              }
              [v27 setReason:v29];
              PDScheduledActivityRegister();
            }
          }
          else
          {
            uint64_t v11 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v37 = v9;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error: and altDSID is not defined for this peer payment account invitation %@", buf, 0xCu);
            }
          }
        }
      }
      id v6 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v6);
  }
}

void sub_100474C44(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 64) accountInvitationWithAltDSID:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2 && [v2 status] == (id)1)
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 24);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100474DCC;
    v9[3] = &unk_10072F3F0;
    id v10 = *(id *)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    id v5 = *(id *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 32);
    id v12 = v5;
    uint64_t v13 = v6;
    [v4 familyMembersWithCachePolicy:0 completion:v9];
  }
  else
  {
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "There is no pending invitation for altDSID %@. Not performing remote registration activity", buf, 0xCu);
    }

    PDScheduledActivityRemove();
  }
}

void sub_100474DCC(uint64_t a1, void *a2)
{
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v27 objects:v33 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v28;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v28 != v6) {
        objc_enumerationMutation(v3);
      }
      uint64_t v8 = *(void **)(*((void *)&v27 + 1) + 8 * v7);
      uint64_t v9 = [v8 altDSID];
      id v10 = *(void **)(a1 + 32);
      id v11 = v9;
      id v12 = v10;
      if (v11 == v12) {
        break;
      }
      uint64_t v13 = v12;
      if (v11) {
        BOOL v14 = v12 == 0;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14)
      {
      }
      else
      {
        unsigned __int8 v15 = [v11 isEqualToString:v12];

        if (v15) {
          goto LABEL_18;
        }
      }
      if (v5 == (id)++v7)
      {
        id v5 = [v3 countByEnumeratingWithState:&v27 objects:v33 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_16;
      }
    }

LABEL_18:
    id v16 = v8;

    if (!v16) {
      goto LABEL_20;
    }
    id v17 = objc_alloc_init((Class)PKRemoteRegistrationRequest);
    [v17 setRegisterPeerPayment:1];
    [v17 setRegisterBroker:1];
    id v18 = *(void **)(*(void *)(a1 + 56) + 16);
    uint64_t v19 = [v16 appleID];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100475094;
    v23[3] = &unk_100753798;
    void v23[4] = *(void *)(a1 + 56);
    id v24 = v16;
    id v25 = *(id *)(a1 + 40);
    id v26 = *(id *)(a1 + 48);
    id v20 = v16;
    [v18 sendRemoteRegistrationRequest:v17 forHandle:v19 completion:v23];
  }
  else
  {
LABEL_16:

LABEL_20:
    id v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v32 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "There is no family member found for altDSID %@. Not performing remote registration activity", buf, 0xCu);
    }

    PDScheduledActivityRemove();
  }
}

void sub_100475094(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100475178;
  block[3] = &unk_10072FF48;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  id v11 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v12 = v5;
  uint64_t v13 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_100475178(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) appleID];
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finished sending remote registration request to handle %@, with error %@", (uint8_t *)&v5, 0x16u);
  }
  if (*(void *)(a1 + 40))
  {
    PDScheduledActivityRemove();
    [*(id *)(a1 + 64) _scheduleAssociatedAccountRemoteRegistrationActivityIfNecessaryForReason:3];
  }
}

void sub_1004753C4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) accountFetchAfterTransactionWaitPeriod];
  if (v2 != 0.0)
  {
    double v3 = v2;
    uint64_t v4 = +[NSDate date];
    int v5 = [v4 dateByAddingTimeInterval:v3];

    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = @"YES";
      int v8 = *(unsigned __int8 *)(a1 + 57);
      if (*(unsigned char *)(a1 + 56)) {
        CFStringRef v9 = @"YES";
      }
      else {
        CFStringRef v9 = @"NO";
      }
      int v11 = 138412802;
      if (!v8) {
        CFStringRef v7 = @"NO";
      }
      CFStringRef v12 = v9;
      __int16 v13 = 2112;
      CFStringRef v14 = v7;
      __int16 v15 = 2112;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scheduling task to check if account is stale after a new transaction has been added. accountEndpoint: %@. associatedAccountEndpoint: %@. fireDate: %@.", (uint8_t *)&v11, 0x20u);
    }

    id v10 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v5];
    [v10 setRequireNetworkConnectivity:1];
    PDScheduledActivityRegister();
  }
}

void sub_100475760(uint64_t a1)
{
  double v2 = [*(id *)(*(void *)(a1 + 32) + 64) lastUpdated];
  [*(id *)(*(void *)(a1 + 32) + 64) accountFetchAfterTransactionWaitPeriod];
  double v4 = v3;
  [*(id *)(*(void *)(a1 + 32) + 64) accountFetchAfterTransactionWaitTolerance];
  double v6 = v4 + v5;
  CFStringRef v7 = +[NSDate date];
  int v8 = [v7 dateByAddingTimeInterval:-v6];

  id v9 = [v2 compare:v8];
  id v10 = PKLogFacilityTypeGetObject();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9 != (id)-1)
  {
    if (v11)
    {
      *(_DWORD *)long long buf = 138412290;
      id v26 = v2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Not fetching an updated peer payment account after a new transaction beacuse the lastUpdatedDate is too recent %@", buf, 0xCu);
    }
    goto LABEL_18;
  }
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    id v26 = v2;
    __int16 v27 = 2112;
    uint64_t v28 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updating peer payment account since it is stale after a new transaciton. lastUpdatedDate %@. activityIdentifier %@", buf, 0x16u);
  }

  __int16 v13 = (__CFString *)*(id *)(a1 + 40);
  if (v13 == @"CashStaleAccountAndAssociatedAccount"
    || (CFStringRef v14 = v13) != 0
    && (unsigned int v15 = [(__CFString *)v13 isEqualToString:@"CashStaleAccountAndAssociatedAccount"], v14, v15))
  {
    id v16 = *(void **)(a1 + 32);
    id v10 = +[NSSet setWithObjects:@"CashReasonAccountFetchAfterTransaction", @"CashReasonAssociatedAccountFetchAfterTransaction", 0];
    [v16 updateAccountAndAssociatedAccountsWithDiagnosticReasons:v10 completion:0];
LABEL_18:

    goto LABEL_19;
  }
  id v17 = (__CFString *)*(id *)(a1 + 40);
  if (v17 == @"CashStaleAccount"
    || (id v18 = v17) != 0
    && (unsigned int v19 = [(__CFString *)v17 isEqualToString:@"CashStaleAccount"],
        v18,
        v19))
  {
    id v20 = *(void **)(a1 + 32);
    id v10 = +[NSSet setWithObject:@"CashReasonAccountFetchAfterTransaction"];
    [v20 updateAccountWithDiagnosticReasons:v10 completion:0];
    goto LABEL_18;
  }
  id v21 = (__CFString *)*(id *)(a1 + 40);
  if (v21 == @"CashStaleAssociatedAccount"
    || (uint64_t v22 = v21) != 0
    && (unsigned int v23 = [(__CFString *)v21 isEqualToString:@"CashStaleAssociatedAccount"],
        v22,
        v23))
  {
    id v24 = *(void **)(a1 + 32);
    id v10 = +[NSSet setWithObject:@"CashReasonAssociatedAccountFetchAfterTransaction"];
    [v24 updateAssociatedAccountsWithDiagnosticReasons:v10 completion:0];
    goto LABEL_18;
  }
LABEL_19:
}

void sub_100475BEC(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 56);
  if (([v2 needsRegistration] & 1) == 0)
  {
    double v3 = [*(id *)(*(void *)(a1 + 32) + 64) cloudStoreZoneNames];
    unsigned int v4 = [v3 containsObject:*(void *)(a1 + 40)];

    double v5 = PKLogFacilityTypeGetObject();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        LOWORD(v8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Scheduling a peer payment reregister to update server now that our zone has been created…", (uint8_t *)&v8, 2u);
      }

      [*(id *)(a1 + 32) _schedulePeerPaymentReregisterActivityForReason:@"cloud store zone created re-register"];
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        int v8 = 138412290;
        uint64_t v9 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "The peer payment account does not contain zone %@. Ignoring zone creation notification.", (uint8_t *)&v8, 0xCu);
      }
    }
  }
}

id sub_1004762E0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) setAccountStateDirty:1];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  uint64_t v3 = [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)];
  uint64_t v4 = *(void *)(a1 + 32);
  double v5 = *(void **)(v4 + 64);
  *(void *)(v4 + 64) = v3;

  BOOL v6 = *(void **)(a1 + 32);
  return _[v6 _updateAccountFromPush:1 diagnosticReasons:0 abridgedRegistration:0 completion:&stru_100753800];
}

void sub_10047636C(id a1, PKPeerPaymentAccount *a2)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Peer Payment Account updated following push notification", v3, 2u);
  }
}

void sub_1004763D8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) additionalPushTopics];
  uint64_t v3 = [v2 preferences];
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = v3;
  id v6 = v4;
  if (v5 == v6)
  {

LABEL_10:
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v45) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updating preferences following push", (uint8_t *)&v45, 2u);
    }

    [*(id *)(a1 + 32) updatePreferencesWithCompletion:0];
    goto LABEL_56;
  }
  uint64_t v7 = v6;
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
  }
  else
  {
    unsigned int v9 = [v5 isEqualToString:v6];

    if (v9) {
      goto LABEL_10;
    }
  }
  BOOL v11 = [v2 associatedAccounts];
  uint64_t v12 = *(void **)(a1 + 40);
  id v13 = v11;
  id v14 = v12;
  if (v13 == v14)
  {

LABEL_22:
    id v18 = [*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation];
    if (!v18)
    {
      id v18 = objc_alloc_init((Class)PKPeerPaymentAssociatedAccountInformation);
      [*(id *)(*(void *)(a1 + 32) + 64) setAssociatedAccountInformation:v18];
    }
    [v18 setAssociatedAccountStateDirty:1];
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    uint64_t v20 = [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)];
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void **)(v21 + 64);
    *(void *)(v21 + 64) = v20;

    unsigned int v23 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v45) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Updating associated accounts following push", (uint8_t *)&v45, 2u);
    }

    [*(id *)(a1 + 32) _updateAssociatedAccountsFromPush:1 diagnosticReasons:0 abridgedRegistration:0 completion:0];
    goto LABEL_55;
  }
  unsigned int v15 = v14;
  if (v13) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
  }
  else
  {
    unsigned int v17 = [v13 isEqualToString:v14];

    if (v17) {
      goto LABEL_22;
    }
  }
  id v24 = [v2 requests];
  id v25 = *(void **)(a1 + 40);
  id v26 = v24;
  id v27 = v25;
  if (v26 == v27)
  {
  }
  else
  {
    uint64_t v28 = v27;
    if (!v26 || !v27)
    {

LABEL_38:
      long long v34 = [v2 endpoint];
      long long v35 = *(void **)(a1 + 40);
      id v18 = v34;
      id v36 = v35;
      if (v18 == v36)
      {

LABEL_44:
        id v39 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = *(void *)(a1 + 48);
          int v45 = 138412290;
          uint64_t v46 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Endpoint push received with info %@", (uint8_t *)&v45, 0xCu);
        }

        long long v41 = *(void **)(a1 + 48);
        if (v41)
        {
          long long v42 = [v41 objectForKey:@"endpoint"];
          long long v43 = v42;
          if (v42 == @"recurringPayments"
            || v42
            && (unsigned int v44 = [(__CFString *)v42 isEqualToString:@"recurringPayments"],
                v43,
                v44))
          {
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v45) = 0;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Updating recurring payments following push", (uint8_t *)&v45, 2u);
            }

            [*(id *)(a1 + 32) updateRecurringPaymentsWithCompletion:0];
          }
        }
        goto LABEL_56;
      }
      id v37 = v36;
      if (v18 && v36)
      {
        unsigned int v38 = [v18 isEqualToString:v36];

        if (!v38) {
          goto LABEL_56;
        }
        goto LABEL_44;
      }

LABEL_55:
      goto LABEL_56;
    }
    unsigned int v29 = [v26 isEqualToString:v27];

    if (!v29) {
      goto LABEL_38;
    }
  }
  long long v30 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v45) = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Updating pending requests following push", (uint8_t *)&v45, 2u);
  }

  uint64_t v31 = *(void **)(a1 + 48);
  if (v31)
  {
    id v18 = [v31 objectForKey:PKPeerPaymentAdditionalPushTopicsRequestTokenKey];
    uint64_t v32 = *(void **)(a1 + 32);
    id v47 = v18;
    long long v33 = +[NSArray arrayWithObjects:&v47 count:1];
    [v32 updatePendingRequestsWithRequestTokens:v33];

    goto LABEL_55;
  }
LABEL_56:
}

void sub_100476974(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v13 = 138412290;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Applying push notification token: %@", (uint8_t *)&v13, 0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    id v4 = *(id *)(*(void *)(a1 + 40) + 56);
    id v5 = [v4 context];
    id v6 = [v5 pushToken];
    unsigned __int8 v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

    if ((v7 & 1) == 0)
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v8 = [v4 context];
        unsigned int v9 = [v8 pushToken];
        int v13 = 138412290;
        id v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "New push token is different than current push token: %@", (uint8_t *)&v13, 0xCu);
      }
      id v10 = [v4 context];
      [v10 setPushToken:*(void *)(a1 + 32)];

      [*(id *)(a1 + 40) _archiveSharedPeerPaymentWebServiceContext];
      if (([v4 needsRegistration] & 1) == 0)
      {
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scheduling a peer payment register to update server with our new push token…", (uint8_t *)&v13, 2u);
        }

        [*(id *)(a1 + 40) _schedulePeerPaymentReregisterActivityForReason:@"new push token re-register"];
      }
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = [v4 context];
      uint64_t v12 = [v11 pushToken];
      int v13 = 138412290;
      id v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Applied token: %@", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_100476F8C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = PKDeviceRegistrationResultToString();
    *(_DWORD *)long long buf = 138412546;
    uint64_t v22 = v3;
    __int16 v23 = 2112;
    id v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDPeerPaymentWebServiceCoordinator didReceiveRemoteRegistationResult: was called fromDestination %@, with result %@", buf, 0x16u);
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 48);
  int v6 = (v5 >> 5) & 1;
  int v7 = (v5 >> 4) & 1;
  BOOL v8 = [*(id *)(a1 + 32) idsDestination];
  unsigned int v9 = [v8 name];

  uint64_t v10 = *(void *)(a1 + 40);
  BOOL v11 = *(void **)(v10 + 24);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_100477128;
  v15[3] = &unk_100753850;
  void v15[4] = v10;
  id v16 = v9;
  id v12 = *(id *)(a1 + 32);
  char v19 = v6;
  char v20 = v7;
  uint64_t v13 = *(void *)(a1 + 48);
  id v17 = v12;
  uint64_t v18 = v13;
  id v14 = v9;
  [v11 familyMembersWithCachePolicy:0 completion:v15];
}

void sub_100477128(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10047720C;
  v8[3] = &unk_100753828;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  __int16 v14 = *(_WORD *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v6;
  uint64_t v13 = *(void *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_10047720C(uint64_t a1)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v25 objects:v35 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v26;
    while (2)
    {
      for (unint64_t i = 0; i != v3; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        id v7 = *(void **)(a1 + 40);
        BOOL v8 = objc_msgSend(v6, "appleID", (void)v25);
        id v9 = v7;
        id v10 = v8;
        if (v9 == v10)
        {

LABEL_16:
          id v3 = v6;
          goto LABEL_17;
        }
        id v11 = v10;
        if (v9 && v10)
        {
          unsigned int v12 = [v9 isEqualToString:v10];

          if (v12) {
            goto LABEL_16;
          }
        }
        else
        {
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v25 objects:v35 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_17:

  uint64_t v13 = [v3 altDSID];
  if (v13)
  {
    __int16 v14 = [*(id *)(a1 + 56) _associatedAccountRemoteRegistrationActivityIdentifierForAltDSID:v13];
    PDScheduledActivityRemove();
    unsigned int v15 = [*(id *)(*(void *)(a1 + 56) + 64) accountInvitationWithAltDSID:v13];
    id v16 = v15;
    if (v15)
    {
      if ([v15 status] == (id)1)
      {
        [v16 setRegistrationResult:*(void *)(a1 + 64)];
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 104));
        uint64_t v18 = [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 56) + 64)];
        uint64_t v19 = *(void *)(a1 + 56);
        char v20 = *(void **)(v19 + 64);
        *(void *)(v19 + 64) = v18;

        [*(id *)(a1 + 56) _scheduleAssociatedAccountRemoteRegistrationActivityIfNecessaryForReason:2];
      }
    }
    else
    {
      id v24 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v30 = v3;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "There is no peer payment account invitation for family member %@", buf, 0xCu);
      }
    }
  }
  else
  {
    __int16 v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void **)(a1 + 48);
      CFStringRef v22 = @"YES";
      if (*(unsigned char *)(a1 + 72)) {
        CFStringRef v23 = @"YES";
      }
      else {
        CFStringRef v23 = @"NO";
      }
      if (!*(unsigned char *)(a1 + 73)) {
        CFStringRef v22 = @"NO";
      }
      *(_DWORD *)long long buf = 138412802;
      id v30 = v21;
      __int16 v31 = 2112;
      CFStringRef v32 = v23;
      __int16 v33 = 2112;
      CFStringRef v34 = v22;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Error: could not find family member from destination %@ after a remote registration result was received. Peer payment registration success: %@, Broker registration success %@", buf, 0x20u);
    }
  }
}

void sub_1004775F8(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v19 = 0;
    char v20 = &v19;
    uint64_t v21 = 0x3032000000;
    CFStringRef v22 = sub_100020E18;
    CFStringRef v23 = sub_100021200;
    id v24 = +[NSMutableDictionary dictionary];
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v2 = *(id *)(a1 + 32);
    id v3 = [v2 countByEnumeratingWithState:&v15 objects:v25 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v16;
      do
      {
        for (unint64_t i = 0; i != v3; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v4) {
            objc_enumerationMutation(v2);
          }
          uint64_t v6 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          id v7 = (void *)v20[5];
          BOOL v8 = [v6 requestToken];
          [v7 setObject:v6 forKey:v8];
        }
        id v3 = [v2 countByEnumeratingWithState:&v15 objects:v25 count:16];
      }
      while (v3);
    }

    id v9 = objc_alloc_init((Class)PKPeerPaymentPendingRequestsRequest);
    id v10 = [(id)v20[5] allKeys];
    [v9 setRequestTokens:v10];

    id v11 = *(void **)(*(void *)(a1 + 40) + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10047786C;
    v12[3] = &unk_100753878;
    __int16 v14 = &v19;
    id v13 = *(id *)(a1 + 48);
    [v11 peerPaymentPendingRequestsWithRequest:v9 completion:v12];

    _Block_object_dispose(&v19, 8);
  }
}

void sub_100477840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10047786C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v4();
  }
  else
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = objc_msgSend(a2, "requestSummaries", 0);
    id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v19;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          id v11 = [v10 requestToken];
          unsigned int v12 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) valueForKey:v11];
          if (v12)
          {
            id v13 = [v10 status];
            [v12 setStatus:v13];

            __int16 v14 = [v10 expiryDate];
            [v12 setExpiryDate:v14];

            long long v15 = [v10 actions];
            [v12 setActions:v15];

            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v12 forKey:v11];
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v7);
    }

    uint64_t v16 = *(void *)(a1 + 32);
    long long v17 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) allValues];
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);
  }
}

void sub_100477B6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    uint64_t v31 = a1;
    id v9 = [WeakRetained peerPaymentPendingRequestsForRequestTokens:*(void *)(a1 + 40)];
    id v7 = +[NSMutableArray arrayWithArray:v9];

    id v32 = v5;
    id v33 = objc_alloc_init((Class)NSMutableArray);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id obj = [v5 requestSummaries];
    id v38 = [obj countByEnumeratingWithState:&v43 objects:v50 count:16];
    if (!v38) {
      goto LABEL_31;
    }
    uint64_t v36 = *(void *)v44;
    id v37 = v7;
    id v35 = (id)PKPeerPaymentPendingRequestStatusPending;
    while (1)
    {
      for (unint64_t i = 0; i != v38; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v44 != v36) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v43 + 1) + 8 * i);
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        unsigned int v12 = v7;
        id v13 = [v12 countByEnumeratingWithState:&v39 objects:v49 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v40;
          do
          {
            for (j = 0; j != v14; j = (char *)j + 1)
            {
              if (*(void *)v40 != v15) {
                objc_enumerationMutation(v12);
              }
              long long v17 = *(void **)(*((void *)&v39 + 1) + 8 * (void)j);
              long long v18 = [v11 requestToken];
              long long v19 = [v17 requestToken];
              unsigned int v20 = [v18 isEqualToString:v19];

              if (v20)
              {
                long long v21 = [v11 status];
                [v17 setStatus:v21];

                CFStringRef v22 = [v11 actions];
                [v17 setActions:v22];

                CFStringRef v23 = [v11 expiryDate];
                [v17 setExpiryDate:v23];
              }
            }
            id v14 = [v12 countByEnumeratingWithState:&v39 objects:v49 count:16];
          }
          while (v14);
        }

        id v24 = [v11 status];
        if (v24 == v35)
        {

          long long v27 = v35;
          id v7 = v37;
          goto LABEL_28;
        }
        long long v25 = v24;
        if (v24) {
          BOOL v26 = v35 == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (v26)
        {

          id v7 = v37;
LABEL_27:
          long long v27 = [v11 requestToken];
          [v33 addObject:v27];
LABEL_28:

          continue;
        }
        unsigned __int8 v28 = [v24 isEqualToString:v35];

        id v7 = v37;
        if ((v28 & 1) == 0) {
          goto LABEL_27;
        }
      }
      id v38 = [obj countByEnumeratingWithState:&v43 objects:v50 count:16];
      if (!v38)
      {
LABEL_31:

        id v29 = objc_loadWeakRetained((id *)(*(void *)(v31 + 32) + 104));
        [v29 insertOrUpdatePeerPaymentPendingRequests:v7];

        id v30 = objc_loadWeakRetained((id *)(*(void *)(v31 + 32) + 104));
        [v30 deletePeerPaymentPendingRequestsForRequestTokens:v33];

        [*(id *)(v31 + 32) _accessObserversWithHandler:&stru_100753898];
        id v6 = 0;
        id v5 = v32;
        goto LABEL_32;
      }
    }
  }
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v48 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error updating Peer Payment pending requests: %@", buf, 0xCu);
  }
LABEL_32:
}

void sub_100477F64(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDPeerPaymentWebServiceCoordinatorObserver *)v2 peerPaymentWebServiceCoordinatorPendingRequestsChanged];
  }
}

void sub_10047805C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48)
    && [*(id *)(*(void *)(a1 + 32) + 64) areRecurringPaymentsOutOfDate])
  {
    [*(id *)(a1 + 32) updateRecurringPaymentsWithCompletion:0];
  }
  if (*(void *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    id v3 = [WeakRetained peerPaymentRecurringPayments];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1004781A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  uint64_t v4 = [*(id *)(v2 + 64) identifier];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100478254;
  v6[3] = &unk_100753908;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v3 peerPaymentRecurringPaymentsForAccountIdentifier:v4 withCompletion:v6];
}

void sub_100478254(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v67 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error: Failed to fetch updated peer payment recurring payments with error: %@.", buf, 0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    id v9 = [WeakRetained peerPaymentRecurringPayments];

    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v9, v6);
    }
  }
  else
  {
    id v11 = +[NSDate date];
    PKPeerPaymentRecurringPaymentsSetLastUpdated();

    id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    id v13 = [v12 peerPaymentRecurringPayments];

    id v48 = v5;
    uint64_t v14 = [v5 recurringPayments];
    uint64_t v50 = a1;
    id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    id v52 = (void *)v14;
    [v15 updateAllPeerPaymentRecurringPayments:v14];

    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    id v16 = v13;
    id obj = v16;
    id v53 = [v16 countByEnumeratingWithState:&v62 objects:v70 count:16];
    if (v53)
    {
      uint64_t v51 = *(void *)v63;
      do
      {
        for (unint64_t i = 0; i != v53; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v63 != v51) {
            objc_enumerationMutation(obj);
          }
          long long v18 = *(void **)(*((void *)&v62 + 1) + 8 * i);
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          id v19 = v52;
          id v20 = [v19 countByEnumeratingWithState:&v58 objects:v69 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v59;
            while (2)
            {
              for (j = 0; j != v21; j = (char *)j + 1)
              {
                if (*(void *)v59 != v22) {
                  objc_enumerationMutation(v19);
                }
                id v24 = *(void **)(*((void *)&v58 + 1) + 8 * (void)j);
                long long v25 = [v18 identifier];
                BOOL v26 = [v24 identifier];
                id v27 = v25;
                id v28 = v26;
                if (v27 == v28)
                {

LABEL_26:
                  if ((char *)[v24 status] - 3 <= (char *)1)
                  {
                    id v32 = [v18 lastExecutedTransaction];
                    id v33 = [v32 executionDate];
                    CFStringRef v34 = [v24 lastExecutedTransaction];
                    id v35 = [v34 executionDate];
                    char v36 = PKEqualObjects();

                    if ((v36 & 1) == 0)
                    {
                      id v37 = [PDPeerPaymentRecurringPaymentStatusChangeUserNotification alloc];
                      id v38 = [*(id *)(*(void *)(v50 + 32) + 64) associatedPassUniqueID];
                      long long v39 = [(PDPeerPaymentRecurringPaymentStatusChangeUserNotification *)v37 initWithPassUniqueIdentifier:v38 recurringPayment:v18];

                      [*(id *)(*(void *)(v50 + 32) + 96) insertUserNotification:v39];
                    }
                  }
                  long long v40 = [v18 memo];

                  if (v40)
                  {
                    long long v41 = [v18 memo];
                    [v24 setMemo:v41];
                  }
                  goto LABEL_31;
                }
                id v29 = v28;
                if (v27 && v28)
                {
                  unsigned __int8 v30 = [v27 isEqualToString:v28];

                  if (v30) {
                    goto LABEL_26;
                  }
                }
                else
                {
                }
              }
              id v21 = [v19 countByEnumeratingWithState:&v58 objects:v69 count:16];
              if (v21) {
                continue;
              }
              break;
            }
          }

          uint64_t v31 = *(void **)(v50 + 32);
          id v19 = [v18 identifier];
          [v31 _removeUpcomingPaymentNotificationForRecurringPaymentIdentifier:v19];
LABEL_31:
        }
        id v16 = obj;
        id v53 = [obj countByEnumeratingWithState:&v62 objects:v70 count:16];
      }
      while (v53);
    }

    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v42 = v52;
    id v43 = [v42 countByEnumeratingWithState:&v54 objects:v68 count:16];
    if (v43)
    {
      id v44 = v43;
      uint64_t v45 = *(void *)v55;
      do
      {
        for (k = 0; k != v44; k = (char *)k + 1)
        {
          if (*(void *)v55 != v45) {
            objc_enumerationMutation(v42);
          }
          [*(id *)(v50 + 32) _scheduleOrRemoveNotificationsForRecurringPayment:*(void *)(*((void *)&v54 + 1) + 8 * (void)k)];
        }
        id v44 = [v42 countByEnumeratingWithState:&v54 objects:v68 count:16];
      }
      while (v44);
    }

    [*(id *)(v50 + 32) _accessObserversWithHandler:&stru_1007538E0];
    uint64_t v47 = *(void *)(v50 + 40);
    if (v47) {
      (*(void (**)(uint64_t, id, void))(v47 + 16))(v47, v42, 0);
    }

    id v6 = 0;
    id v5 = v48;
    id v9 = obj;
  }
}

void sub_100478798(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  uint64_t v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDPeerPaymentWebServiceCoordinatorObserver *)v2 peerPaymentWebServiceCoordinatorRecurringPaymentsChanged];
  }
}

void sub_1004788BC(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void **)(v2 + 56);
    uint64_t v5 = *(void *)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100478988;
    v6[3] = &unk_100753950;
    void v6[4] = v2;
    uint64_t v9 = v5;
    id v7 = v3;
    id v8 = *(id *)(a1 + 48);
    [v4 peerPaymentRecurringPaymentPerformAction:v5 identifier:v7 completion:v6];
  }
}

void sub_100478988(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v9 = [v5 recurringPayment];
    if (v9)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
      CFStringRef v34 = v9;
      id v11 = +[NSArray arrayWithObjects:&v34 count:1];
      [WeakRetained insertOrUpdatePeerPaymentRecurringPayments:v11];

      [*(id *)(a1 + 32) _scheduleOrRemoveNotificationsForRecurringPayment:v9];
LABEL_15:
      [*(id *)(a1 + 32) _accessObserversWithHandler:&stru_100753928];
      goto LABEL_16;
    }
    if (*(void *)(a1 + 56) != 2)
    {
LABEL_16:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

      goto LABEL_17;
    }
    id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    id v13 = [v12 peerPaymentRecurringPaymentWithIdentifier:*(void *)(a1 + 40)];

    uint64_t v14 = [v13 memo];
    id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    uint64_t v33 = *(void *)(a1 + 40);
    id v16 = +[NSArray arrayWithObjects:&v33 count:1];
    [v15 deletePeerPaymentRecurringPaymentsForIdentifiers:v16];

    long long v17 = [v14 emoji];
    if ([v17 length])
    {
    }
    else
    {
      long long v18 = [v14 text];
      id v19 = [v18 length];

      if (!v19)
      {
LABEL_14:
        [*(id *)(a1 + 32) _removeUpcomingPaymentNotificationForRecurringPaymentIdentifier:*(void *)(a1 + 40)];

        goto LABEL_15;
      }
    }
    id v20 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = *(void **)(a1 + 40);
      int v28 = 138412290;
      id v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Recurring payment %@ is cancelled but had a memo, keeping it locally", (uint8_t *)&v28, 0xCu);
    }

    id v22 = objc_alloc_init((Class)PKPeerPaymentRecurringPayment);
    [v22 setIdentifier:*(void *)(a1 + 40)];
    CFStringRef v23 = [v13 senderAddress];
    [v22 setSenderAddress:v23];

    id v24 = [v13 recipientAddress];
    [v22 setRecipientAddress:v24];

    long long v25 = [v13 memo];
    [v22 setMemo:v25];

    id v26 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
    id v32 = v22;
    id v27 = +[NSArray arrayWithObjects:&v32 count:1];
    [v26 insertOrUpdatePeerPaymentRecurringPayments:v27];

    goto LABEL_14;
  }
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = PKPeerPaymentRecurringPaymentActionToString();
    int v28 = 138412546;
    id v29 = v8;
    __int16 v30 = 2112;
    id v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error: Failed to perform peer payment recurring payment %@ action with error: %@.", (uint8_t *)&v28, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_17:
}

void sub_100478D30(id a1, PDPeerPaymentWebServiceCoordinatorObserver *a2)
{
  uint64_t v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDPeerPaymentWebServiceCoordinatorObserver *)v2 peerPaymentWebServiceCoordinatorRecurringPaymentsChanged];
  }
}

void sub_100478FAC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) identifier];
  id v3 = +[PDPeerPaymentRecurringPaymentUpcomingPaymentNotification notificationIdentifierForRecurringPaymentIdentifier:v2];

  uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 96);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1004790A8;
  v9[3] = &unk_1007539A0;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v3;
  id v13 = v7;
  id v8 = v3;
  [v4 userNotificationWithIdentifier:v8 completion:v9];
}

void sub_1004790A8(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = (void *)a1[4];
    uint64_t v6 = [v3 recurringPayment];
    LODWORD(v5) = [v5 isEqual:v6];

    if (v5)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found existing notification for upcoming recurring payment. Ignoring.", (uint8_t *)&v17, 2u);
      }
      goto LABEL_13;
    }
    [*(id *)(a1[5] + 96) removeUserNotificationWithIdentifier:a1[6]];
  }
  id v7 = [*(id *)(a1[5] + 64) associatedPassUniqueID];
  id v8 = [[PDPeerPaymentRecurringPaymentUpcomingPaymentNotification alloc] initWithPassUniqueIdentifier:v7 recurringPayment:a1[4]];
  if (v8)
  {
    uint64_t v9 = +[NSCalendar currentCalendar];
    id v10 = [v9 components:28 fromDate:a1[7]];
    [v10 setHour:9];
    uint64_t v11 = [v9 dateFromComponents:v10];
    id v12 = [v9 dateByAddingUnit:16 value:-1 toDate:v11 options:0];

    id v13 = +[NSDate date];
    id v14 = [v12 compare:v13];

    if (v14 == (id)1)
    {
      id v15 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [(PDUserNotification *)v8 notificationIdentifier];
        int v17 = 138412546;
        long long v18 = v16;
        __int16 v19 = 2112;
        id v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Scheduling notification for recurring payment with identifier: %@, scheduled date: %@", (uint8_t *)&v17, 0x16u);
      }
      [(PDUserNotification *)v8 setDate:v12];
      [*(id *)(a1[5] + 96) insertUserNotification:v8];
    }
  }
LABEL_13:
}

void sub_1004795A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  id v3 = [WeakRetained peerPaymentEncryptionCertificateForDestination:*(void *)(a1 + 48)];

  if (v3 && [v3 certificatesVersion] == *(id *)(a1 + 56) && !*(unsigned char *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v3, 0);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_1004796B4;
    v8[3] = &unk_1007539C8;
    void v8[4] = v4;
    uint64_t v6 = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 40);
    [v5 peerPaymentEncryptionCertificateForDestination:v6 withCompletion:v8];
  }
}

void sub_1004796B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100479794;
  v11[3] = &unk_100730578;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

uint64_t sub_100479794(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) certificate];
  uint64_t v3 = v2;
  if (*(void *)(a1 + 40)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  uint64_t v8 = v2;
  if (!v4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 104));
    [WeakRetained insertOrUpdatePeerPaymentEncryptionCertificate:v8];

    uint64_t v3 = v8;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(v6 + 16))(v6, v8, *(void *)(a1 + 40));
    uint64_t v3 = v8;
  }
  return _objc_release_x1(v6, v3);
}

void sub_100479900(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1004799F0;
  v10[3] = &unk_100730578;
  id v11 = v5;
  id v12 = v6;
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_1004799F0(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    uint64_t v3 = PKPeerPaymentEncryptDataUsingPrivacySchemeWithCert();
    BOOL v4 = [v3 keysOfEntriesPassingTest:&stru_100753A30];
    id v5 = objc_msgSend(v4, "pk_arrayCopy");
    uint64_t v2 = [v3 dictionaryWithValuesForKeys:v5];
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = [*(id *)(a1 + 40) description];
    int v9 = 138412802;
    id v10 = v2;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    id v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Nearby Peer Payment: generated encryption fields: %@, for data: %@, error: %@", (uint8_t *)&v9, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

BOOL sub_100479B50(id a1, id a2, id a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass()))
  {
    BOOL v7 = 1;
  }
  else
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412546;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Nearby Peer Payment: WARNING - encryption field with key or value not of type string returned, ignored. key: %@, value: %@", (uint8_t *)&v10, 0x16u);
    }

    BOOL v7 = 0;
  }

  return v7;
}

void sub_100479D2C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)PKPeerPaymentFailureDiagnosticRequest) initWithFailureDiagnostic:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = *(void **)(v3 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100479DEC;
  v5[3] = &unk_1007305A0;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 48);
  [v4 peerPaymentFailureDiagnosticWithRequest:v2 withCompletion:v5];
}

void sub_100479DEC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100479EAC;
  block[3] = &unk_100736830;
  id v7 = *(id *)(a1 + 40);
  char v12 = a2;
  id v10 = v5;
  id v11 = v7;
  id v8 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_100479EAC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
  }
  return result;
}

void sub_10047A400(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10047A420(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1[4] + 184) updateAccount])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 104));
    int v9 = [WeakRetained nextPossibleFetchDateForAccountType:1 endpointType:1 accountIdentifier:a1[5]];

    if (([*(id *)(a1[4] + 184) fromPush] & 1) == 0
      && v9
      && (+[NSDate date],
          id v10 = objc_claimAutoreleasedReturnValue(),
          [v10 timeIntervalSinceDate:v9],
          double v12 = v11,
          v10,
          v12 <= 0.0))
    {
      id v24 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v31 = v9;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Not fetching peer payment account because the next possible fetch date is in the future %@", buf, 0xCu);
      }

      v7[2](v7, v6, 0);
    }
    else
    {
      uint64_t v13 = a1[4];
      if (*(unsigned char *)(v13 + 168)
        || (id v16 = *(void **)(v13 + 56)) == 0
        || [v16 needsRegistration])
      {
        id v14 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = *(void **)(a1[4] + 184);
          *(_DWORD *)long long buf = 138412290;
          id v31 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not fetching an an updated peer payment account for request because we are unregistering from peer payment %@", buf, 0xCu);
        }

        v7[2](v7, v6, 1);
      }
      else
      {
        int v17 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          long long v18 = *(void **)(a1[4] + 184);
          *(_DWORD *)long long buf = 138412290;
          id v31 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Fetching an updated peer payment account for request %@.", buf, 0xCu);
        }

        uint64_t v19 = a1[4];
        id v20 = *(void **)(v19 + 56);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        void v25[2] = sub_10047A734;
        v25[3] = &unk_100753AA8;
        v25[4] = v19;
        int v28 = v7;
        id v21 = v6;
        CFStringRef v23 = (void *)a1[5];
        uint64_t v22 = a1[6];
        id v26 = v21;
        uint64_t v29 = v22;
        id v27 = v23;
        [v20 peerPaymentAccountWithCompletion:v25];
      }
    }
  }
  else
  {
    v7[2](v7, v6, 0);
  }
}

void sub_10047A734(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10047A844;
  block[3] = &unk_100753A80;
  void block[4] = v7;
  id v18 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 64);
  id v14 = v9;
  id v15 = v5;
  uint64_t v19 = v10;
  id v16 = v6;
  id v17 = *(id *)(a1 + 48);
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_10047A844(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 168))
  {
    id v5 = *(void **)(v2 + 56);
    if (v5)
    {
      if (![v5 needsRegistration])
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
        id v6 = [*(id *)(a1 + 48) account];
        if (!v6 || *(void *)(a1 + 56))
        {
          uint64_t v7 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            id v8 = *(void **)(a1 + 56);
            *(_DWORD *)long long buf = 138412290;
            long long v25 = v8;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error: Failed to fetch an updated peer payment account with error: %@.", buf, 0xCu);
          }

          if (*(void *)(a1 + 64))
          {
            id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
            [WeakRetained increaseRetryBackoffLevelForAccountType:1 endpointType:1 accountIdentifier:*(void *)(a1 + 64)];
          }
          (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
          goto LABEL_32;
        }
        id v10 = *(id *)(*(void *)(a1 + 32) + 64);
        [*(id *)(a1 + 32) _handleUpdatedAccount:v6 withOldAccount:v10];
        [*(id *)(*(void *)(a1 + 32) + 64) setAccountStateDirty:0];
        id v11 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
        [v11 deleteRetryBackoffForAccountType:1 endpointType:1 accountIdentifier:*(void *)(a1 + 64)];

        id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
        uint64_t v13 = [v12 insertOrUpdatePeerPaymentAccount:v6];
        uint64_t v14 = *(void *)(a1 + 32);
        id v15 = *(void **)(v14 + 64);
        *(void *)(v14 + 64) = v13;

        [*(id *)(*(void *)(a1 + 32) + 96) updateWalletBadgeCount];
        id v16 = PDDefaultQueue();
        PDWakePassbookInBackground();

        id v17 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          long long v25 = v6;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received an updated account %@.", buf, 0xCu);
        }

        BOOL v18 = 0;
        BOOL v19 = 0;
        if ([*(id *)(*(void *)(a1 + 32) + 64) role] == (id)1 && v10)
        {
          BOOL v18 = [v10 role] == 0;
          BOOL v19 = [v10 state] == (id)4
             && [*(id *)(*(void *)(a1 + 32) + 64) state] == (id)1;
        }
        if ([*(id *)(*(void *)(a1 + 32) + 184) updatePass])
        {
          if (([*(id *)(a1 + 32) _hasAssociatedPeerPaymentPass] ^ 1 | (v18 || v19)) == 1)
          {
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Downloading associated peer payment pass", buf, 2u);
            }

            id v20 = *(void **)(a1 + 32);
            v21[0] = _NSConcreteStackBlock;
            v21[1] = 3221225472;
            v21[2] = sub_10047ACB0;
            v21[3] = &unk_10073FFD8;
            void v21[4] = v20;
            id v23 = *(id *)(a1 + 72);
            id v22 = *(id *)(a1 + 40);
            [v20 _downloadAssociatedPeerPaymentPassWithCompletion:v21];

            goto LABEL_31;
          }
        }
        else
        {
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Skipping downloading associated peer payment pass because request specifies not to update pass.", buf, 2u);
          }

          [*(id *)(a1 + 32) _downloadAssociatedPeerPaymentPassWithCompletion:0];
        }
        (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
LABEL_31:

LABEL_32:
        return;
      }
    }
  }
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = *(void **)(*(void *)(a1 + 32) + 184);
    *(_DWORD *)long long buf = 138412290;
    long long v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not processing the updated peer payment account for request because we are unregistering from peer payment %@", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10047ACB0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10047AD58;
  v3[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_10047AD58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10047AD70(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  if (([*(id *)(a1[4] + 184) updateAssociatedAccounts] & 1) == 0)
  {
LABEL_10:
    v7[2](v7, v6, 0);
    goto LABEL_11;
  }
  if (([*(id *)(a1[4] + 64) supportsFamilySharing] & 1) == 0)
  {
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not fetching peer payment associated accounts since the user is not whitelisted via familySharing supported feature.", buf, 2u);
    }

    goto LABEL_10;
  }
  uint64_t v8 = a1[4];
  if (*(unsigned char *)(v8 + 168)
    || (id v12 = *(void **)(v8 + 56)) == 0
    || [v12 needsRegistration])
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = *(void **)(a1[4] + 184);
      *(_DWORD *)long long buf = 138412290;
      __int16 v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Not fetching an an updated peer payment associated accounts for request because we are unregistering from peer payment %@", buf, 0xCu);
    }

    v7[2](v7, v6, 1);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 104));
    uint64_t v14 = [WeakRetained nextPossibleFetchDateForAccountType:1 endpointType:2 accountIdentifier:a1[5]];

    if (([*(id *)(a1[4] + 184) fromPush] & 1) == 0
      && v14
      && (+[NSDate date],
          id v15 = objc_claimAutoreleasedReturnValue(),
          [v15 timeIntervalSinceDate:v14],
          double v17 = v16,
          v15,
          v17 <= 0.0))
    {
      id v23 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        __int16 v30 = v14;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Not fetching peer payment associated accounts because the next possible fetch date is in the future %@", buf, 0xCu);
      }

      v7[2](v7, v6, 0);
    }
    else
    {
      uint64_t v18 = a1[4];
      BOOL v19 = *(void **)(v18 + 24);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10047B084;
      v24[3] = &unk_100753B20;
      void v24[4] = v18;
      id v27 = v7;
      id v20 = v6;
      id v22 = (void *)a1[5];
      uint64_t v21 = a1[6];
      id v25 = v20;
      uint64_t v28 = v21;
      id v26 = v22;
      [v19 familyMembersWithCachePolicy:0 completion:v24];
    }
  }
LABEL_11:
}

void sub_10047B084(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10047B170;
  v9[3] = &unk_100753AF8;
  id v10 = v3;
  uint64_t v11 = v4;
  id v14 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 64);
  id v12 = v6;
  uint64_t v15 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_10047B170(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v26 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    while (2)
    {
      id v6 = 0;
      do
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        if ([*(id *)(*((void *)&v20 + 1) + 8 * (void)v6) isMe])
        {

          id v9 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 184);
            *(_DWORD *)long long buf = 138412290;
            uint64_t v25 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fetching an updated peer payment associated accounts for request %@.", buf, 0xCu);
          }

          uint64_t v11 = *(void *)(a1 + 40);
          id v12 = *(void **)(v11 + 56);
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          void v15[2] = sub_10047B3E8;
          v15[3] = &unk_100753AD0;
          void v15[4] = v11;
          id v18 = *(id *)(a1 + 64);
          id v13 = *(id *)(a1 + 48);
          uint64_t v14 = *(void *)(a1 + 72);
          id v16 = v13;
          uint64_t v19 = v14;
          id v17 = *(id *)(a1 + 56);
          [v12 peerPaymentAssociatedAccountsWithCompletion:v15];

          return;
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v26 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  uint64_t v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 184);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Not fetching an updated peer payment associated accounts because the user does not have a family circle for request %@.", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10047B3E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10047B4F4;
  block[3] = &unk_100753A80;
  void block[4] = v7;
  id v17 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 64);
  id v13 = v9;
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = v5;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

void sub_10047B4F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 168) || (id v5 = *(void **)(v2 + 56)) == 0 || [v5 needsRegistration])
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 184);
      int v25 = 138412290;
      uint64_t v26 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not processing the updated peer payment associated accounts for request because we are unregistering from peer payment %@", (uint8_t *)&v25, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      uint64_t v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = 138412290;
        uint64_t v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error: Failed to fetch an updated peer payment associated account with error: %@.", (uint8_t *)&v25, 0xCu);
      }

      id v8 = [*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation];
      if (!v8)
      {
        id v8 = objc_alloc_init((Class)PKPeerPaymentAssociatedAccountInformation);
        [*(id *)(*(void *)(a1 + 32) + 64) setAssociatedAccountInformation:v8];
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
        uint64_t v10 = [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 32) + 64)];
        uint64_t v11 = *(void *)(a1 + 32);
        id v12 = *(void **)(v11 + 64);
        *(void *)(v11 + 64) = v10;
      }
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
      [v13 increaseRetryBackoffLevelForAccountType:1 endpointType:2 accountIdentifier:*(void *)(a1 + 56)];

      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
    else
    {
      id v8 = [*(id *)(*(void *)(a1 + 32) + 64) associatedAccountInformation];
      id v14 = [*(id *)(a1 + 64) associatedAccountInformation];
      id v15 = *(id *)(*(void *)(a1 + 32) + 64);
      id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
      [v16 deleteRetryBackoffForAccountType:1 endpointType:2 accountIdentifier:*(void *)(a1 + 56)];

      [v14 setAssociatedAccountStateDirty:0];
      [v15 setAssociatedAccountInformation:v14];
      id v17 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
      uint64_t v18 = [v17 insertOrUpdatePeerPaymentAccount:v15];
      uint64_t v19 = *(void *)(a1 + 32);
      long long v20 = *(void **)(v19 + 64);
      *(void *)(v19 + 64) = v18;

      [*(id *)(a1 + 32) _scheduleAssociatedAccountRemoteRegistrationActivityIfNecessaryForReason:1];
      [*(id *)(a1 + 32) _postGraduationNotificationIfNecessary];
      long long v21 = *(id **)(a1 + 32);
      long long v22 = [v21[8] associatedAccountInformation];
      [v21 _postAssociatedAccountActiveNotificationIfNecessaryForNewAssociatedAccountInformation:v22 oldAssociatedAccountInformation:v8];

      long long v23 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 64);
        int v25 = 138412290;
        uint64_t v26 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received an updated account with associated accounts %@.", (uint8_t *)&v25, 0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
  }
}

id sub_10047B860(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 56);
  uint64_t v7 = *(void **)(v5 + 184);
  id v8 = a4;
  id v9 = [v7 diagnosticReasonString];
  [v6 removeDiagnosticReason:v9];

  if ([*(id *)(*(void *)(a1 + 32) + 184) updateAssociatedAccounts]
    && [*(id *)(*(void *)(a1 + 32) + 184) updateAccount])
  {
    PDScheduledActivityRemove();
    PDScheduledActivityRemove();
LABEL_6:
    PDScheduledActivityRemove();
    goto LABEL_7;
  }
  if (([*(id *)(*(void *)(a1 + 32) + 184) updateAssociatedAccounts] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 184) updateAccount])
  {
    goto LABEL_6;
  }
LABEL_7:
  [*(id *)(a1 + 32) _updateSharedCacheWithAccount:*(void *)(*(void *)(a1 + 32) + 64)];
  uint64_t v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 184);
    int v16 = 138412290;
    uint64_t v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Calling completions for peer payment fetch request %@", (uint8_t *)&v16, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 184) callCompletionsWithAccount:*(void *)(*(void *)(a1 + 32) + 64)];
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(void **)(v12 + 184);
  *(void *)(v12 + 184) = 0;

  unsigned __int8 v14 = [v8 isCanceled];
  if ((v14 & 1) == 0 && *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    [*(id *)(a1 + 32) _postAccountChangedNotification];
  }
  kdebug_trace();
  return objc_msgSend(*(id *)(a1 + 32), "_queue_executeNextAccountFetchRequestIfPossible");
}

void sub_10047BCDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v19;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v11 = [v10 altDSID];
        [v4 setObject:v10 forKey:v11];
      }
      id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v7);
  }

  uint64_t v12 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10047BE9C;
  block[3] = &unk_10072E238;
  id v15 = *(id *)(a1 + 40);
  id v16 = v4;
  uint64_t v17 = *(void *)(a1 + 32);
  id v13 = v4;
  dispatch_async(v12, block);
}

void sub_10047BE9C(uint64_t a1)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v25;
    long long v18 = v21;
    *(void *)&long long v3 = 138412290;
    long long v17 = v3;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v8 = objc_msgSend(v7, "altDSID", v17, v18);
        if (v8)
        {
          id v9 = [*(id *)(a1 + 40) objectForKey:v8];
          if (v9)
          {
            uint64_t v10 = [PDPeerPaymentGraduationUserNotification alloc];
            uint64_t v11 = [*(id *)(*(void *)(a1 + 48) + 64) associatedPassUniqueID];
            uint64_t v12 = [(PDPeerPaymentGraduationUserNotification *)v10 initWithPassUniqueIdentifier:v11 familyMember:v9];

            id v13 = [(PDUserNotification *)v12 notificationIdentifier];
            uint64_t v14 = *(void *)(a1 + 48);
            id v15 = *(void **)(v14 + 96);
            v20[0] = _NSConcreteStackBlock;
            v20[1] = 3221225472;
            v21[0] = sub_10047C170;
            v21[1] = &unk_100753B48;
            v21[2] = v14;
            v21[3] = v7;
            long long v22 = v12;
            id v23 = v8;
            id v16 = v12;
            [v15 userNotificationWithIdentifier:v13 completion:v20];
          }
          else
          {
            id v13 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = v17;
              uint64_t v29 = v7;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Not creating graduation notification since they are not in the family anymore %@", buf, 0xCu);
            }
          }
        }
        else
        {
          id v9 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = v17;
            uint64_t v29 = v7;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error: cannot display graduation notification for a nil altDSID %@", buf, 0xCu);
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v4);
  }
}

void sub_10047C170(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10047C244;
  block[3] = &unk_10072FF48;
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  id v11 = v3;
  uint64_t v12 = v5;
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = *(id *)(a1 + 56);
  id v9 = v3;
  dispatch_async(v4, block);
}

void sub_10047C244(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id WeakRetained = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v11 = 138412546;
      uint64_t v12 = v2;
      __int16 v13 = 2112;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Not creating a graduation notification for removed record since one already exists %@, %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v11 = 138412290;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Creating new graduation notification for removed record %@", (uint8_t *)&v11, 0xCu);
    }

    [*(id *)(a1 + 48) setSuppressionBehavior:1];
    [*(id *)(*(void *)(a1 + 56) + 96) insertUserNotification:*(void *)(a1 + 48)];
    id v7 = [*(id *)(*(void *)(a1 + 56) + 64) associatedAccountInformation];
    [v7 markAssociatedAccountRemovalRecordWithAltDSID:*(void *)(a1 + 64) hasPresentedNotification:1];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 104));
    uint64_t v8 = [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 56) + 64)];
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void **)(v9 + 64);
    *(void *)(v9 + 64) = v8;
  }
}

void sub_10047C7AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
  id v7 = v5;
  if (!v6) {
    goto LABEL_12;
  }
  id v8 = v6;
  int v9 = 0;
  uint64_t v10 = *(void *)v22;
  do
  {
    for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v22 != v10) {
        objc_enumerationMutation(v5);
      }
      uint64_t v12 = *(void **)(*((void *)&v21 + 1) + 8 * i);
      __int16 v13 = [v12 altDSID];
      [v4 setObject:v12 forKey:v13];

      if ([v12 isMe]) {
        v9 |= [v12 isOrganizer];
      }
    }
    id v8 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
  }
  while (v8);

  if (v9)
  {
    uint64_t v14 = *(NSObject **)(*(void *)(a1 + 32) + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10047C98C;
    block[3] = &unk_10072E238;
    id v18 = *(id *)(a1 + 40);
    id v15 = v4;
    uint64_t v16 = *(void *)(a1 + 32);
    id v19 = v15;
    uint64_t v20 = v16;
    dispatch_async(v14, block);

    id v7 = v18;
LABEL_12:
  }
}

void sub_10047C98C(uint64_t a1)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v20;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v20 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = [*(id *)(a1 + 40) objectForKey:*(void *)(*((void *)&v19 + 1) + 8 * (void)v5)];
        id v7 = [PDPeerPaymentAssociatedAccountActiveUserNotification alloc];
        id v8 = [*(id *)(*(void *)(a1 + 48) + 64) associatedPassUniqueID];
        int v9 = [(PDPeerPaymentAssociatedAccountActiveUserNotification *)v7 initWithPassUniqueIdentifier:v8 familyMember:v6];

        uint64_t v10 = [(PDUserNotification *)v9 notificationIdentifier];
        uint64_t v11 = *(void *)(a1 + 48);
        uint64_t v12 = *(void **)(v11 + 96);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        v16[2] = sub_10047CB84;
        v16[3] = &unk_100747260;
        void v16[4] = v11;
        id v17 = v6;
        id v18 = v9;
        __int16 v13 = v9;
        id v14 = v6;
        [v12 userNotificationWithIdentifier:v10 completion:v16];

        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v3);
  }
}

void sub_10047CB84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10047CC58;
  v8[3] = &unk_100730198;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v6;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_10047CC58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v2;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not creating a associated account active for family member since one already exists %@, %@", (uint8_t *)&v7, 0x16u);
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating new associated account active notification for family member %@", (uint8_t *)&v7, 0xCu);
    }

    [*(id *)(a1 + 48) setSuppressionBehavior:1];
    [*(id *)(*(void *)(a1 + 56) + 96) insertUserNotification:*(void *)(a1 + 48)];
  }
}

uint64_t (**sub_10047CEE4(uint64_t a1))(id, void)
{
  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Note: Asked to update the peer payment account, however we aren't currently registered. Bailing out.", buf, 2u);
    }

    uint64_t result = *(uint64_t (***)(id, void))(a1 + 48);
    if (result) {
      return (uint64_t (**)(id, void))result[2](result, 0);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4)
    {
      uint64_t v5 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Error: no PDPeerPaymentWebServiceAccountFetch defined when fetching an account", v6, 2u);
      }

      uint64_t v4 = *(void *)(a1 + 40);
    }
    objc_msgSend(*(id *)(a1 + 32), "_queue_addAccountFetchRequest:", v4);
    return (uint64_t (**)(id, void))objc_msgSend(*(id *)(a1 + 32), "_queue_executeNextAccountFetchRequestIfPossible");
  }
  return result;
}

void sub_10047D0A4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 56) needsRegistration])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Note: Asked to update the peer payment preferences, however we aren't currently registered. Bailing out.", buf, 2u);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    if (v3) {
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v4 + 136))
    {
      uint64_t v5 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received a request to update peer payment preferences while update already in progress. Queuing request...", buf, 2u);
      }

      uint64_t v6 = [[PDPeerPaymentWebServicePendingPreferencesFetch alloc] initWithCompletionHandler:*(void *)(a1 + 40)];
      [*(id *)(*(void *)(a1 + 32) + 128) addObject:v6];
    }
    else
    {
      *(unsigned char *)(v4 + 136) = 1;
      int v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fetching updated peer payment preferences.", buf, 2u);
      }

      uint64_t v6 = [[PDPeerPaymentWebServicePendingPreferencesFetch alloc] initWithCompletionHandler:*(void *)(a1 + 40)];
      [*(id *)(*(void *)(a1 + 32) + 120) addObject:v6];
      uint64_t v8 = *(void *)(a1 + 32);
      __int16 v9 = *(void **)(v8 + 56);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10047D294;
      v10[3] = &unk_100753B70;
      void v10[4] = v8;
      [v9 peerPaymentPreferencesWithCompletion:v10];
    }
  }
}

void sub_10047D294(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10047D35C;
  block[3] = &unk_10072E238;
  void block[4] = v7;
  id v12 = v5;
  id v13 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

id sub_10047D35C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) peerPaymentPreferences];
  [v2 _writePreferences:v3 withError:*(void *)(a1 + 48)];

  uint64_t v4 = *(void **)(a1 + 32);
  return _[v4 _completeUpdatingPreferences];
}

void sub_10047D994(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 peerPaymentWebServiceCoordinator:a1[4] didUpdateAccount:a1[5] oldAccount:a1[6]];
  }
}

id sub_10047DA6C(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Archiving shared peer payment web service context.", v7, 2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 48);
  id v5 = [*(id *)(v3 + 56) context];
  [v4 archiveContext:v5];

  return [*(id *)(a1 + 32) _updateSharedCacheWithWebService:*(void *)(*(void *)(a1 + 32) + 56)];
}

void sub_10047DBAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 208);
  PKCurrentCloudStoreApplePayContainerName();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setupCloudDatabaseForContainerName:v3 completion:*(void *)(a1 + 40)];
}

void sub_10047E718(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

uint64_t sub_10047EB20(uint64_t a1, char a2)
{
  if (a2)
  {
    int v3 = PKSafariCredentialProvisioningRequestConsentNotified();
    PKLogFacilityTypeGetObject();
    uint64_t v4 = (PDImportSafariCardConsentRequiredUserNotification *)objc_claimAutoreleasedReturnValue();
    BOOL v5 = os_log_type_enabled(&v4->super.super.super, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, &v4->super.super.super, OS_LOG_TYPE_DEFAULT, "We've previously notified about the import consent, don't notify again", buf, 2u);
      }
    }
    else
    {
      if (v5)
      {
        *(_WORD *)long long v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, &v4->super.super.super, OS_LOG_TYPE_DEFAULT, "Notifying user of requirement to consent to Safari Card Import", v9, 2u);
      }

      uint64_t v4 = objc_alloc_init(PDImportSafariCardConsentRequiredUserNotification);
      [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v4];
      id v8 = objc_alloc_init((Class)PKApplicationMessageRequest);
      [*(id *)(*(void *)(a1 + 32) + 24) registerMessageForIdentifier:@"SafariImportConsentAMID" withRequest:v8];
      PKSetSafariCredentialImportRequestConsentNotified();
    }
    uint64_t result = *(void *)(a1 + 40);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 40);
    if (result)
    {
      long long v7 = *(uint64_t (**)(void))(result + 16);
      return v7();
    }
  }
  return result;
}

void sub_10047ED50(uint64_t a1, char a2)
{
  if (a2)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10047EF68;
    v16[3] = &unk_100753C28;
    int v3 = *(void **)(a1 + 32);
    void v16[4] = *(void *)(a1 + 40);
    uint64_t v4 = objc_msgSend(v3, "pk_objectsPassingTest:", v16);
    if ([v4 count])
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10047EF8C;
      v14[3] = &unk_10072E000;
      void v14[4] = *(void *)(a1 + 40);
      BOOL v5 = objc_retainBlock(v14);
      id v6 = *(void **)(*(void *)(a1 + 40) + 16);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10047F380;
      v11[3] = &unk_100753C50;
      id v12 = v5;
      id v13 = *(id *)(a1 + 48);
      long long v7 = v5;
      [v6 checkSafariCredentialEligibility:v4 completion:v11];
    }
    else
    {
      long long v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "We've previously notified about the import of these cards, don't notify again", buf, 2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      long long v9 = *(void (**)(void))(v8 + 16);
      v9();
    }
  }
}

uint64_t sub_10047EF68(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _safariCredentialImportNotifiedForCredential:a2] ^ 1;
}

void sub_10047EF8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = v5;
  id v7 = [v5 countByEnumeratingWithState:&v35 objects:v40 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v36;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v36 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v35 + 1) + 8 * i);
        [*(id *)(a1 + 32) _addSafariCredentialImportNotifiedForCredential:v11];
        id v12 = [[PDImportSafariCardRequestUserNotification alloc] initWithPaymentSafariCredential:v11];
        [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v12];
        id v13 = objc_alloc_init((Class)PKApplicationMessageRequest);
        id v14 = [*(id *)(a1 + 32) _safariImportCardApplicationMessageIdentifierForCredential:v11];
        [*(id *)(*(void *)(a1 + 32) + 24) registerMessageForIdentifier:v14 withRequest:v13];
      }
      id v8 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
    }
    while (v8);
  }
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v26 = v6;
  id v15 = [v26 countByEnumeratingWithState:&v31 objects:v39 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v32;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v32 != v17) {
          objc_enumerationMutation(v26);
        }
        long long v19 = *(void **)(*((void *)&v31 + 1) + 8 * (void)j);
        long long v20 = [v19 paymentPass];
        long long v21 = [v19 credential];
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(void **)(v22 + 16);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10047F258;
        v28[3] = &unk_10074D140;
        void v28[4] = v22;
        id v29 = v20;
        id v30 = v21;
        id v24 = v20;
        id v25 = v21;
        [v23 performHandlerOnSharedWebServiceQueue:v28];
      }
      id v16 = [v26 countByEnumeratingWithState:&v31 objects:v39 count:16];
    }
    while (v16);
  }
}

void sub_10047F258(uint64_t a1, void *a2)
{
  id v9 = a2;
  int v3 = [*(id *)(*(void *)(a1 + 32) + 16) sharedWebService];
  if (PKVirtualCardEnabledWithWebService()
    && [*(id *)(a1 + 40) supportsVirtualCardNumberAccordingToWebService:v9])
  {
    unsigned __int8 v4 = [*(id *)(a1 + 40) hasActiveVirtualCardAccordingToWebService:v9];

    if (v4) {
      goto LABEL_6;
    }
    [*(id *)(a1 + 32) _addSafariCredentialImportNotifiedForCredential:*(void *)(a1 + 48)];
    int v3 = [*(id *)(a1 + 40) uniqueID];
    id v5 = [*(id *)(a1 + 40) primaryAccountNumberSuffix];
    id v6 = [*(id *)(a1 + 40) devicePrimaryPaymentApplication];
    [v6 paymentNetworkIdentifier];
    id v7 = PKDisplayablePaymentNetworkCardNameForPaymentCredentialType();

    id v8 = [[PDSuggestVPANForProvisionedSafariCardRequestUserNotification alloc] initWithFPANSuffix:v5 networkName:v7 passUniqueIdentifier:v3];
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v8];
  }
LABEL_6:
}

void sub_10047F380(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v7 count] || objc_msgSend(v8, "count"))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, 1);
    }
    goto LABEL_5;
  }
  uint64_t v11 = PKLogFacilityTypeGetObject();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (!v12) {
      goto LABEL_12;
    }
    int v17 = 138412290;
    id v18 = v9;
    id v13 = "Error checking credential eligibility:  %@";
    id v14 = v11;
    uint32_t v15 = 12;
  }
  else
  {
    if (!v12) {
      goto LABEL_12;
    }
    LOWORD(v17) = 0;
    id v13 = "Unknown error checking credential eligibility, or 0 credentials eligible";
    id v14 = v11;
    uint32_t v15 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v17, v15);
LABEL_12:

  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0);
  }
LABEL_5:
}

void sub_10047F5C4(uint64_t a1, char a2)
{
  if (a2)
  {
    int v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PAN Issuance: Notifying user of implicit VPAN upgrade", v10, 2u);
    }

    unsigned __int8 v4 = [*(id *)(a1 + 32) localizedDescription];
    id v5 = [*(id *)(a1 + 32) uniqueID];
    id v6 = [[PDVirtualCardVPANImplicitUpgradeUserNotification alloc] initWithCardName:v4 passUniqueIdentifier:v5];
    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v6];
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v7, 1, 0);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      id v9 = *(void (**)(void))(v8 + 16);
      v9();
    }
  }
}

uint64_t sub_10047F7D8(uint64_t a1, int a2)
{
  if (a2) {
    [*(id *)(a1 + 32) _handlePossibleVPANIssued:*(void *)(a1 + 40) fromPreviousApplications:*(void *)(a1 + 48)];
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    unsigned __int8 v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_10047FD1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) sharedWebService];
  uint64_t v2 = PKVirtualCardEnabledWithWebService();
  (*(void (**)(uint64_t, uint64_t))(v1 + 16))(v1, v2);
}

uint64_t sub_10048020C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 applicationIdentifier];
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1;
  }
  else
  {
    if (v4) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

uint64_t sub_100480298(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 applicationIdentifier];
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1;
  }
  else
  {
    if (v4) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

void sub_100481D30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100481FEC(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setTransactionSpendLimitEnabled:](v4, "setTransactionSpendLimitEnabled:", [a3 BOOLValue]);
}

void sub_100482044(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountUserPreferences *)v3 setTransactionSpendLimitAmount:v4];
}

void sub_1004820A8(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setMonthlySpendLimitEnabled:](v4, "setMonthlySpendLimitEnabled:", [a3 BOOLValue]);
}

void sub_100482100(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountUserPreferences *)v3 setMonthlySpendLimitAmount:v4];
}

void sub_100482164(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setSpendingEnabled:](v4, "setSpendingEnabled:", [a3 BOOLValue]);
}

void sub_1004821BC(id a1, PKAccountUserPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserPreferences setShowAvailableCredit:](v4, "setShowAvailableCredit:", [a3 BOOLValue]);
}

void sub_100482460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100482478(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithAccessory:*(void *)(a1 + 32) forBaseAccessory:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

id sub_10048263C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  [*(id *)(a1 + 32) setTitle:*(void *)a4];
  id result = objc_msgSend(*(id *)(a1 + 32), "setSpinnerEnabled:", objc_msgSend(*(id *)(a4 + 8), "BOOLValue"));
  *a6 = 1;
  return result;
}

void sub_100483330(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKAccountHistoricalBalance);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_100483648(id a1, PKAccountHistoricalBalance *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountHistoricalBalance *)v3 setBalance:v4];
}

void sub_1004836AC(id a1, PKAccountHistoricalBalance *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountHistoricalBalance *)v3 setDate:v4];
}

void sub_10048370C(id a1, PKAccountHistoricalBalance *a2, id a3)
{
  id v4 = a2;
  -[PKAccountHistoricalBalance setType:](v4, "setType:", [a3 unsignedIntegerValue]);
}

id sub_1004839A4(void *a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending passthrough message.", v4, 2u);
  }

  id result = [*(id *)(a1[4] + 16) sendPassthroughMessage:a1[5] error:a1[7]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_100483AC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16);
  uint64_t v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to start session while one is active.", buf, 2u);
    }

    id v5 = *(NSObject **)(*(void *)(a1 + 32) + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100483D04;
    block[3] = &unk_10072F788;
    id v20 = *(id *)(a1 + 40);
    dispatch_async(v5, block);
    id v6 = v20;
  }
  else
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to start underlying session.", buf, 2u);
    }

    id v6 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_100483D18;
    v18[3] = &unk_100753E00;
    void v18[4] = *(void *)(a1 + 32);
    uint64_t v7 = [v6 startDigitalCarKeySession:v18];
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 8);
    *(void *)(v8 + 8) = v7;

    uint64_t v10 = +[NSUUID UUID];
    uint64_t v11 = [v10 UUIDString];
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 64);
    *(void *)(v12 + 64) = v11;

    id v14 = *(NSObject **)(*(void *)(a1 + 32) + 56);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1004840A4;
    v16[3] = &unk_10072E598;
    id v15 = *(id *)(a1 + 40);
    void v16[4] = *(void *)(a1 + 32);
    id v17 = v15;
    dispatch_async(v14, v16);
  }
}

uint64_t sub_100483D04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100483D18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100483DE0;
  block[3] = &unk_10072E238;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_100483DE0(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Started underlying session", buf, 2u);
    }

    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = *(void **)(v4 + 16);
    if (v5)
    {
      [v5 setDelegate:0];
      [*(id *)(*(void *)(a1 + 48) + 16) setPassthroughDelegate:0];
      [*(id *)(*(void *)(a1 + 48) + 16) endSession];
      uint64_t v4 = *(void *)(a1 + 48);
    }
    objc_storeStrong((id *)(v4 + 16), *(id *)(a1 + 32));
    [*(id *)(a1 + 32) setDelegate:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) setPassthroughDelegate:*(void *)(a1 + 48)];
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void **)(v6 + 16);
    uint64_t v8 = [*(id *)(v6 + 24) applicationIdentifier];
    id v9 = [v7 appletWithIdentifier:v8];

    id v10 = [*(id *)(*(void *)(a1 + 48) + 24) subcredentials];
    id v11 = objc_alloc_init((Class)NSMutableSet);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v12 = v10;
    id v13 = [v12 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v24;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v12);
          }
          id v17 = [*(id *)(*((void *)&v23 + 1) + 8 * (void)v16) identifier];
          [v11 addObject:v17];

          uint64_t v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        id v14 = [v12 countByEnumeratingWithState:&v23 objects:v28 count:16];
      }
      while (v14);
    }

    id v18 = *(void **)(*(void *)(a1 + 48) + 16);
    long long v19 = [v11 anyObject];
    id v22 = 0;
    unsigned int v20 = [v18 setActiveApplet:v9 key:v19 outError:&v22];
    id v21 = v22;

    if (!v20 || v21) {
      [*(id *)(a1 + 48) _sessionDidFailToConnect];
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 48);
    [v2 _sessionDidFailToConnect];
  }
}

uint64_t sub_1004840A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(a1 + 32) + 64));
  }
  return result;
}

id sub_10048413C(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ending passthrough session.", v4, 2u);
  }

  id result = *(id *)(*(void *)(a1 + 32) + 16);
  if (result) {
    return [result endSession];
  }
  return result;
}

void sub_100484254(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Car did recieve passthrough message.", v6, 2u);
    }

    id v5 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
    [v5 sessionDidReceiveData:*(void *)(a1 + 40)];
  }
}

void sub_1004843A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  char v3 = PKGetConstantStringNF_DCK_EVENT_KEY_NAME();
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  unsigned int v5 = [@"com.apple.secureelementservice.dck.event.vehicle.did.connect" isEqualToString:v4];

  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 40));
    char v7 = objc_opt_respondsToSelector();

    if ((v7 & 1) == 0) {
      return;
    }
    id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 40));
    id v16 = v8;
    uint64_t v9 = 1;
  }
  else
  {
    id v10 = *(void **)(a1 + 32);
    id v11 = PKGetConstantStringNF_DCK_EVENT_KEY_NAME();
    id v12 = [v10 objectForKeyedSubscript:v11];
    unsigned int v13 = [@"com.apple.secureelementservice.dck.event.vehicle.did.disconnect" isEqualToString:v12];

    if (!v13) {
      return;
    }
    id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 40));
    char v15 = objc_opt_respondsToSelector();

    if ((v15 & 1) == 0) {
      return;
    }
    id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 40));
    id v16 = v8;
    uint64_t v9 = 0;
  }
  [v8 sessionDidChangeConnectionStatus:v9];
}

void sub_10048457C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
    [v4 sessionDidChangeConnectionStatus:3];
  }
}

void sub_100485BFC(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v6 = *a4;
  char v7 = +[NSNull null];
  if (v6 == v7) {
    id v8 = 0;
  }
  else {
    id v8 = *a4;
  }
  id v9 = v8;

  objc_msgSend(*(id *)(a1 + 32), "pk_safelyAddObject:", v9);
}

void sub_1004863F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKPeerPaymentRecurringPayment);
  uint64_t v67 = a1;
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];
  id v8 = [v6 indexOfObject:@"i"];
  id v9 = *(void **)(a4 + 8 * (void)v8);
  id v10 = +[NSNull null];
  if (v9 == v10) {
    id v11 = 0;
  }
  else {
    id v11 = *(void **)(a4 + 8 * (void)v8);
  }
  unint64_t v12 = v11;

  id v13 = [v6 indexOfObject:@"j"];
  id v14 = *(void **)(a4 + 8 * (void)v13);
  char v15 = +[NSNull null];
  if (v14 == v15) {
    id v16 = 0;
  }
  else {
    id v16 = *(void **)(a4 + 8 * (void)v13);
  }
  unint64_t v71 = v16;

  id v17 = [v6 indexOfObject:@"v"];
  id v18 = *(void **)(a4 + 8 * (void)v17);
  long long v19 = +[NSNull null];
  if (v18 == v19) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = *(void **)(a4 + 8 * (void)v17);
  }
  unint64_t v70 = v20;

  id v21 = [v6 indexOfObject:@"k"];
  id v22 = *(void **)(a4 + 8 * (void)v21);
  long long v23 = +[NSNull null];
  if (v22 == v23) {
    long long v24 = 0;
  }
  else {
    long long v24 = *(void **)(a4 + 8 * (void)v21);
  }
  id v68 = v24;

  id v25 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"l")), "integerValue");
  id v26 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"m")), "integerValue");
  id v27 = [v6 indexOfObject:@"n"];
  uint64_t v28 = *(void **)(a4 + 8 * (void)v27);
  id v29 = +[NSNull null];
  if (v28 == v29) {
    id v30 = 0;
  }
  else {
    id v30 = *(void **)(a4 + 8 * (void)v27);
  }
  id v31 = v30;

  if (v12 | v70 | v71 && v68 && v31)
  {
    id v32 = objc_alloc_init((Class)NSMutableDictionary);
    [v32 safelySetObject:v12 forKey:PKPeerPaymentRecurringPaymentFundingSourceDPANIdentifierKey];
    [v32 safelySetObject:v71 forKey:PKPeerPaymentRecurringPaymentFundingSourceFPANIdentifierKey];
    [v32 safelySetObject:v70 forKey:PKPeerPaymentRecurringPaymentFundingSourceMPANIdentifierKey];
    [v32 safelySetObject:v68 forKey:PKPeerPaymentRecurringPaymentFundingSourceNameKey];
    long long v33 = +[NSNumber numberWithUnsignedInteger:v25];
    [v32 safelySetObject:v33 forKey:PKPeerPaymentRecurringPaymentFundingSourceTypeKey];

    long long v34 = +[NSNumber numberWithInteger:v26];
    [v32 safelySetObject:v34 forKey:PKPeerPaymentRecurringPaymentFundingSourceNetworkKey];

    [v32 safelySetObject:v31 forKey:PKPeerPaymentRecurringPaymentFundingSourceSuffixKey];
    long long v35 = +[PKPeerPaymentRecurringPaymentFundingSource fundingSourceWithDictionary:v32];
    [v7 setFundingSource:v35];
  }
  id v36 = [v6 indexOfObject:@"w"];
  long long v37 = *(void **)(a4 + 8 * (void)v36);
  long long v38 = +[NSNull null];
  if (v37 == v38) {
    long long v39 = 0;
  }
  else {
    long long v39 = *(void **)(a4 + 8 * (void)v36);
  }
  id v69 = v39;

  id v40 = [v6 indexOfObject:@"y"];
  long long v41 = *(void **)(a4 + 8 * (void)v36);
  id v42 = +[NSNull null];
  if (v41 == v42) {
    id v43 = 0;
  }
  else {
    id v43 = *(void **)(a4 + 8 * (void)v40);
  }
  id v44 = v43;

  id v45 = [v6 indexOfObject:@"x"];
  long long v46 = *(void **)(a4 + 8 * (void)v36);
  uint64_t v47 = +[NSNull null];
  if (v46 == v47) {
    id v48 = 0;
  }
  else {
    id v48 = *(void **)(a4 + 8 * (void)v45);
  }
  id v66 = v31;
  id v49 = v48;

  if (v69 || v44 || v49)
  {
    id v50 = objc_alloc_init((Class)PKPeerPaymentRecurringPaymentMemo);
    PKSemanticColorFromString();
    [v50 setColor:0];
    [v50 setText:v69];
    [v50 setEmoji:v49];
    [v7 setMemo:v50];
  }
  id v64 = v44;
  uint64_t v51 = (void *)v12;
  id v52 = objc_msgSend(v6, "indexOfObject:", @"aa", v64);
  id v53 = *(void **)(a4 + 8 * (void)v52);
  long long v54 = +[NSNull null];
  long long v55 = v7;
  if (v53 == v54) {
    long long v56 = 0;
  }
  else {
    long long v56 = *(void **)(a4 + 8 * (void)v52);
  }
  id v57 = v56;

  id v58 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"ab")), "integerValue");
  long long v59 = *(void **)(a4 + 8 * (void)[v6 indexOfObject:@"ac"]);
  long long v60 = +[NSNull null];
  if (v59 == v60) {
    long long v61 = 0;
  }
  else {
    long long v61 = (void *)_DateForSQLValue();
  }

  id v62 = objc_msgSend(*(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"ad")), "integerValue");
  if (v57 || v58 || v61)
  {
    id v63 = objc_alloc_init((Class)PKPeerPaymentRecurringPaymentTransaction);
    [v63 setIdentifier:v57];
    [v63 setStatus:v58];
    [v63 setExecutionDate:v61];
    [v63 setErrorCode:v62];
    [v55 setLastExecutedTransaction:v63];
  }
  [*(id *)(v67 + 40) addObject:v55];
}

void sub_100486CE4(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_100486CEC(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100486D44(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_100486D4C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_100486D54(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_100486D5C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setSentByMe:](v4, "setSentByMe:", [a3 BOOLValue]);
}

void sub_100486DB4(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  char v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentRecurringPayment *)v3 setAmount:v4];
}

void sub_100486E18(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  char v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentRecurringPayment *)v3 setThreshold:v4];
}

void sub_100486E7C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
}

void sub_100486E84(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setFrequency:](v4, "setFrequency:", [a3 integerValue]);
}

void sub_100486EDC(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  char v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentRecurringPayment *)v3 setStartDate:v4];
}

void sub_100486F3C(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_100486F94(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setActions:](v4, "setActions:", [a3 integerValue]);
}

void sub_100486FEC(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a3;
  unsigned int v5 = a2;
  v9[0] = objc_opt_class();
  v9[1] = objc_opt_class();
  id v6 = +[NSArray arrayWithObjects:v9 count:2];
  id v7 = +[NSSet setWithArray:v6];
  id v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKPeerPaymentRecurringPayment *)v5 setUpcomingPaymentDates:v8];
}

void sub_1004870FC(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentRecurringPayment setUsesAppleCashBalance:](v4, "setUsesAppleCashBalance:", [a3 BOOLValue]);
}

void sub_100487154(id a1, PKPeerPaymentRecurringPayment *a2, id a3)
{
  char v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentRecurringPayment *)v3 setCreatedDate:v4];
}

void sub_100487698(id a1, PKFeatureApplicationDeclineDetails *a2, id a3)
{
}

void sub_100487798(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100487BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100487BBC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) metadata];
  if (!v2)
  {
    char v3 = 0;
LABEL_5:
    id v5 = [*(id *)(a1 + 32) icon];
    if (v5)
    {
      id v6 = +[TileImage insertImage:v5 inDatabase:*(void *)(a1 + 40)];
      if (!v6)
      {
        uint64_t v4 = 0;
LABEL_27:

        goto LABEL_28;
      }
    }
    else
    {
      id v6 = 0;
    }
    if (*(unsigned char *)(a1 + 64))
    {
      id v7 = [*(id *)(a1 + 32) actionState];
      if (v7)
      {
        uint64_t v8 = [*(id *)(a1 + 56) _insertState:v7 inDatabase:*(void *)(a1 + 40) root:0];
        if (!v8)
        {
          uint64_t v4 = 0;
LABEL_26:

          goto LABEL_27;
        }
        id v9 = (void *)v8;
LABEL_15:
        id v10 = [objc_alloc(*(Class *)(a1 + 56)) initWithState:*(void *)(a1 + 32) metadata:v3 icon:v6 actionState:v9 inDatabase:*(void *)(a1 + 40)];
        if (v10)
        {
          uint64_t v4 = 0;
          switch((unint64_t)[*(id *)(a1 + 32) type])
          {
            case 0uLL:
              id v11 = TileStateDefault;
              uint64_t v12 = [*(id *)(a1 + 32) stateTypeDefault];
              goto LABEL_23;
            case 1uLL:
              id v11 = TileStateDefaultV2;
              uint64_t v12 = [*(id *)(a1 + 32) stateTypeDefaultV2];
              goto LABEL_23;
            case 2uLL:
              id v11 = TileStateCheckIn;
              uint64_t v12 = [*(id *)(a1 + 32) stateTypeCheckIn];
              goto LABEL_23;
            case 3uLL:
              id v11 = TileStateGroup;
              uint64_t v12 = [*(id *)(a1 + 32) stateTypeGroup];
LABEL_23:
              id v13 = (void *)v12;
              uint64_t v4 = [(__objc2_class *)v11 insertState:v12 forBaseState:v10 inDatabase:*(void *)(a1 + 40)];

              if (v4) {
                goto LABEL_24;
              }
              break;
            case 4uLL:
              break;
            default:
LABEL_24:
              objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v10);
              uint64_t v4 = 1;
              break;
          }
        }
        else
        {
          uint64_t v4 = 0;
        }

        goto LABEL_26;
      }
    }
    else
    {
      id v7 = 0;
    }
    id v9 = 0;
    goto LABEL_15;
  }
  char v3 = +[TileStateMetadata insertMetadata:v2 inDatabase:*(void *)(a1 + 40)];
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v4 = 0;
LABEL_28:

  return v4;
}

void sub_100488174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100488194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = *(id *)(a4 + 8 * *(void *)(a1 + 56));
  if (v8)
  {
    id v9 = *(void **)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    long long v12 = *(_OWORD *)(a1 + 88);
    v18[0] = *(_OWORD *)(a1 + 72);
    v18[1] = v12;
    id v13 = [v9 _createStateForPID:a2 withProperties:a3 values:a4 propertySetters:v10 indices:v18 inDatabase:v11];
    id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (!v14)
    {
      id v15 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
      id v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      id v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    }
    [v14 setObject:v13 forKeyedSubscript:v8];
  }
}

void sub_1004883C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004883D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  id v7 = [v5 persistentID];
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v10 = *(_OWORD *)(a1 + 72);
  v14[0] = *(_OWORD *)(a1 + 56);
  v14[1] = v10;
  id v11 = +[TileState _createStateForPID:v7 withProperties:v6 values:a3 propertySetters:v8 indices:v14 inDatabase:v9];

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_1004888F4(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassTileState setEnabled:](v4, "setEnabled:", [a3 BOOLValue]);
}

void sub_10048894C(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassTileState setSelected:](v4, "setSelected:", [a3 BOOLValue]);
}

void sub_1004889A4(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  if (a3)
  {
    id v5 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:0];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v7 = v5;
      id v6 = +[NSArray arrayWithObjects:&v7 count:1];
      [(PKPassTileState *)v4 setActionDictionaries:v6];
    }
  }
}

void sub_100488A80(id a1, PKPassTileState *a2, id a3)
{
  uint64_t v4 = a2;
  if (a3)
  {
    id v6 = v4;
    id v5 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:0];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (objc_msgSend(v5, "pk_containsObjectPassingTest:", &stru_1007541B8) & 1) == 0)
    {
      [(PKPassTileState *)v6 setActionDictionaries:v5];
    }

    uint64_t v4 = v6;
  }
}

BOOL sub_100488B28(id a1, id a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return (isKindOfClass & 1) == 0;
}

void sub_100488FF0(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountBillPaymentSelectedSuggestedAmountData alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  char v3 = *(void **)(a1 + 40);
  uint64_t v4 = [(AccountBillPaymentSelectedSuggestedAmountData *)v5 billPaymentSelectedSuggestedAmountData];
  [v3 addObject:v4];
}

id sub_1004892E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1004894E4(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
}

void sub_1004894EC(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
  char v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKBillPaymentSelectedSuggestedAmountData *)v3 setTransactionDate:v4];
}

void sub_10048954C(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
  char v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKBillPaymentSelectedSuggestedAmountData *)v3 setTransactionAmount:v4];
}

void sub_1004895B0(id a1, PKBillPaymentSelectedSuggestedAmountData *a2, id a3)
{
  id v4 = a2;
  -[PKBillPaymentSelectedSuggestedAmountData setSuggestedAmountCategory:](v4, "setSuggestedAmountCategory:", [a3 integerValue]);
}

void sub_100489BE4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKLocation);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));

  if (*(void *)(a4 + 8 * *(void *)(a1 + 56))) {
    objc_msgSend(*(id *)(a1 + 40), "insertLocation:forUniqueID:", v7);
  }
}

void sub_100489D68(id a1, PKLocation *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKLocation setLatitude:](v4, "setLatitude:");
}

void sub_100489DBC(id a1, PKLocation *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKLocation setLongitude:](v4, "setLongitude:");
}

void sub_100489E10(id a1, PKLocation *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKLocation setMaxDistance:](v4, "setMaxDistance:");
}

void sub_100489E64(id a1, PKLocation *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    [a3 doubleValue];
    -[PKLocation setAltitude:](v4, "setAltitude:");
  }
}

void sub_100489EC0(id a1, PKLocation *a2, id a3)
{
}

void sub_100489EC8(id a1, PKLocation *a2, id a3)
{
}

void sub_10048AA1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v10 = objc_alloc_init((Class)PKPaymentTransactionQuestion);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  id v7 = [v6 count];

  id v8 = *(id *)(a4 + 8 * (void)v7 - 8);
  id v9 = [*(id *)(a1 + 40) objectForKey:v8];
  if (!v9)
  {
    id v9 = objc_alloc_init((Class)NSMutableSet);
    [*(id *)(a1 + 40) setObject:v9 forKey:v8];
  }
  [v9 addObject:v10];
}

void sub_10048AC98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKPaymentTransactionQuestion);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10048AF30(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionQuestion setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10048AF88(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionQuestion setAnswered:](v4, "setAnswered:", [a3 BOOLValue]);
}

void sub_10048AFE0(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionQuestion setAnsweredOnThisDevice:](v4, "setAnsweredOnThisDevice:", [a3 BOOLValue]);
}

void sub_10048B038(id a1, PKPaymentTransactionQuestion *a2, id a3)
{
  char v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentTransactionQuestion *)v3 setExpirationDate:v4];
}

id sub_10048B75C(id a1, PKPassSharedEntitlement *a2)
{
  return [(PKPassSharedEntitlement *)a2 dictionaryRepresentation];
}

void sub_10048C2E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKAccountEntityOrdering);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10048CB6C(id a1, PKAccountEntityOrdering *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEntityOrdering setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10048CBC4(id a1, PKAccountEntityOrdering *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEntityOrdering setContext:](v4, "setContext:", [a3 integerValue]);
}

void sub_10048CC1C(id a1, PKAccountEntityOrdering *a2, id a3)
{
}

void sub_10048CD1C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10048D4F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10048D71C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKAppleBalanceAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_10048DA40(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
}

void sub_10048DA48(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  char v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAppleBalanceAccountFeatureDescriptor *)v3 setMinimumAmount:v4];
}

void sub_10048DAAC(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  char v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAppleBalanceAccountFeatureDescriptor *)v3 setMaximumAmount:v4];
}

void sub_10048DB10(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKAppleBalanceAccountFeatureDescriptor *)v4 setSupportedNetworks:v5];
}

void sub_10048DB7C(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
}

void sub_10048DB84(id a1, PKAppleBalanceAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalanceAccountFeatureDescriptor setMerchantCapabilities:](v4, "setMerchantCapabilities:", [a3 unsignedIntegerValue]);
}

CFStringRef sub_10048DC70(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE) {
    return @"allAccounts";
  }
  else {
    return off_1007545C0[a1 - 1];
  }
}

void sub_1004935E4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10049367C;
  v4[3] = &unk_100753C78;
  id v3 = *(id *)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 performHandlerOnSharedWebServiceQueue:v4];
}

void sub_10049367C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 context];
  id v5 = [v4 primaryRegion];
  id v6 = [v5 paymentOffersServiceURL];

  if (v6)
  {
LABEL_14:
    id v16 = objc_alloc_init((Class)PKPaymentOfferWebServiceCatalogRequest);
    [v16 setBaseURL:v6];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    _OWORD v18[2] = sub_100493948;
    v18[3] = &unk_100754640;
    id v17 = *(id *)(a1 + 40);
    void v18[4] = *(void *)(a1 + 32);
    id v19 = v17;
    [v3 paymentOfferCatalogWithRequest:v16 completion:v18];
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v7 = [v4 regions];
    id v8 = [v7 allValues];

    id v9 = [v8 countByEnumeratingWithState:&v20 objects:v28 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v21;
      while (2)
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = [*(id *)(*((void *)&v20 + 1) + 8 * (void)v12) paymentOffersServiceURL];
          if (v13)
          {
            id v6 = (void *)v13;

            goto LABEL_14;
          }
          uint64_t v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v27 = @"Error no payment offers service URL";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v15 = *(void *)(a1 + 40);
    NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
    CFStringRef v25 = @"Error no payment offers service URL";
    id v6 = +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    id v16 = +[NSError errorWithDomain:PKPaymentErrorDomain code:-9001 userInfo:v6];
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0, v16);
  }
}

void sub_100493948(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error getting payment offer catalog: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(NSObject **)(v8 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100493AB4;
    block[3] = &unk_10072E9D8;
    void block[4] = v8;
    id v11 = v5;
    id v12 = *(id *)(a1 + 40);
    dispatch_async(v9, block);
  }
}

void sub_100493AB4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) paymentOfferCatalog];
  id v3 = [*(id *)(a1 + 40) catalog];
  id v4 = +[NSDate date];
  [v3 setLastUpdated:v4];

  [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePaymentOfferCatalog:v3];
  id v5 = [*(id *)(a1 + 32) paymentOfferCatalog];

  if ((PKEqualObjects() & 1) == 0)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Payment Offer Catalog has changed: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100493CC4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) issuerInstallmentTransactionsForPassUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100493D88;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100493D88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100493E90(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) issuerInstallmentTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) paymentHashes:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100493F58;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100493F58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100494038(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) deleteIssuerInstallmentTransactionsForPassUniqueID:*(void *)(a1 + 40)];
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004940D8;
  block[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

uint64_t sub_1004940D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1004944D0(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 96));
  [*(id *)(*(void *)(a1 + 32) + 88) removeObjectForKey:*(void *)(a1 + 40)];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 96));
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return [v2 _executeNextPaymentOffersManagerFetchIfPossibleForRequestIdentifier:v3];
}

void sub_1004946E8(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100494778;
  block[3] = &unk_10072F788;
  id v3 = *(id *)(a1 + 40);
  dispatch_async(v1, block);
}

uint64_t sub_100494778(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100494790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithCatalog:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

void sub_100494B40(id a1, PKPaymentOfferCatalog *a2, NSError *a3)
{
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating payment offer catalog following push", v4, 2u);
  }
}

void sub_100494D60(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_100495200(id a1, PKPaymentOfferCatalog *a2, NSError *a3)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDPaymentOffersManager updating catalog after a pass change with error %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_1004954CC(id a1, PKPaymentOfferCatalog *a2, NSError *a3)
{
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Completed updating payment offers following scheduled task", v4, 2u);
  }
}

void sub_100495538(id a1, NSArray *a2, NSError *a3)
{
  id v4 = a2;
  int v5 = a3;
  if (v5 || ![(NSArray *)v4 count])
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = 0;
      long long v7 = "Failed updating payment rewards balance following scheduled task";
      long long v8 = (uint8_t *)&v10;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = 0;
      long long v7 = "Completed updating payment rewards balance following scheduled task";
      long long v8 = (uint8_t *)&v9;
      goto LABEL_7;
    }
  }
}

void sub_100495610(id a1, NSArray *a2, NSError *a3)
{
  id v4 = a2;
  int v5 = a3;
  if (v5 || ![(NSArray *)v4 count])
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v10 = 0;
      long long v7 = "Failed updating payment rewards redemptions following scheduled task";
      long long v8 = (uint8_t *)&v10;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = 0;
      long long v7 = "Completed updating payment rewards redemptions following scheduled task";
      long long v8 = (uint8_t *)&v9;
      goto LABEL_7;
    }
  }
}

id sub_10049575C(uint64_t a1)
{
  if (PDScheduledActivityExists())
  {
    PDScheduledActivityRemove();
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v8 = @"PaymentOffersFetchCatalog";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDPaymentOffersManager removing scheduled activity %@", buf, 0xCu);
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100495894;
  v6[3] = &unk_100743188;
  void v6[4] = v3;
  return [v4 performHandlerOnSharedWebServiceQueue:v6];
}

void sub_100495894(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100495930;
  block[3] = &unk_10072E1E8;
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_100495930()
{
  if (PKPaymentOffersEligibleToFetchCatalog())
  {
    id v0 = +[NSDate date];
    uint64_t v1 = +[NSDate dateWithTimeInterval:v0 sinceDate:120.0];

    id v2 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v1];
    [v2 setRepeating:0];
    [v2 setRequireNetworkConnectivity:1];
    [v2 setRequireScreenSleep:0];
    [v2 setRequireMainsPower:0];
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412546;
      CFStringRef v5 = @"PaymentOffersFetchCatalog";
      __int16 v6 = 2112;
      id v7 = v1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDPaymentOffersManager scheduling activity %@ for startDate %@", (uint8_t *)&v4, 0x16u);
    }

    PDScheduledActivityRegister();
  }
}

void sub_100495B30(uint64_t a1)
{
  if (PDScheduledActivityExists())
  {
    PDScheduledActivityRemove();
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v8 = @"PaymentOffersFetchRewardsBalance";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDPaymentOffersManager removing scheduled activity %@", buf, 0xCu);
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100495C80;
  v5[3] = &unk_10072F658;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 40);
  [v4 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_100495C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100495D3C;
  v6[3] = &unk_10072E198;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100495D3C(uint64_t a1)
{
  if (PKPaymentOffersEligibleToFetchCatalog())
  {
    id v2 = +[NSDate date];
    id v3 = +[NSDate dateWithTimeInterval:v2 sinceDate:30.0];

    int v4 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v3];
    [v4 setRepeating:0];
    [v4 setRequireNetworkConnectivity:1];
    [v4 setRequireScreenSleep:0];
    [v4 setRequireMainsPower:0];
    [v4 setReason:*(void *)(a1 + 40)];
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412546;
      CFStringRef v7 = @"PaymentOffersFetchRewardsBalance";
      __int16 v8 = 2112;
      __int16 v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDPaymentOffersManager scheduling activity %@ for startDate %@", (uint8_t *)&v6, 0x16u);
    }

    PDScheduledActivityRegister();
  }
}

id sub_100495F24(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Payment Web Service context changed in PDPaymentOffersManager", v4, 2u);
  }

  return [*(id *)(a1 + 32) _updatePushTopics];
}

void sub_10049611C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) paymentRewardsRedemptionsForPassUniqueIdentifier:*(void *)(a1 + 40) paymentHashes:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1004961E4;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1004961E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10049654C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100496684;
  v8[3] = &unk_10072E598;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100496684(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  uint64_t v6 = v1;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  id v4 = +[NSError errorWithDomain:PKPaymentErrorDomain code:-9001 userInfo:v3];
  (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0, v4);
}

void sub_100496760(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10049685C;
  v5[3] = &unk_100754778;
  id v6 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 72);
  id v7 = *(id *)(a1 + 48);
  id v3 = *(id *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 80);
  [v2 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_10049685C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 context];
  NSErrorUserInfoKey v5 = [*(id *)(a1 + 32) passTypeIdentifier];
  id v6 = [v4 regionForIdentifier:v5];
  id v7 = [v6 paymentOffersServiceURL];

  if (v7)
  {
    id v8 = objc_alloc_init((Class)PKPaymentOfferWebServiceRewardsBalancesRequest);
    [v8 setBaseURL:v7];
    [v8 setFpanIdentifier:*(void *)(a1 + 40)];
    uint64_t v9 = [*(id *)(a1 + 48) identifier];
    [v8 setCriteriaIdentifier:v9];

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1004969D4;
    v11[3] = &unk_100754750;
    id v10 = *(void **)(a1 + 64);
    void v11[4] = *(void *)(a1 + 56);
    id v12 = v10;
    id v13 = *(id *)(a1 + 80);
    [v3 paymentRewardsBalancesWithRequest:v8 completion:v11];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_1004969D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    id v8 = [v6 code];
    uint64_t v9 = PKLogFacilityTypeGetObject();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if (v8 == (id)40030)
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 138412290;
        id v26 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Payment Rewards opted-out, %@", buf, 0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 24) deletePaymentRewardsBalancesForPassUniqueIdentifier:*(void *)(a1 + 40)];
      [*(id *)(*(void *)(a1 + 32) + 24) deletePaymentRewardsRedemptionsForPassUniqueIdentifier:*(void *)(a1 + 40)];
    }
    else
    {
      if (v10)
      {
        *(_DWORD *)long long buf = 138412290;
        id v26 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error getting payment rewards balance: %@", buf, 0xCu);
      }
    }
    id v17 = *(NSObject **)(*(void *)(a1 + 32) + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100496C28;
    block[3] = &unk_10072E598;
    id v12 = &v24;
    id v24 = *(id *)(a1 + 48);
    id v23 = v7;
    dispatch_async(v17, block);
    id v16 = v23;
  }
  else
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 32) + 56);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    _OWORD v18[2] = sub_100496C40;
    v18[3] = &unk_100730578;
    id v12 = (id *)v19;
    id v13 = v5;
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(a1 + 40);
    v19[0] = v13;
    v19[1] = v14;
    id v20 = v15;
    id v21 = *(id *)(a1 + 48);
    dispatch_async(v11, v18);

    id v16 = v20;
  }
}

uint64_t sub_100496C28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_100496C40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) rewardsBalances];
  [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdatePaymentRewardsBalances:v2 withPassUniqueIdentifier:*(void *)(a1 + 48)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100497000(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100497138;
  v8[3] = &unk_10072E598;
  id v6 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100497138(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  uint64_t v6 = v1;
  id v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  uint64_t v4 = +[NSError errorWithDomain:PKPaymentErrorDomain code:-9001 userInfo:v3];
  (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0, v4);
}

void sub_100497214(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating Payment Rewards Redemptions", buf, 2u);
  }

  id v3 = *(void **)(*(void *)(a1 + 32) + 16);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100497360;
  v9[3] = &unk_1007547F0;
  id v10 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 32);
  id v15 = v4;
  uint64_t v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v8 = *(void **)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  id v13 = v6;
  uint64_t v17 = v7;
  id v16 = v8;
  id v14 = *(id *)(a1 + 64);
  [v3 performHandlerOnSharedWebServiceQueue:v9];
}

void sub_100497360(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 context];
  uint64_t v5 = [*(id *)(a1 + 32) passTypeIdentifier];
  id v6 = [v4 regionForIdentifier:v5];
  uint64_t v7 = [v6 paymentOffersServiceURL];

  if (v7)
  {
    uint64_t v24 = 0;
    CFStringRef v25 = &v24;
    uint64_t v26 = 0x3032000000;
    CFStringRef v27 = sub_100020E48;
    uint64_t v28 = sub_100021218;
    id v8 = *(void **)(a1 + 40);
    id v9 = [*(id *)(a1 + 32) uniqueID];
    id v29 = [v8 _endpointMetadataForPassUniqueID:v9 type:2];

    id v10 = objc_alloc_init((Class)PKPaymentOfferWebServiceRewardsRedemptionsRequest);
    [v10 setBaseURL:v7];
    [v10 setFpanIdentifier:*(void *)(a1 + 48)];
    uint64_t v11 = [*(id *)(a1 + 56) identifier];
    [v10 setCriteriaIdentifier:v11];

    if (([(id)v25[5] isDirty] & 1) == 0)
    {
      id v12 = [(id)v25[5] lastUpdated];
      [v10 setLastUpdated:v12];
    }
    if (*(uint64_t *)(a1 + 88) >= 1)
    {
      id v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
      [v10 setLimit:v13];
    }
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    _OWORD v18[2] = sub_1004975F4;
    v18[3] = &unk_1007547C8;
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = *(void **)(a1 + 48);
    long long v22 = &v24;
    void v18[4] = v14;
    id v19 = v15;
    id v21 = *(id *)(a1 + 80);
    id v16 = *(id *)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 88);
    id v20 = v16;
    uint64_t v23 = v17;
    [v3 paymentRewardsRedemptionsWithRequest:v10 completion:v18];

    _Block_object_dispose(&v24, 8);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_1004975DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004975F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (v6)
  {
    [v7 setDirty:1];
    uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePassEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v45 = v12;
      __int16 v46 = 2112;
      id v47 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Error getting payment rewards redemptions for fpanIdentifier: %@, error: %@", buf, 0x16u);
    }

    id v13 = *(NSObject **)(*(void *)(a1 + 32) + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1004979D0;
    block[3] = &unk_10072E598;
    id v42 = *(id *)(a1 + 56);
    id v41 = v6;
    dispatch_async(v13, block);

    uint64_t v14 = v42;
  }
  else
  {
    id v15 = [v7 lastUpdated];
    id v16 = [v5 lastUpdated];
    unsigned int v17 = [v15 isEqualToDate:v16];

    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setDirty:0];
    id v18 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    id v19 = [v5 lastUpdated];
    [v18 setLastUpdated:v19];

    uint64_t v20 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePassEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8);
    long long v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    uint64_t v14 = [v5 rewardsRedemptions];
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v23 = [v14 countByEnumeratingWithState:&v36 objects:v43 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v37;
      do
      {
        for (unint64_t i = 0; i != v24; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v37 != v25) {
            objc_enumerationMutation(v14);
          }
          [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdatePaymentRewardsRedemption:*(void *)(*((void *)&v36 + 1) + 8 * i) withPassUniqueIdentifier:*(void *)(a1 + 48)];
        }
        id v24 = [v14 countByEnumeratingWithState:&v36 objects:v43 count:16];
      }
      while (v24);
    }
    if ([v14 count]) {
      PKSharedCacheSetBoolForKey();
    }
    unsigned int v27 = [v5 moreComing] ^ 1 | v17;
    uint64_t v28 = *(id **)(a1 + 32);
    if (v27)
    {
      id v29 = [v28[3] paymentRewardsRedemptionsForPassUniqueIdentifier:*(void *)(a1 + 48) limit:*(void *)(a1 + 72)];
      id v30 = *(NSObject **)(*(void *)(a1 + 32) + 56);
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_1004979E8;
      v33[3] = &unk_10072E598;
      id v31 = *(id *)(a1 + 56);
      id v34 = v29;
      id v35 = v31;
      id v32 = v29;
      dispatch_async(v30, v33);
    }
    else
    {
      [v28 updatePaymentRewardsRedemptionsWithPassUniqueIdentifier:*(void *)(a1 + 48) limit:*(void *)(a1 + 72) completion:*(void *)(a1 + 56)];
    }
  }
}

uint64_t sub_1004979D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1004979E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

id PDHasRegisteredCarKeySiriVocabulary()
{
  id v0 = +[NSUserDefaults standardUserDefaults];
  id v1 = [v0 BOOLForKey:@"PDSiriVocabularyManagerHasRegisteredVocab"];

  return v1;
}

void PDRegisterCarKeySiriVocabulary(void *a1, int a2)
{
  id v3 = a1;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDRegisterCarKeySiriVocabulary: Register Siri Vocab.", buf, 2u);
  }

  id v5 = [v3 passesOfType:1];
  id v6 = +[NSPredicate predicateWithBlock:&stru_100754858];
  uint64_t v7 = [v5 filteredSetUsingPredicate:v6];

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [v7 count];
    *(_DWORD *)long long buf = 134217984;
    id v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDRegisterCarKeySiriVocabulary: CarKeyPasses count %lu", buf, 0xCu);
  }

  if ([v7 count])
  {
    oslog = v4;
    uint64_t v28 = v5;
    id v29 = v3;
    id v9 = objc_alloc_init((Class)NSMutableOrderedSet);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v26 = v7;
    id v10 = v7;
    id v11 = [v10 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (!v11) {
      goto LABEL_18;
    }
    id v12 = v11;
    uint64_t v13 = *(void *)v31;
    while (1)
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v31 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v14);
        id v16 = objc_msgSend(v15, "speakableMake", v26);
        uint64_t v17 = [v15 speakableModel];
        id v18 = (void *)v17;
        if (v16)
        {
          if (v17) {
            goto LABEL_13;
          }
        }
        else
        {
          id v16 = [v15 organizationName];
          if (v18) {
            goto LABEL_13;
          }
        }
        uint64_t v20 = [v15 frontFieldBuckets];
        uint64_t v21 = [v20 objectAtIndexedSubscript:0];

        long long v22 = [v21 firstObject];
        id v18 = [v22 value];

LABEL_13:
        objc_msgSend(v9, "pk_safelyAddObject:", v16);
        objc_msgSend(v9, "pk_safelyAddObject:", v18);
        id v19 = [v15 localizedDescription];
        objc_msgSend(v9, "pk_safelyAddObject:", v19);

        uint64_t v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v23 = [v10 countByEnumeratingWithState:&v30 objects:v34 count:16];
      id v12 = v23;
      if (!v23)
      {
LABEL_18:

        id v24 = +[NSUserDefaults standardUserDefaults];
        [v24 setBool:1 forKey:@"PDSiriVocabularyManagerHasRegisteredVocab"];
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v36 = v9;
          _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "PDRegisterCarKeySiriVocabulary: Registering %@ with Siri.", buf, 0xCu);
        }

        uint64_t v25 = +[INVocabulary sharedVocabulary];
        [v25 setVocabularyStrings:v9 ofType:301];

        id v5 = v28;
        id v3 = v29;
        uint64_t v7 = v26;
        goto LABEL_25;
      }
    }
  }
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDRegisterCarKeySiriVocabulary: No stored cars, reset the vocabulary.", buf, 2u);
    }

    id v9 = +[INVocabulary sharedVocabulary];
    [v9 removeAllVocabularyStrings];
LABEL_25:
  }
}

BOOL sub_100498608(id a1, PKSecureElementPass *a2, NSDictionary *a3)
{
  return [(PKSecureElementPass *)a2 isCarKeyPass];
}

void sub_100498A1C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100498DC4(id a1, PKAccountFetchPeriods *a2, id a3)
{
  uint64_t v7 = a2;
  id v4 = [a3 componentsSeparatedByString:@","];
  id v5 = objc_msgSend(v4, "pk_arrayByApplyingBlock:", &stru_1007548B8);

  if ([v5 count])
  {
    id v6 = [objc_alloc((Class)NSSet) initWithArray:v5];
    [(PKAccountFetchPeriods *)v7 setBlockedEndpoints:v6];
  }
}

id sub_100498E70(id a1, NSString *a2)
{
  NSInteger v2 = [(NSString *)a2 integerValue];
  return +[NSNumber numberWithInteger:v2];
}

void sub_100498EB4(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setAccountFetchPeriod:](v4, "setAccountFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

void sub_100498F0C(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setExtendedAccountFetchPeriod:](v4, "setExtendedAccountFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

void sub_100498F64(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setUsersFetchPeriod:](v4, "setUsersFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

void sub_100498FBC(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setSharedCloudStoreModelFetchPeriod:](v4, "setSharedCloudStoreModelFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

void sub_100499014(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setFinancingPlansFetchPeriod:](v4, "setFinancingPlansFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

void sub_10049906C(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setFundingSourcesFetchPeriod:](v4, "setFundingSourcesFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

void sub_1004990C4(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setRecoveryPaymentPlansFetchPeriod:](v4, "setRecoveryPaymentPlansFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

void sub_10049911C(id a1, PKAccountFetchPeriods *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFetchPeriods setPhysicalCardsFetchPeriod:](v4, "setPhysicalCardsFetchPeriod:", (double)(uint64_t)[a3 integerValue]);
}

CFStringRef PDCloudStoreZoneActionToString(unint64_t a1)
{
  if (a1 > 3) {
    return @"fetch";
  }
  else {
    return *(&off_100754B50 + a1);
  }
}

void sub_10049A024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10049A03C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [*(id *)(a1 + 32) zoneName];
  id v12 = v7;
  id v10 = v9;
  if (v10 == v12)
  {

    goto LABEL_7;
  }
  if (!v12 || !v10)
  {

    goto LABEL_9;
  }
  unsigned int v11 = [v12 isEqualToString:v10];

  if (v11)
  {
LABEL_7:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
LABEL_9:
}

void sub_10049A380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10049A398(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v7 = a3;
  id v8 = *(void **)(a1 + 32);
  id v15 = v7;
  id v9 = [v7 zoneSubscriptionIdentifier];
  id v10 = v8;
  id v11 = v9;
  if (v10 == v11)
  {

LABEL_10:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
    goto LABEL_11;
  }
  id v12 = v11;
  if (v10) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {

    goto LABEL_11;
  }
  unsigned int v14 = [v10 isEqualToString:v11];

  if (v14) {
    goto LABEL_10;
  }
LABEL_11:
}

uint64_t sub_10049B424(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 zoneSubscription];
  id v5 = v4;
  if (v4)
  {
    id v7 = v4;
    id v4 = [*(id *)(a1 + 32) addObject:v4];
    id v5 = v7;
  }
  return _objc_release_x1(v4, v5);
}

void sub_10049BF04(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 cloudStoreZonesForItem:*(void *)(a1 + 32) action:*(void *)(a1 + 48)];
  if ([v5 count]) {
    [*(id *)(a1 + 40) setObject:v5 forKey:v6];
  }
}

void sub_10049C054(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 cloudStoreZonesForItemType:*(void *)(a1 + 40) action:*(void *)(a1 + 48)];
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_10049C1BC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 cloudStoreZonesForItemType:*(void *)(a1 + 48) configuration:*(void *)(a1 + 32) action:*(void *)(a1 + 56)];
  if ([v5 count]) {
    [*(id *)(a1 + 40) setObject:v5 forKey:v6];
  }
}

void sub_10049C4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10049C4BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [*(id *)(a1 + 32) cloudStoreZoneForZoneName:*(void *)(a1 + 40) inContainerDatabase:a3];
  if (v6)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_10049C6A4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 zonesThatNeedToBeCreated];
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_10049C7D8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 subscriptionsThatNeedsToBeCreated];
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_10049C90C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 allPossibleZoneIDs];
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_10049CA40(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = [a3 allPossibleSubscriptionIdentifiers];
  if ([v5 count]) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_10049CB88(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [v5 databaseForIdentifier:v9];
  id v8 = [v7 subscriptionsForZones:v6];

  if ([v8 count]) {
    [*(id *)(a1 + 40) setObject:v8 forKey:v9];
  }
}

void sub_10049CD04(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [v5 databaseForIdentifier:v9];
  id v8 = [v7 subscriptionIdentifiersForZoneIDs:v6];

  if ([v8 count]) {
    [*(id *)(a1 + 40) setObject:v8 forKey:v9];
  }
}

void sub_10049D328(id a1, NSString *a2, PDCloudStoreContainerDatabase *a3, BOOL *a4)
{
}

id sub_10049D3C8(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 clearCacheForZoneName:*(void *)(a1 + 32)];
}

void sub_10049D3E8(id a1, NSString *a2, PDCloudStoreContainerDatabase *a3, BOOL *a4)
{
}

uint64_t sub_10049F590(void *a1)
{
  id v1 = [a1 queryDescriptor];
  NSInteger v2 = [v1 predicate];

  uint64_t v3 = sub_1004A028C(v2);
  return v3;
}

void sub_10049F5DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v19 = a3;
  id v6 = objc_alloc_init((Class)PKPaymentTransactionRewardsItem);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v6 withProperties:v19 values:a4];
  [v19 indexOfObject:@"e"];
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v7 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  id v8 = (NSString *)*(id *)(a4 + 8 * (void)[v19 indexOfObject:@"f"]);
  if (v7)
  {
    id v9 = +[NSDecimalNumber notANumber];
    unsigned __int8 v10 = [(NSDecimalNumber *)v7 isEqualToNumber:v9];

    if ((v10 & 1) == 0)
    {
      if (v8)
      {
        id v11 = PKCurrencyAmountCreate(v7, v8, 0);
        [v6 setCurrencyAmount:v11];
      }
    }
  }
  id v12 = [v6 state];
  id v13 = *(id *)(a4 + 8 * (void)[v19 count] - 8);
  if (v12 == (id)4)
  {
    id v16 = *(void **)(a1 + 40);
    id v15 = (id *)(a1 + 40);
    unsigned int v14 = v16;
  }
  else
  {
    uint64_t v17 = *(void **)(a1 + 48);
    id v15 = (id *)(a1 + 48);
    unsigned int v14 = v17;
  }
  id v18 = [v14 objectForKey:v13];
  if (!v18)
  {
    id v18 = objc_alloc_init((Class)NSMutableArray);
    [*v15 setObject:v18 forKey:v13];
  }
  [v18 addObject:v6];
}

void sub_10049F97C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v13 = objc_alloc_init((Class)PKPaymentTransactionRewardsItem);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  [v6 indexOfObject:@"e"];
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v7 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  id v8 = [v6 indexOfObject:@"f"];

  id v9 = (NSString *)*(id *)(a4 + 8 * (void)v8);
  if (v7)
  {
    unsigned __int8 v10 = +[NSDecimalNumber notANumber];
    unsigned __int8 v11 = [(NSDecimalNumber *)v7 isEqualToNumber:v10];

    if ((v11 & 1) == 0)
    {
      if (v9)
      {
        id v12 = PKCurrencyAmountCreate(v7, v9, 0);
        [v13 setCurrencyAmount:v12];
      }
    }
  }
  [*(id *)(a1 + 40) addObject:v13];
}

void sub_1004A00A0(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1004A00A8(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1004A0100(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1004A0158(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransactionRewardsItem *)v3 setEligibleValue:v4];
}

void sub_1004A01BC(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setEligibleValueUnit:](v4, "setEligibleValueUnit:", [a3 integerValue]);
}

void sub_1004A0214(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1004A021C(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1004A0224(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
}

void sub_1004A022C(id a1, PKPaymentTransactionRewardsItem *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionRewardsItem setHasEnhancedMerchantProgramIdentifier:](v4, "setHasEnhancedMerchantProgramIdentifier:", [a3 BOOLValue]);
}

uint64_t sub_1004A028C(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    NSInteger v2 = objc_msgSend(v1, "predicates", 0);
    id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v14;
      while (2)
      {
        for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v5) {
            objc_enumerationMutation(v2);
          }
          if (sub_1004A028C(*(void *)(*((void *)&v13 + 1) + 8 * i)))
          {

            uint64_t v10 = 1;
            goto LABEL_24;
          }
        }
        id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }

    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [v1 property];
    id v8 = v7;
    if (v7 != @"i")
    {
      if (v7)
      {
        unsigned __int8 v9 = [(__CFString *)v7 isEqualToString:@"i"];

        if (v9) {
          goto LABEL_15;
        }
        unsigned __int8 v11 = v8;
        if (v11 == @"j") {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = (uint64_t)[(__CFString *)v11 isEqualToString:@"j"];
        }
      }
      else
      {
        uint64_t v10 = 0;
      }

      goto LABEL_23;
    }
LABEL_15:
    uint64_t v10 = 1;
LABEL_23:

    goto LABEL_24;
  }
LABEL_16:
  uint64_t v10 = 0;
LABEL_24:

  return v10;
}

id sub_1004A0BF8(uint64_t a1, uint64_t a2)
{
  return +[PassShareTimeConfiguration deletePassShareTimeConfigurationsForPassEntitlementPID:a2 inDatabase:*(void *)(a1 + 32)];
}

void sub_1004A0E78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v10 = objc_alloc_init((Class)PKPassEntitlement);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v10 withProperties:v7 values:a4];

  id v8 = +[PassShareTimeConfiguration passShareTimeConfigurationsForPassEntitlementPID:a2 inDatabase:*(void *)(a1 + 40)];
  unsigned __int8 v9 = [v8 firstObject];

  [v10 setTimeConfiguration:v9];
  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_1004A10A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1004A1738(id a1, PKPassEntitlement *a2, id a3)
{
}

void sub_1004A1740(id a1, PKPassEntitlement *a2, id a3)
{
}

void sub_1004A1748(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a2;
  -[PKPassEntitlement setActive:](v4, "setActive:", [a3 BOOLValue]);
}

void sub_1004A17A0(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a2;
  -[PKPassEntitlement setHasRemainingShares:](v4, "setHasRemainingShares:", [a3 BOOLValue]);
}

void sub_1004A17F8(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a2;
  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [a3 integerValue]);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPassEntitlement *)v4 setValue:v5];
}

void sub_1004A1878(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = PKSharingCapabilityShareabilitiesFromStringArray();
  [(PKPassEntitlement *)v4 setShareability:v5];
}

void sub_1004A18F4(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = PKSharingCapabilityVisibilitiesFromStringArray();
  [(PKPassEntitlement *)v4 setVisibility:v5];
}

void sub_1004A1970(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = PKSharingCapabilityManageabilitiesFromStringArray();
  [(PKPassEntitlement *)v4 setManageability:v5];
}

void sub_1004A19EC(id a1, PKPassEntitlement *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = objc_alloc((Class)NSSet);
  uint64_t v7 = objc_opt_class();
  id v9 = objc_msgSend(v6, "initWithObjects:", v7, objc_opt_class(), 0);
  id v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v9 fromData:v4 error:0];

  [(PKPassEntitlement *)v5 setTemplateFields:v8];
}

void sub_1004A1AC8(id a1, PKPassEntitlement *a2, id a3)
{
}

void sub_1004A1AD0(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3)
  {
    id v3 = a2;
    id v4 = +[NSNumber numberWithUnsignedInteger:PKSharingCapabilityShareabilityFromString()];
    [(PKPassEntitlement *)v3 setActiveShareability:v4];
  }
}

void sub_1004A1B58(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3)
  {
    id v3 = a2;
    id v4 = +[NSNumber numberWithUnsignedInteger:PKSharingCapabilityManageabilityFromString()];
    [(PKPassEntitlement *)v3 setActiveManageability:v4];
  }
}

void sub_1004A1BE0(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3)
  {
    id v3 = a2;
    id v4 = +[NSNumber numberWithUnsignedInteger:PKSharingCapabilityVisibilityFromString()];
    [(PKPassEntitlement *)v3 setActiveVisibility:v4];
  }
}

void sub_1004A1C68(id a1, PKPassEntitlement *a2, id a3)
{
  if (a3) {
    -[PKPassEntitlement setActiveCapabilityRole:](a2, "setActiveCapabilityRole:");
  }
}

uint64_t sub_1004A2374(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

void sub_1004A2630(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  id v9 = [*(id *)(a1 + 40) iconImageURL];
  long long v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472;
  long long v16 = sub_1004A273C;
  uint64_t v17 = &unk_100754ED8;
  id v10 = *(void **)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 40);
  id v20 = v6;
  id v21 = v7;
  id v19 = v10;
  id v11 = v6;
  id v12 = v7;
  long long v13 = [v8 dataTaskWithURL:v9 completionHandler:&v14];

  objc_msgSend(v13, "resume", v14, v15, v16, v17, v18);
}

void sub_1004A273C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  if (v6 && !a4)
  {
    id v7 = [*(id *)(a1 + 32) iconImageURL];
    id v8 = [v7 pathExtension];

    id v9 = [*(id *)(a1 + 32) identifier];
    id v10 = [v9 stringByAppendingPathExtension:v8];

    id v11 = [*(id *)(a1 + 40) URLByAppendingPathComponent:v10];
    id v16 = 0;
    unsigned int v12 = [v6 writeToURL:v11 options:0 error:&v16];
    id v13 = v16;
    if (v12)
    {
      long long v14 = *(void **)(a1 + 32);
      uint64_t v15 = [objc_alloc((Class)PKImage) initWithData:v6 scale:0.0];
      [v14 setImage:v15];
    }
    else
    {
      uint64_t v15 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Error storing receipt image: %@", buf, 0xCu);
      }
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

uint64_t sub_1004A28EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1004A2C18(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  v146 = a1;
  id v147 = a4;
  if (a1)
  {
    id v8 = a3;
    id v9 = +[NSMutableDictionary dictionary];
    id v10 = [v7 amount];
    uint64_t v11 = PKCurrencyDecimalToStorageNumber();

    unsigned int v12 = [v7 subtotalAmount];
    uint64_t v13 = PKCurrencyDecimalToStorageNumber();

    long long v14 = [v7 amountAddedToAuth];
    uint64_t v15 = PKCurrencyDecimalToStorageNumber();

    id v16 = [v7 paymentHash];
    uint64_t v17 = [v16 uppercaseString];

    id v18 = [v8 persistentID];
    id v19 = +[NSNumber numberWithLongLong:v18];
    [v9 setObjectOrNull:v19 forKey:@"source_pid"];

    id v20 = [v7 identifier];
    [v9 setObjectOrNull:v20 forKey:@"identifier"];

    id v21 = [v7 serviceIdentifier];
    [v9 setObjectOrNull:v21 forKey:@"service_identifier"];

    v142 = (void *)v17;
    [v9 setObjectOrNull:v17 forKey:@"payment_hash"];
    long long v22 = [v7 locationDate];
    [v9 setObjectOrNull:v22 forKey:@"location_date"];

    id v23 = [v7 transactionDate];
    [v9 setObjectOrNull:v23 forKey:@"transaction_date"];

    id v24 = [v7 transactionStatusChangedDate];
    [v9 setObjectOrNull:v24 forKey:@"transaction_status_changed_date"];

    uint64_t v25 = [v7 expirationDate];
    [v9 setObjectOrNull:v25 forKey:@"expiration_date"];

    uint64_t v26 = [v7 locality];
    [v9 setObjectOrNull:v26 forKey:@"locality"];

    unsigned int v27 = [v7 administrativeArea];
    [v9 setObjectOrNull:v27 forKey:@"administrative_area"];

    uint64_t v28 = [v7 timeZone];
    id v29 = [v28 name];
    [v9 setObjectOrNull:v29 forKey:@"af"];

    long long v30 = [v7 currencyCode];
    [v9 setObjectOrNull:v30 forKey:@"currency_code"];

    v145 = (void *)v11;
    [v9 setObjectOrNull:v11 forKey:@"amount"];
    v144 = (void *)v13;
    [v9 setObjectOrNull:v13 forKey:@"subtotal_amount"];
    v143 = (void *)v15;
    [v9 setObjectOrNull:v15 forKey:@"amount_added_to_auth"];
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "transactionStatus"), @"transaction_status");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "transactionDeclinedReason"), @"transaction_declined_reason");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "transactionType"), @"transaction_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "technologyType"), @"technology_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "transactionSource"), @"transaction_source");
    [v7 locationLatitude];
    objc_msgSend(v9, "setDouble:forKey:", @"location_latitude");
    [v7 locationLongitude];
    objc_msgSend(v9, "setDouble:forKey:", @"location_longitude");
    [v7 locationAltitude];
    objc_msgSend(v9, "setDouble:forKey:", @"location_altitude");
    [v7 locationHorizontalAccuracy];
    objc_msgSend(v9, "setDouble:forKey:", @"location_horizontal_accuracy");
    [v7 locationVerticalAccuracy];
    objc_msgSend(v9, "setDouble:forKey:", @"location_vertical_accuracy");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "requiresLocation"), @"requires_location");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isCoarseLocation"), @"is_coarse_location");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "hasNotificationServiceData"), @"has_notification_service_data");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "processedForLocation"), @"processed_for_location");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "processedForMerchantCleanup"), @"processed_for_merchant_cleanup");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "requiresMerchantReprocessing"), @"requires_merchant_reprocessing");
    long long v31 = [v7 lastMerchantReprocessingDate];
    long long v32 = (void *)_SQLValueForDate();
    [v9 setObjectOrNull:v32 forKey:@"last_merchant_reprocessing_date"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "processedForStations"), @"processed_for_stations");
    long long v33 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v7 transitType]);
    [v9 setObject:v33 forKeyedSubscript:@"transit_type"];

    id v34 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v7 transitModifiers]);
    [v9 setObject:v34 forKeyedSubscript:@"transit_modifiers"];

    id v35 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v7 enRoute]);
    [v9 setObject:v35 forKeyedSubscript:@"en_route"];

    id v36 = [v7 stationCodeProvider];
    [v9 setObjectOrNull:v36 forKey:@"station_code_provider"];

    long long v37 = [v7 startStationCode];
    [v9 setObjectOrNull:v37 forKey:@"start_station_code"];

    long long v38 = [v7 startStation];
    [v9 setObjectOrNull:v38 forKey:@"start_station"];

    [v7 startStationLatitude];
    objc_msgSend(v9, "setDouble:forKey:", @"start_station_latitude");
    [v7 startStationLongitude];
    objc_msgSend(v9, "setDouble:forKey:", @"start_station_longitude");
    long long v39 = [v7 endStationCode];
    [v9 setObjectOrNull:v39 forKey:@"end_station_code"];

    id v40 = [v7 endStation];
    [v9 setObjectOrNull:v40 forKey:@"end_station"];

    [v7 endStationLatitude];
    objc_msgSend(v9, "setDouble:forKey:", @"end_station_latitude");
    [v7 endStationLongitude];
    objc_msgSend(v9, "setDouble:forKey:", @"end_station_longitude");
    id v41 = [v7 cityCode];
    [v9 setObjectOrNull:v41 forKey:@"city_code"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "shouldSuppressDate"), @"should_suppress_date");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "suppressNotifications"), @"suppress_notifications");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isRecurring"), @"recurring");
    id v42 = [v7 merchant];
    if ([v42 isValid])
    {
      id v43 = [v42 name];
      [v9 setObjectOrNull:v43 forKey:@"merchant_name"];

      id v44 = [v42 rawName];
      [v9 setObjectOrNull:v44 forKey:@"merchant_raw_name"];

      uint64_t v45 = [v42 industryCategory];
      [v9 setObjectOrNull:v45 forKey:@"merchant_industry_category"];

      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v42, "industryCode"), @"merchant_industry_code");
      __int16 v46 = [v42 rawCANL];
      [v9 setObjectOrNull:v46 forKey:@"f"];

      id v47 = [v42 rawCity];
      [v9 setObjectOrNull:v47 forKey:@"g"];

      id v48 = [v42 rawCountry];
      [v9 setObjectOrNull:v48 forKey:@"i"];

      id v49 = [v42 rawState];
      [v9 setObjectOrNull:v49 forKey:@"h"];

      id v50 = [v42 city];
      [v9 setObjectOrNull:v50 forKey:@"j"];

      uint64_t v51 = [v42 state];
      [v9 setObjectOrNull:v51 forKey:@"k"];

      id v52 = [v42 zip];
      [v9 setObjectOrNull:v52 forKey:@"l"];

      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v42, "cleanConfidenceLevel"), @"m");
      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v42, "adamIdentifier"), @"q");
      id v53 = [v42 originURL];
      long long v54 = (void *)_SQLValueForURL();
      [v9 setObjectOrNull:v54 forKey:@"p"];

      long long v55 = [v42 webMerchantIdentifier];
      [v9 setObjectOrNull:v55 forKey:@"ag"];

      long long v56 = [v42 webMerchantName];
      [v9 setObjectOrNull:v56 forKey:@"ah"];

      id v57 = [v42 merchantIdentifier];
      [v9 setObjectOrNull:v57 forKey:@"t"];

      objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v42, "fallbackcategory"), @"x");
      id v58 = [v42 fallbackDetailedCategory];
      [v9 setObjectOrNull:v58 forKey:@"y"];

      objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v42, "useRawMerchantData"), @"use_raw_merchant_data");
      long long v59 = [v42 fallbackLogoImageURL];
      long long v60 = (void *)_SQLValueForURL();
      [v9 setObjectOrNull:v60 forKey:@"merchant_fallback_logo_image_url"];
    }
    long long v61 = v147;
    if ([v7 technologyType] == (id)1)
    {
      id v62 = [v7 paymentHash];
      id v63 = sub_1004A4478(v62);

      id v64 = [v7 paymentHash];
      long long v65 = sub_1004A44DC(v64);

      if (v63
        && ([v63 isEqualToString:@"00000000000000000000000000000000"] & 1) == 0)
      {
        [v9 setObjectOrNull:v63 forKey:@"payment_hash_component_1"];
      }
      if (v65
        && ([v65 isEqualToString:@"00000000000000000000000000000000"] & 1) == 0)
      {
        [v9 setObjectOrNull:v65 forKey:@"payment_hash_component_2"];
      }
    }
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "adjustmentType"), @"adjustment_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "topUpType"), @"top_up_type");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "peerPaymentType"), @"peer_payment_type");
    id v66 = [v7 peerPaymentCounterpartHandle];
    [v9 setObjectOrNull:v66 forKey:@"peer_payment_counterpart_handle"];

    uint64_t v67 = [v7 peerPaymentMemo];
    [v9 setObjectOrNull:v67 forKey:@"peer_payment_memo"];

    id v68 = [v7 peerPaymentMessageReceivedDate];
    [v9 setObjectOrNull:v68 forKey:@"peer_payment_message_received_date"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "peerPaymentPaymentMode"), @"ca");
    id v69 = [v7 peerPaymentCounterpartImageRecordIdentifier];
    [v9 setObjectOrNull:v69 forKey:@"cb"];

    unint64_t v70 = [v7 foreignExchangeInformation];
    unint64_t v71 = v70;
    if (v70)
    {
      v72 = [v70 destinationCurrencyAmount];
      id v73 = [v72 amount];
      v74 = PKCurrencyDecimalToStorageNumber();

      [v9 setObjectOrNull:v74 forKey:@"foreign_exchange_information_destination_amount"];
      v75 = [v71 destinationCurrencyAmount];
      v76 = [v75 currency];
      [v9 setObjectOrNull:v76 forKey:@"foreign_exchange_information_destination_currency_code"];

      v77 = [v71 exchangeRate];
      v78 = [v77 stringValue];
      [v9 setObjectOrNull:v78 forKey:@"foreign_exchange_information_exchange_rate"];
    }
    long long v79 = [v7 primaryFundingSourceAmount];
    long long v80 = PKCurrencyDecimalToStorageNumber();
    [v9 setObjectOrNull:v80 forKey:@"primary_funding_source_amount"];

    long long v81 = [v7 primaryFundingSourceCurrencyCode];
    [v9 setObjectOrNull:v81 forKey:@"primary_funding_source_currency_code"];

    long long v82 = [v7 secondaryFundingSourceAmount];
    long long v83 = PKCurrencyDecimalToStorageNumber();
    [v9 setObjectOrNull:v83 forKey:@"secondary_funding_source_amount"];

    long long v84 = [v7 secondaryFundingSourceCurrencyCode];
    [v9 setObjectOrNull:v84 forKey:@"secondary_funding_source_currency_code"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "secondaryFundingSourceNetwork"), @"secondary_funding_source_network");
    long long v85 = [v7 secondaryFundingSourceDPANSuffix];
    [v9 setObjectOrNull:v85 forKey:@"secondary_funding_source_dpan_suffix"];

    long long v86 = [v7 secondaryFundingSourceFPANIdentifier];
    [v9 setObjectOrNull:v86 forKey:@"secondary_funding_source_fpan_identifier"];

    long long v87 = [v7 secondaryFundingSourceDescription];
    [v9 setObjectOrNull:v87 forKey:@"secondary_funding_source_description"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "secondaryFundingSourceType"), @"secondary_funding_source_type");
    long long v88 = [v7 requestDeviceScoreIdentifier];
    long long v89 = (void *)_SQLValueForUUID();
    [v9 setObject:v89 forKey:@"request_device_score_identifier"];

    long long v90 = [v7 sendDeviceScoreIdentifier];
    long long v91 = (void *)_SQLValueForUUID();
    [v9 setObject:v91 forKey:@"send_device_score_identifier"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "deviceScoreIdentifiersRequired"), @"device_score_identifiers_required");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "deviceScoreIdentifiersSubmitted"), @"device_score_identifiers_submitted");
    long long v92 = [v7 merchantProvidedDescription];
    [v9 setObjectOrNull:v92 forKey:@"merchant_provided_description"];

    long long v93 = [v7 merchantProvidedTitle];
    [v9 setObjectOrNull:v93 forKey:@"merchant_provided_title"];

    long long v94 = [v7 rewardsTotalAmount];
    long long v95 = PKCurrencyDecimalToStorageNumber();
    [v9 setObjectOrNull:v95 forKey:@"c"];

    long long v96 = [v7 rewardsTotalCurrencyCode];
    [v9 setObjectOrNull:v96 forKey:@"d"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "rewardsEligibilityReason"), @"e");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "cardType"), @"a");
    long long v97 = [v7 accountIdentifier];
    [v9 setObjectOrNull:v97 forKey:@"account_identifier"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "accountType"), @"account_type");
    long long v98 = [v7 lifecycleIdentifier];
    [v9 setObjectOrNull:v98 forKey:@"o"];

    v99 = [v7 authNetworkData];
    [v9 setObjectOrNull:v99 forKey:@"r"];

    v100 = [v7 clearingNetworkData];
    [v9 setObjectOrNull:v100 forKey:@"s"];

    v101 = [v7 cardIdentifier];
    [v9 setObjectOrNull:v101 forKey:@"v"];

    v102 = [v7 dpanIdentifier];
    [v9 setObjectOrNull:v102 forKey:@"dpan_identifier"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "paymentNetworkIdentifier"), @"payment_network_identifier");
    uint64_t v103 = [v7 panIdentifier];
    [v9 setObjectOrNull:v103 forKey:@"zm"];

    v104 = [v7 isMerchantTokenTransaction];
    [v9 setObjectOrNull:v104 forKey:@"is_merchant_token_transaction"];

    v105 = [v7 cardNumberSuffix];
    [v9 setObjectOrNull:v105 forKey:@"ae"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "adjustmentTypeReason"), @"w");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "associatedFeatureIdentifier"), @"afi");
    v106 = [v7 referenceIdentifier];
    [v9 setObjectOrNull:v106 forKey:@"ab"];

    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "suppressBehavior"), @"ac");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v7, "redemptionType"), @"ad");
    v107 = [v7 receiptProviderURL];
    v108 = (void *)_SQLValueForURL();
    [v9 setObjectOrNull:v108 forKey:@"receipt_provider_url"];

    v109 = [v7 receiptProviderIdentifier];
    [v9 setObjectOrNull:v109 forKey:@"receipt_provider_identifier"];

    v110 = [v7 receiptIdentifier];
    [v9 setObjectOrNull:v110 forKey:@"receipt_identifier"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "originatedByDevice"), @"n");
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isFuzzyMatched"), @"fuzzy_matched");
    v111 = [v7 issueReportIdentifier];
    [v9 setObjectOrNull:v111 forKey:@"issue_report_identifier"];

    v112 = [v7 barcodeIdentifier];
    [v9 setObjectOrNull:v112 forKey:@"barcode_identifier"];

    v113 = [v7 authenticationContext];
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v113, "paymentPINFormat"), @"payment_pin_format");
    objc_msgSend(v9, "setInteger:forKey:", objc_msgSend(v113, "requestedAuthenticationMechanisms"), @"requested_auth_mechanisms");
    v114 = [v113 nonce];
    [v9 setObjectOrNull:v114 forKey:@"nonce"];

    v115 = [v113 signingKeyMaterial];
    [v9 setObjectOrNull:v115 forKey:@"signing_key_material"];

    v116 = [v113 partialSignature];
    [v9 setObjectOrNull:v116 forKey:@"partial_signature"];

    v117 = [v7 primaryFundingSourceDescription];
    [v9 setObjectOrNull:v117 forKey:@"primary_funding_source_description"];

    v118 = [v7 nominalAmount];
    v119 = PKCurrencyDecimalToStorageNumber();

    [v9 setObjectOrNull:v119 forKey:@"nominal_amount"];
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "hasAdditionalOffers"), @"has_additional_offers");
    v120 = [v7 associatedStatementIdentifiers];
    v121 = [v120 componentsJoinedByString:@","];
    [v9 setObjectOrNull:v121 forKey:@"associated_statement_identifiers"];

    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "interestReassessment"), @"interest_reassessment");
    [v9 setInteger:0 forKey:@"update_sequence_number"];
    [v9 setBool:1 forKey:@"needs_sync_to_finance"];
    objc_msgSend(v9, "setBool:forKey:", objc_msgSend(v7, "isIssuerInstallmentTransaction"), @"iit");
    v122 = [v7 issuerInstallmentManagementURL];
    v123 = (void *)_SQLValueForURL();
    [v9 setObjectOrNull:v123 forKey:@"iimu"];

    id v124 = [v7 metadata];

    v141 = v71;
    if (v124)
    {
      v125 = [v7 metadata];
      v126 = +[NSJSONSerialization dataWithJSONObject:v125 options:0 error:0];

      id v124 = [objc_alloc((Class)NSString) initWithData:v126 encoding:4];
    }
    [v9 setObjectOrNull:v124 forKey:@"metadata"];
    sub_1004A4540((uint64_t)v146, v9, v7);
    v148.receiver = v146;
    v148.super_class = (Class)PaymentTransaction;
    id v127 = objc_msgSendSuper2(&v148, "initWithPropertyValues:inDatabase:", v9, v147);
    if (v127)
    {
      v128 = +[PaymentTransactionArchive insertTransactionArchiveForTransaction:v127 inDatabase:v147];
      v129 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v128 persistentID]);
      [v127 setValue:v129 forProperty:@"archive_pid"];

      v130 = [v7 amounts];
      sub_1004A463C(v127, v130);

      v131 = [v7 plans];
      sub_1004A46E0(v127, v131);

      v132 = [v7 fees];
      sub_1004A4784(v127, v132);

      v133 = [v7 rewards];
      v134 = [v7 rewardsInProgress];
      sub_1004A4808(v127, v133, v134);

      v135 = [v7 questions];
      sub_1004A48D0(v127, v135);

      sub_1004A4954(v127, v7);
      sub_1004A4A08(v127, v7);
      if (v113) {
        sub_1004A4ABC(v127);
      }
      v136 = [v7 awards];
      sub_1004A4B34(v127, v136);

      v137 = [v7 amountModifiers];
      sub_1004A4BD8(v127, v137);

      v138 = [v7 releasedData];
      sub_1004A4C7C(v127, v138);

      long long v61 = v147;
    }
    id v139 = v127;
  }
  else
  {
    id v139 = 0;
    long long v61 = v147;
  }

  return v139;
}

id sub_1004A4478(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)64)
  {
    NSInteger v2 = [v1 substringToIndex:32];
  }
  else
  {
    NSInteger v2 = 0;
  }

  return v2;
}

id sub_1004A44DC(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)64)
  {
    NSInteger v2 = [v1 substringFromIndex:32];
  }
  else
  {
    NSInteger v2 = 0;
  }

  return v2;
}

void sub_1004A4540(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  if (a1)
  {
    id v5 = [a3 rewards];
    id v6 = [v5 totalEligibleValueForUnit:1];
    id v7 = [v5 totalEligibleValueForUnit:2];
    if ((objc_msgSend(v6, "pk_isZeroNumber") & 1) == 0)
    {
      id v8 = PKCurrencyDecimalToStorageNumber();
      [v10 setObjectOrNull:v8 forKey:@"eligible_eligible_rewards_percent_aggregate"];
    }
    if ((objc_msgSend(v7, "pk_isZeroNumber") & 1) == 0)
    {
      id v9 = PKCurrencyDecimalToStorageNumber();
      [v10 setObjectOrNull:v9 forKey:@"eligible_rewards_cash_aggregate"];
    }
  }
}

uint64_t sub_1004A463C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v3 = [v3 count];
      id v4 = v8;
      if (v3)
      {
        id v5 = [a1 persistentID];
        id v6 = [a1 database];
        +[PaymentTransactionAmount updateWithPaymentAmounts:v8 forPaymentTransactionPID:v5 inDatabase:v6];

        id v4 = v8;
      }
    }
  }
  return _objc_release_x1(v3, v4);
}

uint64_t sub_1004A46E0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v3 = [v3 count];
      id v4 = v8;
      if (v3)
      {
        id v5 = [a1 persistentID];
        id v6 = [a1 database];
        +[TransactionCommutePlanUnit updateWithCommutePlanUnits:v8 forPaymentTransactionPID:v5 inDatabase:v6];

        id v4 = v8;
      }
    }
  }
  return _objc_release_x1(v3, v4);
}

void sub_1004A4784(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = [a1 database];
    +[PaymentTransactionFee updatePaymentTransactionFees:v3 forPaymentTransaction:a1 inDatabase:v4];
  }
}

void sub_1004A4808(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = [a1 database];
    +[PaymentTransactionReward updatePaymentTransactionRewards:v6 forPaymentTransaction:a1 inDatabase:v7];

    id v8 = [a1 database];
    +[PaymentTransactionReward updatePaymentTransactionRewardsInProgress:v5 forPaymentTransaction:a1 inDatabase:v8];
  }
}

void sub_1004A48D0(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = [a1 database];
    +[PaymentTransactionQuestion updatePaymentTransactionQuestions:v3 forPaymentTransaction:a1 inDatabase:v4];
  }
}

void sub_1004A4954(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [a1 database];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1004B6FD4;
    v5[3] = &unk_100738A00;
    id v6 = v3;
    id v7 = a1;
    sub_10000817C((uint64_t)v4, v5);
  }
}

void sub_1004A4A08(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [a1 database];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1004B72B0;
    v5[3] = &unk_100738A00;
    id v6 = v3;
    id v7 = a1;
    sub_10000817C((uint64_t)v4, v5);
  }
}

void sub_1004A4ABC(void *a1)
{
  if (a1)
  {
    id v3 = [a1 database];
    id v2 = +[PaymentTransactionAuthentication createIfNotExistInDatabase:withPaymentTransactionPID:](PaymentTransactionAuthentication, "createIfNotExistInDatabase:withPaymentTransactionPID:", v3, [a1 persistentID]);
  }
}

uint64_t sub_1004A4B34(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v3 = [v3 count];
      id v4 = v8;
      if (v3)
      {
        id v5 = [a1 persistentID];
        id v6 = [a1 database];
        +[PaymentTransactionAward updateWithPaymentTransactionAwards:v8 forPaymentTransactionPID:v5 inDatabase:v6];

        id v4 = v8;
      }
    }
  }
  return _objc_release_x1(v3, v4);
}

uint64_t sub_1004A4BD8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v8 = v3;
      id v3 = [v3 count];
      id v4 = v8;
      if (v3)
      {
        id v5 = [a1 persistentID];
        id v6 = [a1 database];
        +[PaymentTransactionAmountModifier updateWithPaymentTransactionAmountModifiers:v8 forPaymentTransactionPID:v5 inDatabase:v6];

        id v4 = v8;
      }
    }
  }
  return _objc_release_x1(v3, v4);
}

void sub_1004A4C7C(void *a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = a2;
    id v4 = [a1 persistentID];
    id v5 = [a1 database];
    +[TransactionReleasedData insertReleasedData:v3 forPaymentTransactionPID:v4 inDatabase:v5];
  }
}

id sub_1004A5C4C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  if (v2)
  {
    uint64_t v4 = v3;
    id v5 = objc_alloc_init((Class)NSMutableArray);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v6 = v2;
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
      do
      {
        for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = sub_1004A6D98(v4, *(void **)(*((void *)&v14 + 1) + 8 * i));
          objc_msgSend(v5, "addObject:", v11, (void)v14);
        }
        id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v8);
    }

    unsigned int v12 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v5];
  }
  else
  {
    unsigned int v12 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v12;
}

id sub_1004A5DD8(uint64_t a1, uint64_t a2)
{
  self;
  switch(a2)
  {
    case 0:
      uint64_t v4 = +[SQLiteBooleanPredicate truePredicate];
      goto LABEL_9;
    case 2:
      uint64_t v3 = &__kCFBooleanFalse;
      goto LABEL_7;
    case 1:
      uint64_t v3 = &__kCFBooleanTrue;
LABEL_7:
      uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"has_notification_service_data" equalToValue:v3];
      goto LABEL_9;
  }
  uint64_t v4 = 0;
LABEL_9:
  return v4;
}

id sub_1004A5E78(uint64_t a1, int a2)
{
  self;
  if (a2)
  {
    uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"ac" equalToValue:&off_10078BAA8];
  }
  else
  {
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"ac" equalToValue:&off_10078BB38];
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"ac" equalToValue:&off_10078BB50];
    id v6 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"ac"];
    v9[0] = v4;
    v9[1] = v6;
    void v9[2] = v5;
    id v7 = +[NSArray arrayWithObjects:v9 count:3];
    uint64_t v3 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v7];
  }
  return v3;
}

void sub_1004A5FC4(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (*(void *)(a1 + 48) <= a3)
  {
    uint64_t v9 = [(SQLiteEntity *)[PaymentTransaction alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
    id v6 = [(PaymentTransaction *)v9 identifier];
    unsigned int v7 = [(PaymentTransaction *)v9 deleteFromDatabase];
    char v8 = v7;
    if (v7)
    {
      +[ValueAddedServiceTransaction deleteEntitiesForPaymentTransaction:v9 inDatabase:*(void *)(a1 + 32)];
      [*(id *)(a1 + 40) addObject:v6];
    }
    *a4 = v8 ^ 1;
  }
}

id sub_1004A6128(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithLongLong:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"source_pid" equalToValue:v3];

  return v4;
}

void sub_1004A696C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
}

void sub_1004A69DC(void *a1, uint64_t a2, uint64_t a3)
{
  objc_storeStrong((id *)(*(void *)(a1[4] + 8) + 40), *(id *)a3);
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a3 + 8));
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a3 + 16));
  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), *(id *)(a3 + 24));
  id v5 = *(void **)(a3 + 32);
  id v6 = (id *)(*(void *)(a1[8] + 8) + 40);
  objc_storeStrong(v6, v5);
}

id sub_1004A6A70(void *a1)
{
  if (a1)
  {
    id v1 = [a1 serviceIdentifier];
    id v2 = +[PKPaymentTransaction recordTypesAndNamesForCodingType:2 serviceIdentifier:v1];
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1004A6ADC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = [v4 database];
  +[CloudStoreRecord removeCloudStoreRecordsWithName:v5 recordType:v6 inDatabase:v7];
}

id sub_1004A6B68(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"maps_merchant_pid" equalToValue:v2];

  return v3;
}

id sub_1004A6BD0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"u" equalToValue:v2];

  return v3;
}

id sub_1004A6CB4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"pid" equalToValue:v2];

  return v3;
}

id sub_1004A6D98(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2) {
    +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_source.identifier" equalToValue:v2];
  }
  else {
  uint64_t v3 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v3;
}

id sub_1004A6F64(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"account_identifier" equalToValue:v2];

  return v3;
}

id sub_1004A6FCC(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithInteger:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"account_type" equalToValue:v3];

  return v4;
}

id sub_1004A7044(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"service_identifier" equalToValue:v2];

  return v3;
}

id sub_1004A7254(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"identifier" equalToValue:v2];

  return v3;
}

id sub_1004A7338(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"ab" equalToValue:v2];

  return v3;
}

id sub_1004A76C0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"t" values:v2];

  return v3;
}

id sub_1004A7728(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v3 = (void *)_SQLValueForDate();
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_date" greaterThanOrEqualToValue:v3];
  }
  else
  {
    uint64_t v4 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v4;
}

id sub_1004A77C8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v3 = (void *)_SQLValueForDate();
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_date" lessThanOrEqualToValue:v3];
  }
  else
  {
    uint64_t v4 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v4;
}

id sub_1004A7AFC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"maps_merchant.identifier" values:v2];

  return v3;
}

id sub_1004A7DF8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteContainsPredicate containsPredicateWithProperty:@"plantains.a" values:v2];

  return v3;
}

id sub_1004A7EEC(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithInteger:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_type" equalToValue:v3];

  return v4;
}

void sub_1004A81C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004A81E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  switch(a2)
  {
    case 0:
      uint64_t v9 = +[SQLiteBooleanPredicate truePredicate];
      goto LABEL_9;
    case 2:
      uint64_t v4 = sub_1004A5DD8(v3, 2);
      id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_type" notEqualToValue:&off_10078BB08];
      id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_type" notEqualToValue:&off_10078BB20];
      v11[0] = v4;
      v11[1] = v5;
      v11[2] = v6;
      id v7 = +[NSArray arrayWithObjects:v11 count:3];
      uint64_t v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];
      goto LABEL_7;
    case 1:
      uint64_t v4 = sub_1004A5DD8(v3, 1);
      id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_type" equalToValue:&off_10078BB08];
      id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_type" equalToValue:&off_10078BB20];
      v12[0] = v4;
      v12[1] = v5;
      v12[2] = v6;
      id v7 = +[NSArray arrayWithObjects:v12 count:3];
      uint64_t v8 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v7];
LABEL_7:
      uint64_t v9 = (void *)v8;

      goto LABEL_9;
  }
  uint64_t v9 = 0;
LABEL_9:
  return v9;
}

void sub_1004A83C8(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  id v6 = [(SQLiteEntity *)[PaymentTransaction alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) == 0;
}

id sub_1004A85D4(uint64_t a1, uint64_t a2, char a3)
{
  self;
  switch(a2)
  {
    case 0:
      uint64_t v9 = +[SQLiteBooleanPredicate truePredicate];
      goto LABEL_13;
    case 2:
      id v5 = objc_alloc_init((Class)NSMutableArray);
      id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_source" equalToValue:&off_10078BAD8];
      [v5 addObject:v10];

      if ((a3 & 1) == 0)
      {
        uint64_t v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"a" equalToValue:&off_10078BAD8];
        [v5 addObject:v11];
      }
      uint64_t v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];
      goto LABEL_11;
    case 1:
      id v5 = objc_alloc_init((Class)NSMutableArray);
      id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_source" notEqualToValue:&off_10078C868];
      [v5 addObject:v6];

      if ((a3 & 1) == 0)
      {
        uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"a" notEqualToValue:&off_10078C868];
        [v5 addObject:v7];
      }
      uint64_t v8 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v5];
LABEL_11:
      uint64_t v9 = (void *)v8;

      goto LABEL_13;
  }
  uint64_t v9 = 0;
LABEL_13:
  return v9;
}

id sub_1004A8770(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[NSMutableArray array];
  uint64_t v4 = sub_1004A4478(v2);
  id v5 = sub_1004A44DC(v2);
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_hash" equalToValue:v2];

  [v3 addObject:v6];
  if (v4 && v5)
  {
    uint64_t v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_hash_component_1" notEqualToValue:&off_10078BB08];
    uint64_t v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_hash_component_1" equalToValue:v4];
    uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_hash_component_2" equalToValue:v5];
    v17[0] = v8;
    v17[1] = v9;
    id v10 = +[NSArray arrayWithObjects:v17 count:2];
    uint64_t v11 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v10];

    v16[0] = v7;
    v16[1] = v11;
    unsigned int v12 = +[NSArray arrayWithObjects:v16 count:2];
    uint64_t v13 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v12];
    [v3 addObject:v13];
  }
  long long v14 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v3];

  return v14;
}

id sub_1004A8C0C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  uint64_t v4 = sub_1004A8FD8(v3, v2, 0, 0);

  return v4;
}

void *sub_1004A8FD8(uint64_t a1, void *a2, void **a3, void **a4)
{
  BOOL v6 = a4 != 0;
  id v7 = a2;
  self;
  uint64_t v9 = (id *)sub_1004B76BC([PaymentTransactionDeserializationContext alloc], (a3 != 0) | (2 * v6));
  id v10 = sub_1004B95BC(v9, v7);
  uint64_t v11 = [v7 database];
  sub_1004B7B54((uint64_t)v9, v11);
  if (a3)
  {
    unsigned int v12 = sub_1004B96C4(v9, v10);
    uint64_t v13 = *a3;
    *a3 = v12;
  }
  if (a4)
  {
    long long v14 = sub_1004B9860(v9, v10);
    long long v15 = *a4;
    *a4 = v14;
  }

  return v10;
}

id sub_1004A99B0(double a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  self;
  if (v4)
  {
    id v5 = +[NSMutableArray array];
    BOOL v6 = [v4 dateByAddingTimeInterval:a1];
    id v7 = [v4 dateByAddingTimeInterval:-a1];
    uint64_t v8 = (void *)_SQLValueForDate();
    uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_date" lessThanOrEqualToValue:v8];
    [v5 addObject:v9];

    id v10 = (void *)_SQLValueForDate();
    uint64_t v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_date" greaterThanOrEqualToValue:v10];
    [v5 addObject:v11];

    unsigned int v12 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];
  }
  else
  {
    unsigned int v12 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v12;
}

id sub_1004A9C78(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithInteger:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_status" equalToValue:v3];

  return v4;
}

id sub_1004A9CF0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"merchant_name" equalToValue:v2];

  return v3;
}

PaymentTransaction *sub_1004A9D58(double a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = self;
  if (v11 && (long long v15 = (void *)v14, [v12 count]))
  {
    long long v16 = +[NSMutableArray array];
    long long v17 = sub_1004A5C4C((uint64_t)v15, v12);
    [v16 addObject:v17];

    id v18 = sub_1004A99B0(a1, (uint64_t)v15, v11);
    [v16 addObject:v18];

    if (v13) {
      [v16 addObjectsFromArray:v13];
    }
    id v19 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v16];
    id v20 = [v15 queryWithDatabase:v10 predicate:v19];
    CFStringRef v34 = @"transaction_date";
    id v21 = +[NSArray arrayWithObjects:&v34 count:1];
    uint64_t v30 = 0;
    long long v31 = &v30;
    uint64_t v32 = 0x2020000000;
    uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
    v29[0] = 0;
    v29[1] = v29;
    void v29[2] = 0x2020000000;
    v29[3] = 0;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1004B99FC;
    v25[3] = &unk_10074FD20;
    id v26 = v11;
    unsigned int v27 = &v30;
    uint64_t v28 = v29;
    [v20 enumeratePersistentIDsAndProperties:v21 usingBlock:v25];
    if (v31[3] == 0x7FFFFFFFFFFFFFFFLL)
    {
      long long v22 = 0;
    }
    else
    {
      id v23 = [PaymentTransaction alloc];
      long long v22 = [(SQLiteEntity *)v23 initWithPersistentID:v31[3] inDatabase:v10];
    }

    _Block_object_dispose(v29, 8);
    _Block_object_dispose(&v30, 8);
  }
  else
  {
    long long v22 = 0;
  }

  return v22;
}

void sub_1004AA010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_1004AA1AC(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithInteger:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"adjustment_type" equalToValue:v3];

  return v4;
}

id sub_1004AA224(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a6;
  id v11 = a5;
  id v12 = a2;
  uint64_t v13 = self;
  id v14 = objc_alloc((Class)NSArray);
  uint64_t v15 = sub_1004A5C4C(v13, v12);

  long long v16 = sub_1004A85D4(v13, a3, 0);
  long long v17 = sub_1004A81E0(v13, a4);
  id v18 = sub_1004A7728(v13, v11);

  id v19 = sub_1004A77C8(v13, v10);

  id v20 = sub_1004A5E78(v13, 0);
  id v21 = objc_msgSend(v14, "initWithObjects:", v15, v16, v17, v18, v19, v20, 0);

  long long v22 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v21];

  return v22;
}

id sub_1004AA920(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v3 = (void *)_SQLValueForDate();
    id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_status_changed_date" greaterThanOrEqualToValue:v3];
  }
  else
  {
    id v4 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v4;
}

id sub_1004AA9C0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v3 = (void *)_SQLValueForDate();
    id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_status_changed_date" lessThanOrEqualToValue:v3];
  }
  else
  {
    id v4 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v4;
}

id sub_1004AAF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = self;
  BOOL v6 = sub_1004A85D4(v5, a2, 0);
  id v12 = v6;
  id v7 = sub_1004A81E0(v5, a3);
  uint64_t v13 = v7;
  uint64_t v8 = sub_1004A5E78(v5, 0);
  id v14 = v8;
  uint64_t v9 = +[NSArray arrayWithObjects:&v12 count:3];

  id v10 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:](SQLiteCompoundPredicate, "predicateMatchingAllPredicates:", v9, v12, v13);

  return v10;
}

id sub_1004AB210(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  if ([v2 count])
  {
    id v4 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(v2, "count"));
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = v2;
    id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = sub_1004A7EEC(v3, (uint64_t)objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "integerValue", (void)v13));
          [v4 addObject:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }

    id v11 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v4];
  }
  else
  {
    id v11 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v11;
}

id sub_1004AB620(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = sub_1004B919C(v3, *(void **)(*((void *)&v13 + 1) + 8 * i));
        objc_msgSend(v4, "addObject:", v10, (void)v13);
      }
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);
  }

  if ([v4 count]) {
    +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v4];
  }
  else {
  id v11 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v11;
}

id sub_1004ABA28(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithInteger:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"peer_payment_type" equalToValue:v3];

  return v4;
}

id sub_1004ABBF4(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"plantains.a" equalToValue:v3];

  return v4;
}

id sub_1004ABDC0(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"maps_merchant.identifier" equalToValue:v3];

  return v4;
}

id sub_1004AC21C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  if ([v2 hasMapsMatch] && (objc_msgSend(v2, "useRawMerchantData") & 1) == 0)
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    id v12 = [v2 mapsMerchant];
    id v13 = [v12 identifier];

    long long v14 = [v2 mapsBrand];
    id v15 = [v14 identifier];

    if (v13)
    {
      long long v16 = sub_1004ABDC0(v3, (uint64_t)v13);
      [v5 addObject:v16];
    }
    if (v15)
    {
      id v10 = sub_1004ABBF4(v3, (uint64_t)v15);
      [v5 addObject:v10];
      goto LABEL_11;
    }
  }
  else
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    id v6 = [v2 rawName];

    if (v6)
    {
      id v7 = [v2 rawName];
      uint64_t v8 = sub_1004B8F1C(v3, v7);
      [v5 addObject:v8];
    }
    uint64_t v9 = [v2 name];

    if (v9)
    {
      id v10 = [v2 name];
      id v11 = sub_1004A9CF0(v3, v10);
      [v5 addObject:v11];

LABEL_11:
    }
  }
  if ([v5 count])
  {
    long long v17 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v5];
    [v4 addObject:v17];
  }
  id v18 = &dispatch_get_global_queue_ptr;
  if ([v2 hasMapsMatch] && (objc_msgSend(v2, "useRawMerchantData") & 1) == 0)
  {
    id v42 = sub_1004B2390();
    v46[0] = v42;
    id v41 = [v2 mapsBrand];
    id v20 = [v41 name];
    id v21 = sub_1004B9134(v3, v20);
    v46[1] = v21;
    long long v22 = [v2 mapsMerchant];
    id v23 = [v22 name];
    id v24 = sub_1004B90CC(v3, v23);
    v46[2] = v24;
    uint64_t v25 = +[NSArray arrayWithObjects:v46 count:3];
    id v19 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v25];

    id v18 = &dispatch_get_global_queue_ptr;
  }
  else
  {
    id v19 = +[SQLiteBooleanPredicate truePredicate];
  }
  id v26 = [v2 rawCANL];

  if (v26)
  {
    unsigned int v27 = [v2 rawCANL];
    uint64_t v28 = sub_1004B8F84(v3, v27);
    v45[0] = v28;
    v45[1] = v19;
    id v29 = [v18[472] arrayWithObjects:v45 count:2];
    uint64_t v30 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v29];
    [v4 addObject:v30];
  }
  if ((uint64_t)[v2 adamIdentifier] >= 1)
  {
    long long v31 = sub_1004B8FEC(v3, (uint64_t)[v2 adamIdentifier]);
    v44[0] = v31;
    v44[1] = v19;
    uint64_t v32 = [v18[472] arrayWithObjects:v44 count:2];
    uint64_t v33 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v32];
    [v4 addObject:v33];
  }
  CFStringRef v34 = [v2 webMerchantIdentifier];

  if (v34)
  {
    id v35 = [v2 webMerchantIdentifier];
    id v36 = sub_1004B9064(v3, v35);
    v43[0] = v36;
    v43[1] = v19;
    long long v37 = [v18[472] arrayWithObjects:v43 count:2];
    long long v38 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v37];
    [v4 addObject:v38];
  }
  if ([v4 count])
  {
    long long v39 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v4];
  }
  else
  {
    long long v39 = 0;
  }

  return v39;
}

uint64_t sub_1004ACD28(void *a1, sqlite3_stmt *a2)
{
  id v4 = (void *)a1[4];
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, 1, v5);
    int v6 = 2;
  }
  else
  {
    int v6 = 1;
  }
  id v7 = (void *)a1[5];
  if (v7)
  {
    [v7 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, v6++, v8);
  }
  uint64_t v9 = (void *)a1[6];
  if (v9) {
    sqlite3_bind_int64(a2, v6, (sqlite3_int64)[v9 persistentID]);
  }
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v11 = (void *)a1[7];
      id v12 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      [v11 addObject:v12];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_1004AD058(void *a1, sqlite3_stmt *a2)
{
  id v4 = (void *)a1[4];
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, 1, v5);
    int v6 = 2;
  }
  else
  {
    int v6 = 1;
  }
  id v7 = (void *)a1[5];
  if (v7)
  {
    [v7 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a2, v6++, v8);
  }
  uint64_t v9 = (void *)a1[6];
  if (v9) {
    sqlite3_bind_int64(a2, v6++, (sqlite3_int64)[v9 persistentID]);
  }
  sqlite3_bind_int64(a2, v6, a1[8]);
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v11 = (void *)a1[7];
      id v12 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      [v11 addObject:v12];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

id sub_1004AD3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = self;
  uint64_t v4 = v3;
  if (a2)
  {
    double v5 = sub_1004B9494(v3, a2);
    int v6 = sub_1004B936C(v4, a2);
    v24[0] = v6;
    id v7 = sub_1004B9494(v4, 0);
    v24[1] = v7;
    double v8 = +[NSArray arrayWithObjects:v24 count:2];
    uint64_t v9 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v8];

    id v10 = sub_1004B92F4(v4, a2);
    v23[0] = v10;
    id v11 = sub_1004B936C(v4, 0);
    v23[1] = v11;
    id v12 = sub_1004B9494(v4, 0);
    v23[2] = v12;
    id v13 = +[NSArray arrayWithObjects:v23 count:3];
    long long v14 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v13];

    v22[0] = v5;
    v22[1] = v9;
    v22[2] = v14;
    id v15 = +[NSArray arrayWithObjects:v22 count:3];
    uint64_t v16 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v15];
  }
  else
  {
    double v5 = sub_1004B9494(v3, 0);
    id v19 = v5;
    uint64_t v9 = sub_1004B936C(v4, 0);
    id v20 = v9;
    long long v14 = sub_1004B92F4(v4, 0);
    id v21 = v14;
    id v15 = +[NSArray arrayWithObjects:&v19 count:3];
    uint64_t v16 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:](SQLiteCompoundPredicate, "predicateMatchingAllPredicates:", v15, v19, v20);
  }
  long long v17 = (void *)v16;

  return v17;
}

uint64_t sub_1004ADC24(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v10 = *a4;
  id v6 = +[NSNull null];
  id v7 = v10;
  if (v10 != v6)
  {
    double v8 = v6;
    id v11 = *a4;

    uint64_t result = (uint64_t)v11;
    if (!v11) {
      return result;
    }
    id v6 = [*(id *)(a1 + 32) addObject:v11];
    id v7 = v11;
  }
  return _objc_release_x1(v6, v7);
}

id sub_1004ADF08(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v3 = (void *)_SQLValueForDate();
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"grapes.d" greaterThanOrEqualToValue:v3];
  }
  else
  {
    uint64_t v4 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v4;
}

id sub_1004ADFA8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v3 = (void *)_SQLValueForDate();
    uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"grapes.d" lessThanOrEqualToValue:v3];
  }
  else
  {
    uint64_t v4 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v4;
}

id sub_1004AE048(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"ad" equalToValue:v3];

  return v4;
}

id sub_1004AE0C0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = [self predicateForRequest:v4];
  CFStringRef v15 = @"transaction_date";
  id v7 = +[NSArray arrayWithObjects:&v15 count:1];
  id v8 = [v4 dateOrder];
  uint64_t v9 = SQLiteOrderAscending;
  if (v8 != (id)-1) {
    uint64_t v9 = &SQLiteOrderDescending;
  }
  long long v14 = *v9;
  id v10 = +[NSArray arrayWithObjects:&v14 count:1];
  id v11 = [v4 limit];

  id v12 = +[SQLiteEntity queryWithDatabase:v5 predicate:v6 orderingProperties:v7 orderingDirections:v10 limit:v11];

  return v12;
}

void sub_1004AE2FC(uint64_t a1, void *a2, void **a3, void *a4, void *a5, void *a6)
{
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  id v13 = self;
  long long v14 = v13;
  if (a2) {
    *a2 = [v13 countInDatabase:v12 predicate:v11];
  }
  if (a3 && v10)
  {
    CFStringRef v15 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_status" notEqualToValue:&off_10078BB08];
    v25[0] = v11;
    v25[1] = v15;
    uint64_t v16 = +[NSArray arrayWithObjects:v25 count:2];
    long long v17 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v16];

    id v18 = [v14 sumForProperty:@"amount" predicate:v17 database:v12];
    id v19 = v18;
    if (v18)
    {
      id v20 = v18;
    }
    else
    {
      id v20 = +[NSDecimalNumber zero];
    }
    id v21 = v20;

    long long v22 = PKCurrencyStorageNumberToCurrencyDecimal();
    uint64_t v23 = PKCurrencyAmountMake();
    id v24 = *a3;
    *a3 = (void *)v23;
  }
}

id sub_1004AF5A4(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_source" equalToValue:v3];
  v10[0] = v4;
  id v5 = +[NSNumber numberWithUnsignedInteger:a2];
  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"a" equalToValue:v5];
  v10[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v10 count:2];
  id v8 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v7];

  return v8;
}

id sub_1004AF6EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"world_region_left.identifier" equalToValue:v2];

  return v3;
}

id sub_1004AF754(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"currency_code" equalToValue:v2];

  return v3;
}

id sub_1004AF7BC(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  id v5 = PKCurrencyDecimalToStorageNumber();
  id v6 = [objc_alloc((Class)NSDecimalNumber) initWithInt:0xFFFFFFFFLL];
  id v7 = [v4 decimalNumberByMultiplyingBy:v6];

  id v8 = PKCurrencyDecimalToStorageNumber();

  if (a3 == 1)
  {
    uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"amount" greaterThanValue:v8];
    v17[0] = v9;
    id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"amount" lessThanValue:v5];
    v17[1] = v10;
    id v12 = +[NSArray arrayWithObjects:v17 count:2];
    uint64_t v13 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v12];
  }
  else
  {
    if (a3 == -1)
    {
      uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"amount" greaterThanValue:v5];
      v18[0] = v9;
      id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"amount" lessThanValue:v8];
      v18[1] = v10;
      id v11 = v18;
    }
    else
    {
      uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"amount" equalToValue:v5];
      v16[0] = v9;
      id v10 = +[SQLiteComparisonPredicate predicateWithProperty:@"amount" equalToValue:v8];
      v16[1] = v10;
      id v11 = v16;
    }
    id v12 = +[NSArray arrayWithObjects:v11 count:2];
    uint64_t v13 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v12];
  }
  long long v14 = (void *)v13;

  return v14;
}

id sub_1004AFA10(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = [v2 localizedTitle];

  +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v2 type]);
  if (v3) {
    id v4 = {;
  }
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_transaction_tag.type" equalToValue:v4];
    id v6 = objc_msgSend(v2, "localizedTitle", v5);
    id v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_transaction_tag.localized_title" equalToValue:v6];
    v14[1] = v7;
    id v8 = [v2 localeIdentifier];
    uint64_t v9 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_transaction_tag.locale_identifier" equalToValue:v8];
    _OWORD v14[2] = v9;
    id v10 = +[NSArray arrayWithObjects:v14 count:3];
    id v11 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v10];
  }
  else {
    id v12 = {;
  }
    id v11 = +[SQLiteComparisonPredicate predicateWithProperty:@"payment_transaction_tag.type" equalToValue:v12];
  }
  return v11;
}

id sub_1004AFC1C(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithInteger:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"top_up_type" equalToValue:v3];

  return v4;
}

id sub_1004AFC94(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"ca" equalToValue:v3];

  return v4;
}

id sub_1004AFD0C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  if (a3 == 1)
  {
    CFStringRef v5 = @"eligible_eligible_rewards_percent_aggregate";
    goto LABEL_5;
  }
  if (a3 == 2)
  {
    CFStringRef v5 = @"eligible_rewards_cash_aggregate";
LABEL_5:
    id v6 = +[NSNumber numberWithLongLong:PKCurrencyDecimalToStorageInteger()];
    id v7 = +[SQLiteComparisonPredicate predicateWithProperty:v5 equalToValue:v6];

    goto LABEL_7;
  }
  id v7 = +[SQLiteBooleanPredicate truePredicate];
LABEL_7:

  return v7;
}

id sub_1004AFDE4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"zm" equalToValue:v2];

  return v3;
}

id sub_1004AFE4C(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithInteger:a2];
  id v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"zucchini.m" equalToValue:v3];

  return v4;
}

id sub_1004B0314(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"o" equalToValue:v2];

  return v3;
}

id sub_1004B04E4()
{
  self;
  id v0 = +[NSDate date];
  id v1 = (void *)_SQLValueForDate();
  id v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"mangos.c" greaterThanOrEqualToValue:v1];

  uint64_t v3 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"mangos.c"];
  v11[0] = v2;
  v11[1] = v3;
  id v4 = +[NSArray arrayWithObjects:v11 count:2];
  CFStringRef v5 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v4];

  id v6 = +[SQLiteComparisonPredicate predicateWithProperty:@"mangos.d" equalToValue:&__kCFBooleanFalse];
  v10[0] = v5;
  v10[1] = v6;
  id v7 = +[NSArray arrayWithObjects:v10 count:2];
  id v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  return v8;
}

BOOL sub_1004B0670(id a1, PKPaymentTransaction *a2, BOOL *a3)
{
  uint64_t v3 = [(PKPaymentTransaction *)a2 unansweredQuestions];
  BOOL v4 = [v3 count] != 0;

  return v4;
}

id sub_1004B0784(uint64_t a1, int a2)
{
  uint64_t v2 = self;
  uint64_t v3 = sub_1004A7EEC(v2, 0);
  v46[0] = v3;
  BOOL v4 = sub_1004A7EEC(v2, 1);
  v46[1] = v4;
  CFStringRef v5 = +[NSArray arrayWithObjects:v46 count:2];
  long long v38 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v5];

  id v6 = sub_1004AF5A4(v2, 1);
  v45[0] = v6;
  id v7 = sub_1004AF5A4(v2, 5);
  v45[1] = v7;
  id v8 = +[NSArray arrayWithObjects:v45 count:2];
  long long v37 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v8];

  self;
  uint64_t v9 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"maps_merchant_pid"];
  v44[0] = v9;
  self;
  id v10 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"location_latitude"];
  v44[1] = v10;
  id v11 = sub_1004B0F64();
  void v44[2] = v11;
  id v12 = +[NSArray arrayWithObjects:v44 count:3];
  id v36 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v12];

  p_superclass = &OBJC_METACLASS___PaymentTransactionTag.superclass;
  long long v14 = sub_1004A6FCC(v2, 1);
  v43[0] = v14;
  CFStringRef v15 = sub_1004A6FCC(v2, 2);
  v43[1] = v15;
  uint64_t v16 = +[NSArray arrayWithObjects:v43 count:2];
  id v35 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v16];

  self;
  +[SQLiteNullPredicate isNullPredicateWithProperty:@"world_region_mapping_left.world_region_pid"];
  if (a2) {
    CFStringRef v34 = {;
  }
    v42[0] = v34;
    uint64_t v32 = +[SQLiteComparisonPredicate predicateWithProperty:@"world_region_mapping_left.match_try_count" lessThanValue:&off_10078BAC0];
    v41[0] = v32;
    long long v31 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"world_region_mapping_left.match_try_count"];
    v41[1] = v31;
    uint64_t v30 = +[NSArray arrayWithObjects:v41 count:2];
    id v29 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v30];
    v42[1] = v29;
    long long v17 = +[NSDate dateWithTimeIntervalSinceNow:-82800.0];
    id v18 = (void *)_SQLValueForDate();
    id v19 = +[SQLiteComparisonPredicate predicateWithProperty:@"world_region_mapping_left.last_modified_date" lessThanValue:v18];
    v40[0] = v19;
    id v20 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"world_region_mapping_left.last_modified_date"];
    v40[1] = v20;
    id v21 = +[NSArray arrayWithObjects:v40 count:2];
    long long v22 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v21];
    v42[2] = v22;
    uint64_t v23 = +[NSArray arrayWithObjects:v42 count:3];
    id v24 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v23];

    p_superclass = (__objc2_class **)(&OBJC_METACLASS___PaymentTransactionTag + 8);
  }
  else {
    id v24 = {;
  }
  }
  v39[0] = v38;
  v39[1] = v37;
  v39[2] = v36;
  v39[3] = v24;
  void v39[4] = v35;
  uint64_t v25 = sub_1004B1054();
  v39[5] = v25;
  id v26 = +[NSArray arrayWithObjects:v39 count:6];
  unsigned int v27 = [p_superclass + 69 predicateMatchingAllPredicates:v26];

  return v27;
}

void sub_1004B0ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = +[NSNumber numberWithLongLong:a2];
  BOOL v4 = +[PaymentTransaction anyInDatabase:v3 withPID:v5];
  [v2 addObject:v4];
}

id sub_1004B0F64()
{
  self;
  id v0 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"j"];
  v5[0] = v0;
  id v1 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"i"];
  v5[1] = v1;
  uint64_t v2 = +[NSArray arrayWithObjects:v5 count:2];
  uint64_t v3 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v2];

  return v3;
}

id sub_1004B1054()
{
  self;
  id v0 = +[SQLiteComparisonPredicate predicateWithProperty:@"processed_for_location" equalToValue:&__kCFBooleanTrue];
  id v1 = +[SQLiteComparisonPredicate predicateWithProperty:@"processed_for_stations", &__kCFBooleanTrue, v0 equalToValue];
  v6[1] = v1;
  uint64_t v2 = +[SQLiteComparisonPredicate predicateWithProperty:@"processed_for_merchant_cleanup" equalToValue:&__kCFBooleanTrue];
  void v6[2] = v2;
  uint64_t v3 = +[NSArray arrayWithObjects:v6 count:3];
  BOOL v4 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v3];

  return v4;
}

id sub_1004B1598(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if ([v2 length])
  {
    uint64_t v3 = +[NSString stringWithFormat:@"%@%%", v2];
    BOOL v4 = +[SQLiteStringLikePredicate predicateWithProperty:@"world_region_localized_content.name" matchingPattern:v3];

    id v5 = +[NSString stringWithFormat:@"%% %@%%", v2];
    id v6 = +[SQLiteStringLikePredicate predicateWithProperty:@"world_region_localized_content.name" matchingPattern:v5];

    v10[0] = v4;
    v10[1] = v6;
    id v7 = +[NSArray arrayWithObjects:v10 count:2];
    id v8 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v7];
  }
  else
  {
    id v8 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v8;
}

id sub_1004B1718(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"world_region_localized_content.locale_identifier" equalToValue:v2];

  return v3;
}

id sub_1004B1780(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithUnsignedInteger:a2];
  BOOL v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"world_region.type" equalToValue:v3];

  return v4;
}

id *sub_1004B17F8(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id sub_1004B1948(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithBool:a2];
  BOOL v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"n" equalToValue:v3];

  return v4;
}

id sub_1004B1AF4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v3 = (void *)_SQLValueForDate();
    BOOL v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"transaction_date" greaterThanValue:v3];
  }
  else
  {
    BOOL v4 = +[SQLiteBooleanPredicate truePredicate];
  }

  return v4;
}

id sub_1004B1BF4()
{
  self;
  id v0 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"receipt_provider_identifier"];
  v5[0] = v0;
  id v1 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"receipt_identifier"];
  v5[1] = v1;
  id v2 = +[NSArray arrayWithObjects:v5 count:2];

  uint64_t v3 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v2];

  return v3;
}

void sub_1004B1E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = *(void **)a4;
  id v7 = +[NSNull null];
  if ([v6 isEqual:v7]) {
    id v8 = 0;
  }
  else {
    id v8 = *(void **)a4;
  }
  id v14 = v8;

  uint64_t v9 = *(void **)(a4 + 8);
  id v10 = +[NSNull null];
  if ([v9 isEqual:v10]) {
    id v11 = 0;
  }
  else {
    id v11 = *(void **)(a4 + 8);
  }
  id v12 = v11;

  uint64_t v13 = PKGenerateTransactionReceiptUniqueID();
  [*(id *)(a1 + 32) addObject:v13];
}

id sub_1004B2318(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithBool:a2];
  BOOL v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"requires_merchant_reprocessing" equalToValue:v3];

  return v4;
}

id sub_1004B2390()
{
  self;
  id v0 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"maps_merchant_pid"];
  v5[0] = v0;
  id v1 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"u"];
  v5[1] = v1;
  id v2 = +[NSArray arrayWithObjects:v5 count:2];
  uint64_t v3 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v2];

  return v3;
}

id sub_1004B2480(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"last_merchant_reprocessing_date"];
  BOOL v4 = (void *)_SQLValueForDate();

  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"last_merchant_reprocessing_date" lessThanOrEqualToValue:v4];

  v9[0] = v3;
  v9[1] = v5;
  id v6 = +[NSArray arrayWithObjects:v9 count:2];
  id v7 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v6];

  return v7;
}

void sub_1004B272C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v42 = a2;
  id v44 = a3;
  id v8 = a5;
  uint64_t v9 = self;
  if (v8)
  {
    id v10 = (id *)v9;
    id v43 = v8;
    uint64_t v63 = 0;
    id v64 = &v63;
    uint64_t v65 = 0x2020000000;
    uint64_t v66 = a4;
    uint64_t v59 = 0;
    long long v60 = &v59;
    uint64_t v61 = 0x2020000000;
    char v62 = 1;
    id v11 = objc_alloc_init((Class)NSMutableArray);
    id v12 = objc_alloc_init((Class)NSMutableArray);
    id v37 = objc_alloc_init((Class)NSMutableArray);
    id v13 = objc_alloc_init((Class)NSMutableArray);
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    id v14 = (id *)v42;
    id v15 = [v14 countByEnumeratingWithState:&v55 objects:v70 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v56;
      do
      {
        for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v56 != v16) {
            objc_enumerationMutation(v14);
          }
          id v18 = sub_1004A6F64((uint64_t)v10, *(void **)(*((void *)&v55 + 1) + 8 * i));
          [v13 addObject:v18];
        }
        id v15 = [v14 countByEnumeratingWithState:&v55 objects:v70 count:16];
      }
      while (v15);
    }

    id v19 = objc_alloc_init((Class)NSMutableArray);
    id v20 = +[NSNumber numberWithLongLong:v64[3]];
    id v21 = sub_1004B2CBC((uint64_t)v10, v20);
    [v19 addObject:v21];

    if ([v13 count])
    {
      long long v22 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v13];
      [v19 addObject:v22];
    }
    uint64_t v23 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v19];
    CFStringRef v69 = @"pid";
    id v24 = +[NSArray arrayWithObjects:&v69 count:1];
    CFStringRef v68 = @"ASC";
    uint64_t v25 = +[NSArray arrayWithObjects:&v68 count:1];
    id v41 = [v10 queryWithDatabase:v44 predicate:v23 orderingProperties:v24 orderingDirections:v25 limit:100];

    CFStringRef v67 = @"identifier";
    id v26 = +[NSArray arrayWithObjects:&v67 count:1];
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_1004B2D24;
    v49[3] = &unk_100754F90;
    long long v54 = &v63;
    id v27 = v44;
    id v50 = v27;
    id v40 = v11;
    id v51 = v40;
    id v39 = v12;
    id v52 = v39;
    id v38 = v37;
    id v53 = v38;
    [v41 enumeratePersistentIDsAndProperties:v26 usingBlock:v49];

    BOOL v28 = [v41 countOfEntities] == (id)100;
    *((unsigned char *)v60 + 24) = v28;
    id v29 = [v40 copy];
    id v30 = [v39 copy];
    id v31 = [v38 copy];
    id v36 = v19;
    uint64_t v32 = v43;
    int v33 = *((unsigned __int8 *)v60 + 24);
    if (*((unsigned char *)v60 + 24))
    {
      CFStringRef v34 = v45;
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      void v45[2] = sub_1004B2EB8;
      v45[3] = &unk_100754FB8;
      v48[1] = &v59;
      v48[3] = v10;
      id v35 = (id *)&v46;
      __int16 v46 = v14;
      id v14 = &v47;
      id v47 = v27;
      v48[2] = &v63;
      id v10 = (id *)v48;
      v48[0] = v43;
      uint64_t v32 = v43;
    }
    else
    {
      CFStringRef v34 = 0;
    }
    v32[2](v32, v29, v30, v31, v33 != 0, v34);

    if (v33)
    {
    }
    _Block_object_dispose(&v59, 8);
    _Block_object_dispose(&v63, 8);
    id v8 = v43;
  }
}

void sub_1004B2C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

id sub_1004B2CBC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"pid" greaterThanValue:v2];

  return v3;
}

void sub_1004B2D24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a2;
  id v18 = [(SQLiteEntity *)[PaymentTransaction alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v6 = [(PaymentTransaction *)v18 passUniqueIdentifier];
  uint64_t v7 = [(PaymentTransaction *)v18 accountIdentifier];
  id v8 = (void *)v7;
  uint64_t v9 = &stru_10075AAD8;
  if (v7) {
    uint64_t v9 = (__CFString *)v7;
  }
  id v10 = v9;

  if (v6) {
    goto LABEL_4;
  }
  if ((id)[(PaymentTransaction *)v18 accountType] == (id)2)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = [(PaymentTransaction *)v18 transactionSourceIdentifier];
    id v13 = +[TransactionSource anyInDatabase:v11 withIdentifier:v12];
    id v14 = [v13 type];

    if (v14 == (id)2)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = [(PaymentTransaction *)v18 accountIdentifier];
      long long v17 = +[Pass anyInDatabase:v15 withAssociatedAccountIdentifier:v16];

      id v6 = [v17 uniqueID];

      if (v6)
      {
LABEL_4:
        [*(id *)(a1 + 40) addObject:*a4];
        [*(id *)(a1 + 48) addObject:v6];
        [*(id *)(a1 + 56) addObject:v10];
      }
    }
  }
}

void *sub_1004B2EB8(void *result)
{
  if (*(unsigned char *)(*(void *)(result[7] + 8) + 24)) {
    return (void *)sub_1004B272C(result[9], result[4], result[5], *(void *)(*(void *)(result[8] + 8) + 24), result[6]);
  }
  return result;
}

id sub_1004B2F64(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  uint64_t v7 = +[SQLiteEntity queryWithDatabase:v5 predicate:v4];

  id v8 = sub_1004A8C0C(v6, v7);
  uint64_t v9 = +[NSSet setWithArray:v8];

  return v9;
}

void sub_1004B3228(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[4];
  uint64_t v3 = (void *)a1[5];
  id v5 = +[NSNumber numberWithLongLong:a2];
  id v7 = [v3 anyInDatabase:v4 withPID:v5];

  uint64_t v6 = +[NSNumber numberWithLongLong:a1[6]];
  [v7 setValue:v6 forProperty:@"source_pid"];
}

uint64_t sub_1004B3438(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      [v5 longLongValue];
      uint64_t v6 = PKCurrencyStorageIntegerToCurrencyDecimal();

      if (v6) {
        [*(id *)(a1 + 32) addObject:v6];
      }

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1004B410C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B4150(void *a1, sqlite3_stmt *a2)
{
  id v2 = a2;
  sqlite3_bind_int64(a2, 1, 0);
  sqlite3_bind_int64(v2, 2, 14);
  sqlite3_bind_int64(v2, 3, 1);
  sqlite3_bind_int64(v2, 4, 2);
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(v2, 5, v5);
    int v6 = 6;
  }
  else
  {
    int v6 = 5;
  }
  id v7 = (void *)a1[5];
  if (v7)
  {
    [v7 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(v2, v6++, v8);
  }
  sqlite3_bind_int64(v2, v6, 1);
  sqlite3_int64 v9 = PKCurrencyDecimalToStorageInteger();
  sqlite3_bind_int64(v2, v6 + 1, v9);
  sqlite3_bind_int64(v2, v6 + 2, 5);
  sqlite3_bind_int64(v2, v6 + 3, 1);
  sqlite3_int64 v10 = PKCurrencyDecimalToStorageInteger();
  sqlite3_bind_int64(v2, v6 + 4, v10);
  sqlite3_bind_int64(v2, v6 + 5, 2);
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, v2);
  if (result)
  {
    id v36 = v2;
    id v37 = a1;
    while (1)
    {
      id v12 = SQLiteCopyFoundationValueForStatementColumn(v2, 0);
      if (v12 == (id)a1[8])
      {
        id v13 = 0;
      }
      else
      {
        id v13 = PKCurrencyStorageNumberToCurrencyDecimal();
      }
      id v14 = SQLiteCopyFoundationValueForStatementColumn(v2, 1);
      id v39 = SQLiteCopyFoundationValueForStatementColumn(v2, 2);
      id v40 = v12;
      if (v39 == (id)a1[8])
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = PKCurrencyStorageNumberToCurrencyDecimal();
      }
      id v16 = SQLiteCopyFoundationValueForStatementColumn(v2, 3);
      id v17 = SQLiteCopyFoundationValueForStatementColumn(v2, 4);
      id v38 = v14;
      id v18 = (char *)[v14 integerValue];
      id v19 = v16;
      id v20 = [v16 integerValue];
      id v21 = v17;
      LODWORD(v17) = [v17 BOOLValue];
      a1 = v37;
      unsigned int v22 = [v15 isEqualToNumber:v37[6]];
      unsigned int v23 = [v15 isEqualToNumber:v37[7]];
      unsigned int v24 = [v15 isEqualToNumber:v37[9]];
      if (v17)
      {
        uint64_t v25 = [*(id *)(*(void *)(v37[10] + 8) + 40) decimalNumberByAdding:v13];
        uint64_t v26 = v37[10];
        goto LABEL_16;
      }
      if (v20 != (id)1) {
        break;
      }
      if ((unint64_t)(v18 - 1) < 3)
      {
        if (v22)
        {
          a1 = v37;
          uint64_t v25 = [*(id *)(*(void *)(v37[12] + 8) + 40) decimalNumberByAdding:v13];
          uint64_t v26 = v37[12];
          goto LABEL_16;
        }
        if (v23)
        {
          a1 = v37;
          uint64_t v25 = [*(id *)(*(void *)(v37[13] + 8) + 40) decimalNumberByAdding:v13];
          uint64_t v26 = v37[13];
LABEL_16:
          uint64_t v27 = *(void *)(v26 + 8);
          BOOL v28 = *(void **)(v27 + 40);
          *(void *)(v27 + 40) = v25;
          id v30 = v39;
          id v29 = v40;
          id v31 = v38;
          id v2 = v36;
LABEL_26:

          goto LABEL_27;
        }
        id v30 = v39;
        id v29 = v40;
        a1 = v37;
        id v31 = v38;
        id v2 = v36;
        if (v24)
        {
          uint64_t v33 = [*(id *)(*(void *)(v37[10] + 8) + 40) decimalNumberByAdding:v13];
          uint64_t v34 = v37[10];
          goto LABEL_25;
        }
LABEL_24:
        uint64_t v33 = [*(id *)(*(void *)(a1[11] + 8) + 40) decimalNumberByAdding:v13];
        uint64_t v34 = a1[11];
LABEL_25:
        uint64_t v35 = *(void *)(v34 + 8);
        BOOL v28 = *(void **)(v35 + 40);
        *(void *)(v35 + 40) = v33;
        goto LABEL_26;
      }
      BOOL v32 = (unint64_t)(v18 - 5) > 1;
      id v30 = v39;
      id v29 = v40;
      a1 = v37;
      id v31 = v38;
      id v2 = v36;
      if (!v32) {
        goto LABEL_24;
      }
LABEL_27:

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, v2);
      if ((result & 1) == 0) {
        return result;
      }
    }
    id v30 = v39;
    id v29 = v40;
    a1 = v37;
    id v31 = v38;
    id v2 = v36;
    if (v20 != (id)2) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  return result;
}

BOOL sub_1004B65A4(void *a1)
{
  BOOL v1 = (BOOL)a1;
  if (a1)
  {
    id v2 = [a1 valueForProperty:@"merchant_name"];
    if (v2)
    {
      BOOL v1 = 1;
    }
    else
    {
      uint64_t v3 = [(id)v1 valueForProperty:@"merchant_raw_name"];
      BOOL v1 = v3 != 0;
    }
  }
  return v1;
}

void sub_1004B6AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1004B6B10(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, unsigned char *a6)
{
  id result = [*a4 integerValue];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  *a6 = 1;
  return result;
}

uint64_t sub_1004B6FD4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) merchant];
  uint64_t v3 = [v2 mapsMerchant];

  uint64_t v4 = [*(id *)(a1 + 40) valueForProperty:@"maps_merchant_pid"];
  if ([v3 isValid])
  {
    double v5 = [*(id *)(a1 + 40) database];
    int v6 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v3 identifier]);
    id v7 = +[MapsMerchant anyInDatabase:v5 withIdentifier:v6];

    if (v7)
    {
      [v7 updateWithMapsMerchant:v3];
    }
    else
    {
      id v12 = [*(id *)(a1 + 40) database];
      id v7 = +[MapsMerchant insertMapsMerchant:v3 inDatabase:v12];
    }
    id v13 = *(void **)(a1 + 40);
    id v14 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v7 persistentID]);
    [v13 setValue:v14 forProperty:@"maps_merchant_pid"];
  }
  else if (v4)
  {
    if (((unint64_t)[*(id *)(a1 + 32) updateReasons] & 0x4010) != 0)
    {
      double v8 = [*(id *)(a1 + 40) database];
      id v9 = sub_1004B7234((uint64_t)PaymentTransaction, v4, v8);

      if ((unint64_t)v9 <= 1)
      {
        sqlite3_int64 v10 = [*(id *)(a1 + 40) database];
        uint64_t v11 = +[MapsMerchant anyInDatabase:v10 withPID:v4];
        [v11 deleteFromDatabase];
      }
      [*(id *)(a1 + 40) setValue:0 forProperty:@"maps_merchant_pid"];
    }
    else
    {
      id v16 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Transaction not a maps reprocessing or CloudKit update, skip clearing merchant", v17, 2u);
      }
    }
  }

  return 1;
}

id sub_1004B7234(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  int v6 = self;
  id v7 = sub_1004A6B68((uint64_t)v6, v5);

  id v8 = [v6 countInDatabase:v4 predicate:v7];
  return v8;
}

uint64_t sub_1004B72B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) merchant];
  uint64_t v3 = [v2 mapsBrand];

  id v4 = [*(id *)(a1 + 40) valueForProperty:@"u"];
  if ([v3 isValid])
  {
    id v5 = [*(id *)(a1 + 40) database];
    int v6 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v3 identifier]);
    id v7 = +[MapsBrand anyInDatabase:v5 withIdentifier:v6];

    if (v7)
    {
      [v7 updateWithMapsBrand:v3];
    }
    else
    {
      id v12 = [*(id *)(a1 + 40) database];
      id v7 = +[MapsBrand insertMapsBrand:v3 inDatabase:v12];
    }
    id v13 = *(void **)(a1 + 40);
    id v14 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v7 persistentID]);
    [v13 setValue:v14 forProperty:@"u"];
  }
  else if (v4)
  {
    if (((unint64_t)[*(id *)(a1 + 32) updateReasons] & 0x4010) != 0)
    {
      id v8 = [*(id *)(a1 + 40) database];
      id v9 = sub_1004B7510((uint64_t)PaymentTransaction, v4, v8);

      if ((unint64_t)v9 <= 1)
      {
        sqlite3_int64 v10 = [*(id *)(a1 + 40) database];
        uint64_t v11 = +[MapsBrand anyInDatabase:v10 withPID:v4];
        [v11 deleteFromDatabase];
      }
      [*(id *)(a1 + 40) setValue:0 forProperty:@"u"];
    }
    else
    {
      id v16 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Transaction not a maps reprocessing update or CloudKit update, skip clearing brand", v17, 2u);
      }
    }
  }

  return 1;
}

id sub_1004B7510(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  int v6 = self;
  id v7 = sub_1004A6BD0((uint64_t)v6, v5);

  id v8 = [v6 countInDatabase:v4 predicate:v7];
  return v8;
}

unsigned char *sub_1004B76BC(void *a1, char a2)
{
  if (!a1) {
    return 0;
  }
  v43.receiver = a1;
  v43.super_class = (Class)PaymentTransactionDeserializationContext;
  uint64_t v3 = objc_msgSendSuper2(&v43, "init");
  id v4 = v3;
  if (v3)
  {
    v3[8] = a2;
    uint64_t v5 = sub_1004B9A88();
    int v6 = (void *)*((void *)v4 + 4);
    *((void *)v4 + 4) = v5;

    uint64_t v7 = sub_1004BBF14();
    id v8 = (void *)*((void *)v4 + 5);
    *((void *)v4 + 5) = v7;

    uint64_t v9 = sub_1004BC414();
    sqlite3_int64 v10 = (void *)*((void *)v4 + 6);
    *((void *)v4 + 6) = v9;

    uint64_t v11 = sub_1004B8454();
    id v12 = (void *)*((void *)v4 + 7);
    *((void *)v4 + 7) = v11;

    id v13 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v14 = [*((id *)v4 + 4) allKeys];
    uint64_t v15 = (void *)*((void *)v4 + 9);
    *((void *)v4 + 9) = v14;

    [v13 addObjectsFromArray:*((void *)v4 + 9)];
    *((void *)v4 + 10) = [v13 count];
    uint64_t v16 = [*((id *)v4 + 5) allKeys];
    id v17 = (void *)*((void *)v4 + 11);
    *((void *)v4 + 11) = v16;

    [v13 addObjectsFromArray:*((void *)v4 + 11)];
    *((void *)v4 + 12) = [v13 count];
    uint64_t v18 = [*((id *)v4 + 6) allKeys];
    id v19 = (void *)*((void *)v4 + 13);
    *((void *)v4 + 13) = v18;

    [v13 addObjectsFromArray:*((void *)v4 + 13)];
    *((void *)v4 + 14) = [v13 count];
    uint64_t v20 = [*((id *)v4 + 7) allKeys];
    id v21 = (void *)*((void *)v4 + 15);
    *((void *)v4 + 15) = v20;

    [v13 addObjectsFromArray:*((void *)v4 + 15)];
    *((void *)v4 + 20) = [v13 count];
    [v13 addObject:@"source_pid"];
    *((void *)v4 + 21) = [v13 count];
    [v13 addObject:@"maps_merchant_pid"];
    *((void *)v4 + 22) = [v13 count];
    [v13 addObject:@"u"];
    id v22 = [v13 copy];
    unsigned int v23 = (void *)*((void *)v4 + 8);
    *((void *)v4 + 8) = v22;

    *((void *)v4 + 16) = [*((id *)v4 + 11) indexOfObject:@"merchant_name"];
    *((void *)v4 + 17) = [*((id *)v4 + 11) indexOfObject:@"merchant_raw_name"];
    *((void *)v4 + 18) = [*((id *)v4 + 13) indexOfObject:@"foreign_exchange_information_destination_amount"];
    *((void *)v4 + 19) = [*((id *)v4 + 13) indexOfObject:@"foreign_exchange_information_destination_currency_code"];
    unsigned int v24 = +[NSLocale currentLocale];
    uint64_t v25 = [v24 localeIdentifier];
    uint64_t v26 = (void *)*((void *)v4 + 2);
    *((void *)v4 + 2) = v25;

    id v27 = objc_alloc_init((Class)NSMutableDictionary);
    BOOL v28 = (void *)*((void *)v4 + 23);
    *((void *)v4 + 23) = v27;

    id v29 = +[NSMapTable pk_createStrongPointerPersonalityToStrongObjects];
    id v30 = (void *)*((void *)v4 + 24);
    *((void *)v4 + 24) = v29;

    char v31 = v4[8];
    if (v31)
    {
      id v32 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v33 = (void *)*((void *)v4 + 25);
      *((void *)v4 + 25) = v32;

      char v31 = v4[8];
    }
    if ((v31 & 2) != 0)
    {
      id v34 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v35 = (void *)*((void *)v4 + 26);
      *((void *)v4 + 26) = v34;
    }
    id v36 = objc_alloc_init((Class)NSMutableDictionary);
    id v37 = (void *)*((void *)v4 + 27);
    *((void *)v4 + 27) = v36;

    id v38 = objc_alloc_init((Class)NSMutableDictionary);
    id v39 = (void *)*((void *)v4 + 28);
    *((void *)v4 + 28) = v38;

    id v40 = objc_alloc_init((Class)NSMutableDictionary);
    id v41 = (void *)*((void *)v4 + 29);
    *((void *)v4 + 29) = v40;
  }
  return v4;
}

id *sub_1004B79C0(id *a1, void *a2)
{
  id result = a2;
  id v4 = result;
  if (!a1)
  {
LABEL_8:

    return a1;
  }
  if (result && !*((unsigned char *)a1 + 9))
  {
    id v5 = [result persistentID];
    int v6 = +[NSNumber numberWithLongLong:v5];
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x3032000000;
    uint64_t v16 = sub_100020E68;
    id v17 = sub_100021228;
    id v18 = [a1[23] objectForKeyedSubscript:v6];
    uint64_t v7 = (void *)v14[5];
    if (v7)
    {
      a1 = v7;
    }
    else
    {
      id v8 = a1[8];
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_1004BD88C;
      void v9[3] = &unk_1007563C0;
      uint64_t v11 = &v13;
      id v12 = v5;
      void v9[4] = a1;
      sqlite3_int64 v10 = v4;
      [v10 getValuesForProperties:v8 withApplier:v9];
      a1 = (id *)(id)v14[5];
    }
    _Block_object_dispose(&v13, 8);

    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_1004B7B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004B7B54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_5;
  }
  if (!*(unsigned char *)(a1 + 9))
  {
    *(unsigned char *)(a1 + 9) = 1;
    if ([*(id *)(a1 + 184) count])
    {
      +[PaymentTransactionReward associateRewardsToPaymentTransactions:*(void *)(a1 + 184) inDatabase:v3];
      +[PaymentTransactionFee associateFeesToPaymentTransactions:*(void *)(a1 + 184) inDatabase:v3];
      +[PaymentTransactionQuestion associateQuestionsToPaymentTransactions:*(void *)(a1 + 184) inDatabase:v3];
      +[TransactionSource associateTransactionSourcesToPaymentTransactions:*(void *)(a1 + 216) inDatabase:v3];
      +[MapsMerchant associateMapsMerchantsToPaymentTransactions:*(void *)(a1 + 224) inDatabase:v3];
      +[MapsBrand associateMapsBrandsToPaymentTransactions:*(void *)(a1 + 232) inDatabase:v3];
      +[PaymentTransactionAward associateAwardsToPaymentTransactions:*(void *)(a1 + 184) inDatabase:v3];
      +[PaymentTransactionAmountModifier associateAmountModifiersToPaymentTransactions:*(void *)(a1 + 184) inDatabase:v3];
      +[PaymentTransactionFee associateFeesToPaymentTransactions:*(void *)(a1 + 184) inDatabase:v3];
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      id v5 = objc_alloc_init((Class)NSMutableDictionary);
      int v6 = *(void **)(a1 + 184);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1004BD92C;
      v10[3] = &unk_1007563E8;
      id v7 = v3;
      id v11 = v7;
      id v12 = v4;
      id v13 = v5;
      id v8 = v5;
      id v9 = v4;
      [v6 enumerateKeysAndObjectsUsingBlock:v10];
      +[MapsMerchant associateMapsMerchantsToPaymentTransactions:v9 inDatabase:v7];
      +[MapsBrand associateMapsBrandsToPaymentTransactions:v8 inDatabase:v7];
    }
LABEL_5:

    return;
  }
  __break(1u);
}

id sub_1004B7E40(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = [a1 valueForProperty:@"source_pid"];
    if (v2)
    {
      id v3 = [v1 database];
      +[TransactionSource anyInDatabase:withPersistentID:](TransactionSource, "anyInDatabase:withPersistentID:", v3, [v2 longLongValue]);
      id v1 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v1 = 0;
    }
  }
  return v1;
}

uint64_t sub_1004B822C()
{
  self;
  v1[0] = @"payment_transaction_authentication.auth_data_payment_pin";
  v1[1] = @"payment_transaction_authentication.auth_data_transaction_signature";
  v2[0] = &stru_100756190;
  v2[1] = &stru_1007561B0;
  v1[2] = @"payment_transaction_authentication.auth_data_user_confirmation";
  v1[3] = @"service_identifier";
  v2[2] = &stru_1007561D0;
  v2[3] = &stru_1007561F0;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:4];
  return objc_claimAutoreleasedReturnValue();
}

void sub_1004B82E4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

id sub_1004B8350(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)PKTransactionAuthenticationContext);
    id v3 = (void *)sub_1004B8454();
    id v4 = [v3 allKeys];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1004B855C;
    void v9[3] = &unk_10072DDD8;
    void v9[4] = v1;
    id v10 = v3;
    id v5 = v2;
    id v11 = v5;
    id v6 = v3;
    [v1 getValuesForProperties:v4 withApplier:v9];

    id v7 = v11;
    id v1 = v5;
  }
  return v1;
}

uint64_t sub_1004B8454()
{
  self;
  v1[0] = @"payment_pin_format";
  v1[1] = @"nonce";
  v2[0] = &stru_100756230;
  v2[1] = &stru_100756250;
  v1[2] = @"signing_key_material";
  v1[3] = @"partial_signature";
  v2[2] = &stru_100756270;
  v2[3] = &stru_100756290;
  void v1[4] = @"requested_auth_mechanisms";
  v1[5] = @"payment_transaction_authentication.processed_auth_mechanisms";
  void v2[4] = &stru_1007562B0;
  void v2[5] = &stru_1007562D0;
  v1[6] = @"payment_transaction_authentication.data_collected_auth_mechanisms";
  v1[7] = @"payment_transaction_authentication.complete";
  v2[6] = &stru_1007562F0;
  v2[7] = &stru_100756310;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:8];
  return objc_claimAutoreleasedReturnValue();
}

void sub_1004B855C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

uint64_t sub_1004B8688(void *a1)
{
  id v2 = +[PaymentTransaction anyInDatabase:a1[4] withPID:a1[5]];
  id v3 = v2;
  if (v2
    && ([v2 valueForProperty:@"update_sequence_number"],
        id v4 = objc_claimAutoreleasedReturnValue(),
        id v5 = [v4 integerValue],
        v4,
        (id)a1[6] == v5))
  {
    id v6 = +[NSNumber numberWithBool:0];
    [v3 setValue:v6 forProperty:@"needs_sync_to_finance"];

    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1004B8804(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B881C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) databaseTable];
  id v3 = +[NSString stringWithFormat:@"UPDATE %@ SET %@ = 1", v2, @"needs_sync_to_finance"];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004B88FC;
  v7[3] = &unk_10073AE78;
  uint64_t v4 = *(void *)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  sub_1000128B8(v4, v3, 0, v7);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return v5;
}

uint64_t sub_1004B88FC(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1004B89F4(uint64_t a1)
{
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  id v2 = [*(id *)(a1 + 48) databaseTable];
  id v3 = +[NSString stringWithFormat:@"UPDATE %@ SET %@ = 1 WHERE %@ = '%@'", v2, @"needs_sync_to_finance", @"account_identifier", *(void *)(a1 + 32)];

  uint64_t v4 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004B8B20;
  v7[3] = &unk_10073AE78;
  void v7[4] = &v8;
  sub_1000128B8(v4, v3, 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);

  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1004B8B08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B8B20(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void *sub_1004B8E14(void *a1, void *a2)
{
  uint64_t result = a2;
  uint64_t v4 = result;
  if (!a1) {
    goto LABEL_4;
  }
  if (!*((unsigned char *)a1 + 9))
  {
    id v5 = objc_alloc_init((Class)NSMutableDictionary);
    id v6 = [v4 database];
    uint64_t v7 = a1[8];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1004BD80C;
    v10[3] = &unk_100756398;
    id v11 = v5;
    id v12 = a1;
    id v13 = v6;
    id v8 = v6;
    id v9 = v5;
    [v4 enumeratePersistentIDsAndProperties:v7 usingBlock:v10];
    a1 = [v9 copy];

LABEL_4:
    return a1;
  }
  __break(1u);
  return result;
}

id sub_1004B8F1C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"merchant_raw_name" equalToValue:v2];

  return v3;
}

id sub_1004B8F84(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"f" equalToValue:v2];

  return v3;
}

id sub_1004B8FEC(uint64_t a1, uint64_t a2)
{
  self;
  id v3 = +[NSNumber numberWithLongLong:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"q" equalToValue:v3];

  return v4;
}

id sub_1004B9064(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"ag" equalToValue:v2];

  return v3;
}

id sub_1004B90CC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"maps_merchant.name" equalToValue:v2];

  return v3;
}

id sub_1004B9134(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"plantains.c" equalToValue:v2];

  return v3;
}

id sub_1004B919C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"peer_payment_counterpart_handle" equalToValue:v2];

  return v3;
}

id sub_1004B9204()
{
  self;
  id v0 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"maps_merchant_pid"];
  v5[0] = v0;
  uint64_t v1 = +[SQLiteNullPredicate isNotNullPredicateWithProperty:@"u"];
  v5[1] = v1;
  id v2 = +[NSArray arrayWithObjects:v5 count:2];
  id v3 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v2];

  return v3;
}

id sub_1004B92F4(uint64_t a1, uint64_t a2)
{
  self;
  id v3 = +[NSNumber numberWithInteger:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"x" equalToValue:v3];

  return v4;
}

id sub_1004B936C(uint64_t a1, uint64_t a2)
{
  self;
  id v3 = +[NSNumber numberWithInteger:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"maps_merchant.c" equalToValue:v3];

  if (a2)
  {
    id v5 = v4;
  }
  else
  {
    id v6 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"maps_merchant.c"];
    v9[0] = v4;
    v9[1] = v6;
    uint64_t v7 = +[NSArray arrayWithObjects:v9 count:2];
    id v5 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v7];
  }
  return v5;
}

id sub_1004B9494(uint64_t a1, uint64_t a2)
{
  self;
  id v3 = +[NSNumber numberWithInteger:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"plantains.g" equalToValue:v3];

  if (a2)
  {
    id v5 = v4;
  }
  else
  {
    id v6 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"plantains.g"];
    v9[0] = v4;
    v9[1] = v6;
    uint64_t v7 = +[NSArray arrayWithObjects:v9 count:2];
    id v5 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v7];
  }
  return v5;
}

void *sub_1004B95BC(void *a1, void *a2)
{
  uint64_t result = a2;
  uint64_t v4 = result;
  if (!a1) {
    goto LABEL_4;
  }
  if (!*((unsigned char *)a1 + 9))
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    id v6 = [v4 database];
    uint64_t v7 = a1[8];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1004BD7B4;
    v10[3] = &unk_100756398;
    id v11 = v5;
    id v12 = a1;
    id v13 = v6;
    id v8 = v6;
    id v9 = v5;
    [v4 enumeratePersistentIDsAndProperties:v7 usingBlock:v10];
    a1 = [v9 copy];

LABEL_4:
    return a1;
  }
  __break(1u);
  return result;
}

id *sub_1004B96C4(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (a1[25])
    {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v5 = v3;
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v16;
        do
        {
          for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
            id v11 = objc_msgSend(a1[24], "objectForKey:", v10, (void)v15);
            if (v11)
            {
              id v12 = [v10 identifier];
              if (v12)
              {
                id v13 = [a1[25] objectForKeyedSubscript:v11];
                if (v13) {
                  [v4 setObject:v13 forKeyedSubscript:v12];
                }
              }
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v7);
      }

      a1 = (id *)[v4 copy];
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

id *sub_1004B9860(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (a1[26])
    {
      id v4 = objc_alloc_init((Class)NSMutableDictionary);
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v5 = v3;
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v16;
        do
        {
          for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = *(void **)(*((void *)&v15 + 1) + 8 * i);
            id v11 = objc_msgSend(a1[24], "objectForKey:", v10, (void)v15);
            if (v11)
            {
              id v12 = [v10 identifier];
              if (v12)
              {
                id v13 = [a1[26] objectForKeyedSubscript:v11];
                if (v13) {
                  [v4 setObject:v13 forKeyedSubscript:v12];
                }
              }
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v7);
      }

      a1 = (id *)[v4 copy];
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

void sub_1004B99FC(void *a1, uint64_t a2)
{
  id v4 = (void *)_DateForSQLValue();
  [v4 timeIntervalSinceDate:a1[4]];
  double v6 = fabs(v5);

  uint64_t v7 = *(void *)(a1[5] + 8);
  if (*(void *)(v7 + 24) == 0x7FFFFFFFFFFFFFFFLL || v6 < *(double *)(*(void *)(a1[6] + 8) + 24))
  {
    *(void *)(v7 + 24) = a2;
    *(double *)(*(void *)(a1[6] + 8) + 24) = v6;
  }
}

uint64_t sub_1004B9A88()
{
  self;
  v1[0] = @"identifier";
  v1[1] = @"service_identifier";
  v2[0] = &stru_100755070;
  v2[1] = &stru_100755090;
  v1[2] = @"payment_hash";
  v1[3] = @"currency_code";
  v2[2] = &stru_1007550B0;
  v2[3] = &stru_1007550D0;
  void v1[4] = @"transaction_date";
  v1[5] = @"city_code";
  void v2[4] = &stru_1007550F0;
  void v2[5] = &stru_100755110;
  v1[6] = @"transaction_status_changed_date";
  v1[7] = @"expiration_date";
  v2[6] = &stru_100755130;
  v2[7] = &stru_100755150;
  void v1[8] = @"locality";
  v1[9] = @"administrative_area";
  void v2[8] = &stru_100755170;
  v2[9] = &stru_100755190;
  v1[10] = @"af";
  v1[11] = @"transaction_status";
  v2[10] = &stru_1007551B0;
  v2[11] = &stru_1007551D0;
  v1[12] = @"transaction_declined_reason";
  v1[13] = @"transaction_type";
  v2[12] = &stru_1007551F0;
  v2[13] = &stru_100755210;
  v1[14] = @"technology_type";
  v1[15] = @"transaction_source";
  v2[14] = &stru_100755230;
  v2[15] = &stru_100755250;
  uint8_t v1[16] = @"requires_location";
  v1[17] = @"has_notification_service_data";
  uint8_t v2[16] = &stru_100755270;
  v2[17] = &stru_100755290;
  v1[18] = @"amount";
  v1[19] = @"subtotal_amount";
  v2[18] = &stru_1007552B0;
  v2[19] = &stru_1007552D0;
  v1[20] = @"amount_added_to_auth";
  v1[21] = @"location_date";
  v2[20] = &stru_1007552F0;
  v2[21] = &stru_100755310;
  v1[22] = @"location_latitude";
  v1[23] = @"location_longitude";
  v2[22] = &stru_100755330;
  v2[23] = &stru_100755350;
  v1[24] = @"location_altitude";
  v1[25] = @"location_horizontal_accuracy";
  v2[24] = &stru_100755370;
  v2[25] = &stru_100755390;
  v1[26] = @"location_vertical_accuracy";
  v1[27] = @"is_coarse_location";
  v2[26] = &stru_1007553B0;
  v2[27] = &stru_1007553D0;
  v1[28] = @"processed_for_location";
  v1[29] = @"processed_for_merchant_cleanup";
  v2[28] = &stru_1007553F0;
  v2[29] = &stru_100755410;
  v1[30] = @"requires_merchant_reprocessing";
  v1[31] = @"last_merchant_reprocessing_date";
  v2[30] = &stru_100755430;
  v2[31] = &stru_100755450;
  v1[32] = @"processed_for_stations";
  v1[33] = @"transit_type";
  v2[32] = &stru_100755470;
  v2[33] = &stru_100755490;
  v1[34] = @"transit_modifiers";
  v1[35] = @"station_code_provider";
  v2[34] = &stru_1007554B0;
  v2[35] = &stru_1007554D0;
  v1[36] = @"en_route";
  v1[37] = @"start_station_code";
  v2[36] = &stru_1007554F0;
  v2[37] = &stru_100755510;
  v1[38] = @"start_station";
  v1[39] = @"start_station_latitude";
  v2[38] = &stru_100755530;
  v2[39] = &stru_100755550;
  v1[40] = @"start_station_longitude";
  v1[41] = @"end_station_code";
  v2[40] = &stru_100755570;
  v2[41] = &stru_100755590;
  v1[42] = @"end_station";
  v1[43] = @"end_station_latitude";
  v2[42] = &stru_1007555B0;
  v2[43] = &stru_1007555D0;
  v1[44] = @"end_station_longitude";
  v1[45] = @"adjustment_type";
  v2[44] = &stru_1007555F0;
  v2[45] = &stru_100755610;
  v1[46] = @"top_up_type";
  v1[47] = @"peer_payment_type";
  v2[46] = &stru_100755630;
  v2[47] = &stru_100755650;
  v1[48] = @"peer_payment_counterpart_handle";
  v1[49] = @"peer_payment_memo";
  v2[48] = &stru_100755670;
  v2[49] = &stru_100755690;
  v1[50] = @"peer_payment_message_received_date";
  v1[51] = @"ca";
  v2[50] = &stru_1007556B0;
  v2[51] = &stru_1007556D0;
  v1[52] = @"cb";
  v1[53] = @"primary_funding_source_amount";
  v2[52] = &stru_1007556F0;
  v2[53] = &stru_100755710;
  v1[54] = @"primary_funding_source_currency_code";
  v1[55] = @"secondary_funding_source_amount";
  v2[54] = &stru_100755730;
  v2[55] = &stru_100755750;
  v1[56] = @"secondary_funding_source_currency_code";
  v1[57] = @"secondary_funding_source_network";
  v2[56] = &stru_100755770;
  v2[57] = &stru_100755790;
  v1[58] = @"secondary_funding_source_dpan_suffix";
  v1[59] = @"secondary_funding_source_fpan_identifier";
  v2[58] = &stru_1007557B0;
  v2[59] = &stru_1007557D0;
  v1[60] = @"secondary_funding_source_description";
  v1[61] = @"secondary_funding_source_type";
  v2[60] = &stru_1007557F0;
  v2[61] = &stru_100755810;
  v1[62] = @"request_device_score_identifier";
  v1[63] = @"send_device_score_identifier";
  v2[62] = &stru_100755830;
  v2[63] = &stru_100755850;
  v1[64] = @"device_score_identifiers_required";
  v2[64] = &stru_100755870;
  v1[65] = @"device_score_identifiers_submitted";
  v2[65] = &stru_100755890;
  v1[66] = @"merchant_provided_description";
  v2[66] = &stru_1007558B0;
  v1[67] = @"merchant_provided_title";
  v2[67] = &stru_1007558D0;
  v1[68] = @"metadata";
  v2[68] = &stru_1007558F0;
  v1[69] = @"n";
  v2[69] = &stru_100755910;
  v1[70] = @"fuzzy_matched";
  v2[70] = &stru_100755930;
  v1[71] = @"should_suppress_date";
  v2[71] = &stru_100755950;
  v1[72] = @"issue_report_identifier";
  v2[72] = &stru_100755970;
  v1[73] = @"c";
  v2[73] = &stru_100755990;
  v1[74] = @"d";
  v2[74] = &stru_1007559B0;
  v1[75] = @"e";
  v2[75] = &stru_1007559D0;
  v1[76] = @"a";
  v2[76] = &stru_1007559F0;
  v1[77] = @"account_identifier";
  v2[77] = &stru_100755A10;
  v1[78] = @"account_type";
  v2[78] = &stru_100755A30;
  v1[79] = @"o";
  v2[79] = &stru_100755A50;
  v1[80] = @"r";
  v2[80] = &stru_100755A70;
  v1[81] = @"s";
  v2[81] = &stru_100755A90;
  v1[82] = @"v";
  v2[82] = &stru_100755AB0;
  v1[83] = @"dpan_identifier";
  v2[83] = &stru_100755AD0;
  v1[84] = @"payment_network_identifier";
  v2[84] = &stru_100755AF0;
  v1[85] = @"zm";
  v2[85] = &stru_100755B10;
  v1[86] = @"is_merchant_token_transaction";
  v2[86] = &stru_100755B30;
  v1[87] = @"ae";
  v2[87] = &stru_100755B50;
  v1[88] = @"w";
  v2[88] = &stru_100755B70;
  v1[89] = @"ab";
  v2[89] = &stru_100755B90;
  v1[90] = @"afi";
  v2[90] = &stru_100755BB0;
  v1[91] = @"ac";
  v2[91] = &stru_100755BD0;
  v1[92] = @"ad";
  v2[92] = &stru_100755BF0;
  v1[93] = @"suppress_notifications";
  v2[93] = &stru_100755C10;
  v1[94] = @"recurring";
  v2[94] = &stru_100755C30;
  v1[95] = @"receipt_provider_url";
  v2[95] = &stru_100755C50;
  v1[96] = @"receipt_provider_identifier";
  v2[96] = &stru_100755C70;
  v1[97] = @"receipt_identifier";
  v2[97] = &stru_100755C90;
  v1[98] = @"transaction_source.identifier";
  v2[98] = &stru_100755CB0;
  v1[99] = @"gooseberry.c";
  v2[99] = &stru_100755CD0;
  v1[100] = @"barcode_identifier";
  v2[100] = &stru_100755CF0;
  v1[101] = @"primary_funding_source_description";
  v2[101] = &stru_100755D10;
  v1[102] = @"nominal_amount";
  v2[102] = &stru_100755D30;
  v1[103] = @"has_additional_offers";
  v2[103] = &stru_100755D50;
  v1[104] = @"interest_reassessment";
  v2[104] = &stru_100755D70;
  v1[105] = @"associated_statement_identifiers";
  v2[105] = &stru_100755D90;
  v1[106] = @"update_sequence_number";
  v2[106] = &stru_100755DB0;
  v1[107] = @"needs_sync_to_finance";
  v2[107] = &stru_100755DD0;
  v1[108] = @"iit";
  v2[108] = &stru_100755DF0;
  v1[109] = @"iimu";
  v2[109] = &stru_100755E10;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:110];
  return objc_claimAutoreleasedReturnValue();
}

void sub_1004BA4C8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BA4D0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BA4D8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BA4E0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BA4E8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentTransaction *)v3 setTransactionDate:v4];
}

void sub_1004BA548(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BA550(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentTransaction *)v3 setTransactionStatusChangedDate:v4];
}

void sub_1004BA5B0(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentTransaction *)v3 setExpirationDate:v4];
}

void sub_1004BA610(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BA618(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BA620(id a1, PKPaymentTransaction *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    id v5 = +[NSTimeZone timeZoneWithName:a3];
    [(PKPaymentTransaction *)v4 setTimeZone:v5];
  }
}

void sub_1004BA6A0(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTransactionStatus:](v4, "setTransactionStatus:", [a3 integerValue]);
}

void sub_1004BA6F8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTransactionDeclinedReason:](v4, "setTransactionDeclinedReason:", [a3 integerValue]);
}

void sub_1004BA750(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTransactionType:](v4, "setTransactionType:", [a3 integerValue]);
}

void sub_1004BA7A8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTechnologyType:](v4, "setTechnologyType:", [a3 integerValue]);
}

void sub_1004BA800(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTransactionSource:](v4, "setTransactionSource:", [a3 integerValue]);
}

void sub_1004BA858(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setRequiresLocation:](v4, "setRequiresLocation:", [a3 BOOLValue]);
}

void sub_1004BA8B0(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setHasNotificationServiceData:](v4, "setHasNotificationServiceData:", [a3 BOOLValue]);
}

void sub_1004BA908(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransaction *)v3 setAmount:v4];
}

void sub_1004BA96C(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransaction *)v3 setSubtotalAmount:v4];
}

void sub_1004BA9D0(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransaction *)v3 setAmountAddedToAuth:v4];
}

void sub_1004BAA34(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentTransaction *)v3 setLocationDate:v4];
}

void sub_1004BAA94(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationLatitude:](v4, "setLocationLatitude:");
}

void sub_1004BAAE8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationLongitude:](v4, "setLocationLongitude:");
}

void sub_1004BAB3C(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationAltitude:](v4, "setLocationAltitude:");
}

void sub_1004BAB90(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationHorizontalAccuracy:](v4, "setLocationHorizontalAccuracy:");
}

void sub_1004BABE4(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setLocationVerticalAccuracy:](v4, "setLocationVerticalAccuracy:");
}

void sub_1004BAC38(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setCoarseLocation:](v4, "setCoarseLocation:", [a3 BOOLValue]);
}

void sub_1004BAC90(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setProcessedForLocation:](v4, "setProcessedForLocation:", [a3 BOOLValue]);
}

void sub_1004BACE8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setProcessedForMerchantCleanup:](v4, "setProcessedForMerchantCleanup:", [a3 BOOLValue]);
}

void sub_1004BAD40(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setRequiresMerchantReprocessing:](v4, "setRequiresMerchantReprocessing:", [a3 BOOLValue]);
}

void sub_1004BAD98(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentTransaction *)v3 setLastMerchantReprocessingDate:v4];
}

void sub_1004BADF8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setProcessedForStations:](v4, "setProcessedForStations:", [a3 BOOLValue]);
}

void sub_1004BAE50(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTransitType:](v4, "setTransitType:", [a3 integerValue]);
}

void sub_1004BAEA8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTransitModifiers:](v4, "setTransitModifiers:", [a3 unsignedIntegerValue]);
}

void sub_1004BAF00(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BAF08(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setEnRoute:](v4, "setEnRoute:", [a3 BOOLValue]);
}

void sub_1004BAF60(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BAF68(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BAF70(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setStartStationLatitude:](v4, "setStartStationLatitude:");
}

void sub_1004BAFC4(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setStartStationLongitude:](v4, "setStartStationLongitude:");
}

void sub_1004BB018(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB020(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB028(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setEndStationLatitude:](v4, "setEndStationLatitude:");
}

void sub_1004BB07C(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentTransaction setEndStationLongitude:](v4, "setEndStationLongitude:");
}

void sub_1004BB0D0(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setAdjustmentType:](v4, "setAdjustmentType:", [a3 integerValue]);
}

void sub_1004BB128(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setTopUpType:](v4, "setTopUpType:", [a3 integerValue]);
}

void sub_1004BB180(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setPeerPaymentType:](v4, "setPeerPaymentType:", [a3 integerValue]);
}

void sub_1004BB1D8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB1E0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB1E8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentTransaction *)v3 setPeerPaymentMessageReceivedDate:v4];
}

void sub_1004BB248(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setPeerPaymentPaymentMode:](v4, "setPeerPaymentPaymentMode:", [a3 integerValue]);
}

void sub_1004BB2A0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB2A8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransaction *)v3 setPrimaryFundingSourceAmount:v4];
}

void sub_1004BB30C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB314(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransaction *)v3 setSecondaryFundingSourceAmount:v4];
}

void sub_1004BB378(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB380(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setSecondaryFundingSourceNetwork:](v4, "setSecondaryFundingSourceNetwork:", [a3 integerValue]);
}

void sub_1004BB3D8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB3E0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB3E8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB3F0(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setSecondaryFundingSourceType:](v4, "setSecondaryFundingSourceType:", [a3 integerValue]);
}

void sub_1004BB448(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_UUIDForSQLValue();
  [(PKPaymentTransaction *)v3 setRequestDeviceScoreIdentifier:v4];
}

void sub_1004BB4A8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_UUIDForSQLValue();
  [(PKPaymentTransaction *)v3 setSendDeviceScoreIdentifier:v4];
}

void sub_1004BB508(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setDeviceScoreIdentifiersRequired:](v4, "setDeviceScoreIdentifiersRequired:", [a3 BOOLValue]);
}

void sub_1004BB560(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setDeviceScoreIdentifiersSubmitted:](v4, "setDeviceScoreIdentifiersSubmitted:", [a3 BOOLValue]);
}

void sub_1004BB5B8(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB5C0(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB5C8(id a1, PKPaymentTransaction *a2, id a3)
{
  double v6 = a2;
  id v4 = [a3 dataUsingEncoding:4];
  if (v4)
  {
    id v5 = +[NSJSONSerialization JSONObjectWithData:v4 options:0 error:0];
  }
  else
  {
    id v5 = 0;
  }
  [(PKPaymentTransaction *)v6 setMetadata:v5];
}

void sub_1004BB660(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setOriginatedByDevice:](v4, "setOriginatedByDevice:", [a3 BOOLValue]);
}

void sub_1004BB6B8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setFuzzyMatched:](v4, "setFuzzyMatched:", [a3 BOOLValue]);
}

void sub_1004BB710(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setShouldSuppressDate:](v4, "setShouldSuppressDate:", [a3 BOOLValue]);
}

void sub_1004BB768(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB770(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransaction *)v3 setRewardsTotalAmount:v4];
}

void sub_1004BB7D4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB7DC(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setRewardsEligibilityReason:](v4, "setRewardsEligibilityReason:", [a3 integerValue]);
}

void sub_1004BB834(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_1004BB88C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB894(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setAccountType:](v4, "setAccountType:", [a3 integerValue]);
}

void sub_1004BB8EC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB8F4(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB8FC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB904(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB90C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB914(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setPaymentNetworkIdentifier:](v4, "setPaymentNetworkIdentifier:", [a3 integerValue]);
}

void sub_1004BB96C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB974(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB97C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB984(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setAdjustmentTypeReason:](v4, "setAdjustmentTypeReason:", [a3 integerValue]);
}

void sub_1004BB9DC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BB9E4(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setAssociatedFeatureIdentifier:](v4, "setAssociatedFeatureIdentifier:", [a3 integerValue]);
}

void sub_1004BBA3C(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setSuppressBehavior:](v4, "setSuppressBehavior:", [a3 integerValue]);
}

void sub_1004BBA94(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setRedemptionType:](v4, "setRedemptionType:", [a3 integerValue]);
}

void sub_1004BBAEC(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setSuppressNotifications:](v4, "setSuppressNotifications:", [a3 BOOLValue]);
}

void sub_1004BBB44(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setRecurring:](v4, "setRecurring:", [a3 BOOLValue]);
}

void sub_1004BBB9C(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPaymentTransaction *)v3 setReceiptProviderURL:v4];
}

void sub_1004BBBFC(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BBC04(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BBC0C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BBC14(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BBC1C(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BBC24(id a1, PKPaymentTransaction *a2, id a3)
{
}

void sub_1004BBC2C(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentTransaction *)v3 setNominalAmount:v4];
}

void sub_1004BBC90(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setHasAdditionalOffers:](v4, "setHasAdditionalOffers:", [a3 BOOLValue]);
}

void sub_1004BBCE8(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setInterestReassessment:](v4, "setInterestReassessment:", [a3 BOOLValue]);
}

void sub_1004BBD40(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKPaymentTransaction *)v4 setAssociatedStatementIdentifiers:v5];
}

void sub_1004BBDAC(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setUpdateSequenceNumber:](v4, "setUpdateSequenceNumber:", [a3 integerValue]);
}

void sub_1004BBE04(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setNeedsSyncWithFinance:](v4, "setNeedsSyncWithFinance:", [a3 BOOLValue]);
}

void sub_1004BBE5C(id a1, PKPaymentTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransaction setIsIssuerInstallmentTransaction:](v4, "setIsIssuerInstallmentTransaction:", [a3 BOOLValue]);
}

void sub_1004BBEB4(id a1, PKPaymentTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPaymentTransaction *)v3 setIssuerInstallmentManagementURL:v4];
}

uint64_t sub_1004BBF14()
{
  self;
  v1[0] = @"merchant_name";
  v1[1] = @"merchant_raw_name";
  v2[0] = &stru_100755E50;
  v2[1] = &stru_100755E70;
  v1[2] = @"merchant_industry_category";
  v1[3] = @"merchant_industry_code";
  v2[2] = &stru_100755E90;
  v2[3] = &stru_100755EB0;
  void v1[4] = @"f";
  v1[5] = @"g";
  void v2[4] = &stru_100755ED0;
  void v2[5] = &stru_100755EF0;
  v1[6] = @"h";
  v1[7] = @"i";
  v2[6] = &stru_100755F10;
  v2[7] = &stru_100755F30;
  void v1[8] = @"j";
  v1[9] = @"k";
  void v2[8] = &stru_100755F50;
  v2[9] = &stru_100755F70;
  v1[10] = @"l";
  v1[11] = @"m";
  v2[10] = &stru_100755F90;
  v2[11] = &stru_100755FB0;
  v1[12] = @"q";
  v1[13] = @"p";
  v2[12] = &stru_100755FD0;
  v2[13] = &stru_100755FF0;
  v1[14] = @"ag";
  v1[15] = @"ah";
  v2[14] = &stru_100756010;
  v2[15] = &stru_100756030;
  uint8_t v1[16] = @"t";
  v1[17] = @"x";
  uint8_t v2[16] = &stru_100756050;
  v2[17] = &stru_100756070;
  v1[18] = @"y";
  v1[19] = @"use_raw_merchant_data";
  v2[18] = &stru_100756090;
  v2[19] = &stru_1007560B0;
  v1[20] = @"merchant_fallback_logo_image_url";
  v2[20] = &stru_1007560D0;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:21];
  return objc_claimAutoreleasedReturnValue();
}

void sub_1004BC12C(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC134(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC13C(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC144(id a1, PKMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKMerchant setIndustryCode:](v4, "setIndustryCode:", [a3 integerValue]);
}

void sub_1004BC19C(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC1A4(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC1AC(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC1B4(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC1BC(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC1C4(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC1CC(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC1D4(id a1, PKMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKMerchant setCleanConfidenceLevel:](v4, "setCleanConfidenceLevel:", [a3 integerValue]);
}

void sub_1004BC22C(id a1, PKMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKMerchant setAdamIdentifier:](v4, "setAdamIdentifier:", [a3 integerValue]);
}

void sub_1004BC284(id a1, PKMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMerchant *)v3 setOriginURL:v4];
}

void sub_1004BC2E4(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC2EC(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC2F4(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC2FC(id a1, PKMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKMerchant setFallbackcategory:](v4, "setFallbackcategory:", [a3 integerValue]);
}

void sub_1004BC354(id a1, PKMerchant *a2, id a3)
{
}

void sub_1004BC35C(id a1, PKMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKMerchant setUseRawMerchantData:](v4, "setUseRawMerchantData:", [a3 BOOLValue]);
}

void sub_1004BC3B4(id a1, PKMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMerchant *)v3 setFallbackLogoImageURL:v4];
}

uint64_t sub_1004BC414()
{
  self;
  v1[0] = @"foreign_exchange_information_exchange_rate";
  v1[1] = @"foreign_exchange_information_destination_amount";
  v2[0] = &stru_100756110;
  v2[1] = &stru_100756130;
  v1[2] = @"foreign_exchange_information_destination_currency_code";
  v2[2] = &stru_100756150;
  +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:3];
  return objc_claimAutoreleasedReturnValue();
}

void sub_1004BC4BC(id a1, PKPaymentTransactionForeignExchangeInformation *a2, id a3)
{
  id v4 = a2;
  id v5 = +[NSDecimalNumber decimalNumberWithString:a3];
  [(PKPaymentTransactionForeignExchangeInformation *)v4 setExchangeRate:v5];
}

void sub_1004BC53C(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_1004BC544(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_1004BC54C(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_1004BC554(id a1, PKTransactionAuthenticationResult *a2, id a3)
{
}

void sub_1004BC55C(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  id v4 = a2;
  -[PKTransactionAuthenticationContext setPaymentPINFormat:](v4, "setPaymentPINFormat:", [a3 integerValue]);
}

void sub_1004BC5B4(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
}

void sub_1004BC5BC(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
}

void sub_1004BC5C4(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
}

void sub_1004BC5CC(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  id v4 = a2;
  -[PKTransactionAuthenticationContext setRequestedAuthenticationMechanisms:](v4, "setRequestedAuthenticationMechanisms:", [a3 integerValue]);
}

void sub_1004BC624(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  id v4 = a2;
  -[PKTransactionAuthenticationContext setProcessedAuthenticationMechanisms:](v4, "setProcessedAuthenticationMechanisms:", [a3 integerValue]);
}

void sub_1004BC67C(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  id v4 = a2;
  -[PKTransactionAuthenticationContext setDataCollectedAuthenticationMechanisms:](v4, "setDataCollectedAuthenticationMechanisms:", [a3 integerValue]);
}

void sub_1004BC6D4(id a1, PKTransactionAuthenticationContext *a2, id a3)
{
  id v4 = a2;
  -[PKTransactionAuthenticationContext setComplete:](v4, "setComplete:", [a3 BOOLValue]);
}

id sub_1004BC780(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a2 + 8 * a1[10];
  uint64_t v4 = a1[16];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    id v5 = 0;
  }
  else {
    id v5 = *(void **)(v3 + 8 * v4);
  }
  id v6 = v5;
  uint64_t v7 = a1[17];
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void **)(v3 + 8 * v7);
  }
  id v9 = v8;
  if ([v6 length] || objc_msgSend(v9, "length"))
  {
    id v10 = objc_alloc_init((Class)PKMerchant);
    +[SQLiteEntity applyPropertySetters:a1[5] toObject:v10 withProperties:a1[11] values:v3];
    if (![v10 category] && (uint64_t)objc_msgSend(v10, "industryCode") >= 1)
    {
      id v11 = objc_alloc_init((Class)PKMerchantCategoryCodeMap);
      objc_msgSend(v10, "setFallbackcategory:", objc_msgSend(v11, "categoryForIndustryCode:", objc_msgSend(v10, "industryCode")));
    }
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id sub_1004BC8B0(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a2 + 8 * a1[12];
  uint64_t v4 = a1[18];
  if (v4 == 0x7FFFFFFFFFFFFFFFLL) {
    id v5 = 0;
  }
  else {
    id v5 = *(void **)(v3 + 8 * v4);
  }
  id v6 = v5;
  uint64_t v7 = a1[19];
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void **)(v3 + 8 * v7);
  }
  id v9 = v8;
  if (v6)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = +[NSDecimalNumber notANumber];
      unsigned __int8 v11 = [v6 isEqualToNumber:v10];

      id v12 = 0;
      if ((v11 & 1) != 0 || !v9) {
        goto LABEL_18;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 length])
      {
        id v13 = PKCurrencyStorageNumberToCurrencyDecimal();
        if (v13
          && (+[NSDecimalNumber notANumber],
              uint64_t v14 = objc_claimAutoreleasedReturnValue(),
              unsigned __int8 v15 = [v13 isEqualToNumber:v14],
              v14,
              (v15 & 1) == 0))
        {
          id v12 = objc_alloc_init((Class)PKPaymentTransactionForeignExchangeInformation);
          +[SQLiteEntity applyPropertySetters:a1[6] toObject:v12 withProperties:a1[13] values:v3];
          id v17 = [objc_alloc((Class)PKCurrencyAmount) initWithAmount:v13 currency:v9 exponent:0];
          [v12 setDestinationCurrencyAmount:v17];
        }
        else
        {
          id v12 = 0;
        }

        goto LABEL_18;
      }
    }
  }
  id v12 = 0;
LABEL_18:

  return v12;
}

void sub_1004BCA74(uint64_t a1, void *a2, void *a3)
{
  id v29 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = objc_alloc_init((Class)PKPaymentTransactionRequest);
    uint64_t v7 = [v29 transactionDate];
    uint64_t v8 = *(void **)(a1 + 24);
    if (!v8)
    {
      uint64_t v9 = +[TransactionSource transactionSourceIdentifiersInDatabase:v5 ofType:0];
      id v10 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v9;

      uint64_t v8 = *(void **)(a1 + 24);
    }
    id v11 = [v8 mutableCopy];
    id v12 = [v29 transactionSourceIdentifier];
    if (v12) {
      [v11 removeObject:v12];
    }
    [v6 setTransactionSourceIdentifiers:v11];
    id v13 = [v7 dateByAddingTimeInterval:-10.0];
    [v6 setStartDate:v13];

    uint64_t v14 = [v7 dateByAddingTimeInterval:10.0];
    [v6 setEndDate:v14];

    unsigned __int8 v15 = sub_1004AE0C0((uint64_t)PaymentTransaction, v5, v6);
    long long v16 = (void *)sub_1004B95BC(a1, v15);

    if ([v16 count] != (id)1) {
      goto LABEL_18;
    }
    id v17 = [v16 firstObject];
    long long v18 = [v17 recurringPeerPayment];
    id v19 = v18;
    if (!v18)
    {
LABEL_17:

LABEL_18:
      goto LABEL_19;
    }
    id v27 = v17;
    id v28 = v5;
    uint64_t v20 = [v18 fundingSource];
    id v21 = [v20 mpanIdentifier];
    id v22 = [v29 panIdentifier];
    id v23 = v21;
    id v24 = v22;
    if (v23 == v24)
    {

      id v17 = v27;
      id v5 = v28;
    }
    else
    {
      uint64_t v25 = v24;
      if (!v23 || !v24)
      {

        id v17 = v27;
        id v5 = v28;
        goto LABEL_16;
      }
      unsigned __int8 v26 = [v23 isEqualToString:v24];

      id v17 = v27;
      id v5 = v28;
      if ((v26 & 1) == 0) {
        goto LABEL_17;
      }
    }
    [v29 setAssociatedFeatureIdentifier:1];
    uint64_t v20 = [v17 recurringPeerPayment];
    [v29 setRecurringPeerPayment:v20];
LABEL_16:

    goto LABEL_17;
  }
LABEL_19:
}

id *sub_1004BCD10(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  if (a1)
  {
    uint64_t v9 = +[NSNumber numberWithLongLong:a2];
    id v10 = [a1[23] objectForKeyedSubscript:v9];
    if (v10)
    {
      a1 = v10;
LABEL_73:

      goto LABEL_74;
    }
    id v11 = objc_alloc_init((Class)PKPaymentTransaction);
    [a1[23] setObject:v11 forKeyedSubscript:v9];
    [a1[24] setObject:v9 forKey:v11];
    +[SQLiteEntity applyPropertySetters:a1[4] toObject:v11 withProperties:a1[9] values:a4];
    id v12 = sub_1004BC780(a1, a4);
    [v11 setMerchant:v12];

    id v13 = sub_1004BC8B0(a1, a4);
    [v11 setForeignExchangeInformation:v13];

    uint64_t v14 = a4 + 8 * (void)a1[14];
    id v15 = objc_alloc_init((Class)PKTransactionAuthenticationContext);
    +[SQLiteEntity applyPropertySetters:a1[7] toObject:v15 withProperties:a1[15] values:v14];
    [v11 setAuthenticationContext:v15];

    uint64_t v16 = [v11 serviceIdentifier];
    id v64 = [v11 panIdentifier];
    uint64_t v17 = [v11 accountIdentifier];
    if (v17)
    {
      long long v18 = +[AccountEvent servicingAccountEventsWithTransactionIdentifier:v16 accountIdentifier:v17 inDatabase:v8];
      [v11 setServicingEvents:v18];
    }
    uint64_t v63 = (void *)v17;
    uint64_t v65 = (void *)v16;
    id v19 = [v11 accountType];
    id v20 = v19;
    BOOL v22 = v19 == (id)1 || v19 == (id)3;
    unint64_t v23 = (unint64_t)[v11 transactionType];
    unint64_t v24 = (unint64_t)[v11 transactionSource];
    id v62 = [v11 associatedFeatureIdentifier];
    CFStringRef v67 = [v11 paymentHash];
    uint64_t v66 = [v11 referenceIdentifier];
    if (v23 == 10)
    {
      uint64_t v25 = +[AccountPayment paymentsForTransactionServiceIdentifier:v65 inDatabase:v8];
      [v11 setPayments:v25];
      goto LABEL_43;
    }
    if (v20 == (id)1)
    {
      if ([v66 length] && v23 <= 6 && ((1 << v23) & 0x61) != 0 && (v24 & 0xFFFFFFFFFFFFFFFBLL) == 0)
      {
        if (!v23)
        {
          uint64_t v45 = +[AccountPayment paymentsForTransactionReferenceIdentifier:v66 inDatabase:v8];
          if ([v45 count])
          {
            __int16 v46 = objc_msgSend(v45, "pk_objectsPassingTest:", &stru_100756330);
            [v11 setPayments:v46];
          }
        }
        id v47 = +[AccountTransfer transfersForTransactionReferenceIdentifier:v66 inDatabase:v8];
        if ([v47 count])
        {
          id v48 = objc_msgSend(v47, "pk_objectsPassingTest:", &stru_100756370);
          [v11 setTransfers:v48];

          id v49 = [v11 transfers];
          id v50 = [v49 count];

          if (v50)
          {
            uint64_t v61 = v47;
            id v51 = [v11 transfers];
            id v52 = [v51 firstObject];

            uint64_t v59 = v52;
            id v53 = [v52 referenceIdentifier];
            long long v54 = sub_1004A7044((uint64_t)PaymentTransaction, v53);
            long long v55 = +[SQLiteEntity anyInDatabase:v8 predicate:v54];

            if ([v55 accountType] == (id)3) {
              [v11 setAssociatedFeatureIdentifier:5];
            }

            id v47 = v61;
          }
        }
        if ([v11 isRecurring] && v23 == 6)
        {
          long long v56 = +[PeerPaymentRecurringPayment peerPaymentRecurringPaymentForIdentifier:v66 inDatabase:v8];
          [v11 setRecurringPeerPayment:v56];
        }
        goto LABEL_92;
      }
      if ([v66 length] && objc_msgSend(v11, "isRecurring") && v23 == 3)
      {
        uint64_t v25 = +[PeerPaymentRecurringPayment peerPaymentRecurringPaymentForIdentifier:v66 inDatabase:v8];
        [v11 setRecurringPeerPayment:v25];
        goto LABEL_43;
      }
    }
    else
    {
      if (v23 - 5 <= 1)
      {
        uint64_t v25 = [v11 serviceIdentifier];
        unsigned __int8 v26 = +[AccountTransfer transfersForTransactionServiceIdentifier:v25 inDatabase:v8];
        [v11 setTransfers:v26];
LABEL_42:

        goto LABEL_43;
      }
      id v27 = [v11 isMerchantTokenTransaction];
      if ([v27 BOOLValue])
      {
        id v60 = [v64 length];

        if (v60 && !v23 && !v20)
        {
          sub_1004BCA74((uint64_t)a1, v11, v8);
          goto LABEL_92;
        }
      }
      else
      {
      }
      if (v20 == (id)2 && !v23)
      {
        id v28 = [v11 serviceIdentifier];
        id v29 = +[AccountEvent redemptionAccountEventWithTransactionIdentifier:v28 inDatabase:v8];
        [v11 setRedemptionEvent:v29];

        goto LABEL_92;
      }
    }
    if (v23 == 8 && v22)
    {
      uint64_t v25 = [v11 referenceIdentifier];
      unsigned __int8 v26 = +[AccountEvent accountEventWithIdentifier:v25 inDatabase:v8];
      char v31 = [v26 event];
      [v11 setRedemptionEvent:v31];

      goto LABEL_42;
    }
    if (v20 == (id)2 && v23 == 14)
    {
      uint64_t v25 = [v11 serviceIdentifier];
      unsigned __int8 v26 = +[AccountEvent redemptionAccountEventWithTransactionIdentifier:v25 inDatabase:v8];
      [v11 setRedemptionEvent:v26];
      goto LABEL_42;
    }
    switch(v23)
    {
      case 7uLL:
        if ([v11 accountType] != (id)3 || !objc_msgSend(v66, "length")) {
          goto LABEL_44;
        }
        uint64_t v25 = +[AccountTransfer transfersForTransactionServiceIdentifier:v66 inDatabase:v8];
        if ([v25 count]) {
          [v11 setTransfers:v25];
        }
        goto LABEL_43;
      case 0xFuLL:
        uint64_t v25 = +[TransactionReleasedData releasedDataForPaymentTransactionPID:a2 inDatabase:v8];
        [v11 setReleasedData:v25];
        goto LABEL_43;
      case 0xDuLL:
        id v44 = [v11 identifier];
        uint64_t v25 = +[CreditInstallmentPlanPayment paymentWithIdentifier:v44 inDatabase:v8];

        [v11 setInstallmentPayment:v25];
        goto LABEL_43;
    }
LABEL_92:
    if (v23 || !v67 || v62 != (id)3) {
      goto LABEL_44;
    }
    uint64_t v25 = +[PayLaterPayment payLaterFinancingPlanIdentifierForPaymentWithPaymentAssociatedTransactionPaymentHash:v67 inDatabase:v8];
    if (v25)
    {
      long long v57 = +[PayLaterFinancingPlan anyInDatabase:v8 withPlanIdentifier:v25];
      long long v58 = [v57 financingPlan];

      [v11 setAssociatedFinancingPlan:v58];
    }
LABEL_43:

LABEL_44:
    if ((PKHideCardBenefitRewards() & 1) == 0
      && (![v11 transactionStatus]
       || [v11 transactionStatus] == (id)1
       || [v11 transactionStatus] == (id)-1
       || [v11 transactionStatus] == (id)8))
    {
      id v32 = +[PaymentRewardsRedemption rewardsRedemptionWithPaymentHash:v67 inDatabase:v8];
      if ([v32 isInGoodStanding]) {
        [v11 setPaymentRewardsRedemption:v32];
      }
    }
    uint64_t v33 = +[PaymentTransactionAmount paymentAmountsInDatabase:v8 forPaymentTransactionPID:a2];
    [v11 setAmounts:v33];
    id v34 = +[TransactionCommutePlanUnit pk_transactionCommutePlanUnitsInDatabase:v8 forPaymentTransactionPID:a2];
    [v11 setPlans:v34];
    if (a1[25])
    {
      uint64_t v35 = +[WorldRegion regionsForTransactionPID:a2 localeIdentifier:a1[2] inDatabase:v8];
      if (v35) {
        [a1[25] setObject:v35 forKeyedSubscript:v9];
      }
    }
    if (a1[26])
    {
      id v36 = +[PaymentTransactionTag paymentTransactionTagsForPID:a2 inDatabase:v8];
      if (v36) {
        [a1[26] setObject:v36 forKeyedSubscript:v9];
      }
    }
    id v37 = *(id *)(a4 + 8 * (void)a1[20]);
    if (v37)
    {
      id v38 = [a1[27] objectForKeyedSubscript:v37];
      if (!v38)
      {
        id v38 = objc_alloc_init((Class)NSMutableArray);
        [a1[27] setObject:v38 forKeyedSubscript:v37];
      }
      [v38 addObject:v11];
    }
    id v39 = *(id *)(a4 + 8 * (void)a1[21]);
    if (v39)
    {
      id v40 = [a1[28] objectForKeyedSubscript:v39];
      if (!v40)
      {
        id v40 = objc_alloc_init((Class)NSMutableArray);
        [a1[28] setObject:v40 forKeyedSubscript:v39];
      }
      [v40 addObject:v11];
    }
    id v41 = *(id *)(a4 + 8 * (void)a1[22]);
    if (v41)
    {
      id v42 = [a1[29] objectForKeyedSubscript:v41];
      if (!v42)
      {
        id v42 = objc_alloc_init((Class)NSMutableArray);
        [a1[29] setObject:v42 forKeyedSubscript:v41];
      }
      [v42 addObject:v11];
    }
    a1 = (id *)v11;

    goto LABEL_73;
  }
LABEL_74:

  return a1;
}

BOOL sub_1004BD734(id a1, PKAccountPayment *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = [(PKAccountPayment *)a2 fundingSource];
  BOOL v5 = [v4 type] == (id)2;

  return v5;
}

BOOL sub_1004BD774(id a1, PKAccountTransfer *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = [(PKAccountTransfer *)a2 externalAccount];
  BOOL v5 = [v4 type] == (id)2;

  return v5;
}

void sub_1004BD7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  BOOL v5 = sub_1004BCD10(*(id **)(a1 + 40), a2, a3, a4, *(void **)(a1 + 48));
  [v4 addObject:v5];
}

void sub_1004BD80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = sub_1004BCD10(*(id **)(a1 + 40), a2, a3, a4, *(void **)(a1 + 48));
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = +[NSNumber numberWithLongLong:a2];
  [v6 setObject:v8 forKeyedSubscript:v7];
}

void sub_1004BD88C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[7];
  id v6 = (id *)a1[4];
  uint64_t v7 = (void *)a1[5];
  id v8 = a2;
  id v13 = [v7 database];
  id v10 = sub_1004BCD10(v6, v5, v9, a3, v13);

  uint64_t v11 = *(void *)(a1[6] + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_1004BD92C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [v4 merchant];
  BOOL v6 = [v4 transactionType] == (id)15 && objc_msgSend(v4, "transactionSource") == (id)2;
  id v7 = [v4 featureIdentifier];
  if (v5)
  {
    id v8 = v7;
    if (([v5 hasMapsMatch] & 1) == 0
      && (([v5 useRawMerchantData] | v6) & 1) == 0
      && v8 != (id)4)
    {
      id v9 = objc_alloc_init((Class)NSMutableArray);
      id v10 = sub_1004A5E78((uint64_t)PaymentTransaction, 0);
      [v9 addObject:v10];

      uint64_t v11 = sub_1004AC21C((uint64_t)PaymentTransaction, v5);
      [v9 addObject:v11];

      id v12 = sub_1004B9204();
      [v9 addObject:v12];

      id v13 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v9];
      uint64_t v14 = +[SQLiteEntity queryWithDatabase:*(void *)(a1 + 32) predicate:v13 orderingProperties:&__NSArray0__struct orderingDirections:&__NSArray0__struct limit:1];
      v20[0] = @"maps_merchant_pid";
      v20[1] = @"u";
      id v15 = +[NSArray arrayWithObjects:v20 count:2];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_1004BDB98;
      v16[3] = &unk_100756398;
      id v17 = *(id *)(a1 + 40);
      id v18 = v4;
      id v19 = *(id *)(a1 + 48);
      [v14 enumeratePersistentIDsAndProperties:v15 usingBlock:v16];
    }
  }
}

void sub_1004BDB98(id *a1, uint64_t a2, void *a3, id *a4)
{
  id v11 = a3;
  id v6 = *a4;
  if (v6)
  {
    id v7 = [a1[4] objectForKeyedSubscript:v6];
    if (!v7)
    {
      id v7 = objc_alloc_init((Class)NSMutableArray);
      [a1[4] setObject:v7 forKeyedSubscript:v6];
    }
    [v7 addObject:a1[5]];

    id v8 = a4[1];
    if (!v8) {
      goto LABEL_10;
    }
  }
  else
  {
    id v8 = a4[1];
    if (!v8) {
      goto LABEL_11;
    }
  }
  id v9 = [a1[6] objectForKeyedSubscript:v8];
  if (!v9)
  {
    id v9 = objc_alloc_init((Class)NSMutableArray);
    [a1[6] setObject:v9 forKeyedSubscript:v8];
  }
  [v9 addObject:a1[5]];

LABEL_10:
  id v10 = [a1[5] merchant];
  [v10 setMapsDataIsFromLocalMatch:1];

LABEL_11:
}

BOOL sub_1004BE1C0(id a1, PKAccountPaymentFundingSource *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(PKAccountPaymentFundingSource *)a2 fundingDetails];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v5 = [v4 verificationDetails];
    id v6 = [v5 pendingAttempt];
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

id sub_1004BE248(id a1, PKAccountPaymentFundingSource *a2)
{
  return [(PKAccountPaymentFundingSource *)a2 identifier];
}

void sub_1004BE250(uint64_t a1, void *a2)
{
  v74[0] = _NSConcreteStackBlock;
  v74[1] = 3221225472;
  v74[2] = sub_1004BEAAC;
  v74[3] = &unk_10072E838;
  id v75 = *(id *)(a1 + 32);
  id v4 = objc_msgSend(a2, "pk_objectsPassingTest:", v74);
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472;
  v72[2] = sub_1004BEB48;
  v72[3] = &unk_100756490;
  id v73 = *(id *)(a1 + 40);
  uint64_t v5 = objc_msgSend(v4, "pk_arrayBySafelyApplyingBlock:", v72);

  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472;
  v70[2] = sub_1004BEC74;
  v70[3] = &unk_1007564B8;
  id v36 = objc_alloc_init((Class)NSMutableArray);
  id v71 = v36;
  id v6 = objc_retainBlock(v70);
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id obj = v5;
  id v7 = [obj countByEnumeratingWithState:&v66 objects:v81 count:16];
  uint64_t v35 = v6;
  if (v7)
  {
    id v8 = v7;
    uint64_t v39 = *(void *)v67;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v67 != v39) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v66 + 1) + 8 * i);
        id v11 = [v10 fundingSources];
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472;
        v64[2] = sub_1004BEC8C;
        v64[3] = &unk_1007564E0;
        id v65 = *(id *)(a1 + 48);
        id v12 = objc_msgSend(v11, "pk_objectsPassingTest:", v64);
        if ([v12 count])
        {
          id v13 = [v12 count];
          if (v13 == [v11 count])
          {
            uint64_t v14 = objc_msgSend(v12, "pk_arrayByApplyingBlock:", &stru_100756520);
            ((void (*)(void *, NSObject *, id))v6[2])(v6, v14, [v10 style]);
          }
          else
          {
            [v10 setFundingSources:v12];
            [*(id *)(a1 + 40) insertUserNotification:v10];
            uint64_t v14 = objc_msgSend(v12, "pk_arrayByApplyingBlock:", &stru_100756500);
            ((void (*)(void *, NSObject *, id))v6[2])(v6, v14, [v10 style]);
            uint64_t v16 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              id v17 = [v10 notificationIdentifier];
              *(_DWORD *)long long buf = 138412546;
              id v78 = v17;
              __int16 v79 = 2112;
              long long v80 = v14;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Added verification notification (%@) with removed funding sources %@", buf, 0x16u);
            }
            id v6 = v35;
          }
        }
        else
        {
          [*(id *)(a1 + 40) removeUserNotification:v10];
          uint64_t v14 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            id v15 = [v10 notificationIdentifier];
            *(_DWORD *)long long buf = 138412290;
            id v78 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Removed verification notification (%@) as no funding sources remain", buf, 0xCu);
          }
        }
      }
      id v8 = [obj countByEnumeratingWithState:&v66 objects:v81 count:16];
    }
    while (v8);
  }

  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v38 = *(id *)(a1 + 56);
  id v18 = [v38 countByEnumeratingWithState:&v60 objects:v76 count:16];
  id v20 = v36;
  if (v18)
  {
    id v21 = v18;
    uint64_t v40 = *(void *)v61;
    *(void *)&long long v19 = 138412546;
    long long v34 = v19;
    do
    {
      for (j = 0; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v61 != v40) {
          objc_enumerationMutation(v38);
        }
        unint64_t v23 = objc_msgSend(*(id *)(a1 + 56), "objectForKey:", *(void *)(*((void *)&v60 + 1) + 8 * (void)j), v34);
        v58[0] = _NSConcreteStackBlock;
        v58[1] = 3221225472;
        v58[2] = sub_1004BECE4;
        v58[3] = &unk_1007564E0;
        id v24 = v20;
        id v59 = v24;
        uint64_t v25 = objc_msgSend(v23, "pk_objectsPassingTest:", v58);
        id v26 = [v25 count];
        if (v26 == [v23 count])
        {
          id v27 = objc_alloc_init((Class)NSMutableArray);
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472;
          id v52 = sub_1004BED2C;
          id v53 = &unk_100756548;
          id v54 = *(id *)(a1 + 64);
          id v28 = v25;
          id v55 = v28;
          id v56 = *(id *)(a1 + 40);
          id v29 = v27;
          id v57 = v29;
          sub_1004BED2C((uint64_t)v51, 0);
          v52((uint64_t)v51, 1);
          id v30 = objc_msgSend(v28, "pk_arrayByApplyingBlock:", &stru_100756568);
          char v31 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = v34;
            id v78 = v29;
            __int16 v79 = 2112;
            long long v80 = v30;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Added verification notifications (%@) for funding sources %@", buf, 0x16u);
          }

          id v20 = v36;
        }
        else
        {
          if (![v25 count]) {
            goto LABEL_28;
          }
          v49[0] = _NSConcreteStackBlock;
          v49[1] = 3221225472;
          v49[2] = sub_1004BEDC8;
          v49[3] = &unk_1007564E0;
          id v50 = v24;
          id v32 = objc_msgSend(v23, "pk_objectsPassingTest:", v49);
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472;
          id v42 = sub_1004BEE10;
          objc_super v43 = &unk_1007565B0;
          id v44 = *(id *)(a1 + 32);
          id v45 = v32;
          uint64_t v46 = *(void *)(a1 + 72);
          id v47 = v23;
          id v48 = *(id *)(a1 + 40);
          id v33 = v32;
          sub_1004BEE10((uint64_t)v41, 0);
          v42((uint64_t)v41, 1);

          id v29 = v50;
        }

LABEL_28:
      }
      id v21 = [v38 countByEnumeratingWithState:&v60 objects:v76 count:16];
    }
    while (v21);
  }
}

uint64_t sub_1004BEAAC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 account];
  id v4 = [v3 accountIdentifier];
  id v5 = v2;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v9 = 1;
  }
  else
  {
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v9;
}

id sub_1004BEB48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 accountIdentifier];
  id v5 = [v3 fundingSources];
  id v6 = +[PDAccountFundingSourceVerificationReminderUserNotification identifierForAccountIdentifier:fundingSources:style:](PDAccountFundingSourceVerificationReminderUserNotification, "identifierForAccountIdentifier:fundingSources:style:", v4, v5, [v3 style]);

  id v7 = [v3 notificationIdentifier];
  id v8 = v6;
  id v9 = v7;
  if (v8 == v9)
  {

    goto LABEL_7;
  }
  id v10 = v9;
  if (v8 && v9)
  {
    unsigned __int8 v11 = [v8 isEqualToString:v9];

    if ((v11 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_7:
    id v12 = v3;
    goto LABEL_10;
  }

LABEL_9:
  [*(id *)(a1 + 32) removeUserNotification:v3];
  id v12 = 0;
LABEL_10:

  return v12;
}

id *sub_1004BEC74(id *result, uint64_t a2, uint64_t a3)
{
  if (a3 == 1) {
    return (id *)[result[4] addObjectsFromArray:a2];
  }
  return result;
}

id sub_1004BEC8C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 identifier];
  id v4 = [v2 containsObject:v3];

  return v4;
}

id sub_1004BECD4(id a1, PKAccountPaymentFundingSource *a2)
{
  return [(PKAccountPaymentFundingSource *)a2 identifier];
}

id sub_1004BECDC(id a1, PKAccountPaymentFundingSource *a2)
{
  return [(PKAccountPaymentFundingSource *)a2 identifier];
}

uint64_t sub_1004BECE4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 identifier];
  uint64_t v4 = [v2 containsObject:v3] ^ 1;

  return v4;
}

uint64_t sub_1004BED2C(uint64_t a1, uint64_t a2)
{
  id v3 = [[PDAccountFundingSourceVerificationReminderUserNotification alloc] initWithAccount:*(void *)(a1 + 32) fundingSources:*(void *)(a1 + 40) style:a2];
  uint64_t v4 = v3;
  if (v3)
  {
    id v8 = v3;
    [*(id *)(a1 + 48) insertUserNotification:v3];
    id v5 = *(void **)(a1 + 56);
    id v6 = [(PDUserNotification *)v8 notificationIdentifier];
    [v5 addObject:v6];

    uint64_t v4 = v8;
  }
  return _objc_release_x1(v3, v4);
}

id sub_1004BEDC0(id a1, PKAccountPaymentFundingSource *a2)
{
  return [(PKAccountPaymentFundingSource *)a2 identifier];
}

id sub_1004BEDC8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 identifier];
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_1004BEE10(uint64_t a1, uint64_t a2)
{
  id v3 = +[PDAccountFundingSourceVerificationReminderUserNotification identifierForAccountIdentifier:*(void *)(a1 + 32) fundingSources:*(void *)(a1 + 40) style:a2];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1004BEEDC;
  v5[3] = &unk_10073A3F0;
  id v4 = *(void **)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 64);
  [v4 _scheduledAndDeliveredUserNotificationWithIdentifier:v3 completion:v5];
}

void sub_1004BEEDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    [v3 setFundingSources:*(void *)(a1 + 32)];
    [*(id *)(a1 + 40) insertUserNotification:v4];
    id v5 = objc_msgSend(*(id *)(a1 + 32), "pk_arrayByApplyingBlock:", &stru_100756588);
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [v4 notificationIdentifier];
      int v8 = 138412546;
      id v9 = v7;
      __int16 v10 = 2112;
      unsigned __int8 v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Added verification notification (%@) with additional funding sources %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

id sub_1004BEFF0(id a1, PKAccountPaymentFundingSource *a2)
{
  return [(PKAccountPaymentFundingSource *)a2 identifier];
}

void sub_1004BF954(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = objc_alloc_init((Class)NSMutableArray);
  [v6 addObjectsFromArray:v3];

  id v4 = [*(id *)(a1 + 32) userNotificationManager];
  id v5 = [v4 scheduledNotificationActivitiesOfType:*(void *)(a1 + 48)];

  [v6 addObjectsFromArray:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1004BFAE4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v3();
  }
  else
  {
    id v4 = [*(id *)(a1 + 32) userNotificationManager];
    id v5 = [v4 scheduledNotificationActivityWithIdentifier:*(void *)(a1 + 40)];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1004C1020(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1004C12C0(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v3 = [v11 paymentTransaction];
  unsigned int v4 = [v11 useBackgroundLocation];
  uint64_t v5 = 56;
  if (v4) {
    uint64_t v5 = 64;
  }
  id v6 = *(id *)(*(void *)(a1 + 32) + v5);
  if (sub_1004C13C0(*(void **)(a1 + 40), v6, v3))
  {
    [v11 setFoundOptimalLocation:1];
    [*(id *)(a1 + 32) _updateLocation:*(void *)(a1 + 40) forLocationUpdateItem:v11 andMarkAsProcessed:1];
  }
  else
  {
    long long v7 = [v3 transactionDate];
    [v7 timeIntervalSinceNow];
    double v9 = fabs(v8);
    double v10 = PKLocationAssertionGracePeriod;

    if (v9 > v10) {
      [*(id *)(a1 + 32) _abortUpdatingLocationForLocationUpdateItem:v11];
    }
  }
}

BOOL sub_1004C13C0(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5
    && ((unsigned __int8 v8 = [v6 _limitsPrecision], objc_msgSend(v7, "transactionType") != (id)2)
      ? (double v9 = 10.0)
      : (double v9 = 100.0),
        ([v5 horizontalAccuracy], (v8 & 1) != 0) || v10 <= v9))
  {
    id v12 = [v7 transactionDate];
    id v13 = [v5 timestamp];
    [v12 timeIntervalSinceDate:v13];
    BOOL v11 = fabs(v14) <= 30.0;
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

void sub_1004C1720(uint64_t a1)
{
  if ([*(id *)(a1 + 32) transactionSource] == (id)1)
  {
    id v2 = [*(id *)(a1 + 32) locality];
    id v3 = v2;
    if (v2)
    {
      id v4 = v2;
    }
    else
    {
      PKFakeTransactionLocality();
      id v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v5 = v4;

    id v6 = [*(id *)(a1 + 32) administrativeArea];
    id v7 = v6;
    if (v6)
    {
      id v8 = v6;
    }
    else
    {
      PKFakeTransactionAdministrativeArea();
      id v8 = (id)objc_claimAutoreleasedReturnValue();
    }
    double v9 = v8;

    double v10 = [*(id *)(a1 + 32) merchant];
    BOOL v11 = v10;
    if (v10)
    {
      id v12 = v10;
    }
    else
    {
      id v13 = PKFakeTransactionMerchant();
      if ([v13 length])
      {
        id v12 = objc_alloc_init((Class)PKMerchant);
        [v12 setName:v13];
      }
      else
      {
        id v12 = 0;
      }
    }
    [*(id *)(a1 + 32) setLocality:v5];
    [*(id *)(a1 + 32) setAdministrativeArea:v9];
    [*(id *)(a1 + 32) setMerchant:v12];
  }
  double v14 = *(void **)(a1 + 32);
  id v15 = [v14 currencyCode];
  if (v15)
  {
    [v14 setCurrencyCode:v15];
  }
  else
  {
    uint64_t v16 = PKFakeTransactionCurrencyCode();
    [v14 setCurrencyCode:v16];
  }
  id v17 = *(void **)(a1 + 32);
  id v18 = [v17 amount];
  if (v18)
  {
    [v17 setAmount:v18];
  }
  else
  {
    long long v19 = PKFakeTransactionAmount();
    [v17 setAmount:v19];
  }
  [*(id *)(a1 + 32) setProcessedForLocation:1];
  [*(id *)(a1 + 32) setProcessedForStations:1];
  [*(id *)(a1 + 32) setProcessedForMerchantCleanup:1];
  objc_msgSend(*(id *)(a1 + 32), "setTransactionSource:", objc_msgSend(*(id *)(a1 + 32), "transactionSource"));
  [*(id *)(a1 + 32) setHasNotificationServiceData:1];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1004C199C;
  v21[3] = &unk_100756650;
  id v20 = *(void **)(a1 + 40);
  id v22 = *(id *)(a1 + 32);
  id v23 = *(id *)(a1 + 48);
  [v20 _accessObserversWithHandler:v21];
}

id sub_1004C199C(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

id sub_1004C1AD0(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

id sub_1004C1F2C(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

id sub_1004C1F38(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

void sub_1004C270C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 paymentTransactionProcessorDidActivate:*(void *)(a1 + 32)];
  }
}

void sub_1004C276C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 paymentTransactionProcessorDidDeactivate:*(void *)(a1 + 32)];
  }
}

BOOL sub_1004C2ACC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5
    && ((unsigned __int8 v8 = [v6 _limitsPrecision],
         [v5 horizontalAccuracy],
         (v8 & 1) != 0)
     || v9 <= kCLLocationAccuracyThreeKilometers))
  {
    BOOL v11 = [v7 transactionDate];
    id v12 = [v5 timestamp];
    [v11 timeIntervalSinceDate:v12];
    BOOL v10 = fabs(v13) <= 300.0;
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

id sub_1004C30F0(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

id sub_1004C3738(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _abortUpdatingLocationForLocationUpdateItem:a2];
}

id sub_1004C37F4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _abortUpdatingLocationForLocationUpdateItem:a2];
}

id sub_1004C395C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Location Update Timeout Timer Fired", v4, 2u);
  }

  return [*(id *)(a1 + 32) _abortUpdatingLocationForAllLocationUpdateItems];
}

id sub_1004C3B30(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Location Update Timeout Timer Fired", v4, 2u);
  }

  return [*(id *)(a1 + 32) _abortUpdatingLocationForAllBackgroundLocationUpdateItems];
}

void sub_1004C3DD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1004C3EBC;
  void v11[3] = &unk_100730198;
  unsigned __int8 v8 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v8;
  id v13 = v5;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, v11);
}

void sub_1004C3EBC(uint64_t a1)
{
  uint64_t v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v2 = *(void **)(*(void *)(v1 + 32) + 32);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1004C433C;
  v37[3] = &unk_1007566C8;
  id v38 = *(id *)(v1 + 40);
  uint64_t v3 = [v2 indexesOfObjectsPassingTest:v37];
  id v4 = [*(id *)(*(void *)(v1 + 32) + 32) objectsAtIndexes:v3];
  id v26 = (void *)v3;
  [*(id *)(*(void *)(v1 + 32) + 32) removeObjectsAtIndexes:v3];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v1 + 32) + 8));
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Finished Reverse Geocode:", buf, 2u);
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v4 count];
    *(_DWORD *)long long buf = 134217984;
    id v41 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "\tMatched Items: %lu", buf, 0xCu);
  }

  id v7 = [*(id *)(v1 + 48) firstObject];
  if (!v7 || *(void *)(v1 + 56))
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v8 = *(void **)(v1 + 56);
      *(_DWORD *)long long buf = 138412290;
      id v41 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "\tError Reverse Geocoding Transaction Location: %@", buf, 0xCu);
    }
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v9 = v4;
  id v10 = [v9 countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v34;
    uint64_t v27 = *(void *)v34;
    do
    {
      id v13 = 0;
      id v28 = v11;
      do
      {
        if (*(void *)v34 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v13);
        id v15 = [v14 paymentTransaction];
        if (v7 && !*(void *)(v1 + 56))
        {
          uint64_t v16 = [v7 locality];
          [v15 setLocality:v16];

          id v17 = [v7 administrativeArea];
          [v15 setAdministrativeArea:v17];

          id v18 = [v7 ISOcountryCode];
          if ([v18 isEqualToString:@"KR"])
          {
            [v15 locality];
            id v19 = v9;
            v21 = uint64_t v20 = v1;
            id v22 = [v15 administrativeArea];
            id v23 = [v21 localizedCaseInsensitiveCompare:v22];

            uint64_t v1 = v20;
            id v9 = v19;
            uint64_t v12 = v27;

            if (!v23) {
              [v15 setAdministrativeArea:0];
            }
          }
          else
          {
          }
          id v24 = [v7 timeZone];
          [v15 setTimeZone:v24];

          uint64_t v25 = *(void **)(v1 + 32);
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472;
          void v29[2] = sub_1004C4400;
          v29[3] = &unk_1007566F0;
          id v30 = v15;
          char v31 = v14;
          id v32 = v7;
          [v25 _accessObserversWithHandler:v29];

          id v11 = v28;
        }
        [*(id *)(v1 + 32) _processItemForStationsCleanup:v14];

        id v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v33 objects:v39 count:16];
    }
    while (v11);
  }

  if ([*(id *)(*(void *)(v1 + 32) + 32) count]) {
    [*(id *)(v1 + 32) _beginReverseGeocodingIfPossible];
  }
  [*(id *)(v1 + 32) _updateActiveState];
}

BOOL sub_1004C433C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = [a2 paymentTransaction];
  [*(id *)(a1 + 32) coordinate];
  if (a3 && (uint64_t v8 = *(void *)(a1 + 32), v8 | v5))
  {
    BOOL v9 = 0;
    if (v8 && v5)
    {
      double v10 = v6;
      double v11 = v7;
      [(id)v5 locationLongitude];
      if (v12 == v11 && ([(id)v5 locationLatitude], v13 == v10))
      {
        [(id)v5 locationAltitude];
        double v15 = v14;
        [*(id *)(a1 + 32) altitude];
        BOOL v9 = v15 == v16;
      }
      else
      {
        BOOL v9 = 0;
      }
    }
  }
  else
  {
    BOOL v9 = 1;
  }

  return v9;
}

void sub_1004C4400(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) transactionSourceIdentifier];
  [v5 paymentTransactionUpdated:v3 forTransactionSourceIdentifier:v4];

  if (objc_opt_respondsToSelector()) {
    [v5 placemarkFound:*(void *)(a1 + 48) forTransaction:*(void *)(a1 + 32)];
  }
}

void sub_1004C4DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose((const void *)(v65 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1004C4E28(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

void sub_1004C4E34(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = +[PKMobileAssetManager sharedInstance];
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  _OWORD v14[2] = sub_1004C4F44;
  void v14[3] = &unk_100756740;
  id v17 = v7;
  id v15 = v6;
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v16 = v10;
  uint64_t v18 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 fetchCityStationProviderAssetForBaseProvider:v9 completionHandler:v14];
}

void sub_1004C4F44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1004C5058;
  void v12[3] = &unk_100756718;
  id v13 = v6;
  id v14 = v5;
  id v17 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 56);
  id v16 = v8;
  uint64_t v18 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_1004C5058(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      id v18 = 0;
      id v6 = +[NSDictionary dictionaryWithContentsOfURL:v5 error:&v18];
      id v7 = v18;
      if (v7) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v6 == 0;
      }
      if (v8)
      {
        uint64_t v9 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = *(void **)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v20 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error: City Station Provider error %@", buf, 0xCu);
        }

        (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
        goto LABEL_23;
      }
      id v11 = [*(id *)(a1 + 56) cityCode];
      id v12 = [v11 stringValue];

      id v13 = [(__CFString *)v6 PKStringForKey:v12];
      id v14 = v13;
      if (v13)
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), v13);
        id v15 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v16 = *(const __CFString **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v20 = v12;
          __int16 v21 = 2112;
          CFStringRef v22 = v16;
          id v17 = "City Code (%@) -> Station Provider (%@)";
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
        }
      }
      else
      {
        id v15 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412546;
          uint64_t v20 = v12;
          __int16 v21 = 2112;
          CFStringRef v22 = v6;
          id v17 = "Error: City Code (%@) is missing from mapping file:\n%@";
          goto LABEL_21;
        }
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_23:

      return;
    }
  }
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"NO";
    if (!*(void *)(a1 + 40)) {
      CFStringRef v4 = @"YES";
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v20 = v2;
    __int16 v21 = 2112;
    CFStringRef v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error: City Station Provider lookup error %@ file was missing: %@", buf, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1004C5338(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = *(void **)(*(void *)(a1 + 32) + 144);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  _OWORD v14[2] = sub_1004C545C;
  void v14[3] = &unk_1007567E0;
  uint64_t v20 = *(void *)(a1 + 64);
  id v9 = *(id *)(a1 + 40);
  id v19 = v7;
  id v15 = v9;
  id v16 = v6;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 72);
  id v17 = v10;
  uint64_t v21 = v11;
  id v18 = *(id *)(a1 + 56);
  long long v22 = *(_OWORD *)(a1 + 80);
  uint64_t v23 = *(void *)(a1 + 96);
  id v12 = v6;
  id v13 = v7;
  [v8 performHandlerOnSharedWebServiceQueue:v14];
}

void sub_1004C545C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 context];
  CFStringRef v4 = [v3 configuration];
  uint64_t v5 = [v4 stationCodeProvidersUsingLocalLookup];

  id v6 = PDDefaultQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004C55B8;
  block[3] = &unk_1007567B8;
  uint64_t v7 = *(void *)(a1 + 72);
  id v12 = v5;
  uint64_t v18 = v7;
  id v13 = *(id *)(a1 + 32);
  id v17 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 80);
  id v15 = v8;
  uint64_t v19 = v9;
  id v16 = *(id *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 104);
  id v10 = v5;
  dispatch_async(v6, block);
}

void sub_1004C55B8(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) containsObject:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  uint64_t v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = [*(id *)(a1 + 40) identifier];
      *(_DWORD *)long long buf = 138412290;
      long long v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Using Mobile asset processing for transaction for stations: %@", buf, 0xCu);
    }
    id v6 = +[PKMobileAssetManager sharedInstance];
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1004C57E4;
    void v11[3] = &unk_100756790;
    id v15 = *(id *)(a1 + 72);
    id v12 = *(id *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 88);
    id v13 = v8;
    uint64_t v16 = v9;
    id v14 = *(id *)(a1 + 64);
    long long v17 = *(_OWORD *)(a1 + 96);
    uint64_t v18 = *(void *)(a1 + 112);
    [v6 stationCodeDataForStationCodeProvider:v7 completionHandler:v11];
  }
  else
  {
    if (v4)
    {
      id v10 = [*(id *)(a1 + 40) identifier];
      *(_DWORD *)long long buf = 138412290;
      long long v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping mobile asset based station code lookup for transaction: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_1004C57E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = PDDefaultQueue();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1004C591C;
  void v12[3] = &unk_100756768;
  id v13 = v6;
  id v14 = v5;
  id v18 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 64);
  id v16 = v8;
  uint64_t v19 = v9;
  id v17 = *(id *)(a1 + 48);
  long long v20 = *(_OWORD *)(a1 + 72);
  uint64_t v21 = *(void *)(a1 + 88);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_1004C591C(void *a1)
{
  unsigned __int8 v2 = (NSString *)a1[4];
  if (v2 || !a1[5])
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v4 = @"NO";
      if (!a1[5]) {
        CFStringRef v4 = @"YES";
      }
      *(_DWORD *)long long buf = 138412546;
      id v44 = v2;
      __int16 v45 = 2112;
      CFStringRef v46 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error: Station code data error %@ file was missing: %@", buf, 0x16u);
    }

    (*(void (**)(void))(a1[9] + 16))();
  }
  else
  {
    +[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:");
    id v5 = (NSBundle *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      id v6 = +[NSString pk_stringWithBCData:a1[7]];
      uint64_t v7 = PKLocalizedStringInStationCodeBundle(v6, v5);
      uint64_t v8 = *(void *)(a1[10] + 8);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      if ([*(id *)(*(void *)(a1[10] + 8) + 40) isEqualToString:v6])
      {
        id v10 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v44 = v6;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error: Start station code mapping missing for code: %@", buf, 0xCu);
        }

        uint64_t v11 = *(void *)(a1[10] + 8);
        id v12 = *(void **)(v11 + 40);
        *(void *)(v11 + 40) = 0;
      }
      id v13 = +[NSString pk_stringWithBCData:a1[8]];
      uint64_t v14 = PKLocalizedStringInStationCodeBundle(v13, v5);
      uint64_t v15 = *(void *)(a1[11] + 8);
      id v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      if ([*(id *)(*(void *)(a1[11] + 8) + 40) isEqualToString:v13])
      {
        id v17 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v44 = v13;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Error: end station code mapping missing for code: %@", buf, 0xCu);
        }

        uint64_t v18 = *(void *)(a1[11] + 8);
        uint64_t v19 = *(void **)(v18 + 40);
        *(void *)(v18 + 40) = 0;
      }
      long long v20 = [(NSBundle *)v5 URLForResource:@"stationIdentifyingData" withExtension:@"plist"];
      id v42 = 0;
      uint64_t v21 = +[NSDictionary dictionaryWithContentsOfURL:v20 error:&v42];
      id v22 = v42;
      if (v22 || !v21)
      {
        uint64_t v40 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          id v41 = (NSString *)a1[4];
          *(_DWORD *)long long buf = 138412290;
          id v44 = v41;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Error: Station code location data error %@", buf, 0xCu);
        }

        (*(void (**)(void))(a1[9] + 16))();
      }
      else
      {
        uint64_t v23 = [v21 PKDictionaryForKey:v6];
        id v24 = v23;
        if (v23)
        {
          [v23 PKDoubleForKey:@"lat"];
          double v26 = v25;
          [v24 PKDoubleForKey:@"long"];
          if (v26 != 0.0 || v27 != 0.0)
          {
            id v28 = [objc_alloc((Class)CLLocation) initWithLatitude:v26 longitude:v27];
            uint64_t v29 = *(void *)(a1[12] + 8);
            id v30 = *(void **)(v29 + 40);
            *(void *)(v29 + 40) = v28;
          }
        }
        char v31 = [v21 PKDictionaryForKey:v13];
        id v32 = v31;
        if (v31)
        {
          [v31 PKDoubleForKey:@"lat"];
          double v34 = v33;
          [v32 PKDoubleForKey:@"long"];
          if (v34 != 0.0 || v35 != 0.0)
          {
            id v36 = [objc_alloc((Class)CLLocation) initWithLatitude:v34 longitude:v35];
            uint64_t v37 = *(void *)(a1[13] + 8);
            id v38 = *(void **)(v37 + 40);
            *(void *)(v37 + 40) = v36;
          }
        }
        (*(void (**)(void))(a1[9] + 16))();
      }
    }
    else
    {
      uint64_t v39 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Error: Station code data error - no bundle", buf, 2u);
      }

      (*(void (**)(void))(a1[9] + 16))();
    }
  }
}

void sub_1004C5E20(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)
    || *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [*(id *)(a1 + 32) identifier];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v37 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Skipping maps processing for transaction for stations as we recivied this from other sources: %@", buf, 0xCu);
    }
    v9[2](v9, v8, 0);
  }
  else
  {
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 32) identifier];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v37 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Using maps processing for transaction for stations: %@", buf, 0xCu);
    }
    id v14 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v15 = v14;
    if (*(void *)(a1 + 40)) {
      objc_msgSend(v14, "addObject:");
    }
    if (*(void *)(a1 + 48)) {
      objc_msgSend(v15, "addObject:");
    }
    id v16 = objc_alloc_init((Class)off_100807800[0]());
    [v16 setStationCodes:v15];
    [v16 setSourceIdentifier:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    id v17 = [*(id *)(a1 + 32) transactionDate];
    [v16 setTransactionDate:v17];

    id v18 = objc_alloc_init((Class)off_100807808[0]());
    [v18 _setExternalTransitLookupParameters:v16];
    id v19 = [objc_alloc(off_100807810()) initWithRequest:v18];
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    id v26[2] = sub_1004C6160;
    v26[3] = &unk_100756830;
    id v27 = v15;
    id v28 = *(id *)(a1 + 32);
    id v20 = *(id *)(a1 + 40);
    id v22 = *(void **)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    id v29 = v20;
    uint64_t v33 = v21;
    id v23 = v22;
    uint64_t v24 = *(void *)(a1 + 64);
    id v30 = v23;
    uint64_t v34 = v24;
    long long v35 = *(_OWORD *)(a1 + 80);
    id v32 = v9;
    id v31 = v8;
    id v25 = v15;
    [v19 startWithCompletionHandler:v26];
  }
}

void sub_1004C6160(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v6 && objc_msgSend(v6, "_mapkit_underlyingGEOError") != (id)-8)
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = *(char **)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v26 = v7;
      __int16 v27 = 2112;
      id v28 = v19;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "An Error Occurred While Performing Stations Update (%@): %@", buf, 0x16u);
    }
  }
  else
  {
    id v8 = [v5 mapItems];
    uint64_t v9 = (char *)[v8 count];
    id v10 = [*(id *)(a1 + 32) count];
    uint64_t v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [*(id *)(a1 + 40) identifier];
      *(_DWORD *)long long buf = 134218498;
      id v26 = v10;
      __int16 v27 = 2048;
      id v28 = v9;
      __int16 v29 = 2112;
      id v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Stations Update Response: (%lu, %lu), Transaction: %@", buf, 0x20u);
    }
    if (v9)
    {
      id v22 = v5;
      for (unint64_t i = 0; i != v9; ++i)
      {
        id v14 = [v8 objectAtIndexedSubscript:i];
        uint64_t v15 = [v14 _externalTransitStationCode];
        id v16 = [v14 name];
        id v17 = [v14 placemark];
        id v18 = [v17 location];

        if ([v16 length])
        {
          if (PKEqualObjects()) {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v16);
          }
          if (PKEqualObjects()) {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v16);
          }
        }
        if (v18)
        {
          if (PKEqualObjects()) {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v18);
          }
          if (PKEqualObjects()) {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40), v18);
          }
        }
      }
      id v5 = v22;
    }
  }

  CFStringRef v23 = @"code";
  id v20 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v7 code]);
  uint64_t v24 = v20;
  uint64_t v21 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
  PKAnalyticsSendEvent();

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_1004C64B4(uint64_t a1)
{
  unsigned __int8 v2 = PDDefaultQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004C6580;
  block[3] = &unk_100756880;
  id v3 = *(id *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v5 = (id)v6;
  long long v10 = v6;
  dispatch_async(v2, block);
}

void sub_1004C6580(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) paymentTransaction];
  [v2 setStartStation:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  [v2 setStartStationLocation:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  [v2 setEndStation:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  [v2 setEndStationLocation:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  if (*(void *)(a1 + 32))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8));
    [*(id *)(*(void *)(a1 + 40) + 40) removeObject:*(void *)(a1 + 32)];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 8));
  }
  [v2 setProcessedForStations:1];
  [v2 addUpdateReasons:128];
  id v5 = _NSConcreteStackBlock;
  uint64_t v6 = 3221225472;
  id v7 = sub_1004C66E0;
  id v8 = &unk_100756650;
  id v9 = v2;
  id v3 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v4 = v2;
  [v3 _accessObserversWithHandler:&v5];
  objc_msgSend(*(id *)(a1 + 40), "_processItemForMerchantCleanup:clearingAttempt:", *(void *)(a1 + 32), 0, v5, v6, v7, v8);
  [*(id *)(a1 + 40) _updateActiveState];
}

id sub_1004C66E0(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

id sub_1004C6B9C(uint64_t a1, void *a2)
{
  return [a2 paymentTransactionUpdated:*(void *)(a1 + 32) forTransactionSourceIdentifier:*(void *)(a1 + 40)];
}

void sub_1004C6F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PDDefaultQueue();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004C7070;
  v7[3] = &unk_1007368A0;
  id v8 = *(id *)(a1 + 32);
  id v9 = v3;
  id v5 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = v5;
  char v13 = *(unsigned char *)(a1 + 64);
  id v12 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_1004C7070(uint64_t a1)
{
  unsigned __int8 v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v22 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed maps lookup request: %@", buf, 0xCu);
  }

  id v4 = [*(id *)(a1 + 40) result];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 8));
  *(unsigned char *)(*(void *)(a1 + 48) + 97) = 0;
  if ([*(id *)(*(void *)(a1 + 48) + 48) count]) {
    [*(id *)(*(void *)(a1 + 48) + 48) removeObjectAtIndex:0];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 8));
  id v5 = [*(id *)(a1 + 56) paymentTransaction];
  [v5 setProcessedForMerchantCleanup:1];
  uint64_t v6 = [*(id *)(a1 + 40) merchant];
  uint64_t v7 = [*(id *)(a1 + 40) brand];
  if (!(v6 | v7)) {
    [v5 setRequiresMerchantReprocessing:1];
  }
  id v8 = +[NSDate date];
  [v5 setLastMerchantReprocessingDate:v8];

  [v5 addUpdateReasons:128];
  if (*(unsigned char *)(a1 + 72)) {
    [v5 addUpdateReasons:0x4000];
  }
  id v9 = [v5 merchant];
  id v10 = [*(id *)(a1 + 40) fallbackCategory];
  [v9 setFallbackcategory:v10];
  if (v4 == (id)2 && (v6 | v7) != 0)
  {
    [v9 setMapsMerchant:v6];
    [v9 setMapsBrand:v7];
    [v9 setMapsDataIsFromLocalMatch:0];
  }
  if (!v10) {
    [*(id *)(a1 + 48) _processForLocalMCCLookup:*(void *)(a1 + 56)];
  }
  if (v4 == (id)1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "The current maps look up request was throttled.", buf, 2u);
    }

    [v5 setRequiresMerchantReprocessing:1];
    [v5 setLastMerchantReprocessingDate:0];
  }
  else if (v4 == (id)2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 160));
    [WeakRetained notifyPaymentPassUsedWithTransactionInfo:v5];

    if (v6 | v7) {
      [v5 setRequiresMerchantReprocessing:0];
    }
  }
  char v13 = [*(id *)(a1 + 40) placemark];
  id v14 = *(void **)(a1 + 48);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_1004C742C;
  v17[3] = &unk_1007566F0;
  id v15 = v5;
  id v18 = v15;
  id v19 = *(id *)(a1 + 64);
  id v16 = v13;
  id v20 = v16;
  [v14 _accessObserversWithHandler:v17];
  if ([*(id *)(*(void *)(a1 + 48) + 48) count])
  {
    [*(id *)(a1 + 48) _beginMerchantCleanupIfPossible];
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed maps lookup requests", buf, 2u);
    }
  }
  [*(id *)(a1 + 48) _updateActiveState];
}

void sub_1004C742C(void *a1, void *a2)
{
  id v3 = a2;
  [v3 paymentTransactionUpdated:a1[4] forTransactionSourceIdentifier:a1[5]];
  if (a1[6] && (objc_opt_respondsToSelector() & 1) != 0) {
    [v3 placemarkFound:a1[6] forTransaction:a1[4]];
  }
}

void sub_1004C76F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004C7708(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  uint64_t v7 = [v6 paymentTransaction];
  id v8 = [v7 identifier];

  id v9 = [*(id *)(a1 + 32) identifier];
  unsigned int v10 = [v8 isEqualToString:v9];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      char v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Found pending location update item for transaction identifier: %@", (uint8_t *)&v12, 0xCu);
    }
  }
}

void sub_1004C7840(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  uint64_t v7 = [v6 paymentTransaction];
  id v8 = [v7 identifier];

  id v9 = [*(id *)(a1 + 32) identifier];
  unsigned int v10 = [v8 isEqualToString:v9];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      char v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Found pending location update item for transaction identifier: %@", (uint8_t *)&v12, 0xCu);
    }
  }
}

void sub_1004C7AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004C7AC4(uint64_t a1, void *a2, unsigned char *a3)
{
  id v6 = a2;
  uint64_t v7 = [v6 paymentTransaction];
  id v8 = [v7 identifier];

  id v9 = [*(id *)(a1 + 32) identifier];
  unsigned int v10 = [v8 isEqualToString:v9];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      char v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Found pending stations update item for transaction identifier: %@", (uint8_t *)&v12, 0xCu);
    }
  }
}

void sub_1004C7D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1004C7D48(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = [v7 paymentTransaction];
  id v9 = [v8 identifier];

  unsigned int v10 = [*(id *)(a1 + 32) identifier];
  unsigned int v11 = [v9 isEqualToString:v10];

  if (v11)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
    int v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 138412290;
      id v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Found pending merchant cleanup item for transaction identifier: %@", (uint8_t *)&v13, 0xCu);
    }
  }
}

Class sub_1004C81F4()
{
  if (qword_100808FE8 != -1) {
    dispatch_once(&qword_100808FE8, &stru_100756940);
  }
  Class result = objc_getClass("_MKLocalSearchExternalTransitLookupParameters");
  qword_100808FD8 = (uint64_t)result;
  off_100807800[0] = (uint64_t (*)())sub_1004C8258;
  return result;
}

id sub_1004C8258()
{
  return (id)qword_100808FD8;
}

void sub_1004C8264(id a1)
{
  qword_100808FE0 = (uint64_t)dlopen("/System/Library/Frameworks/MapKit.framework/MapKit", 2);
}

Class sub_1004C8290()
{
  if (qword_100808FE8 != -1) {
    dispatch_once(&qword_100808FE8, &stru_100756940);
  }
  Class result = objc_getClass("MKLocalSearchRequest");
  qword_100808FF0 = (uint64_t)result;
  off_100807808[0] = (uint64_t (*)())sub_1004C82F4;
  return result;
}

id sub_1004C82F4()
{
  return (id)qword_100808FF0;
}

Class sub_1004C8300()
{
  if (qword_100808FE8 != -1) {
    dispatch_once(&qword_100808FE8, &stru_100756940);
  }
  Class result = objc_getClass("MKLocalSearch");
  qword_100808FF8 = (uint64_t)result;
  off_100807810 = (uint64_t (*)())sub_1004C8364;
  return result;
}

id sub_1004C8364()
{
  return (id)qword_100808FF8;
}

void sub_1004C84EC(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[FeatureApplication alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(FeatureApplication *)v5 featureApplication];
  [v3 addObject:v4];
}

void sub_1004C86E8(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[FeatureApplication alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(FeatureApplication *)v5 featureApplication];
  [v3 addObject:v4];
}

id sub_1004C92DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1004C9AC4(id a1, PKFeatureApplication *a2, id a3)
{
}

void sub_1004C9ACC(id a1, PKFeatureApplication *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKFeatureApplication *)v3 setApplicationBaseURL:v4];
}

void sub_1004C9B2C(id a1, PKFeatureApplication *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplication setFeature:](v4, "setFeature:", [a3 integerValue]);
}

void sub_1004C9B84(id a1, PKFeatureApplication *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplication setApplicationState:](v4, "setApplicationState:", [a3 integerValue]);
}

void sub_1004C9BDC(id a1, PKFeatureApplication *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplication setApplicationStateReason:](v4, "setApplicationStateReason:", [a3 integerValue]);
}

void sub_1004C9C34(id a1, PKFeatureApplication *a2, id a3)
{
}

void sub_1004C9C3C(id a1, PKFeatureApplication *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplication setApplicationStateDirty:](v4, "setApplicationStateDirty:", [a3 BOOLValue]);
}

void sub_1004C9C94(id a1, PKFeatureApplication *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKFeatureApplication *)v3 setLastUpdated:v4];
}

void sub_1004C9CF4(id a1, PKFeatureApplication *a2, id a3)
{
}

void sub_1004C9CFC(id a1, PKFeatureApplication *a2, id a3)
{
}

void sub_1004C9D04(id a1, PKFeatureApplication *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplication setApplicationType:](v4, "setApplicationType:", [a3 integerValue]);
}

void sub_1004C9D5C(id a1, PKFeatureApplication *a2, id a3)
{
}

void sub_1004C9D64(id a1, PKFeatureApplication *a2, id a3)
{
}

void sub_1004C9D6C(id a1, PKFeatureApplication *a2, id a3)
{
}

void sub_1004C9D74(id a1, PKFeatureApplication *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplication setFeatureProduct:](v4, "setFeatureProduct:", [a3 integerValue]);
}

void sub_1004C9DCC(id a1, PKFeatureApplication *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplication setUpdateUserInfoSubType:](v4, "setUpdateUserInfoSubType:", [a3 integerValue]);
}

uint64_t sub_1004C9E24()
{
  swift_bridgeObjectRelease();
  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_1004C9E64(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1004C9EA8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1004C9ED8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(v2 + 16);
  void v5[4] = a1;
  void v5[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  void v5[2] = sub_1004C9E64;
  v5[3] = &unk_100756D30;
  id v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v3 waitForSetupAssistantCompletion:v4];
  _Block_release(v4);
}

BOOL sub_1004C9F90(void *a1)
{
  return object_getClass(a1) == (Class)_TtC5passd45PendingProvisioningSetupAssistantPrecondition
      && a1 != 0;
}

void *variable initialization expression of RelevantPassLiveActivityManager.currentGroups()
{
  return &_swiftEmptyDictionarySingleton;
}

id variable initialization expression of RelevantPassLiveActivityManager.defaults()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithSuiteName:v1];

  return v2;
}

unint64_t variable initialization expression of RelevantPassLiveActivityManager.dismissedGroupIdentifiersKey()
{
  return 0xD00000000000001BLL;
}

uint64_t variable initialization expression of RelevantPassLiveActivityManager.groupsLock()
{
  sub_1004CA0A4(&qword_100807820);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1004CA0A4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for PendingProvisioningSetupAssistantPrecondition()
{
  return self;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_1004CA120(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004CA130()
{
  return swift_release();
}

void sub_1004CA13C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1004CA16C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1004CA1B4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *sub_1004CA1F8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1004CA208(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1004CA214(void *a1, void *a2)
{
  return *a1 == *a2;
}

void type metadata accessor for PKProvisioningSupportDataType(uint64_t a1)
{
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void type metadata accessor for PKPendingProvisioningReceiptType(uint64_t a1)
{
}

void type metadata accessor for PKPaymentCredentialType(uint64_t a1)
{
}

void type metadata accessor for PKTriState(uint64_t a1)
{
}

uint64_t sub_1004CA28C()
{
  return sub_1004CA31C(&qword_100807AE0, type metadata accessor for PKPendingProvisioningReceiptType);
}

uint64_t sub_1004CA2D4()
{
  return sub_1004CA31C(&qword_100807AE8, type metadata accessor for PKProvisioningSupportDataType);
}

uint64_t sub_1004CA31C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for PKAppletSubcredentialCarKeyServerVersion(uint64_t a1)
{
}

void type metadata accessor for PKAppletSubcredentialCarKeyVehicleVersion(uint64_t a1)
{
}

void sub_1004CA38C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

BOOL static ProvisioningJPKISupportDataHandler.Error.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ProvisioningJPKISupportDataHandler.Error.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ProvisioningJPKISupportDataHandler.Error.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL sub_1004CA468(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1004CA47C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1004CA4C4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1004CA4F0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id ProvisioningJPKISupportDataHandler.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return [v1 init];
}

id ProvisioningJPKISupportDataHandler.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "init");
}

id ProvisioningJPKISupportDataHandler.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1004CA62C()
{
  unint64_t result = qword_100807BC0;
  if (!qword_100807BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100807BC0);
  }
  return result;
}

uint64_t type metadata accessor for ProvisioningJPKISupportDataHandler()
{
  return self;
}

unsigned char *initializeBufferWithCopyOfBuffer for ProvisioningJPKISupportDataHandler.Error(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ProvisioningJPKISupportDataHandler.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ProvisioningJPKISupportDataHandler.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004CA814);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_1004CA83C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1004CA848(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProvisioningJPKISupportDataHandler.Error()
{
  return &type metadata for ProvisioningJPKISupportDataHandler.Error;
}

uint64_t sub_1004CA860(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1004CA0A4(&qword_100807BF8);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  id v16 = (void *)swift_allocObject();
  void v16[2] = 0;
  v16[3] = 0;
  void v16[4] = a2;
  void v16[5] = a3;
  v16[6] = a4;
  v16[7] = a5;
  v16[8] = a6;
  v16[9] = a1;
  id v17 = a2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_errorRetain();
  sub_10050A148((uint64_t)v14, (uint64_t)&unk_100807C38, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_1004CA9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = a8;
  v8[8] = v12;
  void v8[5] = a6;
  v8[6] = a7;
  void v8[4] = a5;
  uint64_t v9 = type metadata accessor for Logger();
  v8[9] = v9;
  v8[10] = *(void *)(v9 - 8);
  v8[11] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1004CAA70, 0, 0);
}

uint64_t sub_1004CAA70()
{
  id v1 = sub_1004CD640();
  [v1 resetLocalKeychainItem];

  id v2 = sub_1004CD640();
  [v2 resetLocalKeychainItem];

  (*(void (**)(void))(v0 + 48))(*(void *)(v0 + 64));
  swift_task_dealloc();
  int v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1004CAD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(v8 + 523) = v18;
  *(void *)(v8 + 232) = v16;
  *(void *)(v8 + 240) = v17;
  *(unsigned char *)(v8 + 522) = v15;
  *(void *)(v8 + 216) = a7;
  *(void *)(v8 + 224) = a8;
  *(void *)(v8 + 200) = a5;
  *(void *)(v8 + 208) = a6;
  *(void *)(v8 + 192) = a4;
  uint64_t v9 = type metadata accessor for JPKIInternalTypes.UserAuthentication();
  *(void *)(v8 + 248) = v9;
  *(void *)(v8 + 256) = *(void *)(v9 - 8);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = swift_task_alloc();
  *(void *)(v8 + 280) = sub_1004CA0A4(&qword_100807C20);
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 304) = v10;
  *(void *)(v8 + 312) = *(void *)(v10 - 8);
  *(void *)(v8 + 320) = swift_task_alloc();
  *(void *)(v8 + 328) = swift_task_alloc();
  *(void *)(v8 + 336) = swift_task_alloc();
  *(void *)(v8 + 344) = swift_task_alloc();
  *(void *)(v8 + 352) = swift_task_alloc();
  *(void *)(v8 + 360) = swift_task_alloc();
  *(void *)(v8 + 368) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for JPKIInternalTypes.CertificateType();
  *(void *)(v8 + 376) = v11;
  *(void *)(v8 + 384) = *(void *)(v11 - 8);
  *(void *)(v8 + 392) = swift_task_alloc();
  *(void *)(v8 + 400) = swift_task_alloc();
  *(void *)(v8 + 408) = swift_task_alloc();
  *(void *)(v8 + 416) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for JPKIInternalTypes.InternalError();
  *(void *)(v8 + 424) = v12;
  *(void *)(v8 + 432) = *(void *)(v12 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  *(void *)(v8 + 448) = swift_task_alloc();
  *(void *)(v8 + 456) = swift_task_alloc();
  *(void *)(v8 + 464) = swift_task_alloc();
  *(void *)(v8 + 472) = sub_1004CA0A4(&qword_100807C28);
  *(void *)(v8 + 480) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1004CB0A0, 0, 0);
}

uint64_t sub_1004CB0A0()
{
  id v1 = [*(id *)(v0 + 192) uniqueID];
  if (v1)
  {
    id v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for JPKIInternalClient();
    swift_allocObject();
    *(void *)(v0 + 488) = JPKIInternalClient.init(passIdentifier:)();
    int v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v3;
    void *v3 = v0;
    v3[1] = sub_1004CB1A0;
    id v1 = *(id *)(v0 + 480);
  }
  else
  {
    __break(1u);
  }
  return JPKIInternalClient.installedCertificateTypes()(v1);
}

uint64_t sub_1004CB1A0()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1004CB29C, 0, 0);
}

uint64_t sub_1004CB29C()
{
  uint64_t v191 = v0;
  uint64_t v1 = (void *)v0;
  id v2 = *(uint64_t **)(v0 + 480);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v3 = *(uint64_t **)(v0 + 464);
    unsigned int v4 = *(uint64_t **)(v0 + 448);
    uint64_t v5 = (void *)v0;
    uint64_t v6 = *(void *)(v0 + 424);
    BOOL v7 = *(void **)(v0 + 192);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v1[54] + 32);
    v8((uint64_t)v3, v2, v1[53]);
    sub_1004CE840();
    swift_willThrowTypedImpl();
    v8((uint64_t)v4, v3, v6);
    swift_allocError();
    v8(v9, v4, v6);
    swift_errorRetain();
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain_n();
    id v10 = v7;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = v1[39];
    uint64_t v15 = v1[40];
    uint64_t v16 = v1[38];
    unint64_t v17 = v1[26];
    if (v13)
    {
      uint64_t v180 = v5[38];
      char v18 = (void *)v5[24];
      uint64_t v19 = v5[25];
      uint64_t v20 = swift_slowAlloc();
      uint64_t v176 = v15;
      uint64_t v21 = (void *)swift_slowAlloc();
      v190[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      v5[21] = sub_1004F7DDC(v19, v17, v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2112;
      v5[15] = v18;
      id v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v21 = v18;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s unable to access certificates for pass %@", (uint8_t *)v20, 0x16u);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v176, v180);
    }
    else
    {
      long long v35 = (void *)v5[24];
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    }
    id v36 = (void (*)(void))v5[27];
    sub_1004CD7CC();
    swift_allocError();
    *uint64_t v37 = 4;
    v36();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
    uint64_t v1 = v5;
LABEL_63:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v171 = (uint64_t (*)(void))v1[1];
    return v171();
  }
  uint64_t v23 = *v2;
  *(_WORD *)(v0 + 520) = 0;
  uint64_t v24 = *(void *)(v23 + 16);
  if (!v24)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain_n();
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = v1[46];
    uint64_t v42 = v1[38];
    uint64_t v43 = v1[39];
    unint64_t v44 = v1[26];
    if (v40)
    {
      uint64_t v182 = v1[38];
      uint64_t v186 = v1[46];
      uint64_t v45 = v1[25];
      CFStringRef v46 = (uint8_t *)swift_slowAlloc();
      v190[0] = swift_slowAlloc();
      *(_DWORD *)CFStringRef v46 = 136315138;
      swift_bridgeObjectRetain();
      v1[12] = sub_1004F7DDC(v45, v44, v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s unable to apply support data. No values JPKI certificates found.", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v186, v182);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    }
    id v47 = (void (*)(void))v1[27];
    sub_1004CD7CC();
    swift_allocError();
    unsigned char *v48 = 3;
    v47();
    swift_errorRelease();
    swift_release();
    goto LABEL_63;
  }
  v173 = (char *)(v0 + 520);
  v172 = (unsigned char *)(v0 + 521);
  uint64_t v25 = *(void *)(v0 + 384);
  id v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  uint64_t v26 = v25 + 16;
  __int16 v27 = v28;
  uint64_t v29 = v23 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
  unsigned int v185 = enum case for JPKIInternalTypes.CertificateType.user(_:);
  unsigned int v174 = enum case for JPKIInternalTypes.CertificateType.signing(_:);
  uint64_t v181 = *(void *)(v26 + 56);
  swift_bridgeObjectRetain();
  char v177 = 0;
  char v30 = 0;
  v189 = v1;
  do
  {
    uint64_t v32 = v1[51];
    uint64_t v31 = v1[52];
    uint64_t v33 = v1[47];
    v27(v31, v29, v33);
    v27(v32, v31, v33);
    int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 72))(v32, v33);
    if (v34 == v185)
    {
      char v177 = 1;
    }
    else
    {
      if (v34 != v174)
      {
        uint64_t v49 = v189[52];
        uint64_t v50 = v189[50];
        uint64_t v51 = v189[47];
        uint64_t v53 = v189[25];
        id v52 = (void *)v189[26];
        *((unsigned char *)v189 + 520) = v30;
        *((unsigned char *)v189 + 521) = v177;
        v27(v50, v49, v51);
        _StringGuts.grow(_:)(66);
        v189[8] = 0;
        v189[9] = 0xE000000000000000;
        v54._countAndFlagsBits = v53;
        v54._object = v52;
        String.append(_:)(v54);
        v55._object = (void *)0x800000010060C780;
        v55._countAndFlagsBits = 0xD00000000000003ELL;
        String.append(_:)(v55);
        _print_unlocked<A, B>(_:_:)();
        return _assertionFailure(_:_:file:line:flags:)();
      }
      char v30 = 1;
    }
    uint64_t v1 = v189;
    *((unsigned char *)v189 + 524) = v30;
    (*(void (**)(void, void))(v26 - 8))(v189[52], v189[47]);
    v29 += v181;
    --v24;
  }
  while (v24);
  char *v173 = v30;
  v173[1] = v177;
  swift_bridgeObjectRelease_n();
  if ((v177 & 1) == 0)
  {
    if ((v30 & 1) == 0) {
      goto LABEL_18;
    }
    if ((v173[2] & 1) == 0)
    {
LABEL_38:
      if (v173[3] == 1)
      {
        if (*v173)
        {
          id v107 = [(id)v189[29] password];
          if (v107)
          {
            v108 = v107;
            v109 = (void *)v189[30];
            uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v112 = v111;

            id v113 = [v109 password];
            if (v113)
            {
              v114 = v113;
              uint64_t v115 = v189[48];
              uint64_t v116 = v189[49];
              uint64_t v117 = v189[47];
              uint64_t v179 = v112;
              uint64_t v118 = v110;
              v119 = (uint64_t *)v189[33];
              v120 = (uint64_t *)v189[34];
              uint64_t v121 = v189[31];
              uint64_t v122 = v189[32];
              uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v184 = v124;
              uint64_t v188 = v123;

              (*(void (**)(uint64_t, void, uint64_t))(v115 + 104))(v116, v174, v117);
              uint64_t *v120 = v118;
              v120[1] = v179;
              uint64_t v125 = enum case for JPKIInternalTypes.UserAuthentication.standard(_:);
              v126 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v122 + 104);
              v126(v120, enum case for JPKIInternalTypes.UserAuthentication.standard(_:), v121);
              uint64_t *v119 = v188;
              v119[1] = v184;
              v126(v119, v125, v121);
              id v127 = (void *)swift_task_alloc();
              v189[64] = v127;
              *id v127 = v189;
              v127[1] = sub_1004CD094;
              uint64_t v77 = v189[49];
              uint64_t v78 = v189[36];
              goto LABEL_43;
            }
            swift_bridgeObjectRelease();
          }
        }
      }
      else if ((*v173 & 1) == 0)
      {
LABEL_59:
        static Logger.Provisioning.add.getter();
        swift_bridgeObjectRetain_n();
        v159 = Logger.logObject.getter();
        os_log_type_t v160 = static os_log_type_t.error.getter();
        BOOL v161 = os_log_type_enabled(v159, v160);
        uint64_t v162 = v1[41];
        uint64_t v163 = v1[38];
        uint64_t v164 = v1[39];
        unint64_t v165 = v1[26];
        if (v161)
        {
          uint64_t v166 = v189[25];
          v167 = (uint8_t *)swift_slowAlloc();
          v190[0] = swift_slowAlloc();
          *(_DWORD *)v167 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v168 = v166;
          uint64_t v1 = v189;
          v189[13] = sub_1004F7DDC(v168, v165, v190);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v159, v160, "%s was unable to update the certificates.", v167, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v162, v163);
        v169 = (void (*)(void))v1[27];
        sub_1004CD7CC();
        swift_allocError();
        unsigned char *v170 = 3;
        v169();
        swift_release();
        swift_errorRelease();
        goto LABEL_63;
      }
      v130 = (void *)v189[29];
      v131 = (void *)v189[30];
      static Logger.Provisioning.add.getter();
      swift_bridgeObjectRetain_n();
      id v132 = v130;
      id v133 = v131;
      id v134 = v132;
      id v135 = v133;
      v136 = Logger.logObject.getter();
      os_log_type_t v137 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v136, v137))
      {
        uint64_t v138 = 0x676E697373696DLL;
        id v139 = (void *)v189[29];
        unint64_t v140 = v189[26];
        uint64_t v141 = v189[25];
        uint64_t v142 = swift_slowAlloc();
        v190[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v142 = 136315906;
        swift_bridgeObjectRetain();
        v189[14] = sub_1004F7DDC(v141, v140, v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v142 + 12) = 2080;
        swift_beginAccess();
        if (*v173) {
          uint64_t v143 = 0x746E6573657270;
        }
        else {
          uint64_t v143 = 0x676E697373696DLL;
        }
        v189[10] = sub_1004F7DDC(v143, 0xE700000000000000, v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v142 + 22) = 2080;
        id v144 = [v139 password];
        uint64_t v145 = 0x676E697373696DLL;
        if (v144)
        {

          uint64_t v145 = 0x746E6573657270;
        }
        id v147 = (void *)v189[29];
        v146 = (void *)v189[30];
        v189[17] = sub_1004F7DDC(v145, 0xE700000000000000, v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v142 + 32) = 2080;
        id v148 = [v146 password];
        if (v148)
        {

          uint64_t v138 = 0x746E6573657270;
        }
        uint64_t v149 = v189[42];
        uint64_t v151 = v189[38];
        uint64_t v150 = v189[39];
        v152 = (void *)v189[30];
        v189[11] = sub_1004F7DDC(v138, 0xE700000000000000, v190);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v136, v137, "%s unexpectedly unable to configure signing certificate. Certificate: %s, Temporary password: %s Intended password: %s", (uint8_t *)v142, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v153 = v151;
        uint64_t v1 = v189;
        (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v149, v153);
      }
      else
      {
        uint64_t v154 = v189[42];
        uint64_t v155 = v189[38];
        uint64_t v156 = v189[39];
        v158 = (void *)v189[29];
        v157 = (void *)v189[30];
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v154, v155);
      }
      goto LABEL_59;
    }
LABEL_28:
    __int16 v79 = (void *)v189[29];
    long long v80 = (void *)v189[30];
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain_n();
    id v81 = v79;
    id v82 = v80;
    id v83 = v81;
    id v84 = v82;
    long long v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      os_log_type_t v187 = v86;
      long long v87 = (void *)v189[29];
      uint64_t v89 = v189[25];
      unint64_t v88 = v189[26];
      uint64_t v90 = swift_slowAlloc();
      v190[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v90 = 136315906;
      swift_bridgeObjectRetain();
      v189[20] = sub_1004F7DDC(v89, v88, v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v90 + 12) = 2080;
      swift_beginAccess();
      if (*v172) {
        uint64_t v91 = 0x746E6573657270;
      }
      else {
        uint64_t v91 = 0x676E697373696DLL;
      }
      v189[22] = sub_1004F7DDC(v91, 0xE700000000000000, v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v90 + 22) = 2080;
      id v92 = [v87 pin];
      uint64_t v93 = 0x676E697373696DLL;
      if (v92)
      {

        uint64_t v93 = 0x746E6573657270;
      }
      long long v95 = (void *)v189[29];
      long long v94 = (void *)v189[30];
      v189[23] = sub_1004F7DDC(v93, 0xE700000000000000, v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v90 + 32) = 2080;
      id v96 = [v94 pin];
      uint64_t v97 = 0x676E697373696DLL;
      if (v96)
      {

        uint64_t v97 = 0x746E6573657270;
      }
      uint64_t v98 = v189[44];
      uint64_t v99 = v189[38];
      uint64_t v100 = v189[39];
      v101 = (void *)v189[30];
      v189[16] = sub_1004F7DDC(v97, 0xE700000000000000, v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v85, v187, "%s unexpectedly unable to configure user certificate. Certificate: %s, Temporary PIN: %s Intended PIN: %s", (uint8_t *)v90, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v98, v99);
    }
    else
    {
      uint64_t v102 = v189[44];
      uint64_t v103 = v189[38];
      uint64_t v104 = v189[39];
      v106 = (void *)v189[29];
      v105 = (void *)v189[30];
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v102, v103);
    }
    goto LABEL_38;
  }
  if ((v173[2] & 1) == 0) {
    goto LABEL_28;
  }
  id v57 = [(id)v189[29] pin];
  if (!v57) {
    goto LABEL_28;
  }
  long long v58 = v57;
  id v59 = (void *)v189[30];
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;

  id v63 = [v59 pin];
  if (!v63)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  id v64 = v63;
  uint64_t v183 = v62;
  uint64_t v66 = v189[48];
  uint64_t v65 = v189[49];
  uint64_t v67 = v189[47];
  long long v69 = (uint64_t *)v189[33];
  long long v68 = (uint64_t *)v189[34];
  uint64_t v71 = v189[31];
  uint64_t v70 = v189[32];
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v175 = v73;
  uint64_t v178 = v72;

  (*(void (**)(uint64_t, void, uint64_t))(v66 + 104))(v65, v185, v67);
  *long long v68 = v60;
  v68[1] = v183;
  uint64_t v74 = enum case for JPKIInternalTypes.UserAuthentication.standard(_:);
  id v75 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v70 + 104);
  v75(v68, enum case for JPKIInternalTypes.UserAuthentication.standard(_:), v71);
  *long long v69 = v178;
  v69[1] = v175;
  v75(v69, v74, v71);
  v76 = (void *)swift_task_alloc();
  v189[63] = v76;
  void *v76 = v189;
  v76[1] = sub_1004CC614;
  uint64_t v77 = v189[49];
  uint64_t v78 = v189[37];
LABEL_43:
  uint64_t v129 = v189[33];
  uint64_t v128 = v189[34];
  return JPKIInternalClient.changeAuthorization(certificateType:prevAuthentication:newAuthentication:)(v78, v77, v128, v129);
}

uint64_t sub_1004CC614()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 392);
  uint64_t v2 = *(void *)(*(void *)v0 + 384);
  uint64_t v3 = *(void *)(*(void *)v0 + 376);
  uint64_t v4 = *(void *)(*(void *)v0 + 272);
  uint64_t v5 = *(void *)(*(void *)v0 + 264);
  uint64_t v6 = *(void *)(*(void *)v0 + 256);
  uint64_t v7 = *(void *)(*(void *)v0 + 248);
  swift_task_dealloc();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v8(v5, v7);
  v8(v4, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1004CC7F8, 0, 0);
}

uint64_t sub_1004CC7F8()
{
  uint64_t v78 = v0;
  uint64_t v1 = *(void *)(v0 + 296);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = *(void *)(v0 + 448);
    uint64_t v2 = *(void *)(v0 + 456);
    uint64_t v4 = *(void *)(v0 + 424);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 432) + 32);
    v5(v2, v1, v4);
    sub_1004CE840();
    swift_willThrowTypedImpl();
    v5(v3, v2, v4);
    uint64_t v6 = swift_allocError();
    v5(v7, v3, v4);
    swift_errorRetain();
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 312);
    unint64_t v14 = *(void *)(v0 + 208);
    if (v10)
    {
      uint64_t v71 = *(void *)(v0 + 200);
      uint64_t v73 = *(void *)(v0 + 304);
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = sub_1004F7DDC(v71, v14, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s encountered Internal Client encountered an error", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v73);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    BOOL v40 = *(void (**)(uint64_t))(v0 + 216);
    swift_errorRetain();
    v40(v6);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_25;
  }
  if ((*(unsigned char *)(v0 + 523) & 1) == 0)
  {
    if ((*(unsigned char *)(v0 + 524) & 1) == 0)
    {
LABEL_24:
      (*(void (**)(void))(v0 + 216))(0);
      swift_release();
LABEL_25:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v68 = *(uint64_t (**)(void))(v0 + 8);
      return v68();
    }
LABEL_14:
    uint64_t v42 = *(void **)(v0 + 232);
    uint64_t v41 = *(void **)(v0 + 240);
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain_n();
    id v43 = v42;
    id v44 = v41;
    id v45 = v43;
    id v46 = v44;
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      os_log_type_t v75 = v48;
      id v70 = *(id *)(v0 + 232);
      uint64_t v50 = *(void *)(v0 + 200);
      unint64_t v49 = *(void *)(v0 + 208);
      uint64_t v51 = swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315906;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 112) = sub_1004F7DDC(v50, v49, &v77);
      uint64_t v52 = 0x676E697373696DLL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v51 + 12) = 2080;
      swift_beginAccess();
      if (*(unsigned char *)(v0 + 520)) {
        uint64_t v53 = 0x746E6573657270;
      }
      else {
        uint64_t v53 = 0x676E697373696DLL;
      }
      *(void *)(v0 + 80) = sub_1004F7DDC(v53, 0xE700000000000000, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 22) = 2080;
      id v54 = [v70 password];
      uint64_t v55 = 0x676E697373696DLL;
      if (v54)
      {

        uint64_t v55 = 0x746E6573657270;
      }
      id v57 = *(void **)(v0 + 232);
      id v56 = *(void **)(v0 + 240);
      *(void *)(v0 + 136) = sub_1004F7DDC(v55, 0xE700000000000000, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v51 + 32) = 2080;
      id v58 = [v56 password];
      if (v58)
      {

        uint64_t v52 = 0x746E6573657270;
      }
      uint64_t v59 = *(void *)(v0 + 336);
      uint64_t v61 = *(void *)(v0 + 304);
      uint64_t v60 = *(void *)(v0 + 312);
      uint64_t v62 = *(void **)(v0 + 240);
      *(void *)(v0 + 88) = sub_1004F7DDC(v52, 0xE700000000000000, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v47, v75, "%s unexpectedly unable to configure signing certificate. Certificate: %s, Temporary password: %s Intended password: %s", (uint8_t *)v51, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
    }
    else
    {
      uint64_t v63 = *(void *)(v0 + 336);
      uint64_t v64 = *(void *)(v0 + 304);
      uint64_t v65 = *(void *)(v0 + 312);
      uint64_t v67 = *(void **)(v0 + 232);
      uint64_t v66 = *(void **)(v0 + 240);
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
    }
    goto LABEL_24;
  }
  if ((*(unsigned char *)(v0 + 524) & 1) == 0) {
    goto LABEL_14;
  }
  id v16 = [*(id *)(v0 + 232) password];
  if (!v16) {
    goto LABEL_14;
  }
  unint64_t v17 = v16;
  char v18 = *(void **)(v0 + 240);
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  id v22 = [v18 password];
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v23 = v22;
  uint64_t v72 = v19;
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 376);
  id v28 = *(uint64_t **)(v0 + 264);
  __int16 v27 = *(uint64_t **)(v0 + 272);
  uint64_t v29 = *(void *)(v0 + 248);
  uint64_t v30 = *(void *)(v0 + 256);
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v74 = v32;
  uint64_t v76 = v31;

  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))(v24, enum case for JPKIInternalTypes.CertificateType.signing(_:), v26);
  *__int16 v27 = v72;
  v27[1] = v21;
  uint64_t v33 = enum case for JPKIInternalTypes.UserAuthentication.standard(_:);
  int v34 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v30 + 104);
  v34(v27, enum case for JPKIInternalTypes.UserAuthentication.standard(_:), v29);
  *id v28 = v76;
  v28[1] = v74;
  v34(v28, v33, v29);
  long long v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v35;
  *long long v35 = v0;
  v35[1] = sub_1004CD094;
  uint64_t v36 = *(void *)(v0 + 392);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v39 = *(void *)(v0 + 264);
  uint64_t v38 = *(void *)(v0 + 272);
  return JPKIInternalClient.changeAuthorization(certificateType:prevAuthentication:newAuthentication:)(v37, v36, v38, v39);
}

uint64_t sub_1004CD094()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 392);
  uint64_t v2 = *(void *)(*(void *)v0 + 384);
  uint64_t v3 = *(void *)(*(void *)v0 + 376);
  uint64_t v4 = *(void *)(*(void *)v0 + 272);
  uint64_t v5 = *(void *)(*(void *)v0 + 264);
  uint64_t v6 = *(void *)(*(void *)v0 + 256);
  uint64_t v7 = *(void *)(*(void *)v0 + 248);
  swift_task_dealloc();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v8(v5, v7);
  v8(v4, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1004CD278, 0, 0);
}

uint64_t sub_1004CD278()
{
  id v22 = v0;
  uint64_t v1 = v0[36];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = v0[55];
    uint64_t v2 = v0[56];
    uint64_t v4 = v0[53];
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[54] + 32);
    v5(v3, v1, v4);
    sub_1004CE840();
    swift_willThrowTypedImpl();
    v5(v2, v3, v4);
    uint64_t v6 = swift_allocError();
    v5(v7, v2, v4);
    swift_errorRetain();
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[43];
    uint64_t v12 = v0[38];
    uint64_t v13 = v0[39];
    unint64_t v14 = v0[26];
    if (v10)
    {
      uint64_t v19 = v0[25];
      uint64_t v20 = v0[38];
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      v0[19] = sub_1004F7DDC(v19, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s encountered Internal Client encountered an error", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v20);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }
    id v16 = (void (*)(uint64_t))v0[27];
    swift_errorRetain();
    v16(v6);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    ((void (*)(void))v0[27])(0);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

id sub_1004CD640()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v0 = objc_allocWithZone((Class)PKKeychainItemWrapper);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v0 initWithIdentifier:v1 accessGroup:v2 serviceName:v3 type:0 invisible:0];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 setLabel:v5];
  }
  else
  {
    sub_1004CD7CC();
    swift_allocError();
    unsigned char *v6 = 0;
    swift_willThrow();
  }
  return v4;
}

unint64_t sub_1004CD7CC()
{
  unint64_t result = qword_100807BF0;
  if (!qword_100807BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100807BF0);
  }
  return result;
}

id sub_1004CD820()
{
  id result = sub_1004CD640();
  if (!v0)
  {
    NSString v2 = result;
    if ([result objectForKey:kSecValueData])
    {
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
    }
    else
    {

      long long v4 = 0u;
      long long v5 = 0u;
    }
    sub_1004CEB40((uint64_t)&v4, (uint64_t)v6);
    sub_1004CEB40((uint64_t)v6, (uint64_t)&v4);
    if (*((void *)&v5 + 1))
    {
      if (swift_dynamicCast()) {
        return (id)v3;
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_1004CEBA8((uint64_t)&v4);
      return 0;
    }
  }
  return result;
}

id sub_1004CD91C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4);
  id v5 = sub_1004CD820();
  unint64_t v7 = v6;
  if (v6 >> 60 == 15) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v5;
  id v10 = objc_allocWithZone((Class)PKProvisioningJPKISupportData);
  id v11 = a2;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = [v10 initByUnarchivingData:isa ofType:a1 forPass:v11];

  sub_1004CEAD4(v9, v7);
  return v8;
}

void sub_1004CDBEC(void *a1)
{
  if ([a1 supportDataType] == (id)1 && (self, (uint64_t v3 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v4 = (void *)v3;
    id v16 = 0;
    id v5 = a1;
    id v6 = [v4 archiveForKeychainWithError:&v16];
    id v7 = v16;
    if (v6)
    {
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      [v4 type];
      id v11 = sub_1004CD640();
      if (!v1)
      {
        uint64_t v12 = v11;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        [v12 setObject:isa forKey:kSecValueData];
      }
      sub_1004CEAE8(v8, v10);
    }
    else
    {
      uint64_t v15 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    sub_1004CD7CC();
    swift_allocError();
    *unint64_t v14 = 1;
    swift_willThrow();
  }
}

void sub_1004CDD94(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1004CA0A4(&qword_100807BF8);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = (char *)v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  id v16 = a4;
  id v17 = [a1 secureElementPass];
  if (!v17) {
    goto LABEL_10;
  }
  uint64_t v72 = v17;
  id v18 = [v17 devicePrimaryPaymentApplication];
  if (!v18
    || (uint64_t v19 = v18,
        id v20 = [v18 paymentNetworkIdentifier],
        uint64_t v71 = v9,
        id v21 = v20,
        v19,
        v21 != (id)138))
  {

LABEL_10:
    sub_1004CD7CC();
    uint64_t v38 = swift_allocError();
    *uint64_t v39 = 2;
    sub_1004CF158(v38, a3, v16);
    swift_errorRelease();
    swift_release();
    return;
  }
  id v70 = sub_1004CD91C(1, v72);
  if (v70)
  {
    id v22 = sub_1004CD91C(0, v72);
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v74 = 0;
      unint64_t v75 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      uint64_t v74 = 91;
      unint64_t v75 = 0xE100000000000000;
      id v24 = [v23 sid];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      __int16 v27 = v26;

      v28._countAndFlagsBits = v25;
      v28._object = v27;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._object = (void *)0x800000010060C720;
      v29._countAndFlagsBits = 0xD000000000000025;
      String.append(_:)(v29);
      uint64_t v31 = v74;
      unint64_t v30 = v75;
      uint64_t v32 = (void *)swift_allocObject();
      v32[2] = a2;
      v32[3] = v31;
      uint64_t v68 = v31;
      void v32[4] = v30;
      void v32[5] = sub_1004CE588;
      v32[6] = v15;
      unint64_t v33 = v30;
      swift_bridgeObjectRetain();
      swift_retain();
      id v67 = a2;
      id v34 = v70;
      id v35 = [v70 pin];
      id v69 = v23;
      if (v35 && (v35, (id v36 = [v23 pin]) != 0))
      {

        int v37 = 1;
      }
      else
      {
        int v37 = 0;
      }
      id v43 = [v34 password];
      if (v43)
      {

        id v44 = [v69 password];
        if (v44)
        {

          char v45 = 1;
LABEL_23:
          uint64_t v46 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v14, 1, 1, v46);
          uint64_t v47 = swift_allocObject();
          *(void *)(v47 + 16) = 0;
          *(void *)(v47 + 24) = 0;
          uint64_t v48 = v68;
          *(void *)(v47 + 32) = a1;
          *(void *)(v47 + 40) = v48;
          *(void *)(v47 + 48) = v33;
          *(void *)(v47 + 56) = sub_1004CE5D8;
          *(void *)(v47 + 64) = v32;
          *(unsigned char *)(v47 + 72) = v37;
          id v49 = v69;
          *(void *)(v47 + 80) = v34;
          *(void *)(v47 + 88) = v49;
          *(unsigned char *)(v47 + 96) = v45;
          id v50 = a1;
          swift_retain();
          id v51 = v34;
          id v52 = v49;
          sub_10050A148((uint64_t)v14, (uint64_t)&unk_100807C18, v47);
          swift_release();
          swift_release();
          swift_release();

          return;
        }
        if (!v37) {
          goto LABEL_25;
        }
      }
      else if ((v37 & 1) == 0)
      {
LABEL_25:
        static Logger.Provisioning.add.getter();
        swift_bridgeObjectRetain_n();
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          unint64_t v55 = v33;
          id v56 = (uint8_t *)swift_slowAlloc();
          uint64_t v66 = swift_slowAlloc();
          uint64_t v74 = v66;
          *(_DWORD *)id v56 = 136315138;
          v65[1] = v56 + 4;
          swift_bridgeObjectRetain();
          uint64_t v73 = sub_1004F7DDC(v68, v55, &v74);
          id v34 = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s unable to apply support data. No valid support data found.", v56, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v57 = v11;
          uint64_t v58 = v68;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v57, v8);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v11, v8);
          uint64_t v58 = v68;
          unint64_t v55 = v33;
        }
        sub_1004CD7CC();
        uint64_t v59 = swift_allocError();
        *uint64_t v60 = 3;
        uint64_t v61 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v14, 1, 1, v61);
        uint64_t v62 = (void *)swift_allocObject();
        v62[2] = 0;
        v62[3] = 0;
        uint64_t v63 = v67;
        v62[4] = v67;
        v62[5] = v58;
        v62[6] = v55;
        v62[7] = sub_1004CE588;
        v62[8] = v15;
        v62[9] = v59;
        swift_bridgeObjectRetain();
        swift_retain();
        id v64 = v63;
        swift_errorRetain();
        sub_10050A148((uint64_t)v14, (uint64_t)&unk_100807C08, (uint64_t)v62);
        swift_release();
        swift_errorRelease();
        swift_release();

        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      char v45 = 0;
      goto LABEL_23;
    }
  }
  sub_1004CD7CC();
  uint64_t v40 = swift_allocError();
  *uint64_t v41 = 0;
  sub_1004CF158(v40, a3, v16);
  swift_errorRelease();
  swift_release();
  uint64_t v42 = v72;
}

uint64_t sub_1004CE550()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004CE588(uint64_t a1)
{
  return sub_1004CF158(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1004CE590()
{
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004CE5D8(uint64_t a1)
{
  return sub_1004CA860(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1004CE5EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  id v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *id v11 = v2;
  v11[1] = sub_1004CEC08;
  return sub_1004CA9A0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1004CE6D8()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1004CE738(uint64_t a1)
{
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v4 = v1[5];
  uint64_t v10 = v1[4];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v7 = v1[8];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1004CEC08;
  return sub_1004CAD84(a1, v12, v11, v10, v4, v5, v6, v7);
}

unint64_t sub_1004CE840()
{
  unint64_t result = qword_100807C30;
  if (!qword_100807C30)
  {
    type metadata accessor for JPKIInternalTypes.InternalError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100807C30);
  }
  return result;
}

uint64_t sub_1004CE89C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_errorRelease();
  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1004CE8F4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1004CE9E0;
  return sub_1004CA9A0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1004CE9E0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1004CEAD4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1004CEAE8(a1, a2);
  }
  return a1;
}

uint64_t sub_1004CEAE8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1004CEB40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004CA0A4(&qword_100807C40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004CEBA8(uint64_t a1)
{
  uint64_t v2 = sub_1004CA0A4(&qword_100807C40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004CEC10(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void), uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v27 - 8);
  uint64_t v13 = __chkstk_darwin(v27);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v16 = (uint64_t *)(a7 + 16);
  id v17 = [a5 supportDataType];
  id v18 = v17;
  if (*(void *)(a6 + 16) && (uint64_t v19 = sub_1004EA0B4(v17), (v20 & 1) != 0))
  {
    void v26[4] = *(void *)(*(void *)(a6 + 56) + 16 * v19);
    swift_unknownObjectRetain();
    sub_1004CDBEC(a5);
    a3(a2, 0);
    return swift_unknownObjectRelease();
  }
  else
  {
    static Logger.Provisioning.add.getter();
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134217984;
      id v28 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "ProvisioningSupportDataManager failed to save support data, failing to locate handler of type %lu", v23, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v27);
    sub_1004D09A8();
    uint64_t v24 = swift_allocError();
    swift_beginAccess();
    *id v16 = v24;
    swift_errorRelease();
    return ((uint64_t (*)(uint64_t, void))a3)(a2, 0);
  }
}

uint64_t sub_1004CF018(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    swift_beginAccess();
    uint64_t v8 = *(void *)(a6 + 16);
    swift_errorRetain();
    a4(v8);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1004CF158(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Logger.Provisioning.add.getter();
    id v11 = a3;
    swift_errorRetain();
    id v12 = v11;
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = v7;
      uint64_t v16 = v15;
      id v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134218498;
      uint64_t v24 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t v23 = v6;
      uint64_t v24 = (uint64_t)v12;
      id v18 = v12;
      id v21 = v13;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v17 = v12;

      *(_WORD *)(v16 + 22) = 2112;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v24 = v20;
      uint64_t v6 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v17[1] = v20;
      uint64_t v13 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ProvisioningSupportDataManager failed to apply support data type %lu to pass %@ with error %@", (uint8_t *)v16, 0x20u);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v7 = v22;
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t static ProvisioningSupportDataManager.Error.__derived_enum_equals(_:_:)()
{
  return 1;
}

void ProvisioningSupportDataManager.Error.hash(into:)()
{
}

Swift::Int ProvisioningSupportDataManager.Error.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004CF4C4()
{
  return Hasher._finalize()();
}

id sub_1004CF544(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      return [objc_allocWithZone((Class)type metadata accessor for ProvisioningJPKISupportDataHandler()) init];
    }
    else
    {
      static Logger.Provisioning.add.getter();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 134217984;
        v10[1] = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "ProvisioningSupportDataManager failed to resolve known support data type %lu", v8, 0xCu);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
  }
  return (id)a1;
}

uint64_t sub_1004CF6F8(unint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v2 - 8);
  uint64_t v44 = v2;
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v42 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v40 - v5;
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      uint64_t v41 = v6;
      unint64_t v46 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
      uint64_t v8 = (char *)&_swiftEmptyDictionarySingleton;
      uint64_t v9 = 4;
      uint64_t v45 = v7;
      while (1)
      {
        if (v46) {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v11 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v9);
        }
        id v12 = v11;
        uint64_t v13 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
        os_log_type_t v14 = (char *)[v11 supportDataType];
        uint64_t v15 = v14;
        if (*((void *)v8 + 2))
        {
          uint64_t v6 = v8;
          sub_1004EA0B4(v14);
          if (v16)
          {

            goto LABEL_6;
          }
        }
        if (v15 != (char *)1)
        {
          if (v15)
          {
            uint64_t v31 = v41;
            static Logger.Provisioning.add.getter();
            uint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v32, v33))
            {
              id v34 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)id v34 = 134217984;
              uint64_t v31 = v41;
              uint64_t v47 = v15;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "ProvisioningSupportDataManager failed to resolve known support data type %lu", v34, 0xCu);
              swift_slowDealloc();
            }

            (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v44);
          }

          swift_bridgeObjectRelease();
LABEL_40:
          swift_bridgeObjectRelease();
          return 0;
        }
        unint64_t v17 = isUniquelyReferenced_nonNull_native;
        id v18 = [objc_allocWithZone((Class)type metadata accessor for ProvisioningJPKISupportDataHandler()) init];
        swift_unknownObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v47 = v8;
        uint64_t v6 = v8;
        unint64_t v20 = sub_1004EA0B4(1);
        uint64_t v21 = *((void *)v8 + 2);
        BOOL v22 = (v19 & 1) == 0;
        uint64_t v23 = v21 + v22;
        if (__OFADD__(v21, v22)) {
          goto LABEL_32;
        }
        char v24 = v19;
        if (*((void *)v8 + 3) >= v23)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v8 = v47;
            if ((v19 & 1) == 0) {
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v6 = (char *)&v47;
            sub_100503A40();
            uint64_t v8 = v47;
            if ((v24 & 1) == 0) {
              goto LABEL_22;
            }
          }
        }
        else
        {
          sub_100502E24(v23, isUniquelyReferenced_nonNull_native);
          uint64_t v6 = v47;
          uint64_t v25 = sub_1004EA0B4(1);
          if ((v24 & 1) != (v26 & 1))
          {
            type metadata accessor for PKProvisioningSupportDataType(0);
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v20 = v25;
          uint64_t v8 = v47;
          if ((v24 & 1) == 0)
          {
LABEL_22:
            *(void *)&v8[8 * (v20 >> 6) + 64] |= 1 << v20;
            *(void *)(*((void *)v8 + 6) + 8 * v20) = 1;
            uint64_t v27 = (void *)(*((void *)v8 + 7) + 16 * v20);
            *uint64_t v27 = v18;
            v27[1] = &off_100756E38;
            uint64_t v28 = *((void *)v8 + 2);
            BOOL v29 = __OFADD__(v28, 1);
            uint64_t v30 = v28 + 1;
            if (v29) {
              goto LABEL_33;
            }
            *((void *)v8 + 2) = v30;
            goto LABEL_5;
          }
        }
        uint64_t v10 = (void *)(*((void *)v8 + 7) + 16 * v20);
        swift_unknownObjectRelease();
        *uint64_t v10 = v18;
        v10[1] = &off_100756E38;
LABEL_5:

        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = v17;
        uint64_t v7 = v45;
LABEL_6:
        ++v9;
        if (v13 == v7) {
          goto LABEL_36;
        }
      }
    }
  }
  uint64_t v8 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_36:
  swift_bridgeObjectRelease();
  if (!*((void *)v8 + 2))
  {
    id v35 = v42;
    static Logger.Provisioning.add.getter();
    id v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "ProvisioningSupportDataManager failed to generate data handers", v38, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v44);
    goto LABEL_40;
  }
  return (uint64_t)v8;
}

void _s5passd30ProvisioningSupportDataManagerC4save07supportD010completionySaySo014PKProvisioningcD0CG_ys5Error_pSgcSgtF_0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v8) {
      return;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v8) {
      return;
    }
  }
  static Logger.Provisioning.add.getter();
  swift_bridgeObjectRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v11 = 134217984;
    aBlock = (void **)v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "ProvisioningSupportDataManager attempting to save %ld support data", v11, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v12 = sub_1004CF6F8(a1);
  if (v12)
  {
    uint64_t v13 = v12;
    id v32 = [objc_allocWithZone((Class)PKAsyncUnaryOperationComposer) init];
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      if (!v15)
      {
LABEL_17:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v22 = [objc_allocWithZone((Class)NSNull) init];
        uint64_t v23 = (void *)swift_allocObject();
        uint64_t v25 = v30;
        uint64_t v24 = v31;
        v23[2] = v30;
        void v23[3] = v24;
        void v23[4] = v14;
        os_log_type_t v37 = sub_1004D098C;
        uint64_t v38 = v23;
        aBlock = _NSConcreteStackBlock;
        uint64_t v34 = 1107296256;
        id v35 = sub_1004F4CBC;
        id v36 = &unk_100757108;
        char v26 = _Block_copy(&aBlock);
        swift_retain();
        sub_1004D0998(v25);
        swift_release();
        id v27 = v32;
        id v28 = [v32 evaluateWithInput:v22 completion:v26];
        _Block_release(v26);

        swift_release();
        swift_unknownObjectRelease();

        return;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v15) {
        goto LABEL_17;
      }
    }
    if (v15 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v16 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(a1 + 8 * v16 + 32);
      }
      id v18 = v17;
      ++v16;
      char v19 = (void *)swift_allocObject();
      void v19[2] = v18;
      v19[3] = v13;
      void v19[4] = v14;
      os_log_type_t v37 = sub_1004D0920;
      uint64_t v38 = v19;
      aBlock = _NSConcreteStackBlock;
      uint64_t v34 = 1107296256;
      id v35 = sub_1004F4BE8;
      id v36 = &unk_1007570B8;
      unint64_t v20 = _Block_copy(&aBlock);
      id v21 = v18;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v32 addOperation:v20];
      _Block_release(v20);
    }
    while (v15 != v16);
    goto LABEL_17;
  }
}

void _s5passd30ProvisioningSupportDataManagerC021applyPostPersonalizedcD11IfNecessary2toySo6PKPassC_tF_0(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [a1 secureElementPass];
  BOOL v7 = (BOOL)v6;
  if (v6)
  {
    id v8 = [v6 devicePrimaryPaymentApplication];

    if (v8)
    {
      id v9 = [v8 paymentNetworkIdentifier];

      BOOL v7 = v9 == (id)138;
    }
    else
    {
      BOOL v7 = 0;
    }
  }
  id v10 = sub_1004CF544(v7);
  if (v10)
  {
    id v11 = v10;
    static Logger.Provisioning.add.getter();
    uint64_t v12 = a1;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v23 = v2;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v22 = v3;
      uint64_t v16 = (uint8_t *)v15;
      unint64_t v20 = (void *)swift_slowAlloc();
      id v21 = v16;
      *(_DWORD *)uint64_t v16 = 138412290;
      uint64_t v24 = v12;
      id v17 = v12;
      uint64_t v2 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v20 = v12;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ProvisioningSupportDataManager attempting to apply support data to pass %@", v21, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = v22;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v13 = v12;
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    id v18 = v12;
    sub_1004CDD94(v18, v11, v7, v18);
    swift_unknownObjectRelease();
  }
}

id _s5passd30ProvisioningSupportDataManagerC010clearKnowncD06ofTypeySo014PKProvisioningcdI0V_tF_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  __chkstk_darwin(v4);
  id v6 = (char *)v13 - v5;
  id result = sub_1004CF544(a1);
  if (result)
  {
    static Logger.Provisioning.add.getter();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v10 = 134217984;
      void v13[4] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Clearing support data for type %lu", v10, 0xCu);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    id v11 = sub_1004CD640();
    [v11 resetLocalKeychainItem];

    id v12 = sub_1004CD640();
    [v12 resetLocalKeychainItem];

    return (id)swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_1004D0668()
{
  unint64_t result = qword_100807C48;
  if (!qword_100807C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100807C48);
  }
  return result;
}

uint64_t type metadata accessor for ProvisioningSupportDataManager()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ProvisioningSupportDataManager.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ProvisioningSupportDataManager.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004D07D0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004D07F8()
{
  return 0;
}

ValueMetadata *type metadata accessor for ProvisioningSupportDataManager.Error()
{
  return &type metadata for ProvisioningSupportDataManager.Error;
}

unint64_t sub_1004D0810()
{
  unint64_t result = qword_100807C78;
  if (!qword_100807C78)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100807C78);
  }
  return result;
}

uint64_t sub_1004D0850(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1004D0860()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004D0898(uint64_t a1)
{
  sub_100513F5C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1004D08A0()
{
  swift_errorRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D08D8()
{
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004D0920(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, void), uint64_t a4)
{
  return sub_1004CEC10(a1, a2, a3, a4, *(void **)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t sub_1004D092C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004D093C()
{
  return swift_release();
}

uint64_t sub_1004D0944()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004D098C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1004CF018(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_1004D0998(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_1004D09A8()
{
  unint64_t result = qword_100807C80;
  if (!qword_100807C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100807C80);
  }
  return result;
}

void sub_1004D0A4C()
{
  *(void *)&v0[OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v1 = OBJC_IVAR___PDPendingProvisioningManager_taskLock;
  sub_1004CA0A4(&qword_100807820);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)&v0[v1] = v2;
  uint64_t v3 = &v0[OBJC_IVAR___PDPendingProvisioningManager_taskState];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = &_swiftEmptyArrayStorage;
  *((void *)v3 + 2) = &_swiftEmptyArrayStorage;
  v3[24] = 0;
  *(void *)&v0[OBJC_IVAR___PDPendingProvisioningManager_passPersonalizationTimer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *sub_1004D0B2C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v18 = OBJC_IVAR___PDPendingProvisioningManager_taskLock;
  sub_1004CA0A4(&qword_100807820);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = 0;
  *(void *)&v9[v18] = v19;
  unint64_t v20 = &v9[OBJC_IVAR___PDPendingProvisioningManager_taskState];
  *(void *)unint64_t v20 = 0;
  *((void *)v20 + 1) = _swiftEmptyArrayStorage;
  *((void *)v20 + 2) = _swiftEmptyArrayStorage;
  v20[24] = 0;
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_passPersonalizationTimer] = 0;
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_databaseManager] = a1;
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_webServiceCoordinator] = a3;
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_peerPaymentWebServiceCoordinator] = a5;
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_notificationStreamManager] = a6;
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_cloudStoreCoordinator] = a7;
  *(void *)&v9[OBJC_IVAR___PDPendingProvisioningManager_sharingChannelManager] = a8;
  v43.receiver = v9;
  v43.super_class = (Class)type metadata accessor for PendingProvisioningManager();
  id v21 = a1;
  id v22 = a3;
  id v41 = a5;
  id v40 = a6;
  swift_unknownObjectRetain();
  id v39 = a8;
  id v23 = objc_msgSendSuper2(&v43, "init");
  uint64_t v24 = (char *)objc_allocWithZone((Class)_s33PendingProvisioningMessageManagerCMa());
  uint64_t v25 = (char *)v23;
  id v26 = a4;
  id v27 = a2;
  id v28 = a9;
  id v29 = sub_1004DC08C(v25, v26, v27, v28, v24);
  uint64_t v30 = *(void **)&v25[OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager];
  *(void *)&v25[OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager] = v29;

  [v21 markInProgressPendingProvisionings];
  id v31 = PDUtilityQueue();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v25;
  aBlock[4] = sub_1004DE170;
  aBlock[5] = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004C9E64;
  aBlock[3] = &unk_100757408;
  os_log_type_t v33 = _Block_copy(aBlock);
  uint64_t v34 = v25;
  swift_release();
  id v35 = v31;
  id v36 = v33;
  dispatch_block_t v37 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, v36);
  dispatch_async(v35, v37);

  swift_unknownObjectRelease();
  _Block_release(v36);

  return v34;
}

void sub_1004D0E38()
{
  uint64_t v1 = v0;
  id v2 = (id)PKAllPendingProvisioningTypes();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v3 + 40);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      BOOL v9 = v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v8;
      if (v9
        || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            swift_bridgeObjectRetain(),
            swift_bridgeObjectRelease(),
            (v10 & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_100504118(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v12 = _swiftEmptyArrayStorage[2];
        unint64_t v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1) {
          sub_100504118(v11 > 1, v12 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v12 + 1;
        uint64_t v13 = (char *)&_swiftEmptyArrayStorage[2 * v12];
        *((void *)v13 + 4) = v7;
        *((void *)v13 + 5) = v6;
      }
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  os_log_type_t v14 = *(void **)(v1 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v16 = [v14 pendingProvisioningsOfTypes:isa];

  if (v16)
  {
    sub_1004DE1C0(0, &qword_100807D88);
    unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v17 >> 62)) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_17:
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v18) {
        goto LABEL_30;
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18) {
    goto LABEL_30;
  }
LABEL_18:
  if (v18 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v18; ++i)
  {
    if ((v17 & 0xC000000000000001) != 0) {
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v20 = *(id *)(v17 + 8 * i + 32);
    }
    id v21 = v20;
    if ([v20 status] == (id)1 && (objc_msgSend(v21, "shouldAutoProvision") & 1) != 0)
    {
      _s13ProvisionTaskCMa();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v21;
      id v23 = v21;
      sub_1004D1FFC(v22);

      swift_release();
    }
    else
    {
    }
  }
LABEL_30:
  swift_bridgeObjectRelease();
  sub_1004D4F64(0);
}

uint64_t sub_1004D1140()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v54 = *(void *)(v2 - 8);
  uint64_t v55 = v2;
  __chkstk_darwin(v2);
  id v52 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  id v50 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v49 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v10 = (char *)v43 - v9;
  uint64_t v56 = type metadata accessor for DispatchTime();
  uint64_t v47 = *(void *)(v56 - 8);
  uint64_t v11 = __chkstk_darwin(v56);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v43 - v14;
  uint64_t v16 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t ObjectType = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (os_unfair_lock_s *)(*(void *)&v0[OBJC_IVAR___PDPendingProvisioningManager_taskLock] + 16);
  os_unfair_lock_lock(v19);
  sub_1004D934C(v1, (uint64_t)&aBlock);
  unint64_t v21 = (unint64_t)aBlock;
  unint64_t v20 = v58;
  os_unfair_lock_unlock(v19);
  if (v21)
  {
    uint64_t v22 = OBJC_IVAR___PDPendingProvisioningManager_passPersonalizationTimer;
    if (*(void *)&v1[OBJC_IVAR___PDPendingProvisioningManager_passPersonalizationTimer])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
    }
    *(void *)&v1[v22] = 0;
    swift_unknownObjectRelease();
    sub_1004DCA58(v21);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      dispatch_block_t v37 = (void *)Strong;
      sub_1004DE1C0(0, &qword_100807DE8);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v37 pendingProvisioningManagerDidFinishProvisioningWithReceipts:isa];

      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v42)
      {
LABEL_13:
        uint64_t v39 = swift_unknownObjectWeakLoadStrong();
        if (v39)
        {
          id v40 = (void *)v39;
          sub_1004DE1C0(0, &qword_100807DF0);
          Class v41 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v40 issueSecureElementPassStateChangeNotificationForNewPasses:v41];

          return swift_unknownObjectRelease();
        }
      }
    }
    else if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  id v23 = &v1[OBJC_IVAR___PDPendingProvisioningManager_taskState];
  uint64_t result = swift_beginAccess();
  if (v23[24] == 1)
  {
    uint64_t v25 = OBJC_IVAR___PDPendingProvisioningManager_passPersonalizationTimer;
    if (!*(void *)&v1[OBJC_IVAR___PDPendingProvisioningManager_passPersonalizationTimer])
    {
      uint64_t v45 = sub_1004DE1C0(0, &qword_100807DC8);
      id v44 = PDHeavyQueue();
      aBlock = (void **)&_swiftEmptyArrayStorage;
      v43[1] = sub_1004DC200(&qword_100807DD0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
      sub_1004CA0A4(&qword_100807DD8);
      sub_1004DE1FC(&qword_100807DE0, &qword_100807DD8);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      id v26 = v44;
      uint64_t v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)();

      (*(void (**)(char *, uint64_t))(ObjectType + 8))(v18, v16);
      *(void *)&v1[v25] = v27;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t ObjectType = swift_getObjectType();
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v47 = *(void *)(v47 + 8);
      ((void (*)(char *, uint64_t))v47)(v13, v56);
      uint64_t v28 = v48;
      uint64_t v29 = v49;
      uint64_t v30 = *(void (**)(char *, void, uint64_t))(v48 + 104);
      v30(v10, enum case for DispatchTimeInterval.never(_:), v49);
      *(void *)uint64_t v8 = 0;
      v30(v8, enum case for DispatchTimeInterval.nanoseconds(_:), v29);
      OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
      id v31 = *(void (**)(char *, uint64_t))(v28 + 8);
      v31(v8, v29);
      v31(v10, v29);
      ((void (*)(char *, uint64_t))v47)(v15, v56);
      uint64_t v32 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v61 = sub_1004DC280;
      uint64_t v62 = v32;
      aBlock = _NSConcreteStackBlock;
      uint64_t v58 = 1107296256;
      uint64_t v59 = sub_1004C9E64;
      uint64_t v60 = &unk_100757250;
      os_log_type_t v33 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v34 = v50;
      static DispatchQoS.unspecified.getter();
      id v35 = v52;
      sub_1004DA3C0();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)();
      _Block_release(v33);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v55);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v53);
      swift_release();
      swift_release();
      OS_dispatch_source.resume()();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_1004D1A7C(void *a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = v1;
  id v5 = [a1 provisioningState];
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = [v5 sid];

    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v10 = 0xE000000000000000;
  }
  id v11 = [a1 type];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v12 && v15 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      id v27 = a1;
      sub_1004D1EC8((uint64_t)v27);
      uint64_t v18 = *(void **)&v4[OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager];
      if (v18)
      {
        id v19 = v18;
        sub_1004FCCB0(v27);

        if ([v27 shouldAutoProvision])
        {
          _s13ProvisionTaskCMa();
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = v27;
          id v27 = v27;
          sub_1004D1FFC(v20);

          swift_release();
        }
        else
        {
        }
        swift_release();
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  self;
  unint64_t v21 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v22 = a1;
  NSString v23 = [v21 invitationURL];
  if (!v23)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = (void *)swift_allocObject();
  void v24[2] = v8;
  v24[3] = v10;
  void v24[4] = sub_1004DCE20;
  void v24[5] = v3;
  v24[6] = v21;
  v24[7] = v22;
  aBlock[4] = sub_1004DCE78;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004D8324;
  aBlock[3] = &unk_1007572C8;
  uint64_t v25 = _Block_copy(aBlock);
  id v26 = v22;
  swift_retain();
  swift_release();
  PKSharingFetchInvitationFromMailboxAddress();
  _Block_release(v25);

  swift_release();
}

void sub_1004D1DE8(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v7 = a1;
    sub_1004D1EC8((uint64_t)v7);
    uint64_t v3 = *(void **)(a2 + OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager);
    if (v3)
    {
      id v4 = v3;
      sub_1004FCCB0(v7);

      if ([v7 shouldAutoProvision])
      {
        _s13ProvisionTaskCMa();
        uint64_t v5 = swift_allocObject();
        *(void *)(v5 + 16) = v7;
        id v6 = v7;
        sub_1004D1FFC(v5);
        swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1004D1EC8(uint64_t a1)
{
  [*(id *)(v1 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager) insertOrUpdatePendingProvisioning:a1];
  id v8 = [objc_allocWithZone((Class)PKPendingProvisioningChange) initWithType:0 pendingProvisioning:a1];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = (void *)Strong;
    sub_1004CA0A4(&qword_100807D10);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1005B4130;
    *(void *)(v5 + 32) = v8;
    specialized Array._endMutation()();
    sub_1004DE1C0(0, &qword_100807D18);
    id v6 = v8;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v4 pendingProvisioningsDidChangeWithPendingProvisionings:isa];

    swift_unknownObjectRelease();
  }
}

uint64_t sub_1004D1FFC(uint64_t a1)
{
  uint64_t v64 = type metadata accessor for Logger();
  uint64_t v63 = *(void *)(v64 - 8);
  uint64_t v3 = __chkstk_darwin(v64);
  uint64_t v62 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v6 = (char *)v61 - v5;
  os_unfair_lock_t v66 = (os_unfair_lock_t)(*(void *)(v1 + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16);
  os_unfair_lock_lock(v66);
  uint64_t v65 = a1;
  id v7 = [*(id *)(a1 + 16) uniqueIdentifier];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  uint64_t v77 = 0;
  uint64_t v67 = v1;
  uint64_t v11 = v1 + OBJC_IVAR___PDPendingProvisioningManager_taskState;
  swift_beginAccess();
  v61[1] = v11 + 8;
  unint64_t v12 = swift_bridgeObjectRetain();
  BOOL v13 = sub_1004D83CC(v12, v8, v10, (uint64_t)&v77);
  swift_bridgeObjectRelease();
  id v70 = v6;
  if (!v13)
  {
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v72 = *(void *)(v14 + 16);
    if (v72)
    {
      uint64_t v71 = v14 + 32;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      unint64_t v15 = 0;
      uint64_t v68 = v14;
      uint64_t v69 = v11;
      do
      {
        if (v15 >= *(void *)(v14 + 16)) {
          goto LABEL_49;
        }
        unint64_t v16 = *(void *)(v71 + 24 * v15 + 16);
        if (v16 >> 62)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
          if (v17)
          {
LABEL_7:
            unint64_t v73 = v15;
            unint64_t v74 = v16 & 0xC000000000000001;
            uint64_t v18 = 4;
            while (1)
            {
              uint64_t v19 = v18 - 4;
              if (v74)
              {
                uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                uint64_t v21 = v18 - 3;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_48;
                }
              }
              else
              {
                uint64_t v20 = *(void *)(v16 + 8 * v18);
                swift_retain();
                uint64_t v21 = v18 - 3;
                if (__OFADD__(v19, 1))
                {
LABEL_48:
                  __break(1u);
LABEL_49:
                  __break(1u);
LABEL_50:
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_46:
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  swift_endAccess();
                  goto LABEL_47;
                }
              }
              uint64_t v22 = v17;
              uint64_t v23 = v10;
              uint64_t v24 = v8;
              id v25 = [*(id *)(v20 + 16) uniqueIdentifier];
              uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v28 = v27;

              uint64_t v8 = v24;
              uint64_t v10 = v23;
              if (v26 == v8 && v28 == v23)
              {
                swift_bridgeObjectRelease();
LABEL_21:
                swift_bridgeObjectRelease();
                uint64_t v77 = v20;
                swift_release();
LABEL_22:
                uint64_t v11 = v69;
                id v6 = v70;
                uint64_t v14 = v68;
                unint64_t v15 = v73;
                goto LABEL_25;
              }
              char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v30) {
                goto LABEL_21;
              }
              swift_release();
              ++v18;
              uint64_t v17 = v22;
              if (v21 == v22)
              {
                swift_bridgeObjectRelease();
                goto LABEL_22;
              }
            }
          }
        }
        else
        {
          uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v17) {
            goto LABEL_7;
          }
        }
        swift_bridgeObjectRelease();
LABEL_25:
        uint64_t v31 = v77;
        swift_bridgeObjectRelease();
        if (v31) {
          break;
        }
        ++v15;
      }
      while (v15 != v72);
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v32 = v77;
  uint64_t v33 = v65;
  if (!v77)
  {
    id v40 = v62;
    static Logger.Provisioning.add.getter();
    swift_retain_n();
    Class v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      objc_super v43 = (uint8_t *)swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)objc_super v43 = 136315138;
      id v44 = [*(id *)(v33 + 16) provisioningState];
      if (v44)
      {
        uint64_t v45 = v44;
        id v46 = [v44 sid];
      }
      else
      {
        id v46 = [*(id *)(v33 + 16) uniqueIdentifier];
      }
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      uint64_t v75 = sub_1004F7DDC(v57, v59, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "[%s] Queueing task", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v64);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v40, v64);
    }
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v11 + 8) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v11 + 8) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      goto LABEL_50;
    goto LABEL_46;
  }
  swift_retain();
  static Logger.Provisioning.add.getter();
  swift_retain_n();
  swift_retain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    v76[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315394;
    id v37 = [*(id *)(v33 + 16) provisioningState];
    if (v37)
    {
      uint64_t v38 = v37;
      id v39 = [v37 sid];
    }
    else
    {
      id v39 = [*(id *)(v33 + 16) uniqueIdentifier];
    }
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    uint64_t v75 = sub_1004F7DDC(v47, v49, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    id v50 = [*(id *)(v32 + 16) provisioningState];
    if (v50)
    {
      uint64_t v51 = v50;
      id v52 = [v50 sid];
    }
    else
    {
      id v52 = [*(id *)(v32 + 16) uniqueIdentifier];
    }
    uint64_t v53 = v70;
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;

    uint64_t v75 = sub_1004F7DDC(v54, v56, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Coalesced task %s into %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    (*(void (**)(char *, uint64_t))(v63 + 8))(v53, v64);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v6, v64);
  }
LABEL_47:
  os_unfair_lock_unlock(v66);
  sub_1004D4F64(0);
  return swift_release();
}

uint64_t sub_1004D295C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id v5 = [*(id *)(v2 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager) allPendingProvisionings];
    if (v5) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 pendingProvisioningsOfType:v4];

  if (!v5) {
    return 0;
  }
LABEL_3:
  sub_1004DE1C0(0, &qword_100807D88);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_1004D2BB0(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v3 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
  NSString v10 = [a1 type];
  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v11 = [a1 uniqueIdentifier];
  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  unsigned int v12 = [v9 deletePendingProvisioningOfType:v10 withUniqueIdentifier:v11];

  if (!v12) {
    return;
  }
  BOOL v13 = *(void **)(v3 + OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager);
  if (!v13)
  {
    __break(1u);
LABEL_31:
    __break(1u);
    return;
  }
  id v14 = a1;
  unint64_t v15 = v13;
  id v16 = [v14 type];
  uint64_t v17 = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  aBlock = v17;
  uint64_t v67 = v19;
  v20._countAndFlagsBits = 124;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  id v21 = [v14 uniqueIdentifier];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)&v15[OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_applicationMessageSink];
  if (v26)
  {
    swift_unknownObjectRetain();
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 unregisterMessageForIdentifier:v27];

    swift_unknownObjectRelease();
    if (a2)
    {
LABEL_9:
      uint64_t v28 = 2;
      goto LABEL_12;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    if (a2) {
      goto LABEL_9;
    }
  }
  uint64_t v28 = 3;
LABEL_12:
  id v29 = [objc_allocWithZone((Class)PKPendingProvisioningChange) initWithType:v28 pendingProvisioning:v14];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v31 = (void *)Strong;
    sub_1004CA0A4(&qword_100807D10);
    uint64_t v32 = (void **)swift_allocObject();
    *((_OWORD *)v32 + 1) = xmmword_1005B4130;
    void v32[4] = v29;
    aBlock = v32;
    specialized Array._endMutation()();
    sub_1004DE1C0(0, &qword_100807D18);
    id v33 = v29;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 pendingProvisioningsDidChangeWithPendingProvisionings:isa];

    swift_unknownObjectRelease();
  }
  if ((a2 & 1) == 0
    && [v14 status] == (id)3
    && (id v35 = [v14 provisioningState]) != 0
    && (uint64_t v36 = v35,
        id v37 = [v35 provisioningStepState],
        v36,
        v37))
  {
    uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    sub_1004CEAE8(v38, v40);
    id v41 = sub_1004D4478(v14);
    if (v41)
    {
      os_log_type_t v42 = v41;
      id v43 = sub_1004D4C24((uint64_t)v41);
      uint64_t v44 = PDOSTransactionCreate("PendingProvisioningManager.Transaction");
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = v45;
        id v70 = nullsub_40;
        uint64_t v71 = v46;
        aBlock = _NSConcreteStackBlock;
        uint64_t v67 = 1107296256;
        uint64_t v68 = sub_1004C9E64;
        uint64_t v69 = &unk_100757200;
        uint64_t v47 = _Block_copy(&aBlock);
        swift_unknownObjectRetain();
        swift_release();
        [v43 cleanUpArchivedProvisioningAndInvalidateWithCompletion:v47];

        _Block_release(v47);
        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_31;
    }
    id v48 = [v14 provisioningState];
    if (v48)
    {
      unint64_t v49 = v48;
      id v50 = [v48 sid];

      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;
    }
    else
    {
      uint64_t v51 = 0;
      unint64_t v53 = 0xE000000000000000;
    }
    static Logger.Provisioning.add.getter();
    id v54 = v14;
    swift_bridgeObjectRetain();
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    int v57 = v56;
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v58 = swift_slowAlloc();
      int v62 = v57;
      uint64_t v59 = v58;
      uint64_t v61 = (void *)swift_slowAlloc();
      uint64_t v63 = (void **)swift_slowAlloc();
      aBlock = v63;
      *(_DWORD *)uint64_t v59 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v72 = sub_1004F7DDC(v51, v53, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v59 + 12) = 2112;
      uint64_t v72 = (uint64_t)v54;
      id v60 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v61 = v54;

      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v62, "[%s] Pending: Unable to properly clean up %@", (uint8_t *)v59, 0x16u);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v65);
  }
  else
  {
  }
}

void sub_1004D33D8(void *a1)
{
  uint64_t v78 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  NSString v4 = (char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([a1 accessType] != (id)4) {
    goto LABEL_75;
  }
  id v5 = [a1 devicePaymentApplications];
  if (!v5) {
    goto LABEL_75;
  }
  uint64_t v6 = v5;
  uint64_t v77 = v4;
  uint64_t v7 = sub_1004DE1C0(0, &qword_100808300);
  sub_1004DC1B0((unint64_t *)&unk_100807DB0, &qword_100808300);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  void v65[2] = v7;
  if ((v8 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    Set.Iterator.init(_cocoa:)();
    uint64_t v8 = v88[3];
    uint64_t v67 = v88[4];
    uint64_t v10 = v88[5];
    uint64_t v11 = v88[6];
    unint64_t v12 = v88[7];
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v14 = *(void *)(v8 + 56);
    uint64_t v67 = v8 + 56;
    uint64_t v15 = ~v13;
    uint64_t v16 = -v13;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v12 = v17 & v14;
    uint64_t v10 = v15;
  }
  v65[3] = v8 & 0x7FFFFFFFFFFFFFFFLL;
  v65[1] = v10;
  int64_t v66 = (unint64_t)(v10 + 64) >> 6;
  uint64_t v84 = PKPendingProvisioningTypeCarKey;
  uint64_t v76 = (void (**)(char *, uint64_t))(v2 + 8);
  *(void *)&long long v9 = 136315138;
  long long v70 = v9;
  uint64_t v69 = (char *)&type metadata for Any + 8;
  uint64_t v79 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v68 = v8;
  while (v8 < 0)
  {
    uint64_t v22 = __CocoaSet.Iterator.next()();
    if (!v22) {
      goto LABEL_74;
    }
    uint64_t v87 = v22;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v20 = (id)v88[0];
    swift_unknownObjectRelease();
    uint64_t v18 = v11;
    uint64_t v19 = v12;
    if (!v20) {
      goto LABEL_74;
    }
LABEL_33:
    id v26 = [v20 subcredentials];
    if (v26)
    {
      NSString v27 = v26;
      id v72 = v20;
      uint64_t v73 = v19;
      uint64_t v74 = v18;
      uint64_t v28 = sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
      sub_1004DC1B0((unint64_t *)&qword_100807DC0, (unint64_t *)&unk_1008083A0);
      uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v80 = v28;
      if ((v29 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v29 = v88[8];
        uint64_t v83 = v88[9];
        uint64_t v30 = v88[10];
        uint64_t v31 = v88[11];
        unint64_t v32 = v88[12];
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v33 = -1 << *(unsigned char *)(v29 + 32);
        uint64_t v34 = *(void *)(v29 + 56);
        uint64_t v83 = v29 + 56;
        uint64_t v35 = ~v33;
        uint64_t v36 = -v33;
        if (v36 < 64) {
          uint64_t v37 = ~(-1 << v36);
        }
        else {
          uint64_t v37 = -1;
        }
        unint64_t v32 = v37 & v34;
        uint64_t v30 = v35;
      }
      uint64_t v38 = v75;
      uint64_t v81 = v29 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v71 = v30;
      int64_t v82 = (unint64_t)(v30 + 64) >> 6;
      uint64_t v85 = v29;
      if ((v29 & 0x8000000000000000) == 0) {
        goto LABEL_44;
      }
LABEL_62:
      uint64_t v46 = __CocoaSet.Iterator.next()();
      if (v46)
      {
        uint64_t v87 = v46;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v45 = (id)v88[0];
        swift_unknownObjectRelease();
        uint64_t v41 = v31;
        uint64_t v39 = v32;
        while (v45)
        {
          id v47 = [self uniqueIdentifierForSubcredential:v45];
          if (v47)
          {
            id v48 = v47;
            unint64_t v86 = v39;
            uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v51 = v50;

            static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v52 = *(void **)(v38 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
            NSString v53 = String._bridgeToObjectiveC()();
            NSString v54 = String._bridgeToObjectiveC()();
            id v55 = [v52 pendingProvisioningOfType:v53 withUniqueIdentifier:v54];

            if (v55)
            {
              sub_1004D2BB0(v55, 1);
              char v57 = v56;
              swift_bridgeObjectRelease();

              if (v57)
              {
                uint64_t v58 = v77;
                static Logger.credential.getter();
                swift_bridgeObjectRetain();
                uint64_t v59 = Logger.logObject.getter();
                os_log_type_t v60 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v59, v60))
                {
                  uint64_t v61 = swift_slowAlloc();
                  v88[0] = swift_slowAlloc();
                  *(_DWORD *)uint64_t v61 = v70;
                  swift_bridgeObjectRetain();
                  *(void *)(v61 + 4) = sub_1004F7DDC(v49, v51, v88);
                  swift_bridgeObjectRelease_n();
                  _os_log_impl((void *)&_mh_execute_header, v59, v60, "PendingProvisioningManager: Removed pending provisioning for uniqueIdentifier: %s", (uint8_t *)v61, 0xCu);
                  swift_arrayDestroy();
                  uint64_t v38 = v75;
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                }

                (*v76)(v58, v78);
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
            }
            uint64_t v31 = v41;
            uint64_t v29 = v85;
            unint64_t v32 = v86;
            if (v85 < 0) {
              goto LABEL_62;
            }
          }
          else
          {

            uint64_t v31 = v41;
            unint64_t v32 = v39;
            if (v29 < 0) {
              goto LABEL_62;
            }
          }
LABEL_44:
          if (v32)
          {
            uint64_t v39 = (v32 - 1) & v32;
            unint64_t v40 = __clz(__rbit64(v32)) | (v31 << 6);
            uint64_t v41 = v31;
          }
          else
          {
            int64_t v42 = v31 + 1;
            if (__OFADD__(v31, 1))
            {
              __break(1u);
LABEL_79:
              __break(1u);
              return;
            }
            if (v42 >= v82) {
              break;
            }
            unint64_t v43 = *(void *)(v83 + 8 * v42);
            uint64_t v41 = v31 + 1;
            if (!v43)
            {
              uint64_t v41 = v31 + 2;
              if (v31 + 2 >= v82) {
                break;
              }
              unint64_t v43 = *(void *)(v83 + 8 * v41);
              if (!v43)
              {
                uint64_t v41 = v31 + 3;
                if (v31 + 3 >= v82) {
                  break;
                }
                unint64_t v43 = *(void *)(v83 + 8 * v41);
                if (!v43)
                {
                  uint64_t v41 = v31 + 4;
                  if (v31 + 4 >= v82) {
                    break;
                  }
                  unint64_t v43 = *(void *)(v83 + 8 * v41);
                  if (!v43)
                  {
                    uint64_t v44 = v31 + 5;
                    while (v82 != v44)
                    {
                      unint64_t v43 = *(void *)(v83 + 8 * v44++);
                      if (v43)
                      {
                        uint64_t v41 = v44 - 1;
                        goto LABEL_59;
                      }
                    }
                    break;
                  }
                }
              }
            }
LABEL_59:
            uint64_t v39 = (v43 - 1) & v43;
            unint64_t v40 = __clz(__rbit64(v43)) + (v41 << 6);
          }
          id v45 = *(id *)(*(void *)(v29 + 48) + 8 * v40);
        }
      }
      sub_1004DC1A8();
      uint64_t v8 = v68;
      uint64_t v18 = v74;
      uint64_t v19 = v73;
      id v20 = v72;
    }

    uint64_t v11 = v18;
    unint64_t v12 = v19;
  }
  if (v12)
  {
    uint64_t v19 = (v12 - 1) & v12;
    unint64_t v21 = __clz(__rbit64(v12)) | (v11 << 6);
    uint64_t v18 = v11;
    goto LABEL_32;
  }
  int64_t v23 = v11 + 1;
  if (__OFADD__(v11, 1)) {
    goto LABEL_79;
  }
  if (v23 < v66)
  {
    unint64_t v24 = *(void *)(v67 + 8 * v23);
    uint64_t v18 = v11 + 1;
    if (!v24)
    {
      uint64_t v18 = v11 + 2;
      if (v11 + 2 >= v66) {
        goto LABEL_74;
      }
      unint64_t v24 = *(void *)(v67 + 8 * v18);
      if (!v24)
      {
        uint64_t v18 = v11 + 3;
        if (v11 + 3 >= v66) {
          goto LABEL_74;
        }
        unint64_t v24 = *(void *)(v67 + 8 * v18);
        if (!v24)
        {
          uint64_t v18 = v11 + 4;
          if (v11 + 4 >= v66) {
            goto LABEL_74;
          }
          unint64_t v24 = *(void *)(v67 + 8 * v18);
          if (!v24)
          {
            uint64_t v25 = v11 + 5;
            do
            {
              if (v66 == v25) {
                goto LABEL_74;
              }
              unint64_t v24 = *(void *)(v67 + 8 * v25++);
            }
            while (!v24);
            uint64_t v18 = v25 - 1;
          }
        }
      }
    }
    uint64_t v19 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_32:
    id v20 = *(id *)(*(void *)(v8 + 48) + 8 * v21);
    if (!v20) {
      goto LABEL_74;
    }
    goto LABEL_33;
  }
LABEL_74:
  sub_1004DC1A8();
LABEL_75:
  uint64_t v62 = v75;
  uint64_t v63 = (os_unfair_lock_s *)(*(void *)(v75 + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16);
  os_unfair_lock_lock(v63);
  uint64_t v64 = v62 + OBJC_IVAR___PDPendingProvisioningManager_taskState;
  swift_beginAccess();
  LODWORD(v64) = *(unsigned __int8 *)(v64 + 24);
  os_unfair_lock_unlock(v63);
  if (v64 == 1) {
    sub_1004D1140();
  }
}

uint64_t sub_1004D3D90()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager) pendingProvisioningsWithStatus:3];
  if (v1)
  {
    uint64_t v2 = v1;
    sub_1004DE1C0(0, &qword_100807D88);
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 < 0) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    {
LABEL_8:
      unint64_t v6 = swift_bridgeObjectRetain();
      uint64_t v4 = (uint64_t)sub_1004DA78C(v6, (void (*)(void *, uint64_t, unint64_t))sub_1004DBBE8);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  if ((v3 & 0x4000000000000000) != 0) {
    goto LABEL_8;
  }
  uint64_t v4 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
LABEL_7:
  uint64_t v7 = v4;
  sub_1004DA6C0(&v7);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_1004D3E94(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  id v5 = *(void **)(a1 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
  id v6 = [v5 allPendingProvisioningReceipts];
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = v6;
  sub_1004DE1C0(0, &qword_100807DE8);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v9 = [a2 uniqueID];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  swift_bridgeObjectRetain();
  char v14 = sub_1004DCEF0(v8, v11, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v14)
  {
    char v15 = 1;
  }
  else
  {
LABEL_7:
    id v16 = [v5 allPendingProvisionings];
    if (v16)
    {
      uint64_t v17 = v16;
      sub_1004DE1C0(0, &qword_100807D88);
      unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v19 = a2;
      char v15 = sub_1004DD0C4(v18, (uint64_t)v19);
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = 0;
    }
  }
  *a3 = v15 & 1;
}

id sub_1004D40CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PendingProvisioningManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PendingProvisioningManager()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for PendingProvisioningManager.TaskState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for PendingProvisioningManager.TaskState()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PendingProvisioningManager.TaskState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PendingProvisioningManager.TaskState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for PendingProvisioningManager.TaskState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PendingProvisioningManager.TaskState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PendingProvisioningManager.TaskState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PendingProvisioningManager.TaskState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PendingProvisioningManager.TaskState()
{
  return &type metadata for PendingProvisioningManager.TaskState;
}

id sub_1004D4478(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 type];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v11 == v10) {
    goto LABEL_13;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v13)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    id v18 = [a1 credential];
    return v18;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v14 == v10)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v17 == v10) {
    goto LABEL_13;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v22 == v10) {
    goto LABEL_13;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v23) {
    goto LABEL_14;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v24 == v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v44 == v10)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v51 & 1) == 0)
      {
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v8 && v58 == v10)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v59 & 1) == 0) {
            return 0;
          }
        }
        self;
        unint64_t v52 = (void *)swift_dynamicCastObjCClass();
        if (!v52) {
          return 0;
        }
        goto LABEL_42;
      }
    }
    swift_bridgeObjectRelease();
    self;
    unint64_t v52 = (void *)swift_dynamicCastObjCClass();
    if (!v52) {
      return 0;
    }
LABEL_42:
    id v18 = [v52 credential];
    return v18;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  self;
  uint64_t v26 = swift_dynamicCastObjCClass();
  if (!v26) {
    return 0;
  }
  NSString v27 = (void *)v26;
  id v28 = a1;
  NSString v29 = [v27 transportIdentifier];
  if (!v29)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v30 = [self existingForTransportIdentifier:v29];

  uint64_t v31 = *(void **)(v1 + OBJC_IVAR___PDPendingProvisioningManager_sharingChannelManager);
  id result = PDHeavyQueue();
  if (result)
  {
    unint64_t v32 = result;
    id v33 = [v31 handleForDescriptor:v30 queue:result];

    if (v33)
    {
      id v34 = v33;
      id v35 = [v27 invitation];
      id v36 = [v27 share];
      id v19 = [objc_allocWithZone((Class)PKStatefulTransferCredential) initWithSharingChannelHandle:v34 invitation:v35 share:v36];

      if (v19)
      {
        id v37 = v19;
        id v38 = [v27 originalShareURL];
        [v37 setOriginalShareURL:v38];

        id v39 = v37;
        id v40 = [v27 accountAttestationAnonymizationSalt];
        [v39 setAccountAttestationAnonymizationSalt:v40];
      }
      id v41 = [v27 provisioningState];
      if (v41)
      {
        id v42 = v41;
        if (v19)
        {
          id v43 = v19;
          id v42 = v42;
          [v43 setState:v42];
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
      id v45 = [v28 provisioningState];
      if (v45)
      {
        uint64_t v46 = v45;
        id v47 = [v45 sid];

        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v50 = v49;
      }
      else
      {
        uint64_t v48 = 0;
        unint64_t v50 = 0xE000000000000000;
      }
      static Logger.Provisioning.add.getter();
      swift_bridgeObjectRetain();
      NSString v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v61 = v48;
        uint64_t v55 = swift_slowAlloc();
        id v63 = v28;
        char v56 = (uint8_t *)v55;
        uint64_t v57 = swift_slowAlloc();
        id v62 = v30;
        uint64_t v65 = v57;
        *(_DWORD *)char v56 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v64 = sub_1004F7DDC(v61, v50, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "[%s] Pending: Failed to acquire handle", v56, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return 0;
    }
    return v19;
  }
  __break(1u);
  return result;
}

id sub_1004D4C24(uint64_t a1)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR___PDPendingProvisioningManager_webServiceCoordinator), "sharedWebService"));
  id result = [objc_allocWithZone((Class)PKPaymentProvisioningController) initWithWebService:v3];
  if (result)
  {
    uint64_t v5 = result;
    [result setCloudStoreCoordinator:*(void *)(v1 + OBJC_IVAR___PDPendingProvisioningManager_cloudStoreCoordinator)];
    id v6 = [objc_allocWithZone((Class)PKProvisioningContext) initWithEnvironment:0 provisioningController:v5 groupsController:0];
    [v6 setIsBackground:1];
    id v7 = [*(id *)(v1 + OBJC_IVAR___PDPendingProvisioningManager_peerPaymentWebServiceCoordinator) sharedPeerPaymentWebService];
    [v6 setPeerPaymentWebService:v7];

    uint64_t v8 = self;
    NSString v9 = String._bridgeToObjectiveC()();
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v8 startAnalyticsSessionForEnvironment:v9 intent:v10 referralSource:0];

    [v6 setAnalyticsSession:v11];
    id v12 = [objc_allocWithZone((Class)PKProvisioningBackgroundCoordinator) initWithSetupContext:v6 credential:a1 previouslyAcceptedTerms:0];

    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1004D4DFC(void *a1)
{
  [*(id *)(v1 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager) insertOrUpdatePendingProvisioning:a1];
  id v3 = [objc_allocWithZone((Class)PKPendingProvisioningChange) initWithType:1 pendingProvisioning:a1];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_1004CA0A4(&qword_100807D10);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1005B4130;
    *(void *)(v6 + 32) = v3;
    specialized Array._endMutation()();
    sub_1004DE1C0(0, &qword_100807D18);
    id v7 = v3;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v5 pendingProvisioningsDidChangeWithPendingProvisionings:isa];

    swift_unknownObjectRelease();
  }
  NSString v9 = *(void **)(v1 + OBJC_IVAR___PDPendingProvisioningManager_pendingProvisioningMessageManager);
  if (v9)
  {
    id v10 = v9;
    sub_1004FCCB0(a1);
  }
  else
  {
    __break(1u);
  }
}

void sub_1004D4F64(uint64_t a1)
{
  id v3 = (os_unfair_lock_s *)(*(void *)&v1[OBJC_IVAR___PDPendingProvisioningManager_taskLock] + 16);
  os_unfair_lock_lock(v3);
  sub_1004D8598(a1, (uint64_t)v1, aBlock);
  unint64_t v4 = aBlock[0];
  os_unfair_lock_unlock(v3);
  if (v4)
  {
    swift_retain();
    id v5 = PDHeavyQueue();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v1;
    aBlock[4] = (unint64_t)sub_1004DCEE8;
    aBlock[5] = v6;
    aBlock[0] = (unint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (unint64_t)sub_1004C9E64;
    aBlock[3] = (unint64_t)&unk_100757318;
    id v7 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v8 = v1;
    swift_release();
    NSString v9 = v5;
    id v10 = v7;
    dispatch_block_t v11 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, v10);
    dispatch_async(v9, v11);

    _Block_release(v10);
    swift_release_n();
  }
  else
  {
    sub_1004D1140();
  }
}

char *sub_1004D510C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v56 - v9;
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    id v12 = (void *)v11;
    id v13 = a1;
    char v14 = PKIsPhone();
    id v57 = v13;
    if (v14) {
      char v15 = 0;
    }
    else {
      char v15 = PKIsWatch() ^ 1;
    }
    unsigned __int8 v17 = [v12 securityOptions];
    char v16 = (char *)&_swiftEmptyArrayStorage;
    if ((v15 & 1) == 0 && (v17 & 1) == 0)
    {
      uint64_t v56 = v2;
      id v18 = *(void **)(v2 + OBJC_IVAR___PDPendingProvisioningManager_notificationStreamManager);
      id v19 = (objc_class *)type metadata accessor for PendingProvisioningDeviceUnlockPrecondition();
      id v20 = (char *)objc_allocWithZone(v19);
      char v21 = &v20[OBJC_IVAR____TtC5passd43PendingProvisioningDeviceUnlockPrecondition_identifier];
      *(void *)char v21 = 0xD000000000000018;
      *((void *)v21 + 1) = 0x800000010060CC20;
      id v22 = objc_allocWithZone((Class)type metadata accessor for DeviceLockStateMonitor());
      id v23 = v18;
      uint64_t v24 = v20;
      *(void *)&v24[OBJC_IVAR____TtC5passd43PendingProvisioningDeviceUnlockPrecondition_monitor] = sub_100510AD4(v23);

      v58.receiver = v24;
      v58.super_class = v19;
      id v25 = objc_msgSendSuper2(&v58, "init");

      id v26 = v25;
      char v16 = sub_1005113F4(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
      unint64_t v28 = *((void *)v16 + 2);
      unint64_t v27 = *((void *)v16 + 3);
      if (v28 >= v27 >> 1) {
        char v16 = sub_1005113F4((char *)(v27 > 1), v28 + 1, 1, v16);
      }
      *((void *)v16 + 2) = v28 + 1;
      NSString v29 = &v16[16 * v28];
      *((void *)v29 + 4) = v26;
      *((void *)v29 + 5) = &off_100757560;

      uint64_t v2 = v56;
    }
    id v30 = [v12 credentialAuthorityIdentifier];
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v33 = v32;

      id v34 = v57;
      id v35 = [v57 createdAt];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      static Date.now.getter();
      Date.timeIntervalSince(_:)();
      double v37 = v36;
      id v38 = *(void (**)(char *, uint64_t))(v5 + 8);
      v38(v8, v4);
      v38(v10, v4);
      if (fabs(v37) >= 60.0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v39 = v2;
        id v40 = *(void **)(v2 + OBJC_IVAR___PDPendingProvisioningManager_notificationStreamManager);
        type metadata accessor for PendingProvisioningPrivacyKeyAvailablePrecondition();
        swift_allocObject();
        id v41 = v40;
        id v42 = sub_10050A064(v56, v33, (uint64_t)v41);

        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v16 = sub_1005113F4(0, *((void *)v16 + 2) + 1, 1, v16);
        }
        unint64_t v44 = *((void *)v16 + 2);
        unint64_t v43 = *((void *)v16 + 3);
        uint64_t v2 = v39;
        if (v44 >= v43 >> 1) {
          char v16 = sub_1005113F4((char *)(v43 > 1), v44 + 1, 1, v16);
        }
        *((void *)v16 + 2) = v44 + 1;
        id v45 = &v16[16 * v44];
        *((void *)v45 + 4) = v42;
        *((void *)v45 + 5) = &off_100758DE0;

        swift_release();
      }
    }
    else
    {
    }
  }
  else
  {
    char v16 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v46 = *(void *)(v2 + OBJC_IVAR___PDPendingProvisioningManager_notificationStreamManager);
  type metadata accessor for PendingProvisioningSetupAssistantPrecondition();
  id v47 = (void *)swift_allocObject();
  v47[3] = 0xD00000000000001ALL;
  v47[4] = 0x800000010060CC40;
  v47[2] = [objc_allocWithZone((Class)PDSetupAssistantCompleteMonitor) initWithNotificationStreamManager:v46];
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v16 = sub_1005113F4(0, *((void *)v16 + 2) + 1, 1, v16);
  }
  unint64_t v49 = *((void *)v16 + 2);
  unint64_t v48 = *((void *)v16 + 3);
  if (v49 >= v48 >> 1) {
    char v16 = sub_1005113F4((char *)(v48 > 1), v49 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v49 + 1;
  unint64_t v50 = &v16[16 * v49];
  *((void *)v50 + 4) = v47;
  *((void *)v50 + 5) = &off_100756D10;
  type metadata accessor for PendingProvisioningConnectivityPrecondition();
  swift_allocObject();
  uint64_t v51 = sub_1004ED044(2);
  unint64_t v52 = *((void *)v16 + 2);
  unint64_t v53 = *((void *)v16 + 3);
  swift_retain();
  if (v52 >= v53 >> 1) {
    char v16 = sub_1005113F4((char *)(v53 > 1), v52 + 1, 1, v16);
  }
  *((void *)v16 + 2) = v52 + 1;
  os_log_type_t v54 = &v16[16 * v52];
  *((void *)v54 + 4) = v51;
  *((void *)v54 + 5) = &off_100757B98;
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_1004D5684(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v79 = a3;
  uint64_t v80 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v74 = *(void *)(v5 - 8);
  uint64_t v75 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  id v72 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v73 = (char *)&v70 - v8;
  os_unfair_lock_t v77 = (os_unfair_lock_t)(*(char **)((char *)&v3->isa + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16);
  os_unfair_lock_lock(v77);
  os_log_t v78 = v3;
  uint64_t v9 = (char *)v3 + OBJC_IVAR___PDPendingProvisioningManager_taskState;
  swift_beginAccess();
  uint64_t v76 = v9;
  uint64_t v10 = *((void *)v9 + 2);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(v10 + v12 + 40);
      uint64_t ObjectType = swift_getObjectType();
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 24))(a1, v80, ObjectType, v14)) {
        break;
      }
      ++v13;
      v12 += 24;
      if (v11 == v13) {
        goto LABEL_5;
      }
    }
    unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = v27(ObjectType, v14);
    unint64_t v30 = v29;
    uint64_t v31 = v76;
    swift_beginAccess();
    unint64_t v32 = (char *)*((void *)v31 + 2);
    id v33 = v79;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *((void *)v31 + 2) = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v32 = sub_1004DBB44((uint64_t)v32);
      *((void *)v31 + 2) = v32;
    }
    if (v13 >= *((void *)v32 + 2))
    {
      __break(1u);
    }
    else
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)&v32[v12 + 48] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*(void *)&v32[v12 + 48] & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
      {
LABEL_12:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        id v35 = v72;
        static Logger.Provisioning.add.getter();
        swift_retain_n();
        swift_bridgeObjectRetain();
        double v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          v82[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v38 = 136315394;
          id v39 = [(objc_class *)v33[2].isa provisioningState];
          id v40 = v33;
          if (v39)
          {
            id v41 = v39;
            id v42 = [v39 sid];
          }
          else
          {
            id v42 = [(objc_class *)v33[2].isa uniqueIdentifier];
          }
          uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v69 = v68;

          uint64_t v81 = sub_1004F7DDC(v67, v69, v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v81 = sub_1004F7DDC(v28, v30, v82);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "[%s] Coalesced task into existing precondition %s", (uint8_t *)v38, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v74 + 8))(v72, v75);
          id v33 = v40;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
          (*(void (**)(char *, uint64_t))(v74 + 8))(v35, v75);
        }
        os_unfair_lock_unlock(v77);
        sub_1004D4F64(v33);
        return 0;
      }
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_12;
  }
LABEL_5:
  sub_1004CA0A4(&qword_100807E50);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 20) = 0;
  unsigned __int8 v17 = (os_unfair_lock_s *)(v16 + 20);
  *(unsigned char *)(v16 + 16) = 0;
  uint64_t v18 = swift_getObjectType();
  id v19 = (void *)swift_allocObject();
  void v19[2] = v16;
  v19[3] = a1;
  uint64_t v20 = v80;
  os_log_t v21 = v78;
  void v19[4] = v80;
  void v19[5] = v21;
  id v22 = *(void (**)(void (*)(), void *, uint64_t, uint64_t))(v20 + 16);
  swift_retain();
  swift_unknownObjectRetain();
  id v23 = v21;
  v22(sub_1004DE164, v19, v18, v20);
  swift_release();
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 20));
  int v24 = *(unsigned __int8 *)(v16 + 16);
  if (*(unsigned char *)(v16 + 16))
  {
    os_unfair_lock_unlock(v17);
    id v25 = v79;
    if (v24 != 2)
    {
      os_unfair_lock_unlock(v77);
      swift_release();
      return 1;
    }
  }
  else
  {
    *(unsigned char *)(v16 + 16) = 2;
    os_unfair_lock_unlock(v17);
    id v25 = v79;
  }
  unint64_t v43 = v73;
  static Logger.Provisioning.add.getter();
  swift_unknownObjectRetain_n();
  swift_retain_n();
  unint64_t v44 = Logger.logObject.getter();
  int v45 = static os_log_type_t.default.getter();
  BOOL v46 = os_log_type_enabled(v44, (os_log_type_t)v45);
  id v47 = v76;
  if (v46)
  {
    os_log_t v78 = v44;
    uint64_t v79 = v23;
    uint64_t v48 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    v82[0] = v71;
    *(_DWORD *)uint64_t v48 = 136315394;
    id v49 = [(objc_class *)v25[2].isa provisioningState];
    LODWORD(v72) = v45;
    if (v49)
    {
      unint64_t v50 = v49;
      uint64_t v51 = v18;
      id v52 = [v49 sid];
    }
    else
    {
      uint64_t v51 = v18;
      id v52 = [(objc_class *)v25[2].isa uniqueIdentifier];
    }
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v55 = v54;

    uint64_t v81 = sub_1004F7DDC(v53, v55, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v48 + 12) = 2080;
    uint64_t v56 = (*(uint64_t (**)(uint64_t))(v80 + 8))(v51);
    uint64_t v81 = sub_1004F7DDC(v56, v57, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v58 = v78;
    _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v72, "[%s] Task is waiting for precondition %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
  }
  else
  {

    swift_unknownObjectRelease_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v43, v75);
  }
  sub_1004CA0A4(&qword_100807D10);
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_1005B4130;
  *(void *)(v59 + 32) = v25;
  v82[0] = v59;
  specialized Array._endMutation()();
  uint64_t v60 = v82[0];
  swift_beginAccess();
  uint64_t v61 = (char *)*((void *)v47 + 2);
  swift_unknownObjectRetain();
  swift_retain();
  char v62 = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v47 + 2) = v61;
  if ((v62 & 1) == 0)
  {
    uint64_t v61 = sub_10051162C(0, *((void *)v61 + 2) + 1, 1, v61);
    *((void *)v47 + 2) = v61;
  }
  unint64_t v64 = *((void *)v61 + 2);
  unint64_t v63 = *((void *)v61 + 3);
  if (v64 >= v63 >> 1)
  {
    uint64_t v61 = sub_10051162C((char *)(v63 > 1), v64 + 1, 1, v61);
    *((void *)v47 + 2) = v61;
  }
  *((void *)v61 + 2) = v64 + 1;
  uint64_t v65 = &v61[24 * v64];
  uint64_t v66 = v80;
  *((void *)v65 + 4) = a1;
  *((void *)v65 + 5) = v66;
  *((void *)v65 + 6) = v60;
  swift_endAccess();
  os_unfair_lock_unlock(v77);
  sub_1004D4F64(v25);
  swift_release();
  return 0;
}

void sub_1004D5FBC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v11 = [*(id *)(a1 + 16) provisioningState];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = [v11 sid];
  }
  else
  {
    id v13 = [*(id *)(a1 + 16) uniqueIdentifier];
  }
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  uint64_t v17 = PDOSTransactionCreate("PendingProvisioningManager.Transaction");
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = sub_1004D4C24((uint64_t)a3);
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = v19;
    void v20[3] = v14;
    void v20[4] = v16;
    void v20[5] = a2;
    v20[6] = v5;
    v20[7] = a1;
    v20[8] = a3;
    v20[9] = a4;
    v20[10] = a5;
    v20[11] = v18;
    void v26[4] = sub_1004DE084;
    void v26[5] = v20;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 1107296256;
    id v26[2] = sub_1004D7B3C;
    v26[3] = &unk_100757390;
    os_log_t v21 = _Block_copy(v26);
    id v22 = v19;
    id v23 = a2;
    id v24 = v5;
    swift_retain();
    id v25 = a3;
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    [v22 startWithCompletion:v21];
    _Block_release(v21);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

char *sub_1004D6194(unint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, char *a6, uint64_t a7, NSObject *a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v142 = a8;
  uint64_t v148 = a7;
  uint64_t v145 = a4;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v146 = *(void *)(v14 - 8);
  uint64_t v147 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v137 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  id v144 = (char *)&v137 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v24 = __chkstk_darwin(v23);
  id v26 = (char *)&v137 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  unint64_t v29 = (char *)&v137 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  unint64_t v32 = (char *)&v137 - v31;
  __chkstk_darwin(v30);
  double v36 = (char *)&v137 - v35;
  if (v33)
  {
    uint64_t v140 = v34;
    uint64_t v141 = v33;
    id v143 = a3;
    os_log_type_t v37 = v33;
    id v38 = [(objc_class *)v37 underlyingError];
    if (v38)
    {
      uint64_t v151 = (uint64_t)v38;
      sub_1004CA0A4(&qword_100807E38);
      sub_1004DE1C0(0, (unint64_t *)&unk_100807E40);
      if (swift_dynamicCast()) {
        id v39 = (void *)v150;
      }
      else {
        id v39 = 0;
      }
    }
    else
    {
      id v39 = 0;
    }
    unint64_t v48 = a5;
    char v49 = sub_1004DA49C(v39);

    if (v49)
    {
      id v50 = v143;
      id v51 = [v143 archivedState];
      if (v51)
      {
        id v52 = v51;
        static Logger.Provisioning.add.getter();
        swift_bridgeObjectRetain_n();
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, v54))
        {
          unint64_t v55 = (uint8_t *)swift_slowAlloc();
          uint64_t v151 = swift_slowAlloc();
          id v144 = a6;
          *(_DWORD *)unint64_t v55 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v150 = sub_1004F7DDC(v145, a5, &v151);
          a6 = v144;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "[%s] Pending: Failed with user action required. Saving pending provisioning and waiting for user action.", v55, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v146 + 8))(v36, v147);
        [a6 setProvisioningState:v52];
        [a6 setStatus:3];
        [a6 setShouldAutoProvision:0];
        sub_1004D4DFC(a6);

        return (char *)a10();
      }
      goto LABEL_53;
    }
    uint64_t v56 = &selRef_pk_referenceForKey_;
    uint64_t v57 = (uint64_t)[a6 provisioningAttemptCounter];
    id v50 = v143;
    if (v57 > 5) {
      goto LABEL_53;
    }
    if (sub_1004D773C(v37))
    {
      static Logger.Provisioning.add.getter();
      swift_bridgeObjectRetain_n();
      os_log_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        id v139 = v37;
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        uint64_t v151 = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        uint64_t v61 = v146;
        unint64_t v48 = a5;
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1004F7DDC(v145, a5, &v151);
        id v50 = v143;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "[%s] Pending: Failed with network connection error. Waiting for connectivity.", v60, 0xCu);
        swift_arrayDestroy();
        uint64_t v56 = &selRef_pk_referenceForKey_;
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v62 = v61;
        os_log_type_t v37 = v139;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v62 = v146;
      }
      (*(void (**)(char *, uint64_t))(v62 + 8))(v32, v147);
      type metadata accessor for PendingProvisioningConnectivityPrecondition();
      swift_allocObject();
      uint64_t v75 = sub_1004ED044(0);
      uint64_t v76 = &off_100757B98;
    }
    else if (sub_1004D78B0(v37))
    {
      static Logger.Provisioning.add.getter();
      swift_bridgeObjectRetain_n();
      unint64_t v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v63, v64))
      {
        id v139 = v37;
        uint64_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v151 = swift_slowAlloc();
        *(_DWORD *)uint64_t v65 = 136315138;
        uint64_t v66 = v146;
        unint64_t v48 = a5;
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1004F7DDC(v145, a5, &v151);
        id v50 = v143;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "[%s] Pending: Failed with device locked error. Waiting for unlock.", v65, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v67 = v66;
        os_log_type_t v37 = v139;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v67 = v146;
      }
      (*(void (**)(char *, uint64_t))(v67 + 8))(v29, v147);
      uint64_t v85 = *(void **)(v148 + OBJC_IVAR___PDPendingProvisioningManager_notificationStreamManager);
      unint64_t v86 = (objc_class *)type metadata accessor for PendingProvisioningDeviceUnlockPrecondition();
      uint64_t v87 = (char *)objc_allocWithZone(v86);
      unint64_t v88 = &v87[OBJC_IVAR____TtC5passd43PendingProvisioningDeviceUnlockPrecondition_identifier];
      *(void *)unint64_t v88 = 0xD000000000000018;
      *((void *)v88 + 1) = 0x800000010060CC20;
      id v89 = objc_allocWithZone((Class)type metadata accessor for DeviceLockStateMonitor());
      id v90 = v85;
      uint64_t v91 = v87;
      *(void *)&v91[OBJC_IVAR____TtC5passd43PendingProvisioningDeviceUnlockPrecondition_monitor] = sub_100510AD4(v90);

      v149.receiver = v91;
      v149.super_class = v86;
      uint64_t v75 = (uint64_t)objc_msgSendSuper2(&v149, "init");

      uint64_t v76 = &off_100757560;
      uint64_t v56 = &selRef_pk_referenceForKey_;
    }
    else
    {
      if ((sub_1004D79F8(v37) & 1) == 0
        || (self, (uint64_t v77 = swift_dynamicCastObjCClass()) == 0))
      {
LABEL_49:
        if ((unint64_t)[(objc_class *)v37 severity] <= 4)
        {
          static Logger.Provisioning.add.getter();
          uint64_t v102 = v37;
          swift_bridgeObjectRetain_n();
          uint64_t v103 = v102;
          uint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v106 = swift_slowAlloc();
            uint64_t v142 = swift_slowAlloc();
            id v144 = (char *)swift_slowAlloc();
            uint64_t v151 = (uint64_t)v144;
            *(_DWORD *)uint64_t v106 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v150 = sub_1004F7DDC(v145, v48, &v151);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v106 + 12) = 2112;
            uint64_t v150 = (uint64_t)v103;
            id v107 = v103;
            id v50 = v143;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v142->Class isa = v141;

            _os_log_impl((void *)&_mh_execute_header, v104, v105, "[%s] Pending: failed with non fatal error %@", (uint8_t *)v106, 0x16u);
            sub_1004CA0A4(&qword_100807D20);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v140, v147);
            uint64_t v56 = &selRef_pk_referenceForKey_;
          }
          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v140, v147);
          }
          id result = (char *)[a6 v56[312]];
          if (!__OFADD__(result, 6))
          {
            [a6 setProvisioningAttemptCounter:result + 6];
            [a6 setStatus:1];
            id v123 = [v50 archivedState];
            if (v123)
            {
              uint64_t v124 = v123;
              [a6 setProvisioningState:v123];
            }
            sub_1004D4DFC(a6);
            _s13ProvisionTaskCMa();
            uint64_t v125 = swift_allocObject();
            *(void *)(v125 + 16) = a6;
            v126 = a6;
            sub_1004D1FFC(v125);
            swift_release();
            swift_unknownObjectRelease();

            return (char *)a10();
          }
          goto LABEL_73;
        }
        swift_unknownObjectRelease();
LABEL_53:
        [v50 invalidate];
        v108 = v144;
        static Logger.Provisioning.add.getter();
        v109 = v37;
        swift_bridgeObjectRetain_n();
        uint64_t v110 = v109;
        uint64_t v111 = Logger.logObject.getter();
        os_log_type_t v112 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v111, v112))
        {
          uint64_t v113 = swift_slowAlloc();
          uint64_t v142 = swift_slowAlloc();
          id v143 = (id)swift_slowAlloc();
          uint64_t v151 = (uint64_t)v143;
          *(_DWORD *)uint64_t v113 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v150 = sub_1004F7DDC(v145, v48, &v151);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v113 + 12) = 2112;
          uint64_t v114 = v146;
          uint64_t v150 = (uint64_t)v110;
          uint64_t v115 = v110;
          uint64_t v116 = v110;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v142->Class isa = v141;

          uint64_t v110 = v115;
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "[%s] Pending: failed with error %@", (uint8_t *)v113, 0x16u);
          sub_1004CA0A4(&qword_100807D20);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v114 + 8))(v144, v147);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v146 + 8))(v108, v147);
        }
        uint64_t v117 = v148;
        uint64_t v118 = (os_unfair_lock_s *)(*(void *)(v148 + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16);
        v119 = v110;
        os_unfair_lock_lock(v118);
        v120 = self;
        uint64_t v70 = v119;
        uint64_t v121 = (void *)_convertErrorToNSError(_:)();
        id v122 = [v120 failedReceiptWithPendingProvisioning:a6 error:v121];

        [*(id *)(v117 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager) insertOrUpdatePendingProvisioningReceipt:v122];
        os_unfair_lock_unlock(v118);

        uint64_t v73 = a6;
        char v74 = 0;
        goto LABEL_57;
      }
      os_log_t v78 = (void *)v77;
      uint64_t v138 = a6;
      static Logger.Provisioning.add.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        id v139 = v37;
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        uint64_t v82 = swift_slowAlloc();
        os_log_type_t v137 = v78;
        uint64_t v151 = v82;
        *(_DWORD *)uint64_t v81 = 136315138;
        uint64_t v83 = v146;
        unint64_t v48 = a5;
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1004F7DDC(v145, a5, &v151);
        uint64_t v56 = &selRef_pk_referenceForKey_;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%s] Pending: Failed waiting for message", v81, 0xCu);
        swift_arrayDestroy();
        os_log_t v78 = v137;
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v84 = v83;
        os_log_type_t v37 = v139;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v84 = v146;
      }
      (*(void (**)(char *, uint64_t))(v84 + 8))(v26, v147);
      id v50 = v143;
      id v92 = [v78 transportIdentifier];
      uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v95 = v94;

      id v96 = *(void **)(v148 + OBJC_IVAR___PDPendingProvisioningManager_sharingChannelManager);
      objc_allocWithZone((Class)type metadata accessor for PendingProvisioningSharingMessagePrecondition());
      id v97 = v96;
      uint64_t v75 = (uint64_t)sub_100500B60(v93, v95, v97);

      uint64_t v76 = &off_100758868;
    }
    swift_unknownObjectRetain();
    id v98 = [v50 archivedState];
    if (v98)
    {
      uint64_t v99 = v98;
      [a6 setProvisioningState:v98];
      [a6 setStatus:1];
      sub_1004D4DFC(a6);
      if ((sub_1004D5684(v75, (uint64_t)v76, v142) & 1) == 0)
      {
LABEL_47:

        swift_unknownObjectRelease_n();
        return (char *)a10();
      }
      id result = (char *)[a6 v56[312]];
      if (!__OFADD__(result, 1))
      {
        [a6 setProvisioningAttemptCounter:result + 1];
        sub_1004D4DFC(a6);
        _s13ProvisionTaskCMa();
        uint64_t v100 = swift_allocObject();
        *(void *)(v100 + 16) = a6;
        v101 = a6;
        sub_1004D1FFC(v100);
        swift_release();
        goto LABEL_47;
      }
      goto LABEL_72;
    }
    swift_unknownObjectRelease();
    goto LABEL_49;
  }
  [a3 invalidate];
  if (!a1)
  {
LABEL_65:
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain_n();
    id v127 = Logger.logObject.getter();
    os_log_type_t v128 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v127, v128))
    {
      uint64_t v129 = (uint8_t *)swift_slowAlloc();
      uint64_t v151 = swift_slowAlloc();
      *(_DWORD *)uint64_t v129 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v150 = sub_1004F7DDC(v145, a5, &v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "[%s] Pending: No pass provisioned, and no error returned..", v129, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v146 + 8))(v20, v147);
    id v130 = [self errorWithSeverity:5];
    uint64_t v131 = v148;
    id v132 = (os_unfair_lock_s *)(*(void *)(v148 + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16);
    os_unfair_lock_lock(v132);
    id v133 = self;
    id v134 = v130;
    id v135 = (void *)_convertErrorToNSError(_:)();
    id v136 = [v133 failedReceiptWithPendingProvisioning:a6 error:v135];

    [*(id *)(v131 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager) insertOrUpdatePendingProvisioningReceipt:v136];
    os_unfair_lock_unlock(v132);

    sub_1004D2BB0(a6, 0);
    return (char *)a10();
  }
  if (!(a1 >> 62))
  {
    uint64_t v40 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (char *)swift_bridgeObjectRetain();
    if (v40) {
      goto LABEL_9;
    }
LABEL_64:
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  swift_bridgeObjectRetain();
  id result = (char *)_CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_64;
  }
LABEL_9:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    id v42 = *(id *)(a1 + 32);
  }
  unint64_t v43 = v42;
  swift_bridgeObjectRelease();
  id v44 = [v43 secureElementPass];

  if (!v44) {
    goto LABEL_65;
  }
  static Logger.Provisioning.add.getter();
  swift_bridgeObjectRetain_n();
  int v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    id v144 = a6;
    id v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v151 = swift_slowAlloc();
    *(_DWORD *)id v47 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v150 = sub_1004F7DDC(v145, a5, &v151);
    a6 = v144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "[%s] Pending: Successfully provisioned pass!", v47, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v146 + 8))(v17, v147);
  unint64_t v68 = (os_unfair_lock_s *)(*(void *)(v148 + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16);
  id v69 = v44;
  os_unfair_lock_lock(v68);
  uint64_t v70 = (objc_class *)v69;
  id result = (char *)[(objc_class *)v70 uniqueID];
  if (result)
  {
    uint64_t v71 = result;
    id v72 = [self successReceiptWithPendingProvisioning:a6 passUniqueID:result];

    [*(id *)(v148 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager) insertOrUpdatePendingProvisioningReceipt:v72];
    os_unfair_lock_unlock(v68);

    uint64_t v73 = a6;
    char v74 = 1;
LABEL_57:
    sub_1004D2BB0(v73, v74);

    return (char *)a10();
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t sub_1004D773C(void *a1)
{
  uint64_t result = (uint64_t)[a1 underlyingError];
  if (result)
  {
    sub_1004CA0A4(&qword_100807E38);
    sub_1004DE1C0(0, (unint64_t *)&unk_100807E40);
    if ((swift_dynamicCast() & 1) == 0) {
      return 0;
    }
    id v2 = [v10 domain];
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    id v6 = [v10 code];
    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v7)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t result = 0;
      if ((v9 & 1) == 0) {
        return result;
      }
    }
    uint64_t result = 1;
    if (((unint64_t)v6 + 1009 > 8 || ((1 << (v6 - 15)) & 0x111) == 0) && v6 != (id)-1200) {
      return 0;
    }
  }
  return result;
}

id sub_1004D78B0(void *a1)
{
  id result = [a1 underlyingError];
  if (result)
  {
    sub_1004CA0A4(&qword_100807E38);
    sub_1004DE1C0(0, (unint64_t *)&unk_100807E40);
    if ((swift_dynamicCast() & 1) == 0) {
      return 0;
    }
    id v2 = [v10 domain];
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0)
      {

        return 0;
      }
    }
    id v9 = [v10 code];

    return (id)(v9 == (id)5010);
  }
  return result;
}

id sub_1004D79F8(void *a1)
{
  id result = [a1 underlyingError];
  if (result)
  {
    sub_1004CA0A4(&qword_100807E38);
    sub_1004DE1C0(0, (unint64_t *)&unk_100807E40);
    if ((swift_dynamicCast() & 1) == 0) {
      return 0;
    }
    id v2 = [v10 domain];
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0)
      {

        return 0;
      }
    }
    id v9 = [v10 code];

    return (id)(v9 == (id)13);
  }
  return result;
}

uint64_t sub_1004D7B3C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1004DE1C0(0, &qword_100807E30);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1004D7BE0(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void), uint64_t a7, void *a8, void *a9)
{
  uint64_t v58 = a4;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v16 - 8);
  uint64_t v60 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v52 - v20;
  if (!a1 || ((self, (uint64_t v22 = swift_dynamicCastObjCClass()) != 0) ? (v23 = a2 == 0) : (v23 = 1), v23))
  {
    static Logger.Provisioning.add.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v56 = a7;
      uint64_t v57 = a6;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_1004F7DDC(v58, a5, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2112;
      if (a3)
      {
        swift_errorRetain();
        uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v61 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v61 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v28 = 0;
      }
      *uint64_t v27 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%s] Pending: Failed to resolve stateful transfer reference with error: %@", (uint8_t *)v26, 0x16u);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v60);
      a6 = v57;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v60);
    }
    a6(0);
  }
  else
  {
    uint64_t v29 = v22;
    uint64_t v56 = a7;
    uint64_t v57 = a6;
    id v30 = a1;
    id v31 = a2;
    id v32 = [v31 transportIdentifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v55 = v31;
    [v31 invalidate];
    id v33 = v30;
    id v34 = [a8 share];
    id v35 = objc_allocWithZone((Class)PKPendingStatefulTransferProvisioning);
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v37 = [v35 initWithTransportIdentifier:v36 invitation:v29 share:v34];

    id v54 = v33;
    id v38 = [a8 invitationURL];
    NSString v39 = v38;
    if (!v38)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v37 setOriginalShareURL:v39];

    id v40 = v37;
    objc_msgSend(v40, "setShouldAutoProvision:", objc_msgSend(a9, "shouldAutoProvision"));

    id v41 = [a8 accountAttestationAnonymizationSalt];
    [v40 setAccountAttestationAnonymizationSalt:v41];

    id v42 = v40;
    objc_msgSend(v42, "setStatus:", objc_msgSend(a9, "status"));

    static Logger.Provisioning.add.getter();
    id v43 = v42;
    swift_bridgeObjectRetain_n();
    id v44 = v43;
    int v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      unint64_t v48 = (void *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v62 = v53;
      *(_DWORD *)uint64_t v47 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_1004F7DDC(v58, a5, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v47 + 12) = 2112;
      uint64_t v61 = (uint64_t)v44;
      id v49 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v48 = v44;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "[%s] Pending: Resolve stateful transfer reference to: %@", (uint8_t *)v47, 0x16u);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v59 + 8))(v21, v60);
    id v50 = (void (*)(id))v57;
    id v51 = v44;
    v50(v44);
  }
}

void sub_1004D8324(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(a2, a3, a4);
  swift_release();
}

BOOL sub_1004D83CC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v19 = (void *)a4;
      a4 = 4;
      while (1)
      {
        uint64_t v9 = a4 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = a4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(a1 + 8 * a4);
          swift_retain();
          uint64_t v11 = a4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        id v12 = objc_msgSend(*(id *)(v10 + 16), "uniqueIdentifier", v19);
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        if (v13 == a2 && v15 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          swift_bridgeObjectRelease();
          a4 = (uint64_t)v19;
          swift_beginAccess();
          *uint64_t v19 = v10;
          swift_release();
          goto LABEL_21;
        }
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_17;
        }
        swift_release();
        ++a4;
        if (v11 == v8)
        {
          swift_bridgeObjectRelease();
          a4 = (uint64_t)v19;
          goto LABEL_21;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  swift_beginAccess();
  return *(void *)a4 != 0;
}

uint64_t sub_1004D8598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  if (a1)
  {
    id v6 = (void *)(a2 + OBJC_IVAR___PDPendingProvisioningManager_taskState);
    swift_beginAccess();
    if (*v6) {
      BOOL v7 = *v6 == a1;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      void *v6 = 0;
      swift_release();
    }
  }
  uint64_t v8 = (unint64_t *)(a2 + OBJC_IVAR___PDPendingProvisioningManager_taskState);
  uint64_t result = swift_beginAccess();
  unint64_t v10 = 0;
  if (*v8) {
    goto LABEL_23;
  }
  uint64_t v11 = v8 + 1;
  unint64_t v12 = v8[1];
  if (!(v12 >> 62))
  {
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_11;
    }
LABEL_22:
    unint64_t v10 = 0;
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_22;
  }
LABEL_11:
  swift_beginAccess();
  unint64_t v10 = v8[1];
  if (!(v10 >> 62))
  {
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_13;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_25;
  }
LABEL_13:
  unint64_t v10 = *v11;
  if (!(*v11 >> 62))
  {
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_15;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v15) {
    goto LABEL_27;
  }
LABEL_15:
  if ((v10 & 0xC000000000000001) != 0)
  {
LABEL_28:
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v10 = result;
    goto LABEL_18;
  }
  if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_20;
    }
    goto LABEL_31;
  }
  unint64_t v10 = *(void *)(v10 + 32);
  uint64_t result = swift_retain();
LABEL_18:
  if (*v11 >> 62) {
    goto LABEL_30;
  }
  if (*(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_20:
    sub_1004DC288(0, 1);
    *uint64_t v8 = v10;
    swift_endAccess();
    swift_retain();
    uint64_t result = swift_release();
LABEL_23:
    *a3 = v10;
    return result;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004D87F4(NSObject *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Provisioning.add.getter();
  swift_retain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v19 = v4;
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315138;
    id v11 = [(objc_class *)a1[2].isa provisioningState];
    uint64_t v20 = a2;
    if (v11)
    {
      unint64_t v12 = v11;
      id v13 = [v11 sid];
    }
    else
    {
      id v13 = [(objc_class *)a1[2].isa uniqueIdentifier];
    }
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    uint64_t v21 = sub_1004F7DDC(v14, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] Starting task", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
    a2 = v20;
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  swift_retain();
  char v17 = a2;
  sub_1004DD204(a1, v17, v17, (uint64_t)a1);

  return swift_release();
}

void sub_1004D8AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  int v12 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20));
    if (v12 == 2)
    {
      static Logger.Provisioning.add.getter();
      swift_unknownObjectRetain_n();
      id v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v23 = a3;
        unint64_t v16 = (uint8_t *)v15;
        uint64_t v22 = swift_slowAlloc();
        uint64_t v25 = v22;
        *(_DWORD *)unint64_t v16 = 136315138;
        uint64_t v21 = v16 + 4;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(ObjectType, v23);
        uint64_t v24 = sub_1004F7DDC(v18, v19, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Precondition %s finished", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        a3 = v23;
        swift_slowDealloc();
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v20 = (os_unfair_lock_s *)(*(void *)(a4 + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16);
      os_unfair_lock_lock(v20);
      sub_1004D8D8C(a4, a2, a3);
      os_unfair_lock_unlock(v20);
      sub_1004D4F64(0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20));
  }
}

uint64_t sub_1004D8D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1 + OBJC_IVAR___PDPendingProvisioningManager_taskState;
  swift_beginAccess();
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = (void *)(v12 + 32);
    while (*v15 != a2)
    {
      ++v14;
      v15 += 3;
      if (v13 == v14) {
        goto LABEL_5;
      }
    }
    swift_beginAccess();
    sub_1004D9090(v14);
    unint64_t v25 = v24;
    swift_endAccess();
    swift_unknownObjectRelease();
    swift_beginAccess();
    sub_1004D9180(v25);
    return swift_endAccess();
  }
  else
  {
LABEL_5:
    uint64_t v29 = a3;
    static Logger.Provisioning.add.getter();
    swift_unknownObjectRetain_n();
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v28 = v3;
      unint64_t v19 = (uint8_t *)v18;
      v30[0] = swift_slowAlloc();
      uint64_t v27 = v7;
      *(_DWORD *)unint64_t v19 = 136315138;
      uint64_t v26 = v19 + 4;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(v29 + 8))(ObjectType);
      v30[7] = sub_1004F7DDC(v21, v22, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to find active precondition %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v27);
    }
    else
    {

      swift_unknownObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
}

uint64_t sub_1004D9090(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1004DBB44((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[24 * a1];
      uint64_t v8 = *((void *)v7 + 4);
      memmove(v7 + 32, v7 + 56, 24 * v6);
      *((void *)v3 + 2) = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004D9180(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_1004DBE20(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

void sub_1004D934C(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v129 = *(void *)(v7 - 8);
  uint64_t v130 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  os_log_type_t v128 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v11 = (unint64_t)&v110 - v10;
  uint64_t v131 = a1;
  uint64_t v12 = &a1[OBJC_IVAR___PDPendingProvisioningManager_taskState];
  swift_beginAccess();
  if (*(void *)v12) {
    goto LABEL_5;
  }
  BOOL v13 = v12;
  unint64_t v14 = *((void *)v12 + 1);
  if (v14 >> 62) {
    goto LABEL_124;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_5:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    while (1)
    {
      if (*(void *)(*((void *)v13 + 2) + 16)) {
        goto LABEL_5;
      }
      uint64_t v15 = *(void **)&v131[OBJC_IVAR___PDPendingProvisioningManager_databaseManager];
      uint64_t v113 = v13;
      id v118 = v15;
      id v16 = [v15 allPendingProvisioningReceipts];
      if (!v16) {
        goto LABEL_5;
      }
      os_log_type_t v17 = v16;
      uint64_t v116 = v4;
      sub_1004DE1C0(0, &qword_100807DE8);
      int64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v19 = (unint64_t)v18 >> 62;
      if ((unint64_t)v18 >> 62) {
        goto LABEL_130;
      }
      uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
      uint64_t v21 = (unint64_t *)&_swiftEmptyArrayStorage;
      v126 = (char *)v19;
      uint64_t v127 = a2;
      id v132 = (char *)v11;
      int64_t v133 = v18;
      if (v20)
      {
        uint64_t v140 = (unint64_t *)&_swiftEmptyArrayStorage;
        unint64_t v19 = (unint64_t)&v140;
        sub_100504118(0, v20 & ~(v20 >> 63), 0);
        if (v20 < 0)
        {
          __break(1u);
          goto LABEL_132;
        }
        uint64_t v23 = 0;
        uint64_t v21 = v140;
        unint64_t v24 = v18 & 0xC000000000000001;
        do
        {
          if (v24) {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v25 = *(id *)(v18 + 8 * v23 + 32);
          }
          uint64_t v26 = v25;
          uint64_t v135 = 8237;
          unint64_t v136 = 0xE200000000000000;
          id v27 = [v25 description];
          uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v30 = v29;

          v31._countAndFlagsBits = v28;
          v31._object = v30;
          String.append(_:)(v31);

          swift_bridgeObjectRelease();
          uint64_t v32 = v135;
          unint64_t v33 = v136;
          uint64_t v140 = v21;
          unint64_t v35 = v21[2];
          unint64_t v34 = v21[3];
          if (v35 >= v34 >> 1)
          {
            sub_100504118(v34 > 1, v35 + 1, 1);
            uint64_t v21 = v140;
          }
          ++v23;
          v21[2] = v35 + 1;
          NSString v36 = &v21[2 * v35];
          v36[4] = v32;
          void v36[5] = v33;
          int64_t v18 = v133;
        }
        while (v20 != v23);
        a2 = v127;
        unint64_t v11 = (unint64_t)v132;
      }
      uint64_t v135 = (uint64_t)v21;
      sub_1004CA0A4(&qword_100807E18);
      sub_1004DE1FC(&qword_100807E20, &qword_100807E18);
      uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      static Logger.Provisioning.add.getter();
      swift_bridgeObjectRetain();
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        id v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        *(_DWORD *)id v42 = 136315138;
        int64_t v18 = v133;
        unint64_t v11 = (unint64_t)(v42 + 4);
        swift_bridgeObjectRetain();
        uint64_t v140 = (unint64_t *)sub_1004F7DDC(v37, v39, &v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Found pending provisioning receipts: \n%s", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v43 = *(void (**)(char *, uint64_t))(v129 + 8);
        id v44 = v132;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        id v43 = *(void (**)(char *, uint64_t))(v129 + 8);
        id v44 = (char *)v11;
      }
      uint64_t v110 = v43;
      v43(v44, v130);
      if (v126)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v45 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      if (!v45) {
        break;
      }
      v126 = (char *)(v18 & 0xC000000000000001);
      uint64_t v4 = (uint64_t *)&_swiftEmptyDictionarySingleton;
      uint64_t v46 = 4;
      while (1)
      {
        id v47 = v126 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v18 + 8 * v46);
        unint64_t v48 = v47;
        if (__OFADD__(v46 - 4, 1)) {
          break;
        }
        id v132 = (char *)(v46 - 3);
        a2 = v45;
        unint64_t v11 = (unint64_t)[v47 type];
        int64_t v18 = v48;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v135 = (uint64_t)v4;
        unint64_t v19 = (unint64_t)v4;
        unint64_t v51 = sub_1004EA0B4(v11);
        uint64_t v52 = v4[2];
        BOOL v53 = (v50 & 1) == 0;
        uint64_t v54 = v52 + v53;
        if (__OFADD__(v52, v53)) {
          goto LABEL_123;
        }
        char v55 = v50;
        if (v4[3] >= v54)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v19 = (unint64_t)&v135;
            sub_100503BEC();
            uint64_t v4 = (uint64_t *)v135;
          }
        }
        else
        {
          sub_1005030FC(v54, isUniquelyReferenced_nonNull_native);
          uint64_t v4 = (uint64_t *)v135;
          unint64_t v19 = v135;
          uint64_t v56 = sub_1004EA0B4(v11);
          if ((v55 & 1) != (v57 & 1)) {
            goto LABEL_135;
          }
          unint64_t v51 = v56;
        }
        swift_bridgeObjectRelease();
        if ((v55 & 1) == 0)
        {
          v4[(v51 >> 6) + 8] |= 1 << v51;
          uint64_t v58 = 8 * v51;
          *(void *)(v4[6] + v58) = v11;
          *(void *)(v4[7] + v58) = &_swiftEmptyArrayStorage;
          uint64_t v59 = v4[2];
          BOOL v60 = __OFADD__(v59, 1);
          uint64_t v61 = v59 + 1;
          if (v60)
          {
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            swift_bridgeObjectRetain();
            uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }
          v4[2] = v61;
        }
        uint64_t v62 = (void *)(v4[7] + 8 * v51);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        ++v46;
        uint64_t v45 = a2;
        int64_t v18 = v133;
        BOOL v63 = v132 == (char *)a2;
        a2 = v127;
        if (v63) {
          goto LABEL_46;
        }
      }
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      id v107 = v13;
      swift_bridgeObjectRetain();
      uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      BOOL v13 = v107;
      if (v108) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = (uint64_t *)&_swiftEmptyDictionarySingleton;
LABEL_46:
    swift_bridgeObjectRelease();
    if (!v4[2] || (unint64_t v19 = (unint64_t)v4, v64 = sub_1004EA0B4(1), (v65 & 1) == 0))
    {
LABEL_57:
      swift_bridgeObjectRelease();
      v113[24] = 0;
      [v118 deleteAllPendingProvisioningReceipts];
      uint64_t v70 = v131;
      uint64_t v71 = swift_bridgeObjectRetain();
      id v72 = sub_1004DC8F0(v71, (uint64_t)v70);
      swift_bridgeObjectRelease_n();

      *(void *)a2 = v18;
      *(void *)(a2 + 8) = v72;
      return;
    }
    unint64_t v11 = *(void *)(v4[7] + 8 * v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!v45)
    {
      double v3 = 0.0;
      goto LABEL_60;
    }
    if (v45 >= 1)
    {
      swift_bridgeObjectRetain();
      unint64_t v19 = 0;
      double v3 = 0.0;
      do
      {
        if ((v18 & 0xC000000000000001) != 0) {
          id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v66 = *(id *)(v18 + 8 * v19 + 32);
        }
        uint64_t v67 = v66;
        [v66 createdAt];
        double v69 = v68;

        if (v3 <= v69) {
          double v3 = v69;
        }
        ++v19;
      }
      while (v45 != v19);
      swift_bridgeObjectRelease();
LABEL_60:
      double Current = CFAbsoluteTimeGetCurrent();
      if (!(v11 >> 62))
      {
        uint64_t v73 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v73)
        {
LABEL_62:
          unint64_t v74 = 0;
          double v75 = Current + -60.0;
          unint64_t v117 = v11 & 0xC000000000000001;
          uint64_t v112 = v11 & 0xFFFFFFFFFFFFFF8;
          uint64_t v111 = (char *)(v11 + 32);
          v126 = (char *)&type metadata for Swift.AnyObject + 8;
          uint64_t v76 = (char *)&_swiftEmptyArrayStorage;
          uint64_t v115 = (char *)v11;
          uint64_t v114 = v73;
          while (1)
          {
            if (v117)
            {
              id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v74 >= *(void *)(v112 + 16)) {
                goto LABEL_129;
              }
              id v79 = *(id *)&v111[8 * v74];
            }
            id v80 = v79;
            BOOL v60 = __OFADD__(v74++, 1);
            if (v60) {
              goto LABEL_128;
            }
            id v81 = [v79 passUniqueID];
            if (!v81) {
              goto LABEL_64;
            }
            uint64_t v82 = v81;
            uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v123 = v83;
            id v84 = [v118 paymentApplicationsForPassUniqueIdentifier:v82];

            uint64_t v125 = v76;
            unint64_t v120 = v74;
            id v124 = v80;
            if (v84)
            {
              sub_1004DE1C0(0, &qword_100808300);
              sub_1004DC1B0((unint64_t *)&unk_100807DB0, &qword_100808300);
              uint64_t v85 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              uint64_t v85 = (uint64_t)&_swiftEmptySetSingleton;
              if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
                && _CocoaArrayWrapper.endIndex.getter())
              {
                sub_1004DC594((unint64_t)&_swiftEmptyArrayStorage);
                uint64_t v85 = v102;
              }
            }
            uint64_t v122 = v85;
            if ((v85 & 0xC000000000000001) != 0)
            {
              swift_bridgeObjectRetain();
              __CocoaSet.makeIterator()();
              sub_1004DE1C0(0, &qword_100808300);
              sub_1004DC1B0((unint64_t *)&unk_100807DB0, &qword_100808300);
              Set.Iterator.init(_cocoa:)();
              uint64_t v85 = v135;
              id v132 = (char *)v136;
              uint64_t v86 = v137;
              a2 = v138;
              unint64_t v87 = v139;
            }
            else
            {
              uint64_t v88 = -1 << *(unsigned char *)(v85 + 32);
              uint64_t v89 = *(void *)(v85 + 56);
              id v132 = (char *)(v85 + 56);
              uint64_t v86 = ~v88;
              uint64_t v90 = -v88;
              if (v90 < 64) {
                uint64_t v91 = ~(-1 << v90);
              }
              else {
                uint64_t v91 = -1;
              }
              unint64_t v87 = v91 & v89;
              swift_bridgeObjectRetain();
              a2 = 0;
            }
            unint64_t v19 = v85 & 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v121 = v86;
            int64_t v18 = (unint64_t)(v86 + 64) >> 6;
            do
            {
              uint64_t v92 = a2;
              if (v85 < 0)
              {
                uint64_t v95 = __CocoaSet.Iterator.next()();
                if (!v95) {
                  goto LABEL_109;
                }
                uint64_t v134 = v95;
                sub_1004DE1C0(0, &qword_100808300);
                swift_unknownObjectRetain();
                swift_dynamicCast();
                id v96 = v140;
                swift_unknownObjectRelease();
              }
              else
              {
                if (v87)
                {
                  unint64_t v93 = __clz(__rbit64(v87));
                  v87 &= v87 - 1;
                  unint64_t v94 = v93 | (a2 << 6);
                }
                else
                {
                  int64_t v97 = a2 + 1;
                  if (__OFADD__(a2, 1)) {
                    goto LABEL_127;
                  }
                  if (v97 >= v18)
                  {
LABEL_109:
                    a2 = v127;
LABEL_110:
                    sub_1004DC1A8();
                    swift_bridgeObjectRelease();
                    int64_t v18 = v133;
                    goto LABEL_111;
                  }
                  unint64_t v98 = *(void *)&v132[8 * v97];
                  ++a2;
                  if (!v98)
                  {
                    a2 = v92 + 2;
                    if (v92 + 2 >= v18) {
                      goto LABEL_109;
                    }
                    unint64_t v98 = *(void *)&v132[8 * a2];
                    if (!v98)
                    {
                      a2 = v92 + 3;
                      if (v92 + 3 >= v18) {
                        goto LABEL_109;
                      }
                      unint64_t v98 = *(void *)&v132[8 * a2];
                      if (!v98)
                      {
                        a2 = v92 + 4;
                        if (v92 + 4 >= v18) {
                          goto LABEL_109;
                        }
                        unint64_t v98 = *(void *)&v132[8 * a2];
                        if (!v98)
                        {
                          a2 = v92 + 5;
                          if (v92 + 5 >= v18) {
                            goto LABEL_109;
                          }
                          unint64_t v98 = *(void *)&v132[8 * a2];
                          if (!v98)
                          {
                            a2 = v92 + 6;
                            if (v92 + 6 >= v18) {
                              goto LABEL_109;
                            }
                            unint64_t v98 = *(void *)&v132[8 * a2];
                            if (!v98)
                            {
                              uint64_t v99 = v92 + 7;
                              a2 = v127;
                              while (v18 != v99)
                              {
                                unint64_t v98 = *(void *)&v132[8 * v99++];
                                if (v98)
                                {
                                  a2 = v99 - 1;
                                  goto LABEL_103;
                                }
                              }
                              goto LABEL_110;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_103:
                  unint64_t v87 = (v98 - 1) & v98;
                  unint64_t v94 = __clz(__rbit64(v98)) + (a2 << 6);
                }
                id v96 = (unint64_t *)*(id *)(*(void *)(v85 + 48) + 8 * v94);
              }
              if (!v96) {
                goto LABEL_109;
              }
              unint64_t v11 = (unint64_t)[v96 state];
            }
            while (v11 == 1);
            sub_1004DC1A8();
            swift_bridgeObjectRelease();
            a2 = v127;
            int64_t v18 = v133;
            if (v3 >= v75)
            {
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              v113[24] = 1;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              static Logger.Provisioning.add.getter();
              uint64_t v103 = Logger.logObject.getter();
              os_log_type_t v104 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v103, v104))
              {
                uint64_t v106 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v106 = 0;
                _os_log_impl((void *)&_mh_execute_header, v103, v104, "Waiting to notify user while passes personalize", v106, 2u);
                swift_slowDealloc();
              }

              v110(v128, v130);
              goto LABEL_5;
            }
LABEL_111:
            uint64_t v76 = v125;
            char v100 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v11 = (unint64_t)v115;
            id v80 = v124;
            if ((v100 & 1) == 0) {
              uint64_t v76 = sub_100511754(0, *((void *)v76 + 2) + 1, 1, v76);
            }
            unint64_t v74 = v120;
            unint64_t v19 = *((void *)v76 + 2);
            unint64_t v101 = *((void *)v76 + 3);
            if (v19 >= v101 >> 1) {
              uint64_t v76 = sub_100511754((char *)(v101 > 1), v19 + 1, 1, v76);
            }
            *((void *)v76 + 2) = v19 + 1;
            uint64_t v77 = &v76[16 * v19];
            uint64_t v78 = v123;
            *((void *)v77 + 4) = v119;
            *((void *)v77 + 5) = v78;
            uint64_t v73 = v114;
LABEL_64:

            if (v74 == v73) {
              goto LABEL_57;
            }
          }
        }
        goto LABEL_57;
      }
LABEL_132:
      double v109 = Current;
      swift_bridgeObjectRetain();
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      double Current = v109;
      if (v73) {
        goto LABEL_62;
      }
      goto LABEL_57;
    }
    __break(1u);
LABEL_135:
    type metadata accessor for PKPendingProvisioningReceiptType(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
}

void sub_1004DA24C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  double v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Provisioning.add.getter();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Timed out waiting for passes to personalize", v6, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    sub_1004D1140();
  }
}

uint64_t sub_1004DA3C0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1004DA49C(void *a1)
{
  if (!a1) {
    goto LABEL_19;
  }
  id v1 = a1;
  id v2 = [v1 code];
  id v3 = [v1 domain];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  if (v4 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v6 != v7)
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      goto LABEL_12;
    }
    if (v2 == (id)3) {
      goto LABEL_11;
    }
LABEL_10:
    if (v2 == (id)2) {
      goto LABEL_11;
    }
LABEL_12:
    id v11 = [v1 userInfo];
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v12 + 16) && (unint64_t v15 = sub_1004EA0B8(v13, v14), (v16 & 1) != 0))
    {
      sub_1004DE0C0(*(void *)(v12 + 56) + 32 * v15, (uint64_t)&v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v21 + 1))
      {
        sub_1004DE1C0(0, (unint64_t *)&unk_100807E40);
        if (swift_dynamicCast())
        {
          id v17 = v19;
          char v10 = ((uint64_t (*)())sub_1004DA49C)();

          return v10 & 1;
        }

LABEL_19:
        char v10 = 0;
        return v10 & 1;
      }
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    sub_1004CEBA8((uint64_t)&v20);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease_n();
  if (v2 != (id)3) {
    goto LABEL_10;
  }
LABEL_11:

  char v10 = 1;
  return v10 & 1;
}

uint64_t sub_1004DA6C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1004DC194(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1004DA894(v6);
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_1004DA73C()
{
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004DA774(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004DA784()
{
  return swift_release();
}

void *sub_1004DA78C(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1004CA0A4(&qword_100807D10);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      void v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

void sub_1004DA894(uint64_t *a1)
{
  uint64_t v136 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v136 - 8);
  uint64_t v3 = __chkstk_darwin(v136);
  uint64_t v135 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v134 = (char *)&v121 - v5;
  Swift::Int v6 = a1[1];
  Swift::Int v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0) {
      goto LABEL_134;
    }
    if (v6) {
      sub_1004DB22C(0, v6, 1, a1);
    }
    return;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_142;
  }
  Swift::Int v126 = v7;
  if (v6 < 2)
  {
    id v11 = (char *)_swiftEmptyArrayStorage;
    uint64_t v139 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v131 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
LABEL_100:
      uint64_t v112 = v132;
      if (v14 >= 2)
      {
        uint64_t v113 = *a1;
        do
        {
          unint64_t v114 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_129;
          }
          if (!v113) {
            goto LABEL_141;
          }
          uint64_t v115 = v11;
          uint64_t v116 = v11 + 32;
          uint64_t v117 = *(void *)&v11[16 * v114 + 32];
          uint64_t v118 = *(void *)&v11[16 * v14 + 24];
          sub_1004DB464(v113 + 8 * v117, (id *)(v113 + 8 * *(void *)&v116[16 * v14 - 16]), (id *)(v113 + 8 * v118), v131);
          if (v112) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v115 = sub_1004DBB30((uint64_t)v115);
          }
          if (v114 >= *((void *)v115 + 2)) {
            goto LABEL_131;
          }
          uint64_t v119 = &v115[16 * v114 + 32];
          *(void *)uint64_t v119 = v117;
          *((void *)v119 + 1) = v118;
          unint64_t v120 = *((void *)v115 + 2);
          if (v14 > v120) {
            goto LABEL_132;
          }
          id v11 = v115;
          memmove(&v115[16 * v14 + 16], &v115[16 * v14 + 32], 16 * (v120 - v14));
          *((void *)v115 + 2) = v120 - 1;
          unint64_t v14 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    sub_1004DE1C0(0, &qword_100807D88);
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    uint64_t v131 = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v139 = v10;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a1;
  int64_t v133 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v124 = v13 + 16;
  uint64_t v122 = a1;
  uint64_t v123 = v13 - 8;
  id v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v129 = v6;
  uint64_t v137 = v13;
  while (1)
  {
    uint64_t v15 = v12;
    Swift::Int v16 = v12 + 1;
    uint64_t v128 = v12;
    if (v12 + 1 < v6)
    {
      id v17 = *(void **)(v13 + 8 * v12);
      id v18 = *(id *)(v13 + 8 * v16);
      id v19 = v17;
      id v20 = [v18 createdAt];
      long long v21 = v134;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v22 = [v19 createdAt];
      uint64_t v23 = v135;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LODWORD(v138) = static Date.> infix(_:_:)();
      unint64_t v24 = *v133;
      id v25 = v23;
      uint64_t v26 = v136;
      (*v133)(v25, v136);
      v24(v21, v26);

      Swift::Int v6 = v129;
      Swift::Int v16 = v15 + 2;
      if (v15 + 2 < v6)
      {
        uint64_t v125 = v11;
        id v27 = (id *)(v124 + 8 * v15);
        while (1)
        {
          uint64_t v28 = *(v27 - 1);
          id v29 = *v27;
          id v30 = v28;
          id v31 = [v29 createdAt];
          uint64_t v32 = v134;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v33 = [v30 createdAt];
          unint64_t v34 = v135;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LODWORD(v33) = static Date.> infix(_:_:)();
          unint64_t v35 = v34;
          uint64_t v36 = v136;
          v24(v35, v136);
          v24(v32, v36);

          if ((v138 ^ v33)) {
            break;
          }
          ++v27;
          Swift::Int v6 = v129;
          if (v129 == ++v16)
          {
            Swift::Int v16 = v129;
            id v11 = v125;
            goto LABEL_22;
          }
        }
        id v11 = v125;
        Swift::Int v6 = v129;
LABEL_22:
        uint64_t v15 = v128;
      }
      uint64_t v13 = v137;
      if (v138)
      {
        if (v16 < v15) {
          goto LABEL_135;
        }
        if (v15 < v16)
        {
          uint64_t v37 = (uint64_t *)(v123 + 8 * v16);
          Swift::Int v38 = v16;
          uint64_t v39 = v15;
          id v40 = (uint64_t *)(v137 + 8 * v15);
          do
          {
            if (v39 != --v38)
            {
              if (!v13) {
                goto LABEL_140;
              }
              uint64_t v41 = *v40;
              uint64_t *v40 = *v37;
              *uint64_t v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v16 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_133;
    }
    if (v16 - v15 >= v126) {
      goto LABEL_50;
    }
    if (__OFADD__(v15, v126)) {
      goto LABEL_136;
    }
    Swift::Int v42 = v15 + v126 >= v6 ? v6 : v15 + v126;
    if (v42 < v15) {
      break;
    }
    if (v16 != v42)
    {
      uint64_t v125 = v11;
      uint64_t v43 = v123 + 8 * v16;
      Swift::Int v127 = v42;
      do
      {
        id v44 = *(void **)(v13 + 8 * v16);
        uint64_t v45 = v15;
        uint64_t v130 = v43;
        while (1)
        {
          Swift::Int v46 = v16;
          id v47 = *(void **)v43;
          id v48 = v44;
          id v138 = v48;
          id v49 = v47;
          id v50 = [v48 createdAt];
          unint64_t v51 = v134;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v52 = [v49 createdAt];
          BOOL v53 = v135;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v52) = static Date.> infix(_:_:)();
          uint64_t v54 = *v133;
          char v55 = v53;
          uint64_t v56 = v136;
          (*v133)(v55, v136);
          v54(v51, v56);

          if ((v52 & 1) == 0) {
            break;
          }
          uint64_t v13 = v137;
          if (!v137) {
            goto LABEL_138;
          }
          Swift::Int v16 = v46;
          char v57 = *(void **)v43;
          id v44 = *(void **)(v43 + 8);
          *(void *)uint64_t v43 = v44;
          *(void *)(v43 + 8) = v57;
          v43 -= 8;
          if (v46 == ++v45) {
            goto LABEL_43;
          }
        }
        uint64_t v13 = v137;
        Swift::Int v16 = v46;
LABEL_43:
        ++v16;
        uint64_t v43 = v130 + 8;
        uint64_t v15 = v128;
      }
      while (v16 != v127);
      Swift::Int v16 = v127;
      id v11 = v125;
    }
LABEL_50:
    if (v16 < v15) {
      goto LABEL_128;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v138 = (id)v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      id v11 = sub_1004DB974(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v60 = *((void *)v11 + 2);
    unint64_t v59 = *((void *)v11 + 3);
    unint64_t v14 = v60 + 1;
    uint64_t v13 = v137;
    if (v60 >= v59 >> 1)
    {
      uint64_t v111 = sub_1004DB974((char *)(v59 > 1), v60 + 1, 1, v11);
      uint64_t v13 = v137;
      id v11 = v111;
    }
    *((void *)v11 + 2) = v14;
    uint64_t v61 = v11 + 32;
    uint64_t v62 = &v11[16 * v60 + 32];
    id v63 = v138;
    *(void *)uint64_t v62 = v15;
    *((void *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        unint64_t v64 = v14 - 1;
        if (v14 >= 4)
        {
          double v69 = &v61[16 * v14];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_117;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_118;
          }
          unint64_t v76 = v14 - 2;
          uint64_t v77 = &v61[16 * v14 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_120;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_123;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v61[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_127;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v93 = *((void *)v11 + 4);
            uint64_t v94 = *((void *)v11 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_81;
          }
          uint64_t v66 = *((void *)v11 + 4);
          uint64_t v65 = *((void *)v11 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }
        if (v68) {
          goto LABEL_119;
        }
        unint64_t v76 = v14 - 2;
        uint64_t v82 = &v61[16 * v14 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_122;
        }
        uint64_t v88 = &v61[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_125;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_126;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_87:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v87) {
          goto LABEL_121;
        }
        uint64_t v95 = &v61[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_124;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_89:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13) {
          goto LABEL_139;
        }
        os_log_type_t v104 = v11;
        os_log_type_t v105 = &v61[16 * v103];
        uint64_t v106 = *(void *)v105;
        id v107 = &v61[16 * v64];
        uint64_t v108 = *((void *)v107 + 1);
        uint64_t v109 = v132;
        sub_1004DB464(v13 + 8 * *(void *)v105, (id *)(v13 + 8 * *(void *)v107), (id *)(v13 + 8 * v108), v131);
        uint64_t v132 = v109;
        if (v109) {
          goto LABEL_111;
        }
        if (v108 < v106) {
          goto LABEL_114;
        }
        if (v64 > *((void *)v104 + 2)) {
          goto LABEL_115;
        }
        *(void *)os_log_type_t v105 = v106;
        *(void *)&v61[16 * v103 + 8] = v108;
        unint64_t v110 = *((void *)v104 + 2);
        if (v64 >= v110) {
          goto LABEL_116;
        }
        id v11 = v104;
        unint64_t v14 = v110 - 1;
        memmove(&v61[16 * v64], v107 + 16, 16 * (v110 - 1 - v64));
        *((void *)v104 + 2) = v110 - 1;
        uint64_t v13 = v137;
        if (v110 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_14:
    Swift::Int v6 = v129;
    uint64_t v12 = (uint64_t)v138;
    if ((uint64_t)v138 >= v129)
    {
      a1 = v122;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1004DB22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = a1;
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v7 = __chkstk_darwin(v35);
  unint64_t v34 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v33 = (char *)&v28 - v10;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v11 = *a4;
    uint64_t v32 = v9 + 8;
    uint64_t v36 = v11;
    uint64_t v12 = v11 + 8 * a3 - 8;
    uint64_t v13 = (void (**)(char *, uint64_t))(v9 + 8);
LABEL_5:
    unint64_t v14 = *(void **)(v36 + 8 * a3);
    uint64_t v15 = v30;
    uint64_t v31 = v12;
    while (1)
    {
      Swift::Int v16 = *(void **)v12;
      id v17 = v14;
      id v37 = v17;
      id v18 = v16;
      id v19 = [v17 createdAt];
      id v20 = v33;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v21 = [v18 createdAt];
      id v22 = v34;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v21) = static Date.> infix(_:_:)();
      uint64_t v23 = a3;
      unint64_t v24 = *v13;
      id v25 = v22;
      uint64_t v26 = v35;
      (*v13)(v25, v35);
      v24(v20, v26);
      a3 = v23;

      if ((v21 & 1) == 0)
      {
LABEL_4:
        a3 = v23 + 1;
        uint64_t v12 = v31 + 8;
        if (v23 + 1 == v29) {
          return;
        }
        goto LABEL_5;
      }
      if (!v36) {
        break;
      }
      id v27 = *(void **)v12;
      unint64_t v14 = *(void **)(v12 + 8);
      *(void *)uint64_t v12 = v14;
      *(void *)(v12 + 8) = v27;
      v12 -= 8;
      if (v23 == ++v15) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1004DB464(uint64_t a1, id *a2, id *a3, void **a4)
{
  uint64_t v57 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v57 - 8);
  uint64_t v9 = __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v54 = a3;
  char v55 = (char *)&v48 - v12;
  uint64_t v13 = (uint64_t)a2 - a1;
  uint64_t v14 = v13 / 8;
  uint64_t v15 = a2;
  uint64_t v16 = (char *)a3 - (char *)a2;
  uint64_t v17 = v16 / 8;
  uint64_t v61 = v11;
  unint64_t v60 = a4;
  uint64_t v58 = v11;
  if (v13 / 8 >= v16 / 8)
  {
    if (v16 < -7) {
      goto LABEL_41;
    }
    if (a4 != v15 || &v15[v17] <= a4)
    {
      memmove(a4, v15, 8 * v17);
      uint64_t v11 = v58;
    }
    uint64_t v31 = &a4[v17];
    unint64_t v59 = v31;
    uint64_t v61 = v15;
    if (v16 < 8 || v11 >= v15) {
      goto LABEL_40;
    }
    id v49 = (void (**)(char *, uint64_t))(v8 + 8);
    id v50 = a4;
    uint64_t v32 = v54 - 1;
    id v33 = v15;
    while (1)
    {
      uint64_t v54 = v15;
      id v52 = v31;
      BOOL v53 = v32 + 1;
      uint64_t v35 = v31 - 1;
      uint64_t v36 = *--v33;
      id v37 = *(v31 - 1);
      id v51 = v37;
      id v38 = v36;
      id v39 = [v37 createdAt];
      id v40 = v55;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v41 = [v38 createdAt];
      Swift::Int v42 = v56;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v41) = static Date.> infix(_:_:)();
      uint64_t v43 = *v49;
      id v44 = v42;
      uint64_t v45 = v57;
      (*v49)(v44, v57);
      v43(v40, v45);

      if (v41) {
        break;
      }
      unint64_t v59 = v35;
      if (v53 < v52 || v32 >= v52)
      {
        *uint64_t v32 = *v35;
        id v33 = v54;
        uint64_t v31 = v35;
        goto LABEL_28;
      }
      unint64_t v46 = (unint64_t)v50;
      unint64_t v34 = v58;
      id v33 = v54;
      if (v53 != v52) {
        *uint64_t v32 = *v35;
      }
      uint64_t v31 = v35;
      if ((unint64_t)v35 <= v46) {
        goto LABEL_40;
      }
LABEL_29:
      --v32;
      uint64_t v15 = v33;
      if (v33 <= v34) {
        goto LABEL_40;
      }
    }
    uint64_t v31 = v52;
    if (v53 != v54 || v32 >= v54) {
      *uint64_t v32 = *v33;
    }
    uint64_t v61 = v33;
LABEL_28:
    unint64_t v34 = v58;
    if (v31 <= v50) {
      goto LABEL_40;
    }
    goto LABEL_29;
  }
  if (v13 >= -7)
  {
    if (a4 != v11 || &v11[v14] <= a4)
    {
      memmove(a4, v58, 8 * v14);
      uint64_t v11 = v58;
    }
    BOOL v53 = &a4[v14];
    unint64_t v59 = v53;
    if (v13 >= 8 && v15 < v54)
    {
      id v52 = (void **)(v8 + 8);
      id v18 = v55;
      do
      {
        uint64_t v58 = v11;
        id v19 = *a4;
        id v20 = *v15;
        id v21 = v19;
        id v22 = a4;
        id v23 = [v20 createdAt];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v24 = [v21 createdAt];
        id v25 = v56;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v24) = static Date.> infix(_:_:)();
        uint64_t v26 = (void (*)(char *, uint64_t))*v52;
        id v27 = v25;
        uint64_t v28 = v57;
        ((void (*)(char *, uint64_t))*v52)(v27, v57);
        v26(v18, v28);

        if (v24)
        {
          a4 = v22;
          unint64_t v29 = (unint64_t)(v15 + 1);
          uint64_t v30 = v58;
          if (v58 < v15 || (unint64_t)v58 >= v29 || v58 != v15) {
            *uint64_t v58 = *v15;
          }
        }
        else
        {
          uint64_t v30 = v58;
          if (v58 != v22) {
            *uint64_t v58 = *v22;
          }
          a4 = v22 + 1;
          unint64_t v60 = v22 + 1;
          unint64_t v29 = (unint64_t)v15;
        }
        uint64_t v11 = v30 + 1;
        uint64_t v61 = v11;
        if (a4 >= v53) {
          break;
        }
        uint64_t v15 = (id *)v29;
      }
      while (v29 < (unint64_t)v54);
    }
LABEL_40:
    sub_1004DBA74((void **)&v61, (const void **)&v60, &v59);
    return 1;
  }
LABEL_41:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1004DB974(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1004CA0A4((uint64_t *)&unk_100807DA0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1004DBA74(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1004DBB30(uint64_t a1)
{
  return sub_1004DB974(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1004DBB44(uint64_t a1)
{
  return sub_10051162C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1004DBB58(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

char *sub_1004DBBD4(uint64_t a1)
{
  return sub_100511754(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1004DBBE8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1004DE1FC(&qword_100807D98, &qword_100807D90);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_1004CA0A4(&qword_100807D90);
          uint64_t v12 = sub_1004FEE64(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1004DE1C0(0, &qword_100807D88);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004DBE20(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1004DE1FC((unint64_t *)&unk_100807E60, &qword_100807E58);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_1004CA0A4(&qword_100807E58);
          uint64_t v12 = sub_1004FEDF8(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    _s13ProvisionTaskCMa();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004DC044(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

id sub_1004DC08C(void *a1, void *a2, void *a3, void *a4, char *a5)
{
  *(void *)&a5[OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_applicationMessageSink] = 0;
  *(void *)&a5[OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_dataSource + 8] = &off_1007571B8;
  swift_unknownObjectUnownedInit();
  *(void *)&a5[OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_carKeyRequirementsChecker] = a2;
  *(void *)&a5[OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_applicationMessageManager] = a3;
  *(void *)&a5[OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_notificationManager] = a4;
  v15.receiver = a5;
  v15.super_class = (Class)_s33PendingProvisioningMessageManagerCMa();
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = objc_msgSendSuper2(&v15, "init");
  sub_1003A0878((uint64_t)v11, 5, v13);

  return v13;
}

uint64_t sub_1004DC194(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1004DC1A8()
{
  return swift_release();
}

uint64_t sub_1004DC1B0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1004DE1C0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004DC200(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004DC248()
{
  swift_unknownObjectWeakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004DC280()
{
}

uint64_t sub_1004DC288(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      uint64_t *v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  id v13 = (char *)(v11 + 32 + 8 * v4);
  _s13ProvisionTaskCMa();
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  return specialized Array._endMutation()();
}

void sub_1004DC594(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_1004CA0A4(&qword_100807E28);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = (char *)(v3 + 7);
  uint64_t v43 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
        uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)&v7[8 * v15] = v17 | v16;
        *(void *)(v3[6] + 8 * v14) = v11;
        uint64_t v23 = v3[2];
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        v3[2] = v24;
        if (v8 == v5) {
          return;
        }
      }
      sub_1004DE1C0(0, &qword_100808300);
      id v18 = *(id *)(v3[6] + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = a1 + 32;
  uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      sub_1004DE1C0(0, &qword_100808300);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(v3[6] + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void *sub_1004DC8F0(uint64_t a1, uint64_t a2)
{
  uint64_t result = &_swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void **)(a2 + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
    swift_bridgeObjectRetain();
    uint64_t v6 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      NSString v7 = String._bridgeToObjectiveC()();
      id v8 = [v5 passWithUniqueIdentifier:v7];

      if (v8)
      {
        self;
        uint64_t v9 = swift_dynamicCastObjCClass();
        swift_bridgeObjectRelease();
        if (v9)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v6 += 16;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1004DCA58(unint64_t a1)
{
  if (!os_variant_has_internal_ui()) {
    return;
  }
  if (a1 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_4;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_25;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(a1 + 8 * v3 + 32);
    }
    id v8 = v7;
    id v9 = [v7 type];

    if (v9 != (id)1)
    {
      BOOL v6 = __OFADD__(v4++, 1);
      if (v6)
      {
        __break(1u);
        goto LABEL_24;
      }
      goto LABEL_7;
    }
    BOOL v6 = __OFADD__(v5++, 1);
    if (v6) {
      break;
    }
LABEL_7:
    if (v2 == ++v3) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  swift_bridgeObjectRelease();
  if (v4 > 0 && (PKSimulateBuddyBackgroundProvisioningInWallet() & 1) == 0)
  {
    if (__OFADD__(v5, v4)) {
      goto LABEL_29;
    }
    sub_1004CA0A4(&qword_100807DF8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1005B4140;
    *(void *)(inited + 32) = 0x6D6E6F7269766E65;
    *(void *)(inited + 40) = 0xEB00000000746E65;
    id v11 = (id)PKStockholmEnvironmentName();
    if (v11)
    {
      Swift::Int v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v15 = 0xE000000000000000;
    }
    *(void *)(inited + 48) = v13;
    *(void *)(inited + 56) = v15;
    *(void *)(inited + 64) = 0x6C61746F74;
    *(void *)(inited + 72) = 0xE500000000000000;
    *(void *)(inited + 80) = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(inited + 88) = v16;
    *(void *)(inited + 96) = 0x736572756C696166;
    *(void *)(inited + 104) = 0xE800000000000000;
    *(void *)(inited + 112) = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(inited + 120) = v17;
    *(void *)(inited + 128) = 0x6573736563637573;
    *(void *)(inited + 136) = 0xE900000000000073;
    *(void *)(inited + 144) = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(inited + 152) = v18;
    sub_1004E4B18(inited);
    id v19 = [objc_allocWithZone((Class)PKAutoBugCaptureReporter) init];
    id v20 = PKAutoBugCaptureReporterDomainWallet;
    NSString v21 = String._bridgeToObjectiveC()();
    NSString v22 = String._bridgeToObjectiveC()();
    NSString v23 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 reportIssueWithDomain:v20 type:v21 subtype:v22 subtypeContext:v23 payload:isa];
  }
}

uint64_t sub_1004DCDE8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004DCE20(void *a1)
{
  sub_1004D1DE8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1004DCE28()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1004DCE78(void *a1, void *a2, uint64_t a3)
{
  sub_1004D7BE0(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void (**)(void))(v3 + 32), *(void *)(v3 + 40), *(void **)(v3 + 48), *(void **)(v3 + 56));
}

uint64_t sub_1004DCEA8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004DCEE8()
{
  return sub_1004D87F4(*(NSObject **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1004DCEF0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      id v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v11 = [v8 passUniqueID];
      if (v11)
      {
        Swift::Int v12 = v11;
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        if (a3)
        {
          if (v13 == a2 && v15 == a3)
          {
            swift_bridgeObjectRelease();

LABEL_22:
            swift_bridgeObjectRelease();
            return 1;
          }
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          if (v17) {
            goto LABEL_22;
          }
        }
        else
        {

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        if (!a3)
        {
          swift_bridgeObjectRelease();

          return 1;
        }
      }
      ++v7;
      if (v10 == v6) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1004DD0C4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [v6 status];
      if ((unint64_t)v9 < 4 || v9 == (id)5)
      {
        unsigned __int8 v11 = [v7 representsPass:a2];

        if (v11)
        {
          uint64_t v12 = 1;
          goto LABEL_20;
        }
      }
      else
      {
      }
      ++v5;
      if (v8 == v4)
      {
        uint64_t v12 = 0;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = 0;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

void sub_1004DD204(NSObject *a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v90 = (char *)&v89 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  BOOL v92 = (char *)&v89 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v93 = (char *)&v89 - v18;
  __chkstk_darwin(v17);
  uint64_t v102 = (char *)&v89 - v19;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  Class isa = a1[2].isa;
  Class v21 = isa;
  id v95 = a3;
  swift_retain();
  id v22 = [(objc_class *)v21 provisioningState];
  uint64_t v91 = v12;
  uint64_t v100 = a1;
  if (v22)
  {
    NSString v23 = v22;
    id v24 = [v22 sid];
  }
  else
  {
    id v24 = [(objc_class *)a1[2].isa uniqueIdentifier];
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v27 = v26;

  static Logger.Provisioning.add.getter();
  swift_bridgeObjectRetain_n();
  Swift::Int v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v101 = a2;
  uint64_t v97 = v8;
  uint64_t v98 = v9;
  uint64_t v96 = a4;
  unint64_t v99 = v27;
  uint64_t v94 = v25;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v89 = swift_slowAlloc();
    v106[0] = v89;
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v103 = sub_1004F7DDC(v25, v27, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v31 + 12) = 2112;
    swift_beginAccess();
    uint64_t v33 = v20;
    Class v34 = isa;
    uint64_t v105 = (uint64_t)isa;
    char v35 = isa;
    a2 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v32 = v34;
    uint64_t v20 = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%s] Pending: Starting background provisioning of %@", (uint8_t *)v31, 0x16u);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    uint64_t v8 = v97;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v36 = v102;
  uint64_t v102 = *(char **)(v9 + 8);
  ((void (*)(char *, uint64_t))v102)(v36, v8);
  swift_beginAccess();
  Class v37 = isa;
  id v38 = [(objc_class *)isa type];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v39 = [(objc_class *)v37 uniqueIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v40 = *(void **)&a2[OBJC_IVAR___PDPendingProvisioningManager_databaseManager];
  NSString v41 = String._bridgeToObjectiveC()();
  NSString v42 = String._bridgeToObjectiveC()();
  uint64_t v43 = (objc_class *)[v40 pendingProvisioningOfType:v41 withUniqueIdentifier:v42];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v43)
  {
    uint64_t v57 = v93;
    static Logger.Provisioning.add.getter();
    unint64_t v58 = v99;
    swift_bridgeObjectRetain();
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v104 = sub_1004F7DDC(v94, v58, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "[%s] Pending: Unable to find pending in db..", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ((void (*)(char *, uint64_t))v102)(v57, v8);
    sub_1004D4F64(v96);
    goto LABEL_26;
  }
  Class v44 = isa;
  Class isa = v43;
  uint64_t v45 = v43;

  if ([(objc_class *)v45 status] != (id)1)
  {
    uint64_t v62 = v92;
    static Logger.Provisioning.add.getter();
    unint64_t v63 = v99;
    swift_bridgeObjectRetain();
    unint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v104 = sub_1004F7DDC(v94, v63, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "[%s] Pending: Pending provisioning not available", v66, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v67 = v97;
      char v68 = v62;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      char v68 = v62;
      uint64_t v67 = v8;
    }
    ((void (*)(char *, uint64_t))v102)(v68, v67);
    sub_1004D4F64(v96);

    goto LABEL_26;
  }
  unint64_t v46 = v45;
  id v47 = sub_1004D510C(v46);

  uint64_t v48 = *((void *)v47 + 2);
  if (!v48) {
    goto LABEL_16;
  }
  uint64_t v49 = *((void *)v47 + 5);
  uint64_t v50 = swift_unknownObjectRetain();
  if ((sub_1004D5684(v50, v49, v100) & 1) == 0)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    double v69 = v91;
    static Logger.Provisioning.add.getter();
    swift_unknownObjectRetain_n();
    unint64_t v70 = v99;
    swift_bridgeObjectRetain();
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc();
      uint64_t v101 = (char *)swift_slowAlloc();
      uint64_t v105 = (uint64_t)v101;
      *(_DWORD *)uint64_t v73 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v104 = sub_1004F7DDC(v94, v70, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(ObjectType, v49);
      uint64_t v104 = sub_1004F7DDC(v75, v76, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "[%s] Pending: Waiting for %s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_unknownObjectRelease();
      ((void (*)(char *, uint64_t))v102)(v91, v97);
      Class v54 = isa;
      goto LABEL_27;
    }

    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease_n();

    ((void (*)(char *, uint64_t))v102)(v69, v97);
LABEL_26:
    Class v54 = isa;
LABEL_27:
    swift_release();
LABEL_28:

    return;
  }
  swift_unknownObjectRelease();
  if (v48 == 1)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    Class v54 = v46;
    id v55 = sub_1004D4478(v54);

    if (v55)
    {
      swift_bridgeObjectRelease();
      [(objc_class *)v54 setStatus:2];
      uint64_t v56 = v54;
      sub_1004D4DFC(v56);

      Class v54 = v56;
      sub_1004D5FBC((uint64_t)v100, v54, v55, (uint64_t)sub_1004DDFEC, v20);
      swift_release();
    }
    else
    {
      uint64_t v77 = v90;
      static Logger.Provisioning.add.getter();
      unint64_t v78 = v99;
      swift_bridgeObjectRetain();
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        uint64_t v105 = swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v104 = sub_1004F7DDC(v94, v78, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%s] Pending: Unable to find credential for pending", v81, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v82 = v90;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v82 = v77;
      }
      ((void (*)(char *, uint64_t))v102)(v82, v97);
      Class v83 = isa;
      id v84 = [(objc_class *)isa type];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v85 = [(objc_class *)v83 uniqueIdentifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v86 = String._bridgeToObjectiveC()();
      NSString v87 = String._bridgeToObjectiveC()();
      id v88 = [v40 pendingProvisioningOfType:v86 withUniqueIdentifier:v87];

      if (v88)
      {
        sub_1004D2BB0(v88, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_1004D4F64(v96);
      swift_release();
    }
    goto LABEL_28;
  }
  id v51 = (uint64_t *)(v47 + 56);
  unint64_t v52 = 1;
  while (v52 < *((void *)v47 + 2))
  {
    uint64_t v49 = *v51;
    uint64_t v53 = swift_unknownObjectRetain();
    if ((sub_1004D5684(v53, v49, v100) & 1) == 0) {
      goto LABEL_29;
    }
    swift_unknownObjectRelease();
    ++v52;
    v51 += 2;
    if (v48 == v52) {
      goto LABEL_16;
    }
  }
  __break(1u);
}

uint64_t sub_1004DDFAC()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004DDFEC()
{
  return sub_1004D4F64(*(void *)(v0 + 24));
}

uint64_t sub_1004DE014()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  return _swift_deallocObject(v0, 96, 7);
}

char *sub_1004DE084(unint64_t a1, uint64_t a2)
{
  return sub_1004D6194(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(char **)(v2 + 40), *(void *)(v2 + 48), *(NSObject **)(v2 + 56), *(void *)(v2 + 64), *(uint64_t (**)(void))(v2 + 72));
}

uint64_t sub_1004DE0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1004DE11C()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1004DE164()
{
  sub_1004D8AB0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1004DE170()
{
  return sub_1004D1140();
}

uint64_t sub_1004DE198(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004DE1C0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1004DE1FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1004DC044(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004DE240(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100511754(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for PendingProvisioningManager.PreconditionCheckResult(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PendingProvisioningManager.PreconditionCheckResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DE508);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PendingProvisioningManager.PreconditionCheckResult()
{
  return &type metadata for PendingProvisioningManager.PreconditionCheckResult;
}

unint64_t sub_1004DE544()
{
  unint64_t result = qword_100807E78;
  if (!qword_100807E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100807E78);
  }
  return result;
}

uint64_t type metadata accessor for PDARRUnifiedAccessDecryptionProvider()
{
  return self;
}

void sub_1004DE680(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1004DE1C0(0, &qword_100808300);
    sub_1004DC1B0((unint64_t *)&unk_100807DB0, &qword_100808300);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      uint64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (objc_msgSend(v12, "paymentType", v16) == (id)1003) {
              break;
            }

            uint64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_1004DE1C0(0, &qword_100808300);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v23;
            swift_unknownObjectRelease();
            uint64_t v11 = v3;
            uint64_t v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      uint64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v15 = v3 + 6;
          while (v8 != v15)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v15++);
            if (v14)
            {
              uint64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_1004DC1A8();
    return;
  }
  __break(1u);
}

void sub_1004DEB70(void *a1, int a2, void *a3, void *a4, void *aBlock, uint64_t a6)
{
  unint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = (void (*)(void *, uint64_t, void))v10[2];
  id v12 = a3;
  id v13 = a4;
  id v14 = a1;
  v11(v10, a6, 0);
  _Block_release(v10);
}

void sub_1004DED40(uint64_t a1, unint64_t a2, uint64_t a3, id a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain();
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v27[0] = v9;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      id v28 = a4;
      uint64_t v17 = (void *)v16;
      v27[1] = a5;
      *(_DWORD *)uint64_t v15 = 138412290;
      swift_errorRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v29 = v18;
      uint64_t v9 = v27[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v17 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "PDARRUnifiedAccessSignatureProvider: Failed to generate Unified Access key with error: %@", v15, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      a4 = v28;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_errorRetain();
    ((void (*)(void, uint64_t))a4)(0, a3);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    id v19 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
    if (a2 >> 60 == 15) {
      Class isa = 0;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    [v19 setSignature:isa];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1005B4130;
    *(void *)(v21 + 32) = v19;
    uint64_t v29 = v21;
    specialized Array._endMutation()();
    id v22 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    id v23 = v19;
    Class v24 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v25 = [v22 initWithKeyMaterialContents:v24];

    id v28 = v25;
    ((void (*)(id, void))a4)(v25, 0);

    id v26 = v28;
  }
}

uint64_t sub_1004DF0F4(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    unint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_1004CEAD4((uint64_t)v4, v8);
  return swift_release();
}

void sub_1004DF1A0(void *a1, void (**a2)(void, void, void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v72 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  os_log_type_t v14 = (char *)&v72 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v72 - v16;
  __chkstk_darwin(v15);
  id v19 = (char *)&v72 - v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  _Block_copy(a2);
  if (!PKAuxiliaryCapabilityHydraUnifiedAccessEnabled())
  {
    static Logger.auxiliaryCapability.getter();
    id v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      NSString v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "PDARRUnifiedAccessSignatureProvider: Disabled", v41, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v42 = objc_allocWithZone((Class)NSError);
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v42 initWithDomain:v43 code:4 userInfo:0];

    uint64_t v36 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, void *))a2)[2](a2, 0, 0, v36);
    goto LABEL_14;
  }
  id v21 = [a1 pass];
  id v73 = v21;
  if (!v21)
  {
    id v50 = [a1 previouslyGeneratedSignatureKeyOfType:1];
    if (v50)
    {
      uint64_t v32 = v50;
      uint64_t v74 = v20;
      id v51 = [v50 contents];
      if (!v51) {
        goto LABEL_36;
      }
      unint64_t v52 = v51;
      sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
      unint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v53 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v66) {
          goto LABEL_22;
        }
      }
      else if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_22:
        if ((v53 & 0xC000000000000001) != 0)
        {
          id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_42;
          }
          id v54 = *(id *)(v53 + 32);
        }
        id v55 = v54;
        swift_bridgeObjectRelease();
        id v30 = [v55 publicKeyIdentifier];

        if (v30)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          goto LABEL_9;
        }
LABEL_36:
        static Logger.auxiliaryCapability.getter();
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v67, v68))
        {
          double v69 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)double v69 = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "PDARRUnifiedAccessDecryptionProvider: Previously generated key material missing public key identifier", v69, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v70 = objc_allocWithZone((Class)NSError);
        NSString v71 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v22 = [v70 initWithDomain:v71 code:4 userInfo:0];

        uint64_t v36 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void, void, void *))a2)[2](a2, 0, 0, v36);
        swift_release();

        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    static Logger.auxiliaryCapability.getter();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      unint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "PDARRUnifiedAccessDecryptionProvider: Missing previously generated key material", v58, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v59 = objc_allocWithZone((Class)NSError);
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v59 initWithDomain:v60 code:4 userInfo:0];

    uint64_t v36 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, void *))a2)[2](a2, 0, 0, v36);
LABEL_14:
    swift_release();
LABEL_39:

    return;
  }
  uint64_t v72 = v4;
  uint64_t v74 = v20;
  id v22 = v21;
  id v23 = [v22 devicePaymentApplications];
  if (!v23)
  {
LABEL_42:
    _Block_release(a2);
    __break(1u);
    goto LABEL_43;
  }
  Class v24 = v23;
  sub_1004DE1C0(0, &qword_100808300);
  sub_1004DC1B0((unint64_t *)&unk_100807DB0, &qword_100808300);
  uint64_t v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1004DE680(v25);
  unint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_15:
    static Logger.auxiliaryCapability.getter();
    Class v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      unint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "PDARRUnifiedAccessDecryptionProvider: Pass missing subcredential", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v72);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v47 = objc_allocWithZone((Class)NSError);
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v49 = [v47 initWithDomain:v48 code:4 userInfo:0];

    uint64_t v36 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, void *))a2)[2](a2, 0, 0, v36);
    swift_release();

    goto LABEL_39;
  }
  id v28 = [v27 subcredentials];

  if (!v28)
  {
LABEL_43:
    _Block_release(a2);
    __break(1u);
    goto LABEL_44;
  }
  sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
  sub_1004DC1B0((unint64_t *)&qword_100807DC0, (unint64_t *)&unk_1008083A0);
  uint64_t v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v30 = (id)sub_100507F2C(v29);
  swift_bridgeObjectRelease();
  if (!v30) {
    goto LABEL_15;
  }
  id v31 = [v30 identifier];
  if (v31)
  {
    uint64_t v32 = v31;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = v72;
LABEL_9:

    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v74;
    *(void *)(v33 + 16) = sub_1004DFD70;
    *(void *)(v33 + 24) = v34;
    swift_retain_n();
    id v35 = [a1 secureElement];
    if (v35)
    {
      id v22 = v35;
      uint64_t v36 = String._bridgeToObjectiveC()();
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = sub_1004DFDB0;
      *(void *)(v37 + 24) = v33;
      aBlock[4] = sub_1004DFDE0;
      aBlock[5] = v37;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004DF0F4;
      aBlock[3] = &unk_100757538;
      id v38 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v22 generateSEEncryptionCertificateForSubCredentialId:v36 completion:v38];
      _Block_release(v38);
      swift_bridgeObjectRelease();
    }
    else
    {
      static Logger.auxiliaryCapability.getter();
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        unint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "PDARRUnifiedAccessDecryptionProvider: Missing secure element", v63, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v64 = objc_allocWithZone((Class)NSError);
      NSString v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v22 = [v64 initWithDomain:v65 code:4 userInfo:0];

      uint64_t v36 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void, void, void *))a2)[2](a2, 0, 0, v36);
      swift_bridgeObjectRelease();
    }
    swift_release_n();
    swift_release();

    goto LABEL_39;
  }
LABEL_44:
  _Block_release(a2);
  __break(1u);
}

uint64_t sub_1004DFD38()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004DFD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100513FC0(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1004DFD78()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004DFDB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16))(a1, 0, a2);
}

void sub_1004DFDE0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1004DED40(a1, a2, a3, *(id *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1004DFDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004DFDF8()
{
  return swift_release();
}

id sub_1004DFE34()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PendingProvisioningDeviceUnlockPrecondition();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PendingProvisioningDeviceUnlockPrecondition()
{
  return self;
}

uint64_t sub_1004DFEDC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC5passd43PendingProvisioningDeviceUnlockPrecondition_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1004DFF18(void (*a1)(void), uint64_t a2)
{
  return sub_100510CCC(1, a1, a2);
}

BOOL sub_1004DFF50()
{
  return swift_dynamicCastClass() != 0;
}

uint64_t type metadata accessor for PDARRISO18013CredentialProvider()
{
  return self;
}

void sub_1004E004C(uint64_t a1, uint64_t a2, void (*a3)(id, void, void))
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v9 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 setKeyReferenceIdentifier:v10];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1005B4130;
    *(void *)(v11 + 32) = v9;
    v19[1] = (id)v11;
    specialized Array._endMutation()();
    id v12 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004E06C4();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v14 = [v12 initWithKeyMaterialContents:isa];

    v19[0] = v14;
    a3(v14, 0, 0);

    id v15 = v19[0];
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "PDARRISO18013CredentialProvider failed to generate key material", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    a3(0, 0, 0);
  }
}

uint64_t sub_1004E02E0(uint64_t a1, uint64_t a2)
{
  objc_super v2 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  swift_retain();
  v2(v3, v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004E0634()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004E066C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004E06A4(uint64_t a1, uint64_t a2)
{
  sub_1004E004C(a1, a2, *(void (**)(id, void, void))(v2 + 16));
}

uint64_t sub_1004E06AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004E06BC()
{
  return swift_release();
}

unint64_t sub_1004E06C4()
{
  unint64_t result = qword_100807F10;
  if (!qword_100807F10)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100807F10);
  }
  return result;
}

uint64_t type metadata accessor for PDARRCCCSignatureProvider()
{
  return self;
}

void sub_1004E0860(uint64_t a1, void *a2, void (*a3)(id, uint64_t), uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v42 = a5;
  uint64_t v43 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v43 - 8);
  uint64_t v15 = __chkstk_darwin(v43);
  os_log_type_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)&v42 - v18;
  uint64_t v20 = (void *)swift_allocObject();
  Class v44 = a3;
  void v20[2] = a3;
  void v20[3] = a4;
  void v20[4] = a2;
  void v20[5] = a8;
  swift_retain_n();
  id v21 = a2;
  swift_retain_n();
  id v45 = v21;
  unint64_t v22 = (unint64_t)sub_1004E2F8C(a6);
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    static Logger.auxiliaryCapability.getter();
    id v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      NSString v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "PDARRCCCSignatureProvider: No upgrade available", v41, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v43);
    goto LABEL_15;
  }
  if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_3:
  id v23 = objc_msgSend(a7, "pass", v42);
  if (!v23
    || (Class v24 = v23,
        id v25 = [v23 devicePrimaryPaymentApplication],
        v24,
        !v25))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    static Logger.auxiliaryCapability.getter();
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "PDARRCCCSignatureProvider: No upgrade available", v37, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v43);
LABEL_15:
    id v34 = v45;
    v44(v45, 1);
    swift_release();
    swift_release();
    goto LABEL_16;
  }
  id v26 = [v25 subcredentials];

  if (v26)
  {
    sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v27 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v28 = (void *)sub_100507F2C(v27);
    swift_bridgeObjectRelease();
    if (v28)
    {
      uint64_t v29 = *(void **)(v42 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager);
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
      id v30 = v28;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = sub_1004E4A8C;
      *(void *)(v32 + 24) = v20;
      aBlock[4] = sub_1004E4AEC;
      aBlock[5] = v32;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004F8F10;
      aBlock[3] = &unk_100757B48;
      uint64_t v33 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v29 hasUpgradeAvailableForKeyWithCredential:v30 versionType:1 versions:isa completion:v33];
      _Block_release(v33);
      swift_release();
      swift_release();

      id v34 = v45;
LABEL_16:
      swift_release();

      return;
    }
    goto LABEL_8;
  }
  swift_release();

  swift_release();
  __break(1u);
}

uint64_t sub_1004E0D50(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, BOOL), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_beginAccess();
    *(void *)(a7 + 16) = a1;
    *(void *)(a7 + 24) = a2;
    *(unsigned char *)(a7 + 32) = 1;
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "PDARRCCCSignatureProvider: No upgrade available", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return a4(a6, (a3 & 1) == 0);
}

uint64_t sub_1004E0EF4(uint64_t a1, void *a2, uint64_t (*a3)(void *, void), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13 = type metadata accessor for ProvisioningCarKeyUtility.BindingAttestationRequestType();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  if (*(unsigned char *)(a5 + 32) == 2) {
    goto LABEL_11;
  }
  if (*(void *)(a5 + 16) != 1 || *(void *)(a5 + 24) != 3) {
    return a3(a2, 0);
  }
  id v19 = [*(id *)(a6 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_webServiceCoordinator) sharedWebService];
  if (!v19)
  {
    __break(1u);
LABEL_11:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v20 = v19;
  type metadata accessor for ProvisioningCarKeyUtility();
  swift_allocObject();
  id v21 = v20;
  ProvisioningCarKeyUtility.init(destinationWebService:managingWebService:)();
  *uint64_t v16 = a7;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for ProvisioningCarKeyUtility.BindingAttestationRequestType.existingCredential(_:), v13);
  unint64_t v22 = (void *)swift_allocObject();
  v22[2] = a3;
  void v22[3] = a4;
  void v22[4] = a2;
  id v23 = a7;
  swift_retain();
  id v24 = a2;
  ProvisioningCarKeyUtility.generatingBindingAttestation(_:existingSalt:sid:completion:)();

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
}

void sub_1004E117C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  swift_beginAccess();
  int v16 = *(unsigned __int8 *)(a5 + 32);
  if (v16 != 2)
  {
    uint64_t v17 = *(void *)(a5 + 16);
    uint64_t v18 = *(void *)(a5 + 24);
    uint64_t v19 = PKAppletSubcredentialCarKeyVehicleVersionToKMLVersion();
    if ((v19 & 0x8000000000000000) == 0)
    {
      id v26 = *(void **)&a6[OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager];
      uint64_t v27 = v19;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = a3;
      *(void *)(v21 + 24) = a4;
      *(void *)(v21 + 32) = a2;
      *(void *)(v21 + 40) = a6;
      *(void *)(v21 + 48) = a7;
      *(void *)(v21 + 56) = a10;
      *(void *)(v21 + 64) = v17;
      *(void *)(v21 + 72) = v18;
      *(unsigned char *)(v21 + 80) = v16 & 1;
      aBlock[4] = sub_1004E490C;
      aBlock[5] = v21;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004F8E34;
      aBlock[3] = &unk_100757A58;
      unint64_t v22 = _Block_copy(aBlock);
      swift_retain();
      id v23 = a2;
      id v24 = a6;
      id v25 = a7;
      swift_retain();
      swift_release();
      [v26 upgradeKeyWithCredential:v25 versionType:1 version:v27 upgradeInformation:isa completion:v22];
      _Block_release(v22);

      return;
    }
    __break(1u);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1004E1364(uint64_t a1, void (*a2)(void, void), uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v38 = v20;
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v36[1] = a3;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v37 = a4;
      id v26 = (uint8_t *)v25;
      v36[0] = swift_slowAlloc();
      *(_DWORD *)id v26 = 138412290;
      swift_errorRetain();
      uint64_t v27 = a2;
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)v36[0] = v28;
      a2 = v27;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "PDARRCCCSignatureProvider: Failed to upgrade key with error: %@", v26, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v37;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v38);
    a2(a4, 1);
  }
  else
  {
    uint64_t v29 = *(void **)(a5 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager);
    id v30 = [a6 identifier];
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = a2;
    *(void *)(v31 + 24) = a3;
    *(void *)(v31 + 32) = a4;
    *(void *)(v31 + 40) = a7;
    *(void *)(v31 + 48) = a8;
    *(void *)(v31 + 56) = a9;
    *(unsigned char *)(v31 + 64) = a10 & 1;
    *(void *)(v31 + 72) = a6;
    aBlock[4] = sub_1004E4998;
    aBlock[5] = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004E1B44;
    aBlock[3] = &unk_100757AA8;
    uint64_t v32 = a4;
    uint64_t v33 = _Block_copy(aBlock);
    swift_retain();
    id v34 = v32;
    swift_retain();
    id v35 = a6;
    swift_release();
    [v29 deviceCredentialForIdentifier:v30 completion:v33];
    _Block_release(v33);
  }
}

void sub_1004E16D4(void *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v13 = a1;
    id v14 = [v13 trackingRequest];
    if (v14)
    {
      uint64_t v15 = v14;
      int v16 = (void **)(a5 + 16);
      id v17 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial) init];
      swift_beginAccess();
      uint64_t v18 = *(void **)(a5 + 16);
      *(void *)(a5 + 16) = v17;

      swift_beginAccess();
      if (*(void *)(a5 + 16))
      {
        id v19 = *(id *)(a5 + 16);
        NSString v20 = (id)PKAppletSubcredentialCarKeyVehicleVersionToString();
        if (!v20)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v20 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        [v19 setVersion:v20];
      }
      swift_beginAccess();
      uint64_t v21 = *v16;
      if (*v16)
      {
        sub_1004CA0A4(&qword_100807D10);
        uint64_t v22 = swift_allocObject();
        *(_OWORD *)(v22 + 16) = xmmword_1005B4130;
        *(void *)(v22 + 32) = v15;
        v39[2] = v22;
        specialized Array._endMutation()();
        sub_1004DE1C0(0, &qword_100807FC8);
        id v23 = v21;
        id v24 = v15;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v23 setEncryptedContents:isa];
      }
      id v26 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
      id v27 = [self sharedInstance];
      if (v27)
      {
        uint64_t v28 = v27;
        id v29 = [v27 appleAccountInformation];

        id v30 = (id)PKCreatePersonalVehicleIdentifier();
        [v26 setKeyReferenceIdentifier:v30];

        swift_beginAccess();
        uint64_t v31 = *v16;
        if (*v16)
        {
          sub_1004CA0A4(&qword_100807D10);
          uint64_t v32 = swift_allocObject();
          *(_OWORD *)(v32 + 16) = xmmword_1005B4130;
          *(void *)(v32 + 32) = v26;
          v39[1] = v32;
          specialized Array._endMutation()();
          sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
          id v33 = v31;
          id v34 = v26;
          Class v35 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v33 setContents:v35];
        }
        a2(a4, 0);
      }
      else
      {
        __break(1u);
      }
      return;
    }
  }
  static Logger.auxiliaryCapability.getter();
  os_log_type_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "PDARRCCCSignatureProvider: Failed get updated subcredential or tracking request", v38, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  a2(a4, 1);
}

void sub_1004E1B44(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1004E1BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, void, id))
{
  swift_beginAccess();
  uint64_t v7 = *(void **)(a4 + 16);
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = v7;
    id v10 = 0;
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v11 = objc_allocWithZone((Class)NSError);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v8 = [v11 initWithDomain:v12 code:4 userInfo:0];

    uint64_t v9 = 0;
    id v10 = v8;
  }
  a5(v9, 0, v10);
}

uint64_t sub_1004E1D48(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return a2(0);
  }
  swift_errorRetain();
  static Logger.auxiliaryCapability.getter();
  swift_errorRetain();
  swift_errorRetain();
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    int v16 = a2;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v4;
    id v11 = (uint8_t *)v10;
    id v14 = (void *)swift_slowAlloc();
    *(_DWORD *)id v11 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v17 = v12;
    a2 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v14 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "PDARRCCCSignatureProvider: Failed to commit migration with error: %@", v11, 0xCu);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v15;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_errorRetain();
  a2(a1);
  swift_errorRelease();
  return swift_errorRelease();
}

void sub_1004E20B0(uint64_t a1, uint64_t a2, char a3, void *a4, void (*a5)(id, id))
{
  if (a3 == 2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = objc_allocWithZone((Class)NSError);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v8 = [v6 initWithDomain:v7 code:4 userInfo:0];

    id v9 = 0;
    id v17 = v8;
  }
  else
  {
    id v11 = (id)PKAppletSubcredentialCarKeyVehicleVersionToString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v12 = (id)PKAppletSubcredentialCarKeyVehicleVersionToString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v13 = objc_allocWithZone((Class)PKAuxiliaryCapabilityKeyCreationMetadataRequestCapabilityState);
    id v14 = a4;
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [v13 initWithCapability:v14 currentVersion:v15 targetVersion:v16];

    id v8 = 0;
    id v17 = v9;
  }
  a5(v9, v8);
}

void sub_1004E227C(void *a1, int a2, void *a3, void *a4, void *aBlock, void (*a6)(id, id, id, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  a6(v11, v12, v13, v10);
  _Block_release(v10);
  _Block_release(v10);
}

uint64_t sub_1004E243C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v21 = a6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    swift_errorRetain();
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      NSString v20 = (void *)swift_slowAlloc();
      *(_DWORD *)id v14 = 138412290;
      id v19 = v14 + 4;
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v22 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v20 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "PDARRCCCSignatureProvider: Failed to check upgrade available with error: %@", v14, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v21(0, 0, 2);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v16 = PKAppletSubcredentialCarKeyVehicleVersionFromInteger();
    uint64_t v17 = PKAppletSubcredentialCarKeyVehicleVersionFromInteger();
    return v21(v16, v17, a2 & 1);
  }
}

void sub_1004E26D8(void *a1, void *a2, void **a3, void (**a4)(void, void, void, void))
{
  uint64_t v77 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  _Block_copy(a4);
  id v12 = [a2 pass];
  if (!v12) {
    goto LABEL_10;
  }
  os_log_type_t v13 = v12;
  id v14 = [v12 devicePrimaryPaymentApplication];

  if (!v14) {
    goto LABEL_10;
  }
  id v15 = [v14 subcredentials];

  if (!v15)
  {
    _Block_release(a4);
    __break(1u);
    return;
  }
  sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
  sub_1004E4548();
  uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = (void **)sub_100507F2C(v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    unint64_t v76 = v17;
    id v18 = [a1 keyCreationMetadata];
    if (v18)
    {
      id v19 = v18;
      id v20 = [v18 signatureCarConnectivityConsortium];

      if (v20)
      {
        id v21 = [v20 container];

        if (v21)
        {
          id v72 = *(void **)((char *)v77 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager);
          id v22 = [v21 data];
          id v75 = v21;
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v26 = v25;

            Class isa = Data._bridgeToObjectiveC()().super.isa;
            unint64_t v27 = v26;
            id v21 = v75;
            sub_1004CEAE8(v24, v27);
          }
          else
          {
            Class isa = 0;
          }
          uint64_t v74 = v76;
          Class v28 = (Class)[v21 rawEphemeralPublicKey];
          NSString v71 = a1;
          if (v28)
          {
            uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v31 = v30;

            Class v28 = Data._bridgeToObjectiveC()().super.isa;
            sub_1004CEAE8(v29, v31);
          }
          Class v32 = isa;
          id v33 = v74;
          Class v34 = v28;
          id v35 = [v72 decryptData:isa withCredential:v74 ephemeralPublicKey:v28];

          if (v35)
          {
            uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            id v72 = v37;
            Class isa = (Class)v36;

            id v38 = [objc_allocWithZone((Class)PKAsyncUnaryOperationComposer) init];
            uint64_t v39 = swift_allocObject();
            *(void *)(v39 + 16) = 0;
            *(void *)(v39 + 24) = 0;
            *(unsigned char *)(v39 + 32) = 2;
            os_log_type_t v40 = (void *)swift_allocObject();
            NSString v41 = v77;
            uint64_t v42 = v71;
            void v40[2] = v77;
            v40[3] = v42;
            v40[4] = a2;
            void v40[5] = v39;
            uint64_t v82 = sub_1004E46F0;
            Class v83 = v40;
            aBlock = _NSConcreteStackBlock;
            uint64_t v79 = 1107296256;
            unint64_t v76 = &v80;
            os_log_type_t v80 = sub_1004F4BE8;
            uint64_t v81 = &unk_1007578F0;
            uint64_t v43 = _Block_copy(&aBlock);
            Class v44 = v74;
            id v45 = v41;
            id v46 = v42;
            id v47 = a2;
            swift_retain();
            swift_release();
            [v38 addOperation:v43];
            _Block_release(v43);
            NSString v48 = (void *)swift_allocObject();
            v48[2] = v39;
            v48[3] = v45;
            void v48[4] = v44;
            uint64_t v82 = sub_1004E4744;
            Class v83 = v48;
            aBlock = _NSConcreteStackBlock;
            uint64_t v79 = 1107296256;
            os_log_type_t v80 = sub_1004F4BE8;
            uint64_t v81 = &unk_100757940;
            id v49 = _Block_copy(&aBlock);
            id v50 = v44;
            id v51 = v45;
            swift_retain();
            swift_release();
            unint64_t v52 = v38;
            [v38 addOperation:v49];
            _Block_release(v49);
            uint64_t v53 = swift_allocObject();
            *(void *)(v53 + 16) = 0;
            id v54 = (void *)swift_allocObject();
            v54[2] = v39;
            v54[3] = v51;
            unint64_t v56 = (unint64_t)v72;
            uint64_t v55 = (uint64_t)isa;
            v54[4] = v50;
            v54[5] = v55;
            v54[6] = v56;
            v54[7] = v53;
            uint64_t v82 = sub_1004E47E0;
            Class v83 = v54;
            aBlock = _NSConcreteStackBlock;
            uint64_t v79 = 1107296256;
            os_log_type_t v80 = sub_1004F4BE8;
            uint64_t v81 = &unk_1007579B8;
            os_log_type_t v57 = _Block_copy(&aBlock);
            uint64_t v77 = v50;
            unint64_t v58 = v51;
            swift_retain();
            sub_1004E4810(v55, v56);
            swift_retain();
            swift_release();
            [v52 addOperation:v57];
            _Block_release(v57);
            id v59 = [objc_allocWithZone((Class)NSNull) init];
            NSString v60 = (void *)swift_allocObject();
            v60[2] = v53;
            v60[3] = sub_1004DFD70;
            v60[4] = v11;
            uint64_t v82 = sub_1004E48A8;
            Class v83 = v60;
            aBlock = _NSConcreteStackBlock;
            uint64_t v79 = 1107296256;
            os_log_type_t v80 = sub_1004F4CBC;
            uint64_t v81 = &unk_100757A08;
            uint64_t v61 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            id v62 = [v52 evaluateWithInput:v59 completion:v61];
            _Block_release(v61);

            swift_release();
            swift_release();
            swift_unknownObjectRelease();

            sub_1004CEAE8(v55, v56);
            swift_release();

            return;
          }
        }
      }
    }
    static Logger.auxiliaryCapability.getter();
    unint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      NSString v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "PDARRCCCSignatureProvider: Missing key creation metadata or failed to decrypt", v65, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v66 = objc_allocWithZone((Class)NSError);
    NSString v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v68 = [v66 initWithDomain:v67 code:4 userInfo:0];

    double v69 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, void *))a4)[2](a4, 0, 0, v69);
    swift_release();
  }
  else
  {
LABEL_10:
    a4[2](a4, 0, 0, 0);
    swift_release();
  }
}

void *sub_1004E2F8C(void *a1)
{
  id v1 = [a1 supportedVersions];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v5 = v3 + 40;
      do
      {
        swift_bridgeObjectRetain();
        NSString v6 = String._bridgeToObjectiveC()();
        PKAppletSubcredentialCarKeyVehicleVersionFromString();

        [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:PKAppletSubcredentialCarKeyVehicleVersionToKMLVersion()];
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void sub_1004E30C8(void *a1)
{
  id v3 = [a1 pass];
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  id v5 = [v3 devicePrimaryPaymentApplication];

  if (!v5) {
    return;
  }
  id v6 = [v5 subcredentials];

  if (!v6) {
    goto LABEL_71;
  }
  sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
  sub_1004E4548();
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v34 = (id)sub_100507F2C(v7);
  swift_bridgeObjectRelease();
  if (!v34) {
    return;
  }
  id v8 = [a1 previouslyGeneratedDecryptionKeyOfType:5];
  if (!v8) {
    goto LABEL_17;
  }
  uint64_t v9 = v8;
  id v10 = [v8 version];
  if (!v10)
  {

LABEL_17:

    return;
  }
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v15 = HIBYTE(v14) & 0xF;
  uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(v14) & 0xF;
  }
  else {
    uint64_t v17 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    if ((v14 & 0x1000000000000000) != 0)
    {
      uint64_t v19 = sub_1004FDFAC(v12, v14, 10);
      LOBYTE(v12) = v33;
      goto LABEL_44;
    }
    if ((v14 & 0x2000000000000000) == 0)
    {
      if ((v12 & 0x1000000000000000) != 0) {
        id v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        id v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v19 = (uint64_t)sub_1004FDF94(v18, v16, 10);
      LOBYTE(v12) = v20 & 1;
      goto LABEL_44;
    }
    v35[0] = v12;
    v35[1] = v14 & 0xFFFFFFFFFFFFFFLL;
    if (v12 == 43)
    {
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v12) - 48) <= 9u)
        {
          uint64_t v19 = (BYTE1(v12) - 48);
          if (v15 == 2) {
            goto LABEL_43;
          }
          if ((BYTE2(v12) - 48) <= 9u)
          {
            uint64_t v19 = 10 * (BYTE1(v12) - 48) + (BYTE2(v12) - 48);
            uint64_t v21 = v15 - 3;
            if (v21)
            {
              id v22 = (unsigned __int8 *)v35 + 3;
              while (1)
              {
                unsigned int v23 = *v22 - 48;
                if (v23 > 9) {
                  goto LABEL_41;
                }
                uint64_t v24 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63) {
                  goto LABEL_41;
                }
                uint64_t v19 = v24 + v23;
                if (__OFADD__(v24, v23)) {
                  goto LABEL_41;
                }
                LOBYTE(v12) = 0;
                ++v22;
                if (!--v21) {
                  goto LABEL_44;
                }
              }
            }
            goto LABEL_43;
          }
        }
        goto LABEL_41;
      }
    }
    else
    {
      if (v12 != 45)
      {
        if (v15 && (v12 - 48) <= 9u)
        {
          uint64_t v19 = (v12 - 48);
          if (v15 == 1) {
            goto LABEL_43;
          }
          if ((BYTE1(v12) - 48) <= 9u)
          {
            uint64_t v19 = 10 * (v12 - 48) + (BYTE1(v12) - 48);
            uint64_t v25 = v15 - 2;
            if (v25)
            {
              unint64_t v26 = (unsigned __int8 *)v35 + 2;
              while (1)
              {
                unsigned int v27 = *v26 - 48;
                if (v27 > 9) {
                  goto LABEL_41;
                }
                uint64_t v28 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63) {
                  goto LABEL_41;
                }
                uint64_t v19 = v28 + v27;
                if (__OFADD__(v28, v27)) {
                  goto LABEL_41;
                }
                LOBYTE(v12) = 0;
                ++v26;
                if (!--v25) {
                  goto LABEL_44;
                }
              }
            }
            goto LABEL_43;
          }
        }
LABEL_41:
        uint64_t v19 = 0;
        LOBYTE(v12) = 1;
        goto LABEL_44;
      }
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v12) - 48) <= 9u)
        {
          if (v15 == 2)
          {
            LOBYTE(v12) = 0;
            uint64_t v19 = -(uint64_t)(BYTE1(v12) - 48);
LABEL_44:
            swift_bridgeObjectRelease();
            if ((v12 & 1) == 0) {
              [*(id *)(v1 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager) revertUpgradeForKeyWithCredential:v34 versionType:1 version:v19 completion:0];
            }

            return;
          }
          if ((BYTE2(v12) - 48) <= 9u)
          {
            uint64_t v19 = -10 * (BYTE1(v12) - 48) - (BYTE2(v12) - 48);
            uint64_t v29 = v15 - 3;
            if (v29)
            {
              unint64_t v30 = (unsigned __int8 *)v35 + 3;
              while (1)
              {
                unsigned int v31 = *v30 - 48;
                if (v31 > 9) {
                  goto LABEL_41;
                }
                uint64_t v32 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63) {
                  goto LABEL_41;
                }
                uint64_t v19 = v32 - v31;
                if (__OFSUB__(v32, v31)) {
                  goto LABEL_41;
                }
                LOBYTE(v12) = 0;
                ++v30;
                if (!--v29) {
                  goto LABEL_44;
                }
              }
            }
LABEL_43:
            LOBYTE(v12) = 0;
            goto LABEL_44;
          }
        }
        goto LABEL_41;
      }
      __break(1u);
    }
    __break(1u);
LABEL_71:
    __break(1u);
    return;
  }

  swift_bridgeObjectRelease();
}

void sub_1004E3530(void *a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)aBlock - v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  _Block_copy(a4);
  id v16 = [a2 pass];
  if (!v16) {
    goto LABEL_8;
  }
  uint64_t v17 = v16;
  id v18 = [v16 devicePrimaryPaymentApplication];

  if (!v18) {
    goto LABEL_8;
  }
  id v19 = [v18 subcredentials];

  if (!v19) {
    goto LABEL_16;
  }
  sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
  sub_1004E4548();
  uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v21 = (void *)sub_100507F2C(v20);
  swift_bridgeObjectRelease();
  if (!v21)
  {
LABEL_8:
    static Logger.auxiliaryCapability.getter();
    unsigned int v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      char v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "PDARRCCCSignatureProvider: Failed to find subcredential to commit migration", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v34 = objc_allocWithZone((Class)NSError);
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v29 = [v34 initWithDomain:v35 code:4 userInfo:0];

    unint64_t v30 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v30);
    swift_release();
    goto LABEL_11;
  }
  id v22 = [a1 version];
  if (!v22)
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "PDARRCCCSignatureProvider: Failed to find version to commit migration", v38, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v39 = objc_allocWithZone((Class)NSError);
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v29 = [v39 initWithDomain:v40 code:4 userInfo:0];

    unint64_t v30 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v30);
    swift_release();

    goto LABEL_11;
  }
  unsigned int v23 = v22;
  PKAppletSubcredentialCarKeyVehicleVersionFromString();

  uint64_t v24 = PKAppletSubcredentialCarKeyVehicleVersionToKMLVersion();
  if ((v24 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = v24;
    unint64_t v26 = *(void **)(a3 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_1004D0898;
    *(void *)(v27 + 24) = v15;
    aBlock[4] = sub_1004E4688;
    aBlock[5] = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004F8E34;
    aBlock[3] = &unk_100757850;
    uint64_t v28 = _Block_copy(aBlock);
    id v29 = v21;
    swift_retain();
    swift_release();
    [v26 commitUpgradeForKeyWithCredential:v29 versionType:1 version:v25 completion:v28];
    _Block_release(v28);
    swift_release();
    unint64_t v30 = v29;
LABEL_11:

    return;
  }
  __break(1u);
LABEL_16:
  _Block_release(a4);
  __break(1u);
}

void sub_1004E3A70(void *a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1004E4640;
  *(void *)(v9 + 24) = v8;
  swift_retain_n();
  _Block_copy(a4);
  unint64_t v10 = (unint64_t)sub_1004E2F8C(a1);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v22) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  id v11 = [a2 pass];
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = v11;
  id v13 = [v11 devicePrimaryPaymentApplication];

  if (!v13) {
    goto LABEL_9;
  }
  id v14 = [v13 subcredentials];

  if (v14)
  {
    sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v16 = (void *)sub_100507F2C(v15);
    swift_bridgeObjectRelease();
    if (v16)
    {
      uint64_t v17 = *(void **)(a3 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager);
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
      id v18 = v16;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = sub_1004E463C;
      *(void *)(v20 + 24) = v9;
      void v23[4] = sub_1004E4AEC;
      void v23[5] = v20;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 1107296256;
      v23[2] = sub_1004F8F10;
      void v23[3] = &unk_1007577D8;
      uint64_t v21 = _Block_copy(v23);
      swift_retain();
      swift_release();
      [v17 hasUpgradeAvailableForKeyWithCredential:v18 versionType:1 versions:isa completion:v21];
      _Block_release(v21);
      swift_release();
      swift_release();

LABEL_10:
      swift_release();
      return;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    a4[2](a4, 0);
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  swift_release();
  _Block_release(a4);
  __break(1u);
}

void sub_1004E3D90(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1004E45D0;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1004E4610;
  *(void *)(v10 + 24) = v9;
  swift_retain_n();
  swift_retain_n();
  _Block_copy(a4);
  unint64_t v11 = (unint64_t)sub_1004E2F8C(a1);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v23) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  id v12 = [a2 pass];
  if (!v12) {
    goto LABEL_9;
  }
  id v13 = v12;
  id v14 = [v12 devicePrimaryPaymentApplication];

  if (!v14) {
    goto LABEL_9;
  }
  id v15 = [v14 subcredentials];

  if (v15)
  {
    sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = (void *)sub_100507F2C(v16);
    swift_bridgeObjectRelease();
    if (v17)
    {
      id v18 = *(void **)(a3 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager);
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
      id v19 = v17;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_1004E463C;
      *(void *)(v21 + 24) = v10;
      void v24[4] = sub_1004E4AEC;
      void v24[5] = v21;
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 1107296256;
      void v24[2] = sub_1004F8F10;
      v24[3] = &unk_100757738;
      uint64_t v22 = _Block_copy(v24);
      swift_retain();
      swift_release();
      [v18 hasUpgradeAvailableForKeyWithCredential:v19 versionType:1 versions:isa completion:v22];
      _Block_release(v22);
      swift_release();
      swift_release();

LABEL_10:
      swift_release_n();
      swift_release();
      return;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    a4[2](a4, 0, 0);
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  swift_release();
  swift_release();
  _Block_release(a4);
  __break(1u);
}

void sub_1004E4108(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a1;
  void v9[3] = sub_1004E44F4;
  void v9[4] = v8;
  id v10 = a1;
  swift_retain_n();
  id v11 = v10;
  _Block_copy(a4);
  unint64_t v12 = (unint64_t)sub_1004E2F8C(v11);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  id v13 = [a2 pass];
  if (!v13) {
    goto LABEL_9;
  }
  id v14 = v13;
  id v15 = [v13 devicePrimaryPaymentApplication];

  if (!v15) {
    goto LABEL_9;
  }
  id v16 = [v15 subcredentials];

  if (v16)
  {
    sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v18 = (void *)sub_100507F2C(v17);
    swift_bridgeObjectRelease();
    if (v18)
    {
      id v19 = *(void **)(a3 + OBJC_IVAR____TtC5passd25PDARRCCCSignatureProvider_daManager);
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
      id v20 = v18;
      v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = sub_1004E453C;
      *(void *)(v22 + 24) = v9;
      void v28[4] = sub_1004E45B0;
      void v28[5] = v22;
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 1107296256;
      v28[2] = sub_1004F8F10;
      v28[3] = &unk_100757670;
      uint64_t v23 = _Block_copy(v28);
      swift_retain();
      swift_release();
      [v19 hasUpgradeAvailableForKeyWithCredential:v20 versionType:1 versions:v21.super.isa completion:v23];
      _Block_release(v23);

      swift_release();
LABEL_10:

      swift_release_n();
      return;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v25 = objc_allocWithZone((Class)NSError);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v27 = [v25 initWithDomain:v26 code:4 userInfo:0];

    v21.super.Class isa = (Class)_convertErrorToNSError(_:)();
    ((void (**)(void, void, Class))a4)[2](a4, 0, v21.super.isa);

    swift_release();
    goto LABEL_10;
  }
  swift_release();

  _Block_release(a4);
  __break(1u);
}

uint64_t sub_1004E44BC()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004E44F4(uint64_t a1, uint64_t a2)
{
  sub_1004F8EA0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1004E44FC()
{
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1004E453C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1004E20B0(a1, a2, a3, *(void **)(v3 + 16), *(void (**)(id, id))(v3 + 24));
}

unint64_t sub_1004E4548()
{
  unint64_t result = qword_100807DC0;
  if (!qword_100807DC0)
  {
    sub_1004DE1C0(255, (unint64_t *)&unk_1008083A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100807DC0);
  }
  return result;
}

uint64_t sub_1004E45B0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1004E243C(a1, a2, a3, a4, a5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
}

uint64_t sub_1004E45B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004E45C8()
{
  return swift_release();
}

uint64_t sub_1004E45D0(uint64_t a1, uint64_t a2)
{
  return sub_100514088(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1004E45D8()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004E4610(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(a1, 0);
}

uint64_t sub_1004E4640(uint64_t a1)
{
  return sub_100514070(a1, *(void *)(v1 + 16));
}

uint64_t sub_1004E4648(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = 1;
  if (a3) {
    uint64_t v4 = 2;
  }
  if (a3 == 2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  return (*(uint64_t (**)(uint64_t))(v3 + 16))(v5);
}

uint64_t sub_1004E4688(uint64_t a1)
{
  return sub_1004E1D48(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1004E4690()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004E46A0()
{
  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

void sub_1004E46F0(uint64_t a1, void *a2, void (*a3)(id, uint64_t), uint64_t a4)
{
  sub_1004E0860(a1, a2, a3, a4, *(void *)(v4 + 16), *(void **)(v4 + 24), *(void **)(v4 + 32), *(void *)(v4 + 40));
}

uint64_t sub_1004E46FC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004E4744(uint64_t a1, void *a2, uint64_t (*a3)(void *, void), uint64_t a4)
{
  return sub_1004E0EF4(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void **)(v4 + 32));
}

uint64_t sub_1004E4750()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004E4788()
{
  swift_release();

  sub_1004CEAE8(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_release();
  return _swift_deallocObject(v0, 64, 7);
}

void sub_1004E47E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_1004E117C(a1, a2, a3, a4, *(void *)(v4 + 16), *(char **)(v4 + 24), *(void **)(v4 + 32), *(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56));
}

uint64_t sub_1004E4810(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1004E4868()
{
  swift_release();
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1004E48A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1004E1BB0(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(void *, void, id))(v3 + 24));
}

uint64_t sub_1004E48B4()
{
  swift_release();

  swift_release();
  return _swift_deallocObject(v0, 81, 7);
}

void sub_1004E490C(uint64_t a1)
{
  sub_1004E1364(a1, *(void (**)(void, void))(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80));
}

uint64_t sub_1004E4948()
{
  swift_release();

  swift_release();
  return _swift_deallocObject(v0, 80, 7);
}

void sub_1004E4998(void *a1)
{
  sub_1004E16D4(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1004E49D0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004E4A10()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0);
}

uint64_t sub_1004E4A44()
{
  swift_release();

  swift_release();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004E4A8C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004E0D50(a1, a2, a3, *(uint64_t (**)(uint64_t, BOOL))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
}

unint64_t sub_1004E4B18(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1004CA0A4(&qword_100808188);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1004EA0B8(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v11 = (uint64_t *)(v2[6] + 16 * result);
    *id v11 = v5;
    v11[1] = v6;
    unint64_t v12 = (void *)(v2[7] + 16 * result);
    *unint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004E4C3C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1004CA0A4(&qword_100808190);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1004EA0B8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_1004E4D58()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 16);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_13;
  }
LABEL_3:
  unint64_t result = (void *)sub_100504118(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      id v7 = objc_msgSend(v5, "uniqueIdentifier", _swiftEmptyArrayStorage);
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;

      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_100504118(v11 > 1, v12 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      void v13[4] = v8;
      void v13[5] = v10;
    }
    while (v2 != v4);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004E4EE8(unint64_t *a1)
{
  unint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v2 & 0x8000000000000000) != 0
    || (v2 & 0x4000000000000000) != 0)
  {
    unint64_t v2 = sub_1004DBB58(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  sub_1004EA648((unint64_t)v6);
  return specialized Array._endMutation()();
}

uint64_t sub_1004E4F70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

id sub_1004E5038(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    uint64_t v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    uint64_t v13 = v12;
    sub_1004EC210();
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        id v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        NSArray v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      id v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        id v27 = *v25++;
        NSString v26 = v27;
        uint64_t v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004E5314()
{
  swift_bridgeObjectRelease();
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1004E534C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  unint64_t v4 = *(void *)(v2 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned __int8 v6 = sub_1004E5038(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

id RelevantPassLiveActivityManager.__allocating_init(databaseManager:cardFileManager:)(void *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  id v6 = sub_1004EBF90(a1, a2);

  return v6;
}

id RelevantPassLiveActivityManager.init(databaseManager:cardFileManager:)(void *a1, void *a2)
{
  id v4 = sub_1004EBF90(a1, a2);

  return v4;
}

Swift::Bool __swiftcall RelevantPassLiveActivityManager.areActivitiesEnabled()()
{
  id v0 = [objc_allocWithZone((Class)type metadata accessor for ActivityAuthorization()) init];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v1 = dispatch thunk of ActivityAuthorization.areActivitiesEnabled(forBundleId:)();

  swift_bridgeObjectRelease();
  return v1 & 1;
}

Swift::Void __swiftcall RelevantPassLiveActivityManager.endAllActivities()()
{
  uint64_t v1 = v0;
  uint64_t v23 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v2 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  id v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1004CA0A4(&qword_100807FD0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.passLiveEventActivity.getter();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    char v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Ending all live activities", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  unint64_t v15 = (os_unfair_lock_s *)(*(void *)(v1 + OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedLock) + 16);
  os_unfair_lock_lock(v15);
  uint64_t v16 = (void **)(v1 + OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiers);
  swift_beginAccess();
  unint64_t v17 = *v16;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v15);
  sub_1004E9C60(v17);
  swift_bridgeObjectRelease();
  sub_1004CA0A4(&qword_100807FE8);
  unint64_t v18 = static Activity.activities.getter();
  unint64_t v19 = v18;
  if (!(v18 >> 62))
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20) {
    goto LABEL_12;
  }
LABEL_5:
  if (v20 >= 1)
  {
    uint64_t v21 = 0;
    do
    {
      if ((v19 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v21;
      uint64_t v22 = sub_1004CA0A4(&qword_100807FF0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 1, 1, v22);
      static ActivityUIDismissalPolicy.immediate.getter();
      dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v23);
      sub_1004ECFE8((uint64_t)v7, &qword_100807FD0);
      swift_release();
    }
    while (v20 != v21);
    goto LABEL_12;
  }
  __break(1u);
}

void RelevantPassLiveActivityManager.updateLiveActivities(forCandidatePasses:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [objc_allocWithZone((Class)type metadata accessor for ActivityAuthorization()) init];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v9 = dispatch thunk of ActivityAuthorization.areActivitiesEnabled(forBundleId:)();

  swift_bridgeObjectRelease();
  if (v9)
  {
    sub_1004E9540();
    unint64_t v75 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v74 = &_swiftEmptyDictionarySingleton;
    NSString v65 = v2;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_1004EC210();
      sub_1004ECEE4(&qword_100807FF8, (void (*)(uint64_t))sub_1004EC210);
      Set.Iterator.init(_cocoa:)();
      a1 = v76;
      uint64_t v69 = v77;
      uint64_t v11 = v78;
      int64_t v10 = v79;
      unint64_t v12 = v80;
    }
    else
    {
      uint64_t v16 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 56);
      uint64_t v69 = a1 + 56;
      uint64_t v11 = ~v16;
      uint64_t v18 = -v16;
      if (v18 < 64) {
        uint64_t v19 = ~(-1 << v18);
      }
      else {
        uint64_t v19 = -1;
      }
      unint64_t v12 = v19 & v17;
      swift_bridgeObjectRetain();
      int64_t v10 = 0;
    }
    uint64_t v67 = a1 & 0x7FFFFFFFFFFFFFFFLL;
    int64_t v68 = (unint64_t)(v11 + 64) >> 6;
    uint64_t v20 = &selRef_setUpdatedAt_;
    id v66 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v70 = v11;
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_15;
    }
LABEL_12:
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (v21)
    {
      v71._countAndFlagsBits = v21;
      sub_1004EC210();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v22 = (id)v72;
      swift_unknownObjectRelease();
      int64_t v23 = v10;
      uint64_t v24 = v12;
      uint64_t v20 = &selRef_setUpdatedAt_;
      while (v22)
      {
        if (objc_msgSend(v22, v20[392], v65, v66, v67) == (id)9)
        {
          v71._countAndFlagsBits = (uint64_t)[v22 v20[392]];
          uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v73 = v28;
          v29._countAndFlagsBits = 46;
          v29._object = (void *)0xE100000000000000;
          String.append(_:)(v29);
          id v30 = [v22 passTypeIdentifier];
          uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          char v33 = v32;

          v34._countAndFlagsBits = v31;
          v34._object = v33;
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          uint64_t v36 = v72;
          uint64_t v35 = v73;
          id v37 = [v22 groupingIdentifier];
          if (v37)
          {
            id v38 = v37;
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            NSString v41 = v40;

            v71._countAndFlagsBits = 46;
            v71._object = (void *)0xE100000000000000;
            v42._countAndFlagsBits = v39;
            v42._object = v41;
            String.append(_:)(v42);
            swift_bridgeObjectRelease();
            String.append(_:)(v71);
            swift_bridgeObjectRelease();
            uint64_t v36 = v72;
            uint64_t v35 = v73;
          }
          id v43 = v22;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          Class v44 = v74;
          uint64_t v45 = v74[2];
          swift_bridgeObjectRetain();
          if (v45 && (unint64_t v46 = sub_1004EA0B8(v36, v35), (v47 & 1) != 0))
          {
            uint64_t v48 = *(void *)(v44[7] + 8 * v46);
            swift_retain();
          }
          else
          {
            type metadata accessor for RelevantPassLiveActivityManager.LiveActivityGroup();
            uint64_t v48 = swift_allocObject();
            *(void *)(v48 + 16) = _swiftEmptyArrayStorage;
          }
          swift_bridgeObjectRelease();
          swift_beginAccess();
          id v49 = v43;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*(void *)(v48 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v48 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                              + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_1004E4EE8((unint64_t *)(v48 + 16));
          swift_endAccess();
          swift_retain();
          uint64_t v50 = (uint64_t)v74;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v72 = v50;
          sub_1004EA258(v48, v36, v35, isUniquelyReferenced_nonNull_native);
          uint64_t v74 = (void *)v72;

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int64_t v10 = v23;
          unint64_t v12 = v24;
          uint64_t v20 = &selRef_setUpdatedAt_;
          if (a1 < 0) {
            goto LABEL_12;
          }
        }
        else
        {

          int64_t v10 = v23;
          unint64_t v12 = v24;
          if (a1 < 0) {
            goto LABEL_12;
          }
        }
LABEL_15:
        if (v12)
        {
          uint64_t v24 = (v12 - 1) & v12;
          unint64_t v25 = __clz(__rbit64(v12)) | (v10 << 6);
          int64_t v23 = v10;
        }
        else
        {
          int64_t v23 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            return;
          }
          if (v23 >= v68) {
            break;
          }
          unint64_t v26 = *(void *)(v69 + 8 * v23);
          if (!v26)
          {
            int64_t v27 = v10 + 2;
            if (v10 + 2 >= v68) {
              break;
            }
            unint64_t v26 = *(void *)(v69 + 8 * v27);
            if (v26) {
              goto LABEL_24;
            }
            int64_t v27 = v10 + 3;
            if (v10 + 3 >= v68) {
              break;
            }
            unint64_t v26 = *(void *)(v69 + 8 * v27);
            if (v26)
            {
LABEL_24:
              int64_t v23 = v27;
            }
            else
            {
              int64_t v23 = v10 + 4;
              if (v10 + 4 >= v68) {
                break;
              }
              unint64_t v26 = *(void *)(v69 + 8 * v23);
              if (!v26)
              {
                int64_t v52 = v10 + 5;
                while (v68 != v52)
                {
                  unint64_t v26 = *(void *)(v69 + 8 * v52++);
                  if (v26)
                  {
                    int64_t v23 = v52 - 1;
                    goto LABEL_25;
                  }
                }
                break;
              }
            }
          }
LABEL_25:
          uint64_t v24 = (v26 - 1) & v26;
          unint64_t v25 = __clz(__rbit64(v26)) + (v23 << 6);
        }
        id v22 = *(id *)(*(void *)(a1 + 48) + 8 * v25);
      }
    }
    sub_1004DC1A8();
    uint64_t v53 = v65;
    id v54 = (os_unfair_lock_s *)(*(void *)&v65[OBJC_IVAR___PDRelevantPassLiveActivityManager_groupsLock] + 16);
    os_unfair_lock_lock(v54);
    uint64_t v55 = OBJC_IVAR___PDRelevantPassLiveActivityManager_currentGroups;
    uint64_t v56 = swift_bridgeObjectRetain();
    os_log_type_t v57 = (void *)sub_1004E61A8(v56, (uint64_t)&v74);
    unint64_t v58 = v74;
    id v59 = v53;
    uint64_t v60 = swift_bridgeObjectRetain();
    uint64_t v61 = sub_1004ECA14(v60, v59, (uint64_t (*)(char *, unint64_t, uint64_t, id))sub_1004EC52C);
    swift_bridgeObjectRelease();

    id v62 = v59;
    uint64_t v63 = swift_bridgeObjectRetain();
    uint64_t v64 = sub_1004ECA14(v63, v62, (uint64_t (*)(char *, unint64_t, uint64_t, id))sub_1004EC750);
    swift_bridgeObjectRelease();

    *(void *)&v53[v55] = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v54);
    sub_1004E64C8(v57);
    swift_bridgeObjectRelease();
    sub_1004E6D10(v64);
    swift_release();
    sub_1004E7FC0(v61);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    static Logger.passLiveEventActivity.getter();
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Live Activites not enabled", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1004E61A8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v26 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v24 = result + 64;
  unint64_t v25 = _swiftEmptyArrayStorage;
  if (v8) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v11 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v11 < v26)
    {
      unint64_t v12 = *(void *)(v5 + 8 * v11);
      ++v4;
      if (v12) {
        goto LABEL_22;
      }
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v26) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v4 = v11 + 2;
      if (v11 + 2 >= v26) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (v12) {
        goto LABEL_22;
      }
      int64_t v4 = v11 + 3;
      if (v11 + 3 >= v26) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (v12)
      {
LABEL_22:
        unint64_t v8 = (v12 - 1) & v12;
        for (unint64_t i = __clz(__rbit64(v12)) + (v4 << 6); ; unint64_t i = v9 | (v4 << 6))
        {
          os_log_type_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
          uint64_t v16 = *v14;
          uint64_t v15 = v14[1];
          uint64_t v17 = *(void *)(*(void *)a2 + 16);
          swift_bridgeObjectRetain();
          if (v17
            && (swift_bridgeObjectRetain(),
                sub_1004EA0B8(v16, v15),
                char v19 = v18,
                swift_bridgeObjectRelease(),
                (v19 & 1) != 0))
          {
            id result = swift_bridgeObjectRelease();
            if (!v8) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t v20 = v25;
            id result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              id result = sub_100504118(0, v25[2] + 1, 1);
              uint64_t v20 = v25;
            }
            unint64_t v22 = v20[2];
            unint64_t v21 = v20[3];
            if (v22 >= v21 >> 1)
            {
              id result = sub_100504118(v21 > 1, v22 + 1, 1);
              uint64_t v20 = v25;
            }
            void v20[2] = v22 + 1;
            unint64_t v25 = v20;
            int64_t v23 = &v20[2 * v22];
            void v23[4] = v16;
            void v23[5] = v15;
            uint64_t v5 = v24;
            if (!v8) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v9 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
      int64_t v13 = v11 + 4;
      if (v13 < v26)
      {
        unint64_t v12 = *(void *)(v5 + 8 * v13);
        if (v12)
        {
          int64_t v4 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v4 = v13 + 1;
          if (__OFADD__(v13, 1)) {
            goto LABEL_33;
          }
          if (v4 >= v26) {
            break;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v4);
          ++v13;
          if (v12) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_31:
    swift_release();
    return (uint64_t)v25;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1004E64C8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v63 = type metadata accessor for ActivityUIDismissalPolicy();
  uint64_t v4 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  id v62 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1004CA0A4(&qword_100807FD0);
  __chkstk_darwin(v6 - 8);
  uint64_t v61 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for PassLiveActivityAttributes();
  unint64_t v8 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  int64_t v68 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  os_log_type_t v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v52 - v15;
  static Logger.passLiveEventActivity.getter();
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v56 = a1;
  uint64_t v64 = v10;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    id v66 = v2;
    unint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    unint64_t v67 = v8;
    v72[0] = v22;
    uint64_t v70 = v14;
    *(_DWORD *)unint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v23 = Array.description.getter();
    uint64_t v65 = v11;
    uint64_t v24 = v4;
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v27 = v23;
    uint64_t v28 = v64;
    uint64_t v71 = sub_1004F7DDC(v27, v26, v72);
    a1 = v56;
    os_log_type_t v14 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v4 = v24;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Resetting dismissal for groupIDs: %s", v21, 0xCu);
    swift_arrayDestroy();
    unint64_t v8 = v67;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v29 = v65;
    uint64_t v60 = *(void (**)(char *, uint64_t))(v65 + 8);
    v60(v16, v28);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v11 + 8);
    v60(v16, v10);
    uint64_t v29 = v11;
  }
  sub_1004E9C60(a1);
  sub_1004CA0A4(&qword_100807FE8);
  unint64_t v30 = static Activity.activities.getter();
  unint64_t v32 = v30;
  if (v30 >> 62) {
    goto LABEL_41;
  }
  for (uint64_t i = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v34 = 0;
    uint64_t v70 = (char *)a1[2];
    unint64_t v54 = v32 + 32;
    uint64_t v55 = v32 & 0xFFFFFFFFFFFFFF8;
    id v66 = (void (**)(char *, uint64_t))(v8 + 8);
    unint64_t v67 = v32 & 0xC000000000000001;
    uint64_t v57 = v29 + 8;
    unint64_t v58 = (void (**)(char *, uint64_t))(v4 + 8);
    v52[0] = a1 + 9;
    *(void *)&long long v31 = 136315394;
    long long v53 = v31;
    v52[1] = (char *)&type metadata for Any + 8;
    unint64_t v59 = v32;
    uint64_t v65 = i;
    while (1)
    {
      while (1)
      {
        if (v67)
        {
          uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v35 = __OFADD__(v34++, 1);
          if (v35) {
            goto LABEL_38;
          }
        }
        else
        {
          if (v34 >= *(void *)(v55 + 16)) {
            goto LABEL_39;
          }
          uint64_t v4 = *(void *)(v54 + 8 * v34);
          swift_retain();
          BOOL v35 = __OFADD__(v34++, 1);
          if (v35)
          {
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
        }
        uint64_t v36 = v68;
        Activity.attributes.getter();
        uint64_t v29 = PassLiveActivityAttributes.groupIdentifier.getter();
        unint64_t v8 = v37;
        (*v66)(v36, v69);
        if (v70)
        {
          if (a1[4] == v29 && a1[5] == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_18:
            static Logger.passLiveEventActivity.getter();
            swift_retain_n();
            swift_bridgeObjectRetain();
            id v38 = Logger.logObject.getter();
            uint64_t v39 = v14;
            os_log_type_t v40 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v38, v40))
            {
              uint64_t v41 = swift_slowAlloc();
              v72[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v41 = v53;
              uint64_t v42 = Activity.id.getter();
              *(void *)(v41 + 4) = sub_1004F7DDC(v42, v43, v72);
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v41 + 12) = 2080;
              swift_bridgeObjectRetain();
              *(void *)(v41 + 14) = sub_1004F7DDC(v29, v8, v72);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v38, v40, "All passes in live activity: %s are irrelevant. Ending for groupID: %s", (uint8_t *)v41, 0x16u);
              swift_arrayDestroy();
              a1 = v56;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_release_n();
            }
            v60(v39, v64);
            os_log_type_t v14 = v39;
            uint64_t v44 = sub_1004CA0A4(&qword_100807FF0);
            uint64_t v45 = (uint64_t)v61;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v61, 1, 1, v44);
            unint64_t v46 = v62;
            static ActivityUIDismissalPolicy.immediate.getter();
            dispatch thunk of Activity.endSync(_:dismissalPolicy:)();
            swift_release();
            (*v58)(v46, v63);
            sub_1004ECFE8(v45, &qword_100807FD0);
            unint64_t v32 = v59;
            goto LABEL_22;
          }
          uint64_t i = v65;
          if (v70 != (char *)1) {
            break;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
        if (v34 == i) {
          return swift_bridgeObjectRelease();
        }
      }
      if (a1[6] == v29 && a1[7] == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_18;
      }
      if (v70 != (char *)2) {
        break;
      }
LABEL_37:
      swift_release();
      swift_bridgeObjectRelease();
LABEL_22:
      uint64_t i = v65;
      if (v34 == v65) {
        return swift_bridgeObjectRelease();
      }
    }
    char v47 = (void *)v52[0];
    uint64_t v48 = 2;
    while (1)
    {
      uint64_t v49 = v48 + 1;
      if (__OFADD__(v48, 1)) {
        break;
      }
      BOOL v50 = *(v47 - 1) == v29 && *v47 == v8;
      if (v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_18;
      }
      v47 += 2;
      ++v48;
      if ((char *)v49 == v70) {
        goto LABEL_37;
      }
    }
LABEL_40:
    __break(1u);
LABEL_41:
    ;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004E6D10(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for PassLiveActivityAttributes();
  uint64_t v7 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004CA0A4(&qword_100807FE8);
  unint64_t v10 = static Activity.activities.getter();
  unint64_t v12 = v10;
  if (!(v10 >> 62))
  {
    uint64_t result = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_3;
    }
LABEL_19:
    return swift_bridgeObjectRelease();
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  if (result >= 1)
  {
    uint64_t v14 = 0;
    os_log_type_t v40 = (void (**)(char *, uint64_t))(v7 + 8);
    unint64_t v41 = v12 & 0xC000000000000001;
    uint64_t v36 = (void (**)(char *, uint64_t))(v4 + 8);
    *(void *)&long long v11 = 136315650;
    long long v33 = v11;
    v32[0] = v6;
    v32[1] = (char *)&type metadata for Any + 8;
    uint64_t v15 = v39;
    uint64_t v42 = result;
    unint64_t v43 = v12;
    uint64_t v34 = v2;
    uint64_t v37 = a1;
    do
    {
      if (v41)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v16 = *(void *)(v12 + 8 * v14 + 32);
        swift_retain();
      }
      Activity.attributes.getter();
      uint64_t v17 = PassLiveActivityAttributes.groupIdentifier.getter();
      unint64_t v19 = v18;
      (*v40)(v9, v15);
      if (*(void *)(a1 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v20 = sub_1004EA0B8(v17, v19);
        if (v21)
        {
          uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8 * v20);
          swift_retain();
          swift_bridgeObjectRelease();
          static Logger.passLiveEventActivity.getter();
          swift_retain_n();
          swift_retain_n();
          swift_bridgeObjectRetain();
          uint64_t v23 = v6;
          uint64_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v26 = swift_slowAlloc();
            uint64_t v35 = swift_slowAlloc();
            uint64_t v44 = v35;
            *(_DWORD *)uint64_t v26 = v33;
            uint64_t v27 = Activity.id.getter();
            *(void *)(v26 + 4) = sub_1004F7DDC(v27, v28, &v44);
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v26 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)(v26 + 14) = sub_1004F7DDC(v17, v19, &v44);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v26 + 22) = 2080;
            sub_1004E4D58();
            uint64_t v29 = Array.description.getter();
            unint64_t v31 = v30;
            swift_bridgeObjectRelease();
            *(void *)(v26 + 24) = sub_1004F7DDC(v29, v31, &v44);
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Updating existing live activity with activityID: %s for groupID: %s with uniqueIDs: %s", (uint8_t *)v26, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v6 = (char *)v32[0];
            (*v36)((char *)v32[0], v38);
          }
          else
          {

            swift_release_n();
            swift_bridgeObjectRelease_n();
            swift_release_n();
            (*v36)(v23, v38);
            uint64_t v6 = v23;
          }
          sub_1004E7214(v16, v22);
          swift_release();
          swift_release();
          a1 = v37;
          uint64_t v15 = v39;
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      ++v14;
      unint64_t v12 = v43;
    }
    while (v42 != v14);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1004E7214(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = a1;
  uint64_t v4 = sub_1004CA0A4(&qword_100807BF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AlertConfiguration.AlertSound();
  __chkstk_darwin(v7 - 8);
  uint64_t v74 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LocalizedStringResource();
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v73 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v67 - v12;
  uint64_t v75 = sub_1004CA0A4(&qword_100808140);
  __chkstk_darwin(v75);
  uint64_t v71 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1004CA0A4(&qword_100808148);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1004CA0A4(&qword_100807FF0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PassLiveActivityAttributes.ContentState();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v78 = v21;
  uint64_t v79 = v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v77 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v67 - v26;
  uint64_t v76 = v28;
  __chkstk_darwin(v25);
  uint64_t v81 = (char *)&v67 - v29;
  swift_beginAccess();
  unint64_t v30 = *(void *)(a2 + 16);
  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v31) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  uint64_t v69 = v6;
  uint64_t v70 = v27;
  if ((v30 & 0xC000000000000001) != 0)
  {
    id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    id v35 = [v34 uniqueIdentifier];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v2;
    unint64_t v37 = swift_bridgeObjectRetain();
    sub_1004EBBAC(v37, v36);
    swift_bridgeObjectRelease();

    dispatch thunk of Activity.content.getter();
    uint64_t v38 = v81;
    ActivityContent.state.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    PassLiveActivityAttributes.ContentState.init(seedUniqueIdentifier:passContents:)();
    uint64_t v40 = v78;
    uint64_t v39 = v79;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v16, 1, v78) == 1)
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
      return sub_1004ECFE8((uint64_t)v16, &qword_100808148);
    }
    unint64_t v41 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v42 = v70;
    v41(v70, v16, v40);
    sub_1004ECEE4(&qword_100808150, (void (*)(uint64_t))&type metadata accessor for PassLiveActivityAttributes.ContentState);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      unint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v40);
      return ((uint64_t (*)(char *, uint64_t))v43)(v38, v40);
    }
    int64_t v68 = v41;
    uint64_t v75 = swift_allocBox();
    uint64_t v45 = v44;
    uint64_t v46 = type metadata accessor for AlertConfiguration();
    char v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56);
    v47(v45, 1, 1, v46);
    uint64_t v48 = PassLiveActivityAttributes.ContentState.eventLiveMessage.getter();
    uint64_t v49 = v42;
    if (!v50) {
      goto LABEL_20;
    }
    uint64_t v67 = v48;
    uint64_t v51 = PassLiveActivityAttributes.ContentState.eventLiveMessage.getter();
    uint64_t v53 = v52;
    uint64_t v54 = PassLiveActivityAttributes.ContentState.eventLiveMessage.getter();
    if (v53)
    {
      if (v55)
      {
        if (v51 == v54 && v53 == v55)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_17:
          swift_bridgeObjectRelease();
          uint64_t v40 = v78;
LABEL_20:
          uint64_t v57 = type metadata accessor for TaskPriority();
          uint64_t v58 = (uint64_t)v69;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v69, 1, 1, v57);
          uint64_t v59 = v79;
          uint64_t v60 = v77;
          (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v77, v49, v40);
          unint64_t v61 = (*(unsigned __int8 *)(v59 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
          unint64_t v62 = (v76 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v63 = v49;
          uint64_t v64 = (char *)swift_allocObject();
          *((void *)v64 + 2) = 0;
          *((void *)v64 + 3) = 0;
          *((void *)v64 + 4) = v80;
          v68(&v64[v61], v60, v40);
          *(void *)&v64[v62] = v75;
          swift_retain();
          swift_retain();
          sub_10050A148(v58, (uint64_t)&unk_100808160, (uint64_t)v64);
          swift_release();
          uint64_t v65 = *(void (**)(char *, uint64_t))(v59 + 8);
          v65(v63, v40);
          v65(v81, v40);
          return swift_release();
        }
        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v40 = v78;
        if (v66)
        {
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
LABEL_19:
        LocalizedStringResource.init(stringLiteral:)();
        uint64_t v78 = v45;
        LocalizedStringResource.init(stringLiteral:)();
        static AlertConfiguration.AlertSound.default.getter();
        uint64_t v56 = (uint64_t)v71;
        AlertConfiguration.init(title:body:sound:)();
        v47(v56, 0, 1, v46);
        sub_1004ECE7C(v56, v78);
        goto LABEL_20;
      }
    }
    else if (!v55)
    {
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    uint64_t v40 = v78;
    goto LABEL_19;
  }
  if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v33 = *(id *)(v30 + 32);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004E7A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  void v5[6] = a5;
  sub_1004CA0A4(&qword_100808140);
  v5[7] = swift_task_alloc();
  sub_1004CA0A4(&qword_100808168);
  v5[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PassLiveActivityAttributes.ContentState();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = sub_1004CA0A4(&qword_100807FF0);
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_projectBox();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1004E7BF0, 0, 0);
}

uint64_t sub_1004E7BF0()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[7];
  (*(void (**)(void, void, void))(v0[10] + 16))(v0[11], v0[6], v0[9]);
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  sub_1004ECEE4(&qword_100808170, (void (*)(uint64_t))&type metadata accessor for PassLiveActivityAttributes.ContentState);
  sub_1004ECEE4(&qword_100808178, (void (*)(uint64_t))&type metadata accessor for PassLiveActivityAttributes.ContentState);
  sub_1004ECEE4(&qword_100808180, (void (*)(uint64_t))&type metadata accessor for PassLiveActivityAttributes.ContentState);
  ActivityContent.init(state:staleDate:relevanceScore:)();
  swift_beginAccess();
  sub_1004ECF2C(v1, v3);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:)
                                                + async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[16] = v5;
  void *v5 = v0;
  v5[1] = sub_1004E7DFC;
  uint64_t v6 = v0[14];
  uint64_t v7 = v0[7];
  return v9(v6, v7);
}

uint64_t sub_1004E7DFC()
{
  uint64_t v1 = *(void *)(*v0 + 112);
  uint64_t v2 = *(void *)(*v0 + 104);
  uint64_t v3 = *(void *)(*v0 + 96);
  uint64_t v4 = *(void *)(*v0 + 56);
  uint64_t v7 = *v0;
  swift_task_dealloc();
  sub_1004ECFE8(v4, &qword_100808140);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_1004E7FC0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v158 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v120 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v113 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v134 = (char *)&v113 - v10;
  __chkstk_darwin(v9);
  uint64_t v118 = (char *)&v113 - v11;
  uint64_t v12 = sub_1004CA0A4(&qword_100808168);
  __chkstk_darwin(v12 - 8);
  int64_t v133 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_1004CA0A4(&qword_100807FF0);
  uint64_t v14 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v131 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for ActivityPresentationOptions();
  uint64_t v16 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v145 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1004CA0A4(&qword_100808148);
  __chkstk_darwin(v18 - 8);
  uint64_t v147 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = type metadata accessor for PassLiveActivityAttributes.ContentState();
  uint64_t v20 = *(void *)(v149 - 8);
  uint64_t v21 = __chkstk_darwin(v149);
  uint64_t v130 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  id v144 = (char *)&v113 - v23;
  uint64_t v141 = type metadata accessor for PassLiveActivityAttributes();
  uint64_t v24 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  v152 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (os_unfair_lock_s *)(*(void *)&v1[OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedLock] + 16);
  os_unfair_lock_lock(v26);
  id v148 = v1;
  uint64_t v27 = &v1[OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiers];
  swift_beginAccess();
  uint64_t v28 = *(void **)v27;
  uint64_t v29 = a1;
  swift_bridgeObjectRetain();
  unint64_t v30 = v26;
  uint64_t v31 = v8;
  os_unfair_lock_unlock(v30);
  uint64_t v32 = *(void *)(a1 + 64);
  uint64_t v150 = a1 + 64;
  uint64_t v33 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & v32;
  int64_t v151 = (unint64_t)(v33 + 63) >> 6;
  uint64_t v154 = (uint64_t (**)(char *, uint64_t))(v158 + 8);
  uint64_t v146 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  uint64_t v129 = (void (**)(char *, uint64_t, uint64_t))(v20 + 32);
  uint64_t v128 = PKServiceBundleIdentifier;
  unsigned int v127 = enum case for ActivityContentSource.Request.push(_:);
  Swift::Int v126 = (void (**)(char *, char *, uint64_t))(v20 + 16);
  uint64_t v125 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v122 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v36 = v28;
  uint64_t v121 = (void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v140 = (uint64_t (**)(char *, uint64_t))(v24 + 8);
  uint64_t v117 = &v160;
  uint64_t v157 = v29;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v38 = 0;
  uint64_t v155 = 0;
  unint64_t v114 = v28 + 9;
  *(void *)&long long v39 = 136315394;
  long long v119 = v39;
  uint64_t v116 = (char *)&type metadata for Any + 8;
  *((void *)&v39 + 1) = 2;
  long long v124 = xmmword_1005B4350;
  *(void *)&long long v39 = 136315650;
  long long v115 = v39;
  *(void *)&long long v39 = 136315138;
  long long v135 = v39;
  uint64_t v143 = v3;
  uint64_t v142 = v8;
  uint64_t v153 = v28;
  while (1)
  {
    while (1)
    {
      if (v35)
      {
        uint64_t v158 = (v35 - 1) & v35;
        unint64_t v40 = __clz(__rbit64(v35)) | (v38 << 6);
      }
      else
      {
        if (__OFADD__(v38++, 1))
        {
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
        if (v38 >= v151) {
          goto LABEL_74;
        }
        unint64_t v42 = *(void *)(v150 + 8 * v38);
        if (!v42)
        {
          int64_t v43 = v38 + 1;
          if (v38 + 1 >= v151) {
            goto LABEL_74;
          }
          unint64_t v42 = *(void *)(v150 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v38 + 2;
            if (v38 + 2 >= v151) {
              goto LABEL_74;
            }
            unint64_t v42 = *(void *)(v150 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v38 + 3;
              if (v38 + 3 >= v151)
              {
LABEL_74:
                swift_bridgeObjectRelease();
                return swift_release();
              }
              unint64_t v42 = *(void *)(v150 + 8 * v43);
              if (!v42)
              {
                while (1)
                {
                  int64_t v38 = v43 + 1;
                  if (__OFADD__(v43, 1)) {
                    goto LABEL_77;
                  }
                  if (v38 >= v151) {
                    goto LABEL_74;
                  }
                  unint64_t v42 = *(void *)(v150 + 8 * v38);
                  ++v43;
                  if (v42) {
                    goto LABEL_18;
                  }
                }
              }
            }
          }
          int64_t v38 = v43;
        }
LABEL_18:
        uint64_t v158 = (v42 - 1) & v42;
        unint64_t v40 = __clz(__rbit64(v42)) + (v38 << 6);
      }
      uint64_t v44 = (uint64_t *)(*(void *)(v157 + 48) + 16 * v40);
      uint64_t v45 = *v44;
      unint64_t v46 = v44[1];
      uint64_t v47 = *(void *)(*(void *)(v157 + 56) + 8 * v40);
      uint64_t v48 = v36[2];
      if (!v48)
      {
LABEL_28:
        uint64_t v156 = v45;
        goto LABEL_29;
      }
      BOOL v49 = v36[4] == v45 && v36[5] == v46;
      if (!v49 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_25:
      swift_bridgeObjectRetain();
      swift_retain();
      static Logger.passLiveEventActivity.getter();
      swift_bridgeObjectRetain();
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = v3;
        uint64_t v53 = v45;
        uint64_t v54 = swift_slowAlloc();
        uint64_t v161 = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = v135;
        swift_bridgeObjectRetain();
        uint64_t v55 = v53;
        uint64_t v3 = v52;
        *(void *)(v54 + 4) = sub_1004F7DDC(v55, v46, &v161);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Live activity for groupID: %s was previously dismissed, ignoring", (uint8_t *)v54, 0xCu);
        swift_arrayDestroy();
        uint64_t v36 = v153;
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();

        uint64_t result = (*v154)(v31, v52);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release();
        uint64_t result = (*v154)(v31, v3);
      }
      unint64_t v35 = v158;
    }
    if (v48 == 1) {
      goto LABEL_28;
    }
    if (v36[6] == v45 && v36[7] == v46) {
      goto LABEL_25;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_25;
    }
    uint64_t v156 = v45;
    if (v48 != 2) {
      break;
    }
LABEL_29:
    swift_beginAccess();
    unint64_t v56 = *(void *)(v47 + 16);
    if (v56 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (!result)
      {
LABEL_71:
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v57 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t result = swift_bridgeObjectRetain();
      if (!v57) {
        goto LABEL_71;
      }
    }
    if ((v56 & 0xC000000000000001) != 0)
    {
      id v58 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_76;
      }
      id v58 = *(id *)(v56 + 32);
    }
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    id v60 = [v59 uniqueIdentifier];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v61 = (char *)v148;
    unint64_t v62 = swift_bridgeObjectRetain();
    uint64_t v63 = v155;
    sub_1004EBBAC(v62, v61);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRetain();
    PassLiveActivityAttributes.init(groupIdentifier:)();
    uint64_t v64 = (uint64_t)v147;
    PassLiveActivityAttributes.ContentState.init(seedUniqueIdentifier:passContents:)();
    uint64_t v65 = v149;
    int v66 = (*v146)(v64, 1, v149);
    uint64_t v155 = v63;
    if (v66 == 1)
    {
      sub_1004ECFE8(v64, &qword_100808148);
      uint64_t v67 = v134;
      static Logger.passLiveEventActivity.getter();
      swift_retain_n();
      swift_bridgeObjectRetain();
      int64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        uint64_t v161 = swift_slowAlloc();
        *(_DWORD *)uint64_t v70 = v119;
        swift_bridgeObjectRetain();
        *(void *)(v70 + 4) = sub_1004F7DDC(v156, v46, &v161);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v70 + 12) = 2080;
        sub_1004E4D58();
        uint64_t v71 = Array.description.getter();
        int64_t v72 = v38;
        unint64_t v74 = v73;
        swift_bridgeObjectRelease();
        *(void *)(v70 + 14) = sub_1004F7DDC(v71, v74, &v161);
        swift_release_n();
        int64_t v38 = v72;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unable to generate content for groupID: %s with uniqueIDs: %s", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }

      uint64_t v3 = v143;
      (*v154)(v67, v143);
      uint64_t result = (*v140)(v152, v141);
      uint64_t v31 = v142;
LABEL_72:
      uint64_t v36 = v153;
      unint64_t v35 = v158;
    }
    else
    {
      int64_t v136 = v38;
      uint64_t v75 = v144;
      (*v129)(v144, v64, v65);
      uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v138 = v76;
      sub_1004CA0A4(&qword_1008081A8);
      uint64_t v77 = type metadata accessor for ActivityContentSource.Request();
      uint64_t v78 = *(void *)(v77 - 8);
      unint64_t v79 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      uint64_t v80 = swift_allocObject();
      *(_OWORD *)(v80 + 16) = v124;
      unint64_t v81 = v80 + v79;
      uint64_t v82 = (uint64_t *)(v80 + v79 + *(int *)(sub_1004CA0A4((uint64_t *)&unk_1008081B0) + 48));
      static PushActivityContentSource.pushRequest.getter();
      *uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v82[1] = v83;
      (*(void (**)(unint64_t, void, uint64_t))(v78 + 104))(v81, v127, v77);
      static ActivityPresentationOptions.ActivityPresentationDestination.allCases.getter();
      ActivityPresentationOptions.init(destinations:)();
      uint64_t v137 = sub_1004CA0A4(&qword_100807FE8);
      (*v126)(v130, v75, v149);
      uint64_t v84 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v133, 1, 1, v84);
      sub_1004ECEE4(&qword_100808170, (void (*)(uint64_t))&type metadata accessor for PassLiveActivityAttributes.ContentState);
      sub_1004ECEE4(&qword_100808178, (void (*)(uint64_t))&type metadata accessor for PassLiveActivityAttributes.ContentState);
      sub_1004ECEE4(&qword_100808180, (void (*)(uint64_t))&type metadata accessor for PassLiveActivityAttributes.ContentState);
      id v85 = v131;
      ActivityContent.init(state:staleDate:relevanceScore:)();
      uint64_t v86 = v155;
      static Activity.request(attributes:content:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:isUnbounded:isMomentary:protectionClass:)();
      if (v86)
      {
        (*v125)(v85, v132);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v87 = v120;
        static Logger.passLiveEventActivity.getter();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        id v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = swift_slowAlloc();
          uint64_t v161 = swift_slowAlloc();
          *(_DWORD *)uint64_t v90 = v119;
          swift_getErrorValue();
          uint64_t v91 = Error.localizedDescription.getter();
          uint64_t v159 = sub_1004F7DDC(v91, v92, &v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          *(_WORD *)(v90 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v159 = sub_1004F7DDC(v156, v46, &v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "Error requesting live activity: %s for groupID: %s", (uint8_t *)v90, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          swift_release();
          uint64_t v93 = *v154;
          uint64_t v94 = v120;
        }
        else
        {
          swift_bridgeObjectRelease_n();

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
          swift_release();
          uint64_t v93 = *v154;
          uint64_t v94 = v87;
        }
        uint64_t v3 = v143;
        v93(v94, v143);
        (*v122)(v145, v123);
        (*v121)(v144, v149);
        uint64_t result = (*v140)(v152, v141);
        uint64_t v155 = 0;
      }
      else
      {
        (*v125)(v85, v132);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v100 = v118;
        static Logger.passLiveEventActivity.getter();
        swift_retain_n();
        swift_retain_n();
        swift_bridgeObjectRetain();
        uint64_t v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.debug.getter();
        int v103 = v102;
        BOOL v104 = os_log_type_enabled(v101, v102);
        uint64_t v155 = 0;
        if (v104)
        {
          uint64_t v105 = swift_slowAlloc();
          uint64_t v139 = swift_slowAlloc();
          uint64_t v161 = v139;
          *(_DWORD *)uint64_t v105 = v115;
          LODWORD(v138) = v103;
          uint64_t v106 = Activity.id.getter();
          uint64_t v159 = sub_1004F7DDC(v106, v107, &v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v105 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v159 = sub_1004F7DDC(v156, v46, &v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v105 + 22) = 2080;
          sub_1004E4D58();
          uint64_t v108 = Array.description.getter();
          unint64_t v110 = v109;
          swift_bridgeObjectRelease();
          uint64_t v159 = sub_1004F7DDC(v108, v110, &v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v138, "Started new live activity with activityID: %s for groupID: %s and uniqueIDs: %s", (uint8_t *)v105, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();
          swift_release();

          uint64_t v111 = *v154;
          uint64_t v112 = v118;
        }
        else
        {
          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_release_n();

          uint64_t v111 = *v154;
          uint64_t v112 = v100;
        }
        uint64_t v3 = v143;
        v111(v112, v143);
        (*v122)(v145, v123);
        (*v121)(v144, v149);
        uint64_t result = (*v140)(v152, v141);
      }
      uint64_t v31 = v142;
      uint64_t v36 = v153;
      int64_t v38 = v136;
      unint64_t v35 = v158;
    }
  }
  uint64_t v96 = v114;
  uint64_t v97 = 2;
  while (1)
  {
    uint64_t v98 = v97 + 1;
    if (__OFADD__(v97, 1)) {
      break;
    }
    if (*(v96 - 1) == v156 && *v96 == v46)
    {
      uint64_t v36 = v153;
      uint64_t v45 = v156;
      goto LABEL_25;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result)
    {
      uint64_t v36 = v153;
      uint64_t v45 = v156;
      goto LABEL_25;
    }
    v96 += 2;
    ++v97;
    if (v98 == v48) {
      goto LABEL_29;
    }
  }
LABEL_78:
  __break(1u);
  return result;
}

uint64_t sub_1004E9540()
{
  int64_t v66 = type metadata accessor for PassLiveActivityAttributes();
  uint64_t v1 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v3 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR___PDRelevantPassLiveActivityManager_groupsLock) + 16);
  os_unfair_lock_lock(v4);
  uint64_t v67 = *(void *)(v0 + OBJC_IVAR___PDRelevantPassLiveActivityManager_currentGroups);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  uint64_t v5 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedLock) + 16);
  os_unfair_lock_lock(v5);
  uint64_t v61 = v0;
  uint64_t v6 = (char **)(v0 + OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiers);
  swift_beginAccess();
  uint64_t v65 = v6;
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain();
  os_unfair_lock_t v64 = v5;
  os_unfair_lock_unlock(v5);
  sub_1004CA0A4(&qword_100807FE8);
  unint64_t v8 = static Activity.activities.getter();
  unint64_t v9 = v8;
  if (v8 >> 62)
  {
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
LABEL_3:
      int64_t v68 = _swiftEmptyArrayStorage;
      uint64_t result = sub_100504118(0, v10 & ~(v10 >> 63), 0);
      if (v10 < 0) {
        goto LABEL_101;
      }
      uint64_t v12 = 0;
      unint64_t v62 = v9 & 0xC000000000000001;
      uint64_t v63 = v9;
      uint64_t v13 = (void (**)(char *, int64_t))(v1 + 8);
      do
      {
        if (v62) {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          swift_retain();
        }
        Activity.attributes.getter();
        uint64_t v14 = PassLiveActivityAttributes.groupIdentifier.getter();
        uint64_t v16 = v15;
        (*v13)(v3, v66);
        swift_release();
        uint64_t v17 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100504118(0, v17[2] + 1, 1);
          uint64_t v17 = v68;
        }
        unint64_t v19 = v17[2];
        unint64_t v18 = v17[3];
        if (v19 >= v18 >> 1)
        {
          sub_100504118(v18 > 1, v19 + 1, 1);
          uint64_t v17 = v68;
        }
        ++v12;
        void v17[2] = v19 + 1;
        uint64_t v20 = &v17[2 * v19];
        void v20[4] = v14;
        void v20[5] = v16;
      }
      while (v10 != v12);
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_16:
  int64_t v21 = 0;
  unint64_t v22 = v67 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v67 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(v67 + 64);
  unint64_t v62 = v67 + 64;
  uint64_t v63 = OBJC_IVAR___PDRelevantPassLiveActivityManager_defaults;
  uint64_t v60 = v61 + OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiersKey;
  int64_t v66 = (unint64_t)(v23 + 63) >> 6;
  id v58 = v17 + 9;
  uint64_t v59 = v7 + 72;
  while (1)
  {
LABEL_20:
    if (v25)
    {
      unint64_t v26 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v27 = v26 | (v21 << 6);
      goto LABEL_40;
    }
    int64_t v28 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v28 >= v66) {
      goto LABEL_96;
    }
    unint64_t v29 = *(void *)(v22 + 8 * v28);
    ++v21;
    if (!v29)
    {
      int64_t v21 = v28 + 1;
      if (v28 + 1 >= v66) {
        goto LABEL_96;
      }
      unint64_t v29 = *(void *)(v22 + 8 * v21);
      if (!v29)
      {
        int64_t v21 = v28 + 2;
        if (v28 + 2 >= v66) {
          goto LABEL_96;
        }
        unint64_t v29 = *(void *)(v22 + 8 * v21);
        if (!v29)
        {
          int64_t v21 = v28 + 3;
          if (v28 + 3 >= v66) {
            goto LABEL_96;
          }
          unint64_t v29 = *(void *)(v22 + 8 * v21);
          if (!v29)
          {
            int64_t v21 = v28 + 4;
            if (v28 + 4 >= v66) {
              goto LABEL_96;
            }
            unint64_t v29 = *(void *)(v22 + 8 * v21);
            if (!v29) {
              break;
            }
          }
        }
      }
    }
LABEL_39:
    unint64_t v25 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_40:
    uint64_t v31 = (uint64_t *)(*(void *)(v67 + 48) + 16 * v27);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *((void *)v7 + 2);
    if (!v34) {
      goto LABEL_47;
    }
    uint64_t result = *((void *)v7 + 4);
    BOOL v35 = result == v33 && *((void *)v7 + 5) == v32;
    if (!v35)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        if (v34 == 1) {
          goto LABEL_47;
        }
        uint64_t result = *((void *)v7 + 6);
        if (result != v33 || *((void *)v7 + 7) != v32)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
          {
            if (v34 != 2)
            {
              BOOL v49 = v59;
              uint64_t v50 = 2;
              do
              {
                uint64_t v51 = v50 + 1;
                if (__OFADD__(v50, 1)) {
                  goto LABEL_98;
                }
                uint64_t result = *(v49 - 1);
                if (result == v33 && *v49 == v32)
                {
                  unint64_t v22 = v62;
                  goto LABEL_20;
                }
                uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if (result)
                {
                  unint64_t v22 = v62;
                  goto LABEL_20;
                }
                v49 += 2;
                ++v50;
                BOOL v35 = v51 == v34;
                unint64_t v22 = v62;
              }
              while (!v35);
            }
LABEL_47:
            uint64_t v36 = v17[2];
            if (!v36) {
              goto LABEL_54;
            }
            uint64_t result = v17[4];
            if (result != v33 || v17[5] != v32)
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
              {
                if (v36 == 1) {
                  goto LABEL_54;
                }
                uint64_t result = v17[6];
                if (result != v33 || v17[7] != v32)
                {
                  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((result & 1) == 0)
                  {
                    if (v36 != 2)
                    {
                      uint64_t v54 = v58;
                      uint64_t v55 = 2;
                      do
                      {
                        uint64_t v56 = v55 + 1;
                        if (__OFADD__(v55, 1)) {
                          goto LABEL_99;
                        }
                        uint64_t result = *(v54 - 1);
                        if (result == v33 && *v54 == v32)
                        {
                          unint64_t v22 = v62;
                          goto LABEL_20;
                        }
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                        if (result)
                        {
                          unint64_t v22 = v62;
                          goto LABEL_20;
                        }
                        v54 += 2;
                        ++v55;
                        BOOL v35 = v56 == v36;
                        unint64_t v22 = v62;
                      }
                      while (!v35);
                    }
LABEL_54:
                    swift_bridgeObjectRetain();
                    os_unfair_lock_lock(v64);
                    int64_t v38 = v65;
                    swift_beginAccess();
                    long long v39 = *v38;
                    swift_bridgeObjectRetain();
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    char *v38 = v39;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      long long v39 = sub_100511754(0, *((void *)v39 + 2) + 1, 1, v39);
                      *uint64_t v65 = v39;
                    }
                    unint64_t v42 = *((void *)v39 + 2);
                    unint64_t v41 = *((void *)v39 + 3);
                    if (v42 >= v41 >> 1)
                    {
                      long long v39 = sub_100511754((char *)(v41 > 1), v42 + 1, 1, v39);
                      *uint64_t v65 = v39;
                    }
                    *((void *)v39 + 2) = v42 + 1;
                    int64_t v43 = &v39[16 * v42];
                    *((void *)v43 + 4) = v33;
                    *((void *)v43 + 5) = v32;
                    swift_endAccess();
                    uint64_t v44 = *(void **)(v61 + v63);
                    if (v44)
                    {
                      id v45 = v44;
                      swift_bridgeObjectRetain();
                      Class isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      NSString v47 = String._bridgeToObjectiveC()();
                      [v45 setObject:isa forKey:v47];

                      [v45 synchronize];
                    }
                    os_unfair_lock_unlock(v64);
                    uint64_t result = swift_bridgeObjectRelease();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int64_t v30 = v28 + 5;
  if (v30 >= v66)
  {
LABEL_96:
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v29 = *(void *)(v22 + 8 * v30);
  if (v29)
  {
    int64_t v21 = v30;
    goto LABEL_39;
  }
  while (1)
  {
    int64_t v21 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v21 >= v66) {
      goto LABEL_96;
    }
    unint64_t v29 = *(void *)(v22 + 8 * v21);
    ++v30;
    if (v29) {
      goto LABEL_39;
    }
  }
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
  return result;
}

void sub_1004E9C60(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v1 + OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedLock) + 16);
  os_unfair_lock_lock(v4);
  uint64_t v5 = v1 + OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiers;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1004EC250(v5, a1);
  swift_bridgeObjectRelease();
  int64_t v7 = *(void *)(*(void *)v5 + 16);
  if (v7 < v6)
  {
    __break(1u);
  }
  else
  {
    sub_1004DE240(v6, v7);
    swift_endAccess();
    unint64_t v8 = *(void **)(v2 + OBJC_IVAR___PDRelevantPassLiveActivityManager_defaults);
    if (v8)
    {
      id v9 = v8;
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      NSString v11 = String._bridgeToObjectiveC()();
      [v9 setObject:isa forKey:v11];

      [v9 synchronize];
    }
    os_unfair_lock_unlock(v4);
  }
}

Swift::Void __swiftcall RelevantPassLiveActivityManager.passUpdated(_:)(PKPass a1)
{
  id v2 = [(objc_class *)a1.super.super.isa uniqueID];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = (os_unfair_lock_s *)(*(void *)(v1 + OBJC_IVAR___PDRelevantPassLiveActivityManager_groupsLock) + 16);
    os_unfair_lock_lock(v4);
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR___PDRelevantPassLiveActivityManager_currentGroups);
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock(v4);
    __chkstk_darwin(v6);
    uint64_t v7 = sub_1004EBDAC(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1004ECBE8);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      sub_1004CA0A4(&qword_100808010);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1005B4350;
      *(void *)(inited + 32) = v7;
      *(void *)(inited + 40) = v9;
      *(void *)(inited + 48) = v11;
      swift_retain();
      unint64_t v13 = sub_1004E4C3C(inited);
      sub_1004E6D10(v13);
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
}

void RelevantPassLiveActivityManager.init()()
{
}

id RelevantPassLiveActivityManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RelevantPassLiveActivityManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1004EA0B8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return sub_1004EA3C8(a1, a2, v4);
}

unint64_t sub_1004EA130(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return sub_1004EA4AC(a1, v2);
}

unint64_t sub_1004EA19C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  return sub_1004EA548(a1, a2, a3, a4, v8);
}

uint64_t sub_1004EA258(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1004EA0B8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100503D90();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1005033D8(v15, a4 & 1);
  unint64_t v21 = sub_1004EA0B8(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1004EA3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1004EA4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1004EA548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v13 = ~v7;
    uint64_t v14 = *(void *)(v5 + 48);
    do
    {
      uint64_t v15 = (void *)(v14 + 32 * v8);
      uint64_t v16 = v15[2];
      uint64_t v17 = v15[3];
      BOOL v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v19 = v16 == a3 && v17 == a4;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v8 = (v8 + 1) & v13;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

void sub_1004EA648(unint64_t a1)
{
  uint64_t v3 = sub_1004CA0A4(&qword_100808198);
  __chkstk_darwin(v3 - 8);
  v167 = (char *)&v154 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v5 = *(void *)(a1 + 8);
  Swift::Int v6 = _minimumMergeRunLength(_:)(v5);
  uint64_t v164 = (void **)v5;
  if (v6 >= v5)
  {
    if (v5 < 0) {
      goto LABEL_156;
    }
    if ((unint64_t)v5 < 2) {
      return;
    }
    uint64_t v165 = v1;
    uint64_t v11 = *(void *)a1;
    type metadata accessor for ComparisonResult(0);
    Swift::Int v161 = v12;
    uint64_t v13 = -1;
    uint64_t v14 = 1;
    uint64_t v15 = &selRef_bytes;
    uint64_t v16 = v11;
    while (1)
    {
      uint64_t v162 = v16;
      uint64_t v163 = (void **)v14;
      uint64_t v17 = *(void **)(v11 + 8 * v14);
      uint64_t v166 = v13;
      while (1)
      {
        BOOL v18 = *(void **)v16;
        id v19 = v17;
        id v20 = v18;
        a1 = (unint64_t)objc_msgSend(v19, v15[300], v20);
        if (!a1)
        {
          id v21 = [v19 serialNumber];
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;

          unint64_t v170 = v22;
          uint64_t v171 = v24;
          id v25 = [v20 serialNumber];
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v28 = v27;

          uint64_t v168 = v26;
          uint64_t v169 = v28;
          uint64_t v29 = type metadata accessor for Locale();
          uint64_t v30 = (uint64_t)v167;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v167, 1, 1, v29);
          sub_1004ECF94();
          a1 = StringProtocol.compare<A>(_:options:range:locale:)();
          uint64_t v15 = &selRef_bytes;
          sub_1004ECFE8(v30, &qword_100808198);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        if (a1 != -1) {
          break;
        }

        if (!v11) {
          goto LABEL_160;
        }
        uint64_t v31 = *(void **)v16;
        uint64_t v17 = *(void **)(v16 + 8);
        *(void *)uint64_t v16 = v17;
        *(void *)(v16 + 8) = v31;
        v16 -= 8;
        if (__CFADD__(v13++, 1)) {
          goto LABEL_11;
        }
      }
      if (a1 >= 2) {
        goto LABEL_165;
      }

LABEL_11:
      uint64_t v14 = (uint64_t)v163 + 1;
      uint64_t v16 = v162 + 8;
      uint64_t v13 = v166 - 1;
      if ((void **)((char *)v163 + 1) == v164) {
        return;
      }
    }
  }
  if (v5 >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_169;
  }
  Swift::Int v159 = v6;
  uint64_t v165 = v1;
  uint64_t v155 = (uint64_t *)a1;
  if (v5 < 2)
  {
    uint64_t v33 = (char *)_swiftEmptyArrayStorage;
    uint64_t v172 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v163 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 != 1)
    {
      a1 = _swiftEmptyArrayStorage[2];
LABEL_122:
      if (a1 >= 2)
      {
        uint64_t v147 = *v155;
        do
        {
          unint64_t v148 = a1 - 2;
          if (a1 < 2) {
            goto LABEL_151;
          }
          if (!v147) {
            goto LABEL_164;
          }
          uint64_t v149 = *(void *)&v33[16 * v148 + 32];
          uint64_t v150 = *(void *)&v33[16 * a1 + 24];
          uint64_t v151 = v165;
          sub_1004EB334((id *)(v147 + 8 * v149), (id *)(v147 + 8 * *(void *)&v33[16 * a1 + 16]), (id *)(v147 + 8 * v150), v163);
          uint64_t v165 = v151;
          if (v151) {
            break;
          }
          if (v150 < v149) {
            goto LABEL_152;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v33 = sub_1004DBB30((uint64_t)v33);
          }
          if (v148 >= *((void *)v33 + 2)) {
            goto LABEL_153;
          }
          v152 = &v33[16 * v148 + 32];
          *(void *)v152 = v149;
          *((void *)v152 + 1) = v150;
          unint64_t v153 = *((void *)v33 + 2);
          if (a1 > v153) {
            goto LABEL_154;
          }
          memmove(&v33[16 * a1 + 16], &v33[16 * a1 + 32], 16 * (v153 - a1));
          *((void *)v33 + 2) = v153 - 1;
          a1 = v153 - 1;
        }
        while (v153 > 2);
      }
LABEL_133:
      swift_bridgeObjectRelease();
      *(void *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    unint64_t v8 = a1;
    uint64_t v9 = v7 >> 1;
    sub_1004EC210();
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    a1 = v8;
    uint64_t v163 = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v172 = v10;
  }
  Swift::Int v34 = 0;
  uint64_t v35 = *(void *)a1;
  uint64_t v36 = *(void *)a1 + 16;
  uint64_t v156 = *(void *)a1 - 8;
  uint64_t v157 = v36;
  uint64_t v33 = (char *)_swiftEmptyArrayStorage;
  unint64_t v37 = &selRef_bytes;
  uint64_t v166 = v35;
  while (1)
  {
    int64_t v38 = v34++;
    Swift::Int v161 = v38;
    if (v34 < v5) {
      break;
    }
LABEL_52:
    if (v34 < (uint64_t)v164)
    {
      if (__OFSUB__(v34, v38)) {
        goto LABEL_155;
      }
      if (v34 - v38 < v159)
      {
        if (__OFADD__(v38, v159)) {
          goto LABEL_157;
        }
        if (v38 + v159 >= (uint64_t)v164) {
          a1 = (unint64_t)v164;
        }
        else {
          a1 = v38 + v159;
        }
        if ((uint64_t)a1 < v38)
        {
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        if (v34 == a1) {
          goto LABEL_73;
        }
        uint64_t v158 = v33;
        type metadata accessor for ComparisonResult(0);
        uint64_t v154 = v76;
        uint64_t v77 = v156 + 8 * v34;
        unint64_t v160 = a1;
        while (1)
        {
          uint64_t v78 = *(void **)(v35 + 8 * v34);
          int64_t v79 = v38;
          uint64_t v162 = v77;
          uint64_t v80 = v77;
          while (1)
          {
            unint64_t v81 = *(void **)v80;
            id v82 = v78;
            id v83 = v81;
            a1 = (unint64_t)objc_msgSend(v82, v37[300], v83, v154);
            if (!a1)
            {
              id v84 = [v82 serialNumber];
              uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v87 = v86;

              unint64_t v170 = v85;
              uint64_t v171 = v87;
              id v88 = [v83 serialNumber];
              uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v91 = v90;

              uint64_t v168 = v89;
              uint64_t v169 = v91;
              uint64_t v35 = v166;
              uint64_t v92 = type metadata accessor for Locale();
              uint64_t v93 = v167;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v167, 1, 1, v92);
              sub_1004ECF94();
              a1 = StringProtocol.compare<A>(_:options:range:locale:)();
              uint64_t v94 = (uint64_t)v93;
              unint64_t v37 = &selRef_bytes;
              sub_1004ECFE8(v94, &qword_100808198);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            if (a1 != -1) {
              break;
            }

            if (!v35) {
              goto LABEL_161;
            }
            id v95 = *(void **)v80;
            uint64_t v78 = *(void **)(v80 + 8);
            *(void *)uint64_t v80 = v78;
            *(void *)(v80 + 8) = v95;
            v80 -= 8;
            if (v34 == ++v79) {
              goto LABEL_62;
            }
          }
          if (a1 >= 2) {
            break;
          }

LABEL_62:
          ++v34;
          int64_t v38 = v161;
          uint64_t v77 = v162 + 8;
          a1 = v160;
          if (v34 == v160)
          {
            Swift::Int v34 = v160;
            uint64_t v33 = v158;
            goto LABEL_73;
          }
        }
        unint64_t v170 = a1;
        goto LABEL_168;
      }
    }
LABEL_73:
    if (v34 < v38) {
      goto LABEL_150;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v33 = sub_1004DB974(0, *((void *)v33 + 2) + 1, 1, v33);
    }
    unint64_t v97 = *((void *)v33 + 2);
    unint64_t v96 = *((void *)v33 + 3);
    a1 = v97 + 1;
    if (v97 >= v96 >> 1) {
      uint64_t v33 = sub_1004DB974((char *)(v96 > 1), v97 + 1, 1, v33);
    }
    *((void *)v33 + 2) = a1;
    uint64_t v98 = v33 + 32;
    unint64_t v99 = &v33[16 * v97 + 32];
    *(void *)unint64_t v99 = v38;
    *((void *)v99 + 1) = v34;
    if (v97)
    {
      while (1)
      {
        unint64_t v100 = a1 - 1;
        if (a1 >= 4)
        {
          uint64_t v105 = &v98[16 * a1];
          uint64_t v106 = *((void *)v105 - 8);
          uint64_t v107 = *((void *)v105 - 7);
          BOOL v111 = __OFSUB__(v107, v106);
          uint64_t v108 = v107 - v106;
          if (v111) {
            goto LABEL_139;
          }
          uint64_t v110 = *((void *)v105 - 6);
          uint64_t v109 = *((void *)v105 - 5);
          BOOL v111 = __OFSUB__(v109, v110);
          uint64_t v103 = v109 - v110;
          char v104 = v111;
          if (v111) {
            goto LABEL_140;
          }
          unint64_t v112 = a1 - 2;
          uint64_t v113 = &v98[16 * a1 - 32];
          uint64_t v115 = *(void *)v113;
          uint64_t v114 = *((void *)v113 + 1);
          BOOL v111 = __OFSUB__(v114, v115);
          uint64_t v116 = v114 - v115;
          if (v111) {
            goto LABEL_142;
          }
          BOOL v111 = __OFADD__(v103, v116);
          uint64_t v117 = v103 + v116;
          if (v111) {
            goto LABEL_145;
          }
          if (v117 >= v108)
          {
            long long v135 = &v98[16 * v100];
            uint64_t v137 = *(void *)v135;
            uint64_t v136 = *((void *)v135 + 1);
            BOOL v111 = __OFSUB__(v136, v137);
            uint64_t v138 = v136 - v137;
            if (v111) {
              goto LABEL_149;
            }
            BOOL v128 = v103 < v138;
            goto LABEL_110;
          }
        }
        else
        {
          if (a1 != 3)
          {
            uint64_t v129 = *((void *)v33 + 4);
            uint64_t v130 = *((void *)v33 + 5);
            BOOL v111 = __OFSUB__(v130, v129);
            uint64_t v122 = v130 - v129;
            char v123 = v111;
            goto LABEL_104;
          }
          uint64_t v102 = *((void *)v33 + 4);
          uint64_t v101 = *((void *)v33 + 5);
          BOOL v111 = __OFSUB__(v101, v102);
          uint64_t v103 = v101 - v102;
          char v104 = v111;
        }
        if (v104) {
          goto LABEL_141;
        }
        unint64_t v112 = a1 - 2;
        uint64_t v118 = &v98[16 * a1 - 32];
        uint64_t v120 = *(void *)v118;
        uint64_t v119 = *((void *)v118 + 1);
        BOOL v121 = __OFSUB__(v119, v120);
        uint64_t v122 = v119 - v120;
        char v123 = v121;
        if (v121) {
          goto LABEL_144;
        }
        long long v124 = &v98[16 * v100];
        uint64_t v126 = *(void *)v124;
        uint64_t v125 = *((void *)v124 + 1);
        BOOL v111 = __OFSUB__(v125, v126);
        uint64_t v127 = v125 - v126;
        if (v111) {
          goto LABEL_147;
        }
        if (__OFADD__(v122, v127)) {
          goto LABEL_148;
        }
        if (v122 + v127 >= v103)
        {
          BOOL v128 = v103 < v127;
LABEL_110:
          if (v128) {
            unint64_t v100 = v112;
          }
          goto LABEL_112;
        }
LABEL_104:
        if (v123) {
          goto LABEL_143;
        }
        uint64_t v131 = &v98[16 * v100];
        uint64_t v133 = *(void *)v131;
        uint64_t v132 = *((void *)v131 + 1);
        BOOL v111 = __OFSUB__(v132, v133);
        uint64_t v134 = v132 - v133;
        if (v111) {
          goto LABEL_146;
        }
        if (v134 < v122) {
          goto LABEL_25;
        }
LABEL_112:
        unint64_t v139 = v100 - 1;
        if (v100 - 1 >= a1)
        {
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        if (!v35) {
          goto LABEL_162;
        }
        uint64_t v140 = v33;
        uint64_t v141 = v35;
        a1 = (unint64_t)&v98[16 * v139];
        uint64_t v142 = *(void *)a1;
        uint64_t v143 = &v98[16 * v100];
        uint64_t v144 = *((void *)v143 + 1);
        uint64_t v145 = v165;
        sub_1004EB334((id *)(v141 + 8 * *(void *)a1), (id *)(v141 + 8 * *(void *)v143), (id *)(v141 + 8 * v144), v163);
        uint64_t v165 = v145;
        if (v145) {
          goto LABEL_133;
        }
        if (v144 < v142) {
          goto LABEL_136;
        }
        if (v100 > *((void *)v140 + 2)) {
          goto LABEL_137;
        }
        *(void *)a1 = v142;
        *(void *)&v98[16 * v139 + 8] = v144;
        unint64_t v146 = *((void *)v140 + 2);
        if (v100 >= v146) {
          goto LABEL_138;
        }
        uint64_t v33 = v140;
        a1 = v146 - 1;
        memmove(&v98[16 * v100], v143 + 16, 16 * (v146 - 1 - v100));
        *((void *)v140 + 2) = v146 - 1;
        uint64_t v35 = v166;
        if (v146 <= 2) {
          goto LABEL_25;
        }
      }
    }
    a1 = 1;
LABEL_25:
    Swift::Int v5 = (Swift::Int)v164;
    unint64_t v37 = &selRef_bytes;
    if (v34 >= (uint64_t)v164) {
      goto LABEL_122;
    }
  }
  long long v39 = *(void **)(v35 + 8 * v34);
  unint64_t v40 = *(void **)(v35 + 8 * v38);
  id v41 = v39;
  id v42 = v40;
  a1 = (unint64_t)objc_msgSend(v41, v37[300], v42);
  if (!a1)
  {
    id v43 = [v41 serialNumber];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v45 = v33;
    uint64_t v47 = v46;

    unint64_t v170 = v44;
    uint64_t v171 = v47;
    id v48 = [v42 serialNumber];
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;

    uint64_t v168 = v49;
    uint64_t v169 = v51;
    uint64_t v35 = v166;
    uint64_t v33 = v45;
    uint64_t v52 = type metadata accessor for Locale();
    uint64_t v53 = (uint64_t)v167;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v167, 1, 1, v52);
    sub_1004ECF94();
    a1 = StringProtocol.compare<A>(_:options:range:locale:)();
    sub_1004ECFE8(v53, &qword_100808198);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for ComparisonResult(0);
  uint64_t v162 = v54;
  if (a1 + 1 >= 3)
  {
LABEL_167:
    unint64_t v170 = a1;
    goto LABEL_168;
  }
  uint64_t v55 = ((_BYTE)a1 + 1) & 7;

  Swift::Int v34 = v38 + 2;
  if (v38 + 2 >= (uint64_t)v164) {
    goto LABEL_41;
  }
  uint64_t v158 = v33;
  uint64_t v56 = (id *)(v157 + 8 * v38);
  do
  {
    uint64_t v57 = *(v56 - 1);
    id v58 = *v56;
    id v59 = v57;
    a1 = (unint64_t)objc_msgSend(v58, v37[300], v59);
    if (!a1)
    {
      id v60 = [v58 serialNumber];
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v63 = v62;

      unint64_t v170 = v61;
      uint64_t v171 = v63;
      id v64 = [v59 serialNumber];
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v67 = v66;

      uint64_t v168 = v65;
      uint64_t v169 = v67;
      uint64_t v35 = v166;
      uint64_t v68 = type metadata accessor for Locale();
      os_log_type_t v69 = v167;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v167, 1, 1, v68);
      sub_1004ECF94();
      a1 = StringProtocol.compare<A>(_:options:range:locale:)();
      uint64_t v70 = (uint64_t)v69;
      unint64_t v37 = &selRef_bytes;
      sub_1004ECFE8(v70, &qword_100808198);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (a1 >= 2)
    {
      if (a1 != -1) {
        goto LABEL_167;
      }

      if (v55)
      {
        uint64_t v33 = v158;
        int64_t v38 = v161;
        goto LABEL_52;
      }
    }
    else
    {

      if (!v55)
      {
        uint64_t v33 = v158;
        int64_t v38 = v161;
        if (v34 < v161) {
          goto LABEL_159;
        }
LABEL_45:
        if (v38 < v34)
        {
          uint64_t v71 = (uint64_t *)(v156 + 8 * v34);
          Swift::Int v72 = v34;
          int64_t v73 = v38;
          unint64_t v74 = (uint64_t *)(v35 + 8 * v38);
          while (1)
          {
            if (v73 != --v72)
            {
              if (!v35) {
                goto LABEL_163;
              }
              uint64_t v75 = *v74;
              uint64_t *v74 = *v71;
              *uint64_t v71 = v75;
            }
            ++v73;
            --v71;
            ++v74;
            if (v73 >= v72) {
              goto LABEL_52;
            }
          }
        }
        goto LABEL_52;
      }
    }
    ++v34;
    ++v56;
  }
  while (v164 != (void **)v34);
  Swift::Int v34 = (Swift::Int)v164;
  uint64_t v33 = v158;
  int64_t v38 = v161;
LABEL_41:
  if (v55) {
    goto LABEL_52;
  }
  if (v34 >= v38) {
    goto LABEL_45;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  unint64_t v170 = a1;
LABEL_168:
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
LABEL_169:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1004EB334(id *a1, id *a2, id *a3, void **a4)
{
  uint64_t v8 = sub_1004CA0A4(&qword_100808198);
  __chkstk_darwin(v8 - 8);
  id v64 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (char *)a2 - (char *)a1;
  uint64_t v11 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v11 = (char *)a2 - (char *)a1;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v67 = a3;
  uint64_t v13 = (char *)a3 - (char *)a2;
  uint64_t v14 = v13 / 8;
  unint64_t v74 = a1;
  int64_t v73 = a4;
  if (v11 >> 3 < v13 / 8)
  {
    if (v10 < -7) {
      goto LABEL_49;
    }
    unint64_t v15 = (unint64_t)v67;
    if (a4 != a1 || &a1[v12] <= a4) {
      memmove(a4, a1, 8 * v12);
    }
    uint64_t v16 = &a4[v12];
    Swift::Int v72 = v16;
    if (v10 >= 8 && (unint64_t)a2 < v15)
    {
      type metadata accessor for ComparisonResult(0);
      uint64_t v63 = v17;
      BOOL v18 = &selRef_bytes;
      while (1)
      {
        id v19 = *a4;
        id v20 = *a2;
        id v21 = v19;
        id v22 = objc_msgSend(v20, v18[300], v21, v63);
        id v23 = v22;
        if (v22)
        {
          if ((unint64_t)v22 >= 2) {
            goto LABEL_17;
          }
        }
        else
        {
          id v25 = [v20 serialNumber];
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v66 = a4;
          uint64_t v27 = v26;
          uint64_t v28 = v18;
          uint64_t v29 = v16;
          uint64_t v30 = a1;
          uint64_t v32 = v31;

          uint64_t v70 = v27;
          uint64_t v71 = v32;
          id v33 = [v21 serialNumber];
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v36 = v35;

          uint64_t v68 = v34;
          uint64_t v69 = v36;
          a1 = v30;
          uint64_t v16 = v29;
          BOOL v18 = v28;
          a4 = v66;
          uint64_t v37 = type metadata accessor for Locale();
          int64_t v38 = v64;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v64, 1, 1, v37);
          sub_1004ECF94();
          id v23 = (id)StringProtocol.compare<A>(_:options:range:locale:)();
          uint64_t v39 = (uint64_t)v38;
          unint64_t v15 = (unint64_t)v67;
          sub_1004ECFE8(v39, &qword_100808198);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((unint64_t)v23 >= 2)
          {
LABEL_17:
            if (v23 != (id)-1) {
              goto LABEL_48;
            }

            uint64_t v24 = a2 + 1;
            if (a1 < a2 || a1 >= v24 || a1 != a2) {
              *a1 = *a2;
            }
            goto LABEL_22;
          }
        }

        if (a1 != a4) {
          *a1 = *a4;
        }
        int64_t v73 = ++a4;
        uint64_t v24 = a2;
LABEL_22:
        unint64_t v74 = ++a1;
        if (a4 < v16)
        {
          a2 = v24;
          if ((unint64_t)v24 < v15) {
            continue;
          }
        }
        break;
      }
    }
LABEL_47:
    sub_1004DBA70(&v74, &v73, &v72);
    return 1;
  }
  if (v13 < -7) {
    goto LABEL_49;
  }
  if (a4 != a2 || &a2[v14] <= a4) {
    memmove(a4, a2, 8 * v14);
  }
  unint64_t v40 = &a4[v14];
  Swift::Int v72 = v40;
  unint64_t v74 = a2;
  id v41 = v67;
  if (v13 < 8 || a1 >= a2) {
    goto LABEL_47;
  }
  type metadata accessor for ComparisonResult(0);
  uint64_t v63 = v42;
  id v43 = v41 - 1;
  uint64_t v44 = a2;
  uint64_t v65 = a1;
  uint64_t v66 = a4;
  while (1)
  {
    uint64_t v67 = v40;
    uint64_t v46 = *--v40;
    id v45 = v46;
    uint64_t v47 = *--v44;
    id v48 = v45;
    id v49 = v47;
    id v23 = objc_msgSend(v48, "comparePassDatesToPass:", v49, v63);
    if (!v23)
    {
      id v50 = [v48 serialNumber];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v52;

      uint64_t v70 = v51;
      uint64_t v71 = v53;
      id v54 = [v49 serialNumber];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v57 = v56;

      uint64_t v68 = v55;
      uint64_t v69 = v57;
      a4 = v66;
      uint64_t v58 = type metadata accessor for Locale();
      uint64_t v59 = (uint64_t)v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v64, 1, 1, v58);
      sub_1004ECF94();
      id v23 = (id)StringProtocol.compare<A>(_:options:range:locale:)();
      sub_1004ECFE8(v59, &qword_100808198);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    id v60 = v43 + 1;
    if ((unint64_t)v23 < 2)
    {

      Swift::Int v72 = v40;
      if (v60 < v67 || v43 >= v67 || v60 != v67) {
        id *v43 = *v40;
      }
      uint64_t v44 = a2;
      unint64_t v61 = (unint64_t)v65;
      if (v40 <= a4) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    if (v23 != (id)-1) {
      break;
    }

    if (v60 != a2 || v43 >= a2) {
      id *v43 = *v44;
    }
    unint64_t v74 = v44;
    unint64_t v61 = (unint64_t)v65;
    unint64_t v40 = v67;
    if (v67 <= a4) {
      goto LABEL_47;
    }
LABEL_46:
    --v43;
    a2 = v44;
    if ((unint64_t)v44 <= v61) {
      goto LABEL_47;
    }
  }
LABEL_48:
  uint64_t v70 = (uint64_t)v23;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
LABEL_49:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004EB910(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1004CA0A4(&qword_100808190);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    BOOL v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_retain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1004EBBAC(unint64_t a1, char *a2)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v5 = *(void **)&a2[OBJC_IVAR___PDRelevantPassLiveActivityManager_cardFileManager];
    uint64_t v6 = 4;
    while (1)
    {
      uint64_t v7 = (a1 & 0xC000000000000001) != 0
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : (char *)*(id *)(a1 + 8 * v6);
      a2 = v7;
      uint64_t v8 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      NSString v9 = [v7 uniqueIdentifier];
      if (!v9)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v9 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v10 = [v5 contentForUniqueID:v9];

      if (v10)
      {
        self;
        uint64_t v11 = swift_dynamicCastObjCClass();

        if (v11)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
        }
      }
      else
      {
      }
      ++v6;
      if (v8 == v4) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1004EBDAC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v19 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t j = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v10 | (j << 6); ; unint64_t i = __clz(__rbit64(v13)) + (j << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_retain();
    if (a2(v17, v16, v18))
    {
      swift_release();
      return v17;
    }
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    if (v12 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++j;
    if (v13) {
      goto LABEL_19;
    }
    int64_t j = v12 + 1;
    if (v12 + 1 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * j);
    if (v13) {
      goto LABEL_19;
    }
    int64_t j = v12 + 2;
    if (v12 + 2 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * j);
    if (v13) {
      goto LABEL_19;
    }
    int64_t j = v12 + 3;
    if (v12 + 3 >= v19) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v4 + 8 * j);
    if (v13) {
      goto LABEL_19;
    }
    int64_t v14 = v12 + 4;
    if (v14 >= v19)
    {
LABEL_24:
      swift_release();
      return 0;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v14);
    for (int64_t j = v14; !v13; ++v14)
    {
      int64_t j = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_27;
      }
      if (j >= v19) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v4 + 8 * j);
    }
LABEL_19:
    unint64_t v7 = (v13 - 1) & v13;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

id sub_1004EBF90(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR___PDRelevantPassLiveActivityManager_currentGroups] = &_swiftEmptyDictionarySingleton;
  uint64_t v5 = OBJC_IVAR___PDRelevantPassLiveActivityManager_defaults;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = objc_allocWithZone((Class)NSUserDefaults);
  unint64_t v7 = v2;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSuiteName:v8];

  *(void *)&v2[v5] = v9;
  unint64_t v10 = &v7[OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiersKey];
  *(void *)unint64_t v10 = 0xD00000000000001BLL;
  *((void *)v10 + 1) = 0x800000010060C5D0;
  uint64_t v11 = OBJC_IVAR___PDRelevantPassLiveActivityManager_groupsLock;
  sub_1004CA0A4(&qword_100807820);
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = 0;
  *(void *)&v7[v11] = v12;
  uint64_t v13 = OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedLock;
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)&v7[v13] = v14;
  *(void *)&v7[OBJC_IVAR___PDRelevantPassLiveActivityManager_databaseManager] = a1;
  *(void *)&v7[OBJC_IVAR___PDRelevantPassLiveActivityManager_cardFileManager] = a2;
  if (v9)
  {
    id v15 = a1;
    id v16 = a2;
    id v17 = v9;
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = [v17 objectForKey:v18];

    if (v19)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v26, 0, sizeof(v26));
    }
    sub_1004CEB40((uint64_t)v26, (uint64_t)v27);
    if (v28)
    {
      sub_1004CA0A4(&qword_100807E18);
      if (swift_dynamicCast())
      {
        uint64_t v22 = v25;

LABEL_11:
        *(void *)&v7[OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiers] = v22;
        goto LABEL_12;
      }
    }
    else
    {
      sub_1004ECFE8((uint64_t)v27, &qword_100807C40);
    }

    uint64_t v22 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  *(void *)&v7[OBJC_IVAR___PDRelevantPassLiveActivityManager_dismissedGroupIdentifiers] = _swiftEmptyArrayStorage;
  id v20 = a1;
  id v21 = a2;
LABEL_12:

  unint64_t v23 = (objc_class *)type metadata accessor for RelevantPassLiveActivityManager();
  v29.receiver = v7;
  v29.super_class = v23;
  return objc_msgSendSuper2(&v29, "init");
}

unint64_t sub_1004EC210()
{
  unint64_t result = qword_100807E70;
  if (!qword_100807E70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100807E70);
  }
  return result;
}

uint64_t sub_1004EC250(uint64_t result, void *a2)
{
  uint64_t v37 = (void *)result;
  uint64_t v2 = *(char **)result;
  uint64_t v43 = *(void *)(*(void *)result + 16);
  unint64_t v3 = 0;
  if (!v43) {
    return v3;
  }
  uint64_t v45 = a2[2];
  int64_t v38 = a2 + 7;
  while (1)
  {
    if (v45)
    {
      uint64_t v4 = a2;
      uint64_t v5 = &v2[16 * v3 + 32];
      uint64_t v6 = *(void *)v5;
      uint64_t v7 = *((void *)v5 + 1);
      uint64_t v9 = a2[4];
      uint64_t v8 = a2[5];
      if (v9 == *(void *)v5 && v8 == v7)
      {
LABEL_21:
        unint64_t v17 = v3 + 1;
        if (!__OFADD__(v3, 1)) {
          goto LABEL_22;
        }
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v11 = *(void *)v5;
      uint64_t v12 = *((void *)v5 + 1);
      unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result)
      {
        uint64_t v6 = v9;
        uint64_t v7 = v8;
        unint64_t v17 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_56;
        }
LABEL_22:
        unint64_t v18 = *((void *)v2 + 2);
        if (v17 == v18) {
          return v3;
        }
        uint64_t v36 = v4 + 7;
        uint64_t v42 = v7;
        uint64_t v44 = v6;
        while (v17 < v18)
        {
          id v19 = v2 + 32;
          id v20 = &v2[16 * v17 + 32];
          uint64_t v21 = *(void *)v20;
          uint64_t v22 = *((void *)v20 + 1);
          if (v6 != *(void *)v20 || v7 != v22)
          {
            unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if (result)
            {
LABEL_43:
              uint64_t v7 = v42;
              uint64_t v6 = v44;
            }
            else
            {
              uint64_t v39 = (uint64_t)v2;
              unint64_t v40 = v3;
              if (v45 != 1)
              {
                unint64_t v24 = v36;
                uint64_t v25 = 1;
                do
                {
                  uint64_t v26 = v25 + 1;
                  if (__OFADD__(v25, 1)) {
                    goto LABEL_57;
                  }
                  unint64_t result = *(v24 - 1);
                  BOOL v27 = result == v21 && *v24 == v22;
                  if (v27 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                  {
                    uint64_t v2 = (char *)v39;
                    unint64_t v3 = v40;
                    goto LABEL_43;
                  }
                  v24 += 2;
                  ++v25;
                }
                while (v26 != v45);
              }
              if (v40 == v17)
              {
                uint64_t v2 = (char *)v39;
              }
              else
              {
                uint64_t v2 = (char *)v39;
                if (v40 >= v18) {
                  goto LABEL_62;
                }
                uint64_t v28 = &v19[16 * v40];
                uint64_t v29 = *(void *)v28;
                uint64_t v30 = *((void *)v28 + 1);
                uint64_t v31 = *(void *)v20;
                uint64_t v32 = *((void *)v20 + 1);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v2 = sub_1004DBBD4(v39);
                }
                uint64_t v33 = &v2[16 * v40 + 32];
                *(void *)uint64_t v33 = v31;
                *((void *)v33 + 1) = v32;
                unint64_t result = swift_bridgeObjectRelease();
                if (v17 >= *((void *)v2 + 2)) {
                  goto LABEL_63;
                }
                uint64_t v34 = &v2[16 * v17 + 32];
                *(void *)uint64_t v34 = v29;
                *((void *)v34 + 1) = v30;
                unint64_t result = swift_bridgeObjectRelease();
                *uint64_t v37 = v2;
              }
              uint64_t v7 = v42;
              uint64_t v6 = v44;
              unint64_t v3 = v40 + 1;
              if (__OFADD__(v40, 1)) {
                goto LABEL_61;
              }
            }
          }
          if (__OFADD__(v17++, 1)) {
            goto LABEL_59;
          }
          unint64_t v18 = *((void *)v2 + 2);
          if (v17 == v18) {
            return v3;
          }
        }
        goto LABEL_58;
      }
      if (v45 != 1) {
        break;
      }
    }
LABEL_3:
    if (++v3 == v43) {
      return *((void *)v2 + 2);
    }
  }
  uint64_t v13 = v38;
  uint64_t v14 = 1;
  while (1)
  {
    uint64_t v15 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    unint64_t result = *(v13 - 1);
    BOOL v16 = result == v11 && *v13 == v12;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      uint64_t v6 = v9;
      uint64_t v7 = v8;
      uint64_t v4 = a2;
      goto LABEL_21;
    }
    v13 += 2;
    ++v14;
    if (v15 == v45) {
      goto LABEL_3;
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  return result;
}

uint64_t sub_1004EC52C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = (unint64_t *)result;
  uint64_t v23 = 0;
  int64_t v5 = 0;
  uint64_t v24 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  uint64_t v9 = OBJC_IVAR___PDRelevantPassLiveActivityManager_currentGroups;
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v5 << 6);
LABEL_21:
    if (!*(void *)(*(void *)(a4 + v9) + 16)) {
      goto LABEL_30;
    }
    BOOL v16 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1004EA0B8(v17, v18);
    char v20 = v19;
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
LABEL_30:
      *(unint64_t *)((char *)v22 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v23++, 1)) {
        goto LABEL_27;
      }
    }
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v25) {
    return sub_1004EB910(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v13);
  ++v5;
  if (v14) {
    goto LABEL_20;
  }
  int64_t v5 = v13 + 1;
  if (v13 + 1 >= v25) {
    return sub_1004EB910(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v5);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v5 = v13 + 2;
  if (v13 + 2 >= v25) {
    return sub_1004EB910(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v5);
  if (v14)
  {
LABEL_20:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
    goto LABEL_21;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v25) {
    return sub_1004EB910(v22, a2, v23, a3);
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v25) {
      return sub_1004EB910(v22, a2, v23, a3);
    }
    unint64_t v14 = *(void *)(v24 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1004EC750(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  BOOL v27 = (unint64_t *)result;
  uint64_t v28 = 0;
  int64_t v6 = 0;
  uint64_t v31 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  uint64_t v33 = OBJC_IVAR___PDRelevantPassLiveActivityManager_currentGroups;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v10 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v11 = v10 | (v6 << 6);
LABEL_18:
    uint64_t v15 = *(void *)(v4 + v33);
    if (*(void *)(v15 + 16))
    {
      BOOL v16 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
      uint64_t v17 = *(void *)(*(void *)(v5 + 56) + 8 * v11);
      uint64_t v18 = *v16;
      uint64_t v19 = v16[1];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v20 = sub_1004EA0B8(v18, v19);
      if (v21)
      {
        uint64_t v22 = *(void *)(*(void *)(v15 + 56) + 8 * v20);
        swift_retain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        unint64_t v23 = *(void *)(v22 + 16);
        swift_beginAccess();
        uint64_t v24 = *(void *)(v17 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unsigned __int8 v25 = sub_1004E5038(v23, v24);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v4 = a4;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v5 = a3;
        unint64_t result = swift_bridgeObjectRelease();
        if ((v25 & 1) == 0)
        {
          *(unint64_t *)((char *)v27 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
          BOOL v12 = __OFADD__(v28++, 1);
          if (v12) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        unint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  BOOL v12 = __OFADD__(v6++, 1);
  if (v12)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v6 >= v32) {
    return sub_1004EB910(v27, a2, v28, v5);
  }
  unint64_t v13 = *(void *)(v31 + 8 * v6);
  if (v13)
  {
LABEL_17:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v6 << 6);
    goto LABEL_18;
  }
  int64_t v14 = v6 + 1;
  if (v6 + 1 >= v32) {
    return sub_1004EB910(v27, a2, v28, v5);
  }
  unint64_t v13 = *(void *)(v31 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v6 + 2;
  if (v6 + 2 >= v32) {
    return sub_1004EB910(v27, a2, v28, v5);
  }
  unint64_t v13 = *(void *)(v31 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v6 + 3;
  if (v6 + 3 >= v32) {
    return sub_1004EB910(v27, a2, v28, v5);
  }
  unint64_t v13 = *(void *)(v31 + 8 * v14);
  if (v13)
  {
LABEL_16:
    int64_t v6 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v6 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v6 >= v32) {
      return sub_1004EB910(v27, a2, v28, v5);
    }
    unint64_t v13 = *(void *)(v31 + 8 * v6);
    ++v14;
    if (v13) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1004ECA14(uint64_t a1, void *a2, uint64_t (*a3)(char *, unint64_t, uint64_t, id))
{
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  unint64_t v10 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    unint64_t v11 = (char *)&v17 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v11, 8 * v8);
    id v12 = v10;
    uint64_t v13 = a3(v11, v8, a1, v12);

    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    int64_t v14 = (void *)swift_slowAlloc();
    bzero(v14, 8 * v8);
    id v15 = v10;
    uint64_t v13 = a3((char *)v14, v8, a1, v15);

    swift_slowDealloc();
  }
  return v13;
}

uint64_t type metadata accessor for RelevantPassLiveActivityManager.LiveActivityGroup()
{
  return self;
}

uint64_t sub_1004ECBE8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = sub_1004E4D58();
  LOBYTE(v1) = sub_1004E4F70(v1, v2, v3);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t type metadata accessor for RelevantPassLiveActivityManager()
{
  return self;
}

uint64_t sub_1004ECC60()
{
  uint64_t v1 = type metadata accessor for PassLiveActivityAttributes.ContentState();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1004ECD50(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PassLiveActivityAttributes.ContentState() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1004CE9E0;
  return sub_1004E7A60(a1, v5, v6, v7, v8);
}

uint64_t sub_1004ECE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004CA0A4(&qword_100808140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004ECEE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004ECF2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004CA0A4(&qword_100808140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1004ECF94()
{
  unint64_t result = qword_1008081A0;
  if (!qword_1008081A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1008081A0);
  }
  return result;
}

uint64_t sub_1004ECFE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1004CA0A4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1004ED044(char a1)
{
  sub_1004CA0A4(&qword_100807820);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0xD000000000000018;
  *(void *)(v1 + 64) = 0x800000010060D280;
  uint64_t result = nw_path_create_default_evaluator();
  if (result)
  {
    *(void *)(v1 + 16) = result;
    id v5 = PDHeavyQueue();
    uint64_t v6 = swift_allocObject();
    swift_weakInit();
    void v9[4] = sub_1004ED868;
    void v9[5] = v6;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    void v9[2] = sub_1004ED6C0;
    void v9[3] = &unk_100757BE0;
    uint64_t v7 = _Block_copy(v9);
    swift_release();
    nw_path_evaluator_set_update_handler();
    _Block_release(v7);

    if (a1 == 2)
    {
      uint64_t v8 = nw_path_evaluator_copy_path();
      sub_1004ED360(v8);
      swift_unknownObjectRelease();
    }
    else
    {
      *(unsigned char *)(v1 + 32) = a1 & 1;
    }
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004ED1C4()
{
  nw_path_evaluator_cancel();
  swift_unknownObjectRelease();
  swift_release();
  sub_1004D0850(*(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for PendingProvisioningConnectivityPrecondition()
{
  return self;
}

uint64_t sub_1004ED24C(NSObject *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(os_unfair_lock_s **)(result + 24);
    swift_retain();
    os_unfair_lock_lock(v4 + 4);
    sub_1004ED360(a1);
    if (*(unsigned char *)(v3 + 32) == 1)
    {
      id v5 = *(void (**)(uint64_t))(v3 + 40);
      if (v5)
      {
        *(void *)(v3 + 40) = 0;
        *(void *)(v3 + 48) = 0;
        swift_retain();
        sub_1004D0850((uint64_t)v5);
      }
    }
    else
    {
      id v5 = 0;
    }
    os_unfair_lock_unlock(v4 + 4);
    swift_release();
    if (v5)
    {
      uint64_t v6 = swift_retain();
      v5(v6);
      sub_1004D0850((uint64_t)v5);
      swift_release();
      return sub_1004D0850((uint64_t)v5);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1004ED360(NSObject *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    *(unsigned char *)(v1 + 32) = 0;
    return result;
  }
  uint64_t v8 = swift_unknownObjectRetain();
  BOOL v9 = nw_path_uses_interface_type(v8, nw_interface_type_wifi);
  BOOL v10 = nw_path_uses_interface_type(a1, nw_interface_type_cellular);
  BOOL v11 = nw_path_uses_interface_type(a1, nw_interface_type_wired);
  nw_path_status_t status = nw_path_get_status(a1);
  if ((status | 2) == 3)
  {
    if (v9 || v10)
    {
      *(unsigned char *)(v1 + 32) = 1;
LABEL_8:
      return swift_unknownObjectRelease();
    }
    *(unsigned char *)(v1 + 32) = v11;
    if (v11) {
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(v1 + 32) = 0;
  }
  static Logger.Provisioning.add.getter();
  swift_unknownObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = swift_slowAlloc();
    int v23 = v15;
    uint64_t v17 = v16;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v26 = v24;
    *(_DWORD *)uint64_t v17 = 67110146;
    LODWORD(v25) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v22 = v13;
    *(_WORD *)(v17 + 8) = 1024;
    LODWORD(v25) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 14) = 1024;
    LODWORD(v25) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 20) = 1024;
    LODWORD(v25) = status;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 26) = 2080;
    uint64_t v25 = (uint64_t)a1;
    swift_unknownObjectRetain();
    sub_1004CA0A4(&qword_100808288);
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v25 = sub_1004F7DDC(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v20 = v22;
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v23, "No Connectivity. hasWifi: %{BOOL}d, hasCellular: %{BOOL}d, hasEthernet: %{BOOL}d, status: %u\npath: '%s'", (uint8_t *)v17, 0x24u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1004ED6C0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_1004ED720(void (*a1)(void), uint64_t a2)
{
  id v5 = (os_unfair_lock_s *)(*(void *)(v2 + 24) + 16);
  os_unfair_lock_lock(v5);
  if (*(unsigned char *)(v2 + 32))
  {
    os_unfair_lock_unlock(v5);
    a1();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = a1;
    *(void *)(v2 + 48) = a2;
    swift_retain();
    sub_1004D0850(v6);
    os_unfair_lock_unlock(v5);
  }
}

uint64_t sub_1004ED7C4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL sub_1004ED7F8(void *a1)
{
  return object_getClass(a1) == (Class)_TtC5passd43PendingProvisioningConnectivityPrecondition
      && a1 != 0;
}

uint64_t sub_1004ED830()
{
  swift_weakDestroy();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004ED868(NSObject *a1)
{
  return sub_1004ED24C(a1);
}

uint64_t sub_1004ED870(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004ED880()
{
  return swift_release();
}

uint64_t type metadata accessor for PDARRFidoSignatureProvider()
{
  return self;
}

uint64_t sub_1004ED8EC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7, void (*a8)(void, void, void), uint64_t a9)
{
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15 || a4 >> 60 == 15 || a7)
  {
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v39 = a9;
      unint64_t v40 = a8;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 138412290;
      if (a7)
      {
        swift_errorRetain();
        uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v41 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v41 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v35 = 0;
      }
      void *v34 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "PDARRFidoSignatureProvider: Failed to generate FIDO key with error: %@", v33, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      a8 = v40;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    id v36 = a7;
    if (!a7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v37 = objc_allocWithZone((Class)NSError);
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v36 = [v37 initWithDomain:v38 code:4 userInfo:0];
    }
    swift_errorRetain();
    swift_errorRetain();
    a8(0, 0, v36);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    id v19 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    sub_1004EF068(a1, a2);
    sub_1004EF068(a3, a4);
    id v20 = [v19 init];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v20 setPublicKey:isa];

    sub_1004CA0A4((uint64_t *)&unk_1008082C0);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1005B4350;
    *(void *)(v22 + 32) = a3;
    *(void *)(v22 + 40) = a4;
    sub_1004E4810(a3, a4);
    Class v23 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v20 setAttestation:v23];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1005B4130;
    *(void *)(v24 + 32) = v20;
    uint64_t v41 = v24;
    specialized Array._endMutation()();
    id v25 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004E06C4();
    id v26 = v20;
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = [v25 initWithKeyMaterialContents:v27];

    id v29 = v28;
    a8(v28, 0, 0);

    sub_1004CEAD4(a3, a4);
    return sub_1004CEAD4(a1, a2);
  }
}

uint64_t sub_1004EDE10(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v8 = a2;
  BOOL v9 = *(void (**)(void *, unint64_t, void *, unint64_t, void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v10 = v8;
    uint64_t v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v15 = 0xF000000000000000;
    if (a4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  swift_retain();
  unint64_t v12 = 0xF000000000000000;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  id v13 = a3;
  a3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  if (a4)
  {
LABEL_4:
    id v16 = a4;
    a4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    goto LABEL_8;
  }
LABEL_7:
  unint64_t v18 = 0xF000000000000000;
LABEL_8:
  id v19 = a5;
  v9(v8, v12, a3, v15, a4, v18, a5);

  sub_1004CEAD4((uint64_t)a4, v18);
  sub_1004CEAD4((uint64_t)a3, v15);
  sub_1004CEAD4((uint64_t)v8, v12);
  return swift_release();
}

uint64_t sub_1004EE2DC()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004EE314(void *a1, void *a2, void (**a3)(void, void, void, void))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)aBlock - v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  _Block_copy(a3);
  id v14 = [a1 keyCreationMetadata];
  if (v14
    && (v15 = v14, id v16 = [v14 signatureFido], v15, v16))
  {
    id v17 = [a2 secureElement];
    if (v17)
    {
      unint64_t v18 = v17;
      id v19 = [v16 fidoProfile];
      id v20 = [v19 relyingPartyIdentifier];
      id v21 = [v19 accountHash];
      id v22 = [v16 fidoChallenge];
      uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;

      v26.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1004CEAE8(v23, v25);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = sub_1004DFD70;
      *(void *)(v27 + 24) = v13;
      aBlock[4] = sub_1004EF040;
      aBlock[5] = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004EDE10;
      aBlock[3] = &unk_100757D70;
      id v28 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v18 createFidoKeyForRelyingParty:v20 relyingPartyAccountHash:v21 challenge:v26.super.isa externalizedAuth:0 completion:v28];
      _Block_release(v28);
      swift_release();
    }
    else
    {
      static Logger.auxiliaryCapability.getter();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        id v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "PDARRFidoSignatureProvider: Context missing SE", v36, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v37 = objc_allocWithZone((Class)NSError);
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v21 = [v37 initWithDomain:v38 code:4 userInfo:0];

      v26.super.Class isa = (Class)_convertErrorToNSError(_:)();
      ((void (**)(void, void, void, Class))a3)[2](a3, 0, 0, v26.super.isa);
      swift_release();
    }
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "PDARRFidoSignatureProvider: Missing key creation metadata", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v32 = objc_allocWithZone((Class)NSError);
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [v32 initWithDomain:v33 code:4 userInfo:0];

    v26.super.Class isa = (Class)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, Class))a3)[2](a3, 0, 0, v26.super.isa);
    swift_release();
  }
}

void sub_1004EE854(void *a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  _Block_copy(a2);
  id v9 = [a1 pass];
  if (v9)
  {
    id v23 = v9;
    id v10 = [v9 fidoProfile];
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = [a1 secureElement];
      if (v12)
      {
        uint64_t v13 = v12;
        id v14 = [v11 relyingPartyIdentifier];
        id v15 = [v11 accountHash];
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = sub_1004E4640;
        *(void *)(v16 + 24) = v8;
        aBlock[4] = sub_1004EF07C;
        aBlock[5] = v16;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100509C4C;
        aBlock[3] = &unk_100757CF8;
        id v17 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        [v13 checkFidoKeyPresenceForRelyingParty:v14 relyingPartyAccountHash:v15 fidoKeyHash:0 completion:v17];
        _Block_release(v17);
        swift_release();
      }
      else
      {
        static Logger.auxiliaryCapability.getter();
        id v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v19, v20))
        {
          id v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v21 = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "PDARRFidoSignatureProvider: Context missing SE", v21, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        a2[2](a2, 0);
        swift_release();
      }
    }
    else
    {
      a2[2](a2, 0);
      swift_release();
      id v18 = v23;
    }
  }
  else
  {
    a2[2](a2, 2);
    swift_release();
  }
}

void sub_1004EEC08(void *a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  id v11 = [a1 pass];
  if (v11)
  {
    id v25 = v11;
    id v12 = [v11 fidoProfile];
    if (v12)
    {
      uint64_t v13 = v12;
      id v14 = [a1 secureElement];
      if (v14)
      {
        id v15 = v14;
        id v16 = [v13 relyingPartyIdentifier];
        id v17 = [v13 accountHash];
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = sub_1004E4610;
        *(void *)(v18 + 24) = v10;
        aBlock[4] = sub_1004EEFBC;
        aBlock[5] = v18;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100509C4C;
        aBlock[3] = &unk_100757C80;
        id v19 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        [v15 checkFidoKeyPresenceForRelyingParty:v16 relyingPartyAccountHash:v17 fidoKeyHash:0 completion:v19];
        _Block_release(v19);
        swift_release();
      }
      else
      {
        static Logger.auxiliaryCapability.getter();
        id v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          id v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "PDARRFidoSignatureProvider: Context missing SE", v23, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        a2(0, 0);
        swift_release();
      }
    }
    else
    {
      a2(0, 0);
      swift_release();
      id v20 = v25;
    }
  }
  else
  {
    a2(2, 0);
    swift_release();
  }
}

uint64_t sub_1004EEFBC(char a1)
{
  if (a1) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v2);
}

uint64_t sub_1004EEFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004EF000()
{
  return swift_release();
}

uint64_t sub_1004EF008()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004EF040(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return sub_1004ED8EC(a1, a2, a3, a4, a5, a6, a7, *(void (**)(void, void, void))(v7 + 16), *(void *)(v7 + 24));
}

uint64_t sub_1004EF068(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1004E4810(a1, a2);
  }
  return a1;
}

char *sub_1004EF0A4(unint64_t a1, SEL *a2)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = (char *)_swiftEmptyArrayStorage;
    uint64_t v5 = 4;
    while (1)
    {
      id v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v5);
      uint64_t v7 = v6;
      uint64_t v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      id v9 = [v6 *a2];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = sub_100511754(0, *((void *)v4 + 2) + 1, 1, v4);
        }
        unint64_t v15 = *((void *)v4 + 2);
        unint64_t v14 = *((void *)v4 + 3);
        if (v15 >= v14 >> 1) {
          uint64_t v4 = sub_100511754((char *)(v14 > 1), v15 + 1, 1, v4);
        }
        *((void *)v4 + 2) = v15 + 1;
        id v16 = &v4[16 * v15];
        *((void *)v16 + 4) = v11;
        *((void *)v16 + 5) = v13;
      }
      else
      {
      }
      ++v5;
      if (v8 == v3) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = (char *)_swiftEmptyArrayStorage;
LABEL_19:
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t type metadata accessor for PDARRAliroSignatureProvider()
{
  return self;
}

void sub_1004EF300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(void, void, void))
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = (void *)__chkstk_darwin(v12);
  id v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a6)
  {
    id v34 = v14;
    swift_errorRetain();
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      NSString v33 = a7;
      id v19 = (uint8_t *)swift_slowAlloc();
      id v32 = (void *)swift_slowAlloc();
      *(_DWORD *)id v19 = 138412290;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v35 = v20;
      a7 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v32 = v20;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "PDARRAliroSignatureProvider: Failed to generate Aliro key with error: %@", v19, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, id))(v13 + 8))(v16, v34);
    swift_errorRetain();
    a7(0, 0, a6);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    id v21 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
    if (a2) {
      NSString v22 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v22 = 0;
    }
    [v21 setPublicKeyIdentifier:v22];

    if (a3) {
      v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    }
    else {
      v23.super.Class isa = 0;
    }
    [v21 setCertificateChain:v23.super.isa];

    uint64_t v24 = (void (*)(id, void, void))a7;
    if (a5 >> 60 == 15) {
      Class isa = 0;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    [v21 setApplicationIdentifier:isa];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1005B4130;
    *(void *)(v26 + 32) = v21;
    uint64_t v35 = v26;
    specialized Array._endMutation()();
    id v27 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    id v28 = v21;
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v30 = [v27 initWithKeyMaterialContents:v29];

    id v34 = v30;
    v24(v30, 0, 0);

    id v31 = v34;
  }
}

void sub_1004EF73C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(void, void, void), void *a9)
{
  id v37 = a9;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  os_log_type_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a7)
  {
    uint64_t v36 = v16;
    swift_errorRetain();
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v35 = a8;
      id v21 = (uint8_t *)swift_slowAlloc();
      NSString v22 = (void *)swift_slowAlloc();
      *(_DWORD *)id v21 = 138412290;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v38 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v22 = v23;
      a8 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "PDARRAliroSignatureProvider: Failed to generate Aliro key with error: %@", v21, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v36);
    swift_errorRetain();
    a8(0, 0, a7);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    id v24 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
    if (a2) {
      NSString v25 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v25 = 0;
    }
    [v24 setPublicKeyIdentifier:v25];

    if (a4 >> 60 == 15) {
      Class isa = 0;
    }
    else {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
    }
    [v24 setPublicKey:isa];

    id v27 = (void (*)(id, void, void))a8;
    if (a6 >> 60 == 15) {
      Class v28 = 0;
    }
    else {
      Class v28 = Data._bridgeToObjectiveC()().super.isa;
    }
    [v24 setApplicationIdentifier:v28];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_1005B4130;
    *(void *)(v29 + 32) = v24;
    uint64_t v38 = v29;
    specialized Array._endMutation()();
    id v30 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    id v31 = v24;
    Class v32 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v33 = [v30 initWithKeyMaterialContents:v32];

    id v37 = v33;
    v27(v33, 0, 0);

    id v34 = v37;
  }
}

uint64_t sub_1004EFB94(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.auxiliaryCapability.getter();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v14 = v9;
    if (a1) {
      uint64_t v10 = 0x6673736563637553;
    }
    else {
      uint64_t v10 = 0x742064656C696146;
    }
    if (a1) {
      unint64_t v11 = 0xEC000000796C6C75;
    }
    else {
      unint64_t v11 = 0xE90000000000006FLL;
    }
    uint64_t v13 = sub_1004F7DDC(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "PDARRAliroSignatureProvider: %s revoked subcredentials in key material", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1004EFF24(void *a1, int a2, void *a3, void *a4, void *aBlock, void (*a6)(id, id, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  a6(v11, v12, v10);
  _Block_release(v10);
  _Block_release(v10);
}

uint64_t sub_1004F00AC(void *a1, void *a2, id a3, uint64_t a4, uint64_t a5)
{
  if ([a1 paymentNetworkIdentifier] == a3
    && (id v8 = [a2 pairedReaderIdentifier]) != 0)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v10 == a4 && v12 == a5) {
      char v14 = 1;
    }
    else {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

void sub_1004F0174(uint64_t a1, void *a2, void (*a3)(void, void), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v77 = a6;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || a2)
  {
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v73 = a4;
      unint64_t v74 = a3;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v77 = v11;
      os_log_type_t v18 = (uint8_t *)v17;
      v78[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v18 = 136315138;
      int64_t v79 = a2;
      swift_errorRetain();
      sub_1004CA0A4((uint64_t *)&unk_100808308);
      uint64_t v19 = String.init<A>(describing:)();
      int64_t v79 = (void *)sub_1004F7DDC(v19, v20, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a3 = v74;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "PDARRAliroSignatureProvider: Failed to fetch credentials with error: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v77);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    a3(0, 0);
    return;
  }
  uint64_t v73 = a4;
  unint64_t v74 = a3;
  int64_t v79 = &_swiftEmptyDictionarySingleton;
  uint64_t v21 = a1 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v26 = 0;
  if (!v24) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v27 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  for (unint64_t i = v27 | (v26 << 6); ; unint64_t i = __clz(__rbit64(v30)) + (v26 << 6))
  {
    Class v32 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v33 = v32[1];
    uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    v78[0] = *v32;
    v78[1] = v33;
    v78[2] = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1004F09D0((unint64_t)&v79, v78, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_10;
    }
LABEL_11:
    BOOL v29 = __OFADD__(v26++, 1);
    if (v29)
    {
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __break(1u);
      return;
    }
    if (v26 >= v25) {
      goto LABEL_32;
    }
    unint64_t v30 = *(void *)(v21 + 8 * v26);
    if (!v30) {
      break;
    }
LABEL_25:
    unint64_t v24 = (v30 - 1) & v30;
  }
  int64_t v31 = v26 + 1;
  if (v26 + 1 >= v25) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v21 + 8 * v31);
  if (v30) {
    goto LABEL_24;
  }
  int64_t v31 = v26 + 2;
  if (v26 + 2 >= v25) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v21 + 8 * v31);
  if (v30) {
    goto LABEL_24;
  }
  int64_t v31 = v26 + 3;
  if (v26 + 3 >= v25) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v21 + 8 * v31);
  if (v30) {
    goto LABEL_24;
  }
  int64_t v31 = v26 + 4;
  if (v26 + 4 >= v25) {
    goto LABEL_32;
  }
  unint64_t v30 = *(void *)(v21 + 8 * v31);
  if (v30)
  {
LABEL_24:
    int64_t v26 = v31;
    goto LABEL_25;
  }
  int64_t v31 = v26 + 5;
  if (v26 + 5 < v25)
  {
    unint64_t v30 = *(void *)(v21 + 8 * v31);
    if (!v30)
    {
      while (1)
      {
        int64_t v26 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          goto LABEL_70;
        }
        if (v26 >= v25) {
          goto LABEL_32;
        }
        unint64_t v30 = *(void *)(v21 + 8 * v26);
        ++v31;
        if (v30) {
          goto LABEL_25;
        }
      }
    }
    goto LABEL_24;
  }
LABEL_32:
  swift_release();
  uint64_t v35 = v79;
  v78[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v36 = *(void *)(v77 + 56);
  uint64_t v75 = v77 + 56;
  uint64_t v37 = 1 << *(unsigned char *)(v77 + 32);
  uint64_t v38 = -1;
  if (v37 < 64) {
    uint64_t v38 = ~(-1 << v37);
  }
  unint64_t v39 = v38 & v36;
  int64_t v76 = (unint64_t)(v37 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v40 = 0;
  if (!v39) {
    goto LABEL_37;
  }
LABEL_35:
  unint64_t v41 = __clz(__rbit64(v39));
  v39 &= v39 - 1;
  for (unint64_t j = v41 | (v40 << 6); v35[2]; unint64_t j = __clz(__rbit64(v43)) + (v40 << 6))
  {
    uint64_t v45 = (uint64_t *)(*(void *)(v77 + 48) + 32 * j);
    uint64_t v46 = v45[3];
    uint64_t v47 = v45[2];
    uint64_t v48 = *v45;
    uint64_t v49 = v45[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1004EA198(v48, v49, v47, v46);
    if ((v51 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_65;
    }
    id v52 = *(id *)(v35[7] + 8 * v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v53 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    id v54 = objc_msgSend(v53, "init", v73);
    id v55 = [v52 identifier];
    [v54 setPublicKeyIdentifier:v55];

    Class isa = (Class)[v52 transactionKey];
    if (isa)
    {
      uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1004CEAE8(v57, v59);
    }
    [v54 setPublicKey:isa];

    id v60 = [v52 appletIdentifier];
    if (!v60) {
      goto LABEL_71;
    }
    unint64_t v61 = v60;
    id v62 = objc_msgSend(v60, "pk_decodeHexadecimal");

    if (v62)
    {
      uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v65 = v64;

      v66.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1004CEAE8(v63, v65);
    }
    else
    {
      v66.super.Class isa = 0;
    }
    [v54 setApplicationIdentifier:v66.super.isa];

    id v67 = v54;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v78[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v78[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    if (v39) {
      goto LABEL_35;
    }
LABEL_37:
    BOOL v29 = __OFADD__(v40++, 1);
    if (v29) {
      goto LABEL_68;
    }
    if (v40 >= v76)
    {
LABEL_66:
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v68 = (void (*)(uint64_t, id))v74;
      id v69 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
      sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
      Class v70 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v71 = [v69 initWithKeyMaterialContents:v70];

      id v72 = v71;
      v68(1, v71);

      return;
    }
    unint64_t v43 = *(void *)(v75 + 8 * v40);
    if (!v43)
    {
      int64_t v44 = v40 + 1;
      if (v40 + 1 >= v76) {
        goto LABEL_66;
      }
      unint64_t v43 = *(void *)(v75 + 8 * v44);
      if (!v43)
      {
        int64_t v44 = v40 + 2;
        if (v40 + 2 >= v76) {
          goto LABEL_66;
        }
        unint64_t v43 = *(void *)(v75 + 8 * v44);
        if (!v43)
        {
          int64_t v44 = v40 + 3;
          if (v40 + 3 >= v76) {
            goto LABEL_66;
          }
          unint64_t v43 = *(void *)(v75 + 8 * v44);
          if (!v43)
          {
            while (1)
            {
              int64_t v40 = v44 + 1;
              if (__OFADD__(v44, 1)) {
                goto LABEL_69;
              }
              if (v40 >= v76) {
                goto LABEL_66;
              }
              unint64_t v43 = *(void *)(v75 + 8 * v40);
              ++v44;
              if (v43) {
                goto LABEL_47;
              }
            }
          }
        }
      }
      int64_t v40 = v44;
    }
LABEL_47:
    unint64_t v39 = (v43 - 1) & v43;
  }
  swift_bridgeObjectRelease();
  swift_release();
LABEL_65:
  swift_bridgeObjectRelease();
  v74(2, 0);
}

uint64_t sub_1004F09D0(unint64_t a1, uint64_t *a2, id a3)
{
  uint64_t v5 = a2[1];
  uint64_t v37 = *a2;
  unint64_t isUniquelyReferenced_nonNull_native = a2[2];
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_28;
  }
LABEL_3:
  unint64_t v36 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v8 = 4;
  uint64_t v33 = a3;
  unint64_t v34 = isUniquelyReferenced_nonNull_native;
  uint64_t v31 = v7;
  Class v32 = (void *)a1;
  while (1)
  {
    if (v36) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v8);
    }
    uint64_t v10 = v9;
    uint64_t v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if ([v9 credentialType] == a3) {
      break;
    }

LABEL_5:
    ++v8;
    if (v11 == v7) {
      goto LABEL_28;
    }
  }
  id v12 = [v10 identifier];
  if (v12)
  {
    uint64_t v13 = v12;
    a3 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    swift_bridgeObjectRetain();
    id v35 = v10;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v16 = *(void *)a1;
    unint64_t v38 = *(void *)a1;
    *(void *)a1 = 0x8000000000000000;
    uint64_t v17 = v5;
    a1 = sub_1004EA198(v37, v5, a3, v15);
    uint64_t v19 = *(void *)(v16 + 16);
    BOOL v20 = (v18 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_25;
    }
    uint64_t v5 = v18;
    if (*(void *)(v16 + 24) < v21)
    {
      sub_1005036F0(v21, isUniquelyReferenced_nonNull_native);
      uint64_t v22 = sub_1004EA198(v37, v17, a3, v15);
      if ((v5 & 1) != (v23 & 1)) {
        goto LABEL_30;
      }
      a1 = v22;
      unint64_t isUniquelyReferenced_nonNull_native = v38;
      if ((v5 & 1) == 0) {
        goto LABEL_21;
      }
LABEL_19:
      uint64_t v24 = *(void *)(isUniquelyReferenced_nonNull_native + 56);

      int64_t v25 = v35;
      *(void *)(v24 + 8 * a1) = v35;
      uint64_t v5 = v17;
LABEL_23:
      a1 = (unint64_t)v32;
      *Class v32 = isUniquelyReferenced_nonNull_native;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v33;
      unint64_t isUniquelyReferenced_nonNull_native = v34;
      uint64_t v7 = v31;
      goto LABEL_5;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t isUniquelyReferenced_nonNull_native = v38;
      if (v18) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_100503F48();
      unint64_t isUniquelyReferenced_nonNull_native = v38;
      if (v5) {
        goto LABEL_19;
      }
    }
LABEL_21:
    *(void *)(isUniquelyReferenced_nonNull_native + 8 * (a1 >> 6) + 64) |= 1 << a1;
    int64_t v26 = (void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 32 * a1);
    *int64_t v26 = v37;
    v26[1] = v17;
    _OWORD v26[2] = a3;
    v26[3] = v15;
    int64_t v25 = v35;
    *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * a1) = v35;
    uint64_t v27 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_26;
    }
    uint64_t v5 = v17;
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  __break(1u);
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_1004F0CD8()
{
  return Hasher._finalize()();
}

uint64_t sub_1004F0D60()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004F0DE4()
{
  return Hasher._finalize()();
}

uint64_t sub_1004F0E68(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

void sub_1004F0F0C(void *a1, void *a2, const void *a3)
{
  id v114 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v112 = *(void *)(v5 - 8);
  uint64_t v113 = v5;
  __chkstk_darwin(v5);
  uint64_t v115 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v116 = *(void *)(v7 - 8);
  Class v117 = (Class)v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v110 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v110 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v110 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v110 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  int64_t v25 = (char *)&v110 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v110 - v26;
  uint64_t v119 = swift_allocObject();
  *(void *)(v119 + 16) = a3;
  self;
  BOOL v28 = (void *)swift_dynamicCastObjCClass();
  uint64_t v118 = a3;
  _Block_copy(a3);
  if (!v28)
  {
    static Logger.auxiliaryCapability.getter();
    id v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "PDARRAliroSignatureProvider: Mismatched requirement type", v57, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, Class))(v116 + 8))(v27, v117);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v58 = objc_allocWithZone((Class)NSError);
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v60 = [v58 initWithDomain:v59 code:4 userInfo:0];

    Class isa = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(const void *, void, void, void *))v118 + 2))(v118, 0, 0, isa);
    swift_release();
    goto LABEL_39;
  }
  id v29 = a1;
  id v30 = [v28 type];
  if (v30 == (id)7)
  {
    if (PKAuxiliaryCapabilityHydraAliroEnabled())
    {
      id v62 = [v28 keyCreationMetadata];
      if (!v62
        || (uint64_t v63 = v62,
            id v64 = [v62 signatureAliroHydra],
            v63,
            !v64))
      {
        static Logger.auxiliaryCapability.getter();
        unint64_t v74 = v29;
        id v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v90 = 134217984;
          aBlock = (void **)[v28 type];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v88, v89, "PDARRAliroSignatureProvider: Missing key creation metadata for requirement type: %lu", v90, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          id v88 = v74;
        }

        (*(void (**)(char *, Class))(v116 + 8))(v19, v117);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v96 = objc_allocWithZone((Class)NSError);
        NSString v97 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v94 = [v96 initWithDomain:v97 code:4 userInfo:0];

        id v95 = (void *)_convertErrorToNSError(_:)();
        (*((void (**)(const void *, void, void, void *))v118 + 2))(v118, 0, 0, v95);
        goto LABEL_31;
      }
      id v65 = [v114 secureElement];
      if (v65)
      {
        id v60 = v65;
        id v66 = [v64 serverParameters];
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v67 = swift_allocObject();
        uint64_t v68 = v119;
        *(void *)(v67 + 16) = sub_1004DFD70;
        *(void *)(v67 + 24) = v68;
        long long v124 = sub_1004F496C;
        uint64_t v125 = v67;
        aBlock = _NSConcreteStackBlock;
        uint64_t v121 = 1107296256;
        uint64_t v122 = sub_100500CF8;
        char v123 = &unk_100758040;
        id v69 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v60 createAliroHydraKeyWithServerParameters:isa withCompletion:v69];

        _Block_release(v69);
        swift_release();
      }
      else
      {
        static Logger.auxiliaryCapability.getter();
        uint64_t v105 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v105, v106))
        {
          uint64_t v107 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v107 = 0;
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "PDARRAliroSignatureProvider: Missing secure element", v107, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, Class))(v116 + 8))(v16, v117);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v108 = objc_allocWithZone((Class)NSError);
        NSString v109 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v60 = [v108 initWithDomain:v109 code:4 userInfo:0];

        Class isa = (void *)_convertErrorToNSError(_:)();
        (*((void (**)(const void *, void, void, void *))v118 + 2))(v118, 0, 0, isa);
        swift_release();
      }
    }
    else
    {
      static Logger.auxiliaryCapability.getter();
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v80 = 0;
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "PDARRAliroSignatureProvider: Disabled", v80, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, Class))(v116 + 8))(v22, v117);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v81 = objc_allocWithZone((Class)NSError);
      NSString v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v60 = [v81 initWithDomain:v82 code:4 userInfo:0];

      Class isa = (void *)_convertErrorToNSError(_:)();
      (*((void (**)(const void *, void, void, void *))v118 + 2))(v118, 0, 0, isa);
      swift_release();
    }
LABEL_39:

    return;
  }
  if (v30 == (id)8)
  {
    id v31 = [v28 keyCreationMetadata];
    if (v31)
    {
      Class v32 = v31;
      id v33 = [v31 signatureAliroHome];

      if (v33)
      {
        id v34 = [v33 readerIdentifier];
        uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;

        id v38 = [v33 readerPublicKey];
        uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;

        id v42 = [v33 homeIdentifier];
        unint64_t v43 = v115;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        id v44 = [v114 secureElement];
        uint64_t v111 = v39;
        if (v44)
        {
          uint64_t v45 = v44;
          Class v117 = Data._bridgeToObjectiveC()().super.isa;
          v46.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v118 = (const void *)v37;
          Class v47 = v46.super.isa;
          Class v48 = UUID._bridgeToObjectiveC()().super.isa;
          uint64_t v49 = swift_allocObject();
          uint64_t v50 = v119;
          *(void *)(v49 + 16) = sub_1004DFD70;
          *(void *)(v49 + 24) = v50;
          long long v124 = sub_1004F4944;
          uint64_t v125 = v49;
          aBlock = _NSConcreteStackBlock;
          uint64_t v121 = 1107296256;
          uint64_t v122 = sub_100500E0C;
          char v123 = &unk_100757FF0;
          char v51 = _Block_copy(&aBlock);
          unint64_t v52 = v41;
          uint64_t v53 = v35;
          swift_retain();
          swift_release();
          Class v54 = v117;
          [v45 createAliroHomeKeyWithReaderIdentifier:v117 readerPublicKey:v47 homeIdentifier:v48 withCompletion:v51];
          sub_1004CEAE8(v53, (unint64_t)v118);
          sub_1004CEAE8(v111, v52);
          _Block_release(v51);

          (*(void (**)(char *, uint64_t))(v112 + 8))(v115, v113);
          swift_release();
        }
        else
        {
          static Logger.auxiliaryCapability.getter();
          uint64_t v98 = Logger.logObject.getter();
          os_log_type_t v99 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v98, v99))
          {
            unint64_t v100 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v100 = 0;
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "PDARRAliroSignatureProvider: Missing secure element", v100, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, Class))(v116 + 8))(v10, v117);
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v101 = objc_allocWithZone((Class)NSError);
          NSString v102 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v103 = [v101 initWithDomain:v102 code:4 userInfo:0];

          char v104 = (void *)_convertErrorToNSError(_:)();
          (*((void (**)(const void *, void, void, void *))v118 + 2))(v118, 0, 0, v104);

          sub_1004CEAE8(v35, v37);
          sub_1004CEAE8(v111, v41);

          (*(void (**)(char *, uint64_t))(v112 + 8))(v43, v113);
          swift_release();
        }
        return;
      }
    }
    static Logger.auxiliaryCapability.getter();
    unint64_t v74 = v29;
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 134217984;
      aBlock = (void **)[v28 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v75, v76, "PDARRAliroSignatureProvider: Missing key creation metadata for requirement type: %lu", v77, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v75 = v74;
    }
    uint64_t v91 = v116;

    (*(void (**)(char *, Class))(v91 + 8))(v13, v117);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v92 = objc_allocWithZone((Class)NSError);
    NSString v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v94 = [v92 initWithDomain:v93 code:4 userInfo:0];

    id v95 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(const void *, void, void, void *))v118 + 2))(v118, 0, 0, v95);
LABEL_31:
    swift_release();

    return;
  }
  static Logger.auxiliaryCapability.getter();
  Class v70 = v29;
  id v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 134217984;
    aBlock = (void **)[v28 type];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v71, v72, "PDARRAliroSignatureProvider: Unknown requirement type: %lu", v73, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    id v71 = v70;
  }

  (*(void (**)(char *, Class))(v116 + 8))(v25, v117);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v83 = objc_allocWithZone((Class)NSError);
  NSString v84 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v85 = [v83 initWithDomain:v84 code:4 userInfo:0];

  id v86 = v85;
  uint64_t v87 = (void *)_convertErrorToNSError(_:)();
  (*((void (**)(const void *, void, void, void *))v118 + 2))(v118, 0, 0, v87);
  swift_release();
}

void sub_1004F1F00(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 contents];
  if (v7)
  {
    uint64_t v8 = v7;
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = sub_1004EF0A4(v9, (SEL *)&selRef_publicKeyIdentifier);
    swift_bridgeObjectRelease();
    if (*((void *)v10 + 2))
    {
      uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC5passd27PDARRAliroSignatureProvider_subcredentialManager);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      aBlock[4] = sub_1004EFB94;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100509C4C;
      aBlock[3] = &unk_100757F78;
      uint64_t v13 = _Block_copy(aBlock);
      [v11 revokeSubcredentialsForIdentifiers:isa withCompletion:v13];
      _Block_release(v13);

      return;
    }
    swift_bridgeObjectRelease();
  }
  static Logger.auxiliaryCapability.getter();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "PDARRAliroSignatureProvider: No key material to remove", v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1004F2170(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const void *a5)
{
  uint64_t v94 = a3;
  uint64_t v93 = a1;
  uint64_t v92 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v92 - 8);
  uint64_t v8 = __chkstk_darwin(v92);
  uint64_t v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  os_log_type_t v89 = (char *)&v88 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v88 - v13;
  _Block_copy(a5);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1004E4640;
  *(void *)(v16 + 24) = v15;
  uint64_t v95 = v16;
  _Block_copy(a5);
  _Block_copy(a5);
  _Block_copy(a5);
  NSString v97 = (void (**)(void, void))a5;
  _Block_copy(a5);
  uint64_t v96 = v15;
  swift_retain();
  id v98 = [a4 secureElement];
  if (!v98)
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "PDARRAliroSignatureProvider: Missing secure element", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v14, v92);
    uint64_t v23 = v97;
    v97[2](v97, 0);
    swift_release();
    goto LABEL_76;
  }
  id v90 = [a4 pass];
  if (!v90)
  {
    if (v94)
    {
      static Logger.auxiliaryCapability.getter();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "PDARRAliroSignatureProvider: No existing key materials for requirement (pass doesn't exist)", v26, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v92);
      uint64_t v23 = v97;
      v97[2](v97, 2);
    }
    else
    {
      uint64_t v23 = v97;
      v97[2](v97, 0);
    }
    swift_release();
    swift_release();

    goto LABEL_77;
  }
  uint64_t v17 = v94;
  if (v94)
  {
    uint64_t v18 = (void *)swift_allocObject();
    void v18[2] = v93;
    v18[3] = a2;
    void v18[4] = v17;
    uint64_t v19 = sub_1004F4BE4;
  }
  else
  {
    uint64_t v18 = (void *)swift_allocObject();
    void v18[2] = v93;
    uint64_t v19 = sub_1004F4BE0;
  }
  uint64_t v27 = v19;
  uint64_t v115 = _swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  id v28 = [v98 secureElementIdentifiers];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100500F34(v30);
    swift_bridgeObjectRelease();
    v31.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v31.super.Class isa = 0;
  }
  id v32 = [v90 paymentApplicationsForSecureElementIdentifiers:v31.super.isa];

  if (!v32)
  {
LABEL_81:
    swift_release();
    uint64_t v87 = v97;
    _Block_release(v97);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    __break(1u);
    return;
  }
  sub_1004DE1C0(0, &qword_100808300);
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v101 = v33;
  if (v33 >> 62) {
    goto LABEL_68;
  }
  uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v34)
  {
LABEL_69:
    unint64_t v73 = v101;
    swift_bridgeObjectRelease();
    unint64_t v74 = _swiftEmptySetSingleton;
    if (!_swiftEmptySetSingleton[2]) {
      goto LABEL_70;
    }
LABEL_62:
    uint64_t v75 = sub_1004EF0A4(v73, (SEL *)&selRef_applicationIdentifier);
    swift_bridgeObjectRelease();
    sub_100513974((uint64_t)v75);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v77 = (void *)swift_allocObject();
    uint64_t v78 = v95;
    v77[2] = sub_1004F4890;
    v77[3] = v78;
    v77[4] = v93;
    v77[5] = v74;
    aBlock[4] = (Swift::Int)sub_1004F4BCC;
    aBlock[5] = (Swift::Int)v77;
    aBlock[0] = (Swift::Int)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (Swift::Int)sub_10050105C;
    aBlock[3] = (Swift::Int)&unk_100757F28;
    os_log_type_t v79 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v80 = v98;
    [v98 appletCredentialsForAIDs:isa completion:v79];
    swift_release();
    _Block_release(v79);
    swift_release();
    swift_release();

    uint64_t v23 = v97;
    goto LABEL_77;
  }
LABEL_19:
  unint64_t v35 = 0;
  unint64_t v103 = v101 & 0xC000000000000001;
  uint64_t v100 = v101 & 0xFFFFFFFFFFFFFF8;
  unint64_t v99 = v101 + 32;
  os_log_type_t v106 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v102 = v34;
  do
  {
    if (v103)
    {
      id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v35 >= *(void *)(v100 + 16)) {
        goto LABEL_67;
      }
      id v36 = *(id *)(v99 + 8 * v35);
    }
    unint64_t v37 = v36;
    BOOL v38 = __OFADD__(v35, 1);
    unint64_t v39 = v35 + 1;
    if (v38) {
      goto LABEL_66;
    }
    id v40 = [v36 subcredentials];
    if (!v40) {
      goto LABEL_80;
    }
    unint64_t v41 = v40;
    unint64_t v105 = v39;
    uint64_t v42 = sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v43 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v107 = v42;
    if ((v43 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v43 = v116;
      uint64_t v110 = v117;
      uint64_t v44 = v118;
      uint64_t v45 = v119;
      unint64_t v46 = v120;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v47 = -1 << *(unsigned char *)(v43 + 32);
      uint64_t v48 = *(void *)(v43 + 56);
      uint64_t v110 = v43 + 56;
      uint64_t v49 = ~v47;
      uint64_t v50 = -v47;
      if (v50 < 64) {
        uint64_t v51 = ~(-1 << v50);
      }
      else {
        uint64_t v51 = -1;
      }
      unint64_t v46 = v51 & v48;
      uint64_t v44 = v49;
    }
    uint64_t v108 = v43 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v104 = v44;
    int64_t v109 = (unint64_t)(v44 + 64) >> 6;
    uint64_t v111 = v43;
    if (v43 < 0)
    {
LABEL_54:
      uint64_t v59 = __CocoaSet.Iterator.next()();
      if (!v59) {
        goto LABEL_20;
      }
      uint64_t v113 = v59;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v58 = (id)aBlock[0];
      swift_unknownObjectRelease();
      uint64_t v54 = v45;
      uint64_t v52 = v46;
      if (!v58) {
        goto LABEL_20;
      }
      goto LABEL_56;
    }
    while (v46)
    {
      uint64_t v52 = (v46 - 1) & v46;
      unint64_t v53 = __clz(__rbit64(v46)) | (v45 << 6);
      uint64_t v54 = v45;
LABEL_52:
      id v58 = *(id *)(*(void *)(v43 + 48) + 8 * v53);
      if (!v58) {
        goto LABEL_20;
      }
LABEL_56:
      if (((uint64_t (*)(void *, id))v27)(v37, v58))
      {
        unint64_t v112 = v52;
        id v60 = [v37 applicationIdentifier];
        if (!v60)
        {
          swift_release();
          NSString v84 = v97;
          _Block_release(v97);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          __break(1u);
LABEL_79:
          swift_release();
          id v85 = v97;
          _Block_release(v97);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          __break(1u);
LABEL_80:
          swift_release();
          id v86 = v97;
          _Block_release(v97);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          __break(1u);
          goto LABEL_81;
        }
        unint64_t v61 = v60;
        id v62 = v37;
        uint64_t v63 = v27;
        id v64 = v18;
        Swift::Int v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v67 = v66;

        id v68 = [v58 identifier];
        if (!v68) {
          goto LABEL_79;
        }
        id v69 = v68;
        Swift::Int v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v72 = v71;

        sub_10051202C(aBlock, v65, v67, v70, v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = v54;
        uint64_t v18 = v64;
        uint64_t v27 = v63;
        unint64_t v37 = v62;
        uint64_t v43 = v111;
        unint64_t v46 = v112;
        if (v111 < 0) {
          goto LABEL_54;
        }
      }
      else
      {

        uint64_t v45 = v54;
        unint64_t v46 = v52;
        if (v43 < 0) {
          goto LABEL_54;
        }
      }
    }
    int64_t v55 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      if (!v34) {
        goto LABEL_69;
      }
      goto LABEL_19;
    }
    if (v55 < v109)
    {
      unint64_t v56 = *(void *)(v110 + 8 * v55);
      uint64_t v54 = v45 + 1;
      if (v56) {
        goto LABEL_51;
      }
      uint64_t v54 = v45 + 2;
      if (v45 + 2 >= v109) {
        goto LABEL_20;
      }
      unint64_t v56 = *(void *)(v110 + 8 * v54);
      if (v56) {
        goto LABEL_51;
      }
      uint64_t v54 = v45 + 3;
      if (v45 + 3 >= v109) {
        goto LABEL_20;
      }
      unint64_t v56 = *(void *)(v110 + 8 * v54);
      if (v56) {
        goto LABEL_51;
      }
      uint64_t v54 = v45 + 4;
      if (v45 + 4 >= v109) {
        goto LABEL_20;
      }
      unint64_t v56 = *(void *)(v110 + 8 * v54);
      if (v56)
      {
LABEL_51:
        uint64_t v52 = (v56 - 1) & v56;
        unint64_t v53 = __clz(__rbit64(v56)) + (v54 << 6);
        goto LABEL_52;
      }
      uint64_t v57 = v45 + 5;
      while (v109 != v57)
      {
        unint64_t v56 = *(void *)(v110 + 8 * v57++);
        if (v56)
        {
          uint64_t v54 = v57 - 1;
          goto LABEL_51;
        }
      }
    }
LABEL_20:
    sub_1004DC1A8();

    unint64_t v35 = v105;
  }
  while (v105 != v102);
  unint64_t v73 = v101;
  swift_bridgeObjectRelease();
  unint64_t v74 = v115;
  if (v115[2]) {
    goto LABEL_62;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v94)
  {
    static Logger.auxiliaryCapability.getter();
    id v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      id v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "PDARRAliroSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)", v83, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v92);
    uint64_t v23 = v97;
    v97[2](v97, 2);
  }
  else
  {
    uint64_t v23 = v97;
    v97[2](v97, 1);
  }
  swift_release();
  swift_release();

LABEL_76:
  swift_release();
LABEL_77:
  _Block_release(v23);
  _Block_release(v23);
  _Block_release(v23);
  _Block_release(v23);
}

void sub_1004F2ED8(void *a1, void *a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v24 - v11;
  self;
  uint64_t v13 = (void *)swift_dynamicCastObjCClass();
  _Block_copy(a3);
  if (v13)
  {
    id v14 = a1;
    id v15 = [v13 type];
    if (v15 == (id)7)
    {
      uint64_t v16 = 130;
LABEL_9:
      _Block_copy(a3);
      sub_1004F2170(v16, 0, 0, a2, a3);
      _Block_release(a3);

      goto LABEL_16;
    }
    if (v15 == (id)8)
    {
      uint64_t v16 = 133;
      goto LABEL_9;
    }
    static Logger.auxiliaryCapability.getter();
    uint64_t v20 = v14;
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v25 = v20;
      *(_DWORD *)uint64_t v23 = 134217984;
      v24[1] = v23 + 4;
      id v26 = [v13 type];
      uint64_t v20 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "PDARRAliroSignatureProvider: Unknown requirement type: %lu", v23, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v21 = v20;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    a3[2](a3, 0);
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "PDARRAliroSignatureProvider: Mismatched requirement type", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    a3[2](a3, 0);
  }
LABEL_16:
  _Block_release(a3);
}

void sub_1004F322C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, const void *a5)
{
  uint64_t v94 = a3;
  uint64_t v93 = a1;
  uint64_t v92 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v92 - 8);
  uint64_t v8 = __chkstk_darwin(v92);
  uint64_t v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  os_log_type_t v89 = (char *)&v88 - v12;
  __chkstk_darwin(v11);
  id v14 = (char *)&v88 - v13;
  _Block_copy(a5);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1004E45D0;
  *(void *)(v16 + 24) = v15;
  uint64_t v95 = v16;
  _Block_copy(a5);
  _Block_copy(a5);
  _Block_copy(a5);
  NSString v97 = (void (**)(void, void, void))a5;
  _Block_copy(a5);
  uint64_t v96 = v15;
  swift_retain();
  id v98 = [a4 secureElement];
  if (!v98)
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "PDARRAliroSignatureProvider: Missing secure element", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v14, v92);
    uint64_t v23 = v97;
    v97[2](v97, 0, 0);
    swift_release();
    goto LABEL_76;
  }
  id v90 = [a4 pass];
  if (!v90)
  {
    if (v94)
    {
      static Logger.auxiliaryCapability.getter();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        id v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "PDARRAliroSignatureProvider: No existing key materials for requirement (pass doesn't exist)", v26, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v91 + 8))(v10, v92);
      uint64_t v23 = v97;
      v97[2](v97, 2, 0);
    }
    else
    {
      uint64_t v23 = v97;
      v97[2](v97, 0, 0);
    }
    swift_release();
    swift_release();

    goto LABEL_77;
  }
  uint64_t v17 = v94;
  if (v94)
  {
    os_log_type_t v18 = (void *)swift_allocObject();
    void v18[2] = v93;
    v18[3] = a2;
    void v18[4] = v17;
    uint64_t v19 = sub_1004F47E0;
  }
  else
  {
    os_log_type_t v18 = (void *)swift_allocObject();
    void v18[2] = v93;
    uint64_t v19 = sub_1004F4824;
  }
  uint64_t v27 = (uint64_t (*)(void, void))v19;
  uint64_t v115 = _swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  id v28 = [v98 secureElementIdentifiers];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100500F34(v30);
    swift_bridgeObjectRelease();
    v31.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v31.super.Class isa = 0;
  }
  id v32 = [v90 paymentApplicationsForSecureElementIdentifiers:v31.super.isa];

  if (!v32)
  {
LABEL_81:
    swift_release();
    uint64_t v87 = v97;
    _Block_release(v97);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    __break(1u);
    return;
  }
  sub_1004DE1C0(0, &qword_100808300);
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v101 = v33;
  if (v33 >> 62) {
    goto LABEL_68;
  }
  uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v34)
  {
LABEL_69:
    unint64_t v73 = v101;
    swift_bridgeObjectRelease();
    unint64_t v74 = _swiftEmptySetSingleton;
    if (!_swiftEmptySetSingleton[2]) {
      goto LABEL_70;
    }
LABEL_62:
    uint64_t v75 = sub_1004EF0A4(v73, (SEL *)&selRef_applicationIdentifier);
    swift_bridgeObjectRelease();
    sub_100513974((uint64_t)v75);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v77 = (void *)swift_allocObject();
    uint64_t v78 = v95;
    v77[2] = sub_1004F47B8;
    v77[3] = v78;
    v77[4] = v93;
    v77[5] = v74;
    aBlock[4] = (Swift::Int)sub_1004F47F0;
    aBlock[5] = (Swift::Int)v77;
    aBlock[0] = (Swift::Int)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (Swift::Int)sub_10050105C;
    aBlock[3] = (Swift::Int)&unk_100757E38;
    os_log_type_t v79 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v80 = v98;
    [v98 appletCredentialsForAIDs:isa completion:v79];
    swift_release();
    _Block_release(v79);
    swift_release();
    swift_release();

    uint64_t v23 = v97;
    goto LABEL_77;
  }
LABEL_19:
  unint64_t v35 = 0;
  unint64_t v103 = v101 & 0xC000000000000001;
  uint64_t v100 = v101 & 0xFFFFFFFFFFFFFF8;
  unint64_t v99 = v101 + 32;
  os_log_type_t v106 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v102 = v34;
  do
  {
    if (v103)
    {
      id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v35 >= *(void *)(v100 + 16)) {
        goto LABEL_67;
      }
      id v36 = *(id *)(v99 + 8 * v35);
    }
    unint64_t v37 = v36;
    BOOL v38 = __OFADD__(v35, 1);
    unint64_t v39 = v35 + 1;
    if (v38) {
      goto LABEL_66;
    }
    id v40 = [v36 subcredentials];
    if (!v40) {
      goto LABEL_80;
    }
    unint64_t v41 = v40;
    unint64_t v105 = v39;
    uint64_t v42 = sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v43 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v107 = v42;
    if ((v43 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v43 = v116;
      uint64_t v110 = v117;
      uint64_t v44 = v118;
      uint64_t v45 = v119;
      unint64_t v46 = v120;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v47 = -1 << *(unsigned char *)(v43 + 32);
      uint64_t v48 = *(void *)(v43 + 56);
      uint64_t v110 = v43 + 56;
      uint64_t v49 = ~v47;
      uint64_t v50 = -v47;
      if (v50 < 64) {
        uint64_t v51 = ~(-1 << v50);
      }
      else {
        uint64_t v51 = -1;
      }
      unint64_t v46 = v51 & v48;
      uint64_t v44 = v49;
    }
    uint64_t v108 = v43 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v104 = v44;
    int64_t v109 = (unint64_t)(v44 + 64) >> 6;
    uint64_t v111 = v43;
    if (v43 < 0)
    {
LABEL_54:
      uint64_t v59 = __CocoaSet.Iterator.next()();
      if (!v59) {
        goto LABEL_20;
      }
      uint64_t v113 = v59;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v58 = (id)aBlock[0];
      swift_unknownObjectRelease();
      uint64_t v54 = v45;
      uint64_t v52 = v46;
      if (!v58) {
        goto LABEL_20;
      }
      goto LABEL_56;
    }
    while (v46)
    {
      uint64_t v52 = (v46 - 1) & v46;
      unint64_t v53 = __clz(__rbit64(v46)) | (v45 << 6);
      uint64_t v54 = v45;
LABEL_52:
      id v58 = *(id *)(*(void *)(v43 + 48) + 8 * v53);
      if (!v58) {
        goto LABEL_20;
      }
LABEL_56:
      if (v27(v37, v58))
      {
        unint64_t v112 = v52;
        id v60 = [v37 applicationIdentifier];
        if (!v60)
        {
          swift_release();
          NSString v84 = v97;
          _Block_release(v97);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          __break(1u);
LABEL_79:
          swift_release();
          id v85 = v97;
          _Block_release(v97);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          __break(1u);
LABEL_80:
          swift_release();
          id v86 = v97;
          _Block_release(v97);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          __break(1u);
          goto LABEL_81;
        }
        unint64_t v61 = v60;
        id v62 = v37;
        uint64_t v63 = v27;
        id v64 = v18;
        Swift::Int v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v67 = v66;

        id v68 = [v58 identifier];
        if (!v68) {
          goto LABEL_79;
        }
        id v69 = v68;
        Swift::Int v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v72 = v71;

        sub_10051202C(aBlock, v65, v67, v70, v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v45 = v54;
        os_log_type_t v18 = v64;
        uint64_t v27 = v63;
        unint64_t v37 = v62;
        uint64_t v43 = v111;
        unint64_t v46 = v112;
        if (v111 < 0) {
          goto LABEL_54;
        }
      }
      else
      {

        uint64_t v45 = v54;
        unint64_t v46 = v52;
        if (v43 < 0) {
          goto LABEL_54;
        }
      }
    }
    int64_t v55 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      if (!v34) {
        goto LABEL_69;
      }
      goto LABEL_19;
    }
    if (v55 < v109)
    {
      unint64_t v56 = *(void *)(v110 + 8 * v55);
      uint64_t v54 = v45 + 1;
      if (v56) {
        goto LABEL_51;
      }
      uint64_t v54 = v45 + 2;
      if (v45 + 2 >= v109) {
        goto LABEL_20;
      }
      unint64_t v56 = *(void *)(v110 + 8 * v54);
      if (v56) {
        goto LABEL_51;
      }
      uint64_t v54 = v45 + 3;
      if (v45 + 3 >= v109) {
        goto LABEL_20;
      }
      unint64_t v56 = *(void *)(v110 + 8 * v54);
      if (v56) {
        goto LABEL_51;
      }
      uint64_t v54 = v45 + 4;
      if (v45 + 4 >= v109) {
        goto LABEL_20;
      }
      unint64_t v56 = *(void *)(v110 + 8 * v54);
      if (v56)
      {
LABEL_51:
        uint64_t v52 = (v56 - 1) & v56;
        unint64_t v53 = __clz(__rbit64(v56)) + (v54 << 6);
        goto LABEL_52;
      }
      uint64_t v57 = v45 + 5;
      while (v109 != v57)
      {
        unint64_t v56 = *(void *)(v110 + 8 * v57++);
        if (v56)
        {
          uint64_t v54 = v57 - 1;
          goto LABEL_51;
        }
      }
    }
LABEL_20:
    sub_1004DC1A8();

    unint64_t v35 = v105;
  }
  while (v105 != v102);
  unint64_t v73 = v101;
  swift_bridgeObjectRelease();
  unint64_t v74 = v115;
  if (v115[2]) {
    goto LABEL_62;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v94)
  {
    static Logger.auxiliaryCapability.getter();
    id v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      id v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "PDARRAliroSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)", v83, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v92);
    uint64_t v23 = v97;
    v97[2](v97, 2, 0);
  }
  else
  {
    uint64_t v23 = v97;
    v97[2](v97, 1, 0);
  }
  swift_release();
  swift_release();

LABEL_76:
  swift_release();
LABEL_77:
  _Block_release(v23);
  _Block_release(v23);
  _Block_release(v23);
  _Block_release(v23);
}

void sub_1004F3FA0(void *a1, void *a2, void (**a3)(void, void, void))
{
  uint64_t v55 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v55 - 8);
  uint64_t v7 = __chkstk_darwin(v55);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v55 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v55 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v18 = (char *)&v55 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v55 - v19;
  self;
  os_log_type_t v21 = (void *)swift_dynamicCastObjCClass();
  _Block_copy(a3);
  if (!v21)
  {
    static Logger.auxiliaryCapability.getter();
    NSArray v31 = Logger.logObject.getter();
    uint64_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, (os_log_type_t)v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "PDARRAliroSignatureProvider: Mismatched requirement type", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v55);
    a3[2](a3, 0, 0);
    goto LABEL_20;
  }
  os_log_type_t v22 = a1;
  id v23 = [v21 type];
  if (v23 != (id)7)
  {
    if (v23 == (id)8)
    {
      id v24 = [v21 keyCreationMetadata];
      if (v24)
      {
        os_log_type_t v25 = v24;
        id v26 = [v24 signatureAliroHome];

        if (v26)
        {
          id v27 = [v26 readerIdentifier];
          if (v27)
          {
            id v28 = v27;
            id v29 = [v27 hexEncoding];

            if (v29)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)();

              Swift::String v30 = String.uppercased()();
              swift_bridgeObjectRelease();

              _Block_copy(a3);
              sub_1004F322C(133, v30._countAndFlagsBits, (uint64_t)v30._object, a2, a3);
              _Block_release(a3);
              swift_bridgeObjectRelease();
              goto LABEL_18;
            }
          }
          else
          {
            _Block_release(a3);
            _Block_release(a3);
            __break(1u);
          }
          _Block_release(a3);
          _Block_release(a3);
          __break(1u);
          goto LABEL_40;
        }
      }
      static Logger.auxiliaryCapability.getter();
      os_log_type_t v22 = v22;
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 134217984;
        id v56 = [v21 type];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v43, v44, "PDARRAliroSignatureProvider: Missing key creation metadata for requirement type: %lu", v45, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v43 = v22;
      }
      uint64_t v53 = v55;

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v53);
    }
    else
    {
      static Logger.auxiliaryCapability.getter();
      os_log_type_t v22 = v22;
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 134217984;
        id v56 = [v21 type];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v40, v41, "PDARRAliroSignatureProvider: Unknown requirement type: %lu", v42, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        id v40 = v22;
      }
      uint64_t v49 = v55;

      (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v49);
    }
LABEL_37:
    a3[2](a3, 0, 0);

LABEL_20:
    _Block_release(a3);
    return;
  }
  if ((PKAuxiliaryCapabilityHydraAliroEnabled() & 1) == 0)
  {
    static Logger.auxiliaryCapability.getter();
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "PDARRAliroSignatureProvider: Disabled", v48, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v55);
    goto LABEL_37;
  }
  id v34 = [v21 keyCreationMetadata];
  if (!v34
    || (unint64_t v35 = v34,
        id v36 = [v34 signatureAliroHydra],
        v35,
        !v36))
  {
    static Logger.auxiliaryCapability.getter();
    os_log_type_t v22 = v22;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 134217984;
      id v56 = [v21 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v50, v51, "PDARRAliroSignatureProvider: Missing key creation metadata for requirement type: %lu", v52, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v50 = v22;
    }
    uint64_t v54 = v55;

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v54);
    goto LABEL_37;
  }
  id v37 = [v36 readerIdentifier];
  if (!v37)
  {
LABEL_40:
    _Block_release(a3);
    _Block_release(a3);
    __break(1u);
    goto LABEL_41;
  }
  BOOL v38 = v37;
  id v39 = [v37 hexEncoding];

  if (v39)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    String.uppercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3[2](a3, 2, 0);

LABEL_18:
    goto LABEL_20;
  }
LABEL_41:
  _Block_release(a3);
  _Block_release(a3);
  __break(1u);
}

uint64_t sub_1004F4780()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004F47B8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1004F47E0(void *a1, void *a2)
{
  return sub_1004F00AC(a1, a2, *(id *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void sub_1004F47F0(uint64_t a1, void *a2)
{
  sub_1004F0174(a1, a2, *(void (**)(void, void))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1004F47FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004F480C()
{
  return swift_release();
}

uint64_t sub_1004F4814()
{
  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_1004F4824(void *a1)
{
  id v2 = *(id *)(v1 + 16);
  return [a1 paymentNetworkIdentifier] == v2;
}

uint64_t sub_1004F4858()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004F4890()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1004F48B8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004F48F4()
{
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004F4934()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004F4944(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  sub_1004EF73C(a1, a2, a3, a4, a5, a6, a7, *(void (**)(void, void, void))(v7 + 16), *(void **)(v7 + 24));
}

void sub_1004F496C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  sub_1004EF300(a1, a2, a3, a4, a5, a6, *(void (**)(void, void, void))(v6 + 16));
}

uint64_t destroy for PDARRAliroSignatureProvider.IdentifierPair()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PDARRAliroSignatureProvider.IdentifierPair(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PDARRAliroSignatureProvider.IdentifierPair(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PDARRAliroSignatureProvider.IdentifierPair(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for PDARRAliroSignatureProvider.IdentifierPair(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PDARRAliroSignatureProvider.IdentifierPair(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PDARRAliroSignatureProvider.IdentifierPair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PDARRAliroSignatureProvider.IdentifierPair()
{
  return &type metadata for PDARRAliroSignatureProvider.IdentifierPair;
}

unint64_t sub_1004F4B50()
{
  unint64_t result = qword_100808318;
  if (!qword_100808318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100808318);
  }
  return result;
}

void sub_1004F4BE8(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6 = *(void (**)(id, id, uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_retain();
  id v10 = a2;
  id v9 = a3;
  v6(v10, v9, sub_1004F8470, v8);
  swift_release();
  swift_release();
}

void sub_1004F4CBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, id, uint64_t))(a1 + 32);
  swift_retain();
  id v8 = a3;
  swift_unknownObjectRetain();
  v7(a2, v8, a4);
  swift_release();
  swift_unknownObjectRelease();
}

id ProvisioningRequirementsChecker.__allocating_init(webService:cloudStoreCoordinator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[OBJC_IVAR___PDProvisioningRequirementsChecker_webService] = a1;
  *(void *)&v5[OBJC_IVAR___PDProvisioningRequirementsChecker_cloudStoreCoordinator] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

id ProvisioningRequirementsChecker.init(webService:cloudStoreCoordinator:)(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR___PDProvisioningRequirementsChecker_webService] = a1;
  *(void *)&v2[OBJC_IVAR___PDProvisioningRequirementsChecker_cloudStoreCoordinator] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ProvisioningRequirementsChecker();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for ProvisioningRequirementsChecker()
{
  return self;
}

uint64_t ProvisioningRequirementsChecker.meets(requirementsContainer:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [a1 provisioningSID];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  uint64_t v10 = PKProvisioningRequirementsContainer.requirements.getter();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  swift_retain();
  ProvisioningRequirementsChecker.meets(requirements:sid:completion:)(v10, v7, v9, (uint64_t)sub_1004F507C, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_1004F4F98(char a1, uint64_t a2, void (*a3)(void))
{
  if (*(void *)(a2 + 16))
  {
    sub_1004DE1C0(0, &qword_100808368);
    swift_bridgeObjectRetain();
    uint64_t v5 = PKProvisioningRequirementsContainer.init(requirements:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  a3(a1 & 1);
}

uint64_t sub_1004F5044()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1004F507C(char a1, uint64_t a2)
{
  sub_1004F4F98(a1, a2, *(void (**)(void))(v2 + 16));
}

void ProvisioningRequirementsChecker.meets(requirements:sid:completion:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a5;
  uint64_t v52 = a4;
  uint64_t v8 = type metadata accessor for ProvisioningRequirement();
  unint64_t v69 = *(void *)(v8 - 8);
  unint64_t v9 = *(void (**)(void, void, void))(v69 + 64);
  __chkstk_darwin(v8);
  id v68 = (void *)type metadata accessor for Logger();
  uint64_t v10 = *(v68 - 1);
  __chkstk_darwin(v68);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.Provisioning.add.getter();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  LODWORD(v67) = v14;
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v71 = a2;
  uint64_t v66 = v8;
  os_log_type_t v51 = (char *)&v50 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v15)
  {
    uint64_t v16 = swift_slowAlloc();
    Swift::Int v65 = v9;
    uint64_t v17 = v16;
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v72 = sub_1004F7DDC(a2, a3, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v64 = v17 + 14;
    swift_bridgeObjectRetain();
    uint64_t v18 = Array.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v72 = sub_1004F7DDC(v18, v20, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v67, "[%s] Checking provisioning requirements: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v9 = v65;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, void *))(v10 + 8))(v12, v68);
  os_log_type_t v21 = *(void **)&v70[OBJC_IVAR___PDProvisioningRequirementsChecker_webService];
  id v22 = objc_allocWithZone((Class)type metadata accessor for LocalProvisioningRequirementsChecker());
  id v23 = v21;
  id v24 = (void *)LocalProvisioningRequirementsChecker.init(webService:)();
  os_log_type_t v25 = [objc_allocWithZone((Class)PKAsyncUnaryOperationComposer) init];
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = _swiftEmptyArrayStorage;
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = v54;
  if (v26)
  {
    unint64_t v29 = v69 + 16;
    id v28 = *(void (**)(void, void, void))(v69 + 16);
    uint64_t v30 = *(unsigned __int8 *)(v69 + 80);
    uint64_t v31 = a1;
    uint64_t v32 = a1 + ((v30 + 32) & ~v30);
    uint64_t v64 = *(void *)(v69 + 72);
    Swift::Int v65 = v28;
    uint64_t v62 = v30 | 7;
    uint64_t v63 = (v30 + 16) & ~v30;
    unint64_t v61 = ((unint64_t)v9 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v60 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v59 = (v60 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v58 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v57 = v58 + 8;
    unint64_t v69 = a3;
    id v56 = (void (**)(uint64_t, char *, uint64_t))(v29 + 16);
    uint64_t v55 = &v75;
    uint64_t v50 = v31;
    swift_bridgeObjectRetain();
    Swift::Int v67 = v24;
    id v68 = v25;
    unint64_t v33 = v51;
    uint64_t v34 = v53;
    unint64_t v36 = v69;
    unint64_t v35 = v70;
    id v37 = v67;
    do
    {
      uint64_t v38 = v66;
      v65(v33, v32, v66);
      uint64_t v39 = swift_allocObject();
      (*v56)(v39 + v63, v33, v38);
      *(void *)(v39 + v61) = v35;
      id v40 = (uint64_t *)(v39 + v60);
      uint64_t *v40 = v71;
      v40[1] = v36;
      *(void *)(v39 + v59) = v34;
      *(void *)(v39 + v58) = v37;
      uint64_t v77 = sub_1004F6388;
      uint64_t v78 = (void *)v39;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v74 = 1107296256;
      uint64_t v75 = sub_1004F4BE8;
      os_log_type_t v76 = &unk_100758160;
      os_log_type_t v41 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      id v42 = v35;
      swift_retain();
      id v43 = v37;
      swift_release();
      [v68 addOperation:v41];
      _Block_release(v41);
      v32 += v64;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = v54;
    os_log_type_t v25 = v68;
    a3 = v69;
    id v24 = v67;
  }
  id v44 = [objc_allocWithZone((Class)NSNull) init];
  uint64_t v45 = (void *)swift_allocObject();
  uint64_t v46 = v71;
  void v45[2] = v53;
  v45[3] = v46;
  uint64_t v47 = v52;
  void v45[4] = a3;
  v45[5] = v47;
  v45[6] = v27;
  uint64_t v77 = sub_1004F7CEC;
  uint64_t v78 = v45;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v74 = 1107296256;
  uint64_t v75 = sub_1004F4CBC;
  os_log_type_t v76 = &unk_1007581B0;
  uint64_t v48 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  id v49 = [v25 evaluateWithInput:v44 completion:v48];
  _Block_release(v48);

  swift_release();
  swift_unknownObjectRelease();
}

uint64_t sub_1004F58D4()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004F590C(uint64_t a1, void *a2, void (*a3)(void *, void), uint64_t a4, uint64_t a5, char *a6, void *a7, void *a8, uint64_t a9, char *a10)
{
  uint64_t v96 = a2;
  id v97 = a8;
  id v93 = a7;
  uint64_t v94 = a3;
  uint64_t v95 = a4;
  uint64_t v12 = type metadata accessor for ProvisioningRequirement();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v91 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v92 = (char *)&v89 - v17;
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v89 - v18;
  uint64_t v20 = type metadata accessor for ProvisioningRequirement.RequirementType();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  id v23 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  ProvisioningRequirement.type.getter();
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v23, v20);
  uint64_t v98 = a9;
  if (v24 == enum case for ProvisioningRequirement.RequirementType.manatee(_:))
  {
    uint64_t v92 = *(char **)&a6[OBJC_IVAR___PDProvisioningRequirementsChecker_cloudStoreCoordinator];
    uint64_t v91 = (char *)(id)PKCurrentCloudStoreApplePayContainerName();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v19, a5, v12);
    unint64_t v25 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v26 = (v14 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
    id v28 = (char *)swift_allocObject();
    id v29 = v97;
    *((void *)v28 + 2) = v93;
    *((void *)v28 + 3) = v29;
    *((void *)v28 + 4) = a9;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v28[v25], v19, v12);
    uint64_t v30 = &v28[v26];
    uint64_t v31 = v95;
    *(void *)uint64_t v30 = v94;
    *((void *)v30 + 1) = v31;
    uint64_t v32 = v96;
    *(void *)&v28[v27] = v96;
    *(void *)&v28[(v27 + 15) & 0xFFFFFFFFFFFFFFF8] = a6;
    unint64_t v103 = sub_1004F8924;
    uint64_t v104 = v28;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v100 = 1107296256;
    unint64_t v101 = sub_1004F6C54;
    uint64_t v102 = &unk_100758340;
    unint64_t v33 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v34 = v32;
    unint64_t v35 = a6;
    swift_release();
    unint64_t v36 = v91;
    [v92 cloudStoreStatusForContainer:v91 completion:v33];
LABEL_20:
    _Block_release(v33);

    return;
  }
  uint64_t v90 = a5;
  uint64_t v37 = v13;
  if (v24 == enum case for ProvisioningRequirement.RequirementType.applePayManateeSetup(_:))
  {
    uint64_t v38 = v19;
    id v97 = (id)PKCurrentCloudStoreApplePayContainerName();
    if (v97)
    {
      uint64_t v39 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v91 = v40;
      uint64_t v92 = v39;
    }
    else
    {
      uint64_t v91 = 0;
      uint64_t v92 = 0;
    }
    os_log_type_t v51 = a6;
    id v93 = *(id *)&a6[OBJC_IVAR___PDProvisioningRequirementsChecker_cloudStoreCoordinator];
    uint64_t v52 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v38, v90, v12);
    unint64_t v53 = (*(unsigned __int8 *)(v37 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    unint64_t v54 = (v14 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = v38;
    unint64_t v56 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = v98;
    (*(void (**)(unint64_t, char *, uint64_t))(v52 + 32))(v58 + v53, v55, v12);
    unint64_t v59 = (void *)(v58 + v54);
    uint64_t v60 = v95;
    *unint64_t v59 = v94;
    v59[1] = v60;
    unint64_t v61 = v96;
    *(void *)(v58 + v56) = v96;
    *(void *)(v58 + v57) = v51;
    uint64_t v62 = (char **)(v58 + ((v57 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v63 = v91;
    *uint64_t v62 = v92;
    v62[1] = v63;
    unint64_t v103 = sub_1004F872C;
    uint64_t v104 = (void *)v58;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v100 = 1107296256;
    unint64_t v101 = sub_10050803C;
    uint64_t v102 = &unk_1007582F0;
    unint64_t v33 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    id v64 = v61;
    id v65 = v51;
    swift_release();
    unint64_t v36 = (char *)v97;
    [v93 setupCloudDatabaseForContainerName:v97 completion:v33];
    goto LABEL_20;
  }
  uint64_t v41 = v98;
  id v42 = (unint64_t *)(v98 + 16);
  if (v24 == enum case for ProvisioningRequirement.RequirementType.secureElementCredentialsAvailable(_:))
  {
    unsigned __int8 v43 = [self isSupported];
    id v44 = v96;
    if (v43)
    {
LABEL_14:
      uint64_t v50 = v44;
LABEL_17:
      v94(v50, 0);
      return;
    }
    uint64_t v45 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v92, v90, v12);
    swift_beginAccess();
    unint64_t v46 = *v42;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *id v42 = v46;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v46 = sub_100511864(0, *(void *)(v46 + 16) + 1, 1, v46);
      *id v42 = v46;
    }
    unint64_t v49 = *(void *)(v46 + 16);
    unint64_t v48 = *(void *)(v46 + 24);
    if (v49 >= v48 >> 1)
    {
      unint64_t v46 = sub_100511864(v48 > 1, v49 + 1, 1, v46);
      *id v42 = v46;
    }
    *(void *)(v46 + 16) = v49 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v46+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v49, v45, v12);
LABEL_13:
    swift_endAccess();
    goto LABEL_14;
  }
  if (v24 == enum case for ProvisioningRequirement.RequirementType.automaticSoftwareUpdates(_:))
  {
    uint64_t v50 = v96;
    goto LABEL_17;
  }
  if (v24 == enum case for ProvisioningRequirement.RequirementType.bluetoothSpaceAvailable(_:))
  {
    uint64_t v66 = v98;
    unint64_t v36 = (char *)[objc_allocWithZone((Class)PKSecureElement) init];
    uint64_t v67 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v19, v90, v12);
    unint64_t v68 = (*(unsigned __int8 *)(v37 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    unint64_t v69 = (v14 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v70 = (v69 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = v66;
    (*(void (**)(unint64_t, char *, uint64_t))(v67 + 32))(v71 + v68, v19, v12);
    uint64_t v72 = (void *)(v71 + v69);
    uint64_t v73 = v95;
    void *v72 = v94;
    v72[1] = v73;
    uint64_t v74 = v96;
    *(void *)(v71 + v70) = v96;
    unint64_t v103 = sub_1004F8544;
    uint64_t v104 = (void *)v71;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v100 = 1107296256;
    unint64_t v101 = sub_1004F75E8;
    uint64_t v102 = &unk_1007582A0;
    unint64_t v33 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    id v75 = v74;
    swift_release();
    [v36 allAppletsAndCredentialsWithCompletion:v33];
    goto LABEL_20;
  }
  if (v24 == enum case for ProvisioningRequirement.RequirementType.bluetoothUWBAvailable(_:))
  {
    uint64_t v76 = PKRadioTechnologyForConfigurationTechnology();
    id v44 = v96;
    if (v76) {
      goto LABEL_14;
    }
    uint64_t v77 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v91, v90, v12);
    swift_beginAccess();
    unint64_t v78 = *v42;
    char v79 = swift_isUniquelyReferenced_nonNull_native();
    *id v42 = v78;
    if ((v79 & 1) == 0)
    {
      unint64_t v78 = sub_100511864(0, *(void *)(v78 + 16) + 1, 1, v78);
      *id v42 = v78;
    }
    unint64_t v81 = *(void *)(v78 + 16);
    unint64_t v80 = *(void *)(v78 + 24);
    if (v81 >= v80 >> 1)
    {
      unint64_t v78 = sub_100511864(v80 > 1, v81 + 1, 1, v78);
      *id v42 = v78;
    }
    *(void *)(v78 + 16) = v81 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v78+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v81, v77, v12);
    goto LABEL_13;
  }
  uint64_t v92 = a10;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v19, v90, v12);
  unint64_t v82 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v83 = (v14 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v91 = (char *)((v83 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = v41;
  (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v84 + v82, v19, v12);
  id v85 = (void *)(v84 + v83);
  uint64_t v86 = v95;
  *id v85 = v94;
  v85[1] = v86;
  uint64_t v87 = v96;
  *(void *)&v91[v84] = v96;
  swift_retain();
  swift_retain();
  id v88 = v87;
  dispatch thunk of LocalProvisioningRequirementsChecker.meets(requirement:sid:completion:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
}

uint64_t sub_1004F62A0()
{
  uint64_t v1 = type metadata accessor for ProvisioningRequirement();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v7 + 8, v5);
}

void sub_1004F6388(uint64_t a1, void *a2, void (*a3)(void *, void), uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1004F590C(a1, a2, a3, a4, v4 + v10, *(char **)(v4 + v11), *(void **)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(char **)(v4 + ((((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1004F6474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004F6484()
{
  return swift_release();
}

uint64_t sub_1004F648C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void *, void), uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v54 = a6;
  uint64_t v55 = a8;
  uint64_t v53 = a7;
  uint64_t v49 = a4;
  uint64_t v56 = a9;
  uint64_t v14 = type metadata accessor for ProvisioningRequirement();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v52 = (char *)&v49 - v19;
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v50 = *(void *)(v20 - 8);
  uint64_t v51 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v57 = a10;
  if (!a1)
  {
    uint64_t v58 = swift_allocObject();
    goto LABEL_6;
  }
  uint64_t v23 = v14;
  unsigned __int8 v24 = objc_msgSend(a1, "supportsDeviceToDeviceEncryption", v49);
  unsigned __int8 v25 = [a1 needsToVerifyTerms];
  uint64_t v58 = swift_allocObject();
  if (v24)
  {
    if (v25)
    {
      uint64_t v14 = v23;
LABEL_6:
      *(unsigned char *)(v58 + 16) = 0;
LABEL_8:
      static Logger.Provisioning.add.getter();
      swift_bridgeObjectRetain_n();
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        id v28 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)id v28 = 136315138;
        swift_bridgeObjectRetain();
        void aBlock[6] = sub_1004F7DDC(v49, a5, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%s] User needs to verify iCloud T&Cs", v28, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v50 + 8))(v22, v51);
      goto LABEL_12;
    }
    *(unsigned char *)(v58 + 16) = a3 == 0;
    uint64_t v14 = v23;
    if (!a3)
    {
      uint64_t v36 = v54;
      uint64_t v37 = *(void **)(a11 + OBJC_IVAR___PDProvisioningRequirementsChecker_cloudStoreCoordinator);
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v53, v14);
      unint64_t v38 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v39 = v16 + v38 + 7;
      uint64_t v40 = v14;
      unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v42 = ((v39 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v58;
      *(void *)(v43 + 24) = v36;
      (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v43 + v38, v18, v40);
      id v44 = (void *)(v43 + v41);
      uint64_t v45 = v56;
      *id v44 = v55;
      v44[1] = v45;
      unint64_t v46 = v57;
      *(void *)(v43 + v42) = v57;
      aBlock[4] = (uint64_t)sub_1004F8B14;
      aBlock[5] = v43;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10050803C;
      aBlock[3] = (uint64_t)&unk_1007583B8;
      uint64_t v47 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      id v48 = v46;
      swift_release();
      [v37 checkTLKsMissingWithCompletion:v47];
      _Block_release(v47);
      return swift_release();
    }
  }
  else
  {
    *(unsigned char *)(v58 + 16) = 0;
    uint64_t v14 = v23;
    if (v25) {
      goto LABEL_8;
    }
  }
LABEL_12:
  id v29 = (unint64_t *)(v54 + 16);
  uint64_t v30 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v52, v53, v14);
  swift_beginAccess();
  unint64_t v31 = *v29;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v29 = v31;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v31 = sub_100511864(0, *(void *)(v31 + 16) + 1, 1, v31);
    unint64_t *v29 = v31;
  }
  unint64_t v34 = *(void *)(v31 + 16);
  unint64_t v33 = *(void *)(v31 + 24);
  if (v34 >= v33 >> 1)
  {
    unint64_t v31 = sub_100511864(v33 > 1, v34 + 1, 1, v31);
    unint64_t *v29 = v31;
  }
  *(void *)(v31 + 16) = v34 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v31+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v34, v30, v14);
  swift_endAccess();
  v55(v57, 0);
  return swift_release();
}

uint64_t sub_1004F6A3C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void), uint64_t a7, uint64_t a8)
{
  unint64_t v26 = a6;
  uint64_t v14 = type metadata accessor for ProvisioningRequirement();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (BOOL *)(a3 + 16);
  if (a1)
  {
    swift_beginAccess();
    *uint64_t v18 = 0;
  }
  else
  {
    swift_beginAccess();
    *uint64_t v18 = a2 == 0;
    if (!a2) {
      return v26(a8, 0);
    }
  }
  uint64_t v19 = (unint64_t *)(a4 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a5, v14);
  swift_beginAccess();
  unint64_t v20 = *v19;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v19 = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v20 = sub_100511864(0, *(void *)(v20 + 16) + 1, 1, v20);
    *uint64_t v19 = v20;
  }
  unint64_t v23 = *(void *)(v20 + 16);
  unint64_t v22 = *(void *)(v20 + 24);
  if (v23 >= v22 >> 1)
  {
    unint64_t v20 = sub_100511864(v22 > 1, v23 + 1, 1, v20);
    *uint64_t v19 = v20;
  }
  *(void *)(v20 + 16) = v23 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v23, v17, v14);
  swift_endAccess();
  return v26(a8, 0);
}

void sub_1004F6C54(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unint64_t v7 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a2;
  id v8 = a4;
  v7(a2, a3, a4);
  swift_release();
}

void sub_1004F6CE8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, void), uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  unint64_t v38 = a5;
  uint64_t v15 = type metadata accessor for ProvisioningRequirement();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v37 - v20;
  if ((a1 & 1) == 0 || a2)
  {
    unsigned __int8 v24 = (unint64_t *)(a3 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v37 - v20, a4, v15);
    swift_beginAccess();
    unint64_t v25 = *v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unsigned __int8 v24 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v25 = sub_100511864(0, *(void *)(v25 + 16) + 1, 1, v25);
      *unsigned __int8 v24 = v25;
    }
    unint64_t v28 = *(void *)(v25 + 16);
    unint64_t v27 = *(void *)(v25 + 24);
    if (v28 >= v27 >> 1)
    {
      unint64_t v25 = sub_100511864(v27 > 1, v28 + 1, 1, v25);
      *unsigned __int8 v24 = v25;
    }
    *(void *)(v25 + 16) = v28 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v25+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v28, v21, v15);
    swift_endAccess();
    v38(v40, 0);
  }
  else
  {
    unint64_t v22 = *(void **)(a8 + OBJC_IVAR___PDProvisioningRequirementsChecker_cloudStoreCoordinator);
    if (a10) {
      NSString v23 = String._bridgeToObjectiveC()();
    }
    else {
      NSString v23 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a4, v15);
    unint64_t v29 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    unint64_t v30 = (v17 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = a3;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v31 + v29, v19, v15);
    uint64_t v32 = (void *)(v31 + v30);
    uint64_t v33 = v39;
    *uint64_t v32 = v38;
    v32[1] = v33;
    unint64_t v34 = v40;
    *(void *)(v31 + ((v30 + 23) & 0xFFFFFFFFFFFFFFF8)) = v40;
    aBlock[4] = sub_1004F8CD4;
    aBlock[5] = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004F6C54;
    aBlock[3] = &unk_100758408;
    unint64_t v35 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    id v36 = v34;
    swift_release();
    [v22 cloudStoreStatusForContainer:v23 completion:v35];
    _Block_release(v35);
  }
}

uint64_t sub_1004F703C(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void), uint64_t a7, uint64_t a8)
{
  unint64_t v25 = a6;
  uint64_t v14 = type metadata accessor for ProvisioningRequirement();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1
    || ([a1 supportsDeviceToDeviceEncryption] ? (BOOL v18 = a3 == 0) : (BOOL v18 = 0),
        !v18 || (a2 & 1) == 0))
  {
    uint64_t v19 = (unint64_t *)(a4 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a5, v14);
    swift_beginAccess();
    unint64_t v20 = *v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v19 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v20 = sub_100511864(0, *(void *)(v20 + 16) + 1, 1, v20);
      *uint64_t v19 = v20;
    }
    unint64_t v23 = *(void *)(v20 + 16);
    unint64_t v22 = *(void *)(v20 + 24);
    if (v23 >= v22 >> 1)
    {
      unint64_t v20 = sub_100511864(v22 > 1, v23 + 1, 1, v20);
      *uint64_t v19 = v20;
    }
    *(void *)(v20 + 16) = v23 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v23, v17, v14);
    swift_endAccess();
  }
  return v25(a8, 0);
}

uint64_t sub_1004F7230(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, int64_t a7)
{
  uint64_t v14 = type metadata accessor for ProvisioningRequirement();
  uint64_t v15 = __chkstk_darwin(v14);
  BOOL v18 = (uint64_t *)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a2) {
    return ((uint64_t (*)(int64_t, void))a5)(a7, 0);
  }
  uint64_t v36 = a4;
  uint64_t v37 = v18;
  uint64_t v38 = v16;
  uint64_t v39 = v15;
  int64_t v40 = a7;
  uint64_t v41 = a6;
  unint64_t v42 = a5;
  unint64_t v35 = (uint64_t **)(a3 + 2);
  a5 = a2 + 8;
  uint64_t v19 = 1 << *((unsigned char *)a2 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & (unint64_t)a2[8];
  a7 = (unint64_t)(v19 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v22 = 0;
  uint64_t v23 = 0;
  unsigned __int8 v24 = &qword_100808540;
  while (v21)
  {
    unint64_t v25 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    unint64_t v26 = v25 | (v22 << 6);
LABEL_6:
    uint64_t v43 = a2[7][v26];
    uint64_t v7 = sub_1004CA0A4(&qword_100808540);
    sub_1004F8D9C();
    a3 = &v43;
    uint64_t v27 = Sequence.count(where:)();
    BOOL v28 = __OFADD__(v23, v27);
    v23 += v27;
    if (v28)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      a3 = (uint64_t *)sub_100511864(0, a3[2] + 1, 1, (unint64_t)a3);
      *a2 = a3;
      goto LABEL_29;
    }
  }
  BOOL v28 = __OFADD__(v22++, 1);
  if (v28) {
    goto LABEL_34;
  }
  if (v22 < a7)
  {
    unint64_t v29 = a5[v22];
    if (!v29)
    {
      int64_t v30 = v22 + 1;
      if (v22 + 1 >= a7) {
        goto LABEL_27;
      }
      unint64_t v29 = a5[v30];
      if (!v29)
      {
        int64_t v30 = v22 + 2;
        if (v22 + 2 >= a7) {
          goto LABEL_27;
        }
        unint64_t v29 = a5[v30];
        if (!v29)
        {
          int64_t v30 = v22 + 3;
          if (v22 + 3 >= a7) {
            goto LABEL_27;
          }
          unint64_t v29 = a5[v30];
          if (!v29)
          {
            int64_t v30 = v22 + 4;
            if (v22 + 4 >= a7) {
              goto LABEL_27;
            }
            unint64_t v29 = a5[v30];
            if (!v29)
            {
              int64_t v30 = v22 + 5;
              if (v22 + 5 >= a7) {
                goto LABEL_27;
              }
              unint64_t v29 = a5[v30];
              if (!v29)
              {
                while (1)
                {
                  int64_t v22 = v30 + 1;
                  if (__OFADD__(v30, 1)) {
                    goto LABEL_35;
                  }
                  if (v22 >= a7) {
                    goto LABEL_27;
                  }
                  unint64_t v29 = a5[v22];
                  ++v30;
                  if (v29) {
                    goto LABEL_22;
                  }
                }
              }
            }
          }
        }
      }
      int64_t v22 = v30;
    }
LABEL_22:
    unint64_t v21 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v22 << 6);
    goto LABEL_6;
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  a5 = v42;
  int64_t v22 = v39;
  a7 = v40;
  unsigned __int8 v24 = v37;
  uint64_t v7 = v38;
  if (v23 < 8) {
    return ((uint64_t (*)(int64_t, void))a5)(a7, 0);
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v38 + 16))(v37, v36, v39);
  a2 = v35;
  swift_beginAccess();
  a3 = *a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_36;
  }
LABEL_29:
  unint64_t v33 = a3[2];
  unint64_t v32 = a3[3];
  if (v33 >= v32 >> 1)
  {
    a3 = (uint64_t *)sub_100511864(v32 > 1, v33 + 1, 1, (unint64_t)a3);
    *a2 = a3;
  }
  a3[2] = v33 + 1;
  (*(void (**)(unint64_t, uint64_t *, int64_t))(v7 + 32))((unint64_t)a3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v33, v24, v22);
  swift_endAccess();
  return ((uint64_t (*)(void, void))a5)(a7, 0);
}

unint64_t sub_1004F75B0(id *a1)
{
  return ((unint64_t)[*a1 supportedRadioTechnologies] >> 1) & 1;
}

uint64_t sub_1004F75E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    sub_1004DE1C0(0, &qword_100808358);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    sub_1004CA0A4(&qword_100808540);
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v5(v4, a3);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004F76B0(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void), uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for ProvisioningRequirement();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    uint64_t v15 = (unint64_t *)(a2 + 16);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
    swift_beginAccess();
    unint64_t v16 = *v15;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v15 = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v16 = sub_100511864(0, *(void *)(v16 + 16) + 1, 1, v16);
      *uint64_t v15 = v16;
    }
    unint64_t v19 = *(void *)(v16 + 16);
    unint64_t v18 = *(void *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      unint64_t v16 = sub_100511864(v18 > 1, v19 + 1, 1, v16);
      *uint64_t v15 = v16;
    }
    *(void *)(v16 + 16) = v19 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v19, v14, v11);
    swift_endAccess();
  }
  return a4(a6, 0);
}

uint64_t sub_1004F7878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(void, void), uint64_t a8)
{
  unint64_t v35 = (void (*)(void, void))a5;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
    uint64_t v18 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    uint64_t v19 = *(void *)(v17 + 72);
    swift_bridgeObjectRetain();
    uint64_t v20 = v16 - 1;
    do
    {
      uint64_t v21 = v20;
      char v22 = ProvisioningRequirement.isRequired.getter();
      if (v22) {
        break;
      }
      uint64_t v20 = v21 - 1;
      v18 += v19;
    }
    while (v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = 0;
  }
  static Logger.Provisioning.add.getter();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    v34[0] = swift_slowAlloc();
    v41[0] = v34[0];
    *(_DWORD *)uint64_t v25 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1004F7DDC((uint64_t)v35, a6, v41);
    v34[1] = a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v35 = a7;
    *(_WORD *)(v25 + 12) = 2080;
    if (v22) {
      uint64_t v26 = 7562585;
    }
    else {
      uint64_t v26 = 28494;
    }
    if (v22) {
      unint64_t v27 = 0xE300000000000000;
    }
    else {
      unint64_t v27 = 0xE200000000000000;
    }
    uint64_t v40 = sub_1004F7DDC(v26, v27, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    swift_beginAccess();
    type metadata accessor for ProvisioningRequirement();
    swift_bridgeObjectRetain();
    uint64_t v28 = Array.description.getter();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v39 = sub_1004F7DDC(v28, v30, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a7 = v35;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%s] Found missing required requirement '%s'\nMissing: %s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v31 = v38;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
    uint64_t v31 = v38;
  }
  swift_beginAccess();
  uint64_t v32 = *v31;
  swift_bridgeObjectRetain();
  a7((v22 & 1) == 0, v32);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004F7CA4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004F7CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1004F7878(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void (**)(void, void))(v3 + 40), *(void *)(v3 + 48));
}

void ProvisioningRequirementsChecker.init()()
{
}

id ProvisioningRequirementsChecker.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProvisioningRequirementsChecker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1004F7DDC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1004F7F04(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1004DE0C0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1004DE0C0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1004F80C0((uint64_t)v12);
  return v7;
}

uint64_t sub_1004F7EB0()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004F7EE8(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(v2 + 16) + 16))(*(void *)(v2 + 16), a1 & 1, a2);
}

uint64_t sub_1004F7F04(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1004F8110(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1004F80C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1004F8110(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1004F81A8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1004F8320(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1004F8320(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1004F81A8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1004FDEB0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1004F8320(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1004CA0A4((uint64_t *)&unk_100808490);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004F8470()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1004F8490(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  int64_t v7 = *(uint64_t (**)(uint64_t, void))(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);
  uint64_t v9 = *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  return sub_1004F76B0(a1, v6, v1 + v4, v7, v8, v9);
}

uint64_t sub_1004F8544(uint64_t a1, uint64_t **a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(uint64_t **)(v2 + 16);
  uint64_t v9 = *(void **)(v2 + v7);
  uint64_t v10 = *(void *)(v2 + v7 + 8);
  int64_t v11 = *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));
  return sub_1004F7230(a1, a2, v8, v2 + v6, v9, v10, v11);
}

uint64_t sub_1004F8604()
{
  uint64_t v1 = type metadata accessor for ProvisioningRequirement();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void sub_1004F872C(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_1004F6CE8(a1, a2, *(void *)(v2 + 16), v2 + v6, *(void (**)(void *, void))(v2 + v7), *(void *)(v2 + v7 + 8), *(void **)(v2 + v8), *(void *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1004F8808()
{
  uint64_t v1 = type metadata accessor for ProvisioningRequirement();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1004F8924(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1004F648C(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), v3 + v8, *(void (**)(void *, void))(v3 + v9), *(void *)(v3 + v9 + 8), *(void **)(v3 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1004F8A00()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1004F8A10()
{
  uint64_t v1 = type metadata accessor for ProvisioningRequirement();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1004F8B14(char a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v10 = *(uint64_t (**)(uint64_t, void))(v2 + v7);
  uint64_t v11 = *(void *)(v2 + v7 + 8);
  uint64_t v12 = *(void *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));
  return sub_1004F6A3C(a1, a2, v8, v9, v2 + v6, v10, v11, v12);
}

uint64_t sub_1004F8BD8()
{
  uint64_t v1 = type metadata accessor for ProvisioningRequirement();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1004F8CD4(void *a1, char a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for ProvisioningRequirement() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(uint64_t (**)(uint64_t, void))(v3 + v9);
  uint64_t v12 = *(void *)(v3 + v9 + 8);
  uint64_t v13 = *(void *)(v3 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8));
  return sub_1004F703C(a1, a2, a3, v10, v3 + v8, v11, v12, v13);
}

unint64_t sub_1004F8D9C()
{
  unint64_t result = qword_100808360;
  if (!qword_100808360)
  {
    sub_1004DC044(&qword_100808540);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100808360);
  }
  return result;
}

void sub_1004F8E34(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void sub_1004F8EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void sub_1004F8F10(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned __int8 *)a2 + 8);
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v9 = a3;
  v8(v4, v5, v6, v7, a3);
  swift_release();
}

uint64_t type metadata accessor for PDARRCCCDecryptionProvider()
{
  return self;
}

void sub_1004F9068(uint64_t a1, uint64_t a2, char a3, void (*a4)(void, void, id), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)aBlock - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v24 = PKAppletSubcredentialCarKeyServerVersionToKMLVersion();
    if (v24 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = v24;
      uint64_t v26 = *(void **)(a6 + OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = a4;
      *(void *)(v27 + 24) = a5;
      *(void *)(v27 + 32) = a1;
      *(void *)(v27 + 40) = a2;
      *(unsigned char *)(v27 + 48) = 1;
      aBlock[4] = sub_1004FBE84;
      aBlock[5] = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004F8E34;
      aBlock[3] = &unk_1007587F0;
      uint64_t v28 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v26 upgradeKeyWithCredential:a7 versionType:2 version:v25 upgradeInformation:0 completion:v28];
      _Block_release(v28);
    }
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "PDARRCCCDecryptionProvider: No upgrade available", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v21 = objc_allocWithZone((Class)NSError);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v21 initWithDomain:v22 code:4 userInfo:0];

    a4(0, 0, v23);
  }
}

void sub_1004F9340(uint64_t a1, id a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v18 = a2;
      uint64_t v10 = swift_slowAlloc();
      uint64_t v17 = v4;
      uint64_t v11 = (uint8_t *)v10;
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v19 = v12;
      a2 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v12;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "PDARRCCCDecryptionProvider: Failed to upgrade key with error: %@", v11, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v17;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_errorRetain();
    ((void (*)(void, void, uint64_t))a2)(0, 0, a1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    id v13 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial) init];
    NSString v14 = (id)PKAppletSubcredentialCarKeyServerVersionToString();
    if (!v14)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v13 setVersion:v14];

    id v18 = v13;
    ((void (*)(id, void, void))a2)(v13, 0, 0);

    id v15 = v18;
  }
}

uint64_t sub_1004F9708(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return a2(0);
  }
  swift_errorRetain();
  static Logger.auxiliaryCapability.getter();
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v16 = a2;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v4;
    uint64_t v11 = (uint8_t *)v10;
    NSString v14 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    swift_errorRetain();
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v17 = v12;
    a2 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *NSString v14 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "PDARRCCCDecryptionProvider: Failed to commit migration with error: %@", v11, 0xCu);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v15;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_errorRetain();
  a2(a1);
  swift_errorRelease();
  return swift_errorRelease();
}

void sub_1004F9A70(uint64_t a1, uint64_t a2, char a3, void *a4, void (*a5)(id, id))
{
  if (a3 == 2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = objc_allocWithZone((Class)NSError);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v8 = [v6 initWithDomain:v7 code:4 userInfo:0];

    id v9 = 0;
    id v17 = v8;
  }
  else
  {
    id v11 = (id)PKAppletSubcredentialCarKeyServerVersionToString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v12 = (id)PKAppletSubcredentialCarKeyServerVersionToString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v13 = objc_allocWithZone((Class)PKAuxiliaryCapabilityKeyCreationMetadataRequestCapabilityState);
    id v14 = a4;
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v9 = [v13 initWithCapability:v14 currentVersion:v15 targetVersion:v16];

    id v8 = 0;
    id v17 = v9;
  }
  a5(v9, v8);
}

void sub_1004F9C3C(void *a1, int a2, void *a3, void *a4, void *aBlock, void (*a6)(id, id, id, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  a6(v11, v12, v13, v10);
  _Block_release(v10);
  _Block_release(v10);
}

uint64_t sub_1004F9CEC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  id v21 = a6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    swift_errorRetain();
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)id v14 = 138412290;
      uint64_t v19 = v14 + 4;
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v22 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v15;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "PDARRCCCSignatureProvider: Failed to check upgrade available with error: %@", v14, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v21(0, 0, 2);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v16 = PKAppletSubcredentialCarKeyServerVersionFromInteger();
    uint64_t v17 = PKAppletSubcredentialCarKeyServerVersionFromInteger();
    return v21(v16, v17, a2 & 1);
  }
}

void *sub_1004F9F88(void *a1)
{
  id v1 = [a1 supportedVersions];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v5 = v3 + 40;
      do
      {
        swift_bridgeObjectRetain();
        NSString v6 = String._bridgeToObjectiveC()();
        PKAppletSubcredentialCarKeyServerVersionFromString();

        [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:PKAppletSubcredentialCarKeyServerVersionToKMLVersion()];
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void sub_1004FA0C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, void (**a6)(void, void, void, void))
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a6;
  _Block_copy(a6);
  if (a3)
  {
    uint64_t v24 = PKAppletSubcredentialCarKeyServerVersionToKMLVersion();
    if (v24 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = v24;
      uint64_t v26 = *(void **)(a4 + OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = sub_1004FBF00;
      *(void *)(v27 + 24) = v16;
      *(void *)(v27 + 32) = a1;
      *(void *)(v27 + 40) = a2;
      *(unsigned char *)(v27 + 48) = 1;
      aBlock[4] = sub_1004FBE84;
      aBlock[5] = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1004F8E34;
      aBlock[3] = &unk_1007587A0;
      uint64_t v28 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      [v26 upgradeKeyWithCredential:a5 versionType:2 version:v25 upgradeInformation:0 completion:v28];
      _Block_release(v28);
      swift_release();
    }
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "PDARRCCCDecryptionProvider: No upgrade available", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = objc_allocWithZone((Class)NSError);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v20 initWithDomain:v21 code:4 userInfo:0];

    id v23 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, void *))a6)[2](a6, 0, 0, v23);
    swift_release();
  }
}

void sub_1004FA3F0(void *a1, void *a2, char *a3, void (**a4)(void, void, void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  id v9 = [a2 pass];
  if (!v9) {
    goto LABEL_12;
  }
  id v10 = v9;
  id v11 = [v9 devicePrimaryPaymentApplication];

  if (!v11)
  {
    _Block_release(a4);
    _Block_release(a4);
    _Block_release(a4);
    __break(1u);
    goto LABEL_17;
  }
  id v10 = [v11 subcredentials];

  if (!v10)
  {
LABEL_17:
    _Block_release(a4);
    _Block_release(a4);
    _Block_release(a4);
    __break(1u);
LABEL_18:
    swift_release();
    _Block_release(a4);
    _Block_release(a4);
    _Block_release(a4);

    __break(1u);
    goto LABEL_19;
  }
  sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
  sub_1004E4548();
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = (void *)sub_100507F2C(v12);
  swift_bridgeObjectRelease();
  if (!v13)
  {
LABEL_12:
    a4[2](a4, 0, 0, 0);
    swift_release();
    goto LABEL_15;
  }
  uint64_t v14 = (void *)swift_allocObject();
  _OWORD v14[2] = sub_1004DFD70;
  void v14[3] = v8;
  void v14[4] = a3;
  void v14[5] = v13;
  swift_retain_n();
  uint64_t v15 = a3;
  id v16 = v13;
  a3 = v15;
  id v10 = v16;
  unint64_t v17 = (unint64_t)sub_1004F9F88(a1);
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v29) {
      goto LABEL_14;
    }
  }
  else if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_14;
  }
  id v18 = [a2 pass];
  if (!v18) {
    goto LABEL_14;
  }
  uint64_t v19 = v18;
  id v20 = [v18 devicePrimaryPaymentApplication];

  if (!v20) {
    goto LABEL_18;
  }
  id v21 = [v20 subcredentials];

  if (v21)
  {
    uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v23 = (void *)sub_100507F2C(v22);
    swift_bridgeObjectRelease();
    if (v23)
    {
      uint64_t v24 = *(void **)&a3[OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager];
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
      id v25 = v23;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = sub_1004FBE40;
      *(void *)(v27 + 24) = v14;
      void v30[4] = sub_1004FBEE4;
      void v30[5] = v27;
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 1107296256;
      v30[2] = sub_1004F8F10;
      v30[3] = &unk_100758728;
      uint64_t v28 = _Block_copy(v30);
      swift_retain();
      swift_release();
      [v24 hasUpgradeAvailableForKeyWithCredential:v25 versionType:2 versions:isa completion:v28];
      _Block_release(v28);

      swift_release_n();
      swift_release();

LABEL_15:
      _Block_release(a4);
      _Block_release(a4);
      return;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    _Block_copy(a4);
    sub_1004FA0C4(0, 0, 2, (uint64_t)a3, (uint64_t)v10, a4);
    _Block_release(a4);
    swift_release();

    swift_release_n();
    goto LABEL_15;
  }
LABEL_19:
  swift_release();
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);

  __break(1u);
}

void sub_1004FA8C8(void *a1)
{
  id v3 = [a1 pass];
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  id v5 = [v3 devicePrimaryPaymentApplication];

  if (!v5)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  id v6 = [v5 subcredentials];

  if (!v6)
  {
LABEL_72:
    __break(1u);
    return;
  }
  sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
  sub_1004E4548();
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v34 = (id)sub_100507F2C(v7);
  swift_bridgeObjectRelease();
  if (!v34) {
    return;
  }
  id v8 = [a1 previouslyGeneratedDecryptionKeyOfType:5];
  if (!v8) {
    goto LABEL_17;
  }
  id v9 = v8;
  id v10 = [v8 version];
  if (!v10)
  {

LABEL_17:

    return;
  }
  id v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  uint64_t v15 = HIBYTE(v14) & 0xF;
  uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(v14) & 0xF;
  }
  else {
    uint64_t v17 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    if ((v14 & 0x1000000000000000) != 0)
    {
      uint64_t v19 = sub_1004FDFAC(v12, v14, 10);
      LOBYTE(v12) = v33;
      goto LABEL_44;
    }
    if ((v14 & 0x2000000000000000) == 0)
    {
      if ((v12 & 0x1000000000000000) != 0) {
        id v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        id v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v19 = (uint64_t)sub_1004FDF94(v18, v16, 10);
      LOBYTE(v12) = v20 & 1;
      goto LABEL_44;
    }
    v35[0] = v12;
    v35[1] = v14 & 0xFFFFFFFFFFFFFFLL;
    if (v12 == 43)
    {
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v12) - 48) <= 9u)
        {
          uint64_t v19 = (BYTE1(v12) - 48);
          if (v15 == 2) {
            goto LABEL_43;
          }
          if ((BYTE2(v12) - 48) <= 9u)
          {
            uint64_t v19 = 10 * (BYTE1(v12) - 48) + (BYTE2(v12) - 48);
            uint64_t v21 = v15 - 3;
            if (v21)
            {
              uint64_t v22 = (unsigned __int8 *)v35 + 3;
              while (1)
              {
                unsigned int v23 = *v22 - 48;
                if (v23 > 9) {
                  goto LABEL_41;
                }
                uint64_t v24 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63) {
                  goto LABEL_41;
                }
                uint64_t v19 = v24 + v23;
                if (__OFADD__(v24, v23)) {
                  goto LABEL_41;
                }
                LOBYTE(v12) = 0;
                ++v22;
                if (!--v21) {
                  goto LABEL_44;
                }
              }
            }
            goto LABEL_43;
          }
        }
        goto LABEL_41;
      }
    }
    else
    {
      if (v12 != 45)
      {
        if (v15 && (v12 - 48) <= 9u)
        {
          uint64_t v19 = (v12 - 48);
          if (v15 == 1) {
            goto LABEL_43;
          }
          if ((BYTE1(v12) - 48) <= 9u)
          {
            uint64_t v19 = 10 * (v12 - 48) + (BYTE1(v12) - 48);
            uint64_t v25 = v15 - 2;
            if (v25)
            {
              uint64_t v26 = (unsigned __int8 *)v35 + 2;
              while (1)
              {
                unsigned int v27 = *v26 - 48;
                if (v27 > 9) {
                  goto LABEL_41;
                }
                uint64_t v28 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63) {
                  goto LABEL_41;
                }
                uint64_t v19 = v28 + v27;
                if (__OFADD__(v28, v27)) {
                  goto LABEL_41;
                }
                LOBYTE(v12) = 0;
                ++v26;
                if (!--v25) {
                  goto LABEL_44;
                }
              }
            }
            goto LABEL_43;
          }
        }
LABEL_41:
        uint64_t v19 = 0;
        LOBYTE(v12) = 1;
        goto LABEL_44;
      }
      if (v15)
      {
        if (v15 != 1 && (BYTE1(v12) - 48) <= 9u)
        {
          if (v15 == 2)
          {
            LOBYTE(v12) = 0;
            uint64_t v19 = -(uint64_t)(BYTE1(v12) - 48);
LABEL_44:
            swift_bridgeObjectRelease();
            if ((v12 & 1) == 0) {
              [*(id *)(v1 + OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager) revertUpgradeForKeyWithCredential:v34 versionType:2 version:v19 completion:0];
            }

            return;
          }
          if ((BYTE2(v12) - 48) <= 9u)
          {
            uint64_t v19 = -10 * (BYTE1(v12) - 48) - (BYTE2(v12) - 48);
            uint64_t v29 = v15 - 3;
            if (v29)
            {
              unint64_t v30 = (unsigned __int8 *)v35 + 3;
              while (1)
              {
                unsigned int v31 = *v30 - 48;
                if (v31 > 9) {
                  goto LABEL_41;
                }
                uint64_t v32 = 10 * v19;
                if ((unsigned __int128)(v19 * (__int128)10) >> 64 != (10 * v19) >> 63) {
                  goto LABEL_41;
                }
                uint64_t v19 = v32 - v31;
                if (__OFSUB__(v32, v31)) {
                  goto LABEL_41;
                }
                LOBYTE(v12) = 0;
                ++v30;
                if (!--v29) {
                  goto LABEL_44;
                }
              }
            }
LABEL_43:
            LOBYTE(v12) = 0;
            goto LABEL_44;
          }
        }
        goto LABEL_41;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_71;
  }

  swift_bridgeObjectRelease();
}

void sub_1004FAD34(void *a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)aBlock - v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  _Block_copy(a4);
  id v16 = [a2 pass];
  if (!v16) {
    goto LABEL_8;
  }
  uint64_t v17 = v16;
  id v18 = [v16 devicePrimaryPaymentApplication];

  if (!v18)
  {
LABEL_16:
    _Block_release(a4);
    __break(1u);
    goto LABEL_17;
  }
  id v19 = [v18 subcredentials];

  if (v19)
  {
    sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = (void *)sub_100507F2C(v20);
    swift_bridgeObjectRelease();
    if (v21)
    {
      id v22 = [a1 version];
      if (!v22)
      {
        static Logger.auxiliaryCapability.getter();
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "PDARRCCCDecryptionProvider: Failed to find version to commit migration", v38, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v39 = objc_allocWithZone((Class)NSError);
        NSString v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v29 = [v39 initWithDomain:v40 code:4 userInfo:0];

        unint64_t v30 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void *))a4)[2](a4, v30);
        swift_release();

        goto LABEL_11;
      }
      unsigned int v23 = v22;
      PKAppletSubcredentialCarKeyServerVersionFromString();

      uint64_t v24 = PKAppletSubcredentialCarKeyServerVersionToKMLVersion();
      if ((v24 & 0x8000000000000000) == 0)
      {
        uint64_t v25 = v24;
        uint64_t v26 = *(void **)(a3 + OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager);
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = sub_1004D0898;
        *(void *)(v27 + 24) = v15;
        aBlock[4] = sub_1004FBDF0;
        aBlock[5] = v27;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1004F8E34;
        aBlock[3] = &unk_100758688;
        uint64_t v28 = _Block_copy(aBlock);
        id v29 = v21;
        swift_retain();
        swift_release();
        [v26 commitUpgradeForKeyWithCredential:v29 versionType:2 version:v25 completion:v28];
        _Block_release(v28);
        swift_release();
        unint64_t v30 = v29;
LABEL_11:

        return;
      }
      __break(1u);
      goto LABEL_16;
    }
LABEL_8:
    static Logger.auxiliaryCapability.getter();
    unsigned int v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      char v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "PDARRCCCDecryptionProvider: Failed to find subcredential to commit migration", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v34 = objc_allocWithZone((Class)NSError);
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v29 = [v34 initWithDomain:v35 code:4 userInfo:0];

    unint64_t v30 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v30);
    swift_release();
    goto LABEL_11;
  }
LABEL_17:
  _Block_release(a4);
  __break(1u);
}

void sub_1004FB280(void *a1, void *a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1004E4640;
  *(void *)(v9 + 24) = v8;
  swift_retain_n();
  _Block_copy(a4);
  unint64_t v10 = (unint64_t)sub_1004F9F88(a1);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v22) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  id v11 = [a2 pass];
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = v11;
  id v13 = [v11 devicePrimaryPaymentApplication];

  if (v13)
  {
    id v14 = [v13 subcredentials];

    if (v14)
    {
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
      sub_1004E4548();
      uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      id v16 = (void *)sub_100507F2C(v15);
      swift_bridgeObjectRelease();
      if (v16)
      {
        uint64_t v17 = *(void **)(a3 + OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager);
        sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
        id v18 = v16;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = sub_1004E463C;
        *(void *)(v20 + 24) = v9;
        void v23[4] = sub_1004FBEE4;
        void v23[5] = v20;
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 1107296256;
        v23[2] = sub_1004F8F10;
        void v23[3] = &unk_100758610;
        uint64_t v21 = _Block_copy(v23);
        swift_retain();
        swift_release();
        [v17 hasUpgradeAvailableForKeyWithCredential:v18 versionType:2 versions:isa completion:v21];
        _Block_release(v21);
        swift_release();
        swift_release();

LABEL_10:
        swift_release();
        return;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      a4[2](a4, 0);
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  else
  {
    swift_release();
    _Block_release(a4);
    __break(1u);
  }
  swift_release();
  _Block_release(a4);
  __break(1u);
}

void sub_1004FB5B4(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1004E45D0;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1004E4610;
  *(void *)(v10 + 24) = v9;
  swift_retain_n();
  swift_retain_n();
  _Block_copy(a4);
  unint64_t v11 = (unint64_t)sub_1004F9F88(a1);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v23) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  id v12 = [a2 pass];
  if (!v12) {
    goto LABEL_9;
  }
  id v13 = v12;
  id v14 = [v12 devicePrimaryPaymentApplication];

  if (v14)
  {
    id v15 = [v14 subcredentials];

    if (v15)
    {
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
      sub_1004E4548();
      uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = (void *)sub_100507F2C(v16);
      swift_bridgeObjectRelease();
      if (v17)
      {
        id v18 = *(void **)(a3 + OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager);
        sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
        id v19 = v17;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = sub_1004E463C;
        *(void *)(v21 + 24) = v10;
        void v24[4] = sub_1004FBEE4;
        void v24[5] = v21;
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 1107296256;
        void v24[2] = sub_1004F8F10;
        v24[3] = &unk_100758570;
        uint64_t v22 = _Block_copy(v24);
        swift_retain();
        swift_release();
        [v18 hasUpgradeAvailableForKeyWithCredential:v19 versionType:2 versions:isa completion:v22];
        _Block_release(v22);
        swift_release();
        swift_release();

LABEL_10:
        swift_release_n();
        swift_release();
        return;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      a4[2](a4, 0, 0);
      swift_release();
      swift_release();
      goto LABEL_10;
    }
  }
  else
  {
    swift_release();
    swift_release();
    _Block_release(a4);
    __break(1u);
  }
  swift_release();
  swift_release();
  _Block_release(a4);
  __break(1u);
}

void sub_1004FB948(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a4;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a1;
  void v9[3] = sub_1004E44F4;
  void v9[4] = v8;
  id v10 = a1;
  swift_retain_n();
  id v11 = v10;
  _Block_copy(a4);
  unint64_t v12 = (unint64_t)sub_1004F9F88(v11);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24) {
      goto LABEL_9;
    }
  }
  else if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  id v13 = [a2 pass];
  if (!v13) {
    goto LABEL_9;
  }
  id v14 = v13;
  id v15 = [v13 devicePrimaryPaymentApplication];

  if (v15)
  {
    id v16 = [v15 subcredentials];

    if (v16)
    {
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
      sub_1004E4548();
      uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      id v18 = (void *)sub_100507F2C(v17);
      swift_bridgeObjectRelease();
      if (v18)
      {
        id v19 = *(void **)(a3 + OBJC_IVAR____TtC5passd26PDARRCCCDecryptionProvider_daManager);
        sub_1004DE1C0(0, (unint64_t *)&unk_1008083B0);
        id v20 = v18;
        v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v22 = swift_allocObject();
        *(void *)(v22 + 16) = sub_1004FBD8C;
        *(void *)(v22 + 24) = v9;
        void v28[4] = sub_1004FBD98;
        void v28[5] = v22;
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 1107296256;
        v28[2] = sub_1004F8F10;
        v28[3] = &unk_1007584A8;
        uint64_t v23 = _Block_copy(v28);
        swift_retain();
        swift_release();
        [v19 hasUpgradeAvailableForKeyWithCredential:v20 versionType:2 versions:v21.super.isa completion:v23];
        _Block_release(v23);

        swift_release();
LABEL_10:

        swift_release_n();
        return;
      }
LABEL_9:
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v25 = objc_allocWithZone((Class)NSError);
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v27 = [v25 initWithDomain:v26 code:4 userInfo:0];

      v21.super.Class isa = (Class)_convertErrorToNSError(_:)();
      ((void (**)(void, void, Class))a4)[2](a4, 0, v21.super.isa);

      swift_release();
      goto LABEL_10;
    }
  }
  else
  {
    swift_release();

    _Block_release(a4);
    __break(1u);
  }
  swift_release();

  _Block_release(a4);
  __break(1u);
}

uint64_t sub_1004FBD14()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004FBD4C()
{
  swift_release();
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1004FBD8C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1004F9A70(a1, a2, a3, *(void **)(v3 + 16), *(void (**)(id, id))(v3 + 24));
}

uint64_t sub_1004FBD98(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1004F9CEC(a1, a2, a3, a4, a5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
}

uint64_t sub_1004FBDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004FBDB0()
{
  return swift_release();
}

uint64_t sub_1004FBDB8()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004FBDF0(uint64_t a1)
{
  return sub_1004F9708(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1004FBDF8()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1004FBE40(uint64_t a1, uint64_t a2, char a3)
{
  sub_1004F9068(a1, a2, a3, *(void (**)(void, void, id))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_1004FBE4C()
{
  swift_release();
  return _swift_deallocObject(v0, 49, 7);
}

void sub_1004FBE88(uint64_t a1)
{
  sub_1004F9340(a1, *(id *)(v1 + 16));
}

uint64_t sub_1004FBF04(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_applicationMessageSink;
  *(void *)(v1
            + OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_applicationMessageSink) = a1;
  swift_unknownObjectRetain();
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v4 = *(void **)(v1 + v2);
  if (v4)
  {
    swift_unknownObjectUnownedLoadStrong();
    swift_unknownObjectRetain();
    unint64_t v5 = sub_1004D3D90();
    swift_unknownObjectRelease();
    id v6 = [v4 registrations];
    if (v6)
    {
      uint64_t v7 = v6;
      sub_1004FF32C();
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v8 >> 62)) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
      if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
      {
LABEL_4:
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        unint64_t v42 = v5;
        if (v9)
        {
LABEL_5:
          uint64_t result = sub_100504118(0, v9 & ~(v9 >> 63), 0);
          if (v9 < 0)
          {
            __break(1u);
            goto LABEL_33;
          }
          uint64_t v41 = v4;
          uint64_t v10 = 0;
          do
          {
            if ((v8 & 0xC000000000000001) != 0) {
              id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v11 = *(id *)(v8 + 8 * v10 + 32);
            }
            unint64_t v12 = v11;
            id v13 = objc_msgSend(v11, "key", v41);
            id v14 = [v13 identifier];

            uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v17 = v16;

            unint64_t v19 = _swiftEmptyArrayStorage[2];
            unint64_t v18 = _swiftEmptyArrayStorage[3];
            if (v19 >= v18 >> 1) {
              sub_100504118(v18 > 1, v19 + 1, 1);
            }
            ++v10;
            _swiftEmptyArrayStorage[2] = v19 + 1;
            id v20 = &_swiftEmptyArrayStorage[2 * v19];
            void v20[4] = v15;
            void v20[5] = v17;
          }
          while (v9 != v10);
          swift_bridgeObjectRelease();
          uint64_t v4 = v41;
          unint64_t v5 = v42;
LABEL_17:
          uint64_t v21 = sub_100513974((uint64_t)_swiftEmptyArrayStorage);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v45 = v21;
          if (v5 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
            if (v22)
            {
LABEL_19:
              if (v22 >= 1)
              {
                uint64_t v23 = 0;
                unint64_t v24 = v5 & 0xC000000000000001;
                do
                {
                  if (v24) {
                    id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v25 = *(id *)(v5 + 8 * v23 + 32);
                  }
                  NSString v26 = v25;
                  id v27 = [v25 type];
                  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v30 = v29;

                  uint64_t v43 = v28;
                  uint64_t v44 = v30;
                  v31._countAndFlagsBits = 124;
                  v31._object = (void *)0xE100000000000000;
                  String.append(_:)(v31);
                  id v32 = [v26 uniqueIdentifier];
                  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  NSString v35 = v34;

                  v36._countAndFlagsBits = v33;
                  v36._object = v35;
                  String.append(_:)(v36);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  char v37 = sub_1004FC368(v43, v44, v45);
                  swift_bridgeObjectRelease();
                  if (v37)
                  {
                    sub_1004FEAA0(v43, v44);
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    NSString v38 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    id v39 = [objc_allocWithZone((Class)PKApplicationMessageRequest) init];
                    [v4 registerMessageForIdentifier:v38 withRequest:v39];
                  }
                  ++v23;
                  unint64_t v5 = v42;
                }
                while (v22 != v23);
                goto LABEL_30;
              }
LABEL_33:
              __break(1u);
              return result;
            }
          }
          else
          {
            uint64_t v22 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v22) {
              goto LABEL_19;
            }
          }
LABEL_30:
          swift_bridgeObjectRelease();
          swift_unknownObjectRetain();
          uint64_t v40 = swift_bridgeObjectRetain();
          sub_1004FF024(v40, v4);
          swift_bridgeObjectRelease_n();
          return swift_unknownObjectRelease_n();
        }
LABEL_16:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v42 = v5;
    if (v9) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1004FC368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      id v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

id sub_1004FC508(void *a1)
{
  id v64 = a1;
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v63 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1004CA0A4(&qword_100808488);
  __chkstk_darwin(v4 - 8);
  Swift::Int v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringTable();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v62 = (char *)&v54 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v54 - v13;
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  unsigned int v60 = enum case for LocalizedStringTable.credential(_:);
  uint64_t v61 = v8 + 104;
  unint64_t v59 = v15;
  ((void (*)(char *))v15)((char *)&v54 - v13);
  id v16 = (id)PKPassKitBundle();
  if (!v16)
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v17 = v16;
  localizedString(for:table:bundle:)();

  uint64_t v56 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v57 = v8 + 8;
  v56(v14, v7);
  unint64_t v18 = self;
  NSString v19 = String._bridgeToObjectiveC()();
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v55 = [v18 createForIdentifier:v19 withSingularSummary:v20 pluralSummary:v21];

  id v22 = v64;
  id v23 = [v64 configuration];
  [v23 setReferralSource:6];

  id v24 = [v22 configuration];
  id v25 = [v24 vehicleInitiatedPairingLaunchURL];

  if (!v25)
  {
LABEL_11:
    id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v6, 1, 1, v1);
    goto LABEL_12;
  }
  NSString v26 = v63;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v6, v26, v1);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v6, 0, 1, v1);
  id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v6, 1, v1);
  if (result == 1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v28 = self;
  URL._bridgeToObjectiveC()(v29);
  Swift::String v31 = v30;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
  uint64_t v63 = (char *)[v28 createWithURL:v31];

  uint64_t v32 = sub_1004FD3C0(v22);
  uint64_t v33 = v60;
  if (v32)
  {
    NSString v34 = (NSString)v32;
    id v35 = [self createForImage:v32 withTintColor:0];
  }
  else
  {
    Swift::String v36 = self;
    NSString v34 = String._bridgeToObjectiveC()();
    id v35 = [v36 createForName:v34 withTintColor:14];
  }
  char v37 = v35;
  NSString v38 = v62;
  id v39 = v59;

  uint64_t v40 = self;
  id v64 = v37;
  id v41 = [v40 createWithImage:v37 style:0];
  v39(v38, v33, v7);
  id result = (id)PKPassKitBundle();
  if (!result) {
    goto LABEL_13;
  }
  unint64_t v42 = result;
  localizedString(for:table:bundle:)();

  uint64_t v43 = v56;
  v56(v38, v7);
  uint64_t v44 = v58;
  v39(v58, v33, v7);
  id result = (id)PKPassKitBundle();
  if (result)
  {
    uint64_t v45 = result;
    localizedString(for:table:bundle:)();

    v43(v44, v7);
    unint64_t v46 = self;
    uint64_t v47 = v63;
    id v48 = v41;
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v51 = v55;
    id v52 = [v46 createWithGroup:v55 action:v47 icon:v48 title:v49 body:v50];

    id v53 = v52;
    return v53;
  }
LABEL_14:
  __break(1u);
  return result;
}

void sub_1004FCCB0(void *a1)
{
  uint64_t v2 = v1;
  if (([a1 shouldAutoProvision] & 1) == 0 && objc_msgSend(a1, "status") == (id)3)
  {
    id v4 = [a1 type];
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    v8._countAndFlagsBits = 124;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    id v9 = objc_msgSend(a1, "uniqueIdentifier", v5, v7);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void **)(v2
                   + OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_applicationMessageSink);
    if (v14)
    {
      swift_unknownObjectRetain();
      NSString v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v16 = [objc_allocWithZone((Class)PKApplicationMessageRequest) init];
      [v14 registerMessageForIdentifier:v15 withRequest:v16];
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    id v17 = [a1 type];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v18 && v21 == v20)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        return;
      }
    }
    self;
    id v23 = (void *)swift_dynamicCastObjCClassUnconditional();
    sub_1004FCEF4(v23);
  }
}

void sub_1004FCEF4(void *a1)
{
  uint64_t v3 = type metadata accessor for LocalizedStringTable();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)v30 - v8;
  id v32 = [a1 invitation];
  self;
  uint64_t v10 = (void *)swift_dynamicCastObjCClass();
  if (v10)
  {
    id v11 = [v10 displayInformation];
    uint64_t v12 = v11;
    v30[0] = a1;
    Swift::String v31 = v7;
    if (v11)
    {
      id v13 = objc_msgSend(v11, "title", v30[0]);

      uint64_t v12 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;
    }
    else
    {
      unint64_t v15 = 0xE000000000000000;
    }
    uint64_t v17 = enum case for LocalizedStringTable.shareable(_:);
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v18(v9, enum case for LocalizedStringTable.shareable(_:), v3);
    sub_1004CA0A4(&qword_100808470);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1005B4350;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_1004FD85C();
    *(void *)(v19 + 32) = v12;
    *(void *)(v19 + 40) = v15;
    v30[1] = (void *)localizedString(formatKey:table:_:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
    v20(v9, v3);
    uint64_t v21 = v31;
    v18(v31, v17, v3);
    id v22 = (id)PKPassKitBundle();
    if (v22)
    {
      id v23 = v22;
      localizedString(for:table:bundle:)();

      v20(v21, v3);
      id v24 = objc_allocWithZone((Class)PDGenericUserNotification);
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v27 = [v24 initWithTitle:v25 message:v26];

      if (v27)
      {
        id v28 = v27;
        sub_1004FF1C0(v30[0]);
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v28 setCustomActionURLString:v29];

        [v28 setSuppressionBehavior:1];
      }
      objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_notificationManager), "insertUserNotification:", v27, v30[0]);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    id v16 = v32;
  }
}

id sub_1004FD2EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s33PendingProvisioningMessageManagerCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s33PendingProvisioningMessageManagerCMa()
{
  return self;
}

uint64_t sub_1004FD3C0(void *a1)
{
  objc_super v2 = *(void **)(v1
                + OBJC_IVAR____TtCC5passd26PendingProvisioningManager33PendingProvisioningMessageManager_carKeyRequirementsChecker);
  id v3 = [a1 configuration];
  id v4 = [v2 supportedTerminalForConfiguration:v3];

  if (!v4) {
    return 0;
  }
  id v5 = [v4 associatedApplicationIdentifiers];
  if (!v5)
  {

    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  id v11 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v12 = (uint64_t *)(v7 + 32 + 16 * v10);
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    uint64_t v15 = HIBYTE(v14) & 0xF;
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
    if ((v14 & 0x2000000000000000) != 0) {
      uint64_t v17 = HIBYTE(v14) & 0xF;
    }
    else {
      uint64_t v17 = v13 & 0xFFFFFFFFFFFFLL;
    }
    if (!v17) {
      goto LABEL_6;
    }
    if ((v14 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v20 = sub_1004FDFC4(v13, v14, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_1004FE338);
      char v38 = v37;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v38 & 1) == 0) {
        goto LABEL_42;
      }
      goto LABEL_6;
    }
    if ((v14 & 0x2000000000000000) == 0)
    {
      if ((v13 & 0x1000000000000000) != 0) {
        uint64_t v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t result = (uint64_t)sub_1004FE338(v18, v16, 10);
      if ((v19 & 1) == 0)
      {
        unint64_t v20 = result;
LABEL_42:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1005119A8(0, v11[2] + 1, 1, v11);
          id v11 = (void *)result;
        }
        unint64_t v28 = v11[2];
        unint64_t v27 = v11[3];
        if (v28 >= v27 >> 1)
        {
          uint64_t result = (uint64_t)sub_1005119A8((void *)(v27 > 1), v28 + 1, 1, v11);
          id v11 = (void *)result;
        }
        void v11[2] = v28 + 1;
        v11[v28 + 4] = v20;
        goto LABEL_6;
      }
      goto LABEL_6;
    }
    v40[0] = v13;
    v40[1] = v14 & 0xFFFFFFFFFFFFFFLL;
    if (v13 == 43)
    {
      if (!v15) {
        goto LABEL_75;
      }
      if (v15 != 1 && (BYTE1(v13) - 48) <= 9u)
      {
        unint64_t v20 = (BYTE1(v13) - 48);
        if (v15 == 2) {
          goto LABEL_42;
        }
        if ((BYTE2(v13) - 48) <= 9u)
        {
          unint64_t v20 = 10 * (BYTE1(v13) - 48) + (BYTE2(v13) - 48);
          uint64_t v24 = v15 - 3;
          if (v15 != 3)
          {
            NSString v25 = (unsigned __int8 *)v40 + 3;
            while (1)
            {
              unsigned int v26 = *v25 - 48;
              if (v26 > 9) {
                goto LABEL_6;
              }
              if (!is_mul_ok(v20, 0xAuLL)) {
                goto LABEL_6;
              }
              BOOL v22 = __CFADD__(10 * v20, v26);
              unint64_t v20 = 10 * v20 + v26;
              if (v22) {
                goto LABEL_6;
              }
              ++v25;
              if (!--v24) {
                goto LABEL_42;
              }
            }
          }
          goto LABEL_42;
        }
      }
      goto LABEL_6;
    }
    if (v13 != 45)
    {
      if (v15 && (v13 - 48) <= 9u)
      {
        unint64_t v20 = (v13 - 48);
        if (v15 == 1) {
          goto LABEL_42;
        }
        if ((BYTE1(v13) - 48) <= 9u)
        {
          unint64_t v20 = 10 * (v13 - 48) + (BYTE1(v13) - 48);
          uint64_t v29 = v15 - 2;
          if (v15 != 2)
          {
            uint64_t v30 = (unsigned __int8 *)v40 + 2;
            while (1)
            {
              unsigned int v31 = *v30 - 48;
              if (v31 > 9) {
                goto LABEL_6;
              }
              if (!is_mul_ok(v20, 0xAuLL)) {
                goto LABEL_6;
              }
              BOOL v22 = __CFADD__(10 * v20, v31);
              unint64_t v20 = 10 * v20 + v31;
              if (v22) {
                goto LABEL_6;
              }
              ++v30;
              if (!--v29) {
                goto LABEL_42;
              }
            }
          }
          goto LABEL_42;
        }
      }
      goto LABEL_6;
    }
    if (!v15) {
      break;
    }
    if (v15 != 1)
    {
      unsigned __int8 v21 = BYTE1(v13) - 48;
      if ((BYTE1(v13) - 48) <= 9u)
      {
        BOOL v22 = v21 == 0;
        unint64_t v23 = -(uint64_t)v21;
        if (v22)
        {
          if (v15 == 2)
          {
            unint64_t v20 = v23;
            goto LABEL_42;
          }
          unsigned __int8 v32 = BYTE2(v13) - 48;
          if ((BYTE2(v13) - 48) <= 9u && is_mul_ok(v23, 0xAuLL))
          {
            unint64_t v33 = 10 * v23;
            unint64_t v20 = v33 - v32;
            if (v33 >= v32)
            {
              uint64_t v34 = v15 - 3;
              if (v15 != 3)
              {
                id v35 = (unsigned __int8 *)v40 + 3;
                while (1)
                {
                  unsigned int v36 = *v35 - 48;
                  if (v36 > 9) {
                    goto LABEL_6;
                  }
                  if (!is_mul_ok(v20, 0xAuLL)) {
                    goto LABEL_6;
                  }
                  BOOL v22 = 10 * v20 >= v36;
                  unint64_t v20 = 10 * v20 - v36;
                  if (!v22) {
                    goto LABEL_6;
                  }
                  ++v35;
                  if (!--v34) {
                    goto LABEL_42;
                  }
                }
              }
              goto LABEL_42;
            }
          }
        }
      }
    }
LABEL_6:
    if (++v10 == v8)
    {
      swift_bridgeObjectRelease_n();
      id v39 = sub_1004FF4B8((uint64_t)v11);

      swift_bridgeObjectRelease();
      return (uint64_t)v39;
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

unint64_t sub_1004FD85C()
{
  unint64_t result = qword_100808478;
  if (!qword_100808478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100808478);
  }
  return result;
}

uint64_t sub_1004FD8B0(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_1004FDD54(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_100511898(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    uint64_t v13 = sub_100511898((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  unint64_t v28 = &v13[4 * v27];
  void v28[4] = v45;
  void v28[5] = v23;
  void v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_100511898(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      uint64_t v13 = sub_100511898((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    uint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    void v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004FDD54(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_100511898(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_100511898((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    _OWORD v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    void v18[4] = v7;
    void v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1004FDEB0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1004CA0A4((uint64_t *)&unk_100808490);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1004FDF18(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *sub_1004FDF94(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1004FE0BC(a1, a2, a3);
}

uint64_t sub_1004FDFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1004FDFC4(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_1004FE0BC);
}

uint64_t sub_1004FDFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = &v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1004FE5B4();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_1004FE0BC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  char v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1004FE338(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  char v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1004FE5B4()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_1004FE634(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1004FE634(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1004FE78C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_1004FDEB0(v9, 0),
          unint64_t v12 = sub_1004FE88C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1004FE78C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_1004FDF18(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_1004FDF18(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_1004FE88C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    void v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1004FDF18(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1004FDF18(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1004FEAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100512C30();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1004FEC30(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1004FEC30(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            _OWORD *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t (*sub_1004FEDF8(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1004FEF14(v6, a2, a3);
  return sub_1004FEE60;
}

uint64_t (*sub_1004FEE64(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1004FEF9C(v6, a2, a3);
  return sub_1004FEE60;
}

void sub_1004FEECC(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1004FEF14(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    uint64_t *v3 = v4;
    return sub_1004FEF94;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004FEF94()
{
  return swift_release();
}

void (*sub_1004FEF9C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1004FF01C;
  }
  __break(1u);
  return result;
}

void sub_1004FF01C(id *a1)
{
}

void sub_1004FF024(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    int64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    uint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v8;
    if (!v11)
    {
      int64_t v8 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      uint64_t v11 = *(void *)(v3 + 8 * v8);
      if (!v11)
      {
        int64_t v8 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        uint64_t v11 = *(void *)(v3 + 8 * v8);
        if (!v11)
        {
          int64_t v8 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          uint64_t v11 = *(void *)(v3 + 8 * v8);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v6 = (v11 - 1) & v11;
LABEL_5:
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    [a2 unregisterMessageForIdentifier:v9];
    swift_bridgeObjectRelease();
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  uint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v8 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_23;
    }
    uint64_t v11 = *(void *)(v3 + 8 * v8);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1004FF1C0(void *a1)
{
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 47;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 47;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  id v6 = [a1 type];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 47;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  id v12 = [a1 uniqueIdentifier];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return 0x2F3A74656C6C6177;
}

unint64_t sub_1004FF32C()
{
  unint64_t result = qword_100808480;
  if (!qword_100808480)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100808480);
  }
  return result;
}

uint64_t sub_1004FF36C(uint64_t a1, unint64_t a2)
{
  v8[0] = 124;
  v8[1] = 0xE100000000000000;
  v7[2] = v8;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1004FD8B0(1, 1, sub_100500388, (uint64_t)v7, a1, a2);
  if (*(void *)(v4 + 16) != 2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = static String._fromSubstring(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v4 + 16) >= 2uLL)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    return v5;
  }
  __break(1u);
  return result;
}

id sub_1004FF4B8(uint64_t a1)
{
  uint64_t v32 = type metadata accessor for URL();
  __chkstk_darwin(v32);
  unint64_t v31 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    unsigned int v29 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v30 = kISImageDescriptorTableUIName;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 8 * v5 + 32);
      id v8 = objc_allocWithZone((Class)LSApplicationRecord);
      id v33 = 0;
      id v9 = [v8 initWithStoreItemIdentifier:v7 error:&v33];
      if (v9)
      {
        Swift::String v10 = v9;
        id v11 = v33;
        id v12 = [v10 URL];
        uint64_t v13 = v31;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        id v14 = objc_allocWithZone((Class)ISIcon);
        URL._bridgeToObjectiveC()(v15);
        uint64_t v17 = v16;
        id v18 = [v14 initWithURL:v16];

        (*v29)(v13, v32);
        PKScreenScale();
        double v20 = v19;
        id v21 = [self imageDescriptorNamed:v30];
        [v21 setScale:v20];
        objc_msgSend(v21, "setSize:", 45.0, 45.0);
        [v21 setDrawBorder:1];
        id v22 = [v18 prepareImageForDescriptor:v21];
        if (v22)
        {
          unint64_t v23 = v22;
          id v24 = [v22 CGImage];
          if (v24)
          {
            unint64_t v27 = v24;
            swift_bridgeObjectRelease();
            id v25 = [objc_allocWithZone((Class)PKImage) initWithCGImage:v27 scale:0 orientation:v20];

            return v25;
          }
        }
        else
        {
        }
      }
      else
      {
        id v6 = v33;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
      }
      if (v4 == ++v5)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
  }
  return 0;
}

id sub_1004FF7FC(void *a1)
{
  uint64_t v2 = sub_1004CA0A4(&qword_100808488);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v85 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringTable();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  id v14 = (char *)v72 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v72 - v16;
  __chkstk_darwin(v15);
  double v19 = (char *)v72 - v18;
  id v20 = [a1 invitation];
  self;
  id v21 = (void *)swift_dynamicCastObjCClass();
  if (!v21)
  {

    return 0;
  }
  unint64_t v82 = a1;
  id v83 = v4;
  id v77 = v21;
  unint64_t v78 = v14;
  char v79 = v11;
  uint64_t v22 = v8;
  uint64_t v23 = enum case for LocalizedStringTable.shareable(_:);
  uint64_t v25 = v22 + 104;
  id v24 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 104);
  v24(v19, enum case for LocalizedStringTable.shareable(_:), v7);
  id result = (id)PKPassKitBundle();
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v27 = result;
  id v73 = v20;
  uint64_t v84 = v5;
  id v80 = (id)localizedString(for:table:bundle:)();

  unsigned int v29 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v28 = (void *)(v22 + 8);
  unint64_t v81 = v29;
  v29(v19, v7);
  unsigned int v74 = v23;
  uint64_t v76 = v24;
  v24(v17, v23, v7);
  id result = (id)PKPassKitBundle();
  uint64_t v75 = v25;
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v30 = result;
  localizedString(for:table:bundle:)();

  uint64_t v31 = v7;
  uint64_t v32 = v7;
  id v33 = v81;
  v81(v17, v32);
  uint64_t v34 = self;
  NSString v35 = String._bridgeToObjectiveC()();
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v38 = [v34 createForIdentifier:v35 withSingularSummary:v36 pluralSummary:v37];

  sub_1004FF1C0(v82);
  id v39 = v83;
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v40 = v86;
  uint64_t v41 = v84;
  id result = (id)(*(uint64_t (**)(id, uint64_t, uint64_t))(v86 + 48))(v39, 1, v84);
  if (result == 1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v82 = v38;
  (*(void (**)(char *, id, uint64_t))(v40 + 32))(v85, v39, v41);
  uint64_t v42 = self;
  URL._bridgeToObjectiveC()(v43);
  uint64_t v45 = v44;
  id v46 = [v42 createWithURL:v44];

  uint64_t v47 = self;
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v47 createForName:v48 withTintColor:14];

  id v50 = [self createWithImage:v49 style:0];
  id v51 = [v77 displayInformation];
  id v52 = v51;
  id v53 = v79;
  id v83 = v49;
  v72[0] = v50;
  v72[1] = v28;
  id v80 = v46;
  if (v51)
  {
    id v54 = objc_msgSend(v51, "title", v72[0]);

    id v52 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;
  }
  else
  {
    unint64_t v56 = 0xE000000000000000;
  }
  uint64_t v58 = v74;
  unint64_t v59 = v78;
  uint64_t v60 = v31;
  uint64_t v61 = v31;
  uint64_t v62 = v76;
  v76(v78, v74, v61);
  sub_1004CA0A4(&qword_100808470);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_1005B4350;
  *(void *)(v63 + 56) = &type metadata for String;
  *(void *)(v63 + 64) = sub_1004FD85C();
  *(void *)(v63 + 32) = v52;
  *(void *)(v63 + 40) = v56;
  unint64_t v81 = (void (*)(char *, uint64_t))localizedString(formatKey:table:_:)();
  swift_bridgeObjectRelease();
  v33(v59, v60);
  v62(v53, v58, v60);
  id result = (id)PKPassKitBundle();
  if (result)
  {
    id v64 = result;
    localizedString(for:table:bundle:)();

    v33(v53, v60);
    id v65 = self;
    id v66 = v80;
    id v67 = v72[0];
    NSString v68 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v70 = v82;
    id v71 = [v65 createWithGroup:v82 action:v66 icon:v67 title:v68 body:v69];

    id v57 = v71;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v84);

    return v57;
  }
LABEL_15:
  __break(1u);
  return result;
}

id sub_1004FFF80(void *a1)
{
  id v1 = [a1 key];
  id v2 = [v1 identifier];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  sub_1004FF36C(v3, v5);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v8 = *(void **)(swift_unknownObjectUnownedLoadStrong() + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
    NSString v9 = String._bridgeToObjectiveC()();
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v8 pendingProvisioningOfType:v9 withUniqueIdentifier:v10];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    if (v11)
    {
      id v12 = [v11 type];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v13 && v16 == v15)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v13 && v19 == v15)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v25 & 1) == 0)
            {
              id v20 = 0;
              goto LABEL_15;
            }
          }
          self;
          uint64_t v26 = (void *)swift_dynamicCastObjCClassUnconditional();
          id v27 = v11;
          id v23 = sub_1004FF7FC(v26);
LABEL_14:
          id v20 = v23;

LABEL_15:
          return v20;
        }
      }
      swift_bridgeObjectRelease();
      self;
      id v21 = (void *)swift_dynamicCastObjCClassUnconditional();
      id v22 = v11;
      id v23 = sub_1004FC508(v21);
      goto LABEL_14;
    }
  }
  return 0;
}

uint64_t sub_100500214(void *a1)
{
  id v1 = [a1 key];
  id v2 = [v1 identifier];

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  sub_1004FF36C(v3, v5);
  uint64_t v7 = v6;
  uint64_t result = swift_bridgeObjectRelease();
  if (v7)
  {
    NSString v9 = *(void **)(swift_unknownObjectUnownedLoadStrong() + OBJC_IVAR___PDPendingProvisioningManager_databaseManager);
    NSString v10 = String._bridgeToObjectiveC()();
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v9 pendingProvisioningOfType:v10 withUniqueIdentifier:v11];

    if (v12)
    {
      sub_1004D2BB0(v12, 0);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100500388(void *a1)
{
  id v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_1005003E0()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100500418()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100500428(uint64_t a1)
{
  return a1;
}

id sub_100500450()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  [*(id *)&v0[OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_sharingChannelManager] removeDelegate:v0];
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "dealloc");
}

id sub_1005005AC()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_lock)
                          + 16);
  os_unfair_lock_lock(v1);
  id v2 = (void *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_completion);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_completion);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_completion + 8);
  void *v2 = 0;
  v2[1] = 0;
  sub_1004D0998(v3);
  sub_1004D0850(v3);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    os_unfair_lock_unlock(v1);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = sub_100500B38;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = sub_100500B10;
  }
  else
  {
    os_unfair_lock_unlock(v1);
    uint64_t v7 = 0;
  }
  id result = [*(id *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_sharingChannelManager) removeDelegate:v0];
  if (v3)
  {
    uint64_t v9 = swift_retain();
    ((void (*)(uint64_t))v7)(v9);
    sub_1004D0850((uint64_t)v7);
    return (id)sub_1004D0850((uint64_t)v7);
  }
  return result;
}

uint64_t sub_100500704(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10050072C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t type metadata accessor for PendingProvisioningSharingMessagePrecondition()
{
  return self;
}

void sub_1005007A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_completion);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_completion);
  void *v3 = a1;
  v3[1] = a2;
  sub_1004D0850(v4);
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_sharingChannelManager);
  swift_retain();
  [v5 addDelegate:v2];
  uint64_t v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  id v11 = [v6 existingForTransportIdentifier:v7];

  if ([v5 isDescriptorValid:v11])
  {
    id v8 = PDHeavyQueue();
    if (!v8)
    {
      __break(1u);
      return;
    }
    uint64_t v9 = v8;
    id v10 = [v5 handleForDescriptor:v11 queue:v8];

    if (v10)
    {
      if ([v10 hasOutstandingMessage])
      {
        [v10 invalidate];
        sub_1005005AC();
      }
    }
  }
  else
  {
    sub_1005005AC();
  }
}

uint64_t sub_100500904()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL sub_100500944()
{
  swift_getObjectType();
  uint64_t v1 = swift_dynamicCastClass();
  BOOL result = 0;
  if (v1)
  {
    BOOL v2 = *(void *)(v1 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_transportIdentifier) == *(void *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_transportIdentifier)
      && *(void *)(v1 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_transportIdentifier + 8) == *(void *)(v0 + OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_transportIdentifier + 8);
    if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100500AD8()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100500B10()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100500B38()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_100500B60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_lock;
  sub_1004CA0A4(&qword_100807820);
  uint64_t v10 = swift_allocObject();
  *(void *)&v4[v9] = v10;
  v4[OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_hasConnectivity] = 0;
  *(_DWORD *)(v10 + 16) = 0;
  id v11 = &v4[OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_completion];
  *id v11 = 0;
  v11[1] = 0;
  id v12 = &v4[OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_transportIdentifier];
  *id v12 = a1;
  v12[1] = a2;
  *(void *)&v4[OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_sharingChannelManager] = a3;
  uint64_t v13 = v4;
  swift_bridgeObjectRetain();
  id v14 = a3;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  unint64_t v25 = 0xD00000000000001BLL;
  unint64_t v26 = 0x800000010060DBA0;
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = (id)PKSharingLoggableMailboxAddress();

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  id v22 = &v13[OBJC_IVAR____TtC5passd45PendingProvisioningSharingMessagePrecondition_identifier];
  *(void *)id v22 = 0xD00000000000001BLL;
  *((void *)v22 + 1) = 0x800000010060DBA0;

  v24.receiver = v13;
  v24.super_class = ObjectType;
  return objc_msgSendSuper2(&v24, "init");
}

uint64_t sub_100500CF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7 = a3;
  id v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v9 = 0;
  uint64_t v11 = 0;
  if (a3) {
LABEL_3:
  }
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  swift_retain();
  if (a4)
  {
    id v12 = a4;
    a4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;
  }
  else
  {
    unint64_t v14 = 0xF000000000000000;
  }
  id v15 = a5;
  v8(v9, v11, v7, a4, v14, a5);

  sub_1004CEAD4((uint64_t)a4, v14);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100500E0C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = *(void (**)(uint64_t, uint64_t, void *, unint64_t, void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  swift_retain();
  if (a3)
  {
    id v12 = a3;
    a3 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    if (a4)
    {
LABEL_6:
      id v15 = a4;
      a4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v14 = 0xF000000000000000;
    if (a4) {
      goto LABEL_6;
    }
  }
  unint64_t v17 = 0xF000000000000000;
LABEL_9:
  id v18 = a5;
  v8(v9, v11, a3, v14, a4, v17, a5);

  sub_1004CEAD4((uint64_t)a4, v17);
  sub_1004CEAD4((uint64_t)a3, v14);
  swift_release();
  return swift_bridgeObjectRelease();
}

void *sub_100500F34(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  BOOL v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    sub_100504138(0, v1, 0);
    BOOL v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100504138(0, v2[2] + 1, 1);
        BOOL v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_100504138(v5 > 1, v6 + 1, 1);
        BOOL v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_100507D70(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10050105C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1004CA0A4(&qword_100808540);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PDARRUnifiedAccessSignatureProvider()
{
  return self;
}

uint64_t sub_1005011C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, void (*a7)(void, void, void), uint64_t a8)
{
  v40[1] = a8;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || !a3 || a5 >> 60 == 15 || a6)
  {
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v40[0] = a7;
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)id v33 = 138412290;
      if (a6)
      {
        swift_errorRetain();
        uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v41 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v41 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v35 = 0;
      }
      void *v34 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "PDARRUnifiedAccessSignatureProvider: Failed to generate Unified Access key with error: %@", v33, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      a7 = (void (*)(void, void, void))v40[0];
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    id v36 = a6;
    if (!a6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v37 = a7;
      id v38 = objc_allocWithZone((Class)NSError);
      NSString v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v36 = [v38 initWithDomain:v39 code:4 userInfo:0];

      a7 = v37;
    }
    swift_errorRetain();
    swift_errorRetain();
    a7(0, 0, v36);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    id v18 = (void (*)(id, void, void))a7;
    id v19 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    sub_1004E4810(a4, a5);
    id v20 = [v19 init];
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 setPublicKeyIdentifier:v21];

    Class isa = Array._bridgeToObjectiveC()().super.isa;
    [v20 setCertificateChain:isa];

    Class v23 = Data._bridgeToObjectiveC()().super.isa;
    [v20 setApplicationIdentifier:v23];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1005B4130;
    *(void *)(v24 + 32) = v20;
    uint64_t v41 = v24;
    specialized Array._endMutation()();
    id v25 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    id v26 = v20;
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = [v25 initWithKeyMaterialContents:v27];

    id v29 = v28;
    v18(v28, 0, 0);

    return sub_1004CEAD4(a4, a5);
  }
}

uint64_t sub_1005016C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7, void (*a8)(id, void, id), uint64_t a9)
{
  uint64_t v39 = a9;
  uint64_t v40 = a8;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || a4 >> 60 == 15 || a6 >> 60 == 15 || a7)
  {
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)id v33 = 138412290;
      if (a7)
      {
        swift_errorRetain();
        uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v41 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v41 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v35 = 0;
      }
      void *v34 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "PDARRUnifiedAccessSignatureProvider: Failed to generate Unified Access key with error: %@", v33, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    id v36 = a7;
    if (!a7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v37 = objc_allocWithZone((Class)NSError);
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v37, "initWithDomain:code:userInfo:", v38, 4, 0, v39);
    }
    swift_errorRetain();
    swift_errorRetain();
    v40(0, 0, v36);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    id v19 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    sub_1004EF068(a3, a4);
    sub_1004EF068(a5, a6);
    id v20 = objc_msgSend(v19, "init", v39);
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 setPublicKeyIdentifier:v21];

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v20 setPublicKey:isa];

    Class v23 = Data._bridgeToObjectiveC()().super.isa;
    [v20 setApplicationIdentifier:v23];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1005B4130;
    *(void *)(v24 + 32) = v20;
    uint64_t v41 = v24;
    specialized Array._endMutation()();
    id v25 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    id v26 = v20;
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = [v25 initWithKeyMaterialContents:v27];

    id v29 = v28;
    v40(v28, 0, 0);

    sub_1004CEAD4(a5, a6);
    return sub_1004CEAD4(a3, a4);
  }
}

uint64_t sub_100501BEC(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.auxiliaryCapability.getter();
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    long long v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)long long v8 = 136315138;
    uint64_t v14 = v9;
    if (a1) {
      uint64_t v10 = 0x6673736563637553;
    }
    else {
      uint64_t v10 = 0x742064656C696146;
    }
    if (a1) {
      unint64_t v11 = 0xEC000000796C6C75;
    }
    else {
      unint64_t v11 = 0xE90000000000006FLL;
    }
    uint64_t v13 = sub_1004F7DDC(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "PDARRUnifiedAccessSignatureProvider: %s revoked subcredentials in key material", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_100501F7C(void *a1, int a2, void *a3, void *a4, void *aBlock, void (*a6)(id, id, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  a6(v11, v12, v10);
  _Block_release(v10);
  _Block_release(v10);
}

uint64_t sub_100502104(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  id v9 = [a1 paymentNetworkIdentifier];
  uint64_t v10 = 133;
  if ((a3 & 1) == 0) {
    uint64_t v10 = 130;
  }
  if (v9 == (id)v10 && (id v11 = [a2 pairedReaderIdentifier]) != 0)
  {
    id v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    if (v13 == a4 && v15 == a5) {
      char v17 = 1;
    }
    else {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

void sub_1005021DC(uint64_t a1, void *a2, void (*a3)(void, void), uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v87 = a6;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || a2)
  {
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v87 = v11;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v82 = a4;
      id v83 = a3;
      id v18 = (uint8_t *)v17;
      v88[0] = swift_slowAlloc();
      *(_DWORD *)id v18 = 136315138;
      uint64_t v89 = a2;
      swift_errorRetain();
      sub_1004CA0A4((uint64_t *)&unk_100808308);
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v89 = (void *)sub_1004F7DDC(v19, v20, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "PDARRUnifiedAccessSignatureProvider: Failed to fetch credentials with error: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v83;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v87);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
    a3(0, 0);
    return;
  }
  uint64_t v82 = a4;
  id v83 = a3;
  int v21 = a5 & 1;
  uint64_t v89 = &_swiftEmptyDictionarySingleton;
  uint64_t v22 = a1 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v27 = 0;
  if (!v25) {
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v28 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  for (unint64_t i = v28 | (v27 << 6); ; unint64_t i = __clz(__rbit64(v31)) + (v27 << 6))
  {
    id v33 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v34 = v33[1];
    uint64_t v35 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    v88[0] = *v33;
    v88[1] = v34;
    v88[2] = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100502AFC((unint64_t)&v89, v88, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_10;
    }
LABEL_11:
    BOOL v30 = __OFADD__(v27++, 1);
    if (v30)
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __break(1u);
      return;
    }
    if (v27 >= v26) {
      goto LABEL_32;
    }
    unint64_t v31 = *(void *)(v22 + 8 * v27);
    if (!v31) {
      break;
    }
LABEL_25:
    unint64_t v25 = (v31 - 1) & v31;
  }
  int64_t v32 = v27 + 1;
  if (v27 + 1 >= v26) {
    goto LABEL_32;
  }
  unint64_t v31 = *(void *)(v22 + 8 * v32);
  if (v31) {
    goto LABEL_24;
  }
  int64_t v32 = v27 + 2;
  if (v27 + 2 >= v26) {
    goto LABEL_32;
  }
  unint64_t v31 = *(void *)(v22 + 8 * v32);
  if (v31) {
    goto LABEL_24;
  }
  int64_t v32 = v27 + 3;
  if (v27 + 3 >= v26) {
    goto LABEL_32;
  }
  unint64_t v31 = *(void *)(v22 + 8 * v32);
  if (v31) {
    goto LABEL_24;
  }
  int64_t v32 = v27 + 4;
  if (v27 + 4 >= v26) {
    goto LABEL_32;
  }
  unint64_t v31 = *(void *)(v22 + 8 * v32);
  if (v31)
  {
LABEL_24:
    int64_t v27 = v32;
    goto LABEL_25;
  }
  int64_t v32 = v27 + 5;
  if (v27 + 5 < v26)
  {
    unint64_t v31 = *(void *)(v22 + 8 * v32);
    if (!v31)
    {
      while (1)
      {
        int64_t v27 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          goto LABEL_76;
        }
        if (v27 >= v26) {
          goto LABEL_32;
        }
        unint64_t v31 = *(void *)(v22 + 8 * v27);
        ++v32;
        if (v31) {
          goto LABEL_25;
        }
      }
    }
    goto LABEL_24;
  }
LABEL_32:
  swift_release();
  id v36 = v89;
  v88[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v37 = *(void *)(v87 + 56);
  uint64_t v84 = v87 + 56;
  uint64_t v38 = 1 << *(unsigned char *)(v87 + 32);
  uint64_t v39 = -1;
  if (v38 < 64) {
    uint64_t v39 = ~(-1 << v38);
  }
  unint64_t v40 = v39 & v37;
  int64_t v85 = (unint64_t)(v38 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v41 = 0;
  uint64_t v86 = v36;
  if (!v40) {
    goto LABEL_37;
  }
LABEL_35:
  unint64_t v42 = __clz(__rbit64(v40));
  v40 &= v40 - 1;
  for (unint64_t j = v42 | (v41 << 6); v36[2]; unint64_t j = __clz(__rbit64(v44)) + (v41 << 6))
  {
    id v46 = (uint64_t *)(*(void *)(v87 + 48) + 32 * j);
    uint64_t v47 = v46[3];
    uint64_t v48 = v46[2];
    uint64_t v49 = *v46;
    uint64_t v50 = v46[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1004EA198(v49, v50, v48, v47);
    if ((v52 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_71;
    }
    id v53 = *(id *)(v36[7] + 8 * v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v54 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
    id v55 = [v53 identifier];
    [v54 setPublicKeyIdentifier:v55];

    if (v21)
    {
      Class isa = (Class)[v53 transactionKey];
      if (isa)
      {
        uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v68 = v67;

        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1004CEAE8(v66, v68);
      }
      [v54 setPublicKey:isa];

      id v69 = [v53 appletIdentifier];
      if (!v69) {
        goto LABEL_78;
      }
      unint64_t v70 = v69;
      id v71 = objc_msgSend(v69, "pk_decodeHexadecimal");

      if (v71)
      {
        uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v74 = v73;

        v63.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1004CEAE8(v72, v74);
      }
      else
      {
        v63.super.Class isa = 0;
      }
      id v36 = v86;
    }
    else
    {
      id v56 = [v53 transactionKeyCertificateChain];
      [v54 setCertificateChain:v56];

      id v57 = [v53 appletIdentifier];
      if (!v57) {
        goto LABEL_77;
      }
      uint64_t v58 = v57;
      id v59 = objc_msgSend(v57, "pk_decodeHexadecimal");

      if (v59)
      {
        uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v62 = v61;

        v63.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v64 = v60;
        id v36 = v86;
        sub_1004CEAE8(v64, v62);
      }
      else
      {
        v63.super.Class isa = 0;
      }
    }
    [v54 setApplicationIdentifier:v63.super.isa];

    id v75 = v54;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v88[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v88[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    if (v40) {
      goto LABEL_35;
    }
LABEL_37:
    BOOL v30 = __OFADD__(v41++, 1);
    if (v30) {
      goto LABEL_74;
    }
    if (v41 >= v85)
    {
LABEL_72:
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v76 = (void (*)(uint64_t, id))v83;
      id v77 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
      sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
      Class v78 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v79 = [v77 initWithKeyMaterialContents:v78];

      id v80 = v79;
      v76(1, v79);

      return;
    }
    unint64_t v44 = *(void *)(v84 + 8 * v41);
    if (!v44)
    {
      int64_t v45 = v41 + 1;
      if (v41 + 1 >= v85) {
        goto LABEL_72;
      }
      unint64_t v44 = *(void *)(v84 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v41 + 2;
        if (v41 + 2 >= v85) {
          goto LABEL_72;
        }
        unint64_t v44 = *(void *)(v84 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v41 + 3;
          if (v41 + 3 >= v85) {
            goto LABEL_72;
          }
          unint64_t v44 = *(void *)(v84 + 8 * v45);
          if (!v44)
          {
            while (1)
            {
              int64_t v41 = v45 + 1;
              if (__OFADD__(v45, 1)) {
                goto LABEL_75;
              }
              if (v41 >= v85) {
                goto LABEL_72;
              }
              unint64_t v44 = *(void *)(v84 + 8 * v41);
              ++v45;
              if (v44) {
                goto LABEL_47;
              }
            }
          }
        }
      }
      int64_t v41 = v45;
    }
LABEL_47:
    unint64_t v40 = (v44 - 1) & v44;
  }
  swift_bridgeObjectRelease();
  swift_release();
LABEL_71:
  swift_bridgeObjectRelease();
  v83(2, 0);
}

uint64_t sub_100502AFC(unint64_t a1, uint64_t *a2, char a3)
{
  LOBYTE(v3) = a3;
  unint64_t v5 = (void *)a2[1];
  uint64_t v39 = *a2;
  unint64_t isUniquelyReferenced_nonNull_native = a2[2];
  if (isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_3;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_30;
  }
LABEL_3:
  unint64_t v8 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v9 = 133;
  if ((v3 & 1) == 0) {
    uint64_t v9 = 130;
  }
  id v38 = (id)v9;
  uint64_t v10 = 4;
  uint64_t v35 = (void *)a1;
  unint64_t v36 = isUniquelyReferenced_nonNull_native;
  unint64_t v33 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v34 = v7;
  while (1)
  {
    if (v8) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v10);
    }
    uint64_t v3 = v11;
    uint64_t v12 = v10 - 3;
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if ([v11 credentialType] == v38) {
      break;
    }

LABEL_7:
    ++v10;
    if (v12 == v7) {
      goto LABEL_30;
    }
  }
  id v13 = [v3 identifier];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    swift_bridgeObjectRetain();
    id v37 = v3;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = *(void *)a1;
    unint64_t v40 = *(void *)a1;
    *(void *)a1 = 0x8000000000000000;
    uint64_t v3 = v5;
    a1 = sub_1004EA198(v39, v5, v15, v17);
    uint64_t v20 = *(void *)(v18 + 16);
    BOOL v21 = (v19 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_27;
    }
    unint64_t v5 = v19;
    if (*(void *)(v18 + 24) < v22)
    {
      sub_1005036FC(v22, isUniquelyReferenced_nonNull_native, &qword_100808548);
      uint64_t v23 = sub_1004EA198(v39, v3, v15, v17);
      if ((v5 & 1) != (v24 & 1)) {
        goto LABEL_32;
      }
      a1 = v23;
      unint64_t isUniquelyReferenced_nonNull_native = v40;
      if ((v5 & 1) == 0) {
        goto LABEL_23;
      }
LABEL_21:
      uint64_t v25 = *(void *)(isUniquelyReferenced_nonNull_native + 56);
      uint64_t v26 = 8 * a1;

      int64_t v27 = v37;
      *(void *)(v25 + v26) = v37;
      unint64_t v5 = v3;
LABEL_25:
      a1 = (unint64_t)v35;
      *uint64_t v35 = isUniquelyReferenced_nonNull_native;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t isUniquelyReferenced_nonNull_native = v36;
      unint64_t v8 = v33;
      uint64_t v7 = v34;
      goto LABEL_7;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      unint64_t isUniquelyReferenced_nonNull_native = v40;
      if (v19) {
        goto LABEL_21;
      }
    }
    else
    {
      sub_100503F54(&qword_100808548);
      unint64_t isUniquelyReferenced_nonNull_native = v40;
      if (v5) {
        goto LABEL_21;
      }
    }
LABEL_23:
    *(void *)(isUniquelyReferenced_nonNull_native + 8 * (a1 >> 6) + 64) |= 1 << a1;
    unint64_t v28 = (void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 32 * a1);
    *unint64_t v28 = v39;
    v28[1] = v3;
    void v28[2] = v15;
    v28[3] = v17;
    int64_t v27 = v37;
    *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * a1) = v37;
    uint64_t v29 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_28;
    }
    unint64_t v5 = v3;
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  __break(1u);
LABEL_32:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100502E24(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1004CA0A4(&qword_100808570);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v29[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v29 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      long long v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1005030FC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1004CA0A4((uint64_t *)&unk_100808560);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int64_t v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v31 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        unint64_t v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v21 = v32[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int64_t v32 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                unint64_t v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1005033D8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1004CA0A4(&qword_100808190);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1005036F0(uint64_t a1, char a2)
{
  return sub_1005036FC(a1, a2, &qword_100808558);
}

uint64_t sub_1005036FC(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1004CA0A4(a3);
  char v40 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    id v38 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v6 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v14 << 6);
      }
      else
      {
        int64_t v22 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v14;
        if (!v23)
        {
          int64_t v14 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v14];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v4 = v3;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v38 = -1 << v36;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v14 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v14];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v6 + 48) + 32 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v33 = v29[2];
      uint64_t v32 = v29[3];
      int64_t v34 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v35 = v34;
      }
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      unint64_t v19 = (void *)(*(void *)(v8 + 48) + 32 * v18);
      *unint64_t v19 = v31;
      v19[1] = v30;
      id v19[2] = v33;
      v19[3] = v32;
      *(void *)(*(void *)(v8 + 56) + 8 * v18) = v34;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v4 = v8;
  return result;
}

void *sub_100503A40()
{
  int64_t v1 = v0;
  sub_1004CA0A4(&qword_100808570);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *int64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100503BEC()
{
  int64_t v1 = v0;
  sub_1004CA0A4((uint64_t *)&unk_100808560);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *int64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100503D90()
{
  int64_t v1 = v0;
  sub_1004CA0A4(&qword_100808190);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *int64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100503F48()
{
  return sub_100503F54(&qword_100808558);
}

id sub_100503F54(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1004CA0A4(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v14) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v7 + 8 * v25);
    ++v10;
    if (!v26)
    {
      int64_t v10 = v25 + 1;
      if (v25 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v7 + 8 * v10);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v16 = __clz(__rbit64(v26)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 32 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 32 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = v18[2];
    uint64_t v21 = v18[3];
    uint64_t v22 = 8 * v16;
    unint64_t v23 = *(void **)(*(void *)(v3 + 56) + v22);
    int64_t v24 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v24 = *v18;
    v24[1] = v19;
    void v24[2] = v20;
    v24[3] = v21;
    *(void *)(*(void *)(v5 + 56) + v22) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = v23;
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v14) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v7 + 8 * v27);
  if (v26)
  {
    int64_t v10 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v7 + 8 * v10);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100504118(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100504158(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100504138(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1005042C4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100504158(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1004CA0A4(&qword_100808550);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1005042C4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1004CA0A4(&qword_100808538);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100504434(void *a1, void *a2, const void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  int64_t v7 = *(void (***)(void, void))(v6 - 8);
  uint64_t v85 = v6;
  uint64_t v86 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  int64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)&v85 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v85 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v85 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v85 - v21;
  __chkstk_darwin(v20);
  int64_t v24 = (char *)&v85 - v23;
  uint64_t v88 = swift_allocObject();
  *(void *)(v88 + 16) = a3;
  self;
  int64_t v25 = (void *)swift_dynamicCastObjCClass();
  uint64_t v87 = a3;
  _Block_copy(a3);
  if (!v25)
  {
    static Logger.auxiliaryCapability.getter();
    int64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "PDARRUnifiedAccessSignatureProvider: Mismatched requirement type", v47, 2u);
      swift_slowDealloc();
    }

    ((void (**)(char *, uint64_t))v86)[1](v24, v85);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v48 = objc_allocWithZone((Class)NSError);
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v50 = [v48 initWithDomain:v49 code:4 userInfo:0];

    id isa = (id)_convertErrorToNSError(_:)();
    (*((void (**)(const void *, void, void, id))v87 + 2))(v87, 0, 0, isa);
    swift_release();
    goto LABEL_35;
  }
  id v26 = a1;
  id v27 = [a2 secureElement];
  if (!v27)
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      id v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "PDARRUnifiedAccessSignatureProvider: Missing secure element", v53, 2u);
      swift_slowDealloc();
    }

    ((void (**)(char *, uint64_t))v86)[1](v22, v85);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v54 = objc_allocWithZone((Class)NSError);
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v50 = [v54 initWithDomain:v55 code:4 userInfo:0];

    id isa = (id)_convertErrorToNSError(_:)();
    (*((void (**)(const void *, void, void, id))v87 + 2))(v87, 0, 0, isa);
    swift_release();

    goto LABEL_35;
  }
  uint64_t v28 = v27;
  id v29 = [v25 type];
  if (v29 == (id)1)
  {
    if ((PKAuxiliaryCapabilityHydraUnifiedAccessEnabled() & 1) == 0)
    {
      static Logger.auxiliaryCapability.getter();
      id v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        unint64_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "PDARRUnifiedAccessSignatureProvider: Disabled", v73, 2u);
        swift_slowDealloc();
      }

      ((void (**)(char *, uint64_t))v86)[1](v16, v85);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v74 = objc_allocWithZone((Class)NSError);
      NSString v75 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v50 = [v74 initWithDomain:v75 code:4 userInfo:0];

      id isa = (id)_convertErrorToNSError(_:)();
      (*((void (**)(const void *, void, void, id))v87 + 2))(v87, 0, 0, isa);
      swift_release();

      goto LABEL_34;
    }
    id v56 = [v25 keyCreationMetadata];
    if (v56)
    {
      id v57 = v56;
      id v58 = [v56 signatureUnifiedAccessHydra];

      if (v58)
      {
        id v59 = [v58 serverParameters];
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        id isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v60 = swift_allocObject();
        uint64_t v61 = v88;
        *(void *)(v60 + 16) = sub_1004DFD70;
        *(void *)(v60 + 24) = v61;
        id v93 = sub_100507E80;
        uint64_t v94 = v60;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v90 = 1107296256;
        uint64_t v91 = sub_100500CF8;
        uint64_t v92 = &unk_100758B80;
        unint64_t v62 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v28 generateTransactionKeyWithParameters:isa withCompletion:v62];

        _Block_release(v62);
        swift_release();

        goto LABEL_36;
      }
    }
    static Logger.auxiliaryCapability.getter();
    unint64_t v67 = v26;
    id v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 134217984;
      uint64_t aBlock = (void **)[v25 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v80, v81, "PDARRUnifiedAccessSignatureProvider: Missing key creation metadata for requirement type: %lu", v82, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      id v80 = v67;
    }

    ((void (**)(char *, uint64_t))v86)[1](v13, v85);
LABEL_33:
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v83 = objc_allocWithZone((Class)NSError);
    NSString v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v50 = [v83 initWithDomain:v84 code:4 userInfo:0];

    id isa = (id)_convertErrorToNSError(_:)();
    (*((void (**)(const void *, void, void, id))v87 + 2))(v87, 0, 0, isa);
    swift_release();

LABEL_34:
LABEL_35:

    goto LABEL_36;
  }
  if (v29 == (id)2)
  {
    id v30 = [v25 keyCreationMetadata];
    if (v30)
    {
      uint64_t v31 = v30;
      id isa = [v30 signatureUnifiedAccessHome];

      if (isa)
      {
        id v33 = [isa readerIdentifier];
        uint64_t v87 = (const void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;

        id v36 = [isa readerPublicKey];
        uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v86 = (void (**)(void, void))v26;
        unint64_t v39 = v38;

        Class v40 = Data._bridgeToObjectiveC()().super.isa;
        Class v41 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v42 = swift_allocObject();
        uint64_t v43 = v88;
        *(void *)(v42 + 16) = sub_1004DFD70;
        *(void *)(v42 + 24) = v43;
        id v93 = sub_100507E58;
        uint64_t v94 = v42;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v90 = 1107296256;
        uint64_t v91 = sub_100500E0C;
        uint64_t v92 = &unk_100758B30;
        unint64_t v44 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [v28 generateTransactionKeyWithReaderIdentifier:v40 readerPublicKey:v41 withCompletion:v44];

        _Block_release(v44);
        sub_1004CEAE8(v37, v39);
        sub_1004CEAE8((uint64_t)v87, v35);
        swift_release();
        goto LABEL_36;
      }
    }
    static Logger.auxiliaryCapability.getter();
    unint64_t v67 = v26;
    unint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      unint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v70 = 134217984;
      uint64_t aBlock = (void **)[v25 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v68, v69, "PDARRUnifiedAccessSignatureProvider: Missing key creation metadata for requirement type: %lu", v70, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      unint64_t v68 = v67;
    }

    ((void (**)(char *, uint64_t))v86)[1](v10, v85);
    goto LABEL_33;
  }
  static Logger.auxiliaryCapability.getter();
  NSData v63 = v26;
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 134217984;
    uint64_t aBlock = (void **)[v25 type];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v64, v65, "PDARRUnifiedAccessSignatureProvider: Unknown requirement type: %lu", v66, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    uint64_t v64 = v63;
  }

  ((void (**)(char *, uint64_t))v86)[1](v19, v85);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v76 = objc_allocWithZone((Class)NSError);
  NSString v77 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v78 = [v76 initWithDomain:v77 code:4 userInfo:0];

  id v79 = v78;
  id isa = (id)_convertErrorToNSError(_:)();
  (*((void (**)(const void *, void, void, id))v87 + 2))(v87, 0, 0, isa);
  swift_release();

LABEL_36:
}

void sub_10050510C(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 contents];
  if (v7)
  {
    uint64_t v8 = v7;
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v10 = sub_1004EF0A4(v9, (SEL *)&selRef_publicKeyIdentifier);
    swift_bridgeObjectRelease();
    if (*((void *)v10 + 2))
    {
      uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC5passd35PDARRUnifiedAccessSignatureProvider_subcredentialManager);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      aBlock[4] = sub_100501BEC;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100509C4C;
      aBlock[3] = &unk_100758AB8;
      unint64_t v13 = _Block_copy(aBlock);
      [v11 revokeSubcredentialsForIdentifiers:isa withCompletion:v13];
      _Block_release(v13);

      return;
    }
    swift_bridgeObjectRelease();
  }
  static Logger.auxiliaryCapability.getter();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "PDARRUnifiedAccessSignatureProvider: No key material to remove", v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_10050537C(char a1, uint64_t a2, uint64_t a3, void *a4, const void *a5)
{
  uint64_t v93 = a3;
  uint64_t v92 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v92 - 8);
  uint64_t v9 = __chkstk_darwin(v92);
  uint64_t v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v89 = (char *)&v88 - v13;
  __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v88 - v14;
  _Block_copy(a5);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1004E4640;
  *(void *)(v17 + 24) = v16;
  uint64_t v94 = v17;
  _Block_copy(a5);
  _Block_copy(a5);
  _Block_copy(a5);
  uint64_t v96 = (void (**)(void, void))a5;
  _Block_copy(a5);
  uint64_t v95 = v16;
  swift_retain();
  id v97 = [a4 secureElement];
  if (!v97)
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      int64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "PDARRUnifiedAccessSignatureProvider: Missing secure element", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v15, v92);
    int64_t v25 = v96;
    v96[2](v96, 0);
    swift_release();
    goto LABEL_76;
  }
  id v90 = [a4 pass];
  if (!v90)
  {
    if (v93)
    {
      static Logger.auxiliaryCapability.getter();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "PDARRUnifiedAccessSignatureProvider: No existing key materials for requirement (pass doesn't exist)", v28, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v91 + 8))(v11, v92);
      int64_t v25 = v96;
      v96[2](v96, 2);
    }
    else
    {
      int64_t v25 = v96;
      v96[2](v96, 0);
    }
    swift_release();
    swift_release();

    goto LABEL_77;
  }
  LODWORD(v18) = a1 & 1;
  uint64_t v19 = v93;
  if (v93)
  {
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 16) = v18;
    *(void *)(v20 + 24) = a2;
    *(void *)(v20 + 32) = v19;
    uint64_t v21 = sub_100507F18;
  }
  else
  {
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 16) = v18;
    uint64_t v21 = sub_100507D6C;
  }
  id v29 = v21;
  uint64_t v115 = _swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  id v30 = [v97 secureElementIdentifiers];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100500F34(v32);
    swift_bridgeObjectRelease();
    v33.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v33.super.Class isa = 0;
  }
  id v34 = [v90 paymentApplicationsForSecureElementIdentifiers:v33.super.isa];

  if (!v34)
  {
LABEL_81:
    swift_release();
    uint64_t v87 = v96;
    _Block_release(v96);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    __break(1u);
    return;
  }
  sub_1004DE1C0(0, &qword_100808300);
  unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v100 = v35;
  if (v35 >> 62) {
    goto LABEL_68;
  }
  uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v36)
  {
LABEL_69:
    unint64_t v73 = v100;
    swift_bridgeObjectRelease();
    id v74 = _swiftEmptySetSingleton;
    if (!_swiftEmptySetSingleton[2]) {
      goto LABEL_70;
    }
LABEL_62:
    NSString v75 = sub_1004EF0A4(v73, (SEL *)&selRef_applicationIdentifier);
    swift_bridgeObjectRelease();
    sub_100513974((uint64_t)v75);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v77 = swift_allocObject();
    uint64_t v78 = v94;
    *(void *)(v77 + 16) = sub_1004F4890;
    *(void *)(v77 + 24) = v78;
    *(unsigned char *)(v77 + 32) = v18;
    *(void *)(v77 + 40) = v74;
    aBlock[4] = (Swift::Int)sub_100507D40;
    aBlock[5] = v77;
    aBlock[0] = (Swift::Int)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (Swift::Int)sub_10050105C;
    aBlock[3] = (Swift::Int)&unk_100758A68;
    id v79 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v80 = v97;
    [v97 appletCredentialsForAIDs:isa completion:v79];
    swift_release();
    _Block_release(v79);
    swift_release();
    swift_release();

    int64_t v25 = v96;
    goto LABEL_77;
  }
LABEL_19:
  unint64_t v37 = 0;
  unint64_t v103 = v100 & 0xC000000000000001;
  uint64_t v99 = v100 & 0xFFFFFFFFFFFFFF8;
  unint64_t v98 = v100 + 32;
  os_log_type_t v106 = (char *)&type metadata for Swift.AnyObject + 8;
  int v102 = v18;
  uint64_t v101 = v36;
  do
  {
    if (v103)
    {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v37 >= *(void *)(v99 + 16)) {
        goto LABEL_67;
      }
      id v38 = *(id *)(v98 + 8 * v37);
    }
    unint64_t v39 = v38;
    BOOL v40 = __OFADD__(v37, 1);
    unint64_t v41 = v37 + 1;
    if (v40) {
      goto LABEL_66;
    }
    id v42 = [v38 subcredentials];
    if (!v42) {
      goto LABEL_80;
    }
    uint64_t v43 = v42;
    unint64_t v105 = v41;
    uint64_t v44 = sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v107 = v44;
    if ((v45 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v45 = v116;
      uint64_t v110 = v117;
      uint64_t v46 = v118;
      uint64_t v47 = v119;
      unint64_t v48 = v120;
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v49 = -1 << *(unsigned char *)(v45 + 32);
      uint64_t v50 = *(void *)(v45 + 56);
      uint64_t v110 = v45 + 56;
      uint64_t v51 = ~v49;
      uint64_t v52 = -v49;
      if (v52 < 64) {
        uint64_t v53 = ~(-1 << v52);
      }
      else {
        uint64_t v53 = -1;
      }
      unint64_t v48 = v53 & v50;
      uint64_t v46 = v51;
    }
    uint64_t v108 = v45 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v104 = v46;
    int64_t v109 = (unint64_t)(v46 + 64) >> 6;
    uint64_t v111 = v45;
    if (v45 < 0)
    {
LABEL_54:
      uint64_t v60 = __CocoaSet.Iterator.next()();
      if (!v60) {
        goto LABEL_20;
      }
      uint64_t v113 = v60;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v59 = (id)aBlock[0];
      swift_unknownObjectRelease();
      uint64_t v55 = v47;
      uint64_t v18 = v48;
      if (!v59) {
        goto LABEL_20;
      }
      goto LABEL_56;
    }
    while (v48)
    {
      uint64_t v18 = (v48 - 1) & v48;
      unint64_t v54 = __clz(__rbit64(v48)) | (v47 << 6);
      uint64_t v55 = v47;
LABEL_52:
      id v59 = *(id *)(*(void *)(v45 + 48) + 8 * v54);
      if (!v59) {
        goto LABEL_20;
      }
LABEL_56:
      if (((uint64_t (*)(void *, id))v29)(v39, v59))
      {
        unint64_t v112 = v18;
        uint64_t v61 = v39;
        id v62 = [v39 applicationIdentifier];
        if (!v62)
        {
          swift_release();
          NSString v84 = v96;
          _Block_release(v96);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          __break(1u);
LABEL_79:
          swift_release();
          uint64_t v85 = v96;
          _Block_release(v96);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          __break(1u);
LABEL_80:
          swift_release();
          uint64_t v86 = v96;
          _Block_release(v96);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          __break(1u);
          goto LABEL_81;
        }
        NSData v63 = v62;
        uint64_t v64 = v29;
        uint64_t v18 = v20;
        Swift::Int v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v67 = v66;

        id v68 = [v59 identifier];
        if (!v68) {
          goto LABEL_79;
        }
        os_log_type_t v69 = v68;
        Swift::Int v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v72 = v71;

        sub_100512040(aBlock, v65, v67, v70, v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v47 = v55;
        uint64_t v20 = v18;
        id v29 = v64;
        unint64_t v39 = v61;
        uint64_t v45 = v111;
        unint64_t v48 = v112;
        if (v111 < 0) {
          goto LABEL_54;
        }
      }
      else
      {

        uint64_t v47 = v55;
        unint64_t v48 = v18;
        if (v45 < 0) {
          goto LABEL_54;
        }
      }
    }
    int64_t v56 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      if (!v36) {
        goto LABEL_69;
      }
      goto LABEL_19;
    }
    if (v56 < v109)
    {
      unint64_t v57 = *(void *)(v110 + 8 * v56);
      uint64_t v55 = v47 + 1;
      if (v57) {
        goto LABEL_51;
      }
      uint64_t v55 = v47 + 2;
      if (v47 + 2 >= v109) {
        goto LABEL_20;
      }
      unint64_t v57 = *(void *)(v110 + 8 * v55);
      if (v57) {
        goto LABEL_51;
      }
      uint64_t v55 = v47 + 3;
      if (v47 + 3 >= v109) {
        goto LABEL_20;
      }
      unint64_t v57 = *(void *)(v110 + 8 * v55);
      if (v57) {
        goto LABEL_51;
      }
      uint64_t v55 = v47 + 4;
      if (v47 + 4 >= v109) {
        goto LABEL_20;
      }
      unint64_t v57 = *(void *)(v110 + 8 * v55);
      if (v57)
      {
LABEL_51:
        uint64_t v18 = (v57 - 1) & v57;
        unint64_t v54 = __clz(__rbit64(v57)) + (v55 << 6);
        goto LABEL_52;
      }
      uint64_t v58 = v47 + 5;
      while (v109 != v58)
      {
        unint64_t v57 = *(void *)(v110 + 8 * v58++);
        if (v57)
        {
          uint64_t v55 = v58 - 1;
          goto LABEL_51;
        }
      }
    }
LABEL_20:
    sub_1004DC1A8();

    unint64_t v37 = v105;
    LODWORD(v18) = v102;
  }
  while (v105 != v101);
  unint64_t v73 = v100;
  swift_bridgeObjectRelease();
  id v74 = v115;
  if (v115[2]) {
    goto LABEL_62;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v93)
  {
    static Logger.auxiliaryCapability.getter();
    os_log_type_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      id v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "PDARRUnifiedAccessSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)", v83, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v92);
    int64_t v25 = v96;
    v96[2](v96, 2);
  }
  else
  {
    int64_t v25 = v96;
    v96[2](v96, 1);
  }
  swift_release();
  swift_release();

LABEL_76:
  swift_release();
LABEL_77:
  _Block_release(v25);
  _Block_release(v25);
  _Block_release(v25);
  _Block_release(v25);
}

void sub_1005060E4(void *a1, void *a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v40 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - v17;
  self;
  uint64_t v19 = (void *)swift_dynamicCastObjCClass();
  _Block_copy(a3);
  if (v19)
  {
    id v20 = a1;
    id v21 = [a2 pass];
    if (v21)
    {
      uint64_t v22 = v21;
      id v23 = [a2 secureElement];
      if (v23)
      {
        int64_t v24 = v23;
        id v25 = [v19 type];
        if (v25 == (id)1)
        {
          char v26 = 0;
LABEL_17:
          _Block_copy(a3);
          sub_10050537C(v26, 0, 0, a2, a3);
          _Block_release(a3);

          goto LABEL_24;
        }
        if (v25 == (id)2)
        {
          char v26 = 1;
          goto LABEL_17;
        }
        static Logger.auxiliaryCapability.getter();
        uint64_t v36 = v20;
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        int v42 = v38;
        if (os_log_type_enabled(v37, v38))
        {
          unint64_t v39 = (uint8_t *)swift_slowAlloc();
          unint64_t v41 = v36;
          *(_DWORD *)unint64_t v39 = 134217984;
          id v43 = objc_msgSend(v19, "type", v39 + 4);
          uint64_t v36 = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v42, "PDARRUnifiedAccessSignatureProvider: Unknown requirement type: %lu", v39, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          unint64_t v37 = v36;
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        a3[2](a3, 0);
      }
      else
      {
        static Logger.auxiliaryCapability.getter();
        NSArray v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          unint64_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v35 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "PDARRUnifiedAccessSignatureProvider: Missing secure element", v35, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
        a3[2](a3, 0);
      }
    }
    else
    {
      static Logger.auxiliaryCapability.getter();
      id v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "PDARRUnifiedAccessSignatureProvider: Context has no pass", v32, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
      a3[2](a3, 2);
    }
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "PDARRUnifiedAccessSignatureProvider: Mismatched requirement type", v29, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
    a3[2](a3, 0);
  }
LABEL_24:
  _Block_release(a3);
}

void sub_100506628(char a1, uint64_t a2, uint64_t a3, void *a4, const void *a5)
{
  uint64_t v93 = a3;
  uint64_t v92 = type metadata accessor for Logger();
  uint64_t v91 = *(void *)(v92 - 8);
  uint64_t v9 = __chkstk_darwin(v92);
  uint64_t v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v89 = (char *)&v88 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v88 - v14;
  _Block_copy(a5);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1004E45D0;
  *(void *)(v17 + 24) = v16;
  uint64_t v94 = v17;
  _Block_copy(a5);
  _Block_copy(a5);
  _Block_copy(a5);
  uint64_t v96 = (void (**)(void, void, void))a5;
  _Block_copy(a5);
  uint64_t v95 = v16;
  swift_retain();
  id v97 = [a4 secureElement];
  if (!v97)
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      int64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "PDARRUnifiedAccessSignatureProvider: Missing secure element", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v15, v92);
    id v25 = v96;
    v96[2](v96, 0, 0);
    swift_release();
    goto LABEL_76;
  }
  id v90 = [a4 pass];
  if (!v90)
  {
    if (v93)
    {
      static Logger.auxiliaryCapability.getter();
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "PDARRUnifiedAccessSignatureProvider: No existing key materials for requirement (pass doesn't exist)", v28, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v91 + 8))(v11, v92);
      id v25 = v96;
      v96[2](v96, 2, 0);
    }
    else
    {
      id v25 = v96;
      v96[2](v96, 0, 0);
    }
    swift_release();
    swift_release();

    goto LABEL_77;
  }
  LODWORD(v18) = a1 & 1;
  uint64_t v19 = v93;
  if (v93)
  {
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 16) = v18;
    *(void *)(v20 + 24) = a2;
    *(void *)(v20 + 32) = v19;
    id v21 = sub_100507D30;
  }
  else
  {
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 16) = v18;
    id v21 = (uint64_t (*)(void *, void *))sub_100507D6C;
  }
  id v29 = v21;
  uint64_t v115 = _swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  id v30 = [v97 secureElementIdentifiers];
  if (v30)
  {
    os_log_type_t v31 = v30;
    uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100500F34(v32);
    swift_bridgeObjectRelease();
    v33.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v33.super.Class isa = 0;
  }
  id v34 = [v90 paymentApplicationsForSecureElementIdentifiers:v33.super.isa];

  if (!v34)
  {
LABEL_81:
    swift_release();
    uint64_t v87 = v96;
    _Block_release(v96);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    _Block_release(v87);
    __break(1u);
    return;
  }
  sub_1004DE1C0(0, &qword_100808300);
  unint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v100 = v35;
  if (v35 >> 62) {
    goto LABEL_68;
  }
  uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v36)
  {
LABEL_69:
    unint64_t v73 = v100;
    swift_bridgeObjectRelease();
    id v74 = _swiftEmptySetSingleton;
    if (!_swiftEmptySetSingleton[2]) {
      goto LABEL_70;
    }
LABEL_62:
    NSString v75 = sub_1004EF0A4(v73, (SEL *)&selRef_applicationIdentifier);
    swift_bridgeObjectRelease();
    sub_100513974((uint64_t)v75);
    swift_bridgeObjectRelease();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v77 = swift_allocObject();
    uint64_t v78 = v94;
    *(void *)(v77 + 16) = sub_1004F47B8;
    *(void *)(v77 + 24) = v78;
    *(unsigned char *)(v77 + 32) = v18;
    *(void *)(v77 + 40) = v74;
    aBlock[4] = (Swift::Int)sub_100507D40;
    aBlock[5] = v77;
    aBlock[0] = (Swift::Int)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (Swift::Int)sub_10050105C;
    aBlock[3] = (Swift::Int)&unk_100758978;
    id v79 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v80 = v97;
    [v97 appletCredentialsForAIDs:isa completion:v79];
    swift_release();
    _Block_release(v79);
    swift_release();
    swift_release();

    id v25 = v96;
    goto LABEL_77;
  }
LABEL_19:
  unint64_t v37 = 0;
  unint64_t v103 = v100 & 0xC000000000000001;
  uint64_t v99 = v100 & 0xFFFFFFFFFFFFFF8;
  unint64_t v98 = v100 + 32;
  os_log_type_t v106 = (char *)&type metadata for Swift.AnyObject + 8;
  int v102 = v18;
  uint64_t v101 = v36;
  do
  {
    if (v103)
    {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v37 >= *(void *)(v99 + 16)) {
        goto LABEL_67;
      }
      id v38 = *(id *)(v98 + 8 * v37);
    }
    unint64_t v39 = v38;
    BOOL v40 = __OFADD__(v37, 1);
    unint64_t v41 = v37 + 1;
    if (v40) {
      goto LABEL_66;
    }
    id v42 = [v38 subcredentials];
    if (!v42) {
      goto LABEL_80;
    }
    id v43 = v42;
    unint64_t v105 = v41;
    uint64_t v44 = sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
    sub_1004E4548();
    uint64_t v45 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v107 = v44;
    if ((v45 & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t v45 = v116;
      uint64_t v110 = v117;
      uint64_t v46 = v118;
      uint64_t v47 = v119;
      unint64_t v48 = v120;
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v49 = -1 << *(unsigned char *)(v45 + 32);
      uint64_t v50 = *(void *)(v45 + 56);
      uint64_t v110 = v45 + 56;
      uint64_t v51 = ~v49;
      uint64_t v52 = -v49;
      if (v52 < 64) {
        uint64_t v53 = ~(-1 << v52);
      }
      else {
        uint64_t v53 = -1;
      }
      unint64_t v48 = v53 & v50;
      uint64_t v46 = v51;
    }
    uint64_t v108 = v45 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v104 = v46;
    int64_t v109 = (unint64_t)(v46 + 64) >> 6;
    uint64_t v111 = v45;
    if (v45 < 0)
    {
LABEL_54:
      uint64_t v60 = __CocoaSet.Iterator.next()();
      if (!v60) {
        goto LABEL_20;
      }
      uint64_t v113 = v60;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v59 = (id)aBlock[0];
      swift_unknownObjectRelease();
      uint64_t v55 = v47;
      uint64_t v18 = v48;
      if (!v59) {
        goto LABEL_20;
      }
      goto LABEL_56;
    }
    while (v48)
    {
      uint64_t v18 = (v48 - 1) & v48;
      unint64_t v54 = __clz(__rbit64(v48)) | (v47 << 6);
      uint64_t v55 = v47;
LABEL_52:
      id v59 = *(id *)(*(void *)(v45 + 48) + 8 * v54);
      if (!v59) {
        goto LABEL_20;
      }
LABEL_56:
      if (v29(v39, v59))
      {
        unint64_t v112 = v18;
        uint64_t v61 = v39;
        id v62 = [v39 applicationIdentifier];
        if (!v62)
        {
          swift_release();
          NSString v84 = v96;
          _Block_release(v96);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          _Block_release(v84);
          __break(1u);
LABEL_79:
          swift_release();
          uint64_t v85 = v96;
          _Block_release(v96);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          _Block_release(v85);
          __break(1u);
LABEL_80:
          swift_release();
          uint64_t v86 = v96;
          _Block_release(v96);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          _Block_release(v86);
          __break(1u);
          goto LABEL_81;
        }
        NSData v63 = v62;
        uint64_t v64 = v29;
        uint64_t v18 = v20;
        Swift::Int v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v67 = v66;

        id v68 = [v59 identifier];
        if (!v68) {
          goto LABEL_79;
        }
        os_log_type_t v69 = v68;
        Swift::Int v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v72 = v71;

        sub_100512040(aBlock, v65, v67, v70, v72);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v47 = v55;
        uint64_t v20 = v18;
        id v29 = v64;
        unint64_t v39 = v61;
        uint64_t v45 = v111;
        unint64_t v48 = v112;
        if (v111 < 0) {
          goto LABEL_54;
        }
      }
      else
      {

        uint64_t v47 = v55;
        unint64_t v48 = v18;
        if (v45 < 0) {
          goto LABEL_54;
        }
      }
    }
    int64_t v56 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      if (!v36) {
        goto LABEL_69;
      }
      goto LABEL_19;
    }
    if (v56 < v109)
    {
      unint64_t v57 = *(void *)(v110 + 8 * v56);
      uint64_t v55 = v47 + 1;
      if (v57) {
        goto LABEL_51;
      }
      uint64_t v55 = v47 + 2;
      if (v47 + 2 >= v109) {
        goto LABEL_20;
      }
      unint64_t v57 = *(void *)(v110 + 8 * v55);
      if (v57) {
        goto LABEL_51;
      }
      uint64_t v55 = v47 + 3;
      if (v47 + 3 >= v109) {
        goto LABEL_20;
      }
      unint64_t v57 = *(void *)(v110 + 8 * v55);
      if (v57) {
        goto LABEL_51;
      }
      uint64_t v55 = v47 + 4;
      if (v47 + 4 >= v109) {
        goto LABEL_20;
      }
      unint64_t v57 = *(void *)(v110 + 8 * v55);
      if (v57)
      {
LABEL_51:
        uint64_t v18 = (v57 - 1) & v57;
        unint64_t v54 = __clz(__rbit64(v57)) + (v55 << 6);
        goto LABEL_52;
      }
      uint64_t v58 = v47 + 5;
      while (v109 != v58)
      {
        unint64_t v57 = *(void *)(v110 + 8 * v58++);
        if (v57)
        {
          uint64_t v55 = v58 - 1;
          goto LABEL_51;
        }
      }
    }
LABEL_20:
    sub_1004DC1A8();

    unint64_t v37 = v105;
    LODWORD(v18) = v102;
  }
  while (v105 != v101);
  unint64_t v73 = v100;
  swift_bridgeObjectRelease();
  id v74 = v115;
  if (v115[2]) {
    goto LABEL_62;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v93)
  {
    static Logger.auxiliaryCapability.getter();
    os_log_type_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      id v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "PDARRUnifiedAccessSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)", v83, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v92);
    id v25 = v96;
    v96[2](v96, 2, 0);
  }
  else
  {
    id v25 = v96;
    v96[2](v96, 1, 0);
  }
  swift_release();
  swift_release();

LABEL_76:
  swift_release();
LABEL_77:
  _Block_release(v25);
  _Block_release(v25);
  _Block_release(v25);
  _Block_release(v25);
}

void sub_10050739C(void *a1, void *a2, void (**a3)(void, void, void))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v85 = *(void *)(v6 - 8);
  uint64_t v86 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v85 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v85 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v85 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)&v85 - v20;
  __chkstk_darwin(v19);
  os_log_type_t v23 = (char *)&v85 - v22;
  self;
  int64_t v24 = (void *)swift_dynamicCastObjCClass();
  uint64_t v87 = a3;
  _Block_copy(a3);
  if (!v24)
  {
    static Logger.auxiliaryCapability.getter();
    BOOL v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      id v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "PDARRUnifiedAccessSignatureProvider: Mismatched requirement type", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v85 + 8))(v23, v86);
    id v43 = v87;
    v87[2](v87, 0, 0);
    uint64_t v44 = v43;
    goto LABEL_24;
  }
  id v25 = a1;
  id v26 = [a2 secureElement];
  if (!v26)
  {
    static Logger.auxiliaryCapability.getter();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "PDARRUnifiedAccessSignatureProvider: Missing secure element", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v85 + 8))(v21, v86);
    unint64_t v48 = v87;
    v87[2](v87, 0, 0);
    goto LABEL_32;
  }
  os_log_type_t v27 = v26;
  id v28 = [v24 type];
  if (v28 != (id)1)
  {
    if (v28 != (id)2)
    {
      int64_t v56 = v27;
      static Logger.auxiliaryCapability.getter();
      unint64_t v57 = v25;
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 134217984;
        id v88 = [v24 type];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v58, v59, "PDARRUnifiedAccessSignatureProvider: Unknown requirement type: %lu", v60, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v58 = v57;
      }
      uint64_t v71 = v86;
      Swift::Int v70 = v87;
      uint64_t v72 = v85;

      (*(void (**)(char *, uint64_t))(v72 + 8))(v18, v71);
      v70[2](v70, 0, 0);

      goto LABEL_42;
    }
    id v29 = [v24 keyCreationMetadata];
    if (v29)
    {
      id v30 = v29;
      id v31 = [v29 signatureUnifiedAccessHome];

      if (v31)
      {
        uint64_t v32 = a2;
        id v33 = [v31 readerIdentifier];
        if (v33)
        {
          id v34 = v33;
          id v35 = [v33 hexEncoding];

          if (v35)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            Swift::String v36 = String.uppercased()();
            uint64_t countAndFlagsBits = v36._countAndFlagsBits;
            object = v36._object;
            char v39 = 1;
            goto LABEL_22;
          }
        }
        else
        {
          os_log_type_t v81 = v87;
          _Block_release(v87);
          _Block_release(v81);
          __break(1u);
        }
        os_log_type_t v82 = v87;
        _Block_release(v87);
        _Block_release(v82);
        __break(1u);
        goto LABEL_45;
      }
    }
    uint64_t v61 = v27;
    static Logger.auxiliaryCapability.getter();
    id v62 = v25;
    NSData v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      Swift::Int v65 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::Int v65 = 134217984;
      id v88 = [v24 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v63, v64, "PDARRUnifiedAccessSignatureProvider: Missing key creation metadata for requirement type: %lu", v65, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      NSData v63 = v62;
    }
    uint64_t v78 = v86;
    Swift::Int v70 = v87;
    uint64_t v79 = v85;

    (*(void (**)(char *, uint64_t))(v79 + 8))(v9, v78);
LABEL_41:
    v70[2](v70, 0, 0);

LABEL_42:
    uint64_t v44 = v70;
    goto LABEL_24;
  }
  if ((PKAuxiliaryCapabilityHydraUnifiedAccessEnabled() & 1) == 0)
  {
    Swift::Int v66 = v27;
    static Logger.auxiliaryCapability.getter();
    Swift::Int v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      os_log_type_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "PDARRUnifiedAccessSignatureProvider: Disabled", v69, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v85 + 8))(v15, v86);
    unint64_t v48 = v87;
    v87[2](v87, 0, 0);

LABEL_32:
    uint64_t v44 = v48;
LABEL_24:
    _Block_release(v44);
    return;
  }
  id v49 = [v24 keyCreationMetadata];
  if (!v49
    || (uint64_t v50 = v49,
        id v31 = [v49 signatureUnifiedAccessHydra],
        v50,
        !v31))
  {
    uint64_t v61 = v27;
    static Logger.auxiliaryCapability.getter();
    id v62 = v25;
    unint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    BOOL v75 = os_log_type_enabled(v73, v74);
    uint64_t v76 = v85;
    if (v75)
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 134217984;
      id v88 = [v24 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v73, v74, "PDARRUnifiedAccessSignatureProvider: Missing key creation metadata for requirement type: %lu", v77, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      unint64_t v73 = v62;
    }
    uint64_t v80 = v86;
    Swift::Int v70 = v87;

    (*(void (**)(char *, uint64_t))(v76 + 8))(v12, v80);
    goto LABEL_41;
  }
  uint64_t v32 = a2;
  id v51 = [v31 readerIdentifier];
  if (!v51)
  {
LABEL_45:
    id v83 = v87;
    _Block_release(v87);
    _Block_release(v83);
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v52 = v51;
  id v53 = [v51 hexEncoding];

  if (v53)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Swift::String v54 = String.uppercased()();
    uint64_t countAndFlagsBits = v54._countAndFlagsBits;
    object = v54._object;
    char v39 = 0;
LABEL_22:
    swift_bridgeObjectRelease();

    uint64_t v55 = v87;
    _Block_copy(v87);
    sub_100506628(v39, countAndFlagsBits, (uint64_t)object, v32, v55);
    _Block_release(v55);
    swift_bridgeObjectRelease();

    uint64_t v44 = v55;
    goto LABEL_24;
  }
LABEL_46:
  NSString v84 = v87;
  _Block_release(v87);
  _Block_release(v84);
  __break(1u);
}

uint64_t sub_100507CF8()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100507D30(void *a1, void *a2)
{
  return sub_100502104(a1, a2, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100507D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100507D54()
{
  return swift_release();
}

uint64_t sub_100507D5C()
{
  return _swift_deallocObject(v0, 17, 7);
}

_OWORD *sub_100507D70(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100507D80()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100507DB8()
{
  swift_bridgeObjectRelease();
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100507DF4(uint64_t a1, void *a2)
{
  sub_1005021DC(a1, a2, *(void (**)(void, void))(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100507E04()
{
  return _swift_deallocObject(v0, 17, 7);
}

BOOL sub_100507E14(void *a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 16);
  id v3 = [a1 paymentNetworkIdentifier];
  uint64_t v4 = 130;
  if (v2) {
    uint64_t v4 = 133;
  }
  return v3 == (id)v4;
}

uint64_t sub_100507E58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  return sub_1005016C4(a1, a2, a3, a4, a5, a6, a7, *(void (**)(id, void, id))(v7 + 16), *(void *)(v7 + 24));
}

uint64_t sub_100507E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  return sub_1005011C0(a1, a2, a3, a4, a5, a6, *(void (**)(void, void, void))(v6 + 16), *(void *)(v6 + 24));
}

ValueMetadata *type metadata accessor for PDARRUnifiedAccessSignatureProvider.IdentifierPair()
{
  return &type metadata for PDARRUnifiedAccessSignatureProvider.IdentifierPair;
}

unint64_t sub_100507E9C()
{
  unint64_t result = qword_100808578;
  if (!qword_100808578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100808578);
  }
  return result;
}

uint64_t sub_100507F2C(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    __CocoaSet.endIndex.getter();
    char v6 = static __CocoaSet.Index.== infix(_:_:)();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100509B3C(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    sub_100508C50(v3, v5, v2 != 0, a1);
    uint64_t v7 = v11;
    sub_100509B3C(v3, v5, v2 != 0);
    return v7;
  }
  uint64_t result = sub_100508EC8(a1);
  if ((v10 & 1) == 0)
  {
    uint64_t v5 = v9;
    if (*(_DWORD *)(a1 + 36) == v9)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10050803C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t type metadata accessor for PDARRCoreIDCredAccountKeyProvider()
{
  return self;
}

void sub_100508170(void *a1, char a2, void (*a3)(void *, void, void *))
{
  if (a2)
  {
    swift_errorRetain();
    id v6 = 0;
    uint64_t v7 = a1;
  }
  else
  {
    id v8 = a1;
    id v6 = a1;
    uint64_t v7 = 0;
  }
  a3(v6, 0, v7);
  sub_100509B30(a1, a2 & 1);
}

void sub_10050836C(void *a1, char a2, void (*a3)(uint64_t, void *))
{
  if (a2)
  {
    a3(2, 0);
  }
  else
  {
    id v5 = a1;
    a3(1, a1);
    sub_100509B30(a1, 0);
  }
}

void sub_100508404(void *a1, int a2, void *a3, void *a4, void *aBlock, void (*a6)(id, id, id, void *))
{
  char v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  a6(v11, v12, v13, v10);
  _Block_release(v10);
  _Block_release(v10);
}

uint64_t sub_100508688(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, void (*a5)(void, void), uint64_t a6)
{
  v37[1] = a6;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >> 60 == 15 || !a3 || a4)
  {
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v37[0] = a5;
      id v30 = (uint8_t *)swift_slowAlloc();
      id v31 = (void *)swift_slowAlloc();
      *(_DWORD *)id v30 = 138412290;
      if (a4)
      {
        swift_errorRetain();
        uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v38 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v38 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v32 = 0;
      }
      void *v31 = v32;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "PDARRCoreIDCredAccountKeyProvider: Failed to generate accountKAK with error: %@", v30, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      a5 = (void (*)(void, void))v37[0];
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    id v33 = a4;
    if (!a4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v34 = a5;
      id v35 = objc_allocWithZone((Class)NSError);
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v33 = [v35 initWithDomain:v36 code:4 userInfo:0];

      a5 = v34;
    }
    swift_errorRetain();
    a5(v33, 1);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v15 = (void (*)(id, void))a5;
    id v16 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    sub_1004E4810(a1, a2);
    id v17 = [v16 init];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v17 setAuthorization:isa];

    Class v19 = Array._bridgeToObjectiveC()().super.isa;
    [v17 setAttestation:v19];

    NSString v20 = String._bridgeToObjectiveC()();
    [v17 setKeyReferenceIdentifier:v20];

    sub_1004CA0A4(&qword_100807D10);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1005B4130;
    *(void *)(v21 + 32) = v17;
    uint64_t v38 = v21;
    specialized Array._endMutation()();
    id v22 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
    id v23 = v17;
    Class v24 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v25 = [v22 initWithKeyMaterialContents:v24];

    id v26 = v25;
    v15(v25, 0);

    return sub_1004CEAD4(a1, a2);
  }
}

uint64_t sub_100508B70(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  uint64_t v7 = *(void (**)(void *, unint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v8 = v6;
    id v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    if (!a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_retain();
  unint64_t v10 = 0xF000000000000000;
  if (a3) {
LABEL_3:
  }
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_4:
  id v11 = a4;
  v7(v6, v10, a3, a4);

  swift_bridgeObjectRelease();
  sub_1004CEAD4((uint64_t)v6, v10);
  return swift_release();
}

void sub_100508C50(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  uint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);
  id v15 = v14;
}

uint64_t sub_100508EC8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void sub_100508F50(void *a1, id a2)
{
  id v3 = [a2 pass];
  if (v3)
  {
    id v4 = v3;
    id v5 = [v3 devicePrimaryPaymentApplication];
    if (v5)
    {
      unsigned int v6 = v5;
      id v7 = [v5 subcredentials];

      if (v7)
      {
        sub_1004DE1C0(0, (unint64_t *)&unk_1008083A0);
        sub_1004E4548();
        uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        id v9 = (void *)sub_100507F2C(v8);
        swift_bridgeObjectRelease();
        if (v9)
        {
          id v10 = [v9 identifier];

          if (v10)
          {
            id v11 = v10;
LABEL_11:
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            return;
          }
        }

        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_8:
  id v12 = [a1 keyCreationMetadata];
  if (v12)
  {
    char v13 = v12;
    id v11 = [v12 signatureIdentityAccount];

    if (v11)
    {
      id v4 = [v11 subcredentialIdentifier];
      goto LABEL_11;
    }
  }
}

void sub_1005090EC(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void, void))
{
  uint64_t v32 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  _Block_copy(a4);
  sub_100508F50(a1, a2);
  if (v15)
  {
    UUID.init()();
    uint64_t v16 = UUID.uuidString.getter();
    uint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_1004DFD70;
    *(void *)(v19 + 24) = v14;
    NSString v20 = *(void **)(v32 + OBJC_IVAR____TtC5passd33PDARRCoreIDCredAccountKeyProvider_iso18013Manager);
    swift_retain();
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = String._bridgeToObjectiveC()();
    id v23 = (void *)swift_allocObject();
    v23[2] = sub_100509BBC;
    void v23[3] = v19;
    void v23[4] = v16;
    void v23[5] = v18;
    aBlock[4] = sub_100509BCC;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100508B70;
    aBlock[3] = &unk_100758DB8;
    Class v24 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    [v20 generateAccountKeyAuthorizationForSubcredentialID:v21 cardType:4 accountKeyIdentifier:v22 completion:v24];
    _Block_release(v24);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = v31;
    static Logger.auxiliaryCapability.getter();
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "PDARRCoreIDCredAccountKeyProvider: Unable generate key material because there is no subcredential identifier", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v29 = objc_allocWithZone((Class)NSError);
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v21 = [v29 initWithDomain:v30 code:4 userInfo:0];

    id v22 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void, void *))a4)[2](a4, 0, 0, v22);
  }
  swift_release();
}

void sub_100509520(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  _Block_copy(a3);
  id v7 = [a1 pass];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 identityAccountKeyIdentifier];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void **)(a2 + OBJC_IVAR____TtC5passd33PDARRCoreIDCredAccountKeyProvider_iso18013Manager);
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = sub_1004E4640;
      *(void *)(v12 + 24) = v6;
      void v14[4] = sub_100509B80;
      void v14[5] = v12;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 1107296256;
      _OWORD v14[2] = sub_10050803C;
      void v14[3] = &unk_100758D18;
      char v13 = _Block_copy(v14);
      swift_retain();
      swift_release();
      [v11 isAccountKeySigningKeyAvailableForAccountKeyIdentifier:v10 completion:v13];
      _Block_release(v13);
      swift_release();

      return;
    }
  }
  a3[2](a3, 2);
  swift_release();
}

void sub_1005096E0(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  _Block_copy(a4);
  sub_100508F50(a1, a2);
  if (v13)
  {
    id v14 = [a1 keyCreationMetadata];
    if (v14
      && (uint64_t v15 = v14,
          id v16 = [v14 signatureIdentityAccount],
          v15,
          v16)
      && (id v17 = [v16 existingAccountKeyIdentifier],
          v16,
          v17))
    {
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_1004E45D0;
      *(void *)(v21 + 24) = v12;
      id v22 = *(void **)(a3 + OBJC_IVAR____TtC5passd33PDARRCoreIDCredAccountKeyProvider_iso18013Manager);
      swift_retain();
      NSString v23 = String._bridgeToObjectiveC()();
      NSString v24 = String._bridgeToObjectiveC()();
      uint64_t v25 = (void *)swift_allocObject();
      void v25[2] = sub_100509AFC;
      v25[3] = v21;
      void v25[4] = v18;
      void v25[5] = v20;
      aBlock[4] = sub_100509B0C;
      aBlock[5] = v25;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100508B70;
      aBlock[3] = &unk_100758CA0;
      id v26 = _Block_copy(aBlock);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_release();
      [v22 generateAccountKeyAuthorizationForSubcredentialID:v23 cardType:4 accountKeyIdentifier:v24 completion:v26];
      _Block_release(v26);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      a4[2](a4, 2, 0);
      swift_release();
    }
  }
  else
  {
    static Logger.auxiliaryCapability.getter();
    os_log_type_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "PDARRCoreIDCredAccountKeyProvider: Unable to check for existing key material because there is no subcredential identifier", v29, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    a4[2](a4, 2, 0);
    swift_release();
  }
}

uint64_t sub_100509AC4()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100509AFC(void *a1, char a2)
{
  sub_10050836C(a1, a2 & 1, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t sub_100509B0C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  return sub_100508688(a1, a2, a3, a4, *(void (**)(void, void))(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_100509B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100509B28()
{
  return swift_release();
}

void sub_100509B30(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100509B3C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100509B48()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100509B80(char a1, uint64_t a2)
{
  uint64_t v3 = 1;
  if ((a1 & 1) == 0) {
    uint64_t v3 = 2;
  }
  if (a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(v4);
}

void sub_100509BBC(void *a1, char a2)
{
  sub_100508170(a1, a2 & 1, *(void (**)(void *, void, void *))(v2 + 16));
}

uint64_t sub_100509BF0()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t _s13ProvisionTaskCMa()
{
  return self;
}

uint64_t sub_100509C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_100509CA0()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for PendingProvisioningPrivacyKeyAvailablePrecondition()
{
  return self;
}

uint64_t sub_100509D0C(char a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    static Logger.Provisioning.add.getter();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "PrivacyKeyAvailablePrecondition: timed out waiting for privacy key to sync", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v6 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return a2(v6);
}

uint64_t sub_100509E64()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_100509E94(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 32);
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  void v9[4] = sub_10050A044;
  void v9[5] = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  void v9[2] = sub_100509C4C;
  void v9[3] = &unk_100758E28;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v5 waitForKeyWithGroupIdentifier:v6 timeout:v8 completion:60.0];
  _Block_release(v8);
}

uint64_t sub_100509F9C()
{
  type metadata accessor for PendingProvisioningPrivacyKeyAvailablePrecondition();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    if (*(void *)(v0 + 16) == *(void *)(result + 16) && *(void *)(v0 + 24) == *(void *)(result + 24))
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_10050A00C()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050A044(char a1)
{
  return sub_100509D0C(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10050A04C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10050A05C()
{
  return swift_release();
}

void *sub_10050A064(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v4[2] = a1;
  v4[3] = a2;
  id v8 = objc_allocWithZone((Class)PDPrivacyKeyMonitor);
  swift_bridgeObjectRetain();
  void v4[4] = [v8 initWithNotificationStreamManager:a3];
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  void v4[5] = 0xD000000000000020;
  v4[6] = 0x800000010060DD50;
  return v4;
}

uint64_t sub_10050A148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1004ECFE8(a1, &qword_100807BF8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10050A3C4(unsigned char *a1)
{
  uint64_t v2 = sub_1004CA0A4(&qword_100807BF8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  Swift::String v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = OBJC_IVAR___PDBankCredentialMigrator_isMigrating;
  if (a1[OBJC_IVAR___PDBankCredentialMigrator_isMigrating])
  {
    static Logger.bankCredentialCenter.getter();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "BankCredentialCenter is migrating, return", v15, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  else if (PKBankCredentialMigrated())
  {
    static Logger.bankCredentialCenter.getter();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "BankCredentialCenter: already migrated, returning", v19, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    a1[v12] = 1;
    uint64_t v20 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 1, 1, v20);
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = 0;
    v21[3] = 0;
    void v21[4] = a1;
    id v22 = a1;
    sub_10050D0BC((uint64_t)v4, (uint64_t)&unk_100808798, (uint64_t)v21);
    return swift_release();
  }
}

uint64_t sub_10050A6A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[18] = a4;
  uint64_t v5 = type metadata accessor for LocalizedStringTable();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BankCredential();
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for BankCredential.ACH();
  v4[26] = v7;
  v4[27] = *(void *)(v7 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v4[34] = v8;
  v4[35] = *(void *)(v8 - 8);
  v4[36] = swift_task_alloc();
  v4[37] = swift_task_alloc();
  sub_1004CA0A4(&qword_100808788);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v4[42] = v9;
  v4[43] = *(void *)(v9 - 8);
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v4[47] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_10050A9D0;
  return sub_10050F0C8();
}

uint64_t sub_10050A9D0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 384) = a1;
  *(void *)(v3 + 392) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10050B3CC;
  }
  else {
    uint64_t v4 = sub_10050AAE4;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v4, 0, 0);
}

uint64_t sub_10050AAE4()
{
  id v1 = [objc_allocWithZone((Class)PKBankAccountInformation) initWithType:0];
  v0[50] = v1;
  if (!v1)
  {
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v2 = v1;
  if (([v1 isValid] & 1) == 0)
  {
    uint64_t v44 = v0[49];
    goto LABEL_40;
  }
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[26];
  uint64_t v6 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(v0[27] + 56);
  v6(v0[41], 1, 1, v5);
  uint64_t v79 = v6;
  v6(v4, 1, 1, v5);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v80 = v2;
  if (!v7) {
    goto LABEL_32;
  }
  uint64_t v8 = v0[27];
  unint64_t v9 = v0[48] + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v81 = *(void *)(v8 + 72);
  uint64_t v10 = (void (**)(uint64_t, uint64_t))(v0[35] + 8);
  uint64_t v78 = (void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  do
  {
    id v11 = [v2 identifier];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = v0[37];
      uint64_t v14 = v0[34];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      BankCredential.ACH.id.getter();
      uint64_t v18 = UUID.uuidString.getter();
      uint64_t v20 = v19;
      (*v10)(v13, v14);
      if (v18 == v15 && v20 == v17)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v2 = v80;
LABEL_21:
        uint64_t v33 = v0[40];
LABEL_22:
        uint64_t v34 = v0[26];
        sub_1004ECFE8(v33, &qword_100808788);
        (*v78)(v33, v9, v34);
        v79(v33, 0, 1, v34);
        goto LABEL_6;
      }
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v2 = v80;
      if (v22) {
        goto LABEL_21;
      }
    }
    uint64_t v23 = BankCredential.ACH.accountNumber.getter();
    uint64_t v25 = v24;
    id v26 = [v2 accountNumber];
    if (!v26) {
      goto LABEL_5;
    }
    os_log_type_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    if (v23 == v28 && v25 == v30)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0) {
        goto LABEL_6;
      }
    }
    uint64_t v35 = BankCredential.ACH.routingNumber.getter();
    uint64_t v37 = v36;
    id v38 = [v2 routingNumber];
    if (!v38)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    char v39 = v38;
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    if (v35 == v40 && v37 == v42)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v33 = v0[41];
      goto LABEL_22;
    }
    char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43)
    {
      uint64_t v33 = v0[41];
      goto LABEL_22;
    }
LABEL_6:
    v9 += v81;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
LABEL_32:
  uint64_t v45 = v0[39];
  uint64_t v47 = v0[26];
  uint64_t v46 = v0[27];
  sub_10050FA0C(v0[40], v45);
  unint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  LODWORD(v47) = v48(v45, 1, v47);
  sub_1004ECFE8(v45, &qword_100808788);
  if (v47 == 1)
  {
    uint64_t v49 = v0[38];
    uint64_t v50 = v0[26];
    sub_10050FA0C(v0[41], v49);
    if (v48(v49, 1, v50) == 1)
    {
      sub_1004ECFE8(v0[38], &qword_100808788);
      id v51 = [v2 routingNumber];
      if (v51)
      {
        uint64_t v52 = v51;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v53 = [v2 accountNumber];
        if (v53)
        {
          Swift::String v54 = v53;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v55 = [v2 bankName];
          if (v55)
          {
            int64_t v56 = v55;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          uint64_t v67 = v0[49];
          BankCredential.ACH.init(routingNumber:accountNumber:nickname:)();
          if (v67)
          {
            uint64_t v69 = v0[40];
            uint64_t v68 = v0[41];
            uint64_t v70 = v0[18];

            swift_bridgeObjectRelease();
            sub_1004ECFE8(v69, &qword_100808788);
            sub_1004ECFE8(v68, &qword_100808788);
            *(unsigned char *)(v70 + OBJC_IVAR___PDBankCredentialMigrator_isMigrating) = 0;
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v71 = (uint64_t (*)(void))v0[1];
            return v71();
          }
          uint64_t v72 = v0[25];
          uint64_t v73 = v0[22];
          uint64_t v74 = v0[23];
          (*(void (**)(uint64_t, void, void))(v0[27] + 16))(v72, v0[32], v0[26]);
          (*(void (**)(uint64_t, void, uint64_t))(v74 + 104))(v72, enum case for BankCredential.ach(_:), v73);
          BOOL v75 = (void *)swift_task_alloc();
          v0[51] = v75;
          void *v75 = v0;
          v75[1] = sub_10050B690;
          uint64_t v76 = v0[25];
          return WalletBankCredentialImporter.insert(credential:)(v76);
        }
LABEL_52:
        uint64_t v76 = swift_bridgeObjectRelease();
        __break(1u);
        return WalletBankCredentialImporter.insert(credential:)(v76);
      }
LABEL_51:
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_52;
    }
    uint64_t v58 = v0[35];
    uint64_t v57 = v0[36];
    uint64_t v60 = v0[33];
    uint64_t v59 = v0[34];
    uint64_t v62 = v0[26];
    uint64_t v61 = v0[27];
    (*(void (**)(uint64_t, void, uint64_t))(v61 + 32))(v60, v0[38], v62);
    BankCredential.ACH.id.getter();
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 setIdentifier:v63];

    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  }
  uint64_t v44 = v0[49];
  uint64_t v64 = v0[41];
  sub_1004ECFE8(v0[40], &qword_100808788);
  sub_1004ECFE8(v64, &qword_100808788);
LABEL_40:
  v0[53] = v44;
  Swift::Int v65 = *(void **)(v0[18] + OBJC_IVAR___PDBankCredentialMigrator_accountManager);
  v0[2] = v0;
  v0[7] = v0 + 16;
  v0[3] = sub_10050B9E8;
  uint64_t v66 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10050D030;
  v0[13] = &unk_100758F68;
  v0[14] = v66;
  [v65 accountsForFeature:5 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10050B3CC()
{
  static Logger.bankCredentialCenter.getter();
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BankCredentialCenter: failed to fetch bank credentials: %@", v3, 0xCu);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[43] + 8))(v0[46], v0[42]);
  *(unsigned char *)(v0[18] + OBJC_IVAR___PDBankCredentialMigrator_isMigrating) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10050B690()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[23] + 8))(v2[25], v2[22]);
  if (v0) {
    uint64_t v3 = sub_10050C72C;
  }
  else {
    uint64_t v3 = sub_10050B7F8;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v3, 0, 0);
}

uint64_t sub_10050B7F8()
{
  uint64_t v1 = v0;
  uint64_t v15 = v0 + 2;
  uint64_t v16 = v0 + 16;
  os_log_type_t v2 = (void *)v0[50];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[36];
  uint64_t v5 = v0[34];
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[27];
  uint64_t v8 = v1[26];
  BankCredential.ACH.id.getter();
  UUID.uuidString.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 setIdentifier:v9];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v10 = v1[52];
  uint64_t v11 = v1[41];
  sub_1004ECFE8(v1[40], &qword_100808788);
  sub_1004ECFE8(v11, &qword_100808788);
  v1[53] = v10;
  uint64_t v12 = *(void **)(v1[18] + OBJC_IVAR___PDBankCredentialMigrator_accountManager);
  v1[2] = v1;
  v1[7] = v16;
  void v1[3] = sub_10050B9E8;
  uint64_t v13 = swift_continuation_init();
  v1[10] = _NSConcreteStackBlock;
  v1[11] = 0x40000000;
  v1[12] = sub_10050D030;
  v1[13] = &unk_100758F68;
  v1[14] = v13;
  objc_msgSend(v12, "accountsForFeature:completion:", 5);
  return _swift_continuation_await(v15);
}

uint64_t sub_10050B9E8()
{
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10050BAC8, 0, 0);
}

uint64_t sub_10050BAC8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 104))(*(void *)(v0 + 168), enum case for LocalizedStringTable.savings(_:), *(void *)(v0 + 152));
  id v2 = (id)PKPassKitBundle();
  if (!v2)
  {
LABEL_33:
    __break(1u);
    return WalletBankCredentialImporter.insert(credential:)(v2);
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 152);
  uint64_t v7 = localizedString(for:table:bundle:)();
  uint64_t v9 = v8;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  if (!v1
    || (swift_bridgeObjectRetain(),
        uint64_t v10 = sub_10050EA70(v1, v7, v9),
        *(void *)(v0 + 432) = v10,
        swift_bridgeObjectRelease_n(),
        id v2 = (id)swift_bridgeObjectRelease(),
        uint64_t v11 = v10[2],
        (*(void *)(v0 + 440) = v11) == 0))
  {
LABEL_29:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void **)(v0 + 400);
    PKSetBankCredentialMigrated();

    *(unsigned char *)(*(void *)(v0 + 144) + OBJC_IVAR___PDBankCredentialMigrator_isMigrating) = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v48 = *(uint64_t (**)(void))(v0 + 8);
    return v48();
  }
  unint64_t v12 = 0;
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v14 = OBJC_IVAR___PDBankCredentialMigrator_importer;
  *(void *)(v0 + 448) = *(void *)(*(void *)(v0 + 384) + 16);
  *(void *)(v0 + 456) = v14;
  *(_DWORD *)(v0 + 488) = *(_DWORD *)(v13 + 80);
  *(_DWORD *)(v0 + 492) = enum case for BankCredential.ach(_:);
LABEL_5:
  *(void *)(v0 + 464) = v12;
  uint64_t v15 = *(void *)(v0 + 432);
  if (v12 >= *(void *)(v15 + 16))
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v16 = *(void *)(v0 + 448);
  uint64_t v17 = *(void *)(v0 + 216);
  uint64_t v18 = *(void (**)(void, unint64_t, void))(v17 + 16);
  uint64_t v51 = *(void *)(v17 + 72);
  v18(*(void *)(v0 + 248), v15 + ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488)) + v51 * v12, *(void *)(v0 + 208));
  if (v16)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v50 = v18;
    while (1)
    {
      uint64_t v52 = v20;
      v18(*(void *)(v0 + 240), *(void *)(v0 + 384)+ v19+ ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488)), *(void *)(v0 + 208));
      uint64_t v21 = BankCredential.ACH.accountNumber.getter();
      uint64_t v23 = v22;
      uint64_t v24 = BankCredential.ACH.accountNumber.getter();
      unint64_t v26 = *(void *)(v0 + 240);
      uint64_t v27 = *(void *)(v0 + 232);
      uint64_t v53 = *(void *)(v0 + 224);
      unint64_t v54 = *(void *)(v0 + 248);
      uint64_t v28 = *(void *)(v0 + 208);
      if (v21 == v24 && v23 == v25)
      {
        swift_bridgeObjectRelease_n();
        v18(v27, v26, v28);
        v18(v53, v54, v28);
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18(v27, v26, v28);
        v18(v53, v54, v28);
        char v31 = 0;
        if ((v30 & 1) == 0) {
          goto LABEL_20;
        }
      }
      uint64_t v32 = BankCredential.ACH.routingNumber.getter();
      uint64_t v34 = v33;
      if (v32 == BankCredential.ACH.routingNumber.getter() && v34 == v35) {
        char v31 = 1;
      }
      else {
        char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_20:
      uint64_t v36 = *(void *)(v0 + 240);
      uint64_t v37 = *(void *)(v0 + 224);
      uint64_t v38 = *(void *)(v0 + 208);
      char v39 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 216) + 8);
      v39(*(void *)(v0 + 232), v38);
      v39(v37, v38);
      v39(v36, v38);
      if (v31)
      {
        uint64_t v40 = *(void *)(v0 + 248);
        uint64_t v41 = *(void *)(v0 + 208);
        swift_bridgeObjectRelease_n();
        id v2 = (id)((uint64_t (*)(uint64_t, uint64_t))v39)(v40, v41);
        unint64_t v12 = *(void *)(v0 + 464) + 1;
        if (v12 == *(void *)(v0 + 440)) {
          goto LABEL_29;
        }
        goto LABEL_5;
      }
      uint64_t v20 = v52 + 1;
      v19 += v51;
      uint64_t v18 = v50;
      if (v52 + 1 == *(void *)(v0 + 448))
      {
        swift_bridgeObjectRelease_n();
        break;
      }
    }
  }
  uint64_t v42 = *(unsigned int *)(v0 + 492);
  uint64_t v44 = *(void *)(v0 + 184);
  uint64_t v43 = *(void *)(v0 + 192);
  uint64_t v45 = *(void *)(v0 + 176);
  v18(v43, *(void *)(v0 + 248), *(void *)(v0 + 208));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 104))(v43, v42, v45);
  uint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 472) = v46;
  void *v46 = v0;
  v46[1] = sub_10050C0C8;
  id v2 = *(id *)(v0 + 192);
  return WalletBankCredentialImporter.insert(credential:)(v2);
}

uint64_t sub_10050C0C8()
{
  id v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 480) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[23] + 8))(v2[24], v2[22]);
  if (v0) {
    uint64_t v3 = sub_10050C9EC;
  }
  else {
    uint64_t v3 = sub_10050C230;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v3, 0, 0);
}

uint64_t sub_10050C230()
{
  uint64_t v1 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 216) + 8))(*(void *)(v0 + 248), *(void *)(v0 + 208));
LABEL_2:
  unint64_t v2 = *(void *)(v0 + 464) + 1;
  if (v2 == *(void *)(v0 + 440))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v31 = *(void **)(v0 + 400);
    PKSetBankCredentialMigrated();

    *(unsigned char *)(*(void *)(v0 + 144) + OBJC_IVAR___PDBankCredentialMigrator_isMigrating) = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  else
  {
    *(void *)(v0 + 464) = v2;
    uint64_t v3 = *(void *)(v0 + 432);
    if (v2 >= *(void *)(v3 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(void *)(v0 + 448);
      uint64_t v5 = *(void *)(v0 + 216);
      uint64_t v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
      uint64_t v39 = *(void *)(v5 + 72);
      v6(*(void *)(v0 + 248), v3 + ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488)) + v39 * v2, *(void *)(v0 + 208));
      if (v4)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        while (1)
        {
          uint64_t v40 = v8;
          v6(*(void *)(v0 + 240), *(void *)(v0 + 384)+ v7+ ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488)), *(void *)(v0 + 208));
          uint64_t v9 = BankCredential.ACH.accountNumber.getter();
          uint64_t v11 = v10;
          uint64_t v12 = BankCredential.ACH.accountNumber.getter();
          unint64_t v14 = *(void *)(v0 + 240);
          uint64_t v15 = *(void *)(v0 + 232);
          uint64_t v41 = *(void *)(v0 + 224);
          unint64_t v42 = *(void *)(v0 + 248);
          uint64_t v16 = *(void *)(v0 + 208);
          if (v9 == v12 && v11 == v13)
          {
            swift_bridgeObjectRelease_n();
            v6(v15, v14, v16);
            v6(v41, v42, v16);
          }
          else
          {
            char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v6(v15, v14, v16);
            v6(v41, v42, v16);
            char v19 = 0;
            if ((v18 & 1) == 0) {
              goto LABEL_18;
            }
          }
          uint64_t v20 = BankCredential.ACH.routingNumber.getter();
          uint64_t v22 = v21;
          if (v20 == BankCredential.ACH.routingNumber.getter() && v22 == v23) {
            char v19 = 1;
          }
          else {
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_18:
          uint64_t v24 = v6;
          uint64_t v25 = *(void *)(v0 + 240);
          uint64_t v26 = *(void *)(v0 + 224);
          uint64_t v27 = *(void *)(v0 + 208);
          uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 216) + 8);
          v28(*(void *)(v0 + 232), v27);
          v28(v26, v27);
          v28(v25, v27);
          if (v19)
          {
            uint64_t v29 = *(void *)(v0 + 248);
            uint64_t v30 = *(void *)(v0 + 208);
            swift_bridgeObjectRelease_n();
            uint64_t v1 = ((uint64_t (*)(uint64_t, uint64_t))v28)(v29, v30);
            goto LABEL_2;
          }
          uint64_t v8 = v40 + 1;
          v7 += v39;
          uint64_t v6 = v24;
          if (v40 + 1 == *(void *)(v0 + 448))
          {
            swift_bridgeObjectRelease_n();
            break;
          }
        }
      }
      uint64_t v34 = *(unsigned int *)(v0 + 492);
      uint64_t v36 = *(void *)(v0 + 184);
      uint64_t v35 = *(void *)(v0 + 192);
      uint64_t v37 = *(void *)(v0 + 176);
      v6(v35, *(void *)(v0 + 248), *(void *)(v0 + 208));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v35, v34, v37);
      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v38;
      void *v38 = v0;
      v38[1] = sub_10050C0C8;
      uint64_t v1 = *(void *)(v0 + 192);
    }
    return WalletBankCredentialImporter.insert(credential:)(v1);
  }
}

uint64_t sub_10050C72C()
{
  static Logger.bankCredentialCenter.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to migrate peer payment bank account %@", v3, 0xCu);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[26];
  uint64_t v8 = v0[27];
  (*(void (**)(void, void))(v0[43] + 8))(v0[45], v0[42]);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  uint64_t v9 = v0[41];
  sub_1004ECFE8(v0[40], &qword_100808788);
  sub_1004ECFE8(v9, &qword_100808788);
  v0[53] = 0;
  uint64_t v10 = *(void **)(v0[18] + OBJC_IVAR___PDBankCredentialMigrator_accountManager);
  v0[2] = v0;
  v0[7] = v0 + 16;
  v0[3] = sub_10050B9E8;
  uint64_t v11 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10050D030;
  v0[13] = &unk_100758F68;
  v0[14] = v11;
  [v10 accountsForFeature:5 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10050C9EC()
{
  static Logger.bankCredentialCenter.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v3 + 4) = v5;
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to migrate savings bank account %@", (uint8_t *)v3, 0xCu);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 216);
  (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 352), *(void *)(v0 + 336));
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
LABEL_5:
  unint64_t v10 = *(void *)(v0 + 464) + 1;
  if (v10 == *(void *)(v0 + 440))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void **)(v0 + 400);
    PKSetBankCredentialMigrated();

    *(unsigned char *)(*(void *)(v0 + 144) + OBJC_IVAR___PDBankCredentialMigrator_isMigrating) = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    return v40();
  }
  else
  {
    *(void *)(v0 + 464) = v10;
    uint64_t v11 = *(void *)(v0 + 432);
    if (v10 >= *(void *)(v11 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = *(void *)(v0 + 448);
      uint64_t v13 = *(void *)(v0 + 216);
      unint64_t v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
      uint64_t v47 = *(void *)(v13 + 72);
      v14(*(void *)(v0 + 248), v11 + ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488)) + v47 * v10, *(void *)(v0 + 208));
      if (v12)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v48 = v16;
          v14(*(void *)(v0 + 240), *(void *)(v0 + 384)+ v15+ ((*(unsigned __int8 *)(v0 + 488) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 488)), *(void *)(v0 + 208));
          uint64_t v17 = BankCredential.ACH.accountNumber.getter();
          uint64_t v19 = v18;
          uint64_t v20 = BankCredential.ACH.accountNumber.getter();
          unint64_t v22 = *(void *)(v0 + 240);
          uint64_t v23 = *(void *)(v0 + 232);
          uint64_t v49 = *(void *)(v0 + 224);
          unint64_t v50 = *(void *)(v0 + 248);
          uint64_t v24 = *(void *)(v0 + 208);
          if (v17 == v20 && v19 == v21)
          {
            swift_bridgeObjectRelease_n();
            v14(v23, v22, v24);
            v14(v49, v50, v24);
          }
          else
          {
            char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v14(v23, v22, v24);
            v14(v49, v50, v24);
            char v27 = 0;
            if ((v26 & 1) == 0) {
              goto LABEL_21;
            }
          }
          uint64_t v28 = BankCredential.ACH.routingNumber.getter();
          uint64_t v30 = v29;
          if (v28 == BankCredential.ACH.routingNumber.getter() && v30 == v31) {
            char v27 = 1;
          }
          else {
            char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_21:
          uint64_t v32 = v14;
          uint64_t v33 = *(void *)(v0 + 240);
          uint64_t v34 = *(void *)(v0 + 224);
          uint64_t v35 = *(void *)(v0 + 208);
          uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 216) + 8);
          v36(*(void *)(v0 + 232), v35);
          v36(v34, v35);
          v36(v33, v35);
          if (v27)
          {
            uint64_t v37 = *(void *)(v0 + 248);
            uint64_t v38 = *(void *)(v0 + 208);
            swift_bridgeObjectRelease_n();
            uint64_t v9 = ((uint64_t (*)(uint64_t, uint64_t))v36)(v37, v38);
            goto LABEL_5;
          }
          uint64_t v16 = v48 + 1;
          v15 += v47;
          unint64_t v14 = v32;
          if (v48 + 1 == *(void *)(v0 + 448))
          {
            swift_bridgeObjectRelease_n();
            break;
          }
        }
      }
      uint64_t v42 = *(unsigned int *)(v0 + 492);
      uint64_t v44 = *(void *)(v0 + 184);
      uint64_t v43 = *(void *)(v0 + 192);
      uint64_t v45 = *(void *)(v0 + 176);
      v14(v43, *(void *)(v0 + 248), *(void *)(v0 + 208));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 104))(v43, v42, v45);
      uint64_t v46 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v46;
      void *v46 = v0;
      v46[1] = sub_10050C0C8;
      uint64_t v9 = *(void *)(v0 + 192);
    }
    return WalletBankCredentialImporter.insert(credential:)(v9);
  }
}

uint64_t sub_10050D030(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10050FA74();
    sub_10050FAB4();
    uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = v3;
  sub_10050FB0C((uint64_t)&v5, *(void *)(*(void *)(v2 + 64) + 40));
  return swift_continuation_resume();
}

uint64_t sub_10050D0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1004ECFE8(a1, &qword_100807BF8);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_10050D334(void *a1, void *a2)
{
  uint64_t v4 = sub_1004CA0A4(&qword_100807BF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  void v8[4] = a1;
  void v8[5] = a2;
  id v9 = a1;
  id v10 = a2;
  sub_10050A148((uint64_t)v6, (uint64_t)&unk_100808768, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_10050D438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[4] = a4;
  void v5[5] = a5;
  uint64_t v6 = type metadata accessor for BankCredential();
  void v5[6] = v6;
  v5[7] = *(void *)(v6 - 8);
  v5[8] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LocalizedStringTable();
  v5[9] = v7;
  v5[10] = *(void *)(v7 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for BankCredential.ACH();
  v5[12] = v8;
  v5[13] = *(void *)(v8 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  uint8_t v5[16] = v9;
  v5[17] = *(void *)(v9 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  id v10 = (void *)swift_task_alloc();
  v5[20] = v10;
  *id v10 = v5;
  v10[1] = sub_10050D658;
  return sub_10050F0C8();
}

uint64_t sub_10050D658(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 168) = a1;
  *(void *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_10050DD70;
  }
  else {
    uint64_t v4 = sub_10050D76C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v4, 0, 0);
}

uint64_t sub_10050D76C()
{
  id v1 = [*(id *)(v0 + 40) savingsDetails];
  *(void *)(v0 + 184) = v1;
  if (!v1) {
    goto LABEL_18;
  }
  uint64_t v2 = v1;
  id v3 = [v1 routingNumber];
  if (!v3) {
    goto LABEL_21;
  }
  uint64_t v4 = v3;
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  id v7 = [v2 accountNumber];
  uint64_t v8 = *(void *)(v0 + 168);
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    swift_bridgeObjectRelease();

    goto LABEL_22;
  }
  uint64_t v9 = v7;
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v10;

  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v47 = v6;
  if (v11)
  {
    uint64_t v12 = *(void *)(v0 + 104);
    unint64_t v13 = *(void *)(v0 + 168)
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v46 = *(void *)(v12 + 72);
    unint64_t v14 = (void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
    uint64_t v15 = (void (**)(uint64_t, uint64_t))(v12 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v16 = BankCredential.ACH.routingNumber.getter();
      uint64_t v18 = *(void *)(v0 + 120);
      uint64_t v19 = *(void *)(v0 + 96);
      if (v16 == v48 && v17 == v6)
      {
        swift_bridgeObjectRelease();
        (*v14)(v18, v13, v19);
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*v14)(v18, v13, v19);
        if ((v20 & 1) == 0)
        {
          (*v15)(*(void *)(v0 + 120), *(void *)(v0 + 96));
          goto LABEL_7;
        }
      }
      uint64_t v21 = BankCredential.ACH.accountNumber.getter();
      uint64_t v23 = *(void *)(v0 + 120);
      uint64_t v24 = *(void *)(v0 + 96);
      if (v21 == v44 && v22 == v45)
      {
        swift_bridgeObjectRelease();
        (*v15)(v23, v24);
LABEL_37:

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
LABEL_18:
        swift_bridgeObjectRelease();
LABEL_22:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        char v27 = *(uint64_t (**)(void))(v0 + 8);
        return v27();
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v15)(v23, v24);
      if (v26) {
        goto LABEL_37;
      }
LABEL_7:
      uint64_t v6 = v47;
      v13 += v46;
      if (!--v11)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_27;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_27:
  (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), enum case for LocalizedStringTable.savings(_:), *(void *)(v0 + 72));
  id v29 = (id)PKPassKitBundle();
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v32 = *(void *)(v0 + 80);
    uint64_t v33 = *(void *)(v0 + 88);
    uint64_t v34 = *(void *)(v0 + 72);
    localizedString(for:table:bundle:)();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    BankCredential.ACH.init(routingNumber:accountNumber:nickname:)();
    if (v31)
    {
      static Logger.bankCredentialCenter.getter();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v49 = *(void **)(v0 + 184);
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 138412290;
        swift_errorRetain();
        uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 24) = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v38 = v39;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to insert new savings bank account %@", v37, 0xCu);
        sub_1004CA0A4(&qword_100807D20);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
      goto LABEL_22;
    }
    uint64_t v41 = *(void *)(v0 + 56);
    uint64_t v40 = *(void *)(v0 + 64);
    uint64_t v42 = *(void *)(v0 + 48);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 104) + 16))(v40, *(void *)(v0 + 112), *(void *)(v0 + 96));
    (*(void (**)(uint64_t, void, uint64_t))(v41 + 104))(v40, enum case for BankCredential.ach(_:), v42);
    uint64_t v43 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v43;
    void *v43 = v0;
    v43[1] = sub_10050DF84;
    id v29 = *(id *)(v0 + 64);
  }
  else
  {
    __break(1u);
  }
  return WalletBankCredentialImporter.insert(credential:)(v29);
}

uint64_t sub_10050DD70()
{
  static Logger.bankCredentialCenter.getter();
  swift_errorRetain();
  swift_errorRetain();
  id v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)id v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "BankCredentialCenter: failed to fetch bank credentials: %@", v3, 0xCu);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[17] + 8))(v0[19], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_10050DF84()
{
  os_log_type_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[7] + 8))(v2[8], v2[6]);
  if (v0) {
    id v3 = sub_10050E1B8;
  }
  else {
    id v3 = sub_10050E0EC;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v3, 0, 0);
}

uint64_t sub_10050E0EC()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10050E1B8()
{
  (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
  static Logger.bankCredentialCenter.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void **)(v0 + 184);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to insert new savings bank account %@", v4, 0xCu);
    sub_1004CA0A4(&qword_100807D20);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

id sub_10050E530()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BankCredentialMigrator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BankCredentialMigrator()
{
  return self;
}

uint64_t sub_10050E5D4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050E614()
{
  return sub_10050D334(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10050E61C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10050E62C()
{
  return swift_release();
}

void sub_10050E634(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = a2;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, v4);
  dispatch_async(v3, v5);
}

uint64_t sub_10050E6A4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10050E6EC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1004CE9E0;
  return sub_10050D438(a1, v4, v5, v7, v6);
}

uint64_t sub_10050E7AC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10050E888;
  return v6(a1);
}

uint64_t sub_10050E888()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10050E980()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050E9B8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1004CEC08;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100808770 + dword_100808770);
  return v6(a1, v4);
}

void *sub_10050EA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v6 = sub_1004CA0A4(&qword_100808788);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BankCredential.ACH();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v49 = (char *)&v48 - v13;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10050FA74();
    sub_10050FAB4();
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    a1 = v68;
    uint64_t v64 = v69;
    uint64_t v15 = v70;
    int64_t v16 = v71;
    unint64_t v17 = v72;
  }
  else
  {
    uint64_t v18 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v64 = a1 + 56;
    uint64_t v15 = ~v18;
    uint64_t v20 = -v18;
    if (v20 < 64) {
      uint64_t v21 = ~(-1 << v20);
    }
    else {
      uint64_t v21 = -1;
    }
    unint64_t v17 = v21 & v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    int64_t v16 = 0;
  }
  uint64_t v62 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v51 = v15;
  int64_t v63 = (unint64_t)(v15 + 64) >> 6;
  Swift::Int v65 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v66 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v50 = v10;
  uint64_t v52 = (void (**)(char *))(v10 + 32);
  uint64_t v57 = _swiftEmptyArrayStorage;
  uint64_t v60 = v9;
  uint64_t v61 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v56 = a1;
LABEL_8:
  int64_t v22 = v16;
  unint64_t v23 = v17;
  if (a1 < 0)
  {
LABEL_9:
    uint64_t v24 = __CocoaSet.Iterator.next()();
    if (v24)
    {
      uint64_t v67 = v24;
      sub_10050FA74();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v25 = v73;
      swift_unknownObjectRelease();
      int64_t v16 = v22;
      uint64_t v26 = v23;
      if (v25) {
        goto LABEL_26;
      }
    }
    goto LABEL_52;
  }
  while (1)
  {
    if (v23)
    {
      uint64_t v26 = (v23 - 1) & v23;
      unint64_t v27 = __clz(__rbit64(v23)) | (v22 << 6);
      int64_t v16 = v22;
      goto LABEL_25;
    }
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      return result;
    }
    if (v16 >= v63) {
      goto LABEL_52;
    }
    unint64_t v28 = *(void *)(v64 + 8 * v16);
    if (!v28) {
      break;
    }
LABEL_24:
    uint64_t v26 = (v28 - 1) & v28;
    unint64_t v27 = __clz(__rbit64(v28)) + (v16 << 6);
LABEL_25:
    id v25 = *(id *)(*(void *)(a1 + 48) + 8 * v27);
    if (!v25) {
      goto LABEL_52;
    }
LABEL_26:
    if ([v25 state] == (id)4
      || (id v30 = [v25 savingsDetails]) == 0)
    {
      uint64_t v36 = 1;
      goto LABEL_38;
    }
    uint64_t v31 = v30;
    id v32 = [v30 routingNumber];
    if (!v32)
    {

LABEL_35:
      uint64_t v36 = 1;
      uint64_t v9 = v60;
      goto LABEL_38;
    }
    uint64_t v33 = v32;
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v34 = [v31 accountNumber];
    if (!v34)
    {

      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    uint64_t v35 = v34;
    uint64_t v58 = v26;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    BankCredential.ACH.init(routingNumber:accountNumber:nickname:)();
    if (v4)
    {
      swift_errorRelease();

      uint64_t v4 = 0;
      uint64_t v36 = 1;
    }
    else
    {

      uint64_t v36 = 0;
    }
    a1 = v56;
    uint64_t v9 = v60;
    uint64_t v26 = v58;
LABEL_38:
    (*v66)(v8, v36, 1, v9);

    if ((*v65)(v8, 1, v9) != 1)
    {
      uint64_t v38 = v26;
      uint64_t v39 = v8;
      uint64_t v40 = *v52;
      uint64_t v41 = v49;
      uint64_t v42 = v39;
      (*v52)(v49);
      ((void (*)(char *, char *, uint64_t))v40)(v53, v41, v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v57 = (void *)sub_100511AB8(0, v57[2] + 1, 1, (unint64_t)v57);
      }
      uint64_t v43 = v50;
      unint64_t v45 = v57[2];
      unint64_t v44 = v57[3];
      if (v45 >= v44 >> 1) {
        uint64_t v57 = (void *)sub_100511AB8(v44 > 1, v45 + 1, 1, (unint64_t)v57);
      }
      uint64_t v46 = v57;
      v57[2] = v45 + 1;
      unint64_t v47 = (unint64_t)v46
          + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
          + *(void *)(v43 + 72) * v45;
      uint64_t v9 = v60;
      uint64_t result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v40)(v47, v53, v60);
      uint64_t v8 = v42;
      unint64_t v17 = v38;
      goto LABEL_8;
    }
    uint64_t result = (void *)sub_1004ECFE8((uint64_t)v8, &qword_100808788);
    int64_t v22 = v16;
    unint64_t v23 = v26;
    if (a1 < 0) {
      goto LABEL_9;
    }
  }
  int64_t v29 = v22 + 2;
  if (v22 + 2 >= v63) {
    goto LABEL_52;
  }
  unint64_t v28 = *(void *)(v64 + 8 * v29);
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v22 + 3;
  if (v22 + 3 >= v63) {
    goto LABEL_52;
  }
  unint64_t v28 = *(void *)(v64 + 8 * v29);
  if (v28) {
    goto LABEL_23;
  }
  int64_t v29 = v22 + 4;
  if (v22 + 4 >= v63) {
    goto LABEL_52;
  }
  unint64_t v28 = *(void *)(v64 + 8 * v29);
  if (v28)
  {
LABEL_23:
    int64_t v16 = v29;
    goto LABEL_24;
  }
  int64_t v16 = v22 + 5;
  if (v22 + 5 >= v63) {
    goto LABEL_52;
  }
  unint64_t v28 = *(void *)(v64 + 8 * v16);
  if (v28) {
    goto LABEL_24;
  }
  int64_t v37 = v22 + 6;
  while (v63 != v37)
  {
    unint64_t v28 = *(void *)(v64 + 8 * v37++);
    if (v28)
    {
      int64_t v16 = v37 - 1;
      goto LABEL_24;
    }
  }
LABEL_52:
  sub_1004DC1A8();
  return v57;
}

uint64_t sub_10050F0C8()
{
  sub_1004CA0A4(&qword_100808788);
  v0[2] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for BankCredential.ACH();
  v0[3] = v1;
  v0[4] = *(void *)(v1 - 8);
  v0[5] = swift_task_alloc();
  v0[6] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for BankCredential();
  v0[7] = v2;
  v0[8] = *(void *)(v2 - 8);
  v0[9] = swift_task_alloc();
  v0[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for BankCredentials();
  v0[11] = v3;
  v0[12] = *(void *)(v3 - 8);
  v0[13] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10050F28C, 0, 0);
}

uint64_t sub_10050F28C()
{
  type metadata accessor for FinanceStore();
  v0[14] = static FinanceStore.shared.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[15] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10050F33C;
  uint64_t v2 = v0[13];
  return FinanceStore.bankCredentials()(v2);
}

uint64_t sub_10050F33C()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10050F828;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10050F458;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_10050F458()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = BankCredentials.credentials.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v0[8];
    uint64_t v7 = v0[4];
    uint64_t v9 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    uint64_t v8 = v6 + 16;
    unint64_t v10 = v4 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    uint64_t v39 = *(void *)(v8 + 56);
    uint64_t v40 = v9;
    uint64_t v38 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    int v37 = enum case for BankCredential.ach(_:);
    uint64_t v34 = v7;
    uint64_t v11 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    uint64_t v35 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    swift_bridgeObjectRetain();
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t v36 = (void (**)(uint64_t, uint64_t))(v8 - 8);
    do
    {
      uint64_t v14 = v0[9];
      unint64_t v13 = v0[10];
      uint64_t v15 = v0[7];
      v40(v13, v10, v15);
      v40(v14, v13, v15);
      int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 72))(v14, v15);
      uint64_t v17 = v0[9];
      uint64_t v18 = v0[7];
      uint64_t v20 = v0[2];
      uint64_t v19 = v0[3];
      if (v16 == v37)
      {
        (*(void (**)(void, void))(v8 + 80))(v0[9], v0[7]);
        (*v11)(v20, v17, v19);
        (*v38)(v20, 0, 1, v19);
        uint64_t v21 = *v36;
      }
      else
      {
        (*v38)(v0[2], 1, 1, v0[3]);
        uint64_t v21 = *v36;
        (*v36)(v17, v18);
      }
      uint64_t v23 = v0[2];
      uint64_t v22 = v0[3];
      v21(v0[10], v0[7]);
      if ((*v35)(v23, 1, v22) == 1)
      {
        sub_1004ECFE8(v0[2], &qword_100808788);
      }
      else
      {
        uint64_t v25 = v0[5];
        uint64_t v24 = v0[6];
        uint64_t v26 = v0[3];
        unint64_t v27 = *v11;
        (*v11)(v24, v0[2], v26);
        v27(v25, v24, v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = (void *)sub_100511AB8(0, v12[2] + 1, 1, (unint64_t)v12);
        }
        unint64_t v29 = v12[2];
        unint64_t v28 = v12[3];
        if (v29 >= v28 >> 1) {
          uint64_t v12 = (void *)sub_100511AB8(v28 > 1, v29 + 1, 1, (unint64_t)v12);
        }
        uint64_t v30 = v0[5];
        uint64_t v31 = v0[3];
        v12[2] = v29 + 1;
        v27((uint64_t)v12+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v29, v30, v31);
      }
      v10 += v39;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v32 = (uint64_t (*)(void *))v0[1];
  return v32(v12);
}

uint64_t sub_10050F828()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10050F8D8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10050F910()
{
  return sub_10050A3C4(*(unsigned char **)(v0 + 16));
}

uint64_t sub_10050F918()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10050F958(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1004CE9E0;
  return sub_10050A6A0(a1, v4, v5, v6);
}

uint64_t sub_10050FA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004CA0A4(&qword_100808788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10050FA74()
{
  unint64_t result = qword_1008087A0;
  if (!qword_1008087A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1008087A0);
  }
  return result;
}

unint64_t sub_10050FAB4()
{
  unint64_t result = qword_1008087A8;
  if (!qword_1008087A8)
  {
    sub_10050FA74();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1008087A8);
  }
  return result;
}

uint64_t sub_10050FB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004CA0A4((uint64_t *)&unk_1008087B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PDARRISO18013KeySigningKeyProvider()
{
  return self;
}

void sub_10050FC40(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v57 - v13;
  if (a2)
  {
    swift_errorRetain();
    static Logger.auxiliaryCapability.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v57 = v9;
      uint64_t v19 = (void *)v18;
      id v58 = a3;
      uint64_t v59 = a4;
      *(_DWORD *)uint64_t v17 = 138412290;
      swift_errorRetain();
      uint64_t v20 = v8;
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v60 = v21;
      id v22 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v21;
      uint64_t v8 = v20;
      a3 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "PDARRISO18013KeySigningKeyProvider failed to generate KSK with error %@", v17, 0xCu);
      sub_1004CA0A4(&qword_100807D20);
      swift_arrayDestroy();
      uint64_t v9 = v57;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_errorRetain();
    ((void (*)(void, void, uint64_t))a3)(0, 0, a2);
    swift_errorRelease();
    swift_errorRelease();
    return;
  }
  if (a1)
  {
    id v23 = a1;
    id v24 = [v23 attestation];
    if (v24)
    {
      uint64_t v25 = v24;
      id v26 = a3;
      uint64_t v59 = a4;
      uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        id v58 = v26;
        swift_bridgeObjectRetain();
        uint64_t v29 = v27 + 40;
        uint64_t v30 = _swiftEmptyArrayStorage;
        do
        {
          swift_bridgeObjectRetain();
          uint64_t v32 = Data.init(base64Encoded:options:)();
          unint64_t v34 = v33;
          swift_bridgeObjectRelease();
          if (v34 >> 60 != 15)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v30 = sub_100511D6C(0, v30[2] + 1, 1, v30);
            }
            unint64_t v36 = v30[2];
            unint64_t v35 = v30[3];
            if (v36 >= v35 >> 1) {
              uint64_t v30 = sub_100511D6C((void *)(v35 > 1), v36 + 1, 1, v30);
            }
            v30[2] = v36 + 1;
            uint64_t v31 = &v30[2 * v36];
            void v31[4] = v32;
            void v31[5] = v34;
          }
          v29 += 16;
          --v28;
        }
        while (v28);
        swift_bridgeObjectRelease();
        id v26 = v58;
      }
      swift_bridgeObjectRelease();
      id v40 = [objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
      id v41 = [v23 publicKey];
      uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1004CEAE8(v42, v44);
      [v40 setPublicKey:isa];

      Class v46 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v40 setAttestation:v46];

      Class v47 = (Class)[v23 keyAuthorization];
      if (v47)
      {
        uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v50 = v49;

        Class v47 = Data._bridgeToObjectiveC()().super.isa;
        sub_1004CEAE8(v48, v50);
      }
      [v40 setAuthorization:v47];

      sub_1004CA0A4(&qword_100807D10);
      uint64_t v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_1005B4130;
      *(void *)(v51 + 32) = v40;
      uint64_t v60 = v51;
      specialized Array._endMutation()();
      id v52 = objc_allocWithZone((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
      sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
      id v53 = v40;
      Class v54 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v55 = [v52 initWithKeyMaterialContents:v54];

      id v58 = v55;
      ((void (*)(id, void, void))v26)(v55, 0, 0);

      id v56 = v58;

      return;
    }
  }
  static Logger.auxiliaryCapability.getter();
  int v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "PDARRISO18013KeySigningKeyProvider failed to generate KSK", v39, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  ((void (*)(void, void, void))a3)(0, 0, 0);
}

void sub_1005102C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100510674(void *a1, uint64_t a2, void (**a3)(void, void, void, void))
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  _Block_copy(a3);
  id v11 = [a1 previouslyGeneratedSignatureKeyOfType:12];
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  id v13 = [v11 contents];

  if (!v13) {
    goto LABEL_12;
  }
  sub_1004DE1C0(0, (unint64_t *)&qword_100807F10);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v15 = *(id *)(v14 + 32);
  }
  os_log_type_t v16 = v15;
  swift_bridgeObjectRelease();
  id v17 = [v16 keyReferenceIdentifier];

  if (v17)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = *(void **)(a2 + OBJC_IVAR____TtC5passd34PDARRISO18013KeySigningKeyProvider_iso18013Manager);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_1004DFD70;
    *(void *)(v20 + 24) = v10;
    aBlock[4] = sub_100510A9C;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1005102C8;
    aBlock[3] = &unk_100758FD0;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v18 generateKeySigningKeyForCardType:4 subCredentialId:v19 completion:v21];
    _Block_release(v21);
    swift_release();

    return;
  }
LABEL_12:
  static Logger.auxiliaryCapability.getter();
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "PDARRISO18013KeySigningKeyProvider failed to generate KSK as CredentialProvider lacked expected reference identifier.", v25, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  a3[2](a3, 0, 0, 0);
  swift_release();
}

uint64_t sub_100510A2C()
{
  _Block_release(*(const void **)(v0 + 16));
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100510A64()
{
  swift_release();
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100510A9C(void *a1, uint64_t a2)
{
  sub_10050FC40(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100510AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100510AB4()
{
  return swift_release();
}

BOOL sub_100510ABC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

id sub_100510AD4(void *a1)
{
  uint64_t v3 = OBJC_IVAR___PDDeviceLockStateMonitor_lock;
  sub_1004CA0A4(&qword_100807820);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)&v1[v3] = v4;
  *(void *)&v1[OBJC_IVAR___PDDeviceLockStateMonitor_completions] = &_swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR___PDDeviceLockStateMonitor_notificationStreamManager] = a1;
  uint64_t v5 = v1;
  id v6 = a1;
  char v7 = PDGetDeviceLockState();
  v5[OBJC_IVAR___PDDeviceLockStateMonitor_currentLockState] = sub_1005113EC(v7) ^ 1;

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for DeviceLockStateMonitor();
  id v8 = objc_msgSendSuper2(&v10, "init");
  [v6 registerConsumer:v8];

  return v8;
}

id sub_100510BBC()
{
  [*(id *)&v0[OBJC_IVAR___PDDeviceLockStateMonitor_notificationStreamManager] unregisterConsumer:v0];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DeviceLockStateMonitor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100510CCC(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  char v7 = (os_unfair_lock_s *)(*(void *)(v3 + OBJC_IVAR___PDDeviceLockStateMonitor_lock) + 16);
  os_unfair_lock_lock(v7);
  uint64_t v8 = OBJC_IVAR___PDDeviceLockStateMonitor_completions;
  uint64_t v41 = v3;
  uint64_t v9 = *(void *)(*(void *)(v3 + OBJC_IVAR___PDDeviceLockStateMonitor_completions) + 16);
  objc_super v10 = &OBJC_IVAR___PDRelevantPassLiveActivityManager_groupsLock;
  if (!v9)
  {
    id v13 = _swiftEmptyArrayStorage;
    unint64_t v14 = _swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  unint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a1;
  uint64_t v39 = OBJC_IVAR___PDDeviceLockStateMonitor_completions;
  id v40 = v7;
  uint64_t v11 = OBJC_IVAR___PDDeviceLockStateMonitor_currentLockState;
  uint64_t v12 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  id v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = _swiftEmptyArrayStorage;
  do
  {
    int v17 = *((unsigned __int8 *)v12 - 16);
    uint64_t v18 = *(v12 - 1);
    uint64_t v19 = *v12;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v18;
    *(void *)(v20 + 24) = v19;
    if (v17 == *(unsigned __int8 *)(v41 + v11))
    {
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_100513F2C;
      *(void *)(v21 + 24) = v20;
      swift_retain();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v13 = sub_100511504(0, v13[2] + 1, 1, v13);
      }
      unint64_t v25 = v13[2];
      unint64_t v24 = v13[3];
      if (v25 >= v24 >> 1) {
        id v13 = sub_100511504((void *)(v24 > 1), v25 + 1, 1, v13);
      }
      v13[2] = v25 + 1;
      id v15 = &v13[3 * v25];
      *((unsigned char *)v15 + 32) = v17;
      os_log_type_t v16 = sub_100513F58;
    }
    else
    {
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = sub_100513F2C;
      *(void *)(v21 + 24) = v20;
      swift_retain();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = sub_100511504(0, v14[2] + 1, 1, v14);
      }
      unint64_t v23 = v14[2];
      unint64_t v22 = v14[3];
      if (v23 >= v22 >> 1) {
        unint64_t v14 = sub_100511504((void *)(v22 > 1), v23 + 1, 1, v14);
      }
      _OWORD v14[2] = v23 + 1;
      id v15 = &v14[3 * v23];
      *((unsigned char *)v15 + 32) = v17;
      os_log_type_t v16 = sub_100513F34;
    }
    void v15[5] = v16;
    v15[6] = v21;
    swift_release();
    v12 += 3;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  uint64_t v8 = v39;
  char v7 = v40;
  a3 = v37;
  a1 = v38;
  a2 = v36;
  objc_super v10 = &OBJC_IVAR___PDRelevantPassLiveActivityManager_groupsLock;
  if (v36)
  {
LABEL_18:
    if (((a1 & 1) == 0) == *(unsigned char *)(v41 + v10[256]))
    {
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = a2;
      *(void *)(v27 + 24) = a3;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = sub_100511504(0, v14[2] + 1, 1, v14);
      }
      unint64_t v29 = v14[2];
      unint64_t v28 = v14[3];
      if (v29 >= v28 >> 1) {
        unint64_t v14 = sub_100511504((void *)(v28 > 1), v29 + 1, 1, v14);
      }
      _OWORD v14[2] = v29 + 1;
      uint64_t v30 = &v14[3 * v29];
      *((unsigned char *)v30 + 32) = a1 & 1;
      void v30[5] = sub_100513F58;
      void v30[6] = v27;
    }
    else
    {
      uint64_t v26 = swift_retain();
      a2(v26);
      sub_100513F3C(a1, (uint64_t)a2);
    }
  }
LABEL_25:
  *(void *)(v41 + v8) = v14;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);
  uint64_t v31 = v13[2];
  if (v31)
  {
    uint64_t v32 = v13 + 6;
    do
    {
      unint64_t v33 = (void (*)(uint64_t))*(v32 - 1);
      uint64_t v34 = swift_retain();
      v33(v34);
      swift_release();
      v32 += 3;
      --v31;
    }
    while (v31);
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for DeviceLockStateMonitor()
{
  return self;
}

uint64_t getEnumTagSinglePayload for DeviceLockStateMonitor.LockState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceLockStateMonitor.LockState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100511350);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100511378(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceLockStateMonitor.LockState()
{
  return &type metadata for DeviceLockStateMonitor.LockState;
}

unint64_t sub_100511398()
{
  unint64_t result = qword_100808838;
  if (!qword_100808838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100808838);
  }
  return result;
}

uint64_t sub_1005113EC(char a1)
{
  return a1 & 1;
}

char *sub_1005113F4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1004CA0A4(&qword_1008088A8);
      objc_super v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      id v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      objc_super v10 = (char *)&_swiftEmptyArrayStorage;
      id v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100513648(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100511504(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1004CA0A4(&qword_100808848);
      objc_super v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      objc_super v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100513754(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_10051162C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1004CA0A4(&qword_100808898);
      objc_super v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[24 * v8 + 32]) {
          memmove(v12, a4 + 32, 24 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      objc_super v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100513864(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100511754(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1004CA0A4(&qword_100808550);
      objc_super v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      id v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      objc_super v10 = (char *)&_swiftEmptyArrayStorage;
      id v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100513554(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100511864(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100511AEC(a1, a2, a3, a4, &qword_1008088B8, (uint64_t (*)(void))&type metadata accessor for ProvisioningRequirement, (uint64_t (*)(void))&type metadata accessor for ProvisioningRequirement);
}

void *sub_100511898(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1004CA0A4(&qword_100808878);
      objc_super v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      objc_super v10 = _swiftEmptyArrayStorage;
      id v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100513B68(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1005119A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1004CA0A4(&qword_100808880);
      objc_super v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      objc_super v10 = _swiftEmptyArrayStorage;
      id v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100513C5C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100511AB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100511AEC(a1, a2, a3, a4, &qword_100808860, (uint64_t (*)(void))&type metadata accessor for BankCredential.ACH, (uint64_t (*)(void))&type metadata accessor for BankCredential.ACH);
}

uint64_t sub_100511AEC(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1004CA0A4(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100513A0C(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_100511D6C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1004CA0A4((uint64_t *)&unk_1008082C0);
      objc_super v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      objc_super v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100513D48(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100511E7C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10051289C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10051202C(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, Swift::Int a5)
{
  return sub_100512054(a1, a2, a3, a4, a5, (uint64_t *)&unk_100808888);
}

uint64_t sub_100512040(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, Swift::Int a5)
{
  return sub_100512054(a1, a2, a3, a4, a5, (uint64_t *)&unk_100808868);
}

uint64_t sub_100512054(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, Swift::Int a5, uint64_t *a6)
{
  uint64_t v11 = *v6;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = v12 & ~v13;
  uint64_t v15 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v16 = ~v13;
    uint64_t v17 = *(void *)(v11 + 48);
    while (1)
    {
      uint64_t v18 = (void *)(v17 + 32 * v14);
      uint64_t v19 = v18[2];
      uint64_t v20 = v18[3];
      BOOL v21 = *v18 == a2 && v18[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        BOOL v22 = v19 == a4 && v20 == a5;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v14 = (v14 + 1) & v16;
      if (((*(void *)(v15 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v23 = (Swift::Int *)(*(void *)(*v30 + 48) + 32 * v14);
    Swift::Int v24 = v23[1];
    Swift::Int v25 = v23[2];
    Swift::Int v26 = v23[3];
    *a1 = *v23;
    a1[1] = v24;
    a1[2] = v25;
    a1[3] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v32 = *v30;
    *uint64_t v30 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100512A38(a2, a3, a4, a5, v14, isUniquelyReferenced_nonNull_native, a6);
    *uint64_t v30 = v32;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    uint64_t result = 1;
    a1[2] = a4;
    a1[3] = a5;
  }
  return result;
}

uint64_t sub_100512284()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1004CA0A4(&qword_100808840);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100512564(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_1004CA0A4(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v35 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v4 + 56);
    int64_t v34 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v34) {
          goto LABEL_33;
        }
        unint64_t v18 = v35[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v18 = v35[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v34) {
              goto LABEL_33;
            }
            unint64_t v18 = v35[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v2;
                uint64_t v33 = 1 << *(unsigned char *)(v4 + 32);
                if (v33 > 63) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v35 = -1 << v33;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v34) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v35[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = v4;
      uint64_t v21 = (uint64_t *)(*(void *)(v4 + 48) + 32 * v16);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v24 = v21[2];
      uint64_t v25 = v21[3];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v10 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v27) & ~*(void *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v10 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = (void *)(*(void *)(v6 + 48) + 32 * v13);
      *unint64_t v14 = v22;
      v14[1] = v23;
      _OWORD v14[2] = v24;
      void v14[3] = v25;
      ++*(void *)(v6 + 16);
      uint64_t v4 = v20;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v6;
  return result;
}

Swift::Int sub_10051289C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100512284();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100512C30();
      goto LABEL_22;
    }
    sub_100512FA0();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_100512A38(Swift::Int result, Swift::Int a2, Swift::Int a3, Swift::Int a4, unint64_t a5, char a6, uint64_t *a7)
{
  Swift::Int v12 = result;
  unint64_t v13 = *(void *)(*v7 + 16);
  unint64_t v14 = *(void *)(*v7 + 24);
  if (v14 > v13 && (a6 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v15 = v13 + 1;
  if (a6)
  {
    sub_100512564(v15, a7);
  }
  else
  {
    if (v14 > v13)
    {
      uint64_t result = (Swift::Int)sub_100512DE4(a7);
      goto LABEL_22;
    }
    sub_100513250(v15, a7);
  }
  uint64_t v16 = *v7;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t result = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v16 + 32);
  a5 = result & ~v17;
  uint64_t v18 = v16 + 56;
  if ((*(void *)(v16 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5))
  {
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v16 + 48);
    while (1)
    {
      uint64_t v21 = (void *)(v20 + 32 * a5);
      uint64_t v22 = v21[2];
      uint64_t v23 = v21[3];
      BOOL v24 = *v21 == v12 && v21[1] == a2;
      if (v24 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        if (v22 == a3 && v23 == a4) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          break;
        }
      }
      a5 = (a5 + 1) & v19;
      if (((*(void *)(v18 + ((a5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a5) & 1) == 0) {
        goto LABEL_22;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_22:
  uint64_t v26 = *v31;
  *(void *)(*v31 + 8 * (a5 >> 6) + 56) |= 1 << a5;
  unint64_t v27 = (Swift::Int *)(*(void *)(v26 + 48) + 32 * a5);
  *unint64_t v27 = v12;
  v27[1] = a2;
  void v27[2] = a3;
  v27[3] = a4;
  uint64_t v28 = *(void *)(v26 + 16);
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29) {
    __break(1u);
  }
  else {
    *(void *)(v26 + 16) = v30;
  }
  return result;
}

void *sub_100512C30()
{
  uint64_t v1 = v0;
  sub_1004CA0A4(&qword_100808840);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100512DE4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1004CA0A4(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v14) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24)
      {
        int64_t v10 = v23 + 2;
        if (v23 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v24 = *(void *)(v7 + 8 * v10);
        if (!v24) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 32 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = v18[1];
    uint64_t v20 = v18[2];
    uint64_t v21 = v18[3];
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    v22[2] = v20;
    void v22[3] = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v14) {
    goto LABEL_28;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100512FA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1004CA0A4(&qword_100808840);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}