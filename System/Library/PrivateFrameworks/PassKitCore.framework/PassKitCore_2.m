void sub_10025D4F0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void v5[5];
  id v6;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10025D5CC;
  v5[3] = &unk_100743118;
  objc_copyWeak(&v6, &location);
  v5[4] = *(void *)(a1 + 32);
  [v4 defaultAccountForFeature:a2 completion:v5];
  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_10025D5B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10025D5CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 208));
    v6 = [v3 accountIdentifier];
    if (v6)
    {
      v7 = [v5[25] objectForKey:v6];
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v13;
        do
        {
          v11 = 0;
          do
          {
            if (*(void *)v13 != v10) {
              objc_enumerationMutation(v7);
            }
            (*(void (**)(void))(*(void *)(*((void *)&v12 + 1) + 8 * (void)v11) + 16))();
            v11 = (char *)v11 + 1;
          }
          while (v9 != v11);
          id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }
        while (v9);
      }
      [v5[25] removeObjectForKey:v6];
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 208));
  }
}

void sub_10025D740(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Calling zone repopulation for cloud account with zoneName %@", buf, 0xCu);
    }

    v4 = *(void **)(*(void *)(a1 + 40) + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10025D864;
    v5[3] = &unk_100743188;
    id v6 = *(id *)(a1 + 32);
    [v4 performHandlerOnSharedWebServiceQueue:v5];
  }
}

void sub_10025D864(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v2 = a2;
  id v3 = +[NSArray arrayWithObjects:&v4 count:1];
  objc_msgSend(v2, "repopulateZonesWithCloudStoreZoneNames:completion:", v3, &stru_100743160, v4);
}

void sub_10025D900(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"failed";
    if (v4) {
      CFStringRef v6 = @"succeeded";
    }
    int v7 = 138412546;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Zone repopulation %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10025D9D8(uint64_t a1, uint64_t a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10025DA88;
  v5[3] = &unk_10072E9B0;
  BOOL v4 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  [v4 defaultAccountForFeature:a2 completion:v5];
}

void sub_10025DA88(uint64_t a1, void *a2)
{
  id v3 = [a2 accountIdentifier];
  BOOL v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    __int16 v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fallback card account identifier for zoneName: %@, accountID: %@", (uint8_t *)&v6, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10025DD80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10025DDFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_alloc_init((Class)PKAccountWebServiceCreatedZoneRequest);
    [v4 setAccountIdentifier:*(void *)(a1 + 48)];
    [v4 setZoneName:*(void *)(a1 + 56)];
    uint64_t v5 = [*(id *)(a1 + 32) containerName];
    [v4 setContainerName:v5];

    int v6 = [v3 accountBaseURL];
    [v4 setBaseURL:v6];

    uint64_t v7 = *(void *)(a1 + 40);
    __int16 v8 = *(void **)(v7 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10025E0B4;
    v13[3] = &unk_10073C918;
    id v14 = v4;
    uint64_t v15 = v7;
    id v16 = *(id *)(a1 + 56);
    id v17 = *(id *)(a1 + 64);
    id v9 = v4;
    [v8 performHandlerOnSharedWebServiceQueue:v13];
  }
  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = [*(id *)(a1 + 32) zoneName];
      *(_DWORD *)buf = 138412290;
      v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Error: There is no account for created zoneName %@", buf, 0xCu);
    }
    long long v12 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025E038;
    block[3] = &unk_10072F788;
    id v19 = *(id *)(a1 + 64);
    dispatch_async(v12, block);
    id v9 = v19;
  }
}

void sub_10025E038(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10025E0B4(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025E16C;
  v6[3] = &unk_100742500;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 48);
  v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 createdZoneWithRequest:v4 completion:v6];
}

void sub_10025E16C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10025E240;
  v8[3] = &unk_100730C10;
  id v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v6;
  id v7 = v4;
  dispatch_async(v5, v8);
}

void sub_10025E240(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v12 = v4;
      __int16 v13 = 2112;
      uint64_t v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Could not inform server of created zone %@, %@", buf, 0x16u);
    }
  }
  uint64_t v5 = *(void **)(a1 + 56);
  if (v5)
  {
    id v6 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025E398;
    block[3] = &unk_100736830;
    id v9 = v5;
    BOOL v10 = v2 == 0;
    id v8 = *(id *)(a1 + 32);
    dispatch_async(v6, block);
  }
}

uint64_t sub_10025E398(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_10025E3B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "There is no account idenifier associated with zoneName, falling back to default card account %@", buf, 0xCu);
    }

    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10025E508;
    v7[3] = &unk_10072E9B0;
    id v6 = *(void **)(a1 + 40);
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 48);
    [v6 defaultAccountForFeature:2 completion:v7];
  }
}

void sub_10025E508(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [v3 accountIdentifier];
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    BOOL v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fallback card account identifier for zoneName: %@, accountID: %@", (uint8_t *)&v7, 0x16u);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10025E734(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10025E748(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10025E81C;
  v9[3] = &unk_100731EC0;
  id v10 = v3;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(a1 + 40);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_10025E81C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  if ((unint64_t)v2 > 4 || v2 == (id)1)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10025E91C;
    v8[3] = &unk_10072E9D8;
    void v8[4] = v6;
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    objc_msgSend(v6, "_queue_updateSharedAccountCloudStoreIfNeccessaryForAccount:completion:", v7, v8);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4)
    {
      id v5 = *(void (**)(void))(v4 + 16);
      v5();
    }
  }
}

void sub_10025E91C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025E9C8;
  block[3] = &unk_10072E9D8;
  void block[4] = v2;
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v3, block);
}

void sub_10025E9C8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) sharedAccountCloudStoreForAccountIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025EA8C;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10025EA8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10025ED30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10025EDAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025EE98;
  block[3] = &unk_100734360;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10025EE98(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (([*(id *)(a1 + 56) fromPush] & 1) == 0)
    {
      id v2 = [*(id *)(*(void *)(a1 + 48) + 24) sharedAccountCloudStoreForAccountIdentifier:*(void *)(a1 + 40)];
      id v3 = *(void **)(a1 + 48);
      id v4 = [v2 isDirty];
      id v5 = [v2 lastUpdated];
      LODWORD(v3) = [v3 _shouldProactivelyFetchEndpoint:4 dirty:v4 lastUpdated:v5 fetchPeriodEndpoint:4 account:*(void *)(a1 + 32)];

      if (!v3)
      {
        v18 = *(NSObject **)(*(void *)(a1 + 48) + 144);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10025F238;
        v26[3] = &unk_10072E598;
        id v19 = *(id *)(a1 + 64);
        id v27 = v2;
        id v28 = v19;
        id v12 = v2;
        dispatch_async(v18, v26);

        id v13 = v28;
        goto LABEL_11;
      }
    }
    [*(id *)(a1 + 32) feature];
    uint64_t v6 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
    id v7 = objc_alloc_init((Class)PKAccountWebServiceSharedAccountCloudStoreRequest);
    id v8 = [*(id *)(a1 + 32) accountIdentifier];
    [v7 setAccountIdentifier:v8];

    id v9 = [*(id *)(a1 + 32) accountBaseURL];
    [v7 setBaseURL:v9];

    id v10 = *(void **)(*(void *)(a1 + 48) + 32);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10025F250;
    v21[3] = &unk_1007421E0;
    id v22 = v7;
    int8x16_t v20 = *(int8x16_t *)(a1 + 40);
    id v11 = (id)v20.i64[0];
    int8x16_t v23 = vextq_s8(v20, v20, 8uLL);
    uint64_t v25 = v6;
    id v24 = *(id *)(a1 + 64);
    id v12 = v7;
    [v10 performHandlerOnSharedWebServiceQueue:v21];

    id v13 = v22;
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v14 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v32 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@", buf, 0xCu);
  }

  id v16 = *(void **)(a1 + 64);
  if (v16)
  {
    id v17 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025F1BC;
    block[3] = &unk_10072F788;
    id v30 = v16;
    dispatch_async(v17, block);
    id v12 = v30;
LABEL_12:
  }
}

void sub_10025F1BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_10025F238(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10025F250(void *a1, void *a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10025F30C;
  v9[3] = &unk_1007431D8;
  uint64_t v4 = a1[4];
  id v5 = (void *)a1[6];
  void v9[4] = a1[5];
  id v6 = v5;
  id v8 = (void *)a1[7];
  uint64_t v7 = a1[8];
  id v10 = v6;
  uint64_t v12 = v7;
  id v11 = v8;
  [a2 sharedAccountCloudStoreWithRequest:v4 completion:v9];
}

void sub_10025F30C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10025F408;
  v13[3] = &unk_100732C68;
  id v14 = v6;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  id v10 = *(void **)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  id v17 = v5;
  id v18 = v10;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, v13);
}

void sub_10025F408(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = [v2 description];
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = v4;
      __int16 v22 = 2112;
      int8x16_t v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Could not update shared account cloud store for account %@ payments with error %@", buf, 0x16u);
    }
    id v6 = [*(id *)(*(void *)(a1 + 48) + 24) sharedAccountCloudStoreForAccountIdentifier:*(void *)(a1 + 40)];
    if (v6)
    {
      uint64_t v7 = v6;
      [v6 setDirty:1];
      id v8 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateSharedAccountCloudStore:v7 accountIdentifier:*(void *)(a1 + 40)];
    }
    else
    {
      id v8 = 0;
    }
    [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 72) endpointType:4 accountIdentifier:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v9 = [*(id *)(a1 + 56) sharedAccountCloudStore];
    id v10 = +[NSDate date];
    [v9 setLastUpdated:v10];

    id v8 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateSharedAccountCloudStore:v9 accountIdentifier:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:*(void *)(a1 + 72) endpointType:4 accountIdentifier:*(void *)(a1 + 40)];

    id v11 = *(void **)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10025F6AC;
    v18[3] = &unk_100741EA8;
    v18[4] = v11;
    id v19 = *(id *)(a1 + 40);
    [v11 _accessObserversWithHandler:v18];
  }
  id v12 = *(void **)(a1 + 64);
  if (v12)
  {
    id v13 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10025F70C;
    block[3] = &unk_100731830;
    id v17 = v12;
    id v15 = v8;
    id v16 = *(id *)(a1 + 32);
    dispatch_async(v13, block);
  }
}

void sub_10025F6AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:*(void *)(a1 + 32) sharedAccountCloudStoreChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10025F70C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_10025F858(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10025F86C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10025F93C;
  v7[3] = &unk_100730578;
  void v7[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10025F93C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updatePaymentFundingSourcesIfNecessaryForAccount:", *(void *)(a1 + 40));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) paymentFundingSourcesForAccountIdentifier:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025FA10;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10025FA10(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10025FB80(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10025FB94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025FC78;
  block[3] = &unk_100731F38;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10025FC78(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updatePaymentFundingSourcesIfNecessaryForAccount:", *(void *)(a1 + 40));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) paymentFundingSourceForIdentifier:*(void *)(a1 + 48) accountIdentifier:*(void *)(a1 + 56)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025FD4C;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 64);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10025FD4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10025FFE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_100260060(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026014C;
  block[3] = &unk_100734360;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10026014C(id *a1)
{
  if (a1[4])
  {
    if (([a1[7] force] & 1) != 0
      || ([a1[6] _shouldProactivelyFetchEndpoint:6 metadataType:2 fetchPeriodEndpoint:6 account:a1[4]] & 1) != 0)
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v31 = 0x3032000000;
      uint64_t v32 = sub_100020A5C;
      v33 = sub_100021020;
      id v2 = [*((id *)a1[6] + 3) accountEndpointMetadataForAccountIdentifier:a1[5] endpoint:2];
      id v3 = v2;
      if (v2) {
        id v4 = v2;
      }
      else {
        id v4 = [[PDAccountWebServiceEndpointMetadata alloc] initWithAccountIdentifier:a1[5] endpoint:2];
      }
      v34 = v4;

      id v9 = objc_alloc_init((Class)PKAccountWebServiceFundingSourcesRequest);
      id v10 = [a1[4] accountIdentifier];
      [v9 setAccountIdentifier:v10];

      uint64_t v11 = [a1[4] accountBaseURL];
      [v9 setBaseURL:v11];

      id v12 = (void *)*((void *)a1[6] + 4);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100260594;
      v18[3] = &unk_100742DD0;
      id v13 = v9;
      id v14 = a1[6];
      id v19 = v13;
      id v20 = v14;
      id v21 = a1[4];
      p_long long buf = &buf;
      id v22 = a1[5];
      id v23 = a1[8];
      [v12 performHandlerOnSharedWebServiceQueue:v18];

      _Block_object_dispose(&buf, 8);
    }
    else
    {
      id v15 = [*((id *)a1[6] + 3) paymentFundingSourcesForAccountIdentifier:a1[5]];
      id v16 = a1[8];
      if (v16)
      {
        id v17 = *((void *)a1[6] + 18);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_10026057C;
        v25[3] = &unk_10072E598;
        id v27 = v16;
        id v26 = v15;
        dispatch_async(v17, v25);
      }
    }
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = a1[5];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@", (uint8_t *)&buf, 0xCu);
    }

    id v7 = a1[8];
    if (v7)
    {
      id v8 = *((void *)a1[6] + 18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100260500;
      block[3] = &unk_10072F788;
      id v29 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_1002604E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100260500(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_10026057C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100260594(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100260668;
  v8[3] = &unk_100743200;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 72);
  id v9 = v6;
  uint64_t v12 = v7;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  [a2 fundingSourcesWithRequest:v4 completion:v8];
}

void sub_100260668(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100260778;
  block[3] = &unk_100742D80;
  id v13 = *(id *)(a1 + 40);
  id v14 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v15 = v8;
  id v16 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v17 = v5;
  id v18 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

void sub_100260778(uint64_t a1)
{
  [*(id *)(a1 + 32) feature];
  uint64_t v2 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
  if (*(void *)(a1 + 40))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:1];
    uint64_t v3 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v6 = [*(id *)(*(void *)(a1 + 48) + 24) paymentFundingSourcesForAccountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:v2 endpointType:6 accountIdentifier:*(void *)(a1 + 56)];
    uint64_t v7 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100260A80;
    block[3] = &unk_100731830;
    id v30 = *(id *)(a1 + 72);
    id v8 = v6;
    id v28 = v8;
    id v29 = *(id *)(a1 + 40);
    dispatch_async(v7, block);

    id v9 = v30;
  }
  else
  {
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:v2 endpointType:6 accountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:0];
    id v10 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    id v11 = +[NSDate date];
    [v10 setLastUpdated:v11];

    uint64_t v12 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    uint64_t v15 = *(void **)(*(void *)(a1 + 48) + 24);
    id v16 = [*(id *)(a1 + 64) fundingSources];
    id v17 = [v15 insertOrUpdatePaymentFundingSources:v16 accountIdentifier:*(void *)(a1 + 56)];

    id v18 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100260A98;
    v24[3] = &unk_10072E598;
    id v26 = *(id *)(a1 + 72);
    id v19 = v17;
    id v25 = v19;
    dispatch_async(v18, v24);

    id v20 = *(void **)(a1 + 48);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100260AB0;
    v21[3] = &unk_1007424D8;
    void v21[4] = v20;
    id v8 = v19;
    id v22 = v8;
    id v23 = *(id *)(a1 + 56);
    [v20 _accessObserversWithHandler:v21];

    id v9 = v22;
  }
}

uint64_t sub_100260A80(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_100260A98(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100260AB0(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdatePaymentFundingSources:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_100260BEC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = a3;
    id v8 = [v6 accountIdentifier];

    int v9 = 138412546;
    id v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed updating funding sources proactively for account %@. Error %@", (uint8_t *)&v9, 0x16u);
  }
}

id sub_100260D68(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountPendingFamilyMembers:*(void *)(a1 + 40)];
}

void sub_100260E3C(void *a1)
{
  uint64_t v1 = a1[6];
  id v3 = [*(id *)(a1[4] + 24) accountPendingFamilyMembersForAccountIdentifier:a1[5]];
  uint64_t v2 = [v3 allObjects];
  (*(void (**)(uint64_t, void *, void))(v1 + 16))(v1, v2, 0);
}

void sub_100261640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_10026168C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v25 = v9;
    __int16 v26 = 2112;
    uint64_t v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Requesting balances from %@ to %@", buf, 0x16u);
  }

  __int16 v11 = [[PDAccountManagerBalancesRequest alloc] initWithAccountIdentifier:*(void *)(a1 + 48) startDate:*(void *)(a1 + 32) endDate:*(void *)(a1 + 40) type:*(void *)(a1 + 72)];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10026183C;
  v18[3] = &unk_100743228;
  id v19 = v6;
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  id v21 = v7;
  uint64_t v22 = v12;
  uint64_t v23 = v13;
  int8x16_t v17 = *(int8x16_t *)(a1 + 48);
  id v14 = (id)v17.i64[0];
  int8x16_t v20 = vextq_s8(v17, v17, 8uLL);
  id v15 = v6;
  id v16 = v7;
  [(PDAccountManagerBalancesRequest *)v11 addCompletion:v18];
  [*(id *)(a1 + 56) _addAccountManagerFetchRequest:v11];
}

void sub_10026183C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      *(_DWORD *)long long buf = 138412290;
      id v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not update balances with error %@, aborting", buf, 0xCu);
    }

    objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), a3);
    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    if (v8)
    {
      id v9 = [v5 count];
      uint64_t v10 = [v5 firstObject];
      __int16 v11 = [v10 date];
      uint64_t v12 = [v5 lastObject];
      uint64_t v13 = [v12 date];
      *(_DWORD *)long long buf = 134218498;
      id v25 = v9;
      __int16 v26 = 2112;
      uint64_t v27 = v11;
      __int16 v28 = 2112;
      id v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received %lu balances from %@ to %@", buf, 0x20u);
    }
    id v14 = *(void **)(a1[5] + 24);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100261A94;
    v19[3] = &unk_100734FC8;
    id v15 = v5;
    uint64_t v23 = a1[9];
    uint64_t v16 = a1[5];
    int8x16_t v17 = (void *)a1[6];
    id v20 = v15;
    uint64_t v21 = v16;
    id v22 = v17;
    [v14 performTransactionWithBlock:v19];
    (*(void (**)(void, void, void, uint64_t))(a1[7] + 16))(a1[7], a1[4], 0, v18);
  }
}

uint64_t sub_100261A94(uint64_t a1)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v17;
    *(void *)&long long v4 = 138412290;
    long long v15 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v2);
        }
        BOOL v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v9 = objc_msgSend(v8, "date", v15, (void)v16);
        [v9 timeIntervalSinceNow];
        double v11 = v10;

        if (v11 <= 600.0)
        {
          [v8 setType:*(void *)(a1 + 56)];
          [*(id *)(*(void *)(a1 + 40) + 24) insertAccountBalance:v8 forAccountIdentifier:*(void *)(a1 + 48)];
        }
        else
        {
          uint64_t v12 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = [v8 date];
            *(_DWORD *)long long buf = v15;
            uint64_t v21 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Ignoring balance from %@", buf, 0xCu);
          }
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }
    while (v5);
  }

  return 1;
}

id sub_100261C60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v5 = [a4 isCanceled];
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8);
  id v7 = *(void **)(v6 + 40);
  if (v5)
  {
    [*(id *)(v6 + 40) setIsDirty:1];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    BOOL v8 = +[NSDate date];
    [v7 setLastUpdated:v8];

    [*(id *)(a1 + 32) accountBalancesForAccountIdentifier:*(void *)(a1 + 40) startDate:*(void *)(a1 + 48) endDate:*(void *)(a1 + 56) type:*(void *)(a1 + 88) completion:*(void *)(a1 + 64)];
  }
  return [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
}

void sub_100261FF4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002620BC;
  v7[3] = &unk_100742758;
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v10 = v4;
  void v7[4] = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  [v2 accountWithIdentifier:v3 completion:v7];
}

void sub_1002620BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if ([v3 feature] == (id)3)
    {
      uint64_t v52 = 0;
      v53 = &v52;
      uint64_t v54 = 0x3032000000;
      v55 = sub_100020A5C;
      v56 = sub_100021020;
      uint64_t v57 = [*(id *)(*(void *)(a1 + 32) + 24) accountEndpointMetadataForAccountIdentifier:*(void *)(a1 + 40) endpoint:1];
      if ([*(id *)(a1 + 48) fromPush]) {
        goto LABEL_14;
      }
      uint64_t v5 = *(void **)(a1 + 32);
      id v6 = [(id)v53[5] isDirty];
      unsigned __int8 v7 = [*(id *)(a1 + 48) ignoreLastUpdatedDate];
      if (v7)
      {
        id v8 = 0;
      }
      else
      {
        id v8 = [(id)v53[5] localLastUpdated];
      }
      unsigned __int8 v14 = [v5 _shouldProactivelyFetchEndpoint:5 dirty:v6 lastUpdated:v8 fetchPeriodEndpoint:5 account:v4];
      if ((v7 & 1) == 0) {

      }
      if (v14)
      {
LABEL_14:
        long long v15 = v53;
        long long v16 = (void *)v53[5];
        if (v16)
        {
          id v17 = v16;
          long long v18 = (void *)v15[5];
          v15[5] = (uint64_t)v17;
        }
        else
        {
          long long v19 = [[PDAccountWebServiceEndpointMetadata alloc] initWithAccountIdentifier:*(void *)(a1 + 40) endpoint:1];
          long long v18 = (void *)v53[5];
          v53[5] = (uint64_t)v19;
        }

        id v20 = [*(id *)(a1 + 48) lastPaginatedResponse];
        uint64_t v21 = [v20 lastUpdated];

        if (!v21)
        {
          uint64_t v21 = [(id)v53[5] lastUpdated];
        }
        if ([*(id *)(a1 + 48) ignoreLastUpdatedDate]) {
          id v22 = 0;
        }
        else {
          id v22 = v21;
        }
        id v23 = v22;

        if (v23)
        {
          uint64_t v24 = 2;
        }
        else if ([*(id *)(a1 + 48) fromPush])
        {
          uint64_t v24 = 2;
        }
        else
        {
          uint64_t v24 = 1;
        }
        id v25 = objc_alloc_init((Class)PKAccountWebServiceFinancingPlansPaginatedRequest);
        __int16 v26 = [*(id *)(a1 + 48) lastPaginatedResponse];
        [v25 setLastPageResponse:v26];

        [v25 setAccountIdentifier:*(void *)(a1 + 40)];
        uint64_t v27 = [v4 accountBaseURL];
        [v25 setBaseURL:v27];

        [v25 setLastUpdated:v23];
        __int16 v28 = [v4 payLaterDetails];
        uint64_t v29 = (uint64_t)[v28 financingPlanFetchLimit];

        if (v29 >= 1)
        {
          id v30 = +[NSNumber numberWithInteger:v29];
          [v25 setLimit:v30];
        }
        uint64_t v31 = *(void **)(*(void *)(a1 + 32) + 32);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_100262610;
        v39[3] = &unk_1007432F0;
        id v32 = v25;
        uint64_t v33 = *(void *)(a1 + 32);
        id v40 = v32;
        uint64_t v41 = v33;
        id v42 = v4;
        v46 = &v52;
        id v43 = *(id *)(a1 + 40);
        id v45 = *(id *)(a1 + 56);
        id v44 = *(id *)(a1 + 48);
        uint64_t v47 = v29;
        uint64_t v48 = v24;
        [v31 performHandlerOnSharedWebServiceQueue:v39];
      }
      else
      {
        v34 = [*(id *)(*(void *)(a1 + 32) + 24) financingPlansWithAccountIdentifier:*(void *)(a1 + 40)];
        v35 = *(NSObject **)(*(void *)(a1 + 32) + 144);
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472;
        v49[2] = sub_1002625EC;
        v49[3] = &unk_10072E598;
        id v36 = *(id *)(a1 + 56);
        id v50 = v34;
        id v51 = v36;
        id v23 = v34;
        dispatch_async(v35, v49);

        id v32 = v51;
      }

      _Block_object_dispose(&v52, 8);
      double v11 = (void *)v57;
      goto LABEL_32;
    }
    uint64_t v12 = *(void **)(a1 + 56);
    if (v12)
    {
      uint64_t v13 = *(NSObject **)(*(void *)(a1 + 32) + 144);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_1002625D4;
      v58[3] = &unk_10072F788;
      id v59 = v12;
      dispatch_async(v13, v58);
      double v11 = v59;
      goto LABEL_32;
    }
  }
  else
  {
    id v9 = *(void **)(a1 + 56);
    if (v9)
    {
      id v10 = *(NSObject **)(*(void *)(a1 + 32) + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100262C3C;
      block[3] = &unk_10072F788;
      id v38 = v9;
      dispatch_async(v10, block);
      double v11 = v38;
LABEL_32:
    }
  }
}

void sub_1002625A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002625D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002625EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0);
  }
  return result;
}

void sub_100262610(uint64_t a1, void *a2)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10026271C;
  v12[3] = &unk_1007432C8;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 48);
  v12[4] = *(void *)(a1 + 40);
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 80);
  id v13 = v6;
  uint64_t v18 = v7;
  id v14 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 72);
  id v8 = *(id *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 88);
  id v15 = v8;
  uint64_t v19 = v9;
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 96);
  id v16 = v10;
  uint64_t v20 = v11;
  [a2 accountFinancingPlansWithRequest:v4 completion:v12];
}

void sub_10026271C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100262868;
  block[3] = &unk_1007432A0;
  id v16 = *(id *)(a1 + 40);
  id v17 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 80);
  uint64_t v18 = v8;
  id v19 = *(id *)(a1 + 48);
  id v23 = *(id *)(a1 + 72);
  id v20 = v5;
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 88);
  id v21 = v9;
  uint64_t v25 = v10;
  id v11 = *(id *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 96);
  id v22 = v11;
  uint64_t v26 = v12;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v7, block);
}

void sub_100262868(uint64_t a1)
{
  [*(id *)(a1 + 32) feature];
  uint64_t v2 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
  if (*(void *)(a1 + 40))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setIsDirty:1];
    uint64_t v3 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    id v6 = [*(id *)(*(void *)(a1 + 48) + 24) financingPlansWithAccountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:v2 endpointType:5 accountIdentifier:*(void *)(a1 + 56)];
    uint64_t v7 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100262BF8;
    block[3] = &unk_100731830;
    id v32 = (PDAccountManagerFinancingPlansRequest *)*(id *)(a1 + 88);
    id v30 = v6;
    id v31 = *(id *)(a1 + 40);
    id v8 = v6;
    dispatch_async(v7, block);

    id v9 = v32;
  }
  else
  {
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:v2 endpointType:5 accountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) setIsDirty:0];
    uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
    id v11 = [*(id *)(a1 + 64) lastUpdated];
    if (v11)
    {
      [v10 setLastUpdated:v11];
    }
    else
    {
      uint64_t v12 = +[NSDate date];
      [v10 setLastUpdated:v12];
    }
    id v13 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
    id v14 = +[NSDate date];
    [v13 setLocalLastUpdated:v14];

    uint64_t v15 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
    uint64_t v16 = *(void *)(*(void *)(a1 + 96) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    id v8 = [*(id *)(a1 + 64) account];
    if (v8) {
      [*(id *)(a1 + 48) insertOrReplaceAccount:v8 extended:0 deleteSensitiveData:0 completion:0];
    }
    id v9 = -[PDAccountManagerFinancingPlansRequest initWithAccountIdentifier:fromPush:]([PDAccountManagerFinancingPlansRequest alloc], "initWithAccountIdentifier:fromPush:", *(void *)(a1 + 56), [*(id *)(a1 + 72) fromPush]);
    [(PDAccountManagerFinancingPlansRequest *)v9 setLastPaginatedResponse:*(void *)(a1 + 64)];
    if (*(uint64_t *)(a1 + 104) >= 1)
    {
      uint64_t v18 = *(void **)(a1 + 80);
      id v19 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:");
      [v18 setLimit:v19];
    }
    objc_msgSend(*(id *)(a1 + 48), "_queue_fetchNextPaginatedRequestIfNecessaryFromPreviousResponse:newRequest:", *(void *)(a1 + 64), v9);
    id v20 = *(void **)(a1 + 48);
    id v21 = [*(id *)(a1 + 64) financingPlans];
    id v22 = objc_msgSend(v20, "_queue_processFinancingPlans:accountIdentifier:updateReasons:", v21, *(void *)(a1 + 56), *(void *)(a1 + 112));

    id v23 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100262C18;
    v26[3] = &unk_10072E598;
    id v24 = *(id *)(a1 + 88);
    id v27 = v22;
    id v28 = v24;
    id v25 = v22;
    dispatch_async(v23, v26);
  }
}

uint64_t sub_100262BF8(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

uint64_t sub_100262C18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0);
  }
  return result;
}

void sub_100262C3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1002631FC(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_100263260(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didAddFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

void sub_1002632C4(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdateFinancingPlan:a1[5] oldFinancingPlan:a1[6] accountIdentifier:a1[7]];
  }
}

void sub_1002637B4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (v5)
  {
    if (a3) {
      CFStringRef v7 = @"old";
    }
    else {
      CFStringRef v7 = @"new";
    }
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = [v5 planIdentifier];
    uint64_t v10 = +[NSString stringWithFormat:@"financingPlanUpdate-%@-date-%@-identifier-%@.json", v7, v8, v9];

    id v11 = [*(id *)(a1 + 40) URLByAppendingPathComponent:v10];
    uint64_t v12 = *(void **)(a1 + 48);
    id v13 = [v11 path];
    LODWORD(v12) = [v12 fileExistsAtPath:v13];

    if (v12) {
      [*(id *)(a1 + 48) removeItemAtURL:v11 error:0];
    }
    id v14 = [v6 dictionaryRepresentation];
    id v25 = 0;
    uint64_t v15 = +[NSJSONSerialization dataWithJSONObject:v14 options:1 error:&v25];
    id v16 = v25;

    if (!v15 || v16)
    {
      id v20 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        id v27 = v10;
        __int16 v28 = 2112;
        id v29 = v16;
        id v22 = "Error writing plan update file %@, %@";
        id v23 = v20;
        uint32_t v24 = 22;
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, buf, v24);
      }
    }
    else
    {
      id v17 = *(void **)(a1 + 48);
      uint64_t v18 = [v11 path];
      unsigned __int8 v19 = [v17 createFileAtPath:v18 contents:v15 attributes:0];

      id v20 = PKLogFacilityTypeGetObject();
      BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)long long buf = 138412290;
          id v27 = v11;
          id v22 = "Saved Financing Plan update JSON at URL %@";
LABEL_16:
          id v23 = v20;
          uint32_t v24 = 12;
          goto LABEL_17;
        }
      }
      else if (v21)
      {
        *(_DWORD *)long long buf = 138412290;
        id v27 = v11;
        id v22 = "Error creating file %@";
        goto LABEL_16;
      }
    }
  }
}

int64_t sub_100263A44(id a1, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v4 = a3;
  id v5 = [(NSDictionary *)a2 objectForKeyedSubscript:NSFileCreationDate];
  id v6 = [(NSDictionary *)v4 objectForKeyedSubscript:NSFileCreationDate];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_100263B64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100263C20;
  block[3] = &unk_10072E9D8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_100263C20(id *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v3 = a1[4];
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if ([v8 type] == (id)2)
        {
          objc_msgSend(a1[5], "_queue_updateFinancingPlansIfNeccessaryForAccount:", v8);
          uint64_t v9 = (void *)*((void *)a1[5] + 3);
          id v10 = [v8 accountIdentifier];
          id v11 = [v9 financingPlansWithAccountIdentifier:v10];

          [v2 addObjectsFromArray:v11];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v5);
  }

  uint64_t v12 = *((void *)a1[5] + 18);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100263E08;
  v15[3] = &unk_10072E598;
  id v13 = a1[6];
  id v16 = v2;
  id v17 = v13;
  id v14 = v2;
  dispatch_async(v12, v15);
}

void sub_100263E08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ([*(id *)(a1 + 32) count])
  {
    id v4 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
  }
  else
  {
    id v3 = *(void (**)(uint64_t, void))(v2 + 16);
    v3(v2, 0);
  }
}

void sub_100264134(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10026421C;
  v14[3] = &unk_100743380;
  uint64_t v10 = a1[6];
  id v11 = (void *)a1[7];
  v14[4] = v8;
  v14[5] = v10;
  id v16 = v6;
  id v17 = v7;
  id v15 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 accountWithIdentifier:v9 completion:v14];
}

void sub_10026421C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100264304;
  v8[3] = &unk_10073B6B0;
  void v8[4] = v4;
  id v9 = v3;
  id v6 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = v6;
  id v13 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100264304(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updateFinancingPlansIfNeccessaryForAccount:", *(void *)(a1 + 40));
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 48);
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Getting financing plans with query %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 24) financingPlansWithQuery:*(void *)(a1 + 48)];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Financing plans query response %@", (uint8_t *)&v7, 0xCu);
  }

  id v5 = *(void **)(a1 + 56);
  id v6 = [*(id *)(a1 + 48) queryIdentifier];
  [v5 safelySetObject:v4 forKey:v6];

  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10026445C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100264504;
  v3[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

void sub_100264504(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100264628(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002646F8;
  v7[3] = &unk_100730578;
  void v7[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002646F8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updateFinancingPlansIfNeccessaryForAccount:", *(void *)(a1 + 40));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) financingPlansWithAccountIdentifier:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002647CC;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1002647CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1002648A8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) financingPlanWithIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10026496C;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10026496C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100264A74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100264B58;
  block[3] = &unk_100731F38;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_100264B58(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updateFinancingPlansIfNeccessaryForAccount:", *(void *)(a1 + 40));
  id v2 = *(void **)(*(void *)(a1 + 32) + 24);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v15 = 0;
  id v16 = 0;
  [v2 financingPlanInstallmentsDueDateRangeForAccountIdentifier:v3 financingPlanStates:v4 startDate:&v16 endDate:&v15];
  id v5 = v16;
  id v6 = v15;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100264C60;
  block[3] = &unk_100731830;
  id v8 = *(id *)(a1 + 64);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100264C60(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_100264D10(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100264DAC;
  v4[3] = &unk_10072E598;
  id v3 = *(id *)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 reprocessPayLaterFinancingPlansForMerchantCleanupWithWindow:v4 completion:0.0];
}

void sub_100264DAC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  if (v1)
  {
    id v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100264E40;
    block[3] = &unk_10072F788;
    id v4 = v1;
    dispatch_async(v2, block);
  }
}

uint64_t sub_100264E40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100264EEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100264FA8;
  block[3] = &unk_10072E9D8;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_100264FA8(uint64_t a1)
{
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v33;
    uint64_t v19 = *(void *)v33;
    do
    {
      id v5 = 0;
      id v20 = v3;
      do
      {
        if (*(void *)v33 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v5);
        if ([v6 type] == (id)2)
        {
          id v23 = v5;
          id v7 = [v6 accountIdentifier];
          id v8 = [*(id *)(*(void *)(a1 + 40) + 24) financingPlansWithAccountIdentifier:v7];
          [*(id *)(*(void *)(a1 + 40) + 24) deleteFinancingPlansForAccountIdentifier:v7];
          uint64_t v9 = [*(id *)(*(void *)(a1 + 40) + 24) accountEndpointMetadataForAccountIdentifier:v7 endpoint:1];
          [v9 setLastUpdated:0];
          id v22 = v9;
          id v10 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:v9];
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          id v11 = v8;
          id v12 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v29;
            do
            {
              for (i = 0; i != v13; i = (char *)i + 1)
              {
                if (*(void *)v29 != v14) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v16 = *(void *)(*((void *)&v28 + 1) + 8 * i);
                id v17 = *(void **)(a1 + 40);
                v26[0] = _NSConcreteStackBlock;
                v26[1] = 3221225472;
                v26[2] = sub_1002652B4;
                v26[3] = &unk_1007424D8;
                void v26[4] = v17;
                v26[5] = v16;
                id v27 = v7;
                [v17 _accessObserversWithHandler:v26];
              }
              id v13 = [v11 countByEnumeratingWithState:&v28 objects:v36 count:16];
            }
            while (v13);
          }

          uint64_t v4 = v19;
          id v3 = v20;
          id v5 = v23;
        }
        id v5 = (char *)v5 + 1;
      }
      while (v5 != v3);
      id v3 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v3);
  }

  long long v18 = *(NSObject **)(*(void *)(a1 + 40) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100265318;
  block[3] = &unk_10072F788;
  id v25 = *(id *)(a1 + 48);
  dispatch_async(v18, block);
}

void sub_1002652B4(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_100265318(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100265584(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10026564C;
  v7[3] = &unk_100742758;
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v10 = v4;
  void v7[4] = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 48);
  [v2 accountWithIdentifier:v3 completion:v7];
}

void sub_10026564C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if ([v3 feature] == (id)3)
    {
      id v5 = objc_alloc_init((Class)PKAccountWebServicePayLaterFinancingPlanCancellationRequest);
      [v5 setAccountIdentifier:*(void *)(a1 + 40)];
      id v6 = [*(id *)(a1 + 48) planIdentifier];
      [v5 setPlanIdentifier:v6];

      id v7 = [*(id *)(a1 + 48) cancellationReasonIdentifier];
      [v5 setCancellationReasonIdentifier:v7];

      id v8 = [*(id *)(a1 + 48) cancellationReasonDescription];
      [v5 setCancellationReasonDescription:v8];

      id v9 = [v4 accountBaseURL];
      [v5 setBaseURL:v9];

      uint64_t v10 = *(void *)(a1 + 32);
      id v11 = *(void **)(v10 + 32);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1002658C0;
      v19[3] = &unk_1007433D0;
      id v20 = v5;
      uint64_t v21 = v10;
      id v23 = *(id *)(a1 + 56);
      id v22 = *(id *)(a1 + 40);
      id v12 = v5;
      [v11 performHandlerOnSharedWebServiceQueue:v19];

LABEL_8:
      goto LABEL_9;
    }
    id v15 = *(void **)(a1 + 56);
    if (v15)
    {
      uint64_t v16 = *(NSObject **)(*(void *)(a1 + 32) + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002658AC;
      block[3] = &unk_10072F788;
      id v25 = v15;
      dispatch_async(v16, block);
      id v12 = v25;
      goto LABEL_8;
    }
  }
  else
  {
    id v13 = *(void **)(a1 + 56);
    if (v13)
    {
      uint64_t v14 = *(NSObject **)(*(void *)(a1 + 32) + 144);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100265C8C;
      v17[3] = &unk_10072F788;
      id v18 = v13;
      dispatch_async(v14, v17);
      id v12 = v18;
      goto LABEL_8;
    }
  }
LABEL_9:
}

uint64_t sub_1002658AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002658C0(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100265978;
  v5[3] = &unk_1007433A8;
  uint64_t v4 = *(void *)(a1 + 32);
  void v5[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  [a2 accountPayLaterFinancingPlanCancellationWithRequest:v4 completion:v5];
}

void sub_100265978(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100265A6C;
  block[3] = &unk_100734360;
  id v12 = v6;
  uint64_t v13 = v7;
  id v16 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = *(id *)(a1 + 40);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_100265A6C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100265C50;
    block[3] = &unk_10072E598;
    id v14 = *(id *)(a1 + 64);
    id v13 = *(id *)(a1 + 32);
    dispatch_async(v2, block);

    id v3 = v14;
  }
  else
  {
    id v3 = [*(id *)(a1 + 48) account];
    if (v3) {
      [*(id *)(a1 + 40) insertOrReplaceAccount:v3 extended:0 deleteSensitiveData:0 completion:0];
    }
    uint64_t v4 = [*(id *)(a1 + 48) financingPlan];
    id v5 = (void *)v4;
    if (v4)
    {
      id v6 = *(void **)(a1 + 40);
      uint64_t v15 = v4;
      uint64_t v7 = +[NSArray arrayWithObjects:&v15 count:1];
      id v8 = objc_msgSend(v6, "_queue_processFinancingPlans:accountIdentifier:updateReasons:", v7, *(void *)(a1 + 56), 2);
    }
    id v9 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100265C70;
    v10[3] = &unk_10072F788;
    id v11 = *(id *)(a1 + 64);
    dispatch_async(v9, v10);
  }
}

uint64_t sub_100265C50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_100265C70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100265C8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100265DA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100265E68;
  block[3] = &unk_1007315D8;
  id v8 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = v5;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_100265E68(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] != (id)2)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2) {
      (*(void (**)(void))(v2 + 16))();
    }
  }
  id v3 = [*(id *)(a1 + 32) accountIdentifier];
  uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 24) financingPlansWithAccountIdentifier:v3];
  [*(id *)(*(void *)(a1 + 40) + 24) deleteFinancingPlansForAccountIdentifier:v3];
  id v5 = [*(id *)(*(void *)(a1 + 40) + 24) accountEndpointMetadataForAccountIdentifier:v3 endpoint:1];
  [v5 setLastUpdated:0];
  [v5 setLocalLastUpdated:0];
  uint64_t v15 = v5;
  id v6 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:v5];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v21;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v20 + 1) + 8 * (void)v11);
        id v13 = *(void **)(a1 + 40);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_1002660F4;
        v18[3] = &unk_1007424D8;
        void v18[4] = v13;
        void v18[5] = v12;
        id v19 = v3;
        [v13 _accessObserversWithHandler:v18];

        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v9);
  }

  id v14 = *(NSObject **)(*(void *)(a1 + 40) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100266158;
  block[3] = &unk_10072F788;
  id v17 = *(id *)(a1 + 48);
  dispatch_async(v14, block);
}

void sub_1002660F4(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_100266158(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100266254(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) financingPlanWithIdentifier:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 24) deleteFinancingPlanWithIdentifier:*(void *)(a1 + 40) forAccountIdentifier:*(void *)(a1 + 48)];
  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100266394;
    v7[3] = &unk_1007424D8;
    void v7[4] = v3;
    id v8 = v2;
    id v9 = *(id *)(a1 + 48);
    [v3 _accessObserversWithHandler:v7];
  }
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002663F8;
  v5[3] = &unk_10072F788;
  id v6 = *(id *)(a1 + 56);
  dispatch_async(v4, v5);
}

void sub_100266394(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didRemoveFinancingPlan:a1[5] accountIdentifier:a1[6]];
  }
}

uint64_t sub_1002663F8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002664A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) recomputePayLaterCardMagnitudesForAccountIdentifier:*(void *)(a1 + 40)];
  id v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10026656C;
  v5[3] = &unk_1007424D8;
  void v5[4] = v3;
  id v6 = v2;
  id v7 = *(id *)(a1 + 40);
  id v4 = v2;
  [v3 _accessObserversWithHandler:v5];
}

void sub_10026656C(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdatePayLaterCardMagnitudes:a1[5] forAccountIdentifier:a1[6]];
  }
}

void sub_100266694(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) payLaterCardMagnitudesForAccountIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100266758;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100266758(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1002668B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed updating financing plans proactively for account %@. Error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100266A88(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 32), "_queue_processFinancingPlans:accountIdentifier:updateReasons:", *(void *)(a1 + 40), *(void *)(a1 + 48), 2);
  id v3 = *(void **)(a1 + 56);
  if (v3)
  {
    id v4 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100266B4C;
    v5[3] = &unk_10072E598;
    id v7 = v3;
    id v6 = v2;
    dispatch_async(v4, v5);
  }
}

uint64_t sub_100266B4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100266C28(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) planIdentifier];
  if (v2 && *(void *)(a1 + 40))
  {
    id v3 = [*(id *)(*(void *)(a1 + 48) + 24) financingPlanWithIdentifier:v2];
    [*(id *)(*(void *)(a1 + 48) + 24) updateProcessedPayLaterMerchant:*(void *)(a1 + 40) forFinancingPlanIdentifier:v2];
    id v4 = [*(id *)(*(void *)(a1 + 48) + 24) financingPlanWithIdentifier:v2];
    [v4 addUpdateReasons:4];
    objc_msgSend(v4, "addUpdateReasons:", objc_msgSend(*(id *)(a1 + 32), "updateReasons"));
    id v5 = [v4 accountIdentifier];
    id v6 = *(void **)(a1 + 48);
    uint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    uint64_t v12 = sub_100266D8C;
    id v13 = &unk_100742190;
    id v14 = v6;
    id v15 = v4;
    id v16 = v3;
    id v17 = v5;
    id v7 = v5;
    id v8 = v3;
    id v9 = v4;
    [v6 _accessObserversWithHandler:&v10];
    objc_msgSend(*(id *)(a1 + 48), "recomputePayLaterCardMagntiudesForAccountIdentifier:", v7, v10, v11, v12, v13, v14);
  }
}

void sub_100266D8C(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdateFinancingPlan:a1[5] oldFinancingPlan:a1[6] accountIdentifier:a1[7]];
  }
}

void sub_100266F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100266F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Deleting stored Apple Balance promotion do to device environment change", v10, 2u);
    }

    id v7 = (void *)v5[3];
    id v8 = [v3 accountIdentifier];
    id v9 = [v7 deleteAppleBalancePromotionForAccountWithIdentifier:v8];
  }
}

void sub_100267120(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) rewardsTierSummaryForTransactionSourceIdentifiers:*(void *)(a1 + 40) currencyCode:*(void *)(a1 + 48) startDate:*(void *)(a1 + 56) endDate:*(void *)(a1 + 64)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002671EC;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 72);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1002671EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10026733C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100267418;
  block[3] = &unk_10073FD58;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v12 = v5;
  uint64_t v13 = v6;
  uint64_t v11 = *(void *)(a1 + 32);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_100267418(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = [*(id *)(a1 + 40) reportType];
    if (v2 == (id)1)
    {
      if ([*(id *)(a1 + 32) supportsTransactionSyncReporting]) {
        goto LABEL_5;
      }
    }
    else if (v2 == (id)2 && ([*(id *)(a1 + 32) supportsStatementMetadata] & 1) != 0)
    {
LABEL_5:
      id v3 = [PDAccountManagerAccountReportRequest alloc];
      id v4 = [*(id *)(a1 + 32) accountIdentifier];
      id v14 = [(PDAccountManagerAccountReportRequest *)v3 initWithAccountIdentifier:v4 report:*(void *)(a1 + 40) trigger:*(void *)(a1 + 64)];

      [(PDAccountManagerAccountReportRequest *)v14 addCompletion:*(void *)(a1 + 56)];
      [*(id *)(a1 + 48) _addAccountManagerFetchRequest:v14];

      return;
    }
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [*(id *)(a1 + 32) accountIdentifier];
      [*(id *)(a1 + 40) reportType];
      id v12 = PKAccountReportTypeToString();
      *(_DWORD *)long long buf = 138412546;
      id v16 = v11;
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Cannot send report since account %@ doesnt support reporting of type %@", buf, 0x16u);
    }
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      uint64_t v8 = PKAccountErrorDomain;
      uint64_t v9 = 10;
      goto LABEL_17;
    }
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Cannot send report for a nil account. Report: %@", buf, 0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      uint64_t v8 = PKAccountErrorDomain;
      uint64_t v9 = 3;
LABEL_17:
      uint64_t v13 = +[NSError errorWithDomain:v8 code:v9 userInfo:0];
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v13);
    }
  }
}

void sub_1002677CC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100267894;
  v4[3] = &unk_100738DE8;
  v4[4] = v2;
  id v7 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  [v2 accountWithIdentifier:v3 completion:v4];
}

void sub_100267894(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_alloc_init((Class)PKAccountWebServiceReportRequest);
    [v4 setAccountIdentifier:*(void *)(a1 + 40)];
    id v5 = [*(id *)(a1 + 48) report];
    [v4 setReport:v5];

    id v6 = [v3 accountBaseURL];
    [v4 setBaseURL:v6];

    objc_msgSend(v4, "setTrigger:", objc_msgSend(*(id *)(a1 + 48), "trigger"));
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = [*(id *)(a1 + 48) report];
      *(_DWORD *)long long buf = 138412290;
      long long v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending account report to server %@", buf, 0xCu);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100267B58;
    v13[3] = &unk_100737868;
    id v14 = v4;
    uint64_t v15 = v9;
    id v16 = *(id *)(a1 + 56);
    id v11 = v4;
    [v10 performHandlerOnSharedWebServiceQueue:v13];
  }
  else
  {
    id v12 = *(NSObject **)(*(void *)(a1 + 32) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100267ACC;
    block[3] = &unk_10072F788;
    id v18 = *(id *)(a1 + 56);
    dispatch_async(v12, block);
    id v11 = v18;
  }
}

void sub_100267ACC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100267B58(void *a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100267BF0;
  v5[3] = &unk_100743448;
  uint64_t v3 = a1[4];
  id v4 = (void *)a1[6];
  void v5[4] = a1[5];
  id v6 = v4;
  [a2 accountSendReportWithRequest:v3 completion:v5];
}

void sub_100267BF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100267CAC;
  v7[3] = &unk_10072FDC8;
  id v8 = v4;
  id v9 = *(id *)(a1 + 40);
  id v6 = v4;
  dispatch_async(v5, v7);
}

uint64_t sub_100267CAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error sending account report to server %@", (uint8_t *)&v5, 0xCu);
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_100267F74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100267F88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002680D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002680E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(NSObject **)(v4 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002681B4;
  v7[3] = &unk_100730578;
  void v7[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002681B4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updatePromotionsIfNecessaryForAccount:", *(void *)(a1 + 40));
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountPromotionsForAccountIdentifier:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100268288;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100268288(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100268380(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) deleteAccountPromotion:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)];
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100268424;
  block[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

uint64_t sub_100268424(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100268588(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100268600(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100268744(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1002687BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100268930(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1002689AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100268A98;
  block[3] = &unk_100734360;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_100268A98(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 feature] == (id)2
      && ([*(id *)(a1 + 32) showCardPromotions] & 1) != 0)
    {
      id v3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating promotions for account identifier %@", buf, 0xCu);
      }

      [*(id *)(a1 + 32) feature];
      uint64_t v5 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
      uint64_t v6 = [*(id *)(*(void *)(a1 + 48) + 24) nextPossibleFetchDateForAccountType:v5 endpointType:7 accountIdentifier:*(void *)(a1 + 40)];
      id v45 = [*(id *)(*(void *)(a1 + 48) + 24) accountPromotionsForAccountIdentifier:*(void *)(a1 + 40)];
      unsigned __int8 v7 = [*(id *)(a1 + 56) ignoreErrorBackoff];
      if (v6) {
        char v8 = v7;
      }
      else {
        char v8 = 1;
      }
      if ((v8 & 1) == 0)
      {
        id v9 = +[NSDate date];
        [v9 timeIntervalSinceDate:v6];
        BOOL v11 = v10 < 0.0;

        if (v11)
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v6;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not fetching promotions %@ because the next possible fetch date is in the future %@", buf, 0x16u);
          }

          id v13 = *(void **)(a1 + 64);
          if (v13)
          {
            id v14 = *(NSObject **)(*(void *)(a1 + 48) + 144);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1002692A4;
            block[3] = &unk_10072E598;
            id v58 = v13;
            id v57 = v45;
            dispatch_async(v14, block);
          }
          goto LABEL_40;
        }
      }
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000;
      v68 = sub_100020A5C;
      v69 = sub_100021020;
      long long v23 = [*(id *)(*(void *)(a1 + 48) + 24) accountEndpointMetadataForAccountIdentifier:*(void *)(a1 + 40) endpoint:3];
      uint32_t v24 = v23;
      if (v23) {
        id v25 = v23;
      }
      else {
        id v25 = [[PDAccountWebServiceEndpointMetadata alloc] initWithAccountIdentifier:*(void *)(a1 + 40) endpoint:3];
      }
      v70 = v25;

      uint64_t v26 = [*(id *)(*(void *)(a1 + 48) + 24) accountPromotionBehaviorForAccountIdentifier:*(void *)(a1 + 40)];
      id v27 = v26;
      if (v26)
      {
        [v26 minRefreshPeriod];
        double v29 = v28;
      }
      else
      {
        double v29 = PKAccountPromotionBehaviorDefaultMinRefreshPeriod;
      }
      long long v30 = [*(id *)(*(void *)&buf[8] + 40) lastUpdated];
      long long v31 = v30;
      if (v30)
      {
        long long v32 = [v30 dateByAddingTimeInterval:v29];
        long long v33 = +[NSDate date];
        BOOL v34 = [v33 compare:v32] != (id)-1;
      }
      else
      {
        long long v32 = 0;
        BOOL v34 = 1;
      }
      if (([*(id *)(a1 + 56) observeCooldownPeriod] ^ 1 | v34))
      {
        id v35 = objc_alloc_init((Class)PKAccountWebServicePromotionsRequest);
        id v36 = [*(id *)(a1 + 32) accountIdentifier];
        [v35 setAccountIdentifier:v36];

        v37 = [*(id *)(a1 + 32) accountBaseURL];
        [v35 setBaseURL:v37];

        id v38 = *(void **)(*(void *)(a1 + 48) + 32);
        v46[0] = _NSConcreteStackBlock;
        v46[1] = 3221225472;
        v46[2] = sub_1002692D4;
        v46[3] = &unk_100743500;
        id v39 = v35;
        id v47 = v39;
        id v51 = buf;
        uint64_t v52 = v5;
        int8x16_t v44 = *(int8x16_t *)(a1 + 40);
        id v40 = (id)v44.i64[0];
        int8x16_t v48 = vextq_s8(v44, v44, 8uLL);
        id v50 = *(id *)(a1 + 64);
        id v49 = v45;
        [v38 performHandlerOnSharedWebServiceQueue:v46];
      }
      else
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = *(void *)(a1 + 40);
          *(_DWORD *)v63 = 138412546;
          uint64_t v64 = v41;
          __int16 v65 = 2112;
          v66 = v32;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not fetching promotions for %@ because it is still in cooldown period after last successful promotions fetch. Ends %@", v63, 0x16u);
        }

        id v42 = *(void **)(a1 + 64);
        if (!v42) {
          goto LABEL_39;
        }
        id v43 = *(NSObject **)(*(void *)(a1 + 48) + 144);
        v53[0] = _NSConcreteStackBlock;
        v53[1] = 3221225472;
        v53[2] = sub_1002692BC;
        v53[3] = &unk_10072E598;
        id v55 = v42;
        id v54 = v45;
        dispatch_async(v43, v53);

        id v39 = v55;
      }

LABEL_39:
      _Block_object_dispose(buf, 8);

LABEL_40:
      goto LABEL_41;
    }
    uint64_t v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Not fetching promotions for account %@ because it is not a supported feature on this account", buf, 0xCu);
    }

    __int16 v17 = *(void **)(a1 + 64);
    if (v17)
    {
      id v18 = *(NSObject **)(*(void *)(a1 + 48) + 144);
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472;
      v59[2] = sub_10026928C;
      v59[3] = &unk_10072F788;
      id v60 = v17;
      dispatch_async(v18, v59);
      uint64_t v6 = v60;
LABEL_41:
    }
  }
  else
  {
    id v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@", buf, 0xCu);
    }

    long long v21 = *(void **)(a1 + 64);
    if (v21)
    {
      long long v22 = *(NSObject **)(*(void *)(a1 + 48) + 144);
      v61[0] = _NSConcreteStackBlock;
      v61[1] = 3221225472;
      v61[2] = sub_100269210;
      v61[3] = &unk_10072F788;
      id v62 = v21;
      dispatch_async(v22, v61);
      uint64_t v6 = v62;
      goto LABEL_41;
    }
  }
}

void sub_1002691E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100269210(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_10026928C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002692A4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_1002692BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1002692D4(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002693A8;
  v9[3] = &unk_1007434D8;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  char v8 = *(void **)(a1 + 48);
  void v9[4] = v4;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  id v10 = v8;
  id v12 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 56);
  [a2 promotionsWithRequest:v5 completion:v9];
}

void sub_1002693A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  char v8 = *(NSObject **)(v7 + 136);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002694B4;
  v12[3] = &unk_1007434B0;
  id v13 = v6;
  uint64_t v14 = v7;
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v20 = v9;
  id v15 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 48);
  id v17 = v5;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

void sub_1002694B4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:1];
    uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v3 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    [*(id *)(*(void *)(a1 + 40) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 88) endpointType:7 accountIdentifier:*(void *)(a1 + 48)];
    id v5 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100269964;
    block[3] = &unk_100731830;
    id v46 = *(id *)(a1 + 72);
    id v44 = *(id *)(a1 + 56);
    id v45 = *(id *)(a1 + 32);
    dispatch_async(v5, block);

    id v6 = v46;
  }
  else
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteRetryBackoffForAccountType:*(void *)(a1 + 88) endpointType:7 accountIdentifier:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:0];
    uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    char v8 = +[NSDate date];
    [v7 setLastUpdated:v8];

    uint64_t v9 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v12 = objc_alloc((Class)PKAccountPromotionBehavior);
    id v13 = [*(id *)(a1 + 64) minRefreshPeriod];
    uint64_t v14 = [*(id *)(a1 + 64) maxImpressionCount];
    id v15 = [*(id *)(a1 + 64) timeVisibleAfterCompleted];
    id v16 = [v12 initWithMinRefreshPeriod:v13 maxImpressionCount:v14 timeVisibleAfterCompleted:v15];

    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountPromotionBehavior:v16 accountIdentifier:*(void *)(a1 + 48)];
    id v17 = *(void **)(*(void *)(a1 + 40) + 24);
    id v18 = [*(id *)(a1 + 64) orderings];
    [v17 insertOrUpdateAccountEntityOrderings:v18 accountIdentifier:*(void *)(a1 + 48) entityType:2];

    uint64_t v19 = [*(id *)(a1 + 64) promotions];
    uint64_t v20 = objc_msgSend(*(id *)(a1 + 56), "pk_indexDictionaryByApplyingBlock:", &stru_100743488);
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v21 = v19;
    id v22 = [v21 countByEnumeratingWithState:&v39 objects:v47 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v40;
      do
      {
        for (i = 0; i != v23; i = (char *)i + 1)
        {
          if (*(void *)v40 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void **)(*((void *)&v39 + 1) + 8 * i);
          id v27 = [v26 programIdentifier];
          double v28 = [v20 objectForKey:v27];

          if (v28) {
            objc_msgSend(v26, "setImpressionCount:", objc_msgSend(v28, "impressionCount"));
          }
        }
        id v23 = [v21 countByEnumeratingWithState:&v39 objects:v47 count:16];
      }
      while (v23);
    }

    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountPromotions:v21 accountIdentifier:*(void *)(a1 + 48)];
    double v29 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_100269984;
    v36[3] = &unk_10072E598;
    id v38 = *(id *)(a1 + 72);
    id v30 = v21;
    id v37 = v30;
    dispatch_async(v29, v36);

    long long v31 = *(void **)(a1 + 40);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10026999C;
    v32[3] = &unk_100742190;
    v32[4] = v31;
    id v33 = v30;
    id v34 = *(id *)(a1 + 56);
    id v35 = *(id *)(a1 + 48);
    id v6 = v30;
    [v31 _accessObserversWithHandler:v32];
  }
}

uint64_t sub_100269964(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

NSCopying *__cdecl sub_10026997C(id a1, PKAccountPromotion *a2)
{
  return (NSCopying *)[(PKAccountPromotion *)a2 programIdentifier];
}

uint64_t sub_100269984(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10026999C(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdatePromotions:a1[5] oldPromotions:a1[6] accountIdentifier:a1[7]];
  }
}

void sub_100269C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed updating promotions for account %@. Error %@", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t sub_100269E90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100269EA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100269F50;
  block[3] = &unk_10072E9D8;
  void block[4] = v2;
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v3, block);
}

void sub_100269F50(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountPromotionBehaviorForAccountIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10026A014;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10026A014(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10026A0D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10026A1AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10026A394(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10026A3A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10026A4F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10026A504(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10026A5D4;
  v7[3] = &unk_100730578;
  void v7[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10026A5D4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_updateEnhancedMerchantsIfNecessaryForAccount:", *(void *)(a1 + 40));
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10026A6A8;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10026A6A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10026A7A0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) deleteAccountEnhancedMerchant:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)];
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026A844;
  block[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

uint64_t sub_10026A844(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10026A9C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id, void))(v1 + 16))(v1, 0, v2, 0);
}

void sub_10026AA40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026AB2C;
  block[3] = &unk_100734360;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10026AB2C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 feature] == (id)2
      && ([*(id *)(a1 + 32) showEnhancedMerchants] & 1) != 0)
    {
      id v3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 40);
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating enhanced merchants for account identifier %@", (uint8_t *)&buf, 0xCu);
      }

      [*(id *)(a1 + 32) feature];
      uint64_t v5 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
      uint64_t v6 = [*(id *)(*(void *)(a1 + 48) + 24) nextPossibleFetchDateForAccountType:v5 endpointType:8 accountIdentifier:*(void *)(a1 + 40)];
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v74 = 0x3032000000;
      v75 = sub_100020A5C;
      v76 = sub_100021020;
      id v7 = [*(id *)(*(void *)(a1 + 48) + 24) accountEndpointMetadataForAccountIdentifier:*(void *)(a1 + 40) endpoint:4];
      id v8 = v7;
      if (v7) {
        id v9 = v7;
      }
      else {
        id v9 = [[PDAccountWebServiceEndpointMetadata alloc] initWithAccountIdentifier:*(void *)(a1 + 40) endpoint:4];
      }
      v77 = v9;

      uint64_t v59 = 0;
      id v60 = &v59;
      uint64_t v61 = 0x3032000000;
      id v62 = sub_100020A5C;
      v63 = sub_100021020;
      id v64 = [*(id *)(*((void *)&buf + 1) + 40) lastUpdated];
      unsigned __int8 v18 = [*(id *)(a1 + 56) ignoreErrorBackoff];
      if (v6) {
        char v19 = v18;
      }
      else {
        char v19 = 1;
      }
      if ((v19 & 1) == 0)
      {
        uint64_t v20 = +[NSDate date];
        [v20 timeIntervalSinceDate:v6];
        BOOL v22 = v21 < 0.0;

        if (v22)
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = *(void *)(a1 + 40);
            *(_DWORD *)v69 = 138412546;
            uint64_t v70 = v23;
            __int16 v71 = 2112;
            v72 = v6;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not fetching enhanced merchants %@ because the next possible fetch date is in the future %@", v69, 0x16u);
          }

          id v24 = [*(id *)(*(void *)(a1 + 48) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 40)];
          id v25 = *(void **)(a1 + 64);
          if (!v25) {
            goto LABEL_40;
          }
          uint64_t v26 = *(NSObject **)(*(void *)(a1 + 48) + 144);
          v55[0] = _NSConcreteStackBlock;
          v55[1] = 3221225472;
          v55[2] = sub_10026B3B0;
          v55[3] = &unk_100736D10;
          id v57 = v25;
          id v24 = v24;
          id v56 = v24;
          id v58 = &v59;
          dispatch_async(v26, v55);

          id v27 = v57;
LABEL_39:

LABEL_40:
          _Block_object_dispose(&v59, 8);

          _Block_object_dispose(&buf, 8);
          goto LABEL_41;
        }
      }
      double v28 = [*(id *)(*(void *)(a1 + 48) + 24) accountEnhancedMerchantBehaviorForAccountIdentifier:*(void *)(a1 + 40)];
      double v29 = v28;
      if (v28) {
        id v30 = v28;
      }
      else {
        id v30 = objc_alloc_init((Class)PKAccountEnhancedMerchantBehavior);
      }
      id v24 = v30;

      objc_msgSend(v24, "cooldownPeriodForLevel:", objc_msgSend(*(id *)(a1 + 56), "cooldownLevel"));
      long long v31 = (void *)v60[5];
      if (v31)
      {
        id v27 = objc_msgSend(v31, "dateByAddingTimeInterval:");
        long long v32 = +[NSDate date];
        BOOL v33 = [v32 compare:v27] == (id)-1;

        if (v33)
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v34 = *(void *)(a1 + 40);
            *(_DWORD *)v69 = 138412546;
            uint64_t v70 = v34;
            __int16 v71 = 2112;
            v72 = v27;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not fetching enhanced merchants for %@ because it is still in cooldown period after last successful enhanced merchants fetch. Ends %@", v69, 0x16u);
          }

          id v35 = [*(id *)(*(void *)(a1 + 48) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 40)];
          id v36 = *(void **)(a1 + 64);
          if (!v36) {
            goto LABEL_38;
          }
          id v37 = *(NSObject **)(*(void *)(a1 + 48) + 144);
          v52[0] = _NSConcreteStackBlock;
          v52[1] = 3221225472;
          v52[2] = sub_10026B3D4;
          v52[3] = &unk_100736D10;
          v54[0] = v36;
          id v35 = v35;
          id v53 = v35;
          v54[1] = &v59;
          dispatch_async(v37, v52);

          id v38 = (id *)v54;
LABEL_37:

LABEL_38:
          goto LABEL_39;
        }
      }
      else
      {
        id v27 = 0;
      }
      id v39 = objc_alloc_init((Class)PKAccountWebServiceEnhancedMerchantsRequest);
      long long v40 = [*(id *)(a1 + 32) accountIdentifier];
      [v39 setAccountIdentifier:v40];

      long long v41 = [*(id *)(a1 + 32) accountBaseURL];
      [v39 setBaseURL:v41];

      long long v42 = *(void **)(*(void *)(a1 + 48) + 32);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_10026B3F8;
      v45[3] = &unk_1007435F0;
      id v35 = v39;
      id v46 = v35;
      p_long long buf = &buf;
      int8x16_t v44 = *(int8x16_t *)(a1 + 40);
      id v43 = (id)v44.i64[0];
      int8x16_t v47 = vextq_s8(v44, v44, 8uLL);
      uint64_t v51 = v5;
      id v48 = *(id *)(a1 + 64);
      id v50 = &v59;
      [v42 performHandlerOnSharedWebServiceQueue:v45];

      id v38 = &v46;
      goto LABEL_37;
    }
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Not fetching enhanced merchants for account %@ because it is not a supported feature on this account", (uint8_t *)&buf, 0xCu);
    }

    id v12 = *(void **)(a1 + 64);
    if (v12)
    {
      id v13 = *(NSObject **)(*(void *)(a1 + 48) + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10026B394;
      block[3] = &unk_10072F788;
      id v66 = v12;
      dispatch_async(v13, block);
      uint64_t v6 = v66;
LABEL_41:
    }
  }
  else
  {
    uint64_t v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@", (uint8_t *)&buf, 0xCu);
    }

    id v16 = *(void **)(a1 + 64);
    if (v16)
    {
      id v17 = *(NSObject **)(*(void *)(a1 + 48) + 144);
      v67[0] = _NSConcreteStackBlock;
      v67[1] = 3221225472;
      v67[2] = sub_10026B314;
      v67[3] = &unk_10072F788;
      id v68 = v16;
      dispatch_async(v17, v67);
      uint64_t v6 = v68;
      goto LABEL_41;
    }
  }
}

void sub_10026B2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10026B314(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id, void))(v1 + 16))(v1, 0, v2, 0);
}

uint64_t sub_10026B394(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10026B3B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16))(a1[5], a1[4], 0, *(void *)(*(void *)(a1[6] + 8) + 40));
}

uint64_t sub_10026B3D4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16))(a1[5], a1[4], 0, *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_10026B3F8(uint64_t a1, void *a2)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10026B4C8;
  v11[3] = &unk_1007435C8;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 48);
  v11[4] = *(void *)(a1 + 40);
  uint64_t v14 = v4;
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 80);
  id v12 = v7;
  uint64_t v16 = v8;
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 72);
  id v13 = v9;
  uint64_t v15 = v10;
  [a2 enhancedMerchantsWithRequest:v5 completion:v11];
}

void sub_10026B4C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 136);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10026B5D0;
  v14[3] = &unk_1007435A0;
  uint64_t v20 = *(void *)(a1 + 56);
  id v15 = v6;
  uint64_t v16 = v7;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 72);
  id v17 = v9;
  uint64_t v22 = v10;
  id v11 = *(id *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 64);
  id v18 = v5;
  id v19 = v11;
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v8, v14);
}

void sub_10026B5D0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setIsDirty:1];
    uint64_t v2 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    id v5 = [*(id *)(*(void *)(a1 + 40) + 24) accountEnhancedMerchantsForAccountIdentifier:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 40) + 24) increaseRetryBackoffLevelForAccountType:*(void *)(a1 + 88) endpointType:8 accountIdentifier:*(void *)(a1 + 48)];
    id v6 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026B954;
    block[3] = &unk_100743550;
    id v40 = *(id *)(a1 + 64);
    id v7 = v5;
    id v38 = v7;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 80);
    id v39 = v8;
    uint64_t v41 = v9;
    dispatch_async(v6, block);

    uint64_t v10 = v40;
  }
  else
  {
    [*(id *)(*(void *)(a1 + 40) + 24) deleteRetryBackoffForAccountType:*(void *)(a1 + 88) endpointType:8 accountIdentifier:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setIsDirty:0];
    uint64_t v11 = +[NSDate now];
    uint64_t v12 = *(void *)(*(void *)(a1 + 80) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setLastUpdated:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v14 = [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    id v17 = objc_alloc((Class)PKAccountEnhancedMerchantBehavior);
    id v18 = [*(id *)(a1 + 56) minRefreshPeriod];
    id v19 = [v17 initWithMinRefreshPeriod:v18];

    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEnhancedMerchantBehavior:v19 accountIdentifier:*(void *)(a1 + 48)];
    uint64_t v20 = *(void **)(*(void *)(a1 + 40) + 24);
    uint64_t v21 = [*(id *)(a1 + 56) orderings];
    [v20 insertOrUpdateAccountEntityOrderings:v21 accountIdentifier:*(void *)(a1 + 48) entityType:1];

    uint64_t v22 = [*(id *)(a1 + 56) merchants];
    [*(id *)(*(void *)(a1 + 40) + 24) insertOrUpdateAccountEnhancedMerchants:v22 accountIdentifier:*(void *)(a1 + 48)];
    uint64_t v23 = *(NSObject **)(*(void *)(a1 + 40) + 144);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10026B974;
    v33[3] = &unk_100736D10;
    id v35 = *(id *)(a1 + 64);
    id v24 = v22;
    uint64_t v25 = *(void *)(a1 + 80);
    id v34 = v24;
    uint64_t v36 = v25;
    dispatch_async(v23, v33);

    uint64_t v26 = *(void **)(a1 + 40);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10026B998;
    v29[3] = &unk_100743578;
    v29[4] = v26;
    id v7 = v24;
    id v30 = v7;
    id v27 = *(id *)(a1 + 48);
    uint64_t v28 = *(void *)(a1 + 80);
    id v31 = v27;
    uint64_t v32 = v28;
    [v26 _accessObserversWithHandler:v29];

    uint64_t v10 = v30;
  }
}

uint64_t sub_10026B954(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], *(void *)(*(void *)(a1[7] + 8) + 40));
}

uint64_t sub_10026B974(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[5] + 16))(a1[5], a1[4], 0, *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_10026B998(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdateEnhancedMerchants:a1[5] accountIdentifier:a1[6] lastUpdate:*(void *)(*(void *)(a1[7] + 8) + 40)];
  }
}

void sub_10026BAF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026BBD8;
  block[3] = &unk_100742898;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v13 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10026BBD8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc_init((Class)PKAccountWebServiceBalanceHistoryRequest);
    id v3 = [*(id *)(a1 + 32) accountIdentifier];
    [v2 setAccountIdentifier:v3];

    uint64_t v4 = [*(id *)(a1 + 32) accountBaseURL];
    [v2 setBaseURL:v4];

    id v5 = [*(id *)(a1 + 56) startDate];
    [v2 setBeginDate:v5];

    uint64_t v6 = [*(id *)(a1 + 56) endDate];
    [v2 setEndDate:v6];

    objc_msgSend(v2, "setType:", objc_msgSend(*(id *)(a1 + 56), "type"));
    id v7 = *(void **)(*(void *)(a1 + 48) + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10026BEA4;
    v12[3] = &unk_1007422F8;
    id v13 = v2;
    id v14 = *(id *)(a1 + 64);
    id v8 = v2;
    [v7 performHandlerOnSharedWebServiceQueue:v12];
  }
  else
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@", buf, 0xCu);
    }

    uint64_t v11 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026BE28;
    block[3] = &unk_10072F788;
    id v16 = *(id *)(a1 + 64);
    dispatch_async(v11, block);
    id v8 = v16;
  }
}

void sub_10026BE28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10026BEA4(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10026BF34;
  v4[3] = &unk_100743618;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 accountBalanceHistoryWithRequest:v3 completion:v4];
}

void sub_10026BF34(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 balances];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10026C248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed updating enhanced merchants for account %@. Error %@", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t sub_10026C440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10026C454(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026C500;
  block[3] = &unk_10072E9D8;
  void block[4] = v2;
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v3, block);
}

void sub_10026C500(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEnhancedMerchantBehaviorForAccountIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10026C5C4;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10026C5C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10026C71C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10026C730(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 creditDetails];
  id v5 = [v4 accountSummary];
  unsigned __int8 v6 = [v5 recoveryPaymentPlansSupported];

  uint64_t v7 = *(void *)(a1 + 32);
  if (v6)
  {
    id v8 = *(NSObject **)(v7 + 136);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10026C8B8;
    v11[3] = &unk_100732C18;
    char v15 = *(unsigned char *)(a1 + 56);
    v11[4] = v7;
    id v12 = v3;
    id v13 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 48);
    dispatch_async(v8, v11);

    __int16 v9 = v12;
  }
  else
  {
    uint64_t v10 = *(NSObject **)(v7 + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026C8A4;
    block[3] = &unk_10072F788;
    id v17 = *(id *)(a1 + 48);
    dispatch_async(v10, block);
    __int16 v9 = v17;
  }
}

uint64_t sub_10026C8A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10026C8B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64)) {
    objc_msgSend(*(id *)(a1 + 32), "_queue_updateCreditRecoveryPaymentPlansIfNecessaryForAccount:", *(void *)(a1 + 40));
  }
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) creditRecoveryPaymentPlansForAccountIdentifier:*(void *)(a1 + 48)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10026C990;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10026C990(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10026CAD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10026CAEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v3);
        }
        unsigned int v10 = [*(id *)(*((void *)&v11 + 1) + 8 * i) enrolled];
        v6 |= v10;
        v7 |= v10 ^ 1;
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10026CCF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(void **)(a1 + 32);
    id v7 = a3;
    uint64_t v8 = [v6 accountIdentifier];

    int v9 = 138412546;
    unsigned int v10 = v8;
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed updating payment plans proactively for account %@. Error: %@", (uint8_t *)&v9, 0x16u);
  }
}

void sub_10026D058(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_10026D0D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026D1C0;
  block[3] = &unk_100734360;
  id v9 = v3;
  id v10 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10026D1C0(id *a1)
{
  id v2 = a1[4];
  if (v2)
  {
    id v3 = [v2 creditDetails];
    id v4 = [v3 accountSummary];
    unsigned __int8 v5 = [v4 recoveryPaymentPlansSupported];

    if (v5)
    {
      if (([a1[7] force] & 1) != 0
        || ([a1[6] _shouldProactivelyFetchEndpoint:9 metadataType:6 fetchPeriodEndpoint:8 account:a1[4]] & 1) != 0)
      {
        *(void *)&long long buf = 0;
        *((void *)&buf + 1) = &buf;
        uint64_t v40 = 0x3032000000;
        uint64_t v41 = sub_100020A5C;
        long long v42 = sub_100021020;
        uint64_t v6 = [*((id *)a1[6] + 3) accountEndpointMetadataForAccountIdentifier:a1[5] endpoint:6];
        id v7 = v6;
        if (v6) {
          uint64_t v8 = v6;
        }
        else {
          uint64_t v8 = [[PDAccountWebServiceEndpointMetadata alloc] initWithAccountIdentifier:a1[5] endpoint:6];
        }
        id v43 = v8;

        id v17 = objc_alloc_init((Class)PKAccountWebServiceCreditRecoveryPaymentPlansRequest);
        [v17 setAccountIdentifier:a1[5]];
        uint64_t v18 = [a1[4] accountBaseURL];
        [v17 setBaseURL:v18];

        id v19 = (void *)*((void *)a1[6] + 4);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_10026D70C;
        v25[3] = &unk_100742DD0;
        id v20 = v17;
        id v21 = a1[6];
        id v26 = v20;
        id v27 = v21;
        id v28 = a1[4];
        p_long long buf = &buf;
        id v29 = a1[5];
        id v30 = a1[8];
        [v19 performHandlerOnSharedWebServiceQueue:v25];

        _Block_object_dispose(&buf, 8);
      }
      else
      {
        uint64_t v22 = [*((id *)a1[6] + 3) creditRecoveryPaymentPlansForAccountIdentifier:a1[5]];
        id v23 = a1[8];
        if (v23)
        {
          id v24 = *((void *)a1[6] + 18);
          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472;
          v32[2] = sub_10026D6F4;
          v32[3] = &unk_10072E598;
          id v34 = v23;
          id v33 = v22;
          dispatch_async(v24, v32);
        }
      }
    }
    else
    {
      id v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = a1[5];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "recoveryPaymentPlansSupported false for account %@", (uint8_t *)&buf, 0xCu);
      }

      id v15 = a1[8];
      if (v15)
      {
        id v16 = *((void *)a1[6] + 18);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472;
        v35[2] = sub_10026D6DC;
        v35[3] = &unk_10072F788;
        id v36 = v15;
        dispatch_async(v16, v35);
      }
    }
  }
  else
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = a1[5];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "No account with accountIdentifier: %@", (uint8_t *)&buf, 0xCu);
    }

    id v11 = a1[8];
    if (v11)
    {
      id v12 = *((void *)a1[6] + 18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10026D660;
      block[3] = &unk_10072F788;
      id v38 = v11;
      dispatch_async(v12, block);
    }
  }
}

void sub_10026D640(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10026D660(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSError errorWithDomain:PKAccountErrorDomain code:3 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

uint64_t sub_10026D6DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10026D6F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10026D70C(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10026D7E0;
  v8[3] = &unk_100743690;
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned __int8 v5 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v6 = v5;
  uint64_t v7 = *(void *)(a1 + 72);
  id v9 = v6;
  uint64_t v12 = v7;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  [a2 creditRecoveryPaymentPlansWithRequest:v4 completion:v8];
}

void sub_10026D7E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 136);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026D8F0;
  block[3] = &unk_100742D80;
  id v13 = *(id *)(a1 + 40);
  id v14 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v15 = v8;
  id v16 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v17 = v5;
  id v18 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, block);
}

void sub_10026D8F0(uint64_t a1)
{
  [*(id *)(a1 + 32) feature];
  uint64_t v2 = PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier();
  id v3 = *(void **)(a1 + 40);
  if (!v3)
  {
    [*(id *)(*(void *)(a1 + 48) + 24) deleteRetryBackoffForAccountType:v2 endpointType:9 accountIdentifier:*(void *)(a1 + 56)];
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:0];
    id v13 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    id v14 = +[NSDate date];
    [v13 setLastUpdated:v14];

    uint64_t v15 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
    uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    id v18 = *(void **)(*(void *)(a1 + 48) + 24);
    uint64_t v19 = [*(id *)(a1 + 64) paymentPlans];
    id v9 = [v18 replaceCreditRecoveryPaymentPlans:v19 forAccountIdentifier:*(void *)(a1 + 56)];

    id v20 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Inserted or updated payment plans from fetch: %@", buf, 0xCu);
    }

    id v21 = *(void **)(a1 + 72);
    if (v21)
    {
      uint64_t v22 = *(NSObject **)(*(void *)(a1 + 48) + 144);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10026DD08;
      v26[3] = &unk_100731830;
      id v29 = v21;
      id v27 = v9;
      id v28 = *(id *)(a1 + 40);
      dispatch_async(v22, v26);
    }
    id v23 = *(void **)(a1 + 48);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10026DD20;
    v24[3] = &unk_100741EA8;
    void v24[4] = v23;
    id v25 = *(id *)(a1 + 56);
    [v23 _accessObserversWithHandler:v24];
    uint64_t v12 = v25;
    goto LABEL_11;
  }
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 description];
    *(_DWORD *)long long buf = 138412290;
    id v35 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Could not fetch payment plans with error %@", buf, 0xCu);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setIsDirty:1];
  uint64_t v6 = [*(id *)(*(void *)(a1 + 48) + 24) insertOrUpdateAccountEndpointMetadata:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  id v9 = [*(id *)(*(void *)(a1 + 48) + 24) creditRecoveryPaymentPlansForAccountIdentifier:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 48) + 24) increaseRetryBackoffLevelForAccountType:v2 endpointType:9 accountIdentifier:*(void *)(a1 + 56)];
  id v10 = *(void **)(a1 + 72);
  if (v10)
  {
    id v11 = *(NSObject **)(*(void *)(a1 + 48) + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10026DCF0;
    block[3] = &unk_100731830;
    id v33 = v10;
    id v9 = v9;
    id v31 = v9;
    id v32 = *(id *)(a1 + 40);
    dispatch_async(v11, block);

    uint64_t v12 = v33;
LABEL_11:
  }
}

uint64_t sub_10026DCF0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_10026DD08(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10026DD20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:*(void *)(a1 + 32) creditRecoveryPaymentPlansChangedForAccountIdentifier:*(void *)(a1 + 40)];
  }
}

uint64_t sub_10026DEC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10026DEDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10026DF8C;
  v7[3] = &unk_100731AD8;
  void v7[4] = v2;
  id v4 = *(id *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  id v8 = v4;
  uint64_t v10 = v5;
  id v9 = v6;
  dispatch_async(v3, v7);
}

void sub_10026DF8C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) accountEntityOrderingsForAccountIdentifier:*(void *)(a1 + 40) entityType:*(void *)(a1 + 56)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10026E054;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_10026E054(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10026E8B4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 184));
  [*(id *)(*(void *)(a1 + 32) + 176) removeObjectForKey:*(void *)(a1 + 40)];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 184));
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return [v2 _executeNextAccountManagerFetchIfPossibleForRequestIdentifier:v3];
}

void sub_10026F1A4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10026F234;
  block[3] = &unk_10072F788;
  id v3 = *(id *)(a1 + 40);
  dispatch_async(v1, block);
}

uint64_t sub_10026F234(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10026F24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithAccounts:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithAccount:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) callCompletionsWithVirtualCard:a2 account:a3 error:a4];
  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v5();
}

uint64_t sub_10026F334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithUsers:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithSharedAccountCloudStore:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithSuccess:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithFinancingPlans:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithFundingSources:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithPromotions:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F4FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 32) callCompletionsWithEnhancedMerchants:a2 error:a3 lastUpdate:a4];
  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v5();
}

uint64_t sub_10026F54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithBalances:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F598(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) callCompletionsWithError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

uint64_t sub_10026F5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithResponse:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F62C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) callCompletionsWithError:a2];
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v3();
}

uint64_t sub_10026F674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithPaymentPlans:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

uint64_t sub_10026F6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [*(id *)(a1 + 32) callCompletionsWithPhysicalCards:a2 error:a3];
  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

id sub_10026FD24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObjectsFromArray:");
}

void sub_10026FF30(uint64_t a1)
{
  uint64_t v2 = [[PDAccountManagerAccountsPushPayload alloc] initWithDictionary:*(void *)(a1 + 32)];
  objc_msgSend(*(id *)(a1 + 40), "_queue_updateAccountsWithPayload:", v2);
}

void sub_10026FF90(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 152));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 152));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100270060;
  v4[3] = &unk_100734900;
  id v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  id v6 = *(id *)(a1 + 48);
  [v2 enumerateKeysAndObjectsUsingBlock:v4];
}

void sub_100270060(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _queueIndexOfAccountWithIdentifier:v3];
  if (v4 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 64) objectAtIndex:v4];
    id v6 = [v5 additionalPushTopics];
    id v7 = [v6 payments];
    id v8 = *(void **)(a1 + 40);
    id v9 = v7;
    id v10 = v8;
    if (v9 == v10)
    {

LABEL_11:
      id v14 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v117 = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Updating payments %@ following push", buf, 0xCu);
      }

      [*(id *)(a1 + 32) updateScheduledPaymentsWithAccount:v5 completion:0];
      goto LABEL_84;
    }
    id v11 = v10;
    if (v9) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
    }
    else
    {
      unsigned int v13 = [v9 isEqualToString:v10];

      if (v13) {
        goto LABEL_11;
      }
    }
    uint64_t v15 = [v6 account];
    uint64_t v16 = *(void **)(a1 + 40);
    id v17 = v15;
    id v18 = v16;
    if (v17 == v18)
    {
    }
    else
    {
      uint64_t v19 = v18;
      if (!v17 || !v18)
      {

        goto LABEL_24;
      }
      unsigned int v20 = [v17 isEqualToString:v18];

      if (!v20)
      {
LABEL_24:
        id v24 = [v6 extendedAccount];
        id v25 = *(void **)(a1 + 40);
        id v26 = v24;
        id v27 = v25;
        if (v26 == v27)
        {
        }
        else
        {
          id v28 = v27;
          if (!v26 || !v27)
          {

            goto LABEL_34;
          }
          unsigned int v29 = [v26 isEqualToString:v27];

          if (!v29)
          {
LABEL_34:
            id v32 = [v6 users];
            id v33 = *(void **)(a1 + 40);
            id v34 = v32;
            id v35 = v33;
            if (v34 == v35)
            {
            }
            else
            {
              id v36 = v35;
              if (!v34 || !v35)
              {

                goto LABEL_44;
              }
              unsigned int v37 = [v34 isEqualToString:v35];

              if (!v37)
              {
LABEL_44:
                uint64_t v40 = [v6 sharedAccountCloudStore];
                uint64_t v41 = *(void **)(a1 + 40);
                id v42 = v40;
                id v43 = v41;
                if (v42 == v43)
                {
                }
                else
                {
                  int8x16_t v44 = v43;
                  if (!v42 || !v43)
                  {

                    goto LABEL_54;
                  }
                  unsigned int v45 = [v42 isEqualToString:v43];

                  if (!v45)
                  {
LABEL_54:
                    id v48 = [v6 financingPlans];
                    id v49 = *(void **)(a1 + 40);
                    id v50 = v48;
                    id v51 = v49;
                    if (v50 == v51)
                    {
                    }
                    else
                    {
                      uint64_t v52 = v51;
                      if (!v50 || !v51)
                      {

                        goto LABEL_64;
                      }
                      unsigned int v53 = [v50 isEqualToString:v51];

                      if (!v53)
                      {
LABEL_64:
                        id v56 = [v6 physicalCards];
                        id v57 = *(void **)(a1 + 40);
                        id v58 = v56;
                        id v59 = v57;
                        if (v58 == v59)
                        {
                        }
                        else
                        {
                          id v60 = v59;
                          if (!v58 || !v59)
                          {

                            goto LABEL_74;
                          }
                          unsigned int v61 = [v58 isEqualToString:v59];

                          if (!v61)
                          {
LABEL_74:
                            id v64 = [v6 virtualCards];
                            __int16 v65 = *(void **)(a1 + 40);
                            id v66 = v64;
                            id v67 = v65;
                            if (v66 == v67)
                            {
                            }
                            else
                            {
                              id v68 = v67;
                              if (!v66 || !v67)
                              {

                                goto LABEL_87;
                              }
                              unsigned int v69 = [v66 isEqualToString:v67];

                              if (!v69)
                              {
LABEL_87:
                                v72 = [v6 servicingToken];
                                v73 = *(void **)(a1 + 40);
                                id v74 = v72;
                                id v75 = v73;
                                if (v74 == v75)
                                {
                                }
                                else
                                {
                                  v76 = v75;
                                  if (!v74 || !v75)
                                  {

                                    goto LABEL_99;
                                  }
                                  unsigned int v77 = [v74 isEqualToString:v75];

                                  if (!v77)
                                  {
LABEL_99:
                                    v83 = [v6 fundingSources];
                                    v84 = *(void **)(a1 + 40);
                                    id v85 = v83;
                                    id v86 = v84;
                                    if (v85 == v86)
                                    {
                                    }
                                    else
                                    {
                                      v87 = v86;
                                      if (!v85 || !v86)
                                      {

LABEL_112:
                                        v91 = [v6 creditRecoveryPaymentPlans];
                                        v92 = *(void **)(a1 + 40);
                                        id v81 = v91;
                                        id v93 = v92;
                                        if (v81 == v93)
                                        {

LABEL_118:
                                          v96 = PKLogFacilityTypeGetObject();
                                          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
                                          {
                                            *(_DWORD *)long long buf = 138412290;
                                            id v117 = v3;
                                            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "Updating payment plans of account %@ following push", buf, 0xCu);
                                          }

                                          v97 = *(void **)(a1 + 32);
                                          v98[0] = _NSConcreteStackBlock;
                                          v98[1] = 3221225472;
                                          v98[2] = sub_100271314;
                                          v98[3] = &unk_100741EF8;
                                          id v99 = v3;
                                          [v97 _updateCreditRecoveryPaymentPlansForAccountIdentifier:v99 force:1 completion:v98];
                                          id v23 = v99;
LABEL_83:

LABEL_84:
                                          goto LABEL_85;
                                        }
                                        v94 = v93;
                                        if (v81 && v93)
                                        {
                                          unsigned int v95 = [v81 isEqualToString:v93];

                                          if (!v95) {
                                            goto LABEL_84;
                                          }
                                          goto LABEL_118;
                                        }

                                        goto LABEL_122;
                                      }
                                      unsigned int v88 = [v85 isEqualToString:v86];

                                      if (!v88) {
                                        goto LABEL_112;
                                      }
                                    }
                                    v89 = PKLogFacilityTypeGetObject();
                                    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_DWORD *)long long buf = 138412290;
                                      id v117 = v3;
                                      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Updating funding sources of account %@ following push", buf, 0xCu);
                                    }

                                    v90 = *(void **)(a1 + 32);
                                    v100[0] = _NSConcreteStackBlock;
                                    v100[1] = 3221225472;
                                    v100[2] = sub_100271250;
                                    v100[3] = &unk_100741EF8;
                                    id v101 = v3;
                                    [v90 updatePaymentFundingSourcesForAccountIdentifier:v101 force:1 completion:v100];
                                    id v23 = v101;
                                    goto LABEL_83;
                                  }
                                }
                                v78 = [*(id *)(a1 + 48) PKStringForKey:@"accountIdentifier"];
                                id v79 = v3;
                                id v80 = v78;
                                id v81 = v80;
                                if (v80 == v79)
                                {
                                }
                                else
                                {
                                  if (!v79 || !v80)
                                  {

                                    goto LABEL_122;
                                  }
                                  unsigned int v82 = [v79 isEqualToString:v80];

                                  if (!v82) {
                                    goto LABEL_122;
                                  }
                                }
                                [*(id *)(a1 + 32) _insertOrUpdateAccountServicingTokenNotificationWithAccount:v5 notificationUserInfo:*(void *)(a1 + 48)];
LABEL_122:

                                goto LABEL_84;
                              }
                            }
                            uint64_t v70 = PKLogFacilityTypeGetObject();
                            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)long long buf = 138412290;
                              id v117 = v3;
                              _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Updating virtual cards for account %@ following push", buf, 0xCu);
                            }

                            __int16 v71 = *(void **)(a1 + 32);
                            v102[0] = _NSConcreteStackBlock;
                            v102[1] = 3221225472;
                            v102[2] = sub_1002711A4;
                            v102[3] = &unk_1007437A8;
                            id v103 = v3;
                            [v71 updateVirtualCardsWithAccountIdentifier:v103 completion:v102];
                            id v23 = v103;
                            goto LABEL_83;
                          }
                        }
                        id v62 = PKLogFacilityTypeGetObject();
                        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)long long buf = 138412290;
                          id v117 = v3;
                          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Updating physical cards for account %@ following push", buf, 0xCu);
                        }

                        v63 = *(void **)(a1 + 32);
                        v104[0] = _NSConcreteStackBlock;
                        v104[1] = 3221225472;
                        v104[2] = sub_1002710F8;
                        v104[3] = &unk_100741F20;
                        id v105 = v3;
                        [v63 updatePhysicalCardsForAccountWithIdentifier:v105 force:1 completion:v104];
                        id v23 = v105;
                        goto LABEL_83;
                      }
                    }
                    id v54 = PKLogFacilityTypeGetObject();
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = 138412290;
                      id v117 = v3;
                      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Updating financing plans of account %@ following push", buf, 0xCu);
                    }

                    id v55 = *(void **)(a1 + 32);
                    v106[0] = _NSConcreteStackBlock;
                    v106[1] = 3221225472;
                    v106[2] = sub_100271034;
                    v106[3] = &unk_100741EF8;
                    id v107 = v3;
                    [v55 _updateFinancingPlansForAccountWithIdentifier:v107 pageOffset:0 limit:0 ignoreLastUpdatedDate:0 fromPush:1 completion:v106];
                    id v23 = v107;
                    goto LABEL_83;
                  }
                }
                id v46 = PKLogFacilityTypeGetObject();
                if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138412290;
                  id v117 = v3;
                  _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Updating shared account cloud store for account %@ following push", buf, 0xCu);
                }

                int8x16_t v47 = *(void **)(a1 + 32);
                v108[0] = _NSConcreteStackBlock;
                v108[1] = 3221225472;
                v108[2] = sub_100270F88;
                v108[3] = &unk_100741F48;
                id v109 = v3;
                [v47 _updateSharedAccountCloudStoreWithAccountIdentifier:v109 fromPush:1 completion:v108];
                id v23 = v109;
                goto LABEL_83;
              }
            }
            id v38 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v117 = v3;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Updating account users of account %@ following push", buf, 0xCu);
            }

            id v39 = *(void **)(a1 + 32);
            v110[0] = _NSConcreteStackBlock;
            v110[1] = 3221225472;
            v110[2] = sub_100270EDC;
            v110[3] = &unk_100741F20;
            id v111 = v3;
            [v39 _updateAccountUsersForAccountWithIdentifier:v111 fromPush:1 completion:v110];
            id v23 = v111;
            goto LABEL_83;
          }
        }
        id v30 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v117 = v3;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Updating extended version of account %@ following push", buf, 0xCu);
        }

        id v31 = *(void **)(a1 + 32);
        v112[0] = _NSConcreteStackBlock;
        v112[1] = 3221225472;
        v112[2] = sub_100270E30;
        v112[3] = &unk_100743780;
        id v113 = v3;
        [v31 updateAccountWithIdentifier:v113 extended:1 completion:v112];
        id v23 = v113;
        goto LABEL_83;
      }
    }
    id v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v117 = v3;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Updating account %@ following push", buf, 0xCu);
    }

    uint64_t v22 = *(void **)(a1 + 32);
    v114[0] = _NSConcreteStackBlock;
    v114[1] = 3221225472;
    v114[2] = sub_100270D84;
    v114[3] = &unk_100743780;
    id v115 = v3;
    [v22 updateAccountWithIdentifier:v115 extended:0 completion:v114];
    id v23 = v115;
    goto LABEL_83;
  }
LABEL_85:
}

void sub_100270D84(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Account %@ updated following push", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100270E30(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Extended version of account %@ updated following push", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100270EDC(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Account users of account %@ updated following push", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100270F88(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Shared account cloud store for account %@ updated following push", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100271034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Financing Plans of account %@ updated following push with error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1002710F8(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Physical cards for account %@ updated following push", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1002711A4(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Virtual cards for account %@ updated following push", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100271250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Funding sources of account %@ updated following push with error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100271314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Payment plans of account %@ updated following push with error %@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_100271B38(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateAccountsWithCompletion:&stru_1007437C8];
}

void sub_100271B48(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Accounts updated following push notification", v4, 2u);
  }
}

void sub_100271BB4(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Account %@ updated following push", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100271C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Financing plans of account %@ updated following push with error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100271D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Funding sources of account %@ updated following push with error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100271DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reset zones %@ for account %@ following push with error %@", (uint8_t *)&v8, 0x20u);
  }
}

void sub_100271EB4(uint64_t a1, uint64_t a2)
{
  int v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reset balances for account %@ updated following push with error: %@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100271F78(uint64_t a1, uint64_t a2)
{
  int v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138412802;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Invalidated top up token with identifier %@ for account with identifier %@ with error %@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_100272304(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002723F0;
  v14[3] = &unk_1007437F0;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  __int16 v11 = *(void **)(a1 + 56);
  id v15 = v9;
  uint64_t v16 = v10;
  id v18 = v6;
  id v19 = v7;
  id v17 = v11;
  id v12 = v6;
  id v13 = v7;
  [v8 pendingFamilyMembersWithCachePolicy:0 completion:v14];
}

void sub_1002723F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = *(void **)(a1 + 40);
        __int16 v11 = objc_msgSend(v9, "inviteEmail", (void)v13);
        id v12 = [v10 _familyMemberAssociatedWithInviteEmail:v11 familyMembers:v3];

        if (!v12) {
          [*(id *)(a1 + 48) addObject:v9];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  [*(id *)(a1 + 48) count];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10027255C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10027265C;
  v14[3] = &unk_100743818;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  __int16 v11 = *(void **)(a1 + 56);
  id v15 = v9;
  uint64_t v16 = v10;
  id v20 = v7;
  id v17 = v11;
  id v18 = v6;
  id v19 = *(id *)(a1 + 64);
  id v12 = v6;
  id v13 = v7;
  [v8 familyMembersWithCachePolicy:0 completion:v14];
}

void sub_10027265C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v29;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        uint64_t v10 = *(void **)(a1 + 40);
        __int16 v11 = [v9 inviteEmail];
        id v12 = [v10 _familyMemberAssociatedWithInviteEmail:v11 familyMembers:v3];

        if (v12)
        {
          id v13 = [v12 altDSID];
          [v9 setAltDSID:v13];

          [*(id *)(a1 + 48) addObject:v9];
        }
        else
        {
          long long v14 = [v9 altDSID];
          if (v14)
          {
            id v15 = +[PDAccountPendingFamilyMemberReminderNotification notificationIdentifierForAltDSID:v14];
            [*(id *)(*(void *)(a1 + 40) + 160) removeUserNotificationWithIdentifier:v15];
          }
          [*(id *)(*(void *)(a1 + 40) + 24) deleteAccountPendingFamilyMember:v9];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v6);
  }

  if ([*(id *)(a1 + 48) count])
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v16 = v3;
    id v17 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v25;
      do
      {
        for (j = 0; j != v18; j = (char *)j + 1)
        {
          if (*(void *)v25 != v19) {
            objc_enumerationMutation(v16);
          }
          id v21 = *(void **)(*((void *)&v24 + 1) + 8 * (void)j);
          uint64_t v22 = objc_msgSend(v21, "altDSID", (void)v24);
          if (v22) {
            [*(id *)(a1 + 64) setObject:v21 forKey:v22];
          }
        }
        id v18 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
      }
      while (v18);
    }

    id v23 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
  }
  else
  {
    id v23 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
  }
  v23();
}

void sub_100272908(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (([a4 isCanceled] & 1) == 0)
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Account pending family members that have become family members %@", buf, 0xCu);
    }

    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id obj = *(id *)(a1 + 32);
    id v7 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v25;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v25 != v9) {
            objc_enumerationMutation(obj);
          }
          __int16 v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          if (([v11 displayedNotification] & 1) == 0)
          {
            [v11 setDisplayedNotification:1];
            id v12 = *(void **)(*(void *)(a1 + 40) + 24);
            id v13 = [v11 accountIdentifier];
            long long v14 = [v12 passUniqueIdentifierWithAssociatedAccountIdentifier:v13];

            id v15 = [v11 altDSID];
            id v16 = [*(id *)(a1 + 48) objectForKey:v15];
            id v17 = [PDAccountPendingFamilyMemberReminderNotification alloc];
            id v18 = [v11 accountIdentifier];
            uint64_t v19 = [(PDAccountPendingFamilyMemberReminderNotification *)v17 initWithFamilyMember:v16 accountIdentifier:v18 passUniqueIdentifier:v14];

            [*(id *)(*(void *)(a1 + 40) + 160) insertUserNotification:v19];
            PKSharedCacheSetBoolForKey();
          }
        }
        id v8 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v8);
    }

    id v20 = *(void **)(a1 + 32);
    id v21 = *(void **)(*(void *)(a1 + 40) + 24);
    uint64_t v22 = [v20 allObjects];
    [v21 insertOrUpdateAccountPendingFamilyMembers:v22];
  }
}

void sub_100273554(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100273624(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10027373C;
    v9[3] = &unk_100743840;
    void v9[4] = *(void *)(a1 + 32);
    long long v12 = *(_OWORD *)(a1 + 40);
    id v11 = v7;
    id v10 = v6;
    [WeakRetained accountsForFeature:4 completion:v9];
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1);
  }
}

void sub_10027373C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && [v3 count])
  {
    id v5 = [v4 anyObject];
    id v6 = [v5 appleBalanceDetails];
    id v7 = *(void **)(a1[4] + 24);
    id v8 = [v6 associatedPassTypeIdentifier];
    uint64_t v9 = [v6 associatedPassSerialNumber];
    unsigned int v10 = [v7 passExistsWithPassTypeID:v8 serialNumber:v9];

    id v11 = PKLogFacilityTypeGetObject();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning: we have a provisioned pass, ending background provisioning", buf, 2u);
      }

      objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), *(id *)(*(void *)(a1[8] + 8) + 40));
      id v13 = *(void (**)(void))(a1[6] + 16);
    }
    else
    {
      if (v12)
      {
        *(_WORD *)id v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning: account exists but we have no pass, continuing to check product state", v16, 2u);
      }

      id v13 = *(void (**)(void))(a1[6] + 16);
    }
    v13();
  }
  else
  {
    long long v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning: no Apple Balance account exists, continuing background provisioning", v15, 2u);
    }

    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_100273918(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v9 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v10 = (void *)*((void *)WeakRetained + 4);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100273A38;
    v11[3] = &unk_100743890;
    long long v14 = *(_OWORD *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    id v13 = v7;
    id v12 = v6;
    [v10 performHandlerOnSharedWebServiceQueue:v11];
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1);
  }
}

uint64_t sub_100273A38(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)PKPaymentProvisioningController) initWithWebService:v3 localPaymentService:0];

  uint64_t v5 = *(void *)(a1[6] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning: provisioning controller failed to initialize", v9, 2u);
    }

    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), *(id *)(*(void *)(a1[8] + 8) + 40));
  }
  return (*(uint64_t (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[7] + 8) + 40) != 0);
}

void sub_100273B3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v14[0] = _NSConcreteStackBlock;
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  v14[1] = 3221225472;
  id v11 = *(void **)(v10 + 40);
  v14[2] = sub_100273C10;
  v14[3] = &unk_1007438E0;
  long long v17 = v8;
  long long v18 = v9;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  [v11 preflightWithCompletion:v14];
}

void sub_100273C10(void *a1, int a2, void *a3)
{
  id v6 = a3;
  id v7 = v6;
  if (a2)
  {
    long long v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Provisioning controller preflight succeeded", (uint8_t *)&v20, 2u);
    }

    long long v9 = [*(id *)(*(void *)(a1[6] + 8) + 40) paymentSetupProductModel];
    uint64_t v10 = [v9 productsForFeatureIdentifier:4];
    id v11 = [v10 firstObject];

    if (v11
      && ([v11 configuration],
          id v12 = objc_claimAutoreleasedReturnValue(),
          id v13 = [v12 state],
          v12,
          v13 == (id)1))
    {
      id v14 = [objc_alloc((Class)PKAppleBalanceCredential) initWithProduct:v11 eligibilitySource:7];
      uint64_t v15 = *(void *)(a1[7] + 8);
      id v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      [*(id *)(*(void *)(a1[7] + 8) + 40) setIsFromBackgroundProvisioning:1];
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 138412290;
        id v21 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning: product for Apple Balance invalid: %@", (uint8_t *)&v20, 0xCu);
      }

      objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), *(id *)(*(void *)(a1[9] + 8) + 40));
    }
  }
  else
  {
    if (v6)
    {
      long long v17 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = 138412290;
        id v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Provisioning controller preflight failed with error %@", (uint8_t *)&v20, 0xCu);
      }

      long long v18 = (id *)(*(void *)(a1[8] + 8) + 40);
      uint64_t v19 = a3;
    }
    else
    {
      uint64_t v19 = *(void **)(*(void *)(a1[9] + 8) + 40);
      long long v18 = (id *)(*(void *)(a1[8] + 8) + 40);
    }
    objc_storeStrong(v18, v19);
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[8] + 8) + 40) != 0);
}

void sub_100273E8C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  long long v8 = *(void **)(*(void *)(a1[4] + 8) + 40);
  uint64_t v9 = *(void *)(*(void *)(a1[5] + 8) + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100273F74;
  v13[3] = &unk_1007307C0;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 resolveLocalEligibilityRequirementsForAppleBalanceCredential:v9 withCompletion:v13];
}

void sub_100273F74(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning local eligibility requirements executed with error: %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v5 = *(void *)(a1[6] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
  id v7 = v3;

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_100274070(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [objc_alloc((Class)PKPaymentEligibilityRequest) initWithPaymentCredential:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(*(void *)(v9 + 8) + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10027417C;
  v13[3] = &unk_100743958;
  long long v16 = *(_OWORD *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = v9;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v10 requestEligibility:v8 withCompletionHandler:v13];
}

void sub_10027417C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning eligibility request completed with error: %@", (uint8_t *)&v10, 0xCu);
  }

  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    if ([v5 eligibilityStatus] == (id)1)
    {
      id v8 = [*(id *)(*(void *)(a1[8] + 8) + 40) state];
      [v8 setEligibilityResponse:v5];

      [*(id *)(*(void *)(a1[9] + 8) + 40) setState:4 forCredential:*(void *)(*(void *)(a1[8] + 8) + 40)];
    }
    else
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [v5 eligibilityStatus];
        int v10 = 134217984;
        id v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning failed: ineligible with status %li", (uint8_t *)&v10, 0xCu);
      }

      objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(*(void *)(a1[7] + 8) + 40));
    }
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_100274354(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100274460;
    v9[3] = &unk_100743980;
    long long v12 = *(_OWORD *)(a1 + 32);
    id v11 = v7;
    id v10 = v6;
    [WeakRetained validateAppleBalanceSecurityRequirementsWithCompletion:v9];
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1);
  }
}

void sub_100274460(void *a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = @"not met";
    if (a2) {
      CFStringRef v7 = @"met";
    }
    int v12 = 138412546;
    CFStringRef v13 = v7;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Apple Balance security requirements for background provisioning %@, error %@", (uint8_t *)&v12, 0x16u);
  }

  id v8 = v5;
  if (v5) {
    goto LABEL_8;
  }
  if ((a2 & 1) == 0)
  {
    id v8 = *(void **)(*(void *)(a1[7] + 8) + 40);
LABEL_8:
    uint64_t v9 = *(void *)(a1[6] + 8);
    id v10 = v8;
    id v11 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v10;
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_100274598(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc((Class)PKPaymentProvisioningRequest);
  uint64_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) state];
  id v10 = [v9 eligibilityResponse];
  id v11 = [v8 initWithEligibilityResponse:v10];

  int v12 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1002746D0;
  v15[3] = &unk_1007439D0;
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 64);
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  [v12 requestProvisioning:v11 withCompletion:v15];
}

void sub_1002746D0(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 138412546;
    id v18 = v7;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning provision request completed with pass: %@, error: %@", (uint8_t *)&v17, 0x16u);
  }

  if (!v7 || v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412546;
      id v18 = v7;
      __int16 v19 = 2112;
      id v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning: provisioning request failed with pass %@ error %@", (uint8_t *)&v17, 0x16u);
    }

    id v14 = v9;
    if (!v9) {
      id v14 = *(void **)(*(void *)(a1[8] + 8) + 40);
    }
    uint64_t v15 = *(void *)(a1[7] + 8);
    id v16 = v14;
    id v13 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v16;
  }
  else
  {
    uint64_t v11 = [v7 uniqueID];
    uint64_t v12 = *(void *)(a1[6] + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[7] + 8) + 40) != 0);
}

void sub_10027488C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100274964;
  v11[3] = &unk_100743A20;
  id v12 = v6;
  id v13 = v7;
  uint64_t v14 = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = v7;
  [WeakRetained updateAccountsWithCompletion:v11];
}

void sub_100274964(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating accounts for Apple Balance background provisioning completed with error: %@", (uint8_t *)&v6, 0xCu);
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_100274A44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100274B7C;
  v13[3] = &unk_100743A70;
  uint64_t v16 = *(void *)(a1 + 32);
  objc_copyWeak(&v18, (id *)(a1 + 56));
  long long v17 = *(_OWORD *)(a1 + 40);
  id v11 = v9;
  id v15 = v11;
  id v12 = v8;
  id v14 = v12;
  [WeakRetained defaultAccountForFeature:4 completion:v13];

  objc_destroyWeak(&v18);
}

void sub_100274B68(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100274B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 72));
    if (WeakRetained)
    {
      id v5 = -[PDAccountBackgroundProvisionCompleteUserNotification initWithFeatureIdentifier:passUniqueIdentifier:supportsInStorePayment:]([PDAccountBackgroundProvisionCompleteUserNotification alloc], "initWithFeatureIdentifier:passUniqueIdentifier:supportsInStorePayment:", 4, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), [v3 supportsInStorePayment]);
      int v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        id v8 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning inserting user notification %@", (uint8_t *)&v7, 0xCu);
      }

      [WeakRetained[20] insertUserNotification:v5];
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  }
  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0);
}

void sub_100274CF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = (id *)(a1 + 40);
  int v7 = a4;
  id v9 = a3;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained _triggerProvisionPassToWatchWithCompletion:&stru_100743A90];

  v7[2](v7, v9, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0);
}

void sub_100274D9C(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v4 = @"not triggered";
    if (v2) {
      CFStringRef v4 = @"triggered";
    }
    int v5 = 138412290;
    CFStringRef v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning to watch %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100274E5C(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 48);
    LOBYTE(v3[47]._os_unfair_lock_opaque) = 0;
    os_unfair_lock_unlock(v3 + 48);
  }
  if (*(void *)(a1 + 32))
  {
    CFStringRef v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Apple Balance background provisioning completed with error: %@", (uint8_t *)&v6, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100275228(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 200));
  _Block_object_dispose((const void *)(v3 - 192), 8);
  _Block_object_dispose((const void *)(v3 - 160), 8);
  _Block_object_dispose((const void *)(v3 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100275284(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  int v6 = a4;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  char v8 = *(unsigned char *)(v7 + 24);
  if (v8)
  {
    char v8 = PKPasscodeEnabled() != 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  *(unsigned char *)(v7 + 24) = v8;
  v6[2](v6, v9, *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0);
}

void sub_100275328(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    id v10 = (void *)*((void *)WeakRetained + 5);
    id v11 = PKCurrentCloudStoreApplePayContainerName();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100275444;
    v14[3] = &unk_100743B08;
    long long v17 = *(_OWORD *)(a1 + 32);
    id v16 = v7;
    id v12 = v6;
    uint64_t v13 = *(void *)(a1 + 48);
    id v15 = v12;
    uint64_t v18 = v13;
    [v10 cloudStoreStatusForContainer:v11 completion:v14];
  }
  else
  {
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1);
  }
}

void sub_100275444(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  char v8 = a4;
  if (v8)
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 138412290;
      CFStringRef v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to get cloud store status for Apple Pay Container with error %@", (uint8_t *)&v16, 0xCu);
    }

    objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), a4);
    id v10 = *(void (**)(void))(a1[5] + 16);
  }
  else
  {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = a3 ^ 1;
    uint64_t v11 = *(void *)(a1[7] + 8);
    if (*(unsigned char *)(v11 + 24))
    {
      unsigned __int8 v12 = [v7 supportsDeviceToDeviceEncryption];
      uint64_t v11 = *(void *)(a1[7] + 8);
    }
    else
    {
      unsigned __int8 v12 = 0;
    }
    *(unsigned char *)(v11 + 24) = v12;
    uint64_t v13 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v14 = @"NO";
      if (a3) {
        CFStringRef v15 = @"YES";
      }
      else {
        CFStringRef v15 = @"NO";
      }
      if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24)) {
        CFStringRef v14 = @"YES";
      }
      int v16 = 138412546;
      CFStringRef v17 = v15;
      __int16 v18 = 2112;
      CFStringRef v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Cloud store status for Apple Pay Container: cloudStoreIsSetup %@, supportsDeviceToDeviceEncryption %@", (uint8_t *)&v16, 0x16u);
    }

    id v10 = *(void (**)(void))(a1[5] + 16);
  }
  v10();
}

void sub_100275634(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
      && *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      id v10 = (void *)*((void *)WeakRetained + 5);
      uint64_t v11 = PKCurrentCloudStoreApplePayContainerName();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10027578C;
      v14[3] = &unk_100743B30;
      uint64_t v17 = *(void *)(a1 + 32);
      id v16 = v7;
      id v12 = v6;
      uint64_t v13 = *(void *)(a1 + 48);
      id v15 = v12;
      uint64_t v18 = v13;
      [v10 setupCloudDatabaseForContainerName:v11 completion:v14];
    }
    else
    {
      (*((void (**)(id, id, BOOL))v7 + 2))(v7, v6, *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0);
    }
  }
  else
  {
    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1);
  }
}

void sub_10027578C(void *a1, int a2, void *a3)
{
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v13 = 138412290;
      CFStringRef v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to setup Apple Pay Cloud Store Container with error %@", (uint8_t *)&v13, 0xCu);
    }

    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), a3);
    id v9 = *(void (**)(void))(a1[5] + 16);
  }
  else
  {
    if (v8)
    {
      CFStringRef v10 = @"failed";
      if (a2) {
        CFStringRef v10 = @"succeeded";
      }
      int v13 = 138412290;
      CFStringRef v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Apple Pay Cloud Container setup %@", (uint8_t *)&v13, 0xCu);
    }

    uint64_t v11 = *(void *)(a1[6] + 8);
    if (*(unsigned char *)(v11 + 24)) {
      char v12 = a2;
    }
    else {
      char v12 = 0;
    }
    *(unsigned char *)(v11 + 24) = v12;
    id v9 = *(void (**)(void))(a1[5] + 16);
  }
  v9();
}

uint64_t sub_100275914(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_100275AA4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100275AC0(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Inserted account for zone creation: %@", (uint8_t *)&v8, 0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained && *(void *)(a1 + 48))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 208));
    uint64_t v5 = [*(id *)(a1 + 32) accountIdentifier];
    id v6 = [WeakRetained[25] objectForKey:v5];
    if (!v6) {
      id v6 = objc_alloc_init((Class)NSMutableOrderedSet);
    }
    id v7 = objc_retainBlock(*(id *)(a1 + 48));
    [v6 addObject:v7];

    [WeakRetained[25] setObject:v6 forKey:v5];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 208));
  }
}

void sub_100275CA8(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"failed";
    if (v4) {
      CFStringRef v6 = @"succeeded";
    }
    int v7 = 138412546;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    CFStringRef v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Provision to Watch %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_10027612C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  CFStringRef v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v16 = v8;
    __int16 v17 = 2112;
    id v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fetched Apple Balance promotion with result %@, error %@", buf, 0x16u);
  }

  char v12 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  if (v8)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1002762A4;
    v13[3] = &unk_10072F6E8;
    id v14 = v8;
    [v12 insertOrUpdateAppleBalancePromotion:v14 accountIdentifier:v11 completion:v13];
  }
  else
  {
    [v12 deleteAppleBalancePromotionForAccountWithIdentifier:v11 completion:&stru_100743BC0];
  }
}

void sub_1002762A4(uint64_t a1, uint64_t a2)
{
  BOOL v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Inserted Apple Balance promotion %@ with error %@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100276368(id a1, NSError *a2)
{
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Deleted stored Apple Balance promotion with error %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_100276544(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100276558(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100276628;
  v7[3] = &unk_100730578;
  void v7[4] = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100276628(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) appleBalancePromotionForAccountIdentifier:*(void *)(a1 + 40)];
  objc_msgSend(*(id *)(a1 + 32), "_queue_updateAppleBalancePromotionsIfNeccessaryForAccount:currentPromotion:", *(void *)(a1 + 48), v2);
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002766FC;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 56);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1002766FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100276868(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100276884(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateAppleBalancePromotion:*(void *)(a1 + 40) forAccountWithIdentifier:*(void *)(a1 + 48)];
  id v3 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002769B8;
  v8[3] = &unk_1007424D8;
  void v8[4] = v3;
  id v9 = v2;
  id v10 = *(id *)(a1 + 48);
  id v4 = v2;
  [v3 _accessObserversWithHandler:v8];
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100276A1C;
  v6[3] = &unk_10072F788;
  id v7 = *(id *)(a1 + 56);
  dispatch_async(v5, v6);
}

void sub_1002769B8(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdateAppleBalancePromotion:a1[5] forAccountIdentifier:a1[6]];
  }
}

uint64_t sub_100276A1C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_100276B64(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100276B80(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) deleteAppleBalancePromotionForAccountWithIdentifier:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    id v4 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100276CB0;
    v8[3] = &unk_1007424D8;
    void v8[4] = v4;
    id v9 = v2;
    id v10 = *(id *)(a1 + 40);
    [v4 _accessObserversWithHandler:v8];
  }
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100276D14;
  v6[3] = &unk_10072F788;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v5, v6);
}

void sub_100276CB0(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didRemoveAppleBalancePromotionWithUniqueIdentifier:a1[5] forAccountIdentifier:a1[6]];
  }
}

uint64_t sub_100276D14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_100276E60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100276E74(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) inStoreTopUpTokenForAccountIdentifier:*(void *)(a1 + 40)];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100276F38;
  v6[3] = &unk_10072E598;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_100276F38(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1002770A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002770BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) insertOrUpdateInStoreTopUpToken:*(void *)(a1 + 40) forAccountWithIdentifier:*(void *)(a1 + 48)];
  id v3 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002771F0;
  v8[3] = &unk_1007424D8;
  void v8[4] = v3;
  id v9 = v2;
  id v10 = *(id *)(a1 + 48);
  id v4 = v2;
  [v3 _accessObserversWithHandler:v8];
  id v5 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100277254;
  v6[3] = &unk_10072F788;
  id v7 = *(id *)(a1 + 56);
  dispatch_async(v5, v6);
}

void sub_1002771F0(void *a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 accountManager:a1[4] didUpdateInStoreTopUpToken:a1[5] forAccountIdentifier:a1[6]];
  }
}

uint64_t sub_100277254(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100277398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002773AC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) deleteInStoreTopUpTokenForAccountWithIdentifier:*(void *)(a1 + 40)];
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 144);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10027744C;
  block[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

uint64_t sub_10027744C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100277618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100277634(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = [v3 tokenIdentifier];
  id v6 = v4;
  id v7 = v5;
  if (v6 == v7)
  {

LABEL_10:
    [v3 setState:1];
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100277810;
    v15[3] = &unk_1007378B8;
    uint64_t v12 = *(void *)(a1 + 40);
    id v16 = *(id *)(a1 + 48);
    [WeakRetained insertOrUpdateInStoreTopUpToken:v3 accountIdentifier:v12 completion:v15];

    goto LABEL_14;
  }
  id v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
  }
  else
  {
    unsigned int v10 = [v6 isEqualToString:v7];

    if (v10) {
      goto LABEL_10;
    }
  }
  int v13 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Error: no token with identifier %@ is stored on device", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_14:
}

uint64_t sub_100277810(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100277A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100277AA4(id *a1)
{
  uint64_t v2 = a1 + 6;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = (void *)*((void *)WeakRetained + 4);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100277B9C;
    v6[3] = &unk_100743C60;
    id v7 = a1[4];
    id v8 = a1[5];
    objc_copyWeak(&v9, v2);
    [v5 performHandlerOnSharedWebServiceQueue:v6];
    objc_destroyWeak(&v9);
  }
}

void sub_100277B88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100277B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100277C6C;
  v5[3] = &unk_100743C38;
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  objc_copyWeak(&v7, (id *)(a1 + 48));
  [v3 resolveStorefrontCountryMismatchWithRequest:v4 completion:v5];
  objc_destroyWeak(&v7);
}

void sub_100277C58(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100277C6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100277E5C;
    v14[3] = &unk_10073D508;
    id v15 = 0;
    id v16 = *(id *)(a1 + 32);
    [WeakRetained attemptAppleBalanceSetupWithCompletion:v14];

    goto LABEL_13;
  }
  id v8 = [v6 domain];
  unsigned int v9 = [v8 isEqualToString:PKPaymentWebServiceErrorDomain];

  if (v9)
  {
    if ([v7 code] != (id)60103) {
      goto LABEL_11;
    }
    unsigned int v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v18 = v7;
      uint64_t v11 = "Storefront Country Mismatch: no account exists in new region, error: %@";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
    }
  }
  else
  {
    unsigned int v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v18 = v7;
      uint64_t v11 = "Storefront Country Mismatch: request failed with error: %@";
      goto LABEL_9;
    }
  }

LABEL_11:
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(void))(v13 + 16))();
  }
LABEL_13:
}

void sub_100277E5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Storefront Country Mismatch: reprovision of new card finished with error: %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
}

void sub_100277FF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceDailyCashEligibilityRequest);
  [v4 setAccountIdentifier:*(void *)(a1 + 32)];
  uint64_t v5 = [v3 accountBaseURL];

  [v4 setBaseURL:v5];
  uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002780F0;
  v8[3] = &unk_1007422F8;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v7 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v8];
}

void sub_1002780F0(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100278180;
  v4[3] = &unk_100743CB0;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 dailyCashEligibilityWithRequest:v3 completion:v4];
}

void sub_100278180(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = [a2 summary];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

Class sub_100278338()
{
  if (qword_100808D70 != -1) {
    dispatch_once(&qword_100808D70, &stru_100743CD0);
  }
  Class result = objc_getClass("NPKCompanionAgentConnection");
  qword_100808D60 = (uint64_t)result;
  off_100806738 = (uint64_t (*)())sub_10027839C;
  return result;
}

id sub_10027839C()
{
  return (id)qword_100808D60;
}

void sub_1002783A8(id a1)
{
  qword_100808D68 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit", 2);
}

void sub_1002783D4(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.passd.main", v3);
  uint64_t v2 = (void *)qword_100808D78;
  qword_100808D78 = (uint64_t)v1;
}

id PDUtilityQueue()
{
  if (qword_100808D90 != -1) {
    dispatch_once(&qword_100808D90, &stru_100743D10);
  }
  v0 = (void *)qword_100808D88;
  return v0;
}

void sub_10027848C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v2 = dispatch_queue_create("com.apple.passd.utility", attr);
  uint64_t v3 = (void *)qword_100808D88;
  qword_100808D88 = (uint64_t)v2;
}

void sub_100278510(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.passd.heavy", v3);
  dispatch_queue_t v2 = (void *)qword_100808D98;
  qword_100808D98 = (uint64_t)v1;
}

id PDHeavyUtilityQueue()
{
  if (qword_100808DB0 != -1) {
    dispatch_once(&qword_100808DB0, &stru_100743D50);
  }
  v0 = (void *)qword_100808DA8;
  return v0;
}

void sub_1002785C8(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_UTILITY, 0);

  dispatch_queue_t v2 = PDHeavyQueue();
  dispatch_queue_t v3 = dispatch_queue_create_with_target_V2("com.apple.passd.heavy.utility", attr, v2);
  uint64_t v4 = (void *)qword_100808DA8;
  qword_100808DA8 = (uint64_t)v3;
}

id sub_1002792F8(id a1, PKPassCredentialShare *a2)
{
  return [(PKPassCredentialShare *)a2 identifier];
}

NSString *__cdecl sub_100279300(id a1, PKPassSharedEntitlement *a2)
{
  return (NSString *)[(PKPassSharedEntitlement *)a2 entitlementIdentifier];
}

NSString *__cdecl sub_100279308(id a1, PKPassSharedEntitlement *a2)
{
  return (NSString *)[(PKPassSharedEntitlement *)a2 entitlementIdentifier];
}

void sub_1002798EC(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

id sub_100279E0C(uint64_t a1, uint64_t a2)
{
  +[PassSharedEntitlement deletePassSharedEntitlementForPassSharePID:a2 inDatabase:*(void *)(a1 + 32)];
  +[PassCredentialShare deletePassCredentialShareForSharePID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 32);
  return +[PassShareActivationOption deletePassShareActivationOptionForPassSharePID:a2 inDatabase:v4];
}

void sub_100279FCC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v12 = objc_alloc_init((Class)PKPassShare);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v12 withProperties:v7 values:a4];

  uint64_t v8 = +[PassSharedEntitlement passSharedEntitlementsForPassSharePID:a2 inDatabase:*(void *)(a1 + 40)];
  [v12 setSharedEntitlements:v8];

  id v9 = +[PassCredentialShare passCredentialSharesForSharePID:a2 inDatabase:*(void *)(a1 + 40)];
  [v12 setCredentialShares:v9];

  id v10 = +[PassShareActivationOption passShareActivationOptionForPassSharePID:a2 inDatabase:*(void *)(a1 + 40)];
  id v11 = [objc_alloc((Class)PKPassShareActivationOptions) initWithOptions:v10];
  [v12 setActivationOptions:v11];

  [*(id *)(a1 + 48) safelyAddObject:v12];
}

void sub_10027A2C4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10027ABC8(id a1, PKPassShare *a2, id a3)
{
}

void sub_10027ABD0(id a1, PKPassShare *a2, id a3)
{
}

void sub_10027ABD8(id a1, PKPassShare *a2, id a3)
{
}

void sub_10027ABE0(id a1, PKPassShare *a2, id a3)
{
  id v3 = a2;
  PKDateForString();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPassShare *)v3 setCreationDate:v4];
}

void sub_10027AC44(id a1, PKPassShare *a2, id a3)
{
  id v3 = a2;
  [(PKPassShare *)v3 setManageability:PKPassShareManageabilityFromString()];
}

void sub_10027AC9C(id a1, PKPassShare *a2, id a3)
{
}

void sub_10027ACA4(id a1, PKPassShare *a2, id a3)
{
  id v3 = a2;
  [(PKPassShare *)v3 setStatus:PKShareStatusFromString()];
}

void sub_10027ACFC(id a1, PKPassShare *a2, id a3)
{
}

void sub_10027AD04(id a1, PKPassShare *a2, id a3)
{
}

void sub_10027B150(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10027B44C(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10027B454(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10027B45C(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKInstallmentPlanMerchant setCategoryCode:](v4, "setCategoryCode:", [a3 unsignedIntegerValue]);
}

void sub_10027B4B4(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10027B4BC(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10027B4C4(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10027B4CC(id a1, PKInstallmentPlanMerchant *a2, id a3)
{
}

void sub_10027B99C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10027BBDC(id a1, PKSavingsAccountStepUpDetails *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountStepUpDetails setThresholdExceeded:](v4, "setThresholdExceeded:", [a3 BOOLValue]);
}

void sub_10027BC34(id a1, PKSavingsAccountStepUpDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKSavingsAccountStepUpDetails *)v3 setNeededBy:v4];
}

void sub_10027C08C(id a1, PKPaymentOfferCatalog *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentOfferCatalog *)v3 setLastUpdated:v4];
}

void sub_10027C2B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

CFStringRef PDUserNotificationCategoryForType(uint64_t a1)
{
  CFStringRef result = 0;
  switch(a1)
  {
    case 1:
      CFStringRef result = @"PDUserNotificationTypeWallet";
      break;
    case 2:
      CFStringRef result = @"PDUserNotificationTypeWalletValueAddedServiceTransaction";
      break;
    case 3:
      CFStringRef result = @"PDUserNotificationTypePassUpdate";
      break;
    case 4:
    case 16:
LABEL_5:
      CFStringRef result = @"PKPaymentTransactionNotificationCategory";
      break;
    case 5:
      CFStringRef result = @"PKTransitPaymentTransactionNotificationCategory";
      break;
    case 6:
      CFStringRef result = @"PDUserNotificationTypePassTransitRelevancy";
      break;
    case 7:
      CFStringRef result = @"PDUserNotificationTypePassLowBalanceReminder";
      break;
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 18:
    case 20:
    case 21:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      return result;
    case 12:
      CFStringRef result = @"PDUserNotificationTypePeerPaymentTransactionAcceptanceReminder";
      break;
    case 17:
      CFStringRef result = @"PDUserNotificationTypePassAccountEvent";
      break;
    case 19:
      CFStringRef result = @"PDUserNotificationTypePeerPaymentNeedsVerification";
      break;
    case 22:
      CFStringRef result = @"PDUserNotificationTypeAccountPaymentDue";
      break;
    case 28:
      CFStringRef result = @"PDUserNotificationTypePassExpressModeEnabled";
      break;
    case 32:
      CFStringRef result = @"PDUserNotificationTypePassExpressModeEnabledPromoted";
      break;
    case 42:
    case 43:
      CFStringRef result = @"PDUserNotificationTypeDailyDailyCashWithAmountPrecentage";
      break;
    case 44:
      CFStringRef result = @"PDUserNotificationTypeAccountFinancingPlan";
      break;
    case 51:
      CFStringRef result = @"PDUserNotificationTypeAccountFinancingPlanPayment";
      break;
    case 52:
      CFStringRef result = @"PDUserNotificationTypeAccountFinancingPlanPaidOff";
      break;
    case 53:
      CFStringRef result = @"PDUserNotificationTypeAccountFinancingPlanPaymentReminder";
      break;
    case 54:
      CFStringRef result = @"PDUserNotificationTypeAccountFinancingPlanPastDue";
      break;
    case 55:
      CFStringRef result = @"PDUserNotificationTypeAccountFinancingPlanScheduleUpdate";
      break;
    case 56:
      CFStringRef result = @"PDUserNotificationTypeAccountFinancingPlanDisputeUpdate";
      break;
    default:
      switch(a1)
      {
        case '?':
          CFStringRef result = @"PDUserNotificationTypePeerPaymentPendingRequestReceivedReminder";
          break;
        case 'C':
          CFStringRef result = @"PDUserNotificationTypePassExpressUpgradesAvailable";
          break;
        case 'D':
          CFStringRef result = @"PDUserNotificationTypeNFCPayloadStateUpdate";
          break;
        case 'G':
          goto LABEL_5;
        case 'L':
          CFStringRef result = @"PDUserNotificationTypeAccountPhysicalCardExpiringSoon";
          break;
        case 'M':
          CFStringRef result = @"PDUserNotificationTypeAccountPhysicalCardExpired";
          break;
        case 'O':
          CFStringRef result = @"PDUserNotificationTypeProvisioningContinuityPrompt";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

__CFString *PDUserNotificationCategoryForNotification(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 && ([v1 preventAutomaticDismissal])
  {
    dispatch_queue_t v2 = @"PDUserNotificationTypeAccountPaymentDue";
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 && ([v1 preventAutomaticDismissal])
    {
      dispatch_queue_t v2 = @"PDUserNotificationTypeAccountPaymentPastDue";
    }
    else
    {
      PDUserNotificationCategoryForType((uint64_t)[v1 notificationType]);
      dispatch_queue_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }

  return v2;
}

uint64_t PDIsWalletUserNotificationType(uint64_t a1)
{
  return ((unint64_t)(a1 - 1) < 0x40) & (0xA000000000000003 >> (a1 - 1));
}

void sub_10027D3B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_10027D3E0(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) && *(unsigned char *)(a1 + 48)) {
    CFStringRef v5 = @"?";
  }
  else {
    CFStringRef v5 = @"&";
  }
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v7 = a3;
  id v8 = a2;
  [v6 addObject:v5];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:@"="];
  id v9 = +[NSCharacterSet URLQueryAllowedCharacterSet];
  id v10 = [v7 stringByAddingPercentEncodingWithAllowedCharacters:v9];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
}

void sub_10027EF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_10027EF60(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v36 = a2;
  id v31 = a3;
  id v9 = a4;
  id v32 = a5;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v37 = a1;
  id obj = [*(id *)(a1 + 32) passDiffs];
  id v10 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v34 = *(void *)v41;
    id v35 = v9;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v41 != v34) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v40 + 1) + 8 * i);
        uint64_t v14 = [v13 passUniqueID];
        id v15 = [*(id *)(v37 + 40) passUniqueIdentifier];
        id v16 = v14;
        id v17 = v15;
        uint64_t v18 = v17;
        if (v16 == v17)
        {
          unsigned int v20 = 1;
        }
        else
        {
          if (v16) {
            BOOL v19 = v17 == 0;
          }
          else {
            BOOL v19 = 1;
          }
          if (v19) {
            unsigned int v20 = 0;
          }
          else {
            unsigned int v20 = [v16 isEqualToString:v17];
          }
        }

        id v21 = [v13 anyKey];
        id v22 = v36;
        if (v21 == v22)
        {
          unsigned int v23 = 1;
        }
        else
        {
          unsigned int v23 = 0;
          if (v36 && v21) {
            unsigned int v23 = [v21 isEqualToString:v22];
          }
        }

        if ((v20 & v23) == 1)
        {
          [*(id *)(v37 + 48) removeObject:v13];
          *(void *)(*(void *)(*(void *)(v37 + 72) + 8) + 24) = 1;
        }
        id v9 = v35;
      }
      id v11 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
    }
    while (v11);
  }

  long long v24 = [*(id *)(v37 + 32) primaryPassDiff];
  id v38 = 0;
  id v39 = 0;
  unsigned int v25 = [v24 getHunkForKey:v36 oldValue:0 newValue:&v39 message:&v38];
  id v26 = v39;
  id v27 = v38;
  if (!v25
    || ![v9 isEqual:v26]
    || ([v32 isEqualToString:v27] & 1) == 0)
  {
    id v28 = objc_alloc_init((Class)PKDiff);
    *(void *)(*(void *)(*(void *)(v37 + 72) + 8) + 24) = 1;
    long long v29 = [*(id *)(v37 + 40) passUniqueIdentifier];
    [v28 setPassUniqueID:v29];

    uint64_t v30 = [*(id *)(v37 + 56) passManifestHash];
    [v28 setPassManifestHash:v30];

    [v28 addHunkWithKey:v36 oldValue:v31 newValue:v9 message:v32];
    [*(id *)(v37 + 48) addObject:v28];
    [*(id *)(v37 + 64) addObject:v36];
  }
}

void sub_100288750(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  dispatch_queue_t v2 = (void *)qword_100808DB8;
  qword_100808DB8 = (uint64_t)v1;

  id v3 = (void *)qword_100808DB8;
  [v3 setLocalizedDateFormatFromTemplate:@"MMM d"];
}

void sub_100289580(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  dispatch_queue_t v2 = (void *)qword_100808DC8;
  qword_100808DC8 = (uint64_t)v1;

  [(id)qword_100808DC8 setLocalizedDateFormatFromTemplate:@"j:mm a"];
  id v3 = objc_alloc_init((Class)NSDateFormatter);
  id v4 = (void *)qword_100808DD0;
  qword_100808DD0 = (uint64_t)v3;

  CFStringRef v5 = (void *)qword_100808DD0;
  [v5 setLocalizedDateFormatFromTemplate:@"MMM d"];
}

void sub_1002972A8(uint64_t a1, uint64_t a2)
{
  id v4 = [AccountTransfer alloc];
  CFStringRef v5 = [*(id *)(a1 + 32) database];
  id v8 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  id v6 = *(void **)(a1 + 40);
  id v7 = [(AccountTransfer *)v8 transfer];
  [v6 addObject:v7];
}

void sub_100297BEC(void *a1, uint64_t a2, uint64_t a3)
{
  +[SQLiteEntity applyPropertySetters:a1[4] toObject:a1[5] withProperties:a2 values:a3];
  id v15 = *(id *)(a3 + 8 * a1[6]);
  CFStringRef v5 = PKCurrencyStorageNumberToCurrencyDecimal();
  if (v5)
  {
    id v6 = +[NSDecimalNumber notANumber];
    unsigned __int8 v7 = [v5 isEqualToNumber:v6];

    if ((v7 & 1) == 0)
    {
      if (v15)
      {
        id v8 = (void *)a1[5];
        id v9 = PKCurrencyAmountMake();
        [v8 setCurrencyAmount:v9];
      }
    }
  }
  id v10 = PKCurrencyStorageNumberToCurrencyDecimal();
  if (v10)
  {
    id v11 = +[NSDecimalNumber notANumber];
    unsigned __int8 v12 = [v10 isEqualToNumber:v11];

    if ((v12 & 1) == 0)
    {
      if (v15)
      {
        uint64_t v13 = (void *)a1[5];
        uint64_t v14 = PKCurrencyAmountMake();
        [v13 setHoldAmount:v14];
      }
    }
  }
}

id sub_100297D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1002982CC(id a1, PKAccountTransfer *a2, id a3)
{
}

void sub_1002982D4(id a1, PKAccountTransfer *a2, id a3)
{
}

void sub_1002982DC(id a1, PKAccountTransfer *a2, id a3)
{
}

void sub_1002982E4(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a2;
  -[PKAccountTransfer setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10029833C(id a1, PKAccountTransfer *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountTransfer *)v3 setTransferDate:v4];
}

void sub_10029839C(id a1, PKAccountTransfer *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountTransfer *)v3 setTransferStatusDate:v4];
}

void sub_1002983FC(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a2;
  -[PKAccountTransfer setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100298454(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a2;
  -[PKAccountTransfer setStatusCode:](v4, "setStatusCode:", [a3 integerValue]);
}

void sub_1002984AC(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a2;
  -[PKAccountTransfer setCancellable:](v4, "setCancellable:", [a3 BOOLValue]);
}

void sub_100298504(id a1, PKAccountTransfer *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountTransfer *)v3 setCancellationExpiryDate:v4];
}

void sub_100298564(id a1, PKAccountTransfer *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountTransfer *)v3 setExpectedCompletionDate:v4];
}

void sub_1002985C4(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountTransfer *)a2 externalAccount];
  [v5 setIdentifier:v4];
}

void sub_100298624(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountTransfer *)a2 externalAccount];
  id v5 = [v4 integerValue];

  [v6 setType:v5];
}

void sub_100298694(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountTransfer *)a2 externalAccount];
  [v5 setAccountSuffix:v4];
}

void sub_1002986F4(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountTransfer *)a2 scheduleDetails];
  id v5 = [v4 integerValue];

  [v6 setFrequency:v5];
}

void sub_100298764(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountTransfer *)a2 scheduleDetails];
  LODWORD(a2) = [v4 intValue];

  [v5 setScheduledDay:(int)a2];
}

void sub_1002987D4(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountTransfer *)a2 scheduleDetails];
  id v5 = (void *)_DateForSQLValue();

  [v6 setScheduledDate:v5];
}

void sub_100298848(id a1, PKAccountTransfer *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountTransfer *)a2 scheduleDetails];
  [v5 setTransferTermsIdentifier:v4];
}

void sub_100298930(id a1, PKAccountTransfer *a2, id a3)
{
  id v6 = a3;
  id v4 = [(PKAccountTransfer *)a2 externalAccount];
  id v5 = [v4 fundingDetails];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [v5 setName:v6];
  }
}

void sub_100298F38(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002990C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKPeerPaymentPreferencesNotification);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  unsigned __int8 v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    unsigned __int8 v7 = v8;
  }
}

void sub_100299204(id a1, PKPeerPaymentPreferencesNotification *a2, id a3)
{
}

void sub_10029920C(id a1, PKPeerPaymentPreferencesNotification *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesNotification setNotificationType:](v4, "setNotificationType:", [a3 integerValue]);
}

void sub_100299264(id a1, PKPeerPaymentPreferencesNotification *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesNotification setValue:](v4, "setValue:", [a3 BOOLValue]);
}

void sub_100299B90(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithLongLong:a2];
  [v2 addObject:v3];
}

void sub_100299E40(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100299FA4(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 48);
  id v5 = [*(id *)(a1 + 32) database];
  id v6 = *(void **)(a1 + 48);
  unsigned __int8 v7 = +[NSNumber numberWithLongLong:a2];
  id v8 = [v6 _predicateForPersistentID:v7];
  id v11 = [v4 anyInDatabase:v5 predicate:v8];

  id v9 = *(void **)(a1 + 40);
  id v10 = [v11 fundingSource];
  [v9 safelyAddObject:v10];
}

void sub_10029A258(id a1, PKAccountPaymentFundingSource *a2, id a3)
{
}

void sub_10029A260(id a1, PKAccountPaymentFundingSource *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPaymentFundingSource setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10029A2B8(id a1, PKAccountPaymentFundingSource *a2, id a3)
{
}

id sub_10029AD24(uint64_t a1)
{
  if (a1)
  {
    id v1 = objc_alloc_init((Class)PKPassCredentialShare);
    [v1 setTargetDevice:0];
    [v1 setStatus:2];
    if (PKSharingCarKeySkipSecondaryInvitation())
    {
      dispatch_queue_t v2 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WARNING: Skipping car key secondary invite because of pref.", (uint8_t *)&v8, 2u);
      }

      id v11 = v1;
      id v3 = &v11;
    }
    else
    {
      if (!PKSharingSimulateCrossPlatformShare())
      {
        id v6 = objc_alloc_init((Class)PKPassCredentialShare);
        [v6 setTargetDevice:1];
        [v6 setStatus:2];
        v9[0] = v1;
        v9[1] = v6;
        id v5 = +[NSArray arrayWithObjects:v9 count:2];

        goto LABEL_12;
      }
      id v4 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WARNING: Skipping car key secondary invite to simulate cross platform.", (uint8_t *)&v8, 2u);
      }

      id v10 = v1;
      id v3 = &v10;
    }
    id v5 = +[NSArray arrayWithObjects:v3 count:1];
LABEL_12:

    goto LABEL_13;
  }
  id v5 = 0;
LABEL_13:
  return v5;
}

void sub_10029AEE0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = v6;
  if (!v5 || v6)
  {
    id v31 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      v102 = v7;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failured to create share: %@", buf, 0xCu);
    }

    uint64_t v32 = a1[8];
    PDBasicError();
    id v33 = (PDCreateShareContext *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, void, PDCreateShareContext *))(v32 + 16))(v32, 0, 0, v33);
  }
  else
  {
    __int16 v8 = (void *)a1[4];
    id v9 = (void *)a1[5];
    id v74 = a1;
    v76 = [*(id *)(a1[6] + 8) sharedWebService];
    id v10 = v5;
    id v11 = v8;
    id v12 = v9;
    v87 = objc_alloc_init(PDCreateShareContext);
    uint64_t v13 = [v11 credentialShares];
    id v14 = [v13 mutableCopy];

    unsigned int v88 = v11;
    id v15 = v11;
    id v16 = v12;
    [v15 setCredentialShares:0];
    id v17 = [v12 devicePrimaryPaymentApplication];
    uint64_t v18 = [v17 subcredentials];
    uint64_t v19 = [v18 anyObject];

    id v75 = (void *)v19;
    if (v19)
    {
      unsigned int v20 = [v16 organizationName];
      id v21 = [v16 localizedDescription];
      v78 = v16;
      if (v21)
      {
        id v22 = v21;
        id v23 = v10;
        long long v24 = (char *)[v21 length];
        unsigned int v25 = (char *)[v20 length];
        id v26 = v25 + 1;
        if (v24 > v25 + 1
          && (id v27 = v25, [v22 hasPrefix:v20])
          && (+[NSCharacterSet whitespaceCharacterSet],
              id v28 = objc_claimAutoreleasedReturnValue(),
              unsigned int v29 = objc_msgSend(v28, "characterIsMember:", objc_msgSend(v22, "characterAtIndex:", v27)),
              v28,
              v29))
        {
          uint64_t v30 = [v22 substringFromIndex:v26];

          id v85 = (void *)v30;
        }
        else
        {
          id v85 = v22;
        }
        id v10 = v23;
        id v16 = v78;
      }
      else
      {
        id v85 = 0;
      }
      id v73 = v5;
      id v77 = [v75 supportedRadioTechnologies];
      v84 = [v75 partnerIdentifier];
      v83 = [v75 brandIdentifier];
      unsigned int v82 = [v75 pairedReaderIdentifier];
      -[PDCreateShareContext setExpectedPairedReaderIdentifier:](v87, "setExpectedPairedReaderIdentifier:");
      id v35 = objc_alloc_init((Class)PKSharingMesageProprietaryData);
      id v36 = [v88 displayableSharedEntitlements];
      [v35 setDisplayableSharedEntitlements:v36];

      id v81 = v35;
      objc_msgSend(v35, "setAccessType:", objc_msgSend(v16, "accessType"));
      id v80 = +[PKSharingMessageDisplayInformationManager displayInformationForAccessPass:v16 webService:v76];
      uint64_t v37 = [v88 activationOptions];
      id v38 = [v10 firstObject];
      id v39 = [v38 privateData];
      uint64_t v40 = [v39 vehicleEnteredPasscode];

      if (v40)
      {
        long long v41 = [v37 optionOfType:2];
        [v41 setValue:v40];
      }
      __int16 v71 = (void *)v40;
      id v72 = v10;
      id v79 = v37;
      id v86 = v20;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      id obj = v10;
      long long v42 = v87;
      id v92 = [obj countByEnumeratingWithState:&v93 objects:buf count:16];
      if (v92)
      {
        uint64_t v91 = *(void *)v94;
        do
        {
          for (i = 0; i != v92; i = (char *)i + 1)
          {
            if (*(void *)v94 != v91) {
              objc_enumerationMutation(obj);
            }
            int8x16_t v44 = *(void **)(*((void *)&v93 + 1) + 8 * i);
            id v45 = [v14 count];
            if (!v45) {
              goto LABEL_40;
            }
            id v46 = v45;
            uint64_t v47 = 0;
            while (1)
            {
              id v48 = [v14 objectAtIndexedSubscript:v47];
              id v49 = [v44 additionalData];
              id v50 = [v49 targetDeviceType];

              if (v50 == (id)1)
              {
                unsigned __int8 v51 = [v48 isForWatch] ^ 1;
                goto LABEL_31;
              }
              if (v50 == (id)2)
              {
                unsigned __int8 v51 = [v48 isForWatch];
                goto LABEL_31;
              }
              if (v50 == (id)255) {
                break;
              }
              unsigned __int8 v51 = 0;
LABEL_31:

              if (v46 == (id)1 || (v51 & 1) != 0) {
                goto LABEL_36;
              }

              if (v46 == (id)++v47) {
                goto LABEL_40;
              }
            }

LABEL_36:
            [v14 removeObjectAtIndex:v47];
            if (v48)
            {
              uint64_t v52 = [v44 genericData];
              unsigned int v53 = [v44 additionalData];
              id v54 = [v52 sharingIdentifier];
              id v55 = [v53 sharingSessionUUID];
              uint64_t v56 = [v55 UUIDString];

              [v48 setIdentifier:v54];
              v89 = (void *)v56;
              [v88 setIdentifier:v56];
              [v88 addCredentialShare:v48];
              id v57 = objc_alloc((Class)PKSharingCarKeyInvitation);
              id v58 = [v52 message];
              id v59 = [v53 asDictionary];
              id v60 = [v79 optionsWithoutValues];
              id v61 = [v57 initWithRawInvite:v58 shareIdentifier:v54 radioTechnology:v77 vehicleModel:v85 vehicleIssuer:v86 readerIdentifier:v82 partnerIdentifier:v84 brandIdentifier:v83 carKeySharingDict:v59 proprietaryData:v81 activationOptions:v60 displayInformation:v80];

              if ([v48 targetDevice])
              {
                long long v42 = v87;
                BOOL v62 = -[NSObject targetDevice](v48, "targetDevice") == (id)2 || [obj count] == (id)1;
                id v16 = v78;
              }
              else
              {
                BOOL v62 = 1;
                id v16 = v78;
                long long v42 = v87;
              }
              [(PDCreateShareContext *)v42 addInvite:v61 forCredentialShare:v48 primary:v62];

              goto LABEL_46;
            }
LABEL_40:
            id v48 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v97 = 138412546;
              v98 = v44;
              __int16 v99 = 2112;
              id v100 = v14;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Unable to match invite %@ \n to credential shares %@", v97, 0x16u);
            }
LABEL_46:
          }
          id v92 = [obj countByEnumeratingWithState:&v93 objects:buf count:16];
        }
        while (v92);
      }

      [(PDCreateShareContext *)v42 primaryInvite];
      v63 = uint64_t v34 = v42;
      if (v63) {
        id v64 = v34;
      }
      else {
        id v64 = 0;
      }
      id v33 = v64;

      unsigned __int8 v7 = 0;
      id v5 = v73;
      id v10 = v72;
    }
    else
    {
      id v33 = 0;
      uint64_t v34 = v87;
    }

    __int16 v65 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      [(id)v74[5] uniqueID];
      v67 = id v66 = v10;
      *(_DWORD *)long long buf = 138412546;
      v102 = v67;
      __int16 v103 = 2112;
      v104 = v33;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Created share for %@ with result %@", buf, 0x16u);

      id v10 = v66;
    }

    if (v33)
    {
      (*(void (**)(void, PDCreateShareContext *, void, void))(v74[8] + 16))(v74[8], v33, v74[4], 0);
    }
    else
    {
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Revoking DA invites that failed to be converted into context", buf, 2u);
      }

      id v68 = objc_msgSend(v10, "pk_createSetByApplyingBlock:", &stru_1007445E0);
      [*(id *)(v74[6] + 24) revokeSharedCredentials:v68 onCredential:v74[7] withCompletion:0];
      uint64_t v69 = v74[8];
      uint64_t v70 = PDBasicError();
      (*(void (**)(uint64_t, void, void, void *))(v69 + 16))(v69, 0, 0, v70);
    }
  }
}

id sub_10029B7C4(id a1, DACarKeySharingMessage *a2)
{
  dispatch_queue_t v2 = a2;
  id v3 = objc_alloc_init((Class)PKPassCredentialShare);
  id v4 = [(DACarKeySharingMessage *)v2 genericData];

  id v5 = [v4 sharingIdentifier];
  [v3 setIdentifier:v5];

  return v3;
}

void sub_10029BA04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      id v6 = [*(id *)(a1 + 32) identifier];
      unsigned __int8 v7 = PKSharingLoggableMailboxAddress();
      int v11 = 138412802;
      id v12 = v6;
      __int16 v13 = 2112;
      id v14 = v7;
      __int16 v15 = 2112;
      id v16 = v3;
      __int16 v8 = "SharingManagementService: Failed to link share (ID: %@) to endpoint (ID: %@). %@";
      id v9 = v4;
      uint32_t v10 = 32;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v11, v10);
    }
  }
  else if (v5)
  {
    id v6 = [*(id *)(a1 + 32) identifier];
    unsigned __int8 v7 = PKSharingLoggableMailboxAddress();
    int v11 = 138412546;
    id v12 = v6;
    __int16 v13 = 2112;
    id v14 = v7;
    __int16 v8 = "SharingManagementService: Linked share %@ to endpoint %@";
    id v9 = v4;
    uint32_t v10 = 22;
    goto LABEL_6;
  }
}

void sub_10029C028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 224), 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10029C060(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  long long v10 = *(_OWORD *)(a1 + 48);
  int v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v14[1] = 3221225472;
  v14[2] = sub_10029C148;
  v14[3] = &unk_100744630;
  long long v17 = v10;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  sub_10029C1F0(v8, v11, v9, v14);
}

void sub_10029C148(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10029C1F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v18 = a2;
  id v20 = a3;
  id v17 = a4;
  if (a1)
  {
    id v21 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    id v7 = objc_alloc_init((Class)NSMutableArray);
    id v8 = objc_alloc_init((Class)NSMutableArray);
    v37[0] = 0;
    v37[1] = v37;
    v37[2] = 0x3032000000;
    v37[3] = sub_100020A7C;
    v37[4] = sub_100021030;
    id v38 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id obj = v18;
    id v9 = [obj countByEnumeratingWithState:&v33 objects:v39 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v34;
      do
      {
        id v11 = 0;
        do
        {
          if (*(void *)v34 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v33 + 1) + 8 * (void)v11);
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          v27[2] = sub_10029D540;
          v27[3] = &unk_1007447A0;
          v27[4] = v12;
          id v28 = v8;
          uint64_t v29 = a1;
          id v30 = v20;
          uint64_t v32 = v37;
          id v31 = v7;
          [v21 addOperation:v27];

          id v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [obj countByEnumeratingWithState:&v33 objects:v39 count:16];
      }
      while (v9);
    }

    id v13 = +[NSNull null];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10029D984;
    v22[3] = &unk_1007447C8;
    id v25 = v17;
    id v14 = v8;
    id v23 = v14;
    id v15 = v7;
    id v24 = v15;
    id v26 = v37;
    id v16 = [v21 evaluateWithInput:v13 completion:v22];

    _Block_object_dispose(v37, 8);
  }
}

void sub_10029C508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_10029C534(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(a1 + 40);
    unsigned int v11 = *(unsigned __int8 *)(a1 + 65);
    v14[0] = _NSConcreteStackBlock;
    long long v12 = *(_OWORD *)(a1 + 48);
    id v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    v14[1] = 3221225472;
    v14[2] = sub_10029C644;
    v14[3] = &unk_100744658;
    long long v17 = v12;
    id v16 = v7;
    id v15 = v6;
    sub_10029C6EC(v9, v13, v10, v11, v14);
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_10029C644(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10029C6EC(uint64_t a1, void *a2, void *a3, unsigned int a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = v10;
  uint64_t v32 = a1;
  if (a1)
  {
    long long v34 = (void (**)(void, void, void))v10;
    long long v35 = v9;
    id v12 = objc_alloc_init((Class)NSMutableArray);
    id v13 = objc_alloc_init((Class)NSMutableSet);
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v36 = v8;
    id v14 = v8;
    id v40 = [v14 countByEnumeratingWithState:&v48 objects:v55 count:16];
    if (v40)
    {
      uint64_t v38 = *(void *)v49;
      id v39 = v12;
      id obj = v14;
      do
      {
        for (i = 0; i != v40; i = (char *)i + 1)
        {
          if (*(void *)v49 != v38) {
            objc_enumerationMutation(obj);
          }
          id v16 = *(void **)(*((void *)&v48 + 1) + 8 * i);
          id v17 = objc_alloc_init((Class)NSMutableSet);
          id v18 = [v16 groupIdentifier];
          long long v44 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          uint64_t v19 = [v16 credentialShares];
          id v20 = [v19 countByEnumeratingWithState:&v44 objects:v54 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v45;
            do
            {
              for (j = 0; j != v21; j = (char *)j + 1)
              {
                if (*(void *)v45 != v22) {
                  objc_enumerationMutation(v19);
                }
                id v24 = *(void **)(*((void *)&v44 + 1) + 8 * (void)j);
                [v24 status];
                if (PKShareStatusIsPending() || !v18)
                {
                  [v17 addObject:v24];
                }
                else
                {
                  id v25 = [v24 copy];
                  [v25 setStatus:6];
                  [v17 addObject:v25];
                  [v13 addObject:v18];
                }
              }
              id v21 = [v19 countByEnumeratingWithState:&v44 objects:v54 count:16];
            }
            while (v21);
          }

          id v26 = [v16 copy];
          id v27 = [v17 allObjects];
          [v26 setCredentialShares:v27];

          id v12 = v39;
          [v39 addObject:v26];
        }
        id v14 = obj;
        id v40 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
      }
      while (v40);
    }

    id v28 = [v13 count];
    uint64_t v29 = PKLogFacilityTypeGetObject();
    BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (v28)
    {
      id v11 = v34;
      if (v30)
      {
        *(_DWORD *)long long buf = 138412290;
        id v53 = v13;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Revoking share groups: %@", buf, 0xCu);
      }

      id v31 = [v13 allObjects];
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_10029DA0C;
      v41[3] = &unk_1007447F0;
      long long v43 = v34;
      id v42 = v12;
      id v9 = v35;
      sub_10029DA38(v32, v31, a4, v35, v41);

      id v8 = v36;
    }
    else
    {
      id v11 = v34;
      if (v30)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] No group identifiers found to revoke", buf, 2u);
      }

      ((void (**)(void, id, void))v34)[2](v34, v14, 0);
      id v9 = v35;
      id v8 = v36;
    }
  }
}

void sub_10029CB00(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  BOOL v10 = *(unsigned char *)(a1 + 64) == 0;
  v15[0] = _NSConcreteStackBlock;
  long long v11 = *(_OWORD *)(a1 + 48);
  id v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v15[1] = 3221225472;
  v15[2] = sub_10029CBF8;
  v15[3] = &unk_100744658;
  long long v18 = v11;
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  sub_10029CC9C(v8, v12, v9, v10, v15);
}

void sub_10029CBF8(void *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  uint64_t v7 = *(void *)(a1[7] + 8);
  uint64_t v8 = v6;
  if (!v6) {
    uint64_t v8 = *(void **)(v7 + 40);
  }
  objc_storeStrong((id *)(v7 + 40), v8);
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_10029CC9C(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v24 = a2;
  id v32 = a3;
  id v23 = a5;
  if (a1)
  {
    id v8 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    id v28 = objc_alloc_init((Class)NSMutableArray);
    v52[0] = 0;
    v52[1] = v52;
    v52[2] = 0x3032000000;
    v52[3] = sub_100020A7C;
    void v52[4] = sub_100021030;
    id v53 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id obj = v24;
    id v9 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
    if (v9)
    {
      uint64_t v27 = *(void *)v49;
      do
      {
        uint64_t v10 = 0;
        id v29 = v9;
        do
        {
          if (*(void *)v49 != v27) {
            objc_enumerationMutation(obj);
          }
          id v31 = *(void **)(*((void *)&v48 + 1) + 8 * v10);
          long long v11 = objc_msgSend(v31, "groupIdentifier", v23);
          uint64_t v30 = v10;

          id v12 = objc_alloc_init((Class)NSMutableSet);
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          id v13 = [v31 credentialShares];
          id v14 = [v13 countByEnumeratingWithState:&v44 objects:v54 count:16];
          if (v14)
          {
            uint64_t v15 = *(void *)v45;
            if (v11) {
              int v16 = a4;
            }
            else {
              int v16 = 1;
            }
            do
            {
              for (i = 0; i != v14; i = (char *)i + 1)
              {
                if (*(void *)v45 != v15) {
                  objc_enumerationMutation(v13);
                }
                long long v18 = *(void **)(*((void *)&v44 + 1) + 8 * i);
                [v18 status];
                if (v16 & ~PKShareStatusIsPending())
                {
                  v40[0] = _NSConcreteStackBlock;
                  v40[1] = 3221225472;
                  v40[2] = sub_10029DB40;
                  v40[3] = &unk_1007377A0;
                  v40[4] = v18;
                  v40[5] = a1;
                  id v41 = v32;
                  long long v43 = v52;
                  id v42 = v12;
                  [v8 addOperation:v40];
                }
                else
                {
                  [v12 addObject:v18];
                }
              }
              id v14 = [v13 countByEnumeratingWithState:&v44 objects:v54 count:16];
            }
            while (v14);
          }

          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472;
          v37[2] = sub_10029DE7C;
          v37[3] = &unk_100733E60;
          v37[4] = v31;
          id v19 = v12;
          id v38 = v19;
          id v39 = v28;
          [v8 addOperation:v37];

          uint64_t v10 = v30 + 1;
        }
        while ((id)(v30 + 1) != v29);
        id v9 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
      }
      while (v9);
    }

    id v20 = +[NSNull null];
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10029DF30;
    v33[3] = &unk_100733FA0;
    id v35 = v23;
    id v21 = v28;
    id v34 = v21;
    id v36 = v52;
    id v22 = [v8 evaluateWithInput:v20 completion:v33];

    _Block_object_dispose(v52, 8);
  }
}

void sub_10029D108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_10029D148(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  id v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10029D244;
    v13[3] = &unk_1007446D0;
    id v16 = v7;
    id v11 = v6;
    uint64_t v12 = *(void *)(a1 + 32);
    id v14 = v11;
    uint64_t v15 = v12;
    sub_10029D34C(v10, v9, v13);
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_10029D244(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  if (v3)
  {
    id v4 = (void *)PDOSTransactionCreate("PDCarKeySharingManagementService");
    id v5 = PDDefaultQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10029D338;
    block[3] = &unk_10072E238;
    uint64_t v6 = *(void *)(a1 + 40);
    id v9 = v4;
    uint64_t v10 = v6;
    id v11 = v3;
    id v7 = v4;
    dispatch_async(v5, block);
  }
}

id sub_10029D338(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 16) writeCard:*(void *)(a1 + 48) source:4 error:0];
}

void sub_10029D34C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(void **)(a1 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002A125C;
    v8[3] = &unk_100737B10;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    [v7 performHandlerOnSharedWebServiceQueue:v8];
  }
}

void sub_10029D410(void *a1)
{
  if (objc_msgSend(*(id *)(*(void *)(a1[5] + 8) + 40), "pk_containsObjectPassingTest:", &stru_100744710))
  {
    PDBasicError();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v2 = a1[4];
  id v3 = [*(id *)(*(void *)(a1[5] + 8) + 40) copy];
  id v4 = [*(id *)(*(void *)(a1[6] + 8) + 40) copy];
  (*(void (**)(uint64_t, id, id, id))(v2 + 16))(v2, v3, v4, v5);
}

BOOL sub_10029D4D8(id a1, PKPassShare *a2)
{
  uint64_t v2 = [(PKPassShare *)a2 credentialShares];
  unsigned __int8 v3 = objc_msgSend(v2, "pk_containsObjectPassingTest:", &stru_100744750);

  return v3;
}

BOOL sub_10029D51C(id a1, PKPassCredentialShare *a2)
{
  return PKShareStatusIsTerminal() ^ 1;
}

void sub_10029D540(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init((Class)NSMutableSet);
  id v9 = objc_alloc_init((Class)NSMutableSet);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v10 = [*(id *)(a1 + 32) credentialShares];
  id v11 = [v10 countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v31;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v31 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        [v15 status];
        if (PKShareStatusIsPending()) {
          id v16 = v9;
        }
        else {
          id v16 = v8;
        }
        [v16 addObject:v15];
      }
      id v12 = [v10 countByEnumeratingWithState:&v30 objects:v38 count:16];
    }
    while (v12);
  }

  if ([v9 count])
  {
    id v17 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      long long v18 = [*(id *)(a1 + 32) identifier];
      *(_DWORD *)long long buf = 138412546;
      id v35 = v18;
      __int16 v36 = 2112;
      id v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Share Identifier: '%@' rescinding pending invitations %@", buf, 0x16u);
    }
    uint64_t v19 = *(void *)(a1 + 56);
    id v20 = *(void **)(*(void *)(a1 + 48) + 24);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10029D810;
    v23[3] = &unk_100744778;
    uint64_t v21 = *(void *)(a1 + 72);
    id v22 = *(void **)(a1 + 40);
    v23[4] = *(void *)(a1 + 32);
    uint64_t v29 = v21;
    id v24 = v22;
    id v25 = v8;
    id v26 = *(id *)(a1 + 64);
    id v28 = v7;
    id v27 = v6;
    [v20 rescindInvitations:v9 onCredential:v19 withCompletion:v23];
  }
  else
  {
    [*(id *)(a1 + 40) addObject:*(void *)(a1 + 32)];
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_10029D810(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [*(id *)(a1 + 32) identifier];
      int v10 = 138412546;
      id v11 = v6;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Share Identifier: '%@' failed to revoke pending invitations with error %@", (uint8_t *)&v10, 0x16u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), a2);
    id v7 = *(void **)(a1 + 40);
  }
  else
  {
    if ([*(id *)(a1 + 48) count])
    {
      id v8 = [*(id *)(a1 + 32) copy];
      id v9 = [*(id *)(a1 + 48) allObjects];
      [v8 setCredentialShares:v9];

      [*(id *)(a1 + 40) addObject:v8];
      goto LABEL_8;
    }
    id v7 = *(void **)(a1 + 56);
  }
  [v7 addObject:*(void *)(a1 + 32)];
LABEL_8:
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10029D984(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v4 = [*(id *)(a1 + 32) copy];
  id v3 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id, id, void))(v2 + 16))(v2, v4, v3, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

uint64_t sub_10029DA0C(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void))(v3 + 16))(v3, *(void *)(a1 + 32));
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void))(v3 + 16))(v3, 0, 0);
  }
}

void sub_10029DA38(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    __int16 v12 = *(void **)(a1 + 24);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1002A0E88;
    v13[3] = &unk_100744A48;
    id v14 = v10;
    id v17 = v11;
    id v15 = v9;
    uint64_t v16 = a1;
    [v12 revokeSharesWithGroupIdentifiers:v15 shouldCascade:a3 credential:v14 completion:v13];
  }
}

void sub_10029DB40(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] revoking active credential share %@", buf, 0xCu);
  }

  id v11 = (void *)a1[4];
  uint64_t v10 = a1[5];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10029DCB8;
  v17[3] = &unk_100744818;
  uint64_t v12 = a1[8];
  id v14 = (void *)a1[6];
  id v13 = (void *)a1[7];
  void v17[4] = v11;
  uint64_t v21 = v12;
  id v19 = v6;
  id v20 = v7;
  id v18 = v13;
  id v15 = v6;
  id v16 = v7;
  sub_10029DD60(v10, v11, v14, v17);
}

void sub_10029DCB8(uint64_t a1, int a2, void *a3)
{
  id v7 = a3;
  id v6 = [*(id *)(a1 + 32) copy];
  if (a2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
    [v6 setStatus:6];
  }
  [*(id *)(a1 + 40) addObject:v6];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10029DD60(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(void **)(a1 + 24);
    id v11 = +[NSSet setWithObject:v7];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1002A0A9C;
    v12[3] = &unk_100744A48;
    id v13 = v8;
    id v16 = v9;
    id v14 = v7;
    uint64_t v15 = a1;
    [v10 revokeSharedCredentials:v11 onCredential:v13 withCompletion:v12];
  }
}

void sub_10029DE7C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v10 = [v6 copy];
  id v9 = [*(id *)(a1 + 40) allObjects];
  [v10 setCredentialShares:v9];

  [*(id *)(a1 + 48) addObject:v10];
  v7[2](v7, v8, 0);
}

uint64_t sub_10029DF30(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
}

uint64_t sub_10029E24C(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 channelTransportIdentifier];
  uint64_t v3 = PKEqualObjects();

  return v3;
}

uint64_t sub_10029E290(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2 == 0);
}

void sub_10029EB68(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x320], 8);
  _Block_object_dispose(&STACK[0x350], 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10029EC04(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Attempting to revoke existing shares", buf, 2u);
  }

  id v9 = *(void **)(a1 + 40);
  id v10 = *(void **)(*(void *)(a1 + 32) + 40);
  id v11 = [v9 readerIdentifier];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10029ED28;
  v14[3] = &unk_10072E598;
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  [v10 revokePendingCredentialsForReaderIdentifier:v11 completion:v14];
}

uint64_t sub_10029ED28(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10029ED40(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Parsing invitation", buf, 2u);
  }

  uint64_t v9 = a1[5];
  id v10 = *(void **)(a1[4] + 24);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10029EE68;
  v15[3] = &unk_1007307C0;
  uint64_t v12 = a1[6];
  uint64_t v11 = a1[7];
  id v17 = v7;
  uint64_t v18 = v11;
  id v16 = v6;
  id v13 = v6;
  id v14 = v7;
  [v10 startShareAcceptanceFlowWithInvitation:v9 fromMailboxIdentifier:v12 completion:v15];
}

void sub_10029EE68(void *a1, void *a2)
{
  id v4 = a2;
  if (PKSharingForceErrorAfterKMLStartSharingAcceptance())
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SharingManagementService: PKSharingForceErrorAfterKMLStartSharingAcceptance enabled", v9, 2u);
    }

    uint64_t v6 = PDBasicError();
    uint64_t v7 = *(void *)(a1[6] + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_10029EF58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Fetching routing metadata from KML", buf, 2u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = *(void **)(*(void *)(a1 + 32) + 24);
  uint64_t v11 = *(void *)(a1 + 48);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10029F08C;
  v14[3] = &unk_100744868;
  long long v17 = *(_OWORD *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 72);
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  [v10 routingInformationForInvitationWithIdentifier:v9 fromMailboxIdentifier:v11 completionHandler:v14];
}

void sub_10029F08C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v10 = v4;
  if (v4)
  {
    uint64_t v5 = *(void *)(a1[6] + 8);
    id v6 = v4;
    id v7 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v6;
  }
  else
  {
    uint64_t v8 = PKCredentialRoutingInformationFromPairedEntityIdentifer();
    uint64_t v9 = *(void *)(a1[7] + 8);
    id v7 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_10029F144(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Fetching PPID request from KML", buf, 2u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = *(void **)(*(void *)(a1 + 32) + 24);
  uint64_t v11 = *(void *)(a1 + 48);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10029F270;
  v14[3] = &unk_1007448B8;
  long long v17 = *(_OWORD *)(a1 + 56);
  id v15 = v6;
  id v16 = v7;
  id v12 = v6;
  id v13 = v7;
  [v10 getProductPlanIdentifierRequestForInvitationWithIdentifier:v9 fromMailboxIdentifier:v11 completion:v14];
}

void sub_10029F270(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v9 = v5;

  if (PKSharingForceErrorAfterKMLReturnsPPIDRequest())
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SharingManagementService: PKSharingForceErrorAfterKMLReturnsPPIDRequest enabled", v14, 2u);
    }

    uint64_t v11 = PDBasicError();
    uint64_t v12 = *(void *)(a1[7] + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), a3);
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[7] + 8) + 40) != 0);
}

void sub_10029F390(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v11 = PKLogFacilityTypeGetObject();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Fetching PPID from broker", buf, 2u);
    }

    id v13 = [objc_alloc((Class)PKPaymentVehicleManufacturerRequest) initWithPartnerIdentifier:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) brandIdentifier:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) encryptedVehicleDataRequest:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    id v14 = *(void **)(*(void *)(a1 + 32) + 8);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10029F564;
    v16[3] = &unk_100744930;
    id v17 = v13;
    long long v20 = *(_OWORD *)(a1 + 64);
    id v19 = v9;
    id v18 = v8;
    id v15 = v13;
    [v14 performHandlerOnSharedWebServiceQueue:v16];
  }
  else
  {
    if (v12)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No PPID request; skipping PPID fetch.",
        buf,
        2u);
    }

    (*((void (**)(id, id, void))v9 + 2))(v9, v8, 0);
  }
}

void sub_10029F564(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10029F62C;
  v7[3] = &unk_100744908;
  uint64_t v10 = *(void *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v6;
  long long v9 = v6;
  id v8 = *(id *)(a1 + 40);
  [a2 vehicleManufacturerWithRequest:v4 withCompletion:v7];
}

void sub_10029F62C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (PKSharingForceErrorAfterBrokerReturnsVehicleManufacturerResponse())
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: PKSharingForceErrorAfterBrokerReturnsVehicleManufacturerResponse enabled", (uint8_t *)&v23, 2u);
    }

    uint64_t v8 = PDBasicError();
    uint64_t v9 = *(void *)(a1[6] + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
  }
  uint64_t v11 = *(void *)(*(void *)(a1[6] + 8) + 40);
  if (!v5 || v11)
  {
    uint64_t v21 = PKLogFacilityTypeGetObject();
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v22)
      {
        int v23 = 138412290;
        uint64_t v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to fetch PPID from broker: %@", (uint8_t *)&v23, 0xCu);
      }
    }
    else if (v22)
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Broker returned empty PPID", (uint8_t *)&v23, 2u);
    }

    long long v20 = *(void (**)(void))(a1[5] + 16);
  }
  else
  {
    id v12 = objc_alloc((Class)PKSubcredentialEncryptedContainer);
    id v13 = [v5 encryptionScheme];
    id v14 = [v5 ephemeralPublicKey];
    id v15 = [v5 publicKeyHash];
    id v16 = [v5 encryptedData];
    id v17 = [v12 initWithEncryptionScheme:v13 ephemeralPublicKey:v14 publicKeyHash:v15 data:v16];
    uint64_t v18 = *(void *)(a1[7] + 8);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    long long v20 = *(void (**)(void))(a1[5] + 16);
  }
  v20();
}

void sub_10029F8B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Accepting share", buf, 2u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 24);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10029FA04;
  v16[3] = &unk_100744980;
  long long v19 = *(_OWORD *)(a1 + 72);
  uint64_t v20 = *(void *)(a1 + 88);
  id v17 = v6;
  id v18 = v7;
  id v14 = v6;
  id v15 = v7;
  [v10 acceptCrossPlatformInvitationWithIdentifier:v9 transportChannelIdentifier:v11 activationCode:v12 encryptedProductPlanIdentifierContainer:v13 completion:v16];
}

void sub_10029FA04(void *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  uint64_t v11 = *(void *)(a1[7] + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v9;
  id v13 = v9;

  if (PKSharingForceErrorAfterKMLAcceptShare())
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SharingManagementService: PKSharingForceErrorAfterKMLAcceptShare enabled", v19, 2u);
    }

    uint64_t v15 = PDBasicError();
    uint64_t v16 = *(void *)(a1[8] + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), a4);
  }
  BOOL v18 = *(void *)(*(void *)(a1[8] + 8) + 40)
     || !*(void *)(*(void *)(a1[6] + 8) + 40)
     || *(void *)(*(void *)(a1[7] + 8) + 40) == 0;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v18);
}

void sub_10029FB7C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [*(id *)(a1 + 32) proprietaryData];

  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10029FCD4;
    v12[3] = &unk_1007449D0;
    uint64_t v15 = *(void *)(a1 + 56);
    id v14 = v7;
    id v13 = v6;
    sub_10029FDAC(v9, v10, v12);
  }
  else
  {
    uint64_t v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Skipping binding attestation", buf, 2u);
    }

    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_10029FCD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: adding binding attestation to message", v11, 2u);
    }

    uint64_t v8 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) messageWithBindingAttestation:v5];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10029FDAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
    v31[0] = 0;
    v31[1] = v31;
    v31[2] = 0x3032000000;
    v31[3] = sub_100020A7C;
    v31[4] = sub_100021030;
    id v32 = 0;
    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0x3032000000;
    v29[3] = sub_100020A7C;
    v29[4] = sub_100021030;
    id v30 = 0;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1002A1560;
    v25[3] = &unk_10072E638;
    void v25[4] = a1;
    id v8 = v5;
    id v26 = v8;
    id v27 = v31;
    id v28 = v29;
    [v7 addOperation:v25];
    v23[0] = 0;
    v23[1] = v23;
    v23[2] = 0x3032000000;
    v23[3] = sub_100020A7C;
    v23[4] = sub_100021030;
    id v24 = 0;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1002A16EC;
    v22[3] = &unk_100736BF8;
    void v22[4] = a1;
    v22[5] = v23;
    v22[6] = v31;
    [v7 addOperation:v22];
    v20[0] = 0;
    v20[1] = v20;
    v20[2] = 0x3032000000;
    v20[3] = sub_100020A7C;
    v20[4] = sub_100021030;
    id v21 = 0;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1002A19C0;
    v19[3] = &unk_100744B10;
    void v19[4] = a1;
    v19[5] = v29;
    v19[6] = v23;
    v19[7] = v20;
    v19[8] = v31;
    [v7 addOperation:v19];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1002A1BB8;
    v15[3] = &unk_100738C58;
    void v15[4] = a1;
    id v17 = v20;
    id v16 = v8;
    BOOL v18 = v31;
    [v7 addOperation:v15];
    uint64_t v9 = +[NSNull null];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1002A1D20;
    v11[3] = &unk_1007377C8;
    id v13 = v31;
    id v14 = v20;
    id v12 = v6;
    id v10 = [v7 evaluateWithInput:v9 completion:v11];

    _Block_object_dispose(v20, 8);
    _Block_object_dispose(v23, 8);

    _Block_object_dispose(v29, 8);
    _Block_object_dispose(v31, 8);
  }
}

void sub_1002A0154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 176), 8);
  _Block_object_dispose((const void *)(v47 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1002A01A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  id v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v11 = *(const __CFString **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    id v12 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    int v26 = 138412546;
    CFStringRef v27 = v11;
    __int16 v28 = 2112;
    id v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SharingManagementService: accepted car key invite with credential: %@. \n message: %@", (uint8_t *)&v26, 0x16u);
  }

  id v13 = objc_alloc_init((Class)PKPassCredentialShare);
  [v13 setTargetDevice:3];
  id v14 = [*(id *)(a1 + 32) shareIdentifier];
  [v13 setIdentifier:v14];

  [v13 setChannelTransportIdentifier:*(void *)(a1 + 40)];
  id v15 = objc_alloc_init((Class)PKPassShare);
  [v15 addCredentialShare:v13];
  id v16 = [*(id *)(a1 + 32) shareSessionIdentifier];
  if (v16)
  {
    [v15 setIdentifier:v16];
  }
  else
  {
    id v17 = [*(id *)(a1 + 32) shareIdentifier];
    [v15 setIdentifier:v17];
  }
  BOOL v18 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) identifier];
  [v15 setSubcredentialIdentifier:v18];

  long long v19 = +[NSDate now];
  [v15 setCreationDate:v19];

  uint64_t v20 = [*(id *)(a1 + 32) activationOptions];
  BOOL v21 = ([v20 containsPinCode] & 1) != 0 || *(void *)(a1 + 48) != 0;

  BOOL v22 = objc_alloc_init(PDStatefulShareAcceptanceResponse);
  uint64_t v23 = *(void *)(*(void *)(a1 + 72) + 8);
  id v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = v22;

  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setSubcredential:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setLocalAcceptedShare:v15];
  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setShouldWaitForResponse:v21];
  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setKeySignRequestMessage:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v25 = @"No";
    if (v21) {
      CFStringRef v25 = @"Yes";
    }
    int v26 = 138412546;
    CFStringRef v27 = v25;
    __int16 v28 = 2112;
    id v29 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SharingManagementService: created local share to track stateful provisioning. shouldWaitForResponse: %@ \n %@", (uint8_t *)&v26, 0x16u);
  }

  v9[2](v9, v8, 0);
}

void sub_1002A04D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v11 = a3;
  id v6 = a4;
  id v7 = v6;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    uint64_t v8 = *(void *)(a1 + 32);
LABEL_3:
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
    goto LABEL_8;
  }
  if ([v6 isCanceled])
  {
    uint64_t v9 = a1 + 32;
    uint64_t v8 = *(void *)(a1 + 32);
    if (*(void *)(*(void *)(*(void *)(v9 + 8) + 8) + 40)) {
      goto LABEL_3;
    }
    id v10 = PDBasicError();
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v10);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
LABEL_8:
}

void sub_1002A06D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Retried activation code with result: %@", (uint8_t *)&v5, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002A08C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SharingManagementService: Failed to create cancelation message with error: %@", buf, 0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v7)
    {
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v7);
    }
    else
    {
      id v12 = PDBasicError();
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
    }
  }
  else
  {
    uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 24);
    uint64_t v9 = [*(id *)(a1 + 40) shareIdentifier];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1002A0A84;
    v13[3] = &unk_100731C90;
    id v15 = *(id *)(a1 + 48);
    id v14 = v5;
    [v8 declineSharingInvitationWithIdentifier:v9 completion:v13];
  }
}

uint64_t sub_1002A0A84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1002A0A9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v8)
    {
      id v13 = [*(id *)(a1 + 32) identifier];
      *(_DWORD *)long long buf = 138412546;
      long long v19 = v13;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Failed to create revocation attestation for credential share on credential %@: %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    if (v8)
    {
      uint64_t v9 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      long long v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Successfully created revocation attestation for credential: %@", buf, 0xCu);
    }

    id v10 = [objc_alloc((Class)PKPaymentRevokeSharedCredentialRequest) initWithCredential:*(void *)(a1 + 32) revocationAttestation:v5];
    uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 8);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1002A0CA8;
    v14[3] = &unk_100737B10;
    id v15 = v10;
    id v17 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 40);
    id v12 = v10;
    [v11 performHandlerOnSharedWebServiceQueue:v14];
  }
}

void sub_1002A0CA8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002A0D5C;
  v5[3] = &unk_100737070;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [a2 revokeSharedCredentialWithRequest:v4 withCompletion:v5];
}

void sub_1002A0D5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) identifier];
      int v11 = 138412546;
      id v12 = v10;
      __int16 v13 = 2112;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Failed to revoke shared credential (%@): %@", (uint8_t *)&v11, 0x16u);
    }
    BOOL v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    BOOL v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v8();
}

void sub_1002A0E88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v8)
    {
      __int16 v13 = [*(id *)(a1 + 32) identifier];
      *(_DWORD *)long long buf = 138412546;
      long long v19 = v13;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Failed to create revocation attestation for credential share on credential %@. Error: %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    if (v8)
    {
      uint64_t v9 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      long long v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Successfully created revocation attestation for group identifiers: %@", buf, 0xCu);
    }

    id v10 = [objc_alloc((Class)PKPaymentRevokeSharedCredentialRequest) initWithCredential:*(void *)(a1 + 32) revocationAttestation:v5];
    int v11 = *(void **)(*(void *)(a1 + 48) + 8);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_1002A1094;
    v14[3] = &unk_100737B10;
    id v15 = v10;
    id v17 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 40);
    id v12 = v10;
    [v11 performHandlerOnSharedWebServiceQueue:v14];
  }
}

void sub_1002A1094(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002A1148;
  v5[3] = &unk_100737070;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [a2 revokeSharedCredentialWithRequest:v4 withCompletion:v5];
}

void sub_1002A1148(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SharingManagementService: [Revoke] Failed to revoke credentials for group identifiers (%@). Error: %@", (uint8_t *)&v11, 0x16u);
    }

    BOOL v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    BOOL v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v8();
}

void sub_1002A125C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002A1300;
  v6[3] = &unk_100744A98;
  id v5 = *(id *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 passAtURL:v4 completion:v6];
}

void sub_1002A1300(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2 == 1 && v5)
  {
    id v7 = objc_alloc_init((Class)PKDownloadRemoteAssetConfiguration);
    BOOL v8 = +[PKSecureElement secureElementIdentifiers];
    [v7 setSeids:v8];

    [v7 setCloudStoreCoordinatorDelegate:*(void *)(*(void *)(a1 + 32) + 32)];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1002A1484;
    v11[3] = &unk_100744A70;
    id v13 = *(id *)(a1 + 40);
    id v12 = v6;
    [v12 downloadRemoteAssetsWithConfiguration:v7 completion:v11];
  }
  else
  {
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Error: failed to download pass after share revocation", buf, 2u);
    }

    uint64_t v10 = *(void *)(a1 + 40);
    PDBasicError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v7);
  }
}

void sub_1002A1484(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    if (v5)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 138412290;
        uint64_t v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Error: failed to download pass assets after share revocation with error: %@", (uint8_t *)&v8, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1002A1560(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002A163C;
  v12[3] = &unk_100744AC0;
  long long v15 = *(_OWORD *)(a1 + 48);
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  [v9 accountAttestionRequestForCredential:v8 withCompletion:v12];
}

void sub_1002A163C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a3);
  id v9 = a3;
  uint64_t v6 = *(void *)(a1[7] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_1002A16EC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002A17C0;
  v12[3] = &unk_100744AE8;
  long long v16 = *(_OWORD *)(a1 + 40);
  uint64_t v14 = v8;
  id v15 = v7;
  id v13 = v6;
  id v10 = v6;
  id v11 = v7;
  [v9 accountAttestationAnonymizationSaltWithCompletion:v12];
}

void sub_1002A17C0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a3);
    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      uint64_t v9 = +[PKAccountAttestationRequest createAnonymizationSalt];
      uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;

      id v12 = *(void **)(*(void *)(a1 + 40) + 8);
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1002A1944;
      v14[3] = &unk_1007307C0;
      uint64_t v17 = *(void *)(a1 + 64);
      id v16 = *(id *)(a1 + 48);
      id v15 = *(id *)(a1 + 32);
      [v12 setAccountAttestationAnonymizationSalt:v13 withCompletion:v14];

      goto LABEL_6;
    }
    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v8();
LABEL_6:
}

void sub_1002A1944(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_1002A19C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setAnonymizationSalt:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  id v8 = [objc_alloc((Class)PKPaymentCredentialAccountAttestationRequest) initWithAttestationRequest:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 8) sharedWebService];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002A1AE8;
  v12[3] = &unk_100731998;
  long long v15 = *(_OWORD *)(a1 + 56);
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  [v9 credentialAccountAttesationWithRequest:v8 completion:v12];
}

void sub_1002A1AE8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[6] + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v13 = v5;

  uint64_t v9 = *(void *)(a1[7] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  if (*(void *)(*(void *)(a1[7] + 8) + 40)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = *(void *)(*(void *)(a1[6] + 8) + 40) == 0;
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], v12);
}

void sub_1002A1BB8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void **)(a1[4] + 24);
  uint64_t v10 = *(void *)(*(void *)(a1[6] + 8) + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002A1CA4;
  v14[3] = &unk_1007307C0;
  uint64_t v11 = a1[7];
  id v16 = v7;
  uint64_t v17 = v11;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  [v9 setAccountAttestation:v10 forCredential:v8 withCompletion:v14];
}

void sub_1002A1CA4(void *a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void, void, BOOL))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40) != 0);
}

void sub_1002A1D20(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(a1[5] + 8) + 40);
  if (v8 || !*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "SharingManagementService: failed to generate binding attestation with error %@", (uint8_t *)&v12, 0xCu);
    }

    uint64_t v10 = a1[4];
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      (*(void (**)(void, void))(v10 + 16))(a1[4], 0);
    }
    else
    {
      uint64_t v11 = PDBasicError();
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
    }
  }
  else
  {
    (*(void (**)(void))(a1[4] + 16))();
  }
}

id PDWebServiceError(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a3;
  id v12 = a2;
  id v13 = [objc_alloc((Class)NSString) initWithFormat:v11 arguments:&a9];

  id v14 = [v12 passTypeIdentifier];
  id v15 = [v12 serviceURL];

  id v16 = +[NSString stringWithFormat:@"Web service error for %@ (%@): %@", v14, v15, v13];

  NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
  id v21 = v16;
  uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  BOOL v18 = +[NSError errorWithDomain:@"PDWebServiceErrorDomain" code:a1 userInfo:v17];

  return v18;
}

NSString *__cdecl sub_1002A2C10(id a1, PKCreditAccountUserActivity *a2)
{
  return (NSString *)[(PKCreditAccountUserActivity *)a2 accountUserAltDSID];
}

void sub_1002A2FEC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002A3238(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKCreditAccountUserActivity);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1002A35B0(id a1, PKCreditAccountUserActivity *a2, id a3)
{
}

void sub_1002A35B8(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountUserActivity *)v3 setPurchases:v4];
}

void sub_1002A361C(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountUserActivity *)v3 setPendingPurchases:v4];
}

void sub_1002A3680(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountUserActivity *)v3 setRewardsBalance:v4];
}

void sub_1002A36E4(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountUserActivity *)v3 setRewardsEarned:v4];
}

void sub_1002A3748(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountUserActivity *)v3 setRewardsRedeemed:v4];
}

void sub_1002A37AC(id a1, PKCreditAccountUserActivity *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditAccountUserActivity *)v3 setAdjustedPurchases:v4];
}

void sub_1002A3A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A3A18(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithMetadata:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (v2
    && ([*(id *)(a1 + 32) type] != (id)1
     || ([*(id *)(a1 + 32) metadataTypeVehicleFunction],
         id v3 = objc_claimAutoreleasedReturnValue(),
         +[TileStateMetadataRKE insertMetadata:v3 forBaseMetadata:v2 inDatabase:*(void *)(a1 + 40)], id v4 = objc_claimAutoreleasedReturnValue(), v3, v4, v4)))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v2);
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t sub_1002A3CE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002A3DD8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = 2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

void sub_1002A3EDC(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v2 = *(void **)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002A3FC4;
    v7[3] = &unk_100744C80;
    uint64_t v4 = *(void *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    id v5 = v3;
    [v2 _longTermPrivacyKeyForRequirement:v5 context:v4 reuseExisting:1 completion:v7];
  }
  else
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v6();
  }
}

uint64_t sub_1002A3FC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002A4114(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5 && !v6)
  {
    id v8 = objc_alloc_init((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    [v8 setPublicKey:v5];
    id v9 = objc_alloc((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    id v13 = v8;
    uint64_t v10 = +[NSArray arrayWithObjects:&v13 count:1];
    id v11 = [v9 initWithKeyMaterialContents:v10];

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_7:

    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v6)
  {
    PDBasicError();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0, v8);
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0, v6);
LABEL_8:
}

uint64_t sub_1002A462C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

uint64_t sub_1002A473C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 identifier];
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
    if (v5 && v6) {
      uint64_t v8 = [v5 isEqualToString:v6] ^ 1;
    }
  }

  return v8;
}

id *sub_1002A4C28(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_1002A5138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1002A5158(uint64_t a1, uint64_t a2, id *a3)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *a3);
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v5 = +[NSNull null];

  if (v4 == v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;
  }
}

void sub_1002A5634(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002A59D8(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKInstallmentPlanSummary *)v3 setStartDate:v4];
}

void sub_1002A5A38(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKInstallmentPlanSummary *)v3 setOriginalEndDate:v4];
}

void sub_1002A5A98(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKInstallmentPlanSummary *)v3 setCurrentEndDate:v4];
}

void sub_1002A5AF8(id a1, PKInstallmentPlanSummary *a2, id a3)
{
}

void sub_1002A5B00(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKInstallmentPlanSummary *)v3 setMinimumDue:v4];
}

void sub_1002A5B64(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKInstallmentPlanSummary *)v3 setMinimumDueDate:v4];
}

void sub_1002A5BC4(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKInstallmentPlanSummary *)v3 setInterestCharged:v4];
}

void sub_1002A5C28(id a1, PKInstallmentPlanSummary *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKInstallmentPlanSummary *)v3 setPaymentsToDateAmount:v4];
}

void sub_1002A6018(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v5 isActive]) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_1002A6084(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v5 isActive]) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_1002A61B4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) notification];
  uint64_t v3 = [*(id *)(a1 + 32) actionIdentifier];
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 138412290;
    BOOL v22 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDUserNotificationCenter didReceiveNotificationResponse for notification %@", (uint8_t *)&v21, 0xCu);
  }

  uint64_t v5 = PKUserNotificationActionFromUNNotificationActionIdentifier();
  if (+[AMSUserNotification shouldHandleNotificationResponse:*(void *)(a1 + 32)])
  {
    id v6 = +[AMSMediaTask bagSubProfile];
    id v7 = +[AMSMediaTask bagSubProfileVersion];
    uint64_t v8 = +[AMSBag bagForProfile:v6 profileVersion:v7];

    id v9 = +[AMSUserNotification handleNotificationResponse:*(void *)(a1 + 32) bag:v8];
  }
  else
  {
    if ([v3 isEqualToString:UNNotificationDismissActionIdentifier])
    {
      uint64_t v10 = [v2 request];
      id v11 = [v10 identifier];

      uint64_t v12 = [*(id *)(*(void *)(a1 + 40) + 40) objectForKeyedSubscript:v11];
      if ([v12 notificationType] == (id)27)
      {
        id v13 = v12;
        id v14 = +[PKDiscoveryService sharedInstance];
        id v15 = [v13 discoveryNotification];

        id v16 = [v15 discoveryCardIdentifier];
        [v14 discoveryItemWithIdentifier:v16 launchedWithReferralSource:0];
      }
      if ([v12 isActive])
      {
        [v12 setActive:0];
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72));
        [WeakRetained userNotificationCenter:*(void *)(a1 + 40) insertedOrUpdatedUserNotification:v12];
      }
    }
    BOOL v18 = *(void **)(a1 + 40);
    uint64_t v8 = [v2 request];
    long long v19 = [v8 identifier];
    objc_msgSend(v18, "_queue_userNotificationActionPerformed:applicationMessageContentIdentifier:", v5, v19);
  }
  uint64_t v20 = *(void *)(a1 + 48);
  if (v20) {
    (*(void (**)(void))(v20 + 16))();
  }
}

void sub_1002A6770(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 80);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002A680C;
  v7[3] = &unk_10072E198;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002A680C(uint64_t a1)
{
  uint64_t v2 = (char *)[*(id *)(a1 + 32) authorizationStatus];
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if ((unint64_t)v2 > 4) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = (uint64_t)*(&off_100745108 + (void)v2);
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDUserNotificationCenter: Notification Authorization status: %@", buf, 0xCu);
  }

  if ((unint64_t)(v2 - 1) >= 4)
  {
    if (!v2)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 8);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1002A6968;
      v7[3] = &unk_1007300F8;
      void v7[4] = v5;
      [v6 requestAuthorizationWithOptions:71 completionHandler:v7];
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 64) = 1;
    [*(id *)(a1 + 40) _processConnectionOperations];
  }
}

void sub_1002A6968(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(NSObject **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A6A0C;
  block[3] = &unk_100730438;
  char v12 = a2;
  id v10 = v5;
  uint64_t v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

id sub_1002A6A0C(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v4 = @"YES";
    }
    else {
      CFStringRef v4 = @"NO";
    }
    int v6 = 138412546;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Provisional Notification Authorization status granted: %@ error: %@", (uint8_t *)&v6, 0x16u);
  }

  *(unsigned char *)(*(void *)(a1 + 40) + 64) = 1;
  return [*(id *)(a1 + 40) _processConnectionOperations];
}

void sub_1002A6AF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 80);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002A6B90;
  v7[3] = &unk_10072E198;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002A6B90(uint64_t a1)
{
  uint64_t v2 = (char *)[*(id *)(a1 + 32) authorizationStatus];
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if ((unint64_t)v2 > 4) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = (uint64_t)*(&off_100745108 + (void)v2);
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDUserNotificationCenter: Service Notification Authorization status: %@", buf, 0xCu);
  }

  if ((unint64_t)(v2 - 1) >= 4)
  {
    if (!v2)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = *(void **)(v5 + 16);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1002A6CEC;
      v7[3] = &unk_1007300F8;
      void v7[4] = v5;
      [v6 requestAuthorizationWithOptions:6 completionHandler:v7];
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 40) + 65) = 1;
    [*(id *)(a1 + 40) _processServiceConnectionOperations];
  }
}

void sub_1002A6CEC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  CFStringRef v7 = *(NSObject **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A6D90;
  block[3] = &unk_100730438;
  char v12 = a2;
  id v10 = v5;
  uint64_t v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

id sub_1002A6D90(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v4 = @"YES";
    }
    else {
      CFStringRef v4 = @"NO";
    }
    int v6 = 138412546;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Service Notification Authorization status granted: %@ error: %@", (uint8_t *)&v6, 0x16u);
  }

  *(unsigned char *)(*(void *)(a1 + 40) + 65) = 1;
  return [*(id *)(a1 + 40) _processServiceConnectionOperations];
}

void sub_1002A701C(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) notificationIdentifier];
  uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:");

  if (v2) {
    [*(id *)(*(void *)(a1 + 40) + 40) setObject:*(void *)(a1 + 32) forKeyedSubscript:v3];
  }
}

void sub_1002A7188(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  int v6 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002A724C;
  block[3] = &unk_10073A378;
  char v11 = a2;
  id v9 = v5;
  id v10 = *(id *)(a1 + 40);
  id v7 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_1002A724C(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v4 = @"YES";
    }
    else {
      CFStringRef v4 = @"NO";
    }
    int v6 = 138412546;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDUserNotificationCenter: requestAuthorizationWithOptions success: %@ error: %@", (uint8_t *)&v6, 0x16u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
  }
  return result;
}

id sub_1002A73E4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_userNotificationActionPerformed:applicationMessageContentIdentifier:", *(void *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_1002A75F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 authorizationStatus];
    if ((unint64_t)v5 > 4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = (uint64_t)*(&off_100745108 + (void)v5);
    }
    int v11 = 138412290;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDUserNotificationCenter: Notification Authorization status: %@", (uint8_t *)&v11, 0xCu);
  }

  switch((unint64_t)[v3 authorizationStatus])
  {
    case 0uLL:
    case 3uLL:
    case 4uLL:
      if (![*(id *)(*(void *)(a1 + 32) + 96) countPassesOfType:-1])
      {
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_14;
        }
        LOWORD(v11) = 0;
        CFStringRef v7 = "Notification Authorization not required as user has no passes";
        goto LABEL_13;
      }
      [*(id *)(a1 + 32) requestNotificationAuthorizationWithCompletion:*(void *)(a1 + 40)];
      break;
    case 1uLL:
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        CFStringRef v7 = "Notification Authorization already denied";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 2u);
      }
LABEL_14:

      uint64_t v8 = *(void *)(a1 + 40);
      if (v8)
      {
        uint64_t v9 = *(void (**)(void))(v8 + 16);
        goto LABEL_20;
      }
      break;
    case 2uLL:
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v11) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notification Authorization already authorized", (uint8_t *)&v11, 2u);
      }

      uint64_t v10 = *(void *)(a1 + 40);
      if (v10)
      {
        uint64_t v9 = *(void (**)(void))(v10 + 16);
LABEL_20:
        v9();
      }
      break;
    default:
      break;
  }
}

BOOL sub_1002A7934(id a1, PDUserNotification *a2)
{
  return ![(PDUserNotification *)a2 isServiceNotification];
}

BOOL sub_1002A7A78(id a1, PDUserNotification *a2)
{
  return [(PDUserNotification *)a2 isServiceNotification];
}

void sub_1002A7B24(uint64_t a1)
{
  uint64_t v2 = +[NSPredicate predicateWithFormat:@"isActive == YES AND isSuppressed == YES AND suppressionBehavior == %ul", 1];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 40) allValues];
  CFStringRef v4 = [v3 filteredArrayUsingPredicate:v2];

  if (v4)
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      int v21 = v4;
      __int16 v22 = 2112;
      uint64_t v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updating Suppressed User Notifications: %@ in Notification Center: %@", buf, 0x16u);
    }

    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = v4;
    id v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v16;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          id v13 = [v12 notificationIdentifier];
          id v14 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKeyedSubscript:v13];
          [*(id *)(a1 + 32) _updateUserNotification:v12 withExistingNotification:v14 shouldSuppress:0];
        }
        id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v9);
    }
  }
}

void sub_1002A7F78(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) notificationIdentifier];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 40) objectForKeyedSubscript:v2];
  CFStringRef v4 = [*(id *)(*(void *)(a1 + 40) + 48) objectForKeyedSubscript:v2];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 72));
  unsigned int v29 = [WeakRetained userNotificationCenterShouldSuppressUserNotifications:*(void *)(a1 + 40)];

  id v30 = v3;
  if ([(__CFString *)v3 isActive])
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v39 = v3;
      __int16 v40 = 2112;
      id v41 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Update an existing user notification: %@ with a new user notification: %@", buf, 0x16u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    uint64_t v10 = v3;
LABEL_10:
    [v8 _updateUserNotification:v9 withExistingNotification:v10 shouldSuppress:v29];
    goto LABEL_38;
  }
  if (v4 && [(__CFString *)v4 isActive])
  {
    int v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v39 = v4;
      __int16 v40 = 2112;
      id v41 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "There is already an inflight notification %@ for a new notification %@", buf, 0x16u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    uint64_t v10 = v4;
    goto LABEL_10;
  }
  if (![(id)objc_opt_class() supportsCoalescing])
  {
LABEL_37:
    [*(id *)(a1 + 40) _addUserNotification:*(void *)(a1 + 32) shouldSuppress:v29];
    goto LABEL_38;
  }
  id v13 = [*(id *)(a1 + 40) _activeUserNotificationsSortedByDateAscending:1];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v14 = [v13 countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (!v14)
  {

    goto LABEL_37;
  }
  id v15 = v14;
  CFStringRef v27 = v4;
  __int16 v28 = v2;
  uint64_t v16 = *(void *)v33;
  unsigned __int8 v31 = 1;
  do
  {
    for (i = 0; i != v15; i = (char *)i + 1)
    {
      if (*(void *)v33 != v16) {
        objc_enumerationMutation(v13);
      }
      long long v18 = *(void **)(*((void *)&v32 + 1) + 8 * i);
      if ([(id)objc_opt_class() supportsCoalescing])
      {
        long long v19 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v20 = *(const __CFString **)(a1 + 32);
          *(_DWORD *)long long buf = 138412546;
          CFStringRef v39 = v20;
          __int16 v40 = 2112;
          id v41 = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Attempting to coalesce User Notification: %@ with existing Notification Center: %@", buf, 0x16u);
        }

        int v21 = (char *)[*(id *)(a1 + 32) coalesceWithExistingUserNotification:v18];
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v22 = @"unknown";
          if ((unint64_t)v21 <= 2) {
            CFStringRef v22 = *(&off_100745130 + (void)v21);
          }
          *(_DWORD *)long long buf = 138412290;
          CFStringRef v39 = v22;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Coalescing result: %@", buf, 0xCu);
        }

        if ((unint64_t)(v21 - 1) <= 1)
        {
          unsigned int v23 = [v18 isValid];
          id v24 = *(void **)(a1 + 40);
          if (v23)
          {
            [*(id *)(a1 + 40) _updateUserNotification:v18 withExistingNotification:v30 shouldSuppress:v29];
          }
          else
          {
            CFStringRef v25 = [v18 notificationIdentifier];
            __int16 v36 = v25;
            int v26 = +[NSArray arrayWithObjects:&v36 count:1];
            [v24 _removeUserNotificationsWithIdentifiers:v26];
          }
          if (v21 == (char *)2)
          {
            unsigned __int8 v31 = 0;
          }
          else if (v21 == (char *)1)
          {
            unsigned __int8 v31 = [*(id *)(a1 + 32) isValid];
          }
        }
      }
    }
    id v15 = [v13 countByEnumeratingWithState:&v32 objects:v37 count:16];
  }
  while (v15);

  CFStringRef v4 = v27;
  uint64_t v2 = v28;
  if (v31) {
    goto LABEL_37;
  }
LABEL_38:
}

NSString *__cdecl sub_1002A84FC(id a1, PKExpressPassConfiguration *a2)
{
  return (NSString *)[(PKExpressPassConfiguration *)a2 passUniqueIdentifier];
}

NSString *__cdecl sub_1002A8504(id a1, PDUserNotification *a2)
{
  return [(PDUserNotification *)a2 notificationIdentifier];
}

NSString *__cdecl sub_1002A87A8(id a1, PDUserNotification *a2)
{
  return [(PDUserNotification *)a2 notificationIdentifier];
}

NSString *__cdecl sub_1002A891C(id a1, PDUserNotification *a2)
{
  return [(PDUserNotification *)a2 notificationIdentifier];
}

NSString *__cdecl sub_1002A8A64(id a1, PDUserNotification *a2)
{
  return [(PDUserNotification *)a2 notificationIdentifier];
}

void sub_1002A8BE0(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 40) allValues];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002A8C9C;
  v4[3] = &unk_100744FF0;
  void v4[4] = a1[6];
  id v3 = objc_msgSend(v2, "pk_objectsPassingTest:", v4);

  (*(void (**)(void))(a1[5] + 16))();
}

BOOL sub_1002A8C9C(uint64_t a1, void *a2)
{
  return [a2 notificationType] == *(id *)(a1 + 32);
}

void sub_1002A8D98(void *a1)
{
  +[NSPredicate predicateWithFormat:@"passUniqueIdentifier == %@ AND notificationType == %ul", a1[4], a1[7]];
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1[5] + 40) allValues];
  id v3 = [v2 filteredArrayUsingPredicate:v4];

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1002A8F08(void *a1)
{
  id v2 = [*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]];
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1002A9024(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3
    && [v3 authorizationStatus] == (id)2
    && ![v4 alertStyle]
    && [v4 notificationCenterSetting] != (id)2)
  {
    [v4 lockScreenSetting];
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002A9FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002AA00C(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (NSObject **)objc_loadWeakRetained(a1 + 6);
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained[10];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002AA0EC;
    v7[3] = &unk_100730198;
    void v7[4] = WeakRetained;
    id v8 = a1[4];
    id v9 = v3;
    id v10 = a1[5];
    dispatch_async(v6, v7);
  }
}

void sub_1002AA0EC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 48) removeObjectForKey:*(void *)(a1 + 40)];
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDUserNotificationCenter: failed to add notification request with error: %@", buf, 0xCu);
    }
  }
  else
  {
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:*(void *)(a1 + 56) forKeyedSubscript:*(void *)(a1 + 40)];
    id v7 = [*(id *)(a1 + 32) _activeUserNotificationsSortedByDateAscending:0];
    if ((unint64_t)[v7 count] >= 0xB)
    {
      id v4 = objc_msgSend(v7, "subarrayWithRange:", 10, (char *)objc_msgSend(v7, "count") - 10);
      id v5 = objc_msgSend(v4, "pk_arrayByApplyingBlock:", &stru_100745038);

      [*(id *)(a1 + 32) _removeUserNotificationsWithIdentifiers:v5];
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72));
    [WeakRetained userNotificationCenter:*(void *)(a1 + 32) insertedOrUpdatedUserNotification:*(void *)(a1 + 56)];
  }
}

NSString *__cdecl sub_1002AA288(id a1, PDUserNotification *a2)
{
  return [(PDUserNotification *)a2 notificationIdentifier];
}

void sub_1002AA51C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1002AA550(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      uint64_t v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 138412290;
        id v9 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDUserNotificationCenter: failed to update notification request with error: %@", (uint8_t *)&v8, 0xCu);
      }
    }
    else
    {
      [WeakRetained[5] setObject:*(void *)(a1 + 40) forKeyedSubscript:*(void *)(a1 + 32)];
      id v7 = objc_loadWeakRetained(v5 + 9);
      [v7 userNotificationCenter:v5 insertedOrUpdatedUserNotification:*(void *)(a1 + 40)];
    }
  }
}

void sub_1002AA650(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (!a2 && WeakRetained)
  {
    uint64_t v6 = WeakRetained;
    [WeakRetained[5] setObject:*(void *)(a1 + 40) forKeyedSubscript:*(void *)(a1 + 32)];
    id v5 = objc_loadWeakRetained(v6 + 9);
    [v5 userNotificationCenter:v6 insertedOrUpdatedUserNotification:*(void *)(a1 + 40)];

    id WeakRetained = v6;
  }
}

void sub_1002AAA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1002AAAAC(uint64_t a1, uint64_t a2)
{
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObjectsFromArray:a2];
  unint64_t v3 = ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  if (v3 >= (unint64_t)[*(id *)(a1 + 32) count])
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(NSObject **)(v4 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002AAB94;
    block[3] = &unk_10073C858;
    void block[4] = v4;
    long long v7 = *(_OWORD *)(a1 + 48);
    id v6 = (id)v7;
    long long v9 = v7;
    dispatch_async(v5, block);
  }
}

void sub_1002AAB94(void *a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1[6] + 8) + 40), "pk_arrayByApplyingBlock:", &stru_1007450A0);
  unint64_t v3 = +[NSSet setWithArray:v2];

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v4 = objc_msgSend(*(id *)(a1[4] + 40), "allKeys", 0);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        if (([v3 containsObject:v9] & 1) == 0)
        {
          id v10 = [*(id *)(a1[4] + 40) objectForKeyedSubscript:v9];
          [v10 setActive:0];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  uint64_t v11 = a1[5];
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

NSString *__cdecl sub_1002AAD1C(id a1, UNNotification *a2)
{
  uint64_t v2 = [(UNNotification *)a2 request];
  unint64_t v3 = [v2 identifier];

  return (NSString *)v3;
}

uint64_t sub_1002AAD6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1002AAE78(uint64_t a1, void *a2, void *a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v4)
  {
    int v8 = [v6 date];

    uint64_t v9 = [v5 date];
  }
  else
  {
    int v8 = [v5 date];

    uint64_t v9 = [v7 date];
  }
  id v10 = [v8 compare:v9];

  return v10;
}

id sub_1002AB5F4(uint64_t a1, uint64_t a2)
{
  return +[PassShareTimeConfiguration deletePassShareTimeConfigurationsForPassSharedEntitlementPID:a2 inDatabase:*(void *)(a1 + 32)];
}

void sub_1002AB760(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v10 = objc_alloc_init((Class)PKPassSharedEntitlement);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v10 withProperties:v7 values:a4];

  int v8 = +[PassShareTimeConfiguration passShareTimeConfigurationsForPassSharedEntitlementPID:a2 inDatabase:*(void *)(a1 + 40)];
  uint64_t v9 = [v8 firstObject];

  [v10 setTimeConfiguration:v9];
  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_1002AB994(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002ABCDC(id a1, PKPassSharedEntitlement *a2, id a3)
{
}

void sub_1002ABCE4(id a1, PKPassSharedEntitlement *a2, id a3)
{
  unint64_t v3 = a2;
  [(PKPassSharedEntitlement *)v3 setRecipientShareability:PKSharingCapabilityShareabilityFromString()];
}

void sub_1002ABD3C(id a1, PKPassSharedEntitlement *a2, id a3)
{
  unint64_t v3 = a2;
  [(PKPassSharedEntitlement *)v3 setRecipientVisibility:PKSharingCapabilityVisibilityFromString()];
}

void sub_1002ABD94(id a1, PKPassSharedEntitlement *a2, id a3)
{
  unint64_t v3 = a2;
  [(PKPassSharedEntitlement *)v3 setRecipientManageability:PKSharingCapabilityManageabilityFromString()];
}

void sub_1002ABDEC(id a1, PKPassSharedEntitlement *a2, id a3)
{
}

void sub_1002ABDF4(id a1, PKPassSharedEntitlement *a2, id a3)
{
  int v4 = a2;
  -[PKPassSharedEntitlement setCreationVersion:](v4, "setCreationVersion:", [a3 integerValue]);
}

void sub_1002AC304(uint64_t a1, uint64_t a2)
{
  int v4 = [AccountTaxForm alloc];
  id v5 = [*(id *)(a1 + 32) database];
  int v8 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  id v6 = *(void **)(a1 + 40);
  id v7 = [(AccountTaxForm *)v8 taxForm];
  [v6 addObject:v7];
}

void sub_1002AC88C(id a1, PKAccountTaxForm *a2, id a3)
{
}

void sub_1002AC894(id a1, PKAccountTaxForm *a2, id a3)
{
  int v4 = a2;
  -[PKAccountTaxForm setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002AC8EC(id a1, PKAccountTaxForm *a2, id a3)
{
  unint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountTaxForm *)v3 setOpeningDate:v4];
}

void sub_1002AC94C(id a1, PKAccountTaxForm *a2, id a3)
{
  unint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountTaxForm *)v3 setClosingDate:v4];
}

id sub_1002ACAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void PDSetDoubleClickAllowed()
{
  PKSetDoubleClickAllowed();
  sub_1002ACBF0();
}

void sub_1002ACBF0()
{
  os_unfair_lock_lock(&stru_100808DE0);
  if ((byte_100808DE4 & 1) == 0)
  {
    byte_100808DE4 = 1;
    _CFPreferencesSetBackupDisabled();
    _CFPreferencesSetFileProtectionClass();
  }
  if (!PKNearFieldRadioIsAvailable()) {
    goto LABEL_11;
  }
  if (!PKDoubleClickAllowed()) {
    goto LABEL_11;
  }
  CFPropertyListRef v0 = CFPreferencesCopyValue(@"contactless-interface-available", PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (!v0) {
    goto LABEL_11;
  }
  uint64_t v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFBooleanGetTypeID())
  {
    CFRelease(v1);
LABEL_11:
    id v4 = &kCFBooleanFalse;
    goto LABEL_12;
  }
  int Value = CFBooleanGetValue((CFBooleanRef)v1);
  CFRelease(v1);
  id v4 = &kCFBooleanTrue;
  if (!Value) {
    id v4 = &kCFBooleanFalse;
  }
LABEL_12:
  CFBooleanRef v5 = *v4;
  CFStringRef v6 = (const __CFString *)PDPreferenceKey_PreArmAvailable;
  if ((byte_100808DE4 & 1) == 0)
  {
    byte_100808DE4 = 1;
    _CFPreferencesSetBackupDisabled();
    _CFPreferencesSetFileProtectionClass();
  }
  if (v6)
  {
    CFPreferencesSetValue(v6, v5, PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    os_unfair_lock_unlock(&stru_100808DE0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t PDPassStateSet(int a1)
{
  os_unfair_lock_lock(&stru_100808DE0);
  if (byte_100808DE4 == 1)
  {
    CFStringRef v3 = (const __CFString *)PDPreferenceKey_SecureElementPassesAvailable;
    BOOL v4 = (a1 & 1) == 0;
    CFBooleanRef v5 = kCFBooleanTrue;
    CFBooleanRef v6 = kCFBooleanFalse;
    if (a1) {
      CFBooleanRef v7 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v7 = kCFBooleanFalse;
    }
  }
  else
  {
    byte_100808DE4 = 1;
    _CFPreferencesSetBackupDisabled();
    uint64_t v2 = _CFPreferencesSetFileProtectionClass();
    CFStringRef v3 = (const __CFString *)PDPreferenceKey_SecureElementPassesAvailable;
    BOOL v4 = (a1 & 1) == 0;
    CFBooleanRef v5 = kCFBooleanTrue;
    CFBooleanRef v6 = kCFBooleanFalse;
    if (a1) {
      CFBooleanRef v7 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v7 = kCFBooleanFalse;
    }
    if ((byte_100808DE4 & 1) == 0)
    {
      byte_100808DE4 = 1;
      _CFPreferencesSetBackupDisabled();
      uint64_t v2 = _CFPreferencesSetFileProtectionClass();
    }
  }
  if (v3)
  {
    CFStringRef v8 = (const __CFString *)PDPreferencesDomain_ClassD;
    CFPreferencesSetValue(v3, v7, PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    if ((byte_100808DE4 & 1) == 0)
    {
      byte_100808DE4 = 1;
      _CFPreferencesSetBackupDisabled();
      _CFPreferencesSetFileProtectionClass();
    }
    char v9 = (a1 & 0x100) == 0 || v4;
    int v10 = v9 & ((*(void *)&a1 & 0x10000) == 0);
    if (v10) {
      CFBooleanRef v11 = v6;
    }
    else {
      CFBooleanRef v11 = v5;
    }
    uint64_t v12 = v10 ^ 1u;
    CFPreferencesSetValue(@"contactless-interface-available", v11, v8, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    os_unfair_lock_unlock(&stru_100808DE0);
    sub_1002ACBF0();
    sub_1002ACFEC();
    uint64_t v2 = v12;
  }
  else
  {
    __break(1u);
  }
  return _PDSetContactlessPassesAvailable(v2);
}

void sub_1002ACFEC()
{
  os_unfair_lock_lock(&stru_100808DE0);
  if ((byte_100808DE4 & 1) == 0)
  {
    byte_100808DE4 = 1;
    _CFPreferencesSetBackupDisabled();
    _CFPreferencesSetFileProtectionClass();
  }
  if (!PKNearFieldRadioIsAvailable()) {
    goto LABEL_12;
  }
  CFStringRef v0 = (const __CFString *)PDPreferencesDomain_ClassD;
  CFBooleanRef v1 = (const __CFBoolean *)CFPreferencesCopyValue(@"contactless-interface-available", PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (v1)
  {
    CFBooleanRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(v2);
      CFRelease(v2);
      if (Value)
      {
        BOOL v5 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      CFRelease(v2);
    }
  }
  CFBooleanRef v6 = (const __CFBoolean *)CFPreferencesCopyValue(@"car-pairing-available", v0, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (v6)
  {
    CFBooleanRef v7 = v6;
    CFTypeID v8 = CFGetTypeID(v6);
    BOOL v5 = v8 == CFBooleanGetTypeID() && CFBooleanGetValue(v7) != 0;
    CFRelease(v7);
  }
  else
  {
LABEL_12:
    BOOL v5 = 0;
  }
LABEL_15:
  CFStringRef v9 = (const __CFString *)PDPreferenceKey_FieldDetectAvailable;
  if ((byte_100808DE4 & 1) == 0)
  {
    byte_100808DE4 = 1;
    _CFPreferencesSetBackupDisabled();
    _CFPreferencesSetFileProtectionClass();
  }
  if (v9)
  {
    if (v5) {
      CFBooleanRef v10 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v10 = kCFBooleanFalse;
    }
    CFPreferencesSetValue(v9, v10, PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    os_unfair_lock_unlock(&stru_100808DE0);
  }
  else
  {
    __break(1u);
  }
}

void PDCarPairingStateSet(char a1)
{
  os_unfair_lock_lock(&stru_100808DE0);
  if (byte_100808DE4 == 1)
  {
    CFBooleanRef v2 = &kCFBooleanTrue;
    if ((a1 & 1) == 0) {
      CFBooleanRef v2 = &kCFBooleanFalse;
    }
    CFBooleanRef v3 = *v2;
    CFStringRef v4 = (const __CFString *)PDPreferencesDomain_ClassD;
    CFStringRef v5 = kCFPreferencesCurrentUser;
    CFStringRef v6 = kCFPreferencesAnyHost;
  }
  else
  {
    byte_100808DE4 = 1;
    CFStringRef v4 = (const __CFString *)PDPreferencesDomain_ClassD;
    CFStringRef v5 = kCFPreferencesCurrentUser;
    CFStringRef v6 = kCFPreferencesAnyHost;
    _CFPreferencesSetBackupDisabled();
    _CFPreferencesSetFileProtectionClass();
    CFBooleanRef v7 = &kCFBooleanTrue;
    if ((a1 & 1) == 0) {
      CFBooleanRef v7 = &kCFBooleanFalse;
    }
    CFBooleanRef v3 = *v7;
    if ((byte_100808DE4 & 1) == 0)
    {
      byte_100808DE4 = 1;
      _CFPreferencesSetBackupDisabled();
      _CFPreferencesSetFileProtectionClass();
    }
  }
  CFPreferencesSetValue(@"car-pairing-available", v3, v4, v5, v6);
  os_unfair_lock_unlock(&stru_100808DE0);
  sub_1002ACFEC();
}

BOOL PDContactlessInterfaceAvailable()
{
  os_unfair_lock_lock(&stru_100808DE0);
  CFBooleanRef v0 = (const __CFBoolean *)CFPreferencesCopyValue(@"contactless-interface-available", PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    BOOL v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
    CFRelease(v1);
  }
  else
  {
    BOOL v3 = 0;
  }
  os_unfair_lock_unlock(&stru_100808DE0);
  return v3;
}

uint64_t PDFieldDetectAvailable()
{
  os_unfair_lock_lock(&stru_100808DE0);
  uint64_t result = PDPreferenceKey_FieldDetectAvailable;
  if (PDPreferenceKey_FieldDetectAvailable)
  {
    CFBooleanRef v1 = (const __CFBoolean *)CFPreferencesCopyValue(PDPreferenceKey_FieldDetectAvailable, PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    if (v1)
    {
      CFBooleanRef v2 = v1;
      CFTypeID v3 = CFGetTypeID(v1);
      BOOL v4 = v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2) != 0;
      CFRelease(v2);
    }
    else
    {
      BOOL v4 = 0;
    }
    os_unfair_lock_unlock(&stru_100808DE0);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002ADD34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  CFTypeID v8 = [AccountStatementMetadataItem alloc];
  CFStringRef v9 = [*(id *)(a1 + 32) database];
  CFStringRef v20 = [(SQLiteEntity *)v8 initWithPersistentID:a2 inDatabase:v9];

  id v10 = objc_alloc_init((Class)PKAccountStatementMetadataItem);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v10 withProperties:v7 values:a4];

  id v11 = [(AccountStatementMetadataItem *)v20 type];
  if (v11 == (id)2)
  {
    long long v13 = [(AccountStatementMetadataItem *)v20 identifier];
    long long v18 = [*(id *)(a1 + 32) database];
    long long v19 = +[AccountEvent accountEventWithIdentifier:v13 inDatabase:v18];

    if (v19) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = 2;
    }
LABEL_10:

    goto LABEL_12;
  }
  if (v11 == (id)1)
  {
    [(AccountStatementMetadataItem *)v20 accountType];
    uint64_t v12 = PKPaymentTransactionAccountTypeFromAccountType();
    long long v13 = [(AccountStatementMetadataItem *)v20 accountIdentifier];
    long long v14 = [(AccountStatementMetadataItem *)v20 identifier];
    long long v15 = [*(id *)(a1 + 32) database];
    uint64_t v16 = +[PaymentTransaction anyInDatabase:v15 withServiceIdentifier:v14 accountIdentifier:v13 accountType:v12];

    if (v16) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = 2;
    }

    goto LABEL_10;
  }
  uint64_t v17 = 0;
LABEL_12:
  [v10 setStatus:v17];
  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_1002AE07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002AE09C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, unsigned char *a5)
{
  id result = [*a3 BOOLValue];
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

uint64_t sub_1002AE1E8(uint64_t a1)
{
  CFBooleanRef v2 = *(void **)(a1 + 32);
  CFTypeID v3 = +[NSDate date];
  BOOL v4 = (void *)_SQLValueForDate();
  [v2 setValue:v4 forProperty:@"last_processed_date"];

  CFStringRef v5 = *(void **)(a1 + 32);
  CFStringRef v6 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  [v5 setValue:v6 forProperty:@"has_been_processed"];

  id v7 = *(void **)(a1 + 32);
  CFTypeID v8 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  [v7 setValue:v8 forProperty:@"error"];

  CFStringRef v9 = [*(id *)(a1 + 32) valueForProperty:@"processed_attempt_count"];
  id v10 = v9;
  if (v9)
  {
    id v11 = v9;
  }
  else
  {
    id v11 = +[NSDecimalNumber zero];
  }
  uint64_t v12 = v11;

  long long v13 = *(void **)(a1 + 32);
  long long v14 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v12 integerValue] + 1);
  [v13 setValue:v14 forProperty:@"processed_attempt_count"];

  return 1;
}

uint64_t sub_1002AE3E0(uint64_t a1)
{
  CFBooleanRef v2 = *(void **)(a1 + 32);
  CFTypeID v3 = (void *)_SQLValueForDate();
  [v2 setValue:v3 forProperty:@"last_report_date"];

  BOOL v4 = *(void **)(a1 + 32);
  CFStringRef v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", (char *)[v4 reportCount] + 1);
  [v4 setValue:v5 forProperty:@"report_count"];

  return 1;
}

void sub_1002AE550(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = [*(id *)(a1 + 40) _predicateForPID:a2];
  id v5 = +[SQLiteEntity anyInDatabase:v3 predicate:v4];

  [v5 markMetadataItemAsProcessed:*(unsigned __int8 *)(a1 + 56) error:*(void *)(a1 + 48)];
}

void sub_1002AE6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = [*(id *)(a1 + 48) _predicateForPID:a2];
  id v5 = +[SQLiteEntity anyInDatabase:v3 predicate:v4];

  [v5 updateReportDate:*(void *)(a1 + 40)];
}

void sub_1002AEDC8(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
}

void sub_1002AEDD0(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
}

void sub_1002AEDD8(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002AEE30(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setAccountEventType:](v4, "setAccountEventType:", [a3 integerValue]);
}

void sub_1002AEE88(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
}

void sub_1002AEE90(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setHasBeenProcessed:](v4, "setHasBeenProcessed:", [a3 BOOLValue]);
}

void sub_1002AEEE8(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  BOOL v4 = a2;
  -[PKAccountStatementMetadataItem setProcessedAttemptCount:](v4, "setProcessedAttemptCount:", [a3 integerValue]);
}

void sub_1002AEF40(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountStatementMetadataItem *)v3 setLastProcessedDate:v4];
}

void sub_1002AEFA0(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountStatementMetadataItem *)v3 setLastReportDate:v4];
}

void sub_1002AF000(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadataItem setReportCount:](v4, "setReportCount:", [a3 integerValue]);
}

void sub_1002AF058(id a1, PKAccountStatementMetadataItem *a2, id a3)
{
  id v4 = a2;
  -[PKAccountStatementMetadataItem setError:](v4, "setError:", [a3 integerValue]);
}

NSString *__cdecl sub_1002AFD04(id a1, PKPass *a2)
{
  return (NSString *)[(PKPass *)a2 uniqueID];
}

NSCopying *__cdecl sub_1002AFD0C(id a1, PKPass *a2)
{
  return (NSCopying *)[(PKPass *)a2 uniqueID];
}

void sub_1002AFF34(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_alloc_init(PDCardCloudManagerSaveRequest);
  -[PDCardCloudManagerSaveRequest setOriginator:](v3, "setOriginator:", @"-[PDCardCloudManager saveLocalDataInContainer:] (full-sync-upload)");
  uint64_t v17 = v3;
  [(PDCardCloudManagerSaveRequest *)v3 delayExecutionOfRemotePortion];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = v2;
  id v4 = [obj countByEnumeratingWithState:&v21 objects:v31 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v19 = *(void *)v22;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v22 != v19) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        CFTypeID v8 = [v7 uniqueID];
        unsigned int v9 = [v7 wasAchivedInCloudStoreWithIdentifier:*(void *)(*(void *)(a1 + 32) + 8)];
        unsigned int v10 = [v7 isRevoked];
        int v11 = v9 | v10;
        uint64_t v12 = +[NSString stringWithFormat:@"(%d, %d)", v9, v10];
        long long v13 = +[NSString stringWithFormat:@"(%d, %d)", 0, v11 ^ 1u];
        long long v14 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543874;
          int v26 = v8;
          __int16 v27 = 2114;
          __int16 v28 = v12;
          __int16 v29 = 2114;
          id v30 = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[PDCardCloudManager] local pass:%{public}@ comparison:%{public}@ action:%{public}@ (full-sync-upload)", buf, 0x20u);
        }

        if ((v11 & 1) == 0) {
          [(PDCardCloudManagerSaveRequest *)v17 addRemotePass:v7];
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v21 objects:v31 count:16];
    }
    while (v5);
  }

  long long v15 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    int v26 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[PDCardCloudManager] will apply result of diff: %{public}@ (full-sync-upload)", buf, 0xCu);
  }

  uint64_t v16 = [*(id *)(a1 + 32) dataSource];
  [v16 executeSaveRequest:v17 completion:0];
}

void sub_1002B02E4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (objc_msgSend(v6, "pk_isPass")
    && ([*(id *)(a1 + 32) handleUpdatedPass:v6 inDatabase:v5 updateSaveRequest:0 shouldSave:0 remoteChanges:*(void *)(a1 + 40)] & 1) == 0)
  {
    [*(id *)(a1 + 32) handleInvalidPass:v6 inDatabase:v5 remoteChanges:*(void *)(a1 + 40)];
  }
}

void sub_1002B0808(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (objc_msgSend(v6, "pk_isPass")) {
    [*(id *)(a1 + 32) handleUpdatedPass:v6 inDatabase:v5 updateSaveRequest:*(void *)(a1 + 40) shouldSave:*(unsigned __int8 *)(a1 + 56) remoteChanges:*(void *)(a1 + 48)];
  }
}

void sub_1002B0F50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isPass])
  {
    [*(id *)(a1 + 32) handleRemovedPass:v3 updateSaveRequest:*(void *)(a1 + 40) shouldSave:*(unsigned __int8 *)(a1 + 48)];
  }
  else if ([v3 isPassCatalog])
  {
    [*(id *)(a1 + 32) handleRemovedPassCatalog:v3];
  }
}

void sub_1002B12E4(uint64_t a1)
{
  [*(id *)(a1 + 32) registerProcessPendingChangesCompletion:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 32) changeEventsAreBeingProcessed])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PDCardCloudManager] changes are being processed - callback registered", v4, 2u);
    }
  }
  else
  {
    [*(id *)(a1 + 32) fetchChangeEvents];
    if ([*(id *)(a1 + 32) isUploadTooExpensive]) {
      [*(id *)(a1 + 32) reduceUnprocessedChangeEventsToLatestOnlyAndSetError];
    }
    id v3 = *(void **)(a1 + 32);
    [v3 processNextEventBatch];
  }
}

BOOL sub_1002B1554(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  if ([(PKChangeHistoryEvent *)v4 representsPassAddition]) {
    unsigned __int8 v5 = 1;
  }
  else {
    unsigned __int8 v5 = [(PKChangeHistoryEvent *)v4 representsPassUpdate];
  }

  return v5;
}

BOOL sub_1002B17C0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 timestamp];
  [v2 timeIntervalSinceDate:v3];
  BOOL v5 = v4 > 86400.0;

  return v5;
}

id sub_1002B19B8(uint64_t a1)
{
  if ([(id)objc_opt_class() shouldProcessChangeEventBatchLaterDueToError:*(void *)(*(void *)(a1 + 32) + 16)])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16);
      int v6 = 138543362;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PDCardCloudManager] looks like processing of pending changes needs to be aborted due to error :%{public}@", (uint8_t *)&v6, 0xCu);
    }

    return [*(id *)(a1 + 32) abortChangeProcessing];
  }
  else
  {
    BOOL v5 = *(void **)(a1 + 32);
    return [v5 processNextEventBatch];
  }
}

void sub_1002B1FF8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1002B2010(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  CFTypeID v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002B20E8;
  v13[3] = &unk_100738C08;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 processPassAddEventsFromEvents:v9 completion:v13];
}

void sub_1002B20E8(uint64_t a1, void *a2)
{
  id v6 = a2;
  unsigned __int8 v3 = [(id)objc_opt_class() shouldProcessChangeEventBatchLaterDueToError:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  BOOL v5 = v6;
  if ((v3 & 1) == 0) {
    BOOL v5 = *(void **)(v4 + 40);
  }
  objc_storeStrong((id *)(v4 + 40), v5);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002B2170(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  CFTypeID v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002B2248;
  v13[3] = &unk_100738C08;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 processPassUpdateEventsFromEvents:v9 completion:v13];
}

void sub_1002B2248(uint64_t a1, void *a2)
{
  id v6 = a2;
  unsigned __int8 v3 = [(id)objc_opt_class() shouldProcessChangeEventBatchLaterDueToError:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  BOOL v5 = v6;
  if ((v3 & 1) == 0) {
    BOOL v5 = *(void **)(v4 + 40);
  }
  objc_storeStrong((id *)(v4 + 40), v5);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002B22D0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  CFTypeID v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002B23A8;
  v13[3] = &unk_100738C08;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 processPassRemoveEventsFromEvents:v9 completion:v13];
}

void sub_1002B23A8(uint64_t a1, void *a2)
{
  id v6 = a2;
  unsigned __int8 v3 = [(id)objc_opt_class() shouldProcessChangeEventBatchLaterDueToError:v6];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  BOOL v5 = v6;
  if ((v3 & 1) == 0) {
    BOOL v5 = *(void **)(v4 + 40);
  }
  objc_storeStrong((id *)(v4 + 40), v5);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002B2430(uint64_t a1)
{
  id v2 = PDDefaultQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002B24E8;
  block[3] = &unk_100745870;
  void block[4] = *(void *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v6 = v4;
  dispatch_async(v2, block);
}

uint64_t sub_1002B24E8(uint64_t a1)
{
  if ([(id)objc_opt_class() shouldProcessChangeEventBatchLaterDueToError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)])
  {
    id v2 = (id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v2 = (id *)(v3 + 16);
  }
  objc_storeStrong((id *)(v3 + 16), *v2);
  objc_msgSend(*(id *)(a1 + 32), "markBatchOfChangesAsProcessed:", *(void *)(a1 + 56), *(void *)(a1 + 64));
  long long v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v4();
}

BOOL sub_1002B27A4(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return [(PKChangeHistoryEvent *)a2 representsPassAddition];
}

void sub_1002B27AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  objc_msgSend(*(id *)(a1 + 32), "handlePassUploadResult:conflictingServerPasses:revokedLocalPasses:andEraseChangeEvents:orReportError:", a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
  }
}

BOOL sub_1002B2AC0(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return [(PKChangeHistoryEvent *)a2 representsPassUpdate];
}

uint64_t sub_1002B2AC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [*(id *)(a1 + 32) dataSource];
  BOOL v5 = [v4 retryDateForEvent:v3];

  if (v5
    && (+[NSDate date],
        long long v6 = objc_claimAutoreleasedReturnValue(),
        id v7 = [v6 compare:v5],
        v6,
        v7 != (id)1))
  {
    uint64_t v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = [v3 recordUniqueID];
      int v12 = 138543618;
      long long v13 = v10;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[PDCardCloudManager] not processing update %{public}@ since its retry date is in the future %{public}@", (uint8_t *)&v12, 0x16u);
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

void sub_1002B2C0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  objc_msgSend(*(id *)(a1 + 32), "handlePassUpdateResult:conflictingServerPasses:revokedLocalPasses:andEraseChangeEvents:orReportError:", a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
  }
}

BOOL sub_1002B2E84(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return [(PKChangeHistoryEvent *)a2 representsPassRemoval];
}

void sub_1002B2E8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "handlePassRemovalResult:andEraseChangeEvents:orReportError:", a2, *(void *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }
}

BOOL sub_1002B30B0(id a1, PKChangeHistoryEvent *a2, unint64_t a3, BOOL *a4)
{
  return [(PKChangeHistoryEvent *)a2 representsCatalogUpdate];
}

void sub_1002B30B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "handleCatalogUpdateResult:andEraseChangeEvents:orReportError:", a2, *(void *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }
}

id sub_1002B3488(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 recordUniqueID];
  id v4 = [v2 containsObject:v3];

  return v4;
}

NSString *__cdecl sub_1002B34E0(id a1, PKChangeHistoryEvent *a2)
{
  return (NSString *)[(PKChangeHistoryEvent *)a2 recordUniqueID];
}

NSString *__cdecl sub_1002B34F8(id a1, PKChangeHistoryEvent *a2)
{
  return (NSString *)[(PKChangeHistoryEvent *)a2 identifier];
}

NSString *__cdecl sub_1002B3510(id a1, PKPass *a2)
{
  return (NSString *)[(PKPass *)a2 uniqueID];
}

void sub_1002B4048(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        int v12 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543618;
          uint64_t v19 = v11;
          __int16 v20 = 2114;
          id v21 = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[PDCardCloudManager] increasing retry count for conflicting event recordUniqueID: %{public}@, recordType %{public}@", buf, 0x16u);
        }

        long long v13 = [*(id *)(a1 + 32) dataSource];
        objc_msgSend(v13, "increaseRetryCountForRecordUniqueIdenifier:recordType:", v11, objc_msgSend(v5, "integerValue"));
      }
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v22 count:16];
    }
    while (v8);
  }
}

void sub_1002B5838(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterAccountDetails *)v3 setLastUpdatedDate:v4];
}

void sub_1002B5898(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterAccountDetails *)v3 setCreatedDate:v4];
}

void sub_1002B58F8(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterAccountDetails *)v3 setNextDueDate:v4];
}

void sub_1002B5958(id a1, PKPayLaterAccountDetails *a2, id a3)
{
}

void sub_1002B5960(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPayLaterAccountDetails *)v3 setAssociatedPassURL:v4];
}

void sub_1002B59C0(id a1, PKPayLaterAccountDetails *a2, id a3)
{
}

void sub_1002B59C8(id a1, PKPayLaterAccountDetails *a2, id a3)
{
}

void sub_1002B59D0(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setCardNetwork:](v4, "setCardNetwork:", [a3 integerValue]);
}

void sub_1002B5A28(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKPayLaterAccountDetails *)v4 setAvailableLanguages:v5];
}

void sub_1002B5A94(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setRequiresGenericMessaging:](v4, "setRequiresGenericMessaging:", [a3 BOOLValue]);
}

void sub_1002B5AEC(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setPaymentType:](v4, "setPaymentType:", [a3 integerValue]);
}

void sub_1002B5B44(id a1, PKPayLaterAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountDetails setFinancingPlanFetchLimit:](v4, "setFinancingPlanFetchLimit:", [a3 integerValue]);
}

void sub_1002B5DDC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002B6B04(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002B6C68(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 48);
  id v5 = [*(id *)(a1 + 32) database];
  id v6 = *(void **)(a1 + 48);
  id v7 = +[NSNumber numberWithLongLong:a2];
  id v8 = [v6 _predicateForPersistentID:v7];
  id v11 = [v4 anyInDatabase:v5 predicate:v8];

  uint64_t v9 = *(void **)(a1 + 40);
  uint64_t v10 = [v11 _verificationAction];
  [v9 safelyAddObject:v10];
}

id sub_1002B6E7C(id a1, NSNumber *a2)
{
  return [(NSNumber *)a2 stringValue];
}

id sub_1002B6EE4(id a1, NSString *a2)
{
  NSInteger v2 = [(NSString *)a2 integerValue];
  return +[NSNumber numberWithInteger:v2];
}

void sub_1002B7028(id a1, PKAccountFundingSourceVerificationAction *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFundingSourceVerificationAction setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1002B7080(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [v4 _verificationOptionsFromString:a3];
  [v5 setVerificationOptions:v6];
}

uint64_t sub_1002B7CE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002B8090(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 56));
  if (v3)
  {
    [*(id *)(*(void *)(a1 + 32) + 48) addObject:*(void *)(a1 + 48)];
    id v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 56);
    os_unfair_lock_unlock(v4);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), *(id *)(a1 + 48));
    id v5 = *(void **)(a1 + 32);
    objc_msgSend(v5, "_queue_performCurrentQuery");
  }
}

void sub_1002B8160(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 remoteObjectProxy];
  [v5 searchDidCompleteWithError:v4 forIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_1002B8408(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 identifier];
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1;
  }
  else
  {
    if (v4) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

uint64_t sub_1002B8618(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 336), "updateRegionWithIdentifier:localizedName:boundingRegion:mapsIdentifier:providerIdentifier:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 96), *(unsigned int *)(a1 + 104), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    uint64_t v5 = v2;
    uint64_t v3 = (*(uint64_t (**)(void))(v3 + 16))();
    uint64_t v2 = v5;
  }
  return _objc_release_x1(v3, v2);
}

uint64_t sub_1002B869C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1002B90E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1002B9120(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = PKLogFacilityTypeGetObject();
  PKTimeProfileBegin();

  uint64_t v9 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002B9208;
  v12[3] = &unk_1007315D8;
  id v13 = v6;
  id v14 = v7;
  void v12[4] = v9;
  id v10 = v6;
  id v11 = v7;
  [v9 _buildInvertedIndexWithCompletion:v12];
}

uint64_t sub_1002B9208(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  id v3 = (id)PKTimeProfileEnd();

  id v4 = *(void **)(*(void *)(a1 + 32) + 312);
  uint64_t v5 = +[NSLocale currentLocale];
  id v6 = [v5 localeIdentifier];
  *(unsigned char *)(*(void *)(a1 + 32) + 296) = [v4 hasMultipleRegionsOfType:4 localeIdentifier:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v7();
}

BOOL sub_1002B92D8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56));
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(v2 + 40);
  if (*(unsigned char *)(v2 + 40))
  {
    *(unsigned char *)(v2 + 41) = 1;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  BOOL v4 = v3 != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 56));
  return v4;
}

void sub_1002B9348(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  id v8 = (id)PKTimeProfileEnd();

  char v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  if (!v5 || (v9 & 1) != 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  else
  {
    id v10 = objc_alloc_init((Class)PKSearchResults);
    id v11 = [v5 copy];
    [v10 setTransactionResults:v11];

    int v12 = [*(id *)(a1 + 32) remoteObjectProxy];
    id v13 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
    [v12 searchDidReceivePartialResults:v10 forIdentifier:v13];

    if ([*(id *)(*(void *)(a1 + 32) + 64) type] == (id)5)
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    }
    else
    {
      id v14 = [v5 copy];
      uint64_t v15 = *(void *)(a1 + 32);
      long long v16 = *(void **)(v15 + 288);
      *(void *)(v15 + 288) = v14;

      PKTimeProfileBegin();
      long long v17 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1002B9568;
      v20[3] = &unk_10073BFD8;
      id v23 = *(id *)(a1 + 48);
      id v18 = *(id *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 32);
      id v21 = v18;
      uint64_t v22 = v19;
      [v17 _uniqueMerchantsForCurrenQueryWithMerchants:&__NSArray0__struct allUniqueMerchants:&__NSArray0__struct attemptCount:0 fuzzyMatching:0 completion:v20];
    }
  }
}

void sub_1002B9568(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = PKLogFacilityTypeGetObject();
  id v5 = (id)PKTimeProfileEnd();

  if ((*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16))())
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    id v6 = objc_alloc_init((Class)NSMutableArray);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v23 = v3;
    id obj = v3;
    id v7 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v28;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v28 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v27 + 1) + 8 * (void)v10);
          int v12 = objc_msgSend(*(id *)(a1 + 40), "_transactionRequestForCurrentFilters", v23);
          [v12 setMerchant:v11];
          [v12 setLimit:1];
          id v13 = [*(id *)(*(void *)(a1 + 40) + 312) transactionsForRequest:v12];
          id v14 = [v13 count];

          if (v14)
          {
            id v15 = objc_alloc_init((Class)PKPaymentTransactionGroup);
            [v15 setMerchant:v11];
            [v15 setType:1];
            id v25 = 0;
            uint64_t v26 = 0;
            [v12 setLimit:0];
            [*(id *)(*(void *)(a1 + 40) + 312) totalAmount:&v25 forTransactionsWithRequest:v12 count:&v26];
            [v15 setTransactionCount:v26];
            [v15 setTotalAmount:v25];
            id v16 = objc_alloc_init((Class)PKSearchTransactionGroupResult);
            [v16 setGroup:v15];
            [v6 addObject:v16];
          }
          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
      }
      while (v8);
    }

    [v6 sortUsingComparator:&stru_100746068];
    id v17 = [v6 copy];
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void **)(v18 + 256);
    *(void *)(v18 + 256) = v17;

    id v20 = objc_alloc_init((Class)PKSearchResults);
    [v20 setMerchantResults:*(void *)(*(void *)(a1 + 40) + 256)];
    id v21 = [*(id *)(a1 + 40) remoteObjectProxy];
    uint64_t v22 = [*(id *)(*(void *)(a1 + 40) + 64) identifier];
    [v21 searchDidReceivePartialResults:v20 forIdentifier:v22];

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    id v3 = v23;
  }
}

void sub_1002B986C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = objc_alloc_init((Class)PKSearchResults);
  [v6 setTransactionResults:&__NSArray0__struct];
  [v6 setMerchantResults:v3];

  BOOL v4 = [*(id *)(a1 + 32) remoteObjectProxy];
  id v5 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
  [v4 searchDidReceivePartialResults:v6 forIdentifier:v5];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1002B9934(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 copy];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 280);
    *(void *)(v4 + 280) = v3;

    id v6 = objc_alloc_init((Class)PKSearchResults);
    [v6 setTransactionTagResults:*(void *)(*(void *)(a1 + 32) + 280)];
    [v6 setTransactionResults:&__NSArray0__struct];
    id v7 = [*(id *)(a1 + 32) remoteObjectProxy];
    id v8 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
    [v7 searchDidReceivePartialResults:v6 forIdentifier:v8];
  }
  uint64_t v9 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v9);
}

void sub_1002B9A08(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    v7[2](v7, v6, 1);
  }
  else
  {
    id v8 = PKLogFacilityTypeGetObject();
    PKTimeProfileBegin();

    uint64_t v9 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002B9B1C;
    v10[3] = &unk_100745D40;
    void v10[4] = v9;
    int v12 = v7;
    id v11 = v6;
    [v9 _categoriesForCurrentQueryWithCompletion:v10];
  }
}

void sub_1002B9B1C(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  id v5 = (id)PKTimeProfileEnd();

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 248), a2);
    id v6 = objc_alloc_init((Class)PKSearchResults);
    [v6 setCategoryResults:v9];
    id v7 = [*(id *)(a1 + 32) remoteObjectProxy];
    id v8 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
    [v7 searchDidReceivePartialResults:v6 forIdentifier:v8];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002B9C30(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    v7[2](v7, v6, 1);
  }
  else
  {
    id v8 = PKLogFacilityTypeGetObject();
    PKTimeProfileBegin();

    id v9 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002B9D44;
    v10[3] = &unk_100736470;
    void v10[4] = v9;
    int v12 = v7;
    id v11 = v6;
    [v9 _matchedHandlesForCurrentQueryWithCompletion:v10];
  }
}

void sub_1002B9D44(uint64_t a1, void *a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  id v5 = a2;
  id v6 = (id)PKTimeProfileEnd();

  id v7 = [v5 copy];
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 272);
  *(void *)(v8 + 272) = v7;

  id v13 = objc_alloc_init((Class)PKSearchResults);
  id v10 = [v5 copy];

  [v13 setPersonResults:v10];
  id v11 = [*(id *)(a1 + 32) remoteObjectProxy];
  int v12 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
  [v11 searchDidReceivePartialResults:v13 forIdentifier:v12];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002B9E70(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))())
  {
    v7[2](v7, v6, 1);
  }
  else
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    PKTimeProfileBegin();

    id v9 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002B9F88;
    v10[3] = &unk_100736470;
    void v10[4] = v9;
    int v12 = v7;
    id v11 = v6;
    [v9 _locationsForCurrentQueryWithSuggestions:0 completion:v10];
  }
}

void sub_1002B9F88(uint64_t a1, void *a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  id v5 = a2;
  id v6 = (id)PKTimeProfileEnd();

  id v7 = [v5 copy];
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 264);
  *(void *)(v8 + 264) = v7;

  id v12 = objc_alloc_init((Class)PKSearchResults);
  [v12 setLocationResults:*(void *)(*(void *)(a1 + 32) + 264)];
  id v10 = [*(id *)(a1 + 32) remoteObjectProxy];
  id v11 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
  [v10 searchDidReceivePartialResults:v12 forIdentifier:v11];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002BA0A8(uint64_t a1)
{
}

void sub_1002BA0B0(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002BA26C;
  v13[3] = &unk_10072F078;
  void v13[4] = *(void *)(a1 + 32);
  char v14 = v2;
  id v3 = objc_retainBlock(v13);
  if (v2)
  {
    uint64_t v4 = +[NSError errorWithDomain:PKSearchErrorDomain code:4 userInfo:0];
    id v5 = [*(id *)(a1 + 32) remoteObjectProxy];
    id v6 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
    [v5 searchDidCompleteWithError:v4 forIdentifier:v6];

    ((void (*)(void *))v3[2])(v3);
  }
  else
  {
    id v7 = PKLogFacilityTypeGetObject();
    PKTimeProfileBegin();

    uint64_t v8 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002BA504;
    v10[3] = &unk_100730668;
    uint64_t v9 = *(void *)(a1 + 48);
    void v10[4] = v8;
    uint64_t v12 = v9;
    id v11 = v3;
    [v8 _suggestionsForCurrentQueryWithCompletion:v10];
  }
}

void sub_1002BA26C(uint64_t a1)
{
  kdebug_trace();
  int v2 = PKLogFacilityTypeGetObject();
  id v3 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
  id v4 = (id)PKTimeProfileEnd();

  LODWORD(v3) = PKSearchDetailedLoggingEnabledInWallet();
  BOOL v5 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      CFStringRef v6 = @"aborted";
      id v7 = *(void **)(*(void *)(a1 + 32) + 64);
      if (!*(unsigned char *)(a1 + 40)) {
        CFStringRef v6 = @"completed";
      }
      int v17 = 138412546;
      CFStringRef v18 = v6;
      __int16 v19 = 2112;
      id v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Search query %@: %@", (uint8_t *)&v17, 0x16u);
    }
  }
  else if (v5)
  {
    if (*(unsigned char *)(a1 + 40)) {
      CFStringRef v8 = @"aborted";
    }
    else {
      CFStringRef v8 = @"completed";
    }
    uint64_t v9 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
    int v17 = 138412546;
    CFStringRef v18 = v8;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Search query %@:  %@", (uint8_t *)&v17, 0x16u);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56));
  *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 41) = 0;
  id v10 = [*(id *)(*(void *)(a1 + 32) + 48) lastObject];
  uint64_t v11 = [v10 identifier];
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = *(void **)(v12 + 32);
  *(void *)(v12 + 32) = v11;

  uint64_t v14 = *(void *)(a1 + 32);
  if (v10)
  {
    [*(id *)(v14 + 48) removeObject:v10];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 56));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 64), v10);
    objc_msgSend(*(id *)(a1 + 32), "_queue_performCurrentQuery");
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 56));
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 64);
    *(void *)(v15 + 64) = 0;
  }
}

void sub_1002BA504(uint64_t a1, void *a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  id v5 = a2;
  id v6 = (id)PKTimeProfileEnd();

  id v12 = objc_alloc_init((Class)PKSearchResults);
  [v12 setSuggestedAutocompleteTokens:v5];

  id v7 = [*(id *)(a1 + 32) remoteObjectProxy];
  CFStringRef v8 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
  [v7 searchDidReceivePartialResults:v12 forIdentifier:v8];

  uint64_t v9 = [*(id *)(a1 + 32) remoteObjectProxy];
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 64) identifier];
  [v9 searchDidCompleteWithError:v10 forIdentifier:v11];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

int64_t sub_1002BC058(id a1, id a2, id a3)
{
  return (int64_t)[a3 compare:a2];
}

void sub_1002BC674(uint64_t a1, void *a2)
{
  id v3 = [a2 unsignedIntegerValue];
  id v4 = [*(id *)(a1 + 32) _transactionRequestForCurrentFilters];
  [v4 setMerchant:0];
  [v4 setMerchantCategory:v3];
  [v4 setLimit:1];
  id v5 = [*(id *)(*(void *)(a1 + 32) + 312) transactionsForRequest:v4];
  id v6 = [v5 count];

  if (v6)
  {
    id v7 = objc_alloc_init((Class)PKPaymentTransactionGroup);
    [v7 setType:0];
    [v7 setMerchantCategory:v3];
    [v4 setLimit:0];
    id v10 = 0;
    uint64_t v11 = 0;
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v8 = 0;
    }
    else {
      CFStringRef v8 = &v10;
    }
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 312), "totalAmount:forTransactionsWithRequest:count:", v8, v4, &v11, v10);
    [v7 setTransactionCount:v11];
    [v7 setTotalAmount:v10];
    id v9 = objc_alloc_init((Class)PKSearchTransactionGroupResult);
    [v9 setGroup:v7];
    [*(id *)(a1 + 40) addObject:v9];
  }
}

void sub_1002BCEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id location)
{
  objc_destroyWeak(v44);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1002BCED4(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init((Class)NSMutableCharacterSet);
  [v2 addCharactersInString:@"'"];
  [v2 addCharactersInString:@"\""];
  [v2 addCharactersInString:@"%"];
  [v2 addCharactersInString:@"*"];
  id v3 = (char *)[v1 length];
  id v4 = [v1 mutableCopy];
  uint64_t v5 = 0;
  do
  {
    id v6 = objc_msgSend(v4, "rangeOfCharacterFromSet:options:range:", v2, 0, v5, v3);
    if (v6 == (unsigned char *)0x7FFFFFFFFFFFFFFFLL
      || (id v7 = v6,
          [v4 insertString:@"\\"" atIndex:v6],
          uint64_t v5 = (uint64_t)(v7 + 2),
          [v4 length] <= v7 + 2))
    {
      id v3 = 0;
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      id v3 = (char *)((unsigned char *)[v4 length] - v7 - 2);
    }
  }
  while (v5 != 0x7FFFFFFFFFFFFFFFLL);
  id v8 = [v4 copy];

  return v8;
}

void sub_1002BD01C(uint64_t a1, void *a2)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v21;
    *(void *)&long long v5 = 138412290;
    long long v19 = v5;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        id v10 = objc_msgSend(v9, "uniqueIdentifier", v19, (void)v20);
        uint64_t v11 = +[PKCoreSpotlightUtilities transactionIdentifierFromSpotlightIdentifier:v10];

        id v12 = [*(id *)(*(void *)(a1 + 32) + 312) transactionWithTransactionIdentifier:v11];
        id v13 = v12;
        if (v12)
        {
          if (*(unsigned char *)(a1 + 56)
            && *(unsigned char *)(*(void *)(a1 + 32) + 184)
            && ([v12 referenceIdentifier],
                uint64_t v14 = objc_claimAutoreleasedReturnValue(),
                id v15 = [v14 length],
                v14,
                v15))
          {
            id v16 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Ignoring purchase with reference identifier.", buf, 2u);
            }
          }
          else
          {
            id v16 = objc_alloc_init((Class)PKSearchTransactionResult);
            [v16 setTransaction:v13];
            int v17 = [v9 domainIdentifier];
            [v16 setPassUniqueIdentifier:v17];

            [*(id *)(a1 + 40) addObject:v16];
          }
        }
        else
        {
          id v16 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v19;
            id v25 = v9;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "No transaction found for searchable item %@", buf, 0xCu);
          }
        }

        if (!*(unsigned char *)(a1 + 57) && (unint64_t)[*(id *)(a1 + 40) count] >= 3)
        {
          id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
          [WeakRetained cancel];

          goto LABEL_21;
        }
      }
      id v6 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
LABEL_21:
}

void sub_1002BD2DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002BD3D4;
  v8[3] = &unk_100738B18;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  char v14 = *(unsigned char *)(a1 + 64);
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v4, v8);
}

id sub_1002BD3D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      uint64_t v15 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error with merchant query: %@", (uint8_t *)&v14, 0xCu);
    }

    if (PKSearchDetailedLoggingEnabledInWallet())
    {
      id v4 = [*(id *)(a1 + 32) domain];
      id v5 = CSSearchQueryErrorDomain;
      if (v4 == v5)
      {
      }
      else
      {
        uint64_t v6 = v5;
        if (!v4 || !v5)
        {

LABEL_16:
          goto LABEL_17;
        }
        unsigned int v7 = [v4 isEqualToString:v5];

        if (!v7) {
          goto LABEL_16;
        }
      }
      id v8 = [*(id *)(a1 + 32) code];

      if (v8 == (id)-2002)
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *(void *)(a1 + 40);
          id v10 = [*(id *)(*(void *)(a1 + 48) + 64) text];
          uint64_t v11 = [*(id *)(*(void *)(a1 + 48) + 64) keyboardLanguage];
          int v14 = 138412802;
          uint64_t v15 = v9;
          __int16 v16 = 2112;
          int v17 = v10;
          __int16 v18 = 2112;
          long long v19 = v11;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid query with filters: %@, search: %@, language: %@", (uint8_t *)&v14, 0x20u);
        }
        id v4 = v3;
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 72) || [*(id *)(a1 + 56) count]) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  id v13 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No transactions found, using fuzzy matching", (uint8_t *)&v14, 2u);
  }

  return [*(id *)(a1 + 48) _transactionsForCurrentQueryWithFuzzing:1 completion:*(void *)(a1 + 64)];
}

void sub_1002BDD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,id location)
{
  objc_destroyWeak(v52);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a48, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002BDD6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += [v3 count];
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = v3;
  id v5 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v26;
    *(void *)&long long v6 = 138412290;
    long long v23 = v6;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v11 = objc_msgSend(v10, "uniqueIdentifier", v23);
        id v12 = +[PKCoreSpotlightUtilities transactionIdentifierFromSpotlightIdentifier:v11];

        id v13 = [*(id *)(*(void *)(a1 + 32) + 312) transactionWithTransactionIdentifier:v12];
        int v14 = [v13 merchant];
        id v15 = [*(id *)(a1 + 40) count];
        if (v14)
        {
          id v16 = v15;
          [*(id *)(a1 + 32) _updateMerchantArray:*(void *)(a1 + 40) allUniqueMerchants:*(void *)(a1 + 48) counts:0 withMerchantIfUnique:v14];
          id v17 = [*(id *)(a1 + 40) count];
          if (v4 >= 0x15 && v17 == v16 && ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) == 5)
          {
            long long v19 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              id v21 = [obj count];
              *(_DWORD *)long long buf = 134217984;
              id v30 = v21;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Found same merchants too many times among %ld transactions, cancelling query", buf, 0xCu);
            }

LABEL_22:
            id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
            [WeakRetained cancel];

            goto LABEL_23;
          }
        }
        else
        {
          __int16 v18 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v23;
            id v30 = v10;
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "No transaction found for searchable item %@", buf, 0xCu);
          }
        }
        if ([*(id *)(*(void *)(a1 + 32) + 64) type] != (id)4
          && (unint64_t)[*(id *)(a1 + 40) count] > 2)
        {
          goto LABEL_22;
        }
      }
      id v7 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_23:
}

void sub_1002BE078(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002BE1A8;
  v12[3] = &unk_100745E50;
  id v13 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v14 = v5;
  uint64_t v15 = v6;
  id v16 = *(id *)(a1 + 48);
  char v22 = *(unsigned char *)(a1 + 96);
  id v17 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 88);
  id v19 = v7;
  uint64_t v21 = v8;
  id v9 = *(id *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 80);
  id v18 = v9;
  uint64_t v20 = v10;
  id v11 = v3;
  dispatch_async(v4, v12);
}

void sub_1002BE1A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412290;
      uint64_t v24 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Error with transaction query: %@", (uint8_t *)&v23, 0xCu);
    }

    if (PKSearchDetailedLoggingEnabledInWallet())
    {
      unint64_t v4 = [*(id *)(a1 + 32) domain];
      id v5 = CSSearchQueryErrorDomain;
      if (v4 == v5)
      {
      }
      else
      {
        uint64_t v6 = v5;
        if (!v4 || !v5)
        {

LABEL_16:
          goto LABEL_17;
        }
        unsigned int v7 = [v4 isEqualToString:v5];

        if (!v7) {
          goto LABEL_16;
        }
      }
      id v8 = [*(id *)(a1 + 32) code];

      if (v8 == (id)-2002)
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = *(void *)(a1 + 40);
          uint64_t v10 = [*(id *)(*(void *)(a1 + 48) + 64) text];
          id v11 = [*(id *)(*(void *)(a1 + 48) + 64) keyboardLanguage];
          int v23 = 138412802;
          uint64_t v24 = v9;
          __int16 v25 = 2112;
          long long v26 = v10;
          __int16 v27 = 2112;
          long long v28 = v11;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Invalid query with filters: %@, search: %@, language: %@", (uint8_t *)&v23, 0x20u);
        }
        unint64_t v4 = v3;
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  if ([*(id *)(a1 + 56) count] || *(unsigned char *)(a1 + 104))
  {
    if (*(void *)(a1 + 32)
      || *(void *)(a1 + 96) >= 2uLL
      && (id v14 = [*(id *)(a1 + 56) count], v14 == objc_msgSend(*(id *)(a1 + 72), "count"))
      || !*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
    {
      uint64_t v12 = *(void *)(a1 + 80);
      id v13 = [*(id *)(a1 + 56) copy];
      (*(void (**)(uint64_t, id, void))(v12 + 16))(v12, v13, *(void *)(a1 + 32));
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 96);
      id v16 = [*(id *)(a1 + 56) count];
      if (v16 == [*(id *)(a1 + 72) count])
      {
        id v17 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v23) = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No new merchant found, retrying query", (uint8_t *)&v23, 2u);
        }

        ++v15;
      }
      id v18 = *(void **)(a1 + 48);
      id v13 = [*(id *)(a1 + 56) copy];
      id v19 = [*(id *)(a1 + 64) copy];
      [v18 _uniqueMerchantsForCurrenQueryWithMerchants:v13 allUniqueMerchants:v19 attemptCount:v15 fuzzyMatching:*(unsigned __int8 *)(a1 + 104) completion:*(void *)(a1 + 80)];
    }
  }
  else
  {
    uint64_t v20 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "No merchants found, using fuzzy matching", (uint8_t *)&v23, 2u);
    }

    uint64_t v21 = *(void **)(a1 + 48);
    id v13 = [*(id *)(a1 + 56) copy];
    id v22 = [*(id *)(a1 + 64) copy];
    [v21 _uniqueMerchantsForCurrenQueryWithMerchants:v13 allUniqueMerchants:v22 attemptCount:0 fuzzyMatching:1 completion:*(void *)(a1 + 80)];
  }
}

id sub_1002BF880(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  unsigned int v7 = [a2 uniqueIdentifier];
  id v8 = [v5 objectForKey:v7];

  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = [v6 uniqueIdentifier];

  id v11 = [v9 objectForKey:v10];

  id v12 = [v11 compare:v8];
  return v12;
}

void sub_1002BFD48(id a1)
{
  uint64_t v1 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", &off_10078B448, &off_10078B4D8, &off_10078B490, 0);
  uint64_t v2 = qword_100808DE8;
  qword_100808DE8 = v1;
  _objc_release_x1(v1, v2);
}

id sub_1002C0160(uint64_t a1, void *a2)
{
  return _[a2 shouldBeCombinedWithMerchant:*(void *)(a1 + 32)];
}

void sub_1002C05D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1002C05F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002C06E4;
  v8[3] = &unk_100738B18;
  id v9 = *(id *)(a1 + 40);
  id v10 = v3;
  char v14 = *(unsigned char *)(a1 + 64);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1002C06E4(void *a1)
{
  id v55 = objc_alloc_init((Class)NSMutableArray);
  id v59 = objc_alloc_init((Class)NSMutableDictionary);
  id v52 = objc_alloc_init((Class)NSMutableDictionary);
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  id obj = (id)a1[4];
  id v60 = a1;
  id v54 = [obj countByEnumeratingWithState:&v73 objects:v80 count:16];
  if (v54)
  {
    uint64_t v53 = *(void *)v74;
    do
    {
      uint64_t v2 = 0;
      do
      {
        if (*(void *)v74 != v53) {
          objc_enumerationMutation(obj);
        }
        id v3 = *(void **)(*((void *)&v73 + 1) + 8 * (void)v2);
        unint64_t v4 = [(id)a1[5] objectForKey:v3];
        id v5 = [v4 identifier];
        if (v5)
        {
          id v56 = v4;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          id v6 = v52;
          id v7 = [v6 countByEnumeratingWithState:&v69 objects:v79 count:16];
          if (v7)
          {
            id v8 = v7;
            uint64_t v9 = *(void *)v70;
            while (2)
            {
              for (i = 0; i != v8; i = (char *)i + 1)
              {
                if (*(void *)v70 != v9) {
                  objc_enumerationMutation(v6);
                }
                id v11 = *(void **)(*((void *)&v69 + 1) + 8 * i);
                id v12 = v5;
                id v13 = v11;
                if (v12 == v13)
                {

LABEL_23:
                  id v16 = [v6 objectForKey:v12];
                  id v17 = [v59 objectForKey:v16];
                  [v17 addObject:v16];

                  a1 = v60;
                  unint64_t v4 = v56;
                  goto LABEL_33;
                }
                char v14 = v13;
                if (v13)
                {
                  unsigned int v15 = [v12 isEqualToString:v13];

                  if (v15) {
                    goto LABEL_23;
                  }
                }
                else
                {
                }
              }
              id v8 = [v6 countByEnumeratingWithState:&v69 objects:v79 count:16];
              a1 = v60;
              if (v8) {
                continue;
              }
              break;
            }
          }

          unint64_t v4 = v56;
        }
        if (v4)
        {
          id v6 = +[PKPeerPaymentCounterpartHandleFormatter displayNameForCounterpartHandle:v3 contact:v4];
        }
        else
        {
          id v6 = 0;
        }
        if (*((unsigned char *)a1 + 72)) {
          goto LABEL_26;
        }
        id v21 = v3;
        id v22 = v6;
        int v23 = v22;
        if (v21 == v22)
        {

LABEL_45:
          if (([v23 localizedCaseInsensitiveContainsString:a1[6]] & 1) == 0) {
            goto LABEL_28;
          }
LABEL_26:
          [v55 addObject:v3];
          id v18 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithObjects:", v3, 0);
          [v59 setObject:v18 forKey:v3];

          if (v5) {
            [v52 setObject:v3 forKey:v5];
          }
          goto LABEL_28;
        }
        if (v21) {
          BOOL v24 = v22 == 0;
        }
        else {
          BOOL v24 = 1;
        }
        if (v24)
        {

          if (!v23) {
            goto LABEL_28;
          }
        }
        else
        {
          unsigned __int8 v25 = [v21 isEqualToString:v22];

          if (v25) {
            goto LABEL_45;
          }
        }
        id v26 = [(id)a1[6] length];
        if ([v23 length] >= v26)
        {
          id v27 = [v23 substringToIndex:v26];
        }
        else
        {
          id v27 = v23;
        }
        long long v28 = v27;
        if (![v27 localizedCaseInsensitiveCompare:a1[6]])
        {
LABEL_64:

          goto LABEL_26;
        }
        long long v49 = v28;
        id v57 = v4;
        long long v29 = [v23 componentsSeparatedByString:@" "];
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        id v51 = v29;
        id v30 = [v51 countByEnumeratingWithState:&v65 objects:v78 count:16];
        if (v30)
        {
          id v31 = v30;
          uint64_t v32 = *(void *)v66;
          while (2)
          {
            for (j = 0; j != v31; j = (char *)j + 1)
            {
              if (*(void *)v66 != v32) {
                objc_enumerationMutation(v51);
              }
              long long v34 = *(void **)(*((void *)&v65 + 1) + 8 * (void)j);
              if ([v34 length] >= v26)
              {
                id v35 = [v34 substringToIndex:v26];
              }
              else
              {
                id v35 = v34;
              }
              __int16 v36 = v35;
              id v37 = [v35 localizedCaseInsensitiveCompare:v60[6]];

              if (!v37)
              {

                a1 = v60;
                unint64_t v4 = v57;
                long long v28 = v49;
                goto LABEL_64;
              }
            }
            id v31 = [v51 countByEnumeratingWithState:&v65 objects:v78 count:16];
            if (v31) {
              continue;
            }
            break;
          }
        }

        a1 = v60;
        unint64_t v4 = v57;
LABEL_28:
        id v19 = [v55 count];
        unint64_t v20 = 12;
        if (!*((unsigned char *)a1 + 72)) {
          unint64_t v20 = 3;
        }
        if ((unint64_t)v19 >= v20 && [*(id *)(a1[7] + 64) type] != (id)6)
        {

          goto LABEL_68;
        }
        id v12 = v5;
LABEL_33:

        uint64_t v2 = (char *)v2 + 1;
      }
      while (v2 != v54);
      id v38 = [obj countByEnumeratingWithState:&v73 objects:v80 count:16];
      id v54 = v38;
    }
    while (v38);
  }
LABEL_68:

  if (a1[8])
  {
    id v39 = objc_alloc_init((Class)NSMutableArray);
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    id v58 = v55;
    id v40 = [v58 countByEnumeratingWithState:&v61 objects:v77 count:16];
    if (v40)
    {
      id v41 = v40;
      uint64_t v42 = *(void *)v62;
      do
      {
        for (k = 0; k != v41; k = (char *)k + 1)
        {
          if (*(void *)v62 != v42) {
            objc_enumerationMutation(v58);
          }
          long long v44 = [v59 objectForKey:*(void *)(*((void *)&v61 + 1) + 8 * (void)k)];
          id v45 = objc_alloc_init((Class)PKPaymentTransactionGroup);
          [v45 setHandles:v44];
          [v45 setType:12];
          objc_msgSend(v45, "setTransactionCount:", objc_msgSend(*(id *)(v60[7] + 312), "transactionsCountForTransactionSourceIdentifiers:withPeerPaymentCounterpartHandles:startDate:endDate:", *(void *)(v60[7] + 160), v44, *(void *)(v60[7] + 96), *(void *)(v60[7] + 104)));
          id v46 = objc_alloc_init((Class)PKSearchTransactionGroupResult);
          [v46 setGroup:v45];
          [v39 addObject:v46];
        }
        id v41 = [v58 countByEnumeratingWithState:&v61 objects:v77 count:16];
      }
      while (v41);
    }

    uint64_t v47 = v60[8];
    id v48 = [v39 copy];
    (*(void (**)(uint64_t, id))(v47 + 16))(v47, v48);
  }
}

void sub_1002C0DB8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(v9 + 8) + 40))
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 320);
    uint64_t v12 = *(void *)(v10 + 200);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1002C0EC8;
    v13[3] = &unk_100745F38;
    void v13[4] = v10;
    uint64_t v16 = v9;
    id v15 = v7;
    id v14 = v6;
    [v11 accountUsersForAccountWithIdentifier:v12 completion:v13];
  }
}

void sub_1002C0EC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C0FAC;
  block[3] = &unk_100730A08;
  id v10 = v3;
  uint64_t v11 = v4;
  long long v8 = *(_OWORD *)(a1 + 48);
  id v6 = (id)v8;
  long long v13 = v8;
  id v12 = *(id *)(a1 + 40);
  id v7 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_1002C0FAC(void *a1)
{
  id v2 = [objc_alloc((Class)PKAccountUserCollection) initWithAccountUsers:a1[4]];
  uint64_t v3 = *(void *)(a1[8] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  [*(id *)(a1[5] + 208) setObject:*(void *)(*(void *)(a1[8] + 8) + 40) forKey:*(void *)(a1[5] + 200)];
  id v5 = *(uint64_t (**)(void))(a1[7] + 16);
  return v5();
}

void sub_1002C1040(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) accountUsers];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v9 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v22;
LABEL_3:
    uint64_t v12 = 0;
    while (1)
    {
      if (*(void *)v22 != v11) {
        objc_enumerationMutation(v8);
      }
      long long v13 = *(void **)(*((void *)&v21 + 1) + 8 * v12);
      id v14 = [v13 accessLevel];
      if ([v13 isCurrentUser] && v14 == (id)1) {
        break;
      }
      if (v10 == (id)++v12)
      {
        id v10 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (v10) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }

    if (![v8 count]) {
      goto LABEL_16;
    }
    uint64_t v16 = *(void *)(a1 + 32);
    if (*(void *)(v16 + 216))
    {
      v7[2](v7, v6, 0);
    }
    else
    {
      id v17 = *(void **)(v16 + 328);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1002C126C;
      v18[3] = &unk_100736470;
      void v18[4] = v16;
      unint64_t v20 = v7;
      id v19 = v6;
      [v17 familyMembersWithCachePolicy:0 completion:v18];
    }
  }
  else
  {
LABEL_12:

LABEL_16:
    v7[2](v7, v6, 1);
  }
}

void sub_1002C126C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002C1344;
  v7[3] = &unk_100730C10;
  void v7[4] = v4;
  id v8 = v3;
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1002C1344(void *a1)
{
  id v2 = [objc_alloc((Class)PKFamilyMemberCollection) initWithFamilyMembers:a1[5]];
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 216);
  *(void *)(v3 + 216) = v2;

  id v5 = *(uint64_t (**)(void))(a1[7] + 16);
  return v5();
}

void sub_1002C13B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ([a4 isCanceled]
    || ([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) accountUsers],
        id v5 = objc_claimAutoreleasedReturnValue(),
        id v6 = [v5 count],
        v5,
        v6 == (id)1))
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v7();
    return;
  }
  id v37 = objc_alloc_init((Class)NSMutableArray);
  long long v33 = [*(id *)(a1 + 32) _transactionRequestForCurrentFilters];
  long long v34 = [*(id *)(*(void *)(a1 + 32) + 216) familyMembersByAltDSID];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id obj = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) accountUsers];
  id v36 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (!v36) {
    goto LABEL_43;
  }
  uint64_t v35 = *(void *)v41;
  while (2)
  {
    for (i = 0; i != v36; i = (char *)i + 1)
    {
      if (*(void *)v41 != v35) {
        objc_enumerationMutation(obj);
      }
      id v9 = *(void **)(*((void *)&v40 + 1) + 8 * i);
      id v10 = [v9 altDSID];
      uint64_t v11 = [v9 nameComponents];
      if (v10)
      {
        uint64_t v12 = [v34 objectForKey:v10];
        long long v13 = v12;
        if (*(unsigned char *)(a1 + 64)) {
          goto LABEL_21;
        }
        if (v12)
        {
          id v14 = [v12 firstName];
          if ([v14 localizedCaseInsensitiveContainsString:*(void *)(a1 + 40)]) {
            goto LABEL_19;
          }
          id v15 = [v13 lastName];
          unsigned __int8 v16 = [v15 localizedCaseInsensitiveContainsString:*(void *)(a1 + 40)];

          if (v16) {
            goto LABEL_21;
          }
        }
      }
      else
      {
        long long v13 = 0;
        if (*(unsigned char *)(a1 + 64)) {
          goto LABEL_21;
        }
      }
      id v14 = [v11 givenName];
      if ([v14 localizedCaseInsensitiveContainsString:*(void *)(a1 + 40)])
      {
LABEL_19:

        goto LABEL_21;
      }
      id v17 = [v11 familyName];
      unsigned __int8 v18 = [v17 localizedCaseInsensitiveContainsString:*(void *)(a1 + 40)];

      if ((v18 & 1) == 0) {
        goto LABEL_35;
      }
LABEL_21:
      unsigned int v19 = [v9 isCurrentUser];
      uint64_t v20 = *(void *)(a1 + 32);
      long long v21 = *(void **)(v20 + 312);
      if (v19)
      {
        id v22 = [*(id *)(v20 + 312) transactionSourceIdentifiersForPassUniqueIdentifier:*(void *)(v20 + 168)];
        if (v22) {
          goto LABEL_28;
        }
      }
      else
      {
        long long v23 = [v9 altDSID];
        long long v24 = [v21 transactionSourceIdentifierForAccountUserAltDSID:v23 accountIdentifier:*(void *)(*(void *)(a1 + 32) + 200)];

        if (v24) {
          id v22 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", v24, 0);
        }
        else {
          id v22 = 0;
        }

        if (v22)
        {
LABEL_28:
          [v33 setTransactionSourceIdentifiers:v22];
          id v38 = 0;
          uint64_t v39 = 0;
          if (*(unsigned char *)(a1 + 64)) {
            unsigned __int8 v25 = 0;
          }
          else {
            unsigned __int8 v25 = &v38;
          }
          [*(id *)(*(void *)(a1 + 32) + 312) totalAmount:v25 forTransactionsWithRequest:v33 count:&v39];
          if (v39)
          {
            id v26 = objc_alloc_init((Class)PKPaymentTransactionGroup);
            [v26 setAccountUser:v9];
            [v26 setFamilyMember:v13];
            [v26 setType:16];
            [v26 setTransactionCount:v39];
            [v26 setTotalAmount:v38];
            id v27 = objc_alloc_init((Class)PKSearchTransactionGroupResult);
            [v27 setGroup:v26];
            [v37 addObject:v27];
          }
        }
      }

LABEL_35:
      id v28 = [v37 count];
      unint64_t v29 = 12;
      if (!*(unsigned char *)(a1 + 64)) {
        unint64_t v29 = 3;
      }
      if ((unint64_t)v28 >= v29 && [*(id *)(*(void *)(a1 + 32) + 64) type] != (id)6)
      {

        goto LABEL_43;
      }
    }
    id v36 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
    if (v36) {
      continue;
    }
    break;
  }
LABEL_43:

  uint64_t v30 = *(void *)(a1 + 48);
  id v31 = [v37 copy];
  (*(void (**)(uint64_t, id))(v30 + 16))(v30, v31);
}

void sub_1002C2538(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 272) copy];
  if ([v5 count]) {
    [v4 addObject:v5];
  }
  id v6 = [*(id *)(*(void *)(a1 + 32) + 256) copy];
  if ([v6 count]) {
    [v4 addObject:v6];
  }
  id v7 = [objc_alloc((Class)NSMutableArray) initWithArray:v3];
  [v7 addObjectsFromArray:*(void *)(*(void *)(a1 + 32) + 264)];
  long long v50 = v7;
  id v8 = [v7 sortedArrayUsingComparator:&stru_100746068];
  id v9 = [v8 count];
  if (v9) {
    id v9 = [v4 addObject:v8];
  }
  long long v49 = v8;
  if ((unint64_t)sub_1002C2AC8((uint64_t)v9, v4) > *(void *)(a1 + 56))
  {
    do
    {
      [v4 sortUsingComparator:&stru_100745FA0];
      id v10 = [v4 firstObject];
      uint64_t v11 = [v10 lastObject];
      uint64_t v12 = objc_msgSend(v10, "pk_arrayByRemovingObject:", v11);

      if ([v12 count]) {
        id v13 = [v4 replaceObjectAtIndex:0 withObject:v12];
      }
      else {
        id v13 = [v4 removeObjectAtIndex:0];
      }
      unint64_t v14 = sub_1002C2AC8((uint64_t)v13, v4);
    }
    while (v14 > *(void *)(a1 + 56));
  }
  id v51 = v6;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v15 = v4;
  id v16 = [v15 countByEnumeratingWithState:&v60 objects:v66 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v61;
    do
    {
      for (i = 0; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v61 != v18) {
          objc_enumerationMutation(v15);
        }
        [*(id *)(a1 + 40) addObjectsFromArray:*(void *)(*((void *)&v60 + 1) + 8 * i)];
      }
      id v17 = [v15 countByEnumeratingWithState:&v60 objects:v66 count:16];
    }
    while (v17);
  }

  uint64_t v20 = (char *)[*(id *)(a1 + 40) count];
  if (!*(unsigned char *)(a1 + 64))
  {
    long long v21 = v20;
    if ((unint64_t)v20 <= 4)
    {
      id v22 = [*(id *)(*(void *)(a1 + 32) + 64) dateToken];
      if (v22
        || ([*(id *)(*(void *)(a1 + 32) + 64) tokens],
            id v22 = (id)objc_claimAutoreleasedReturnValue(),
            ![v22 count]))
      {
LABEL_22:

        goto LABEL_23;
      }
      id v26 = [*(id *)(*(void *)(a1 + 32) + 64) text];
      id v27 = [v26 length];

      if (!v27)
      {
        id v46 = v5;
        id v47 = v3;
        id v22 = objc_alloc_init((Class)NSMutableSet);
        long long v56 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        id obj = *(id *)(*(void *)(a1 + 32) + 288);
        id v28 = [obj countByEnumeratingWithState:&v56 objects:v65 count:16];
        if (v28)
        {
          id v29 = v28;
          uint64_t v30 = *(void *)v57;
LABEL_30:
          uint64_t v31 = 0;
          while (1)
          {
            if (*(void *)v57 != v30) {
              objc_enumerationMutation(obj);
            }
            uint64_t v32 = objc_msgSend(*(id *)(*((void *)&v56 + 1) + 8 * v31), "transaction", v46, v47);
            long long v33 = [v32 transactionDate];
            long long v34 = PKStartOfMonth();
            [v22 addObject:v34];

            uint64_t v35 = &v21[(void)[v22 count]];
            if ((unint64_t)v35 > 4) {
              break;
            }
            if (v29 == (id)++v31)
            {
              id v29 = [obj countByEnumeratingWithState:&v56 objects:v65 count:16];
              if (v29) {
                goto LABEL_30;
              }
              break;
            }
          }
        }

        if ((unint64_t)[v22 count] >= 2)
        {
          id v36 = [v22 allObjects];
          id v37 = [v36 sortedArrayUsingComparator:&stru_100745FE0];

          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          id v38 = v37;
          id v39 = [v38 countByEnumeratingWithState:&v52 objects:v64 count:16];
          if (v39)
          {
            id v40 = v39;
            uint64_t v41 = *(void *)v53;
            do
            {
              for (j = 0; j != v40; j = (char *)j + 1)
              {
                if (*(void *)v53 != v41) {
                  objc_enumerationMutation(v38);
                }
                uint64_t v43 = *(void *)(*((void *)&v52 + 1) + 8 * (void)j);
                id v44 = objc_alloc_init((Class)PKSearchDateResult);
                [v44 setType:2];
                [v44 setStartDate:v43];
                id v45 = PKEndOfMonth();
                [v44 setEndDate:v45];

                [*(id *)(a1 + 40) safelyAddObject:v44];
              }
              id v40 = [v38 countByEnumeratingWithState:&v52 objects:v64 count:16];
            }
            while (v40);
          }
        }
        id v5 = v46;
        id v3 = v47;
        goto LABEL_22;
      }
    }
  }
LABEL_23:
  objc_msgSend(*(id *)(a1 + 40), "sortUsingComparator:", &stru_100746020, v46, v47);
  long long v23 = (char *)[*(id *)(a1 + 40) count];
  if ((unint64_t)v23 >= 6) {
    objc_msgSend(*(id *)(a1 + 40), "removeObjectsInRange:", 5, v23 - 5);
  }
  uint64_t v24 = *(void *)(a1 + 48);
  id v25 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id))(v24 + 16))(v24, v25);
}

uint64_t sub_1002C2AC8(uint64_t a1, void *a2)
{
  id v2 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v2);
        }
        v5 += (uint64_t)[*(id *)(*((void *)&v9 + 1) + 8 * i) count];
      }
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

int64_t sub_1002C2BC4(id a1, NSArray *a2, NSArray *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  id v6 = [(NSArray *)v4 count];
  if (v6 <= (id)[(NSArray *)v5 count])
  {
    id v8 = [(NSArray *)v4 count];
    int64_t v7 = v8 < (id)[(NSArray *)v5 count];
  }
  else
  {
    int64_t v7 = -1;
  }

  return v7;
}

int64_t sub_1002C2C48(id a1, NSDate *a2, NSDate *a3)
{
  return [(NSDate *)a3 compare:a2];
}

int64_t sub_1002C2C54(id a1, PKSearchAutocompleteToken *a2, PKSearchAutocompleteToken *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  unint64_t v6 = sub_1002C2D10(v4);
  unint64_t v7 = sub_1002C2D10(v5);
  if (v6 >= v7)
  {
    if (v6 <= v7)
    {
      if ([(PKSearchAutocompleteToken *)v4 tokenType]
        || ([(PKSearchAutocompleteToken *)v4 group],
            long long v9 = objc_claimAutoreleasedReturnValue(),
            id v10 = [v9 type],
            v9,
            v10 != (id)13))
      {
        int64_t v8 = 0;
      }
      else
      {
        int64_t v8 = sub_1002C4708(v11, v4, v5);
      }
    }
    else
    {
      int64_t v8 = 1;
    }
  }
  else
  {
    int64_t v8 = -1;
  }

  return v8;
}

uint64_t sub_1002C2D10(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 12;
  switch((unint64_t)[v1 tokenType])
  {
    case 0uLL:
      id v3 = [v1 group];
      id v4 = [v3 type];

      uint64_t v5 = 12;
      if (v4 == (id)13) {
        uint64_t v5 = 10;
      }
      if (v4 == (id)1) {
        uint64_t v5 = 1;
      }
      if (v4) {
        uint64_t v2 = v5;
      }
      else {
        uint64_t v2 = 0;
      }
      break;
    case 2uLL:
      uint64_t v2 = 7;
      break;
    case 3uLL:
      uint64_t v2 = 9;
      break;
    case 4uLL:
      uint64_t v2 = 3;
      break;
    case 5uLL:
      uint64_t v2 = 4;
      break;
    case 6uLL:
      uint64_t v2 = 5;
      break;
    case 7uLL:
      uint64_t v2 = 6;
      break;
    case 8uLL:
      uint64_t v2 = 8;
      break;
    case 9uLL:
      uint64_t v2 = 11;
      break;
    default:
      break;
  }

  return v2;
}

void sub_1002C3C10(void *a1, void *a2, void *a3)
{
  id v16 = a2;
  unint64_t v5 = a3;
  uint64_t v6 = [v16 firstObject];
  unint64_t v7 = v5 | v6;

  if (v7)
  {
    uint64_t v14 = a1[6];
    id v10 = [v16 firstObject];
    (*(void (**)(uint64_t, void *, unint64_t))(v14 + 16))(v14, v10, v5);
  }
  else
  {
    int64_t v8 = *(void **)(a1[4] + 312);
    long long v9 = +[PKCoreSpotlightUtilities spotlightIdentifierForTransactionIdentifier:a1[5]];
    id v10 = [v8 indexerItemWithUniqueIdentifier:v9];

    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    long long v12 = v11;
    if (v10)
    {
      id v13 = [v10 dictionaryRepresentation];
      [v12 setObject:v13 forKeyedSubscript:@"indexerItem"];
    }
    else
    {
      [v11 setObject:@"Item not found in Spotlight" forKeyedSubscript:@"indexerItem"];
    }
    id v15 = +[NSError errorWithDomain:PKSearchErrorDomain code:6 userInfo:v12];
    (*(void (**)(void))(a1[6] + 16))();
  }
}

id sub_1002C3FD4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObjectsFromArray:a2];
}

uint64_t sub_1002C3FE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

void sub_1002C40C4(void *a1)
{
  id v2 = [objc_alloc((Class)PKAccountUserCollection) initWithAccountUsers:a1[4]];
  [*(id *)(a1[5] + 208) setObject:v2 forKey:a1[6]];
}

void sub_1002C4210(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 88);
  *(void *)(v1 + 88) = 0;
}

void sub_1002C4344(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) remoteObjectProxy];
  [v2 invalidateSearchResults];

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 84));
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 0;
  id v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 84);
  os_unfair_lock_unlock(v3);
}

int64_t sub_1002C4708(id a1, id a2, id a3)
{
  id v4 = a3;
  unint64_t v5 = [a2 group];
  id v6 = [v5 transactionCount];

  unint64_t v7 = [v4 group];

  id v8 = [v7 transactionCount];
  if (v6 > v8) {
    return -1;
  }
  else {
    return v8 > v6;
  }
}

id *sub_1002C50A0(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)PDPassDaemonData;
    a1 = (id *)objc_msgSendSuper2(&v13, "init");
    if (a1)
    {
      id v10 = [v7 copy];
      id v11 = a1[1];
      a1[1] = v10;

      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
    }
  }

  return a1;
}

id *sub_1002C515C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    id v6 = PKObjectDictionaryWithError();
    id v7 = PKPrivateObjectDictionaryWithError();
    id v8 = +[PKPassTileDescriptor createWithPassDictionary:v6 privateDictionary:v7];
    id v9 = [objc_alloc((Class)PKSecureElementPassFieldCollection) initWithPassDictionary:v6];
    id v10 = [[PDPassShareBundle alloc] initWithPassURL:v4 passDictionary:v6];
    a1 = sub_1002C50A0(a1, v8, v9, v10);

    id v11 = a1;
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

void sub_1002C55D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002C55F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = (id *)(a1 + 32);
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained handleEventWithAction:a2 token:a3 descriptor:v7];
}

void sub_1002C5668(uint64_t a1, uint64_t a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100516E34(a1, a2, v4);
  }
}

void sub_1002C5B3C(void *a1)
{
  uint64_t v2 = a1[4];
  int v3 = *(unsigned __int8 *)(v2 + 8);
  id v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(v2 + 24);
      id v7 = (void *)a1[5];
      unsigned int v8 = [*(id *)(v2 + 56) count];
      *(_DWORD *)long long buf = 138543874;
      uint64_t v30 = v6;
      __int16 v31 = 2114;
      uint64_t v32 = v7;
      __int16 v33 = 1024;
      LODWORD(v34) = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XPC event publisher for stream %{public}@ sending xpc event %{public}@ to %u clients", buf, 0x1Cu);
    }

    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v9 = *(id *)(a1[4] + 56);
    id v10 = [v9 countByEnumeratingWithState:&v25 objects:v35 count:16];
    if (v10)
    {
      id v12 = v10;
      uint64_t v13 = *(void *)v26;
      *(void *)&long long v11 = 138543874;
      long long v24 = v11;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v26 != v13) {
            objc_enumerationMutation(v9);
          }
          id v15 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          objc_msgSend(v15, "unsignedLongLongValue", v24, (void)v25);
          if (xpc_event_publisher_fire())
          {
            id v16 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              uint64_t v17 = *(void *)(a1[4] + 24);
              uint64_t v18 = xpc_strerror();
              *(_DWORD *)long long buf = v24;
              uint64_t v30 = v17;
              __int16 v31 = 2112;
              uint64_t v32 = v15;
              __int16 v33 = 2080;
              uint64_t v34 = v18;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to send event to XPC event stream %{public}@ for token %@: %s", buf, 0x20u);
            }
          }
        }
        id v12 = [v9 countByEnumeratingWithState:&v25 objects:v35 count:16];
      }
      while (v12);
    }

    uint64_t v19 = a1[6];
    if (v19) {
      (*(void (**)(void))(v19 + 16))();
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v20 = a1[5];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v30 = v20;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Have not received initial barrier; not sending %@",
        buf,
        0xCu);
    }

    [*(id *)(a1[4] + 40) addObject:a1[5]];
    long long v21 = (void *)a1[6];
    if (v21)
    {
      id v22 = *(void **)(a1[4] + 48);
      id v23 = objc_retainBlock(v21);
      [v22 addObject:v23];
    }
  }
}

void sub_1002C6374(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];

  uint64_t v6 = *(void **)(a1 + 48);
  id v7 = [*(id *)(a1 + 32) _currentBalance];
  [v6 setCurrentBalance:v7];

  unsigned int v8 = *(void **)(a1 + 48);
  id v9 = [*(id *)(a1 + 32) _totalAmount];
  [v8 setTotalAmount:v9];

  id v10 = *(void **)(a1 + 48);
  long long v11 = [*(id *)(a1 + 32) _installmentAmount];
  [v10 setInstallmentAmount:v11];

  id v12 = *(void **)(a1 + 48);
  uint64_t v13 = [*(id *)(a1 + 32) _totalPrincipal];
  [v12 setTotalPrincipal:v13];

  uint64_t v14 = *(void **)(a1 + 48);
  id v15 = [*(id *)(a1 + 32) _paymentAmountToDate];
  [v14 setPaymentAmountToDate:v15];

  id v16 = *(void **)(a1 + 48);
  uint64_t v17 = [*(id *)(a1 + 32) _totalInterest];
  [v16 setTotalInterest:v17];

  uint64_t v18 = *(void **)(a1 + 48);
  uint64_t v19 = [*(id *)(a1 + 32) _interestPaidToDate];
  [v18 setInterestPaidToDate:v19];

  uint64_t v20 = *(void **)(a1 + 48);
  long long v21 = [*(id *)(a1 + 32) _principalPaidToDate];
  [v20 setPrincipalPaidToDate:v21];

  id v22 = *(void **)(a1 + 48);
  id v23 = [*(id *)(a1 + 32) _payoffAmount];
  [v22 setPayoffAmount:v23];

  long long v24 = *(void **)(a1 + 48);
  long long v25 = [*(id *)(a1 + 32) _pastDueAmount];
  [v24 setPastDueAmount:v25];

  long long v26 = *(void **)(a1 + 48);
  long long v27 = [*(id *)(a1 + 32) _initialAmount];
  [v26 setInitialAmount:v27];

  long long v28 = *(void **)(a1 + 48);
  id v29 = [*(id *)(a1 + 32) _totalAdjustments];
  [v28 setTotalAdjustments:v29];
}

void sub_1002C776C(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  [a3 integerValue];
  PKPercentageStorageIntegerToDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPayLaterFinancingPlanSummary *)v4 setApr:v5];
}

void sub_1002C77D4(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setHasAPR:](v4, "setHasAPR:", [a3 BOOLValue]);
}

void sub_1002C782C(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setDaysPastDue:](v4, "setDaysPastDue:", [a3 integerValue]);
}

void sub_1002C7884(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setInstallmentCount:](v4, "setInstallmentCount:", [a3 unsignedIntegerValue]);
}

void sub_1002C78DC(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  int v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanSummary *)v3 setTransactionDate:v4];
}

void sub_1002C793C(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  int v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanSummary *)v3 setStartInstallmentDate:v4];
}

void sub_1002C799C(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  int v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanSummary *)v3 setNextInstallmentDueDate:v4];
}

void sub_1002C79FC(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  int v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanSummary *)v3 setEndInstallmentDate:v4];
}

void sub_1002C7A5C(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  int v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanSummary *)v3 setCancellationDate:v4];
}

void sub_1002C7ABC(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
}

void sub_1002C7AC4(id a1, PKPayLaterFinancingPlanSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanSummary setCancellationReason:](v4, "setCancellationReason:", [a3 integerValue]);
}

void sub_1002C7D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002C7D88(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

void sub_1002C7F04(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  long long v11 = [v9 _propertySetters];
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_1002C81A8(id a1, PKPendingPrecursorPassCredential *a2, id a3)
{
}

void sub_1002C81B0(id a1, PKPendingPrecursorPassCredential *a2, id a3)
{
}

uint64_t sub_1002C83CC(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), *(id *)(a1 + 48));
  id v2 = [[PDUserNotificationIconStore alloc] initWithDatabaseManager:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 56));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 64));
  objc_storeWeak((id *)(*(void *)(a1 + 32) + 80), *(id *)(a1 + 72));
  dispatch_semaphore_t v5 = dispatch_semaphore_create(1);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 88);
  *(void *)(v6 + 88) = v5;
  return _objc_release_x1(v5, v7);
}

id sub_1002C8480(uint64_t a1, void *a2)
{
  return [a2 updateDeviceAssessmentEducationVisibility];
}

void sub_1002C8890(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) assertionsOfType:4];
  id v3 = [v2 count];

  if (!v3)
  {
    id v4 = *(void **)(*(void *)(a1 + 40) + 32);
    [v4 promoteSuppressedUserNotificationsIfPossible];
  }
}

void sub_1002C8A58(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSFileManager);
  id v3 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 32;
  uint64_t v6 = [*(id *)(v5 + 8) path];
  unsigned int v7 = [v2 fileExistsAtPath:v6];

  if (v7)
  {
    uint64_t v8 = *(void *)(*(void *)v4 + 8);
    id v31 = 0;
    id v9 = +[NSData dataWithContentsOfURL:v8 options:1 error:&v31];
    id v10 = v31;
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      id v12 = v10;
      id v13 = 0;
      goto LABEL_17;
    }
    id v30 = 0;
    id v13 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v9 error:&v30];
    id v14 = v30;
    id v12 = v14;
    if (!v13) {
      goto LABEL_17;
    }
    if (v14)
    {
      id v15 = 0;
      id v16 = 0;
      goto LABEL_16;
    }
    if ([v13 containsValueForKey:@"passUserNotificationCenters"])
    {
      uint64_t v17 = objc_opt_class();
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v17, v18, objc_opt_class(), 0);
      id v29 = 0;
      id v16 = [v13 decodeTopLevelObjectOfClasses:v19 forKey:@"passUserNotificationCenters" error:&v29];
      id v12 = v29;

      if (v12)
      {
        id v15 = 0;
        goto LABEL_16;
      }
    }
    else
    {
      id v16 = 0;
    }
    id v28 = 0;
    id v15 = [v13 decodeTopLevelObjectOfClass:objc_opt_class() forKey:@"walletUserNotificationCenter" error:&v28];
    id v12 = v28;
    if (!v12)
    {
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1002C8E70;
      v26[3] = &unk_100746300;
      id v27 = v3;
      [v16 enumerateKeysAndObjectsUsingBlock:v26];
      objc_storeStrong((id *)(*(void *)v4 + 32), v15);
      objc_msgSend(*(id *)(*(void *)v4 + 32), "setDelegate:");
      [*(id *)(*(void *)v4 + 32) setProcessingQueue:*(void *)(*(void *)v4 + 96)];
      [*(id *)(*(void *)v4 + 32) setIconStore:*(void *)(*(void *)v4 + 40)];
      [*(id *)(*(void *)v4 + 32) setDatabaseManager:*(void *)(*(void *)v4 + 16)];
    }
LABEL_16:
    [v13 finishDecoding];

    if (!v12)
    {
LABEL_20:

      goto LABEL_21;
    }
LABEL_17:
    uint64_t v20 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_100516ED4(v4, (uint64_t)v12, v20);
    }

    [v2 removeItemAtURL:*(void *)(*(void *)v4 + 8) error:0];
    goto LABEL_20;
  }
LABEL_21:
  long long v21 = *(void **)(*(void *)v4 + 32);
  if (!v21)
  {
    id v22 = objc_alloc_init(PDUserNotificationCenter);
    id v23 = *(void **)(*(void *)v4 + 32);
    *(void *)(*(void *)v4 + 32) = v22;

    objc_msgSend(*(id *)(*(void *)v4 + 32), "setDelegate:");
    [*(id *)(*(void *)v4 + 32) setProcessingQueue:*(void *)(*(void *)v4 + 96)];
    [*(id *)(*(void *)v4 + 32) setIconStore:*(void *)(*(void *)v4 + 40)];
    [*(id *)(*(void *)v4 + 32) setDatabaseManager:*(void *)(*(void *)v4 + 16)];
    long long v21 = *(void **)(*(void *)v4 + 32);
  }
  [v21 connect];
  objc_msgSend(*(id *)(*(void *)v4 + 24), "registerObserver:");
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1002C8EC8;
  v25[3] = &unk_100746328;
  void v25[4] = *(void *)v4;
  [v3 enumerateObjectsUsingBlock:v25];
  long long v24 = dispatch_get_global_queue(0, 0);
  PDScheduledActivityClientRegister();
}

void sub_1002C8E70(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = [a3 existingLocalNotifications];
  [v3 addObjectsFromArray:v4];
}

id sub_1002C8EC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:a2];
}

id sub_1002C8F70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v2) {
    return [v2 requestNotificationAuthorizationIfNecessaryWithCompletion:v1];
  }
  else {
    return (id)(*(uint64_t (**)(uint64_t, void, void))(v1 + 16))(v1, 0, 0);
  }
}

id sub_1002C9030(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v2) {
    return [v2 requestNotificationAuthorizationWithCompletion:v1];
  }
  else {
    return (id)(*(uint64_t (**)(uint64_t, void, void))(v1 + 16))(v1, 0, 0);
  }
}

id sub_1002C9100(void *a1)
{
  return [*(id *)(a1[4] + 32) userNotificationActionPerformed:a1[6] applicationMessageContentIdentifier:a1[5]];
}

void sub_1002C91BC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _notificationRequirementsAreSatisfied:*(void *)(a1 + 40)])
  {
    id v2 = [*(id *)(a1 + 40) date];
    id v3 = +[NSDate date];
    id v4 = [v2 compare:v3];

    if (v4 == (id)1)
    {
      uint64_t v5 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v2];
      uint64_t v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        int v13 = 138412290;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scheduling Activity to insert User Notification: %@", (uint8_t *)&v13, 0xCu);
      }

      uint64_t v8 = [*(id *)(a1 + 40) notificationIdentifier];
      PDScheduledActivityRegisterUserNotification();
    }
    else
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 32);
        int v13 = 138412546;
        uint64_t v14 = v10;
        __int16 v15 = 2112;
        uint64_t v16 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Inserting User Notification: %@ into Wallet User Notification Center: %@", (uint8_t *)&v13, 0x16u);
      }

      id v12 = [*(id *)(a1 + 40) notificationIdentifier];
      PDScheduledActivityRemove();

      [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:*(void *)(a1 + 40)];
    }
  }
}

id sub_1002C9458(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeUserNotificationWithIdentifier:*(void *)(a1 + 40)];
  PDScheduledActivityRemove();
  id v2 = *(void **)(a1 + 32);
  return [v2 _archiveUserNotifications];
}

id sub_1002C9550(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeUserNotification:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 40) notificationIdentifier];
  PDScheduledActivityRemove();

  id v3 = *(void **)(a1 + 32);
  return [v3 _archiveUserNotifications];
}

id sub_1002C9628(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeUserNotificationsOfType:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return _[v2 _removeScheduledActivitiesOfType:v3];
}

id sub_1002C9714(void *a1)
{
  [*(id *)(a1[4] + 32) removeUserNotificationsForPassUniqueIdentifier:a1[5] ofType:a1[6]];
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  return _[v2 _removeScheduledActivitiesForPassUniqueIdentifier:v3 ofType:v4];
}

id sub_1002C9804(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) removeUserNotificationsForPassUniqueIdentifier:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return _[v2 _removeScheduledActivitiesForPassUniqueIdentifier:v3];
}

id sub_1002C98B8(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = PDScheduledActivitiesForClient();
  uint64_t v3 = (char *)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        PDScheduledActivityRemove();
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "removeAllUserNotifications", v8);
}

uint64_t sub_1002C9AB8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 passUniqueIdentifier];
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

id sub_1002C9EFC(void *a1)
{
  if (*(void *)(a1[4] + 32)) {
    return [*(id *)(a1[4] + 32) userNotificationsOfType:a1[6] completion:a1[5]];
  }
  else {
    return (id)(*(uint64_t (**)(void))(a1[5] + 16))();
  }
}

id sub_1002CA004(void *a1)
{
  if (*(void *)(a1[4] + 32)) {
    return [*(id *)(a1[4] + 32) userNotificationsForPassUniqueIdentifier:a1[5] ofType:a1[7] completion:a1[6]];
  }
  else {
    return (id)(*(uint64_t (**)(void))(a1[6] + 16))();
  }
}

void sub_1002CA100(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002CA1F0;
    v5[3] = &unk_100746350;
    id v6 = v3;
    id v7 = *(id *)(a1 + 48);
    [v2 userNotificationWithIdentifier:v6 completion:v5];
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v4();
  }
}

void sub_1002CA1F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    PDScheduledActivityGetContext();
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v4 = v3;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_1002CAAD8(uint64_t a1, void *a2)
{
  return _[a2 shouldDisplayDeviceAssessmentEducationAccordingToService:*(void *)(*(void *)(a1 + 32) + 48)];
}

intptr_t sub_1002CB090(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(v1 + 8))
  {
    if (!*(void *)(v1 + 32)) {
      goto LABEL_7;
    }
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Archiving User Notifications", v7, 2u);
    }

    id v4 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    [v4 encodeObject:*(void *)(*(void *)(a1 + 40) + 32) forKey:@"walletUserNotificationCenter"];
    [v4 finishEncoding];
    id v5 = [v4 encodedData];

    if (v5)
    {
      [v5 writeToURL:*(void *)(*(void *)(a1 + 40) + 8) atomically:1];
      PKExcludeFileURLFromBackup();
    }
    else
    {
LABEL_7:
      id v5 = +[NSFileManager defaultManager];
      [v5 removeItemAtURL:*(void *)(*(void *)(a1 + 40) + 8) error:0];
    }

    uint64_t v1 = *(void *)(a1 + 40);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 88));
}

void sub_1002CB5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002CB610(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) passesOfType:1];
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v85 objects:v91 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v86;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v86 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v85 + 1) + 8 * i);
        uint64_t v8 = [v7 devicePrimaryPaymentApplication];
        long long v9 = (char *)[v8 state];

        if ((unint64_t)(v9 - 3) <= 1)
        {
          long long v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          id v11 = objc_alloc((Class)PKBadgeCountItem);
          id v12 = [v7 primaryIdentifier];
          id v13 = [v11 initWithTitle:@"Pass requiring verification" subtitle:v12 count:1];
          [v10 addObject:v13];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v85 objects:v91 count:16];
    }
    while (v4);
  }
  uint64_t v14 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v14 + 104))
  {
    __int16 v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v16 = [objc_alloc((Class)PKBadgeCountItem) initWithTitle:@"Device assessment education visible" subtitle:0 count:1];
    [v15 addObject:v16];

    uint64_t v14 = *(void *)(a1 + 32);
  }
  uint64_t v17 = [*(id *)(v14 + 16) peerPaymentAccount];
  long long v74 = v17;
  long long v75 = v2;
  if ((uint64_t)[v17 pendingPaymentCount] >= 1 && objc_msgSend(v17, "stage") == (id)1)
  {
    uint64_t v18 = [v17 associatedPassUniqueID];
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    id v19 = v2;
    id v20 = [v19 countByEnumeratingWithState:&v81 objects:v90 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v82;
LABEL_16:
      uint64_t v23 = 0;
      while (1)
      {
        if (*(void *)v82 != v22) {
          objc_enumerationMutation(v19);
        }
        long long v24 = *(void **)(*((void *)&v81 + 1) + 8 * v23);
        id v25 = [v24 uniqueID];
        id v26 = v18;
        id v27 = v26;
        if (v25 == v26) {
          break;
        }
        if (v18 && v25)
        {
          unsigned __int8 v28 = [v25 isEqualToString:v26];

          if (v28) {
            goto LABEL_29;
          }
        }
        else
        {
        }
        if (v21 == (id)++v23)
        {
          id v21 = [v19 countByEnumeratingWithState:&v81 objects:v90 count:16];
          if (v21) {
            goto LABEL_16;
          }
          goto LABEL_31;
        }
      }

LABEL_29:
      id v29 = v24;

      if (!v29) {
        goto LABEL_32;
      }
      id v30 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      id v31 = [objc_alloc((Class)PKBadgeCountItem) initWithTitle:@"Anonymous peer payment pass (pending payment)" subtitle:v27 count:1];
      [v30 addObject:v31];

      id v19 = v29;
    }
LABEL_31:

LABEL_32:
  }
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  id obj = [*(id *)(*(void *)(a1 + 32) + 16) accounts];
  id v32 = [obj countByEnumeratingWithState:&v77 objects:v89 count:16];
  if (!v32)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    goto LABEL_55;
  }
  id v33 = v32;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = *(void *)v78;
  do
  {
    for (j = 0; j != v33; j = (char *)j + 1)
    {
      if (*(void *)v78 != v36) {
        objc_enumerationMutation(obj);
      }
      id v38 = *(void **)(*((void *)&v77 + 1) + 8 * (void)j);
      if ([v38 feature] == (id)3)
      {
        id v39 = v35;
        id v40 = v34;
        uint64_t v35 = v38;
      }
      else
      {
        id v39 = v34;
        id v40 = v38;
        if ([v38 feature] != (id)5) {
          goto LABEL_42;
        }
      }
      id v41 = v38;

      uint64_t v34 = v40;
LABEL_42:
      long long v42 = *(void **)(*(void *)(a1 + 32) + 16);
      uint64_t v43 = [v38 accountIdentifier];
      id v44 = [v42 transactionsRequiringReviewForAccountWithIdentifier:v43];
      id v45 = [v44 count];

      if (v45)
      {
        id v46 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        id v47 = objc_alloc((Class)PKBadgeCountItem);
        id v48 = [v38 accountIdentifier];
        id v49 = [v47 initWithTitle:@"Unanswered question on the broadway pass" subtitle:v48 count:1];
        [v46 addObject:v49];
      }
      if ([v38 feature] == (id)2 && objc_msgSend(v38, "state") != (id)3)
      {
        long long v50 = [v38 creditDetails];
        id v51 = [v50 accountSummary];
        long long v52 = [v51 pastDueAmount];

        if (v52)
        {
          if (objc_msgSend(v52, "pk_isPositiveNumber"))
          {
            long long v53 = *(void **)(*(void *)(a1 + 32) + 16);
            long long v54 = [v38 associatedPassUniqueID];
            LODWORD(v53) = [v53 passExistsWithUniqueID:v54];

            if (v53)
            {
              long long v55 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
              id v56 = objc_alloc((Class)PKBadgeCountItem);
              long long v57 = [v38 accountIdentifier];
              id v58 = [v56 initWithTitle:@"Past due broadway account" subtitle:v57 count:1];
              [v55 addObject:v58];
            }
          }
        }
      }
    }
    id v33 = [obj countByEnumeratingWithState:&v77 objects:v89 count:16];
  }
  while (v33);
LABEL_55:

  long long v59 = [*(id *)(*(void *)(a1 + 32) + 16) activeDiscoveryItemsRequiringBadgeForRelevantDate:0];
  uint64_t v60 = (uint64_t)[v59 count];

  if (v60 >= 1)
  {
    long long v61 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v62 = [objc_alloc((Class)PKBadgeCountItem) initWithTitle:@"Discovery items" subtitle:0 count:v60];
    [v61 addObject:v62];
  }
  id v63 = [*(id *)(*(void *)(a1 + 32) + 16) newAccountUserInvitationsCount];
  if (v63)
  {
    long long v64 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v65 = [objc_alloc((Class)PKBadgeCountItem) initWithTitle:@"New account user invitations" subtitle:0 count:v63];
    [v64 addObject:v65];
  }
  long long v66 = sub_1003A0CA4(*(void ***)(*(void *)(a1 + 32) + 64));
  if ((uint64_t)v66 >= 1)
  {
    long long v67 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v68 = [objc_alloc((Class)PKBadgeCountItem) initWithTitle:@"Badged application message registrations count" subtitle:0 count:v66];
    [v67 addObject:v68];
  }
  long long v69 = [*(id *)(a1 + 32) _badgeCountItemsForPayLaterWithAccount:v35];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObjectsFromArray:v69];
  if (v34 && PKSavingsAccountIsThresholdExceededActive())
  {
    long long v70 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v71 = objc_alloc((Class)PKBadgeCountItem);
    long long v72 = [v34 accountIdentifier];
    id v73 = [v71 initWithTitle:@"Badge count for savings account" subtitle:v72 count:1];
    [v70 addObject:v73];
  }
}

int64_t sub_1002CBDB0(id a1, PKBadgeCountItem *a2, PKBadgeCountItem *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  id v6 = [(PKBadgeCountItem *)v4 title];
  id v7 = [(PKBadgeCountItem *)v5 title];
  int64_t v8 = (int64_t)[v6 compare:v7];

  if (!v8)
  {
    uint64_t v9 = [(PKBadgeCountItem *)v4 subtitle];
    long long v10 = (void *)v9;
    if (v9) {
      id v11 = (__CFString *)v9;
    }
    else {
      id v11 = &stru_10075AAD8;
    }
    uint64_t v12 = [(PKBadgeCountItem *)v5 subtitle];
    id v13 = (void *)v12;
    if (v12) {
      CFStringRef v14 = (const __CFString *)v12;
    }
    else {
      CFStringRef v14 = &stru_10075AAD8;
    }
    int64_t v8 = (int64_t)[(__CFString *)v11 compare:v14];

    if (!v8)
    {
      id v15 = [(PKBadgeCountItem *)v4 count];
      if ((uint64_t)v15 < (uint64_t)[(PKBadgeCountItem *)v5 count]) {
        int64_t v8 = -1;
      }
      else {
        int64_t v8 = 1;
      }
    }
  }

  return v8;
}

void sub_1002CC120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002CC140(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v17 = a1;
  [*(id *)(*(void *)(a1 + 32) + 16) financingPlanDisputeIdentifiersWithDisputeState:a2];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v6 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v20;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v16 = v10;
        id v11 = PKStringWithValidatedFormat();
        if ((PKSharedCacheGetBoolForKey() & 1) == 0)
        {
          uint64_t v12 = PKPayLaterFinancingPlanDisputeStateToString();
          id v13 = +[NSString stringWithFormat:@"Pay Later Account financing plan dispute (%@)", v12];
          CFStringRef v14 = *(void **)(*(void *)(*(void *)(v17 + 40) + 8) + 40);
          id v15 = [objc_alloc((Class)PKBadgeCountItem) initWithTitle:v13 subtitle:v10 count:1];
          [v14 addObject:v15];
        }
      }
      id v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16, v16);
    }
    while (v7);
  }
}

Class sub_1002CC678()
{
  if (qword_100808E08 != -1) {
    dispatch_once(&qword_100808E08, &stru_100746400);
  }
  Class result = objc_getClass("FKBankConnectPushNotificationHandler");
  qword_100808DF8 = (uint64_t)result;
  off_100806B00 = (uint64_t (*)())sub_1002CC6DC;
  return result;
}

id sub_1002CC6DC()
{
  return (id)qword_100808DF8;
}

void sub_1002CC6E8(id a1)
{
  qword_100808E00 = (uint64_t)dlopen("/System/Library/Frameworks/FinanceKit.framework/FinanceKit", 2);
}

void sub_1002CD004(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc_init((Class)PKAccountEnhancedMerchant);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];

  [*(id *)(a1 + 56) populateAssociatedProgramIdentifiersForEnhancedMerchant:v8 enhancedMerchantPID:a2 inDatabase:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) addObject:v8];
}

void sub_1002CDB30(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDB38(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDB40(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDB48(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountEnhancedMerchant *)a2 logoImage];
  id v5 = +[NSURL URLWithString:v4];

  [v6 addURL:v5 forScaleFactor:2];
}

void sub_1002CDBCC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountEnhancedMerchant *)a2 logoImage];
  id v5 = +[NSURL URLWithString:v4];

  [v6 addURL:v5 forScaleFactor:3];
}

void sub_1002CDC50(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDC58(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDC60(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDC68(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = +[NSURL URLWithString:a3];
  [(PKAccountEnhancedMerchant *)v4 setWebsite:v5];
}

void sub_1002CDCE0(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  id v5 = +[NSURL URLWithString:a3];
  [(PKAccountEnhancedMerchant *)v4 setLoyaltyPassURL:v5];
}

void sub_1002CDD58(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDD60(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDD68(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountEnhancedMerchant *)a2 iconImage];
  id v5 = +[NSURL URLWithString:v4];

  [v6 addURL:v5 forScaleFactor:2];
}

void sub_1002CDDEC(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountEnhancedMerchant *)a2 iconImage];
  id v5 = +[NSURL URLWithString:v4];

  [v6 addURL:v5 forScaleFactor:3];
}

void sub_1002CDE70(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDE78(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDE80(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEnhancedMerchant setSuppressPaymentSheetRewardsHint:](v4, "setSuppressPaymentSheetRewardsHint:", [a3 BOOLValue]);
}

void sub_1002CDED8(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CDEE0(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountEnhancedMerchant *)v3 setPaymentSheetOverrideStart:v4];
}

void sub_1002CDF40(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountEnhancedMerchant *)v3 setPaymentSheetOverrideEnd:v4];
}

void sub_1002CDFA0(id a1, PKAccountEnhancedMerchant *a2, id a3)
{
}

void sub_1002CE0E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

uint64_t SecureElementPassFieldSourceFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:PKSecureElementPassFieldsBalanceFieldsKey])
  {
    uint64_t v2 = 0;
  }
  else if ([v1 isEqualToString:PKSecureElementPassFieldsCommutePlansKey])
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v2;
}

id NSStringFromSecureElementPassFieldSource(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (id *)&PKSecureElementPassFieldsBalanceFieldsKey;
LABEL_5:
    id v3 = *v2;
    return v3;
  }
  if (a1 == 1)
  {
    uint64_t v2 = (id *)&PKSecureElementPassFieldsCommutePlansKey;
    goto LABEL_5;
  }
  id v3 = 0;
  return v3;
}

void sub_1002CEB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002CEB34(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) initWithPropertyValues:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
    return 0;
  }
  id v5 = [*(id *)(a1 + 56) foreignReferenceIdentifiers];
  id v6 = +[SecureElementPassFieldForeignReferenceIdentifier insertForeignReferenceIdentifiers:v5 forSecureElementPassField:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) inDatabase:*(void *)(a1 + 48)];
  BOOL v7 = v6 != 0;

  return v7;
}

void sub_1002CEFA4(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) safelyAddObject:v3];
}

id sub_1002CF44C(uint64_t a1, uint64_t a2)
{
  return +[SecureElementPassFieldForeignReferenceIdentifier deleteForeignReferenceIdentifiersInDatabase:*(void *)(a1 + 32) forFieldPID:a2];
}

void sub_1002CFBE8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) allObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  [*(id *)(a1 + 32) _updateConsumers:v2 requiresRegistration:0];
  [*(id *)(a1 + 32) _scheduleEventStreamRegistrationUpdateWhileInternalQueue:1];
}

void sub_1002CFCE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 8))
  {
    *(unsigned char *)(v1 + 8) = 1;
    PDXPCEventStreamRegisterObserver(*(void **)(a1 + 32), @"com.apple.notifyd.matching", *(void **)(*(void *)(a1 + 32) + 24));
    PDXPCEventStreamRegisterObserver(*(void **)(a1 + 32), @"com.apple.distnoted.matching", *(void **)(*(void *)(a1 + 32) + 24));
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 16);
    id v5 = *(NSObject **)(v3 + 24);
    dispatch_group_notify(v4, v5, &stru_100746710);
  }
}

id sub_1002CFE20(id result)
{
  int v1 = 1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(*((void *)result + 4) + 56), (unsigned __int8 *)&v1, 0);
  if (v1 == 1) {
    return _objc_msgSend(*((id *)result + 4), "_queue_updateEventStreamRegistration");
  }
  return result;
}

void sub_1002D0B34(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[PayLaterInstallment alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(PayLaterInstallment *)v5 planIdentifier];
  objc_msgSend(v3, "pk_safelyAddObject:", v4);
}

void sub_1002D10B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1002D10E8(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v8 = a3;
  id v6 = *a4;
  if (v6) {
    BOOL v7 = (void *)_DateForSQLValue();
  }
  else {
    BOOL v7 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v7);
  if (v6) {
}
  }

void sub_1002D117C(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v8 = a3;
  id v6 = *a4;
  if (v6) {
    BOOL v7 = (void *)_DateForSQLValue();
  }
  else {
    BOOL v7 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v7);
  if (v6) {
}
  }

void sub_1002D13E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D13F8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v7 = +[NSNull null];

      if (v5 != v7)
      {
        uint64_t v8 = PKCurrencyStorageNumberToCurrencyDecimal();
        uint64_t v9 = (void *)v8;
        if (v6 && v8)
        {
          uint64_t v10 = PKCurrencyAmountMake();
          uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
          uint64_t v12 = *(void **)(v11 + 40);
          if (v12)
          {
            uint64_t v13 = [v12 currencyAmountByAddingCurrencyAmount:v10];
            uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
            id v15 = *(void **)(v14 + 40);
            *(void *)(v14 + 40) = v13;
          }
          else
          {
            id v16 = v10;
            id v15 = *(void **)(v11 + 40);
            *(void *)(v11 + 40) = v16;
          }
        }
      }

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1002D19E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v20 = objc_alloc_init((Class)PKPayLaterInstallment);
  uint64_t v8 = [(SQLiteEntity *)[PayLaterInstallment alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v20 withProperties:v7 values:a4];

  uint64_t v9 = [(PayLaterInstallment *)v8 _totalAmount];
  [v20 setTotalAmount:v9];

  uint64_t v10 = [(PayLaterInstallment *)v8 _currentBalance];
  [v20 setCurrentBalance:v10];

  id v11 = [(SQLiteEntity *)v8 persistentID];
  uint64_t v12 = [*(id *)(a1 + 48) database];
  uint64_t v13 = +[PayLaterAppliedPayment payLaterAppliedPaymentsForInstallmentPID:v11 inDatabase:v12];

  [v20 setAppliedPayments:v13];
  uint64_t v14 = objc_msgSend(v13, "pk_arrayBySafelyApplyingBlock:", &stru_100746750);
  id v15 = +[NSSet setWithArray:v14];

  id v16 = [(SQLiteEntity *)v8 valueForProperty:@"a"];
  id v17 = [v16 longLongValue];

  uint64_t v18 = [*(id *)(a1 + 48) database];
  long long v19 = +[PayLaterPayment payLaterPaymentsForScheduleSummaryPID:v17 paymentIdentifiers:v15 inDatabase:v18];

  [v20 setPayments:v19];
  [*(id *)(a1 + 56) safelyAddObject:v20];
}

id sub_1002D1BE0(id a1, PKPayLaterAppliedPayment *a2)
{
  return [(PKPayLaterAppliedPayment *)a2 paymentIdentifier];
}

void sub_1002D2158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D2170(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472;
  id v11 = sub_1002D2240;
  uint64_t v12 = &unk_100732630;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  id v13 = v4;
  uint64_t v14 = v5;
  sub_100012DC8(v2, v3, &v9);
  id v6 = *(void **)(a1 + 56);
  id v7 = (void *)_SQLValueForDate();
  objc_msgSend(v6, "setValue:forProperty:", v7, @"j", v9, v10, v11, v12);

  return 1;
}

void sub_1002D2240(uint64_t a1, sqlite3_stmt *a2)
{
  [*(id *)(a1 + 32) sqliteBindWithStatement:a2];
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v4 = _DateForSQLValue();
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
}

void sub_1002D2C50(id a1, PKPayLaterInstallment *a2, id a3)
{
}

void sub_1002D2C58(id a1, PKPayLaterInstallment *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterInstallment setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1002D2CB0(id a1, PKPayLaterInstallment *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterInstallment *)v3 setDueDate:v4];
}

void sub_1002D2D10(id a1, PKPayLaterInstallment *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterInstallment setInterval:](v4, "setInterval:", [a3 integerValue]);
}

void sub_1002D2D68(id a1, PKPayLaterInstallment *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterInstallment *)v3 setPayoffDate:v4];
}

void sub_1002D2DC8(id a1, PKPayLaterInstallment *a2, id a3)
{
}

id _SQLValueForStringArray(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1
    || ([v1 componentsJoinedByString:@","],
        (uint64_t v3 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    uint64_t v3 = +[NSNull null];
  }

  return v3;
}

id _StringArrayForSQLValue(void *a1)
{
  if (a1)
  {
    id v1 = [a1 componentsSeparatedByString:@","];
  }
  else
  {
    id v1 = 0;
  }
  if ([v1 count]) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  id v3 = v2;

  return v3;
}

void sub_1002D3020(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[AccountServicingEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(AccountServicingEvent *)v5 servicingEvent];
  [v3 addObject:v4];
}

void sub_1002D36C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = [*(id *)(a1 + 48) amount];
  [v4 setAmount:v5];

  id v7 = [*(id *)(a1 + 40) statusDetails];
  id v6 = [*(id *)(a1 + 48) partiallyApprovedAmount];
  [v7 setPartiallyApprovedAmount:v6];
}

void sub_1002D3BB0(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_1002D3BB8(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a2;
  -[PKAccountServicingEvent setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_1002D3C10(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a2;
  -[PKAccountServicingEvent setActivityType:](v4, "setActivityType:", [a3 integerValue]);
}

void sub_1002D3C68(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_1002D3C70(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_1002D3C78(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountServicingEvent *)v3 setOpenDate:v4];
}

void sub_1002D3CD8(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountServicingEvent *)v3 setLastUpdatedDate:v4];
}

void sub_1002D3D38(id a1, PKAccountServicingEvent *a2, id a3)
{
}

void sub_1002D3D40(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a2;
  _StringArrayForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountServicingEvent *)v4 setLinkedCaseIdentifiers:v5];
}

void sub_1002D3DA4(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountServicingEvent *)a2 statusDetails];
  id v5 = _StringArrayForSQLValue(v4);

  [v6 setStatusReasons:v5];
}

void sub_1002D3E1C(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountServicingEvent *)a2 statusDetails];
  id v5 = (void *)_DateForSQLValue();

  [v6 setCustomerResponseByDate:v5];
}

void sub_1002D3E90(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountServicingEvent *)a2 statusDetails];
  id v5 = (void *)_DateForSQLValue();

  [v6 setMerchantResponseByDate:v5];
}

void sub_1002D3F04(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountServicingEvent *)a2 statusDetails];
  id v5 = _StringArrayForSQLValue(v4);

  [v6 setEvidenceDocumentTypes:v5];
}

void sub_1002D3F7C(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v5 = [(PKAccountServicingEvent *)a2 statusDetails];
  [v5 setResolutionReason:v4];
}

void sub_1002D3FDC(id a1, PKAccountServicingEvent *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAccountServicingEvent *)a2 statusDetails];
  id v5 = (void *)_DateForSQLValue();

  [v6 setResolutionDate:v5];
}

void sub_1002D43AC(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_1002D5110(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setShinkansenTicketActive:](v4, "setShinkansenTicketActive:", [a3 BOOLValue]);
}

void sub_1002D5168(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setBalanceAllowedForCommute:](v4, "setBalanceAllowedForCommute:", [a3 BOOLValue]);
}

void sub_1002D51C0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setLowBalanceNotificationEnabled:](v4, "setLowBalanceNotificationEnabled:", [a3 BOOLValue]);
}

void sub_1002D5218(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKFelicaTransitAppletState setGreenCarTicketUsed:](v4, "setGreenCarTicketUsed:", [a3 BOOLValue]);
}

void sub_1002D5270(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5278(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v6 = a2;
  if (a3)
  {
    uint64_t v4 = PKDecimalAmountFromAmount();
    [(PKFelicaTransitAppletState *)v6 setBalance:v4];

    id v5 = (void *)v4;
  }
  else
  {
    [(PKFelicaTransitAppletState *)v6 setBalance:0];
    id v5 = v6;
  }
}

void sub_1002D5300(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setBlacklisted:](v4, "setBlacklisted:", [a3 BOOLValue]);
}

void sub_1002D5358(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5360(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5368(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5370(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5378(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5380(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5388(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5390(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5398(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53A0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53A8(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53B0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53B8(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53C0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53C8(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53D0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53D8(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53E0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53E8(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53F0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D53F8(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5400(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5408(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5410(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5418(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5420(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5428(id a1, PKFelicaTransitAppletState *a2, id a3)
{
}

void sub_1002D5430(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setHasGreenCarTicket:](v4, "setHasGreenCarTicket:", [a3 BOOLValue]);
}

void sub_1002D5488(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setHasShinkansenTicket:](v4, "setHasShinkansenTicket:", [a3 BOOLValue]);
}

void sub_1002D54E0(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKFelicaTransitAppletState setNeedsStationProcessing:](v4, "setNeedsStationProcessing:", [a3 BOOLValue]);
}

void sub_1002D5538(id a1, PKFelicaTransitAppletState *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v9[0] = objc_opt_class();
  v9[1] = objc_opt_class();
  id v6 = +[NSArray arrayWithObjects:v9 count:2];
  id v7 = +[NSSet setWithArray:v6];
  uint64_t v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKFelicaTransitAppletState *)v5 setEnrouteTransitTypes:v8];
}

id sub_1002D5740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1002D5BC4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) connection];
  id v3 = (void *)v2;
  if (*(void *)(a1 + 40))
  {
    if (v2)
    {
LABEL_3:
      [*(id *)(a1 + 32) remoteProcessIdentifier];
      id v4 = objc_alloc_init((Class)PKInAppPaymentPresentationHostContext);
      [v4 setIdentifier:*(void *)(a1 + 48)];
      id v5 = [*(id *)(*(void *)(a1 + 32) + 8) developerTeamID];
      [v4 setTeamID:v5];

      id v6 = PKBundleIdentifierForPID();
      [v4 setBundleIdentifier:v6];

      id v7 = PDLocalizedAppNameForPID();
      [v4 setApplicationName:v7];

      uint64_t v8 = [*(id *)(a1 + 32) remoteProcessApplicationIdentifier];
      [v4 setApplicationIdentifier:v8];

      [v4 setSceneIdentifier:*(void *)(a1 + 56)];
      [v4 setSceneBundleIdentifier:*(void *)(a1 + 64)];
      [v4 setOmitPresentationTarget:*(unsigned __int8 *)(a1 + 105)];
      [v4 setAnalyticsSubject:*(void *)(a1 + 72)];
      [v4 setAnalyticsArchivedSessionToken:*(void *)(a1 + 80)];
      uint64_t v9 = *(void **)(a1 + 40);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 16);
      char v11 = *(unsigned char *)(a1 + 104);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1002D5DD0;
      v15[3] = &unk_10072E570;
      uint64_t v12 = *(void **)(a1 + 88);
      id v16 = *(id *)(a1 + 96);
      sub_100209D7C(v10, v9, v11, v3, v4, v12, v15);

      goto LABEL_11;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 104)) {
      BOOL v13 = v2 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = *(void *)(a1 + 96);
  if (v14) {
    (*(void (**)(uint64_t, void, void))(v14 + 16))(v14, 0, 0);
  }
LABEL_11:
}

uint64_t sub_1002D5DD0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002D5FB0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegate];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [v3 remoteProcessIdentifier];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002D6084;
  v7[3] = &unk_1007304D8;
  id v8 = *(id *)(a1 + 56);
  [v2 inAppPaymentService:v3 registerPaymentListenerEndpoint:v4 forHostIdentifier:v5 processIdentifier:v6 completion:v7];
}

uint64_t sub_1002D6084(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1002D6220(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002D6724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1002D6770(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9 || [v8 statusCode] != (id)200)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    id v12 = v9;
    id v10 = *(id *)(v11 + 40);
    *(void *)(v11 + 40) = v12;
  }
  else
  {
    id v10 = [objc_alloc((Class)PKPaymentCheckMerchantResponse) initWithData:v7];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v10 isRegistered];
  }

  BOOL v13 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v15 = 138412546;
    id v16 = v9;
    __int16 v17 = 1024;
    int v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "merchantStatusCheck complete with error: %@; result: %d",
      (uint8_t *)&v15,
      0x12u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1002D68CC(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24), *(void *)(*(void *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_1002D6AA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (a2)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 138412290;
        id v9 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "paymentServicesMerchantURL vending URL: %@", (uint8_t *)&v8, 0xCu);
      }

      uint64_t v6 = *(void *)(a1 + 32);
    }
    (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v5);
  }
}

id sub_1002D7130(uint64_t a1, void *a2)
{
  id v3 = [a2 uniqueID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1002D7414(void *a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002D74CC;
  v8[3] = &unk_100747000;
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = (void *)a1[6];
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v6;
  id v7 = v3;
  [v7 cardInfoForMerchantIdentifier:v5 completion:v8];
}

void sub_1002D74CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  id v10 = [v5 primaryBrokerURL];
  int v8 = [*(id *)(a1 + 40) _paymentServicesMerchantURLForAPIType:4];
  id v9 = [objc_alloc((Class)PKAMPCardRegistrationResponse) initWithCardData:v7 brokerURL:v10 paymentServicesURL:v8 error:v6];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1002D7928(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002D7940(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5 && v6)
  {
    int v8 = *(void **)(*(void *)(a1 + 32) + 24);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1002D7A80;
    v9[3] = &unk_100747078;
    id v10 = v6;
    id v11 = v5;
    id v12 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 64);
    [v8 performHandlerOnSharedWebServiceQueue:v9];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_1002D7A80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKWrappedPayment);
  id v5 = [*(id *)(a1 + 32) certificates];
  [v4 setCertificates:v5];

  [v4 setEnrollmentSignature:*(void *)(a1 + 40)];
  id v6 = objc_alloc_init((Class)PKPaymentCompleteSessionRequest);
  [v6 setMerchantSession:*(void *)(a1 + 48)];
  [v6 setWrappedPayment:v4];
  [v6 setPass:*(void *)(a1 + 56)];
  [v6 setPaymentApplication:*(void *)(a1 + 64)];
  id v7 = [*(id *)(a1 + 48) ampEnrollmentPinning];
  [v6 setApplicationData:v7];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002D7BD4;
  v8[3] = &unk_100747050;
  id v9 = *(id *)(a1 + 72);
  [v3 completeSessionWithRequest:v6 serviceURL:0 completion:v8];
}

void sub_1002D7BD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = 0;
  if (!a2 && a3)
  {
    id v5 = a3;
    id v6 = [objc_alloc((Class)PKPayment) initWithToken:v5];

    id v4 = v6;
  }
  id v7 = v4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002D7F14(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002D7FF8;
  block[3] = &unk_100731830;
  id v8 = *(id *)(a1 + 32);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1002D7FF8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

BOOL PDDateIsWithinWindowAroundReferenceDate(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  if (a3 == 0.0 && a4 == 0.0)
  {
    BOOL v8 = 0;
  }
  else
  {
    id v14 = 0;
    id v15 = 0;
    PDGetStartAndEndDatesForWindowAroundDate(&v15, &v14, a2, a3, a4);
    id v9 = v15;
    id v10 = v14;
    [v9 timeIntervalSinceDate:v7];
    if (v11 >= 0.0)
    {
      BOOL v8 = 0;
    }
    else
    {
      [v10 timeIntervalSinceDate:v7];
      BOOL v8 = v12 > 0.0;
    }
  }
  return v8;
}

void PDGetStartAndEndDatesForWindowAroundDate(void *a1, void *a2, void *a3, double a4, double a5)
{
  id v12 = a3;
  id v9 = [v12 date];
  id v10 = v9;
  if (a1)
  {
    if (!v9)
    {
      *a1 = [v12 effectiveStartDate];
      if (!a2) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    sub_1002D8348(v9, a4);
    *a1 = (id)objc_claimAutoreleasedReturnValue();
  }
  if (!a2) {
    goto LABEL_10;
  }
  if (!v10)
  {
LABEL_8:
    double v11 = [v12 effectiveEndDate];
    goto LABEL_9;
  }
  double v11 = sub_1002D8348(v10, a5);
LABEL_9:
  *a2 = v11;
LABEL_10:
}

id sub_1002D8348(void *a1, double a2)
{
  id v3 = a1;
  id v4 = v3;
  if (a2 == 1000000.0)
  {
    uint64_t v5 = +[NSDate distantFuture];
  }
  else
  {
    if (a2 == -1000000.0) {
      +[NSDate distantPast];
    }
    else {
    uint64_t v5 = [v3 dateByAddingTimeInterval:a2 * 3600.0];
    }
  }
  id v6 = (void *)v5;

  return v6;
}

void PDGetCurrentStartAndEndDatesForDateWindow(void *a1, void *a2, double a3, double a4)
{
  double v6 = -a4;
  double v7 = -a3;
  id v8 = objc_alloc((Class)PKPassRelevantDate);
  id v10 = +[NSDate date];
  id v9 = [v8 initWithRelevantDate:v10];
  PDGetStartAndEndDatesForWindowAroundDate(a1, a2, v9, v6, v7);
}

id sub_1002D849C()
{
  self;
  if (qword_100808E10 != -1) {
    dispatch_once(&qword_100808E10, &stru_100747108);
  }
  CFBooleanRef v0 = (void *)qword_100808E18;
  return v0;
}

void sub_1002D84F4(id a1)
{
  id v1 = sub_1002D8534([PDNFSecureXPCEventStreamManager alloc]);
  uint64_t v2 = qword_100808E18;
  qword_100808E18 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_1002D8534(void *a1)
{
  if (!a1) {
    return 0;
  }
  v23.receiver = a1;
  v23.super_class = (Class)PDNFSecureXPCEventStreamManager;
  id v1 = objc_msgSendSuper2(&v23, "init");
  if (v1)
  {
    uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v3 = dispatch_queue_create("com.apple.passd.nf-events", v2);
    id v4 = (void *)*((void *)v1 + 1);
    *((void *)v1 + 1) = v3;

    xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.passd.nf-events", *((dispatch_queue_t *)v1 + 1), 1uLL);
    double v6 = (void *)*((void *)v1 + 2);
    *((void *)v1 + 2) = mach_service;

    double v7 = (_xpc_connection_s *)*((void *)v1 + 2);
    if (v7)
    {
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1002D8734;
      handler[3] = &unk_100731230;
      long long v22 = v1;
      xpc_connection_set_event_handler(v7, handler);
      id v8 = v22;
    }
    else
    {
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: could not create listener connection.", v20, 2u);
      }
    }

    *((_DWORD *)v1 + 8) = 0;
    uint64_t v9 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
    id v10 = (void *)*((void *)v1 + 5);
    *((void *)v1 + 5) = v9;

    uint64_t v11 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
    id v12 = (void *)*((void *)v1 + 6);
    *((void *)v1 + 6) = v11;

    uint64_t v13 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
    id v14 = (void *)*((void *)v1 + 7);
    *((void *)v1 + 7) = v13;

    uint64_t v15 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
    id v16 = (void *)*((void *)v1 + 8);
    *((void *)v1 + 8) = v15;

    uint64_t v17 = +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality];
    int v18 = (void *)*((void *)v1 + 9);
    *((void *)v1 + 9) = v17;
  }
  return v1;
}

void sub_1002D8734(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_1002D8884(*(void *)(a1 + 32), v3);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    double v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: listener connection invalidated - no further peers will be accepted.", (uint8_t *)&v8, 2u);
    }
  }
  else
  {
    uint64_t v5 = xpc_copy_description(v3);
    double v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136446210;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: received error or other non-connection type in handler for listener: %{public}s.", (uint8_t *)&v8, 0xCu);
    }

    free(v5);
  }
}

void sub_1002D8884(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      buf.val[0] = 134217984;
      *(void *)&buf.val[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: connecting peer %p.", (uint8_t *)&buf, 0xCu);
    }

    memset(&buf, 0, sizeof(buf));
    xpc_connection_get_audit_token();
    audit_token_t token = buf;
    uint64_t v5 = SecTaskCreateWithAuditToken(0, &token);
    if (!v5) {
      goto LABEL_29;
    }
    double v6 = v5;
    CFErrorRef error = 0;
    CFBooleanRef v7 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v5, @"com.apple.nfcd.event.notification", &error);
    if (v7)
    {
      CFBooleanRef v8 = v7;
      CFTypeID v9 = CFGetTypeID(v7);
      BOOL v10 = v9 == CFBooleanGetTypeID() && CFBooleanGetValue(v8) != 0;
      CFRelease(v8);
    }
    else
    {
      BOOL v10 = 0;
    }
    CFErrorRef v11 = error;
    if (error)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        token.val[0] = 134218242;
        *(void *)&token.val[1] = v3;
        LOWORD(token.val[3]) = 2112;
        *(void *)((char *)&token.val[3] + 2) = v11;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: failed to retrieve entitlement for peer %p - %@.", (uint8_t *)&token, 0x16u);
      }

      CFRelease(error);
    }
    CFRelease(v6);
    if (v10)
    {
      id v12 = *(void **)(a1 + 24);
      if (!v12)
      {
        id v13 = objc_alloc_init((Class)NSMutableArray);
        id v14 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v13;

        id v12 = *(void **)(a1 + 24);
      }
      [v12 addObject:v3];
      id v15 = [*(id *)(a1 + 24) count];
      if ((unint64_t)v15 >= 2)
      {
        id v16 = v15;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          buf.val[0] = 134217984;
          *(void *)&buf.val[1] = v16;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: unexpected number of peer connections %lu.", (uint8_t *)&buf, 0xCu);
        }
      }
      xpc_connection_set_target_queue(v3, *(dispatch_queue_t *)(a1 + 8));
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100008218;
      handler[3] = &unk_100747170;
      void handler[4] = a1;
      uint64_t v17 = v3;
      long long v19 = v17;
      xpc_connection_set_event_handler(v17, handler);
      xpc_connection_activate(v17);
    }
    else
    {
LABEL_29:
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        buf.val[0] = 134217984;
        *(void *)&buf.val[1] = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCEventStreamManager: refusing connection for peer %p.", (uint8_t *)&buf, 0xCu);
      }

      xpc_connection_cancel(v3);
    }
  }
}

void sub_1002D8B98(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 40) addObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8C04(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 48) addObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8C70(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 56) addObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8CDC(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 56) removeObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8D48(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 64) addObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8DB4(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 64) removeObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8E20(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 72) addObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8E8C(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 32);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    [*(id *)(a1 + 72) removeObject:v4];

    os_unfair_lock_unlock(v3);
  }
}

void sub_1002D8EFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002D8FA4;
    v6[3] = &unk_10072E198;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_sync(v5, v6);
  }
}

void sub_1002D8FA4(uint64_t a1)
{
}

id PDNFSecureXPCEventListenerCreate()
{
  return sub_1002D849C();
}

uint64_t PDNFSecureXPCEventListenerActivate()
{
  sub_1002D849C();
  CFBooleanRef v0 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
  id v1 = v0;
  if (v0)
  {
    CFBooleanRef v0 = (_xpc_connection_s *)*((void *)v0 + 2);
    if (v0)
    {
      id v3 = v1;
      xpc_connection_activate(v0);
      id v1 = v3;
    }
  }
  return _objc_release_x1(v0, v1);
}

void PDNFSecureXPCRegisterContactlessPresentationEventObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8B98((uint64_t)v2, v1);
}

void PDNFSecureXPCRegisterExpressTransactionEventObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8C04((uint64_t)v2, v1);
}

void PDNFSecureXPCRegisterFieldDetectEventObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8C70((uint64_t)v2, v1);
}

void PDNFSecureXPCUnregisterFieldDetectObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8CDC((uint64_t)v2, v1);
}

void PDNFSecureXPCRegisterSecureElementEventObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8D48((uint64_t)v2, v1);
}

void PDNFSecureXPCUnregisterSecureElementEventObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8DB4((uint64_t)v2, v1);
}

void PDNFSecureXPCRegisterAccessKeyEventObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8E20((uint64_t)v2, v1);
}

void PDNFSecureXPCUnregisterCarKeyEventObserver(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8E8C((uint64_t)v2, v1);
}

void PDNFSecureXPCSimulateSecureEvent(void *a1)
{
  id v1 = a1;
  sub_1002D849C();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  sub_1002D8EFC((uint64_t)v2, v1);
}

void sub_1002D9A44(uint64_t a1)
{
  if (![*(id *)(a1 + 32) updateReasonIsInitialDownload])
  {
    id v4 = [*(id *)(*(void *)(a1 + 40) + 16) transactionSourceTypeForTransactionSourceIdentifier:*(void *)(a1 + 48)];
    uint64_t v5 = objc_alloc_init(PDTransactionNotificationControllerConfiguration);
    [(PDTransactionNotificationControllerConfiguration *)v5 setTransactionSourceIdentifier:*(void *)(a1 + 48)];
    [(PDTransactionNotificationControllerConfiguration *)v5 setTransactionSourceType:v4];
    if (v4 == (id)2)
    {
      id v7 = [*(id *)(*(void *)(a1 + 40) + 16) accountUserWithTransactionSourceIdentifier:*(void *)(a1 + 48)];
      CFErrorRef v11 = [v7 accountIdentifier];
      [(PDTransactionNotificationControllerConfiguration *)v5 setAccountUser:v7];
      id v12 = [*(id *)(*(void *)(a1 + 40) + 16) passUniqueIdentifierWithAssociatedAccountIdentifier:v11];
      id v13 = [*(id *)(*(void *)(a1 + 40) + 16) passWithUniqueIdentifier:v12];
      id v14 = [v13 paymentPass];
      [(PDTransactionNotificationControllerConfiguration *)v5 setPaymentPass:v14];

      id v15 = [*(id *)(*(void *)(a1 + 40) + 16) defaultPaymentApplicationForPassUniqueIdentifier:v12];
      [(PDTransactionNotificationControllerConfiguration *)v5 setPaymentApplication:v15];
    }
    else if (v4 == (id)1)
    {
      id v16 = [*(id *)(*(void *)(a1 + 40) + 16) peerPaymentAccountForTransactionSourceIdentifier:*(void *)(a1 + 48)];
      [(PDTransactionNotificationControllerConfiguration *)v5 setAssociatedPeerPaymentAccount:v16];

      uint64_t v17 = [*(id *)(*(void *)(a1 + 40) + 16) peerPaymentAccount];
      id v7 = [v17 associatedPassUniqueID];

      int v18 = [*(id *)(*(void *)(a1 + 40) + 16) passWithUniqueIdentifier:v7];
      long long v19 = [v18 paymentPass];
      [(PDTransactionNotificationControllerConfiguration *)v5 setPaymentPass:v19];

      CFErrorRef v11 = [*(id *)(*(void *)(a1 + 40) + 16) defaultPaymentApplicationForPassUniqueIdentifier:v7];
      [(PDTransactionNotificationControllerConfiguration *)v5 setPaymentApplication:v11];
    }
    else
    {
      if (v4)
      {
LABEL_13:
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        v29[2] = sub_1002D9E8C;
        v29[3] = &unk_100747210;
        v29[4] = *(void *)(a1 + 40);
        id v20 = v5;
        id v30 = v20;
        long long v21 = objc_retainBlock(v29);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_1002DA130;
        v25[3] = &unk_100730198;
        int8x16_t v24 = *(int8x16_t *)(a1 + 32);
        id v22 = (id)v24.i64[0];
        int8x16_t v26 = vextq_s8(v24, v24, 8uLL);
        id v27 = v20;
        id v28 = *(id *)(a1 + 56);
        objc_super v23 = (void (*)(void *, void *))v21[2];
        id v2 = v20;
        v23(v21, v25);

        goto LABEL_14;
      }
      double v6 = [*(id *)(*(void *)(a1 + 40) + 16) paymentApplicationForTransactionSourceIdentifier:*(void *)(a1 + 48)];
      [(PDTransactionNotificationControllerConfiguration *)v5 setPaymentApplication:v6];

      id v7 = [*(id *)(*(void *)(a1 + 40) + 16) passUniqueIdentifierForTransactionSourceIdentifier:*(void *)(a1 + 48)];
      CFBooleanRef v8 = [*(id *)(*(void *)(a1 + 40) + 16) passWithUniqueIdentifier:v7];
      CFTypeID v9 = [v8 paymentPass];
      [(PDTransactionNotificationControllerConfiguration *)v5 setPaymentPass:v9];

      if (!v7)
      {
LABEL_12:

        goto LABEL_13;
      }
      BOOL v10 = [*(id *)(*(void *)(a1 + 40) + 16) paymentOfferCatalog];
      CFErrorRef v11 = [v10 criteriaWithType:1 passUniqueID:v7];

      [(PDTransactionNotificationControllerConfiguration *)v5 setInstallmentCriteria:v11];
    }

    goto LABEL_12;
  }
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) serviceIdentifier];
    *(_DWORD *)audit_token_t buf = 138412290;
    id v32 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Transaction %@ was part of initial fetch, skip.", buf, 0xCu);
  }
LABEL_14:
}

void sub_1002D9E8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002D9F50;
  v8[3] = &unk_1007471E8;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v3;
  id v7 = v3;
  [v4 accountWithPreventingServerFetch:0 completion:v8];
}

void sub_1002D9F50(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setPeerPaymentAccount:a2];
  id v3 = *(void **)(*(void *)(a1 + 40) + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002DA004;
  v7[3] = &unk_1007471C0;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v6;
  [v3 preferencesWithCompletion:v7];
}

void sub_1002DA004(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) setPreferences:a2];
  id v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002DA0C0;
  v5[3] = &unk_100747198;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  [v4 _fetchFamilyMemberIfNeccessaryForConfiguration:v6 completion:v5];
}

uint64_t sub_1002DA0C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 setFamilyMember:a2];
  [*(id *)(a1 + 32) setCurrentUser:v6];

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v7();
}

void sub_1002DA130(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002DA1F0;
  v5[3] = &unk_100730198;
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v2, v5);
}

id sub_1002DA1F0(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v7 = 138412546;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Computing notifications for transaction %@ with config %@", (uint8_t *)&v7, 0x16u);
  }

  [*(id *)(a1 + 48) _updateFraudNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) config:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updatePeerPaymentNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) existingTransaction:*(void *)(a1 + 56) config:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updateTransactionNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) existingTransaction:*(void *)(a1 + 56) config:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updatePromotionRewardNotificationIfNecessaryForTransaction:*(void *)(a1 + 32) existingTransaction:*(void *)(a1 + 56) config:*(void *)(a1 + 40)];
  if ([*(id *)(a1 + 48) _shouldDeleteNotificationForTransaction:*(void *)(a1 + 32)])
  {
    uint64_t v5 = +[PDPassPaymentTransactionUserNotification notificationIdentifierForPaymentTransaction:*(void *)(a1 + 32)];
    [*(id *)(*(void *)(a1 + 48) + 8) removeUserNotificationWithIdentifier:v5];
  }
  return [*(id *)(*(void *)(a1 + 48) + 8) updateWalletBadgeCount];
}

void sub_1002DA3B8(uint64_t a1)
{
  id v2 = +[PDPassPaymentTransactionUserNotification notificationIdentifierForPaymentTransaction:*(void *)(a1 + 32)];
  [*(id *)(*(void *)(a1 + 40) + 8) removeUserNotificationWithIdentifier:v2];
  [*(id *)(*(void *)(a1 + 40) + 8) updateWalletBadgeCount];
}

id sub_1002DA4EC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) enrouteTransitTypes];
  uint64_t v3 = [v2 lastObject];
  id v4 = [v3 integerValue];

  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  int v7 = *(void **)(v6 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1002DA5A4;
  v9[3] = &unk_10072F440;
  void v9[4] = v6;
  void v9[5] = v4;
  return [v7 userNotificationsForPassUniqueIdentifier:v5 ofType:6 completion:v9];
}

void sub_1002DA5A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          __int16 v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          uint64_t v10 = [v9 paymentTransaction];
          id v11 = [v10 transitType];
          id v12 = *(id *)(a1 + 40);

          if (v11 == v12)
          {
            [v9 invalidateTransitBalance];
            [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v9];
          }
          else
          {
            [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v9];
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v6);
    }
  }
}

void sub_1002DA844(uint64_t a1, void *a2)
{
  id v2 = a2;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    id v5 = 0;
    id v6 = 0;
    uint64_t v7 = *(void *)v19;
    while (1)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v2);
        }
        __int16 v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        if ([v9 isMe])
        {
          id v10 = v5;
          id v5 = v9;
          goto LABEL_18;
        }
        id v11 = [v9 altDSID];
        id v12 = *(void **)(a1 + 32);
        id v10 = v11;
        id v13 = v12;
        if (v10 == v13)
        {

LABEL_17:
          id v10 = v6;
          id v6 = v9;
LABEL_18:

          continue;
        }
        long long v14 = v13;
        if (v10) {
          BOOL v15 = v13 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15)
        {

          goto LABEL_18;
        }
        unsigned int v16 = [v10 isEqualToString:v13];

        if (v16) {
          goto LABEL_17;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (!v4) {
        goto LABEL_23;
      }
    }
  }
  id v5 = 0;
  id v6 = 0;
LABEL_23:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1002DB300(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002DB3EC;
  v7[3] = &unk_1007368A0;
  void v7[4] = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002DB3EC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _shouldCreateMerchantTransactionNotificationForTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)];
  unsigned int v3 = [*(id *)(a1 + 32) _shouldDeleteNotificationForTransaction:*(void *)(a1 + 40)];
  uint64_t v4 = *(void **)(a1 + 56);
  if (v2 && (v3 & 1) == 0)
  {
    if (!v4 || ![v4 isActive])
    {
      if (!*(unsigned char *)(a1 + 72)) {
        return;
      }
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Creating new notification for transaction or update.", v13, 2u);
      }

      [*(id *)(a1 + 64) setSuppressionBehavior:1];
      id v9 = *(void **)(a1 + 64);
      id v10 = [*(id *)(a1 + 40) barcodeIdentifier];
      [v9 setReissueBannerOnUpdate:v10 != 0];

      goto LABEL_24;
    }
    id v5 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
LABEL_23:

      [*(id *)(a1 + 64) setSuppressionBehavior:2];
      [*(id *)(a1 + 64) setReissueBannerOnUpdate:0];
LABEL_24:
      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "insertUserNotification:", *(void *)(a1 + 64), *(void *)v13);
      return;
    }
    *(_WORD *)id v13 = 0;
    id v6 = "Found an existing active user notification for transaction. Updating contents but not re-rolling banner.";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v13, 2u);
    goto LABEL_23;
  }
  if (v4)
  {
    if (!v3)
    {
      if (![v4 isActive]) {
        return;
      }
      id v5 = PKLogFacilityTypeGetObject();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      *(_WORD *)id v13 = 0;
      id v6 = "Found an existing, active user notification. Updating contents but not re-rolling banner.";
      goto LABEL_22;
    }
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found an existing user notification which should be removed", v13, 2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:*(void *)(a1 + 64)];
  }
  else
  {
    id v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)id v13 = 138412290;
      *(void *)&void v13[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not creating notification for transaction update: %@", v13, 0xCu);
    }
  }
}

void sub_1002DB7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) unansweredQuestions];
  id v5 = [v4 count];

  if (a2 || !v5)
  {
    if (a2 && !v5)
    {
      uint64_t v13 = *(void *)(a1 + 48);
      long long v14 = *(void **)(*(void *)(a1 + 40) + 8);
      [v14 removeUserNotification:v13];
    }
  }
  else if (([*(id *)(a1 + 32) originatedByDevice] & 1) == 0)
  {
    id v6 = [*(id *)(a1 + 32) accountIdentifier];

    if (v6)
    {
      uint64_t v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)audit_token_t buf = 138412290;
        uint64_t v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adding fraud user notification for transaction with a question %@", buf, 0xCu);
      }

      id v9 = *(void **)(*(void *)(a1 + 40) + 24);
      id v10 = [*(id *)(a1 + 32) accountIdentifier];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1002DB984;
      v15[3] = &unk_10072E750;
      id v11 = *(id *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 40);
      id v16 = v11;
      uint64_t v17 = v12;
      [v9 accountWithIdentifier:v10 completion:v15];
    }
  }
}

id sub_1002DB984(uint64_t a1, void *a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setAccountSuspended:", objc_msgSend(a2, "state") != (id)1);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 8);
  return [v4 insertUserNotification:v3];
}

void sub_1002DBF08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002DBFF4;
  v7[3] = &unk_100747288;
  void v7[4] = v4;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  id v11 = *(id *)(a1 + 56);
  __int16 v12 = *(_WORD *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002DBFF4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _shouldCreatePromotionRewardNotificationForTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)];
  unsigned int v3 = [*(id *)(a1 + 32) _shouldDeleteNotificationForTransaction:*(void *)(a1 + 40)];
  uint64_t v4 = *(void **)(a1 + 56);
  if (!v2 || (v3 & 1) != 0)
  {
    if (v4)
    {
      if (!v3)
      {
        if (![v4 isActive]) {
          return;
        }
        id v5 = PKLogFacilityTypeGetObject();
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_24;
        }
        *(_WORD *)uint64_t v13 = 0;
        id v6 = "Found an existing, active user notification. Updating contents but not re-rolling banner.";
        goto LABEL_23;
      }
      uint64_t v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found an existing user notification which should be removed", v13, 2u);
      }

      [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:*(void *)(a1 + 64)];
    }
    else
    {
      id v11 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t v13 = 138412290;
        *(void *)&void v13[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not creating promotional reward notification for transaction update: %@", v13, 0xCu);
      }
    }
  }
  else
  {
    if (v4 && [v4 isActive])
    {
      id v5 = PKLogFacilityTypeGetObject();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
LABEL_24:

        id v9 = *(void **)(a1 + 64);
        uint64_t v10 = 2;
LABEL_25:
        objc_msgSend(v9, "setSuppressionBehavior:", v10, *(void *)v13);
        [*(id *)(a1 + 64) setReissueBannerOnUpdate:0];
        [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 64)];
        return;
      }
      *(_WORD *)uint64_t v13 = 0;
      id v6 = "Found an existing active user notification for promotional reward. Updating contents but not re-rolling banner.";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v13, 2u);
      goto LABEL_24;
    }
    if (*(unsigned char *)(a1 + 72) || *(unsigned char *)(a1 + 73))
    {
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Creating new notification for promotional reward or update.", v13, 2u);
      }

      id v9 = *(void **)(a1 + 64);
      uint64_t v10 = 1;
      goto LABEL_25;
    }
  }
}

void sub_1002DC72C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldDisplayNotificationForManuallyAcceptedPeerPaymentTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)]&& objc_msgSend(*(id *)(a1 + 32), "_shouldCreateNotificationForTransactionUpdateReasons:notificationTypeDescription:", *(void *)(a1 + 40), @"person to person message accpeted"))
  {
    unsigned int v2 = &off_10072B0F8;
    if (*(unsigned char *)(a1 + 72)) {
      unsigned int v2 = off_10072B0F0;
    }
    unsigned int v3 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)[objc_alloc(*v2) initWithPaymentTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 56) familyMember:*(void *)(a1 + 64)];
    [(PDUserNotification *)v3 setReissueBannerOnUpdate:0];
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
    id v5 = [(PDUserNotification *)v3 notificationIdentifier];
    v90[0] = _NSConcreteStackBlock;
    v90[1] = 3221225472;
    v90[2] = sub_1002DD074;
    v90[3] = &unk_1007472D8;
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v91 = v3;
    uint64_t v92 = v6;
    char v94 = *(unsigned char *)(a1 + 73);
    id v93 = v7;
    id v8 = v3;
    [v4 userNotificationWithIdentifier:v5 completion:v90];

    id v9 = v91;
    goto LABEL_11;
  }
  if (![*(id *)(a1 + 32) _shouldDisplayNotificationForReceivedPeerPaymentTransaction:*(void *)(a1 + 40) config:*(void *)(a1 + 48)]|| !objc_msgSend(*(id *)(a1 + 32), "_shouldCreateNotificationForTransactionUpdateReasons:notificationTypeDescription:", *(void *)(a1 + 40), @"person to person message received"))
  {
    if (!*(unsigned char *)(a1 + 74)) {
      return;
    }
    if (*(unsigned char *)(a1 + 75)
      && [*(id *)(a1 + 40) transactionType] == (id)3
      && [*(id *)(a1 + 40) peerPaymentStatus] == (id)7
      && [*(id *)(a1 + 40) peerPaymentType] == (id)1
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"expired peer payment send notification"])
    {
      BOOL v15 = [(PDPeerPaymentTransactionUserNotification *)[PDPeerPaymentTransactionExpiredUserNotification alloc] initWithPaymentTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 56) familyMember:*(void *)(a1 + 64)];
      [(PDUserNotification *)v15 setReissueBannerOnUpdate:0];
      id v16 = *(void **)(*(void *)(a1 + 32) + 8);
      uint64_t v17 = [(PDUserNotification *)v15 notificationIdentifier];
      v80[0] = _NSConcreteStackBlock;
      v80[1] = 3221225472;
      v80[2] = sub_1002DD2EC;
      v80[3] = &unk_1007472D8;
      char v84 = *(unsigned char *)(a1 + 73);
      long long v18 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 32);
      long long v81 = v18;
      uint64_t v82 = v19;
      long long v83 = v15;
      id v8 = v15;
      [v16 userNotificationWithIdentifier:v17 completion:v80];

      id v9 = v81;
      goto LABEL_11;
    }
    if (!*(unsigned char *)(a1 + 74)) {
      return;
    }
    if ([*(id *)(a1 + 40) transactionType] == (id)3
      && [*(id *)(a1 + 40) peerPaymentStatus] == (id)6
      && [*(id *)(a1 + 40) peerPaymentType] == (id)1
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"rejected peer payment send notification"])
    {
      long long v20 = [(PDPeerPaymentTransactionUserNotification *)[PDPeerPaymentTransactionRejectedSendUserNotification alloc] initWithPaymentTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 56) familyMember:*(void *)(a1 + 64)];
      [(PDUserNotification *)v20 setReissueBannerOnUpdate:0];
      long long v21 = *(void **)(*(void *)(a1 + 32) + 8);
      id v22 = [(PDUserNotification *)v20 notificationIdentifier];
      v75[0] = _NSConcreteStackBlock;
      v75[1] = 3221225472;
      v75[2] = sub_1002DD3C4;
      v75[3] = &unk_1007472D8;
      char v79 = *(unsigned char *)(a1 + 73);
      objc_super v23 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v24 = *(void *)(a1 + 32);
      long long v76 = v23;
      uint64_t v77 = v24;
      long long v78 = v20;
      id v8 = v20;
      [v21 userNotificationWithIdentifier:v22 completion:v75];

      id v9 = v76;
      goto LABEL_11;
    }
    if (!*(unsigned char *)(a1 + 74)) {
      return;
    }
    if (*(unsigned char *)(a1 + 72)
      && [*(id *)(a1 + 40) transactionType] == (id)3
      && [*(id *)(a1 + 40) peerPaymentStatus] == (id)6
      && [*(id *)(a1 + 40) peerPaymentType] == (id)2
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"rejected peer payment receive notification"])
    {
      id v25 = [(PDPeerPaymentTransactionUserNotification *)[PDPeerPaymentTransactionRejectedReceiveUserNotification alloc] initWithPaymentTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 56) familyMember:*(void *)(a1 + 64)];
      [(PDUserNotification *)v25 setReissueBannerOnUpdate:0];
      int8x16_t v26 = *(void **)(*(void *)(a1 + 32) + 8);
      id v27 = [(PDUserNotification *)v25 notificationIdentifier];
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472;
      v70[2] = sub_1002DD49C;
      v70[3] = &unk_1007472D8;
      char v74 = *(unsigned char *)(a1 + 73);
      id v28 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v29 = *(void *)(a1 + 32);
      id v71 = v28;
      uint64_t v72 = v29;
      id v73 = v25;
      id v8 = v25;
      [v26 userNotificationWithIdentifier:v27 completion:v70];

      id v9 = v71;
      goto LABEL_11;
    }
    if (!*(unsigned char *)(a1 + 74) || !*(unsigned char *)(a1 + 75)) {
      return;
    }
    if ([*(id *)(a1 + 40) transactionSource] == (id)1
      && [*(id *)(a1 + 40) transactionStatus] == (id)2
      && [*(id *)(a1 + 32) _shouldCreateNotificationForTransactionUpdateReasons:*(void *)(a1 + 40) notificationTypeDescription:@"peer payment contactless transaction declined notification"])
    {
      id v30 = [(PDPeerPaymentTransactionUserNotification *)[PDPeerPaymentTransactionDeclinedUserNotification alloc] initWithPaymentTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 56) familyMember:*(void *)(a1 + 64)];
      [(PDUserNotification *)v30 setReissueBannerOnUpdate:0];
      id v31 = *(void **)(*(void *)(a1 + 32) + 8);
      id v32 = [(PDUserNotification *)v30 notificationIdentifier];
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472;
      v65[2] = sub_1002DD574;
      v65[3] = &unk_1007472D8;
      char v69 = *(unsigned char *)(a1 + 73);
      id v33 = (PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification *)*(id *)(a1 + 40);
      uint64_t v34 = *(void *)(a1 + 32);
      long long v66 = v33;
      uint64_t v67 = v34;
      id v68 = v30;
      id v8 = v30;
      [v31 userNotificationWithIdentifier:v32 completion:v65];

      id v9 = v66;
      goto LABEL_11;
    }
    if (!*(unsigned char *)(a1 + 74)) {
      return;
    }
    if (!*(unsigned char *)(a1 + 75)) {
      return;
    }
    uint64_t v35 = [*(id *)(a1 + 40) recurringPeerPayment];
    if (!v35) {
      return;
    }
    uint64_t v36 = (void *)v35;
    id v37 = [*(id *)(a1 + 40) peerPaymentStatus];

    if (v37 != (id)1) {
      return;
    }
    id v38 = [*(id *)(a1 + 40) recurringPeerPayment];
    id v39 = [v38 type];
    if (v39 == (id)3)
    {
      long long v53 = [*(id *)(a1 + 48) peerPaymentAccount];
      long long v54 = [v53 lastUpdated];
      [v54 timeIntervalSinceNow];
      double v56 = v55;

      if (v56 <= -60.0)
      {
        id v40 = 0;
      }
      else
      {
        long long v57 = [*(id *)(a1 + 48) peerPaymentAccount];
        id v40 = [v57 currentBalance];
      }
      id v58 = [[PDPeerPaymentThresholdTopUpUserNotification alloc] initWithPassUniqueIdentifier:*(void *)(a1 + 56) transaction:*(void *)(a1 + 40) updatedBalance:v40];
      [(PDUserNotification *)v58 setReissueBannerOnUpdate:0];
      [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v58];
    }
    else
    {
      if (v39 != (id)1)
      {
LABEL_57:

        return;
      }
      id v40 = objc_alloc_init((Class)PKPassKitServicesXPCService);
      id v41 = [*(id *)(a1 + 40) recurringPeerPayment];
      long long v42 = [v41 memo];
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472;
      v60[2] = sub_1002DD64C;
      v60[3] = &unk_100747300;
      id v61 = *(id *)(a1 + 56);
      id v43 = *(id *)(a1 + 40);
      uint64_t v44 = *(void *)(a1 + 32);
      id v62 = v43;
      uint64_t v63 = v44;
      char v64 = *(unsigned char *)(a1 + 73);
      objc_msgSend(v40, "imageDataForRecurringPaymentMemo:size:completion:", v42, v60, 100.0, 100.0);
    }
    goto LABEL_57;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v10 = [(PDPeerPaymentTransactionUserNotification *)[PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification alloc] initWithPaymentTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 56) familyMember:*(void *)(a1 + 64)];
    if (!v10) {
      return;
    }
    goto LABEL_10;
  }
  id v59 = [*(id *)(a1 + 48) peerPaymentAccount];
  if ([v59 isAccountStateDirty])
  {
  }
  else
  {
    id v45 = [*(id *)(a1 + 48) peerPaymentAccount];
    id v46 = [v45 lastUpdated];
    [v46 timeIntervalSinceNow];
    double v48 = v47;

    if (v48 > -60.0)
    {
      id v49 = [PDPeerPaymentTransactionReceivedUserNotification alloc];
      uint64_t v50 = *(void *)(a1 + 56);
      id v51 = [*(id *)(a1 + 48) peerPaymentAccount];
      long long v52 = [v51 currentBalance];
      uint64_t v10 = [(PDPeerPaymentTransactionReceivedUserNotification *)v49 initWithPassUniqueIdentifier:v50 accountBalance:v52];

      if (v10)
      {
LABEL_10:
        [(PDUserNotification *)v10 setReissueBannerOnUpdate:0];
        id v11 = *(void **)(*(void *)(a1 + 32) + 8);
        uint64_t v12 = [(PDUserNotification *)v10 notificationIdentifier];
        v85[0] = _NSConcreteStackBlock;
        v85[1] = 3221225472;
        v85[2] = sub_1002DD1B0;
        v85[3] = &unk_1007472D8;
        uint64_t v13 = *(void *)(a1 + 32);
        long long v14 = *(void **)(a1 + 40);
        long long v86 = v10;
        uint64_t v87 = v13;
        char v89 = *(unsigned char *)(a1 + 73);
        id v88 = v14;
        id v8 = v10;
        [v11 userNotificationWithIdentifier:v12 completion:v85];

        id v9 = v86;
LABEL_11:
      }
    }
  }
}

void sub_1002DD074(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 isActive])
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found an existing active user notification for accepted transaction. Updating contents but not re-rolling banner.", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) setSuppressionBehavior:2];
LABEL_10:
    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 32)];
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adding user notification for accepted transaction %@", (uint8_t *)&v8, 0xCu);
    }

    goto LABEL_10;
  }
LABEL_11:
}

void sub_1002DD1B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 isActive])
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found an existing active user notification for received transaction. Updating contents but not re-rolling banner.", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) setSuppressionBehavior:2];
LABEL_10:
    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 32)];
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adding user notification for received transaction %@", (uint8_t *)&v8, 0xCu);
    }

    goto LABEL_10;
  }
LABEL_11:
}

void sub_1002DD2EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(unsigned char *)(a1 + 56))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding user notification for expired transaction %@", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_1002DD3C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(unsigned char *)(a1 + 56))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding user notification for rejected send transaction %@", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_1002DD49C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(unsigned char *)(a1 + 56))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding user notification for rejected receive transaction %@", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_1002DD574(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 || *(unsigned char *)(a1 + 56))
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding user notification for declined transaction %@", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 48)];
  }
}

void sub_1002DD64C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [[PDPeerPaymentRecurringTransactionUserNotification alloc] initWithPassUniqueIdentifier:*(void *)(a1 + 32) transaction:*(void *)(a1 + 40) imageData:v3];

  [(PDUserNotification *)v4 setReissueBannerOnUpdate:0];
  uint64_t v5 = *(void **)(*(void *)(a1 + 48) + 8);
  int v6 = [(PDUserNotification *)v4 notificationIdentifier];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002DD768;
  v10[3] = &unk_1007472D8;
  id v11 = v4;
  char v13 = *(unsigned char *)(a1 + 56);
  int8x16_t v9 = *(int8x16_t *)(a1 + 40);
  id v7 = (id)v9.i64[0];
  int8x16_t v12 = vextq_s8(v9, v9, 8uLL);
  int v8 = v4;
  [v5 userNotificationWithIdentifier:v6 completion:v10];
}

void sub_1002DD768(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 isActive])
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found an existing active user notification for recurring transaction. Updating contents but not re-rolling banner.", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) setSuppressionBehavior:2];
LABEL_10:
    [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:*(void *)(a1 + 32)];
    goto LABEL_11;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    int v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adding user notification for recurring transaction %@", (uint8_t *)&v8, 0xCu);
    }

    goto LABEL_10;
  }
LABEL_11:
}

void sub_1002DD8A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && [v3 isActive])
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Found an existing active user notification for received transaction. Tearing down banner.", v6, 2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v4];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1002DE244(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSDate date];
  id v7 = [v4 dateByAddingTimeInterval:1209600.0];

  uint64_t v5 = [v3 firstObject];

  if (v5)
  {
    [v5 updateWithNewBalance:a1[4] andNewReminderDate:v7];
    [*(id *)(a1[5] + 8) insertUserNotification:v5];
  }
  else
  {
    int v6 = [[PDPeerPaymentBalanceReminderUserNotification alloc] initWithPassUniqueIdentifier:a1[6] currentBalance:a1[4] reminderDate:v7];
    [*(id *)(a1[5] + 8) insertUserNotification:v6];
  }
}

void sub_1002DFF60(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40));
  [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
  unsigned int v2 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 40);
  os_unfair_lock_unlock(v2);
}

void sub_1002E0058(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 16) payLaterFinancingPlansRequiringMerchantCleanupWithTransactionDateWithinWindow:*(double *)(a1 + 48)];
  unsigned int v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)audit_token_t buf = 134217984;
    id v18 = [v1 count];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Processing %ld financing plans for merchant reprocessing", buf, 0xCu);
  }

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = [v8 planIdentifier];
          uint64_t v10 = [v8 merchant];
          *(_DWORD *)audit_token_t buf = 138412546;
          id v18 = v9;
          __int16 v19 = 2112;
          long long v20 = v10;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Processing plan for reprocessing: %@, merchant: %@", buf, 0x16u);
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }
    while (v5);
  }

  [*(id *)(a1 + 32) processFinancingPlans:v3];
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

void sub_1002E079C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 merchant];
  uint64_t v5 = [v3 brand];
  id v6 = [v3 result];
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = [*(id *)(a1 + 32) planIdentifier];
    *(_DWORD *)audit_token_t buf = 138413058;
    long long v21 = v8;
    __int16 v22 = 2048;
    id v23 = v6;
    __int16 v24 = 2112;
    uint64_t v25 = v4;
    __int16 v26 = 2112;
    uint64_t v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Completed look up of maps data for financing plan id %@ with result %ld. Maps merchant: %@, maps brand: %@", buf, 0x2Au);
  }
  uint64_t v9 = [*(id *)(a1 + 32) merchant];
  uint64_t v10 = v9;
  if (v9) {
    id v11 = v9;
  }
  else {
    id v11 = objc_alloc_init((Class)PKPayLaterMerchant);
  }
  int8x16_t v12 = v11;

  objc_msgSend(v12, "setFallbackCategory:", objc_msgSend(v3, "fallbackCategory"));
  long long v13 = +[NSDate date];
  [v12 setLastMerchantReprocessingDate:v13];

  if (!(v4 | v5)) {
    [v12 setRequiresMerchantReprocessing:1];
  }
  if (v6 == (id)1)
  {
    [v12 setRequiresMerchantReprocessing:1];
    [v12 setLastMerchantReprocessingDate:0];
  }
  else if (v6 == (id)2 && v4 | v5)
  {
    [v12 setMapsMerchant:v4];
    [v12 setMapsBrand:v5];
    [v12 setRequiresMerchantReprocessing:0];
  }
  long long v14 = *(void **)(a1 + 40);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1002E0A3C;
  v17[3] = &unk_100747350;
  void v17[4] = v14;
  id v15 = v12;
  id v18 = v15;
  id v19 = *(id *)(a1 + 32);
  [v14 _accessObserversWithHandler:v17];
  uint64_t v16 = *(void *)(a1 + 48);
  if (v16) {
    (*(void (**)(void))(v16 + 16))();
  }
}

id sub_1002E0A3C(void *a1, void *a2)
{
  return _[a2 payLaterMerchantProcessor:a1[4] didProcessPayLaterMerchant:a1[5] forFinancingPlan:a1[6]];
}

void sub_1002E0FB4(uint64_t a1, void *a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = a2;
    [v5 state];
    id v7 = PKAccountStateToString();

    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set ad status condition on account with state: %@, with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1002E1258(uint64_t a1, void *a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = a2;
    [v5 state];
    id v7 = PKAccountStateToString();

    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clear ad status condition on existing account with state: %@, with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1002E1340(uint64_t a1, void *a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = a2;
    [v5 state];
    id v7 = PKAccountStateToString();

    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set ad status condition on existing account with state: %@, with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1002E14F0(uint64_t a1, void *a2)
{
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = a2;
    [v5 state];
    id v7 = PKAccountStateToString();

    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clear ad status condition on account with state: %@ with error: %@", (uint8_t *)&v8, 0x16u);
  }
}

id sub_1002E1A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1002E1B50(id a1, PKPassLiveRender *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPassLiveRender setEnabled:](v4, "setEnabled:", [a3 BOOLValue]);
}

void sub_1002E5014(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(void **)(a1 + 32);
  PDTaskWarning(0, *(void **)(a1 + 40), a2, @"Received invalid pass data", a5, a6, a7, a8, v9);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  [v8 addObject:v10];
}

void sub_1002E6F9C(uint64_t a1, void *a2)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = [a2 archiveData];
  [v2 safelyAddObject:v3];
}

id sub_1002E7B1C(void *a1, int a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init((Class)NSDateFormatter);
  [v4 setDateFormat:@"yyyy-MM-dd HH:mm:ss Z"];
  uint64_t v5 = +[NSDate date];
  id v6 = [v4 stringFromDate:v5];

  id v7 = @"[%@] %@";
  if (a2) {
    id v7 = @"[%@] %@. This will be treated as an error in a future release.";
  }
  int v8 = v7;
  uint64_t v9 = PDErrorDescription();

  id v10 = PKStringWithValidatedFormat();

  return v10;
}

void sub_1002E7D1C(uint64_t a1, void *a2)
{
  unsigned int v2 = *(void **)(a1 + 32);
  sub_1002E7B1C(a2, 1);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 addObject:v3];
}

void sub_1002E866C(uint64_t a1)
{
  [*(id *)(a1 + 32) _resurfaceRecentNotificationsAndPromote:1];
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[3];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002E8708;
  v4[3] = &unk_10072FC20;
  uint64_t v5 = v2;
  [v3 accountsWithCompletion:v4];
}

id sub_1002E8708(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 72) = [a2 count] != 0;
  id v3 = *(void **)(*(void *)(a1 + 32) + 64);
  return [v3 recalculateNotificationNames];
}

void sub_1002E8840(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) _resurfaceRecentNotificationsForAccount:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7) andPromote:*(unsigned __int8 *)(a1 + 40)];
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_1002E89DC(uint64_t a1)
{
  unsigned int v2 = +[NSDate date];
  id v3 = [v2 dateByAddingTimeInterval:-43200.0];
  id v4 = *(void **)(*(void *)(a1 + 32) + 16);
  id v5 = [*(id *)(a1 + 40) accountIdentifier];
  uint64_t v6 = [v4 passUniqueIdentifierWithAssociatedAccountIdentifier:v5];

  if ([*(id *)(a1 + 40) supportsShowNotifications]) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    long long v8 = *(void **)(*(void *)(a1 + 32) + 24);
    long long v9 = [*(id *)(a1 + 40) accountIdentifier];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1002E8B34;
    v11[3] = &unk_100747480;
    long long v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    char v13 = *(unsigned char *)(a1 + 48);
    [v8 eventsForAccountIdentifier:v9 types:&__NSArray0__struct startDate:v3 endDate:v2 orderedByDate:-1 limit:0 completion:v11];
  }
}

void sub_1002E8B34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002E8BF8;
  v7[3] = &unk_1007306E0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  char v11 = *(unsigned char *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002E8BF8(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        BOOL v7 = objc_msgSend(*(id *)(a1 + 40), "_notificationForAccountEvent:account:", *(void *)(*((void *)&v9 + 1) + 8 * i), *(void *)(a1 + 48), (void)v9);
        id v8 = v7;
        if (!*(unsigned char *)(a1 + 56)) {
          [v7 setSuppressionBehavior:2];
        }
        [v8 setReissueBannerOnUpdate:0];
        [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v8];
      }
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_1002E9354(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1002E9378(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  long long v9 = *(void **)(a1[4] + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002E9454;
  v13[3] = &unk_1007474A8;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 accountWithIdentifier:v8 completion:v13];
}

void sub_1002E9454(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  id v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1002E94C0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  long long v9 = *(void **)(a1[4] + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002E959C;
  v13[3] = &unk_1007474D0;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 accountUsersForAccountWithIdentifier:v8 completion:v13];
}

uint64_t sub_1002E959C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [objc_alloc((Class)PKAccountUserCollection) initWithAccountUsers:v3];

  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v7();
}

void sub_1002E9620(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) creditDetails];
  id v3 = [v2 currencyCode];

  id v4 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  if (v4)
  {
    uint64_t v5 = [v4 associatedPassUniqueID];
    id v6 = *(void **)(a1 + 32);
    id v7 = v5;
    uint64_t v8 = v6;
    if (v7 == v8)
    {

      goto LABEL_11;
    }
    long long v9 = v8;
    if (v7) {
      BOOL v10 = v8 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {

LABEL_38:
      goto LABEL_39;
    }
    unsigned __int8 v11 = [v7 isEqualToString:v8];

    if (v11)
    {
LABEL_11:
      if (v3)
      {
        id v7 = objc_alloc_init((Class)NSMutableSet);
        id v12 = [objc_alloc((Class)PKTransactionSource) initWithPaymentPass:*(void *)(a1 + 40)];
        [v7 addObject:v12];

        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        char v13 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) accountUsers];
        id v14 = [v13 countByEnumeratingWithState:&v72 objects:v77 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v73;
          do
          {
            for (i = 0; i != v15; i = (char *)i + 1)
            {
              if (*(void *)v73 != v16) {
                objc_enumerationMutation(v13);
              }
              id v18 = [objc_alloc((Class)PKTransactionSource) initWithAccountUser:*(void *)(*((void *)&v72 + 1) + 8 * i)];
              [v7 addObject:v18];
            }
            id v15 = [v13 countByEnumeratingWithState:&v72 objects:v77 count:16];
          }
          while (v15);
        }

        id v19 = objc_alloc((Class)PKTransactionSourceCollection);
        id v20 = [v7 copy];
        id v21 = [v19 initWithTransactionSources:v20];

        v69[0] = _NSConcreteStackBlock;
        v69[1] = 3221225472;
        v69[2] = sub_1002E9DBC;
        v69[3] = &unk_1007474F8;
        uint8_t v69[4] = *(void *)(a1 + 48);
        id v22 = v21;
        id v70 = v22;
        id v71 = *(id *)(a1 + 56);
        id v62 = objc_retainBlock(v69);
        unsigned int v23 = [*(id *)(a1 + 64) containsObject:&off_10078B670];
        unsigned int v24 = [*(id *)(a1 + 64) containsObject:&off_10078B688];
        if (PKIsPhone() && v23)
        {
          unsigned int v58 = v24;
          uint64_t v25 = +[PKSpendingSummaryFetcher previousStartOfWeekFromDate:*(void *)(a1 + 72)];
          __int16 v26 = +[PKSpendingSummaryFetcher nextStartOfWeekFromDate:v25];
          uint64_t v27 = [v26 dateByAddingTimeInterval:-1.0];
          id v28 = +[NSCalendar currentCalendar];
          id v29 = [v28 component:16 fromDate:v26];

          uint64_t v60 = (void *)v27;
          if (v29 == (id)1)
          {
            id v30 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)audit_token_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Ignoring weekly notification.", buf, 2u);
            }
          }
          else
          {
            id v31 = *(void **)(*(void *)(a1 + 48) + 16);
            id v32 = [v22 transactionSourceIdentifiers];
            [v31 transactionsForTransactionSourceIdentifiers:v32 withTransactionSource:0 withBackingData:1 startDate:v25 endDate:v27 orderedByDate:1 limit:0];
            id v30 = v33 = v27;

            uint64_t v34 = +[PKSpendingSummaryFetcher summaryWithTransactions:v30 transactionSourceCollection:v22 accountUser:0 currency:v3 type:0 startDate:v25 endDate:v33 lastSummary:0];
            ((void (*)(void *, void *))v62[2])(v62, v34);
            uint64_t v35 = [[PDPassPaymentSpendingSummaryUserNotification alloc] initWithSpendingSummary:v34 accountUserCollection:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) forPassUniqueIdentifier:*(void *)(a1 + 32)];
            uint64_t v36 = v35;
            if (v35)
            {
              double v56 = *(void **)(*(void *)(a1 + 48) + 8);
              id v37 = [(PDUserNotification *)v35 notificationIdentifier];
              v66[0] = _NSConcreteStackBlock;
              v66[1] = 3221225472;
              v66[2] = sub_1002EA0A4;
              v66[3] = &unk_100747520;
              char v68 = *(unsigned char *)(a1 + 96);
              v66[4] = *(void *)(a1 + 48);
              uint64_t v67 = v36;
              [v56 userNotificationWithIdentifier:v37 completion:v66];
            }
          }
          unsigned int v24 = v58;
        }
        if (v24)
        {
          long long v57 = v3;
          uint64_t v38 = PKStartOfMonth();
          id v39 = PKStartOfNextMonth();
          uint64_t v40 = [v39 dateByAddingTimeInterval:-1.0];

          id v41 = *(void **)(*(void *)(a1 + 48) + 16);
          long long v42 = [v22 transactionSourceIdentifiers];
          [v41 transactionsForTransactionSourceIdentifiers:v42 withTransactionSource:0 withBackingData:1 startDate:v38 endDate:v40 orderedByDate:1 limit:0];
          v44 = id v43 = v22;

          id v45 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) creditDetails];
          id v46 = [v45 currencyCode];
          uint64_t v55 = v40;
          id v59 = (void *)v40;
          id v61 = (void *)v44;
          double v47 = (void *)v38;
          uint64_t v48 = v44;
          id v22 = v43;
          id v49 = +[PKSpendingSummaryFetcher summaryWithTransactions:v48 transactionSourceCollection:v43 accountUser:0 currency:v46 type:1 startDate:v38 endDate:v55 lastSummary:0];

          ((void (*)(void *, void *))v62[2])(v62, v49);
          uint64_t v50 = [[PDPassPaymentSpendingSummaryUserNotification alloc] initWithSpendingSummary:v49 accountUserCollection:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) forPassUniqueIdentifier:*(void *)(a1 + 32)];
          id v51 = v50;
          if (v50)
          {
            long long v52 = *(void **)(*(void *)(a1 + 48) + 8);
            long long v53 = [(PDUserNotification *)v50 notificationIdentifier];
            v63[0] = _NSConcreteStackBlock;
            v63[1] = 3221225472;
            v63[2] = sub_1002EA1DC;
            v63[3] = &unk_100747520;
            char v65 = *(unsigned char *)(a1 + 96);
            uint8_t v63[4] = *(void *)(a1 + 48);
            char v64 = v51;
            [v52 userNotificationWithIdentifier:v53 completion:v63];
          }
          else
          {
            long long v54 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)audit_token_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "No notification for monthly summary", buf, 2u);
            }
          }
          id v3 = v57;
        }
      }
      else
      {
        id v7 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)audit_token_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Missing current balance or currency code, not triggering summary notification", buf, 2u);
        }
      }
      goto LABEL_38;
    }
  }
LABEL_39:
}

void sub_1002E9DBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v5 = [*(id *)(a1 + 40) transactionSourceIdentifiers];
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = [v3 startDate];
  uint64_t v8 = [v3 endDate];
  long long v9 = [v4 installmentPlanTransactionsForTransactionSourceIdentifiers:v5 accountIdentifier:v6 redeemed:1 withRedemptionType:0 startDate:v7 endDate:v8];

  if ([v9 count])
  {
    BOOL v10 = [v3 rewards];
    unsigned __int8 v11 = [v10 totalAmount];
    id v30 = [v11 currency];

    id v12 = [v10 totalAmount];
    char v13 = [v12 amount];
    id v14 = v13;
    if (v13)
    {
      id v15 = v13;
    }
    else
    {
      id v15 = +[NSDecimalNumber zero];
    }
    uint64_t v16 = v15;

    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v17 = v9;
    id v18 = [v17 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v32;
      do
      {
        for (i = 0; i != v19; i = (char *)i + 1)
        {
          if (*(void *)v32 != v20) {
            objc_enumerationMutation(v17);
          }
          id v22 = *(void **)(*((void *)&v31 + 1) + 8 * i);
          unsigned int v23 = [v22 rewardsTotalAmount];

          if (v23)
          {
            unsigned int v24 = [v22 rewardsTotalAmount];
            uint64_t v25 = [(NSDecimalNumber *)v16 decimalNumberByAdding:v24];

            uint64_t v16 = (NSDecimalNumber *)v25;
          }
        }
        id v19 = [v17 countByEnumeratingWithState:&v31 objects:v35 count:16];
      }
      while (v19);
    }

    __int16 v26 = PKCurrencyAmountCreate(v16, v30, 0);
    [v10 setTotalAmount:v26];

    objc_msgSend(v10, "setTransactionCount:", (char *)objc_msgSend(v10, "transactionCount") + (void)objc_msgSend(v17, "count"));
    uint64_t v27 = [v17 allObjects];
    id v28 = [v10 transactions];
    id v29 = [v27 arrayByAddingObjectsFromArray:v28];
    [v10 setTransactions:v29];

    [v3 setRewards:v10];
  }
}

void sub_1002EA0A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(unsigned char *)(a1 + 48))
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v3];
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = +[NSDate date];
    [v4 setDate:v5];
  }
  uint64_t v6 = [*(id *)(a1 + 40) date];
  id v7 = +[NSDate date];
  id v8 = [v6 compare:v7];

  if (*(unsigned char *)(a1 + 48) || v3 && ([v3 isActive] & 1) != 0 || v8 != (id)-1)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 40)];
  }
  else
  {
    long long v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "No notification for weekly summary", v10, 2u);
    }
  }
}

void sub_1002EA1DC(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (v8 && *(unsigned char *)(a1 + 48))
  {
    [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v8];
    id v3 = *(void **)(a1 + 40);
    id v4 = +[NSDate date];
    [v3 setDate:v4];
  }
  uint64_t v5 = [*(id *)(a1 + 40) date];
  uint64_t v6 = +[NSDate date];
  id v7 = [v5 compare:v6];

  if (*(unsigned char *)(a1 + 48) || v8 && ([v8 isActive] & 1) != 0 || v7 != (id)-1) {
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 40)];
  }
}

id sub_1002EA3CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002EA440;
  v4[3] = &unk_10072FC20;
  void v4[4] = v1;
  return [v2 accountsWithCompletion:v4];
}

void sub_1002EA440(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v22;
    uint64_t v16 = v20;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if (objc_msgSend(v8, "supportsShowNotifications", v16)) {
          unsigned __int8 v9 = [v8 blockNotifications];
        }
        else {
          unsigned __int8 v9 = 1;
        }
        BOOL v10 = [v8 accountIdentifier];
        unsigned __int8 v11 = [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIdentifierWithAssociatedAccountIdentifier:v10];
        if (v11 && (v9 & 1) == 0 && [v8 feature] == (id)2)
        {
          uint64_t v12 = *(void *)(a1 + 32);
          char v13 = *(void **)(v12 + 24);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v20[0] = sub_1002EA68C;
          v20[1] = &unk_100747570;
          v20[2] = v12;
          v20[3] = v8;
          [v13 scheduledPaymentsWithAccountIdentifier:v10 includeFailedRecurringPayments:0 allowFetchFromServer:0 completion:v19];
          uint64_t v14 = *(void *)(a1 + 32);
          id v15 = *(void **)(v14 + 24);
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          v17[2] = sub_1002EA69C;
          v17[3] = &unk_100747598;
          void v17[4] = v14;
          void v17[5] = v8;
          id v18 = v11;
          [v15 creditRecoveryPaymentPlanInformationForAccountIdentifier:v10 allowFetchFromServer:0 completion:v17];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v5);
  }
}

id sub_1002EA68C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _recomputePaymentNotificationsForScheduledPayments:a2 account:*(void *)(a1 + 40)];
}

id sub_1002EA69C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updatePastDueNotificationsForOldAccount:newAccount:passUniqueIdentifier:enrolledInRecoveryPaymentPlan:");
}

void sub_1002EA728(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = 0;
}

id sub_1002EA804(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002EA87C;
  v5[3] = &unk_1007475C0;
  void v5[4] = v2;
  return [v2 _notificationForAccountEvent:v1 withManager:v3 completion:v5];
}

id sub_1002EA87C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:a2];
}

id sub_1002EA954(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002EA9CC;
  v5[3] = &unk_1007475C0;
  void v5[4] = v2;
  return [v2 _notificationForAccountEvent:v1 withManager:v3 completion:v5];
}

void sub_1002EA9CC(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    [v3 setSuppressionBehavior:2];
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v3];
  }
}

id sub_1002EAAF8(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  uint64_t v3 = a1[6];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002EAB70;
  v5[3] = &unk_1007475C0;
  void v5[4] = v2;
  return [v2 _notificationForAccountEvent:v1 withManager:v3 completion:v5];
}

id sub_1002EAB70(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:a2];
}

void sub_1002EAC70(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "pk_setByApplyingBlock:", &stru_100747600);
  if ([v2 count])
  {
    [*(id *)(*(void *)(a1 + 40) + 16) deleteAccountPendingFamilyMembersWithAccountIdentifier:*(void *)(a1 + 48) altDSIDs:v2];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = v2;
    id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v16;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v16 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = +[PDAccountPendingFamilyMemberReminderNotification notificationIdentifierForAltDSID:*(void *)(*((void *)&v15 + 1) + 8 * (void)v7)];
          [*(id *)(*(void *)(a1 + 40) + 8) removeUserNotificationWithIdentifier:v8];

          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v5);
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  unsigned __int8 v11 = *(void **)(v9 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002EAE54;
  v12[3] = &unk_10072E728;
  void v12[4] = v9;
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 56);
  [v11 accountWithIdentifier:v10 completion:v12];
}

id sub_1002EAE4C(id a1, PKAccountUser *a2)
{
  return [(PKAccountUser *)a2 altDSID];
}

void sub_1002EAE54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002EAF28;
  v8[3] = &unk_100730198;
  id v9 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = v3;
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1002EAF28(uint64_t a1)
{
  id v3 = [objc_alloc((Class)PKAccountUserCollection) initWithAccountUsers:*(void *)(a1 + 32)];
  id v2 = [objc_alloc((Class)PKAccountUserCollection) initWithAccountUsers:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _updateAccountUserMonthlySpendLimitNotificationsForOldAccount:0 newAccount:*(void *)(a1 + 56) accountUserCollection:v3];
  [*(id *)(a1 + 48) _updateAccountUserIdentityStatusNotificationsWithAccount:*(void *)(a1 + 56) accountUserCollection:v3 oldAccountUserCollection:v2];
}

void *sub_1002EB028(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 72))
  {
    *(unsigned char *)(v1 + 72) = 1;
    return [*(id *)(result[4] + 64) recalculateNotificationNames];
  }
  return result;
}

void sub_1002EB110(id *a1)
{
  if ([a1[4] feature] == (id)3)
  {
    id v3 = a1[4];
    id v2 = a1[5];
    id v4 = a1[6];
    _[v2 updatedPayLaterAccount:v3 oldAccount:v4];
    return;
  }
  if ([a1[4] feature] != (id)5)
  {
    if ([a1[6] supportsShowNotifications]) {
      unsigned int v8 = [a1[6] blockNotifications] ^ 1;
    }
    else {
      unsigned int v8 = 0;
    }
    if ([a1[4] supportsShowNotifications]) {
      unsigned int v9 = [a1[4] blockNotifications] ^ 1;
    }
    else {
      unsigned int v9 = 0;
    }
    id v10 = [a1[4] accountIdentifier];
    uint64_t v11 = [*((id *)a1[5] + 2) passUniqueIdentifierWithAssociatedAccountIdentifier:v10];
    if ((v9 ^ 1 | v8))
    {
      if (((v8 ^ 1 | v9) & 1) == 0)
      {
        id v12 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)audit_token_t buf = 138412290;
          long long v53 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Removing notifications for account %@", buf, 0xCu);
        }

        if (!v11) {
          goto LABEL_51;
        }
        [*((id *)a1[5] + 1) removeUserNotificationsForPassUniqueIdentifier:v11 ofType:17];
        goto LABEL_25;
      }
    }
    else
    {
      id v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)audit_token_t buf = 138412290;
        long long v53 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Resurfacing notifications for account %@", buf, 0xCu);
      }

      [a1[5] _resurfaceRecentNotificationsForAccount:a1[4] andPromote:0];
    }
    if (!v11)
    {
LABEL_51:

      return;
    }
LABEL_25:
    id v14 = (char *)[a1[6] state];
    long long v15 = (char *)[a1[4] state];
    id v16 = [a1[6] stateReason];
    id v17 = [a1[4] stateReason];
    BOOL v19 = v17 == (id)8 && v16 != (id)8;
    if ((unint64_t)(v15 - 2) >= 2)
    {
      if (v15 == (char *)4
        && (char *)[a1[4] accessLevel] - 1 <= (char *)1
        && (unint64_t)(v14 - 1) <= 2
        && [a1[4] stateReason] == (id)13)
      {
        BOOL v19 = 1;
        unsigned int v9 = 1;
      }
    }
    else if (v14 == (char *)1)
    {
      BOOL v19 = 1;
    }
    if (v19 && v9)
    {
      id v39 = [PDPassAccountStateChangeUserNotification alloc];
      id v20 = [a1[4] accessLevel];
      long long v21 = v10;
      id v22 = [a1[4] feature];
      [a1[4] creditDetails];
      v24 = unsigned int v23 = v9;
      uint64_t v25 = [v24 accountSummary];
      id v26 = [v25 requiresDebtCollectionNotices];
      id v27 = v22;
      id v10 = v21;
      id v28 = [(PDPassAccountStateChangeUserNotification *)v39 initWithPassUniqueIdentifier:v11 accountState:v15 accountStateReason:v17 accessLevel:v20 featureIdentifier:v27 requiresDebtCollectionNotices:v26];

      unsigned int v9 = v23;
      [*((id *)a1[5] + 1) insertUserNotification:v28];
    }
    if ([a1[4] feature] == (id)2)
    {
      if (v9) {
        [a1[5] _updateInstallmentNotificationsForOldAccount:a1[6] newAccount:a1[4] passUniqueIdentifier:v11];
      }
      id v29 = a1[5];
      id v30 = (void *)v29[3];
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472;
      v48[2] = sub_1002EB798;
      v48[3] = &unk_100747628;
      v48[4] = v29;
      id v49 = a1[6];
      id v50 = a1[4];
      id v51 = v11;
      [v30 creditRecoveryPaymentPlanInformationForAccountIdentifier:v10 allowFetchFromServer:1 completion:v48];
      long long v31 = (void *)*((void *)a1[5] + 3);
      long long v32 = [a1[4] accountIdentifier];
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_1002EB7AC;
      v45[3] = &unk_1007317E0;
      id v33 = a1[6];
      void v45[4] = a1[5];
      id v46 = v33;
      id v47 = a1[4];
      [v31 accountUsersForAccountWithIdentifier:v32 completion:v45];

      if (([a1[6] isSharedAccount] & 1) == 0
        && [a1[4] isSharedAccount])
      {
        long long v34 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)audit_token_t buf = 138543362;
          long long v53 = v10;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Updating shared account cloud store for account %{public}@ since it just became a shared account", buf, 0xCu);
        }

        uint64_t v35 = (void *)*((void *)a1[5] + 3);
        v43[0] = _NSConcreteStackBlock;
        v43[1] = 3221225472;
        v43[2] = sub_1002EB8E0;
        v43[3] = &unk_100741F48;
        id v44 = v10;
        [v35 updateSharedAccountCloudStoreWithAccountIdentifier:v44 completion:v43];
      }
      uint64_t v36 = (void *)*((void *)a1[5] + 3);
      id v37 = [a1[4] accountIdentifier];
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_1002EB9A4;
      v41[3] = &unk_100747570;
      int8x16_t v40 = *((int8x16_t *)a1 + 2);
      id v38 = (id)v40.i64[0];
      int8x16_t v42 = vextq_s8(v40, v40, 8uLL);
      [v36 scheduledPaymentsWithAccountIdentifier:v37 includeFailedRecurringPayments:0 allowFetchFromServer:1 completion:v41];
    }
    goto LABEL_51;
  }
  id v6 = a1[4];
  id v5 = a1[5];
  id v7 = a1[6];
  _[v5 updatedSavingsAccount:v6 oldAccount:v7];
}

id sub_1002EB798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _updatePastDueNotificationsForOldAccount:*(void *)(a1 + 40) newAccount:*(void *)(a1 + 48) passUniqueIdentifier:*(void *)(a1 + 56) enrolledInRecoveryPaymentPlan:a3];
}

void sub_1002EB7AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002EB87C;
  v7[3] = &unk_100730198;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002EB87C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)PKAccountUserCollection) initWithAccountUsers:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _updateAccountUserMonthlySpendLimitNotificationsForOldAccount:*(void *)(a1 + 48) newAccount:*(void *)(a1 + 56) accountUserCollection:v2];
}

void sub_1002EB8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Updated shared account cloud store following an account becoming shared for account %@ with error %@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_1002EB9A4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _recomputePaymentNotificationsForScheduledPayments:a2 account:*(void *)(a1 + 40)];
}

void sub_1002EBA8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(v4 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002EBB50;
  v8[3] = &unk_100747598;
  void v8[4] = v4;
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v7 = v3;
  [v6 creditRecoveryPaymentPlanInformationForAccountIdentifier:v5 allowFetchFromServer:1 completion:v8];
}

id sub_1002EBB50(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_updatePastDueNotificationsForOldAccount:newAccount:passUniqueIdentifier:enrolledInRecoveryPaymentPlan:");
}

id sub_1002EBC30(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  id v3 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v2 removeUserNotificationsForPassUniqueIdentifier:v3 ofType:4];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v4 removeUserNotificationsForPassUniqueIdentifier:v5 ofType:17];

  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8);
  id v7 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v6 removeUserNotificationsForPassUniqueIdentifier:v7 ofType:18];

  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 8);
  id v9 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v8 removeUserNotificationsForPassUniqueIdentifier:v9 ofType:22];

  id v10 = *(void **)(*(void *)(a1 + 32) + 8);
  id v11 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v10 removeUserNotificationsForPassUniqueIdentifier:v11 ofType:29];

  id v12 = *(void **)(*(void *)(a1 + 32) + 8);
  id v13 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v12 removeUserNotificationsForPassUniqueIdentifier:v13 ofType:21];

  id v14 = *(void **)(*(void *)(a1 + 32) + 8);
  long long v15 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v14 removeUserNotificationsForPassUniqueIdentifier:v15 ofType:25];

  id v16 = *(void **)(*(void *)(a1 + 32) + 8);
  id v17 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v16 removeUserNotificationsForPassUniqueIdentifier:v17 ofType:26];

  long long v18 = *(void **)(*(void *)(a1 + 32) + 8);
  BOOL v19 = [*(id *)(a1 + 40) associatedPassUniqueID];
  [v18 removeUserNotificationsForPassUniqueIdentifier:v19 ofType:76];

  id v20 = [*(id *)(a1 + 40) feature];
  if (v20 == (id)3)
  {
    [*(id *)(a1 + 32) removePayLaterNotificationsForAccount:*(void *)(a1 + 40)];
  }
  else if (v20 == (id)5)
  {
    [*(id *)(a1 + 32) removeSavingsNotificationsForAccount:*(void *)(a1 + 40)];
  }
  long long v21 = *(void **)(a1 + 48);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1002EBE4C;
  v23[3] = &unk_10072FC20;
  v23[4] = *(void *)(a1 + 32);
  return [v21 accountsWithCompletion:v23];
}

id sub_1002EBE4C(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 72) = [a2 count] != 0;
  id v3 = *(void **)(*(void *)(a1 + 32) + 64);
  return [v3 recalculateNotificationNames];
}

void sub_1002EBF64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(v1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002EBFFC;
  v4[3] = &unk_10072E750;
  void v4[4] = v1;
  id v5 = *(id *)(a1 + 48);
  [v3 accountWithIdentifier:v2 completion:v4];
}

id *sub_1002EBFFC(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)_[result[4] _recomputePaymentNotificationsForScheduledPayments:result[5] account:a2];
  }
  return result;
}

void sub_1002EC0DC(uint64_t a1, void *a2)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v9 = objc_msgSend(v8, "accountIdentifier", (void)v16);
        id v10 = *(void **)(a1 + 32);
        id v11 = v9;
        id v12 = v10;
        if (v11 == v12)
        {

LABEL_18:
          if ([v8 feature] == (id)5) {
            [*(id *)(a1 + 40) updatedFundingSources:*(void *)(a1 + 48) forSavingsAccount:v8];
          }
          goto LABEL_20;
        }
        id v13 = v12;
        if (v11) {
          BOOL v14 = v12 == 0;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
        }
        else
        {
          unsigned int v15 = [v11 isEqualToString:v12];

          if (v15) {
            goto LABEL_18;
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_20:
}

void sub_1002EC908(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) scheduledNotificationActivitiesForPassUniqueIdentifier:*(void *)(a1 + 40) ofType:29];
  id v3 = (PDAccountPaymentPastDueUserNotification *)[v2 count];
  id v4 = PKLogFacilityTypeGetObject();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)audit_token_t buf = 134217984;
      id v28 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%lu existing past due scheduled activities", buf, 0xCu);
    }

    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v6 = v2;
    id v7 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v7)
    {
      id v8 = v7;
      long long v21 = v2;
      uint64_t v9 = *(void *)v23;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v23 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(PDAccountPaymentPastDueUserNotification **)(*((void *)&v22 + 1) + 8 * i);
          id v12 = [(PDUserNotification *)v11 date];
          [v12 timeIntervalSinceNow];
          double v14 = v13;

          if (v14 <= 0.0)
          {
            [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v11];
          }
          else
          {
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)audit_token_t buf = 138412290;
              id v28 = v11;
              _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing upcoming past due scheduled notification: %@", buf, 0xCu);
            }

            [*(id *)(*(void *)(a1 + 32) + 8) removeUserNotification:v11];
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v8);
      id v4 = v6;
      uint64_t v2 = v21;
    }
    else
    {
      id v4 = v6;
    }
  }
  else if (v5)
  {
    *(_WORD *)audit_token_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No existing past due scheduled notification to remove", buf, 2u);
  }

  if ([*(id *)(a1 + 48) supportsShowNotifications]
    && ([*(id *)(a1 + 48) blockNotifications] & 1) == 0)
  {
    unsigned int v15 = [*(id *)(a1 + 48) creditDetails];
    long long v16 = [v15 accountSummary];

    long long v17 = [v16 pastDueAmount];
    long long v18 = v17;
    if (v17 && objc_msgSend(v17, "pk_isPositiveNumber") && !*(unsigned char *)(a1 + 56))
    {
      long long v19 = [[PDAccountPaymentPastDueUserNotification alloc] initWithPassUniqueIdentifier:*(void *)(a1 + 40) account:*(void *)(a1 + 48)];
      if (v19)
      {
        [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:v19];
        id v20 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)audit_token_t buf = 138412290;
          id v28 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Scheduled past due notification: %@", buf, 0xCu);
        }
      }
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 8) updateWalletBadgeCount];
}

void sub_1002ECD34(id *a1)
{
  id v50 = [a1[4] associatedPassUniqueID];
  unsigned __int8 v2 = [*((id *)a1[5] + 2) passExistsWithUniqueID:v50];
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recomputing Payment Reminder and Payment Due Scheduled Notifications", (uint8_t *)&buf, 2u);
    }

    id v44 = objc_alloc_init((Class)NSMutableArray);
    BOOL v5 = [a1[4] creditDetails];
    id v49 = [v5 accountSummary];

    id v47 = [v49 paymentDueDate];
    id v46 = [v49 remainingMinimumPayment];
    id v45 = [v49 remainingStatementBalance];
    id v43 = +[NSDecimalNumber zero];
    id v41 = +[NSDecimalNumber notANumber];
    uint64_t v6 = objc_msgSend(a1[6], "pk_objectsPassingTest:", &stru_100747668);
    id v7 = [v6 sortedArrayUsingComparator:&stru_1007476A8];

    uint64_t v48 = [v7 firstObject];
    if (!v48)
    {
LABEL_15:
      unsigned int v12 = [a1[4] supportsShowNotifications];
      unsigned int v13 = [a1[4] blockNotifications];
      if ((v12 ^ 1 | v13) == 1)
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109376;
          DWORD1(buf) = v12;
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v13;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping 'Payment Due'' notifications for account with supportsShowNotifications:%d, blockNotifications:%d", (uint8_t *)&buf, 0xEu);
        }
        double v14 = v3;
        int8x16_t v42 = v7;
        goto LABEL_41;
      }
      v76[0] = _NSConcreteStackBlock;
      v76[1] = 3221225472;
      v76[2] = sub_1002ED8A0;
      v76[3] = &unk_1007476D0;
      uint64_t v77 = v47;
      int8x16_t v42 = objc_msgSend(v7, "pk_objectsPassingTest:", v76);

      uint64_t v72 = 0;
      long long v73 = &v72;
      uint64_t v74 = 0x2020000000;
      BOOL v75 = 0;
      if (v46) {
        BOOL v15 = [v46 compare:v43] != (id)1;
      }
      else {
        BOOL v15 = 0;
      }
      BOOL v75 = v15;
      uint64_t v68 = 0;
      char v69 = &v68;
      uint64_t v70 = 0x2020000000;
      BOOL v71 = 0;
      if (!v45 || (BOOL v71 = [v45 compare:v43] != (id)1, !v46))
      {
LABEL_40:
        _Block_object_dispose(&v68, 8);
        _Block_object_dispose(&v72, 8);
        double v14 = v77;
LABEL_41:

        id v27 = [*((id *)a1[5] + 1) scheduledNotificationActivitiesForPassUniqueIdentifier:v50 ofType:21];
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        id v28 = [v27 countByEnumeratingWithState:&v58 objects:v79 count:16];
        if (v28)
        {
          uint64_t v29 = *(void *)v59;
          do
          {
            for (i = 0; i != v28; i = (char *)i + 1)
            {
              if (*(void *)v59 != v29) {
                objc_enumerationMutation(v27);
              }
              uint64_t v31 = *(void *)(*((void *)&v58 + 1) + 8 * i);
              if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf) = 138412290;
                *(void *)((char *)&buf + 4) = v31;
                _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing 'Upcoming Scheduled Payment' scheduled activity for notification: %@", (uint8_t *)&buf, 0xCu);
              }

              [*((id *)a1[5] + 1) removeUserNotification:v31];
            }
            id v28 = [v27 countByEnumeratingWithState:&v58 objects:v79 count:16];
          }
          while (v28);
        }
        long long v32 = [*((id *)a1[5] + 1) scheduledNotificationActivitiesForPassUniqueIdentifier:v50 ofType:22];

        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        id v33 = v32;
        id v34 = [v33 countByEnumeratingWithState:&v54 objects:v78 count:16];
        if (v34)
        {
          uint64_t v35 = *(void *)v55;
          do
          {
            for (j = 0; j != v34; j = (char *)j + 1)
            {
              if (*(void *)v55 != v35) {
                objc_enumerationMutation(v33);
              }
              uint64_t v37 = *(void *)(*((void *)&v54 + 1) + 8 * (void)j);
              if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf) = 138412290;
                *(void *)((char *)&buf + 4) = v37;
                _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing 'Payment Due' scheduled activity for notification: %@", (uint8_t *)&buf, 0xCu);
              }

              [*((id *)a1[5] + 1) removeUserNotification:v37];
            }
            id v34 = [v33 countByEnumeratingWithState:&v54 objects:v78 count:16];
          }
          while (v34);
        }

        id v38 = a1[5];
        id v39 = (void *)v38[1];
        v51[0] = _NSConcreteStackBlock;
        v51[1] = 3221225472;
        v51[2] = sub_1002EDA54;
        v51[3] = &unk_100745D18;
        id v52 = v44;
        long long v53 = v38;
        id v40 = v44;
        [v39 userNotificationsForPassUniqueIdentifier:v50 ofType:22 completion:v51];

        id v3 = v49;
        goto LABEL_60;
      }
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v87 = 0x3032000000;
      id v88 = sub_100020B2C;
      char v89 = sub_100021088;
      id v90 = +[NSDecimalNumber zero];
      long long v16 = v46;
      if (!*((unsigned char *)v73 + 24) && [v42 count])
      {
        v62[0] = _NSConcreteStackBlock;
        v62[1] = 3221225472;
        v62[2] = sub_1002ED904;
        v62[3] = &unk_1007476F8;
        char v65 = &v72;
        long long v66 = &v68;
        id v63 = v41;
        p_long long buf = &buf;
        id v64 = v46;
        [v42 enumerateObjectsUsingBlock:v62];

        long long v16 = v46;
      }
      id v17 = [a1[4] stateReason];
      if (*((unsigned char *)v73 + 24))
      {
        if (v17 == (id)2)
        {
          long long v18 = v3;
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            long long v19 = PKAccountStateReasonToString();
            *(_DWORD *)long long v80 = 138477827;
            *(void *)long long v81 = v19;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping 'Payment Reminder' notifications for stateReason: %{private}@", v80, 0xCu);

LABEL_35:
            long long v18 = v3;
            goto LABEL_39;
          }
          goto LABEL_39;
        }
        if (*((unsigned char *)v69 + 24) || [v42 count])
        {
          long long v18 = v3;
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *((unsigned __int8 *)v73 + 24);
            int v21 = *((unsigned __int8 *)v69 + 24);
            id v22 = [v42 count];
            *(_DWORD *)long long v80 = 67109632;
            *(_DWORD *)long long v81 = v20;
            *(_WORD *)&v81[4] = 1024;
            *(_DWORD *)&v81[6] = v21;
            __int16 v82 = 2048;
            id v83 = v22;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping 'Payment Reminder' notifications with minimumPaymentMet: %d, statementBalanceMet: %d, numPayments: %lu", v80, 0x18u);
            goto LABEL_35;
          }
LABEL_39:

          _Block_object_dispose(&buf, 8);
          goto LABEL_40;
        }
      }
      long long v18 = [v16 decimalNumberBySubtracting:*(void *)(*((void *)&buf + 1) + 40)];
      long long v23 = [a1[5] _paymentDueNotificationsForAccount:a1[4] estimatedRemainingMinimumPayment:v18];
      [v44 addObjectsFromArray:v23];

      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v24 = *((unsigned __int8 *)v73 + 24);
        int v25 = *((unsigned __int8 *)v69 + 24);
        id v26 = [v42 count];
        *(_DWORD *)long long v80 = 67109891;
        *(_DWORD *)long long v81 = v24;
        *(_WORD *)&v81[4] = 1024;
        *(_DWORD *)&v81[6] = v25;
        __int16 v82 = 2048;
        id v83 = v26;
        __int16 v84 = 2113;
        long long v85 = v18;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scheduling 'Payment Reminder' notifications with minimumPaymentMet: %d, statementBalanceMet: %d, numPayments: %lu, estimatedRemainingMinimumPayment: %{private}@", v80, 0x22u);
      }

      goto LABEL_39;
    }
    if (v47)
    {
      id v8 = [v48 paymentDate];
      if ([v47 compare:v8] == (id)-1)
      {
        uint64_t v9 = [v48 currencyAmount];
        BOOL v10 = v9 == 0;

        if (v10)
        {
          id v11 = v3;
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v48;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping 'Upcoming Scheduled Payment' notifications for payment without currencyAmount beyond paymentDueDate: %@", (uint8_t *)&buf, 0xCu);
            id v11 = v3;
          }
          goto LABEL_14;
        }
      }
      else
      {
      }
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v48;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scheduling 'Upcoming Scheduled Payment' notification for payment: %@", (uint8_t *)&buf, 0xCu);
    }

    id v11 = [a1[5] _upcomingScheduledPaymentNotificationsForPayment:v48 account:a1[4]];
    [v44 addObjectsFromArray:v11];
LABEL_14:

    goto LABEL_15;
  }
  if (v4)
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Skipping Payment Reminder and Payment Due Scheduled Notifications - Pass doesn't exist on device.", (uint8_t *)&buf, 2u);
  }
LABEL_60:
}

void sub_1002ED768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  _Block_object_dispose((const void *)(v56 - 176), 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a56, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002ED7C8(id a1, PKAccountPayment *a2, unint64_t a3, BOOL *a4)
{
  return [(PKAccountPayment *)a2 state] == (id)1;
}

int64_t sub_1002ED7EC(id a1, PKAccountPayment *a2, PKAccountPayment *a3)
{
  BOOL v4 = a2;
  BOOL v5 = a3;
  uint64_t v6 = [(PKAccountPayment *)v4 paymentDate];
  id v7 = [(PKAccountPayment *)v5 paymentDate];
  id v8 = [v6 compare:v7];

  if (!v8)
  {
    unsigned int v9 = [(PKAccountPayment *)v4 isRecurring];
    unsigned int v10 = v9 ^ [(PKAccountPayment *)v5 isRecurring];
    uint64_t v11 = -1;
    if (!v9) {
      uint64_t v11 = 1;
    }
    if (v10) {
      id v8 = (id)v11;
    }
    else {
      id v8 = 0;
    }
  }

  return (int64_t)v8;
}

BOOL sub_1002ED8A0(uint64_t a1, void *a2)
{
  id v3 = [a2 paymentDate];
  BOOL v4 = PKLaterDate();
  BOOL v5 = v4 == *(void **)(a1 + 32);

  return v5;
}

void sub_1002ED904(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v14 = a2;
  uint64_t v6 = [v14 scheduleDetails];
  id v7 = [v6 preset];

  if (v7 == (id)1)
  {
    unsigned int v9 = [v14 currencyAmount];
    unsigned int v10 = [v9 amount];

    if (v10 && ([v10 isEqualToNumber:*(void *)(a1 + 32)] & 1) == 0)
    {
      uint64_t v11 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) decimalNumberByAdding:v10];
      uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
      unsigned int v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
    if ([*(id *)(a1 + 40) compare:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)] != (id)1) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
  }
  else
  {
    if (v7 == (id)3)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      if (v7 != (id)2) {
        goto LABEL_13;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    }
    *(unsigned char *)(v8 + 24) = 1;
  }
LABEL_13:
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

void sub_1002EDA54(uint64_t a1, void *a2)
{
  id v31 = a2;
  if ([v31 count])
  {
    id v3 = objc_alloc_init((Class)NSMutableArray);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v4 = *(id *)(a1 + 32);
    id v5 = [v4 countByEnumeratingWithState:&v41 objects:v49 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v42;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v42 != v7) {
            objc_enumerationMutation(v4);
          }
          unsigned int v9 = [*(id *)(*((void *)&v41 + 1) + 8 * i) notificationIdentifier];
          [v3 addObject:v9];
        }
        id v6 = [v4 countByEnumeratingWithState:&v41 objects:v49 count:16];
      }
      while (v6);
    }

    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    id v10 = v31;
    id v11 = [v10 countByEnumeratingWithState:&v37 objects:v48 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v38;
      do
      {
        for (j = 0; j != v12; j = (char *)j + 1)
        {
          if (*(void *)v38 != v13) {
            objc_enumerationMutation(v10);
          }
          BOOL v15 = *(void **)(*((void *)&v37 + 1) + 8 * (void)j);
          if ([v15 preventAutomaticDismissal])
          {
            long long v16 = [v15 notificationIdentifier];
            unsigned __int8 v17 = [v3 containsObject:v16];

            if ((v17 & 1) == 0)
            {
              long long v18 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138412290;
                id v47 = v15;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Making active notification no longer sticky since it is no longer in the list of payment due notifications for tracking: %@", buf, 0xCu);
              }

              [v15 setPreventAutomaticDismissal:0];
              [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v15];
            }
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v37 objects:v48 count:16];
      }
      while (v12);
    }
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v19 = *(id *)(a1 + 32);
  id v20 = [v19 countByEnumeratingWithState:&v33 objects:v45 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v34;
    do
    {
      for (k = 0; k != v21; k = (char *)k + 1)
      {
        if (*(void *)v34 != v22) {
          objc_enumerationMutation(v19);
        }
        int v24 = *(void **)(*((void *)&v33 + 1) + 8 * (void)k);
        int v25 = [v24 date];
        id v26 = +[NSDate date];
        id v27 = [v25 compare:v26];

        uint64_t v28 = *(void *)(a1 + 40);
        uint64_t v29 = *(void **)(v28 + 8);
        if (v27 == (id)-1)
        {
          id v30 = [v24 notificationIdentifier];
          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472;
          v32[2] = sub_1002EDE3C;
          v32[3] = &unk_10073A3F0;
          void v32[4] = *(void *)(a1 + 40);
          void v32[5] = v24;
          [v29 userNotificationWithIdentifier:v30 completion:v32];
        }
        else
        {
          [*(id *)(v28 + 8) insertUserNotification:v24];
        }
      }
      id v21 = [v19 countByEnumeratingWithState:&v33 objects:v45 count:16];
    }
    while (v21);
  }
}

void sub_1002EDE3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && [v3 isActive])
  {
    [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 40)];
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Skipping insertion of notification with past fire date since it no longer exists in the notification center: %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_1002EE344(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1002EE414;
  v9[3] = &unk_100730C10;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = *(id *)(a1 + 48);
  id v12 = v3;
  id v13 = v7;
  id v8 = v3;
  dispatch_async(v4, v9);
}

void sub_1002EE414(id *a1)
{
  if ([a1[4] type] == (id)1
    && ([a1[4] updateReasonIsInitialDownload] & 1) == 0)
  {
    id v3 = [a1[4] items];
    id v4 = [v3 anyObject];

    if (v4)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v5 = [v4 status];
        if (v5 == @"success"
          || (uint64_t v6 = v5) != 0
          && (unsigned __int8 v7 = [(__CFString *)v5 isEqualToString:@"success"],
              v6,
              v6,
              (v7 & 1) != 0))
        {
          [a1[5] updateDailyCashNotificationsWithAccount:a1[6]];
          (*((void (**)(void))a1[7] + 2))();
        }
        else if ((PKSharedCacheGetBoolForKey() & 1) == 0)
        {
          unsigned int v9 = (void *)*((void *)a1[5] + 7);
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          v11[2] = sub_1002EE63C;
          v11[3] = &unk_100747720;
          id v12 = a1[7];
          [v9 accountWithPreventingServerFetch:0 completion:v11];
        }
      }
    }
  }
  else if ([a1[6] supportsShowNotifications] {
         && ([a1[6] blockNotifications] & 1) == 0)
  }
  {
    id v10 = [a1[5] _notificationForAccountEvent:a1[4] account:a1[6]];
    if ([v10 isValid]) {
      id v8 = v10;
    }
    else {
      id v8 = 0;
    }
    (*((void (**)(id, id))a1[7] + 2))(a1[7], v8);
  }
  else
  {
    unsigned __int8 v2 = (void (*)(void))*((void *)a1[7] + 2);
    v2();
  }
}

void sub_1002EE63C(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (v6 && ((char *)[v6 state] - 1 > (char *)1 || objc_msgSend(v6, "stage") == (id)3))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v3 = [PDPeerPaymentNeedsVerificationUserNotification alloc];
    id v4 = [v6 associatedPassUniqueID];
    id v5 = [(PDPeerPaymentNeedsVerificationUserNotification *)v3 initWithPassUniqueIdentifier:v4];

    PKSharedCacheSetBoolForKey();
    PKSharedCacheSetBoolForKey();
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1002EEA74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002EEB10;
  v7[3] = &unk_10072E198;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002EEB10(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) accountIdentifier];
  [v1 updateDailyCashNotificationsForAccountIdentifier:v2 date:0 completion:0];
}

void sub_1002EEDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002EEDDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v4 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1002EEEE0;
  v9[3] = &unk_1007477C0;
  uint64_t v7 = *(void *)(a1 + 80);
  void v9[4] = v4;
  uint64_t v15 = v7;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v12 = v3;
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v8 = v3;
  [v6 userNotificationWithIdentifier:v5 completion:v9];
}

void sub_1002EEEE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002EEFF4;
  v8[3] = &unk_100747798;
  uint64_t v16 = *(void *)(a1 + 80);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v12 = v5;
  uint64_t v13 = v6;
  id v14 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 72);
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1002EEFF4(uint64_t a1)
{
  uint64_t v2 = PKStartOfDay();
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  id v5 = PKEndOfDay();
  id v6 = [*(id *)(a1 + 32) component:8 fromDate:*(void *)(a1 + 40)];
  id v7 = [*(id *)(a1 + 32) component:8 fromDate:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
  id v8 = [*(id *)(a1 + 48) date];
  id v9 = +[NSDate date];
  [v8 timeIntervalSinceDate:v9];
  double v11 = v10;

  if (!*(void *)(a1 + 56) && *(void *)(a1 + 48) && (v11 > 0.0 ? (BOOL v16 = v6 == v7) : (BOOL v16 = 0), v16))
  {
    unsigned __int8 v17 = PKStartOfDay();
    long long v18 = [*(id *)(a1 + 48) date];
    id v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Daily Cash notification should update existing scheduled notifiction for today and create a new one for tomorrow", buf, 2u);
    }

    uint64_t v20 = *(void *)(a1 + 64);
    uint64_t v21 = *(void *)(a1 + 72);
    uint64_t v22 = *(void **)(v20 + 24);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1002EF2A0;
    v26[3] = &unk_100747770;
    uint64_t v23 = *(void *)(a1 + 88);
    void v26[4] = v20;
    uint64_t v30 = v23;
    id v27 = v5;
    id v28 = *(id *)(a1 + 72);
    id v29 = *(id *)(a1 + 80);
    [v22 dailyCashNotificationForStartDate:v17 endDate:v18 accountIdentifier:v21 completion:v26];
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    id v14 = *(void **)(v12 + 24);
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1002EF570;
    v24[3] = &unk_100747748;
    void v24[4] = v12;
    id v25 = *(id *)(a1 + 80);
    [v14 dailyCashNotificationForStartDate:v15 endDate:v5 accountIdentifier:v13 completion:v24];
  }
}

void sub_1002EF2A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002EF38C;
  v7[3] = &unk_1007364C0;
  void v7[4] = v4;
  id v8 = v3;
  uint64_t v12 = *(void *)(a1 + 64);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002EF38C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) insertUserNotification:*(void *)(a1 + 40)];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 24);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002EF45C;
  v7[3] = &unk_100747748;
  void v7[4] = v2;
  id v8 = *(id *)(a1 + 64);
  [v3 dailyCashNotificationForStartDate:v4 endDate:v5 accountIdentifier:v6 completion:v7];
}

void sub_1002EF45C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002EF518;
  block[3] = &unk_10072E9D8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_1002EF518(void *a1)
{
  [*(id *)(a1[4] + 8) insertUserNotification:a1[5]];
  uint64_t result = a1[6];
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1002EF570(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002EF62C;
  block[3] = &unk_10072E9D8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_1002EF62C(void *a1)
{
  [*(id *)(a1[4] + 8) insertUserNotification:a1[5]];
  uint64_t result = a1[6];
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1002EF78C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002EF874;
  block[3] = &unk_10072FF48;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_1002EF874(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [*(id *)(a1 + 32) accountUsers];
  id v50 = objc_msgSend(v2, "pk_setByApplyingBlock:", &stru_100747828);
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v3 = *(id *)(v1 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v67 objects:v72 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v68;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v68 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v67 + 1) + 8 * i);
        uint64_t v9 = [v8 accountUser];
        id v10 = [v9 altDSID];
        unsigned __int8 v11 = [v50 containsObject:v10];

        if ((v11 & 1) == 0) {
          [*(id *)(*(void *)(v1 + 48) + 8) removeUserNotification:v8];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v67 objects:v72 count:16];
    }
    while (v5);
  }

  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v12 = v2;
  id v51 = [v12 countByEnumeratingWithState:&v63 objects:v71 count:16];
  if (v51)
  {
    uint64_t v13 = *(void *)v64;
    long long v42 = v53;
    long long v43 = v60;
    uint64_t v44 = *(void *)v64;
    id v45 = v12;
    uint64_t v49 = v1;
    do
    {
      for (j = 0; j != v51; j = (char *)j + 1)
      {
        if (*(void *)v64 != v13) {
          objc_enumerationMutation(v12);
        }
        uint64_t v15 = *(void **)(*((void *)&v63 + 1) + 8 * (void)j);
        BOOL v16 = objc_msgSend(v15, "notificationSettings", v42, v43);
        unsigned int v17 = [v16 transactionNotificationsEnabled];
        long long v18 = [v16 monthlySpendNotificationThreshold];
        id v19 = [*(id *)(v1 + 56) creditDetails];
        uint64_t v20 = [v19 currencyCode];

        if (v17) {
          BOOL v21 = v18 == 0;
        }
        else {
          BOOL v21 = 1;
        }
        if (!v21 && (objc_msgSend(v18, "pk_isNotANumber") & 1) == 0 && v20)
        {
          uint64_t v22 = [v15 altDSID];
          uint64_t v23 = [*(id *)(v1 + 56) accountIdentifier];
          int v24 = [*(id *)(v49 + 64) creditDetails];
          id v25 = [v24 accountSummary];
          id v26 = [v25 accountUserActivityForAccountUserAltDSID:v22];
          uint64_t v48 = [v26 totalSpending];

          id v27 = [*(id *)(v49 + 56) creditDetails];
          id v28 = [v27 accountSummary];
          id v47 = (void *)v22;
          id v29 = [v28 accountUserActivityForAccountUserAltDSID:v22];
          uint64_t v30 = [v29 totalSpending];

          id v31 = (void *)v23;
          uint64_t v1 = v49;

          if (v30)
          {
            long long v32 = *(void **)(v49 + 40);
            v59[0] = _NSConcreteStackBlock;
            v59[1] = 3221225472;
            v60[0] = sub_1002EFD84;
            v60[1] = &unk_100747850;
            id v46 = v31;
            id v33 = v31;
            id v61 = v33;
            id v62 = v15;
            unsigned int v34 = objc_msgSend(v32, "pk_containsObjectPassingTest:", v59);
            if (v48) {
              BOOL v35 = [v48 compare:v18] != (id)1;
            }
            else {
              BOOL v35 = 0;
            }
            id v36 = [v30 compare:v18];
            if (((v34 | !v35) & 1) != 0 || v36 != (id)1)
            {
              if (v36 == (id)1) {
                unsigned int v40 = 0;
              }
              else {
                unsigned int v40 = v34;
              }
              id v31 = v46;
              uint64_t v1 = v49;
              if (v40 == 1)
              {
                long long v41 = +[PDAccountUserMonthlySpendLimitUserNotification notificationIdentifierForAccountUserAltDSID:v47 accountIdentifier:v33];
                [*(id *)(*(void *)(v49 + 48) + 8) removeUserNotificationWithIdentifier:v41];
              }
            }
            else
            {
              uint64_t v1 = v49;
              long long v37 = *(void **)(v49 + 48);
              v52[0] = _NSConcreteStackBlock;
              v52[1] = 3221225472;
              v53[0] = sub_1002EFEBC;
              v53[1] = &unk_100747878;
              v53[2] = v15;
              id v54 = v18;
              id v55 = v20;
              id v56 = v33;
              id v38 = *(id *)(v49 + 56);
              uint64_t v39 = *(void *)(v49 + 48);
              id v57 = v38;
              uint64_t v58 = v39;
              objc_msgSend(v37, "_queue_loadFamilyMemberCollectionIfNecessaryWithCompletion:", v52);

              id v31 = v46;
            }
          }
          uint64_t v13 = v44;
          id v12 = v45;
        }
      }
      id v51 = [v12 countByEnumeratingWithState:&v63 objects:v71 count:16];
    }
    while (v51);
  }
}

NSString *__cdecl sub_1002EFD7C(id a1, PKAccountUser *a2)
{
  return (NSString *)[(PKAccountUser *)a2 altDSID];
}

uint64_t sub_1002EFD84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isActive])
  {
    id v4 = [v3 accountIdentifier];
    id v5 = *(void **)(a1 + 32);
    id v6 = v4;
    id v7 = v5;
    if (v6 == v7)
    {
    }
    else
    {
      id v8 = v7;
      uint64_t v9 = 0;
      if (!v6 || !v7)
      {
        unsigned __int8 v11 = v6;
LABEL_16:

        goto LABEL_17;
      }
      unsigned int v10 = [v6 isEqualToString:v7];

      if (!v10)
      {
        uint64_t v9 = 0;
LABEL_17:

        goto LABEL_18;
      }
    }
    unsigned __int8 v11 = [v3 accountUser];
    id v12 = [v11 altDSID];
    uint64_t v13 = [*(id *)(a1 + 40) altDSID];
    id v8 = v12;
    id v14 = v13;
    uint64_t v15 = v14;
    if (v8 == v14)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = 0;
      if (v8 && v14) {
        uint64_t v9 = (uint64_t)[v8 isEqualToString:v14];
      }
    }

    goto LABEL_16;
  }
  uint64_t v9 = 0;
LABEL_18:

  return v9;
}

void sub_1002EFEBC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 altDSID];
  id v12 = [v4 familyMemberForAltDSID:v5];

  id v6 = [PDAccountUserMonthlySpendLimitUserNotification alloc];
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = PKCurrencyAmountMake();
  uint64_t v9 = *(void *)(a1 + 56);
  unsigned int v10 = [*(id *)(a1 + 64) associatedPassUniqueID];
  unsigned __int8 v11 = [(PDAccountUserMonthlySpendLimitUserNotification *)v6 initWithAccountUser:v7 familyMember:v12 monthlySpendLimit:v8 accountIdentifier:v9 passUniqueIdentifier:v10];

  [(PDUserNotification *)v11 setReissueBannerOnUpdate:1];
  [*(id *)(*(void *)(a1 + 72) + 8) insertUserNotification:v11];
}

void sub_1002F018C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002F0248;
  block[3] = &unk_10072E9D8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_1002F0248(void *a1)
{
  id v2 = [objc_alloc((Class)PKFamilyMemberCollection) initWithFamilyMembers:a1[5]];
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = v2;

  uint64_t result = a1[6];
  if (result)
  {
    id v6 = *(uint64_t (**)(void))(result + 16);
    return v6();
  }
  return result;
}

void sub_1002F11BC(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

uint64_t sub_1002F1B0C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v95 = a1;
  unsigned int v85 = [*(id *)(a1 + 32) hasAssociatedPeerPaymentAccount];
  id v87 = v2;
  if (v85)
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    id obj = [*(id *)(a1 + 56) paymentApplicationsInDatabase:*(void *)(a1 + 40) forPass:*(void *)(a1 + 32)];
    id v4 = [obj countByEnumeratingWithState:&v108 objects:v125 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v109;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v109 != v6) {
            objc_enumerationMutation(obj);
          }
          id v8 = *(void **)(*((void *)&v108 + 1) + 8 * i);
          id v9 = [v8 secureElementIdentifier];
          unsigned int v10 = *(void **)(a1 + 56);
          uint64_t v11 = *(void *)(a1 + 32);
          id v12 = [v8 applicationIdentifier];
          uint64_t v13 = [v10 _paymentApplicationForPass:v11 applicationIdentifier:v12 secureElementIdentifier:v9 inDatabase:*(void *)(a1 + 40)];

          id v14 = [v3 objectForKey:v9];
          if (!v14)
          {
            id v14 = objc_alloc_init((Class)NSMutableDictionary);
            [v3 setObject:v14 forKey:v9];
          }
          uint64_t v15 = [v13 applicationIdentifier];
          [v14 setObject:v13 forKey:v15];
        }
        id v5 = [obj countByEnumeratingWithState:&v108 objects:v125 count:16];
      }
      while (v5);
    }

    id v2 = v87;
  }
  else
  {
    id v3 = 0;
  }
  id v83 = v3;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  id v91 = *(id *)(a1 + 48);
  id v16 = [v91 countByEnumeratingWithState:&v104 objects:v124 count:16];
  unsigned int v17 = &dispatch_get_global_queue_ptr;
  if (v16)
  {
    id v18 = v16;
    id obja = *(id *)v105;
    do
    {
      id v19 = 0;
      do
      {
        if (*(id *)v105 != obja) {
          objc_enumerationMutation(v91);
        }
        uint64_t v20 = *(void **)(*((void *)&v104 + 1) + 8 * (void)v19);
        BOOL v21 = [v20 secureElementIdentifier];
        if (v21)
        {
          uint64_t v22 = [v20 applicationIdentifier];
          uint64_t v23 = [*(id *)(v95 + 56) _paymentApplicationForPass:*(void *)(v95 + 32) applicationIdentifier:v22 secureElementIdentifier:v21 inDatabase:*(void *)(v95 + 40)];
          if (v23)
          {
            id v24 = v23;
            [v23 updateWithPaymentApplication:v20];
          }
          else
          {
            id v24 = [objc_alloc(*(Class *)(v95 + 56)) initWithPaymentApplication:v20 pass:*(void *)(v95 + 32) inDatabase:*(void *)(v95 + 40)];
            if (v24)
            {
              id v25 = [v20 supportedExpressModes];
              id v26 = +[PaymentExpressMode insertExpressModes:v25 withPaymentApplication:v24 inDatabase:*(void *)(v95 + 40)];

              id v27 = [v20 automaticSelectionCriteria];
              id v28 = +[PaymentAutomaticSelectionCriterion insertCriteria:v27 withPaymentApplication:v24 inDatabase:*(void *)(v95 + 40)];

              id v29 = [v20 supportedTransitNetworkIdentifiers];
              id v30 = +[PaymentTransitNetworkIdentifier insertTransitNetworkIdentifiers:v29 withPaymentApplication:v24 inDatabase:*(void *)(v95 + 40)];

              id v31 = [v20 subcredentials];
              id v32 = +[AppletSubcredential setAppletSubcredentials:v31 forPaymentApplication:v24 inDatabase:*(void *)(v95 + 40)];

              char v89 = +[TransactionSource insertTransactionSourceWithType:0 inDatabase:*(void *)(v95 + 40)];
              id v33 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v89 persistentID]);
              [v24 setValue:v33 forProperty:@"transaction_source_pid"];

              unsigned int v34 = [v20 supportedInAppMerchantCountryCodes];
              id v2 = v87;
              +[PaymentApplicationMerchantSupport updateSupportedCountryCodes:v34 forPaymentApplication:v24 inDatabase:*(void *)(v95 + 40)];

              BOOL v35 = [v20 unsupportedInAppMerchantCountryCodes];
              +[PaymentApplicationMerchantSupport updateUnsupportedCountryCodes:v35 forPaymentApplication:v24 inDatabase:*(void *)(v95 + 40)];

              id v36 = v24;
              unsigned int v17 = &dispatch_get_global_queue_ptr;
            }
          }
          id v37 = [v2 objectForKey:v21];
          if (v37)
          {
            if (v24) {
              goto LABEL_26;
            }
          }
          else
          {
            id v37 = objc_alloc_init((Class)v17[504]);
            [v2 setObject:v37 forKey:v21];
            if (v24)
            {
LABEL_26:
              id v38 = [v24 applicationIdentifier];
              [v37 setObject:v24 forKey:v38];
            }
          }
        }
        id v19 = (char *)v19 + 1;
      }
      while (v18 != v19);
      id v39 = [v91 countByEnumeratingWithState:&v104 objects:v124 count:16];
      id v18 = v39;
    }
    while (v39);
  }

  uint64_t v40 = v95;
  long long v41 = [*(id *)(v95 + 56) _predicateForPass:*(void *)(v95 + 32)];
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  id v42 = v2;
  id v86 = [v42 countByEnumeratingWithState:&v100 objects:v123 count:16];
  if (v86)
  {
    uint64_t v84 = *(void *)v101;
    *(void *)&long long v43 = 138412290;
    long long v80 = v43;
    id v81 = v42;
    __int16 v82 = v41;
    do
    {
      uint64_t v44 = 0;
      do
      {
        if (*(void *)v101 != v84) {
          objc_enumerationMutation(v42);
        }
        uint64_t v88 = v44;
        uint64_t v90 = *(void *)(*((void *)&v100 + 1) + 8 * v44);
        id v45 = [v42 objectForKey:v80];
        id v46 = v45;
        if (v85 && [v45 count])
        {
          id v47 = [v83 objectForKey:v90];
          long long v96 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          id v48 = [v47 countByEnumeratingWithState:&v96 objects:v122 count:16];
          if (v48)
          {
            id v49 = v48;
            id v50 = *(id *)v97;
            id objb = *(id *)v97;
            do
            {
              for (j = 0; j != v49; j = (char *)j + 1)
              {
                if (*(id *)v97 != v50) {
                  objc_enumerationMutation(v47);
                }
                id v52 = *(void **)(*((void *)&v96 + 1) + 8 * (void)j);
                long long v53 = [v46 objectForKeyedSubscript:v52];

                if (!v53)
                {
                  id v54 = [v46 keyEnumerator];
                  id v55 = [v54 nextObject];

                  id v56 = v47;
                  id v57 = [v47 objectForKey:v52];
                  uint64_t v58 = v46;
                  long long v59 = [v46 objectForKey:v55];
                  long long v60 = PKLogFacilityTypeGetObject();
                  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 138413058;
                    id v115 = v52;
                    __int16 v116 = 2112;
                    id v117 = v55;
                    __int16 v118 = 2112;
                    v119 = v57;
                    __int16 v120 = 2112;
                    v121 = v59;
                    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "The peer payment payment application as migrated from %@ to new aid %@. Existing payment application existingPaymentApplication %@. New payment application %@", buf, 0x2Au);
                  }

                  id v61 = [v57 transactionSourceIdentifier];
                  id v62 = [v59 transactionSourceIdentifier];
                  +[TransactionSource updateTransactionSourceIdentifier:v61 toNewTransactionSourceIdentifier:v62 inDatabase:*(void *)(v95 + 40)];

                  id v47 = v56;
                  id v46 = v58;
                  id v50 = objb;
                }
              }
              id v49 = [v47 countByEnumeratingWithState:&v96 objects:v122 count:16];
            }
            while (v49);
          }

          uint64_t v40 = v95;
          id v42 = v81;
          long long v41 = v82;
        }
        long long v63 = [v46 allKeys];
        long long v64 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"aid" values:v63];

        long long v65 = [*(id *)(v40 + 56) predicateForSecureElementIdentifier:v90];
        v113[0] = v64;
        v113[1] = v41;
        v113[2] = v65;
        long long v66 = +[NSArray arrayWithObjects:v113 count:3];
        long long v67 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v66];

        long long v68 = [*(id *)(v40 + 56) queryWithDatabase:*(void *)(v40 + 40) predicate:v67];
        if (([v68 deleteAllEntities] & 1) == 0)
        {
          long long v69 = PKLogFacilityTypeGetObject();
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            [*(id *)(v40 + 32) uniqueID];
            v71 = long long v70 = v46;
            *(_DWORD *)long long buf = v80;
            id v115 = v71;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Failed to delete obsolete payment applications for %@", buf, 0xCu);

            id v46 = v70;
          }
        }
        uint64_t v44 = v88 + 1;
      }
      while ((id)(v88 + 1) != v86);
      id v86 = [v42 countByEnumeratingWithState:&v100 objects:v123 count:16];
    }
    while (v86);
  }

  uint64_t v72 = [v42 allKeys];
  long long v73 = +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:@"seid" values:v72];

  v112[0] = v73;
  v112[1] = v41;
  uint64_t v74 = +[NSArray arrayWithObjects:v112 count:2];
  BOOL v75 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v74];

  long long v76 = [*(id *)(v40 + 56) queryWithDatabase:*(void *)(v40 + 40) predicate:v75];
  if (([v76 deleteAllEntities] & 1) == 0)
  {
    uint64_t v77 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      long long v78 = [*(id *)(v95 + 32) uniqueID];
      *(_DWORD *)long long buf = 138412290;
      id v115 = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Failed to delete obsolete payment applications for %@", buf, 0xCu);
    }
  }

  return 1;
}

id sub_1002F37A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

uint64_t sub_1002F3EDC(void *a1)
{
  +[PaymentExpressMode deleteEntitiesInDatabase:a1[4] forPaymentApplication:a1[5]];
  id v2 = +[PaymentExpressMode insertExpressModes:a1[6] withPaymentApplication:a1[5] inDatabase:a1[4]];
  return 1;
}

uint64_t sub_1002F3FEC(void *a1)
{
  +[PaymentAutomaticSelectionCriterion deleteEntitiesInDatabase:a1[4] forPaymentApplication:a1[5]];
  id v2 = +[PaymentAutomaticSelectionCriterion insertCriteria:a1[6] withPaymentApplication:a1[5] inDatabase:a1[4]];
  return 1;
}

uint64_t sub_1002F40FC(void *a1)
{
  +[PaymentTransitNetworkIdentifier deleteEntitiesInDatabase:a1[4] forPaymentApplication:a1[5]];
  id v2 = +[PaymentTransitNetworkIdentifier insertTransitNetworkIdentifiers:a1[6] withPaymentApplication:a1[5] inDatabase:a1[4]];
  return 1;
}

void sub_1002F4704(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_1002F470C(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_1002F4714(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_1002F471C(id a1, PKPeerPaymentAdditionalPushTopics *a2, id a3)
{
}

void sub_1002F481C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002F4DC8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002F4F00(id a1, PKTapToRadarPrompt *a2, id a3)
{
}

void sub_1002F4F08(id a1, PKTapToRadarPrompt *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKTapToRadarPrompt *)v3 setLastPromptDate:v4];
}

void sub_1002F4F68(id a1, PKTapToRadarPrompt *a2, id a3)
{
  id v4 = a2;
  -[PKTapToRadarPrompt setPromptCount:](v4, "setPromptCount:", [a3 integerValue]);
}

__CFString *PKAuxiliaryCapabilityKeyForCertificateType(unint64_t a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return off_100747EB8[a1];
  }
}

uint64_t PKBarcodeCreateAndValidateTrustWithCerts(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  switch(a3)
  {
    case 0:
      uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeSigning();
      if (ApplePayQRCodeSigning) {
        goto LABEL_5;
      }
      goto LABEL_10;
    case 1:
      uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeEncryption();
      if (!ApplePayQRCodeSigning) {
        goto LABEL_10;
      }
LABEL_5:
      uint64_t v6 = (const void *)ApplePayQRCodeSigning;
      uint64_t v7 = (const void *)SecCertificateCopyAppleExternalRoots();
      uint64_t v8 = PKCreateAndValidateTrustWithCertsUsingPolicy();
      CFRelease(v6);
      if (v7) {
        CFRelease(v7);
      }
      break;
    case 2:
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sever signature certificate is currently not supported", v11, 2u);
      }

      goto LABEL_10;
    case 3:
      uint64_t v8 = PKCreateAndValidateTrustWithCertsUsingMarkerOIDs();
      break;
    default:
LABEL_10:
      uint64_t v8 = 0;
      break;
  }

  return v8;
}

void PKBarcodeCreateAndValidateTrustWithCertsAsync(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (v6)
  {
    switch(a2)
    {
      case 0:
        uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeSigning();
        if (ApplePayQRCodeSigning) {
          goto LABEL_9;
        }
        break;
      case 1:
        uint64_t ApplePayQRCodeSigning = SecPolicyCreateApplePayQRCodeEncryption();
        if (ApplePayQRCodeSigning)
        {
LABEL_9:
          id v9 = (const void *)ApplePayQRCodeSigning;
          uint64_t v10 = SecCertificateCopyAppleExternalRoots();
          PKCreateTrustAndValidateAsync();
          CFRelease(v9);
          if (v10)
          {
            uint64_t v11 = (const void *)v10;
            goto LABEL_13;
          }
        }
        break;
      case 2:
        uint64_t v8 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sever signature certificate is currently not supported", v14, 2u);
        }

        (*((void (**)(id, void, void))v6 + 2))(v6, 0, 0);
        break;
      case 3:
        uint64_t ApplePinned = SecPolicyCreateApplePinned();
        if (ApplePinned)
        {
          uint64_t v13 = (const void *)ApplePinned;
          PKCreateTrustAndValidateAsync();
          uint64_t v11 = v13;
LABEL_13:
          CFRelease(v11);
        }
        break;
      default:
        break;
    }
  }
}

void sub_1002F73B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1002F73C8(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithAccessory:*(void *)(a1 + 32) forBaseAccessory:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

id sub_1002F7584(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, unsigned char *a6)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "setSpinnerEnabled:", objc_msgSend(*a4, "BOOLValue"));
  *a6 = 1;
  return result;
}

void sub_1002F7B84(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 80);
  id v3 = [*(id *)(a1 + 48) copy];
  [v2 addObject:v3];

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 64))
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Already Fetching supported features queueing reply", buf, 2u);
    }
  }
  else
  {
    *(unsigned char *)(v4 + 64) = 1;
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002F7C94;
    v8[3] = &unk_10072FC20;
    void v8[4] = v6;
    [v6 _fetchPaymentSetupFeaturesForSourceApplicationID:v7 useStaticContent:0 blockServerFetch:0 completion:v8];
  }
}

void sub_1002F7C94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 80) copy];
  *(unsigned char *)(*(void *)(a1 + 32) + 64) = 0;
  [*(id *)(*(void *)(a1 + 32) + 80) removeAllObjects];
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218242;
    id v22 = [v4 count];
    __int16 v23 = 2112;
    id v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Returning payment setup features to %lu completion handlers. \n%@", buf, 0x16u);
  }

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v10);
        id v12 = *(NSObject **)(*(void *)(a1 + 32) + 56);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_1002F7EA0;
        v13[3] = &unk_10072E598;
        uint64_t v15 = v11;
        id v14 = v3;
        dispatch_async(v12, v13);

        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v8);
  }
}

uint64_t sub_1002F7EA0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1002F86D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1002F86EC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002F87B4;
  v11[3] = &unk_10072E598;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1002F87B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1002F87CC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    id v10 = *(NSObject **)(v9 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002F8930;
    block[3] = &unk_10072E598;
    id v18 = v7;
    id v17 = v6;
    dispatch_async(v10, block);

    uint64_t v11 = v18;
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v9 + 32));
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1002F8948;
    v13[3] = &unk_1007315D8;
    void v13[4] = *(void *)(a1 + 32);
    id v15 = v8;
    id v14 = v6;
    [WeakRetained _updateWebServiceConfigurationWithSupportedRegionTimeInterval:v13 unsupportedRegionTimeInterval:604800.0 completion:86400.0];

    uint64_t v11 = v15;
  }
}

uint64_t sub_1002F8930(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1002F8948(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002F89F0;
  v3[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);
}

uint64_t sub_1002F89F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1002F8A08(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 32));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002F8AFC;
  v13[3] = &unk_100747F30;
  id v10 = (void *)a1[5];
  uint64_t v9 = a1[6];
  void v13[4] = a1[4];
  uint64_t v17 = v9;
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  [WeakRetained validatePreconditionsWithCompletion:v13];
}

void sub_1002F8AFC(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002F8BC8;
  v6[3] = &unk_100747F08;
  char v11 = a2;
  uint64_t v5 = *(void *)(a1 + 64);
  void v6[4] = v3;
  uint64_t v10 = v5;
  id v7 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v4, v6);
}

uint64_t sub_1002F8BC8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    BOOL v2 = [*(id *)(*(void *)(a1 + 32) + 8) paymentSetupSupportedInRegion] == (id)1;
  }
  else {
    BOOL v2 = 0;
  }
  id v3 = objc_alloc_init((Class)PKPaymentSetupFeature);
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setState:v2];
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setType:0];
  [*(id *)(a1 + 40) addObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  id v6 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v6();
}

void sub_1002F8C88(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 57);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1002F8D88;
  v15[3] = &unk_100747F58;
  void v15[4] = v8;
  id v12 = *(id *)(a1 + 48);
  id v17 = v6;
  id v18 = v7;
  id v16 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 _cachedPaymentSetupFeaturesForSourceApplicationID:v9 useStaticContent:v10 blockServerFetch:v11 completion:v15];
}

void sub_1002F8D88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002F8E6C;
  v6[3] = &unk_100730C10;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_1002F8E6C(void *a1)
{
  BOOL v2 = (void *)a1[4];
  if (v2)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = v2;
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = (void *)a1[5];
          id v9 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v7), "copy", (void)v11);
          [v8 addObject:v9];

          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }
  }
  return (*(uint64_t (**)(void))(a1[7] + 16))();
}

void sub_1002F8F94(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(*(void *)(a1[6] + 8) + 40) state])
  {
    id v8 = [*(id *)(a1[4] + 8) targetDevice];
    if (objc_opt_respondsToSelector())
    {
      id v9 = [v8 supportedFeatureIdentifiersWithPaymentWebService:*(void *)(a1[4] + 8)];
    }
    else
    {
      id v9 = 0;
    }
    if ([v9 count])
    {
      long long v11 = (void *)a1[4];
      id v10 = (void *)a1[5];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1002F9120;
      v12[3] = &unk_100747F58;
      void v12[4] = v11;
      id v13 = v10;
      id v15 = v7;
      id v14 = v6;
      [v11 _fetchAccountFeaturesWithSupportedFeatureIdentifiers:v9 paymentSetupFeatures:v13 completion:v12];
    }
    else
    {
      (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
    }
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_1002F9120(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002F9204;
  v6[3] = &unk_100730C10;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, v6);
}

uint64_t sub_1002F9204(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count]) {
    [*(id *)(a1 + 40) addObjectsFromArray:*(void *)(a1 + 32)];
  }
  BOOL v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v2();
}

void sub_1002F9258(uint64_t a1)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v6), "sanitizePaymentSetupFeature", (void)v9);
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
}

void sub_1002F9450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)NSMutableArray);
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v36 = a1;
  id obj = *(id *)(a1 + 32);
  id v8 = [obj countByEnumeratingWithState:&v46 objects:v55 count:16];
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v47;
    *(void *)&long long v9 = 138543618;
    long long v33 = v9;
    uint64_t v38 = *(void *)v47;
    id v34 = v6;
    id v35 = v5;
    id v37 = v7;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v47 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v46 + 1) + 8 * i);
        id v14 = (id)PKFeatureIdentifierFromString();
        uint64_t v15 = PKPaymentSetupFeatureTypeFromPKFeatureIdentifier();
        if (v15 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v17 = v15;
          v45[0] = _NSConcreteStackBlock;
          v45[1] = 3221225472;
          v45[2] = sub_1002F9954;
          v45[3] = &unk_100747FC8;
          void v45[4] = v14;
          if (objc_msgSend(v6, "pk_containsObjectPassingTest:", v45))
          {
            uint64_t v18 = 3;
            goto LABEL_38;
          }
          v44[0] = _NSConcreteStackBlock;
          v44[1] = 3221225472;
          v44[2] = sub_1002F9988;
          v44[3] = &unk_100747FC8;
          v44[4] = v14;
          if (objc_msgSend(v5, "pk_containsObjectPassingTest:", v44)
            && ((PKIsPhone() & 1) != 0 || (PKIsPad() & 1) != 0 || (PKIsMac() & 1) != 0 || (PKIsVision() & 1) != 0))
          {
            uint64_t v18 = 2;
            goto LABEL_38;
          }
          if (PKDeviceSupportsApplicationForFeatureIdentifier())
          {
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            id v19 = *(id *)(v36 + 40);
            id v20 = [v19 countByEnumeratingWithState:&v40 objects:v54 count:16];
            if (v20)
            {
              id v21 = v20;
              uint64_t v22 = *(void *)v41;
              while (2)
              {
                for (j = 0; j != v21; j = (char *)j + 1)
                {
                  if (*(void *)v41 != v22) {
                    objc_enumerationMutation(v19);
                  }
                  id v24 = *(void **)(*((void *)&v40 + 1) + 8 * (void)j);
                  if (objc_msgSend(v24, "featureIdentifier", v33) == v14)
                  {
                    id v25 = v24;
                    goto LABEL_29;
                  }
                }
                id v21 = [v19 countByEnumeratingWithState:&v40 objects:v54 count:16];
                if (v21) {
                  continue;
                }
                break;
              }
              id v25 = 0;
LABEL_29:
              id v6 = v34;
              id v5 = v35;
            }
            else
            {
              id v25 = 0;
            }

            id v7 = v37;
            switch((unint64_t)[v25 productState])
            {
              case 0uLL:
              case 2uLL:
                id v26 = PKLogFacilityTypeGetObject();
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  id v27 = PKPaymentSetupProductStateToString();
                  *(_DWORD *)long long buf = v33;
                  uint64_t v51 = v13;
                  __int16 v52 = 2114;
                  long long v53 = v27;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Product with feature identifier: %{public}@ is in state: %{public}@ - means is an unsupported setup feature", buf, 0x16u);

                  id v7 = v37;
                }

                uint64_t v18 = 0;
                break;
              case 1uLL:
              case 3uLL:
              case 4uLL:
                uint64_t v18 = 1;
                break;
              default:
                uint64_t v18 = 0;
                id v7 = v37;
                break;
            }

LABEL_38:
            BOOL v28 = v17 != 1 || v18 == 0;
            if (v28 || (PKIsMac() & 1) != 0) {
LABEL_43:
            }
              uint64_t v29 = 0;
            else {
              uint64_t v29 = PKIsVision() ^ 1;
            }
            id v16 = objc_alloc_init((Class)PKPaymentSetupFeature);
            [v16 setState:v18];
            [v16 setType:v17];
            [v16 setSupportedOptions:v29];
            [v7 addObject:v16];
            uint64_t v11 = v38;
            goto LABEL_46;
          }
          uint64_t v18 = 0;
          goto LABEL_43;
        }
        id v16 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v51 = v13;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Error: Feature identifier: %@ could not be converted to setup type - skipping", buf, 0xCu);
        }
LABEL_46:
      }
      id v10 = [obj countByEnumeratingWithState:&v46 objects:v55 count:16];
    }
    while (v10);
  }

  id v30 = v7;
  uint64_t v31 = *(void *)(v36 + 48);
  id v32 = [v30 copy];
  (*(void (**)(uint64_t, id))(v31 + 16))(v31, v32);
}

BOOL sub_1002F9954(uint64_t a1, void *a2)
{
  return [a2 feature] == *(id *)(a1 + 32);
}

BOOL sub_1002F9988(uint64_t a1, void *a2)
{
  return [a2 feature] == *(id *)(a1 + 32);
}

void sub_1002F9DC4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Returning static payment setup features for: %@", buf, 0xCu);
  }

  if (!v6 || v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v10 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1002F9F40;
    v11[3] = &unk_1007368F0;
    void v11[4] = v10;
    id v12 = v6;
    id v13 = *(id *)(a1 + 48);
    [v10 _processPaymentSetupProductsResponse:v12 completion:v11];
  }
}

void sub_1002F9F40(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v5 = a2;
  id v4 = [v5 mutableCopy];
  [v3 _storeServerPaymentSetupFeatures:v4 productsResponse:a1[5] isStaticContent:1 priorDirtyStateIdentifier:0];

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1002F9FC8(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002FA074;
  block[3] = &unk_10072E9D8;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

void sub_1002FA074(void *a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Returning updated payment setup features for: %@", (uint8_t *)&v5, 0xCu);
  }

  id v4 = [*(id *)(a1[5] + 72) copy];
  (*(void (**)(void))(a1[6] + 16))();
}

uint64_t sub_1002FA1EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  BOOL v2 = [*(id *)(*(void *)(a1 + 32) + 72) count] != 0;
  uint64_t v3 = *(uint64_t (**)(uint64_t, BOOL))(v1 + 16);
  return v3(v1, v2);
}

id sub_1002FA2FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleWebServiceRequest:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1002FA3D4(uint64_t a1)
{
  char v14 = 0;
  BOOL v2 = [*(id *)(a1 + 32) _staticAvailableProductsRequest:&v14];
  if (v14)
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Static fetching disabled, returning nil", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1002FA618;
    v11[3] = &unk_100748068;
    void v11[4] = *(void *)(a1 + 32);
    id v12 = *(id *)(a1 + 48);
    id v4 = objc_retainBlock(v11);
    int v5 = PKLogFacilityTypeGetObject();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v6)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Getting static available products", buf, 2u);
      }

      [v2 addDiagnosticReason:*(void *)(a1 + 40)];
      uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 8);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_1002FA644;
      v9[3] = &unk_100748090;
      id v10 = v4;
      [v7 availableCommonProductsWithRequest:v2 completion:v9];
      id v8 = v10;
    }
    else
    {
      if (v6)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Feature did not support static products, fetching available products", buf, 2u);
      }

      id v8 = objc_alloc_init((Class)PKPaymentAvailableProductsRequest);
      [v8 addDiagnosticReason:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) _productsWithRequest:v8 completion:v4];
    }
  }
}

id sub_1002FA618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    return [*(id *)(a1 + 32) _applyRegionFilteringAndAgeCheckToProductsResponse:a2 completion:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1002FA644(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1002FA720(uint64_t a1)
{
  [*(id *)(a1 + 32) addDiagnosticReason:@"passd - Product Action"];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  return [v2 handleWebServiceRequest:v3 completion:v4];
}

void sub_1002FAA88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002FAB84;
  block[3] = &unk_10072E238;
  id v11 = *(id *)(a1 + 40);
  id v12 = v5;
  id v13 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
  *(unsigned char *)(*(void *)(a1 + 32) + 65) = 0;
  [*(id *)(*(void *)(a1 + 32) + 88) removeObjectAtIndex:0];
  [*(id *)(a1 + 32) _runNextProductsRequest];
}

void sub_1002FAB84(uint64_t a1)
{
  BOOL v2 = [*(id *)(a1 + 32) completion];
  if (v2)
  {
    id v3 = v2;
    v2[2](v2, *(void *)(a1 + 40), *(void *)(a1 + 48));
    BOOL v2 = (void (**)(void, void, void))v3;
  }
}

void sub_1002FACCC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002FADC0;
  block[3] = &unk_100731F38;
  id v13 = *(id *)(a1 + 40);
  id v14 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v7;
  uint64_t v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v10 = v7;
  id v11 = v6;
  dispatch_async(v8, block);
}

id sub_1002FADC0(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 40);
  if (v2) {
    BOOL v3 = *(void *)(a1 + 48) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 56);
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    id v8 = sub_1002FAEB4;
    uint64_t v9 = &unk_100747F58;
    id v10 = v4;
    id v11 = v2;
    id v13 = *(id *)(a1 + 64);
    id v12 = *(id *)(a1 + 48);
    [v4 _processPaymentSetupProductsResponse:v11 completion:&v6];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  return objc_msgSend(*(id *)(a1 + 56), "markProductsDirty", v6, v7, v8, v9, v10);
}

uint64_t sub_1002FAEB4(void *a1, void *a2)
{
  BOOL v3 = (void *)a1[4];
  id v4 = [a2 mutableCopy];
  [v3 _storeServerPaymentSetupFeatures:v4 productsResponse:a1[5] isStaticContent:0 priorDirtyStateIdentifier:0];

  id v5 = *(uint64_t (**)(void))(a1[7] + 16);
  return v5();
}

void sub_1002FB110(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002FB220;
  block[3] = &unk_100748108;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  char v18 = *(unsigned char *)(a1 + 64);
  id v15 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1002FB220(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    BOOL v2 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v2();
  }
  else
  {
    id v4 = *(void **)(a1 + 40);
    BOOL v3 = *(void **)(a1 + 48);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002FB340;
    v5[3] = &unk_1007480E0;
    char v10 = *(unsigned char *)(a1 + 80);
    void v5[4] = v4;
    id v6 = v3;
    id v7 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 72);
    id v8 = *(id *)(a1 + 32);
    [v4 _processPaymentSetupProductsResponse:v6 completion:v5];
  }
}

uint64_t sub_1002FB340(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    BOOL v3 = *(void **)(a1 + 32);
    id v4 = [a2 mutableCopy];
    [v3 _storeServerPaymentSetupFeatures:v4 productsResponse:*(void *)(a1 + 40) isStaticContent:0 priorDirtyStateIdentifier:*(void *)(a1 + 48)];
  }
  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);
  return v5();
}

void sub_1002FB3B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002FB4B4;
  v13[3] = &unk_100748158;
  __int16 v19 = *(_WORD *)(a1 + 56);
  id v14 = v7;
  id v15 = v6;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v16 = v9;
  uint64_t v17 = v10;
  id v18 = *(id *)(a1 + 48);
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v8, v13);
}

void sub_1002FB4B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || !*(void *)(a1 + 32) && *(void *)(a1 + 40) || *(unsigned char *)(a1 + 73))
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v6();
  }
  else
  {
    id v2 = objc_alloc_init((Class)PKPaymentAvailableProductsRequest);
    BOOL v3 = [*(id *)(a1 + 48) sourceApplicationIdentifier];
    [v2 setSourceApplicationIdentifier:v3];

    [v2 setCachePolicyOverride:3];
    id v4 = [*(id *)(a1 + 48) diagnosticReasons];
    [v2 setDiagnosticReasons:v4];

    id v5 = *(void **)(*(void *)(a1 + 56) + 8);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002FB60C;
    v7[3] = &unk_100748090;
    id v8 = *(id *)(a1 + 64);
    [v5 availableProductsWithRequest:v2 completion:v7];
  }
}

uint64_t sub_1002FB60C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002FB6C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002FB784;
  block[3] = &unk_10072E9D8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1002FB784(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _paymentSetupFeaturesForFilteredProducts:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1002FD030(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1002FD060(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = PKFeatureIdentifierToString();
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    id v18 = v5;
    __int16 v19 = 2112;
    uint64_t v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Available product feature %@ notification has discoveryCardIdentifier %@. Revealuting rules now.", buf, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(void **)(v7 + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002FD1C8;
  v12[3] = &unk_1007481D0;
  void v12[4] = v7;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = v10;
  id v13 = v9;
  id v14 = v3;
  id v11 = v3;
  [v8 processDiscoveryItemsAndMessagesWithCompletion:v12];
}

void sub_1002FD1C8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002FD290;
  v6[3] = &unk_1007481A8;
  uint64_t v9 = *(void *)(a1 + 64);
  id v7 = v2;
  long long v5 = *(_OWORD *)(a1 + 48);
  id v4 = (id)v5;
  long long v8 = v5;
  [v3 discoveryArticleLayoutForItemWithIdentifier:v7 completion:v6];
}

void sub_1002FD290(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    long long v8 = PKFeatureIdentifierToString();
    uint64_t v9 = a1[4];
    CFStringRef v10 = @"YES";
    *(_DWORD *)long long buf = 138412802;
    uint64_t v15 = v8;
    if (!v5) {
      CFStringRef v10 = @"NO";
    }
    __int16 v16 = 2112;
    uint64_t v17 = v9;
    __int16 v18 = 2112;
    CFStringRef v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDPaymentSetupFeaturesCoordinator: Available product feature %@ has discoveryCardIdentifier %@: %@.", buf, 0x20u);
  }
  if (v5)
  {
    uint64_t v11 = +[NSString stringWithFormat:@"%@/%@/%@", PKURLRouteDiscovery, PKURLRouteDiscoveryCard, a1[4]];
    uint64_t v12 = *(void *)(a1[6] + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_1002FD40C(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 104))
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 40) productIdentifier];
      *(_DWORD *)long long buf = 138412290;
      long long v8 = v4;
      goto LABEL_11;
    }
LABEL_12:

    return;
  }
  if (!*(void *)(a1 + 48) || !*(void *)(a1 + 56))
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 40) productIdentifier];
      *(_DWORD *)long long buf = 138412290;
      long long v8 = v4;
      id v5 = "PDPaymentSetupFeaturesCoordinator: No notification created due to missing title or message for product identifier: %@";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, buf, 0xCu);

      goto LABEL_12;
    }
    goto LABEL_12;
  }
  id v6 = [*(id *)(a1 + 40) productIdentifier];
  id v2 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:*(void *)(a1 + 48) message:*(void *)(a1 + 56)];
  [(PDUserNotification *)v2 setSuppressionBehavior:1];
  [(PDUserNotification *)v2 setNotificationIdentifier:v6];
  [(PDUserNotification *)v2 setReissueBannerOnUpdate:1];
  [(PDUserNotification *)v2 setCustomActionRoute:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  [*(id *)(*(void *)(a1 + 32) + 104) insertUserNotification:v2];
}

void sub_1002FD5E0(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002FD670;
  block[3] = &unk_10072F788;
  id v3 = *(id *)(a1 + 40);
  dispatch_async(v1, block);
}

uint64_t sub_1002FD670(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002FD908(uint64_t a1, void *a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [a2 count];
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 134218242;
    id v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fetched %ld static payment setup features in the background, for %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1002FDAF4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1002FE208(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1002FE394(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKSavingsAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  int v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    int v7 = v8;
  }
}

void sub_1002FE9A8(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1002FE9B0(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountFeatureDescriptor *)v3 setMinimumAmount:v4];
}

void sub_1002FEA14(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountFeatureDescriptor *)v3 setMaximumAmount:v4];
}

void sub_1002FEA78(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKSavingsAccountFeatureDescriptor *)v4 setSupportedNetworks:v5];
}

void sub_1002FEAE4(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1002FEAEC(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setMerchantCapabilities:](v4, "setMerchantCapabilities:", [a3 unsignedIntegerValue]);
}

void sub_1002FEB44(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setFundingSourceTypes:](v4, "setFundingSourceTypes:", [a3 unsignedIntegerValue]);
}

void sub_1002FEB9C(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setTransferFrequencies:](v4, "setTransferFrequencies:", [a3 unsignedIntegerValue]);
}

void sub_1002FEBF4(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1002FEBFC(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1002FEC04(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKSavingsAccountFeatureDescriptor *)v4 setSupportedFileFormatsForTransactionData:v5];
}

void sub_1002FEC70(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setContactMethod:](v4, "setContactMethod:", [a3 unsignedIntegerValue]);
}

void sub_1002FECC8(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setShowCreditRewardsHubBalance:](v4, "setShowCreditRewardsHubBalance:", [a3 BOOLValue]);
}

void sub_1002FED20(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setShowCreditDashboardBalance:](v4, "setShowCreditDashboardBalance:", [a3 BOOLValue]);
}

void sub_1002FED78(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setShowSettingsBalance:](v4, "setShowSettingsBalance:", [a3 BOOLValue]);
}

void sub_1002FEDD0(id a1, PKSavingsAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountFeatureDescriptor setHideCreditRewardsHubSignage:](v4, "setHideCreditRewardsHubSignage:", [a3 BOOLValue]);
}

void sub_1002FFA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

NSCopying *__cdecl sub_1002FFAB4(id a1, PKPassSharedEntitlement *a2)
{
  return (NSCopying *)[(PKPassSharedEntitlement *)a2 entitlementIdentifier];
}

NSCopying *__cdecl sub_1002FFABC(id a1, PKPassSharedEntitlement *a2)
{
  return (NSCopying *)[(PKPassSharedEntitlement *)a2 entitlementIdentifier];
}

void sub_1002FFAC4(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = [*(id *)(a1 + 32) objectForKey:v9];
  if (!v8) {
    goto LABEL_4;
  }
  [*(id *)(a1 + 32) removeObjectForKey:v9];
  if ([v8 hasCanonicallyEquivalentRightsToPassEntitlement:v7]) {
    goto LABEL_6;
  }
  if (![v8 hasCanonicallyEquivalentSharingCapabilityToPassEntitlement:v7])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
LABEL_4:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
LABEL_6:
}

void sub_100300144(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
  id v3 = [WeakRetained pendingShareActivations];

  id v4 = objc_msgSend(v3, "pk_createSetByApplyingBlock:", &stru_100748508);
  id v5 = [*(id *)(*(void *)(a1 + 32) + 16) registrations];
  id v6 = objc_msgSend(v5, "pk_createSetByApplyingBlock:", &stru_100748548);

  id v7 = [v6 mutableCopy];
  id v24 = v4;
  [v7 minusSet:v4];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v31;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v31 != v11) {
          objc_enumerationMutation(v8);
        }
        [*(id *)(*(void *)(a1 + 32) + 16) unregisterMessageForIdentifier:*(void *)(*((void *)&v30 + 1) + 8 * i)];
      }
      id v10 = [v8 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v10);
  }
  __int16 v23 = v8;

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = v3;
  id v13 = [obj countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v27;
    do
    {
      for (j = 0; j != v14; j = (char *)j + 1)
      {
        if (*(void *)v27 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v26 + 1) + 8 * (void)j);
        __int16 v18 = [v17 shareIdentifier];
        id v19 = objc_alloc_init((Class)PKApplicationMessageRequest);
        unsigned int v20 = [v6 containsObject:v18];
        id v21 = *(void **)(*(void *)(a1 + 32) + 16);
        if (v20) {
          [v21 updateMessageForIdentifier:v18 withRequest:v19];
        }
        else {
          [v21 registerMessageForIdentifier:v18 withRequest:v19];
        }
        unsigned int v22 = [*(id *)(*(void *)(a1 + 32) + 40) containsObject:v18];
        if ([v17 isWaitingOnUserAction])
        {
          if ((v22 & 1) == 0)
          {
            [*(id *)(a1 + 32) _sendActivationRequiredNotificationsForShareIdentifier:v18];
            [*(id *)(*(void *)(a1 + 32) + 40) addObject:v18];
          }
        }
        else if (v22)
        {
          [*(id *)(*(void *)(a1 + 32) + 40) removeObject:v18];
        }
      }
      id v14 = [obj countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v14);
  }
}

id sub_100300410(id a1, PKPassSharePendingActivation *a2)
{
  return [(PKPassSharePendingActivation *)a2 shareIdentifier];
}

id sub_100300418(id a1, PKApplicationMessageRegistration *a2)
{
  id v2 = [(PKApplicationMessageRegistration *)a2 key];
  id v3 = [v2 identifier];

  return v3;
}

NSCopying *__cdecl sub_100300700(id a1, PDShareChange *a2)
{
  unint64_t v2 = [(PDShareChange *)a2 type];
  return (NSCopying *)+[NSNumber numberWithUnsignedInteger:v2];
}

void sub_100300744(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v9 = v3;
    id v4 = [v3 count];
    id v5 = *(void **)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    if ((unint64_t)v4 < 2)
    {
      id v7 = [v9 firstObject];
      id v8 = [v6 _notificationForShareChange:v7 pass:*(void *)(a1 + 48)];
      [v5 safelyAddObject:v8];
    }
    else
    {
      id v7 = [*(id *)(a1 + 40) _groupNotificationForChanges:v9 pass:*(void *)(a1 + 48)];
      [v5 safelyAddObject:v7];
    }

    id v3 = v9;
  }
}

void sub_100300AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_100300B2C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (v9 && objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "active", (void)v12))
        {
          uint64_t v10 = [v9 identifier];
          [v3 setObject:v9 forKeyedSubscript:v10];
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  return v3;
}

void sub_100300C7C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v13 = a2;
  id v7 = a3;
  id v8 = [*(id *)(a1 + 32) objectForKey:v13];
  if (!v8)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    goto LABEL_6;
  }
  [*(id *)(a1 + 32) removeObjectForKey:v13];
  if ([v8 hasCanonicallyEquivalentRightsToPassEntitlement:v7]) {
    goto LABEL_8;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  id v9 = [v8 activeCapabilityRole];
  uint64_t v10 = [v7 activeCapabilityRole];
  int v11 = PKEqualObjects();

  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 48);
LABEL_6:
    *(unsigned char *)(*(void *)(v12 + 8) + 24) = 1;
  }
  *a4 = 1;
LABEL_8:
}

NSCopying *__cdecl sub_100301848(id a1, PKPassShare *a2)
{
  return (NSCopying *)[(PKPassShare *)a2 identifier];
}

NSCopying *__cdecl sub_100301850(id a1, PKPassShare *a2)
{
  return (NSCopying *)[(PKPassShare *)a2 identifier];
}

id sub_100301858(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = objc_msgSend(*(id *)(a1 + 32), "allKeys", 0);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8 * i);
        uint64_t v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:v9];
        if ([v3 isSameUnderlyingShareAs:v10])
        {
          [*(id *)(a1 + 32) removeObjectForKey:v9];
          goto LABEL_11;
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }
  uint64_t v10 = 0;
LABEL_11:

  return v10;
}

id sub_1003019B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = [v5 senderShareIdentifier];
    uint64_t v10 = [v8 objectForKeyedSubscript:v9];

    if (!v7) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (!v10)
  {
    int v11 = *(void **)(a1 + 32);
    long long v12 = [v7 senderShareIdentifier];
    uint64_t v10 = [v11 objectForKeyedSubscript:v12];
  }
LABEL_7:
  long long v13 = [v10 recipientNickname];

  return v13;
}

uint64_t sub_100301A98(uint64_t a1, uint64_t a2, void *a3)
{
  id v13 = a3;
  id v4 = [v13 isLocalShare];
  id v5 = v13;
  if ((v4 & 1) == 0)
  {
    id v6 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    if (v6
      || ([v13 senderShareIdentifier],
          uint64_t v9 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(),
          v9 != @"self")
      && ((uint64_t v10 = v9) == 0
       || (id v11 = [(__CFString *)v9 caseInsensitiveCompare:@"self"],
           v10,
           v10,
           v11)))
    {
      uint64_t v7 = objc_alloc_init(PDShareChange);
      [(PDShareChange *)v7 setOldShare:v6];
      [(PDShareChange *)v7 setUpdatedShare:v13];
      id v8 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      [(PDShareChange *)v7 setSender:v8];

      [*(id *)(a1 + 32) addObject:v7];
    }

    id v5 = v13;
  }
  return _objc_release_x1(v4, v5);
}

void sub_100301BC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (([v6 isLocalShare] & 1) == 0)
  {
    id v4 = objc_alloc_init(PDShareChange);
    [(PDShareChange *)v4 setOldShare:v6];
    id v5 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    [(PDShareChange *)v4 setSender:v5];

    [*(id *)(a1 + 32) addObject:v4];
  }
}

uint64_t sub_100302700(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 notificationService];
  id v6 = [v5 serviceURL];

  uint64_t v7 = [v4 notificationService];
  id v8 = [v7 serviceURL];

  uint64_t v9 = [v3 notificationService];
  uint64_t v10 = [v9 registrationURL];

  id v11 = [v4 notificationService];
  long long v12 = [v11 registrationURL];

  id v13 = [v3 notificationService];
  id v14 = [v13 serviceType];

  long long v15 = [v4 notificationService];
  id v16 = [v15 serviceType];

  if (PKEqualObjects())
  {
    uint64_t v17 = 0;
    if (PKEqualObjects() && v14 == v16)
    {
      if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector())
      {
        __int16 v18 = NSStringFromSelector("dpanIdentifier");
        uint64_t v19 = [v3 valueForKey:v18];

        unsigned int v20 = NSStringFromSelector("dpanIdentifier");
        uint64_t v21 = [v4 valueForKey:v20];

        if (v19 | v21) {
          uint64_t v17 = (uint64_t)[(id)v19 isEqualToString:v21];
        }
        else {
          uint64_t v17 = 1;
        }
      }
      else
      {
        uint64_t v17 = 1;
      }
    }
  }
  else
  {
    uint64_t v17 = 0;
  }

  return v17;
}

uint64_t sub_1003090C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) uniqueID];
  id v4 = +[PassAnnotations anyInDatabase:v2 withPassID:v3];
  [v4 updateSortingState:*(void *)(a1 + 48)];

  return 1;
}

void sub_100309AA0(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void *sub_100309C10(void *result)
{
  if (*(unsigned char *)(result[4] + 104))
  {
    uint64_t v1 = result;
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to restore application after database restoration", v3, 2u);
    }

    *(unsigned char *)(v1[4] + 104) = 0;
    return [(id)v1[4] updateApplicationsWithCompletion:&stru_100748768];
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100309CA8(id a1, NSArray *a2, NSError *a3)
{
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Applications updated following database restoration", v4, 2u);
  }
}

void sub_10030A630(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_mergeApplications:featureFailures:", *(void *)(a1 + 40), 0);
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030A6D8;
    block[3] = &unk_10072F788;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_10030A6D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030A7CC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_mergeApplications:forAccountIdentifier:", *(void *)(a1 + 40), *(void *)(a1 + 48));
  id v2 = *(void **)(a1 + 56);
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030A870;
    block[3] = &unk_10072F788;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_10030A870(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030A944(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) applicationIdentifier];
  id v3 = objc_msgSend(*(id *)(a1 + 40), "_queue_featureApplicationWithIdentifier:", v2);
  id v4 = [*(id *)(a1 + 32) accountIdentifier];
  if (!v3)
  {
    id v5 = [*(id *)(*(void *)(a1 + 40) + 32) insertOrUpdateFeatureApplication:*(void *)(a1 + 32)];
    uint64_t v8 = *(void *)(a1 + 40);
    if (v4)
    {
      id v7 = [*(id *)(v8 + 72) objectForKeyedSubscript:v4];
      if (!v7)
      {
        id v7 = objc_alloc_init((Class)NSMutableArray);
        [*(id *)(*(void *)(a1 + 40) + 72) setObject:v7 forKeyedSubscript:v4];
      }
      goto LABEL_10;
    }
LABEL_12:
    [*(id *)(v8 + 64) addObject:v5];
    goto LABEL_13;
  }
  if (([v3 isEqual:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v5 = [*(id *)(*(void *)(a1 + 40) + 32) insertOrUpdateFeatureApplication:*(void *)(a1 + 32)];
    uint64_t v6 = *(void *)(a1 + 40);
    if (v4)
    {
      id v7 = [*(id *)(v6 + 72) objectForKeyedSubscript:v4];
      if (!v7)
      {
        id v7 = objc_alloc_init((Class)NSMutableArray);
        [*(id *)(*(void *)(a1 + 40) + 72) setObject:v7 forKeyedSubscript:v4];
      }
      [v7 removeObject:v3];
LABEL_10:
      [v7 addObject:v5];

LABEL_13:
      [*(id *)(a1 + 40) _postApplicationsChangedNotification];
      [*(id *)(a1 + 40) _concludeIDVSessionIfNeededForFeatureApplication:*(void *)(a1 + 32)];
      long long v9 = *(void **)(a1 + 40);
      if (v3)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        v17[0] = v3;
        v17[1] = v10;
        id v11 = +[NSArray arrayWithObjects:v17 count:2];
        __int16 v18 = v11;
        long long v12 = +[NSArray arrayWithObjects:&v18 count:1];
        [v9 _processChangedApplications:v12];
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 32);
        id v11 = +[NSArray arrayWithObjects:&v19 count:1];
        [v9 _processAddedApplications:v11];
      }

      goto LABEL_17;
    }
    [*(id *)(v6 + 64) removeObject:v3];
    uint64_t v8 = *(void *)(a1 + 40);
    goto LABEL_12;
  }
LABEL_17:
  id v13 = *(void **)(a1 + 48);
  if (v13)
  {
    id v14 = *(NSObject **)(*(void *)(a1 + 40) + 24);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10030AC08;
    v15[3] = &unk_10072F788;
    id v16 = v13;
    dispatch_async(v14, v15);
  }
}

uint64_t sub_10030AC08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030ACE0(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_queue_featureApplicationWithIdentifier:", *(void *)(a1 + 40));
  id v3 = v2;
  if (v2)
  {
    id v4 = [v2 accountIdentifier];
    uint64_t v5 = *(void *)(a1 + 32);
    if (v4)
    {
      uint64_t v6 = [*(id *)(v5 + 72) objectForKeyedSubscript:v4];
      [v6 removeObject:v3];
    }
    else
    {
      [*(id *)(v5 + 64) removeObject:v3];
    }
    [*(id *)(*(void *)(a1 + 32) + 32) deleteFeatureApplicationWithIdentifier:*(void *)(a1 + 40)];

    id v7 = *(void **)(a1 + 32);
    id v13 = v3;
    uint64_t v8 = +[NSArray arrayWithObjects:&v13 count:1];
    [v7 _processDeletedApplications:v8];

    [*(id *)(a1 + 32) _postApplicationsChangedNotification];
    [*(id *)(a1 + 32) _concludeIDVSessionIfNeededForFeatureApplication:v3];
  }
  long long v9 = *(void **)(a1 + 48);
  if (v9)
  {
    uint64_t v10 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030AE68;
    block[3] = &unk_10072F788;
    id v12 = v9;
    dispatch_async(v10, block);
  }
}

uint64_t sub_10030AE68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030B0B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10030B150;
  v8[3] = &unk_10072F788;
  id v9 = v5;
  id v7 = v5;
  [v6 deleteApplicationsWithCompletion:v8];
}

void sub_10030B150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSNull null];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_10030B1B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10030B25C;
  v9[3] = &unk_10072F788;
  id v10 = v5;
  id v8 = v5;
  [v7 deleteApplicationsForAccountIdentifier:v6 completion:v9];
}

void sub_10030B25C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSNull null];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

uint64_t sub_10030B2C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10030B374(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_deleteApplications");
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030B414;
    block[3] = &unk_10072F788;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_10030B414(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030B4E8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_deleteApplicationsForAccountIdentifier:", *(void *)(a1 + 40));
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030B58C;
    block[3] = &unk_10072F788;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_10030B58C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030B734(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v3, "applyManager:didAddApplication:", *(void *)(a1 + 40), v9, (void)v10);
        }
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_10030BB64(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v9, "count", (void)v12) == (id)2)
        {
          long long v10 = [v9 objectAtIndexedSubscript:0];
          long long v11 = [v9 objectAtIndexedSubscript:1];
          if (objc_opt_respondsToSelector()) {
            [v3 applyManager:*(void *)(a1 + 40) didUpdateApplication:v11 oldApplication:v10];
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

void sub_10030BCD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10030BDA8;
  v7[3] = &unk_100730198;
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void *sub_10030BDA8(void *result)
{
  if (result[4])
  {
    uint64_t v1 = result;
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Silent sharing failed, roll user interaction banner", v3, 2u);
    }

    return [*(id *)(v1[5] + 184) postApplyStateRequiresUserInteractionNotificationWithNewApplication:v1[6] oldApplication:v1[7]];
  }
  return result;
}

void sub_10030BF98(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v8);
        if (objc_opt_respondsToSelector()) {
          objc_msgSend(v3, "applyManager:didRemoveApplication:", *(void *)(a1 + 40), v9, (void)v10);
        }
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

void sub_10030C1F8(uint64_t a1)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64);
  id v3 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v20;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        if (([v7 applicationStateDirty] & 1) == 0)
        {
          [v7 setApplicationStateDirty:1];
          id v8 = [*(id *)(*(void *)(a1 + 32) + 32) insertOrUpdateFeatureApplication:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v4);
  }

  id v9 = objc_alloc((Class)NSMutableArray);
  long long v10 = [*(id *)(*(void *)(a1 + 32) + 32) featureApplications];
  long long v11 = [v10 allObjects];
  id v12 = [v9 initWithArray:v11];
  uint64_t v13 = *(void *)(a1 + 32);
  long long v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  long long v15 = *(void **)(a1 + 40);
  if (v15)
  {
    id v16 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030C3E4;
    block[3] = &unk_10072F788;
    id v18 = v15;
    dispatch_async(v16, block);
  }
}

uint64_t sub_10030C3E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030C4B8(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        if (([v7 applicationStateDirty] & 1) == 0)
        {
          id v8 = objc_msgSend(*(id *)(a1 + 40), "errorForFeature:", objc_msgSend(v7, "feature"));
          if (v8)
          {
            [v7 setApplicationStateDirty:1];
            id v9 = [*(id *)(*(void *)(a1 + 32) + 32) insertOrUpdateFeatureApplication:v7];
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v4);
  }

  id v10 = objc_alloc((Class)NSMutableArray);
  long long v11 = [*(id *)(*(void *)(a1 + 32) + 32) featureApplications];
  id v12 = [v11 allObjects];
  id v13 = [v10 initWithArray:v12];
  uint64_t v14 = *(void *)(a1 + 32);
  long long v15 = *(void **)(v14 + 64);
  *(void *)(v14 + 64) = v13;

  id v16 = *(void **)(a1 + 48);
  if (v16)
  {
    uint64_t v17 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030C6C8;
    block[3] = &unk_10072F788;
    id v19 = v16;
    dispatch_async(v17, block);
  }
}

uint64_t sub_10030C6C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030C79C(void *a1)
{
  id v2 = [*(id *)(a1[4] + 72) objectForKeyedSubscript:a1[5]];
  id v3 = v2;
  if (v2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v18;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v18 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          if (([v8 applicationStateDirty] & 1) == 0)
          {
            [v8 setApplicationStateDirty:1];
            id v9 = [*(id *)(a1[4] + 32) insertOrUpdateFeatureApplication:v8];
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v5);
    }
    id v10 = [*(id *)(a1[4] + 32) featureApplications];
    long long v11 = [v10 allObjects];
    id v12 = [v11 mutableCopy];

    [*(id *)(a1[4] + 72) setObject:v12 forKeyedSubscript:a1[5]];
  }
  id v13 = (void *)a1[6];
  if (v13)
  {
    uint64_t v14 = *(NSObject **)(a1[4] + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030C984;
    block[3] = &unk_10072F788;
    id v16 = v13;
    dispatch_async(v14, block);
  }
}

uint64_t sub_10030C984(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030CA58(uint64_t a1)
{
  id v2 = objc_msgSend(*(id *)(a1 + 32), "_queue_featureApplicationWithIdentifier:", *(void *)(a1 + 40));
  id v3 = v2;
  if (v2 && ([v2 applicationStateDirty] & 1) == 0)
  {
    [v3 setApplicationStateDirty:1];
    id v4 = [*(id *)(*(void *)(a1 + 32) + 32) insertOrUpdateFeatureApplication:v3];
    id v5 = [v4 accountIdentifier];
    uint64_t v6 = *(void *)(a1 + 32);
    if (v5)
    {
      id v7 = [*(id *)(v6 + 72) objectForKeyedSubscript:v5];
      if (!v7)
      {
        id v7 = objc_alloc_init((Class)NSMutableArray);
        [*(id *)(*(void *)(a1 + 32) + 72) setObject:v7 forKeyedSubscript:v5];
      }
      [v7 removeObject:v3];
      [v7 addObject:v4];
    }
    else
    {
      [*(id *)(v6 + 64) removeObject:v3];
      [*(id *)(*(void *)(a1 + 32) + 64) addObject:v4];
    }
  }
  id v8 = *(void **)(a1 + 48);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 32) + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030CBE0;
    block[3] = &unk_10072F788;
    id v11 = v8;
    dispatch_async(v9, block);
  }
}

uint64_t sub_10030CBE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10030CCB8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v3 = [v2 copy];

  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10030CD88;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_10030CD88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10030CE60(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id v4 = *(void **)(*(void *)(a1 + 40) + 64);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10030CFAC;
    v13[3] = &unk_1007487B8;
    uint64_t v1 = &v14;
    id v14 = v3;
    id v5 = objc_msgSend(v4, "pk_objectsPassingTest:", v13);
    id v6 = [v5 firstObject];
  }
  else
  {
    id v6 = 0;
  }
  id v7 = *(NSObject **)(*(void *)(a1 + 40) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10030D038;
  block[3] = &unk_10072E598;
  id v8 = *(id *)(a1 + 48);
  id v11 = v6;
  id v12 = v8;
  id v9 = v6;
  dispatch_async(v7, block);

  if (v3) {
}
  }

uint64_t sub_10030CFAC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [a2 referenceIdentifier];
  id v4 = v2;
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v8 = 1;
  }
  else
  {
    if (v4) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = (uint64_t)[v4 isEqualToString:v5];
    }
  }

  return v8;
}

uint64_t sub_10030D038(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10030D114(id *a1)
{
  id v2 = objc_msgSend(a1[4], "_queue_featureApplicationWithIdentifier:", a1[5]);
  id v3 = *((void *)a1[4] + 3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10030D1F0;
  block[3] = &unk_10072E9D8;
  id v6 = v2;
  id v7 = a1[5];
  id v8 = a1[6];
  id v4 = v2;
  dispatch_async(v3, block);
}

uint64_t sub_10030D1F0(void *a1)
{
  if (!a1[4])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = a1[5];
      int v5 = 138543362;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No application with identifier: %{public}@", (uint8_t *)&v5, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10030D370(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 80) count])
  {
    uint64_t v3 = [[PDApplyManagerUpdateApplicationsRequest alloc] initWithFromPush:*(unsigned __int8 *)(a1 + 48) completion:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 32) + 112) addObject:v3];
    objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skipping application update as its not supported by region", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

id sub_10030D524(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 88) objectForKey:*(void *)(a1 + 40)];

  if (v2)
  {
    if (*(void *)(a1 + 48))
    {
      id v3 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKey:*(void *)(a1 + 40)];
      if (!v3) {
        id v3 = objc_alloc_init((Class)NSMutableArray);
      }
      id v4 = [*(id *)(a1 + 48) copy];
      id v5 = objc_retainBlock(v4);
      [v3 addObject:v5];

      [*(id *)(*(void *)(a1 + 32) + 120) setObject:v3 forKey:*(void *)(a1 + 40)];
    }
    uint64_t v6 = *(void **)(a1 + 32);
    return objc_msgSend(v6, "_queue_performNextApplicationsUpdate");
  }
  else
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412290;
      uint64_t v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Skipping application update for account %@ with no apply service URL", (uint8_t *)&v10, 0xCu);
    }

    id result = *(id *)(a1 + 48);
    if (result) {
      return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0, 0);
    }
  }
  return result;
}

void sub_10030D910(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_10030D930(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 count];
  if (result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_10030D96C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 1;
  id v7 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10030DA1C;
  v9[3] = &unk_10072F788;
  id v10 = v5;
  id v8 = v5;
  objc_msgSend(v7, "_queue_updateApplicationsWithRequests:completion:", v6, v9);
}

void sub_10030DA1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSNull null];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_10030DA84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 copy];
  id v8 = [v6 count];

  if (v8)
  {
    [*(id *)(*(void *)(a1 + 32) + 120) removeObjectForKey:v5];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10030DB7C;
    v10[3] = &unk_100733E60;
    uint64_t v9 = *(void **)(a1 + 40);
    void v10[4] = *(void *)(a1 + 32);
    id v11 = v5;
    id v12 = v7;
    [v9 addOperation:v10];
  }
}

void sub_10030DB7C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  *(unsigned char *)(a1[4] + 105) = 1;
  id v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10030DC34;
  v10[3] = &unk_10072F788;
  id v11 = v5;
  id v9 = v5;
  objc_msgSend(v6, "_queue_updateApplicationsForAccountIdentifier:withCompletionBlocks:completion:", v7, v8, v10);
}

void sub_10030DC34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[NSNull null];
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
}

void sub_10030DC9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(NSObject **)(v1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10030DD10;
  block[3] = &unk_10072E1E8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_10030DD10(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
}

void sub_10030DFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_10030DFF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10030E0B8;
  v6[3] = &unk_1007368F0;
  id v4 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = v3;
  [v4 applicationsWithCompletion:v6];
}

void sub_10030E0B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * (void)v8), "completion", (void)v11);
        id v10 = (void *)v9;
        if (v9) {
          (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v3, *(void *)(a1 + 40));
        }

        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10030E1F4(uint64_t a1)
{
  id v2 = +[NSDate date];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v30 objects:v36 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v31;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v31 != v6) {
          objc_enumerationMutation(v3);
        }
        if ([*(id *)(*((void *)&v30 + 1) + 8 * (void)v7) fromPush])
        {

          char v13 = 1;
          goto LABEL_16;
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v30 objects:v36 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  if (*(void *)(*(void *)(a1 + 40) + 96) && (objc_msgSend(v2, "timeIntervalSinceDate:"), v8 < 10.0))
  {
    [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 40) + 96)];
    double v10 = v9;
    long long v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      long long v12 = +[NSNumber numberWithDouble:v10];
      *(_DWORD *)long long buf = 138412290;
      id v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Not updated applications because applications were last updated %@ seconds ago.", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    char v13 = 0;
LABEL_16:
    uint64_t v14 = *(void *)(a1 + 40);
    long long v15 = *(void **)(v14 + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10030E4AC;
    v20[3] = &unk_1007488D0;
    uint64_t v25 = *(void *)(a1 + 64);
    void v20[4] = v14;
    char v28 = v13;
    id v16 = *(id *)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 72);
    id v21 = v16;
    uint64_t v26 = v17;
    id v18 = *(id *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 80);
    id v22 = v18;
    uint64_t v27 = v19;
    char v29 = *(unsigned char *)(a1 + 88);
    id v24 = *(id *)(a1 + 56);
    id v23 = v2;
    [v15 performHandlerOnSharedWebServiceQueue:v20];
  }
}

void sub_10030E4AC(uint64_t a1, void *a2)
{
  id v3 = [a2 context];
  id v4 = [v3 regions];

  id v5 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v38;
    do
    {
      double v10 = 0;
      do
      {
        if (*(void *)v38 != v9) {
          objc_enumerationMutation(v6);
        }
        long long v11 = [v6 objectForKey:*(void *)(*((void *)&v37 + 1) + 8 * (void)v10)];
        long long v12 = [v11 applyServiceURL];

        if (v12)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
          v30[0] = _NSConcreteStackBlock;
          v30[1] = 3221225472;
          v30[2] = sub_10030E7A8;
          v30[3] = &unk_100748858;
          v30[4] = *(void *)(a1 + 32);
          id v31 = v11;
          char v36 = *(unsigned char *)(a1 + 96);
          id v13 = *(id *)(a1 + 40);
          uint64_t v14 = *(void *)(a1 + 80);
          id v32 = v13;
          uint64_t v34 = v14;
          id v15 = *(id *)(a1 + 48);
          uint64_t v16 = *(void *)(a1 + 88);
          id v33 = v15;
          uint64_t v35 = v16;
          [v5 addOperation:v30];
        }
        double v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v37 objects:v41 count:16];
    }
    while (v8);
  }

  uint64_t v17 = +[NSNull null];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10030EE00;
  v23[3] = &unk_1007488A8;
  char v29 = *(unsigned char *)(a1 + 97);
  v23[4] = *(void *)(a1 + 32);
  long long v22 = *(_OWORD *)(a1 + 64);
  id v18 = (id)v22;
  long long v26 = v22;
  uint64_t v27 = *(void *)(a1 + 88);
  id v24 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 80);
  id v25 = v19;
  uint64_t v28 = v20;
  id v21 = [v5 evaluateWithInput:v17 completion:v23];
}

void sub_10030E7A8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(a1 + 32) + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10030E8C4;
  v15[3] = &unk_100748830;
  id v16 = *(id *)(a1 + 40);
  char v24 = *(unsigned char *)(a1 + 80);
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v17 = v9;
  uint64_t v18 = v10;
  long long v11 = *(void **)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  id v19 = v11;
  id v20 = v6;
  uint64_t v12 = *(void *)(a1 + 72);
  id v21 = v7;
  uint64_t v23 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 performHandlerOnSharedWebServiceQueue:v15];
}

void sub_10030E8C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKApplyWebServiceApplicationsRequest);
  id v5 = [*(id *)(a1 + 32) applyServiceURL];
  [v4 setApplyServiceURL:v5];

  id v6 = objc_alloc((Class)NSString);
  if (*(unsigned char *)(a1 + 96)) {
    CFStringRef v7 = @"YES";
  }
  else {
    CFStringRef v7 = @"NO";
  }
  id v8 = [v6 initWithFormat:@"Update Applications From Push - %@", v7];
  [v4 addDiagnosticReason:v8];

  id v9 = objc_alloc((Class)NSString);
  uint64_t v10 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 40) count]);
  id v11 = [v9 initWithFormat:@"Update Applications Coalesced Requests - %@", v10];
  [v4 addDiagnosticReason:v11];

  if (*(void *)(*(void *)(a1 + 48) + 96))
  {
    id v12 = objc_alloc((Class)NSString);
    [*(id *)(*(void *)(a1 + 48) + 96) timeIntervalSinceReferenceDate];
    id v13 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    id v14 = [v12 initWithFormat:@"Update Applications Last Request Timestamp - %@", v13];
    [v4 addDiagnosticReason:v14];
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_10030EAF4;
  v19[3] = &unk_100748808;
  uint64_t v24 = *(void *)(a1 + 80);
  id v15 = *(id *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 48);
  id v20 = v15;
  uint64_t v21 = v16;
  id v23 = *(id *)(a1 + 72);
  id v17 = *(id *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 88);
  id v22 = v17;
  uint64_t v25 = v18;
  [v3 applicationsWithRequest:v4 completion:v19];
}

void sub_10030EAF4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = [v7 featureFailures];
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = *(void **)(a1 + 32);
  id v12 = [v7 allFeatureApplications];

  [v11 addObjectsFromArray:v12];
  id v13 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  if (v13)
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [v13 description];
      *(_DWORD *)long long buf = 138543362;
      char v29 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Could not update some applications with feature failures %{public}@", buf, 0xCu);
    }
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10030EDD0;
    v25[3] = &unk_10072E598;
    id v27 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 48);
    [v16 _applicationsAreInDirtyWithFeatureFailures:v17 completion:v25];

    uint64_t v18 = v27;
  }
  else
  {
    if (!v6)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_10;
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
    id v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = [v6 description];
      *(_DWORD *)long long buf = 138543362;
      char v29 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Could not update applications with error %{public}@", buf, 0xCu);
    }
    uint64_t v21 = *(void **)(a1 + 40);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10030EDE8;
    v22[3] = &unk_10072E598;
    id v24 = *(id *)(a1 + 56);
    id v23 = *(id *)(a1 + 48);
    [v21 _applicationsAreInDirtyStateWithCompletion:v22];

    uint64_t v18 = v24;
  }

LABEL_10:
}

uint64_t sub_10030EDD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_10030EDE8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 1);
}

void sub_10030EE00(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(unsigned char *)(a1 + 88) && !*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    id v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Error: Applications on disk but missing URL or push topic - forcing a re-register. FILE A RADAR !", buf, 2u);
    }

    uint64_t v16 = [*(id *)(*(void *)(a1 + 32) + 40) deviceRegistrationServiceCoordinator];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10030F010;
    v25[3] = &unk_1007420C8;
    id v17 = *(id *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 72);
    id v26 = v17;
    uint64_t v27 = v18;
    [v16 performDeviceRegistrationForReason:@"Missing Apply URL/Topic" brokerURL:0 action:1 forceApplePayRegister:1 forcePeerPaymentRegister:1 completion:v25];

    id v14 = v26;
    goto LABEL_9;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(NSObject **)(v8 + 16);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_10030F02C;
    v19[3] = &unk_100748880;
    void v19[4] = v8;
    id v20 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 80);
    id v21 = v10;
    uint64_t v23 = v11;
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 72);
    id v22 = v12;
    uint64_t v24 = v13;
    dispatch_async(v9, v19);

    id v14 = v20;
LABEL_9:

    goto LABEL_10;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_10:
}

uint64_t sub_10030F010(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

uint64_t sub_10030F02C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 96), *(id *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "_queue_mergeApplications:featureFailures:", *(void *)(a1 + 48), *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40));
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v2();
}

void sub_10030F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10030F368(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10030F434;
  v7[3] = &unk_1007368F0;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = *(id *)(a1 + 56);
  id v6 = v3;
  [v4 applicationsForAccountIdentifier:v5 withCompletion:v7];
}

void sub_10030F434(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8) + 16))(*(void *)(*((void *)&v9 + 1) + 8 * (void)v8));
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
}

void sub_10030F558(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030F634;
  v5[3] = &unk_1007489C0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  uint64_t v11 = *(void *)(a1 + 72);
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  [v2 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_10030F634(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10030F7D4;
    v14[3] = &unk_100731D08;
    void v14[4] = *(void *)(a1 + 40);
    id v4 = v3;
    uint64_t v5 = *(void *)(a1 + 72);
    id v15 = v4;
    uint64_t v18 = v5;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 56);
    [v2 addOperation:v14];
  }
  id v6 = +[NSNull null];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10030FBB8;
  v9[3] = &unk_100748998;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 72);
  void v9[4] = v7;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 64);
  id v8 = [v2 evaluateWithInput:v6 completion:v9];
}

void sub_10030F7D4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(a1 + 32) + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10030F8E4;
  v14[3] = &unk_100748948;
  id v9 = *(id *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v15 = v9;
  uint64_t v16 = v10;
  id v11 = *(id *)(a1 + 48);
  id v20 = v7;
  id v17 = v11;
  id v18 = v6;
  id v19 = *(id *)(a1 + 56);
  id v12 = v6;
  id v13 = v7;
  [v8 performHandlerOnSharedWebServiceQueue:v14];
}

void sub_10030F8E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKApplyWebServiceApplicationsRequest);
  [v4 setApplyServiceURL:*(void *)(a1 + 32)];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10030F9F0;
  v7[3] = &unk_100748920;
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 80);
  void v7[4] = v5;
  id v8 = v6;
  id v11 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  [v3 applicationsWithRequest:v4 completion:v7];
}

void sub_10030F9F0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v6 description];
      *(_DWORD *)long long buf = 138543362;
      id v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not update applications with error %{public}@", buf, 0xCu);
    }
    id v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10030FBA0;
    v13[3] = &unk_10072E598;
    id v15 = *(id *)(a1 + 64);
    id v14 = *(id *)(a1 + 48);
    [v9 applicationsForAccountIdentifierAreInDirtyState:v10 completion:v13];
  }
  else
  {
    id v11 = *(void **)(a1 + 56);
    uint64_t v12 = [a2 allFeatureApplications];
    [v11 addObjectsFromArray:v12];

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

uint64_t sub_10030FBA0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 1);
}

void sub_10030FBB8(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v2();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030FCB8;
    block[3] = &unk_100748970;
    void block[4] = v3;
    id v8 = *(id *)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v5 = *(id *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    id v10 = v5;
    uint64_t v11 = v6;
    dispatch_async(v4, block);
  }
}

uint64_t sub_10030FCB8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_queue_mergeApplications:forAccountIdentifier:", *(void *)(a1 + 40), *(void *)(a1 + 48));
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v2();
}

void sub_10030FDD0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 136) objectForKey:*(void *)(a1 + 40)];
  if (!v2) {
    id v2 = objc_alloc_init((Class)NSMutableArray);
  }
  id v4 = v2;
  id v3 = [*(id *)(a1 + 48) copy];
  [v4 addObject:v3];

  [*(id *)(*(void *)(a1 + 32) + 136) setObject:v4 forKey:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) queuePerformNextApplicationUpdateWithIdentifier:*(void *)(a1 + 40)];
}

void sub_1003100D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003101A8;
  v8[3] = &unk_1007489E8;
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = v6;
  id v7 = v3;
  [v4 applicationWithIdentifier:v5 completion:v8];
}

void sub_1003101A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v8) + 16))();
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = *(NSObject **)(v9 + 16);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10031032C;
  v11[3] = &unk_10072E198;
  void v11[4] = v9;
  id v12 = *(id *)(a1 + 56);
  dispatch_async(v10, v11);
}

id sub_10031032C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 128) removeObjectForKey:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  return [v2 queuePerformNextApplicationUpdateWithIdentifier:v3];
}

void sub_10031036C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKApplyWebServiceApplyRequest);
  [v4 setApplicationIdentifier:*(void *)(a1 + 32)];
  id v5 = [v3 applicationBaseURL];

  [v4 setBaseURL:v5];
  id v6 = *(void **)(*(void *)(a1 + 40) + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10031048C;
  v10[3] = &unk_10073C918;
  id v11 = v4;
  int8x16_t v9 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v9.i64[0];
  int8x16_t v12 = vextq_s8(v9, v9, 8uLL);
  id v13 = *(id *)(a1 + 48);
  id v8 = v4;
  [v6 performHandlerOnSharedWebServiceQueue:v10];
}

void sub_10031048C(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100310544;
  v6[3] = &unk_100748A10;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v6[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v8 = *(id *)(a1 + 56);
  [a2 applyWithRequest:v4 completion:v6];
}

void sub_100310544(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v6 description];
      *(_DWORD *)long long buf = 138543362;
      id v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Could not update application with error %{public}@", buf, 0xCu);
    }
    int8x16_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10031072C;
    v15[3] = &unk_10072E598;
    id v17 = *(id *)(a1 + 48);
    id v16 = v6;
    [v9 applicationIsInDirtyStateWithIdentifier:v10 completion:v15];

    id v11 = v17;
  }
  else
  {
    id v11 = [v5 featureApplication];
    int8x16_t v12 = *(void **)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100310740;
    v13[3] = &unk_10072F788;
    id v14 = *(id *)(a1 + 48);
    [v12 insertOrReplaceApplication:v11 completion:v13];
  }
}

uint64_t sub_10031072C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100310740(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10031088C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)PKApplyWebServiceAugmentedProductRequest);
  [v2 setInstallmentConfiguration:*(void *)(a1 + 32)];
  [v2 setExperimentDetails:*(void *)(a1 + 40)];
  id v3 = *(void **)(*(void *)(a1 + 48) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100310964;
  v5[3] = &unk_1007422F8;
  id v6 = v2;
  id v7 = *(id *)(a1 + 56);
  id v4 = v2;
  [v3 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_100310964(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003109F4;
  v4[3] = &unk_100748A60;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [a2 augmentedProductWithRequest:v3 completion:v4];
}

void sub_1003109F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [v6 localizedDescription];
      int v10 = 138412290;
      id v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unable to fetch augmentedProduct: %@", (uint8_t *)&v10, 0xCu);
    }
    int8x16_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    int8x16_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v9();
}

void sub_100310BCC(uint64_t a1)
{
  [*(id *)(a1 + 32) _updatePushTopics];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) sharedWebServiceContext];
  uint64_t v3 = [v2 regions];

  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v6)
  {
    id v7 = v6;
    LOBYTE(v8) = 0;
    uint64_t v9 = *(void *)v35;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v34 + 1) + 8 * i);
        int8x16_t v12 = objc_msgSend(v5, "objectForKey:", v11, (void)v34);
        id v13 = v12;
        if (v8) {
          unsigned int v8 = 1;
        }
        else {
          unsigned int v8 = [v12 hasApplications];
        }
        id v14 = [v13 applyServiceURL];
        if (v14) {
          [v4 setObject:v14 forKey:v11];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v34 objects:v42 count:16];
    }
    while (v7);

    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = (unsigned char *)(v15 + 56);
    if ((v8 ^ (*(unsigned char *)(v15 + 56) == 0)))
    {
      int v17 = 0;
      if (!*(unsigned char *)(v15 + 56)) {
        goto LABEL_28;
      }
      goto LABEL_24;
    }
  }
  else
  {

    uint64_t v18 = *(void *)(a1 + 32);
    int v19 = *(unsigned __int8 *)(v18 + 56);
    id v16 = (unsigned char *)(v18 + 56);
    if (!v19)
    {
      if (PKEqualObjects()) {
        goto LABEL_50;
      }
      LOBYTE(v17) = 0;
      goto LABEL_33;
    }
    LOBYTE(v8) = 0;
  }
  *id v16 = v8;
  id v20 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*(void *)(a1 + 32) + 56)) {
      CFStringRef v21 = @"YES";
    }
    else {
      CFStringRef v21 = @"NO";
    }
    *(_DWORD *)long long buf = 138412290;
    long long v39 = (const char *)v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "hasApplications changed to %@", buf, 0xCu);
  }

  uint64_t v15 = *(void *)(a1 + 32);
  int v17 = 1;
  if (*(unsigned char *)(v15 + 56))
  {
LABEL_24:
    if (!objc_msgSend(*(id *)(v15 + 64), "count", (void)v34))
    {
      id v22 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "hasApplications YES but no applications on disk", buf, 2u);
      }

      int v17 = 1;
    }
  }
LABEL_28:
  if (PKEqualObjects())
  {
    if (!v17) {
      goto LABEL_50;
    }
    uint64_t v23 = *(void **)(*(void *)(a1 + 32) + 80);
    goto LABEL_44;
  }
LABEL_33:
  uint64_t v24 = *(void *)(a1 + 32);
  if (*(void *)(v24 + 80) && !v4)
  {
    uint64_t v25 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v26 = +[NSThread callStackSymbols];
      *(_DWORD *)long long buf = 136315394;
      long long v39 = "-[PDApplyManager _paymentWebServiceContextChanged]_block_invoke";
      __int16 v40 = 2112;
      long long v41 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s previously had account URLs now nil: %@", buf, 0x16u);
    }
    uint64_t v24 = *(void *)(a1 + 32);
  }
  objc_storeStrong((id *)(v24 + 80), v4);
  uint64_t v27 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = *(const char **)(*(void *)(a1 + 32) + 80);
    *(_DWORD *)long long buf = 138412290;
    long long v39 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Apply URLs changed to %@", buf, 0xCu);
  }

  uint64_t v23 = *(void **)(*(void *)(a1 + 32) + 80);
  if (v23) {
    char v29 = 1;
  }
  else {
    char v29 = v17;
  }
  if (v29)
  {
LABEL_44:
    if (objc_msgSend(v23, "count", (void)v34))
    {
      long long v30 = +[PKAppleAccountManager sharedInstance];
      id v31 = [v30 appleAccountInformation];
      unsigned int v32 = [v31 aidaAccountAvailable];

      if (v32)
      {
        [*(id *)(a1 + 32) updateApplicationsWithCompletion:&stru_100748A80];
      }
      else
      {
        id v33 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "ignoring paymentWebServiceContextChanged since aidaAccount is unavailable", buf, 2u);
        }
      }
    }
  }
LABEL_50:
}

void sub_100311064(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Applications updated following context and account URL change", v4, 2u);
  }
}

void sub_100311718(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100311898;
  v11[3] = &unk_10072E9D8;
  id v2 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v2;
  id v13 = *(id *)(a1 + 48);
  uint64_t v3 = objc_retainBlock(v11);
  id v4 = [*(id *)(a1 + 40) authenticationContext];
  id v5 = v4;
  if (v4)
  {
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003119F0;
    v7[3] = &unk_100748AD0;
    id v8 = v4;
    uint64_t v9 = v3;
    id v10 = *(id *)(a1 + 48);
    [v6 _authenticateApplyContext:v8 completion:v7];
  }
  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_100311898(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100311944;
  v5[3] = &unk_100737868;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v2 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_100311944(void *a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003119DC;
  v5[3] = &unk_100748AA8;
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[6];
  void v5[4] = a1[5];
  id v6 = v4;
  [a2 applyWithRequest:v3 completion:v5];
}

id sub_1003119DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_1003119F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [v11 count];
  if (v7 && v9)
  {
    [*(id *)(a1 + 32) setCertificates:v11];
    [*(id *)(a1 + 32) setSignature:v7];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v8);
    }
  }
}

void sub_100311C20(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a3) {
    CFRetain(a3);
  }
  id v9 = [v7 count];
  if (!a3 || v8 || !v9)
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFErrorRef error = 138412290;
      *(void *)&error[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Apply authentication BAA certificate generation error: %@", error, 0xCu);
    }

    if (a3) {
      CFRelease(a3);
    }
    goto LABEL_16;
  }
  CFDataRef v10 = [*(id *)(a1 + 32) signaturePayload];
  *(void *)CFErrorRef error = 0;
  Signature = SecKeyCreateSignature((SecKeyRef)a3, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, v10, (CFErrorRef *)error);
  if (*(void *)error)
  {
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Unable to generate signature for apply request.", v15, 2u);
    }
  }
  CFRelease(a3);
  if (!Signature)
  {
LABEL_16:
    Signature = +[NSError errorWithDomain:PKApplyErrorDomain code:1 userInfo:0];
    id v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_17;
  }
  id v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_17:
  v13();
}

void sub_100311EE8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 1;
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100311FA0;
  v5[3] = &unk_100737868;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v2 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_100311FA0(void *a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100312038;
  v5[3] = &unk_100748AA8;
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[6];
  void v5[4] = a1[5];
  id v6 = v4;
  [a2 submitDocumentsWithRequest:v3 completion:v5];
}

id sub_100312038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_100312110(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 1;
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003121C8;
  v5[3] = &unk_100737868;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v2 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_1003121C8(void *a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100312260;
  v5[3] = &unk_100748AA8;
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[6];
  void v5[4] = a1[5];
  id v6 = v4;
  [a2 submitVerificationWithRequest:v3 completion:v5];
}

id sub_100312260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_100312338(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1003124B8;
  v11[3] = &unk_10072E9D8;
  id v2 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v2;
  id v13 = *(id *)(a1 + 48);
  uint64_t v3 = objc_retainBlock(v11);
  uint64_t v4 = [*(id *)(a1 + 40) authenticationContext];
  id v5 = v4;
  if (v4)
  {
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100312610;
    v7[3] = &unk_100748AD0;
    id v8 = v4;
    id v9 = v3;
    id v10 = *(id *)(a1 + 48);
    [v6 _authenticateApplyContext:v8 completion:v7];
  }
  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_1003124B8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100312564;
  v5[3] = &unk_100737868;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  [v2 performHandlerOnSharedWebServiceQueue:v5];
}

void sub_100312564(void *a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003125FC;
  v5[3] = &unk_100748AA8;
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)a1[6];
  void v5[4] = a1[5];
  id v6 = v4;
  [a2 submitTermsWithRequest:v3 completion:v5];
}

id sub_1003125FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleApplyResponse:a2 error:a3 completion:*(void *)(a1 + 40)];
}

void sub_100312610(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = [v11 count];
  if (v7 && v9)
  {
    [*(id *)(a1 + 32) setCertificates:v11];
    [*(id *)(a1 + 32) setSignature:v7];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v8);
    }
  }
}

void sub_10031279C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1003128CC;
  v11[3] = &unk_10073D508;
  void v11[4] = *(void *)(a1 + 32);
  id v12 = *(id *)(a1 + 48);
  id v2 = objc_retainBlock(v11);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100312A34;
  v7[3] = &unk_100737868;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v2;
  id v6 = v2;
  [v3 performHandlerOnSharedWebServiceQueue:v7];
}

void sub_1003128CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10031298C;
  block[3] = &unk_100731830;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v3;
  uint64_t v10 = v6;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10031298C(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, void))(v2 + 16))(v2, a1[4]);
  }
  uint64_t v3 = a1[5];
  id v4 = *(NSObject **)(v3 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100312A24;
  block[3] = &unk_10072E1E8;
  void block[4] = v3;
  dispatch_async(v4, block);
}

id sub_100312A24(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
}

void sub_100312A34(uint64_t a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100312AF8;
  v6[3] = &unk_100748B20;
  int8x16_t v5 = *(int8x16_t *)(a1 + 32);
  id v4 = (id)v5.i64[0];
  int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
  id v8 = *(id *)(a1 + 48);
  [a2 deleteApplicationWithRequest:v4 completion:v6];
}

void sub_100312AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v6();
  }
  else
  {
    id v4 = *(void **)(a1 + 32);
    int8x16_t v5 = [*(id *)(a1 + 40) applicationIdentifier];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100312BE0;
    v7[3] = &unk_10072F788;
    id v8 = *(id *)(a1 + 48);
    [v4 deleteLocalApplicationWithIdentifier:v5 completion:v7];
  }
}

uint64_t sub_100312BE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100312CE4(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  uint64_t v3 = [*(id *)(a1 + 32) featureApplication];
  if (v3)
  {
    dispatch_group_enter(v2);
    id v4 = *(void **)(a1 + 40);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_100312EE4;
    v19[3] = &unk_10072E1E8;
    id v20 = v2;
    [v4 insertOrReplaceApplication:v3 completion:v19];
  }
  int8x16_t v5 = [*(id *)(a1 + 32) account];
  uint64_t v6 = v5;
  if (v5 && [v5 type] != (id)4)
  {
    dispatch_group_enter(v2);
    int8x16_t v7 = *(void **)(*(void *)(a1 + 40) + 48);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100312EEC;
    v17[3] = &unk_10072E1E8;
    uint64_t v18 = v2;
    [v7 updateAccount:v6 completion:v17];
  }
  id v8 = *(void **)(a1 + 56);
  if (v8)
  {
    id v9 = *(NSObject **)(*(void *)(a1 + 40) + 24);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100312EF4;
    v12[3] = &unk_100731F10;
    id v16 = v8;
    id v13 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 40);
    id v14 = v10;
    uint64_t v15 = v11;
    dispatch_group_notify(v2, v9, v12);
  }
}

void sub_100312EE4(uint64_t a1)
{
}

void sub_100312EEC(uint64_t a1)
{
}

void sub_100312EF4(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(NSObject **)(v2 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100312F88;
  block[3] = &unk_10072E1E8;
  void block[4] = v2;
  dispatch_async(v3, block);
}

id sub_100312F88(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 105) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_queue_performNextApplicationsUpdate");
}

void sub_100313060(uint64_t a1)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100313184;
  v11[3] = &unk_10073D508;
  void v11[4] = *(void *)(a1 + 32);
  id v12 = *(id *)(a1 + 48);
  uint64_t v2 = objc_retainBlock(v11);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10031325C;
  v7[3] = &unk_100737B10;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = v2;
  uint64_t v6 = v2;
  [v3 performHandlerOnSharedWebServiceQueue:v7];
}

void sub_100313184(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10031323C;
  v7[3] = &unk_10072E598;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_10031323C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10031325C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Silently sharing claim", buf, 2u);
  }

  id v5 = objc_alloc_init((Class)PKApplyWebServiceApplyRequest);
  id v6 = [*(id *)(a1 + 32) applicationBaseURL];
  [v5 setBaseURL:v6];

  objc_msgSend(v5, "setFeatureIdentifier:", objc_msgSend(*(id *)(a1 + 32), "feature"));
  int8x16_t v7 = [*(id *)(a1 + 32) applicationIdentifier];
  [v5 setApplicationIdentifier:v7];

  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  id v9 = [v3 webServiceSessionMarker];
  if (v9) {
    [v8 setObject:v9 forKey:kDIHttpHeaderAppleWebServiceSession];
  }
  id v10 = [v3 _appleAccountInformation];
  uint64_t v11 = [v10 authorizationHeader];

  if (v11) {
    [v8 setObject:v11 forKey:kDIHttpHeaderAuthorization];
  }
  id v12 = [v3 targetDevice];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_100313494;
  v17[3] = &unk_100748BC0;
  id v22 = *(id *)(a1 + 48);
  id v18 = v8;
  id v19 = v12;
  id v13 = *(id *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  id v20 = v13;
  uint64_t v21 = v14;
  id v15 = v12;
  id v16 = v8;
  [v3 applyWithRequest:v5 completion:v17];
}

void sub_100313494(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v4();
  }
  else
  {
    id v5 = [a2 nextStepInfo];
    __int16 v40 = [v5 conversationIdentifier];
    if (v40) {
      [*(id *)(a1 + 32) setObject:v40 forKey:PKHTTPHeaderAppleConversationIdentifier];
    }
    id v6 = *(void **)(a1 + 40);
    if (!v6) {
      id v6 = PKSecureElement;
    }
    long long v41 = [v6 secureElementIdentifiers];
    long long v39 = [v41 componentsJoinedByString:@","];
    if (v39) {
      [*(id *)(a1 + 32) setObject:v39 forKey:PKHTTPHeaderAppleSEID];
    }
    int8x16_t v7 = [v5 coreIDVServiceProviderName];
    id v8 = v7;
    if (v7)
    {
      id v9 = v7;
    }
    else
    {
      id v9 = [*(id *)(a1 + 48) coreIDVServiceProviderName];
    }
    id v10 = v9;

    uint64_t v11 = [v5 coreIDVTier];
    uint64_t v12 = PKCurrentRegion();
    id v13 = [*(id *)(a1 + 48) applicationBaseURL];
    uint64_t v14 = [v13 URLByAppendingPathComponent:@"v1"];

    id v15 = [v14 URLByAppendingPathComponent:@"applications"];

    id v16 = [*(id *)(a1 + 48) applicationIdentifier];
    int v17 = [v15 URLByAppendingPathComponent:v16];

    long long v38 = v17;
    id v18 = [v17 absoluteString];
    id v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138413314;
      id v51 = v20;
      __int16 v52 = 2112;
      long long v53 = v18;
      __int16 v54 = 2112;
      id v55 = v10;
      __int16 v56 = 2112;
      uint64_t v57 = v11;
      __int16 v58 = 2112;
      uint64_t v59 = v12;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Silent sharing: creating DIVerificationSession withHeaders:%@ serviceURL:%@ name:%@ tier:%@ region: %@", buf, 0x34u);
    }

    id v21 = objc_alloc((Class)DIVerificationSessionContext);
    id v22 = [*(id *)(a1 + 32) copy];
    uint64_t v23 = (void *)v11;
    uint64_t v24 = v22;
    long long v37 = v23;
    id v25 = objc_msgSend(v21, "initWithName:tier:serviceUrl:httpHeaders:", v10);

    [v25 setRegionCode:v12];
    id v26 = [objc_alloc((Class)DIVerificationSession) initWithContext:v25];
    BOOL v27 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    uint64_t v28 = (void *)v12;
    if (v26)
    {
      long long v36 = v10;
      if (v27)
      {
        *(_DWORD *)long long buf = 138412290;
        id v51 = v26;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Silent sharing: created DIVerificationSession: %@", buf, 0xCu);
      }
      long long v35 = v26;

      id v29 = objc_alloc_init((Class)NSMutableDictionary);
      long long v30 = PKRequestIDHeaderValue();
      if ([v30 length])
      {
        CFStringRef v48 = @"x-request-id";
        long long v49 = v30;
        id v31 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
        [v29 setObject:v31 forKey:kDISharingOptionHttpHeader];
      }
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Silent sharing: calling performVerificationWithAttributes no page because we are in background", buf, 2u);
      }

      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_1003139F4;
      v42[3] = &unk_100748B98;
      CFAbsoluteTime v47 = Current;
      id v33 = *(void **)(a1 + 64);
      v42[4] = *(void *)(a1 + 56);
      id v46 = v33;
      id v43 = v29;
      id v26 = v35;
      id v44 = v35;
      id v45 = *(id *)(a1 + 48);
      id v34 = v29;
      [v44 performVerificationWithAttributes:0 completion:v42];

      id v10 = v36;
    }
    else
    {
      if (v27)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Silent sharing error: No coreIDV session", buf, 2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
}

void sub_1003139F4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  double v9 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 72);
  CFStringRef v37 = @"duration";
  id v10 = +[NSNumber numberWithDouble:v9];
  long long v38 = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
  PKAnalyticsSendEvent();

  uint64_t v12 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = [v7 description];
    *(_DWORD *)long long buf = 134219010;
    double v28 = v9;
    __int16 v29 = 2112;
    id v30 = v8;
    __int16 v31 = 2112;
    unsigned int v32 = v13;
    __int16 v33 = 2048;
    uint64_t v34 = a3;
    __int16 v35 = 2048;
    id v36 = [v7 page];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Silent sharing: callback from performVerificationWithAttributes timetaken(seconds): %f error: %@ attributes: %@ totalPageCount: %lu page: %lu", buf, 0x34u);
  }
  uint64_t v14 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100313C68;
  block[3] = &unk_100748B70;
  id v20 = v8;
  id v26 = *(id *)(a1 + 64);
  id v21 = v7;
  id v22 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 32);
  id v23 = v15;
  uint64_t v24 = v16;
  id v25 = *(id *)(a1 + 56);
  id v17 = v7;
  id v18 = v8;
  dispatch_async(v14, block);
}

void sub_100313C68(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Silent sharing error: performVerification failed", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else if (*(void *)(a1 + 40))
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    v3();
  }
  else
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Silent sharing: calling shareVerificationResultWithOptions withOptions: %@", buf, 0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    id v7 = *(void **)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100313E8C;
    v9[3] = &unk_100748B48;
    void v9[4] = *(void *)(a1 + 64);
    CFAbsoluteTime v13 = Current;
    id v12 = *(id *)(a1 + 80);
    id v10 = *(id *)(a1 + 72);
    id v11 = *(id *)(a1 + 56);
    [v7 shareVerificationResultWithOptions:v8 completion:v9];
  }
}

void sub_100313E8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100313F9C;
  block[3] = &unk_10073FD08;
  uint64_t v19 = *(void *)(a1 + 64);
  id v13 = v5;
  id v14 = v6;
  id v18 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, block);
}

void sub_100313F9C(uint64_t a1)
{
  double v2 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 80);
  CFStringRef v22 = @"duration";
  id v3 = +[NSNumber numberWithDouble:v2];
  id v23 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
  PKAnalyticsSendEvent();

  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 134218498;
    double v17 = v2;
    __int16 v18 = 2112;
    uint64_t v19 = v6;
    __int16 v20 = 2112;
    uint64_t v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Silent sharing: callback from shareVerificationResultWithOptions timeTaken(seconds): %f withResultingIdentifier: %@ error: %@", buf, 0x20u);
  }

  id v8 = [*(id *)(a1 + 32) UUIDString];
  if ([v8 length] && !*(void *)(a1 + 40))
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Silent sharing: successfully shared claim, reach out to server to notify", buf, 2u);
    }

    id v9 = objc_alloc_init((Class)PKApplyWebServiceApplyRequest);
    [v9 setCoreIDVNextStepToken:v8];
    id v10 = [*(id *)(a1 + 48) applicationBaseURL];
    [v9 setBaseURL:v10];

    objc_msgSend(v9, "setFeatureIdentifier:", objc_msgSend(*(id *)(a1 + 48), "feature"));
    id v11 = [*(id *)(a1 + 48) applicationIdentifier];
    [v9 setApplicationIdentifier:v11];

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100314280;
    v13[3] = &unk_100748AA8;
    id v12 = *(void **)(a1 + 56);
    id v14 = *(id *)(a1 + 64);
    id v15 = *(id *)(a1 + 72);
    [v12 submitApplyRequest:v9 completion:v13];
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Silent sharing: error: No valid nextStepToken found", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_100314280(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v9 = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Silent sharing: request to server failed with error: %@", (uint8_t *)&v9, 0xCu);
    }
  }
  else
  {
    if (v8)
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Silent sharing: request to server succeeded, conclude idv session", (uint8_t *)&v9, 2u);
    }

    [*(id *)(a1 + 32) concludeVerification];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003144F8(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) accountIdentifier];
  double v2 = [*(id *)(a1 + 32) applyServiceURL];
  if (v2) {
    [*(id *)(*(void *)(a1 + 40) + 88) setObject:v2 forKey:v8];
  }
  id v3 = [*(id *)(*(void *)(a1 + 40) + 32) featureApplicationsWithAccountIdentifier:v8];
  id v4 = [v3 allObjects];
  id v5 = [v4 mutableCopy];

  [*(id *)(*(void *)(a1 + 40) + 72) setObject:v5 forKeyedSubscript:v8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160));
  id v6 = [*(id *)(a1 + 32) additionalPushTopics];
  uint64_t v7 = [v6 applications];
  [*(id *)(*(void *)(a1 + 40) + 176) setObject:v7 forKeyedSubscript:v8];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160));
  [*(id *)(a1 + 40) _updatePushTopics];
}

void sub_1003146BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountIdentifier];
  [*(id *)(*(void *)(a1 + 40) + 88) removeObjectForKey:v2];
  [*(id *)(*(void *)(a1 + 40) + 72) removeObjectForKey:v2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160));
  [*(id *)(*(void *)(a1 + 40) + 176) removeObjectForKey:v2];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160));
  [*(id *)(a1 + 40) _updatePushTopics];
}

void sub_1003147F0(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) accountIdentifier];
  id v2 = [*(id *)(a1 + 32) applyServiceURL];
  [*(id *)(*(void *)(a1 + 40) + 88) setObject:v2 forKeyedSubscript:v8];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 32) featureApplicationsWithAccountIdentifier:v8];
  id v4 = [v3 allObjects];
  id v5 = [v4 mutableCopy];

  [*(id *)(*(void *)(a1 + 40) + 72) setObject:v5 forKeyedSubscript:v8];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160));
  id v6 = [*(id *)(a1 + 32) additionalPushTopics];
  uint64_t v7 = [v6 applications];
  [*(id *)(*(void *)(a1 + 40) + 176) setObject:v7 forKeyedSubscript:v8];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 160));
  [*(id *)(a1 + 40) _updatePushTopics];
}

void sub_100314D48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100314D74(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  id v7 = v5;
  id v8 = v7;
  if (v6 == v7)
  {

    goto LABEL_7;
  }
  if (!v7 || !v6)
  {

    goto LABEL_9;
  }
  unsigned int v9 = [v6 isEqualToString:v7];

  if (v9) {
LABEL_7:
  }
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v10];
LABEL_9:
}

void sub_100314E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2114;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Applications for account %@ updated following push notification with error: %{public}@ ", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100314F00(id a1, NSArray *a2, NSError *a3)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138543362;
    uint64_t v6 = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Applications updated following push notification with error: %{public}@ ", (uint8_t *)&v5, 0xCu);
  }
}

int64_t sub_1003163A8(id a1, PKPayLaterPayment *a2, PKPayLaterPayment *a3)
{
  id v4 = a3;
  int v5 = [(PKPayLaterPayment *)a2 postedDate];
  uint64_t v6 = [(PKPayLaterPayment *)v4 postedDate];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1003176B0(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100808E20;
  qword_100808E20 = (uint64_t)v1;

  id v3 = (void *)qword_100808E20;
  id v4 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
  [v3 setCalendar:v4];

  int v5 = (void *)qword_100808E20;
  [v5 setLocalizedDateFormatFromTemplate:@"MMM d"];
}

void sub_100319498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003194BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v9 = a3;
  id v10 = objc_alloc_init((Class)PKPaymentCommutePlanReminder);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) withProperties:v9 values:a4];
  *a6 = 1;
}

void sub_100319800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100319820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v8 = [(SQLiteEntity *)[CommutePlanReminder alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

id sub_100319D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100319E9C(id a1, PKPaymentCommutePlanReminder *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPaymentCommutePlanReminder setTimeInterval:](v4, "setTimeInterval:");
}

id sub_10031A5EC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasNoPendingChanges])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] sync coordinator has no pending changes after delay", buf, 2u);
    }

    [*(id *)(a1 + 32) resetPendingChangesDelay];
    return [*(id *)(a1 + 32) eraseDroppedProcessPendingChangesAttempt];
  }
  else if ([*(id *)(*(void *)(a1 + 32) + 48) isBusy])
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] manager is busy, can't process changes now", buf, 2u);
    }

    [*(id *)(a1 + 32) increasePendingChangesDelay];
    [*(id *)(a1 + 32) scheduleProcessPendingChangesAttempt];
    return [*(id *)(a1 + 32) markDroppedProcessPendingChangesAttempt];
  }
  else
  {
    [*(id *)(a1 + 32) eraseDroppedProcessPendingChangesAttempt];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 48);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10031A750;
    v7[3] = &unk_1007300F8;
    void v7[4] = v5;
    return [v6 processPendingChanges:v7];
  }
}

void sub_10031A750(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = +[NSNumber numberWithBool:a2];
    int v8 = 138543618;
    uint64_t v9 = v7;
    __int16 v10 = 2114;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] did process pending changes processing:%{public}@ originated in sync coordinator %{public}@", (uint8_t *)&v8, 0x16u);
  }
  if (a2)
  {
    [*(id *)(a1 + 32) resetPendingChangesDelay];
    [*(id *)(a1 + 32) rescheduleDroppedProcessPendingChangesIfNecessary];
  }
  else if (+[PDCardCloudManager shouldProcessPendingChangesWhenConnectedToPowerSupplyDueToError:v5])
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] will re-try processing when connected to battery", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) resetPendingChangesDelay];
    [*(id *)(a1 + 32) scheduleProcessPendingChangesAttemptWhenConnetedToPowerSupply];
  }
  else if (+[PDCardCloudManager shouldProcessPendingChangesSignificantlyLaterDueToError:v5])
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] will re-try processing significantly later", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) resetPendingChangesDelay];
  }
  else
  {
    [*(id *)(a1 + 32) increasePendingChangesDelay];
    [*(id *)(a1 + 32) scheduleProcessPendingChangesAttempt];
  }
}

uint64_t sub_10031AB00(uint64_t a1)
{
  [*(id *)(a1 + 32) cancelProcessPendingChangesAttempt];
  id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

NSString *__cdecl sub_10031B050(id a1, PKChangeHistoryEvent *a2)
{
  id v2 = a2;
  if ([(PKChangeHistoryEvent *)v2 representsPassAddition])
  {
    id v3 = [(PKChangeHistoryEvent *)v2 recordUniqueID];
  }
  else
  {
    id v3 = 0;
  }

  return (NSString *)v3;
}

uint64_t sub_10031B0AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 supportsSyncing])
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = [v3 uniqueID];
    uint64_t v6 = [v4 containsObject:v5] ^ 1;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_10031B3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", a2, a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [*(id *)(a1 + 40) localPassesWithUniqueIDs:v5];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

NSString *__cdecl sub_10031B498(id a1, PKPass *a2)
{
  return (NSString *)[(PKPass *)a2 uniqueID];
}

uint64_t sub_10031B57C(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) originator];
    int v6 = 138543362;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] processing save request from: %{public}@", (uint8_t *)&v6, 0xCu);
  }
  [*(id *)(a1 + 40) executeLocalPortionOfSaveRequest:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) executeRemotePortionOfSaveRequest:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) processPendingChangesAfterExecutionSaveRequest:*(void *)(a1 + 32)];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) originator];
    int v6 = 138543362;
    id v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] finished processing save request from: %{public}@", (uint8_t *)&v6, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

uint64_t sub_10031C190(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

id sub_10031C1B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 recordUniqueID];
  unsigned int v5 = [v3 representsPassAddition];

  if (v5)
  {
    if ([*(id *)(a1 + 32) containsObject:v4]) {
      int v6 = v4;
    }
    else {
      int v6 = 0;
    }
  }
  else
  {
    int v6 = 0;
  }
  id v7 = v6;

  return v7;
}

id sub_10031C230(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 recordUniqueID];
  if (([v3 representsPassUpdate] & 1) != 0
    || [v3 representsPassRemoval])
  {
    if ([*(id *)(a1 + 32) containsObject:v4]) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = 0;
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  id v6 = v5;

  return v6;
}

void sub_10031C6FC(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = +[NSNumber numberWithBool:v3];
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] did process pending changes as part of save request with success: %{public}@", (uint8_t *)&v6, 0xCu);
  }
}

void sub_10031C7C0(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = +[NSNumber numberWithBool:v3];
    int v6 = 138543362;
    id v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[PDCloudSyncCoordinator] did process pending changes as part of save request, after conflict resoltion, with success: %{public}@", (uint8_t *)&v6, 0xCu);
  }
}

id sub_10031CA00(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) objectWithUniqueID:a2];
}

void sub_10031D138(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    unsigned int v5 = [(SQLiteEntity *)[PaymentMessage alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
    *a4 = ![(SQLiteEntity *)v5 deleteFromDatabase];
  }
}

void sub_10031D338(uint64_t a1, uint64_t a2)
{
  id v2 = [(SQLiteEntity *)[PaymentMessage alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [(PaymentMessage *)v2 archive];
}

void sub_10031D4B0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = [(SQLiteEntity *)[PaymentMessage alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_10031DB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10031DCC0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKPaymentMessage);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10031E028(id a1, PKPaymentMessage *a2, id a3)
{
}

void sub_10031E030(id a1, PKPaymentMessage *a2, id a3)
{
}

void sub_10031E038(id a1, PKPaymentMessage *a2, id a3)
{
}

void sub_10031E040(id a1, PKPaymentMessage *a2, id a3)
{
  BOOL v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentMessage *)v3 setMessageDate:v4];
}

void sub_10031E0A0(id a1, PKPaymentMessage *a2, id a3)
{
  BOOL v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentMessage *)v3 setExpirationDate:v4];
}

void sub_10031E100(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setMessageType:](v4, "setMessageType:", [a3 BOOLValue]);
}

void sub_10031E158(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setAllowDeepLink:](v4, "setAllowDeepLink:", [a3 BOOLValue]);
}

void sub_10031E1B0(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setArchived:](v4, "setArchived:", [a3 BOOLValue]);
}

void sub_10031E208(id a1, PKPaymentMessage *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentMessage setHasAssociatedPaymentApplication:](v4, "setHasAssociatedPaymentApplication:", [a3 BOOLValue]);
}

void sub_10031E718(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10031E8C0(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalancePromotionConfiguration setPromotionType:](v4, "setPromotionType:", [a3 integerValue]);
}

void sub_10031E918(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_10031E920(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_10031E928(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalancePromotionConfiguration setGenerationIdentifier:](v4, "setGenerationIdentifier:", [a3 integerValue]);
}

void sub_10031E980(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalancePromotionConfiguration setStamp:](v4, "setStamp:", [a3 integerValue]);
}

void sub_10031E9D8(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  BOOL v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAppleBalancePromotionConfiguration *)v3 setBonusMinAmount:v4];
}

void sub_10031EA3C(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  BOOL v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAppleBalancePromotionConfiguration *)v3 setBonusMaxAmount:v4];
}

void sub_10031EAA0(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_10031EAA8(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
}

void sub_10031EAB0(id a1, PKAppleBalancePromotionConfiguration *a2, id a3)
{
  BOOL v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAppleBalancePromotionConfiguration *)v3 setLastUpdatedDate:v4];
}

id sub_10031F34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10031F550(uint64_t a1, uint64_t a2)
{
  id v4 = [AccountPhysicalCardShippingUpdate alloc];
  id v5 = [*(id *)(a1 + 32) database];
  int v8 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  id v6 = *(void **)(a1 + 40);
  id v7 = [(AccountPhysicalCardShippingUpdate *)v8 physicalCardShippingUpdate];
  [v6 addObject:v7];
}

void sub_10031F764(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_10031F76C(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPhysicalCardShippingUpdate setShippingStatus:](v4, "setShippingStatus:", [a3 integerValue]);
}

void sub_10031F7C4(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_10031F7CC(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_10031F7D4(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
}

void sub_10031F7DC(id a1, PKAccountPhysicalCardShippingUpdate *a2, id a3)
{
  BOOL v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountPhysicalCardShippingUpdate *)v3 setTimestamp:v4];
}

void sub_10031FF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10031FF98(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  BOOL v3 = (char *)[*(id *)(a1 + 32) channelType];
  id v4 = v3;
  if (v3 == (char *)3)
  {
    id v5 = [[SharingLocalOnDeviceChannelEndpoint alloc] initWithLocalEndpoint:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  }
  else if (v3 == (char *)2)
  {
    id v5 = [[SharingIDSChannelEndpoint alloc] initWithIDSEndpoint:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  }
  else
  {
    if (v3 != (char *)1) {
      goto LABEL_9;
    }
    id v5 = [[SharingRelayChannelEndpoint alloc] initWithRelayServerEndpoint:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  }
  id v6 = v5;
  if (!v5)
  {
    uint64_t v19 = 0;
    goto LABEL_18;
  }
  [v2 setEntityPIDOrNull:v5 forKey:@"a"];

LABEL_9:
  id v7 = [*(id *)(a1 + 32) transportIdentifier];
  [v2 setObjectOrNull:v7 forKey:@"identifier"];

  CFStringRef v8 = @"unknown";
  if ((unint64_t)(v4 - 1) <= 2) {
    CFStringRef v8 = *(&off_100749700 + (void)(v4 - 1));
  }
  [v2 setObjectOrNull:v8 forKey:@"b"];
  id v9 = [*(id *)(a1 + 32) provisioningType];
  CFStringRef v10 = @"stateful";
  if (v9 != (id)2) {
    CFStringRef v10 = @"unknown";
  }
  if (v9 == (id)1) {
    CFStringRef v11 = @"stateless";
  }
  else {
    CFStringRef v11 = v10;
  }
  [v2 setObjectOrNull:v11 forKey:@"c"];
  id v12 = [*(id *)(a1 + 32) createdAt];
  id v13 = (void *)_SQLValueForDate();
  [v2 setObjectOrNull:v13 forKey:@"d"];

  id v14 = [*(id *)(a1 + 32) updatedAt];
  id v15 = (void *)_SQLValueForDate();
  [v2 setObjectOrNull:v15 forKey:@"e"];

  id v16 = [*(id *)(a1 + 48) initWithPropertyValues:v2 inDatabase:*(void *)(a1 + 40)];
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
  __int16 v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  uint64_t v19 = 1;
LABEL_18:

  return v19;
}

void sub_1003205A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003205BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v7 = [*(id *)(a1 + 40) _endpointForProperties:a2 values:a3];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *a5 = 1;
}

void sub_100320708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) _endpointForProperties:a2 values:a3];
  [v3 safelyAddObject:v4];
}

void sub_100320894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) _endpointForProperties:a2 values:a3];
  [v3 safelyAddObject:v4];
}

void sub_100320A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) _endpointForProperties:a2 values:a3];
  [v3 safelyAddObject:v4];
}

uint64_t sub_100320B64(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1 == @"relay_server") {
    goto LABEL_4;
  }
  if (!v1)
  {
LABEL_11:
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  unsigned __int8 v3 = [@"relay_server" isEqualToString:v1];

  if ((v3 & 1) == 0)
  {
    id v5 = v2;
    if (v5 == @"ids"
      || (id v6 = v5,
          unsigned __int8 v7 = [@"ids" isEqualToString:v5],
          v6,
          (v7 & 1) != 0))
    {
      uint64_t v4 = 2;
      goto LABEL_12;
    }
    uint64_t v8 = v6;
    if (v8 == @"local"
      || (id v9 = v8, v10 = [@"local" isEqualToString:v8], v9, v10))
    {
      uint64_t v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v4 = 1;
LABEL_12:

  return v4;
}

void sub_100320DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100320DF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = [(SQLiteEntity *)[SharingChannelEndpoint alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(SharingChannelEndpoint *)v3 deleteFromDatabase];
}

void sub_1003213D8(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
}

void sub_1003213E0(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  uint64_t v4 = a2;
  [(PDSharingRelayServerEndpoint *)v4 setChannelType:sub_100320B64(a3)];
}

void sub_100321438(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  CFStringRef v11 = a2;
  uint64_t v4 = (__CFString *)a3;
  id v5 = v4;
  if (v4 == @"stateless") {
    goto LABEL_4;
  }
  if (!v4) {
    goto LABEL_8;
  }
  unsigned __int8 v6 = [@"stateless" isEqualToString:v4];

  if (v6)
  {
LABEL_4:
    uint64_t v7 = 1;
    goto LABEL_9;
  }
  uint64_t v8 = v5;
  if (v8 == @"stateful"
    || (id v9 = v8, v10 = [@"stateful" isEqualToString:v8], v9, v10))
  {
    uint64_t v7 = 2;
  }
  else
  {
LABEL_8:
    uint64_t v7 = 0;
  }
LABEL_9:

  [(PDSharingRelayServerEndpoint *)v11 setProvisioningType:v7];
}

void sub_100321520(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  unsigned __int8 v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDSharingRelayServerEndpoint *)v3 setCreatedAt:v4];
}

void sub_100321580(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  unsigned __int8 v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDSharingRelayServerEndpoint *)v3 setUpdatedAt:v4];
}

void sub_1003215E0(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  [(PDSharingRelayServerEndpoint *)v4 setMailboxStatus:PDSharingRelayServerEndpointStatusFromString(a3)];
}

void sub_100321638(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v4 options:0];

    [(PDSharingRelayServerEndpoint *)v5 setPayloadEncryptionPassword:v6];
  }
}

void sub_1003216C8(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
}

void sub_1003216D0(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setHasOutstandingMessages:](v4, "setHasOutstandingMessages:", [a3 BOOLValue]);
}

void sub_100321728(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  unsigned __int8 v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PDSharingRelayServerEndpoint *)v3 setRelayServerHost:v4];
}

void sub_100321788(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setTimeToLive:](v4, "setTimeToLive:", [a3 unsignedIntegerValue]);
}

void sub_1003217E0(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setDoesRemoteMailboxSupportPushNotifications:](v4, "setDoesRemoteMailboxSupportPushNotifications:", [a3 BOOLValue]);
}

void sub_100321838(id a1, PDSharingRelayServerEndpoint *a2, id a3)
{
  id v4 = a2;
  -[PDSharingRelayServerEndpoint setPollingBackoffCounter:](v4, "setPollingBackoffCounter:", [a3 unsignedIntegerValue]);
}

void sub_1003219A4(id a1, PDSharingIDSEndpoint *a2, id a3)
{
}

void sub_1003219AC(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  id v4 = a2;
  [(PDSharingIDSEndpoint *)v4 setChannelType:sub_100320B64(a3)];
}

void sub_100321A04(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  CFStringRef v11 = a2;
  id v4 = (__CFString *)a3;
  id v5 = v4;
  if (v4 == @"stateless") {
    goto LABEL_4;
  }
  if (!v4) {
    goto LABEL_8;
  }
  unsigned __int8 v6 = [@"stateless" isEqualToString:v4];

  if (v6)
  {
LABEL_4:
    uint64_t v7 = 1;
    goto LABEL_9;
  }
  uint64_t v8 = v5;
  if (v8 == @"stateful"
    || (id v9 = v8, v10 = [@"stateful" isEqualToString:v8], v9, v10))
  {
    uint64_t v7 = 2;
  }
  else
  {
LABEL_8:
    uint64_t v7 = 0;
  }
LABEL_9:

  [(PDSharingIDSEndpoint *)v11 setProvisioningType:v7];
}

void sub_100321AEC(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  unsigned __int8 v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDSharingIDSEndpoint *)v3 setCreatedAt:v4];
}

void sub_100321B4C(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  unsigned __int8 v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDSharingIDSEndpoint *)v3 setUpdatedAt:v4];
}

void sub_100321BAC(id a1, PDSharingIDSEndpoint *a2, id a3)
{
}

void sub_100321BB4(id a1, PDSharingIDSEndpoint *a2, id a3)
{
  id v6 = a3;
  id v4 = a2;
  if ([v6 isEqualToString:@"true"])
  {
    uint64_t v5 = 1;
  }
  else if ([v6 isEqualToString:@"false"])
  {
    uint64_t v5 = 2;
  }
  else
  {
    uint64_t v5 = 0;
  }
  [(PDSharingIDSEndpoint *)v4 setIsDeviceOnSameIDSAccount:v5];
}

void sub_100321C44(id a1, PDSharingIDSEndpoint *a2, id a3)
{
}

void sub_100321D50(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
}

void sub_100321D58(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  id v4 = a2;
  [(PDSharingLocalOnDeviceEndpoint *)v4 setChannelType:sub_100320B64(a3)];
}

void sub_100321DB0(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  CFStringRef v11 = a2;
  id v4 = (__CFString *)a3;
  uint64_t v5 = v4;
  if (v4 == @"stateless") {
    goto LABEL_4;
  }
  if (!v4) {
    goto LABEL_8;
  }
  unsigned __int8 v6 = [@"stateless" isEqualToString:v4];

  if (v6)
  {
LABEL_4:
    uint64_t v7 = 1;
    goto LABEL_9;
  }
  uint64_t v8 = v5;
  if (v8 == @"stateful"
    || (id v9 = v8, v10 = [@"stateful" isEqualToString:v8], v9, v10))
  {
    uint64_t v7 = 2;
  }
  else
  {
LABEL_8:
    uint64_t v7 = 0;
  }
LABEL_9:

  [(PDSharingLocalOnDeviceEndpoint *)v11 setProvisioningType:v7];
}

void sub_100321E98(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  unsigned __int8 v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDSharingLocalOnDeviceEndpoint *)v3 setCreatedAt:v4];
}

void sub_100321EF8(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
  unsigned __int8 v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDSharingLocalOnDeviceEndpoint *)v3 setUpdatedAt:v4];
}

void sub_100321F58(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
}

void sub_100321F60(id a1, PDSharingLocalOnDeviceEndpoint *a2, id a3)
{
}

CFStringRef PDCloudStoreRecordsRequestTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7) {
    return @"token";
  }
  else {
    return *(&off_100749718 + a1 - 1);
  }
}

void sub_100322F2C(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v3 = *(void **)(a1 + 32);
  id v4 = [a3 allObjects];
  [v3 addObjectsFromArray:v4];
}

uint64_t sub_100323430(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v4 isPerformingInitialRegistration])
  {
    uint64_t v5 = [v3 keyCreationMetadata];
    unsigned __int8 v6 = [v5 decryptionISO18013];

    if (!v6)
    {
      uint64_t v8 = 4;
      goto LABEL_6;
    }
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = [v4 pass];
    unsigned __int8 v6 = v7;
  }
  uint64_t v8 = (uint64_t)[v7 cardType];
LABEL_6:

  return v8;
}

void sub_1003234CC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    id v6 = objc_alloc_init((Class)PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7 == 3)
    {
      id v14 = [v5 attestation];
      id v15 = objc_msgSend(v14, "pk_arrayByApplyingBlock:", &stru_1007497B8);
      [v6 setAttestation:v15];

      unsigned int v10 = [v5 publicKeyCOSEKey];
      [v6 setAuthorization:v10];
    }
    else
    {
      if (v7 != 4)
      {
        __int16 v20 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          uint64_t v24 = v7;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Unexpected payment type: %lu", buf, 0xCu);
        }

        uint64_t v21 = *(void *)(a1 + 32);
        id v18 = +[NSError errorWithDomain:PKPaymentErrorDomain code:0 userInfo:0];
        uint64_t v19 = *(void (**)(void))(v21 + 16);
        goto LABEL_11;
      }
      uint64_t v8 = [v5 publicKeyIdentifier];
      [v6 setPublicKey:v8];

      id v9 = [v5 attestation];
      unsigned int v10 = objc_msgSend(v9, "pk_arrayByApplyingBlock:", &stru_100749778);

      [v6 setAttestation:v10];
      CFStringRef v11 = [v5 kskAttestation];
      id v12 = objc_msgSend(v11, "pk_arrayByApplyingBlock:", &stru_100749798);

      [v6 setSecondaryAttestation:v12];
      id v13 = [v5 keyAuthorization];
      [v6 setAuthorization:v13];
    }
    id v16 = objc_alloc((Class)PKAuxiliaryCapabilityRequirementKeyMaterial);
    id v22 = v6;
    uint64_t v17 = +[NSArray arrayWithObjects:&v22 count:1];
    id v18 = [v16 initWithKeyMaterialContents:v17];

    uint64_t v19 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_11:
    v19();

    goto LABEL_12;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_12:
}

NSData *__cdecl sub_100323794(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v2 options:0];

  return (NSData *)v3;
}

NSData *__cdecl sub_1003237F0(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v2 options:0];

  return (NSData *)v3;
}

NSData *__cdecl sub_10032384C(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)NSData) initWithBase64EncodedString:v2 options:0];

  return (NSData *)v3;
}

uint64_t sub_1003239A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100323E88(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 remoteObjectProxy];
  [v4 didUpdateFamilyMembers:v3];
}

void sub_1003240F8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = sub_1001A57C8(*(os_unfair_lock_s **)(*(void *)(a1 + 32) + 32));
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService paymentDeviceFieldPropertiesWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10032430C(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    id v2 = PDDefaultPaymentPassUniqueIdentifier();
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService defaultPaymentPassUniqueIdentifier:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100324540(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) paymentConfiguration])
  {
    [*(id *)(a1[4] + 136) updateDefaultPaymentPassIdentifier:a1[5]];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService setDefaultPaymentPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100324754(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    id v2 = PDDefaultPaymentPassUniqueIdentifier();
    id v3 = PDDefaultPaymentPassCachedIngestionDate();
    if (!v3)
    {
      int v4 = [*(id *)(*(void *)(a1 + 32) + 96) passWithUniqueIdentifier:v2];
      id v3 = [v4 ingestedDate];
      PDSetDefaultPaymentPassCachedIngestionDate();
    }
    id v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%li", [v3 hash]);
    id v6 = [v2 stringByAppendingString:v5];
  }
  else
  {
    uint64_t v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v9 = "-[PDPaymentService defaultPaymentPassIngestionSpecificIdentifier:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    id v6 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

BOOL sub_100324A44(id a1, int64_t a2)
{
  return +[PKSecureElement supportsExpressForAutomaticSelectionTechnologyType:a2];
}

void sub_100324A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    id v4 = [*(id *)(a1 + 32) passUniqueIdentifier];
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, a2, v4);
  }
}

uint64_t sub_100324BD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100325314(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96);
    id v3 = a2;
    id v4 = [v3 passUniqueIdentifier];
    id v5 = [v2 paymentApplicationsForPassUniqueIdentifier:v4];

    id v6 = [objc_alloc((Class)PKExpressPassConfiguration) initWithPassInformation:v3 forPaymentApplications:v5];
  }
  else
  {
    id v6 = 0;
  }
  return v6;
}

void sub_100325644(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  objc_msgSend(a3, "pk_setByApplyingBlock:", &stru_100749870);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, a2, v5);
}

PKExpressPassInformation *__cdecl sub_1003256B8(id a1, PKExpressPassConfiguration *a2)
{
  return (PKExpressPassInformation *)[(PKExpressPassConfiguration *)a2 passInformation];
}

uint64_t sub_100325B00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100325B18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) sharedWebServiceContext];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100325D48(void *a1)
{
  [*(id *)(a1[4] + 72) updateSharedWebServiceContext:a1[5]];
  uint64_t result = a1[6];
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_100325E7C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) notificationServiceOfType:0 forPassWithUniqueIdentifier:a1[5]];
    id v3 = [v2 appLaunchToken];
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[PDPaymentService transactionsAppLaunchTokenForPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v3 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100326070(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) notificationServiceOfType:1 forPassWithUniqueIdentifier:a1[5]];
    id v3 = [v2 appLaunchToken];
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[PDPaymentService messagesAppLaunchTokenForPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v3 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003263B4(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  int v5 = a3;
  id v6 = a4;
  uint64_t v7 = PDHeavyQueue();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100326480;
  v10[3] = &unk_10072E598;
  CFStringRef v11 = v5;
  id v12 = v6;
  uint64_t v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

uint64_t sub_100326480(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100326498(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 312);
  uint64_t v7 = a4;
  id v8 = a3;
  sub_1003A114C(v6, v5);
  v7[2](v7, v8, 0);
}

void sub_100326524(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_100326784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10032679C(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  int v5 = a3;
  id v6 = a4;
  uint64_t v7 = PDHeavyQueue();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100326868;
  v10[3] = &unk_10072E598;
  CFStringRef v11 = v5;
  id v12 = v6;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

uint64_t sub_100326868(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100326880(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 312);
  uint64_t v7 = a4;
  id v8 = a3;
  sub_1003A0CB4(v6, v5);
  v7[2](v7, v8, 0);
}

void sub_10032690C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_100326B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100326B84(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  int v5 = a3;
  id v6 = a4;
  uint64_t v7 = PDHeavyQueue();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100326C50;
  v10[3] = &unk_10072E598;
  CFStringRef v11 = v5;
  id v12 = v6;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

uint64_t sub_100326C50(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_100326C68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 312);
  uint64_t v7 = a4;
  id v8 = a3;
  sub_1003A0F00(v6, v5);
  v7[2](v7, v8, 0);
}

void sub_100326CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_100326FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100326FCC(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  int v5 = a3;
  id v6 = a4;
  uint64_t v7 = PDHeavyQueue();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100327098;
  v10[3] = &unk_10072E598;
  CFStringRef v11 = v5;
  id v12 = v6;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

uint64_t sub_100327098(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1003270B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v13 = a3;
  uint64_t v7 = PDOSTransactionCreate("PDPaymentService");
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = sub_1003D5CD0(*(id **)(*(void *)(a1 + 32) + 200), *(void **)(a1 + 40), *(void *)(a1 + 64));
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  v6[2](v6, v13, 0);
}

void sub_100327174(void *a1)
{
  uint64_t v2 = a1[4];
  if ([*(id *)(*(void *)(a1[5] + 8) + 40) count]) {
    uint64_t v3 = *(void *)(*(void *)(a1[5] + 8) + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
  uint64_t v4 = *(void *)(a1[5] + 8);
  int v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  uint64_t v6 = *(void *)(a1[6] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_1003273E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003273FC(id a1, PKAsyncOperationState *a2, NSNull *a3, id a4)
{
  int v5 = a3;
  id v6 = a4;
  uint64_t v7 = PDHeavyQueue();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003274C8;
  v10[3] = &unk_10072E598;
  uint64_t v11 = v5;
  id v12 = v6;
  uint64_t v8 = v5;
  id v9 = v6;
  dispatch_async(v7, v10);
}

uint64_t sub_1003274C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1003274E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  uint64_t v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Processing FinanceKit messages", v9, 2u);
  }

  [*(id *)(*(void *)(a1 + 32) + 328) processMessagesWithCompletionHandler:&stru_100749998];
  v7[2](v7, v6, 0);
}

void sub_1003275A8(id a1)
{
  uint64_t v1 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Processed FinanceKit messages", v2, 2u);
  }
}

void sub_100327614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_100327788(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(const char **)(a1 + 40);
      uint64_t v3 = *(void *)(a1 + 48);
      [*(id *)(a1 + 32) remoteProcessIdentifier];
      int v5 = PDLocalizedAppNameForPID();
      unsigned int v6 = [*(id *)(a1 + 32) remoteProcessIdentifier];
      *(_DWORD *)long long buf = 138413058;
      __int16 v35 = v4;
      __int16 v36 = 2112;
      uint64_t v37 = v3;
      __int16 v38 = 2112;
      long long v39 = v5;
      __int16 v40 = 1024;
      unsigned int v41 = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Verification code (%@) for DPAND (%@) provided by %@ (%d)", buf, 0x26u);
    }
    [*(id *)(*(void *)(a1 + 32) + 96) passesOfType:1];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v7 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v7)
    {
      id v8 = v7;
      id v9 = 0;
      uint64_t v23 = *(void *)v29;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v29 != v23) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          id v12 = [v11 devicePaymentApplications];
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v13 = v12;
          id v14 = [v13 countByEnumeratingWithState:&v24 objects:v32 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = *(void *)v25;
            while (2)
            {
              for (j = 0; j != v15; j = (char *)j + 1)
              {
                if (*(void *)v25 != v16) {
                  objc_enumerationMutation(v13);
                }
                id v18 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)j) dpanIdentifier];
                if (![v18 caseInsensitiveCompare:*(void *)(a1 + 48)])
                {
                  id v19 = v11;

                  id v9 = v19;
                  goto LABEL_20;
                }
              }
              id v15 = [v13 countByEnumeratingWithState:&v24 objects:v32 count:16];
              if (v15) {
                continue;
              }
              break;
            }
          }
LABEL_20:
        }
        id v8 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
      }
      while (v8);
      if (v9)
      {
        __int16 v20 = [*(id *)(a1 + 32) paymentWebServiceCoordinator];
        [v20 submitVerificationCode:*(void *)(a1 + 40) verificationData:*(void *)(a1 + 56) forPass:v9 handler:*(void *)(a1 + 64)];
      }
    }
  }
  else
  {
    uint64_t v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      __int16 v35 = "-[PDPaymentService submitVerificationCode:verificationData:forDPANIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_100327BEC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) transactionCountByPeriodForRequest:*(void *)(a1 + 40) calendar:*(void *)(a1 + 48) calendarUnit:*(void *)(a1 + 64) includePurchaseTotal:*(unsigned __int8 *)(a1 + 72)];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService transactionCountByPeriodForRequest:calendar:unit:includePurchaseTotal:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100327E54(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(a1[4] + 96) cashbackByPeriodForTransactionSourceIdentifiers:a1[5] withStartDate:a1[6] endDate:a1[7] calendar:a1[8] calendarUnit:a1[10] type:a1[11]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService cashbackByPeriodForTransactionSourceIdentifiers:withStartDate:endDate:calendar:calendarUni"
           "t:type:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(a1[9] + 16))();
}

void sub_100328080(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(a1[4] + 96) peerPaymentCounterpartHandlesForTransactionSourceIdentifier:a1[5] startDate:a1[6] endDate:a1[7]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService peerPaymentCounterpartHandlesForTransactionSourceIdentifier:startDate:endDate:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(a1[8] + 16))();
}

uint64_t sub_10032825C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 96) hasAnyTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService hasTransactionsForTransactionSourceIdentifiers:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1003284D0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 72) withBackingData:*(void *)(a1 + 80) startDate:*(void *)(a1 + 48) endDate:*(void *)(a1 + 56) orderedByDate:*(void *)(a1 + 88) limit:*(void *)(a1 + 96)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v5 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withTransactionSource:withBackingData:startDat"
           "e:endDate:orderedByDate:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100328704(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withPeerPaymentCounterpartHandles:*(void *)(a1 + 48) withTransactionSource:*(void *)(a1 + 64) withBackingData:*(void *)(a1 + 72) limit:*(void *)(a1 + 80)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withPeerPaymentCounterpartHandles:withTransact"
           "ionSource:withBackingData:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100328934(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) matchingMerchant:*(void *)(a1 + 48) withTransactionSource:*(void *)(a1 + 64) withBackingData:*(void *)(a1 + 72) limit:*(void *)(a1 + 80)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:matchingMerchant:withTransactionSource:withBac"
           "kingData:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100328B94(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(a1[4] + 96) transactionsForTransactionSourceIdentifiers:a1[5] merchantCategory:a1[9] withTransactionSource:a1[10] withBackingData:a1[11] startDate:a1[6] endDate:a1[7] limit:a1[12]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v5 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withMerchantCategory:withTransactionSource:wit"
           "hBackingData:startDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(a1[8] + 16))();
}

void sub_100328DF0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(a1[4] + 96) transactionsForTransactionSourceIdentifiers:a1[5] withTransactionType:a1[9] withTransactionSource:a1[10] withBackingData:a1[11] startDate:a1[6] endDate:a1[7] limit:a1[12]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v5 = "-[PDPaymentService transactionsForTransactionSourceIdentifiers:withTransactionType:withTransactionSource:with"
           "BackingData:startDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(a1[8] + 16))();
}

void sub_100329044(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) approvedTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 72) withBackingData:*(void *)(a1 + 80) startDate:*(void *)(a1 + 48) endDate:*(void *)(a1 + 56) orderedByDate:1 limit:*(void *)(a1 + 88)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v5 = "-[PDPaymentService approvedTransactionsForTransactionSourceIdentifiers:withTransactionSource:withBackingData:"
           "startDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1003292A4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 96) pendingTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 72) withBackingData:*(void *)(a1 + 80) startDate:*(void *)(a1 + 48) endDate:*(void *)(a1 + 56) orderedByDate:1 limit:*(void *)(a1 + 88)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v5 = "-[PDPaymentService pendingTransactionsForTransactionSourceIdentifiers:withTransactionSource:withBackingData:s"
           "tartDate:endDate:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1003294BC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 96) transactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) withTransactionSource:*(void *)(a1 + 56) withBackingData:*(void *)(a1 + 64) limit:*(void *)(a1 + 72)];
    [*(id *)(a1 + 32) _requestUpdatesForTransactionSourceIdentifiers:*(void *)(a1 + 40)];
  }
  else
  {
    id v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100329628(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) transactionsWithTransactionSource:a1[6] withBackingData:a1[7] limit:a1[8]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService transactionsWithTransactionSource:withBackingData:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[5] + 16))();
}

void sub_100329808(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) transactionWithTransactionIdentifier:a1[5]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService transactionWithTransactionIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1003299F0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) peerPaymentAllAccess])
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v3 = *(id *)(a1 + 40);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          id v8 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "transactionWithTransactionIdentifier:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9);
          [v2 safelyAddObject:v8];
        }
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v15 count:16];
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v14 = "-[PDPaymentService transactionsWithTransactionIdentifiers:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100329CC0(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) paymentTransactionsWithFullPaymentHashes:a1[5] transactionSourceIdentifiers:a1[6]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService transactionsWithFullPaymentHashes:transactionSourceIdentifiers:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();
}

uint64_t sub_100329EAC(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    [*(id *)(a1[4] + 96) transactionSourceTypeForTransactionSourceIdentifier:a1[5]];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService transactionSourceTypeForTransactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_10032A0B0(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) transactionWithServiceIdentifier:a1[5] transactionSourceIdentifier:a1[6]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService transactionWithServiceIdentifier:transactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_10032A29C(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) transactionWithReferenceIdentifier:a1[5]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService transactionWithReferenceIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032A484(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) installmentTransactionsForInstallmentPlanIdentifier:a1[5]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService installmentTransactionsForInstallmentPlanIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032A65C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) installmentPlansWithTransactionReferenceIdentifier:a1[5]];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService installmentPlansWithTransactionReferenceIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032A8BC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 96) installmentPlanTransactionsForTransactionSourceIdentifiers:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48) redeemed:*(unsigned __int8 *)(a1 + 88) withRedemptionType:*(void *)(a1 + 80) startDate:*(void *)(a1 + 56) endDate:*(void *)(a1 + 64)];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService installmentPlanTransactionsForTransactionSourceIdentifiers:accountIdentifier:redeemed:with"
           "RedemptionType:startDate:endDate:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10032AAA4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 96) transactionsForRequest:*(void *)(a1 + 40)];
    uint64_t v3 = *(void **)(a1 + 32);
    int v4 = [*(id *)(a1 + 40) transactionSourceIdentifiers];
    [v3 _requestUpdatesForTransactionSourceIdentifiers:v4];
  }
  else
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      id v7 = "-[PDPaymentService transactionsForRequest:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v6, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10032ACA4(void *a1)
{
  id v3 = 0;
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 96) totalAmount:&v3 forTransactionsWithRequest:a1[5] count:0];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v5 = "-[PDPaymentService transactionsTotalAmountForRequest:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032AE84(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = +[PKObjectDownloader sharedImageAssetDownloader];
    id v3 = [v2 cachedDataForURL:*(void *)(a1 + 40)];

    if (v3)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      id v5 = +[PKObjectDownloader sharedImageAssetDownloader];
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10032B038;
      v7[3] = &unk_100749AB0;
      uint64_t v6 = *(void *)(a1 + 40);
      id v8 = *(id *)(a1 + 48);
      [v5 downloadFromUrl:v6 completionHandler:v7];
    }
  }
  else
  {
    int v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v10 = "-[PDPaymentService logoImageDataForURL:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_10032B038(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10032B130(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) transactionsForPredicate:a1[5] limit:a1[7]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService transactionsForPredicate:limit:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitlted for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032B30C(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) passUniqueIdentifierForTransactionWithIdentifier:a1[5]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService passUniqueIdentifierForTransactionWithIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032B4F4(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) ambiguousPassUniqueIdentifierForTransactionWithServiceIdentifier:a1[5]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService ambiguousPassUniqueIdentifierForTransactionWithServiceIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032B704(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) passUniqueIdentifierForTransactionWithServiceIdentifier:a1[5] transactionSourceIdentifier:a1[6]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService passUniqueIdentifierForTransactionWithServiceIdentifier:transactionSourceIdentifier:comple"
           "tion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_10032B8F0(void *a1)
{
  if (([*(id *)(a1[4] + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) ambiguousTransactionWithServiceIdentifier:a1[5]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService ambiguousTransactionWithServiceIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032BAB8(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) peerPaymentAllAccess])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 96) mapsMerchants];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService mapsMerchantsWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10032BCB0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) valueAddedServiceTransactionsForPassWithUniqueIdentifier:a1[5] limit:a1[7]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService valueAddedServiceTransactionsForPassWithUniqueIdentifier:limit:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032BE8C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) valueAddedServiceTransactionsForPaymentTransaction:a1[5]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService valueAddedServiceTransactionsForPaymentTransaction:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032C064(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) valueAddedServiceTransactionWithIdentifier:a1[5]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      id v5 = "-[PDPaymentService valueAddedServiceTransactionWithIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032C23C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) messagesForPassWithUniqueIdentifier:a1[5]];
    id v3 = [*(id *)(a1[4] + 96) notificationServiceOfType:1 forPassWithUniqueIdentifier:a1[5]];
    [*(id *)(a1[4] + 48) requestUpdatesFromNotificationService:v3 passUniqueIdenitifer:a1[5]];
  }
  else
  {
    int v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService messagesForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032C450(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) paymentBalancesForPassUniqueIdentifier:a1[5]];
    id v3 = [*(id *)(a1[4] + 96) notificationServiceOfType:0 forPassWithUniqueIdentifier:a1[5]];
    [*(id *)(a1[4] + 48) requestUpdatesFromNotificationService:v3 passUniqueIdenitifer:a1[5]];
  }
  else
  {
    int v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService balancesForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032C664(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) plansForPassUniqueIdentifier:a1[5]];
    id v3 = [*(id *)(a1[4] + 96) notificationServiceOfType:0 forPassWithUniqueIdentifier:a1[5]];
    [*(id *)(a1[4] + 48) requestUpdatesFromNotificationService:v3 passUniqueIdenitifer:a1[5]];
  }
  else
  {
    int v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService plansForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v2 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10032C8A0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) balanceReminderThresholdForBalanceIdentifier:a1[5] withPassUniqueIdentifier:a1[6]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[PDPaymentService balanceReminderThresholdForBalanceIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v2 = 0;
  }
  uint64_t v4 = a1[7];
  if (v4) {
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v2);
  }
}

uint64_t sub_10032CACC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess];
  if (!v2)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v15 = "-[PDPaymentService setBalanceReminder:forBalanceIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }
    goto LABEL_6;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 96) setBalanceReminder:*(void *)(a1 + 40) forBalanceIdentifier:*(void *)(a1 + 48) withPassUniqueIdentifier:*(void *)(a1 + 56)])
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 120);
    uint64_t v4 = *(void **)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10032CC88;
    v9[3] = &unk_10072F3F0;
    long long v10 = v4;
    id v11 = *(id *)(a1 + 48);
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v12 = v5;
    uint64_t v13 = v6;
    [v3 userNotificationsForPassUniqueIdentifier:v10 ofType:7 completion:v9];

    id v7 = v10;
LABEL_6:

    goto LABEL_8;
  }
  id v2 = 0;
LABEL_8:
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

void sub_10032CC88(uint64_t a1, void *a2)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v24 objects:v36 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v25;
    id v7 = &OBJC_IVAR___PDNotificationServiceGetUpdatesResult__notifications;
    *(void *)&long long v4 = 138413058;
    long long v21 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(obj);
        }
        long long v9 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        long long v10 = objc_msgSend(v9, "passUniqueIdentifier", v21);
        if (PKEqualObjects())
        {
          id v11 = [v9 balanceIdentifier];
          int v12 = PKEqualObjects();

          if (!v12) {
            continue;
          }
          long long v10 = [*(id *)(a1 + 48) threshold];
          uint64_t v13 = [v9 currentBalanceAmount];
          id v14 = [v13 compare:v10];

          if (v14 == (id)-1)
          {
            uint64_t v17 = [v9 reminderCurrency];
            [v9 updateReminderAmount:v10 currency:v17];

            [*(id *)(*(void *)(a1 + 56) + v7[120]) insertUserNotification:v9];
            id v15 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              id v18 = v7;
              uint64_t v19 = *(void *)(a1 + 32);
              uint64_t v22 = *(void *)(a1 + 48);
              __int16 v20 = [v9 currentBalanceAmount];
              *(_DWORD *)long long buf = v21;
              long long v29 = v9;
              __int16 v30 = 2112;
              uint64_t v31 = v19;
              id v7 = v18;
              __int16 v32 = 2112;
              uint64_t v33 = v22;
              __int16 v34 = 2112;
              __int16 v35 = v20;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PDPaymentService lowBalance insertUserNotification %@ for pass %@ (threshold %@, currentBalance: %@)", buf, 0x2Au);
            }
          }
          else
          {
            [*(id *)(*(void *)(a1 + 56) + v7[120]) removeUserNotification:v9];
            id v15 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v16 = *(void *)(a1 + 32);
              *(_DWORD *)long long buf = 138412546;
              long long v29 = v9;
              __int16 v30 = 2112;
              uint64_t v31 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PDPaymentService lowBalance removeUserNotification %@ for pass %@", buf, 0x16u);
            }
          }
        }
      }
      id v5 = [obj countByEnumeratingWithState:&v24 objects:v36 count:16];
    }
    while (v5);
  }
}

void sub_10032D064(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 96) passWithUniqueIdentifier:*(void *)(a1 + 40)];
    id v3 = [v2 paymentPass];

    [*(id *)(*(void *)(a1 + 32) + 96) paymentBalancesForPassUniqueIdentifier:*(void *)(a1 + 40)];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v5 = [v4 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v26;
LABEL_4:
      uint64_t v8 = 0;
      while (1)
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = *(void **)(*((void *)&v25 + 1) + 8 * v8);
        long long v10 = [v9 identifiers];
        unsigned __int8 v11 = [v10 intersectsSet:*(void *)(a1 + 48)];

        if (v11) {
          break;
        }
        if (v6 == (id)++v8)
        {
          id v6 = [v4 countByEnumeratingWithState:&v25 objects:v33 count:16];
          if (v6) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }
      id v14 = v9;

      if (!v14) {
        goto LABEL_17;
      }
      id v15 = [*(id *)(*(void *)(a1 + 32) + 96) notificationServiceOfType:0 forPassWithUniqueIdentifier:*(void *)(a1 + 40)];
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void **)(*(void *)(a1 + 32) + 48);
      id v18 = [v3 partnerAccountIdentifier];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10032D3A0;
      v23[3] = &unk_1007304D8;
      id v24 = *(id *)(a1 + 56);
      [v17 cancelAutoTopUpFromNotificationService:v15 passUniqueIdenitifer:v16 accountIdentifier:v18 balance:v14 completion:v23];
    }
    else
    {
LABEL_10:

LABEL_17:
      uint64_t v19 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v20 = *(const char **)(a1 + 40);
        uint64_t v21 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        __int16 v30 = v20;
        __int16 v31 = 2112;
        uint64_t v32 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "No auto top up balance for pass: %@, balanceIdentifiers: %@", buf, 0x16u);
      }

      uint64_t v22 = *(void *)(a1 + 56);
      if (v22) {
        (*(void (**)(uint64_t, void))(v22 + 16))(v22, 0);
      }
    }
  }
  else
  {
    int v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      __int16 v30 = "-[PDPaymentService cancelAutoTopUpForPassWithUniqueIdentifier:balanceIdentifiers:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 56);
    if (v13) {
      (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0);
    }
  }
}

uint64_t sub_10032D3A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10032D4B4(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) commutePlanReminderForCommutePlanIdentifier:a1[5] withPassUniqueIdentifier:a1[6]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[PDPaymentService commutePlanReminderForCommutePlanIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v2 = 0;
  }
  uint64_t v4 = a1[7];
  if (v4) {
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v2);
  }
}

uint64_t sub_10032D6E0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 96) setCommutePlanReminder:a1[5] forCommutePlanIdentifier:a1[6] withPassUniqueIdentifier:a1[7]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      id v6 = "-[PDPaymentService setCommutePlanReminder:forCommutePlanIdentifier:withPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    id v2 = 0;
  }
  uint64_t result = a1[8];
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

uint64_t sub_10032D8B4(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 96) deletePaymentTransactionWithIdentifier:a1[5]];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService deletePaymentTransactionWithIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10032DA7C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 96) deletePaymentTransactionsWithIdentifiers:a1[5]];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      int v5 = "-[PDPaymentService deletePaymentTransactionsWithIdentifiers:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10032DC44(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 96) deleteAllTransactionsFromTransactionSourceIdentifiers:*(void *)(a1 + 40)];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v2 = *(id *)(a1 + 40);
    id v3 = [v2 countByEnumeratingWithState:&v9 objects:v15 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v10;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v10 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "passUniqueIdentifierForTransactionWithIdentifier:", *(void *)(*((void *)&v9 + 1) + 8 * i), (void)v9);
          if (v7) {
            [*(id *)(*(void *)(a1 + 32) + 120) removeUserNotificationsForPassUniqueIdentifier:v7 ofType:4];
          }
        }
        id v4 = [v2 countByEnumeratingWithState:&v9 objects:v15 count:16];
      }
      while (v4);
    }
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v14 = "-[PDPaymentService deleteAllTransactionsForTransactionSourceIdentifiers:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10032DEE8(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 96) deleteAllMessagesFromPaymentPassWithUniqueIdentifier:a1[5]];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[PDPaymentService deleteAllMessagesForPaymentPassWithUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10032E0B0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 96) archiveMessageWithIdentifier:a1[5]];
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[PDPaymentService archiveMessageWithIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10032E2A0(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = (const char *)a1[5];
      uint64_t v4 = a1[6];
      int v8 = 138412546;
      long long v9 = v3;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Inserting Payment Transaction via Payment Service: %@ for transactionSourceIdentifier %@", (uint8_t *)&v8, 0x16u);
    }

    uint64_t v5 = [*(id *)(a1[4] + 96) insertOrUpdatePaymentTransaction:a1[5] withTransactionSourceIdentifier:a1[6] insertionMode:0 performTruncation:1 insertedTransaction:0];
    [*(id *)(a1[4] + 88) processPaymentTransaction:v5 forTransactionSourceIdentifier:a1[6]];
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      long long v9 = "-[PDPaymentService insertOrUpdatePaymentTransaction:forTransactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v8, 0xCu);
    }

    uint64_t v5 = 0;
  }
  uint64_t v7 = a1[7];
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v5);
  }
}

void sub_10032E558(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315138;
      uint64_t v16 = "-[PDPaymentService insertOrUpdatePaymentTransaction:forPassUniqueIdentifier:paymentApplication:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v15, 0xCu);
    }
    long long v9 = 0;
    goto LABEL_13;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 48) && *(void *)(a1 + 56))
  {
    id v2 = PKAggDKeyPaymentTransactionOtherCard;
    id v3 = *(void **)(a1 + 56);
    uint64_t v4 = PDDefaultPaymentPassUniqueIdentifier();
    uint64_t v5 = v3;
    id v6 = v4;
    if (v5 == v6)
    {
    }
    else
    {
      uint64_t v7 = v6;
      if (!v5 || !v6)
      {

        goto LABEL_21;
      }
      unsigned int v8 = [v5 isEqualToString:v6];

      if (!v8) {
        goto LABEL_22;
      }
    }
    uint64_t v7 = v2;
    id v2 = PKAggDKeyPaymentTransactionDefaultCard;
LABEL_21:

LABEL_22:
    PKAnalyticsSendEvent();
    uint64_t v11 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      long long v12 = *(const char **)(a1 + 40);
      int v15 = 138412290;
      uint64_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Inserting Payment Transaction via Payment Service: %@", (uint8_t *)&v15, 0xCu);
    }

    LOBYTE(v15) = 0;
    long long v9 = [*(id *)(*(void *)(a1 + 32) + 96) insertOrUpdatePaymentTransaction:*(void *)(a1 + 40) withPassUniqueIdentifier:*(void *)(a1 + 56) paymentApplication:*(void *)(a1 + 48) insertionMode:0 performTruncation:0 insertedTransaction:&v15];
    if ((_BYTE)v15) {
      [*(id *)(a1 + 32) _insertPendingTransactionRegistration:v9];
    }
    uint64_t v13 = *(void **)(*(void *)(a1 + 32) + 88);
    id v14 = [*(id *)(a1 + 48) transactionSourceIdentifier];
    [v13 processPaymentTransaction:v9 forTransactionSourceIdentifier:v14];

LABEL_13:
    goto LABEL_15;
  }
  long long v9 = 0;
LABEL_15:
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10) {
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v9);
  }
}

void sub_10032EA30(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = a1[5];
    if (v2)
    {
      id v3 = [*(id *)(a1[4] + 96) removeMapsDataForTransactionWithIdentifier:v2 forTransactionSourceIdentifier:a1[6] issueReportIdentifier:a1[7]];
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[PDPaymentService removeMapsDataForTransactionWithIdentifier:forTransactionSourceIdentifier:issueReportIdent"
           "ifier:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v6, 0xCu);
    }
  }
  id v3 = 0;
LABEL_8:
  uint64_t v5 = a1[8];
  if (v5) {
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v3);
  }
}

uint64_t sub_10032F314(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v10 = PKLogFacilityTypeGetObject();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    int v19 = 136315138;
    __int16 v20 = "-[PDPaymentService insertOrUpdateValueAddedServiceTransaction:forPassUniqueIdentifier:paymentTransaction:handl"
          "er:]_block_invoke";
    uint64_t v11 = "Client is not entitled for method: %s";
    goto LABEL_20;
  }
  [*(id *)(*(void *)(a1 + 32) + 96) insertOrUpdateValueAddedServiceTransaction:*(void *)(a1 + 40) forPassUniqueIdentifier:*(void *)(a1 + 48) paymentTransaction:*(void *)(a1 + 56)];
  if (([*(id *)(a1 + 40) didSucceed] & 1) == 0)
  {
    uint64_t v2 = [*(id *)(a1 + 40) merchant];
    id v3 = [*(id *)(a1 + 40) merchantURL];
    uint64_t v4 = +[NSURL URLWithString:v3];

    uint64_t v5 = [v2 identifier];
    int v6 = [v5 hexEncoding];

    unint64_t v7 = (unint64_t)[v2 timesPresented];
    unsigned int v8 = [v4 scheme];
    if ([v8 isEqualToString:@"https"])
    {
      int v9 = 1;
    }
    else
    {
      long long v12 = [v4 scheme];
      if ([v12 isEqualToString:@"http"]) {
        int v9 = PKAllowHTTP();
      }
      else {
        int v9 = 0;
      }
    }
    unsigned int v13 = [*(id *)(*(void *)(a1 + 32) + 96) passExistsWithPassTypeIdentifierHash:v6];
    BOOL v14 = v7 <= 2
       && [*(id *)(*(void *)(a1 + 32) + 96) numberOfValueAddedServiceTransactionsForMerchant:v2] == qword_1005B3928[v7];
    int v15 = PKDisableRateLimiting();
    if (((v9 ^ 1 | v13) & 1) == 0 && v14 | v15) {
      [*(id *)(*(void *)(a1 + 32) + 72) processValueAddedServiceTransaction:*(void *)(a1 + 40)];
    }
  }
  uint64_t v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(const char **)(a1 + 40);
    int v19 = 138412290;
    __int16 v20 = v16;
    uint64_t v11 = "Inserted Value Added Service Transaction: %@";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v19, 0xCu);
  }
LABEL_21:

  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v17);
  }
  return result;
}

void sub_10032F71C(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    uint64_t v2 = [*(id *)(a1[4] + 96) setDefaultPaymentApplication:a1[5] forPassUniqueIdentifier:a1[6]];
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "-[PDPaymentService setDefaultPaymentApplication:forPassUniqueIdentifier:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v5, 0xCu);
    }

    uint64_t v2 = 0;
  }
  uint64_t v4 = a1[7];
  if (v4) {
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v2);
  }
}

id sub_10032FA04(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    id v3 = *(void **)(*(void *)(a1 + 32) + 128);
    return [v3 initializeSecureElementIfNecessaryWithHandler:v2];
  }
  else
  {
    int v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      unint64_t v7 = "-[PDPaymentService initializeSecureElementIfNecessaryWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v6, 0xCu);
    }

    id result = *(id *)(a1 + 40);
    if (result) {
      return (id)(*((uint64_t (**)(id, void, void, void))result + 2))(result, 0, 0, 0);
    }
  }
  return result;
}

void sub_10032FBF4(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Force Initializing Secure Element...", buf, 2u);
    }

    id v3 = *(void **)(*(void *)(a1 + 32) + 128);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10032FDA8;
    v6[3] = &unk_100749AD8;
    id v7 = *(id *)(a1 + 40);
    [v3 initializeSecureElementQueuingServerConnection:1 withCompletion:v6];
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v9 = "-[PDPaymentService initializeSecureElement:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
    }
  }
}

uint64_t sub_10032FDA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10032FE94(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 144) simulatePushForTopic:a1[5]];
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[PDPaymentService simulatePaymentPushTopic:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100330068(void *a1)
{
  if ([*(id *)(a1[4] + 16) paymentAllAccess])
  {
    [*(id *)(a1[4] + 184) initiateNativePairingIfPossibleFromTCIs:a1[5] brandCode:a1[7]];
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[PDPaymentService simulateVehicleInitiatedPairingWithTCIs:brandCode:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100330240(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    uint64_t v2 = (id *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 56);
    int v4 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"passUniqueIdentifier"];
    uint64_t v5 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"title"];
    int v6 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"message"];
    switch(v3)
    {
      case 1:
        BOOL v14 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v5 message:v6 forPassUniqueIdentifier:v4];
        id v7 = [*v2 objectForKeyedSubscript:@"customActionRoute"];
        if (v7) {
          [(PDUserNotification *)v14 setCustomActionRoute:v7];
        }
        id v8 = [*v2 objectForKeyedSubscript:@"notificationIdentifier"];
        if (v8) {
          [0 setNotificationIdentifier:v8];
        }
        goto LABEL_80;
      case 2:
        __int16 v52 = [PDWalletValueAddedServiceTransactionUserNotification alloc];
        id v7 = [*v2 objectForKeyedSubscript:@"merchantIdentifier"];
        id v8 = [*v2 objectForKeyedSubscript:@"localizedDescription"];
        uint64_t v16 = [(PDWalletValueAddedServiceTransactionUserNotification *)v52 initWithMerchantIdentifier:v7 localizedPassDescription:v8 passUniqueIdentifier:v4];
        goto LABEL_52;
      case 3:
        unsigned int v13 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:@"PDUserNotificationTypePassUpdate" message:@"PDUserNotificationTypePassUpdate not supported yet"];
        goto LABEL_62;
      case 4:
      case 6:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"paymentApplication"];
        int v9 = PDPassPaymentTransactionUserNotification;
        goto LABEL_37;
      case 5:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"paymentApplication"];
        int v9 = PDPassTransitTransactionUserNotification;
LABEL_37:
        id v53 = [v9 alloc];
        id v18 = [*v2 objectForKeyedSubscript:@"familyMember"];
        id v24 = [*v2 objectForKeyedSubscript:@"accountUser"];
        long long v25 = (PDPassPaymentDailyDailyCashWithAmountUserNotification *)[v53 initWithPaymentTransaction:v7 forPassUniqueIdentifier:v4 paymentApplication:v8 familyMember:v18 accountUser:v24 installmentCriteria:0];
        goto LABEL_38;
      case 7:
        id v7 = [*v2 objectForKeyedSubscript:@"currentBalance"];
        id v8 = [*v2 objectForKeyedSubscript:@"balanceCurrency"];
        __int16 v54 = [*v2 objectForKeyedSubscript:@"balanceExponent"];
        id v55 = [v54 integerValue];

        __int16 v56 = [*v2 objectForKeyedSubscript:@"reminderAmount"];
        uint64_t v57 = [*v2 objectForKeyedSubscript:@"reminderCurrency"];
        BOOL v14 = [[PDPassLowBalanceReminderUserNotification alloc] initWithCurrentBalance:v7 balanceCurrency:v8 exponent:v55 reminderAmount:v56 reminderCurrency:v57 passUniqueIdentifier:v4 balanceIdentifier:0];

        goto LABEL_76;
      case 8:
        id v7 = [*v2 objectForKeyedSubscript:@"transitCommutePlan"];
        id v8 = [*v2 objectForKeyedSubscript:@"paymentPass"];
        uint64_t v16 = [[PDPassCommutePlanRenewalReminderUserNotification alloc] initWithPaymentPass:v8 commutePlan:v7];
        goto LABEL_52;
      case 9:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        int v15 = PDPeerPaymentTransactionAcceptedUserNotification;
        goto LABEL_51;
      case 10:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        int v15 = PDPeerPaymentTransactionExpiredUserNotification;
        goto LABEL_51;
      case 11:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        int v15 = PDPeerPaymentTransactionRejectedSendUserNotification;
        goto LABEL_51;
      case 12:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        __int16 v58 = [*v2 objectForKeyedSubscript:@"reminderPeriod"];
        id v59 = [v58 integerValue];

        uint64_t v16 = [[PDPeerPaymentTransactionReminderUserNotification alloc] initWithPaymentTransaction:v7 forPassUniqueIdentifier:v4 familyMember:v8 reminderPeriod:v59];
        goto LABEL_52;
      case 13:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        int v15 = PDPeerPaymentTransactionDeclinedUserNotification;
        goto LABEL_51;
      case 14:
        id v7 = [*v2 objectForKeyedSubscript:@"currencyAmount"];
        id v8 = [*v2 objectForKeyedSubscript:@"reminderDate"];
        uint64_t v16 = [[PDPeerPaymentBalanceReminderUserNotification alloc] initWithPassUniqueIdentifier:v4 currentBalance:v7 reminderDate:v8];
        goto LABEL_52;
      case 16:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        __int16 v40 = [[PDPassPaymentFraudTransactionUserNotification alloc] initWithPaymentTransaction:v7 forPassUniqueIdentifier:v4];
        goto LABEL_74;
      case 17:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = objc_alloc_init((Class)PKAccountEvent);
        [v8 setType:12];
        uint64_t v17 = +[NSDate date];
        [v8 setDate:v17];

        id v18 = objc_alloc_init((Class)PKAccountPhysicalCardShippingUpdate);
        [v18 setShippingStatus:3];
        int v19 = +[NSSet setWithObject:v18];
        [v8 setItems:v19];

        __int16 v20 = +[NSDate distantFuture];
        [v8 setExpirationDate:v20];

        uint64_t v21 = +[NSUUID UUID];
        uint64_t v22 = [v21 UUIDString];
        [v8 setIdentifier:v22];

        uint64_t v23 = [PDPassAccountEventUserNotification alloc];
        id v24 = [v7 transactionSourceIdentifier];
        long long v25 = [(PDPassAccountEventUserNotification *)v23 initWithPassUniqueIdentifier:v4 transactionSourceIdentifier:v24 accountEvent:v8 featureIdentifier:2 requiresDebtCollectionNotices:1];
        goto LABEL_38;
      case 18:
        id v7 = [*v2 objectForKeyedSubscript:@"summary"];
        BOOL v14 = [[PDPassPaymentSpendingSummaryUserNotification alloc] initWithSpendingSummary:v7 accountUserCollection:0 forPassUniqueIdentifier:v4];
        long long v26 = +[NSDate now];
        [(PDUserNotification *)v14 setDate:v26];

        [(PDUserNotification *)v14 setInsertionRequirements:0];
        goto LABEL_81;
      case 19:
        unsigned int v13 = [[PDPeerPaymentNeedsVerificationUserNotification alloc] initWithPassUniqueIdentifier:v4];
        goto LABEL_62;
      case 20:
        long long v27 = [*v2 objectForKeyedSubscript:@"accountState"];
        id v28 = [v27 unsignedIntegerValue];

        long long v29 = [*v2 objectForKeyedSubscript:@"accountStateReason"];
        id v30 = [v29 unsignedIntegerValue];

        __int16 v31 = [*v2 objectForKeyedSubscript:@"accessLevel"];
        id v32 = [v31 unsignedIntegerValue];

        uint64_t v33 = [*v2 objectForKeyedSubscript:@"featureIdentifier"];
        id v34 = [v33 unsignedIntegerValue];

        __int16 v35 = [*v2 objectForKeyedSubscript:@"requiresDebtCollectionNotices"];
        id v36 = [v35 BOOLValue];

        unsigned int v13 = [[PDPassAccountStateChangeUserNotification alloc] initWithPassUniqueIdentifier:v4 accountState:v28 accountStateReason:v30 accessLevel:v32 featureIdentifier:v34 requiresDebtCollectionNotices:v36];
        goto LABEL_62;
      case 21:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        id v8 = [*v2 objectForKeyedSubscript:@"payment"];
        uint64_t v37 = [*v2 objectForKeyedSubscript:@"reminderOffset"];
        id v38 = [v37 unsignedIntegerValue];

        uint64_t v16 = [[PDAccountPaymentScheduledUserNotification alloc] initWithAccount:v7 payment:v8 reminderOffset:v38];
        goto LABEL_52;
      case 22:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        id v8 = [*v2 objectForKeyedSubscript:@"estimatedRemainingMinimumPayment"];
        long long v60 = [*v2 objectForKeyedSubscript:@"reminderOffset"];
        id v61 = [v60 unsignedIntegerValue];

        uint64_t v16 = [[PDAccountPaymentDueUserNotification alloc] initWithAccount:v7 estimatedRemainingMinimumPayment:v8 reminderOffset:v61];
        goto LABEL_52;
      case 23:
        id v7 = [*v2 objectForKeyedSubscript:@"periodAmount"];
        id v8 = [*v2 objectForKeyedSubscript:@"date"];
        id v62 = [PDPassPaymentDailyDailyCashUserNotification alloc];
        id v18 = +[NSSet setWithObject:&off_10078B718];
        long long v42 = [(PDPassPaymentDailyDailyCashUserNotification *)v62 initWithMonthlyAmount:v7 date:v8 forPassUniqueIdentifier:v4 lastRedemptionType:1 monthlyRewardTypes:v18];
        goto LABEL_78;
      case 24:
        long long v39 = [PDAccountPromptForVirtualCardDetailNotification alloc];
        id v7 = [*v2 objectForKeyedSubscript:@"accountIdentifier"];
        id v8 = [*v2 objectForKeyedSubscript:@"virtualCardIdentifier"];
        uint64_t v16 = [(PDAccountPromptForVirtualCardDetailNotification *)v39 initWithAccountIdentifier:v7 virtualCardIdentifier:v8 forPassUniqueIdentifier:v4];
        goto LABEL_52;
      case 25:
      case 26:
      case 27:
      case 30:
      case 37:
      case 40:
        goto LABEL_63;
      case 28:
      case 32:
        uint64_t v10 = [*v2 objectForKeyedSubscript:@"promotionDuration"];
        [v10 doubleValue];
        double v12 = v11;

        unsigned int v13 = [[PDPassExpressModeEnabledUserNotification alloc] initWithTitle:v5 message:v6 forPassUniqueIdentifier:v4 hideDisableAction:2 promoteDuration:v12];
        goto LABEL_62;
      case 29:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        __int16 v40 = [[PDAccountPaymentPastDueUserNotification alloc] initWithPassUniqueIdentifier:v4 account:v7];
        goto LABEL_74;
      case 31:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        int v15 = PDPeerPaymentAssociatedAccountTransactionReceivedUserNotification;
        goto LABEL_51;
      case 33:
        id v7 = [*v2 objectForKeyedSubscript:@"familyMember"];
        unsigned int v41 = PDPeerPaymentGraduationUserNotification;
        goto LABEL_24;
      case 34:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        int v15 = PDPeerPaymentAssociatedAccountTransactionSendUserNotification;
        goto LABEL_51;
      case 35:
        id v7 = [*v2 objectForKeyedSubscript:@"paymentTransaction"];
        id v8 = [*v2 objectForKeyedSubscript:@"familyMember"];
        int v15 = PDPeerPaymentTransactionRejectedReceiveUserNotification;
LABEL_51:
        uint64_t v16 = (PDPassCommutePlanRenewalReminderUserNotification *)[[v15 alloc] initWithPaymentTransaction:v7 forPassUniqueIdentifier:v4 familyMember:v8];
        goto LABEL_52;
      case 36:
        id v7 = [*v2 objectForKeyedSubscript:@"familyMember"];
        unsigned int v41 = PDPeerPaymentAssociatedAccountActiveUserNotification;
LABEL_24:
        __int16 v40 = (PDPassPaymentFraudTransactionUserNotification *)[[v41 alloc] initWithPassUniqueIdentifier:v4 familyMember:v7];
        goto LABEL_74;
      case 38:
        id v7 = [*v2 objectForKeyedSubscript:@"familyMember"];
        id v8 = [*v2 objectForKeyedSubscript:@"accountIdentifier"];
        uint64_t v16 = [[PDAccountPendingFamilyMemberReminderNotification alloc] initWithFamilyMember:v7 accountIdentifier:v8 passUniqueIdentifier:v4];
        goto LABEL_52;
      case 39:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        id v8 = [*v2 objectForKeyedSubscript:@"servicingToken"];
        id v18 = [*v2 objectForKeyedSubscript:@"expirationDate"];
        long long v42 = [[PDAccountServicingTokenUserNotification alloc] initWithAccount:v7 servicingToken:v8 expirationDate:v18];
        goto LABEL_78;
      case 41:
        uint64_t v43 = [*v2 objectForKeyedSubscript:@"message"];

        BOOL v14 = [[PDISO18013UpdateUserNotification alloc] initWithMessage:v43 forPassUniqueIdentifier:v4];
        int v6 = (void *)v43;
        if (!v14) {
          goto LABEL_63;
        }
        goto LABEL_82;
      case 42:
        id v7 = [*v2 objectForKeyedSubscript:@"amount"];
        id v8 = [*v2 objectForKeyedSubscript:@"periodAmount"];
        id v18 = [*v2 objectForKeyedSubscript:@"date"];
        id v24 = [objc_alloc((Class)NSSet) initWithArray:&off_10078C4E0];
        long long v25 = [[PDPassPaymentDailyDailyCashWithAmountUserNotification alloc] initWithDailyAmount:v7 monthlyAmount:v8 date:v18 forPassUniqueIdentifier:v4 dailyRewardTypes:v24 monthlyRewardTypes:v24];
        goto LABEL_38;
      case 43:
        id v7 = [*v2 objectForKeyedSubscript:@"percentage"];
        id v8 = [*v2 objectForKeyedSubscript:@"merchantNames"];
        id v18 = [*v2 objectForKeyedSubscript:@"periodAmount"];
        id v24 = [*v2 objectForKeyedSubscript:@"date"];
        long long v25 = [[PDPassPaymentDailyDailyCashWithPercentageUserNotification alloc] initWithPercentage:v7 merchantNames:v8 monthlyAmount:v18 date:v24 forPassUniqueIdentifier:v4];
LABEL_38:
        BOOL v14 = (PDWalletUserNotification *)v25;

        goto LABEL_79;
      case 44:
        id v7 = [*v2 objectForKeyedSubscript:@"financingPlan"];
        long long v63 = [*v2 objectForKeyedSubscript:@"updateType"];
        id v64 = [v63 integerValue];

        __int16 v40 = [[PDAccountFinancingPlanUserNotification alloc] initWithFinancingPlan:v7 updateType:v64 passUniqueIdentifier:v4];
        goto LABEL_74;
      case 45:
        id v7 = [*v2 objectForKeyedSubscript:@"applicationIdentifier"];
        __int16 v40 = [[PDUserNotificationTypePTACCompletedUserNotification alloc] initWithApplicationIdentifier:v7];
        goto LABEL_74;
      case 46:
        id v44 = [*v2 objectForKeyedSubscript:@"featureIdentifier"];
        id v45 = [v44 unsignedIntegerValue];

        unsigned int v13 = [[PDAccountBackgroundProvisionCompleteUserNotification alloc] initWithFeatureIdentifier:v45 passUniqueIdentifier:v4 supportsInStorePayment:1];
        goto LABEL_62;
      case 51:
        id v7 = [*v2 objectForKeyedSubscript:@"financingPlan"];
        id v8 = [*v2 objectForKeyedSubscript:@"payment"];
        long long v65 = [*v2 objectForKeyedSubscript:@"requiresGenericMessaging"];
        id v66 = [v65 BOOLValue];

        uint64_t v16 = [[PDAccountFinancingPlanPaymentNotification alloc] initWithFinancingPlan:v7 payment:v8 requiresGenericMessaging:v66 passUniqueIdentifier:v4];
        goto LABEL_52;
      case 52:
        id v7 = [*v2 objectForKeyedSubscript:@"financingPlan"];
        __int16 v40 = [[PDAccountFinancingPlanPaidOffNotification alloc] initWithFinancingPlan:v7 passUniqueIdentifier:v4];
        goto LABEL_74;
      case 53:
        id v7 = [*v2 objectForKeyedSubscript:@"financingPlan"];
        id v8 = [*v2 objectForKeyedSubscript:@"installment"];
        long long v67 = [*v2 objectForKeyedSubscript:@"reminderOffset"];
        id v68 = [v67 integerValue];

        id v50 = [[PDAccountFinancingPlanPaymentReminderNotification alloc] initWithInstallment:v8 financingPlan:v7 accountCreatedDate:0 passUniqueIdentifier:v4 reminderOffset:v68];
        goto LABEL_59;
      case 54:
        id v7 = [*v2 objectForKeyedSubscript:@"financingPlan"];
        long long v69 = [*v2 objectForKeyedSubscript:@"requiresGenericMessaging"];
        id v70 = [v69 BOOLValue];

        BOOL v71 = [*v2 objectForKeyedSubscript:@"daysPastDue"];
        id v72 = [v71 integerValue];

        BOOL v14 = [[PDAccountFinancingPlanPastDueNotification alloc] initWithFinancingPlan:v7 requiresGenericMessaging:v70 daysPastDue:v72 passUniqueIdentifier:v4];
        id v8 = +[NSDate date];
        [(PDUserNotification *)v14 setDate:v8];
        goto LABEL_80;
      case 55:
        id v7 = [*v2 objectForKeyedSubscript:@"financingPlan"];
        id v46 = [*v2 objectForKeyedSubscript:@"updateType"];
        id v47 = [v46 integerValue];

        CFStringRef v48 = [*v2 objectForKeyedSubscript:@"requiresGenericMessaging"];
        id v49 = [v48 BOOLValue];

        __int16 v40 = [[PDAccountFinancingPlanScheduleUpdateNotification alloc] initWithFinancingPlan:v7 updateType:v47 requiresGenericMessaging:v49 passUniqueIdentifier:v4];
        goto LABEL_74;
      case 56:
        id v7 = [*v2 objectForKeyedSubscript:@"financingPlan"];
        id v8 = [*v2 objectForKeyedSubscript:@"dispute"];
        id v50 = [[PDAccountFinancingPlanDisputeUpdateNotification alloc] initWithFinancingPlan:v7 dispute:v8 type:1 passUniqueIdentifier:v4];
LABEL_59:
        BOOL v14 = (PDWalletUserNotification *)v50;
        id v18 = +[NSDate date];
        [(PDUserNotification *)v14 setDate:v18];
        goto LABEL_79;
      case 58:
        unsigned int v13 = objc_alloc_init(PDImportSafariCardConsentRequiredUserNotification);
        goto LABEL_62;
      case 59:
        id v7 = [*v2 objectForKeyedSubscript:@"fpanSuffix"];
        id v8 = [*v2 objectForKeyedSubscript:@"networkName"];
        uint64_t v16 = [[PDImportSafariCardRequestUserNotification alloc] initWithFPANSuffix:v7 networkName:v8];
        goto LABEL_52;
      case 62:
        id v7 = [*v2 objectForKeyedSubscript:@"cardName"];
        __int16 v40 = [[PDVirtualCardVPANImplicitUpgradeUserNotification alloc] initWithCardName:v7 passUniqueIdentifier:v4];
        goto LABEL_74;
      case 64:
        id v7 = [*v2 objectForKeyedSubscript:@"fpanSuffix"];
        id v8 = [*v2 objectForKeyedSubscript:@"networkName"];
        uint64_t v16 = [[PDSuggestVPANForProvisionedSafariCardRequestUserNotification alloc] initWithFPANSuffix:v7 networkName:v8 passUniqueIdentifier:v4];
LABEL_52:
        BOOL v14 = (PDWalletUserNotification *)v16;
        goto LABEL_80;
      case 65:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        id v51 = PDAccountAPYUpdateUserNotification;
        goto LABEL_73;
      case 66:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        id v51 = PDAccountOverdrawnBalanceUserNotification;
        goto LABEL_73;
      case 67:
        BOOL v14 = [(PDGenericUserNotification *)[PDPassExpressUpgradesAvailableUserNotification alloc] initWithTitle:v5 message:v6 forPassUniqueIdentifier:v4];
        id v7 = [*v2 objectForKeyedSubscript:@"customActionURLString"];
        if (v7) {
          [(PDUserNotification *)v14 setCustomActionURLString:v7];
        }
        goto LABEL_81;
      case 70:
        id v7 = [*v2 objectForKeyedSubscript:@"amount"];
        __int16 v40 = [[PDAccountBalanceUpdateUserNotification alloc] initWithAmount:v7 forPassUniqueIdentifier:v4];
        goto LABEL_74;
      case 72:
        id v7 = [*v2 objectForKeyedSubscript:@"recurringPayment"];
        __int16 v40 = [[PDPeerPaymentRecurringPaymentStatusChangeUserNotification alloc] initWithPassUniqueIdentifier:v4 recurringPayment:v7];
        goto LABEL_74;
      case 75:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        id v51 = PDAccountFCCStepUpThresholdExceededUserNotification;
LABEL_73:
        __int16 v40 = (PDPassPaymentFraudTransactionUserNotification *)[[v51 alloc] initWithAccount:v7];
LABEL_74:
        BOOL v14 = (PDWalletUserNotification *)v40;
        goto LABEL_81;
      case 78:
        id v7 = [*v2 objectForKeyedSubscript:@"account"];
        id v8 = [*v2 objectForKeyedSubscript:@"fundingSource"];
        long long v73 = [*v2 objectForKeyedSubscript:@"style"];
        id v74 = [v73 integerValue];

        BOOL v75 = [PDAccountFundingSourceVerificationReminderUserNotification alloc];
        id v79 = v8;
        __int16 v56 = +[NSArray arrayWithObjects:&v79 count:1];
        BOOL v14 = [(PDAccountFundingSourceVerificationReminderUserNotification *)v75 initWithAccount:v7 fundingSources:v56 style:v74];
LABEL_76:

        goto LABEL_80;
      case 81:
        id v7 = [*v2 objectForKeyedSubscript:@"message"];
        id v8 = [*v2 objectForKeyedSubscript:@"title"];
        id v18 = [*v2 objectForKeyedSubscript:@"passUniqueIdentifier"];
        long long v42 = [[PDPassVerificationPromptNotification alloc] initWithTitle:v8 message:v7 forPassUniqueIdentifier:v18];
LABEL_78:
        BOOL v14 = (PDWalletUserNotification *)v42;
LABEL_79:

LABEL_80:
LABEL_81:

        if (v14) {
          goto LABEL_82;
        }
        goto LABEL_63;
      default:
        unsigned int v13 = [[PDGenericUserNotification alloc] initWithTitle:@"Unknown Notification" message:@"Unknown Notification Type" forPassUniqueIdentifier:v4];
LABEL_62:
        BOOL v14 = v13;
        if (v13)
        {
LABEL_82:
          [*(id *)(*(void *)(a1 + 32) + 120) insertUserNotification:v14];
        }
        else
        {
LABEL_63:
          PKLogFacilityTypeGetObject();
          BOOL v14 = (PDWalletUserNotification *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(&v14->super.super.super, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            long long v78 = "-[PDPaymentService simulateNotificationOfType:userInfo:handler:]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, &v14->super.super.super, OS_LOG_TYPE_DEFAULT, "Not inserting a nil notificatation: %s", buf, 0xCu);
          }
        }

        break;
    }
  }
  else
  {
    int v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      long long v78 = "-[PDPaymentService simulateNotificationOfType:userInfo:handler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", buf, 0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003319E8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 72) initiateDevicePassesDownload];
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[PDPaymentService downloadAllPaymentPassesWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100331B8C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 72) initiateConsistencyCheck];
  }
  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[PDPaymentService consistencyCheckWithHandler:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v4, 0xCu);
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100331D30(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 16) paymentAllAccess] & 1) != 0
    || [*(id *)(*(void *)(a1 + 32) + 16) paymentConfiguration])
  {
    if (*(void *)(*(void *)(a1 + 32) + 112)) {
      uint64_t v2 = @"SETUP_REMINDER_SUICA_MESSAGE";
    }
    else {
      uint64_t v2 = @"SETUP_REMINDER_MESSAGE";
    }
    uint64_t v3 = PKLocalizedPaymentString(&v2->isa);
    int v4 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithMessage:v3];
    uint64_t v5 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithMessage:v3];
    int v6 = PKShortenRemindersEnabled();
    double v7 = 3600.0;
    if (v6) {
      double v7 = 60.0;
    }
    id v8 = +[NSDate dateWithTimeIntervalSinceNow:v7];
    int v9 = PKShortenRemindersEnabled();
    double v10 = 86400.0;
    if (v9) {
      double v10 = 18000.0;
    }
    double v11 = +[NSDate dateWithTimeIntervalSinceNow:v10];
    [(PDUserNotification *)v4 setNotificationIdentifier:PDWalletUserNotificationSetupApplePayReminderIdentifier1];
    [(PDUserNotification *)v5 setNotificationIdentifier:PDWalletUserNotificationSetupApplePayReminderIdentifier2];
    [(PDUserNotification *)v4 setInsertionRequirements:80];
    [(PDUserNotification *)v5 setInsertionRequirements:80];
    [(PDUserNotification *)v4 setDate:v8];
    [(PDUserNotification *)v5 setDate:v11];
    [*(id *)(*(void *)(a1 + 32) + 120) insertUserNotification:v4];
    [*(id *)(*(void *)(a1 + 32) + 120) insertUserNotification:v5];
  }
  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      BOOL v14 = "-[PDPaymentService scheduleSetupReminders:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Client is not entitled for method: %s", (uint8_t *)&v13, 0xCu);
    }
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

BOOL sub_100332FFC(id a1, PKFeatureApplication *a2, unint64_t a3, BOOL *a4)
{
  return [(PKFeatureApplication *)a2 applicationType] == (id)2;
}

void sub_1003330C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100333184;
  v8[3] = &unk_100749B38;
  void v8[4] = *(void *)(a1 + 40);
  int v6 = objc_msgSend(a2, "pk_objectsPassingTest:", v8);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v6, v5);
  }
}

BOOL sub_100333184(uint64_t a1, void *a2)
{
  return [a2 applicationType] == *(id *)(a1 + 32);
}

void sub_100333B64(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(*(void *)(a1 + 32) + 72);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100333C98;
  v8[3] = &unk_100749BB0;
  uint64_t v17 = *(void *)(a1 + 88);
  id v9 = *(id *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  id v13 = v3;
  id v5 = *(id *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 32);
  id v16 = v5;
  uint64_t v14 = v6;
  id v15 = *(id *)(a1 + 72);
  id v7 = v3;
  [v4 performHandlerOnSharedWebServiceQueue:v8];
}

void sub_100333C98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)PKAccountWebServiceAccountTransactionAnswerRequest);
  id v5 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 96)];
  int v19 = v5;
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  [v4 setAnswers:v6];

  id v7 = [*(id *)(a1 + 40) serviceIdentifier];
  [v4 setTransactionIdentifier:v7];

  [v4 setAccountIdentifier:*(void *)(a1 + 48)];
  id v8 = [*(id *)(a1 + 56) altDSID];
  [v4 setAccountUserAltDSID:v8];

  id v9 = [*(id *)(a1 + 64) accountBaseURL];
  [v4 setBaseURL:v9];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100333E7C;
  v13[3] = &unk_100749B88;
  id v17 = *(id *)(a1 + 88);
  id v10 = *(id *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 72);
  id v12 = *(void **)(a1 + 80);
  id v14 = v10;
  uint64_t v15 = v11;
  id v16 = v12;
  [v3 accountTransactionAnswerWithRequest:v4 completion:v13];
}

void sub_100333E7C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    if (!v5)
    {
      [*(id *)(a1 + 32) answeredQuestion:*(void *)(a1 + 64)];
      id v7 = [*(id *)(*(void *)(a1 + 40) + 96) insertOrUpdatePaymentTransaction:*(void *)(a1 + 32) withTransactionSourceIdentifier:*(void *)(a1 + 48) insertionMode:0 performTruncation:1 insertedTransaction:0];
      uint64_t v6 = *(void *)(a1 + 56);
    }
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

uint64_t sub_100334230(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    id v8 = [*(id *)(v3 + 56) applePayContainer];
    id v4 = [v8 requestUpdatesForTransactionSourceIdentifier:*(void *)(a1 + 40)];
  }
  else
  {
    id v4 = [*(id *)(v3 + 96) passUniqueIdentifierForTransactionWithIdentifier:*(void *)(a1 + 40)];
    id v5 = v4;
    if (!v4) {
      goto LABEL_6;
    }
    id v8 = v4;
    uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 96) notificationServiceOfType:0 forPassWithUniqueIdentifier:v4];
    [*(id *)(*(void *)(a1 + 32) + 48) requestUpdatesFromNotificationService:v6 passUniqueIdenitifer:v8];
  }
  id v5 = v8;
LABEL_6:
  return _objc_release_x1(v4, v5);
}

void sub_100334DD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 272);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100334E74;
  v3[3] = &unk_100749C00;
  id v4 = *(id *)(a1 + 48);
  [v2 sendDeviceSharingCapabilitiesRequestForHandle:v1 completion:v3];
}

uint64_t sub_100334E74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100335714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_100335750(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (v6) {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6];
  }
  if (v5) {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v5];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1003357E0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16))(a1[4], *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
}

id sub_10033588C(id a1, NSString *a2)
{
  uint64_t v2 = a2;
  id v3 = [objc_alloc((Class)PKAppletSubcredential) initWithIdentifier:v2];

  return v3;
}

uint64_t sub_10033757C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100337ED0(uint64_t a1)
{
  id v2 = [objc_alloc((Class)PKPassOwnershipToken) initWithOwnershipToken:*(void *)(a1 + 32) identifier:*(void *)(a1 + 40)];

  if (!v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      int v6 = 138412546;
      uint64_t v7 = v4;
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to store pass ownership token with identifier: %@ token: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100338818(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 152);
  if (v2)
  {
    [v2 enforceUpgradedPasscodePolicyWithCompletion:v1];
  }
  else if (v1)
  {
    id v3 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, 1, v3);
  }
}

void sub_1003389EC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 152);
  if (v2)
  {
    id v6 = 0;
    [v2 currentPasscodeMeetsUpgradedPasscodePolicy:&v6];
    id v3 = v6;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      id v5 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, uint64_t, id))(v4 + 16))(v4, 1, v5);
    }
  }
}

void sub_100338C70(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 152);
  if (v1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100338D78;
    v4[3] = &unk_1007304D8;
    id v5 = *(id *)(a1 + 40);
    [v1 requiresUpgradedPasscodeWithCompletion:v4];
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      id v3 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v3);
    }
  }
}

uint64_t sub_100338D78(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

void sub_100338F74(void *a1)
{
  if (*(void *)(a1[4] + 152))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = *(void **)(a1[4] + 152);
    _[v4 changePasscodeFrom:v1 toPasscode:v2 completion:v3];
  }
  else
  {
    uint64_t v5 = a1[7];
    if (v5)
    {
      id v6 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v6);
    }
  }
}

void sub_1003391CC(void *a1)
{
  id v2 = [*(id *)(a1[4] + 96) transactionReceiptWithUniqueID:a1[5]];
  [*(id *)(a1[4] + 264) registerDatabaseTransactionReceipt:v2];
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1003393D4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    PKTemporaryItemURLWithExtension();
    id v2 = (NSURL *)objc_claimAutoreleasedReturnValue();
    PKTemporaryItemPrepareDirectory();
    if (PKUnarchiverZip(*(NSData **)(a1 + 32), v2))
    {
      id v3 = [objc_alloc((Class)PKTransactionReceipt) initWithFileURL:v2];
      if (v3)
      {
        uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 264);
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        void v9[2] = sub_100339558;
        v9[3] = &unk_100731C90;
        id v11 = *(id *)(a1 + 48);
        id v10 = v3;
        [v4 writeTransactionReceipt:v10 completion:v9];
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 48);
        if (v8) {
          (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
        }
      }
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 48);
      if (v7) {
        (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
      }
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      id v6 = *(void (**)(void))(v5 + 16);
      v6();
    }
  }
}

uint64_t sub_100339558(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    if (a2) {
      uint64_t v4 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v4 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v4);
  }
  return result;
}

uint64_t sub_10033970C(void *a1)
{
  [*(id *)(a1[4] + 264) deleteTransactionReceiptWithUniqueID:a1[5]];
  uint64_t result = a1[6];
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_100339908(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) transactionWithTransactionIdentifier:*(void *)(a1 + 40)];
  uint64_t v3 = [v2 associatedReceiptUniqueID];
  uint64_t v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
    }
  }
  else
  {
    uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 96) transactionReceiptWithUniqueID:v3];
    uint64_t v8 = (void *)v7;
    if (v7) {
      [*(id *)(*(void *)(a1 + 32) + 264) registerDatabaseTransactionReceipt:v7];
    }
    if (*(unsigned char *)(a1 + 56))
    {
      id v9 = [v8 state];
      if (v8) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v9 != (id)2 && [v2 transactionStatus] == (id)1;
      }
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v13 = @"NO";
        if (v11) {
          CFStringRef v14 = @"YES";
        }
        else {
          CFStringRef v14 = @"NO";
        }
        if (v8) {
          CFStringRef v13 = @"YES";
        }
        int v16 = 138412546;
        CFStringRef v17 = v14;
        __int16 v18 = 2112;
        CFStringRef v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Should update existing receipt: %@, receiptExists: %@", (uint8_t *)&v16, 0x16u);
      }

      if (v11) {
        [*(id *)(*(void *)(a1 + 32) + 72) downloadReceiptForTransaction:v2];
      }
    }
    uint64_t v15 = *(void *)(a1 + 48);
    if (v15) {
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v8);
    }
  }
}

void sub_100339C7C(void *a1)
{
  uint64_t v1 = a1[6];
  if (v1)
  {
    id v2 = [*(id *)(a1[4] + 96) tagsForTransactionWithIdentifier:a1[5]];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_100339ED8(void *a1)
{
  if (*(void *)(a1[4] + 304))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = *(void **)(a1[4] + 304);
    _[v4 registerAuxiliaryCapabilityForPassUniqueIdentifier:v1 sessionExchangeToken:v2 completion:v3];
  }
  else
  {
    uint64_t v5 = a1[7];
    if (v5)
    {
      id v6 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
    }
  }
}

id sub_10033A0CC(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 304) checkAllAuxiliaryRegistrationRequirements];
}

uint64_t (**sub_10033A264(void *a1))(void)
{
  if (*(void *)(a1[4] + 232)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 232) invalidateCertificatesForPassUniqueIdentifier:a1[5] completion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(void))a1[6];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_10033A47C(void *a1)
{
  if (*(void *)(a1[4] + 232))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = *(void **)(a1[4] + 232);
    _[v4 fetchBarcodesForPassUniqueIdentifier:v1 sessionExchangeToken:v2 withCompletion:v3];
  }
  else
  {
    uint64_t v5 = a1[7];
    if (v5)
    {
      id v6 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v6);
    }
  }
}

void sub_10033A750(void *a1)
{
  if (*(void *)(a1[4] + 232))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = a1[8];
    uint64_t v5 = *(void **)(a1[4] + 232);
    _[v5 retrieveDecryptedBarcodeCredentialForPassUniqueIdentifier:v1 authorization:v2 sessionExchangeToken:v3 withCompletion:v4];
  }
  else
  {
    uint64_t v6 = a1[8];
    if (v6)
    {
      id v7 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, void, id))(v6 + 16))(v6, 0, 0, v7);
    }
  }
}

void sub_10033AA08(void *a1)
{
  if (*(void *)(a1[4] + 232))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = *(void **)(a1[4] + 232);
    _[v4 retrieveDecryptedBarcodeCredentialForPassUniqueIdentifier:v1 authorization:v2 withCompletion:v3];
  }
  else
  {
    uint64_t v5 = a1[7];
    if (v5)
    {
      id v6 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, void, id))(v5 + 16))(v5, 0, 0, v6);
    }
  }
}

uint64_t (**sub_10033AC64(void *a1))(id, void)
{
  if (*(void *)(a1[4] + 232)) {
    return (uint64_t (**)(id, void))_[*(id *)(a1[4] + 232) retrievePINEncryptionCertificateForPassUniqueIdentifier:a1[5] withCompletion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(id, void))a1[6];
  if (result) {
    return (uint64_t (**)(id, void))result[2](result, 0);
  }
  return result;
}

uint64_t (**sub_10033AE50(void *a1))(id, void)
{
  if (*(void *)(a1[4] + 232)) {
    return (uint64_t (**)(id, void))_[*(id *)(a1[4] + 232) retrievePINEncryptionCertificateForPassUniqueIdentifier:a1[5] sessionExchangeToken:a1[6] withCompletion:a1[7]];
  }
  uint64_t result = (uint64_t (**)(id, void))a1[7];
  if (result) {
    return (uint64_t (**)(id, void))result[2](result, 0);
  }
  return result;
}

uint64_t (**sub_10033B024(void *a1))(void)
{
  if (*(void *)(a1[4] + 240)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 240) processedAuthenticationMechanism:a1[7] forTransactionIdentifier:a1[5] completion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(void))a1[6];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

uint64_t (**sub_10033B1E4(void *a1))(void)
{
  if (*(void *)(a1[4] + 240)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 240) markAuthenticationCompleteForTransactionIdentifier:a1[5] completion:a1[6]];
  }
  uint64_t result = (uint64_t (**)(void))a1[6];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_10033B3E4(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 240))
  {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 240);
    _[v4 submitUserConfirmation:v1 forTransactionIdentifier:v2 completion:v3];
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      id v6 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v6);
    }
  }
}

void sub_10033B69C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 240))
  {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 240);
    _[v5 submitUserConfirmation:v1 forTransactionIdentifier:v2 sessionExchangeToken:v3 completion:v4];
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      id v7 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v7);
    }
  }
}

void sub_10033B950(void *a1)
{
  if (*(void *)(a1[4] + 240))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = *(void **)(a1[4] + 240);
    _[v4 submitEncryptedPIN:v1 forTransactionIdentifier:v2 completion:v3];
  }
  else
  {
    uint64_t v5 = a1[7];
    if (v5)
    {
      id v6 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v6);
    }
  }
}

void sub_10033BC20(void *a1)
{
  if (*(void *)(a1[4] + 240))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = a1[8];
    uint64_t v5 = *(void **)(a1[4] + 240);
    _[v5 submitEncryptedPIN:v1 forTransactionIdentifier:v2 sessionExchangeToken:v3 completion:v4];
  }
  else
  {
    uint64_t v6 = a1[8];
    if (v6)
    {
      id v7 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0, v7);
    }
  }
}

void sub_10033BED0(void *a1)
{
  if (*(void *)(a1[4] + 240))
  {
    uint64_t v1 = a1[5];
    uint64_t v2 = a1[6];
    uint64_t v3 = a1[7];
    uint64_t v4 = *(void **)(a1[4] + 240);
    _[v4 submitTransactionSignatureForTransactionIdentifier:v1 sessionExchangeToken:v2 completion:v3];
  }
  else
  {
    uint64_t v5 = a1[7];
    if (v5)
    {
      id v6 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:-1 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0, v6);
    }
  }
}

uint64_t (**sub_10033C14C(void *a1))(void)
{
  if (*(void *)(a1[4] + 232)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 232) submitBarcodePaymentEvent:a1[5] forPassUniqueIdentifier:a1[6] withCompletion:a1[7]];
  }
  uint64_t result = (uint64_t (**)(void))a1[7];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

uint64_t (**sub_10033C354(void *a1))(void)
{
  if (*(void *)(a1[4] + 232)) {
    return (uint64_t (**)(void))_[*(id *)(a1[4] + 232) submitBarcodePaymentEvent:a1[5] forPassUniqueIdentifier:a1[6] sessionExchangeToken:a1[7] withCompletion:a1[8]];
  }
  uint64_t result = (uint64_t (**)(void))a1[8];
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_10033CA18(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) needsRegistration])
  {
    uint64_t v8 = *(void **)(a1 + 40);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10033CBC0;
    v15[3] = &unk_100749C98;
    id v17 = v7;
    id v16 = v6;
    [v8 performDeviceRegistrationForReason:@"Prepare for identity provisioning" brokerURL:0 completion:v15];

    id v9 = v17;
LABEL_6:

    goto LABEL_7;
  }
  if (!*(void *)(a1 + 32))
  {
    BOOL v10 = [*(id *)(a1 + 48) paymentWebServiceCoordinator];
    BOOL v11 = [v10 deviceRegistrationServiceCoordinator];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10033CCA0;
    v12[3] = &unk_100737AE8;
    id v14 = v7;
    id v13 = v6;
    [v11 performDeviceRegistrationForReason:@"Prepare for identity provisioning" brokerURL:0 action:0 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:v12];

    id v9 = v14;
    goto LABEL_6;
  }
  (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
LABEL_7:
}

void sub_10033CBC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to register while preparing for identity provisioning with error %@", (uint8_t *)&v6, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033CCA0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (v7)
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to register while preparing for identity provisioning with error %@", (uint8_t *)&v9, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033CD98(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  int v9 = (void *)a1[4];
  if (v9)
  {
    uint64_t v10 = a1[5];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10033CEE4;
    v17[3] = &unk_100749CC0;
    BOOL v11 = &v19;
    id v19 = v7;
    id v12 = &v18;
    id v18 = v6;
    [v9 paymentWebService:v10 setNewAuthRandomIfNecessaryReturningPairingState:v17];
  }
  else
  {
    id v13 = (void *)a1[6];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10033CF9C;
    v14[3] = &unk_100749CC0;
    BOOL v11 = &v16;
    id v16 = v7;
    id v12 = &v15;
    id v15 = v6;
    [v13 initializeSecureElementIfNecessaryWithHandler:v14];
  }
}

void sub_10033CEE4(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ((a2 & 1) == 0)
  {
    int v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to set auth random while preparing for identity provisioning", v10, 2u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033CF9C(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ((a2 & 1) == 0)
  {
    int v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to set auth random while preparing for identity provisioning", v10, 2u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10033D054(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 32))
  {
    if ([a4 isCanceled])
    {
      uint64_t v5 = +[NSError errorWithDomain:PKIdentityProvisioningErrorDomain code:8 userInfo:0];
    }
    else
    {
      uint64_t v5 = 0;
    }
    id v6 = (id)v5;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_10033D64C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Provisioned identity pass resulted in error %@", buf, 0xCu);
    }
  }
  else
  {
    if (!v5)
    {
      id v8 = *(void **)(a1 + 32);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_10033D848;
      v9[3] = &unk_100749D10;
      id v10 = v8;
      id v11 = *(id *)(a1 + 40);
      id v12 = 0;
      id v13 = *(id *)(a1 + 48);
      [v10 paymentPassUniqueIDsSynchronous:0 excludingDeactivated:1 reply:v9];

      goto LABEL_9;
    }
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Provisioned identity pass succeeded with pass %@", buf, 0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_9:
}

void sub_10033D848(void *a1, void *a2)
{
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id obj = a2;
  id v28 = [obj countByEnumeratingWithState:&v45 objects:v53 count:16];
  if (v28)
  {
    uint64_t v27 = *(void *)v46;
    do
    {
      for (i = 0; i != v28; i = (char *)i + 1)
      {
        if (*(void *)v46 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void *)(*((void *)&v45 + 1) + 8 * i);
        *(void *)long long buf = 0;
        __int16 v40 = buf;
        uint64_t v41 = 0x3032000000;
        long long v42 = sub_100020B8C;
        uint64_t v43 = sub_1000210B8;
        id v44 = 0;
        id v5 = (void *)a1[4];
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_10033DD28;
        v38[3] = &unk_100749CE8;
        v38[4] = buf;
        [v5 paymentPassWithUniqueID:v4 synchronous:1 reply:v38];
        if ([*((id *)v40 + 5) isIdentityPass])
        {
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          id v6 = [*((id *)v40 + 5) devicePaymentApplications];
          id v7 = [v6 countByEnumeratingWithState:&v34 objects:v52 count:16];
          id v26 = v6;
          if (v7)
          {
            uint64_t v25 = *(void *)v35;
            do
            {
              id v24 = v7;
              for (j = 0; j != v24; j = (char *)j + 1)
              {
                if (*(void *)v35 != v25) {
                  objc_enumerationMutation(v26);
                }
                int v9 = *(void **)(*((void *)&v34 + 1) + 8 * (void)j);
                long long v30 = 0u;
                long long v31 = 0u;
                long long v32 = 0u;
                long long v33 = 0u;
                id v10 = [v9 subcredentials];
                id v11 = [v10 countByEnumeratingWithState:&v30 objects:v51 count:16];
                if (v11)
                {
                  uint64_t v12 = *(void *)v31;
                  while (2)
                  {
                    for (k = 0; k != v11; k = (char *)k + 1)
                    {
                      if (*(void *)v31 != v12) {
                        objc_enumerationMutation(v10);
                      }
                      id v14 = [*(id *)(*((void *)&v30 + 1) + 8 * (void)k) identifier];
                      id v15 = (void *)a1[5];
                      id v16 = v14;
                      id v17 = v15;
                      if (v16 == v17)
                      {

LABEL_37:
                        uint64_t v22 = PKLogFacilityTypeGetObject();
                        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v23 = a1[6];
                          *(_DWORD *)id v49 = 138412290;
                          uint64_t v50 = v23;
                          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Provisioned identity pass succeeded with found pass %@", v49, 0xCu);
                        }

                        (*(void (**)(void))(a1[7] + 16))();
                        _Block_object_dispose(buf, 8);

                        goto LABEL_40;
                      }
                      id v18 = v17;
                      if (v16) {
                        BOOL v19 = v17 == 0;
                      }
                      else {
                        BOOL v19 = 1;
                      }
                      if (v19)
                      {
                      }
                      else
                      {
                        unsigned int v20 = [v16 isEqualToString:v17];

                        if (v20) {
                          goto LABEL_37;
                        }
                      }
                    }
                    id v11 = [v10 countByEnumeratingWithState:&v30 objects:v51 count:16];
                    if (v11) {
                      continue;
                    }
                    break;
                  }
                }
              }
              id v7 = [v26 countByEnumeratingWithState:&v34 objects:v52 count:16];
            }
            while (v7);
          }

          _Block_object_dispose(buf, 8);
        }
        else
        {
          _Block_object_dispose(buf, 8);
        }
      }
      id v28 = [obj countByEnumeratingWithState:&v45 objects:v53 count:16];
    }
    while (v28);
  }

  uint64_t v21 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Unable to find newly provisioned pass on watch", buf, 2u);
  }

  (*(void (**)(void))(a1[7] + 16))();
LABEL_40:
}

void sub_10033DCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_10033DD28(uint64_t a1, void *a2)
{
}

void sub_10033DD38(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = [a2 firstObject];
  id v6 = [v5 secureElementPass];
  id v7 = [v6 paymentPass];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10033E120(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Falling back to legacy identity provisioning flow for watch", buf, 2u);
    }

    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_10033E278;
    v17[3] = &unk_100749D60;
    uint64_t v12 = *(void *)(a1 + 64);
    id v13 = *(id *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 32);
    id v18 = v13;
    uint64_t v19 = v14;
    [v8 provisionIdentityPassWithPassMetadata:v9 targetDeviceIdentifier:v10 credentialIdentifier:v11 attestations:v5 supplementalData:v12 completion:v17];
    (*(void (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80), 0, v15, v16);
  }
}

void sub_10033E278(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10033E364;
  v10[3] = &unk_100730198;
  id v11 = v5;
  id v12 = *(id *)(a1 + 32);
  id v13 = v6;
  uint64_t v14 = *(void *)(a1 + 40);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

void sub_10033E364(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = [v2 uniqueID];
    id v5 = +[PKPendingProvisioningReceipt successReceiptWithPendingProvisioning:v3 passUniqueID:v4];
  }
  else
  {
    if (a1[6]) {
      +[PKPendingProvisioningReceipt failedReceiptWithPendingProvisioning:error:](PKPendingProvisioningReceipt, "failedReceiptWithPendingProvisioning:error:", a1[5]);
    }
    else {
    id v5 = +[PKPendingProvisioningReceipt remoteSuccessReceiptWithPendingProvisioning:a1[5]];
    }
  }
  id v6 = +[NSKeyedArchiver archivedDataWithRootObject:v5 requiringSecureCoding:1 error:0];
  if (v6)
  {
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_string(v7, "Name", (const char *)[PKPassLibraryPendingProvisioningFinishedNotification UTF8String]);
    id v8 = (const char *)[PKPassLibraryPendingProvisioningFinishedReceiptKey UTF8String];
    id v9 = v6;
    xpc_dictionary_set_data(v7, v8, [v9 bytes], (size_t)objc_msgSend(v9, "length"));
    [*(id *)(a1[7] + 344) sendEvent:v7 completion:0];
  }
  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to archive pending provisioning receipt: %@", (uint8_t *)&v11, 0xCu);
    }
  }
}

void sub_10033E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033E8B8(void *a1, void *a2)
{
  id v7 = a2;
  id v3 = [objc_alloc((Class)NSString) initWithFormat:@"productUpdate-%@", v7];
  if (a1[4])
  {
    id v4 = objc_alloc((Class)NSString);
    id v5 = [v4 initWithFormat:@"%@/%@", PKURLActionPaymentSetupSelectProduct, v7];
    id v6 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:a1[4] message:a1[5]];
    [(PDUserNotification *)v6 setNotificationIdentifier:v3];
    [(PDUserNotification *)v6 setCustomActionRoute:v5];
    [(PDUserNotification *)v6 setReissueBannerOnUpdate:1];
    [*(id *)(a1[6] + 120) insertUserNotification:v6];
  }
  else
  {
    [*(id *)(a1[6] + 120) removeUserNotificationWithIdentifier:v3];
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_10033E9EC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v34 = a3;
  id v5 = objc_alloc_init((Class)PKPaymentSetupProductModel);
  id v35 = v4;
  id v6 = [v4 JSONObject];
  [v5 updateWithPaymentSetupProductsResponse:v6 productsFilter:0 sectionsFilter:0];

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v33 = v5;
  id obj = [v5 allSetupProducts];
  id v7 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (!v7)
  {
LABEL_26:

LABEL_30:
    long long v30 = PKLogFacilityTypeGetObject();
    long long v29 = v34;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v45 = v31;
      __int16 v46 = 2112;
      id v47 = v34;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Could not find product with config %@, error %@", buf, 0x16u);
    }

    uint64_t v32 = *(void *)(a1 + 40);
    uint64_t v27 = +[NSError errorWithDomain:PKIdentityProvisioningErrorDomain code:6 userInfo:0];
    (*(void (**)(uint64_t, void *))(v32 + 16))(v32, v27);
    id v28 = v35;
    goto LABEL_33;
  }
  id v8 = v7;
  uint64_t v38 = *(void *)v41;
  uint64_t v9 = PKIdentityProductAdministrativeArea;
  uint64_t v36 = PKIdentityProductCountry;
LABEL_3:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v41 != v38) {
      objc_enumerationMutation(obj);
    }
    int v11 = *(void **)(*((void *)&v40 + 1) + 8 * v10);
    id v12 = [v11 clientInfo];
    id v13 = [v12 objectForKey:v9];
    uint64_t v14 = [*(id *)(a1 + 32) objectForKey:v9];
    id v15 = v13;
    id v16 = v14;
    id v17 = v16;
    if (v15 == v16)
    {
    }
    else
    {
      if (v15) {
        BOOL v18 = v16 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      uint64_t v19 = v16;
      id v20 = v15;
      if (v18) {
        goto LABEL_21;
      }
      id v21 = [v15 caseInsensitiveCompare:v16];

      if (v21) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = [v12 objectForKey:v36];
    uint64_t v23 = [*(id *)(a1 + 32) objectForKey:v36];
    id v20 = v22;
    id v24 = v23;
    if (v20 == v24) {
      break;
    }
    uint64_t v19 = v24;
    if (v20) {
      BOOL v25 = v24 == 0;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25)
    {

LABEL_21:
LABEL_22:

      goto LABEL_24;
    }
    id v26 = [v20 caseInsensitiveCompare:v24];

    if (!v26) {
      goto LABEL_28;
    }
LABEL_24:

    if (v8 == (id)++v10)
    {
      id v8 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
      if (v8) {
        goto LABEL_3;
      }
      goto LABEL_26;
    }
  }

LABEL_28:
  uint64_t v27 = [v11 productIdentifier];

  if (!v27) {
    goto LABEL_30;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  long long v29 = v34;
  id v28 = v35;
LABEL_33:
}

id sub_10033EF34(void *a1)
{
  return _[*(id *)(a1[4] + 288) processCLICommands:a1[5] completion:a1[6]];
}

uint64_t sub_10033FB0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100340404(_Unwind_Exception *exception_object)
{
}

void sub_100340424(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(*(void *)(a1 + 32) + 288) hasActiveExternallySharedPasses];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    id v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      int v11 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s - General pass, shared pass located", (uint8_t *)&v10, 0xCu);
    }

    BOOL v9 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  v7[2](v7, v6, v9);
}

void sub_100340558(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  BOOL v9 = *(void **)(v8 + 168);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100340634;
  v13[3] = &unk_100730A30;
  uint64_t v10 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v10;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 defaultAccountForFeature:2 completion:v13];
}

void sub_100340634(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 isSharedAccount])
  {
    id v4 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100340730;
    v7[3] = &unk_100737C28;
    void v7[4] = v4;
    id v8 = v3;
    long long v6 = *(_OWORD *)(a1 + 48);
    id v5 = (id)v6;
    long long v10 = v6;
    id v9 = *(id *)(a1 + 40);
    [v4 familyMembersIgnoringCache:0 completion:v7];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_100340730(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    id v4 = objc_msgSend(v3, "pk_createSetByApplyingBlock:", &stru_100749DF8);
    id v5 = *(void **)(*(void *)(a1 + 32) + 168);
    long long v6 = [*(id *)(a1 + 40) accountIdentifier];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100340870;
    v10[3] = &unk_100745F38;
    id v11 = v4;
    long long v9 = *(_OWORD *)(a1 + 56);
    id v7 = (id)v9;
    long long v13 = v9;
    id v12 = *(id *)(a1 + 48);
    id v8 = v4;
    [v5 accountUsersForAccountWithIdentifier:v6 completion:v10];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

id sub_100340868(id a1, PKFamilyMember *a2)
{
  return [(PKFamilyMember *)a2 altDSID];
}

void sub_100340870(void *a1, void *a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v8, "accountState", (void)v12) == (id)1
          && ([v8 isCurrentUser] & 1) == 0)
        {
          long long v9 = (void *)a1[4];
          long long v10 = [v8 altDSID];
          LODWORD(v9) = [v9 containsObject:v10];

          if (v9)
          {
            *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
            id v11 = PKLogFacilityTypeGetObject();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              id v17 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke_5";
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s - First party card, shared pass located", buf, 0xCu);
            }

            goto LABEL_15;
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100340A3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [*(id *)(*(void *)(a1 + 32) + 96) peerPaymentAccount];
  long long v9 = v8;
  if (v8)
  {
    if ([v8 role] == (id)1)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      long long v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136315138;
        uint64_t v16 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s - First party peer payment participant, shared pass located", (uint8_t *)&v15, 0xCu);
      }
      goto LABEL_12;
    }
    long long v10 = [v9 associatedAccountInformation];
    id v11 = [v10 associatedAccounts];
    if ([v11 count])
    {
    }
    else
    {
      long long v12 = [v10 associatedAccountInvitations];
      id v13 = [v12 count];

      if (!v13)
      {
LABEL_12:

        v7[2](v7, v6, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
        goto LABEL_13;
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    long long v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315138;
      uint64_t v16 = "-[PDPaymentService hasActiveExternallySharedPasses:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s - First party peer payment owner, shared pass located", (uint8_t *)&v15, 0xCu);
    }

    goto LABEL_12;
  }
  v7[2](v7, v6, 0);
LABEL_13:
}

uint64_t sub_100340C5C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100341090(void *a1)
{
  id v2 = [*(id *)(a1[4] + 296) retrievePendingProvisioningsOfType:a1[5]];
  (*(void (**)(void))(a1[6] + 16))();
}

uint64_t sub_1003410FC(void *a1)
{
  uint64_t v1 = a1[6];
  id v2 = [*(id *)(a1[4] + 296) hasPendingProvisioningsOfTypes:a1[5]];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);
  return v3(v1, v2);
}

void sub_1003412FC(void *a1)
{
  uint64_t v1 = a1[7];
  id v2 = [*(id *)(a1[4] + 296) retrievePendingProvisioningOfType:a1[5] withUniqueIdentifier:a1[6]];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_100341518(void *a1)
{
  uint64_t v1 = a1[7];
  id v2 = [*(id *)(a1[4] + 296) removePendingProvisioningOfType:a1[5] withUniqueIdentifier:a1[6] success:1];
  id v3 = *(uint64_t (**)(uint64_t, id))(v1 + 16);
  return v3(v1, v2);
}

void sub_10034168C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 canMakeVirtualCardPayments];
  id v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Returning virtual cards (if there are any): Device currently able to make local payments", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) _vpanVirtualCards:*(void *)(a1 + 40)];
  }
  else
  {
    if (v6)
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not returning virtual cards: Device currently unable to make local payments: %@", (uint8_t *)&v8, 0xCu);
    }

    id v7 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100341D44(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 canMakeVirtualCardPayments];
  id v5 = PKLogFacilityTypeGetObject();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fetching VPAN credentials: Device currently able to make local payments", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) _vpanCardCredentialsForVPANID:*(void *)(a1 + 40) authorization:*(void *)(a1 + 48) merchantHost:*(void *)(a1 + 56) regenerate:*(unsigned __int8 *)(a1 + 72) hasRefreshedBAACertificate:0 completion:*(void *)(a1 + 64)];
  }
  else
  {
    if (v6)
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not returning VPAN credentials: Device currently unable to make local payments: %@", (uint8_t *)&v8, 0xCu);
    }

    id v7 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

id sub_100342218(uint64_t a1)
{
  id v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Refreshed BAA context: Trying VPAN again", v4, 2u);
  }

  return [*(id *)(a1 + 32) _vpanCardCredentialsForVPANID:*(void *)(a1 + 40) authorization:*(void *)(a1 + 48) merchantHost:*(void *)(a1 + 56) regenerate:*(unsigned __int8 *)(a1 + 72) hasRefreshedBAACertificate:*(unsigned __int8 *)(a1 + 73) completion:*(void *)(a1 + 64)];
}

void sub_1003422A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) supportsVirtualCardNumberAccordingToWebService:v3])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100342444;
    v10[3] = &unk_100749EE8;
    id v16 = *(id *)(a1 + 72);
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    id v11 = v5;
    uint64_t v12 = v6;
    id v13 = *(id *)(a1 + 32);
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 64);
    __int16 v17 = *(_WORD *)(a1 + 80);
    [v3 vpanNonceForPaymentPass:v4 completion:v10];

    id v7 = v16;
  }
  else
  {
    int v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error: Trying to retrieve a VPAN for a pass whos network isn't enabled in config", buf, 2u);
    }

    uint64_t v9 = *(void *)(a1 + 72);
    id v7 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v7);
  }
}

void sub_100342444(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    int v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to get nonce, so can't fetch VPAN credentials", buf, 2u);
    }

    (*((void (**)(void))a1[9] + 2))();
  }
  else
  {
    id v14 = a1[9];
    id v9 = a1[6];
    id v10 = a1[7];
    id v11 = v5;
    id v12 = a1[8];
    id v13 = a1[4];
    PKPersistentBAACertificateAndKey();
  }
}

void sub_1003425D4(uint64_t a1, void *a2, const void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v7 && a3)
  {
    CFRetain(a3);
    id v9 = [objc_alloc((Class)PKVirtualCardEncryptionFields) initWithCertificates:v7];
    id v10 = *(void **)(*(void *)(a1 + 32) + 72);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1003427F4;
    v13[3] = &unk_100749E98;
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    id v17 = v9;
    id v18 = *(id *)(a1 + 64);
    char v23 = *(unsigned char *)(a1 + 88);
    id v21 = *(id *)(a1 + 80);
    uint64_t v22 = a3;
    char v24 = *(unsigned char *)(a1 + 89);
    uint64_t v19 = *(void *)(a1 + 32);
    id v20 = *(id *)(a1 + 72);
    id v11 = v9;
    [v10 performHandlerOnSharedWebServiceQueue:v13];
  }
  else
  {
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to get BAA certificate and key, so can't fetch VPAN credentials: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
}

void sub_1003427F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fetching VPAN credentials…", buf, 2u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 104);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100342974;
  v13[3] = &unk_100749E70;
  id v11 = *(id *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  id v17 = v11;
  uint64_t v18 = v12;
  char v19 = *(unsigned char *)(a1 + 105);
  void v13[4] = *(void *)(a1 + 72);
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 80);
  id v16 = *(id *)(a1 + 64);
  char v20 = *(unsigned char *)(a1 + 104);
  [v3 vpanPaymentCredentialsForPaymentPass:v5 vpanIdentifier:v6 nonce:v7 encryptionFields:v8 merchantHost:v9 regenerate:v10 completion:v13];
}

void sub_100342974(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5 && !v6)
  {
    if (v8)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting to decrypt VPAN credentials", buf, 2u);
    }

    id v9 = objc_alloc((Class)PKVirtualCardCredentials);
    uint64_t v10 = *(void *)(a1 + 72);
    id v20 = 0;
    id v11 = [v9 initWithVPANPaymentCredentialResponse:v5 privateKey:v10 error:&v20];
    id v12 = v20;
    if (v11)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully decrypted VPAN credentials", buf, 2u);
      }
    }
    else
    {
      int v13 = *(unsigned __int8 *)(a1 + 80);
      BOOL v14 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (!v13)
      {
        if (v14)
        {
          *(_DWORD *)long long buf = 138412290;
          id v22 = v12;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Something went wrong with VPAN decryption. Refreshing BAA state and trying again: %@", buf, 0xCu);
        }

        id v15 = dispatch_get_global_queue(0, 0);
        id v16 = *(id *)(a1 + 40);
        id v17 = *(id *)(a1 + 48);
        id v18 = *(id *)(a1 + 56);
        id v19 = *(id *)(a1 + 64);
        PKForceRefreshBAACertificateAndKey();

        goto LABEL_16;
      }
      if (v14)
      {
        *(_DWORD *)long long buf = 138412290;
        id v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "VPAN decryption still failing after refreshing BAA state. Error: %@", buf, 0xCu);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_16:

    goto LABEL_17;
  }
  if (v8)
  {
    *(_DWORD *)long long buf = 138412290;
    id v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to get VPAN credentials: %@", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_17:
  CFRelease(*(CFTypeRef *)(a1 + 72));
}

id sub_100342CA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _vpanCardCredentialsForVPANID:*(void *)(a1 + 40) authorization:*(void *)(a1 + 48) merchantHost:*(void *)(a1 + 56) regenerate:*(unsigned __int8 *)(a1 + 72) hasRefreshedBAACertificate:1 completion:*(void *)(a1 + 64)];
}

uint64_t sub_100342E48(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100344014(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v10 = *(void **)(a1 + 40);
        id v11 = objc_msgSend(v3, "objectForKey:", v9, (void)v13);
        id v12 = [*(id *)(a1 + 48) objectForKey:v9];
        [v10 safelySetObject:v11 forKey:v12];
      }
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v6);
  }
}

void sub_10034438C(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    xpc_dictionary_set_string(*(xpc_object_t *)(a1 + 32), (const char *)[v11 UTF8String], (const char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = v5;
      id v7 = [v6 bytes];
      BOOL v8 = *(void **)(a1 + 32);
      uint64_t v9 = (const char *)[v11 UTF8String];
      id v10 = [v6 length];

      xpc_dictionary_set_data(v8, v9, v7, (size_t)v10);
    }
  }
}

void sub_100345404(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v27 = a4;
  id v25 = a6;
  id v13 = objc_alloc_init((Class)NSMutableDictionary);
  if ((a5 & 1) == 0)
  {
    long long v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "This is the final batch of transactions to send", buf, 2u);
    }

    *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
  }
  if ([v11 count])
  {
    unint64_t v15 = 0;
    do
    {
      long long v16 = [v11 objectAtIndex:v15];
      id v17 = [v12 objectAtIndex:v15];
      id v18 = [v13 objectForKey:v17];
      if (!v18)
      {
        id v18 = objc_alloc_init((Class)NSMutableSet);
        [v13 setObject:v18 forKey:v17];
      }
      id v19 = [*(id *)(*(void *)(a1 + 32) + 96) transactionWithTransactionIdentifier:v16];
      if (v19) {
        [v18 addObject:v19];
      }

      ++v15;
    }
    while (v15 < (unint64_t)[v11 count]);
  }
  id v20 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = [v11 count];
    *(_DWORD *)long long buf = 134217984;
    id v31 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Sending batch of %lu transactions", buf, 0xCu);
  }

  id v22 = [*(id *)(a1 + 32) remoteObjectProxy];
  id v23 = [v13 copy];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_1003456F4;
  v28[3] = &unk_10072F788;
  id v24 = v25;
  id v29 = v24;
  [v22 transactionBatch:v23 moreComing:a5 readyForNextBatch:v28];
}

uint64_t sub_1003456F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

Class sub_100345C98()
{
  if (qword_100808E40 != -1) {
    dispatch_once(&qword_100808E40, &stru_100749FA8);
  }
  Class result = objc_getClass("NPKCompanionAgentConnection");
  qword_100808E30 = (uint64_t)result;
  off_100806BC8 = (uint64_t (*)())sub_100345CFC;
  return result;
}

id sub_100345CFC()
{
  return (id)qword_100808E30;
}

void sub_100345D08(id a1)
{
  qword_100808E38 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit", 2);
}

Class sub_100345D34()
{
  if (qword_100808E58 != -1) {
    dispatch_once(&qword_100808E58, &stru_100749FC8);
  }
  Class result = objc_getClass("FKTrillianTransactionImporter");
  qword_100808E48 = (uint64_t)result;
  off_100806BD0 = (uint64_t (*)())sub_100345D98;
  return result;
}

id sub_100345D98()
{
  return (id)qword_100808E48;
}

void sub_100345DA4(id a1)
{
  qword_100808E50 = (uint64_t)dlopen("/System/Library/Frameworks/FinanceKit.framework/FinanceKit", 2);
}

void sub_100345DD0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100347470(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (PKDeveloperLoggingEnabled() && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100517488();
  }
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = PDErrorDescription();
    int v11 = 138412290;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v11, 0xCu);
  }
  id v6 = [v3 domain];
  unsigned int v7 = [v6 isEqualToString:@"PDTaskWarningDomain"];

  if (v7)
  {
    BOOL v8 = *(void **)(a1 + 32);
    id v9 = [v3 code];
    uint64_t v10 = [*(id *)(a1 + 40) passTypeIdentifier];
    [v8 _aggdLogTaskErrorCode:v9 passTypeID:v10];
  }
}

void sub_1003479A0(id a1)
{
  id v1 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v2 = qword_100808E60;
  qword_100808E60 = (uint64_t)v1;
  _objc_release_x1(v1, v2);
}

id sub_1003479DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  if (a3 == 1) {
    [v5 resetPushFrequencyStateForPassTypeID:v6];
  }
  else {
    [v5 _unregisterPassesOfType:v6];
  }
  unsigned int v7 = (void *)qword_100808E60;
  uint64_t v8 = *(void *)(a1 + 48);
  return [v7 removeObject:v8];
}

void sub_100347F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_100347F8C(uint64_t a1, void *a2)
{
  id v10 = a2;
  [*(id *)(a1 + 32) addObject:v10];
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  id v4 = [*(id *)(a1 + 32) countForObject:v10];
  id v5 = v4;
  if ((unint64_t)v4 > *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    unsigned int v6 = [v10 isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    if (v6)
    {
      *(void *)(v7 + 24) = v5;
      goto LABEL_9;
    }
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = *(void *)(v7 + 24);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v5;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), *(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
    uint64_t v9 = *(void *)(a1 + 56);
    goto LABEL_8;
  }
  if ((unint64_t)v4 > *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    unsigned __int8 v8 = [v10 isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v5;
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 72);
LABEL_8:
      objc_storeStrong((id *)(*(void *)(v9 + 8) + 40), a2);
    }
  }
LABEL_9:
}

void sub_100348178(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  [v1 doubleForKey:@"PDWebServicesStandardZeroInterval"];
  if (v2 <= 1.0)
  {
    qword_100808E70 = 0x3FF0000000000000;
  }
  else
  {
    id v3 = +[NSUserDefaults standardUserDefaults];
    [v3 doubleForKey:@"PDWebServicesStandardZeroInterval"];
    qword_100808E70 = v4;
  }
  id v8 = +[NSUserDefaults standardUserDefaults];
  [v8 doubleForKey:@"PDWebServicesMinimumZeroInterval"];
  if (v5 <= 1.0)
  {
    qword_100808E78 = 0x3FF0000000000000;
  }
  else
  {
    unsigned int v6 = +[NSUserDefaults standardUserDefaults];
    [v6 doubleForKey:@"PDWebServicesMinimumZeroInterval"];
    qword_100808E78 = v7;
  }
}

void sub_100348660(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  [v1 doubleForKey:@"PDWebServicesMildRateLimitThreshold"];
  qword_100808E88 = v2;

  id v3 = +[NSUserDefaults standardUserDefaults];
  [v3 doubleForKey:@"PDWebServicesModerateRateLimitThreshold"];
  qword_100808E90 = v4;

  double v5 = +[NSUserDefaults standardUserDefaults];
  [v5 doubleForKey:@"PDWebServicesSevereRateLimitThreshold"];
  qword_100808E98 = v6;

  id v8 = +[NSUserDefaults standardUserDefaults];
  [v8 doubleForKey:@"PDWebServicesPushCutoffThreshold"];
  qword_100808EA0 = v7;
}

void sub_100348834(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  [v1 doubleForKey:@"PDWebServicesMildRateLimitInterval"];
  qword_100808EB0 = v2;

  id v3 = +[NSUserDefaults standardUserDefaults];
  [v3 doubleForKey:@"PDWebServicesModerateRateLimitInterval"];
  qword_100808EB8 = v4;

  id v6 = +[NSUserDefaults standardUserDefaults];
  [v6 doubleForKey:@"PDWebServicesSevereRateLimitInterval"];
  qword_100808EC0 = v5;
}

void sub_100348FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [SQLiteMetaEntity alloc];
  uint64_t v5 = [*(id *)(a1 + 32) database];
  uint64_t v7 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  id v6 = v7;
  if (v7)
  {
    [*(id *)(a1 + 40) addObject:v7];
    id v6 = v7;
  }
}

uint64_t sub_10034A054(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = objc_msgSend(*(id *)(a1 + 48), "_predicateForPID:", objc_msgSend(v5, "longLongValue"));
      uint64_t v7 = [*(id *)(a1 + 48) anyInDatabase:*(void *)(a1 + 32) predicate:v6];
      id v8 = *(void **)(a1 + 40);
      uint64_t v9 = [v7 transactionArchive];
      [v8 addObject:v9];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_10034A630(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10034A69C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10034A708(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10034A870(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(*(Class *)(a1 + 48));
  id v5 = [*(id *)(a1 + 32) database];
  id v7 = [v4 initWithPersistentID:a2 inDatabase:v5];

  id v6 = [v7 transactionArchive];
  if (v6) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_10034A9C4(id a1, PKPaymentTransactionArchive *a2, id a3)
{
  id v6 = a2;
  id v4 = a3;
  if (v4)
  {
    id v5 = +[NSNull null];

    if (v5 != v4)
    {
      [(PKPaymentTransactionArchive *)v6 setType:0];
      [(PKPaymentTransactionArchive *)v6 setIdentifier:v4];
    }
  }
}

void sub_10034AA50(id a1, PKPaymentTransactionArchive *a2, id a3)
{
  id v6 = a2;
  id v4 = a3;
  if (v4)
  {
    id v5 = +[NSNull null];

    if (v5 != v4)
    {
      [(PKPaymentTransactionArchive *)v6 setType:1];
      [(PKPaymentTransactionArchive *)v6 setIdentifier:v4];
    }
  }
}

void sub_10034AADC(id a1, PKPaymentTransactionArchive *a2, id a3)
{
  id v6 = a2;
  id v4 = a3;
  if (v4)
  {
    id v5 = +[NSNull null];

    if (v5 != v4)
    {
      [(PKPaymentTransactionArchive *)v6 setType:2];
      [(PKPaymentTransactionArchive *)v6 setIdentifier:v4];
    }
  }
}

void sub_10034B19C(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    id v5 = [(SQLiteEntity *)[PaymentBalance alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
    *a4 = ![(SQLiteEntity *)v5 deleteFromDatabase];
  }
}

void sub_10034B4D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKPaymentBalance);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  objc_msgSend(*(id *)(a1 + 48), "_updateBalance:value:currencyCode:exponent:", v7, *(void *)(a4 + 8 * *(void *)(a1 + 56)), *(void *)(a4 + 8 * *(void *)(a1 + 64)), objc_msgSend(*(id *)(a4 + 8 * *(void *)(a1 + 72)), "integerValue"));
  [*(id *)(a1 + 40) addObject:v7];
}

id sub_10034B6A4(void *a1, uint64_t a2, uint64_t a3)
{
  +[SQLiteEntity applyPropertySetters:a1[4] toObject:a1[5] withProperties:a2 values:a3];
  uint64_t v5 = a1[5];
  uint64_t v6 = *(void *)(a3 + 8 * a1[6]);
  uint64_t v7 = a1[8];
  uint64_t v8 = *(void *)(a3 + 8 * a1[7]);
  id v9 = [*(id *)(a3 + 8 * v7) integerValue];
  return +[PaymentBalance _updateBalance:v5 value:v6 currencyCode:v8 exponent:v9];
}

void sub_10034B824(id a1, PKPaymentBalance *a2, id a3)
{
  id v6 = a3;
  if (v6)
  {
    id v4 = a2;
    uint64_t v5 = (PKPaymentBalance *)objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", v6, 0);
    [(PKPaymentBalance *)v4 setIdentifiers:v5];
  }
  else
  {
    uint64_t v5 = a2;
    [(PKPaymentBalance *)v5 setIdentifiers:0];
  }
}

void sub_10034B8C4(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_10034B8CC(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_10034B8D4(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_10034B8DC(id a1, PKPaymentBalance *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentBalance *)v3 setLastUpdateDate:v4];
}

void sub_10034B93C(id a1, PKPaymentBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentBalance setIsPrimary:](v4, "setIsPrimary:", [a3 BOOLValue]);
}

void sub_10034B994(id a1, PKPaymentBalance *a2, id a3)
{
}

void sub_10034B99C(id a1, PKPaymentBalance *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentBalance setExponent:](v4, "setExponent:", [a3 integerValue]);
}

void sub_10034B9F4(id a1, PKPaymentBalance *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPaymentBalance *)v3 setValue:v4];
}

id *sub_10034BF54(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  uint64_t result = a4;
  int v11 = result;
  if (!a1) {
    goto LABEL_7;
  }
  if (v8 && v9 && result)
  {
    v13.receiver = a1;
    v13.super_class = (Class)PDApplicationAuthorizationHandleRegistrationState;
    id v12 = (id *)objc_msgSendSuper2(&v13, "init");
    a1 = v12;
    if (v12)
    {
      objc_storeStrong(v12 + 3, a2);
      objc_storeStrong(a1 + 1, a3);
      objc_storeStrong(a1 + 2, a4);
    }
LABEL_7:

    return a1;
  }
  __break(1u);
  return result;
}

id *sub_10034C024(id *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = sub_100224080(a1[1]);
    if (v2)
    {
      id v3 = objc_alloc((Class)SBSRemoteAlertDefinition);
      id v4 = [v3 initWithServiceName:PKPassbookUIServiceBundleIdentifier viewControllerClassName:@"PKRemoteApplicationAuthorizationViewController"];
      id v5 = objc_alloc_init((Class)SBSRemoteAlertConfigurationContext);
      id v6 = [v1[2] _endpoint];
      [v5 setXpcEndpoint:v6];

      id v7 = objc_alloc_init((Class)SBSRemoteAlertActivationContext);
      id v8 = [objc_alloc((Class)SBSRemoteAlertPresentationTarget) initWithTargetPredicate:v2];
      [v8 setShouldDismissInSwitcher:1];
      [v8 setShouldDismissOnUILock:1];
      [v7 setPresentationTarget:v8];

      id v1 = sub_100223E1C((uint64_t)PDRemoteAlertConfiguration, v4, v5, v7);
    }
    else
    {
      id v9 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134217984;
        id v12 = v1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDApplicationAuthorizationHandleRegistrationState (%p): could not create configuration - missing target predicate.", (uint8_t *)&v11, 0xCu);
      }

      id v1 = 0;
    }
  }
  return v1;
}

void sub_10034C21C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  id v6 = sub_10034C2A0([PDApplicationAuthorizationHandle alloc], v5, v4);
}

id sub_10034C2A0(void *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (!a1) {
    goto LABEL_9;
  }
  if (!v6) {
    goto LABEL_8;
  }
  v32.receiver = a1;
  v32.super_class = (Class)PDApplicationAuthorizationHandle;
  id v8 = objc_msgSendSuper2(&v32, "init");
  if (!v8)
  {
    [v6 invalidate];
    goto LABEL_7;
  }
  id v9 = sub_100011FE8((uint64_t)v7);
  uint64_t v10 = sub_100011FD0((uint64_t)v9);
  int v11 = (void *)*((void *)v8 + 1);
  *((void *)v8 + 1) = v10;

  if (!*((void *)v8 + 1))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    id v8 = 0;
    goto LABEL_7;
  }
  *((_DWORD *)v8 + 4) = 0;
  objc_storeStrong((id *)v8 + 7, a2);
  id v12 = (void *)*((void *)v8 + 7);
  objc_super v13 = (void *)PKApplicationAuthorizationServiceInterface_Server();
  [v12 setExportedInterface:v13];

  long long v14 = (void *)*((void *)v8 + 7);
  unint64_t v15 = (void *)PKApplicationAuthorizationServiceInterface_Client();
  [v14 setRemoteObjectInterface:v15];

  [*((id *)v8 + 7) setExportedObject:v8];
  id v16 = v8;
  id v17 = (void *)*((void *)v8 + 7);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10034C4E8;
  v29[3] = &unk_10072E198;
  id v18 = v16;
  id v30 = v18;
  id v19 = v6;
  id v31 = v19;
  [v17 setInterruptionHandler:v29];
  id v20 = (void *)*((void *)v8 + 7);
  id v23 = _NSConcreteStackBlock;
  uint64_t v24 = 3221225472;
  id v25 = sub_10034C8B0;
  id v26 = &unk_10072E198;
  id v27 = v18;
  id v28 = v19;
  id v21 = v18;
  [v20 setInvalidationHandler:&v23];
  objc_msgSend(*((id *)v8 + 7), "activate", v23, v24, v25, v26);

  id v8 = v21;
LABEL_7:

  return v8;
}

void sub_10034C4E8(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 134218240;
    uint64_t v6 = v3;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "PDApplicationAuthorizationHandle (%p): connection %p remotely interrupted.", (uint8_t *)&v5, 0x16u);
  }

  [*(id *)(a1 + 40) invalidate];
  sub_10034C5B8(*(void *)(a1 + 32), 1, 0);
}

void sub_10034C5B8(uint64_t a1, int a2, void *a3)
{
  unint64_t v5 = a3;
  if (!a1)
  {
LABEL_25:

    return;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (*(unsigned char *)(a1 + 50))
  {
    id v6 = 0;
    if (!v5) {
      goto LABEL_18;
    }
    __int16 v7 = *(void **)(a1 + 40);
    if (!v7) {
      goto LABEL_18;
    }
    id v8 = objc_retainBlock((id)v5);
    [v7 addObject:v8];

    id v6 = 0;
LABEL_17:
    unint64_t v5 = 0;
LABEL_18:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    if (v5 | (unint64_t)v6)
    {
      id v27 = (id)a1;
      if (v5) {
        (*(void (**)(unint64_t, id))(v5 + 16))(v5, v27);
      }
      if (v6) {
        (*((void (**)(id, id))v6 + 2))(v6, v27);
      }
    }
    goto LABEL_25;
  }
  *(unsigned char *)(a1 + 50) = 1;
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;

  int v11 = 0;
  if (a2 != 2) {
    int v11 = *(void **)(a1 + 80);
  }
  id v12 = v11;
  objc_super v13 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;

  if (v9)
  {
    long long v14 = *(void **)(a1 + 64);
    if (v14)
    {
      [v14 invalidate];
      unint64_t v15 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;
    }
    id v16 = objc_alloc_init((Class)NSMutableArray);
    id v17 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v16;

    if (v5)
    {
      id v18 = *(void **)(a1 + 40);
      id v19 = objc_retainBlock((id)v5);
      [v18 addObject:v19];
    }
    if (a2 == 1)
    {
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10034CDD0;
      v28[3] = &unk_10074A398;
      id v20 = &v29;
      id v29 = v9;
      id v30 = v12;
      id v21 = v9;
      id v22 = v12;
      id v6 = objc_retainBlock(v28);
      id v23 = v30;
    }
    else
    {
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_10034C98C;
      v35[3] = &unk_10074A348;
      id v20 = &v36;
      id v24 = v9;
      id v36 = v24;
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10034CB9C;
      v31[3] = &unk_10074A370;
      id v32 = v12;
      id v33 = v24;
      uint64_t v34 = objc_retainBlock(v35);
      id v23 = v34;
      id v25 = v24;
      id v26 = v12;
      id v6 = objc_retainBlock(v31);
    }
    goto LABEL_17;
  }
  __break(1u);
}

void sub_10034C8B0(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 134218240;
    uint64_t v6 = v3;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "PDApplicationAuthorizationHandle (%p): connection %p remotely invalidated.", (uint8_t *)&v5, 0x16u);
  }

  sub_10034C5B8(*(void *)(a1 + 32), 1, 0);
}

void sub_10034C978(uint64_t a1, void *a2)
{
  if (a1) {
    sub_10034C5B8(a1, 0, a2);
  }
}

void sub_10034C98C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 134218240;
    id v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "PDApplicationAuthorizationHandle (%p): connection %p locally invalidated.", (uint8_t *)&v7, 0x16u);
  }

  [*(id *)(a1 + 32) invalidate];
  id v6 = v3;
  sub_10034CA70((uint64_t)v6);
}

void sub_10034CA70(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    id v3 = [*(id *)(a1 + 40) copy];
    uint64_t v4 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;

    os_unfair_lock_unlock(v2);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        __int16 v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8 * (void)v9) + 16))(*(void *)(*((void *)&v10 + 1) + 8 * (void)v9));
          __int16 v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
  }
}

void sub_10034CB9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) invalidate];
  if (atomic_exchange(v3 + 49, 1u))
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10034CCE0;
    v9[3] = &unk_10073D508;
    void v9[4] = v3;
    uint64_t v4 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    id v5 = [v4 remoteObjectProxyWithErrorHandler:v9];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10034CDBC;
    v7[3] = &unk_10072E598;
    id v6 = *(id *)(a1 + 48);
    void v7[4] = v3;
    id v8 = v6;
    [v5 detachWithReply:v7];
  }
}

void sub_10034CCE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 134218242;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "PDApplicationAuthorizationHandle (%p): failed to notify remote of local invalidation - %@.", (uint8_t *)&v6, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10034CDBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10034CDD0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = a2;
  [v2 invalidate];
  sub_10034CA70((uint64_t)v3);
}

void sub_10034CE24(os_unfair_lock_s *a1)
{
  id v1 = (id *)a1;
  if (a1)
  {
    uint64_t v2 = a1 + 4;
    os_unfair_lock_lock(a1 + 4);
    if (!*((unsigned char *)v1 + 48))
    {
      __break(1u);
      return;
    }
    if (*((unsigned char *)v1 + 50))
    {
      id v1 = 0;
    }
    else
    {
      id v3 = [PDApplicationAuthorizationHandleRegistrationState alloc];
      id v4 = v1[3];
      id v5 = v1[4];
      int v6 = [v1[8] endpoint];
      id v1 = sub_10034BF54((id *)&v3->super.isa, v4, v5, v6);
    }
    os_unfair_lock_unlock(v2);
  }
  uint64_t v7 = v1;
}

void sub_10034D238(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 134218240;
    uint64_t v6 = v3;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "PDApplicationAuthorizationHandle (%p): ui-connection %p remotely interrupted.", (uint8_t *)&v5, 0x16u);
  }

  [*(id *)(a1 + 40) invalidate];
  sub_10034C5B8(*(void *)(a1 + 32), 2, 0);
}

void sub_10034D308(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 134218240;
    uint64_t v6 = v3;
    __int16 v7 = 2048;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "PDApplicationAuthorizationHandle (%p): ui-connection %p remotely invalidated.", (uint8_t *)&v5, 0x16u);
  }

  sub_10034C5B8(*(void *)(a1 + 32), 2, 0);
}

uint64_t sub_10034D3D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    int v5 = *(void **)(a1 + 56);
    if (v3)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10034D4AC;
      v7[3] = &unk_1007378B8;
      id v8 = v3;
      a1 = [v5 remoteObjectProxyWithErrorHandler:v7];
    }
    else
    {
      a1 = [v5 remoteObjectProxy];
    }
    os_unfair_lock_unlock(v4);
  }

  return a1;
}

uint64_t sub_10034D4AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10034D774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10034DA1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10034DA30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10034E020(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = [[CreditInstallmentPlanLineItem alloc] initWithInstallmentPlanLineItem:v5 forInstallmentPlanPID:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];

  uint64_t v6 = +[NSNumber numberWithUnsignedInteger:a3];
  [(SQLiteEntity *)v8 setValue:v6 forProperty:@"order_index"];

  __int16 v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 48) addObject:v8];
    __int16 v7 = v8;
  }
}

void sub_10034E218(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = [[CreditInstallmentPlanLineItem alloc] initWithInstallmentPlanLineItem:v5 forInstallmentPlanPaymentPID:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];

  uint64_t v6 = +[NSNumber numberWithUnsignedInteger:a3];
  [(SQLiteEntity *)v8 setValue:v6 forProperty:@"order_index"];

  __int16 v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 48) addObject:v8];
    __int16 v7 = v8;
  }
}

void sub_10034E54C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKCreditInstallmentPlanLineItem);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  __int16 v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    __int16 v7 = v8;
  }
}

void sub_10034E860(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditInstallmentPlanLineItem setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10034E8B8(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditInstallmentPlanLineItem *)v3 setAmount:v4];
}

void sub_10034E91C(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v4 = a2;
  -[PKCreditInstallmentPlanLineItem setDuration:](v4, "setDuration:", [a3 unsignedIntegerValue]);
}

void sub_10034E974(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
}

void sub_10034E97C(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v4 = a2;
  -[PKCreditInstallmentPlanLineItem setState:](v4, "setState:", [a3 integerValue]);
}

void sub_10034E9D4(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
}

void sub_10034E9DC(id a1, PKCreditInstallmentPlanLineItem *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKCreditInstallmentPlanLineItem *)v3 setPaymentsToDateAmount:v4];
}

void sub_10034F86C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc_init((Class)PKCloudStoreRecordFetchTask);
  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];

  uint64_t v9 = *(void *)(a1 + 72);
  if (v9 != 0x7FFFFFFFFFFFFFFFLL
    && *(void *)(a1 + 80) != 0x7FFFFFFFFFFFFFFFLL
    && *(void *)(a1 + 88) != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v10 = *(id *)(a4 + 8 * v9);
    id v11 = [*(id *)(a4 + 8 * *(void *)(a1 + 80)) integerValue];
    id v12 = *(id *)(a4 + 8 * *(void *)(a1 + 88));
    if ([v10 length])
    {
      if (v12)
      {
        NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
        id v27 = v12;
        long long v13 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      }
      else
      {
        long long v13 = 0;
      }
      long long v14 = +[NSError errorWithDomain:v10 code:v11 userInfo:v13];
      if (v12) {
    }
      }
    else
    {
      long long v14 = 0;
    }
    [v8 setLastError:v14];
  }
  uint64_t v15 = *(void *)(a1 + 96);
  if (v15 != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v16 = [*(id *)(a4 + 8 * v15) longLongValue];
    if (v16)
    {
      id v17 = +[CloudStoreZone cloudStoreZoneWithPID:v16 inDatabase:*(void *)(a1 + 40)];
      [v8 setCloudStoreZone:v17];
    }
  }
  uint64_t v18 = [v8 identifier];
  if (v18 && (id v19 = (void *)v18, v20 = [v8 type], v19, v20))
  {
    [*(id *)(a1 + 56) safelyAddObject:v8];
  }
  else
  {
    id v21 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = 138412290;
      id v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Deleting PKCloudStoreRecordFetchTask %@ since its in an invalid state", (uint8_t *)&v24, 0xCu);
    }

    id v22 = *(void **)(a1 + 48);
    id v23 = +[NSNumber numberWithLongLong:a2];
    objc_msgSend(v22, "pk_safelyAddObject:", v23);
  }
}

void sub_10034FE70(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  -[PKCloudStoreRecordFetchTask setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10034FEC8(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  -[PKCloudStoreRecordFetchTask setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_10034FF20(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCloudStoreRecordFetchTask *)v3 setStartDate:v4];
}

void sub_10034FF80(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCloudStoreRecordFetchTask *)v3 setEndDate:v4];
}

void sub_10034FFE0(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v4 = a2;
  -[PKCloudStoreRecordFetchTask setBackoffLevel:](v4, "setBackoffLevel:", [a3 integerValue]);
}

void sub_100350038(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCloudStoreRecordFetchTask *)v3 setNextPossibleFetchDate:v4];
}

void sub_100350098(id a1, PKCloudStoreRecordFetchTask *a2, id a3)
{
}

id sub_100350884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100350A7C(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferences setRequiresConfirmation:](v4, "setRequiresConfirmation:", [a3 BOOLValue]);
}

void sub_100350AD4(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferences setCanReceiveFormalPaymentRequests:](v4, "setCanReceiveFormalPaymentRequests:", [a3 BOOLValue]);
}

void sub_100350B2C(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferences setDirty:](v4, "setDirty:", [a3 BOOLValue]);
}

void sub_100350B84(id a1, PKPeerPaymentPreferences *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentPreferences *)v3 setLastUpdated:v4];
}

void sub_100350DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100350DD4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidateWithReason:@"handle remotely invalidated"];
}

void sub_100350E1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (void *)WeakRetained[1];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100350EB8;
    v4[3] = &unk_10074A6B0;
    id v5 = WeakRetained;
    [v3 handleOutstandingMessage:v4];
  }
}

id sub_100350EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleOutstandingMessage:a2 messageHandled:a3];
}

void sub_100351140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100351170(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = [objc_alloc((Class)PKProvisioningContinuityDiscoveryResponseMessage) initWithProximityVerification:v5];
    id v7 = *(void **)(*(void *)(a1 + 32) + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100351274;
    v8[3] = &unk_10073E058;
    objc_copyWeak(&v9, (id *)(a1 + 40));
    [v7 sendMessage:v6 completion:v8];
    objc_destroyWeak(&v9);
  }
  else
  {
    [*(id *)(a1 + 32) _invalidateWithReason:@"unable to verify proximity"];
  }
}

void sub_100351260(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100351274(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _invalidateWithReason:@"Failed to send message"];
  }
}

uint64_t sub_1003514D4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, BOOL, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2 != 0, a2);
}

void sub_100351588(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDProvisioningContinuityHostManager: sending continuity prompt notification", buf, 2u);
  }

  id v5 = PKLocalizedCredentialString(@"CONTINUITY_PROVISIONING_PROMPT_NOTIFICATION_TITLE");
  id v6 = [*(id *)(a1 + 32) localizedDescription];
  id v7 = [v3 deviceName];
  id v8 = PKLocalizedCredentialString(@"CONTINUITY_PROVISIONING_PROMPT_NOTIFICATION_DESCRIPTION", @"%@%@", v6, v7);

  id v9 = [PDUserNotificationProvisioningContinuityPrompt alloc];
  id v10 = objc_alloc_init((Class)NSUUID);
  id v11 = [v10 UUIDString];
  id v12 = [(PDUserNotificationProvisioningContinuityPrompt *)v9 initWithTitle:v5 message:v8 continuitySessionIdentifier:v11];
  uint64_t v13 = *(void *)(a1 + 40);
  long long v14 = *(void **)(v13 + 56);
  *(void *)(v13 + 56) = v12;

  [*(id *)(*(void *)(a1 + 40) + 32) insertUserNotification:*(void *)(*(void *)(a1 + 40) + 56)];
}

void sub_100351824(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100351840(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDProvisioningContinuityHostManager: Presenting remote interface", buf, 2u);
    }

    v12[0] = PKPassbookUIServiceProvisioningContinuityHandleTransferToken;
    v12[1] = PKPassbookUIServiceProvisioningContinuityPassUniqueID;
    uint64_t v5 = *(void *)(a1 + 32);
    v13[0] = v3;
    v13[1] = v5;
    v12[2] = PKPassbookUIServiceProvisioningContinuityType;
    v13[2] = PKPassbookUIServiceProvisioningContinuityTypeCarKey;
    id v6 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:3];
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 24);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100351A14;
    v9[3] = &unk_10074A750;
    objc_copyWeak(&v10, (id *)(a1 + 48));
    sub_100209660(v7, v6, v9);
    objc_destroyWeak(&v10);
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained _invalidateWithReason:@"unable to detach handle"];
  }
}

void sub_1003519F8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100351A14(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _invalidateWithReason:@"unable to present remote alert"];
  }
}

uint64_t sub_100351FEC(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      uint64_t v7 = v6;
      if (v5 && v6)
      {
        id v8 = [*(id *)(a1 + 32) objectForKey:v5];
        id v9 = v8;
        if (v8)
        {
          [v8 addObject:v7];
        }
        else
        {
          id v10 = *(void **)(a1 + 32);
          id v11 = +[NSMutableSet setWithObject:v7];
          [v10 setObject:v11 forKey:v5];
        }
      }

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003520DC(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AppletSubcredential alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(AppletSubcredential *)v5 appletSubcredential];
  [v3 addObject:v4];
}

uint64_t sub_100352354(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[AppletSubcredential alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v4 = v3;
  if (v3)
  {
    id v6 = v3;
    id v3 = (AppletSubcredential *)[*(id *)(a1 + 40) addObject:v3];
    id v4 = v6;
  }
  return _objc_release_x1(v3, v4);
}

uint64_t sub_100352738(uint64_t a1)
{
  uint64_t v2 = objc_msgSend(*(id *)(a1 + 64), "appletSubcredentialsInDatabase:forPaymentApplicationPID:", *(void *)(a1 + 32), objc_msgSend(*(id *)(a1 + 40), "persistentID"));
  id v3 = [v2 mutableCopy];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v4 = *(id *)(a1 + 48);
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v25;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v25 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(a1 + 56);
        id v10 = [*(id *)(a1 + 64) insertOrUpdateAppletSubcredential:*(void *)(*((void *)&v24 + 1) + 8 * (void)v8) withPaymentApplication:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 32)];
        [v9 addObject:v10];

        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v6);
  }

  [v3 minusSet:*(void *)(a1 + 48)];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v11 = v3;
  id v12 = [v11 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v21;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v21 != v14) {
          objc_enumerationMutation(v11);
        }
        id v16 = *(void **)(a1 + 64);
        id v17 = objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v15), "identifier", (void)v20);
        uint64_t v18 = [v16 appletSubcredentialWithIdentifier:v17 inDatabase:*(void *)(a1 + 32)];

        [v18 deleteFromDatabase];
        uint64_t v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [v11 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v13);
  }

  return 1;
}

void sub_100352AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100352B14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) initWithPropertyValues:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  if (v5)
  {
    id v6 = [*(id *)(a1 + 56) aliroGroupResolvingKeys];
    if ([v6 count]) {
      id v7 = +[AppletSubcredentialAliroGroupResolvingKey insertAliroGroupResolvingKeys:v6 withAppletSubcredential:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) inDatabase:*(void *)(a1 + 48)];
    }
    id v8 = +[AppletSubcredentialRangingSuspensionReasons insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) forPaymentApplication:*(void *)(a1 + 64) withReasons:0 inDatabase:*(void *)(a1 + 48)];
  }
  return v5 != 0;
}

uint64_t sub_1003532CC(uint64_t a1)
{
  +[AppletSubcredentialAliroGroupResolvingKey deleteEntitiesInDatabase:forAppletSubcredentialPID:](AppletSubcredentialAliroGroupResolvingKey, "deleteEntitiesInDatabase:forAppletSubcredentialPID:", *(void *)(a1 + 32), [*(id *)(a1 + 40) persistentID]);
  if ([*(id *)(a1 + 48) count]) {
    id v2 = +[AppletSubcredentialAliroGroupResolvingKey insertAliroGroupResolvingKeys:*(void *)(a1 + 48) withAppletSubcredential:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 32)];
  }
  return 1;
}

id sub_10035350C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

BOOL sub_100353528(id a1, PKPassEntitlement *a2)
{
  return [(PKPassEntitlement *)a2 active];
}

void sub_1003538F0(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1003538F8(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100353950(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAppletSubcredential *)a2 sharingConfiguration];
  id v5 = [v4 unsignedIntegerValue];

  [v6 setMaxNumberOfSharedCredentials:v5];
}

void sub_1003539C0(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1003539C8(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1003539D0(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1003539D8(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_1003539E0(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAppletSubcredential *)a2 sharingConfiguration];
  id v5 = [v4 BOOLValue];

  [v6 setSharingRequiresPassword:v5];
}

void sub_100353A50(id a1, PKAppletSubcredential *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    id v5 = a2;
    id v6 = objc_alloc((Class)NSUUID);
    id v7 = v4;
    id v8 = [v7 bytes];

    id v9 = [v6 initWithUUIDBytes:v8];
    [(PKAppletSubcredential *)v5 setSharingSessionIdentifier:v9];
  }
}

void sub_100353AF8(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_100353B00(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v6 = [(PKAppletSubcredential *)a2 sharingConfiguration];
  id v5 = [v4 unsignedIntegerValue];

  [v6 setNumberOfShareableCredentials:v5];
}

void sub_100353B70(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setSupportedRadioTechnologies:](v4, "setSupportedRadioTechnologies:", [a3 unsignedIntegerValue]);
}

void sub_100353BC8(id a1, PKAppletSubcredential *a2, id a3)
{
}

void sub_100353BD0(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setIsOnlineImmobilizerToken:](v4, "setIsOnlineImmobilizerToken:", [a3 BOOLValue]);
}

void sub_100353C28(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a3;
  id v8 = [(PKAppletSubcredential *)a2 sharingConfiguration];
  id v5 = objc_alloc((Class)PKPassShareActivationOptions);
  id v6 = [v4 componentsSeparatedByString:@","];

  id v7 = [v5 initWithCarKeyIdentifiers:v6];
  [v8 setActivationOptions:v7];
}

void sub_100353CD4(id a1, PKAppletSubcredential *a2, id a3)
{
  id v4 = a2;
  -[PKAppletSubcredential setAllSupportedRadioTechnologies:](v4, "setAllSupportedRadioTechnologies:", [a3 unsignedIntegerValue]);
}

void sub_100353D2C(id a1, PKAppletSubcredential *a2, id a3)
{
  uint64_t v3 = a2;
  [(PKAppletSubcredential *)v3 setCarKeyVehicleVersion:PKAppletSubcredentialCarKeyVehicleVersionFromString()];
}

void sub_100353D84(id a1, PKAppletSubcredential *a2, id a3)
{
  uint64_t v3 = a2;
  [(PKAppletSubcredential *)v3 setCarKeyServerVersion:PKAppletSubcredentialCarKeyServerVersionFromString()];
}

void sub_100353DDC(id a1, PKAppletSubcredential *a2, id a3)
{
  uint64_t v3 = a2;
  [(PKAppletSubcredential *)v3 setKeyClass:PKAppletSubcredentialKeyClassFromString()];
}

void sub_100353E34(id a1, PKAppletSubcredential *a2, id a3)
{
  uint64_t v3 = a2;
  [(PKAppletSubcredential *)v3 setCredentialAuthorityType:PKAppletSubcredentialCredentialAuthorityTypeFromString()];
}

void sub_100354D78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v13 = objc_alloc_init((Class)PKPeerPaymentPendingRequest);
  objc_msgSend(*(id *)(a1 + 48), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));
  [v6 indexOfObject:@"amount"];
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v7 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  id v8 = [v6 indexOfObject:@"currency"];

  id v9 = (NSString *)*(id *)(a4 + 8 * (void)v8);
  if (v7)
  {
    id v10 = +[NSDecimalNumber notANumber];
    unsigned __int8 v11 = [(NSDecimalNumber *)v7 isEqualToNumber:v10];

    if ((v11 & 1) == 0)
    {
      if (v9)
      {
        id v12 = PKCurrencyAmountCreate(v7, v9, 0);
        [v13 setCurrencyAmount:v12];
      }
    }
  }
  [*(id *)(a1 + 40) addObject:v13];
}

void sub_100355110(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_100355118(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_100355120(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_100355128(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_100355130(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_100355138(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentPendingRequest *)v3 setExpiryDate:v4];
}

void sub_100355198(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentPendingRequest *)v3 setRequestDate:v4];
}

void sub_1003551F8(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPeerPaymentPendingRequest *)v3 setLastDismissedDate:v4];
}

void sub_100355258(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@"-"];
  [(PKPeerPaymentPendingRequest *)v4 setActions:v5];
}

void sub_1003552C4(id a1, PKPeerPaymentPendingRequest *a2, id a3)
{
}

void sub_10035553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100355554(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithImage:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
}

id sub_1003556AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100355798(id a1, PKPassTileImage *a2, id a3)
{
}

void sub_1003557A0(id a1, PKPassTileImage *a2, id a3)
{
}

void sub_1003557A8(id a1, PKPassTileImage *a2, id a3)
{
  uint64_t v3 = a2;
  PKSemanticColorFromString();
  [(PKPassTileImage *)v3 setTintColor:0];
}

void sub_1003557F8(id a1, PKPassTileImage *a2, id a3)
{
  id v4 = a2;
  -[PKPassTileImage setHasColorContent:](v4, "setHasColorContent:", [a3 BOOLValue]);
}

void sub_1003559D4(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountEvent *)v5 event];
  [v3 addObject:v4];
}

void sub_100355C58(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountEvent *)v5 event];
  [v3 addObject:v4];
}

void sub_100355FF4(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountEvent *)v5 event];
  [v3 addObject:v4];
}

void sub_1003562C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003562E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v8 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

void sub_10035658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003565AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v8 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

void sub_1003568E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100356908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v8 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

void sub_100356CF0(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountEvent *)v5 event];
  [v3 addObject:v4];
}

void sub_100356F18(uint64_t a1, uint64_t a2)
{
  id v6 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountEvent *)v6 event];
  id v5 = [v4 identifier];
  objc_msgSend(v3, "pk_safelyAddObject:", v5);
}

void sub_1003571D4(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountEvent *)v5 event];
  [v3 addObject:v4];
}

void sub_1003574A4(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountEvent alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountEvent *)v5 event];
  [v3 addObject:v4];
}

uint64_t sub_1003585EC(uint64_t a1)
{
  return 1;
}

id sub_100358A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100359684(id a1, PKAccountEvent *a2, id a3)
{
}

void sub_10035968C(id a1, PKAccountEvent *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEvent setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003596E4(id a1, PKAccountEvent *a2, id a3)
{
}

void sub_1003596EC(id a1, PKAccountEvent *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountEvent *)v3 setDate:v4];
}

void sub_10035974C(id a1, PKAccountEvent *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountEvent *)v3 setExpirationDate:v4];
}

void sub_1003597AC(id a1, PKAccountEvent *a2, id a3)
{
  id v4 = a2;
  -[PKAccountEvent setBlockNotification:](v4, "setBlockNotification:", [a3 BOOLValue]);
}

void sub_100359804(id a1, PKAccountEvent *a2, id a3)
{
}

void sub_10035B4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10035B504(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int64(a2, 2, 1);
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

uint64_t sub_10035B69C(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_text(a2, 1, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 48);
      id v5 = *(void **)(a1 + 56);
      id v7 = *(void **)(a1 + 40);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v9 = [v5 _predicateForPID:v8];
      id v10 = +[SQLiteEntity queryWithDatabase:v6 predicate:v9];
      unsigned __int8 v11 = [v5 regionsFromQuery:v10];
      [v7 addObjectsFromArray:v11];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_10035BC60(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_alloc_init((Class)PKWorldRegion);
  objc_msgSend(v6, "setType:", objc_msgSend(*(id *)a4, "integerValue"));
  [*(id *)(a4 + 8) doubleValue];
  CLLocationDegrees v8 = v7;
  [*(id *)(a4 + 16) doubleValue];
  CLLocationCoordinate2D v30 = CLLocationCoordinate2DMake(v8, v9);
  double latitude = v30.latitude;
  double longitude = v30.longitude;
  if (!CLLocationCoordinate2DIsValid(v30))
  {
    double longitude = kCLLocationCoordinate2DInvalid.longitude;
    double latitude = kCLLocationCoordinate2DInvalid.latitude;
  }
  objc_msgSend(*(id *)(a4 + 24), "doubleValue", kCLLocationCoordinate2DInvalid.latitude);
  double v13 = v12;
  [*(id *)(a4 + 32) doubleValue];
  objc_msgSend(v6, "setDisplayRegion:", latitude, longitude, v13, v14);
  [v6 setAbbreviationCode:*(void *)(a4 + 40)];
  [v6 setLocalizedName:*(void *)(a4 + 48)];
  [v6 setLocaleIdentifier:*(void *)(a4 + 56)];
  [v6 setIdentifier:*(void *)(a4 + 64)];
  id v15 = *(id *)(a4 + 72);
  id v16 = +[NSNull null];
  char v17 = PKEqualObjects();

  if ((v17 & 1) == 0)
  {
    uint64_t v18 = [a1[6] _predicateForPID:v15];
    v29[0] = v18;
    id v19 = a1[6];
    long long v20 = [v6 localeIdentifier];
    long long v21 = [v19 _predicateForLocaleIdentifier:v20];
    v29[1] = v21;
    long long v22 = +[NSArray arrayWithObjects:v29 count:2];
    long long v23 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v22];

    id v24 = a1[6];
    long long v25 = [a1[4] database];
    long long v26 = [v24 queryWithDatabase:v25 predicate:v23];
    long long v27 = [v24 regionsFromQuery:v26];

    if ([v27 count])
    {
      id v28 = [v27 firstObject];
    }
    else
    {
      id v28 = 0;
    }
    [v6 setParentRegion:v28];
  }
  [a1[5] addObject:v6];
}

uint64_t sub_10035C180(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_double(a2, 1, *(double *)(a1 + 32));
  sqlite3_bind_double(a2, 2, *(double *)(a1 + 40));
  return sub_1000140E0((uint64_t)SQLiteDatabase, a2);
}

sqlite3 **sub_10035C7FC(sqlite3 **result, void *a2)
{
  if (result) {
    return sub_10035C80C(result, a2, 0);
  }
  return result;
}

sqlite3 **sub_10035C80C(sqlite3 **a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (a3) {
      *a3 = 0;
    }
    if (([v5 isFileURL] & 1) == 0)
    {

      +[NSException raise:NSInvalidArgumentException format:@"Invalid database URL"];
      a1 = 0;
    }
    v20.receiver = a1;
    v20.super_class = (Class)SQLiteDatabase;
    double v7 = (sqlite3 **)objc_msgSendSuper2(&v20, "init");
    a1 = v7;
    if (v7)
    {
      v7[1] = 0;
      id v8 = [v6 path];
      CLLocationDegrees v9 = a1 + 2;
      int v10 = sqlite3_open_v2((const char *)[v8 fileSystemRepresentation], a1 + 2, 3145734, 0);
      if (!v10) {
        goto LABEL_13;
      }
      int v11 = v10;
      double v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109378;
        int v22 = v11;
        __int16 v23 = 2112;
        id v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SQLiteDatabase: Could not open database, resetting: [%d, %@]", buf, 0x12u);
      }

      int v13 = sub_10035CAF0((uint64_t)a1, v8);
      int v14 = v13;
      if (a3) {
        *a3 = 1;
      }
      if (!v13)
      {
LABEL_13:
        int v15 = sqlite3_exec(*v9, "PRAGMA cache_size=512;", 0, 0, 0);
        if (v15 != 26 && v15 != 11) {
          goto LABEL_28;
        }
        int v17 = v15;
        double v12 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109378;
          int v22 = v17;
          __int16 v23 = 2112;
          id v24 = v8;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SQLiteDatabase: Resetting after error: [%d, %@]", buf, 0x12u);
        }

        int v18 = sub_10035CAF0((uint64_t)a1, v8);
        int v14 = v18;
        if (a3) {
          *a3 = 1;
        }
        if (!v18)
        {
          sqlite3_exec(*v9, "PRAGMA cache_size=512;", 0, 0, 0);
LABEL_28:
          sqlite3_busy_timeout(*v9, 3600000);
LABEL_29:

          goto LABEL_30;
        }
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109378;
        int v22 = v14;
        __int16 v23 = 2112;
        id v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "SQLiteDatabase: Could not setup database: [%d, %@]", buf, 0x12u);
      }

      a1 = 0;
      if (a3) {
        *a3 = 0;
      }
      goto LABEL_29;
    }
  }
LABEL_30:

  return a1;
}

uint64_t sub_10035CAF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  id v4 = (sqlite3 **)(a1 + 16);
  id v5 = *(sqlite3 **)(a1 + 16);
  if (!v5) {
    goto LABEL_12;
  }
  id v6 = *(const void **)(a1 + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 32) = 0;
    id v5 = *(sqlite3 **)(a1 + 16);
    if (!v5)
    {
      int v10 = 0;
LABEL_11:
      sqlite3_close_v2(v10);
      PKAccountEvent *v4 = 0;
LABEL_12:
      id v11 = objc_alloc_init((Class)NSFileManager);
      [v11 removeItemAtPath:v3 error:0];

      goto LABEL_13;
    }
  }
  int v14 = 0;
  int v7 = sqlite3_file_control(v5, 0, 101, &v14);
  if (v7)
  {
    int v8 = v7;
    CLLocationDegrees v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      id v16 = v5;
      __int16 v17 = 1024;
      int v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to delete db handle %p!  SQLite error %i.\n", buf, 0x12u);
    }

    int v10 = *v4;
    goto LABEL_11;
  }
  sqlite3_close_v2(*v4);
  PKAccountEvent *v4 = 0;
LABEL_13:
  uint64_t v12 = sqlite3_open_v2((const char *)[v3 fileSystemRepresentation], v4, 3145734, 0);
LABEL_14:

  return v12;
}

sqlite3 *sub_10035CCC4(sqlite3 *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = (const void *)*((void *)result + 4);
    if (v2)
    {
      CFRelease(v2);
      *((void *)v1 + 4) = 0;
    }
    uint64_t result = (sqlite3 *)*((void *)v1 + 2);
    if (result)
    {
      uint64_t result = (sqlite3 *)sqlite3_close_v2(result);
      *((void *)v1 + 2) = 0;
    }
  }
  return result;
}

uint64_t sub_10035CD0C(uint64_t a1, sqlite3_stmt *a2)
{
  self;
  unsigned __int8 v4 = 0;
  sub_10001412C((uint64_t)SQLiteDatabase, a2, 0, &v4);
  return v4;
}

void sub_10035CD58(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (a1)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10035CDF0;
    v5[3] = &unk_10072E598;
    void v5[4] = a1;
    id v6 = v3;
    sub_100012974(a1, v5);
  }
}

void sub_10035CDF0(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

BOOL sub_10035CE40(BOOL result, uint64_t a2)
{
  if (result)
  {
    BOOL v2 = result;
    id v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"PRAGMA user_version=%ld", a2);
    BOOL v4 = sub_10000C100(v2, v3);

    return v4;
  }
  return result;
}

uint64_t sub_10035CEAC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10035CF80;
  v3[3] = &unk_10073AE78;
  void v3[4] = &v4;
  sub_1000128B8(a1, @"PRAGMA user_version;", 0, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10035CF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10035CF80(uint64_t a1, sqlite3_stmt *a2)
{
  self;
  char v5 = 0;
  sub_10001412C((uint64_t)SQLiteDatabase, a2, &v5, 0);
  if (v5)
  {
    id v4 = SQLiteCopyFoundationNumberValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (int)[v4 intValue];
  }
}

BOOL sub_10035D008(BOOL result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    BOOL v3 = result;
    id v4 = +[SQLiteTable SQLToAddColumnWithSQL:a3 toTableNamed:a2];
    BOOL v5 = sub_10000C100(v3, v4);

    return v5;
  }
  return result;
}

BOOL sub_10035D060(BOOL a1, void *a2, void *a3)
{
  BOOL v3 = a1;
  if (a1)
  {
    CLLocationDegrees v9 = a3;
    id v5 = a3;
    id v6 = a2;
    uint64_t v7 = +[NSArray arrayWithObjects:&v9 count:1];

    BOOL v3 = sub_10035D120(v3, v6, v7, 0);
  }
  return v3;
}

BOOL sub_10035D120(BOOL a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v28 = a3;
  id v8 = a4;
  long long v27 = v7;
  if (a1)
  {
    CLLocationDegrees v9 = +[SQLiteMetaEntity anyInDatabase:a1 withType:@"table" name:v7];
    id v29 = [v9 SQL];

    int v10 = +[SQLiteTable tableWithSQL:v29];
    if (v10)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v11 = v28;
      id v12 = [v11 countByEnumeratingWithState:&v47 objects:v54 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v48;
        while (2)
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v48 != v13) {
              objc_enumerationMutation(v11);
            }
            if (![v10 removeColumn:*(void *)(*((void *)&v47 + 1) + 8 * i)])
            {
              a1 = 0;
              goto LABEL_24;
            }
          }
          id v12 = [v11 countByEnumeratingWithState:&v47 objects:v54 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }

      id v11 = [v10 columnNames];
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id v15 = [v8 allKeys];
      id v16 = [v15 countByEnumeratingWithState:&v43 objects:v53 count:16];
      if (v16)
      {
        uint64_t v17 = *(void *)v44;
        while (2)
        {
          for (j = 0; j != v16; j = (char *)j + 1)
          {
            if (*(void *)v44 != v17) {
              objc_enumerationMutation(v15);
            }
            uint64_t v19 = *(void *)(*((void *)&v43 + 1) + 8 * (void)j);
            objc_super v20 = [v8 objectForKey:v19];
            LODWORD(v19) = [v10 renameColumn:v19 to:v20];

            if (!v19)
            {
              a1 = 0;
              goto LABEL_23;
            }
          }
          id v16 = [v15 countByEnumeratingWithState:&v43 objects:v53 count:16];
          if (v16) {
            continue;
          }
          break;
        }
      }

      [v10 setTableName:@"_temporary_for_table_alteration_"];
      id v21 = objc_alloc_init((Class)NSMutableArray);
      v52[0] = @"trigger";
      v52[1] = @"index";
      int v22 = +[NSArray arrayWithObjects:v52 count:2];
      __int16 v23 = +[SQLiteMetaEntity queryWithDatabase:a1 types:v22 tableName:v27];

      CFStringRef v51 = @"sql";
      id v24 = +[NSArray arrayWithObjects:&v51 count:1];
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_10035D6AC;
      v41[3] = &unk_100731258;
      id v25 = v21;
      id v42 = v25;
      [v23 enumeratePersistentIDsAndProperties:v24 usingBlock:v41];

      uint64_t v37 = 0;
      uint64_t v38 = &v37;
      uint64_t v39 = 0x2020000000;
      char v40 = 1;
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10035D6C0;
      v30[3] = &unk_10074AE18;
      v30[4] = a1;
      id v31 = v10;
      id v36 = &v37;
      id v32 = v11;
      id v33 = v27;
      uint64_t v34 = @"_temporary_for_table_alteration_";
      id v15 = v25;
      id v35 = v15;
      sub_10000817C(a1, v30);
      a1 = *((unsigned char *)v38 + 24) != 0;

      _Block_object_dispose(&v37, 8);
LABEL_23:

LABEL_24:
    }
    else
    {
      a1 = 0;
    }
  }
  return a1;
}

void sub_10035D5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10035D5D0(BOOL a1, void *a2, void *a3, void *a4)
{
  BOOL v4 = a1;
  if (a1)
  {
    id v12 = a3;
    uint64_t v13 = a4;
    id v7 = a4;
    id v8 = a3;
    id v9 = a2;
    int v10 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];

    BOOL v4 = sub_10035D120(v4, v9, 0, v10);
  }
  return v4;
}

id *sub_10035D6AC(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

uint64_t sub_10035D6C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = [*(id *)(a1 + 40) creationSQL];
  LOBYTE(v2) = sub_10000C100(v2, v3);

  if ((v2 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = +[SQLiteTable SQLToInsertColumnNames:*(void *)(a1 + 48) fromTableNamed:*(void *)(a1 + 56) intoTableNamed:*(void *)(a1 + 64)];
  LOBYTE(v4) = sub_10000C100(v4, v5);

  if ((v4 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = +[SQLiteTable SQLToDropTableNamed:*(void *)(a1 + 56)];
  LOBYTE(v6) = sub_10000C100(v6, v7);

  if ((v6 & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = +[SQLiteTable SQLToRenameTable:*(void *)(a1 + 64) to:*(void *)(a1 + 56)];
  LOBYTE(v8) = sub_10000C100(v8, v9);

  if (v8)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v10 = *(id *)(a1 + 72);
    id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v17;
      while (2)
      {
        int v14 = 0;
        do
        {
          if (*(void *)v17 != v13) {
            objc_enumerationMutation(v10);
          }
          if (!sub_10000C100(*(void *)(a1 + 32), *(void **)(*((void *)&v16 + 1) + 8 * (void)v14)))
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;

            return 0;
          }
          int v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    uint64_t result = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  }
  else
  {
LABEL_14:
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
  }
  return result;
}

BOOL sub_10035D8B4(BOOL result, uint64_t a2)
{
  if (result)
  {
    BOOL v2 = result;
    BOOL v3 = +[NSString stringWithFormat:@"DROP TABLE %@", a2];
    BOOL v4 = sub_10000C100(v2, v3);

    return v4;
  }
  return result;
}

BOOL sub_10035D91C(BOOL result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    BOOL v3 = result;
    BOOL v4 = +[SQLiteTable SQLToRenameTable:a2 to:a3];
    BOOL v5 = sub_10000C100(v3, v4);

    return v5;
  }
  return result;
}

id sub_10035D978(id a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    id v3 = [objc_alloc((Class)NSString) initWithFormat:@"SELECT name FROM sqlite_master WHERE type='table';"];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10035DA6C;
    v6[3] = &unk_10074A7A0;
    id v7 = v2;
    id v4 = v2;
    sub_1000128B8((uint64_t)v1, v3, 0, v6);
    id v1 = [v4 copy];
  }
  return v1;
}

void sub_10035DA6C(uint64_t a1, sqlite3_stmt *a2)
{
  while (1)
  {
    self;
    char v5 = 0;
    sub_10001412C((uint64_t)SQLiteDatabase, a2, &v5, 0);
    if (!v5) {
      break;
    }
    id v4 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 0);
    if (v4) {
      [*(id *)(a1 + 32) addObject:v4];
    }
  }
}

id SQLiteCopyFoundationStringValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) != 3) {
    return 0;
  }
  id v4 = objc_alloc((Class)NSString);
  char v5 = sqlite3_column_text(a1, a2);
  return [v4 initWithUTF8String:v5];
}

id sub_10035DB74(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_alloc_init((Class)NSMutableArray);
    char v5 = +[NSString stringWithFormat:@"PRAGMA TABLE_INFO(%@);", v3];

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10035DC7C;
    v8[3] = &unk_10074A7A0;
    id v9 = v4;
    id v6 = v4;
    sub_1000128B8((uint64_t)v2, v5, 0, v8);
    id v2 = [v6 copy];
  }
  return v2;
}

void sub_10035DC7C(uint64_t a1, sqlite3_stmt *a2)
{
  while (1)
  {
    self;
    char v5 = 0;
    sub_10001412C((uint64_t)SQLiteDatabase, a2, &v5, 0);
    if (!v5) {
      break;
    }
    id v4 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 1);
    if (v4) {
      [*(id *)(a1 + 32) addObject:v4];
    }
  }
}

id sub_10035DD18(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x3032000000;
    id v15 = sub_100020BDC;
    long long v16 = sub_1000210E0;
    id v17 = 0;
    id v7 = [objc_alloc((Class)NSString) initWithFormat:@"PRAGMA TABLE_INFO(%@);", v6];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10035DE84;
    v9[3] = &unk_100732630;
    id v10 = v5;
    id v11 = &v12;
    sub_1000128B8((uint64_t)a1, v7, 0, v9);
    a1 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_10035DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10035DE84(uint64_t a1, sqlite3_stmt *a2)
{
  while (1)
  {
    self;
    char v8 = 0;
    sub_10001412C((uint64_t)SQLiteDatabase, a2, &v8, 0);
    if (!v8) {
      break;
    }
    id v4 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 1);
    if (v4)
    {
      if ([*(id *)(a1 + 32) isEqualToString:v4])
      {
        id v5 = SQLiteCopyFoundationStringValueForStatementColumn(a2, 2);
        uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
        id v7 = *(void **)(v6 + 40);
        *(void *)(v6 + 40) = v5;
      }
    }
  }
}

void SQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, NSNumber *a3)
{
  id v9 = a3;
  if (!v9
    || (+[NSNull null],
        id v5 = (NSNumber *)objc_claimAutoreleasedReturnValue(),
        v5,
        v5 == v9))
  {
    sqlite3_bind_null(a1, a2);
  }
  else
  {
    uint64_t v6 = v9;
    id v7 = (const char *)[(NSNumber *)v6 objCType];
    if (!strcmp(v7, "d") || !strcmp(v7, "f") || !strcmp(v7, " "))
    {
      [(NSNumber *)v6 doubleValue];
      sqlite3_bind_double(a1, a2, v8);
    }
    else
    {
      sqlite3_bind_int64(a1, a2, [(NSNumber *)v6 longLongValue]);
    }
  }
}

void SQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, NSData *a3)
{
  id v10 = a3;
  if (!v10
    || (+[NSNull null],
        id v5 = (NSData *)objc_claimAutoreleasedReturnValue(),
        v5,
        v5 == v10))
  {
    sqlite3_bind_null(a1, a2);
  }
  else
  {
    uint64_t v6 = v10;
    NSUInteger v7 = [(NSData *)v6 length];
    double v8 = v6;
    id v9 = [(NSData *)v8 bytes];

    sqlite3_bind_blob64(a1, a2, v9, v7, 0);
  }
}

void SQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, objc_object *a3)
{
  id v5 = a3;
  if (!v5
    || (+[NSNull null],
        uint64_t v6 = (objc_object *)objc_claimAutoreleasedReturnValue(),
        v6,
        v6 == v5))
  {
LABEL_17:
    sqlite3_bind_null(a1, a2);
    goto LABEL_18;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sqlite3_bind_text(a1, a2, (const char *)[(objc_object *)v5 UTF8String], -1, 0);
    goto LABEL_18;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [(objc_object *)v5 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a1, a2, v7);
    goto LABEL_18;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v8 = v5;
    id v9 = [(objc_object *)v8 length];
    id v10 = v8;
    id v11 = [(objc_object *)v10 bytes];

    sqlite3_bind_blob64(a1, a2, v11, (sqlite3_uint64)v9, 0);
    goto LABEL_18;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = (objc_class *)objc_opt_class();
      long long v16 = NSStringFromClass(v15);
      v18[0] = 67109634;
      v18[1] = a2;
      __int16 v19 = 2112;
      objc_super v20 = v5;
      __int16 v21 = 2114;
      int v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "SQLiteBindFoundationValueToStatement: Parameter (index %i) with value '%@' is of unsupported bind type '%{public}@'.", (uint8_t *)v18, 0x1Cu);
    }
    goto LABEL_17;
  }
  uint64_t v12 = v5;
  uint64_t v13 = (const char *)[(objc_object *)v12 objCType];
  if (!strcmp(v13, "d") || !strcmp(v13, "f") || !strcmp(v13, " "))
  {
    [(objc_object *)v12 doubleValue];
    sqlite3_bind_double(a1, a2, v17);
  }
  else
  {
    sqlite3_bind_int64(a1, a2, (sqlite3_int64)[(objc_object *)v12 longLongValue]);
  }

LABEL_18:
}

id SQLiteCopyFoundationIntegerValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) != 1) {
    return 0;
  }
  id v4 = objc_alloc((Class)NSNumber);
  sqlite3_int64 v5 = sqlite3_column_int64(a1, a2);
  return [v4 initWithLongLong:v5];
}

uint64_t sub_10035E428(int a1, sqlite3_stmt *pStmt)
{
  return sqlite3_finalize(pStmt);
}

id _PDPassdPlistSafeHavenURL()
{
  CFBooleanRef v0 = [(id)CPSharedResourcesDirectory() stringByAppendingPathComponent:@"/Library/"];
  id v1 = [v0 stringByAppendingPathComponent:@"Passes/"];
  id v2 = [v1 stringByAppendingPathComponent:@"com.apple.passd_safehaven.plist"];
  id v3 = +[NSURL fileURLWithPath:v2 isDirectory:0];

  return v3;
}

id PDWritePassdPreferencesToSafeHaven()
{
  CFDictionaryRef v0 = CFPreferencesCopyMultiple(0, @"com.apple.passd", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  id v1 = _PDPassdPlistSafeHavenURL();
  id v8 = 0;
  id v2 = [(__CFDictionary *)v0 writeToURL:v1 error:&v8];
  id v3 = v8;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      CFStringRef v5 = @"YES";
    }
    else {
      CFStringRef v5 = @"NO";
    }
    uint64_t v6 = [v3 description];
    *(_DWORD *)long long buf = 138412802;
    id v10 = v1;
    __int16 v11 = 2112;
    CFStringRef v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDWritePassdPreferencesToSafeHaven: wrote to %@ successfully:(%@) error:(%@)", buf, 0x20u);
  }
  return v2;
}

void PDRestorePassdPreferences()
{
  CFDictionaryRef v0 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "PDRestorePassdPreferences: Restoring from passd.plist...", buf, 2u);
  }

  id v1 = _PDPassdPlistSafeHavenURL();
  id v22 = 0;
  id v2 = +[NSData dataWithContentsOfURL:v1 options:0 error:&v22];
  id v3 = v22;
  if (v3)
  {
    id v4 = v3;
    id v5 = 0;
    goto LABEL_6;
  }
  id v21 = 0;
  uint64_t v6 = +[NSPropertyListSerialization propertyListWithData:v2 options:0 format:0 error:&v21];
  id v4 = v21;
  id v5 = [v6 mutableCopy];

  if (v4)
  {
LABEL_6:
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "PDRestorePassdPreferences: Error reading safehaven passd plist %@", buf, 0xCu);
    }
LABEL_8:
    double v7 = v0;
    goto LABEL_9;
  }
  id v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", @"PDAvailableWhileLockedPreviousSetting", @"PDMigratedAvailableWhileLocked", @"PDDiscoveryItemStatus", @"PDDiscoveryEngagementMessageStatus", @"PDDiscoveryDismissalCountDict", @"PDDiscoveryDismissedSet", @"PDDiscoveryEngagementMessageStatus", @"PDDiscoveryExpandedSet", @"PDDiscoveryExpansionCountDict", @"PDDiscoveryNotificationsStatus", @"PDDiscoverySwipedCountDict", 0);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v8 = [v5 allKeys];
  id v9 = [v8 countByEnumeratingWithState:&v17 objects:v27 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v18;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v18 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        if ([v4 containsObject:v13]) {
          [v5 removeObjectForKey:v13];
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v17 objects:v27 count:16];
    }
    while (v10);
  }

  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "PDRestorePassdPreferences: Completed sanitizing safehaven passd.plist %@", buf, 0xCu);
  }

  CFPreferencesSetMultiple((CFDictionaryRef)v5, 0, @"com.apple.passd", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (!CFPreferencesSynchronize(@"com.apple.passd", kCFPreferencesCurrentUser, kCFPreferencesAnyHost))
  {
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      sub_100517578(v0);
    }
    goto LABEL_8;
  }
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "PDRestorePassdPreferences: Successfully restored passd.plist", buf, 2u);
  }

  double v7 = [v1 path];
  uint64_t v14 = +[NSFileManager defaultManager];
  if ([v14 fileExistsAtPath:v7])
  {
    id v16 = 0;
    [v14 removeItemAtPath:v7 error:&v16];
    id v15 = v16;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v24 = v7;
      __int16 v25 = 2112;
      long long v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "PDRestorePassdPreferences: Removed %@ with error %@", buf, 0x16u);
    }
  }
  else
  {
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "PDRestorePassdPreferences: Not removing %@ because it doesnt exist", buf, 0xCu);
    }
    id v15 = v0;
  }

LABEL_9:
}

void sub_10035EE24(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = objc_alloc((Class)PKPaymentApplicationUsageSummary);
  id v7 = [v6 _databaseInit];

  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v5 values:a3];
  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10035F1F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10035F564(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
}

void sub_10035F56C(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
}

void sub_10035F574(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentApplicationUsageSummary *)v3 setLastUsed:v4];
}

void sub_10035F5D4(id a1, PKPaymentApplicationUsageSummary *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentApplicationUsageSummary *)v3 setLastUsedTransaction:v4];
}

void sub_10035F934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10035F94C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) initWithPropertyValues:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)
    && ([*(id *)(a1 + 56) isCurrentUser] & 1) == 0)
  {
    id v5 = +[TransactionSource insertTransactionSourceWithType:2 inDatabase:*(void *)(a1 + 48)];
    id v6 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    id v7 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 persistentID]);
    [v6 setValue:v7 forProperty:@"transaction_source_pid"];
  }
  return 1;
}

uint64_t sub_1003605F8(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v7 = [*(id *)(a1 + 48) _predicateForAccountPID:v5];
      id v8 = [*(id *)(a1 + 48) queryWithDatabase:*(void *)(a1 + 32) predicate:v7];
      id v9 = [*(id *)(a1 + 48) _accountUsersWithQuery:v8];
      id v10 = [objc_alloc((Class)PKAccountUserCollection) initWithAccountUsers:v9];
      [*(id *)(a1 + 40) setObject:v10 forKey:v6];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003607BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003607D4(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 40));
  sqlite3_bind_int64(a2, 2, 1);
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      [v5 integerValue];

      if ((PKAccountStateIsTerminal() & 1) == 0) {
        ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_100360D0C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100361264(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v22 = objc_alloc_init((Class)PKAccountUser);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v22 withProperties:v7 values:a4];

  id v8 = [*(id *)(a1 + 40) database];
  id v9 = +[NSNumber numberWithLongLong:a2];
  id v10 = +[CreditAccountFeatureDescriptor creditAccountFeatureDescriptorsForAccountUserPID:v9 inDatabase:v8];
  [v22 setSupportedFeatures:v10];
  uint64_t v11 = +[AccountUserPreferences anyInDatabase:v8 forAccountUserPID:v9];
  CFStringRef v12 = [v11 accountUserPreferences];

  [v22 setPreferences:v12];
  uint64_t v13 = [v22 altDSID];
  [v22 setCurrentUser:PKAltDSIDIsCurrentUser()];

  uint64_t v14 = +[AccountUserNotificationSettings anyInDatabase:v8 forAccountUserPID:v9];
  id v15 = [v14 accountUserNotificationSettings];
  id v16 = v15;
  if (v15)
  {
    id v17 = v15;
  }
  else
  {
    id v17 = +[PKAccountUserNotificationSettings defaultNotificationSettings];
  }
  long long v18 = v17;

  [v22 setNotificationSettings:v18];
  long long v19 = *(void **)(a1 + 56);
  long long v20 = [*(id *)(a1 + 40) database];
  id v21 = [v19 _transactionSourceIdentifiersForAccountUserPID:a2 inDatabase:v20];

  [v22 setTransactionSourceIdentifiers:v21];
  if (v22) {
    [*(id *)(a1 + 48) addObject:v22];
  }
}

void sub_100361A3C(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setAccessLevel:](v4, "setAccessLevel:", [a3 integerValue]);
}

void sub_100361A94(id a1, PKAccountUser *a2, id a3)
{
}

void sub_100361A9C(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setAccountState:](v4, "setAccountState:", [a3 integerValue]);
}

void sub_100361AF4(id a1, PKAccountUser *a2, id a3)
{
}

void sub_100361AFC(id a1, PKAccountUser *a2, id a3)
{
}

void sub_100361B04(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setDirty:](v4, "setDirty:", [a3 BOOLValue]);
}

void sub_100361B5C(id a1, PKAccountUser *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountUser *)v3 setLastUpdated:v4];
}

void sub_100361BBC(id a1, PKAccountUser *a2, id a3)
{
}

void sub_100361BC4(id a1, PKAccountUser *a2, id a3)
{
}

void sub_100361BCC(id a1, PKAccountUser *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUser setIdentityStatus:](v4, "setIdentityStatus:", [a3 integerValue]);
}

void sub_100361C24(id a1, PKAccountUser *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    id v6 = [a3 componentsSeparatedByString:@","];
    id v5 = +[NSSet setWithArray:](NSSet, "setWithArray:");
    [(PKAccountUser *)v4 setAddressableHandles:v5];
  }
  else
  {
    id v6 = a2;
    [(PKAccountUser *)v6 setAddressableHandles:0];
  }
}

void sub_100361EF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) underlyingService];
  id v2 = [v3 devices];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_10036202C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) deviceIdentifier];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "underlyingService", 0);
  id v4 = [v3 devices];

  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    while (2)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        id v10 = (id)IDSCopyIDForDevice();
        id v11 = v2;
        CFStringRef v12 = v11;
        if (v10 == v11)
        {

LABEL_16:
          uint64_t v14 = *(void *)(a1 + 48);
          id v15 = [objc_alloc((Class)PKRemoteDevice) initWithIDSDevice:v9];
          (*(void (**)(uint64_t, id))(v14 + 16))(v14, v15);

          goto LABEL_17;
        }
        if (v2 && v10)
        {
          unsigned int v13 = [v10 isEqualToString:v11];

          if (v13) {
            goto LABEL_16;
          }
        }
        else
        {
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_17:
}

void sub_10036280C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    id v15 = 0;
    id v6 = +[PKSharingMessage specializedMessageFromPayload:a3 displayInformation:0 outError:&v15];
    id v7 = v15;
    id WeakRetained = PKLogFacilityTypeGetObject();
    BOOL v9 = os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT);
    if (v6) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      if (v9)
      {
        unsigned int v13 = [v5 transportIdentifier];
        uint64_t v14 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412803;
        long long v17 = v13;
        __int16 v18 = 2112;
        uint64_t v19 = v14;
        __int16 v20 = 2113;
        id v21 = v6;
        _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "IDSService<%@>: Did receive message from '%@' \n\n %{private}@", buf, 0x20u);
      }
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8));
      [WeakRetained didReceiveIDSShareMessage:v6 endpoint:v5];
    }
    else if (v9)
    {
      id v11 = [v5 transportIdentifier];
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      long long v17 = v11;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "IDSService<%@>: Received message from %@, but failed to parse message.", buf, 0x16u);
    }
  }
}

void sub_100362A8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [v3 transportIdentifier];
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412546;
    BOOL v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "IDSService<%@>: Did receive cancel message from '%@'", (uint8_t *)&v8, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8));
  [WeakRetained endpointWasRemotelyTerminated:v3];
}

void sub_1003632A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(NSObject **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100363398;
  block[3] = &unk_100731F38;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_100363398(uint64_t a1)
{
  if (*(void *)(a1 + 32) && !*(void *)(a1 + 40))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 40));
    [*(id *)(*(void *)(a1 + 48) + 48) setObject:*(void *)(a1 + 56) forKeyedSubscript:*(void *)(a1 + 32)];
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 40));
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8));
    [WeakRetained endpointWasUpdated:*(void *)(a1 + 56) oldTransportIdentifier:0 allowCreation:1];

    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [*(id *)(a1 + 56) transportIdentifier];
      int v8 = 138412290;
      id v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "IDSService<%@>: Successfully sent message", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 56) transportIdentifier];
      uint64_t v4 = *(void *)(a1 + 40);
      int v8 = 138412546;
      id v9 = v3;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "IDSService<%@>: Failed to send message with error: %@", (uint8_t *)&v8, 0x16u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

uint64_t sub_100363720(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

void sub_100363844(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40));
  id v4 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 48) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40));
  if (v4)
  {
    id v2 = [*(id *)(a1 + 48) destinationCorrelationIdentifier];
    [v4 setIdsCorrelationIdentifier:v2];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
    [WeakRetained endpointWasUpdated:v4 oldTransportIdentifier:0 allowCreation:0];
  }
}

void sub_100363D88(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setObject:a2 forKey:*(void *)(a1 + 40)];
  }
  id v3 = *(NSObject **)(a1 + 48);
  dispatch_group_leave(v3);
}

void sub_100363DCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

uint64_t sub_100363FD4(uint64_t a1, uint64_t a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = PKFamilyMemberTypeToString();
    int v7 = 138412290;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Current user member type: %@", (uint8_t *)&v7, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

id sub_100364120(uint64_t a1, void *a2)
{
  return _[a2 familyCircleManagerDidUpdateFamilyMembers:*(void *)(a1 + 32)];
}

void sub_100364A94(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 8);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      int v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8 * (void)v8) + 16))(*(void *)(*((void *)&v10 + 1) + 8 * (void)v8));
        int v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t))(v9 + 16))(v9);
  }
}

void sub_100364BBC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  int v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [v6 length];
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 16);
    int v11 = 134218498;
    id v12 = v9;
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    id v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Family member image request completed with image data size %ld, for dsid %@, error %@", (uint8_t *)&v11, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1003650E0(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v8 + 1) + 8 * (void)v6) + 16))(*(void *)(*((void *)&v8 + 1) + 8 * (void)v6));
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(result + 16))(result);
  }
  return result;
}

void sub_100365200(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error loading family members: %@", (uint8_t *)&v12, 0xCu);
    }

    long long v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    id v9 = [v5 ageCategory];
    PKFamilyMemberTypeFromFAMemberType();
    long long v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      long long v11 = PKFamilyMemberTypeToString();
      int v12 = 134218242;
      id v13 = v9;
      __int16 v14 = 2112;
      __int16 v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received current member age category: %ld, pk member type: %@", (uint8_t *)&v12, 0x16u);
    }
    long long v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v8();
}

void sub_1003656E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003656F8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (v2)
  {
    [v2 updateWithPayLaterMerchant:*(void *)(a1 + 32)];
  }
  else
  {
    id v3 = [objc_alloc(*(Class *)(a1 + 56)) initWithPayLaterMerchant:*(void *)(a1 + 32) forFinancingPlanPID:*(void *)(a1 + 64) inDatabase:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
  id v6 = [*(id *)(a1 + 32) mapsBrand];
  id v7 = +[MapsBrand insertOrUpdateMapsBrand:v6 inDatabase:*(void *)(a1 + 40)];

  if (v7)
  {
    long long v8 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v7 persistentID]);
    [v8 setValue:v9 forProperty:@"v"];
  }
  long long v10 = [*(id *)(a1 + 32) mapsMerchant];
  long long v11 = +[MapsMerchant insertOrUpdateMapsMerchant:v10 inDatabase:*(void *)(a1 + 40)];

  if (v11)
  {
    int v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v13 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v11 persistentID]);
    [v12 setValue:v13 forProperty:@"u"];
  }
  return 1;
}

uint64_t sub_100365928(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) lastMerchantReprocessingDate];
  uint64_t v4 = (void *)_SQLValueForDate();
  [v2 setValue:v4 forProperty:@"x"];

  id v5 = *(void **)(a1 + 32);
  id v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 40) requiresMerchantReprocessing]);
  [v5 setValue:v6 forProperty:@"w"];

  id v7 = [*(id *)(a1 + 40) mapsBrand];
  long long v8 = [*(id *)(a1 + 32) database];
  id v9 = +[MapsBrand insertOrUpdateMapsBrand:v7 inDatabase:v8];

  if (v9)
  {
    long long v10 = *(void **)(a1 + 32);
    long long v11 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v9 persistentID]);
    [v10 setValue:v11 forProperty:@"v"];
  }
  int v12 = [*(id *)(a1 + 40) mapsMerchant];
  id v13 = [*(id *)(a1 + 32) database];
  __int16 v14 = +[MapsMerchant insertOrUpdateMapsMerchant:v12 inDatabase:v13];

  if (v14)
  {
    __int16 v15 = *(void **)(a1 + 32);
    id v16 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v14 persistentID]);
    [v15 setValue:v16 forProperty:@"u"];
  }
  return 1;
}

void sub_100365DFC(uint64_t a1, uint64_t a2, id *a3)
{
  id v4 = [*a3 longLongValue];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = +[NSNumber numberWithLongLong:v4];
  id v9 = +[PayLaterFinancingPlan anyInDatabase:v5 withPlanPID:v6];

  id v7 = *(void **)(a1 + 40);
  long long v8 = [v9 financingPlan];
  [v7 safelyAddObject:v8];
}

void sub_100366228(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];

  id v13 = [*(id *)(a1 + 32) valueForProperty:@"u"];
  if (v13)
  {
    id v6 = [*(id *)(a1 + 32) database];
    id v7 = +[MapsMerchant anyInDatabase:v6 withPID:v13];
    long long v8 = [v7 mapsMerchant];

    [*(id *)(a1 + 48) setMapsMerchant:v8];
  }
  id v9 = [*(id *)(a1 + 32) valueForProperty:@"v"];
  if (v9)
  {
    long long v10 = [*(id *)(a1 + 32) database];
    long long v11 = +[MapsBrand anyInDatabase:v10 withPID:v9];
    int v12 = [v11 mapsBrand];

    [*(id *)(a1 + 48) setMapsBrand:v12];
  }
}

void sub_100366B84(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366B8C(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setMerchantCategoryCode:](v4, "setMerchantCategoryCode:", [a3 integerValue]);
}

void sub_100366BE4(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setMerchantCategory:](v4, "setMerchantCategory:", [a3 integerValue]);
}

void sub_100366C3C(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setFallbackCategory:](v4, "setFallbackCategory:", [a3 integerValue]);
}

void sub_100366C94(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366C9C(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CA4(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CAC(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CB4(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CBC(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CC4(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CCC(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CD4(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CDC(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CE4(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CEC(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CF4(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366CFC(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setIndustryCode:](v4, "setIndustryCode:", [a3 integerValue]);
}

void sub_100366D54(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setRequiresMerchantReprocessing:](v4, "setRequiresMerchantReprocessing:", [a3 BOOLValue]);
}

void sub_100366DAC(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterMerchant *)v3 setLastMerchantReprocessingDate:v4];
}

void sub_100366E0C(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setCleanConfidence:](v4, "setCleanConfidence:", [a3 integerValue]);
}

void sub_100366E64(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterMerchant setAdamIdentifier:](v4, "setAdamIdentifier:", [a3 integerValue]);
}

void sub_100366EBC(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366EC4(id a1, PKPayLaterMerchant *a2, id a3)
{
}

void sub_100366ECC(id a1, PKPayLaterMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPayLaterMerchant *)v3 setOriginURL:v4];
}

void sub_10036712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100367144(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  [v2 setObjectOrNull:*(void *)(a1 + 32) forKey:@"b"];
  [v2 setUnsignedLongLong:*(void *)(a1 + 64) forKey:@"a"];
  [v2 setUnsignedLongLong:*(void *)(a1 + 72) forKey:@"c"];
  [v2 setUnsignedLongLong:*(void *)(a1 + 80) forKey:@"d"];
  id v3 = [*(id *)(a1 + 40) initWithPropertyValues:v2 inDatabase:*(void *)(a1 + 48)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  BOOL v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
  return v6;
}

void sub_1003673B8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 longLongValue];
  id v7 = [a4[1] longLongValue];
  long long v8 = [(SQLiteEntity *)[MapsBrand alloc] initWithPersistentID:v6 inDatabase:*(void *)(a1 + 32)];
  [(SQLiteEntity *)v8 deleteFromDatabase];

  id v9 = [(SQLiteEntity *)[MapsMerchant alloc] initWithPersistentID:v7 inDatabase:*(void *)(a1 + 32)];
  [(SQLiteEntity *)v9 deleteFromDatabase];
}

void sub_1003675F0(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 longLongValue];
  id v7 = [a4[1] longLongValue];
  long long v8 = [(SQLiteEntity *)[MapsBrand alloc] initWithPersistentID:v6 inDatabase:*(void *)(a1 + 32)];
  [(SQLiteEntity *)v8 deleteFromDatabase];

  id v9 = [(SQLiteEntity *)[MapsMerchant alloc] initWithPersistentID:v7 inDatabase:*(void *)(a1 + 32)];
  [(SQLiteEntity *)v9 deleteFromDatabase];
}

void sub_1003678CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003678F0(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 longLongValue];
  id v7 = [a4[1] longLongValue];
  long long v8 = [(SQLiteEntity *)[MapsBrand alloc] initWithPersistentID:v6 inDatabase:*(void *)(a1 + 32)];
  uint64_t v14 = [(MapsBrand *)v8 mapsBrand];

  id v9 = [(SQLiteEntity *)[MapsMerchant alloc] initWithPersistentID:v7 inDatabase:*(void *)(a1 + 32)];
  uint64_t v10 = [(MapsMerchant *)v9 mapsMerchant];

  if (v14 | v10)
  {
    id v11 = objc_alloc_init((Class)PKMerchant);
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setMapsBrand:v14];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setMapsMerchant:v10];
  }
}

void sub_100367C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100367C24(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v5 = [*a4 stringValue];
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "pk_safelyAddObject:", v5);
}

id sub_100368154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100368454(id a1, PKNFCPayload *a2, id a3)
{
}

void sub_10036845C(id a1, PKNFCPayload *a2, id a3)
{
  uint64_t v4 = a2;
  objc_msgSend(a3, "pk_decodeHexadecimal");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKNFCPayload *)v4 setEncryptionPublicKeyData:v5];
}

void sub_1003684C0(id a1, PKNFCPayload *a2, id a3)
{
  id v5 = a2;
  if (a3) {
    id v4 = [a3 BOOLValue];
  }
  else {
    id v4 = 0;
  }
  [(PKNFCPayload *)v5 setRequiresAuthentication:v4];
}

void sub_100368524(id a1, PKNFCPayload *a2, id a3)
{
  id v4 = a2;
  -[PKNFCPayload setPayloadState:](v4, "setPayloadState:", [a3 integerValue]);
}

void sub_1003688EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100368904(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) type];
  [*(id *)(a1 + 64) deletePendingProvisioningInDatabase:*(void *)(a1 + 40) ofType:v2 withUniqueIdentifier:*(void *)(a1 + 48)];
  id v3 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (!v3) {
    goto LABEL_18;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypeCarKey])
  {
    id v4 = PendingCarKeyProvisioning;
    goto LABEL_16;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypePaymentRemoteCredential])
  {
    id v4 = PendingPaymentRemoteCredential;
    goto LABEL_16;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypeShareableCredential])
  {
    id v4 = PendingShareableCredential;
    goto LABEL_16;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypeAccountCredential])
  {
    id v4 = PendingAccountCredential;
    goto LABEL_16;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypeStatefulTransfer])
  {
    id v4 = PendingStatefulTransferProvisioning;
    goto LABEL_16;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypePrecursorPass])
  {
    id v4 = PendingPrecursorPassCredential;
    goto LABEL_16;
  }
  if ([v2 isEqualToString:PKPendingProvisioningTypeIdentityCredential])
  {
    id v4 = PendingIdentityCredential;
LABEL_16:
    id v5 = [(__objc2_class *)v4 insertPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:v3 inDatabase:*(void *)(a1 + 40)];

    if (v5) {
      goto LABEL_17;
    }
LABEL_18:
    uint64_t v6 = 0;
    goto LABEL_19;
  }
LABEL_17:
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v3);
  uint64_t v6 = 1;
LABEL_19:

  return v6;
}

void sub_100369084(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[PendingProvisioning alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v2 = PKPendingProvisioningStatusToString();
  [(SQLiteEntity *)v3 setValue:v2 forProperty:@"status"];
}

void sub_100369244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10036925C(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[PendingProvisioning alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(PendingProvisioning *)v3 deleteFromDatabase];
}

void sub_10036940C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v11 = a3;
  id v7 = *(id *)(a4 + 8 * *(void *)(a1 + 56));
  if ([v7 isEqualToString:PKPendingProvisioningTypeCarKey])
  {
    id v8 = objc_alloc_init((Class)PKAddCarKeyPassConfiguration);
    id v9 = [objc_alloc((Class)PKPendingCarKeyProvisioning) initWithCarKeyConfiguration:v8];
    +[PendingCarKeyProvisioning inflatePendingProvisioning:v9 forBasePendingProvisioningPID:a2 inDatabase:*(void *)(a1 + 32)];

    if (!v9) {
      goto LABEL_18;
    }
LABEL_17:
    [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v9 withProperties:v11 values:a4];
    [*(id *)(a1 + 48) addObject:v9];

    goto LABEL_18;
  }
  if ([v7 isEqualToString:PKPendingProvisioningTypePaymentRemoteCredential])
  {
    id v9 = [objc_alloc((Class)PKPendingPaymentRemoteCredential) initForDatabase];
    uint64_t v10 = PendingPaymentRemoteCredential;
  }
  else if ([v7 isEqualToString:PKPendingProvisioningTypeShareableCredential])
  {
    id v9 = [objc_alloc((Class)PKPendingShareableCredential) initForDatabase];
    uint64_t v10 = PendingShareableCredential;
  }
  else if ([v7 isEqualToString:PKPendingProvisioningTypeAccountCredential])
  {
    id v9 = [objc_alloc((Class)PKPendingAccountCredential) initForDatabase];
    uint64_t v10 = PendingAccountCredential;
  }
  else if ([v7 isEqualToString:PKPendingProvisioningTypeStatefulTransfer])
  {
    id v9 = [objc_alloc((Class)PKPendingStatefulTransferProvisioning) initForDatabase];
    uint64_t v10 = PendingStatefulTransferProvisioning;
  }
  else if ([v7 isEqualToString:PKPendingProvisioningTypePrecursorPass])
  {
    id v9 = [objc_alloc((Class)PKPendingPrecursorPassCredential) initForDatabase];
    uint64_t v10 = PendingPrecursorPassCredential;
  }
  else
  {
    if (![v7 isEqualToString:PKPendingProvisioningTypeIdentityCredential]) {
      goto LABEL_18;
    }
    id v9 = [objc_alloc((Class)PKPendingIdentityCredential) initForDatabase];
    uint64_t v10 = PendingIdentityCredential;
  }
  [(__objc2_class *)v10 inflatePendingProvisioning:v9 forBasePendingProvisioningPID:a2 inDatabase:*(void *)(a1 + 32)];
  if (v9) {
    goto LABEL_17;
  }
LABEL_18:
}

void sub_100369B0C(id a1, PKPendingProvisioning *a2, id a3)
{
}

void sub_100369B14(id a1, PKPendingProvisioning *a2, id a3)
{
  id v3 = a2;
  [(PKPendingProvisioning *)v3 setStatus:PKPendingProvisioningStatusFromString()];
}

void sub_100369B6C(id a1, PKPendingProvisioning *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPendingProvisioning *)v3 setCreatedAt:v4];
}

void sub_100369BCC(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a2;
  -[PKPendingProvisioning setShouldAutoProvision:](v4, "setShouldAutoProvision:", [a3 BOOLValue]);
}

void sub_100369C24(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:0];

  [(PKPendingProvisioning *)v5 setProvisioningState:v6];
}

void sub_100369CC0(id a1, PKPendingProvisioning *a2, id a3)
{
  id v4 = a2;
  -[PKPendingProvisioning setProvisioningAttemptCounter:](v4, "setProvisioningAttemptCounter:", [a3 integerValue]);
}

void sub_10036ADEC(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
}

void sub_10036ADF4(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterAccountUserInfoValue *)v3 setDate:v4];
}

void sub_10036AE54(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
}

void sub_10036AE5C(id a1, PKPayLaterAccountUserInfoValue *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterAccountUserInfoValue setHasHiddenValue:](v4, "setHasHiddenValue:", [a3 BOOLValue]);
}

void sub_10036AFAC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];

  id v6 = *(void **)(a1 + 48);
  id v7 = [*(id *)(a1 + 32) _currencyAmount];
  [v6 setCurrencyAmount:v7];
}

void sub_10036B43C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = [*(id *)(a1 + 40) provisioningMetadata];
    [v3 setProvisioningMetadata:v4];

    id v15 = 0;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
    id v6 = [WeakRetained cardFileManager];
    [v6 writeCard:*(void *)(a1 + 32) source:2 error:&v15];

    id v7 = v15;
    if (v15)
    {
      id v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v17 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDPaymentWebServiceTargetDevice: Failed to write pass, completing with nil addedPass: %@", buf, 0xCu);
      }
      id v9 = 0;
    }
    else
    {
      id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16));
      uint64_t v10 = [v8 databaseManager];
      id v11 = [*(id *)(a1 + 32) uniqueID];
      uint64_t v12 = [v10 passWithUniqueIdentifier:v11];
      id v9 = [v12 paymentPass];
    }
  }
  else
  {
    id v9 = 0;
  }
  if (*(void *)(a1 + 56))
  {
    id v13 = (void *)PDOSTransactionCreate("PDPaymentWebServiceTargetDevice");
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

uint64_t sub_10036BD48(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_msgSend(a2, "pk_objectsPassingTest:", &stru_10074B7D8);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = v3;
    uint64_t v4 = (*(uint64_t (**)(void))(v4 + 16))();
    uint64_t v3 = v6;
  }
  return _objc_release_x1(v4, v3);
}

BOOL sub_10036BDB4(id a1, PKFeatureApplication *a2, unint64_t a3, BOOL *a4)
{
  return [(PKFeatureApplication *)a2 applicationType] == (id)1;
}

void sub_10036C248(uint64_t a1, int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  id v4 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  [*(id *)(*(void *)(a1 + 32) + 64) removeAllObjects];
  if (a2) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 40));
  }
  else {
    *(void *)(*(void *)(a1 + 32) + 56) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8 * (void)v9) + 16))(*(void *)(*((void *)&v10 + 1) + 8 * (void)v9));
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

void sub_10036C5B0(void *a1, char a2)
{
  uint64_t v2 = a1[6];
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16));
    id v4 = [WeakRetained databaseManager];
    id v5 = [v4 passWithUniqueIdentifier:a1[5]];
    id v6 = [v5 paymentPass];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v6);
  }
  else
  {
    id v7 = *(void (**)(uint64_t, void))(v2 + 16);
    uint64_t v8 = a1[6];
    v7(v8, 0);
  }
}

void sub_10036D21C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)PKPassOwnershipToken) initWithOwnershipToken:*(void *)(a1 + 32) identifier:*(void *)(a1 + 40)];

  if (!v2)
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      int v6 = 138412546;
      uint64_t v7 = v4;
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to store pass ownership token with identifier: %@ token: %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10036D62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10036D648(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10036D770(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10036E29C(uint64_t a1, int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  if (a2) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
  }
  else {
    --*(void *)(*(void *)(a1 + 32) + 40);
  }
  uint64_t v4 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 24);
  os_unfair_lock_unlock(v4);
}

void sub_10036E830(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16));
  uint64_t v3 = [WeakRetained pendingProvisioningManager];
  id v4 = [v3 retrievePendingProvisioningsOfType:a1[5]];

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10036EA38(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 16));
  id v2 = [WeakRetained provisioningRequirementsChecker];
  [v2 meetsWithRequirementsContainer:a1[5] completion:a1[6]];
}

void sub_10036EBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10036EC20(uint64_t a1, char a2, id obj)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), obj);
}

uint64_t sub_10036ED20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10036EE9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) accountsForProvisioningWithCompletion:*(void *)(a1 + 40)];
}

void sub_10036F1A4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v7 = [a2 copy];
    __int16 v8 = [v13 keyEnumerator];
    uint64_t v9 = [v8 nextObject];
    if (v9)
    {
      long long v10 = (void *)v9;
      do
      {
        long long v11 = [v13 objectForKey:v10];
        [v7 setObject:v11 forKey:v10];

        uint64_t v12 = [v8 nextObject];

        long long v10 = (void *)v12;
      }
      while (v12);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_10036F9B8(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_10036FC74(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_100370300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_100370320(uint64_t a1, uint64_t a2, id *a3)
{
}

void sub_100370470(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_100370478(id a1, PKTransitAppletState *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKTransitAppletState *)v3 setBalance:v4];
}

void sub_1003704DC(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_1003704E4(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKTransitAppletState setBlacklisted:](v4, "setBlacklisted:", [a3 BOOLValue]);
}

void sub_10037053C(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_100370544(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKTransitAppletState setAppletStateDirty:](v4, "setAppletStateDirty:", [a3 BOOLValue]);
}

void sub_10037059C(id a1, PKTransitAppletState *a2, id a3)
{
  id v3 = a2;
  PKDateFromStorageValue();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKTransitAppletState *)v3 setExpirationDate:v4];
}

void sub_100370600(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a2;
  -[PKTransitAppletState setNeedsStationProcessing:](v4, "setNeedsStationProcessing:", [a3 BOOLValue]);
}

void sub_100370658(id a1, PKTransitAppletState *a2, id a3)
{
}

void sub_100370660(id a1, PKTransitAppletState *a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = a2;
  v9[0] = objc_opt_class();
  v9[1] = objc_opt_class();
  int v6 = +[NSArray arrayWithObjects:v9 count:2];
  id v7 = +[NSSet setWithArray:v6];
  __int16 v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKTransitAppletState *)v5 setEnrouteTransitTypes:v8];
}

id sub_100370BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

id *sub_100370BE4(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)PDVehicleFunctionsManager;
    __int16 v8 = (id *)objc_msgSendSuper2(&v15, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeWeak(a1 + 3, v7);
      uint64_t v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      long long v10 = PDUtilityQueue();
      dispatch_queue_t v11 = dispatch_queue_create_with_target_V2("com.apple.passd.vehicleFunctionsManager", v9, v10);
      id v12 = a1[2];
      a1[2] = v11;

      id WeakRetained = objc_loadWeakRetained(a1 + 3);
      sub_1003D624C((uint64_t)WeakRetained, a1, 1);

      PDNFSecureXPCRegisterAccessKeyEventObserver(a1);
    }
  }

  return a1;
}

void sub_100370CF0(uint64_t a1)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    sub_1003D6948((uint64_t)WeakRetained, 1);
  }
}

void sub_100370E50(uint64_t a1)
{
  uint64_t v32 = 0;
  id v33 = &v32;
  uint64_t v34 = 0x3032000000;
  id v35 = sub_100020C4C;
  id v36 = sub_100021118;
  id v37 = 0;
  uint64_t v26 = 0;
  long long v27 = &v26;
  uint64_t v28 = 0x3032000000;
  id v29 = sub_100020C4C;
  CLLocationCoordinate2D v30 = sub_100021118;
  id v31 = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(v2 + 8);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100371184;
  v21[3] = &unk_10073C768;
  id v24 = &v32;
  void v21[4] = v2;
  id v22 = *(id *)(a1 + 48);
  id v23 = *(id *)(a1 + 56);
  __int16 v25 = &v26;
  [v3 performTransactionWithBlock:v21];
  if (v33[5])
  {
    id v4 = (void *)v27[5];
    if (v4)
    {
      uint64_t v19 = 0;
      __int16 v20 = 0;
      sub_100371204(v4, &v20, &v19);
      uint64_t v5 = v20;
      id v6 = *(id *)(a1 + 48);
      id v7 = v5;
      __int16 v8 = v7;
      if (v6 == v7)
      {
      }
      else
      {
        if (!v6 || !v7)
        {
          id v12 = v7;
          goto LABEL_15;
        }
        unsigned int v9 = [v6 isEqualToString:v7];

        if (!v9) {
          goto LABEL_16;
        }
      }
      long long v10 = v19;
      id v6 = *(id *)(a1 + 56);
      id v11 = v10;
      id v12 = v11;
      if (v6 == v11)
      {

LABEL_20:
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 24));
        sub_1003D6104((uint64_t)WeakRetained, (void *)v33[5]);

LABEL_21:

        goto LABEL_22;
      }
      if (v6 && v11)
      {
        unsigned __int8 v13 = [v6 isEqualToString:v11];

        if (v13) {
          goto LABEL_20;
        }
LABEL_16:
        uint64_t v14 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(a1 + 48);
          uint64_t v16 = *(void *)(a1 + 56);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v39 = v15;
          __int16 v40 = 2112;
          uint64_t v41 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "PDVehicleFunctionsManager: ignoring vehicle report update for (%@: %@).", buf, 0x16u);
        }

        id v12 = v19;
        goto LABEL_21;
      }
LABEL_15:

      goto LABEL_16;
    }
  }
LABEL_22:

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v32, 8);
}

void sub_100371154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100371184(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:a1[5] subcredentialIdentifier:a1[6]];
  uint64_t v3 = *(void *)(a1[7] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (*(void *)(*(void *)(a1[7] + 8) + 40))
  {
    uint64_t v5 = objc_msgSend(*(id *)(a1[4] + 8), "primaryPaymentApplicationForPassUniqueIdentifier:");
    uint64_t v6 = *(void *)(a1[8] + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  return 0;
}

void sub_100371204(void *a1, void **a2, void **a3)
{
  id v5 = a1;
  uint64_t v6 = [v5 applicationIdentifier];
  id v7 = [v5 subcredentials];

  if ([v7 count] == (id)1)
  {
    __int16 v8 = [v7 anyObject];
    uint64_t v9 = [v8 identifier];
  }
  else
  {
    uint64_t v9 = 0;
    __int16 v8 = v6;
    uint64_t v6 = 0;
  }

  long long v10 = *a2;
  *a2 = v6;
  id v12 = v6;

  id v11 = *a3;
  *a3 = (void *)v9;
}

id sub_100371648(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v12 = 0;
    uint64_t v13 = 0;
    uint64_t v2 = [a2 secureElementPass];
    uint64_t v3 = [v2 devicePrimaryPaymentApplication];
    sub_100371204(v3, &v13, &v12);

    id v4 = 0;
    id v5 = v12;
    uint64_t v6 = v13;
    if (v13 && v12)
    {
      id v11 = 0;
      id v7 = [(id)PKGetClassNFDigitalCarKeySession() vehicleReports:&v11];
      id v8 = v11;
      id v4 = [v7 objectForKeyedSubscript:v5];
      if (!v4)
      {
        uint64_t v9 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412802;
          uint64_t v15 = v6;
          __int16 v16 = 2112;
          id v17 = v5;
          __int16 v18 = 2112;
          id v19 = v8;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PDVehicleFunctionsManager: failed to fetch vehicle report for (%@: %@) - %@.", buf, 0x20u);
        }
      }
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

void sub_1003717C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [a3 metadata];
  id v7 = [v6 metadataTypeVehicleFunction];

  id v8 = [v7 vehicleFunctionStates];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1003718C0;
  void v13[3] = &unk_10074B9B0;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = *(void **)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = v11;
  id v17 = v5;
  id v12 = v5;
  [v8 enumerateKeysAndObjectsUsingBlock:v13];
}

void sub_1003718C0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v9 = a2;
  id v7 = a3;
  if ([*(id *)(a1 + 32) containsObject:v9])
  {
    id v8 = [*(id *)(a1 + 40) getStatusForRKEFunction:v9];
    if (v8 && [v7 indexOfObject:v8] != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      [*(id *)(a1 + 48) addObject:*(void *)(a1 + 56)];
      *a4 = 1;
    }
  }
}

void sub_100371C08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [a3 metadata];
  id v7 = [v6 metadataTypeVehicleFunction];

  id v8 = [v7 vehicleFunctionStates];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100371D08;
  void v13[3] = &unk_10074B9B0;
  id v9 = *(id *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = *(void **)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v16 = v11;
  id v17 = v5;
  id v12 = v5;
  [v8 enumerateKeysAndObjectsUsingBlock:v13];
}

void sub_100371D08(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v9 = a2;
  id v7 = a3;
  if ([*(id *)(a1 + 32) containsObject:v9])
  {
    id v8 = [*(id *)(a1 + 40) getStatusForRKEFunction:v9];
    if (v8 && [v7 indexOfObject:v8] != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      [*(id *)(a1 + 48) addObject:*(void *)(a1 + 56)];
      *a4 = 1;
    }
  }
}

void sub_100372814(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_100372AA8(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_100372D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

id sub_100372F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_100373384(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_10037338C(id a1, TransientCurrencyAmount *a2, id a3)
{
  id v4 = a2;
  -[TransientCurrencyAmount setExponent:](v4, "setExponent:", [a3 integerValue]);
}

void sub_1003733E4(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_1003733EC(id a1, TransientCurrencyAmount *a2, id a3)
{
  id v4 = a2;
  -[TransientCurrencyAmount setPending:](v4, "setPending:", [a3 BOOLValue]);
}

void sub_100373444(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_10037344C(id a1, TransientCurrencyAmount *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    [a3 decimalValue];
    id v5 = +[NSDecimalNumber decimalNumberWithDecimal:v6];
    [(TransientCurrencyAmount *)v4 setAmount:v5];
  }
  else
  {
    id v5 = a2;
    [(TransientCurrencyAmount *)v5 setAmount:0];
  }
}

void sub_1003734D8(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_1003734E0(id a1, TransientCurrencyAmount *a2, id a3)
{
}

void sub_100373814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10037382C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) image];
  id v3 = +[TileImage insertImage:v2 inDatabase:*(void *)(a1 + 40)];

  id v4 = [objc_alloc(*(Class *)(a1 + 64)) initWithAccessory:*(void *)(a1 + 32) forBaseAccessory:*(void *)(a1 + 48) forImage:v3 inDatabase:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  BOOL v7 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
  return v7;
}

void sub_100373A40(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, unsigned char *a6)
{
  id v9 = +[NSNull null];
  uint64_t v10 = *a4;
  if (*a4) {
    BOOL v11 = v10 == v9;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    id v16 = v9;
    id v12 = v10;
    uint64_t v13 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileImage alloc], "initWithPersistentID:inDatabase:", [v12 longLongValue], *(void *)(a1 + 32));
    id v14 = *(void **)(a1 + 40);
    uint64_t v15 = [(TileImage *)v13 tileImage];
    [v14 setImage:v15];

    id v9 = v16;
  }
  *a6 = 1;
}

void sub_10037405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100374074(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) title];
  if (!v2)
  {
    id v3 = 0;
LABEL_5:
    uint64_t v5 = [*(id *)(a1 + 32) body];
    if (v5)
    {
      uint64_t v6 = +[TileValue insertValue:v5 inDatabase:*(void *)(a1 + 40)];
      if (!v6)
      {
        BOOL v4 = 0;
LABEL_30:

        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    BOOL v7 = [*(id *)(a1 + 32) bodyImage];
    if (v7)
    {
      id v8 = +[TileImage insertImage:v7 inDatabase:*(void *)(a1 + 40)];
      if (!v8)
      {
        BOOL v4 = 0;
LABEL_29:

        goto LABEL_30;
      }
    }
    else
    {
      id v8 = 0;
    }
    id v9 = [*(id *)(a1 + 32) footer];
    if (v9)
    {
      __int16 v20 = +[TileValue insertValue:v9 inDatabase:*(void *)(a1 + 40)];
      if (!v20)
      {
        BOOL v4 = 0;
LABEL_28:

        goto LABEL_29;
      }
    }
    else
    {
      __int16 v20 = 0;
    }
    uint64_t v10 = [*(id *)(a1 + 32) accessory];
    id v19 = v8;
    if (v10)
    {
      BOOL v11 = +[TileAccessory insertAccessory:v10 inDatabase:*(void *)(a1 + 40)];
      if (!v11)
      {
        BOOL v4 = 0;
LABEL_27:

        id v8 = v19;
        goto LABEL_28;
      }
    }
    else
    {
      BOOL v11 = 0;
    }
    __int16 v18 = v6;
    id v12 = [*(id *)(a1 + 32) secondaryAccessory];
    if (v12)
    {
      uint64_t v13 = +[TileAccessory insertAccessory:v12 inDatabase:*(void *)(a1 + 40)];
      if (!v13)
      {
        BOOL v4 = 0;
LABEL_26:

        uint64_t v6 = v18;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    id v14 = [objc_alloc(*(Class *)(a1 + 64)) initWithState:*(void *)(a1 + 32) forBaseState:*(void *)(a1 + 48) forTitleValue:v3 forBodyValue:v18 forBodyImage:v19 forFooterValue:v20 forAccessory:v11 forSecondaryAccessory:v13 inDatabase:*(void *)(a1 + 40)];
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
    goto LABEL_26;
  }
  id v3 = +[TileValue insertValue:v2 inDatabase:*(void *)(a1 + 40)];
  if (v3) {
    goto LABEL_5;
  }
  BOOL v4 = 0;
LABEL_31:

  return v4;
}

void sub_100374474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v36 = +[NSNull null];
  id v8 = *(id *)a4;
  if (v8) {
    BOOL v9 = v8 == v36;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileValue alloc], "initWithPersistentID:inDatabase:", [v8 longLongValue], *(void *)(a1 + 32));
    BOOL v11 = *(void **)(a1 + 40);
    id v12 = [(TileValue *)v10 passTileValue];
    [v11 setTitle:v12];
  }
  id v13 = *(id *)(a4 + 8);
  if (v13) {
    BOOL v14 = v13 == v36;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v15 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileValue alloc], "initWithPersistentID:inDatabase:", [v13 longLongValue], *(void *)(a1 + 32));
    id v16 = *(void **)(a1 + 40);
    id v17 = [(TileValue *)v15 passTileValue];
    [v16 setBody:v17];
  }
  id v18 = *(id *)(a4 + 16);
  if (v18 && v18 != v36)
  {
    id v19 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileImage alloc], "initWithPersistentID:inDatabase:", [v18 longLongValue], *(void *)(a1 + 32));
    __int16 v20 = *(void **)(a1 + 40);
    id v21 = [(TileImage *)v19 tileImage];
    [v20 setBodyImage:v21];
  }
  id v22 = *(id *)(a4 + 24);
  if (v22 && v22 != v36)
  {
    id v23 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileValue alloc], "initWithPersistentID:inDatabase:", [v22 longLongValue], *(void *)(a1 + 32));
    id v24 = *(void **)(a1 + 40);
    __int16 v25 = [(TileValue *)v23 passTileValue];
    [v24 setFooter:v25];
  }
  [*(id *)(a1 + 40) setPreferredStyle:PKPassTileStateStyleFromString()];
  id v26 = *(id *)(a4 + 40);
  if (v26 && v26 != v36)
  {
    long long v27 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileAccessory alloc], "initWithPersistentID:inDatabase:", [v26 longLongValue], *(void *)(a1 + 32));
    uint64_t v28 = *(void **)(a1 + 40);
    id v29 = [(TileAccessory *)v27 passTileAccessory];
    [v28 setAccessory:v29];
  }
  id v30 = *(id *)(a4 + 48);
  if (v30 && v30 != v36)
  {
    id v31 = v30;
    uint64_t v32 = -[SQLiteEntity initWithPersistentID:inDatabase:]([TileAccessory alloc], "initWithPersistentID:inDatabase:", [v31 longLongValue], *(void *)(a1 + 32));
    id v33 = *(void **)(a1 + 40);
    uint64_t v34 = [(TileAccessory *)v32 passTileAccessory];
    [v33 setSecondaryAccessory:v34];
  }
  *a6 = 1;
}

void sub_1003751F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKMapsMerchant);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  BOOL v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    BOOL v7 = v8;
  }
}

void sub_1003753D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc_init((Class)PKMapsMerchant);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];
  BOOL v9 = +[NSNumber numberWithLongLong:a2];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v10 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v9, 0);
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v17;
    do
    {
      BOOL v14 = 0;
      do
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = [*(id *)(*((void *)&v16 + 1) + 8 * (void)v14) merchant];
        [v15 setMapsMerchant:v8];

        BOOL v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v12);
  }
}

void sub_100375954(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100375AD4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKMapsMerchant);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003761F4(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  -[PKMapsMerchant setIdentifier:](v4, "setIdentifier:", [a3 unsignedLongLongValue]);
}

void sub_10037624C(id a1, PKMapsMerchant *a2, id a3)
{
  BOOL v4 = a2;
  -[PKMapsMerchant setResultProviderIdentifier:](v4, "setResultProviderIdentifier:", [a3 intValue]);
}

void sub_1003762A4(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_1003762AC(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_1003762B4(id a1, PKMapsMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMapsMerchant *)v3 setURL:v4];
}

void sub_100376314(id a1, PKMapsMerchant *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKMapsMerchant setLocationLatitude:](v4, "setLocationLatitude:");
}

void sub_100376368(id a1, PKMapsMerchant *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKMapsMerchant setLocationLongitude:](v4, "setLocationLongitude:");
}

void sub_1003763BC(id a1, PKMapsMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_PostalAddressForSQLValue();
  [(PKMapsMerchant *)v3 setPostalAddress:v4];
}

void sub_10037641C(id a1, PKMapsMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMapsMerchant *)v3 setHeroImageURL:v4];
}

void sub_10037647C(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_100376484(id a1, PKMapsMerchant *a2, id a3)
{
  id v4 = a2;
  -[PKMapsMerchant setCategory:](v4, "setCategory:", [a3 integerValue]);
}

void sub_1003764DC(id a1, PKMapsMerchant *a2, id a3)
{
}

void sub_1003764E4(id a1, PKMapsMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKMapsMerchant *)v3 setBusinessChatURL:v4];
}

void sub_100376544(id a1, PKMapsMerchant *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKMapsMerchant *)v3 setLastProcessedDate:v4];
}

void sub_1003765A4(id a1, PKMapsMerchant *a2, id a3)
{
}

id sub_1003766AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _migrateAssetsIfNeeded];
}

id sub_100376E4C()
{
  CFDictionaryRef v0 = PKHomeDirectoryPath();
  uint64_t v1 = [v0 stringByAppendingPathComponent:@"NotificationAssets"];

  return v1;
}

void sub_1003779D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_100377B60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKPeerPaymentPreferencesRestriction);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_100377CA4(id a1, PKPeerPaymentPreferencesRestriction *a2, id a3)
{
}

void sub_100377CAC(id a1, PKPeerPaymentPreferencesRestriction *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesRestriction setSendRestrictionType:](v4, "setSendRestrictionType:", [a3 integerValue]);
}

void sub_100377D04(id a1, PKPeerPaymentPreferencesRestriction *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentPreferencesRestriction setReceiveRestrictionType:](v4, "setReceiveRestrictionType:", [a3 integerValue]);
}

void sub_100378238(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = +[NSMutableString string];
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_100378410(id a1, NSMutableString *a2, id a3)
{
}

id sub_100378B00(id a1, BarcodeFetch *a2)
{
  return [(SQLiteEntity *)a2 valueForProperty:@"pass_pid"];
}

void sub_100378D98(uint64_t a1, uint64_t a2)
{
  id v4 = [BarcodeFetch alloc];
  id v5 = [*(id *)(a1 + 32) database];
  id v6 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  [*(id *)(a1 + 40) safelyAddObject:v6];
}

void sub_100379808(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

id sub_100379A14(id a1, NSNumber *a2)
{
  return [(NSNumber *)a2 stringValue];
}

id sub_100379A7C(id a1, NSString *a2)
{
  NSInteger v2 = [(NSString *)a2 integerValue];
  return +[NSNumber numberWithInteger:v2];
}

void sub_100379C8C(id a1, PKAccountFundingSourceVerification *a2, id a3)
{
  id v4 = a2;
  -[PKAccountFundingSourceVerification setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_100379CE4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = [(id)objc_opt_class() _optionsFromString:v4];

  [v5 setOptions:v6];
}

void sub_100379D68(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v8 = [v4 database];
  id v7 = +[AccountFundingSourceVerificationAttempt verificationAttemptForPID:v5 inDatabase:v8];

  [v6 setPendingAttempt:v7];
}

void sub_100379E08(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v8 = [v4 database];
  id v7 = +[AccountFundingSourceVerificationAttempt verificationAttemptForPID:v5 inDatabase:v8];

  [v6 setFailedAttempt:v7];
}

void sub_10037A8A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10037AB28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v14 = objc_alloc_init((Class)PKPaymentTransactionArchiveLocation);
  objc_msgSend(*(id *)(a1 + 56), "applyPropertySetters:toObject:withProperties:values:", *(void *)(a1 + 32));

  id v7 = *(void **)(a4 + 8 * *(void *)(a1 + 64));
  id v8 = +[NSNull null];
  if (v7 == v8) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *(void **)(a4 + 8 * *(void *)(a1 + 64));
  }
  id v10 = v9;

  id v11 = [v10 longLongValue];
  id v12 = [*(id *)(a1 + 40) database];
  uint64_t v13 = +[CloudStoreZone cloudStoreZoneWithPID:v11 inDatabase:v12];

  [v14 setCloudStoreZone:v13];
  if (v14) {
    [*(id *)(a1 + 48) addObject:v14];
  }
}

void sub_10037AE70(id a1, PKPaymentTransactionArchiveLocation *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionArchiveLocation setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10037AEC8(id a1, PKPaymentTransactionArchiveLocation *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionArchiveLocation setArchived:](v4, "setArchived:", [a3 BOOLValue]);
}

void sub_10037B0A4(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountPaymentReminder alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(AccountPaymentReminder *)v5 paymentReminder];
  [v3 addObject:v4];
}

id sub_10037B380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10037B554(id a1, PKAccountPaymentReminder *a2, id a3)
{
}

void sub_10037B55C(id a1, PKAccountPaymentReminder *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountPaymentReminder *)v3 setMinimumDue:v4];
}

void sub_10037B5C0(id a1, PKAccountPaymentReminder *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKAccountPaymentReminder *)v3 setPaymentDueDate:v4];
}

void sub_10037B874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10037B88C(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithState:*(void *)(a1 + 32) forBaseState:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

id sub_10037BA50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unsigned char *a6)
{
  [*(id *)(a1 + 32) setHeader:*a4];
  id result = [*(id *)(a1 + 32) setFooter:a4[1]];
  *a6 = 1;
  return result;
}

void sub_10037C4E8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10037C5B0;
  block[3] = &unk_100730438;
  id v7 = *(id *)(a1 + 40);
  char v12 = a2;
  id v10 = v7;
  id v11 = v5;
  id v8 = v5;
  dispatch_async(v6, block);
  [*(id *)(a1 + 32) _processPendingUpdates];
}

void sub_10037C5B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) completion];
  (*((void (**)(id, void, void))v2 + 2))(v2, *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_10037C610(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = @"N";
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412802;
    if (a2) {
      CFStringRef v7 = @"Y";
    }
    CFStringRef v10 = v7;
    __int16 v11 = 2112;
    id v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDDynamicAssociatedDomainService: Set additional service details with success: %@ error: %@. \nDomains registered: %@", (uint8_t *)&v9, 0x20u);
  }

  [*(id *)(a1 + 40) _storeDomains:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
}

id sub_10037CA40(id a1, PDDynamicAssociatedDomainPattern *a2)
{
  CFStringRef v5 = @"/";
  id v2 = [(PDDynamicAssociatedDomainPattern *)a2 uri];
  id v6 = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];

  return v3;
}

void sub_10037CFE0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10037D210(id a1, PKAccountUserNotificationSettings *a2, id a3)
{
  id v4 = a2;
  -[PKAccountUserNotificationSettings setTransactionNotificationsEnabled:](v4, "setTransactionNotificationsEnabled:", [a3 BOOLValue]);
}

void sub_10037D268(id a1, PKAccountUserNotificationSettings *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountUserNotificationSettings *)v3 setTransactionNotificationThreshold:v4];
}

void sub_10037D2CC(id a1, PKAccountUserNotificationSettings *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountUserNotificationSettings *)v3 setMonthlySpendNotificationThreshold:v4];
}

void sub_10037D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10037D504(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v9 = a3;
  id v10 = [objc_alloc((Class)PKDeviceEnvironment) _init];
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) withProperties:v9 values:a4];
  *a6 = 1;
}

void sub_10037D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10037D6EC(uint64_t a1)
{
  uint64_t v2 = PKDeviceEnvironmentClientToString();
  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 64) _predicateForDeviceEnvironmentWithClientIdentifier:0];
    uint64_t v4 = [*(id *)(a1 + 64) anyInDatabase:*(void *)(a1 + 32) predicate:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    CFStringRef v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (v7)
    {
      uint64_t v8 = [*(id *)(a1 + 40) countryCode];
      [v7 setValue:v8 forProperty:@"country_code"];

      id v9 = *(void **)(a1 + 40);
      id v10 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      uint64_t v11 = [v9 deviceLanguage];
      [v10 setValue:v11 forProperty:@"device_language"];
    }
    else
    {
      id v12 = objc_alloc(*(Class *)(a1 + 64));
      uint64_t v11 = [*(id *)(a1 + 40) countryCode];
      __int16 v13 = [*(id *)(a1 + 40) deviceLanguage];
      id v14 = [v12 initWithClientIdentifier:0 countryCode:v11 deviceLanguage:v13 database:*(void *)(a1 + 32)];
      uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
      long long v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;
    }
  }

  return v2;
}

void sub_10037D9CC(id a1, PKDeviceEnvironment *a2, id a3)
{
}

void sub_10037D9D4(id a1, PKDeviceEnvironment *a2, id a3)
{
}

void sub_10037DD1C(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: checking for market support in response to API", buf, 2u);
    }

    uint64_t v4 = PDDefaultQueue();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10037DE0C;
    v7[3] = &unk_10072E198;
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v8 = v5;
    uint64_t v9 = v6;
    dispatch_async(v4, v7);
  }
}

id sub_10037DE0C(uint64_t a1)
{
  return _[*(id *)(a1 + 40) _startLocationMonitoring];
}

void sub_10037DFC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(a1 + 32) _beginReportingIfNecessary];
    [*(id *)(a1 + 32) _reportExpressNotificationForMarket:*(void *)(a1 + 40) eligibleMarkets:*(void *)(a1 + 48) pass:*(void *)(a1 + 56) pageTag:PKAnalyticsReportExpressGeolocationEnableNotificationPageTag isReferredFromWatch:1];
    [*(id *)(a1 + 32) _endReportingIfNecessary];
    [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:v3];
    [*(id *)(a1 + 32) _schedulePromotedExpressModeNotificationDemotion:v3];
    [*(id *)(a1 + 32) _recordNotificationType:101 sentForMarket:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = [*(id *)(a1 + 56) uniqueID];
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: missing transit Notification. fail to post pass upgraded notification for market:%@ pass with uniqueID:%@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10037E270(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:v3];
    [*(id *)(a1 + 32) _recordNotificationType:101 sentForMarket:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = [*(id *)(a1 + 48) uniqueID];
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: missing transit Notification. fail to post Upgrade Selection Notification for market:%@ pass with uniqueID:%@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10037E694(uint64_t a1)
{
  if ((PKIsPhone() & 1) == 0 && (PKIsWatch() & 1) == 0)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v4 = "PDTransitNotificationService: should not schedule notification because device is not supported";
      goto LABEL_19;
    }
LABEL_20:

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    return;
  }
  if ((PKRelevancyLocationServicesEnabled() & 1) == 0)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: should not send notification due to location authorization", buf, 2u);
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = PKPassKitCoreBundle();
      uint64_t v6 = [v5 bundlePath];
      int v7 = (int)+[CLLocationManager authorizationStatusForBundlePath:v6];
      uint64_t v8 = PKPassRelevancyBundle();
      __int16 v9 = [v8 bundlePath];
      signed int v10 = +[CLLocationManager authorizationStatusForBundlePath:v9];
      *(_DWORD *)long long buf = 134218240;
      id v33 = v7;
      __int16 v34 = 2048;
      uint64_t v35 = v10;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: PKPassKitCoreBundle status %ld; PKPassRelevancyBundle status %ld",
        buf,
        0x16u);
    }
    goto LABEL_20;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 88))
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v4 = "PDTransitNotificationService: should not send notification because we are already monitoring location";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, buf, 2u);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v2 + 120));
  if (v11)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v4 = "PDTransitNotificationService: should not send notification because a pass upgrade is already in progress";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (PKPerformEagerTransitNotificationChecks())
  {
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Performing eager check due to internal setting and ignoring last check and device setup time", buf, 2u);
    }
    goto LABEL_32;
  }
  id v12 = +[PDSetupAssistantCompleteMonitor lastSetupAssistantExitDate];
  __int16 v13 = +[NSCalendar currentCalendar];
  id v14 = v13;
  if (v12 && ![v13 isDateInToday:v12])
  {
    if (!*(void *)(*(void *)(a1 + 32) + 112)
      || (+[NSDate date],
          long long v17 = objc_claimAutoreleasedReturnValue(),
          [v17 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 112)],
          double v19 = v18,
          v17,
          v19 >= 3600.0))
    {

LABEL_32:
      id v21 = [*(id *)(*(void *)(a1 + 32) + 16) sharedWebServiceContext];
      id v12 = [v21 configuration];

      uint64_t v22 = *(void *)(a1 + 32);
      if (v12)
      {
        id v23 = *(void **)(v22 + 32);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10037EBAC;
        v28[3] = &unk_1007363F8;
        id v24 = v12;
        uint64_t v25 = *(void *)(a1 + 32);
        id v26 = *(void **)(a1 + 40);
        id v29 = v24;
        uint64_t v30 = v25;
        id v31 = v26;
        [v23 alertNotificationsEnabled:v28];
      }
      else
      {
        [*(id *)(v22 + 16) updateWebServiceConfigurationWithCompletion:0];
        long long v27 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: should not send notification because region config is missing", buf, 2u);
        }

        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      }
      goto LABEL_37;
    }
    uint64_t v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v20 = *(NSObject **)(*(void *)(a1 + 32) + 112);
      *(_DWORD *)long long buf = 138412290;
      id v33 = v20;
      long long v16 = "PDTransitNotificationService: should not check notification because we recently checked at %@";
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v33 = v12;
      long long v16 = "PDTransitNotificationService: should not check notification because device setup too recent: %@.";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_37:
}

void sub_10037EBAC(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) marketsURL];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10037ED2C;
    v11[3] = &unk_10074C160;
    uint64_t v4 = *(void **)(a1 + 48);
    void v11[4] = *(void *)(a1 + 40);
    id v12 = v4;
    +[PKPaymentMarketsConfiguration paymentMarketsConfigurationWithURL:v3 forDeviceClass:0 version:0 completion:v11];

    uint64_t v5 = v12;
  }
  else
  {
    uint64_t v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: should not send notification due to notifications being disabled", buf, 2u);
    }

    int v7 = PDDefaultQueue();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10037EF60;
    block[3] = &unk_10072F788;
    id v9 = *(id *)(a1 + 48);
    dispatch_async(v7, block);

    uint64_t v5 = v9;
  }
}

void sub_10037ED2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = 0;
  if (v5)
  {
    int v7 = [v5 markets];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10037EEE8;
    void v13[3] = &unk_10074C138;
    void v13[4] = *(void *)(a1 + 32);
    void v13[5] = v14;
    [v7 enumerateObjectsUsingBlock:v13];
  }
  else
  {
    int v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: should not send notification because markets could not be loaded", buf, 2u);
    }
  }

  uint64_t v8 = PDDefaultQueue();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10037EF44;
  v9[3] = &unk_100736600;
  id v10 = *(id *)(a1 + 40);
  unsigned __int8 v11 = v14;
  dispatch_async(v8, v9);

  _Block_object_dispose(v14, 8);
}

void sub_10037EED0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

id sub_10037EEE8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id result = [*(id *)(a1 + 32) _eligibleNotificationsForTransitMarket:a2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = result == 0;
  }
  char v8 = !v7;
  *(unsigned char *)(v6 + 24) = v8;
  *a3 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  return result;
}

uint64_t sub_10037EF44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

uint64_t sub_10037EF60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10037F7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10037F7E8(uint64_t a1, void *a2)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "contextMeetsMarketGeoNotificationThresholdForRegion:paymentNetwork:", *(void *)(a1 + 40), objc_msgSend(a2, "integerValue"));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) |= result;
  return result;
}

id sub_10037FDDC(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: stopped monitoring location due to timeout", v4, 2u);
  }

  return [*(id *)(a1 + 32) _cleanupLocationMonitoring];
}

void sub_1003802C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (v5)
  {
    BOOL v7 = *(void **)(*(void *)(a1 + 32) + 32);
    char v8 = [v5 notificationIdentifier];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003803E0;
    v9[3] = &unk_10074C1B0;
    void v9[4] = *(void *)(a1 + 32);
    id v10 = v6;
    id v12 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 40);
    uint64_t v13 = a3;
    [v7 userNotificationWithIdentifier:v8 completion:v9];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1003803E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3 || ([v3 isActive] & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:*(void *)(a1 + 40)];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [*(id *)(a1 + 32) _schedulePromotedExpressModeNotificationDemotion:*(void *)(a1 + 40)];
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100380484(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  atomic_store(0, (unsigned __int8 *)(*(void *)(a1 + 32) + 120));
  if (v5 && a3 == 2)
  {
    [*(id *)(a1 + 32) _beginReportingIfNecessary];
    [*(id *)(a1 + 32) _reportExpressEnable:*(void *)(a1 + 40) eligibleMarkets:*(void *)(a1 + 48) pass:v5];
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100380614;
    v15[3] = &unk_10074C200;
    id v9 = *(id *)(a1 + 64);
    void v15[4] = *(void *)(a1 + 32);
    id v16 = v9;
    [v6 _expressNotificationForMarket:v7 eligibleMarkets:v8 pass:v5 expressUpgrade:1 isReferredFromWatch:0 completion:v15];
    id v10 = v16;
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    if (a3 != 3)
    {
      [*(id *)(a1 + 32) _beginReportingIfNecessary];
      [*(id *)(a1 + 32) _reportExpressModeEnableFailed:*(void *)(a1 + 40) eligibleMarkets:*(void *)(a1 + 48) pass:*(void *)(a1 + 56)];
      [*(id *)(a1 + 32) _endReportingIfNecessary];
      goto LABEL_8;
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10038065C;
    void v13[3] = &unk_10074C228;
    uint64_t v12 = *(void *)(a1 + 56);
    id v14 = *(id *)(a1 + 64);
    [v11 _expressUpgradesAvailableNotificationForPass:v12 completion:v13];
    id v10 = v14;
  }

LABEL_8:
}

id sub_100380614(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 _endReportingIfNecessary];
}

uint64_t sub_10038065C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100380670(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10038095C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || !v6)
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      if (*(unsigned char *)(a1 + 48)) {
        CFStringRef v10 = @"re-";
      }
      else {
        CFStringRef v10 = &stru_10075AAD8;
      }
      int v14 = 138412546;
      CFStringRef v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Multiple products %@notification using default strings for market: %@", (uint8_t *)&v14, 0x16u);
    }

    uint64_t v11 = PKLocalizedTransitString(@"TRANSIT_MARKET_NOTIFICATION_TITLE");

    uint64_t v12 = PKLocalizedTransitString(@"TRANSIT_MARKET_GEO_NOTIFICATION_MESSAGE_MULTIPLE_PRODUCTS_MARKET_NONE");

    uint64_t v7 = (void *)v12;
    id v5 = (id)v11;
  }
  uint64_t v13 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v5 message:v7];
  [(PDUserNotification *)v13 setCustomActionRoute:PKURLActionPaymentSetupSelectPaymentNetwork];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100380AEC(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  if (!v18
    || (+[NSBundle bundleWithURL:v18],
        (id v6 = (NSBundle *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_31;
  }
  uint64_t v7 = v6;
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v8 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY_IPHONE", v6);
    uint64_t v9 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY_IPHONE", v7);
    if (!v8
      || (CFStringRef v10 = @"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY_IPHONE",
          [v8 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY_IPHONE"]))
    {
      CFStringRef v10 = @"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY";
      uint64_t v11 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY", v7);

      uint64_t v8 = (void *)v11;
    }
    if (!v9
      || (CFStringRef v12 = @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY_IPHONE",
          [v9 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY_IPHONE"]))
    {
      CFStringRef v12 = @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY";
      uint64_t v13 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_RENOTIFY", v7);

      uint64_t v9 = (void *)v13;
    }
    if (v8 && ![v8 isEqualToString:v10])
    {
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else
  {
    CFStringRef v12 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  CFStringRef v10 = @"TRANSIT_MARKET_NOTIFICATION_TITLE_IPHONE";
  uint64_t v14 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_IPHONE", v7);

  uint64_t v8 = (void *)v14;
  if (!v9)
  {
LABEL_18:
    CFStringRef v12 = @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_IPHONE";
    uint64_t v15 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_IPHONE", v7);

    uint64_t v9 = (void *)v15;
    goto LABEL_19;
  }
LABEL_17:
  if ([v9 isEqualToString:v12]) {
    goto LABEL_18;
  }
LABEL_19:
  if (!v8 || [v8 isEqualToString:v10])
  {
    __int16 v16 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE", v7);

    if (![v16 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE"])
    {
      uint64_t v8 = v16;
      if (!v9) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }

    uint64_t v8 = 0;
  }
  if (!v9)
  {
LABEL_27:
    uint64_t v17 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE", v7);

    if ([v17 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE"])
    {

      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = v17;
    }
    goto LABEL_30;
  }
LABEL_26:
  if ([v9 isEqualToString:v12]) {
    goto LABEL_27;
  }
LABEL_30:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

LABEL_31:
}

void sub_1003810EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || !v6)
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 64)) {
        CFStringRef v9 = @"re-";
      }
      else {
        CFStringRef v9 = &stru_10075AAD8;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      CFStringRef v23 = v9;
      __int16 v24 = 2112;
      uint64_t v25 = v10;
      __int16 v26 = 2112;
      uint64_t v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Using default strings for %@notification of product with name:%@ in market:%@", buf, 0x20u);
    }

    uint64_t v12 = PKLocalizedTransitString(@"TRANSIT_MARKET_NOTIFICATION_TITLE");

    uint64_t v13 = PKLocalizedTransitString(@"TRANSIT_MARKET_GEO_NOTIFICATION_MESSAGE_TRANSIT_PRODUCT_MARKET_NONE_FORMAT");

    uint64_t v7 = (void *)v13;
    id v5 = (id)v12;
  }
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v14 = PKStringWithValidatedFormat();
  uint64_t v15 = -[PDGenericUserNotification initWithTitle:message:]([PDWalletUserNotification alloc], "initWithTitle:message:", v5, v14, v21);
  [*(id *)(a1 + 48) credentialType];
  __int16 v16 = PKPaymentNetworkNameForPaymentCredentialType();
  uint64_t v17 = PKURLActionPaymentSetupSelectPaymentNetwork;
  id v18 = [*(id *)(a1 + 48) transitNetworkIdentifier];
  double v19 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v17, v16, v18, 0);
  __int16 v20 = +[NSString pathWithComponents:v19];

  [(PDUserNotification *)v15 setCustomActionRoute:v20];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10038133C(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (!v13
    || (+[NSBundle bundleWithURL:v13],
        (id v6 = (NSBundle *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_17;
  }
  uint64_t v7 = v6;
  if (!*(unsigned char *)(a1 + 48))
  {
    CFStringRef v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY", v6);
  CFStringRef v9 = @"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_RENOTIFY_FORMAT";
  uint64_t v10 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_RENOTIFY_FORMAT", v7);
  if (!v8
    || (uint64_t v11 = v8, [v8 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE_RENOTIFY"]))
  {
LABEL_9:
    uint64_t v11 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE", v7);

    if ([v11 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TITLE"])
    {

      uint64_t v11 = 0;
    }
  }
  if (!v10 || [v10 isEqualToString:v9])
  {
    uint64_t v12 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_FORMAT", v7);

    if ([v12 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_TRANSIT_PRODUCT_MESSAGE_FORMAT"])
    {

      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = v12;
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

LABEL_17:
}

void sub_100381908(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5 && v6)
  {
LABEL_16:
    uint64_t v31 = *(void *)(a1 + 40);
    uint64_t v15 = PKStringWithValidatedFormat();
    __int16 v16 = [PDPassExpressModeEnabledUserNotification alloc];
    uint64_t v17 = objc_msgSend(*(id *)(a1 + 48), "uniqueID", v31);
    uint64_t v18 = *(void *)(a1 + 88);
    [*(id *)(a1 + 32) expressUpgradePromoteDuration];
    double v19 = -[PDPassExpressModeEnabledUserNotification initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:](v16, "initWithTitle:message:forPassUniqueIdentifier:hideDisableAction:promoteDuration:", v5, v15, v17, v18);

    __int16 v20 = [(PDUserNotification *)v19 customActionQueryParameters];
    if (v20)
    {
      uint64_t v21 = [(PDUserNotification *)v19 customActionQueryParameters];
      id v22 = [v21 mutableCopy];
    }
    else
    {
      id v22 = objc_alloc_init((Class)NSMutableDictionary);
    }

    CFStringRef v23 = [*(id *)(a1 + 32) analyticsReportingNameValue];

    if (v23)
    {
      __int16 v24 = [*(id *)(a1 + 32) analyticsReportingNameValue];
      [v22 setObject:v24 forKeyedSubscript:PKUserNotificationActionQueryItemMarketName];
    }
    uint64_t v25 = [*(id *)(a1 + 32) region];

    if (v25)
    {
      __int16 v26 = [*(id *)(a1 + 32) region];
      [v22 setObject:v26 forKeyedSubscript:PKUserNotificationActionQueryItemMarketRegion];
    }
    if (*(void *)(a1 + 56))
    {
      uint64_t v27 = objc_msgSend(*(id *)(a1 + 64), "_eligibleMarketNames:");
      [v22 setObject:v27 forKeyedSubscript:PKUserNotificationActionQueryItemEligibleMarkets];
    }
    if (*(unsigned char *)(a1 + 97)) {
      uint64_t v28 = &PKAnalyticsReportReferralSourceWatchApp;
    }
    else {
      uint64_t v28 = &PKAnalyticsReportReferralSourceWallet;
    }
    [v22 setObject:*v28 forKeyedSubscript:PKUserNotificationActionQueryItemReferralSource];
    uint64_t v29 = *(void *)(a1 + 72);
    if (v29) {
      [v22 setObject:v29 forKeyedSubscript:PKUserNotificationActionQueryItemMarketNotificationAssetIdentifier];
    }
    [(PDUserNotification *)v19 setCustomActionQueryParameters:v22];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();

    goto LABEL_31;
  }
  if (PKAllowExpressRenotifyNotificationDefaultStrings())
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Allowing default strings for express re-notify due to internal setting ON", buf, 2u);
    }

    goto LABEL_8;
  }
  int v9 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v10 = PKLogFacilityTypeGetObject();
  uint64_t v8 = v10;
  if (v9)
  {
LABEL_8:
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      id v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Using default strings for express notification for market: %@", buf, 0xCu);
    }

    if (PKIsWatch())
    {
      uint64_t v12 = PKLocalizedTransitString(@"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_NOTIFICATION_TITLE_WATCH");

      if (*(void *)(a1 + 88) == 1) {
        id v13 = @"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_MARKET_NONE_FORMAT_WATCH";
      }
      else {
        id v13 = @"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_MARKET_NONE_FORMAT_WATCH_DISABLE_ACTION";
      }
    }
    else
    {
      uint64_t v12 = PKLocalizedTransitString(@"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_NOTIFICATION_TITLE");

      id v13 = @"TRANSIT_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_MARKET_NONE_FORMAT";
    }
    id v5 = (id)v12;
    uint64_t v14 = PKLocalizedTransitString(&v13->isa);

    uint64_t v7 = (void *)v14;
    goto LABEL_16;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412802;
    id v33 = v5;
    __int16 v34 = 2112;
    uint64_t v35 = v7;
    __int16 v36 = 2112;
    uint64_t v37 = v30;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Canceling express re-notify notification due to missing mobile asset, title (%@) and/or message (%@) for market: %@", buf, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
LABEL_31:
}

void sub_100381D2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    int v17 = 138412802;
    id v18 = v5;
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    __int16 v21 = 2112;
    id v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: downloaded mobile assets: %@ for market: %@ with error: %@", (uint8_t *)&v17, 0x20u);
  }

  if (v5
    && (+[NSBundle bundleWithURL:v5],
        (uint64_t v9 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v10 = (NSBundle *)v9;
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v11 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_UPGRADE_TITLE";
    }
    else {
      uint64_t v11 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_RENOTIFY_TITLE";
    }
    uint64_t v12 = v11;
    id v13 = PKLocalizedStringInMarketBundle(v12, v10);
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v14 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_UPGRADE_MESSAGE_FORMAT";
    }
    else {
      uint64_t v14 = @"TRANSIT_MARKET_NOTIFICATION_OPEN_LOOP_EXPRESS_RENOTIFY_MESSAGE_FORMAT";
    }
    uint64_t v15 = v14;
    __int16 v16 = PKLocalizedStringInMarketBundle(v15, v10);
    if (v13 && [v13 isEqualToString:v12])
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138412290;
        id v18 = v13;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Clearing failed mobile asset express upgrade notification title: %@", (uint8_t *)&v17, 0xCu);
      }

      id v13 = 0;
    }
    if (v16 && [v16 isEqualToString:v15])
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138412290;
        id v18 = v16;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Clearing failed mobile asset express upgrade notification message: %@", (uint8_t *)&v17, 0xCu);
      }

      __int16 v16 = 0;
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id sub_1003828A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 rangeOfString:@":"];
  if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v5 = 0;
  }
  else
  {
    id v6 = [v3 substringToIndex:v4];
    id v5 = [v6 isEqualToString:*(void *)(a1 + 32)];
  }
  return v5;
}

uint64_t sub_1003830BC(uint64_t a1, void *a2)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = objc_msgSend(a2, "paymentApplications", 0);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v9 = [v8 paymentNetworkIdentifier];
        uint64_t v10 = *(void **)(a1 + 32);
        uint64_t v11 = +[NSNumber numberWithInteger:v9];
        if ([v10 containsObject:v11])
        {
          unsigned __int8 v12 = [v8 _supportsTransitNetworks:*(void *)(a1 + 40)];

          if (v12)
          {
            uint64_t v13 = 1;
            goto LABEL_13;
          }
        }
        else
        {
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
  uint64_t v13 = 0;
LABEL_13:

  return v13;
}

void sub_100383418(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      id v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_10038359C()
{
  PDDefaultQueue();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  PDScheduledActivityClientRegister();
}

void sub_10038366C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKCurrentRegion();
  uint64_t v5 = [v3 context];

  uint64_t v6 = [v5 configuration];
  unsigned int v7 = [v6 shouldEnableTransitServiceCheckInForRegion:v4];

  if (v7)
  {
    long long v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = (id)objc_opt_class();
      id v9 = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Scheduling check in due to config", (uint8_t *)&v14, 0xCu);
    }
    [*(id *)(a1 + 32) _connect];
    long long v10 = PDScheduledActivityGetCriteria();
    if (!v10)
    {
      uint64_t v11 = [*(id *)(a1 + 32) _startTime];
      unsigned __int8 v12 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:v11];

      [v12 setRequireNetworkConnectivity:1];
      [v12 setRequireMainsPower:1];
      [v12 setRequireScreenSleep:1];
      [v12 setRepeating:1];
      [v12 setRepeatInterval:86400.0];
      [v12 setReason:@"PDTransitNotificationServiceCheckIn"];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = [v12 debugDescription];
        int v14 = 138412290;
        id v15 = v13;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Scheduling transit check in: %@", (uint8_t *)&v14, 0xCu);
      }
      PDScheduledActivityRegister();
    }
  }
}

void sub_100383DDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if ([v3 isActive])
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v5 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = 138412290;
          id v9 = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Demoting PDPassExpressModeEnabledUserNotification %@ to no longer be stuck to recents", (uint8_t *)&v8, 0xCu);
        }

        id v6 = v4;
        id v7 = [[PDPassExpressModeEnabledUserNotification alloc] initAsUnpromotedReplacementForNotification:v6];
        [*(id *)(*(void *)(a1 + 32) + 32) removeUserNotification:v6];
        [*(id *)(*(void *)(a1 + 32) + 32) insertUserNotification:v7];
      }
    }
  }
  PDScheduledActivityRemove();
}

void sub_1003843E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v23 = v6;
    int v8 = objc_alloc_init((Class)NSMutableSet);
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v9 = [v5 marketsForLocation:*(void *)(a1 + 40) ofType:1];
    id v10 = [v9 countByEnumeratingWithState:&v34 objects:v40 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v35;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v35 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void *)(*((void *)&v34 + 1) + 8 * i);
          id v15 = objc_msgSend(*(id *)(a1 + 48), "_eligibleNotificationsForTransitMarket:", v14, v23);
          if (v15)
          {
            long long v16 = [[PKNotifiablePaymentMarket alloc] initWithPaymentMarket:v14 eligibleNotifiableState:v15];
            [v8 pk_safelyAddObject:v16];
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v34 objects:v40 count:16];
      }
      while (v11);
    }

    if ([v8 count])
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
      long long v17 = *(void **)(a1 + 48);
      long long v18 = [*(id *)(a1 + 64) targetDevice];
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_10038474C;
      v24[3] = &unk_10074C3E0;
      uint64_t v25 = *(id *)(a1 + 32);
      __int16 v19 = v8;
      uint64_t v20 = *(void *)(a1 + 48);
      __int16 v26 = v19;
      uint64_t v27 = v20;
      id v28 = *(id *)(a1 + 72);
      id v29 = *(id *)(a1 + 80);
      id v30 = *(id *)(a1 + 88);
      id v31 = *(id *)(a1 + 96);
      id v32 = *(id *)(a1 + 56);
      id v33 = *(id *)(a1 + 104);
      [v17 _availableProductsForNotifiableMarkets:v19 filteredForTargetDevice:v18 completion:v24];

      __int16 v21 = v25;
    }
    else
    {
      __int16 v21 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = *(void **)(a1 + 40);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v39 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: missing markets for location:%@", buf, 0xCu);
      }
    }
    id v7 = v23;
  }
  else
  {
    int v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v39 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: failed to download market configurations (error: %@)", buf, 0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_10038474C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableSet);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100384908;
  void v12[3] = &unk_10074C3B8;
  id v5 = *(void **)(a1 + 40);
  void v12[4] = *(void *)(a1 + 48);
  id v6 = v3;
  id v13 = v6;
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 72);
  id v7 = v4;
  id v17 = v7;
  id v18 = *(id *)(a1 + 80);
  [v5 enumerateObjectsUsingBlock:v12];
  if ([v7 count])
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 88));
    int v8 = *(void **)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100384A4C;
    v9[3] = &unk_10072FC70;
    id v10 = *(id *)(a1 + 96);
    id v11 = *(id *)(a1 + 88);
    [v8 _expressRenotifiableOpenLoopPassesForViableMarkets:v7 completion:v9];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_100384908(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = [v3 market];
  unsigned int v4 = [v3 isDCINotifiable];
  unsigned int v5 = [v3 isExpressUpgradeNotifiable];
  unsigned int v6 = [v3 isDCIRenotifiable];
  unsigned int v7 = [v3 isExpressRenotifiable];

  if ((v4 & 1) != 0 || v6)
  {
    int v8 = [*(id *)(a1 + 32) _transitProducts:*(void *)(a1 + 40) forMarket:v10];
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    int v8 = 0;
    if (!v4) {
      goto LABEL_8;
    }
  }
  if ([v8 count]) {
    [*(id *)(a1 + 48) unionSet:v8];
  }
LABEL_8:
  if (v5)
  {
    id v9 = [*(id *)(a1 + 32) _expressUpgradeableOpenLoopPassesForMarket:v10];
    if ([v9 count]) {
      [*(id *)(a1 + 56) unionSet:v9];
    }
  }
  if (v6 && [v8 count]) {
    [*(id *)(a1 + 64) unionSet:v8];
  }
  if (v7) {
    [*(id *)(a1 + 72) addObject:v10];
  }
  [*(id *)(a1 + 80) addObject:v10];
}

void sub_100384A4C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) unionSet:a2];
  id v3 = *(NSObject **)(a1 + 40);
  dispatch_group_leave(v3);
}

void sub_100384A8C(uint64_t a1)
{
  id v2 = (char *)[*(id *)(a1 + 32) count];
  id v3 = &v2[(void)[*(id *)(a1 + 40) count]];
  unsigned int v4 = (char *)[*(id *)(a1 + 48) count] + (void)v3;
  if ((char *)[*(id *)(a1 + 56) count] + (void)v4)
  {
    unsigned int v5 = +[PKPaymentMarketsConfiguration closestMarketFromSet:*(void *)(a1 + 64) forLocation:*(void *)(a1 + 72)];
    unsigned int v6 = *(void **)(a1 + 80);
    uint64_t v8 = *(void *)(a1 + 56);
    unsigned int v7 = *(void **)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100384C24;
    v15[3] = &unk_10074C458;
    id v12 = v7;
    uint64_t v13 = *(void *)(a1 + 80);
    id v16 = v12;
    uint64_t v17 = v13;
    id v18 = *(id *)(a1 + 56);
    id v19 = *(id *)(a1 + 40);
    [v6 _postNotificationForMarket:v5 eligibleMarkets:v12 transitProducts:v9 upgradeableOpenLoopPasses:v10 renotifiableProducts:v11 renotifiablePasses:v8 completion:v15];
  }
  else
  {
    unsigned int v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: no products available for location", buf, 2u);
    }
  }
}

void sub_100384C24(id *a1, int a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a2)
  {
    if ([a1[4] count])
    {
      [a1[5] _recordNotificationType:a4 sentForMarkets:a1[4]];
    }
    else
    {
      uint64_t v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v24 = a4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: Warning - Notification type (%lu) posted representing no transit markets. Skipping state update.", buf, 0xCu);
      }
    }
    if (a4 == 101)
    {
      uint64_t v9 = a1 + 5;
      [a1[5] _beginReportingIfNecessary];
      id v18 = a1[4];
      id v17 = a1[5];
      id v12 = [a1[7] anyObject];
      uint64_t v13 = PKAnalyticsReportExpressGeolocationEnableNotificationPageTag;
      id v14 = v17;
      id v15 = v7;
      id v16 = v18;
    }
    else
    {
      if (a4 != 103)
      {
LABEL_12:
        id v19 = a1[5];
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_100384E20;
        v20[3] = &unk_10074C430;
        uint64_t v22 = a4;
        void v20[4] = v19;
        id v21 = v7;
        [v19 _accessObserversWithHandler:v20];

        goto LABEL_13;
      }
      uint64_t v9 = a1 + 5;
      [a1[5] _beginReportingIfNecessary];
      id v10 = a1[4];
      id v11 = a1[5];
      id v12 = [a1[6] anyObject];
      uint64_t v13 = PKAnalyticsReportExpressGeolocationEnableNotificationPageTag;
      id v14 = v11;
      id v15 = v7;
      id v16 = v10;
    }
    [v14 _reportExpressNotificationForMarket:v15 eligibleMarkets:v16 pass:v12 pageTag:v13 isReferredFromWatch:0];

    [*v9 _endReportingIfNecessary];
    goto LABEL_12;
  }
LABEL_13:
}

uint64_t sub_100384E20(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[6];
  unsigned int v6 = v3;
  if ((unint64_t)(v4 - 102) < 2)
  {
    if (objc_opt_respondsToSelector()) {
      [v6 transitNotificationService:a1[4] didAddRenotifyNotificationForMarket:a1[5]];
    }
  }
  else
  {
    if (v4 != 101)
    {
      if (v4 != 100) {
        goto LABEL_10;
      }
      if (objc_opt_respondsToSelector()) {
        [v6 transitNotificationService:a1[4] didAddDCINotificationForMarket:a1[5]];
      }
    }
    if (objc_opt_respondsToSelector()) {
      [v6 transitNotificationService:a1[4] didAddOpenLoopUpgradeNotificationForMarket:a1[5]];
    }
  }
LABEL_10:
  return _objc_release_x4();
}

void sub_1003850C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1003850E0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v7 = a2;
  unsigned int v5 = [v7 market];
  if (![v5 productsRequiredForRegion])
  {

    goto LABEL_7;
  }
  if ([v7 isDCINotifiable])
  {
  }
  else
  {
    unsigned __int8 v6 = [v7 isDCIRenotifiable];

    if ((v6 & 1) == 0) {
      goto LABEL_7;
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  *a3 = 1;
LABEL_7:
}

void sub_100385188(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100385238;
  v5[3] = &unk_10074C4A8;
  id v6 = *(id *)(a1 + 32);
  uint64_t v4 = objc_msgSend(a2, "pk_objectsPassingTest:", v5);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_100385238(uint64_t a1, void *a2)
{
  return _[a2 supportsDevice:*(void *)(a1 + 32)];
}

void sub_100385358(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 provisioningMethodTypes];
  id v5 = [v4 count];

  if (v5)
  {
    id v6 = [v3 regions];
    id v7 = [a1[4] region];
    unsigned int v8 = [v6 containsObject:v7];

    if (v8)
    {
      uint64_t v23 = 0;
      uint64_t v24 = &v23;
      uint64_t v25 = 0x2020000000;
      uint64_t v26 = 0;
      uint64_t v9 = [v3 paymentOptions];
      id v17 = _NSConcreteStackBlock;
      uint64_t v18 = 3221225472;
      id v19 = sub_1003855B4;
      uint64_t v20 = &unk_10074C4D0;
      id v21 = a1[5];
      uint64_t v22 = &v23;
      [v9 enumerateObjectsUsingBlock:&v17];

      if (!v24[3])
      {
LABEL_10:

        _Block_object_dispose(&v23, 8);
        goto LABEL_11;
      }
      id v10 = objc_msgSend(v3, "supportedTransitNetworkIdentifiers", v17, v18, v19, v20);
      id v11 = +[NSSet setWithArray:v10];
      id v12 = [a1[4] expressTransitNetworks];
      if (([v11 intersectsSet:v12] & 1) != 0 || (uint64_t v13 = v24[3], v13 == 103) || v13 == 108)
      {
      }
      else
      {

        if (v13 != 109) {
          goto LABEL_9;
        }
      }
      id v14 = objc_alloc_init(PDTransitNotificationProduct);
      [(PDTransitNotificationProduct *)v14 setTransitMarket:a1[4]];
      id v15 = [v3 displayName];
      [(PDTransitNotificationProduct *)v14 setDisplayName:v15];

      [(PDTransitNotificationProduct *)v14 setCredentialType:v24[3]];
      id v16 = [v10 firstObject];
      [(PDTransitNotificationProduct *)v14 setTransitNetworkIdentifier:v16];

      [a1[6] addObject:v14];
LABEL_9:

      goto LABEL_10;
    }
  }
LABEL_11:
}

void sub_100385594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003855B4(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [a2 cardType];
  id v7 = *(void **)(a1 + 32);
  unsigned int v8 = +[NSNumber numberWithInteger:v6];
  LODWORD(v7) = [v7 containsObject:v8];

  if (v7)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
    *a4 = 1;
  }
}

id sub_1003858F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(*(void *)(a1 + 32) + 56) upgradeablePaymentApplicationIdentifiersForPass:v3];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v21 = v3;
  id v5 = [v3 devicePaymentApplications];
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v23;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v11 = [v10 paymentNetworkIdentifier];
        id v12 = [v10 applicationIdentifier];
        if ([v4 containsObject:v12])
        {
          uint64_t v13 = *(void **)(a1 + 40);
          id v14 = +[NSNumber numberWithInteger:v11];
          LODWORD(v13) = [v13 containsObject:v14];

          if (v13)
          {
            id v17 = v21;
            id v18 = [*(id *)(*(void *)(a1 + 32) + 56) isPassUpgradeableForExpress:v21];
            id v16 = v18;
            if ((v18 & 1) == 0)
            {
              id v19 = PKLogFacilityTypeGetObject();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 134217984;
                id v27 = v11;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: default payment pass with supported payment network %ld is unable to be upgraded for express", buf, 0xCu);
              }
            }
            goto LABEL_19;
          }
        }
        else
        {
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v22 objects:v28 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = *(void **)(a1 + 40);
    *(_DWORD *)long long buf = 138412290;
    id v27 = v15;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDTransitNotificationService: default payment pass is not supported by the market expressCredentials %@", buf, 0xCu);
  }
  id v16 = 0;
  id v17 = v21;
LABEL_19:

  return v16;
}

void sub_100385C34(void *a1, void *a2)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100385D98;
  void v12[3] = &unk_10074C548;
  void v12[4] = a1[4];
  id v3 = objc_msgSend(a2, "pk_setByApplyingBlock:", v12);
  if ([v3 count])
  {
    id v4 = objc_alloc_init((Class)NSMutableSet);
    id v5 = (void *)a1[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100385DF8;
    v9[3] = &unk_10074C598;
    id v10 = v3;
    id v11 = v4;
    id v6 = v4;
    [v5 enumerateObjectsUsingBlock:v9];
    uint64_t v7 = a1[6];
    id v8 = [v6 copy];
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(void))(a1[6] + 16))();
  }
}

id sub_100385D98(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 40);
  id v3 = [a2 passUniqueIdentifier];
  id v4 = [v2 passWithUniqueIdentifier:v3];

  return v4;
}

void sub_100385DF8(uint64_t a1, void *a2)
{
  [a2 openLoopExpressCredentialTypes];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100385EB4;
  v5[3] = &unk_10074C570;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v3 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  [v3 enumerateObjectsUsingBlock:v5];
}

void sub_100385EB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = objc_msgSend(v3, "paymentApplications", 0);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(a1 + 32);
        id v10 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(*((void *)&v11 + 1) + 8 * (void)v8) paymentNetworkIdentifier]);
        LODWORD(v9) = [v9 containsObject:v10];

        if (v9) {
          [*(id *)(a1 + 40) addObject:v3];
        }
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

void sub_100386E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

id sub_100386E40(uint64_t a1, uint64_t a2)
{
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  id v4 = *(void **)(a1 + 32);
  return _[v4 supportsExpressForAutomaticSelectionTechnologyType:a2];
}

void sub_100386EA0(uint64_t a1, uint64_t a2)
{
  id v3 = 0;
  +[PKExpressPassInformation extractApplicationIdentifier:&v3 subcredentialIdentifier:0 fromIdentifiers:a2];
  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "pk_safelyAddObject:", v3);
}

BOOL sub_100387024(id a1, NSNumber *a2, BOOL *a3)
{
  return (char *)[(NSNumber *)a2 integerValue] - 1 < (char *)0x63;
}

BOOL sub_1003870A0(id a1, NSNumber *a2, BOOL *a3)
{
  return [(NSNumber *)a2 integerValue] > 100;
}

void sub_100387728(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  CFRelease(*(CFTypeRef *)(a1 + 56));
  if (v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if ([v9 count])
    {
      id v6 = objc_msgSend(v9, "pk_arrayByApplyingBlock:", &stru_10074CA10);
      uint64_t v7 = [*(id *)(a1 + 32) _generateCborRepresentationOfCertificats:v6 authenticationData:*(void *)(a1 + 40)];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 48);
      id v6 = PDBasicError();
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v6);
    }
  }
}

id sub_100387838(id a1, id a2)
{
  CFDataRef v2 = SecCertificateCopyData((SecCertificateRef)a2);
  return v2;
}

void sub_1003888CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_100388914(uint64_t a1, void *a2)
{
  CFDataRef v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 identifier];
  [v2 safelySetObject:v3 forKey:v4];
}

void sub_100388978(uint64_t a1, char a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = PKLogFacilityTypeGetObject();
  oslog = v8;
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v31 = (id)objc_opt_class();
      __int16 v32 = 2112;
      id v33 = v6;
      id v10 = v31;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@: PDUserEvaluationEnvironment preflight error: %@", buf, 0x16u);

      id v9 = oslog;
    }

LABEL_19:
    uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8);
    id v11 = *(id *)(v22 + 40);
    *(void *)(v22 + 40) = 0;
    goto LABEL_20;
  }
  if ((a2 & 1) == 0)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v31 = (id)objc_opt_class();
      id v20 = v31;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@: PDUserEvaluationEnvironment preflight failed", buf, 0xCu);

      id v9 = oslog;
    }

    id v21 = objc_alloc((Class)NSError);
    id v6 = [v21 initWithDomain:PKRulesErrorDomain code:1 userInfo:0];
    goto LABEL_19;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    sub_1005176E4(v9);
    id v9 = oslog;
  }

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v11 = *(id *)(a1 + 40);
  id v12 = [v11 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v27;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v27 != v13) {
          objc_enumerationMutation(v11);
        }
        id v15 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        id v16 = objc_msgSend(v15, "predicate", oslog);
        id v17 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v16 evaluateWithObject:v7]);
        id v18 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        id v19 = [v15 identifier];
        [v18 setObject:v17 forKeyedSubscript:v19];
      }
      id v12 = [v11 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v12);
  }
  id v6 = 0;
LABEL_20:

  long long v23 = oslog;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
  {
    sub_100517648(v7, oslog);
    long long v23 = oslog;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100388EC4(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      id v34 = (id)objc_opt_class();
      __int16 v35 = 2112;
      id v36 = v7;
      id v10 = v34;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@: PDUserEvaluationEnvironment preflight error: %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else if (a2)
  {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v12 = *(id *)(a1 + 40);
    id v13 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v29;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v29 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void *)(*((void *)&v28 + 1) + 8 * i);
          id v18 = *(void **)(a1 + 32);
          id v19 = [*(id *)(a1 + 48) objectForKeyedSubscript:v17];
          id v20 = [v18 evaluateUserProperty:v17 withParameter:v19 usingEnvironment:v8];
          [v11 setObject:v20 forKeyedSubscript:v17];
        }
        id v14 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }
      while (v14);
    }

    id v21 = *(unsigned char **)(a1 + 32);
    if (v21[80]) {
      [v21 overrideValues:v11 forUserProperties:*(void *)(a1 + 40) withParameters:*(void *)(a1 + 48)];
    }
    uint64_t v22 = *(void *)(a1 + 56);
    id v23 = [v11 copy];
    (*(void (**)(uint64_t, id, void))(v22 + 16))(v22, v23, 0);

    id v7 = 0;
  }
  else
  {
    long long v24 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v34 = (id)objc_opt_class();
      id v25 = v34;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@: PDUserEvaluationEnvironment preflight failed", buf, 0xCu);
    }
    id v26 = objc_alloc((Class)NSError);
    id v27 = [v26 initWithDomain:PKRulesErrorDomain code:1 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10038A558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10038A570(uint64_t a1, uint64_t a2, void *a3)
{
  PKLogFacilityTypeGetObject();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = *(const void **)(a1 + 32);
  id v7 = a3;
  os_signpost_id_t v8 = os_signpost_id_make_with_pointer(v5, v6);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v9 = v8;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)id v10 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_END, v9, "discovery:preflightEnvironment", "", v10, 2u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10038B33C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v12 = objc_alloc_init((Class)PKPayLaterAppliedPayment);
  os_signpost_id_t v8 = [PayLaterAppliedPayment alloc];
  os_signpost_id_t v9 = [*(id *)(a1 + 32) database];
  id v10 = [(SQLiteEntity *)v8 initWithPersistentID:a2 inDatabase:v9];

  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v12 withProperties:v7 values:a4];
  id v11 = [(PayLaterAppliedPayment *)v10 _amountApplied];
  [v12 setAmountApplied:v11];

  [*(id *)(a1 + 48) safelyAddObject:v12];
}

void sub_10038B8A4(id a1, PKPayLaterAppliedPayment *a2, id a3)
{
}

void sub_10038C324(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    id v3 = [(SQLiteEntity *)[PaymentCommutePlanDetail alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
    [(SQLiteEntity *)v3 deleteFromDatabase];
  }
}

void sub_10038C5E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v9 = objc_alloc_init((Class)PKPaymentCommutePlanDetail);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v9 withProperties:v6 values:a4];

  id v7 = *(void **)(a1 + 40);
  os_signpost_id_t v8 = +[PaymentCommutePlanDetail _postProcessValue:v9];
  [v7 addObject:v8];
}

id sub_10038C7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10038C99C(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_10038C9A4(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_10038C9AC(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_10038C9B4(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
}

void sub_10038C9BC(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentCommutePlanDetail setValue:](v4, "setValue:", [a3 integerValue]);
}

void sub_10038CA14(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentCommutePlanDetail *)v3 setStartDate:v4];
}

void sub_10038CA74(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentCommutePlanDetail *)v3 setExpiryDate:v4];
}

void sub_10038CAD4(id a1, PKPaymentCommutePlanDetail *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPaymentCommutePlanDetail *)v3 setLastUpdateDate:v4];
}

void sub_10038CEA8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10038D328(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourcePaymentPassDetails setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10038D380(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_10038D388(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_10038D390(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_10038D398(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
}

void sub_10038D3A0(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourcePaymentPassDetails setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_10038D3F8(id a1, PKPayLaterFundingSourcePaymentPassDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourcePaymentPassDetails setCardNetwork:](v4, "setCardNetwork:", [a3 integerValue]);
}

void sub_10038D514(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourceBankDetails setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10038D56C(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
}

void sub_10038D574(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
}

void sub_10038D57C(id a1, PKPayLaterFundingSourceBankDetails *a2, id a3)
{
}

void sub_10038D620(id a1, PKPayLaterFundingSourceAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFundingSourceAccountDetails setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10038D678(id a1, PKPayLaterFundingSourceAccountDetails *a2, id a3)
{
}

void sub_10038DB2C(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (*(void *)(a1 + 40) <= a3)
  {
    id v5 = [(SQLiteEntity *)[ValueAddedServiceTransaction alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
    *a4 = ![(ValueAddedServiceTransaction *)v5 deleteFromDatabase];
  }
}

id sub_10038E5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10038E994(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKValueAddedServiceTransaction);
  [*(id *)(a1 + 40) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];
}

void sub_10038EAFC(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
}

void sub_10038EB04(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
}

void sub_10038EB0C(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKValueAddedServiceTransaction setDidSucceed:](v4, "setDidSucceed:", [a3 BOOLValue]);
}

void sub_10038EB64(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
}

void sub_10038EB6C(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
  id v4 = a2;
  -[PKValueAddedServiceTransaction setTerminalMode:](v4, "setTerminalMode:", [a3 integerValue]);
}

void sub_10038EBC4(id a1, PKValueAddedServiceTransaction *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKValueAddedServiceTransaction *)v3 setTransactionDate:v4];
}

void sub_10038EED0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = +[NSMutableString string];
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10038F0A8(id a1, NSMutableString *a2, id a3)
{
}

void sub_10038F4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10038F504(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

void sub_10038F680(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  id v11 = [v9 _propertySetters];
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_10038FA54(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_10038FA5C(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setCredentialType:](v4, "setCredentialType:", [a3 integerValue]);
}

void sub_10038FAB4(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_10038FABC(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_10038FB14(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_10038FB1C(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_10038FB24(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_10038FB2C(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPendingPaymentRemoteCredential *)v3 setPassURL:v4];
}

void sub_10038FB8C(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setSupportsSuperEasyProvisioning:](v4, "setSupportsSuperEasyProvisioning:", [a3 BOOLValue]);
}

void sub_10038FBE4(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
  id v4 = a2;
  -[PKPendingPaymentRemoteCredential setCouldSupportSuperEasyProvisioning:](v4, "setCouldSupportSuperEasyProvisioning:", [a3 BOOLValue]);
}

void sub_10038FC3C(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_10038FC44(id a1, PKPendingPaymentRemoteCredential *a2, id a3)
{
}

void sub_10038FE68(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 feature];
  id v6 = [v4 context];

  id v7 = PKPassKitBundle();
  os_signpost_id_t v8 = [v6 applyServicePreferredLanguageForFeatureIdentifier:v5 mainLanguageBundle:v7];

  id v9 = *(NSObject **)(*(void *)(a1 + 40) + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10038FF94;
  block[3] = &unk_10074D118;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 48);
  id v14 = v8;
  uint64_t v15 = *(void *)(a1 + 40);
  id v16 = v5;
  id v10 = v8;
  dispatch_async(v9, block);
}

void sub_10038FF94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) applicationType];
  id v3 = [*(id *)(a1 + 32) applicationState];
  id v4 = [*(id *)(a1 + 40) applicationState];
  id v5 = [*(id *)(a1 + 32) applicationStateReason];
  if ((v5 != [*(id *)(a1 + 40) applicationStateReason] || v3 != v4) && v2 == (id)1)
  {
    id v13 = [*(id *)(a1 + 32) applicationIdentifier];
    os_signpost_id_t v8 = [PDWalletUserNotification alloc];
    id v9 = PKLocalizedApplyFeatureString();
    id v10 = PKLocalizedApplyFeatureString();
    id v11 = [(PDGenericUserNotification *)v8 initWithTitle:v9 message:v10];

    [(PDUserNotification *)v11 setSuppressionBehavior:1];
    id v12 = [*(id *)(a1 + 56) _cutomRouteForFeatureIdentifier:*(void *)(a1 + 64)];
    [(PDUserNotification *)v11 setCustomActionRoute:v12];

    [(PDUserNotification *)v11 setNotificationIdentifier:v13];
    [(PDUserNotification *)v11 setReissueBannerOnUpdate:1];
    [*(id *)(*(void *)(a1 + 56) + 8) insertUserNotification:v11];
  }
}

id sub_100390224(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) applicationIdentifier];
  objc_msgSend(v2, "_queue_removeNonTerminalNotificationsForApplicationIdentifier:", v3);

  id v4 = *(void **)(*(void *)(a1 + 32) + 8);
  return [v4 updateWalletBadgeCount];
}

void sub_1003906B0(uint64_t a1, void *a2)
{
  id v3 = [a2 context];
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = PKPassKitBundle();
  id v6 = [v3 applyServicePreferredLanguageForFeatureIdentifier:v4 mainLanguageBundle:v5];

  uint64_t v7 = *(void *)(a1 + 32);
  os_signpost_id_t v8 = *(NSObject **)(v7 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003907B8;
  v10[3] = &unk_100730198;
  void v10[4] = v7;
  id v11 = *(id *)(a1 + 40);
  id v12 = *(id *)(a1 + 48);
  id v13 = v6;
  id v9 = v6;
  dispatch_async(v8, v10);
}

id sub_1003907B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_notificationForNewApplication:oldApplication:preferredLanguage:", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
}

void sub_100390C0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
}

void sub_100391FB8(uint64_t a1, void *a2)
{
  id v19 = a2;
  id v3 = [*(id *)(a1 + 32) accountIdentifier];
  if (v3)
  {
    uint64_t v4 = [*(id *)(*(void *)(a1 + 40) + 32) accountWithIdentifier:v3];
    id v5 = [v4 associatedPassUniqueID];
  }
  else
  {
    id v5 = 0;
  }
  id v6 = [*(id *)(a1 + 32) invitationDetails];
  id v7 = [*(id *)(a1 + 32) applicationStateReason];
  if (v7 == (id)12)
  {
    os_signpost_id_t v8 = [v6 accountUserAltDSID];
    uint64_t v9 = [v6 accountUserNameComponents];
  }
  else
  {
    if (v7 != (id)13)
    {
      id v10 = 0;
      os_signpost_id_t v8 = 0;
LABEL_14:
      id v14 = PKLocalizedMadisonString(@"SHARING_INVITATION_DECLINED_NOTIFICATION_NO_NAME_MESSAGE");
      goto LABEL_15;
    }
    os_signpost_id_t v8 = [v6 originatorAltDSID];
    uint64_t v9 = [v6 originatorNameComponents];
  }
  id v10 = (void *)v9;
  if (!v8) {
    goto LABEL_14;
  }
  if (PKAltDSIDIsCurrentUser()) {
    goto LABEL_16;
  }
  if (!v10) {
    goto LABEL_14;
  }
  id v11 = [v19 familyMemberForAltDSID:v8];
  id v12 = +[PKContactResolver contactForFamilyMember:v11 nameComponents:v10 imageData:0];

  if (!v12) {
    goto LABEL_14;
  }
  id v13 = [v12 givenName];
  id v14 = PKLocalizedMadisonString(@"SHARING_INVITATION_DECLINED_NOTIFICATION_MESSAGE", @"%@", v13);

LABEL_15:
  uint64_t v15 = [PDWalletUserNotification alloc];
  id v16 = PKLocalizedMadisonString(@"SHARING_INVITATION_DECLINED_NOTIFICATION_TITLE");
  uint64_t v17 = [(PDGenericUserNotification *)v15 initWithTitle:v16 message:v14];

  [(PDUserNotification *)v17 setSuppressionBehavior:1];
  id v18 = [*(id *)(a1 + 40) _customRouteForPassUniqueID:v5];
  [(PDUserNotification *)v17 setCustomActionRoute:v18];

  [(PDUserNotification *)v17 setNotificationIdentifier:*(void *)(a1 + 48)];
  [(PDUserNotification *)v17 setReissueBannerOnUpdate:1];
  [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v17];

LABEL_16:
}

void sub_100392800(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v23 = [v3 originatorAltDSID];
  uint64_t v5 = objc_msgSend(v4, "familyMemberForAltDSID:");

  id v6 = [*(id *)(a1 + 32) originatorNameComponents];
  uint64_t v22 = (void *)v5;
  id v7 = +[PKContactResolver contactForFamilyMember:v5 nameComponents:v6 imageData:0];

  id v21 = v7;
  os_signpost_id_t v8 = [v7 pkFullName];
  uint64_t v9 = PKLocalizedMadisonString(@"SHARING_INVITATION_NOTIFICATION_TITLE");
  id v10 = [*(id *)(a1 + 32) accountUserAccessLevel];
  id v11 = 0;
  if ((unint64_t)v10 <= 2)
  {
    id v11 = PKLocalizedMadisonString(&(*(&off_10074D200 + (void)v10))->isa, @"%@", v8);
  }
  id v12 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v9 message:v11];
  [(PDUserNotification *)v12 setSuppressionBehavior:1];
  id v13 = [*(id *)(a1 + 40) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 48)];
  [(PDUserNotification *)v12 setCustomActionRoute:v13];

  [(PDUserNotification *)v12 setNotificationIdentifier:*(void *)(a1 + 48)];
  [(PDUserNotification *)v12 setReissueBannerOnUpdate:1];
  [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v12];
  id v14 = PKLocalizedMadisonString(@"SHARING_INVITATION_REMINDER_TITLE");
  uint64_t v15 = PKLocalizedMadisonString(@"SHARING_INVITATION_REMINDER_MESSAGE", @"%@", v8);
  id v16 = +[NSDate date];
  uint64_t v17 = [v16 dateByAddingTimeInterval:604800.0];

  id v18 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v14 message:v15];
  [(PDUserNotification *)v18 setSuppressionBehavior:1];
  id v19 = [*(id *)(a1 + 40) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 48)];
  [(PDUserNotification *)v18 setCustomActionRoute:v19];

  id v20 = [*(id *)(a1 + 40) _acceptReminderIdentifierForApplicationIdentifier:*(void *)(a1 + 48)];
  [(PDUserNotification *)v18 setNotificationIdentifier:v20];

  [(PDUserNotification *)v18 setReissueBannerOnUpdate:1];
  [(PDUserNotification *)v18 setDate:v17];
  [*(id *)(*(void *)(a1 + 40) + 8) insertUserNotification:v18];
}

void sub_100392EC8(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v17 = [v3 accountUserAltDSID];
  uint64_t v5 = v17;
  if (!*(unsigned char *)(a1 + 64)) {
    uint64_t v5 = *(void **)(a1 + 40);
  }
  id v6 = v5;
  id v7 = [v4 familyMemberForAltDSID:v6];

  os_signpost_id_t v8 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 64)) {
    [v8 accountUserNameComponents];
  }
  else {
  uint64_t v9 = [v8 originatorNameComponents];
  }
  id v10 = +[PKContactResolver contactForFamilyMember:v7 nameComponents:v9 imageData:0];
  id v11 = PKLocalizedMadisonString(@"SHARING_JOINT_CARD_READY_NOTIFICATION_TITLE");
  id v12 = [v10 givenName];
  id v13 = PKLocalizedMadisonString(@"SHARING_JOINT_CARD_READY_NOTIFICATION_MESSAGE", @"%@", v12);

  id v14 = [*(id *)(a1 + 48) applicationIdentifier];
  uint64_t v15 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v11 message:v13];
  [(PDUserNotification *)v15 setSuppressionBehavior:1];
  id v16 = [*(id *)(a1 + 56) _customRouteForInvitationWithIdentifier:v14];
  [(PDUserNotification *)v15 setCustomActionRoute:v16];

  [(PDUserNotification *)v15 setNotificationIdentifier:v14];
  [(PDUserNotification *)v15 setReissueBannerOnUpdate:1];
  [*(id *)(*(void *)(a1 + 56) + 8) insertUserNotification:v15];
}

void sub_10039309C(id *a1, void *a2)
{
  id v3 = a1[4];
  id v4 = a2;
  id v17 = [v3 accountIdentifier];
  id v16 = [a1[5] accountUserAltDSID];
  uint64_t v5 = objc_msgSend(v4, "familyMemberForAltDSID:");

  id v6 = [a1[5] accountUserNameComponents];
  id v7 = +[PKContactResolver contactForFamilyMember:v5 nameComponents:v6 imageData:0];

  os_signpost_id_t v8 = [v7 pkFullName];
  uint64_t v9 = PKLocalizedMadisonString(@"SHARING_STARTED_NOTIFICATION_TITLE");
  id v10 = PKLocalizedMadisonString(@"SHARING_STARTED_NOTIFICATION_MESSAGE", @"%@", v8);
  id v11 = [a1[4] applicationIdentifier];
  if (v17)
  {
    id v12 = [*((id *)a1[6] + 4) accountWithIdentifier:v17];
    id v13 = [v12 associatedPassUniqueID];
  }
  else
  {
    id v13 = 0;
  }
  id v14 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v9 message:v10 forPassUniqueIdentifier:v13];
  [(PDUserNotification *)v14 setSuppressionBehavior:1];
  uint64_t v15 = [a1[6] _customRouteForPassUniqueID:v13];
  [(PDUserNotification *)v14 setCustomActionRoute:v15];

  [(PDUserNotification *)v14 setNotificationIdentifier:v11];
  [(PDUserNotification *)v14 setReissueBannerOnUpdate:1];
  [*((id *)a1[6] + 1) insertUserNotification:v14];
}

void sub_1003934D4(id *a1, void *a2)
{
  id v3 = a1[4];
  id v4 = a2;
  id v14 = [v3 originatorAltDSID];
  uint64_t v5 = [v4 familyMemberForAltDSID:v14];

  id v6 = [a1[4] originatorNameComponents];
  id v7 = +[PKContactResolver contactForFamilyMember:v5 nameComponents:v6 imageData:0];

  os_signpost_id_t v8 = PKLocalizedMadisonString(@"SHARING_INVITATION_OFFER_DECLINED_NOTIFICATION_TITLE");
  uint64_t v9 = [v7 pkFullName];
  id v10 = PKLocalizedMadisonString(@"SHARING_INVITATION_OFFER_DECLINED_NOTIFICATION_MESSAGE", @"%@", v9);

  id v11 = [a1[5] applicationIdentifier];
  id v12 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v8 message:v10];
  [(PDUserNotification *)v12 setSuppressionBehavior:1];
  id v13 = [a1[6] _customRouteForInvitationWithIdentifier:v11];
  [(PDUserNotification *)v12 setCustomActionRoute:v13];

  [(PDUserNotification *)v12 setNotificationIdentifier:v11];
  [(PDUserNotification *)v12 setReissueBannerOnUpdate:1];
  [*((id *)a1[6] + 1) insertUserNotification:v12];
}

void sub_100393674(id *a1, void *a2)
{
  id v3 = a1[4];
  id v4 = a2;
  id v17 = [v3 accountUserAltDSID];
  uint64_t v5 = objc_msgSend(v4, "familyMemberForAltDSID:");

  id v6 = [a1[4] accountUserNameComponents];
  id v7 = +[PKContactResolver contactForFamilyMember:v5 nameComponents:v6 imageData:0];

  os_signpost_id_t v8 = PKLocalizedMadisonString(@"SHARING_INVITEE_REJECTED_NOTIFICATION_TITLE");
  uint64_t v9 = [v7 pkFullName];
  id v10 = PKLocalizedMadisonString(@"SHARING_INVITEE_REJECTED_NOTIFICATION_MESSAGE", @"%@", v9);

  id v11 = [a1[5] applicationIdentifier];
  id v12 = [a1[5] accountIdentifier];
  if (v12)
  {
    id v13 = [*((id *)a1[6] + 4) accountWithIdentifier:v12];
    id v14 = [v13 associatedPassUniqueID];
  }
  else
  {
    id v14 = 0;
  }
  uint64_t v15 = [(PDGenericUserNotification *)[PDWalletUserNotification alloc] initWithTitle:v8 message:v10 forPassUniqueIdentifier:v14];
  [(PDUserNotification *)v15 setSuppressionBehavior:1];
  id v16 = [a1[6] _customRouteForPassUniqueID:v14];
  [(PDUserNotification *)v15 setCustomActionRoute:v16];

  [(PDUserNotification *)v15 setNotificationIdentifier:v11];
  [(PDUserNotification *)v15 setReissueBannerOnUpdate:1];
  [*((id *)a1[6] + 1) insertUserNotification:v15];
}

void sub_100393980(uint64_t a1, void *a2)
{
  id v22 = a2;
  id v3 = [*(id *)(a1 + 32) originatorAltDSID];
  if (PKAltDSIDIsCurrentUser())
  {
    id v4 = [*(id *)(a1 + 32) accountUserAltDSID];
    uint64_t v5 = [v22 familyMemberForAltDSID:v4];
    id v6 = [*(id *)(a1 + 32) accountUserNameComponents];
    id v7 = +[PKContactResolver contactForFamilyMember:v5 nameComponents:v6 imageData:0];

    os_signpost_id_t v8 = [v7 givenName];
    uint64_t v9 = PKLocalizedMadisonString(@"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_ORIGINATOR_BODY", @"%@", v8);

    if (*(void *)(a1 + 40))
    {
      id v10 = objc_msgSend(*(id *)(*(void *)(a1 + 48) + 32), "accountWithIdentifier:");
      id v11 = [v10 associatedPassUniqueID];
    }
    else
    {
      id v11 = 0;
    }
    id v16 = [PDWalletUserNotification alloc];
    id v17 = PKLocalizedMadisonString(@"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_TITLE");
    id v18 = [(PDGenericUserNotification *)v16 initWithTitle:v17 message:v9 forPassUniqueIdentifier:v11];

    [(PDUserNotification *)v18 setNotificationIdentifier:*(void *)(a1 + 56)];
    [(PDUserNotification *)v18 setSuppressionBehavior:1];
    [(PDUserNotification *)v18 setReissueBannerOnUpdate:1];
    id v19 = [*(id *)(a1 + 48) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 56)];
    [(PDUserNotification *)v18 setCustomActionRoute:v19];
  }
  else
  {
    id v12 = [v22 familyMemberForAltDSID:v3];
    id v13 = [*(id *)(a1 + 32) originatorNameComponents];
    id v4 = +[PKContactResolver contactForFamilyMember:v12 nameComponents:v13 imageData:0];

    id v14 = [v4 givenName];
    id v7 = PKLocalizedMadisonString(@"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_ACCOUNT_USER_BODY", @"%@", v14);

    if (*(void *)(a1 + 40))
    {
      uint64_t v15 = objc_msgSend(*(id *)(*(void *)(a1 + 48) + 32), "accountWithIdentifier:");
      uint64_t v9 = [v15 associatedPassUniqueID];
    }
    else
    {
      uint64_t v9 = 0;
    }
    id v20 = [PDWalletUserNotification alloc];
    id v21 = PKLocalizedMadisonString(@"SHARING_INVITATION_INELIGIBLE_NOTIFICATION_TITLE");
    id v18 = [(PDGenericUserNotification *)v20 initWithTitle:v21 message:v7 forPassUniqueIdentifier:v9];

    [(PDUserNotification *)v18 setNotificationIdentifier:*(void *)(a1 + 56)];
    [(PDUserNotification *)v18 setSuppressionBehavior:1];
    [(PDUserNotification *)v18 setReissueBannerOnUpdate:1];
    id v11 = [*(id *)(a1 + 48) _customRouteForInvitationWithIdentifier:*(void *)(a1 + 56)];
    [(PDUserNotification *)v18 setCustomActionRoute:v11];
  }

  if (v18) {
    [*(id *)(*(void *)(a1 + 48) + 8) insertUserNotification:v18];
  }
}

void sub_100393F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100393FD8;
  block[3] = &unk_10072E9D8;
  void block[4] = v4;
  id v8 = v3;
  id v9 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_100393FD8(void *a1)
{
  id v2 = [objc_alloc((Class)PKFamilyMemberCollection) initWithFamilyMembers:a1[5]];
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v2;

  uint64_t result = a1[6];
  if (result)
  {
    id v6 = *(uint64_t (**)(void))(result + 16);
    return v6();
  }
  return result;
}

uint64_t sub_1003941A0(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v6);
        id v8 = objc_alloc(*(Class *)(a1 + 48));

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return 1;
}

void sub_100394628(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKApplyFooterContentLink);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_10039487C(id a1, PKApplyFooterContentLink *a2, id a3)
{
}

void sub_100394884(id a1, PKApplyFooterContentLink *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKApplyFooterContentLink *)v3 setLinkURL:v4];
}

void sub_1003948E4(id a1, PKApplyFooterContentLink *a2, id a3)
{
}

void sub_1003948EC(id a1, PKApplyFooterContentLink *a2, id a3)
{
}

uint64_t sub_10039526C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
  [v2 setValue:v3 forProperty:@"backoff_level"];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)_SQLValueForDate();
  [v4 setValue:v5 forProperty:@"next_fetch"];

  return 1;
}

void sub_100395750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100395768(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithMetadata:*(void *)(a1 + 32) forBaseMetadata:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

id sub_10039594C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, unsigned char *a6)
{
  objc_msgSend(*(id *)(a1 + 32), "setColumns:", objc_msgSend(*a4, "unsignedIntegerValue"));
  objc_msgSend(*(id *)(a1 + 32), "setMaximumRows:", objc_msgSend(a4[1], "unsignedIntegerValue"));
  [*(id *)(a1 + 32) setWidthClass:PKPassTileWidthClassHorizontalFlowFromString()];
  [*(id *)(a1 + 32) setHeightClass:PKPassTileHeightClassFromString()];
  id result = [*(id *)(a1 + 32) setGroupStyle:PKPassTileGroupStyleFromString()];
  *a6 = 1;
  return result;
}

id sub_100395D3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _process];
}

BOOL sub_100397578(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return [(NSNumber *)a3 BOOLValue];
}

BOOL sub_1003975FC(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return [(NSNumber *)a3 BOOLValue];
}

BOOL sub_100397680(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return [(NSNumber *)a3 BOOLValue];
}

BOOL sub_100397704(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  return [(NSNumber *)a3 BOOLValue];
}

void sub_1003981DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1003981F4(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

void sub_100398370(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  long long v11 = [v9 _propertySetters];
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_1003986C8(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003986D0(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003986D8(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003986E0(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_1003986E8(id a1, PKPendingIdentityCredential *a2, id a3)
{
  if (a3)
  {
    id v4 = a3;
    uint64_t v5 = a2;
    id v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:0];

    [(PKPendingIdentityCredential *)v5 setAttestations:v6];
  }
}

void sub_10039878C(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_100398794(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

void sub_10039879C(id a1, PKPendingIdentityCredential *a2, id a3)
{
}

uint64_t sub_100398A34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100398B68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 24);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100398C04;
  v3[3] = &unk_10074D538;
  id v4 = *(id *)(a1 + 48);
  [v2 discoveryArticleLayoutForItemWithIdentifier:v1 completion:v3];
}

uint64_t sub_100398C04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100398C14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100398C2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100398D68(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) discoveryManager];
  uint64_t v3 = *(void *)(a1 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100398E1C;
  v5[3] = &unk_1007304D8;
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  [v2 updateDiscoveryItemWithIdentifier:v4 forAction:v3 completion:v5];
}

void sub_100398E1C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (a2)
    {
      uint64_t v3 = *(void (**)(uint64_t, void))(v2 + 16);
      uint64_t v4 = *(void *)(a1 + 32);
      v3(v4, 0);
    }
    else
    {
      id v5 = +[NSError errorWithDomain:PKDiscoveryErrorDomain code:2 userInfo:0];
      (*(void (**)(uint64_t, id))(v2 + 16))(v2, v5);
    }
  }
}

uint64_t sub_100398EE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100398EF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100398FF4(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 24) updateDiscoveryManifestWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_100399008(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10039910C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 24);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1003991A4;
  v2[3] = &unk_100736918;
  id v3 = *(id *)(a1 + 40);
  [v1 discoveryItemsWithCompletion:v2];
}

uint64_t sub_1003991A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003991B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10039930C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003993B4;
  v4[3] = &unk_10072F788;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v2 insertDiscoveryItems:v1 discoveryArticleLayouts:v3 completion:v4];
}

uint64_t sub_1003993B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

uint64_t sub_1003993D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003993E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003993FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100399530(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003995D8;
  v4[3] = &unk_100736918;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v2 discoveryEngagementMessagesForPassUniqueIdentifier:v1 active:v3 completion:v4];
}

uint64_t sub_1003995D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003995EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100399720(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003997BC;
  v3[3] = &unk_10073A260;
  id v4 = *(id *)(a1 + 48);
  [v2 dialogRequestsForPlacement:v1 completion:v3];
}

uint64_t sub_1003997BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003997D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100399924(void *a1)
{
  return _[*(id *)(a1[4] + 24) dismissDialogRequestWithIdentifier:a1[5] forPlacement:a1[6] completion:a1[7]];
}

uint64_t sub_100399940(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100399A74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100399B1C;
  v4[3] = &unk_1007304D8;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v2 updateDiscoveryEngagementMessageWithIdentifier:v1 forAction:v3 completion:v4];
}

void sub_100399B1C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    uint64_t v3 = *(void (**)(uint64_t, void))(v2 + 16);
    uint64_t v4 = *(void *)(a1 + 32);
    v3(v4, 0);
  }
  else
  {
    id v5 = +[NSError errorWithDomain:PKDiscoveryErrorDomain code:2 userInfo:0];
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v5);
  }
}

uint64_t sub_100399BCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100399CF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100399D94;
  v3[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 48);
  [v2 insertDiscoveryEngagementMessages:v1 completion:v3];
}

uint64_t sub_100399D94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100399DA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100399ED4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100399F70;
  v3[3] = &unk_10072F788;
  id v4 = *(id *)(a1 + 48);
  [v2 removeDiscoveryMessageWithIdentifier:v1 completion:v3];
}

uint64_t sub_100399F70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100399F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039A0B0(void *a1)
{
  [*(id *)(a1[4] + 24) displayedDiscoveryEngagementMessageWithIdentifier:a1[5]];
  uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

uint64_t sub_10039A104(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039A264(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) displayedDiscoveryItemWithIdentifier:*(void *)(a1 + 40) isWelcomeCard:*(unsigned __int8 *)(a1 + 72) afterSwipingToCard:*(unsigned __int8 *)(a1 + 73) multipleStoryCardsAvailable:*(unsigned __int8 *)(a1 + 74) callToAction:*(void *)(a1 + 56) cardSize:*(void *)(a1 + 64)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

uint64_t sub_10039A2C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039A420(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) expandedDiscoveryItemWithIdentifier:*(void *)(a1 + 40) callToAction:*(void *)(a1 + 56) afterSwipingToCard:*(unsigned __int8 *)(a1 + 72) multipleStoryCardsAvailable:*(unsigned __int8 *)(a1 + 73) cardSize:*(void *)(a1 + 64)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

uint64_t sub_10039A480(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039A5C0(void *a1)
{
  [*(id *)(a1[4] + 24) dismissedDiscoveryItemWithIdentifier:a1[5] callToAction:a1[7] cardSize:a1[8]];
  uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

uint64_t sub_10039A618(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039A71C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) removedAllDiscoveryItems];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

uint64_t sub_10039A770(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039A8B4(void *a1)
{
  [*(id *)(a1[4] + 24) tappedDiscoveryItemCTA:a1[7] itemIdentifier:a1[5] cardSize:a1[8]];
  uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

uint64_t sub_10039A90C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039AA10(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) completedDiscoveryItemCTA];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

uint64_t sub_10039AA64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039AB98(void *a1)
{
  [*(id *)(a1[4] + 24) discoveryItemWithIdentifier:a1[5] launchedWithReferralSource:a1[7]];
  uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

uint64_t sub_10039ABF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039AD34(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) discoveryItemWithIdentifier:*(void *)(a1 + 40) callToAction:*(void *)(a1 + 56) isScrollable:*(unsigned __int8 *)(a1 + 64)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

uint64_t sub_10039AD90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039AED4(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) discoveryItemWithIdentifier:*(void *)(a1 + 40) callToAction:*(void *)(a1 + 56) wasScrolledToTheBottom:*(unsigned __int8 *)(a1 + 64)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v2();
}

uint64_t sub_10039AF30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039AF40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039B044(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) endReporingDiscoveryAnalytics];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  return v2();
}

uint64_t sub_10039B098(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10039B19C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10039B234;
  v2[3] = &unk_1007315B0;
  id v3 = *(id *)(a1 + 40);
  [v1 rulesWithCompletion:v2];
}

uint64_t sub_10039B234(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039B248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039B37C(void *a1)
{
  [*(id *)(a1[4] + 32) insertRule:a1[5]];
  uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

uint64_t sub_10039B3D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039B4FC(void *a1)
{
  [*(id *)(a1[4] + 32) deleteRuleWithIdentifier:a1[5]];
  uint64_t v2 = *(uint64_t (**)(void))(a1[6] + 16);
  return v2();
}

uint64_t sub_10039B550(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10039B67C(void *a1)
{
  return [*(id *)(a1[4] + 32) evaluateRulesWithIdentifiers:a1[5] completion:a1[6]];
}

uint64_t sub_10039B698(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10039B7A4(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 24);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10039B83C;
  v2[3] = &unk_10072F788;
  id v3 = *(id *)(a1 + 40);
  [v1 removeDiscoveryUserNotificationsWithCompletion:v2];
}

uint64_t sub_10039B83C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10039B850(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10039B99C(void *a1)
{
  return _[*(id *)(a1[4] + 24) fetchUserProperties:a1[5] withParameters:a1[6] completion:a1[7]];
}

uint64_t sub_10039B9B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10039BAEC(void *a1)
{
  return _[*(id *)(a1[4] + 24) fireEngagementEventNamed:a1[5] completion:a1[6]];
}

uint64_t sub_10039BB08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

int64_t sub_10039BCBC(id a1, PDCandidateRelevantPass *a2, PDCandidateRelevantPass *a3)
{
  return [(PDCandidateRelevantPass *)a2 comparePassDatesToPass:a3];
}

int64_t sub_10039C42C(id a1, PDCandidateRelevantPass *a2, PDCandidateRelevantPass *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [(PDCandidateRelevantPass *)v4 matchedRelevantDate];

  if (!v6) {
    goto LABEL_4;
  }
  id v7 = [(PDCandidateRelevantPass *)v5 matchedRelevantDate];

  if (!v7)
  {
    int64_t v12 = -1;
    goto LABEL_6;
  }
  id v8 = [(PDCandidateRelevantPass *)v4 matchedRelevantDate];
  id v9 = [v8 relevantDateWithPriority:0];
  id v10 = [(PDCandidateRelevantPass *)v5 matchedRelevantDate];
  long long v11 = [v10 relevantDateWithPriority:0];
  int64_t v12 = (int64_t)[v9 compare:v11];

  if (!v12)
  {
LABEL_4:
    long long v13 = [(PDCandidateRelevantPass *)v4 serialNumber];
    id v14 = [(PDCandidateRelevantPass *)v5 serialNumber];
    int64_t v12 = (int64_t)[v13 compare:v14];
  }
LABEL_6:

  return v12;
}

void sub_10039CDAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKPeerPaymentCounterpartImageData);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10039CF30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10039D0BC(id a1, PKPeerPaymentCounterpartImageData *a2, id a3)
{
}

void sub_10039D0C4(id a1, PKPeerPaymentCounterpartImageData *a2, id a3)
{
}

void sub_10039D274(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 32) withProperties:v5 values:a3];
}

uint64_t sub_10039D584(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSMutableArray);
  id v3 = [*(id *)(a1 + 72) _predicateForIdentifier:*(void *)(a1 + 32)];
  id v4 = [*(id *)(a1 + 72) _predicateForType:*(void *)(a1 + 80)];
  id v5 = objc_msgSend(v2, "initWithObjects:", v3, v4, 0);

  id v6 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v5];
  id v7 = [*(id *)(a1 + 72) anyInDatabase:*(void *)(a1 + 40) predicate:v6];
  id v8 = [v7 status];
  if (v7) {
    BOOL v9 = *(void *)(a1 + 88) == 2;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9 || v8 == (id)1 || v8 == (id)4)
  {
    if (v7) {
      goto LABEL_14;
    }
    id v12 = objc_alloc_init((Class)NSMutableDictionary);
    [v12 setObjectOrNull:*(void *)(a1 + 32) forKey:@"identifier"];
    [v12 setObjectOrNull:*(void *)(a1 + 48) forKey:@"domain_identifier"];
    long long v13 = +[NSDate date];
    id v14 = (void *)_SQLValueForDate();
    [v12 setObjectOrNull:v14 forKey:@"last_modified_date"];

    [v12 setInteger:*(void *)(a1 + 80) forKey:@"type"];
    [v12 setInteger:*(void *)(a1 + 88) forKey:@"status"];
    id v7 = [objc_alloc(*(Class *)(a1 + 72)) initWithPropertyValues:v12 inDatabase:*(void *)(a1 + 40)];

    if (v7)
    {
LABEL_14:
      id v15 = objc_alloc_init((Class)NSMutableDictionary);
      id v16 = +[NSDate date];
      id v17 = (void *)_SQLValueForDate();
      [v15 setObjectOrNull:v17 forKey:@"last_modified_date"];

      [v15 setInteger:*(void *)(a1 + 88) forKey:@"status"];
      id v18 = *(void **)(a1 + 56);
      if (v18)
      {
        id v19 = [v18 domain];
        [v15 setObjectOrNull:v19 forKey:@"last_error_domain"];

        objc_msgSend(v15, "setInteger:forKey:", objc_msgSend(*(id *)(a1 + 56), "code"), @"last_error_code");
        id v20 = [v7 valueForProperty:@"status"];
        id v21 = (char *)[v20 integerValue];

        [v15 setInteger:v21 + 1 forKey:@"action_try_count"];
      }
      else
      {
        [v15 setObjectOrNull:0 forKey:@"last_error_domain"];
        [v15 setObjectOrNull:0 forKey:@"last_error_code"];
        [v15 setObjectOrNull:0 forKey:@"action_try_count"];
      }
      if (*(void *)(a1 + 88) || (uint64_t v23 = *(void *)(a1 + 64)) == 0)
      {
        id v22 = v15;
        uint64_t v23 = 0;
      }
      else
      {
        id v22 = v15;
      }
      [v22 setObjectOrNull:v23 forKey:@"searchable_item"];
      [v7 setValuesWithDictionary:v15];
    }
  }

  return 1;
}

uint64_t sub_10039DAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *a4;
    return (uint64_t)[v7 addObject:v8];
  }
  return result;
}

void sub_10039DD94(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = [[SpotlightIndexerItem alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v8 withProperties:v7 values:a4];

  [*(id *)(a1 + 48) addObject:v8];
}

void sub_10039E0A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = [[SpotlightIndexerItem alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v8 withProperties:v7 values:a4];

  [*(id *)(a1 + 48) addObject:v8];
}

uint64_t sub_10039E2AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) _predicateForType:*(void *)(a1 + 56)];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10039E3CC;
  v6[3] = &unk_10074D698;
  uint64_t v10 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 32);
  id v8 = v2;
  id v9 = *(id *)(a1 + 40);
  id v3 = v2;
  id v4 = objc_retainBlock(v6);
  ((void (*)(void *, void))v4[2])(v4, 0);
  ((void (*)(void *, uint64_t))v4[2])(v4, 1);
  ((void (*)(void *, uint64_t))v4[2])(v4, 2);
  ((void (*)(void *, uint64_t))v4[2])(v4, 3);

  return 1;
}

void sub_10039E3CC(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 56) _predicateForStatus:a2];
  id v5 = *(void **)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  v13[0] = *(void *)(a1 + 40);
  v13[1] = v4;
  id v7 = +[NSArray arrayWithObjects:v13 count:2];
  id v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];
  id v9 = [v5 countInDatabase:v6 predicate:v8];

  uint64_t v10 = *(void **)(a1 + 48);
  long long v11 = +[NSNumber numberWithUnsignedInteger:v9];
  id v12 = +[NSNumber numberWithUnsignedInteger:a2];
  [v10 setObject:v11 forKey:v12];
}

id sub_10039E7A4()
{
  id v0 = +[NSDate date];
  uint64_t v1 = [v0 dateByAddingTimeInterval:-86400.0];

  return v1;
}

void sub_10039ED5C(id a1, SpotlightIndexerItem *a2, id a3)
{
}

void sub_10039ED64(id a1, SpotlightIndexerItem *a2, id a3)
{
}

void sub_10039ED6C(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setStatus:](v4, "setStatus:", [a3 unsignedIntegerValue]);
}

void sub_10039EDC4(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setType:](v4, "setType:", [a3 unsignedIntegerValue]);
}

void sub_10039EE1C(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setTryCount:](v4, "setTryCount:", [a3 unsignedIntegerValue]);
}

void sub_10039EE74(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v4 = a2;
  -[SpotlightIndexerItem setErrorCode:](v4, "setErrorCode:", [a3 integerValue]);
}

void sub_10039EECC(id a1, SpotlightIndexerItem *a2, id a3)
{
}

void sub_10039EED4(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(SpotlightIndexerItem *)v3 setLastModifiedDate:v4];
}

void sub_10039EF34(id a1, SpotlightIndexerItem *a2, id a3)
{
  id v5 = a2;
  id v4 = a3;
  if (v4)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [(SpotlightIndexerItem *)v5 setSearchableItemData:v4];
    }
  }
}

unsigned __int8 *sub_10039F31C(unsigned __int8 *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = v11;
  long long v13 = 0;
  if (a1 && v9 && v10 && v11)
  {
    v16.receiver = a1;
    v16.super_class = (Class)PDApplicationMessageSink;
    id v14 = (unsigned __int8 *)objc_msgSendSuper2(&v16, "init");
    if (v14)
    {
      atomic_store(0, v14 + 8);
      *((void *)v14 + 2) = v9;
      *((void *)v14 + 3) = v10;
      *((void *)v14 + 4) = a4;
      *((void *)v14 + 5) = v12;
    }
    a1 = v14;
    long long v13 = a1;
  }

  return v13;
}

atomic_uchar *sub_10039F3DC(atomic_uchar *result)
{
  if (result)
  {
    uint64_t v1 = result;
    char v2 = 0;
    id v3 = result + 8;
    int v4 = 1;
    atomic_compare_exchange_strong(result + 8, (unsigned __int8 *)&v2, 1u);
    if (v2) {
      +[NSException raise:NSInternalInconsistencyException, @"PDApplicationMessageSink (%ld): already attempted connection.", *((void *)result + 4) format];
    }
    uint64_t result = (atomic_uchar *)[*((id *)v1 + 5) connectApplicationMessageSink:v1];
    atomic_compare_exchange_strong(v3, (unsigned __int8 *)&v4, 2u);
    if (v4 != 1) {
      return (atomic_uchar *)+[NSException raise:NSInternalInconsistencyException, @"PDApplicationMessageSink (%ld): implementation error during connection.", *((void *)v1 + 4) format];
    }
  }
  return result;
}

void sub_10039F8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10039F8D4(uint64_t a1)
{
  id v2 = +[PKApplicationMessageKey createWithSource:*(void *)(*(void *)(a1 + 32) + 32) identifier:*(void *)(a1 + 40)];
  uint64_t v3 = sub_10045AFBC(*(void ***)(*(void *)(a1 + 32) + 24), v2);
  if (v3)
  {
    int v4 = (void *)v3;
    if ([*(id *)(a1 + 48) resetCreatedDate]) {
      +[NSDate date];
    }
    else {
    uint64_t v6 = [v4 createdDate];
    }
    id v7 = [*(id *)(a1 + 48) priority];
    id v8 = [*(id *)(a1 + 48) badge];
    id v9 = [v4 key];
    id v10 = +[PKApplicationMessageRegistration createWithKey:v9 createdDate:v6 priority:v7 badge:v8];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = sub_10045AF38(*(void *)(*(void *)(a1 + 32) + 24), v10);
    BOOL v5 = *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) != 0;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_10039FAF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1 && v3)
  {
    id v16 = 0;
    BOOL v5 = (uint64_t *)(a1 + 32);
    id v6 = +[PKApplicationMessageKey createWithSource:*(void *)(a1 + 32) identifier:v3];
    BOOL v7 = sub_10045AF94(*(void *)(a1 + 24), v6, &v16);
    id v8 = 0;
    if (v7 && v16 != 0) {
      id v8 = (void *)PDOSTransactionCreate("PDApplicationMessageManager");
    }

    if (v7)
    {
      id v10 = v16;
      id v11 = PKLogFacilityTypeGetObject();
      id v12 = v11;
      if (v10)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = *v5;
          *(_DWORD *)long long buf = 134218242;
          uint64_t v18 = v13;
          __int16 v19 = 2112;
          id v20 = v4;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDApplicationMessageSink (%ld): removed message %@.", buf, 0x16u);
        }

        [*(id *)(a1 + 40) applicationMessageSink:a1 removedMessageWithRegistration:v16];
        sub_10039FE6C(*(void *)(a1 + 16));
      }
      else
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
          sub_100517728();
        }
      }
    }
    else
    {
      id v14 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *v5;
        *(_DWORD *)long long buf = 134218242;
        uint64_t v18 = v15;
        __int16 v19 = 2112;
        id v20 = v4;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "PDApplicationMessageSink (%ld): failed to remove message %@.", buf, 0x16u);
      }
    }
  }
}

void sub_10039FD5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1 && v3)
  {
    id v5 = +[PKApplicationMessageKey createWithSource:*(void *)(a1 + 32) identifier:v3];
    id v6 = sub_10045AFBC(*(void ***)(a1 + 24), v5);
    BOOL v7 = PKLogFacilityTypeGetObject();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      if (v8) {
        sub_100517800();
      }

      [*(id *)(a1 + 40) applicationMessageSink:a1 tappedMessageWithRegistration:v6];
    }
    else
    {
      if (v8) {
        sub_100517794();
      }
    }
  }
}

uint64_t sub_10039FE40(uint64_t result)
{
  if (result)
  {
    sub_1000200C8(*(void ***)(result + 24));
    return objc_claimAutoreleasedReturnValue();
  }
  return result;
}

void sub_10039FE6C(uint64_t a1)
{
  if (a1)
  {
    id v2 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    *(unsigned char *)(a1 + 50) = 1;
    os_unfair_lock_unlock(v2);
    sub_1003A104C(a1);
  }
}

id *sub_10039FF10(id *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v10 = a5;
  if (a1)
  {
    id v11 = a3;
    id v12 = a2;
    uint64_t v13 = sub_10039F31C((unsigned __int8 *)[PDApplicationMessageSink alloc], v12, v11, a4, v10);

    if (v13)
    {
      v18.receiver = a1;
      v18.super_class = (Class)PDApplicationMessageSourceRegistration;
      id v14 = (id *)objc_msgSendSuper2(&v18, "init");
      uint64_t v15 = v14;
      if (v14)
      {
        objc_storeStrong(v14 + 2, a5);
        objc_storeStrong(v15 + 1, v13);
      }
      a1 = v15;
      id v16 = a1;
    }
    else
    {
      id v16 = 0;
    }
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

id *sub_1003A005C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  id v6 = sub_1003A00C8((id *)[PDApplicationMessageManager alloc], v5, v4);

  return v6;
}

id *sub_1003A00C8(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1 && v6)
  {
    v19.receiver = a1;
    v19.super_class = (Class)PDApplicationMessageManager;
    BOOL v8 = (id *)objc_msgSendSuper2(&v19, "init");
    id v9 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      *((_DWORD *)v9 + 4) = 0;
      id v10 = objc_alloc_init((Class)NSMutableArray);
      id v11 = v9[3];
      v9[3] = v10;

      atomic_store(0, (unsigned __int8 *)v9 + 32);
      *((unsigned char *)v9 + 51) = 0;
      id v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v13 = dispatch_queue_attr_make_initially_inactive(v12);
      id v14 = PDUtilityQueue();
      dispatch_queue_t v15 = dispatch_queue_create_with_target_V2("com.apple.passd.applicationMessageManager", v13, v14);
      id v16 = v9[8];
      v9[8] = v15;

      objc_storeWeak(v9 + 9, v7);
    }
    a1 = v9;
    id v17 = a1;
  }
  else
  {
    id v17 = 0;
  }

  return v17;
}

void sub_1003A0254(uint64_t a1)
{
  if (a1)
  {
    char v2 = 0;
    atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 32), (unsigned __int8 *)&v2, 1u);
    if (v2) {
      +[NSException raise:NSInternalInconsistencyException format:@"PDApplicationMessageManager: already attempted connection."];
    }
    id v3 = sub_100007B70((unsigned __int8 *)a1);
    id v4 = *(void **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003A0454;
    block[3] = &unk_10072E198;
    id v5 = v3;
    id v20 = v5;
    uint64_t v21 = a1;
    id v6 = v4;
    dispatch_block_t v7 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
    dispatch_async(v6, v7);

    dispatch_activate(*(dispatch_object_t *)(a1 + 64));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    id v8 = *(id *)(a1 + 24);
    id v9 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v10 = v8;
    id v11 = [v10 countByEnumeratingWithState:&v15 objects:v22 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v16;
      do
      {
        id v14 = 0;
        do
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v10);
          }
          dispatch_async(*(dispatch_queue_t *)(a1 + 64), *(dispatch_block_t *)(*((void *)&v15 + 1) + 8 * (void)v14));
          id v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v15 objects:v22 count:16];
      }
      while (v12);
    }
  }
}

void sub_1003A0454(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v23;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v22 + 1) + 8 * i);
        if (v7) {
          sub_10039F3DC(*(atomic_uchar **)(v7 + 8));
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v4);
  }
  while (1)
  {

    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16));
    uint64_t v15 = *(void *)(a1 + 40);
    long long v16 = *(void **)(v15 + 56);
    if (!v16) {
      break;
    }
    id v8 = v16;
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(v9 + 56);
    *(void *)(v9 + 56) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v2 = v8;
    id v11 = [v2 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (j = 0; j != v12; j = (char *)j + 1)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v2);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v18 + 1) + 8 * (void)j) + 16))();
        }
        id v12 = [v2 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }
      while (v12);
    }
  }
  int v17 = 1;
  atomic_compare_exchange_strong((atomic_uchar *volatile)(v15 + 32), (unsigned __int8 *)&v17, 2u);
  if (v17 != 1) {
    +[NSException raise:NSInternalInconsistencyException format:@"PDApplicationMessageManager: implementation error during connection."];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16));
}

void sub_1003A0664(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = atomic_load((unsigned __int8 *)(a1 + 32));
    if (v4 != 2)
    {
      id v10 = v3;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      int v5 = atomic_load((unsigned __int8 *)(a1 + 32));
      if (v5 != 2)
      {
        id v6 = *(void **)(a1 + 56);
        if (!v6)
        {
          id v7 = objc_alloc_init((Class)NSMutableArray);
          id v8 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v7;

          id v6 = *(void **)(a1 + 56);
        }
        uint64_t v9 = objc_retainBlock(v10);
        [v6 addObject:v9];

        sub_1003A0750(a1);
        id v10 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      id v3 = v10;
    }
    if (v3)
    {
      id v11 = v3;
      v3[2]();
      id v3 = v11;
    }
  }
}

void sub_1003A0750(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void **)(a1 + 24);
    if (v1)
    {
      dispatch_block_t v3 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &stru_10074D818);
      [v1 addObject:v3];
    }
    else
    {
      id v2 = *(NSObject **)(a1 + 64);
      dispatch_async(v2, &stru_10074D838);
    }
  }
}

void sub_1003A07F0(uint64_t a1)
{
  if (a1)
  {
    id v2 = (unsigned __int8 *)(a1 + 32);
    int v3 = atomic_load((unsigned __int8 *)(a1 + 32));
    if (v3 != 2)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      int v4 = atomic_load(v2);
      if (v4 != 2) {
        sub_1003A0750(a1);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
  }
}

void sub_1003A0878(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    if (!a2) {
      +[NSException raise:NSInternalInconsistencyException format:@"PDApplicationMessageManager: invalid registrations for local source."];
    }
    if (v5)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
      if (atomic_load((unsigned __int8 *)(a1 + 32))) {
        +[NSException raise:NSInternalInconsistencyException, @"PDApplicationMessageManager: cannot register source %ld after initial setup.", a2 format];
      }
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      id v7 = *(id *)(a1 + 40);
      id v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v8)
      {
        id v9 = v8;
        id v10 = 0;
        uint64_t v11 = *(void *)v22;
        do
        {
          id v12 = 0;
          do
          {
            if (*(void *)v22 != v11) {
              objc_enumerationMutation(v7);
            }
            uint64_t v13 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v12);
            if (v13)
            {
              uint64_t v14 = v13[1];
              if (v14) {
                uint64_t v14 = *(void *)(v14 + 32);
              }
            }
            else
            {
              uint64_t v14 = 0;
            }
            if (v14 == a2)
            {
              uint64_t v15 = v13;

              id v10 = v15;
            }
            id v12 = (char *)v12 + 1;
          }
          while (v9 != v12);
          id v16 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
          id v9 = v16;
        }
        while (v16);

        if (v10) {
          +[NSException raise:NSInternalInconsistencyException, @"PDApplicationMessageManager: duplicate registrations for source %ld.", a2 format];
        }
      }
      else
      {

        id v10 = 0;
      }
      int v17 = sub_10039FF10((id *)[PDApplicationMessageSourceRegistration alloc], (void *)a1, *(void **)(a1 + 8), a2, v5);

      long long v18 = *(void **)(a1 + 40);
      if (!v18)
      {
        id v19 = objc_alloc_init((Class)NSMutableArray);
        long long v20 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v19;

        long long v18 = *(void **)(a1 + 40);
      }
      [v18 addObject:v17];
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
  }
}

void sub_1003A0AAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1 && v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003A0B4C;
    v5[3] = &unk_10072FDC8;
    void v5[4] = a1;
    id v6 = v3;
    sub_1003A0664(a1, v5);
  }
}

void sub_1003A0B4C(uint64_t a1)
{
  id v2 = sub_100007B70(*(unsigned __int8 **)(a1 + 32));
  id v3 = PDHeavyQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A0C18;
  block[3] = &unk_100731830;
  id v4 = *(id *)(a1 + 40);
  id v7 = v2;
  id v8 = v4;
  void block[4] = *(void *)(a1 + 32);
  id v5 = v2;
  dispatch_async(v3, block);
}

void sub_1003A0C18(uint64_t a1)
{
  id v5 = (id)PDOSTransactionCreate("PDApplicationMessageManager");
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = sub_10001FCD4(*(void *)(a1 + 32), *(void **)(a1 + 40));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void **sub_1003A0CA4(void **result)
{
  if (result) {
    return sub_10045B00C((void **)result[1]);
  }
  return result;
}

void sub_1003A0CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    int v4 = atomic_load((unsigned __int8 *)(a1 + 32));
    id v8 = v3;
    if (v4 != 2) {
      dispatch_sync(*(dispatch_queue_t *)(a1 + 64), &stru_10074D7F8);
    }
    id v5 = sub_1003A0D70(a1, (uint64_t)[v8 source]);
    id v6 = sub_10001FE90(v5);
    id v7 = [v8 identifier];
    sub_10039FAF8((uint64_t)v6, v7);

    id v3 = v8;
  }
}

void *sub_1003A0D70(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  if (!atomic_load((unsigned __int8 *)(a1 + 32))) {
    +[NSException raise:NSInternalInconsistencyException format:@"PDApplicationMessageManager: cannot fetch registrations before connection attempt."];
  }
  id v5 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v6 = *(id *)(a1 + 40);
  id v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    id v9 = 0;
    uint64_t v10 = *(void *)v18;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v6);
        }
        id v12 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v11);
        if (v12)
        {
          uint64_t v13 = v12[1];
          if (v13) {
            uint64_t v13 = *(void *)(v13 + 32);
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
        if (v13 == a2)
        {
          uint64_t v14 = v12;

          id v9 = v14;
        }
        uint64_t v11 = (char *)v11 + 1;
      }
      while (v8 != v11);
      id v15 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
      id v8 = v15;
    }
    while (v15);
  }
  else
  {
    id v9 = 0;
  }

  os_unfair_lock_unlock(v5);
  return v9;
}

void sub_1003A0F00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    ++*(_WORD *)(a1 + 48);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          sub_1003A0CB4(a1, *(void **)(*((void *)&v9 + 1) + 8 * (void)v8));
          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }

    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    --*(_WORD *)(a1 + 48);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    sub_1003A104C(a1);
  }
}

void sub_1003A104C(uint64_t a1)
{
  if (a1)
  {
    id v2 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    if (*(unsigned char *)(a1 + 51) || *(_WORD *)(a1 + 48) || !*(unsigned char *)(a1 + 50))
    {
      os_unfair_lock_unlock(v2);
      sub_1003A07F0(a1);
    }
    else
    {
      *(unsigned char *)(a1 + 51) = 1;
      os_unfair_lock_unlock(v2);
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_1003A1208;
      v4[3] = &unk_10072E198;
      void v4[4] = a1;
      id v5 = (id)PDOSTransactionCreate("PDApplicationMessageManager.publish");
      id v3 = v5;
      sub_1003A0664(a1, v4);
    }
  }
}

void sub_1003A114C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    int v4 = atomic_load((unsigned __int8 *)(a1 + 32));
    id v8 = v3;
    if (v4 != 2) {
      dispatch_sync(*(dispatch_queue_t *)(a1 + 64), &stru_10074D7F8);
    }
    id v5 = sub_1003A0D70(a1, (uint64_t)[v8 source]);
    id v6 = sub_10001FE90(v5);
    uint64_t v7 = [v8 identifier];
    sub_10039FD5C((uint64_t)v6, v7);

    id v3 = v8;
  }
}

void sub_1003A1208(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_WORD *)(v2 + 48))
  {
    *(unsigned char *)(v2 + 51) = 0;
    *(unsigned char *)(*(void *)(a1 + 32) + 50) = 1;
    id v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 16);
    os_unfair_lock_unlock(v3);
  }
  else
  {
    *(unsigned char *)(v2 + 51) = 2;
    *(unsigned char *)(*(void *)(a1 + 32) + 50) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003A1304;
    v7[3] = &unk_100745D18;
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v8 = v5;
    uint64_t v9 = v6;
    sub_1003A0AAC(v4, v7);
  }
}

void sub_1003A1304(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 40) + 72);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained applicationMessageManager:*(void *)(a1 + 40) didUpdateMessages:v4];

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16));
  *(unsigned char *)(*(void *)(a1 + 40) + 51) = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  LODWORD(WeakRetained) = *(unsigned __int8 *)(v6 + 50);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
  if (WeakRetained)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    sub_1003A104C(v7);
  }
}

void sub_1003A1418(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1003A2450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [CloudStoreZone alloc];
  id v5 = [*(id *)(a1 + 32) database];
  uint64_t v7 = [(SQLiteEntity *)v4 initWithPersistentID:a2 inDatabase:v5];

  uint64_t v6 = [(CloudStoreZone *)v7 cloudStoreZone];
  if (v6) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

void sub_1003A2644(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003A28C4(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_1003A28CC(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_1003A28D4(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_1003A28DC(id a1, PKCloudStoreZone *a2, id a3)
{
}

void sub_1003A28E4(id a1, PKCloudStoreZone *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCloudStoreZone setScope:](v4, "setScope:", [a3 integerValue]);
}

void sub_1003A2B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1003A2BB4(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithValue:*(void *)(a1 + 32) forBaseValue:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

id sub_1003A2D78(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unsigned char *a6)
{
  [*(id *)(a1 + 32) setContent:*a4];
  id result = [*(id *)(a1 + 32) setForeignReferenceType:PKPassTileForeignReferenceTypeFromString()];
  *a6 = 1;
  return result;
}

id *sub_1003A30B0(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void PDNFSecureXPCEventHandleAccessKeyEvent(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  xpc_object_t xdict = v7;
  if (!v7 || (uint64_t v9 = v8, v91 = a2, !v8)) {
    __break(1u);
  }
  PKGetConstantStringNF_DCK_EVENT_KEY_APPLET_IDENTIFIER();
  id v10 = objc_claimAutoreleasedReturnValue();
  long long v11 = (const char *)[v10 UTF8String];

  PKGetConstantStringNF_DCK_EVENT_KEY_KEY_IDENTIFIER();
  id v12 = objc_claimAutoreleasedReturnValue();
  uint64_t v13 = (const char *)[v12 UTF8String];

  uint64_t v14 = xpc_dictionary_get_value(v7, v11);
  string_ptr = (char *)xpc_string_get_string_ptr(v14);

  if (string_ptr) {
    string_ptr = (char *)[objc_alloc((Class)NSString) initWithUTF8String:string_ptr];
  }
  id v16 = xpc_dictionary_get_value(v7, v13);
  long long v17 = (char *)xpc_string_get_string_ptr(v16);

  if (v17) {
    long long v17 = (char *)[objc_alloc((Class)NSString) initWithUTF8String:v17];
  }
  uint64_t v18 = v91;
  if (!string_ptr)
  {
    long long v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v130 = a1;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "PDNFSecureXPCCarKeyEvent: applet identifier missing for event %ld.", buf, 0xCu);
    }

    uint64_t v18 = v91;
  }
  if (v18 == 1)
  {
    id v93 = 0;
    if (a1 > 9 || ((1 << a1) & 0x21C) == 0) {
      goto LABEL_38;
    }
    long long v20 = (const char *)[@"readerIdentifier" UTF8String];
    long long v21 = (const char *)[@"lockOperationSource" UTF8String];
    long long v22 = xpc_dictionary_get_value(v7, v20);
    long long v23 = (void *)xpc_string_get_string_ptr(v22);

    if (v23)
    {
      id v24 = [objc_alloc((Class)NSString) initWithUTF8String:v23];
      long long v23 = objc_msgSend(v24, "pk_decodeHexadecimal");
    }
    long long v25 = xpc_dictionary_get_value(v7, v21);
    id v26 = xpc_string_get_string_ptr(v25);

    if (!v26)
    {
      uint64_t v30 = 0;
LABEL_37:
      long long v43 = [PDNFSecureXPCAliroAccessKeyStatusUpdateEventContent alloc];
      long long v44 = [v23 hexEncoding];
      id v93 = [(PDNFSecureXPCAliroAccessKeyStatusUpdateEventContent *)v43 initWithTerminalReaderIdentifier:v44 operationSource:v30];

      uint64_t v18 = v91;
      goto LABEL_38;
    }
    id v27 = (__CFString *)[objc_alloc((Class)NSString) initWithUTF8String:v26];
    long long v28 = v27;
    if (v27 == @"0") {
      goto LABEL_20;
    }
    if (v27)
    {
      unsigned __int8 v29 = [(__CFString *)v27 isEqualToString:@"0"];

      if (v29)
      {
LABEL_20:
        uint64_t v30 = 1;
LABEL_36:

        goto LABEL_37;
      }
      long long v31 = v28;
      if (v31 == @"1"
        || (__int16 v32 = v31,
            unsigned __int8 v33 = [(__CFString *)v31 isEqualToString:@"1"],
            v32,
            (v33 & 1) != 0))
      {
        uint64_t v30 = 2;
        goto LABEL_36;
      }
      id v34 = v32;
      if (v34 == @"2"
        || (__int16 v35 = v34,
            unsigned __int8 v36 = [(__CFString *)v34 isEqualToString:@"2"],
            v35,
            (v36 & 1) != 0))
      {
        uint64_t v30 = 3;
        goto LABEL_36;
      }
      long long v37 = v35;
      if (v37 == @"3"
        || (uint64_t v38 = v37,
            unsigned __int8 v39 = [(__CFString *)v37 isEqualToString:@"3"],
            v38,
            (v39 & 1) != 0))
      {
        uint64_t v30 = 4;
        goto LABEL_36;
      }
      __int16 v40 = v38;
      if (v40 == @"4"
        || (uint64_t v41 = v40,
            unsigned int v42 = [(__CFString *)v40 isEqualToString:@"4"],
            v41,
            v42))
      {
        uint64_t v30 = 5;
        goto LABEL_36;
      }
    }
    uint64_t v30 = 0;
    goto LABEL_36;
  }
  id v93 = 0;
LABEL_38:
  uint64_t v90 = v9;
  switch(a1)
  {
    case 1uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
      goto LABEL_39;
    case 2uLL:
      long long v120 = 0u;
      long long v121 = 0u;
      long long v118 = 0u;
      long long v119 = 0u;
      id v57 = v9;
      id v58 = [v57 countByEnumeratingWithState:&v118 objects:v128 count:16];
      if (v58)
      {
        id v59 = v58;
        uint64_t v60 = *(void *)v119;
        do
        {
          for (i = 0; i != v59; i = (char *)i + 1)
          {
            if (*(void *)v119 != v60) {
              objc_enumerationMutation(v57);
            }
            id v62 = *(void **)(*((void *)&v118 + 1) + 8 * i);
            if (objc_opt_respondsToSelector()) {
              [v62 accessTerminalDidLockForType:v18 forAppletIdentifier:string_ptr keyIdentifier:v17 withContent:v93];
            }
          }
          id v59 = [v57 countByEnumeratingWithState:&v118 objects:v128 count:16];
        }
        while (v59);
      }
      goto LABEL_110;
    case 3uLL:
      long long v116 = 0u;
      long long v117 = 0u;
      long long v114 = 0u;
      long long v115 = 0u;
      id v63 = v9;
      id v64 = [v63 countByEnumeratingWithState:&v114 objects:v127 count:16];
      if (v64)
      {
        id v65 = v64;
        uint64_t v66 = *(void *)v115;
        do
        {
          for (j = 0; j != v65; j = (char *)j + 1)
          {
            if (*(void *)v115 != v66) {
              objc_enumerationMutation(v63);
            }
            id v68 = *(void **)(*((void *)&v114 + 1) + 8 * (void)j);
            if (objc_opt_respondsToSelector()) {
              [v68 accessTerminalDidUnlockForType:v18 forAppletIdentifier:string_ptr keyIdentifier:v17 withContent:v93];
            }
          }
          id v65 = [v63 countByEnumeratingWithState:&v114 objects:v127 count:16];
        }
        while (v65);
      }
      goto LABEL_110;
    case 5uLL:
    case 6uLL:
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      id v51 = v9;
      id v52 = [v51 countByEnumeratingWithState:&v110 objects:v126 count:16];
      if (v52)
      {
        id v53 = v52;
        uint64_t v54 = *(void *)v111;
        do
        {
          for (k = 0; k != v53; k = (char *)k + 1)
          {
            if (*(void *)v111 != v54) {
              objc_enumerationMutation(v51);
            }
            __int16 v56 = *(void **)(*((void *)&v110 + 1) + 8 * (void)k);
            if (objc_opt_respondsToSelector()) {
              [v56 rangingDidResumeForTerminalType:v18 forAppletIdentifier:string_ptr keyIdentifier:v17];
            }
          }
          id v53 = [v51 countByEnumeratingWithState:&v110 objects:v126 count:16];
        }
        while (v53);
      }
      goto LABEL_110;
    case 8uLL:
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      id v69 = v9;
      id v70 = [v69 countByEnumeratingWithState:&v106 objects:v125 count:16];
      if (v70)
      {
        id v71 = v70;
        uint64_t v72 = *(void *)v107;
        do
        {
          for (m = 0; m != v71; m = (char *)m + 1)
          {
            if (*(void *)v107 != v72) {
              objc_enumerationMutation(v69);
            }
            id v74 = *(void **)(*((void *)&v106 + 1) + 8 * (void)m);
            if (objc_opt_respondsToSelector())
            {
              PKGetConstantStringNF_DCK_EVENT_KEY_RANGING_SUSPENSION_REASONS();
              id v75 = objc_claimAutoreleasedReturnValue();
              long long v76 = (const char *)[v75 UTF8String];

              uint64_t v77 = xpc_dictionary_get_value(xdict, v76);
              LOBYTE(v75) = xpc_int64_get_value(v77);

              [v74 rangingDidSuspendForTerminalType:v91 withReasons:v75 & 0x3F forAppletIdentifier:string_ptr keyIdentifier:v17];
            }
          }
          id v71 = [v69 countByEnumeratingWithState:&v106 objects:v125 count:16];
        }
        while (v71);
      }

      uint64_t v9 = v90;
LABEL_39:
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      id v45 = v9;
      id v46 = [v45 countByEnumeratingWithState:&v102 objects:v124 count:16];
      if (v46)
      {
        id v47 = v46;
        uint64_t v48 = *(void *)v103;
        do
        {
          for (n = 0; n != v47; n = (char *)n + 1)
          {
            if (*(void *)v103 != v48) {
              objc_enumerationMutation(v45);
            }
            long long v50 = *(void **)(*((void *)&v102 + 1) + 8 * (void)n);
            if (objc_opt_respondsToSelector()) {
              [v50 vehicleReportDidChangeForCarKeyWithAppletIdentifier:string_ptr keyIdentifier:v17];
            }
          }
          id v47 = [v45 countByEnumeratingWithState:&v102 objects:v124 count:16];
        }
        while (v47);
      }
      goto LABEL_110;
    case 9uLL:
      if (v18)
      {
        if (v18 != 1) {
          goto LABEL_111;
        }
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        id v78 = v9;
        id v79 = [v78 countByEnumeratingWithState:&v94 objects:v122 count:16];
        if (v79)
        {
          id v80 = v79;
          uint64_t v81 = *(void *)v95;
          do
          {
            for (ii = 0; ii != v80; ii = (char *)ii + 1)
            {
              if (*(void *)v95 != v81) {
                objc_enumerationMutation(v78);
              }
              id v83 = *(void **)(*((void *)&v94 + 1) + 8 * (void)ii);
              if (objc_opt_respondsToSelector()) {
                [v83 accessTerminalDidUpdateStatusForType:1 forAppletIdentifier:string_ptr keyIdentifier:v17 withContent:v93];
              }
            }
            id v80 = [v78 countByEnumeratingWithState:&v94 objects:v122 count:16];
          }
          while (v80);
        }
      }
      else
      {
        long long v100 = 0u;
        long long v101 = 0u;
        long long v98 = 0u;
        long long v99 = 0u;
        id v84 = v9;
        id v85 = [v84 countByEnumeratingWithState:&v98 objects:v123 count:16];
        if (v85)
        {
          id v86 = v85;
          uint64_t v87 = *(void *)v99;
          do
          {
            for (jj = 0; jj != v86; jj = (char *)jj + 1)
            {
              if (*(void *)v99 != v87) {
                objc_enumerationMutation(v84);
              }
              char v89 = *(void **)(*((void *)&v98 + 1) + 8 * (void)jj);
              if (objc_opt_respondsToSelector()) {
                [v89 vehicleReportDidChangeForCarKeyWithAppletIdentifier:string_ptr keyIdentifier:v17];
              }
            }
            id v86 = [v84 countByEnumeratingWithState:&v98 objects:v123 count:16];
          }
          while (v86);
        }
      }
LABEL_110:
      uint64_t v9 = v90;

LABEL_111:
      return;
    default:
      goto LABEL_111;
  }
}

id sub_1003A43C8(void *a1)
{
  return _[*(id *)(a1[4] + 8) updateDeviceEnvironment:a1[5] forClient:a1[6]];
}

id sub_1003A44A4(id a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    id v8 = [v6 createdDate];
    uint64_t v9 = (void *)_SQLValueForDate();
    [v7 setObjectOrNull:v9 forKey:@"created_date"];

    objc_msgSend(v7, "setLongLong:forKey:", objc_msgSend(v6, "priority"), @"priority");
    objc_msgSend(v7, "setBool:forKey:", objc_msgSend(v6, "badge"), @"badge");
    id v10 = [v6 key];

    [v10 source];
    long long v11 = PKApplicationMessageSourceToString();
    if (v11)
    {
      [v7 setObjectOrNull:v11 forKey:@"source"];
      id v12 = [v10 identifier];
      [v7 setObjectOrNull:v12 forKey:@"identifier"];

      a1 = [a1 initWithPropertyValues:v7 inDatabase:v5];
      id v13 = a1;
    }
    else
    {
      id v13 = 0;
    }
  }
  else
  {
    id v13 = 0;
  }

  return v13;
}

id sub_1003A4618(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  if (v4)
  {
    uint64_t v7 = v6;
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x3032000000;
    uint64_t v18 = sub_100020CFC;
    long long v19 = sub_100021170;
    id v20 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1003A4778;
    v10[3] = &unk_1007325B8;
    id v11 = v4;
    uint64_t v14 = v7;
    id v12 = v5;
    id v13 = &v15;
    sub_10000817C((uint64_t)v12, v10);
    id v8 = (id)v16[5];

    _Block_object_dispose(&v15, 8);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1003A4760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1003A4778(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) key];
  uint64_t v3 = *(void **)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = sub_1003A4844((uint64_t)v3, v2);
  uint64_t v6 = [v3 anyInDatabase:v4 predicate:v5];

  if (v6)
  {
    BOOL v7 = 0;
  }
  else
  {
    id v8 = sub_1003A44A4([ApplicationMessageRegistration alloc], *(void **)(a1 + 32), *(void **)(a1 + 40));
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    BOOL v7 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
  }

  return v7;
}

id sub_1003A4844(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  [v2 source];
  uint64_t v3 = sub_1000202D4();
  uint64_t v4 = [v2 identifier];

  id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"identifier" equalToValue:v4];

  v9[0] = v3;
  v9[1] = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:v9 count:2];
  BOOL v7 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v6];

  return v7;
}

id sub_1003A4968(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  if (v4)
  {
    uint64_t v7 = v6;
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x3032000000;
    uint64_t v18 = sub_100020CFC;
    long long v19 = sub_100021170;
    id v20 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1003A4AC8;
    v10[3] = &unk_1007325B8;
    id v11 = v4;
    uint64_t v14 = v7;
    id v12 = v5;
    id v13 = &v15;
    sub_10000817C((uint64_t)v12, v10);
    id v8 = (id)v16[5];

    _Block_object_dispose(&v15, 8);
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1003A4AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1003A4AC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) key];
  uint64_t v3 = sub_1003A4B78(*(void *)(a1 + 56), *(void **)(a1 + 40), v2);
  id v4 = v3;
  if (v3 && [v3 deleteFromDatabase])
  {
    id v5 = sub_1003A44A4([ApplicationMessageRegistration alloc], *(void **)(a1 + 32), *(void **)(a1 + 40));
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    BOOL v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) != 0;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

id sub_1003A4B78(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = self;
  uint64_t v7 = sub_1003A4844((uint64_t)v6, v4);

  BOOL v8 = [v6 anyInDatabase:v5 predicate:v7];

  return v8;
}

BOOL sub_1003A4C08(uint64_t a1, void *a2, id *a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = self;
  if (v6)
  {
    uint64_t v24 = 0;
    long long v25 = &v24;
    uint64_t v26 = 0x2020000000;
    char v27 = 0;
    uint64_t v18 = 0;
    long long v19 = &v18;
    uint64_t v20 = 0x3032000000;
    long long v21 = sub_100020CFC;
    long long v22 = sub_100021170;
    id v23 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003A4DB4;
    v11[3] = &unk_10074D920;
    uint64_t v16 = v8;
    id v12 = v7;
    id v13 = v6;
    uint64_t v14 = &v24;
    uint64_t v17 = a3;
    uint64_t v15 = &v18;
    sub_10000817C((uint64_t)v12, v11);
    if (a3) {
      objc_storeStrong(a3, (id)v19[5]);
    }
    BOOL v9 = *((unsigned char *)v25 + 24) != 0;

    _Block_object_dispose(&v18, 8);
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

void sub_1003A4D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

BOOL sub_1003A4DB4(uint64_t a1)
{
  id v2 = sub_1003A4B78(*(void *)(a1 + 64), *(void **)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v3 = v2;
  if (v2)
  {
    if (*(void *)(a1 + 72))
    {
      uint64_t v4 = sub_1003A4E64(v2);
      uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
      id v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 deleteFromDatabase];
    BOOL v7 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != 0;
  }
  else
  {
    BOOL v7 = 0;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }

  return v7;
}

id sub_1003A4E64(void *a1)
{
  if (a1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    id v2 = 0;
    if (sub_100020358((uint64_t)ApplicationMessageRegistration, 0, &v17, (uint64_t)&v14))
    {
      uint64_t v8 = 0;
      BOOL v9 = &v8;
      uint64_t v10 = 0x3032000000;
      uint64_t v11 = sub_100020CFC;
      id v12 = sub_100021170;
      id v13 = 0;
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_1003A54F4;
      v4[3] = &unk_10074D970;
      void v4[4] = a1;
      void v4[5] = &v8;
      long long v5 = v14;
      long long v6 = v15;
      uint64_t v7 = v16;
      [a1 getValuesForProperties:v17 withApplier:v4];
      id v2 = (id)v9[5];
      _Block_object_dispose(&v8, 8);
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

void sub_1003A4FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1003A4FCC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  if (v5)
  {
    uint64_t v14 = 0;
    long long v15 = &v14;
    uint64_t v16 = 0x3032000000;
    uint64_t v17 = sub_100020CFC;
    uint64_t v18 = sub_100021170;
    id v19 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003A5130;
    v9[3] = &unk_1007325B8;
    uint64_t v13 = v6;
    id v10 = v4;
    id v11 = v5;
    id v12 = &v14;
    sub_10000817C((uint64_t)v10, v9);
    id v7 = (id)v15[5];

    _Block_object_dispose(&v14, 8);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_1003A5118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A5130(uint64_t a1)
{
  id v2 = sub_1003A4B78(*(void *)(a1 + 56), *(void **)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v3 = sub_1003A4E64(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return 1;
}

uint64_t sub_1003A5188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 72);
  v15[0] = *(_OWORD *)(a1 + 56);
  v15[1] = v6;
  uint64_t v16 = *(void *)(a1 + 88);
  id v7 = sub_1003A5234(v5, a2, a3, a4, (uint64_t)v15);
  id v8 = v7;
  if (v7)
  {
    BOOL v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v14 = v8;
    if (!v9)
    {
      id v10 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;

      BOOL v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    id v7 = [v9 addObject:v14];
    id v8 = v14;
  }
  return _objc_release_x1(v7, v8);
}

id sub_1003A5234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  self;
  id v7 = +[NSNull null];
  id v8 = *(id *)(a4 + 8 * *(void *)(a5 + 24));
  BOOL v9 = v8;
  if (v8 && v8 == v7)
  {

    BOOL v9 = 0;
  }
  id v10 = *(id *)(a4 + 8 * *(void *)(a5 + 32));
  uint64_t v11 = v10;
  if (v10 && v10 == v7)
  {

    uint64_t v11 = 0;
  }
  if (!v9 || !PKApplicationMessageSourceFromString() || !v11)
  {
    id v19 = 0;
LABEL_29:

    goto LABEL_30;
  }
  id v12 = +[PKApplicationMessageKey createWithSource:0 identifier:v11];

  if (v12)
  {
    id v13 = *(id *)(a4 + 8 * *(void *)a5);
    uint64_t v11 = v13;
    if (v13 && v13 == v7)
    {

      uint64_t v11 = 0;
    }
    id v14 = (void *)_DateForSQLValue();
    if (v14)
    {
      id v15 = *(id *)(a4 + 8 * *(void *)(a5 + 8));
      uint64_t v16 = v15;
      if (v15 && v15 == v7)
      {

        uint64_t v16 = 0;
      }
      id v17 = *(id *)(a4 + 8 * *(unsigned __int8 *)(a5 + 16));
      uint64_t v18 = v17;
      if (v17 && v17 == v7)
      {

        uint64_t v18 = 0;
      }
      if (v16) {
        id v19 = +[PKApplicationMessageRegistration createWithKey:createdDate:priority:badge:](PKApplicationMessageRegistration, "createWithKey:createdDate:priority:badge:", v12, v14, [v16 longLongValue], objc_msgSend(v18, "BOOLValue"));
      }
      else {
        id v19 = 0;
      }
    }
    else
    {
      id v19 = 0;
    }

    BOOL v9 = v12;
    goto LABEL_29;
  }
  id v19 = 0;
LABEL_30:

  return v19;
}

id sub_1003A5410(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  uint64_t v4 = sub_1003A547C((uint64_t)v3, 1);
  id v5 = [v3 countInDatabase:v2 predicate:v4];

  return v5;
}

id sub_1003A547C(uint64_t a1, uint64_t a2)
{
  self;
  uint64_t v3 = +[NSNumber numberWithBool:a2];
  uint64_t v4 = +[SQLiteComparisonPredicate predicateWithProperty:@"badge" equalToValue:v3];

  return v4;
}

void sub_1003A54F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  [v5 persistentID];
  long long v7 = *(_OWORD *)(a1 + 64);
  v13[0] = *(_OWORD *)(a1 + 48);
  v13[1] = v7;
  uint64_t v14 = *(void *)(a1 + 80);
  id v10 = sub_1003A5234((uint64_t)ApplicationMessageRegistration, v8, v9, a3, (uint64_t)v13);

  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

id sub_1003A63A4(void *a1)
{
  id v1 = a1;
  id v2 = +[NSCharacterSet characterSetWithCharactersInString:@"\"'"];
  uint64_t v3 = [v1 rangeOfCharacterFromSet:v2];
  uint64_t v4 = [v1 rangeOfCharacterFromSet:v2 options:4];
  if (v3 == (unsigned char *)0x7FFFFFFFFFFFFFFFLL || v4 == (unsigned char *)0x7FFFFFFFFFFFFFFFLL || v3 >= v4)
  {
    id v7 = v1;
  }
  else
  {
    objc_msgSend(v1, "substringWithRange:", v3 + 1, v4 - (v3 + 1));
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v8 = v7;

  return v8;
}

void sub_1003A6C8C(id a1)
{
  id v1 = (void *)qword_100808ED8;
  qword_100808ED8 = (uint64_t)&off_10078C528;
}

BOOL PKPassEligibleForBarcodePayment(void *a1)
{
  id v1 = a1;
  if ([v1 supportsBarcodePayment])
  {
    id v2 = [v1 devicePrimaryBarcodePaymentApplication];
    [v2 state];
    BOOL v3 = PKPaymentApplicationStateIsPersonalized() != 0;
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_1003A6FD8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 paymentPass];

  [*(id *)(a1 + 32) _fetchBarcodesForPass:v3 fetchReason:1 sessionExchangeToken:*(void *)(a1 + 48) withCompletion:*(void *)(a1 + 56)];
}

void sub_1003A71B0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 paymentPass];

  [*(id *)(a1 + 32) _retrieveDecryptedBarcodeCredentialForPass:v3 authorization:*(void *)(a1 + 48) sessionExchangeToken:*(void *)(a1 + 56) withCompletion:*(void *)(a1 + 64)];
}

void sub_1003A7320(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 paymentPass];

  uint64_t v4 = [v3 deviceAccountIdentifier];
  if (v3)
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 40) fetchCertificatesForDeviceAccountIdentifier:v4 withCertificateType:3];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003A7490;
    v7[3] = &unk_10074DA08;
    void v7[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    id v8 = v5;
    id v9 = *(id *)(a1 + 40);
    id v10 = v4;
    id v11 = v3;
    id v12 = *(id *)(a1 + 48);
    id v6 = v5;
    PKBarcodeCreateAndValidateTrustWithCertsAsync(v6, 3, v7);
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1003A7490(uint64_t a1, char a2)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003A7590;
  v6[3] = &unk_10074D9E0;
  char v14 = a2;
  id v13 = *(id *)(a1 + 80);
  id v7 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 72);
  dispatch_async(v3, v6);
}

void sub_1003A7590(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    v2();
  }
  else
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Re-registering auxiliary capability since server decryption certificate is invalid or not found for pass %@", buf, 0xCu);
    }

    [*(id *)(a1 + 48) _removeCertificateForDeviceAccountIdentifier:*(void *)(a1 + 56) withCertificateType:3];
    uint64_t v5 = *(void **)(*(void *)(a1 + 48) + 48);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1003A7748;
    v11[3] = &unk_10073E3A0;
    id v8 = *(id *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = *(void **)(a1 + 56);
    id v12 = v8;
    uint64_t v13 = v9;
    id v14 = v10;
    id v15 = *(id *)(a1 + 80);
    [v5 registerAuxiliaryCapabilitiesForPass:v6 force:1 sessionExchangeToken:v7 completion:v11];
  }
}

void sub_1003A7748(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Auxiliary capability registration for pass %@ finished: %@", buf, 0x16u);
  }

  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 40) fetchCertificatesForDeviceAccountIdentifier:*(void *)(a1 + 48) withCertificateType:3];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003A78C8;
    v9[3] = &unk_10074D9B8;
    void v9[4] = *(void *)(a1 + 40);
    id v7 = *(id *)(a1 + 56);
    id v10 = v6;
    id v11 = v7;
    id v8 = v6;
    PKBarcodeCreateAndValidateTrustWithCertsAsync(v8, 3, v9);
  }
}

void sub_1003A78C8(uint64_t a1, char a2)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A7974;
  block[3] = &unk_100736830;
  char v7 = a2;
  id v6 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_1003A7974(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v2();
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Server decryption certificate is still invalid or not found after successful auxiliary capability registration.", v5, 2u);
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1003A7AF4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v5 = [v2 paymentPass];

  id v3 = [v5 deviceAccountIdentifier];
  if (v3) {
    [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:*(void *)(a1 + 56)];
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1003A7C54(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v5 = [v2 paymentPass];

  if (v5)
  {
    id v3 = [v5 deviceAccountIdentifier];
    if (v3)
    {
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:0];
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:1];
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:2];
      [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:v3 withCertificateType:3];
    }
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(void))(v4 + 16))();
  }
}

void sub_1003A7E38(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 paymentPass];

  [*(id *)(a1 + 32) _performDeviceSignatureWithData:*(void *)(a1 + 48) forPass:v3 sessionExchangeToken:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1003A7FC8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 paymentPass];

  [*(id *)(a1 + 32) _submitBarcodePaymentEvent:*(void *)(a1 + 48) forPass:v3 sessionExchangeToken:*(void *)(a1 + 56) withCompletion:*(void *)(a1 + 64)];
}

void sub_1003A80D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) uniqueID];
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "passWillBeRemoved: removing auxiliary capability data for pass: %@", buf, 0xCu);
  }

  [*(id *)(a1 + 40) _unscheduleBackgroundFetchForPassUniqueID:v2];
  [*(id *)(a1 + 40) _removeAllKeysAndCertificatesForPass:*(void *)(a1 + 32) session:0];
  uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003A8240;
  v6[3] = &unk_10074DA30;
  id v7 = v2;
  id v5 = v2;
  [v4 cancelTasksPassingTest:v6];
  [*(id *)(*(void *)(a1 + 40) + 88) removeObjectForKey:v5];
  [*(id *)(*(void *)(a1 + 40) + 104) removeObjectForKey:v5];
}

id sub_1003A8240(uint64_t a1, void *a2)
{
  id v3 = [a2 passUniqueIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1003A8324(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 64))
  {
    id v2 = [*(id *)(a1 + 40) barcodeIdentifier];
    unsigned int v3 = [v2 isEqualToString:*(void *)(*(void *)(a1 + 32) + 64)];

    if (v3)
    {
      id v4 = *(void **)(a1 + 32);
      [v4 _disableCriticalPushReliability];
    }
  }
}

void sub_1003A8928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A894C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(NSObject **)(v6 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A8A4C;
  block[3] = &unk_10073EEB8;
  void block[4] = v6;
  id v8 = *(id *)(a1 + 40);
  uint64_t v16 = a2;
  id v11 = v8;
  id v12 = v5;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v9 = v5;
  dispatch_async(v7, block);
}

void sub_1003A8A4C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 104) removeObjectForKey:*(void *)(a1 + 40)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 120) objectForKey:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 120) removeObjectForKey:*(void *)(a1 + 40)];
  id v5 = _NSConcreteStackBlock;
  uint64_t v6 = 3221225472;
  id v7 = sub_1003A8B6C;
  id v8 = &unk_10074DA58;
  uint64_t v10 = *(void *)(a1 + 80);
  id v9 = *(id *)(a1 + 48);
  [v2 enumerateObjectsUsingBlock:&v5];
  unsigned int v3 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "objectForKey:", *(void *)(a1 + 40), v5, v6, v7, v8);
  unsigned int v4 = [v3 BOOLValue];

  [*(id *)(*(void *)(a1 + 32) + 112) removeObjectForKey:*(void *)(a1 + 40)];
  if (v4 && !*(void *)(a1 + 80) && !*(void *)(a1 + 56)) {
    [*(id *)(a1 + 32) _fetchBarcodesForPass:*(void *)(a1 + 64) fetchReason:1 sessionExchangeToken:0 withCompletion:*(void *)(a1 + 72)];
  }
}

uint64_t sub_1003A8B6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a2 + 16))(a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1003A8B84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _numberOfBarcodesToFetchForPass:*(void *)(a1 + 40) fetchReason:*(void *)(a1 + 72)];
  if (v4)
  {
    id v5 = v4;
    id v6 = objc_alloc_init((Class)PKAuxiliaryCapabilityFetchBarcodeRequest);
    [v6 setPass:*(void *)(a1 + 40)];
    [v6 setBarcodeCount:v5];
    [v6 setDpanIdentifier:*(void *)(a1 + 48)];
    [v6 setFetchReason:*(void *)(a1 + 72)];
    id v33 = v3;
    id v7 = +[NSArray arrayWithObjects:&v33 count:1];
    [v6 setEncryptionCertificateChain:v7];

    id v8 = [*(id *)(*(void *)(a1 + 32) + 8) lastUsedBarcodeIdentifierForDPANIdentifier:*(void *)(a1 + 48)];
    [v6 setLastUsedBarcodeIdentifier:v8];

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1003A8EA8;
    v26[3] = &unk_10074DAF8;
    id v31 = *(id *)(a1 + 64);
    id v9 = v6;
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(a1 + 40);
    id v27 = v9;
    uint64_t v28 = v10;
    id v29 = v11;
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 72);
    id v30 = v12;
    uint64_t v32 = v13;
    id v14 = objc_retainBlock(v26);
    id v15 = v14;
    uint64_t v16 = *(void *)(a1 + 56);
    if (v16)
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_1003A96BC;
      v24[3] = &unk_10074DB20;
      uint64_t v17 = (id *)&v25;
      long long v25 = v14;
      uint64_t v18 = v14;
      +[PKSecureElement accessSecureElementManagerSessionWithSessionExchangeToken:v16 handler:v24];
    }
    else
    {
      uint64_t v20 = +[PKSecureElement sharedSecureElement];
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1003A96CC;
      v22[3] = &unk_10074DB20;
      uint64_t v17 = &v23;
      id v23 = v15;
      id v21 = v15;
      [v20 accessSecureElementManagerSessionWithHandler:v22];
    }
  }
  else
  {
    id v19 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Not fetching since fetch count is %ld.", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_1003A8EA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) _dataToSign];
    id v24 = 0;
    id v23 = 0;
    id v5 = +[PKSecureElement signChallenge:v4 signatureEntanglementMode:1 session:v3 signatureInfo:&v24 error:&v23];
    id v6 = v24;
    id v7 = v23;

    if (v7)
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      [*(id *)(a1 + 32) setSignatureData:v5];
      [*(id *)(a1 + 32) setSignatureInfo:v6];
      uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 16);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1003A90F4;
      v16[3] = &unk_100742A28;
      id v11 = *(id *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void **)(a1 + 48);
      id v17 = v11;
      uint64_t v18 = v12;
      id v19 = v13;
      id v20 = *(id *)(a1 + 56);
      id v14 = *(id *)(a1 + 64);
      uint64_t v15 = *(void *)(a1 + 72);
      id v21 = v14;
      uint64_t v22 = v15;
      [v10 performHandlerOnSharedWebServiceQueue:v16];
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v25 = NSDebugDescriptionErrorKey;
    CFStringRef v26 = @"Failed to obtain NFSecureElementManagerSession from token for barcode fetch.";
    id v6 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    id v7 = +[NSError errorWithDomain:v9 code:-1 userInfo:v6];
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v7);
  }
}

void sub_1003A90F4(uint64_t a1, void *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003A91C4;
  v8[3] = &unk_10074DAD0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 48);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = v5;
  id v10 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  id v11 = v6;
  uint64_t v12 = v7;
  [a2 fetchBarcodesWithRequest:v4 completion:v8];
}

void sub_1003A91C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(NSObject **)(v8 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003A92D0;
  block[3] = &unk_1007429D8;
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = *(id *)(a1 + 40);
  id v18 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  id v20 = v10;
  uint64_t v21 = v11;
  id v19 = v6;
  id v12 = v6;
  id v13 = v7;
  dispatch_async(v9, block);
}

void sub_1003A92D0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 code] == (id)40601)
    {
      id v3 = *(void **)(a1 + 40);
      uint64_t v4 = [*(id *)(a1 + 48) deviceAccountIdentifier];
      [v3 _removeCertificateForDeviceAccountIdentifier:v4 withCertificateType:1];

      if (*(void *)(a1 + 56))
      {
        uint64_t v5 = *(void *)(a1 + 72);
        id v17 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:2 userInfo:0];
        (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
      }
      else
      {
        uint64_t v8 = PKLogFacilityTypeGetObject();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          id v9 = [*(id *)(a1 + 48) uniqueID];
          *(_DWORD *)long long buf = 138412290;
          *(void *)&uint8_t buf[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Reregistering auxiliary capability due to invalid certificates at barcode fetch for pass: %@", buf, 0xCu);
        }
        uint64_t v10 = *(void *)(a1 + 48);
        uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 48);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        _DWORD v18[2] = sub_1003A9580;
        v18[3] = &unk_10074DAA8;
        id v12 = *(id *)(a1 + 72);
        uint64_t v13 = *(void *)(a1 + 40);
        id v14 = *(void **)(a1 + 48);
        id v20 = v12;
        void v18[4] = v13;
        id v15 = v14;
        uint64_t v16 = *(void *)(a1 + 80);
        id v19 = v15;
        uint64_t v21 = v16;
        [v11 registerAuxiliaryCapabilitiesForPass:v10 force:1 sessionExchangeToken:0 completion:v18];
      }
    }
    else
    {
      id v7 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
      v7();
    }
  }
  else
  {
    *(void *)long long buf = 0;
    id v6 = [*(id *)(a1 + 40) _handleFetchBarcodeResponse:*(void *)(a1 + 64) forPass:*(void *)(a1 + 48) outStoredBarcodeCount:buf];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_1003A9580(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = PKAuxiliaryCapabilityErrorDomain;
    v11[0] = NSDebugDescriptionErrorKey;
    v11[1] = NSUnderlyingErrorKey;
    v12[0] = @"Invalid certificate and auxiliary register failed.";
    v12[1] = a2;
    id v4 = a2;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:2];
    id v6 = +[NSError errorWithDomain:v3 code:4 userInfo:v5];

    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    id v7 = (void *)a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = a1[6];
    uint64_t v10 = a1[7];
    id v6 = 0;
    [v7 _fetchBarcodesForPass:v8 fetchReason:v10 sessionExchangeToken:0 withCompletion:v9];
  }
}

uint64_t sub_1003A96BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003A96CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003A96DC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = a1[6];
    v16[0] = NSDebugDescriptionErrorKey;
    v16[1] = NSUnderlyingErrorKey;
    v17[0] = @"Missing certificate and auxiliary register failed.";
    v17[1] = v3;
    id v6 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];
    id v7 = PKPassKitErrorDomain;
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v10 = [*(id *)(a1[4] + 40) fetchCertificatesForDeviceAccountIdentifier:a1[5] withCertificateType:1];
    uint64_t v11 = [v10 firstObject];
    uint64_t v12 = *(void *)(a1[8] + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (*(void *)(*(void *)(a1[8] + 8) + 40))
    {
      (*(void (**)(void))(a1[7] + 16))();
      goto LABEL_6;
    }
    uint64_t v5 = a1[6];
    NSErrorUserInfoKey v14 = NSDebugDescriptionErrorKey;
    CFStringRef v15 = @"Auxiliary register succeeded but failed to retrieve certificate.";
    id v6 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    id v7 = PKPassKitErrorDomain;
    uint64_t v8 = -1;
  }
  uint64_t v9 = +[NSError errorWithDomain:v7 code:v8 userInfo:v6];
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v9);

LABEL_6:
}

void sub_1003A9D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003A9D94(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  [*(id *)(*(void *)(a1 + 32) + 128) removeObjectForKey:*(void *)(a1 + 40)];
  uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 136) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 136) removeObjectForKey:*(void *)(a1 + 40)];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003A9EB0;
  void v14[3] = &unk_10074DB98;
  id v15 = v7;
  id v16 = v8;
  id v17 = v9;
  id v11 = v9;
  id v12 = v8;
  id v13 = v7;
  [v10 enumerateObjectsUsingBlock:v14];
}

uint64_t sub_1003A9EB0(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(a2 + 16))(a2, a1[4], a1[5], a1[6]);
}

void sub_1003A9ECC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(*(void *)(a1 + 32) + 128) objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003A9FF8;
  v10[3] = &unk_10074DBE8;
  id v16 = *(id *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v3;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 40);
  id v9 = v3;
  [v5 _decryptBarcodeCredential:v9 forPass:v6 authorization:v4 sessionExchangeToken:v7 completion:v10];
}

void sub_1003A9FF8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    uint64_t v6 = [*(id *)(a1 + 32) identifier];
    uint64_t v7 = *(void **)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = +[NSDate date];
    [v7 updateDisplayTimestamp:v8 forBarcodeIdentifier:v6];

    [*(id *)(a1 + 40) _enableCriticalPushReliabilityForBarcodeCredential:*(void *)(a1 + 32)];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    id v9 = [*(id *)(*(void *)(a1 + 40) + 8) numberOfValidBarcodeCredentialsForDPANIdentifier:*(void *)(a1 + 48)];
    if (v9 <= [*(id *)(a1 + 40) _barcodeCountLowWatermarkForPass:*(void *)(a1 + 56)])
    {
      uint64_t v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 64);
        int v12 = 138412290;
        uint64_t v13 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Scheduling background barcode fetch due to low water mark hit after presentation for pass %@", (uint8_t *)&v12, 0xCu);
      }

      [*(id *)(a1 + 40) _scheduleBackgroundFetchForPassUniqueID:*(void *)(a1 + 64) withBackgroundFetchType:3];
    }
  }
}

void sub_1003AA184(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    [v10 setObject:@"No valid barcode stored locally. Barcode fetch failed or returned no barcodes." forKeyedSubscript:NSDebugDescriptionErrorKey];
    if (v6) {
      [v10 setObject:v6 forKeyedSubscript:NSUnderlyingErrorKey];
    }
    uint64_t v11 = PKAuxiliaryCapabilityErrorDomain;
    id v12 = [v10 copy];
    goto LABEL_9;
  }
  uint64_t v7 = [*(id *)(a1[4] + 8) firstValidBarcodeCredentialForDPANIdentifier:a1[5]];
  uint64_t v8 = *(void *)(a1[8] + 8);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (!*(void *)(*(void *)(a1[8] + 8) + 40))
  {
    id v10 = +[NSString stringWithFormat:@"Successfully fetched %ld barcodes but failed to retrieve a valid barcode from database", a2];
    uint64_t v11 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v15 = NSDebugDescriptionErrorKey;
    id v16 = v10;
    id v12 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
LABEL_9:
    uint64_t v13 = v12;
    id v14 = +[NSError errorWithDomain:v11 code:-1 userInfo:v12];

    (*(void (**)(void))(a1[7] + 16))();
    goto LABEL_10;
  }
  (*(void (**)(void))(a1[6] + 16))();
LABEL_10:
}

uint64_t sub_1003AA648(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 value];
  uint64_t v5 = [v3 identifier];
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = [v3 expirationTimestamp];
    if (v7) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    uint64_t v9 = !v8;

    if (*(void *)(a1 + 32) && v9)
    {
      id v10 = [v4 publicKeyHash];
      uint64_t v9 = PKEqualObjects();
    }
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_1003AA9C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = [*(id *)(a1 + 40) value];
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    id v19 = 0;
    BOOL v8 = [v4 _decryptEncryptedDataObject:v5 keyData:v6 authorization:v7 session:v3 outError:&v19];
    id v9 = v19;
  }
  else
  {
    uint64_t v10 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v20 = NSDebugDescriptionErrorKey;
    CFStringRef v21 = @"Failed to exchange for NFSecureElementManagerSession with token for decrypt barcode";
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    id v9 = +[NSError errorWithDomain:v10 code:-1 userInfo:v5];
    BOOL v8 = 0;
  }

  uint64_t v11 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AAB8C;
  block[3] = &unk_100731830;
  id v12 = *(id *)(a1 + 64);
  id v17 = v9;
  id v18 = v12;
  id v16 = v8;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, block);
}

uint64_t sub_1003AAB8C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1003AAF24(uint64_t a1)
{
  [*(id *)(a1 + 32) _disableCriticalPushReliability];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0;
}

void sub_1003AB284(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    PKLogFacilityTypeGetObject();
    uint64_t v7 = (PDBarcodeServiceBarcodeEventTask *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v7->super.super.super.super, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, &v7->super.super.super.super, OS_LOG_TYPE_DEFAULT, "Barcode event data signature failed for pass %@ with error: %@. Not submitting barcode event.", (uint8_t *)&v13, 0x16u);
    }
  }
  else
  {
    uint64_t v7 = objc_alloc_init(PDBarcodeServiceBarcodeEventTask);
    [(PDBarcodeServiceBarcodeEventTask *)v7 setEvent:*(void *)(a1 + 40)];
    [(PDBarcodeServiceBarcodeEventTask *)v7 setSignature:v5];
    id v9 = [*(id *)(a1 + 48) barcodeIdentifier];
    [(PDBarcodeServiceBarcodeEventTask *)v7 setBarcodeIdentifier:v9];

    [(PDBarcodeServiceConnectionTask *)v7 setPassUniqueIdentifier:*(void *)(a1 + 32)];
    uint64_t v10 = [*(id *)(a1 + 56) barcodeSettings];
    uint64_t v11 = [v10 barcodeServiceURL];
    [(PDBarcodeServiceConnectionTask *)v7 setBarcodeServiceURL:v11];

    [*(id *)(*(void *)(a1 + 64) + 32) performTask:v7];
    if (*(unsigned char *)(a1 + 96)) {
      [*(id *)(*(void *)(a1 + 64) + 8) insertOrUpdateEvaluatedPolicyDomainState:*(void *)(a1 + 72) forDPANIdentifier:*(void *)(a1 + 80)];
    }
  }

  uint64_t v12 = *(void *)(a1 + 88);
  if (v12) {
    (*(void (**)(void))(v12 + 16))();
  }
}

void sub_1003AB5A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003AB64C;
  v6[3] = &unk_10074DCD8;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  [v4 _fetchBarcodesForPass:v5 fetchReason:3 sessionExchangeToken:0 withCompletion:v6];
}

void sub_1003AB64C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) uniqueID];
  id v7 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134218498;
    uint64_t v13 = a2;
    __int16 v14 = 2112;
    __int16 v15 = v6;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Background fetched %ld barcodes for pass %@ with error: %@", (uint8_t *)&v12, 0x20u);
  }

  BOOL v8 = PKPassEligibleForBarcodePayment(*(void **)(a1 + 32));
  id v9 = *(id **)(a1 + 40);
  if (v8)
  {
    if ((uint64_t)[v9[1] barcodeBackgroundFetchRetryLevelForPassUniqueIdentifier:v6] >= 1 || v5 == 0) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = 2;
    }
    [*(id *)(a1 + 40) _scheduleBackgroundFetchForPassUniqueID:v6 withBackgroundFetchType:v11];
  }
  else
  {
    [v9 _unscheduleBackgroundFetchForPassUniqueID:v6];
  }
}

void sub_1003AB84C(id a1, unint64_t a2, NSError *a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134218242;
    unint64_t v7 = a2;
    __int16 v8 = 2112;
    id v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Initial barcode fetch count: %ld, with error: %@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1003AB90C(id a1, unint64_t a2, NSError *a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134218242;
    unint64_t v7 = a2;
    __int16 v8 = 2112;
    id v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resumed background barcode fetch count: %ld, with error: %@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1003AC2B0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 paymentPass];

  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v19 = v5;
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Barcode event task %@ for pass %@, encountered certificate invalid error. Removing device signature certificates and re-regsitering auxiliary capability.", buf, 0x16u);
    }

    unint64_t v7 = *(void **)(a1 + 32);
    __int16 v8 = [v3 deviceAccountIdentifier];
    [v7 _removeCertificateForDeviceAccountIdentifier:v8 withCertificateType:0];

    id v9 = *(void **)(*(void *)(a1 + 32) + 48);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1003AC47C;
    void v12[3] = &unk_10074DDB0;
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 32);
    id v13 = v10;
    uint64_t v14 = v11;
    id v15 = *(id *)(a1 + 48);
    id v16 = v3;
    id v17 = *(id *)(a1 + 56);
    [v9 registerAuxiliaryCapabilitiesForPass:v16 force:1 sessionExchangeToken:0 completion:v12];
  }
}

void sub_1003AC47C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v13 = v5;
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Auxiliary capability registration for pass %@ finished, error: %@", buf, 0x16u);
  }

  if (!v3)
  {
    uint64_t v6 = *(void **)(a1 + 40);
    unint64_t v7 = [*(id *)(a1 + 48) event];
    __int16 v8 = [*(id *)(a1 + 56) deviceAccountIdentifier];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003AC600;
    v9[3] = &unk_10074DD88;
    id v10 = *(id *)(a1 + 48);
    id v11 = *(id *)(a1 + 64);
    [v6 _signData:v7 withDeviceAccountIdentifier:v8 sessionExchangeToken:0 completion:v9];
  }
}

void sub_1003AC600(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) setSignature:a2];
  uint64_t v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Re-signed barcode event data for task %@ with error %@", (uint8_t *)&v8, 0x16u);
  }
}

void sub_1003ACD9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v6 domain];
  if (![v7 isEqualToString:PKAuxiliaryCapabilityErrorDomain])
  {

    goto LABEL_6;
  }
  id v8 = [v6 code];

  if (v8 != (id)1)
  {
LABEL_6:
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
    goto LABEL_7;
  }
  [*(id *)(a1 + 32) _removeCertificateForDeviceAccountIdentifier:*(void *)(a1 + 40) withCertificateType:0];
  if (*(void *)(a1 + 48))
  {
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 80) + 16);
LABEL_7:
    v9();
    goto LABEL_8;
  }
  __int16 v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Re-registering auxiliary capability for pass %@ due to missing key data for device signature certificate.", buf, 0xCu);
  }

  int v12 = *(void **)(*(void *)(a1 + 32) + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1003ACFAC;
  v16[3] = &unk_10073E7B8;
  uint64_t v13 = *(void *)(a1 + 64);
  id v14 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 32);
  id v17 = v14;
  uint64_t v18 = v15;
  id v19 = *(id *)(a1 + 72);
  id v20 = *(id *)(a1 + 40);
  id v21 = *(id *)(a1 + 80);
  [v12 registerAuxiliaryCapabilitiesForPass:v13 force:1 sessionExchangeToken:0 completion:v16];

LABEL_8:
}

void sub_1003ACFAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Re-register auxiliary capability for pass %@ finished error: %@", (uint8_t *)&v6, 0x16u);
  }

  if (v3) {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else {
    [*(id *)(a1 + 40) _signData:*(void *)(a1 + 48) withDeviceAccountIdentifier:*(void *)(a1 + 56) sessionExchangeToken:0 completion:*(void *)(a1 + 64)];
  }
}

void sub_1003AD554(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = +[PKSecureElement primarySecureElementIdentifier];
    uint64_t v5 = [*(id *)(a1 + 40) SHA256Hash];
    int v6 = [*(id *)(a1 + 48) externalizedContext];
    uint64_t v18 = 0;
    uint64_t v7 = SESKeySignPrecomputedDigestWithSession();
    id v8 = 0;
  }
  else
  {
    uint64_t v9 = PKAuxiliaryCapabilityErrorDomain;
    NSErrorUserInfoKey v19 = NSDebugDescriptionErrorKey;
    CFStringRef v20 = @"Failed to exchange session with token for signData";
    id v4 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    id v8 = +[NSError errorWithDomain:v9 code:-1 userInfo:v4];
    uint64_t v7 = 0;
  }

  __int16 v10 = *(NSObject **)(*(void *)(a1 + 56) + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AD75C;
  block[3] = &unk_100731830;
  id v11 = *(id *)(a1 + 64);
  id v16 = v8;
  id v17 = v11;
  id v15 = v7;
  id v12 = v8;
  id v13 = v7;
  dispatch_async(v10, block);
}

uint64_t sub_1003AD75C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1003AD80C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) paymentPass];
  [v1 _setupBarcodeFetchScheduleIfNecessaryForPass:v2];
}

void sub_1003ADF30(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 expressModeStateController:*(void *)(a1 + 32) requestsUpdateExpressStatus:*(void *)(a1 + 40)];
}

uint64_t sub_1003AE6B0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) addProcessedAuthenticationMechanisms:*(void *)(a1 + 56) forTransactionIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _processLatestTransactionPendingUserNotification];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_1003AE7D8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) markAuthenticationCompleteforTransactionIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _processLatestTransactionPendingUserNotification];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_1003AE93C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) transactionWithTransactionIdentifier:*(void *)(a1 + 40)];
  id v3 = [v2 barcodeIdentifier];
  if (v3)
  {
    v13[0] = @"confirmed";
    id v4 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
    v13[1] = @"barcodeIdentifier";
    v14[0] = v4;
    v14[1] = v3;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:2];
    id v10 = 0;
    int v6 = +[NSJSONSerialization dataWithJSONObject:v5 options:0 error:&v10];
    id v7 = v10;

    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 56);
      if (v8) {
        (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v7);
      }
    }
    else
    {
      [*(id *)(*(void *)(a1 + 32) + 8) updateUserConfirmationData:v6 forTransactionIdentifier:*(void *)(a1 + 40)];
      [*(id *)(*(void *)(a1 + 32) + 8) addDataCollectedAuthenticationMechanisms:4 forTransactionIdentifier:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) _collectTransactionSignatureIfNecessaryAndSubmitResultForTransaction:v2 sessionExchangeToken:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    }
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    NSErrorUserInfoKey v11 = NSDebugDescriptionErrorKey;
    CFStringRef v12 = @"Invalid transaction for user confirmation submission.";
    id v7 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    int v6 = +[NSError errorWithDomain:PKPassKitErrorDomain code:1 userInfo:v7];
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v6);
LABEL_9:
  }
}

void sub_1003AED98(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) updatePaymentPINData:*(void *)(a1 + 40) forTransactionIdentifier:*(void *)(a1 + 48)];
  [*(id *)(*(void *)(a1 + 32) + 8) addDataCollectedAuthenticationMechanisms:1 forTransactionIdentifier:*(void *)(a1 + 48)];
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) transactionWithTransactionIdentifier:*(void *)(a1 + 48)];
  [*(id *)(a1 + 32) _collectTransactionSignatureIfNecessaryAndSubmitResultForTransaction:v2 sessionExchangeToken:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1003AEF04(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) transactionWithTransactionIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _collectTransactionSignatureIfNecessaryAndSubmitResultForTransaction:v2 sessionExchangeToken:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1003AF0F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if ((*(unsigned char *)(a1 + 56) & 2) != 0)
    {
      [*(id *)(a1 + 32) _collectTransactionSignatureForTransaction:*(void *)(a1 + 40) completion:0];
      [*(id *)(*(void *)(a1 + 32) + 8) addProcessedAuthenticationMechanisms:2 forTransactionIdentifier:*(void *)(a1 + 48)];
    }
    if (*(unsigned char *)(a1 + 73) && (*(unsigned char *)(a1 + 56) & 0xD) != 0)
    {
      uint64_t v3 = *(void *)(a1 + 32);
      id v2 = *(void **)(a1 + 40);
      uint64_t v5 = *(void *)(v3 + 88);
      id v4 = (void **)(v3 + 88);
      if (v5)
      {
        int v6 = [v2 transactionDate];
        id v7 = [*(id *)(*(void *)(a1 + 32) + 88) transactionDate];
        id v8 = [v6 compare:v7];

        if (v8 == (id)-1)
        {
LABEL_10:
          NSErrorUserInfoKey v11 = *(void **)(a1 + 32);
          [v11 _processLatestTransactionPendingUserNotification];
          return;
        }
        id v2 = *(void **)(a1 + 40);
        id v4 = (void **)(*(void *)(a1 + 32) + 88);
      }
      id v9 = v2;
      id v10 = *v4;
      void *v4 = v9;

      goto LABEL_10;
    }
  }
  else
  {
    CFStringRef v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 64);
      id v14 = [*(id *)(a1 + 40) identifier];
      uint64_t v15 = *(unsigned __int8 *)(a1 + 74);
      uint64_t v16 = *(unsigned __int8 *)(a1 + 75);
      uint64_t v17 = *(unsigned __int8 *)(a1 + 76);
      uint64_t v18 = *(unsigned __int8 *)(a1 + 77);
      int v19 = 134219266;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      uint64_t v22 = v14;
      __int16 v23 = 2048;
      uint64_t v24 = v15;
      __int16 v25 = 2048;
      uint64_t v26 = v16;
      __int16 v27 = 2048;
      uint64_t v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDTransactionAuthenticationManager not processing auth mechanisms %ld for transaction identifier %@, transactionPending: %ld, hasUnprocessedMechanisms: %ld, isValidMechanism: %ld, isComplete: %ld", (uint8_t *)&v19, 0x3Eu);
    }
    if (*(void *)(*(void *)(a1 + 32) + 72)
      && objc_msgSend(*(id *)(a1 + 48), "isEqualToString:")
      && (!*(unsigned char *)(a1 + 74) || *(unsigned char *)(a1 + 72)))
    {
      [*(id *)(a1 + 32) _disableCriticalPushReliability];
    }
  }
}

void sub_1003AF4C4(uint64_t a1)
{
  [*(id *)(a1 + 32) _disableCriticalPushReliability];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0;
}

void sub_1003AF788(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(a1 + 32) uniqueID];
      id v9 = [*(id *)(a1 + 40) identifier];
      int v11 = 138412802;
      CFStringRef v12 = v8;
      __int16 v13 = 2112;
      id v14 = v9;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to perform transaction signature for pass: %@, transaction: %@, error: %@", (uint8_t *)&v11, 0x20u);
    }
  }
  [*(id *)(*(void *)(a1 + 48) + 8) updateTransactionSignatureData:v5 forTransactionIdentifier:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 48) + 8) addDataCollectedAuthenticationMechanisms:2 forTransactionIdentifier:*(void *)(a1 + 56)];
  id v10 = [*(id *)(*(void *)(a1 + 48) + 104) objectForKey:*(void *)(a1 + 56)];
  [*(id *)(*(void *)(a1 + 48) + 104) removeObjectForKey:*(void *)(a1 + 56)];
  [v10 enumerateObjectsUsingBlock:&stru_10074DE40];
}

void sub_1003AF8F0(id a1, id a2)
{
}

void sub_1003AF9F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_1003AFD94;
  v36[3] = &unk_10074DEB8;
  void v36[4] = *(void *)(a1 + 32);
  id v10 = v9;
  id v37 = v10;
  id v38 = *(id *)(a1 + 56);
  int v11 = objc_retainBlock(v36);
  CFStringRef v12 = v11;
  if (v8)
  {
    ((void (*)(void *, void, id))v11[2])(v11, 0, v8);
  }
  else
  {
    __int16 v13 = [*(id *)(a1 + 40) uniqueID];
    id v14 = [*(id *)(a1 + 48) identifier];
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_1003AFED8;
    v29[3] = &unk_10072FEA8;
    id v24 = v13;
    id v30 = v24;
    id v15 = v14;
    id v31 = v15;
    id v32 = *(id *)(a1 + 48);
    id v33 = *(id *)(a1 + 40);
    id v16 = v7;
    id v34 = v16;
    id v35 = v12;
    uint64_t v17 = objc_retainBlock(v29);
    uint64_t v18 = [*(id *)(a1 + 48) authenticationContext];
    int v19 = [v18 signingKeyMaterial];

    if (v19)
    {
      uint64_t v20 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        id v40 = v24;
        __int16 v41 = 2112;
        id v42 = v15;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Configuring key material for pass %@ and transaction %@", buf, 0x16u);
      }

      id v21 = objc_alloc_init((Class)PKBarcodeEventConfigurationRequest);
      uint64_t v22 = [*(id *)(a1 + 40) deviceAccountIdentifier];
      [v21 setDeviceAccountIdentifier:v22];

      [v21 setConfigurationData:v19];
      [v21 setConfigurationDataType:1];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1003B0164;
      v25[3] = &unk_10072E9D8;
      __int16 v23 = v24;
      id v26 = v24;
      id v27 = v15;
      uint64_t v28 = v17;
      [v16 handleConfigurationRequest:v21 completion:v25];
    }
    else
    {
      ((void (*)(void *))v17[2])(v17);
      __int16 v23 = v24;
    }
  }
}

void sub_1003AFD94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(NSObject **)(*(void *)(a1 + 32) + 112);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003AFE84;
  v10[3] = &unk_10074DE90;
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, v10);
}

uint64_t sub_1003AFE84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v3();
}

void sub_1003AFED8(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Signing transaction details for pass %@ and transaction %@", buf, 0x16u);
  }

  id v5 = objc_alloc((Class)PKBarcodeEventSignatureRequest);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = [*(id *)(a1 + 56) deviceAccountIdentifier];
  id v8 = [v5 initWithPaymentTransaction:v6 deviceAccountIdentifier:v7];

  id v9 = *(void **)(a1 + 64);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003B0068;
  v10[3] = &unk_10074DEE0;
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 72);
  [v9 handleSignatureRequest:v8 completion:v10];
}

void sub_1003B0068(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Signed transaction details for pass %@ and transaction %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v7 = a1[6];
  id v8 = [v3 signedData];
  (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v8, 0);
}

uint64_t sub_1003B0164(void *a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Configured key material for pass %@ and transaction %@", (uint8_t *)&v6, 0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_1003B040C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 112);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1003B04F0;
  void v12[3] = &unk_100731EC0;
  id v13 = v6;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v14 = v5;
  uint64_t v15 = v9;
  id v16 = v8;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_1003B04F0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v2();
  }
  else if ([*(id *)(a1 + 40) count])
  {
    uint64_t v3 = [*(id *)(a1 + 40) firstObject];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1003B06C4;
    v8[3] = &unk_10074DF30;
    uint64_t v4 = *(void **)(a1 + 56);
    void v8[4] = *(void *)(a1 + 48);
    id v9 = v4;
    [v3 beginExtensionRequestWithCompletion:v8];
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 56);
    NSErrorUserInfoKey v10 = NSDebugDescriptionErrorKey;
    CFStringRef v11 = @"No matching extensions found";
    id v6 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
    uint64_t v7 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1001 userInfo:v6];
    (*(void (**)(uint64_t, void, void *, void))(v5 + 16))(v5, 0, v7, 0);
  }
}

void sub_1003B06C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 112);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003B0780;
  v6[3] = &unk_10072FDC8;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1003B0780(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 && ([v2 isInvalidated] & 1) == 0)
  {
    id v3 = [*(id *)(a1 + 32) extensionContext];
    if (v3)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_1003B0938;
        v8[3] = &unk_10072E1E8;
        uint64_t v7 = *(void *)(a1 + 40);
        id v9 = *(id *)(a1 + 32);
        (*(void (**)(uint64_t, void *, void, void *))(v7 + 16))(v7, v3, 0, v8);
        id v5 = v9;
        goto LABEL_5;
      }
    }
  }
  else
  {
    id v3 = 0;
  }
  [*(id *)(a1 + 32) invalidate];
  uint64_t v4 = *(void *)(a1 + 40);
  NSErrorUserInfoKey v10 = NSDebugDescriptionErrorKey;
  CFStringRef v11 = @"Failed to begin extension request";
  id v5 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  id v6 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:v5];
  (*(void (**)(uint64_t, void, void *, void))(v4 + 16))(v4, 0, v6, 0);

LABEL_5:
}

id sub_1003B0938(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_1003B09C8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 81) = 1;
  return result;
}

id sub_1003B0A4C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 81) = 0;
  return [*(id *)(a1 + 32) _processLatestTransactionPendingUserNotification];
}

id sub_1003B0F64(uint64_t a1)
{
  return [*(id *)(a1 + 32) _submitAuthenticationResultForTransaction:*(void *)(a1 + 40) pass:*(void *)(a1 + 48) sessionExchangeToken:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

id sub_1003B12F4(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 96) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id v3 = *(void **)(a1 + 32);
  return [v3 _processLatestTransactionPendingUserNotification];
}

void sub_1003B16A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B1830;
  block[3] = &unk_10074DFF8;
  id v14 = v6;
  id v8 = *(id *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 32);
  NSErrorUserInfoKey v10 = *(void **)(a1 + 40);
  id v25 = v8;
  uint64_t v15 = v9;
  id v16 = v10;
  id v17 = v5;
  id v18 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 56);
  id v20 = *(id *)(a1 + 64);
  id v21 = *(id *)(a1 + 72);
  id v22 = *(id *)(a1 + 80);
  char v26 = *(unsigned char *)(a1 + 112);
  id v23 = *(id *)(a1 + 88);
  id v24 = *(id *)(a1 + 96);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v7, block);
}

void sub_1003B1830(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v21 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to sign transaction authentication result with error: %@. Not submitting authentication results.", buf, 0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 120);
    if (v4) {
      (*(void (**)(uint64_t, void, void))(v4 + 16))(v4, 0, *(void *)(a1 + 32));
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = *(void **)(*(void *)(a1 + 40) + 24);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = [*(id *)(a1 + 72) serviceIdentifier];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1003B1A38;
    v11[3] = &unk_10074DFD0;
    void v11[4] = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 80);
    id v12 = *(id *)(a1 + 88);
    id v13 = *(id *)(a1 + 96);
    char v19 = *(unsigned char *)(a1 + 128);
    id v14 = *(id *)(a1 + 104);
    id v15 = *(id *)(a1 + 112);
    id v16 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 64);
    id v18 = *(id *)(a1 + 120);
    [v6 submitTransactionAuthenticationResultsData:v5 signature:v7 forPass:v8 transactionServiceIdentifier:v9 notificationService:v10 completion:v11];
  }
}

void sub_1003B1A38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(*(void *)(a1 + 32) + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B1B98;
  block[3] = &unk_10074DFA8;
  id v12 = *(id *)(a1 + 40);
  id v13 = v5;
  uint64_t v8 = *(void *)(a1 + 32);
  id v14 = v6;
  uint64_t v15 = v8;
  id v16 = *(id *)(a1 + 48);
  char v22 = *(unsigned char *)(a1 + 96);
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v19 = *(id *)(a1 + 72);
  id v20 = *(id *)(a1 + 80);
  id v21 = *(id *)(a1 + 88);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_1003B1B98(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138412802;
    uint64_t v41 = v3;
    __int16 v42 = 2112;
    uint64_t v43 = v4;
    __int16 v44 = 2112;
    uint64_t v45 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Transaction authentication result submission for transaction %@ completed with response %@, error %@", buf, 0x20u);
  }

  id v6 = *(void **)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = [v6 domain];
    if ([v7 isEqualToString:@"PDTaskErrorDomain"])
    {
      id v8 = [*(id *)(a1 + 48) code];

      if (v8 == (id)40601)
      {
        uint64_t v9 = *(void *)(a1 + 64);
        id v10 = *(void **)(*(void *)(a1 + 56) + 16);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1003B1FB4;
        v32[3] = &unk_10074DF80;
        char v39 = *(unsigned char *)(a1 + 112);
        id v11 = *(id *)(a1 + 72);
        uint64_t v12 = *(void *)(a1 + 56);
        id v33 = v11;
        uint64_t v34 = v12;
        id v35 = *(id *)(a1 + 80);
        id v36 = *(id *)(a1 + 88);
        id v37 = *(id *)(a1 + 96);
        id v38 = *(id *)(a1 + 104);
        [v10 invalidateCertificateOfType:0 forPassUniqueIdentifier:v9 withCompletion:v32];

        return;
      }
    }
    else
    {
    }
    uint64_t v16 = *(void *)(a1 + 104);
    if (v16) {
      (*(void (**)(uint64_t, void, void))(v16 + 16))(v16, 0, *(void *)(a1 + 48));
    }
  }
  else
  {
    id v13 = [*(id *)(a1 + 40) updatedTransactionStatus];
    id v14 = [*(id *)(a1 + 40) updatedAuthenticationContext];
    uint64_t v15 = v14;
    if (v13 || ![v14 requestedAuthenticationMechanisms]) {
      [*(id *)(*(void *)(a1 + 56) + 8) markAuthenticationCompleteforTransactionIdentifier:*(void *)(a1 + 32)];
    }
    else {
      [*(id *)(*(void *)(a1 + 56) + 8) resetTransactionAuthenticationForTransactionIdentifier:*(void *)(a1 + 32)];
    }
    [*(id *)(a1 + 88) setTransactionStatus:v13];
    [*(id *)(a1 + 88) setAuthenticationContext:v15];
    [*(id *)(a1 + 88) addUpdateReasons:0x8000];
    id v17 = [*(id *)(a1 + 96) devicePrimaryBarcodePaymentApplication];
    id v18 = *(void **)(*(void *)(a1 + 56) + 8);
    uint64_t v19 = *(void *)(a1 + 88);
    id v20 = [*(id *)(a1 + 96) uniqueID];
    id v21 = [v18 insertOrUpdatePaymentTransaction:v19 withPassUniqueIdentifier:v20 paymentApplication:v17 insertionMode:0 performTruncation:0 insertedTransaction:0];

    if ((PKPaymentTransactionHasAuthenticationRequest() & 1) == 0)
    {
      char v22 = *(void **)(*(void *)(a1 + 56) + 40);
      id v23 = [v17 transactionSourceIdentifier];
      [v22 processPaymentTransaction:v21 forTransactionSourceIdentifier:v23];

      if (![v21 transactionStatus]) {
        [*(id *)(a1 + 56) _enableCriticalPushReliabilityForTransaction:v21];
      }
    }
    id v24 = [v21 authenticationContext];
    objc_msgSend(v24, "setAuthenticationFailure:", objc_msgSend(*(id *)(a1 + 40), "authenticationFailure"));

    id v25 = [*(id *)(a1 + 40) signingCertificate];
    if (v25)
    {
      uint64_t v26 = *(void *)(a1 + 56);
      id v27 = *(NSObject **)(v26 + 112);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      void v29[2] = sub_1003B2120;
      v29[3] = &unk_10072E238;
      void v29[4] = v26;
      id v30 = *(id *)(a1 + 96);
      id v31 = v25;
      dispatch_async(v27, v29);
    }
    uint64_t v28 = *(void *)(a1 + 104);
    if (v28) {
      (*(void (**)(uint64_t, void *, void))(v28 + 16))(v28, v21, 0);
    }
  }
}

void sub_1003B1FB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80) && !*(void *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(NSObject **)(v3 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003B2104;
    block[3] = &unk_100731F38;
    void block[4] = v3;
    id v7 = *(id *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    id v9 = *(id *)(a1 + 64);
    id v10 = *(id *)(a1 + 72);
    dispatch_async(v4, block);
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2)
    {
      id v5 = +[NSError errorWithDomain:PKAuxiliaryCapabilityErrorDomain code:2 userInfo:0];
      (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0, v5);
    }
  }
}

id sub_1003B2104(uint64_t a1)
{
  return [*(id *)(a1 + 32) _submitAuthenticationResult:*(void *)(a1 + 40) forTransaction:*(void *)(a1 + 48) pass:*(void *)(a1 + 56) retryForInvalidCertificate:0 sessionExchangeToken:0 completion:*(void *)(a1 + 64)];
}

id sub_1003B2120(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _configureSigningCertificateForPass:*(void *)(a1 + 40) withSigningCertificate:*(void *)(a1 + 48)];
}

void sub_1003B2570(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v8)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v18 = v11;
      __int16 v19 = 2112;
      id v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Signing certificate configuration for pass %@ failed to acquire extension context with error: %@", buf, 0x16u);
    }

    if (v9) {
      v9[2](v9);
    }
  }
  else
  {
    id v12 = objc_alloc_init((Class)PKBarcodeEventConfigurationRequest);
    id v13 = [*(id *)(a1 + 40) deviceAccountIdentifier];
    [v12 setDeviceAccountIdentifier:v13];

    [v12 setConfigurationDataType:2];
    [v12 setConfigurationData:*(void *)(a1 + 48)];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1003B2744;
    void v14[3] = &unk_10072FDC8;
    id v15 = *(id *)(a1 + 32);
    uint64_t v16 = v9;
    [v7 handleConfigurationRequest:v12 completion:v14];
  }
}

uint64_t sub_1003B2744(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Signing certificate configuration for pass %@ completed", (uint8_t *)&v5, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003B30B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003B320C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003B335C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003B34AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003B35FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003B374C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003B3954(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1003B3AF0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(v3 + 16);
      v4();
    }
  }
  else if (v3)
  {
    id v5 = +[NSError errorWithDomain:PKPassKitErrorDomain code:-1 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

uint64_t sub_1003B3CF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1003B46D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKBeacon);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003B48AC(id a1, PKBeacon *a2, id a3)
{
}

void sub_1003B48B4(id a1, PKBeacon *a2, id a3)
{
}

void sub_1003B48BC(id a1, PKBeacon *a2, id a3)
{
}

void sub_1003B48C4(id a1, PKBeacon *a2, id a3)
{
}

void sub_1003B48CC(id a1, PKBeacon *a2, id a3)
{
}

void sub_1003B56FC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003B597C(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_1003B5984(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_1003B598C(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_1003B5994(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
}

void sub_1003B599C(id a1, PKAccountPaymentFundingDetailsBankAccount *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountPaymentFundingDetailsBankAccount setStatus:](v4, "setStatus:", [a3 integerValue]);
}

NSString *__cdecl sub_1003B6C58(id a1, PKPhysicalCard *a2)
{
  return (NSString *)[(PKPhysicalCard *)a2 identifier];
}

void sub_1003B7990(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003B7B44(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v14 = objc_alloc_init((Class)PKPhysicalCard);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v14 withProperties:v7 values:a4];

  id v8 = [*(id *)(a1 + 40) database];
  id v9 = +[PhysicalCardOrderActivityEvent physicalCardOrderActivityEventsForPhysicalCardPID:a2 inDatabase:v8];
  [v14 setOrderActivity:v9];

  id v10 = [v14 identifier];
  uint64_t v11 = [*(id *)(a1 + 40) database];
  id v12 = +[AccountPhysicalCardShippingUpdate physicalCardShippingUpdatesForPhysicalCardWithIdentifier:v10 inDatabase:v11];
  [v14 setShippingActivity:v12];

  id v13 = v14;
  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 48), "addObject:");
    id v13 = v14;
  }
}

void sub_1003B7DE0(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_1003B7DE8(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_1003B7DF0(id a1, PKPhysicalCard *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPhysicalCard setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1003B7E48(id a1, PKPhysicalCard *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPhysicalCard *)v3 setFrontFaceImageURL:v4];
}

void sub_1003B7EA8(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_1003B7EB0(id a1, PKPhysicalCard *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPhysicalCard *)v3 setLastUpdated:v4];
}

void sub_1003B7F10(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_1003B7F18(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_1003B7F20(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_1003B7F28(id a1, PKPhysicalCard *a2, id a3)
{
}

void sub_1003B7F30(id a1, PKPhysicalCard *a2, id a3)
{
  id v4 = a2;
  -[PKPhysicalCard setExpirationMonth:](v4, "setExpirationMonth:", [a3 integerValue]);
}

void sub_1003B7F88(id a1, PKPhysicalCard *a2, id a3)
{
  id v4 = a2;
  -[PKPhysicalCard setExpirationYear:](v4, "setExpirationYear:", [a3 integerValue]);
}

void sub_1003B86D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003B8874(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKPhysicalCardOrderActivityEvent);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1003B89A0(id a1, PKPhysicalCardOrderActivityEvent *a2, id a3)
{
  id v4 = a2;
  -[PKPhysicalCardOrderActivityEvent setActivity:](v4, "setActivity:", [a3 integerValue]);
}

void sub_1003B89F8(id a1, PKPhysicalCardOrderActivityEvent *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPhysicalCardOrderActivityEvent *)v3 setDate:v4];
}

void sub_1003B8FB8(uint64_t a1, uint64_t a2)
{
  id v9 = [(SQLiteEntity *)[PaymentOfferCurrencyAmount alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = [(SQLiteEntity *)v9 valueForProperty:@"b"];
  id v4 = PKCurrencyStorageNumberToCurrencyDecimal();

  uint64_t v5 = [(SQLiteEntity *)v9 valueForProperty:@"c"];
  id v6 = (void *)v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    id v8 = 0;
  }
  else
  {
    id v8 = PKCurrencyAmountMake();
  }
  [*(id *)(a1 + 40) safelyAddObject:v8];
}

BOOL PKIsStringRoomNumber(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = a1;
  uint64_t v2 = +[NSCharacterSet decimalDigitCharacterSet];
  id v3 = [v1 rangeOfCharacterFromSet:v2];

  BOOL v4 = v3 != (id)0x7FFFFFFFFFFFFFFFLL;
  return v4;
}

id sub_1003BA104(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateFieldDetectionState];
}

void sub_1003BA4A0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    id v5 = [*(id *)(*(void *)(a1 + 32) + 16) supportedTerminalForTCIs:*(void *)(a1 + 40) brandCode:a3];
    [*(id *)(a1 + 32) _requestNativePairingWithSupportedTerminal:v5];
  }
  else
  {
    BOOL v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Terminal is not requesting to pair", buf, 2u);
    }
  }
}

void sub_1003BA790(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to present native pairing card for terminal (%@)", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1003BADB8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003BAFD0(id a1, PKTransactionReceipt *a2, id a3)
{
}

void sub_1003BAFD8(id a1, PKTransactionReceipt *a2, id a3)
{
}

void sub_1003BAFE0(id a1, PKTransactionReceipt *a2, id a3)
{
}

void sub_1003BB538(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountSummary *)v3 setCurrentBalance:v4];
}

void sub_1003BB59C(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountSummary *)v3 setAvailableBalance:v4];
}

void sub_1003BB600(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountSummary *)v3 setPendingBalance:v4];
}

void sub_1003BB664(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountSummary *)v3 setInterestYTD:v4];
}

void sub_1003BB6C8(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountSummary *)v3 setInterestTotal:v4];
}

void sub_1003BB72C(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v4 = a2;
  [a3 integerValue];
  PKPercentageStorageIntegerToDecimal();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKSavingsAccountSummary *)v4 setAPY:v5];
}

void sub_1003BB794(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountSummary setHasWithdrawalLimit:](v4, "setHasWithdrawalLimit:", [a3 BOOLValue]);
}

void sub_1003BB7EC(id a1, PKSavingsAccountSummary *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountSummary setWithdrawalsRemaining:](v4, "setWithdrawalsRemaining:", [a3 unsignedIntegerValue]);
}

void sub_1003BB93C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003BC420(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003BC664(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDAccountWebServiceEndpointMetadata *)v3 setLastUpdated:v4];
}

void sub_1003BC6C4(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDAccountWebServiceEndpointMetadata *)v3 setLocalLastUpdated:v4];
}

void sub_1003BC724(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  id v4 = a2;
  -[PDAccountWebServiceEndpointMetadata setIsDirty:](v4, "setIsDirty:", [a3 BOOLValue]);
}

void sub_1003BC77C(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
  id v4 = a2;
  -[PDAccountWebServiceEndpointMetadata setEndpoint:](v4, "setEndpoint:", [a3 integerValue]);
}

void sub_1003BC7D4(id a1, PDAccountWebServiceEndpointMetadata *a2, id a3)
{
}

uint64_t sub_1003BCC0C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v4 = v3;
  if (v3)
  {
    id v6 = v3;
    id v3 = [*(id *)(a1 + 40) addObject:v3];
    id v4 = v6;
  }
  return _objc_release_x1(v3, v4);
}

void sub_1003BD61C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKTransactionReleasedDataElement);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1003BD864(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
}

void sub_1003BD86C(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
}

void sub_1003BD874(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
  id v4 = a2;
  -[PKTransactionReleasedDataElement setRetentionIntent:](v4, "setRetentionIntent:", [a3 unsignedIntegerValue]);
}

void sub_1003BD8CC(id a1, PKTransactionReleasedDataElement *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    -[PKTransactionReleasedDataElement setRetentionPeriod:](v4, "setRetentionPeriod:", [a3 unsignedIntegerValue]);
  }
}

void sub_1003BDC80(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 24);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
    if ([*(id *)(a1 + 48) count])
    {
      [*(id *)(a1 + 48) enumerateObjectsUsingBlock:&stru_10074E7F0];
      [*(id *)(a1 + 48) removeAllObjects];
      id v3 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;

      sub_1003BF308(a1);
    }
    os_unfair_lock_unlock(v2);
  }
}

void sub_1003BE00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003BE050(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    id v4 = WeakRetained;
    int v5 = 134218240;
    id v6 = WeakRetained;
    __int16 v7 = 1024;
    unsigned int v8 = [v4 processIdentifier];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDAssertionCoordinator (%p:%d): connection invalidated", (uint8_t *)&v5, 0x12u);
  }
  sub_1003BE134(*(void *)(a1 + 32), *(void **)(a1 + 40));
}

void sub_1003BE134(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    [v3 setIsForegroundApplication:0];
    [v3 cancelPendingAssertionRequests];
    [v3 clearConnectionReference];
    sub_1003BF1A0(a1, v3);
  }
}

id sub_1003BE1A4(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v4 = WeakRetained;
    int v6 = 134218240;
    id v7 = WeakRetained;
    __int16 v8 = 1024;
    unsigned int v9 = [v4 processIdentifier];
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PDAssertionCoordinator (%p:%d): connection interrupted", (uint8_t *)&v6, 0x12u);
  }
  return +[NSException raise:NSInternalInconsistencyException format:@"Unexpected interruption on PDAssertionCoordinator connection"];
}

id sub_1003BE2A0(void *a1)
{
  id v1 = [a1 currentState];
  uint64_t v2 = v1;
  if (v1 && [v1 taskState] == 4)
  {
    id v3 = [v2 endowmentNamespaces];
    id v4 = [v3 containsObject:FBSSceneVisibilityEndowmentNamespace];
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_1003BE31C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 24);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    sub_1003BF20C(a1, v4);

    os_unfair_lock_unlock(v3);
  }
}

void sub_1003BE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003BE4A8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ([v6 interestedInAssertionOfType:*(void *)(a1 + 40)])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v6 allowAcquisitionOfAssertionOfType:*(void *)(a1 + 40)];
    *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) ^ 1;
  }
}

void sub_1003BE64C(uint64_t a1)
{
  sub_1003BE714(*(void **)(a1 + 32));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) allObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003BE8D0;
  v5[3] = &unk_10074E788;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateObjectsUsingBlock:v5];
}

void sub_1003BE714(void *a1)
{
  if (a1)
  {
    if (([a1 hasAssertionsOfType:0] & 1) != 0
      || [a1 hasAssertionsOfType:5])
    {
      if (a1[10]) {
        return;
      }
      uint64_t v2 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v12 = 0;
      id v3 = [v2 requestAssertion:6 error:&v12];
      id v4 = v12;

      int v5 = PKLogFacilityTypeGetObject();
      id v6 = v5;
      if (v3)
      {
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
          sub_1005178A8((uint64_t)v3, v6);
        }

        id v7 = v3;
        id v6 = a1[10];
        a1[10] = v7;
      }
      else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v14 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDAssertionManager: failed to acquire transitive field detect suppression assertion - %@.", buf, 0xCu);
      }
    }
    else
    {
      __int16 v8 = (void *)a1[10];
      if (!v8) {
        return;
      }
      id v4 = v8;
      unsigned int v9 = (void *)a1[10];
      a1[10] = 0;

      id v10 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
        sub_100517920((uint64_t)v4, v10);
      }

      id v3 = [(id)PKGetClassNFHardwareManager() sharedHardwareManagerWithNoUI];
      id v11 = [v3 releaseAssertion:v4];
    }
  }
}

void sub_1003BE8D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "interestedInAssertionOfType:", objc_msgSend(*(id *)(a1 + 32), "type"))
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    [v3 assertionManager:*(void *)(a1 + 40) didAcquireAssertion:*(void *)(a1 + 32)];
  }
}

void sub_1003BEA70(uint64_t a1)
{
  sub_1003BE714(*(void **)(a1 + 32));
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 32) allObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003BEB38;
  v5[3] = &unk_10074E788;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateObjectsUsingBlock:v5];
}

void sub_1003BEB38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "interestedInAssertionOfType:", objc_msgSend(*(id *)(a1 + 32), "type"))
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    [v3 assertionManager:*(void *)(a1 + 40) didInvalidateAssertion:*(void *)(a1 + 32)];
  }
}

void sub_1003BEBBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v9 = v3;
  if (!v4)
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v3 = v9;
    uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  __int16 v8 = [v3 assertionsOfType:*(void *)(a1 + 40)];
  [v4 addObjectsFromArray:v8];
}

void sub_1003BF1A0(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    id v3 = (os_unfair_lock_s *)(a1 + 24);
    id v4 = a2;
    os_unfair_lock_lock(v3);
    sub_1003BF4DC(a1, v4);

    os_unfair_lock_unlock(v3);
  }
}

void sub_1003BF20C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3 && [*(id *)(a1 + 48) indexOfObjectIdenticalTo:v3] == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Adding assertion coordinator: %@.", (uint8_t *)&v6, 0xCu);
    }

    [*(id *)(a1 + 48) addObject:v4];
    [v4 setDelegate:a1];
    sub_1003BF308(a1);
  }
}

void sub_1003BF308(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableSet);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = *(id *)(a1 + 48);
    id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          __int16 v8 = +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", [*(id *)(*((void *)&v13 + 1) + 8 * (void)v7) remoteProcessIdentifier]);
          if (v8) {
            [v2 addObject:v8];
          }

          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }

    if (![v2 count])
    {

      id v2 = 0;
    }
    if ((PKEqualObjects() & 1) == 0)
    {
      id v9 = [v2 copy];
      id v10 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v9;

      id v11 = *(void **)(a1 + 64);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      void v12[2] = sub_1003BF5D8;
      void v12[3] = &unk_10074E840;
      void v12[4] = a1;
      [v11 updateConfiguration:v12];
    }
  }
}

uint64_t sub_1003BF4DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v7 = v3;
      id v3 = [*(id *)(a1 + 48) indexOfObjectIdenticalTo:v3];
      id v4 = v7;
      if (v3 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        id v5 = v3;
        [v7 invalidateAllAssertions];
        [v7 setDelegate:0];
        [*(id *)(a1 + 48) removeObjectAtIndex:v5];
        if (*(id *)(a1 + 40) == v7)
        {
          *(void *)(a1 + 40) = 0;
        }
        id v3 = (id)sub_1003BF308(a1);
        id v4 = v7;
      }
    }
  }
  return _objc_release_x1(v3, v4);
}

void sub_1003BF590(id a1, PDAssertionCoordinator *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  [(PDAssertionCoordinator *)v4 invalidateAllAssertions];
  [(PDAssertionCoordinator *)v4 setDelegate:0];
}

void sub_1003BF5D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 56))
  {
    id v4 = objc_alloc_init((Class)NSMutableArray);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = *(id *)(*(void *)(a1 + 32) + 56);
    id v6 = [v5 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v17;
      do
      {
        __int16 v8 = 0;
        do
        {
          if (*(void *)v17 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = +[RBSProcessPredicate predicateMatchingIdentifier:*(void *)(*((void *)&v16 + 1) + 8 * (void)v8)];
          if (v9) {
            [v4 addObject:v9];
          }

          __int16 v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v5 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }
      while (v6);
    }
  }
  else
  {
    id v4 = 0;
  }
  [v3 setPredicates:v4];
  if (v3)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(void *)(v10 + 56))
    {
      if (!*(unsigned char *)(v10 + 72))
      {
        *(unsigned char *)(v10 + 72) = 1;
        id v11 = objc_alloc_init((Class)RBSProcessStateDescriptor);
        [v11 setValues:1];
        uint64_t v20 = FBSSceneVisibilityEndowmentNamespace;
        id v12 = +[NSArray arrayWithObjects:&v20 count:1];
        [v11 setEndowmentNamespaces:v12];

        [v3 setStateDescriptor:v11];
        [v3 setServiceClass:17];
        objc_initWeak(&location, *(id *)(a1 + 32));
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        void v13[2] = sub_1003BF870;
        void v13[3] = &unk_10074E818;
        objc_copyWeak(&v14, &location);
        [v3 setUpdateHandler:v13];
        objc_destroyWeak(&v14);
        objc_destroyWeak(&location);
      }
    }
  }
}

void sub_1003BF84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003BF870(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = (id *)(a1 + 32);
  id v6 = a4;
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained(v5);
  sub_1003BF8E8((uint64_t)WeakRetained, v7, v6);
}

void sub_1003BF8E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
    id v7 = [*(id *)(a1 + 48) copy];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    __int16 v8 = [v6 state];
    id v9 = v8;
    id v19 = v6;
    if (v8) {
      BOOL v10 = [v8 taskState] == 1;
    }
    else {
      BOOL v10 = 1;
    }
    unsigned int v11 = sub_1003BE2A0(v5);
    id v20 = v5;
    unsigned int v12 = [v5 pid];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v13 = v7;
    id v14 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v22;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v13);
          }
          long long v18 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          if (objc_msgSend(v18, "remoteProcessIdentifier", v19) == v12)
          {
            if (v10)
            {
              sub_1003BE134(a1, v18);
            }
            else if (v11)
            {
              [v18 setIsForegroundApplication:1];
              [v18 processPendingAssertionRequests];
            }
            else if ([v18 isForegroundApplication])
            {
              [v18 setIsForegroundApplication:0];
              [v18 cancelPendingAssertionRequests];
              [v18 invalidateAssertionsForBackgroundApplicationState];
            }
          }
        }
        id v15 = [v13 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }
      while (v15);
    }

    id v6 = v19;
    id v5 = v20;
  }
}

void sub_1003C03E0(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[CloudStoreZoneShareParticipant alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  if (v3)
  {
    id v4 = *(void **)(a1 + 40);
    id v6 = v3;
    id v5 = [(CloudStoreZoneShareParticipant *)v3 cloudStoreZoneShareParticipant];
    [v4 addObject:v5];

    id v3 = v6;
  }
}

void sub_1003C0758(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003C094C(id a1, PKCloudStoreZoneShareParticipant *a2, id a3)
{
}

void sub_1003C0954(id a1, PKCloudStoreZoneShareParticipant *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v4 error:0];

  [(PKCloudStoreZoneShareParticipant *)v5 setLookupInfo:v6];
}

void sub_1003C09F0(id a1, PKCloudStoreZoneShareParticipant *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  id v7 = +[NSSet setWithObject:objc_opt_class()];
  id v6 = +[NSKeyedUnarchiver _strictlyUnarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKCloudStoreZoneShareParticipant *)v5 setInvitationToken:v6];
}

void sub_1003C0C38(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountPhysicalCardStatusUpdate alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(AccountPhysicalCardStatusUpdate *)v5 physicalCardStatusUpdate];
  [v3 addObject:v4];
}

void sub_1003C0EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
  id v4 = [*(id *)(a1 + 48) persistentID];
  id v5 = [*(id *)(a1 + 48) database];
  id v8 = +[PhysicalCard physicalCardsForPhysicalCardStatusUpdatePID:v4 inDatabase:v5];

  id v6 = *(void **)(a1 + 40);
  id v7 = [v8 allObjects];
  [v6 setUpdatedPhysicalCards:v7];
}

void sub_1003C11C4(id a1, PKAccountPhysicalCardStatusUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPhysicalCardStatusUpdate setReason:](v4, "setReason:", [a3 integerValue]);
}

NSString *__cdecl sub_1003C1560(id a1, PKPass *a2)
{
  return (NSString *)[(PKPass *)a2 uniqueID];
}

void sub_1003C24C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003C24E0(id a1, PDWorldRegionAggregatorObserver *a2)
{
  id v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDWorldRegionAggregatorObserver *)v2 worldRegionProcessingCompletedWithSuccess:1];
  }
}

void sub_1003C2534(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  char v11 = 1;
  id v2 = objc_alloc_init((Class)PKAsyncUnaryOperationComposer);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003C273C;
  v9[3] = &unk_10072E5C0;
  void v9[4] = *(void *)(a1 + 32);
  [v2 addOperation:v9];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003C2860;
  v8[3] = &unk_10072E5C0;
  void v8[4] = *(void *)(a1 + 32);
  [v2 addOperation:v8];
  if (*(unsigned char *)(a1 + 48) || *(unsigned char *)(a1 + 49))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003C2984;
    v7[3] = &unk_100730D50;
    void v7[4] = *(void *)(a1 + 32);
    void v7[5] = v10;
    [v2 addOperation:v7];
  }
  id v3 = +[NSNull null];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003C2AC4;
  v6[3] = &unk_10074E9B0;
  uint64_t v4 = *(void *)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  void v6[5] = v10;
  v6[6] = v4;
  id v5 = [v2 evaluateWithInput:v3 completion:v6];

  _Block_object_dispose(v10, 8);
}

void sub_1003C2724(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1003C273C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Aggregation operation cleaning up regions", buf, 2u);
  }

  id v9 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1003C2848;
  void v12[3] = &unk_10072E598;
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  [v9 _cleanupRegionsWithCompletion:v12];
}

uint64_t sub_1003C2848(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1003C2860(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Aggregation operation processing transactions", buf, 2u);
  }

  id v9 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1003C296C;
  void v12[3] = &unk_10072E598;
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  [v9 _processRemainingTransactionsWithCompletion:v12];
}

uint64_t sub_1003C296C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1003C2984(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Aggregation operation processing transactions localized content", buf, 2u);
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1003C2A94;
  void v13[3] = &unk_100730708;
  id v10 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v7;
  uint64_t v16 = v9;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v10 _processMissingLocalizedContentWithCompletion:v13];
}

uint64_t sub_1003C2A94(void *a1, char a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8);
  if (*(unsigned char *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v2 + 24) = v3;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], 0);
}

void sub_1003C2AC4(void *a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregation operation completed", buf, 2u);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 16));
  *(unsigned char *)(a1[4] + 20) = 0;
  *(unsigned char *)(a1[4] + 22) = 0;
  *(unsigned char *)(a1[4] + 23) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 16));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003C2BCC;
  v6[3] = &unk_10074E988;
  char v3 = (void *)a1[4];
  void v6[4] = a1[5];
  [v3 _accessObserversWithHandler:v6];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;
}

void sub_1003C2BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 worldRegionProcessingCompletedWithSuccess:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
  }
}

void sub_1003C2FA4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1003C2FD0(id a1, PDWorldRegionAggregatorObserver *a2)
{
  uint64_t v2 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDWorldRegionAggregatorObserver *)v2 worldRegionProcessingStarted];
  }
}

void sub_1003C3020(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1003C30F8;
  void v13[3] = &unk_100734130;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 _processMissingLocalizedContent:v9 completion:v13];
}

void *sub_1003C30F8(void *result, uint64_t a2, uint64_t a3)
{
  if (a3 || a2) {
    *(unsigned char *)(*(void *)(result[6] + 8) + 24) = 0;
  }
  uint64_t v3 = result[5];
  if (v3) {
    return (void *)(*(uint64_t (**)(void, void, uint64_t))(v3 + 16))(result[5], result[4], a2);
  }
  return result;
}

uint64_t sub_1003C3134(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  }
  return result;
}

void sub_1003C3624(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(unsigned __int8 *)(v7 + 21);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 16));
  if (v8) {
    PDDefaultQueue();
  }
  else {
  uint64_t v9 = PDUtilityQueue();
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1003C3758;
  void v14[3] = &unk_100738B18;
  id v15 = v5;
  id v16 = v6;
  id v10 = *(id *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v17 = v10;
  uint64_t v18 = v11;
  char v20 = v8;
  id v19 = *(id *)(a1 + 48);
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v9, v14);
}

void sub_1003C3758(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) firstObject];
  uint64_t v3 = *(void **)(a1 + 40);
  if (!v3)
  {
    if (v2)
    {
      int v8 = *(void **)(a1 + 48);
      uint64_t v9 = +[NSLocale currentLocale];
      id v10 = [v9 localeIdentifier];
      [v8 setLocaleIdentifier:v10];

      uint64_t v11 = *(void **)(a1 + 48);
      id v12 = [v2 name];
      [v11 setLocalizedName:v12];

      [*(id *)(*(void *)(a1 + 56) + 8) updateSingleRegion:*(void *)(a1 + 48)];
      id v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v39 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Localized region %@", buf, 0xCu);
      }

      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_1003C3B7C;
      v36[3] = &unk_10074EA20;
      id v15 = *(void **)(a1 + 56);
      id v37 = *(id *)(a1 + 48);
      [v15 _accessObserversWithHandler:v36];
    }
    goto LABEL_22;
  }
  uint64_t v4 = [v3 domain];
  id v5 = kCLErrorDomain;
  if (v4 == v5)
  {
  }
  else
  {
    id v6 = v5;
    if (v4) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {

LABEL_19:
      long long v22 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v24 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v39 = v23;
        __int16 v40 = 2112;
        uint64_t v41 = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Fatal error %@ getting localized content for region %@", buf, 0x16u);
      }

      id v25 = *(void **)(a1 + 48);
      uint64_t v26 = +[NSLocale currentLocale];
      id v27 = [v26 localeIdentifier];
      [v25 setLocaleIdentifier:v27];

      [*(id *)(a1 + 48) setLocalizedName:0];
      [*(id *)(*(void *)(a1 + 56) + 8) updateSingleRegion:*(void *)(a1 + 48)];
LABEL_22:
      char v21 = 0;
      id v17 = 0;
      goto LABEL_23;
    }
    unsigned int v16 = [(NSString *)v4 isEqualToString:v5];

    if (!v16) {
      goto LABEL_19;
    }
  }
  if ([*(id *)(a1 + 40) code] != (id)2) {
    goto LABEL_19;
  }
  id v17 = *(id *)(a1 + 40);
  uint64_t v18 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v39 = v19;
    __int16 v40 = 2112;
    uint64_t v41 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Error %@ getting localized content for region %@", buf, 0x16u);
  }

  char v21 = 1;
LABEL_23:
  dispatch_time_t v28 = dispatch_time(0, 300000000);
  if (*(unsigned char *)(a1 + 72)) {
    PDDefaultQueue();
  }
  else {
  __int16 v29 = PDUtilityQueue();
  }
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1003C3BDC;
  v32[3] = &unk_100736830;
  id v30 = *(id *)(a1 + 64);
  char v35 = v21;
  id v33 = v17;
  id v34 = v30;
  id v31 = v17;
  dispatch_after(v28, v29, v32);
}

void sub_1003C3B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 worldRegionUpdated:*(void *)(a1 + 32)];
  }
}

uint64_t sub_1003C3BDC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
  }
  return result;
}

void sub_1003C3C00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 worldRegionUpdated:*(void *)(a1 + 32)];
  }
}

void sub_1003C3D38(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) transactionsMissingWorldRegionWithLimit:1 onlyEligibleForProcessing:1];
  id v3 = [v2 anyObject];

  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
    *(unsigned char *)(*(void *)(a1 + 32) + 22) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16));
    uint64_t v4 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003C3E48;
    v6[3] = &unk_10073E740;
    void v6[4] = v4;
    id v7 = *(id *)(a1 + 40);
    [v4 _processTransaction:v3 completion:v6];
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }
}

uint64_t (**sub_1003C3E48(uint64_t a1, int a2))(void)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return (uint64_t (**)(void))[v3 _processRemainingTransactionsWithCompletion:v4];
  }
  else
  {
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Aborted transaction/region matching", v7, 2u);
    }

    uint64_t result = *(uint64_t (***)(void))(a1 + 40);
    if (result) {
      return (uint64_t (**)(void))result[2]();
    }
  }
  return result;
}

void sub_1003C4604(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = v12;
  if (!v12)
  {
    uint64_t v18 = [*(id *)(*(void *)(a1 + 32) + 8) regionsForTransaction:v9 localeIdentifier:0];
    id v19 = [v18 count];

    if (v19)
    {
LABEL_16:
      BOOL v26 = 1;
      goto LABEL_17;
    }
    uint64_t v20 = [*(id *)(a1 + 32) _worldRegionFromPlacemark:v10 orAddress:v11];
    char v21 = (void *)v20;
    if (!v9 || !v20)
    {
      if (v10) {
        uint64_t v30 = 2;
      }
      else {
        uint64_t v30 = 1;
      }
      id v31 = +[NSError errorWithDomain:@"PDWorldAggregatorErrorDomain" code:v30 userInfo:0];
      id v32 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = [v9 identifier];
        *(_DWORD *)long long buf = 138413058;
        id v58 = v33;
        __int16 v59 = 2112;
        id v60 = v10;
        __int16 v61 = 2112;
        id v62 = v11;
        __int16 v63 = 2112;
        id v64 = v31;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Failed to create region for %@, placemark: %@, address: %@, error %@", buf, 0x2Au);
      }
      [*(id *)(*(void *)(a1 + 32) + 8) failedToAssociateTransactionToRegion:v9 error:v31];
      goto LABEL_45;
    }
    long long v22 = PKLogFacilityTypeGetObject();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v23)
      {
        uint64_t v24 = objc_msgSend(v9, "identifier", context);
        *(_DWORD *)long long buf = 138412802;
        id v58 = v10;
        __int16 v59 = 2112;
        id v60 = v24;
        __int16 v61 = 2112;
        id v62 = v21;
        id v25 = "Found placemark %@ for %@.\nRegion: %@";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v25, buf, 0x20u);
      }
    }
    else if (v23)
    {
      uint64_t v24 = objc_msgSend(v9, "identifier", context);
      *(_DWORD *)long long buf = 138412802;
      id v58 = v11;
      __int16 v59 = 2112;
      id v60 = v24;
      __int16 v61 = 2112;
      id v62 = v21;
      id v25 = "Found address %@ for %@.\nRegion: %@";
      goto LABEL_31;
    }
    id v50 = v11;

    [*(id *)(a1 + 32) _associateTransaction:v9 toRegion:v21];
    id v34 = *(void **)(*(void *)(a1 + 32) + 8);
    char v35 = [v9 merchant];
    id v36 = [v35 mapsMerchant];
    id v37 = [v34 transactionsWithoutRegionMatchingMapsMerchant:v36 limit:50];

    if ([v37 count])
    {
      id v38 = PKLogFacilityTypeGetObject();
      do
      {
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          id v39 = [v37 count];
          *(_DWORD *)long long buf = 134217984;
          id v58 = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Matched %ld transactions for same POI", buf, 0xCu);
        }

        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        id v40 = v37;
        id v41 = [v40 countByEnumeratingWithState:&v53 objects:v65 count:16];
        if (v41)
        {
          id v42 = v41;
          uint64_t v43 = *(void *)v54;
          do
          {
            for (i = 0; i != v42; i = (char *)i + 1)
            {
              if (*(void *)v54 != v43) {
                objc_enumerationMutation(v40);
              }
              objc_msgSend(*(id *)(a1 + 32), "_associateTransaction:toRegion:", *(void *)(*((void *)&v53 + 1) + 8 * i), v21, context);
            }
            id v42 = [v40 countByEnumeratingWithState:&v53 objects:v65 count:16];
          }
          while (v42);
        }

        uint64_t v45 = *(void **)(*(void *)(a1 + 32) + 8);
        id v46 = [v9 merchant];
        id v47 = [v46 mapsMerchant];
        id v37 = [v45 transactionsWithoutRegionMatchingMapsMerchant:v47 limit:50];
      }
      while ([v37 count]);
    }

    uint64_t v48 = *(void **)(a1 + 32);
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472;
    v51[2] = sub_1003C4BFC;
    v51[3] = &unk_10074EA20;
    id v52 = v21;
    [v48 _accessObserversWithHandler:v51];
    id v31 = v52;
    id v11 = v50;
LABEL_45:

    BOOL v26 = 1;
    goto LABEL_20;
  }
  uint64_t v14 = [v12 domain];
  id v15 = kCLErrorDomain;
  if (v14 == v15)
  {

    goto LABEL_14;
  }
  unsigned int v16 = v15;
  if (!v14 || !v15)
  {

    goto LABEL_16;
  }
  unsigned int v17 = [(NSString *)v14 isEqualToString:v15];

  if (!v17) {
    goto LABEL_16;
  }
LABEL_14:
  BOOL v26 = [v13 code] != (id)2;
LABEL_17:
  id v27 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    dispatch_time_t v28 = [v9 identifier];
    *(_DWORD *)long long buf = 138412546;
    id v58 = v28;
    __int16 v59 = 2112;
    id v60 = v13;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Failed to create region for %@, error %@", buf, 0x16u);
  }
  [*(id *)(*(void *)(a1 + 32) + 8) failedToAssociateTransactionToRegion:v9 error:v13];
LABEL_20:
  uint64_t v29 = *(void *)(a1 + 40);
  if (v29) {
    (*(void (**)(uint64_t, BOOL))(v29 + 16))(v29, v26);
  }
}

void sub_1003C4BFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 worldRegionUpdated:*(void *)(a1 + 32)];
  }
}

void sub_1003C4C5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = [*(id *)(a1 + 32) identifier];
      int v13 = 138412546;
      id v14 = v6;
      __int16 v15 = 2112;
      unsigned int v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error reverse geocoding: %@ for %@", (uint8_t *)&v13, 0x16u);
    }
  }
  uint64_t v11 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v11 + 8);
  id v12 = [v5 firstObject];
  (*(void (**)(uint64_t, uint64_t, void *, void, id))(v10 + 16))(v10, v9, v12, 0, v6);
}

void sub_1003C4D8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v13 = 138412546;
      id v14 = v6;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error finding placemark: %@ for %@", (uint8_t *)&v13, 0x16u);
    }
  }
  uint64_t v11 = a1 + 40;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v11 + 8);
  id v12 = [v5 firstObject];
  (*(void (**)(uint64_t, uint64_t, void *, void, id))(v10 + 16))(v10, v9, v12, 0, v6);
}

void sub_1003C4EAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v13 = 138412546;
      id v14 = v6;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Error finding placemark: %@ for %@", (uint8_t *)&v13, 0x16u);
    }
  }
  uint64_t v11 = a1 + 40;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(v11 + 8);
  id v12 = [v5 firstObject];
  (*(void (**)(uint64_t, uint64_t, void *, void, id))(v10 + 16))(v10, v9, v12, 0, v6);
}

void sub_1003C509C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 transaction:*(void *)(a1 + 32) associatedToWorldRegion:*(void *)(a1 + 40)];
  }
}

void sub_1003C5628(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = (char *)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

id sub_1003C5BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1003C5C80(id a1, PKValueAddedMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  objc_msgSend(a3, "pk_decodeHexadecimal");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKValueAddedMerchant *)v4 setIdentifier:v5];
}

void sub_1003C5CE4(id a1, PKValueAddedMerchant *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKValueAddedMerchant setTimesPresented:](v4, "setTimesPresented:", [a3 integerValue]);
}

void sub_1003C604C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) _registerForPushNotifications];
  }
  else
  {
    id v6 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1003C613C;
    v11[3] = &unk_10074EAF8;
    char v14 = *(unsigned char *)(a1 + 56);
    id v7 = v6;
    uint64_t v8 = *(void *)(a1 + 32);
    id v12 = v7;
    uint64_t v13 = v8;
    [v7 canInitializeContainerWithCompletion:v11];
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    long long v10 = CKXPCSuitableError();
    (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, a2, v10);
  }
}

id *sub_1003C613C(id *result, int a2)
{
  if (a2)
  {
    id v2 = result;
    if (*((unsigned char *)result + 48))
    {
      id v3 = result[4];
      id v4 = [result[5] applePayContainer];

      if (v3 == v4) {
        [v2[5] _scheduleFirstCloudStoreContainerSetupBackgroundActivityIfNeccessary];
      }
    }
    id v5 = v2[5];
    return (id *)[v5 _unregisterForPushNotifications];
  }
  return result;
}

void sub_1003C62AC(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v4) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138543618;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    long long v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[PDCloudStoreNotificationCoordinator setPassContainer:] finished initialization with success: %{public}@ error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1003C649C(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v4) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138543618;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    long long v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[PDCloudStoreNotificationCoordinator setPassSyncContainer:] finished initialization with success: %{public}@ error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1003C6688(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v4) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138543618;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    long long v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[PDCloudStoreNotificationCoordinator setPassSyncContainer:] finished initialization with success: %{public}@ error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1003C68B4(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v4) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138543618;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    long long v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[PDCloudStoreNotificationCoordinator setApplePayContainer:] finished initialization with success: %{public}@ error: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1003C6B24(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
    id v4 = a2;
    CKXPCSuitableError();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, uint64_t, id))(v2 + 16))(v2, v4, v3, v5);
  }
}

void sub_1003C6E00(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    CFStringRef v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixPassutil;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1003C6EFC;
    v11[3] = &unk_100732DC0;
    id v12 = *(id *)(a1 + 48);
    [v6 updateCloudStoreWithLocalItemsWithConfigurations:v7 groupName:v8 groupNameSuffix:v9 qualityOfService:17 completion:v11];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v5);
    }
  }
}

void sub_1003C6EFC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
  }
}

void sub_1003C70CC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    CFStringRef v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionImplicit;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1003C71B8;
    void v10[3] = &unk_1007378B8;
    id v11 = *(id *)(a1 + 48);
    [v6 removeItems:v7 groupName:v8 groupNameSuffix:0 qualityOfService:17 completion:v10];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, id))(v9 + 16))(v9, v5);
    }
  }
}

void sub_1003C71B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    CKXPCSuitableError();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_1003C734C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    CFStringRef v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixPassutil;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1003C7450;
    void v12[3] = &unk_1007378B8;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    [v6 removeRecordWithRecordName:v7 zoneName:v10 groupName:v8 groupNameSuffix:v9 qualityOfService:17 completion:v12];
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11) {
      (*(void (**)(uint64_t, id))(v11 + 16))(v11, v5);
    }
  }
}

void sub_1003C7450(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    CKXPCSuitableError();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }
}

void sub_1003C75AC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  CFStringRef v6 = v5;
  if (a2)
  {
    id v8 = v5;
    [*(id *)(a1 + 32) allItemsOfItemType:*(void *)(a1 + 48) storeLocally:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (!v7) {
      goto LABEL_6;
    }
    id v8 = v6;
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  CFStringRef v6 = v8;
LABEL_6:
}

void sub_1003C7748(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  CFStringRef v6 = v5;
  if (a2)
  {
    id v8 = v5;
    [*(id *)(a1 + 32) applePayContainerItemsFromDate:*(void *)(a1 + 40) toDate:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (!v7) {
      goto LABEL_6;
    }
    id v8 = v6;
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  CFStringRef v6 = v8;
LABEL_6:
}

void sub_1003C7908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, a2, v4);
  }
}

void sub_1003C7A58(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    CFStringRef v6 = [PDCloudStoreRecordsRequest alloc];
    uint64_t v7 = [(PDCloudStoreRecordsRequest *)v6 initWithRequestType:0 storeChanges:0 returnRecords:1 qualityOfService:17 groupName:PKCloudStoreOperationGroupUserActionExplicit groupNameSuffix:PKCloudStoreOperationGroupSuffixPassutil];
    [(PDCloudStoreRecordsRequest *)v7 setUseLastChangeToken:1];
    [(PDCloudStoreRecordsRequest *)v7 setShouldSaveToken:1];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1003C7B7C;
    void v10[3] = &unk_1007343D8;
    id v8 = *(void **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    [v8 executeRecordsRequest:v7 completion:v10];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, void, void, id))(v9 + 16))(v9, 0, 0, v5);
    }
  }
}

void sub_1003C7B7C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = a2;
    id v9 = [v6 cloudStoreRecords];
    uint64_t v7 = [v6 deletedRecordsForAllDatabaseIdentifiers];

    id v8 = CKXPCSuitableError();

    (*(void (**)(uint64_t, id, void *, void *))(v3 + 16))(v3, v9, v7, v8);
  }
}

void sub_1003C7D4C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1003C7E30;
    v11[3] = &unk_100732C40;
    id v12 = *(id *)(a1 + 48);
    [v6 itemOfItemTypeFromAllZones:v8 recordName:v7 qualityOfService:v9 completion:v11];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v5);
    }
  }
}

void sub_1003C7E30(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
  }
}

void sub_1003C7FBC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003C8094;
    v9[3] = &unk_10074EC40;
    id v10 = *(id *)(a1 + 48);
    char v11 = 1;
    [v6 deleteZone:v7 completion:v9];
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v5);
    }
  }
}

void sub_1003C8094(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
    CKXPCSuitableError();
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
  }
}

void sub_1003C8208(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003C82E0;
    v9[3] = &unk_10074EC40;
    id v10 = *(id *)(a1 + 48);
    char v11 = 1;
    [v6 createZone:v7 completion:v9];
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v5);
    }
  }
}

void sub_1003C82E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
    CKXPCSuitableError();
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, v2, v3);
  }
}

void sub_1003C8468(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1003C854C;
    v11[3] = &unk_100741A90;
    uint64_t v9 = *(void *)(a1 + 56);
    id v12 = *(id *)(a1 + 48);
    [v6 removeAllItems:v9 inZoneName:v7 storeLocally:v8 completion:v11];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v5);
    }
  }
}

void sub_1003C854C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
  }
}

void sub_1003C86DC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003C87AC;
    v9[3] = &unk_100732C40;
    id v10 = *(id *)(a1 + 48);
    [v6 cloudStoreRecordArrayWithConfiguration:v7 completion:v9];
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0, v5);
    }
  }
}

void sub_1003C87AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
  }
}

void sub_1003C8948(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_1003C8A2C;
    v11[3] = &unk_10074EC90;
    id v12 = *(id *)(a1 + 48);
    [v6 itemOfItemType:v8 recordName:v7 qualityOfService:v9 completion:v11];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (v10) {
      (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v5);
    }
  }
}

void sub_1003C8A2C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
  }
}

id sub_1003C9228(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) callCompletionsWithResponse:a2];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 40));
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 96);
  *(void *)(v3 + 96) = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 40));
  id v5 = *(void **)(a1 + 40);
  return [v5 _executeNextShareInvitationRequestIfPossible];
}

void sub_1003C9290(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [[PDCloudStoreShareInvitationRequestGenericResponse alloc] initWithSuccess:a2 error:v5];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C9318(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [[PDCloudStoreShareInvitationRequestGenericResponse alloc] initWithSuccess:a2 error:v5];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C93A0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (v8) {
    id v6 = [[PDCloudStoreShareInvitationRequestCreateKeysResponse alloc] initWithInvitation:v8];
  }
  else {
    id v6 = [[PDCloudStoreShareInvitationRequestGenericResponse alloc] initWithSuccess:0 error:v5];
  }
  uint64_t v7 = v6;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C9450(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [[PDCloudStoreShareInvitationRequestGenericResponse alloc] initWithSuccess:v4 == 0 error:v4];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C94D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = [[PDCloudStoreShareInvitationRequestDeclineResponse alloc] initWithPriorPermission:a3 success:a2 error:v7];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C9570(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [[PDCloudStoreShareInvitationRequestRecordArray alloc] initWithCloudStoreRecords:v6 success:v5 == 0 error:v5];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C960C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [[PDCloudStoreShareInvitationRequestGenericResponse alloc] initWithSuccess:a2 error:v5];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C9694(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [[PDCloudStoreShareInvitationRequestGenericResponse alloc] initWithSuccess:a2 error:v5];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003C9820(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Accept invitation with error %@", buf, 0xCu);
  }

  id v6 = [objc_alloc((Class)PKCloudStoreError) initWithError:v4];
  if (([v6 isUnrecoverableDecryptionError] & 1) != 0
    || [v6 isPCSError])
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "This user has lost the keys to the invitiation. Asking the owner to create new keys by deleting the zone share.", buf, 2u);
    }

    uint64_t v7 = 3;
  }
  else if (v4)
  {
    CKRetryAfterSecondsForError();
    objc_msgSend(*(id *)(a1 + 32), "_scheduleZoneShareIntegrityActivityForTimeInterval:");
    uint64_t v7 = 2;
  }
  else
  {
    uint64_t v7 = 1;
  }
  id v8 = objc_alloc_init((Class)PKCloudStoreZoneInvitationResponse);
  [v8 setInvitation:*(void *)(a1 + 40)];
  [v8 setStatus:v7];
  uint64_t v9 = [*(id *)(a1 + 48) fromDestination];
  [v8 setDestination:v9];

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = PKCloudStoreZoneInvitationStatusToString();
    *(_DWORD *)long long buf = 138543362;
    id v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending response back to IDS with status %{public}@", buf, 0xCu);
  }
  char v11 = *(void **)(*(void *)(a1 + 32) + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1003C9A94;
  void v12[3] = &unk_10074ED08;
  id v13 = *(id *)(a1 + 56);
  uint64_t v14 = v7;
  [v11 sendCloudStoreZoneInvitationResponse:v8 completion:v12];
}

void sub_1003C9A94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Response sent with error %@", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, BOOL, id))(v5 + 16))(v5, *(void *)(a1 + 40) == 1, v3);
  }
}

void sub_1003C9C88(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    int v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixShareInvitation;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1003C9D8C;
    void v12[3] = &unk_10072E570;
    uint64_t v10 = *(void *)(a1 + 56);
    id v13 = *(id *)(a1 + 48);
    [v6 acceptShareInvitation:v7 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v12];
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v5);
    }
  }
}

void sub_1003C9D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, a2, v4);
  }
}

void sub_1003C9F50(void *a1, char a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    int v6 = (void *)a1[4];
    uint64_t v7 = (void *)a1[5];
    uint64_t v8 = a1[6];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1003CA0E8;
    v15[3] = &unk_10074ED30;
    id v16 = v6;
    id v9 = (id)a1[6];
    uint64_t v10 = a1[7];
    uint64_t v11 = (void *)a1[8];
    id v17 = v9;
    uint64_t v18 = v10;
    id v19 = v11;
    [v7 cloudStoreZoneInvitationDataForInvitation:v16 toRecipient:v8 completion:v15];
  }
  else
  {
    id v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = a1[4];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v21 = v13;
      __int16 v22 = 2112;
      id v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Cannot send invitation data %@ because cloud store is not setup %@", buf, 0x16u);
    }

    uint64_t v14 = a1[8];
    if (v14) {
      (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0, v5);
    }
  }
}

void sub_1003CA0E8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (v8 || (a2 & 1) == 0)
  {
    id v9 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v11 = *(void **)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      id v22 = v10;
      __int16 v23 = 2112;
      id v24 = v11;
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Error trying to create zone share keys for invitation %@ with handle %@, error %@", buf, 0x20u);
    }
  }
  id v12 = v7;
  if (!v7) {
    id v12 = *(void **)(a1 + 32);
  }
  id v13 = v12;
  uint64_t v14 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    id v22 = v13;
    __int16 v23 = 2112;
    id v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to send zone share invitation %@ with IDS. And error %@", buf, 0x16u);
  }

  uint64_t v15 = *(void *)(a1 + 40);
  id v16 = *(void **)(*(void *)(a1 + 48) + 24);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  _DWORD v18[2] = sub_1003CA2E4;
  v18[3] = &unk_10073D508;
  id v19 = v7;
  id v20 = *(id *)(a1 + 56);
  id v17 = v7;
  [v16 sendCloudStoreZoneInvitation:v13 forHandle:v15 invitationError:v8 completion:v18];
}

void sub_1003CA2E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Zone Share Invitation %@ sent with error %@", (uint8_t *)&v7, 0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, BOOL, id))(v6 + 16))(v6, v3 == 0, v3);
  }
}

void sub_1003CA554(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v10 = PKCloudStoreOperationGroupSuffixShareInvitation;
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 72);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1003CA670;
    void v14[3] = &unk_100733D30;
    id v15 = *(id *)(a1 + 56);
    [v6 createShareInvitationForRecipientHandle:v7 zoneName:v8 permission:v11 operationGroupName:v9 operationGroupNameSuffix:v10 qualityOfService:v12 completion:v14];
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13) {
      (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v5);
    }
  }
}

uint64_t sub_1003CA670(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1003CA830(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error sending message %@", (uint8_t *)&v6, 0xCu);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, *(void *)(a1 + 32), v3);
  }
}

uint64_t sub_1003CA9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a4);
  }
  return result;
}

void sub_1003CAAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, a2, v4);
  }
}

void sub_1003CAC9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    id v8 = v3;
    if ([v3 type] == (id)2) {
      id v4 = [v8 priorPermission];
    }
    else {
      id v4 = 0;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [v8 success];
    id v7 = [v8 error];
    (*(void (**)(uint64_t, id, id, void *))(v5 + 16))(v5, v6, v4, v7);

    id v3 = v8;
  }
}

void sub_1003CAED0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v7 = *(void **)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v10 = PKCloudStoreOperationGroupSuffixShareInvitation;
    uint64_t v11 = *(void *)(a1 + 80);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1003CB040;
    v17[3] = &unk_10074EDD0;
    char v23 = *(unsigned char *)(a1 + 88);
    id v18 = v6;
    id v19 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(void **)(a1 + 72);
    id v20 = v12;
    uint64_t v21 = v13;
    id v22 = v14;
    [v7 declineInvitationForRecipientHandle:v18 zoneName:v8 operationGroupName:v9 operationGroupNameSuffix:v10 qualityOfService:v11 completion:v17];
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 72);
    if (v15)
    {
      id v16 = CKXPCSuitableError();
      (*(void (**)(uint64_t, void, void, void *))(v15 + 16))(v15, 0, 0, v16);
    }
  }
}

void sub_1003CB040(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v8 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v20 = v9;
        __int16 v21 = 2112;
        uint64_t v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Alerting %@ via IDS that they have been removed from %@", buf, 0x16u);
      }

      id v11 = objc_alloc_init((Class)PKCloudStoreZoneInvitation);
      [v11 setZoneName:*(void *)(a1 + 40)];
      [v11 setContainerIdentifier:*(void *)(a1 + 48)];
      id v12 = *(void **)(*(void *)(a1 + 56) + 24);
      uint64_t v13 = *(void *)(a1 + 32);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_1003CB22C;
      v16[3] = &unk_10074ED08;
      id v17 = *(id *)(a1 + 64);
      uint64_t v18 = a3;
      [v12 removeCloudStoreZoneInvitation:v11 forHandle:v13 completion:v16];

      goto LABEL_10;
    }
    uint64_t v15 = *(void *)(a1 + 64);
    if (v15)
    {
      CKXPCSuitableError();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v15 + 16))(v15, 1, a3, v11);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14)
    {
      CKXPCSuitableError();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void, uint64_t, id))(v14 + 16))(v14, 0, a3, v11);
LABEL_10:
    }
  }
}

void sub_1003CB22C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error sending message %@", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = CKXPCSuitableError();
    (*(void (**)(uint64_t, BOOL, uint64_t, void *))(v5 + 16))(v5, v3 == 0, v6, v7);
  }
}

void sub_1003CB43C(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 type] == (id)3)
  {
    id v3 = [v6 cloudStoreRecords];
  }
  else
  {
    id v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = [v6 error];
    (*(void (**)(uint64_t, void *, void *))(v4 + 16))(v4, v3, v5);
  }
}

uint64_t sub_1003CB5D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1003CB6C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id *sub_1003CB850(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _initialCloudDatabaseSetupForContainer:result[5] operationGroupNameSuffix:PKCloudStoreOperationGroupInitialSetup completion:&stru_10074EE68];
  }
  return result;
}

void sub_1003CBADC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = PKCloudStoreOperationGroupUserActionExplicit;
    uint64_t v9 = PKCloudStoreOperationGroupSuffixShareInvitation;
    id v10 = [*(id *)(a1 + 48) qualityOfService];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1003CBBEC;
    void v12[3] = &unk_10074EE90;
    id v13 = *(id *)(a1 + 56);
    [v6 shareForZoneName:v7 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 completion:v12];
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 56);
    if (v11) {
      (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0, v5);
    }
  }
}

void sub_1003CBBEC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    CKXPCSuitableError();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v3, v4);
  }
}

uint64_t sub_1003CBDF4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, a2);
  }
  return result;
}

void sub_1003CC168(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = @"NO";
    *(_DWORD *)long long buf = 138412802;
    if (a2) {
      CFStringRef v8 = @"YES";
    }
    uint64_t v17 = v7;
    __int16 v18 = 2114;
    CFStringRef v19 = v8;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed invalidation of container %@, with success: %{public}@, error: %@", buf, 0x20u);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Starting container setup for zone recreation in container %{public}@", buf, 0xCu);
  }

  id v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = PKCloudStoreOperationGroupSuffixServerPush;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1003CC344;
  void v13[3] = &unk_1007305A0;
  id v14 = *(id *)(a1 + 32);
  id v15 = *(id *)(a1 + 56);
  [v10 _initialCloudDatabaseSetupForContainer:v11 operationGroupNameSuffix:v12 shouldScheduleBackgroundActivity:1 completion:v13];
}

void sub_1003CC344(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    CFStringRef v8 = @"NO";
    int v10 = 138543874;
    if (a2) {
      CFStringRef v8 = @"YES";
    }
    uint64_t v11 = v7;
    __int16 v12 = 2114;
    CFStringRef v13 = v8;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed recreation of zones in container %{public}@, with success: %{public}@, error: %@", (uint8_t *)&v10, 0x20u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

void sub_1003CC640(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(a1 + 32) count];
    uint64_t v8 = *(void *)(a1 + 32);
    CFStringRef v9 = @"NO";
    *(_DWORD *)long long buf = 134218754;
    id v19 = v7;
    if (a2) {
      CFStringRef v9 = @"YES";
    }
    __int16 v20 = 2112;
    uint64_t v21 = v8;
    __int16 v22 = 2114;
    CFStringRef v23 = v9;
    __int16 v24 = 2112;
    id v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed invalidation of %lu zones %@, with success: %{public}@, error: %@", buf, 0x2Au);
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [*(id *)(a1 + 32) count];
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 134218242;
    id v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Starting container setup for %lu zones recreation %@", buf, 0x16u);
  }

  __int16 v12 = *(void **)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = PKCloudStoreOperationGroupSuffixServerPush;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  _OWORD v15[2] = sub_1003CC840;
  v15[3] = &unk_1007305A0;
  id v16 = *(id *)(a1 + 32);
  id v17 = *(id *)(a1 + 56);
  [v12 _initialCloudDatabaseSetupForContainer:v13 operationGroupNameSuffix:v14 shouldScheduleBackgroundActivity:1 completion:v15];
}

void sub_1003CC840(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(a1 + 32) count];
    uint64_t v8 = *(void *)(a1 + 32);
    CFStringRef v9 = @"NO";
    int v11 = 134218754;
    id v12 = v7;
    if (a2) {
      CFStringRef v9 = @"YES";
    }
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    CFStringRef v16 = v9;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed recreation of %lu zones %@, with success: %{success}@, error: %@", (uint8_t *)&v11, 0x2Au);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);
  }
}

id sub_1003CCA54(void *a1, void *a2)
{
  return _[a2 cloudStoreNotificationCoordinator:a1[4] createdZoneWithName:a1[5] forContainerName:a1[6] scope:a1[7]];
}

void sub_1003CCCA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 success])
  {
    id v4 = [v3 error];
    if (v4)
    {
    }
    else if ([v3 type] == (id)1)
    {
      id v5 = [v3 invitation];
      id v6 = [PDCloudStoreShareInvitationSendKeysRequest alloc];
      uint64_t v7 = *(void *)(a1 + 32);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1003CCE00;
      void v10[3] = &unk_10074EDA8;
      id v11 = *(id *)(a1 + 48);
      uint64_t v8 = [(PDCloudStoreShareInvitationSendKeysRequest *)v6 initWithInvitation:v5 recipientHandle:v7 completion:v10];
      [(PDCloudStoreShareInvitationRequest *)v8 setQualityOfService:*(void *)(a1 + 56)];
      [*(id *)(a1 + 40) _executeShareInvitationRequest:v8];

LABEL_8:
      goto LABEL_9;
    }
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    id v5 = [v3 error];
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v5);
    goto LABEL_8;
  }
LABEL_9:
}

void sub_1003CCE00(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = [v3 error];

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }
}

void sub_1003CD018(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = [v3 error];

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }
}

void sub_1003CD1FC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = [v3 error];

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }
}

void sub_1003CD3F4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = a2;
    id v4 = [v3 success];
    id v5 = [v3 error];

    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, v4, v5);
  }
}

id *sub_1003CD670(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _initialCloudDatabaseSetupForContainer:result[5] operationGroupNameSuffix:PKCloudStoreOperationGroupInitialSetup completion:&stru_10074EF00];
  }
  return result;
}

id sub_1003CDAEC(uint64_t a1, void *a2)
{
  id result = [a2 success];
  if (result)
  {
    id v4 = *(void **)(a1 + 32);
    return [v4 _performZoneShareIntegrityOperation];
  }
  return result;
}

void sub_1003CDFB4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) idsDestination];
  id v3 = [v2 name];

  [*(id *)(a1 + 40) removedFromCloudStoreZoneInvitation:*(void *)(a1 + 48) fromHandle:v3];
}

void sub_1003CE394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003CE464;
  v9[3] = &unk_100732CB8;
  id v10 = v7;
  id v11 = *(id *)(a1 + 64);
  [v5 cloudStoreContainer:v6 sendZoneShareInvitationForHandle:v10 zoneName:v8 permission:a3 qualitOfService:17 completion:v9];
}

void sub_1003CE464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412802;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    uint64_t v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Completed deleteing and re-adding %@ to the share invitation %@ with error %@", (uint8_t *)&v8, 0x20u);
  }
}

uint64_t sub_1003CE6BC(uint64_t a1, uint64_t a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = @"NO";
    if (a2) {
      CFStringRef v5 = @"YES";
    }
    int v7 = 138543362;
    CFStringRef v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Missing TLKs %{public}@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0);
  }
  return result;
}

void sub_1003CE968(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Reset apple pay manatee view with error %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = CKXPCSuitableError();
    (*(void (**)(uint64_t, BOOL, void *))(v5 + 16))(v5, v3 == 0, v6);
  }
}

void sub_1003CEC2C(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v4) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138543618;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    __int16 v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Did set up standard  PDPassSyncCloudStoreContainer with success:%{public}@, error:%{error}@.", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1003CED04(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v4) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138543618;
    CFStringRef v8 = v6;
    __int16 v9 = 2112;
    __int16 v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Did set up secure PDPassSyncCloudStoreContainer with success:%{public}@, error:%{error}@.", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1003CEDDC(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"NO";
    if (v4) {
      CFStringRef v6 = @"YES";
    }
    int v7 = 138543618;
    CFStringRef v8 = v6;
    __int16 v9 = 2114;
    __int16 v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Did set up PDPassCloudStoreContainer with success:%{public}@, error:%{public}@.", (uint8_t *)&v7, 0x16u);
  }
}

id sub_1003CF4E8(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  [*(id *)(a1 + 32) _recordAggdCloudStoreBackgroundContainerSetupResult:a2 forCurrentBackgroundInterval:*(void *)(a1 + 40)];
  BOOL v4 = *(void **)(a1 + 32);
  if (v2)
  {
    return [v4 _unscheduleBackgroundContainerSetupActivities];
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    return [v4 _scheduleCloudStoreContainerSetupBackgroundActivityWithNextInterval:v6];
  }
}

void sub_1003CF844(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = PKLogFacilityTypeGetObject();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v7)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Syncing local transactions to cloud store.", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) syncTransactionsToCloudStoreOriginatedOnDevice:*(void *)(a1 + 40)];
  }
  else
  {
    if (v7)
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not initialize the cloud database in order to sync transactions. %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1003CFDA0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = [*(id *)(a1 + 32) applePayContainer];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003CFF00;
    v9[3] = &unk_10072FDC8;
    uint64_t v7 = *(void *)(a1 + 40);
    void v9[4] = *(void *)(a1 + 32);
    id v10 = *(id *)(a1 + 48);
    [v6 fetchAndStoreAccountEventsWithIdentifiers:v7 completion:v9];
  }
  else
  {
    int v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error setting up cloud database for container: %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

uint64_t sub_1003CFF00(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 32) hasAccountServicingEventsWithStatus:0];
  id v3 = PKLogFacilityTypeGetObject();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Still have servicing events with unknown status", buf, 2u);
    }

    id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (v4)
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully re-fetched all servicing events with unknown status", v7, 2u);
    }

    id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  return v5();
}

void sub_1003D026C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  PDScheduledActivityRemove();
  uint64_t v6 = PKLogFacilityTypeGetObject();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v7)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Performing Zone share integrity activity.", (uint8_t *)&v8, 2u);
    }

    [*(id *)(a1 + 32) ensureZoneShareIntegrity];
  }
  else
  {
    if (v7)
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not initialize the cloud database in order perform a zone share integrity operation. %@", (uint8_t *)&v8, 0xCu);
    }

    [*(id *)(a1 + 40) _scheduleZoneShareIntegrityActivityForTimeInterval:900.0];
  }
}

void sub_1003D1118(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = @"NO";
    if (a2) {
      CFStringRef v7 = @"YES";
    }
    *(_DWORD *)long long buf = 138543618;
    CFStringRef v19 = v7;
    __int16 v20 = 2112;
    id v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Ensured container is setup: %{public}@, error: %@", buf, 0x16u);
  }

  int v8 = *(void **)(a1 + 32);
  id v9 = [*(id *)(a1 + 40) passSyncContainer];

  if (v8 == v9)
  {
    __int16 v15 = [*(id *)(a1 + 40) passSyncContainer];
LABEL_10:
    uint64_t v13 = v15;
    [(PDCloudStoreRecordsRequest *)v15 synchronizeWithReason:2];
    goto LABEL_11;
  }
  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = [*(id *)(a1 + 40) passSyncSecureContainer];

  if (v10 == v11)
  {
    __int16 v15 = [*(id *)(a1 + 40) passSyncSecureContainer];
    goto LABEL_10;
  }
  id v12 = [PDCloudStoreRecordsRequest alloc];
  uint64_t v13 = [(PDCloudStoreRecordsRequest *)v12 initWithRequestType:0 storeChanges:1 returnRecords:0 qualityOfService:17 groupName:PKCloudStoreOperationGroupPushTriggered groupNameSuffix:PKCloudStoreOperationGroupSuffixServerPush];
  [(PDCloudStoreRecordsRequest *)v13 setCloudStoreZone:*(void *)(a1 + 48)];
  [(PDCloudStoreRecordsRequest *)v13 setContainerDatabase:*(void *)(a1 + 56)];
  [(PDCloudStoreRecordsRequest *)v13 setUseLastChangeToken:1];
  [(PDCloudStoreRecordsRequest *)v13 setShouldSaveToken:1];
  uint64_t v14 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1003D1330;
  v16[3] = &unk_10074F048;
  id v17 = v14;
  [v17 executeRecordsRequest:v13 completion:v16];

LABEL_11:
}

void sub_1003D1330(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFStringRef v7 = PKLogFacilityTypeGetObject();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v14 = 138412546;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      id v17 = v6;
      id v10 = "Error fetching and storing all changed records for container %@, %@";
      uint64_t v11 = v7;
      uint32_t v12 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, v12);
    }
  }
  else if (v8)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 138412290;
    uint64_t v15 = v13;
    id v10 = "Fetching and storing all changed records successfully for container %@";
    uint64_t v11 = v7;
    uint32_t v12 = 12;
    goto LABEL_6;
  }
}

void sub_1003D1750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1003D177C(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = [a2 zoneName];
  id v6 = *(void **)(a1 + 32);
  id v9 = v5;
  id v7 = v6;
  if (v9 == v7)
  {

    goto LABEL_7;
  }
  if (v9 && v7)
  {
    unsigned int v8 = [v9 isEqualToString:v7];

    if (!v8) {
      return;
    }
LABEL_7:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(id *)(a1 + 40));
    *a3 = 1;
    return;
  }
}

void sub_1003D2838(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_1003D2AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1003D2F00(id a1, PKTransitAppletBalance *a2, id a3)
{
}

void sub_1003D2F08(id a1, PKTransitAppletBalance *a2, id a3)
{
}

void sub_1003D2F10(id a1, PKTransitAppletBalance *a2, id a3)
{
  BOOL v4 = a2;
  -[PKTransitAppletBalance setExponent:](v4, "setExponent:", [a3 integerValue]);
}

void sub_1003D2F68(id a1, PKTransitAppletBalance *a2, id a3)
{
}

void sub_1003D2F70(id a1, PKTransitAppletBalance *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKTransitAppletBalance *)v3 setExpirationDate:v4];
}

void sub_1003D384C(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_1003D3A20(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) addObject:v3];
}

id sub_1003D3BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_1003D3CA8(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_1003D3CB0(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_1003D3CB8(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_1003D3CC0(id a1, PKTransitAppletStateDirty *a2, id a3)
{
}

void sub_1003D458C(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "_queue_identifyDefaultPaymentPassWithCurrentDefaultPaymentPassUniqueIdentifier:", v2);
  id v4 = (void *)v3;
  if (v2 | v3)
  {
    id v5 = [(id)v3 uniqueID];
    unsigned int v6 = [v5 isEqualToString:v2];

    if (v6)
    {
      id v7 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        unsigned int v8 = "Default card and new payment pass are the same. No need to update.";
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 2u);
      }
    }
    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64));
      if (objc_opt_respondsToSelector())
      {
        id v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64));
        unsigned __int8 v11 = [v10 defaultPassManagerCanUpdateDefaultPass:*(void *)(a1 + 32)];

        if ((v11 & 1) == 0)
        {
          id v7 = PKLogFacilityTypeGetObject();
          if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_21;
          }
          *(_WORD *)long long buf = 0;
          unsigned int v8 = "Not updating default card because delegate prevents it.";
          goto LABEL_7;
        }
      }
      else
      {
      }
      uint32_t v12 = [v4 uniqueID];
      uint64_t v13 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v19 = v12;
        __int16 v20 = 2112;
        uint64_t v21 = v2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Updated Default Payment Pass to: %@, from: %@", buf, 0x16u);
      }

      PDSetDefaultPaymentPassUniqueIdentifier();
      PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier();
      if (v2 && v4)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Presenting notification for default payment pass update.", buf, 2u);
        }

        [*(id *)(a1 + 32) _presentDefaultPaymentPassUpdateNotification:v4];
      }
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(NSObject **)(v14 + 56);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_1003D4880;
      v16[3] = &unk_10072E198;
      void v16[4] = v14;
      id v17 = v12;
      id v7 = v12;
      dispatch_async(v15, v16);
    }
  }
  else
  {
    id v7 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      unsigned int v8 = "Default card was nil and no satisfactory payment pass could be found. No need to update.";
      goto LABEL_7;
    }
  }
LABEL_21:
}

uint64_t sub_1003D4880(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    if (objc_opt_respondsToSelector()) {
      [v4 defaultPassManager:*(void *)(a1 + 32) didUpdateDefaultPaymentPassWithUniqueIdentifier:*(void *)(a1 + 40)];
    }
  }
  return _objc_release_x4();
}

void sub_1003D496C(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  if (v2)
  {
    PDSetDefaultPaymentPassUniqueIdentifier();
    PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier();
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(NSObject **)(v3 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003D4A10;
    block[3] = &unk_10072E1E8;
    void block[4] = v3;
    dispatch_async(v4, block);
  }
}

uint64_t sub_1003D4A10(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    if (objc_opt_respondsToSelector()) {
      [v4 defaultPassManager:*(void *)(a1 + 32) didUpdateDefaultPaymentPassWithUniqueIdentifier:0];
    }
  }
  return _objc_release_x3();
}

void sub_1003D4B24(uint64_t a1)
{
  uint64_t v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Setting default payment pass: %@", buf, 0xCu);
  }

  PDSetDefaultPaymentPassUniqueIdentifier();
  PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier();
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(NSObject **)(v4 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003D4C50;
  v6[3] = &unk_10072E198;
  void v6[4] = v4;
  id v7 = *(id *)(a1 + 32);
  dispatch_async(v5, v6);
}

uint64_t sub_1003D4C50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64));
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained;
    if (objc_opt_respondsToSelector()) {
      [v4 defaultPassManager:*(void *)(a1 + 32) didUpdateDefaultPaymentPassWithUniqueIdentifier:*(void *)(a1 + 40)];
    }
  }
  return _objc_release_x4();
}

uint64_t sub_1003D4DB4(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;
  return _objc_release_x1(v2, v4);
}

void sub_1003D4F2C(uint64_t a1)
{
  uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v3 = objc_msgSend(*(id *)(a1 + 32), "_queue_identifyDefaultPaymentPassWithCurrentDefaultPaymentPassUniqueIdentifier:", v2);
  uint64_t v4 = [v3 uniqueID];
  unsigned __int8 v5 = [v4 isEqualToString:*(void *)(a1 + 40)];

  unsigned int v6 = *(NSObject **)(*(void *)(a1 + 32) + 56);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003D5018;
  v7[3] = &unk_10073B5A0;
  id v8 = *(id *)(a1 + 48);
  unsigned __int8 v9 = v5;
  dispatch_async(v6, v7);
}

uint64_t sub_1003D5018(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1003D5030(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003D5234(uint64_t a1)
{
  uint64_t v2 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_TITLE_FORMAT");
  uint64_t v3 = [*(id *)(a1 + 32) localizedDescription];
  uint64_t v4 = (void *)v3;
  if (v3)
  {
    uint64_t v13 = v3;
    unsigned __int8 v5 = PKStringWithValidatedFormat();
    v15[0] = v5;
    v14[0] = kCFUserNotificationAlertHeaderKey;
    v14[1] = kCFUserNotificationAlertMessageKey;
    unsigned int v6 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_MESSAGE");
    v15[1] = v6;
    void v14[2] = kCFUserNotificationOtherButtonTitleKey;
    id v7 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_SETTINGS_BUTTON");
    _OWORD v15[2] = v7;
    void v14[3] = kCFUserNotificationDefaultButtonTitleKey;
    id v8 = PKLocalizedPaymentString(@"DEFAULT_CARD_CHANGED_DISMISS_BUTTON");
    v15[3] = v8;
    void v14[4] = kCFUserNotificationLocalizationURLKey;
    unsigned __int8 v9 = PKPassKitBundle();
    id v10 = objc_msgSend(v9, "resourceURL", v13);
    void v15[4] = v10;
    void v15[5] = &__kCFBooleanTrue;
    void v14[5] = PKUserNotificationDontDismissOnUnlock;
    void v14[6] = PKUserNotificationAllowMenuButtonDismissal;
    v15[6] = &__kCFBooleanTrue;
    unsigned __int8 v11 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:7];

    +[PKUserNotificationAgent presentNotificationWithParameters:v11 flags:0 responseHandler:&stru_10074F208];
  }
  else
  {
    unsigned __int8 v5 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint32_t v12 = [*(id *)(a1 + 32) uniqueID];
      *(_DWORD *)long long buf = 138412290;
      id v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not presenting default pass change notification for pass: %@ because it has no localized description", buf, 0xCu);
    }
  }
}

void sub_1003D5490(id a1, __CFUserNotification *a2, unint64_t a3)
{
  if (a3 == 2) {
    PDOpenWalletUI();
  }
}

int64_t sub_1003D596C(id a1, PKPaymentPass *a2, PKPaymentPass *a3)
{
  uint64_t v4 = a2;
  unsigned __int8 v5 = a3;
  uint64_t v6 = [(PKPaymentPass *)v4 originalProvisioningDate];
  uint64_t v7 = [(PKPaymentPass *)v5 originalProvisioningDate];
  id v8 = (void *)v7;
  if (v6 && v7)
  {
    int64_t v9 = (int64_t)[(id)v6 compare:v7];
    if (!v9)
    {
LABEL_9:
      id v10 = [(PKPaymentPass *)v4 ingestedDate];
      unsigned __int8 v11 = [(PKPaymentPass *)v5 ingestedDate];
      int64_t v9 = (int64_t)[v10 compare:v11];
    }
  }
  else
  {
    if (v6) {
      int64_t v9 = -1;
    }
    else {
      int64_t v9 = 1;
    }
    if (!(v6 | v7)) {
      goto LABEL_9;
    }
  }

  return v9;
}

void sub_1003D5B08(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id *sub_1003D5B70(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v23.receiver = a1;
    v23.super_class = (Class)PDPassTileManager;
    unsigned __int8 v11 = (id *)objc_msgSendSuper2(&v23, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeWeak(a1 + 6, v10);
      id v12 = objc_alloc_init((Class)NSMutableDictionary);
      id v13 = a1[3];
      a1[3] = v12;

      uint64_t v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v15 = PDUtilityQueue();
      dispatch_queue_t v16 = dispatch_queue_create_with_target_V2("com.apple.passd.passTileManager", v14, v15);
      id v17 = a1[4];
      a1[4] = v16;

      id v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      CFStringRef v19 = PDDefaultQueue();
      dispatch_queue_t v20 = dispatch_queue_create_with_target_V2("com.apple.passd.passTileManager.reply", v18, v19);
      id v21 = a1[5];
      a1[5] = v20;
    }
  }

  return a1;
}

id *sub_1003D5CD0(id *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    unsigned __int8 v5 = a1[2];
    id v6 = a2;
    uint64_t v7 = sub_10045B034(v5, (uint64_t)v6, a3);
    uint64_t v3 = [v3[1] passTilesForUniqueID:v6 withDescriptorStatePairs:v7];
  }
  return v3;
}

void sub_1003D5D58(uint64_t a1, void *a2, void *a3)
{
  if (a1) {
    sub_1003D5D68(a1, a2, a3, 1);
  }
}

void sub_1003D5D68(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    id v9 = (void *)PDOSTransactionCreate("PDPassTileManager");
    uint64_t v22 = 0;
    objc_super v23 = &v22;
    uint64_t v24 = 0x3032000000;
    id v25 = sub_100020D5C;
    id v26 = sub_1000211A0;
    id v27 = 0;
    uint64_t v10 = sub_10045B088(*(void **)(a1 + 16), (uint64_t)v7, a4, (uint64_t)v8);
    unsigned __int8 v11 = (void *)v23[5];
    void v23[5] = v10;

    if (v23[5])
    {
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        PKPassTileContextToString();
        id v13 = (id)objc_claimAutoreleasedReturnValue();
        id v14 = [(id)v23[5] count];
        *(_DWORD *)long long buf = 138412802;
        id v29 = v7;
        __int16 v30 = 2112;
        id v31 = v13;
        __int16 v32 = 2048;
        id v33 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "PDPassTileManager: updated tiles for pass %@, %@ context with %lu tiles.", buf, 0x20u);
      }
      uint64_t v15 = *(NSObject **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1003D5FCC;
      block[3] = &unk_10074F270;
      id v17 = v9;
      uint64_t v18 = a1;
      id v19 = v7;
      dispatch_queue_t v20 = &v22;
      uint64_t v21 = a4;
      dispatch_async(v15, block);
    }
    _Block_object_dispose(&v22, 8);
  }
}

void sub_1003D5FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D5FCC(void *a1)
{
  id v5 = [*(id *)(a1[5] + 8) passTilesForUniqueID:a1[6] withDescriptorStatePairs:*(void *)(*(void *)(a1[7] + 8) + 40)];
  uint64_t v2 = *(void *)(a1[7] + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  id WeakRetained = objc_loadWeakRetained((id *)(a1[5] + 48));
  [WeakRetained passTileManager:a1[5] didUpdateTiles:v5 forPassUniqueID:a1[6] forContext:a1[8]];
}

void sub_1003D6060(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (a1 && v9 && v5)
  {
    id v6 = [v9 uniqueID];
    uint64_t v7 = sub_100011FDC((uint64_t)v5);
    id v8 = (void *)v7;
    if (v6 && v7) {
      sub_1003D6104(a1, v6);
    }
  }
}

void sub_1003D6104(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (void *)PDOSTransactionCreate("PDPassTileManager");
    id v5 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003D64B4;
    block[3] = &unk_10072E238;
    id v9 = v4;
    uint64_t v10 = a1;
    id v11 = v3;
    id v6 = v4;
    dispatch_block_t v7 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
    dispatch_async(v5, v7);
  }
}

void sub_1003D61EC(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    id v3 = [a2 uniqueID];
    sub_10045B160(v2, (uint64_t)v3);
  }
}

void sub_1003D624C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    dispatch_block_t v7 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003D6314;
    block[3] = &unk_10072F7D0;
    uint64_t v12 = a3;
    id v10 = v5;
    uint64_t v11 = a1;
    dispatch_block_t v8 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_DEFAULT, 0, block);
    dispatch_async(v7, v8);
  }
}

void sub_1003D6314(void *a1)
{
  uint64_t v2 = +[NSNumber numberWithInteger:a1[6]];
  if (a1[6])
  {
    id v3 = [*(id *)(a1[5] + 24) objectForKey:v2];

    if (!v3)
    {
      [*(id *)(a1[5] + 24) setObject:a1[4] forKey:v2];
      goto LABEL_9;
    }
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = _PKEnumValueToString();
      uint64_t v6 = a1[4];
      *(_DWORD *)long long buf = 138412546;
      id v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDPassTileManager: attempt to register second instance of participantIdentifier \"%@\": %@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      dispatch_block_t v7 = (void *)a1[4];
      *(_DWORD *)long long buf = 138412290;
      id v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PDPassTileManager: attempt to register participant with unrecognized identifier: %@", buf, 0xCu);
    }
  }

LABEL_9:
}

void sub_1003D64B4(uint64_t a1)
{
}

void sub_1003D64C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = [*(id *)(a1 + 16) passWithUniqueIdentifier:v3];
    if (v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableSet);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_1003D65A0;
      v6[3] = &unk_10074F2C0;
      void v6[4] = a1;
      void v6[5] = v4;
      v6[6] = v5;
      sub_1003D5D68(a1, v3, v6, 1);
      sub_10045B130(*(void **)(a1 + 16), (uint64_t)v5, (uint64_t)v3);
    }
  }
}

id sub_1003D65A0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v27 = 0;
  dispatch_time_t v28 = &v27;
  uint64_t v29 = 0x2020000000;
  uint64_t v30 = 0;
  id v7 = objc_msgSend(objc_alloc((Class)NSMutableSet), "initWithCapacity:", objc_msgSend(*(id *)(a1[4] + 24), "count"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  long long v8 = *((_OWORD *)a1 + 2);
  id v9 = *(void **)(a1[4] + 24);
  v20[2] = sub_1003D6868;
  v20[3] = &unk_10074F298;
  long long v21 = v8;
  id v10 = v5;
  id v22 = v10;
  id v11 = v6;
  uint64_t v12 = a1[6];
  id v23 = v11;
  uint64_t v24 = v12;
  id v25 = v7;
  id v26 = &v27;
  [v9 enumerateKeysAndObjectsUsingBlock:v20];
  id v13 = [v11 mutableCopy];
  if ((unint64_t)[v7 count] <= 1)
  {
    BOOL v17 = v28[3] != 2;
  }
  else
  {
    id v14 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = [v10 metadata];
      dispatch_queue_t v16 = [v15 identifier];
      *(_DWORD *)long long buf = 138412546;
      __int16 v32 = v16;
      __int16 v33 = 2112;
      id v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "PDPassTileManager: tile \"%@\" had multiple isSupportedParticipants: %@", buf, 0x16u);
    }
    BOOL v17 = 0;
    v28[3] = 2;
  }
  [v13 setSupported:v17];
  if (v28[3] == 1)
  {
    uint64_t v18 = [v7 anyObject];
    if ([v18 passTileManager:a1[4] wantsUpdateDescriptorStateForPass:a1[5] tileDescriptor:v10 descriptorState:v13])objc_msgSend(v18, "passTileManager:updateDescriptorStateForPass:tileDescriptor:descriptorState:", a1[4], a1[5], v10, v13); {
  }
    }
  _Block_object_dispose(&v27, 8);

  return v13;
}

void sub_1003D683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003D6868(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if ([v5 passTileManager:*(void *)(a1 + 32) isRelevantForPass:*(void *)(a1 + 40) tileDescriptor:*(void *)(a1 + 48) descriptorState:*(void *)(a1 + 56)])
  {
    id v6 = *(void **)(a1 + 64);
    [v9 integerValue];
    id v7 = _PKEnumValueToString();
    objc_msgSend(v6, "addObject:", v7, 1, 2);

    id v8 = [v5 passTileManager:*(void *)(a1 + 32) isTileSupportedForPass:*(void *)(a1 + 40) tileDescriptor:*(void *)(a1 + 48) descriptorState:*(void *)(a1 + 56)];
    if (v8)
    {
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v8;
      [*(id *)(a1 + 72) addObject:v5];
    }
  }
}

void sub_1003D6948(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = (void *)PDOSTransactionCreate("PDPassTileManager");
    id v5 = *(void **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003D6A24;
    block[3] = &unk_10072F7D0;
    id v10 = v4;
    uint64_t v11 = a1;
    uint64_t v12 = a2;
    id v6 = v5;
    id v7 = v4;
    dispatch_block_t v8 = dispatch_block_create(DISPATCH_BLOCK_NO_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
    dispatch_async(v6, v8);
  }
}

void sub_1003D6A24(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 16);
  id v3 = _PKEnumValueToString();
  uint64_t v4 = sub_10045B0E0(v2, (uint64_t)v3);

  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v5 = v4;
  id v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16, 1, 2);
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        sub_1003D64C0(*(void *)(a1 + 40), *(void **)(*((void *)&v10 + 1) + 8 * (void)v9));
        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

uint64_t sub_1003D6D1C(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithPropertyValues:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  id v3 = [v2 persistentID];
  uint64_t v4 = [*(id *)(a1 + 48) minimumAmounts];
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:v4 forInstallmentCriteriaPID:v3 type:1 inDatabase:*(void *)(a1 + 40)];

  id v5 = [*(id *)(a1 + 48) maximumAmounts];
  +[PaymentOfferCurrencyAmount insertOrUpdateCurrencyAmounts:v5 forInstallmentCriteriaPID:v3 type:2 inDatabase:*(void *)(a1 + 40)];

  id v6 = [*(id *)(a1 + 48) icon];
  +[PaymentOfferDynamicContentIcon insertOrUpdateIcon:v6 forInstallmentCriteriaPID:v3 inDatabase:*(void *)(a1 + 40)];

  id v7 = [*(id *)(a1 + 48) associatedStoreIdentifiers];
  +[PaymentOfferAssociatedStoreIdentifier insertOrUpdateAssociatedStoreIdentifiers:v7 forInstallmentCriteriaPID:v3 inDatabase:*(void *)(a1 + 40)];

  uint64_t v8 = [*(id *)(a1 + 48) associatedWebDomains];
  +[PaymentOfferAssociatedWebDomain insertOrUpdateAssociatedWebDomains:v8 forInstallmentCriteriaPID:v3 inDatabase:*(void *)(a1 + 40)];

  id v9 = [*(id *)(a1 + 48) disclosureFooter];
  id v10 = +[ApplyFooterContent insertOrUpdateWithFooterContent:v9 type:1 installmentCriteriaPID:v3 inDatabase:*(void *)(a1 + 40)];

  return 1;
}

void sub_1003D7430(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v14 = objc_alloc_init((Class)PKPaymentOfferInstallmentCriteria);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v14 withProperties:v7 values:a4];

  uint64_t v8 = +[PaymentOfferCurrencyAmount currencyAmountForInstallmentCriteriaPID:a2 type:1 inDatabase:*(void *)(a1 + 40)];
  [v14 setMinimumAmounts:v8];

  id v9 = +[PaymentOfferCurrencyAmount currencyAmountForInstallmentCriteriaPID:a2 type:2 inDatabase:*(void *)(a1 + 40)];
  [v14 setMaximumAmounts:v9];

  id v10 = +[PaymentOfferDynamicContentIcon iconForInstallmentCriteriaPID:a2 inDatabase:*(void *)(a1 + 40)];
  [v14 setIcon:v10];

  long long v11 = +[PaymentOfferAssociatedStoreIdentifier associatedStoreIdentifiersForInstallmentCriteriaPID:a2 inDatabase:*(void *)(a1 + 40)];
  [v14 setAssociatedStoreIdentifiers:v11];

  long long v12 = +[PaymentOfferAssociatedWebDomain associatedWebDomainForInstallmentCriteriaPID:a2 inDatabase:*(void *)(a1 + 40)];
  [v14 setAssociatedWebDomains:v12];

  long long v13 = +[ApplyFooterContent footerContentForType:1 installmentCriteriaPID:a2 inDatabase:*(void *)(a1 + 40)];
  [v14 setDisclosureFooter:v13];

  [*(id *)(a1 + 48) safelyAddObject:v14];
}

void sub_1003D78FC(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D7904(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setEligibility:](v4, "setEligibility:", [a3 integerValue]);
}

void sub_1003D795C(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1003D79B4(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D79BC(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D79C4(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D79CC(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = +[NSSet setWithArray:v6];
  [(PKPaymentOfferInstallmentCriteria *)v4 setSupportedCurrencyCodes:v5];
}

void sub_1003D7A60(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = +[NSSet setWithArray:v6];
  [(PKPaymentOfferInstallmentCriteria *)v4 setSupportedMerchantCountryCodes:v5];
}

void sub_1003D7AF4(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = +[NSSet setWithArray:v6];
  [(PKPaymentOfferInstallmentCriteria *)v4 setSupportedDeviceRegionCountryCodes:v5];
}

void sub_1003D7B88(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKPaymentOfferInstallmentCriteria *)v4 setSupportedLanguages:v5];
}

void sub_1003D7BF4(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setPaymentNetworkIdentifier:](v4, "setPaymentNetworkIdentifier:", [a3 integerValue]);
}

void sub_1003D7C4C(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setPaymentMethodType:](v4, "setPaymentMethodType:", [a3 integerValue]);
}

void sub_1003D7CA4(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D7CAC(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D7CB4(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  uint64_t v4 = a2;
  id v6 = [a3 componentsSeparatedByString:@","];
  id v5 = +[NSSet setWithArray:v6];
  [(PKPaymentOfferInstallmentCriteria *)v4 setAssociatedApplicationIdentifiers:v5];
}

void sub_1003D7D48(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_URLForSQLValue();
  [(PKPaymentOfferInstallmentCriteria *)v3 setAppLaunchURL:v4];
}

void sub_1003D7DA8(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setRequiresChallenge:](v4, "setRequiresChallenge:", [a3 BOOLValue]);
}

void sub_1003D7E00(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setSuppressPayInFull:](v4, "setSuppressPayInFull:", [a3 BOOLValue]);
}

void sub_1003D7E58(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentOfferInstallmentCriteria setHasPreconfiguredOffers:](v4, "setHasPreconfiguredOffers:", [a3 BOOLValue]);
}

void sub_1003D7EB0(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D7EB8(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D7EC0(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D7EC8(id a1, PKPaymentOfferInstallmentCriteria *a2, id a3)
{
}

void sub_1003D8B60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init((Class)PKPassShareActivationOption);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_1003D8CE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_1003D8FAC(id a1, PKPassShareActivationOption *a2, id a3)
{
}

void sub_1003D8FB4(id a1, PKPassShareActivationOption *a2, id a3)
{
  id v3 = a2;
  [(PKPassShareActivationOption *)v3 setType:PKPassShareActivationOptionTypeFromString()];
}

void sub_1003D900C(id a1, PKPassShareActivationOption *a2, id a3)
{
}

void sub_1003D9014(id a1, PKPassShareActivationOption *a2, id a3)
{
  id v4 = a2;
  -[PKPassShareActivationOption setValueLength:](v4, "setValueLength:", [a3 integerValue]);
}

id *sub_1003D906C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)PDBalanceManager;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v11, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      id v9 = objc_storeWeak(a1 + 2, v7);
      sub_1003D624C((uint64_t)v7, a1, 2);
    }
  }

  return a1;
}

void sub_1003D911C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = (id *)(a1 + 16);
    id v3 = a2;
    id WeakRetained = objc_loadWeakRetained(v2);
    sub_1003D6104((uint64_t)WeakRetained, v3);
  }
}

id sub_1003D92C4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = [a3 stateIdentifier];
    id v7 = v6;
    if (v6)
    {
      id v8 = v6;
    }
    else
    {
      id v8 = [v5 defaultStateIdentifier];
    }
    id v9 = v8;

    id v10 = [v5 states];
    objc_super v11 = [v10 objectForKey:v9];
    a1 = [v11 stateTypeDefaultV2];
  }
  return a1;
}

uint64_t sub_1003D954C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = [a2 valueTypeForeignReference];
    if ([v6 foreignReferenceType] == (id)1)
    {
      id v7 = [v6 content];
      id v8 = v7;
      if (v7)
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        void v12[2] = sub_1003D9664;
        void v12[3] = &unk_10074F688;
        id v13 = v7;
        id v9 = objc_msgSend(v5, "pk_anyObjectPassingTest:", v12);
        if (v9) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = 2;
        }
      }
      else
      {
        uint64_t v10 = 2;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id sub_1003D9664(uint64_t a1, void *a2)
{
  id v3 = [a2 identifiers];
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

void sub_1003DA5A0(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountDetails *)v3 setLastUpdatedDate:v4];
}

void sub_1003DA600(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountDetails *)v3 setCreatedDate:v4];
}

void sub_1003DA660(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKCreditAccountDetails *)v3 setMergeDate:v4];
}

void sub_1003DA6C0(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_1003DA6C8(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_1003DA6D0(id a1, PKCreditAccountDetails *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    id v5 = +[NSTimeZone timeZoneWithName:a3];
    [(PKCreditAccountDetails *)v4 setProductTimeZone:v5];
  }
}

void sub_1003DA750(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountDetails setTermsAcceptanceRequired:](v4, "setTermsAcceptanceRequired:", [a3 BOOLValue]);
}

void sub_1003DA7A8(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = +[NSURL URLWithString:a3];
  [(PKCreditAccountDetails *)v4 setTermsURL:v5];
}

void sub_1003DA820(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_1003DA828(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = +[NSURL URLWithString:a3];
  [(PKCreditAccountDetails *)v4 setAssociatedPassURL:v5];
}

void sub_1003DA8A0(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_1003DA8A8(id a1, PKCreditAccountDetails *a2, id a3)
{
}

void sub_1003DA8B0(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountDetails setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_1003DA908(id a1, PKCreditAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKCreditAccountDetails setRewardsDestination:](v4, "setRewardsDestination:", [a3 integerValue]);
}

void sub_1003DAB6C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

#error "1003DC3CC: too big function (funcsize=0)"

void sub_1003EE95C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  id v7 = a4[1];
  id v8 = a4[2];
  id v9 = v8;
  if (v6) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v8 != 0)
  {
    uint64_t v12 = [v7 BOOLValue];
    if ([v9 BOOLValue]) {
      v12 |= 2uLL;
    }
    id v13 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 134218242;
      uint64_t v20 = v12;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Migrating settings: %ld for Pass with unqiue identifier: %@", (uint8_t *)&v19, 0x16u);
    }

    id v14 = a4[3];
    id v15 = [v14 integerValue];
    uint64_t v16 = 72;
    if (v15 != (id)1) {
      uint64_t v16 = 0;
    }
    if (v15) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 3;
    }
    uint64_t v18 = [*(id *)(a1 + 32) objectSettingsManager];
    sub_10045B634((uint64_t)v18, v12, v6, v17);
  }
}

void sub_1003EEC48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 passType] == (id)1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = [v3 uniqueID];
    id v6 = +[Pass anyInDatabase:v4 withUniqueID:v5];

    id v7 = +[PaymentApplication paymentApplicationsInDatabase:*(void *)(a1 + 32) forPass:v6];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        objc_super v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(*((void *)&v12 + 1) + 8 * (void)v11) setInAppPINRequiredAmount:0];
          objc_super v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }
    +[PaymentApplication updatePaymentApplications:v7 forPass:v6 inDatabase:*(void *)(a1 + 32)];
  }
}

void sub_1003EF1E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 uniqueID];
  id v11 = +[Pass anyInDatabase:v3 withUniqueID:v5];

  id v6 = [v4 nfcPayload];
  [v11 updateWithNFCPayload:v6];

  id v7 = [v4 associatedPassTypeIdentifiers];
  [v11 updateWithAssociatedPassTypeIdentifiers:v7];

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = [v4 passTypeIdentifier];

  uint64_t v10 = +[PassType anyInDatabase:v8 withPassTypeID:v9];

  [v10 updateIdentifierHash];
}

void sub_1003EF410(uint64_t a1, void *a2)
{
  id v24 = a2;
  BOOL v3 = [v24 style] == (id)6;
  id v4 = v24;
  if (v3)
  {
    id v5 = [v24 dataAccessor];
    id v6 = [v5 dictionary];

    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [v24 uniqueID];
    id v9 = +[Pass anyInDatabase:v7 withUniqueID:v8];

    uint64_t v10 = [v6 PKStringForKey:PKPassKeyTransactionServiceURL];
    if ([v10 length])
    {
      id v11 = [v6 PKStringForKey:PKPassKeyTransactionPushTopic];
      unint64_t v12 = [v11 length] != 0;
    }
    else
    {
      unint64_t v12 = 0;
    }

    uint64_t v13 = PKPassKeySupportsDPANNotifications;
    long long v14 = [v6 objectForKey:PKPassKeySupportsDPANNotifications];

    id v15 = (id)v12;
    if (v14) {
      id v15 = [v6 PKBoolForKey:v13];
    }
    uint64_t v16 = +[NSNumber numberWithBool:v15];
    [v9 setValue:v16 forProperty:@"supports_dpan_notifications"];

    uint64_t v17 = PKPassKeySupportsFPANNotifications;
    uint64_t v18 = [v6 objectForKey:PKPassKeySupportsFPANNotifications];

    if (v18) {
      unint64_t v12 = (unint64_t)[v6 PKBoolForKey:v17];
    }
    int v19 = +[NSNumber numberWithBool:v12];
    [v9 setValue:v19 forProperty:@"supports_fpan_notifications"];

    uint64_t v20 = PKPassKeySupportsDefaultCardSelection;
    __int16 v21 = [v6 objectForKey:PKPassKeySupportsDefaultCardSelection];

    if (v21) {
      uint64_t v22 = (uint64_t)[v6 PKBoolForKey:v20];
    }
    else {
      uint64_t v22 = 1;
    }
    id v23 = +[NSNumber numberWithBool:v22];
    [v9 setValue:v23 forProperty:@"supports_default_card_selection"];

    id v4 = v24;
  }
}

void sub_1003EFA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EFA50(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v5)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v6 = +[NSUUID UUID];
          uint64_t v7 = [v6 UUIDString];
          uint64_t v8 = [v5 stringValue];
          id v9 = +[NSString stringWithFormat:@"UPDATE payment_transaction SET identifier = '%@', processed_for_location = '1' WHERE pid = '%@'", v7, v8];

          if (!sub_10000C100(*(void *)(a1 + 32), v9)) {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
          }
        }
      }

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003EFC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1003EFCA4(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    do
    {
      id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if (v5)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"UPDATE payment_application SET temp_payment_type = %ld WHERE pid = %ld", PKPaymentMethodTypeForString(), [v4 integerValue]);
          if (!sub_10000C100(*(void *)(a1 + 32), v6)) {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
          }
        }
      }
    }
    while ((sub_1000140E0((uint64_t)SQLiteDatabase, a2) & 1) != 0);
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    BOOL result = sub_10035D060(*(void *)(a1 + 32), @"payment_application", @"payment_type");
    if (result) {
      BOOL result = sub_10035D5D0(*(void *)(a1 + 32), @"payment_application", @"temp_payment_type", @"payment_type");
    }
  }
  else
  {
    BOOL result = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1003EFEF8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [a2 uniqueID];
  id v6 = +[Pass anyInDatabase:v3 withUniqueID:v4];

  id v5 = [v6 groupingProfile];
  if ([v5 isNFCEnabled])
  {
    [v5 setNFCEnabled:0];
    [*(id *)(a1 + 40) adjustGroupsAfterUpdatingPass:v6 oldGroupingProfile:v5];
  }
}

void sub_1003F01F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F020C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v5)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v6 = +[NSUUID UUID];
          uint64_t v7 = [v6 UUIDString];
          uint64_t v8 = [v5 stringValue];
          id v9 = +[NSString stringWithFormat:@"UPDATE payment_transaction SET identifier = '%@' WHERE pid = '%@'", v7, v8];

          if (!sub_10000C100(*(void *)(a1 + 32), v9)) {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
          }
        }
      }

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003F0468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F0480(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v5)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v6 = +[NSUUID UUID];
          uint64_t v7 = [v6 UUIDString];
          uint64_t v8 = [v5 stringValue];
          id v9 = +[NSString stringWithFormat:@"UPDATE payment_message SET identifier = '%@' WHERE pid = '%@'", v7, v8];

          if (!sub_10000C100(*(void *)(a1 + 32), v9)) {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
          }
        }
      }

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003F0688(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 passType] == (id)1)
  {
    id v4 = [v3 dataAccessor];
    id v5 = [v4 dictionary];

    uint64_t v6 = [v5 PKArrayContaining:objc_opt_class() forKey:PKPassKeyPaymentApplications];
    uint64_t v7 = (void *)v6;
    if (v6) {
      uint64_t v8 = (void *)v6;
    }
    else {
      uint64_t v8 = &__NSArray0__struct;
    }
    id v9 = v8;

    id v37 = v5;
    uint64_t v10 = [v5 PKArrayContaining:objc_opt_class() forKey:PKPassKeyAuxiliaryPaymentApplications];
    id v11 = (void *)v10;
    if (v10) {
      unint64_t v12 = (void *)v10;
    }
    else {
      unint64_t v12 = &__NSArray0__struct;
    }
    id v13 = v12;

    id v34 = v13;
    char v35 = v9;
    id v40 = [v9 arrayByAddingObjectsFromArray:v13];
    uint64_t v14 = *(void *)(a1 + 32);
    id v38 = v3;
    id v15 = [v3 uniqueID];
    uint64_t v16 = +[Pass anyInDatabase:v14 withUniqueID:v15];

    uint64_t v36 = a1;
    __int16 v33 = (void *)v16;
    +[PaymentApplication paymentApplicationsInDatabase:*(void *)(a1 + 32) forPass:v16];
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v17 = [obj countByEnumeratingWithState:&v49 objects:v54 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v50;
      uint64_t v20 = PKPassPaymentApplicationsKeyAID;
      uint64_t v44 = PKPassPaymentApplicationsKeySuspendedReason;
      uint64_t v39 = *(void *)v50;
      do
      {
        __int16 v21 = 0;
        id v41 = v18;
        do
        {
          if (*(void *)v50 != v19) {
            objc_enumerationMutation(obj);
          }
          uint64_t v22 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v21);
          if ([v22 state] == (id)9)
          {
            uint64_t v43 = v21;
            long long v47 = 0u;
            long long v48 = 0u;
            long long v45 = 0u;
            long long v46 = 0u;
            id v23 = v40;
            id v24 = [v23 countByEnumeratingWithState:&v45 objects:v53 count:16];
            if (v24)
            {
              id v25 = v24;
              uint64_t v26 = *(void *)v46;
              do
              {
                for (i = 0; i != v25; i = (char *)i + 1)
                {
                  if (*(void *)v46 != v26) {
                    objc_enumerationMutation(v23);
                  }
                  dispatch_time_t v28 = *(void **)(*((void *)&v45 + 1) + 8 * i);
                  uint64_t v29 = [v22 applicationIdentifier];
                  uint64_t v30 = [v28 objectForKey:v20];
                  unsigned int v31 = [v29 isEqual:v30];

                  if (v31)
                  {
                    __int16 v32 = [v28 PKStringForKey:v44];
                    [v22 setSuspendedReason:v32];
                  }
                }
                id v25 = [v23 countByEnumeratingWithState:&v45 objects:v53 count:16];
              }
              while (v25);
            }

            uint64_t v19 = v39;
            id v18 = v41;
            __int16 v21 = v43;
          }
          __int16 v21 = (char *)v21 + 1;
        }
        while (v21 != v18);
        id v18 = [obj countByEnumeratingWithState:&v49 objects:v54 count:16];
      }
      while (v18);
    }
    +[PaymentApplication updatePaymentApplications:obj forPass:v33 inDatabase:*(void *)(v36 + 32)];

    id v3 = v38;
  }
}

void sub_1003F0B10(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = [v3 uniqueID];
  id v7 = +[Pass anyInDatabase:v2 withUniqueID:v4];

  id v5 = [v3 hasStoredValue];
  uint64_t v6 = +[NSNumber numberWithBool:v5];
  [v7 setValue:v6 forProperty:@"has_stored_value"];
}

void sub_1003F0DAC(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [v8 uniqueID];
    id v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

    uint64_t v6 = [v8 paymentPass];
    id v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v6 isCobranded]);
    [v5 setValue:v7 forProperty:@"cobranded"];
  }
}

void sub_1003F0F74(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [v8 uniqueID];
    id v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

    uint64_t v6 = [v8 paymentPass];
    id v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v6 supportsSerialNumberBasedProvisioning]);
    [v5 setValue:v7 forProperty:@"supports_serial_number_based_provisioning"];
  }
}

void sub_1003F114C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F1164(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    uint64_t v5 = PKMaxDefaultPerPassPaymentTransactionHistory;
    do
    {
      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"DELETE FROM payment_transaction WHERE pass_pid = %ld AND NOT (transaction_sources & %ld) ORDER BY transaction_date DESC LIMIT 100000 OFFSET %ld;",
          [v6 unsignedLongValue],
          2,
        id v7 = v5);
        uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
        if (*(unsigned char *)(v8 + 24))
        {
          BOOL v9 = sub_10000C100(*(void *)(a1 + 32), v7);
          uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
        }
        else
        {
          BOOL v9 = 0;
        }
        *(unsigned char *)(v8 + 24) = v9;
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003F1480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003F1498(uint64_t a1, sqlite3_stmt *a2)
{
  while (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (!sub_1000140E0((uint64_t)SQLiteDatabase, a2)) {
      break;
    }
    id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
    id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      id v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"UPDATE pass SET has_background_image = %d, has_strip_image = %d WHERE pid = %lld", v5 != 0, v6 != 0, [v4 longLongValue]);
      if (!sub_10000C100(*(void *)(a1 + 32), v7)) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      }
    }
  }
}

void sub_1003F239C(uint64_t a1, void *a2)
{
  id v12 = a2;
  BOOL v3 = [v12 passType] == (id)1;
  id v4 = v12;
  if (v3)
  {
    id v5 = [v12 dataAccessor];
    id v6 = [v5 dictionary];

    id v7 = [v6 PKStringForKey:PKPassKeyIssuerCountryCode];
    uint64_t v8 = *(void *)(a1 + 32);
    BOOL v9 = [v12 uniqueID];
    uint64_t v10 = +[Pass anyInDatabase:v8 withUniqueID:v9];

    if (v7)
    {
      [v10 setValue:v7 forProperty:@"issuer_country_code"];
    }
    else
    {
      id v11 = +[NSNull null];
      [v10 setValue:v11 forProperty:@"issuer_country_code"];
    }
    id v4 = v12;
  }
}

BOOL sub_1003F2D3C(uint64_t a1, void *a2, void *a3)
{
  return sub_10035D5D0(*(void *)(a1 + 32), @"felica_transit_applet_state", a2, a3);
}

void sub_1003F4034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F404C(uint64_t a1)
{
  BOOL v2 = sub_10035D008(*(void *)(a1 + 32), @"transit_applet_state", @"en_route_flags BLOB");
  if (v2) {
    LOBYTE(v2) = sub_10035D008(*(void *)(a1 + 32), @"felica_transit_applet_state", @"en_route_flags BLOB");
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    goto LABEL_10;
  }
  BOOL v3 = +[SQLiteComparisonPredicate predicateWithProperty:@"in_station" equalToValue:&__kCFBooleanTrue];
  id v4 = +[SQLiteEntity queryWithDatabase:*(void *)(a1 + 32) predicate:v3];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1003F43A8;
  v21[3] = &unk_10074B530;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v22 = v5;
  uint64_t v23 = v6;
  [v4 enumeratePersistentIDsAndProperties:0 usingBlock:v21];

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    goto LABEL_10;
  }
  id v7 = +[SQLiteComparisonPredicate predicateWithProperty:@"in_station" equalToValue:&__kCFBooleanTrue];
  uint64_t v8 = +[SQLiteComparisonPredicate predicateWithProperty:@"in_shinkansen_station" equalToValue:&__kCFBooleanTrue];
  uint64_t v9 = *(void *)(a1 + 32);
  v25[0] = v7;
  v25[1] = v8;
  uint64_t v10 = +[NSArray arrayWithObjects:v25 count:2];
  id v11 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v10];
  id v12 = +[SQLiteEntity queryWithDatabase:v9 predicate:v11];

  v24[0] = @"in_station";
  v24[1] = @"in_shinkansen_station";
  id v13 = +[NSArray arrayWithObjects:v24 count:2];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  _DWORD v18[2] = sub_1003F44FC;
  v18[3] = &unk_10074B530;
  id v14 = *(id *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  id v19 = v14;
  uint64_t v20 = v15;
  [v12 enumeratePersistentIDsAndProperties:v13 usingBlock:v18];

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    BOOL v16 = sub_10035D060(*(void *)(a1 + 32), @"transit_applet_state", @"in_station");
    if (v16)
    {
      BOOL v16 = sub_10035D060(*(void *)(a1 + 32), @"felica_transit_applet_state", @"in_station");
      if (v16)
      {
        BOOL v16 = sub_10035D060(*(void *)(a1 + 32), @"felica_transit_applet_state", @"in_shinkansen_station");
        if (v16) {
          LOBYTE(v16) = sub_10035CE40(*(void *)(a1 + 32), 12011);
        }
      }
    }
  }
  else
  {
LABEL_10:
    LOBYTE(v16) = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v16;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1003F43A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v8 = [(SQLiteEntity *)[TransitAppletState alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v9 + 24))
  {
    CFStringRef v13 = @"TransitMetro";
    uint64_t v10 = +[NSArray arrayWithObjects:&v13 count:1];
    id v11 = +[NSKeyedArchiver archivedDataWithRootObject:v10 requiringSecureCoding:1 error:0];
    id v12 = v11;
    if (!v11)
    {
      id v12 = +[NSNull null];
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(SQLiteEntity *)v8 setValue:v12 forProperty:@"en_route_flags"];
    if (!v11) {
  }
    }
  else
  {
    *(unsigned char *)(v9 + 24) = 0;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a6 = 1;
  }
}

void sub_1003F44FC(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, unsigned char *a6)
{
  id v15 = [objc_alloc((Class)NSMutableArray) initWithCapacity:2];
  if ([*a4 BOOLValue]) {
    [v15 addObject:@"Transit"];
  }
  if ([a4[1] BOOLValue]) {
    [v15 addObject:@"TransitTrainShinkansen"];
  }
  uint64_t v10 = [(SQLiteEntity *)[FelicaTransitAppletState alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v11 + 24))
  {
    id v12 = [v15 copy];
    CFStringRef v13 = +[NSKeyedArchiver archivedDataWithRootObject:v12 requiringSecureCoding:1 error:0];
    id v14 = v13;
    if (!v13)
    {
      id v14 = +[NSNull null];
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(SQLiteEntity *)v10 setValue:v14 forProperty:@"en_route_flags"];
    if (!v13) {
  }
    }
  else
  {
    *(unsigned char *)(v11 + 24) = 0;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a6 = 1;
  }
}

void sub_1003F4754(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v10 = v3;
  id v5 = [v3 uniqueID];
  uint64_t v6 = +[Pass anyInDatabase:v4 withUniqueID:v5];

  if ([v6 passFlavor] == (id)1)
  {
    id v7 = [v10 dataAccessor];
    uint64_t v8 = [v7 dictionary];

    uint64_t v9 = [v8 valueForKey:PKPassKeyAssociatedAccountServiceAccountIdentifier];
    [v6 updateWithAssociatedAccountIdentifier:v9];
  }
}

void sub_1003F4D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F4D90(uint64_t a1)
{
  BOOL v2 = sub_10035D008(*(void *)(a1 + 32), @"payment_transaction", @"start_station_latitude REAL");
  if (v2)
  {
    BOOL v2 = sub_10035D008(*(void *)(a1 + 32), @"payment_transaction", @"start_station_longitude REAL");
    if (v2)
    {
      BOOL v2 = sub_10035D008(*(void *)(a1 + 32), @"payment_transaction", @"end_station_latitude REAL");
      if (v2)
      {
        BOOL v2 = sub_10035D008(*(void *)(a1 + 32), @"payment_transaction", @"end_station_longitude REAL");
        if (v2) {
          LOBYTE(v2) = sub_10035CE40(*(void *)(a1 + 32), 12020);
        }
      }
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1003F5EF0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 uniqueID];
  id v11 = +[Pass anyInDatabase:v3 withUniqueID:v5];

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = [v4 uniqueID];

  uint64_t v8 = [v6 lowBalanceReminderAmountForPassWithUniqueID:v7];

  if (v11 && [v8 integerValue])
  {
    id v9 = [objc_alloc((Class)PKPaymentBalanceReminder) initWithThreshold:v8 isEnabled:1];
    id v10 = +[BalanceReminder insertOrUpdateBalanceReminder:v9 forBalanceIdentifier:0 pass:v11 database:*(void *)(a1 + 32)];
  }
}

void sub_1003F6AC0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 paymentPass];
  long long v49 = v2;
  id v4 = v2;
  id v5 = (void *)v3;
  uint64_t v6 = [v4 uniqueID];
  long long v56 = v6;
  long long v48 = v5;
  if (v5 && [v5 hasAssociatedPeerPaymentAccount])
  {
    +[Account accountsInDatabase:*(void *)(a1 + 32)];
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v7 = [obj countByEnumeratingWithState:&v66 objects:v74 count:16];
    if (!v7) {
      goto LABEL_55;
    }
    id v8 = v7;
    uint64_t v9 = *(void *)v67;
    uint64_t v50 = *(void *)v67;
    while (1)
    {
      id v10 = 0;
      id v51 = v8;
      do
      {
        if (*(void *)v67 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v66 + 1) + 8 * (void)v10);
        if ([v11 feature] == (id)2)
        {
          long long v53 = v10;
          id v12 = [v11 accountIdentifier];
          CFStringRef v13 = +[AccountEvent accountEventsForAccountIdentifier:v12 altDSID:0 types:&off_10078C558 startDate:0 endDate:0 orderedByDate:1 limit:0 inDatabase:*(void *)(a1 + 32)];

          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          id v14 = v13;
          id v15 = [v14 countByEnumeratingWithState:&v62 objects:v73 count:16];
          if (!v15) {
            goto LABEL_32;
          }
          id v16 = v15;
          uint64_t v17 = *(void *)v63;
          while (1)
          {
            for (i = 0; i != v16; i = (char *)i + 1)
            {
              if (*(void *)v63 != v17) {
                objc_enumerationMutation(v14);
              }
              id v19 = [*(id *)(*((void *)&v62 + 1) + 8 * i) identifier];
              if (v19)
              {
                uint64_t v20 = +[PaymentTransaction anyInDatabase:*(void *)(a1 + 32) withReferenceIdentifier:v19];
                __int16 v21 = v20;
                if (v20)
                {
                  id v22 = [v20 passUniqueIdentifier];
                  id v23 = v56;
                  id v24 = v23;
                  if (v22 == v23)
                  {

                    goto LABEL_22;
                  }
                  if (v56 && v22)
                  {
                    unsigned int v25 = [v22 isEqualToString:v23];

                    if (!v25) {
                      goto LABEL_29;
                    }
LABEL_22:
                    uint64_t v26 = [v21 paymentTransaction];
                    id v22 = v26;
                    if (v26 && [v26 suppressBehavior] != (id)1)
                    {
                      uint64_t v27 = PKLogFacilityTypeGetObject();
                      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)long long buf = 138412290;
                        uint64_t v72 = v19;
                        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Suppressing transaction for identifier: %@", buf, 0xCu);
                      }

                      [v22 setSuppressBehavior:1];
                      [v21 updateWithPaymentTransaction:v22];
                    }
                  }
                  else
                  {
                  }
                }
LABEL_29:
              }
            }
            id v16 = [v14 countByEnumeratingWithState:&v62 objects:v73 count:16];
            if (!v16)
            {
LABEL_32:

              uint64_t v6 = v56;
              uint64_t v9 = v50;
              id v8 = v51;
              id v10 = v53;
              break;
            }
          }
        }
        id v10 = (char *)v10 + 1;
      }
      while (v10 != v8);
      id v8 = [obj countByEnumeratingWithState:&v66 objects:v74 count:16];
      if (!v8) {
        goto LABEL_55;
      }
    }
  }
  dispatch_time_t v28 = [v5 associatedAccountServiceAccountIdentifier];

  if (v28)
  {
    id obj = [*(id *)(a1 + 40) transactionSourceIdentifiersForPassUniqueIdentifier:v6];
    uint64_t v29 = +[PaymentTransaction paymentTransactionsInDatabase:forTransactionSourceIdentifiers:withRedemptionType:startDate:endDate:](PaymentTransaction, "paymentTransactionsInDatabase:forTransactionSourceIdentifiers:withRedemptionType:startDate:endDate:", *(void *)(a1 + 32));
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    id v30 = [v29 countByEnumeratingWithState:&v58 objects:v70 count:16];
    if (v30)
    {
      id v31 = v30;
      uint64_t v32 = *(void *)v59;
      uint64_t v54 = *(void *)v59;
      long long v55 = v29;
      do
      {
        for (j = 0; j != v31; j = (char *)j + 1)
        {
          if (*(void *)v59 != v32) {
            objc_enumerationMutation(v29);
          }
          id v34 = *(void **)(*((void *)&v58 + 1) + 8 * (void)j);
          if (![v34 redemptionType])
          {
            char v35 = [v34 serviceIdentifier];
            uint64_t v36 = +[AccountEvent redemptionAccountEventWithTransactionIdentifier:v35 inDatabase:*(void *)(a1 + 32)];

            id v37 = [v36 items];
            id v38 = [v37 anyObject];

            if (v38)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v39 = [v38 status];
                if (v39 == @"success"
                  || (id v40 = v39) != 0
                  && (unsigned int v41 = [(__CFString *)v39 isEqualToString:@"success"],
                      v40,
                      v40,
                      v41))
                {
                  objc_msgSend(v34, "setRedemptionType:", objc_msgSend(v38, "type"));
                  uint64_t v42 = *(void *)(a1 + 32);
                  uint64_t v43 = [v34 serviceIdentifier];
                  uint64_t v44 = [v34 transactionSourceIdentifier];
                  long long v45 = +[PaymentTransaction anyInDatabase:v42 withServiceIdentifier:v43 forTransactionSourceIdentifier:v44];

                  [v45 updateWithPaymentTransaction:v34];
                  long long v46 = PKLogFacilityTypeGetObject();
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                  {
                    long long v47 = [v34 serviceIdentifier];
                    *(_DWORD *)long long buf = 138412290;
                    uint64_t v72 = v47;
                    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Updating transaction as redeemed for identifier: %@", buf, 0xCu);
                  }
                  uint64_t v6 = v56;
                  uint64_t v32 = v54;
                  uint64_t v29 = v55;
                }
              }
            }
          }
        }
        id v31 = [v29 countByEnumeratingWithState:&v58 objects:v70 count:16];
      }
      while (v31);
    }

LABEL_55:
  }
}

void sub_1003F8060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1003F807C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained setShouldSyncTransactionsToCloudStore:1];
    id WeakRetained = v2;
  }
}

void sub_1003F8A78(uint64_t a1)
{
  id v2 = PKSharedCacheGetDictionaryForKey();
  if (v2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003F8B20;
    v3[3] = &unk_10074F930;
    id v4 = *(id *)(a1 + 32);
    [v2 enumerateKeysAndObjectsUsingBlock:v3];
  }
}

void sub_1003F8B20(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && v6 && v5) {
      +[CloudStoreChangeToken saveChangeToken:v5 forZoneWithName:v6 inDatabase:*(void *)(a1 + 32)];
    }
  }
}

void sub_1003F8DB0(uint64_t a1)
{
  id v2 = PKSharedCacheGetArrayForKey();
  dispatch_time_t v28 = PKSharedCacheGetDictionaryForKey();
  uint64_t v27 = PKSharedCacheGetDictionaryForKey();
  uint64_t v26 = PKSharedCacheGetDictionaryForKey();
  unsigned int v25 = PKSharedCacheGetDictionaryForKey();
  uint64_t v3 = PKSharedCacheGetArrayForKey();
  if (v2
    && (uint64_t v4 = PKCloudStoreTransactionsZoneName,
        [v2 containsObject:PKCloudStoreTransactionsZoneName]))
  {
    id v5 = [objc_alloc((Class)CKRecordZoneID) initWithZoneName:v4 ownerName:CKCurrentUserDefaultName];
    id v6 = objc_alloc((Class)PKCloudStoreZone);
    id v7 = [v6 initWithZoneID:v5 containerName:PKCloudStoreApplePayContainerName scope:2];
  }
  else
  {
    id v7 = 0;
  }
  uint64_t v8 = PKCloudStorePassesZoneName;
  id v23 = v2;
  if (v3)
  {
    if ([v3 containsObject:PKCloudStorePassesZoneName])
    {
      id v9 = [objc_alloc((Class)CKRecordZoneID) initWithZoneName:v8 ownerName:CKCurrentUserDefaultName];
      id v10 = objc_alloc((Class)PKCloudStoreZone);
      unint64_t v11 = (unint64_t)[v10 initWithZoneID:v9 containerName:PKCloudStorePassesContainerName scope:2];
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = PKCloudStoreRemoteAssestsZoneName;
    if ([v3 containsObject:PKCloudStoreRemoteAssestsZoneName])
    {
      id v14 = [objc_alloc((Class)CKRecordZoneID) initWithZoneName:v13 ownerName:CKCurrentUserDefaultName];
      id v15 = objc_alloc((Class)PKCloudStoreZone);
      unint64_t v12 = (unint64_t)[v15 initWithZoneID:v14 containerName:PKCloudStorePassesContainerName scope:2];
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = PKCloudStoreRemoteAssestsZoneName;
  }
  id v16 = +[CloudStoreChangeToken changeTokenForZoneWithName:PKCloudStoreTransactionsZoneName inDatabase:*(void *)(a1 + 32)];
  id v24 = +[CloudStoreChangeToken changeTokenForZoneWithName:v8 inDatabase:*(void *)(a1 + 32)];
  uint64_t v17 = +[CloudStoreChangeToken changeTokenForZoneWithName:v13 inDatabase:*(void *)(a1 + 32)];
  uint64_t v48 = 0;
  long long v49 = &v48;
  uint64_t v50 = 0x3032000000;
  id v51 = sub_100020D6C;
  long long v52 = sub_1000211A8;
  id v53 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = &v42;
  uint64_t v44 = 0x3032000000;
  long long v45 = sub_100020D6C;
  long long v46 = sub_1000211A8;
  id v47 = 0;
  uint64_t v36 = 0;
  id v37 = &v36;
  uint64_t v38 = 0x3032000000;
  uint64_t v39 = sub_100020D6C;
  id v40 = sub_1000211A8;
  id v41 = 0;
  if (v28)
  {
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_1003F9450;
    v35[3] = &unk_10074F958;
    void v35[4] = &v48;
    [v28 enumerateKeysAndObjectsUsingBlock:v35];
  }
  if (v27)
  {
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_1003F953C;
    v33[3] = &unk_10074F930;
    id v34 = v7;
    [v27 enumerateKeysAndObjectsUsingBlock:v33];
  }
  if (v26)
  {
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1003F9608;
    v32[3] = &unk_10074F980;
    void v32[4] = &v42;
    void v32[5] = &v36;
    [v26 enumerateKeysAndObjectsUsingBlock:v32];
  }
  if (v25)
  {
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    void v29[2] = sub_1003F9714;
    v29[3] = &unk_10074F9A8;
    id v30 = (id)v11;
    id v31 = (id)v12;
    [v25 enumerateKeysAndObjectsUsingBlock:v29];
  }
  if (v7)
  {
    id v18 = +[CloudStoreContainerDatabase insertOrUpdateCloudStoreDatabaseWithContainerName:PKCloudStoreApplePayContainerName scope:2 inDatabase:*(void *)(a1 + 32)];
    id v19 = +[CloudStoreZone insertOrUpdateCloudStoreZone:v7 forContainerDatabase:v18 inDatabase:*(void *)(a1 + 32)];
    +[CloudStoreZone updateChangeToken:v16 fetchTimestamp:v49[5] forCloudStoreZone:v7 inContainerDatabase:v18 inDatabase:*(void *)(a1 + 32)];
  }
  if (v11 | v12)
  {
    uint64_t v20 = +[CloudStoreContainerDatabase insertOrUpdateCloudStoreDatabaseWithContainerName:PKCloudStorePassesContainerName scope:2 inDatabase:*(void *)(a1 + 32)];
    if (v11)
    {
      id v21 = +[CloudStoreZone insertOrUpdateCloudStoreZone:v11 forContainerDatabase:v20 inDatabase:*(void *)(a1 + 32)];
      +[CloudStoreZone updateChangeToken:v24 fetchTimestamp:v43[5] forCloudStoreZone:v11 inContainerDatabase:v20 inDatabase:*(void *)(a1 + 32)];
    }
    if (v12)
    {
      id v22 = +[CloudStoreZone insertOrUpdateCloudStoreZone:v12 forContainerDatabase:v20 inDatabase:*(void *)(a1 + 32)];
      +[CloudStoreZone updateChangeToken:v17 fetchTimestamp:v37[5] forCloudStoreZone:v12 inContainerDatabase:v20 inDatabase:*(void *)(a1 + 32)];
    }
  }
  _Block_object_dispose(&v36, 8);

  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v48, 8);
}

void sub_1003F9418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 184), 8);
  _Block_object_dispose((const void *)(v38 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1003F9450(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v9 = a2;
  id v7 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v8 = v7;
      if (v9 && v8 && [v9 isEqualToString:PKCloudStoreTransactionsZoneName])
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
        *a4 = 1;
      }
    }
  }
}

void sub_1003F953C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = v7;
      if (v6 && v5 && [v5 isEqualToString:PKCloudStoreTransactionsZoneName]) {
        [*(id *)(a1 + 32) setZoneSubscriptionIdentifier:v6];
      }
    }
  }
}

void sub_1003F9608(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = v10;
      id v7 = v5;
      id v8 = v7;
      if (!v6 || !v7) {
        goto LABEL_10;
      }
      if ([v6 isEqualToString:PKCloudStorePassesZoneName])
      {
        uint64_t v9 = *(void *)(a1 + 32);
      }
      else
      {
        if (![v6 isEqualToString:PKCloudStoreRemoteAssestsZoneName])
        {
LABEL_10:

          goto LABEL_11;
        }
        uint64_t v9 = *(void *)(a1 + 40);
      }
      objc_storeStrong((id *)(*(void *)(v9 + 8) + 40), a3);
      goto LABEL_10;
    }
  }
LABEL_11:
}

void sub_1003F9714(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = v10;
      id v7 = v5;
      id v8 = v7;
      if (!v6 || !v7) {
        goto LABEL_10;
      }
      if ([v7 isEqualToString:PKCloudStorePassesZoneName])
      {
        uint64_t v9 = (id *)(a1 + 32);
      }
      else
      {
        if (![v8 isEqualToString:PKCloudStoreRemoteAssestsZoneName])
        {
LABEL_10:

          goto LABEL_11;
        }
        uint64_t v9 = (id *)(a1 + 40);
      }
      [*v9 setZoneSubscriptionIdentifier:v6];
      goto LABEL_10;
    }
  }
LABEL_11:
}

void sub_1003F9A04(uint64_t a1)
{
  +[TransitAppletState allStatesInDatabase:*(void *)(a1 + 32)];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v23 = v38 = 0u;
  id obj = [v23 allObjects];
  id v2 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v36;
    uint64_t v27 = PKPaymentBalanceStoredValueDefaultIdentifier;
    uint64_t v25 = PKPaymentBalanceLoyaltyBalanceDefaultIdentifier;
    uint64_t v26 = PKNoCurrencyCode;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v36 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        id v7 = [v6 transitAppletState];
        id v8 = [v7 balance];

        if (v8)
        {
          id v9 = objc_alloc((Class)PKCurrencyAmount);
          id v10 = [v7 balance];
          unint64_t v11 = [v7 currency];
          id v12 = [v9 initWithAmount:v10 currency:v11 exponent:0];

          id v13 = [objc_alloc((Class)PKPaymentBalance) initWithIdentifier:v27 forCurrencyAmount:v12];
        }
        else
        {
          id v13 = 0;
        }
        id v14 = [v7 loyaltyBalance];

        if (v14)
        {
          id v15 = objc_alloc((Class)PKCurrencyAmount);
          id v16 = [v7 loyaltyBalance];
          uint64_t v17 = v16;
          if (v16)
          {
            [v16 decimalValue];
          }
          else
          {
            v33[0] = 0;
            v33[1] = 0;
            int v34 = 0;
          }
          id v18 = +[NSDecimalNumber decimalNumberWithDecimal:v33];
          id v19 = [v15 initWithAmount:v18 currency:v26 exponent:0];

          id v14 = [objc_alloc((Class)PKPaymentBalance) initWithIdentifier:v25 forCurrencyAmount:v19];
        }
        uint64_t v20 = +[Pass anyInDatabase:withPersistentID:](Pass, "anyInDatabase:withPersistentID:", *(void *)(a1 + 32), [v6 paymentPassPid]);
        id v21 = v20;
        if (v20)
        {
          uint64_t v22 = *(void *)(a1 + 32);
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472;
          v28[2] = sub_1003F9D80;
          v28[3] = &unk_100733638;
          id v29 = v20;
          id v30 = *(id *)(a1 + 32);
          id v31 = v13;
          id v32 = v14;
          sub_10000817C(v22, v28);
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    }
    while (v3);
  }
}

uint64_t sub_1003F9D80(void *a1)
{
  +[PaymentBalance deleteEntitiesForPass:a1[4] inDatabase:a1[5]];
  uint64_t v2 = a1[6];
  if (v2) {
    id v3 = +[PaymentBalance insertPaymentBalance:v2 withPaymentPass:a1[4] inDatabase:a1[5]];
  }
  uint64_t v4 = a1[7];
  if (v4) {
    id v5 = +[PaymentBalance insertPaymentBalance:v4 withPaymentPass:a1[4] inDatabase:a1[5]];
  }
  return 1;
}

void sub_1003FA304(uint64_t a1, void *a2)
{
  id v7 = [a2 uniqueID];
  id v3 = +[Pass anyInDatabase:*(void *)(a1 + 32) withUniqueID:v7];
  [*(id *)(a1 + 40) commutePlanRenewalReminderTimeIntervalForPassWithUniqueID:v7];
  if (v3)
  {
    id v5 = [objc_alloc((Class)PKPaymentCommutePlanReminder) initWithTimeInterval:v4];
    id v6 = +[CommutePlanReminder insertOrUpdateCommutePlanReminder:v5 forCommutePlanIdentifier:PKPassPaymentLegacyCommutePlanIdentifier pass:v3 database:*(void *)(a1 + 32)];
  }
}

void sub_1003FA7C0(uint64_t a1)
{
  uint64_t v2 = +[PaymentApplication paymentApplicationsInDatabase:*(void *)(a1 + 32)];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) setSupportsServiceMode:1];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
  +[PaymentApplication updatePaymentApplications:v2 inDatabase:*(void *)(a1 + 32)];
}

void sub_1003FA9BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 secureElementPass];
  unsigned int v5 = [v4 hasCredentials];

  if (v5)
  {
    id v6 = [v3 dataAccessor];
    long long v7 = [v6 dictionary];

    uint64_t v26 = a1;
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = [v3 uniqueID];
    uint64_t v25 = +[Pass anyInDatabase:v8 withUniqueID:v9];

    long long v10 = [v7 objectForKey:PKPassKeyPaymentApplications];
    unint64_t v11 = [v7 objectForKey:PKPassKeyAuxiliaryPaymentApplications];
    id v12 = +[NSMutableSet set];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v13 = v10;
    id v14 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v32;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v32 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v31 + 1) + 8 * (void)v17) auxiliaryApplication:0];
          [v12 addObject:v18];

          uint64_t v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
      }
      while (v15);
    }

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v19 = v11;
    id v20 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v28;
      do
      {
        id v23 = 0;
        do
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v27 + 1) + 8 * (void)v23) auxiliaryApplication:1];
          [v12 addObject:v24];

          id v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }
      while (v21);
    }

    +[PaymentApplication updatePaymentApplications:v12 forPass:v25 inDatabase:*(void *)(v26 + 32)];
  }
}

void sub_1003FB578(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1003FB59C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 transactionSourceIdentifier];
  unsigned int v5 = +[TransactionSource anyInDatabase:*(void *)(a1 + 32) withIdentifier:v4];
  if (!v5)
  {
    unsigned int v5 = +[TransactionSource insertTransactionSourceWithType:0 inDatabase:*(void *)(a1 + 32)];
    id v6 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      long long v7 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 persistentID]);
      uint64_t v8 = [v5 identifier];
      int v13 = 138412546;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Created transaction source with pid %@ and identifier %@", (uint8_t *)&v13, 0x16u);
    }
    if (v5)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        long long v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 persistentID]);
        long long v10 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 persistentID]);
        int v13 = 138412546;
        id v14 = v9;
        __int16 v15 = 2112;
        uint64_t v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting payment application %@ to transaction source with pid %@", (uint8_t *)&v13, 0x16u);
      }
      unint64_t v11 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 persistentID]);
      [v3 setValue:v11 forProperty:@"transaction_source_pid"];
    }
  }

  return v5;
}

id sub_1003FB7E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 transactionSourceIdentifier];
  unsigned int v5 = +[TransactionSource anyInDatabase:*(void *)(a1 + 32) withIdentifier:v4];
  if (!v5)
  {
    unsigned int v5 = +[TransactionSource insertTransactionSourceWithType:0 inDatabase:*(void *)(a1 + 32)];
    id v6 = [v5 persistentID];
    id v7 = [v3 persistentID];
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      long long v9 = +[NSNumber numberWithLongLong:v6];
      long long v10 = [v5 identifier];
      int v14 = 138412546;
      __int16 v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Created transaction source with pid %@ and identifier %@", (uint8_t *)&v14, 0x16u);
    }
    if (v5)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v11 = +[NSNumber numberWithLongLong:v7];
        id v12 = +[NSNumber numberWithLongLong:v6];
        int v14 = 138412546;
        __int16 v15 = v11;
        __int16 v16 = 2112;
        uint64_t v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting pass %@ to transaction source with pid %@", (uint8_t *)&v14, 0x16u);
      }
      [v3 updateWithTransactionSourcePID:v6];
    }
  }

  return v5;
}

void sub_1003FB9F4(uint64_t a1, sqlite3_stmt *a2)
{
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Populating source_pid for all transactions.", buf, 2u);
  }

  uint64_t v26 = a1;
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    *(void *)&long long v5 = 138412290;
    long long v25 = v5;
    long long v27 = a2;
    do
    {
      id v6 = (__CFString *)SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      long long v9 = +[PaymentTransaction anyInDatabase:*(void *)(a1 + 32) withPID:v6];
      long long v10 = +[PaymentApplication anyInDatabase:withPersistentID:](PaymentApplication, "anyInDatabase:withPersistentID:", *(void *)(a1 + 32), [v7 longLongValue]);
      unint64_t v11 = +[Pass anyInDatabase:withPersistentID:](Pass, "anyInDatabase:withPersistentID:", *(void *)(a1 + 32), [v8 longLongValue]);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138413570;
        CFStringRef v29 = v6;
        __int16 v30 = 2112;
        long long v31 = v9;
        __int16 v32 = 2112;
        id v33 = v7;
        __int16 v34 = 2112;
        long long v35 = v10;
        __int16 v36 = 2112;
        id v37 = v8;
        __int16 v38 = 2112;
        uint64_t v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transaction with pid %@, %@. Has payment application pid %@, %@. Has pass pid %@, %@", buf, 0x3Eu);
      }

      if (v10 && [v7 longLongValue])
      {
        id v12 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
      }
      else
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = v25;
          CFStringRef v29 = v9;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "There is no payment application defined for payment transaction %@. Using the source from the pass.", buf, 0xCu);
        }

        id v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
      }
      int v13 = v12();
      int v14 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v13 persistentID]);
      [(__CFString *)v9 setValue:v14 forProperty:@"source_pid"];

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v15 = +[NSNumber numberWithLongLong:[(__CFString *)v9 persistentID]];
        +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v13 persistentID]);
        __int16 v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v29 = v15;
        __int16 v30 = 2112;
        long long v31 = v16;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting transaction %@ with transaction source pid %@", buf, 0x16u);

        a1 = v26;
      }

      a2 = v27;
    }
    while ((sub_1000140E0((uint64_t)SQLiteDatabase, v27) & 1) != 0);
  }
  unsigned int v17 = objc_msgSend(*(id *)(a1 + 40), "containsObject:", @"pass_pid", v25);
  unsigned int v18 = [*(id *)(a1 + 40) containsObject:@"payment_application_pid"];
  if (v17)
  {
    uint64_t v19 = *(void *)(*(void *)(v26 + 64) + 8);
    if (*(unsigned char *)(v19 + 24))
    {
      BOOL v20 = sub_10035D060(*(void *)(v26 + 32), @"payment_transaction", @"pass_pid");
      uint64_t v19 = *(void *)(*(void *)(v26 + 64) + 8);
    }
    else
    {
      BOOL v20 = 0;
    }
    *(unsigned char *)(v19 + 24) = v20;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(*(void *)(*(void *)(v26 + 64) + 8) + 24)) {
        CFStringRef v21 = @"YES";
      }
      else {
        CFStringRef v21 = @"NO";
      }
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed column pass_pid with success %@", buf, 0xCu);
    }
  }
  if (v18)
  {
    uint64_t v22 = *(void *)(*(void *)(v26 + 64) + 8);
    if (*(unsigned char *)(v22 + 24))
    {
      BOOL v23 = sub_10035D060(*(void *)(v26 + 32), @"payment_transaction", @"payment_application_pid");
      uint64_t v22 = *(void *)(*(void *)(v26 + 64) + 8);
    }
    else
    {
      BOOL v23 = 0;
    }
    *(unsigned char *)(v22 + 24) = v23;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(*(void *)(*(void *)(v26 + 64) + 8) + 24)) {
        CFStringRef v24 = @"YES";
      }
      else {
        CFStringRef v24 = @"NO";
      }
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v29 = v24;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed column payment_application_pid with success %@", buf, 0xCu);
    }
  }
}

void sub_1003FBF24(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting _migrateFrom13402To14000 databasePopulationOperation", buf, 2u);
  }

  if ([v3 passType] == (id)1)
  {
    long long v5 = [v3 uniqueID];
    id v6 = +[PaymentApplication predicateForPassWithUniqueIdentifier:v5];

    id v7 = +[SQLiteEntity queryWithDatabase:*(void *)(a1 + 32) predicate:v6];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1003FC08C;
    v8[3] = &unk_100735068;
    id v9 = *(id *)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    [v7 enumeratePersistentIDsAndProperties:0 usingBlock:v8];
  }
}

void sub_1003FC08C(uint64_t a1, uint64_t a2)
{
  id v4 = [(SQLiteEntity *)[PaymentApplication alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  long long v5 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = +[NSNumber numberWithLongLong:a2];
    int v8 = 138412546;
    id v9 = v6;
    __int16 v10 = 2112;
    unint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Payment application pid %@: %@", (uint8_t *)&v8, 0x16u);
  }
  if (v4)
  {
    id v7 = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Added transaction source to payment application pid %@", (uint8_t *)&v8, 0xCu);
    }
  }
}

uint64_t sub_1003FC36C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    p_cache = PDCloudStoreTokenRecordFetchConfiguration.cache;
    p_info = &OBJC_METACLASS___PDSharingStatefulProvisioningManager.info;
    do
    {
      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      if (v8)
      {
        id v9 = objc_msgSend(p_cache + 253, "anyInDatabase:withPersistentID:", *(void *)(a1 + 32), objc_msgSend(v7, "longLongValue"));
        __int16 v10 = [v9 transactionSourceIdentifier];
        unint64_t v11 = [p_info + 401 anyInDatabase:*(void *)(a1 + 32) withIdentifier:v10];
        if (!v11)
        {
          id v12 = [p_info + 401 insertTransactionSourceWithType:1 inDatabase:*(void *)(a1 + 32)];
          unint64_t v11 = v12;
          if (v12)
          {
            int v13 = p_info;
            int v14 = p_cache;
            __int16 v15 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v12 persistentID]);
            [v9 setValue:v15 forProperty:@"transaction_source_pid"];

            p_cache = v14;
            p_info = v13;
          }
        }
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003FC4CC(uint64_t a1)
{
  uint64_t v2 = PKSharedCacheGetDictionaryForKey();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003FC58C;
  v4[3] = &unk_10074F9A8;
  id v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 enumerateKeysAndObjectsUsingBlock:v4];
  PKSharedCacheSetObjectForKey();
}

void sub_1003FC58C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v7 = v6;
      id v8 = [*(id *)(a1 + 32) transactionSourceIdentifiersForPassUniqueIdentifier:v5];
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v14;
        do
        {
          id v12 = 0;
          do
          {
            if (*(void *)v14 != v11) {
              objc_enumerationMutation(v8);
            }
            [*(id *)(a1 + 40) setObject:v7 forKey:*(void *)(*((void *)&v13 + 1) + 8 * (void)v12)];
            id v12 = (char *)v12 + 1;
          }
          while (v10 != v12);
          id v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v10);
      }
    }
  }
}

void sub_1003FC980(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = [v10 valueForProperty:@"container_database_pid"];
  id v4 = +[CloudStoreContainerDatabase anyInDatabase:withPID:](CloudStoreContainerDatabase, "anyInDatabase:withPID:", *(void *)(a1 + 32), [v3 longLongValue]);
  id v5 = v4;
  if (v3 && v4 && ([v4 existsInDatabase] & 1) != 0)
  {
    id v6 = v5;
  }
  else
  {
    id v7 = [v10 valueForProperty:@"container_name"];
    id v6 = +[CloudStoreContainerDatabase anyInDatabase:*(void *)(a1 + 32) withContainerName:v7 scope:2];

    if (v6 && [v6 existsInDatabase])
    {
    }
    else
    {
      uint64_t v8 = +[CloudStoreContainerDatabase insertOrUpdateCloudStoreDatabaseWithContainerName:v7 scope:2 inDatabase:*(void *)(a1 + 32)];

      id v6 = (void *)v8;
      if (!v8) {
        goto LABEL_10;
      }
    }
  }
  id v9 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v6 persistentID]);
  [v10 setValue:v9 forProperty:@"container_database_pid"];

LABEL_10:
}

uint64_t sub_1003FCAEC(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:]([CloudStoreZone alloc], "initWithPersistentID:inDatabase:", [v5 longLongValue], *(void *)(a1 + 32));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      [(SQLiteEntity *)v6 setValue:CKCurrentUserDefaultName forProperty:@"zone_owner"];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1003FD3E4(uint64_t a1)
{
  uint64_t v2 = +[PaymentApplication paymentApplicationsInDatabase:*(void *)(a1 + 32)];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) setSupportsServiceMode:1];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
  +[PaymentApplication updatePaymentApplications:v2 inDatabase:*(void *)(a1 + 32)];
}

void sub_1003FD600(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 secureElementPass];
  unsigned int v5 = [v4 hasCredentials];

  if (v5)
  {
    id v6 = [v3 dataAccessor];
    long long v7 = [v6 dictionary];

    uint64_t v26 = a1;
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = [v3 uniqueID];
    long long v25 = +[Pass anyInDatabase:v8 withUniqueID:v9];

    long long v10 = [v7 objectForKey:PKPassKeyPaymentApplications];
    uint64_t v11 = [v7 objectForKey:PKPassKeyAuxiliaryPaymentApplications];
    id v12 = +[NSMutableSet set];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v13 = v10;
    id v14 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v32;
      do
      {
        unsigned int v17 = 0;
        do
        {
          if (*(void *)v32 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v31 + 1) + 8 * (void)v17) auxiliaryApplication:0];
          [v12 addObject:v18];

          unsigned int v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v31 objects:v36 count:16];
      }
      while (v15);
    }

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v19 = v11;
    id v20 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v28;
      do
      {
        BOOL v23 = 0;
        do
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v27 + 1) + 8 * (void)v23) auxiliaryApplication:1];
          [v12 addObject:v24];

          BOOL v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }
      while (v21);
    }

    +[PaymentApplication updatePaymentApplications:v12 forPass:v25 inDatabase:*(void *)(v26 + 32)];
  }
}

void sub_1003FE09C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1003FE120;
  v2[3] = &unk_10074A7A0;
  id v3 = v1;
  sub_100012DC8((uint64_t)v3, @"SELECT b, SUM(g) as sumg, h from apples WHERE b is not null AND g is not null AND (d == 1 OR d == 2)  GROUP BY b, h HAVING sumg > 0;",
    v2);
}

uint64_t sub_1003FE120(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = [v5 longLongValue];

      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = [v7 longLongValue];

      id v9 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      id v10 = [v9 longLongValue];

      CFStringRef v11 = @"eligible_eligible_rewards_percent_aggregate";
      if (v10 != (id)1) {
        CFStringRef v11 = 0;
      }
      if (v10 == (id)2) {
        CFStringRef v11 = @"eligible_rewards_cash_aggregate";
      }
      id v12 = +[NSString stringWithFormat:@"UPDATE payment_transaction SET %@ = ? WHERE pid = ?", v11];
      uint64_t v13 = *(void *)(a1 + 32);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_1003FE28C;
      void v14[3] = &unk_10074ADF0;
      void v14[4] = v8;
      void v14[5] = v6;
      sub_100012DC8(v13, v12, v14);

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_1003FE28C(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, *(void *)(a1 + 32));
  sqlite3_bind_int64(a2, 2, *(void *)(a1 + 40));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

uint64_t sub_1003FE510(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = [v5 longLongValue];

      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = v7;
      if (v7)
      {
        uint64_t v9 = *(void *)(a1 + 32);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_1003FE628;
        void v10[3] = &unk_10073AA10;
        id v11 = v7;
        id v12 = v6;
        sub_100012DC8(v9, @"UPDATE payment_transaction SET feature = ?, account_identifier = ? WHERE pid = ?", v10);
      }
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_1003FE628(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 1);
  sqlite3_bind_text(a2, 2, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int64(a2, 3, *(void *)(a1 + 40));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

void sub_1003FEA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FEA6C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v5) {
        [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v5];
      }

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_1003FEAE4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    uint64_t v22 = v24;
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = objc_msgSend(v5, "longLongValue", v22);

      id v7 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      id v8 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      id v9 = [v8 integerValue];

      id v10 = SQLiteCopyFoundationValueForStatementColumn(a2, 3);
      id v11 = [v10 longLongValue];

      id v12 = +[TransactionSource anyInDatabase:*(void *)(a1 + 32) withPersistentID:v11];
      uint64_t v13 = [v12 identifier];

      id v14 = *(void **)(a1 + 40);
      id v15 = v13;
      id v16 = v14;
      if (v15 == v16)
      {

LABEL_10:
        uint64_t v19 = *(void *)(a1 + 32);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        void v25[2] = sub_1003FED58;
        v25[3] = &unk_10073AA10;
        id v26 = *(id *)(a1 + 48);
        id v27 = v6;
        sub_100012DC8(v19, @"UPDATE payment_transaction SET account_xpc_type_t type = ?, account_identifier = ? WHERE pid = ?", v25);
        id v20 = v26;
LABEL_15:

        goto LABEL_16;
      }
      unsigned int v17 = v16;
      if (v15 && v16)
      {
        unsigned int v18 = [v15 isEqualToString:v16];

        if (v18) {
          goto LABEL_10;
        }
        if (!v7) {
          goto LABEL_16;
        }
      }
      else
      {

        if (!v7) {
          goto LABEL_16;
        }
      }
      if (!v9)
      {
        id v20 = +[Account anyInDatabase:*(void *)(*(void *)(a1 + 56) + 8) withIdentifier:v7];
        if (v20)
        {
          uint64_t v21 = *(void *)(a1 + 32);
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3221225472;
          v24[0] = sub_1003FEDDC;
          v24[1] = &unk_10073AE98;
          void v24[2] = v6;
          sub_100012DC8(v21, @"UPDATE payment_transaction SET account_xpc_type_t type = ? WHERE pid = ?", v23);
        }
        goto LABEL_15;
      }
LABEL_16:

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_1003FED58(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 1);
  sqlite3_bind_text(a2, 2, (const char *)[*(id *)(a1 + 32) UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int64(a2, 3, *(void *)(a1 + 40));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

uint64_t sub_1003FEDDC(uint64_t a1, sqlite3_stmt *a2)
{
  sqlite3_bind_int64(a2, 1, 2);
  sqlite3_bind_int64(a2, 2, *(void *)(a1 + 32));
  return sub_10035CD0C((uint64_t)SQLiteDatabase, a2);
}

void sub_1003FF178(uint64_t a1)
{
  uint64_t v2 = +[PaymentTransaction paymentTransactionsForTokenizedTransactionsWithRegionsInDatabase:*(void *)(a1 + 32)];
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    id v18 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Deassociating %lu transactions from regions", buf, 0xCu);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id obj = v2;
  id v4 = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        +[WorldRegion associateTransaction:v8 withWorldRegion:0 inDatabase:*(void *)(a1 + 32)];
        id v9 = [v8 identifier];
        id v10 = +[PKCoreSpotlightUtilities spotlightIdentifierForTransactionIdentifier:v9];
        +[SpotlightIndexerItem insertOrUpdateWithIdentifier:v10 domainIdentifier:0 searchableItemData:0 type:1 status:0 error:0 inDatabase:*(void *)(a1 + 32)];
      }
      id v5 = [obj countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_1003FFFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003FFFF4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) dbPeerPaymentAccount];
  id v53 = [v3 identifier];

  uint64_t v4 = PKCloudStoreApplePayContainerName;
  id v5 = [*v2 cloudStoreZonesForContainerDatabaseWithName:PKCloudStoreApplePayContainerName scope:2];
  uint64_t v6 = [*v2 cloudStoreZonesForContainerDatabaseWithName:v4 scope:3];
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v9 = v5;
  id v10 = [v9 countByEnumeratingWithState:&v67 objects:v79 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v68;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v68 != v11) {
          objc_enumerationMutation(v9);
        }
        long long v13 = *(void **)(*((void *)&v67 + 1) + 8 * i);
        long long v14 = [v13 zoneName];
        [v7 setObject:v13 forKey:v14];
      }
      id v10 = [v9 countByEnumeratingWithState:&v67 objects:v79 count:16];
    }
    while (v10);
  }

  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v15 = v6;
  id v16 = [v15 countByEnumeratingWithState:&v63 objects:v78 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v64;
    do
    {
      for (j = 0; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v64 != v17) {
          objc_enumerationMutation(v15);
        }
        uint64_t v19 = *(void **)(*((void *)&v63 + 1) + 8 * (void)j);
        id v20 = [v19 zoneName];
        [v8 setObject:v19 forKey:v20];
      }
      id v16 = [v15 countByEnumeratingWithState:&v63 objects:v78 count:16];
    }
    while (v16);
  }

  uint64_t v54 = [v7 objectForKey:PKCloudStoreTransactionsZoneName];
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    uint64_t v52 = PKApplePayContainerCashZoneNamePrefix;
    while (1)
    {
      id v61 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      uint64_t v21 = +[PaymentTransaction anyInDatabase:*(void *)(a1 + 40) withPID:v61];
      uint64_t v22 = +[PaymentTransactionArchive anyInDatabase:*(void *)(a1 + 40) forTransaction:v21];
      if (!v22)
      {
        uint64_t v22 = +[PaymentTransactionArchive insertTransactionArchiveForTransaction:v21 inDatabase:*(void *)(a1 + 40)];
      }
      long long v59 = v22;
      BOOL v23 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v22 persistentID]);
      [v21 setValue:v23 forProperty:@"archive_pid"];

      id v24 = [v21 valueForProperty:@"is_cloud_kit_archived"];
      unsigned int v55 = [v24 BOOLValue];

      long long v25 = [v21 valueForProperty:@"account_type"];
      id v26 = [v25 integerValue];

      long long v60 = [v21 valueForProperty:@"account_identifier"];
      id v27 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        long long v28 = [v21 identifier];
        long long v29 = [v21 serviceIdentifier];
        long long v30 = PKPaymentTransactionAccountTypeToString();
        *(_DWORD *)long long buf = 138413314;
        *(void *)&uint8_t buf[4] = v59;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v28;
        *(_WORD *)&buf[22] = 2112;
        long long v76 = v29;
        *(_WORD *)uint64_t v77 = 2112;
        *(void *)&v77[2] = v30;
        *(_WORD *)&v77[10] = 2112;
        *(void *)&v77[12] = v60;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Using transaction archive %@ for transaction identifier %@, service identifier %@, accountType %@, accountIdentifier %@", buf, 0x34u);
      }
      oslog = v27;

      if (v26 != (id)2) {
        break;
      }
      if (!v54)
      {
        long long v46 = v27;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v48 = [v21 identifier];
          *(_DWORD *)long long buf = 138412546;
          *(void *)&uint8_t buf[4] = v48;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v60;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Error: there is no cloud store zone for transaction %@ and card account %@", buf, 0x16u);

          id v35 = 0;
          long long v46 = v27;
        }
        else
        {
          id v35 = 0;
        }
LABEL_47:

        goto LABEL_48;
      }
      id v35 = [objc_alloc((Class)PKPaymentTransactionArchiveLocation) initWithType:0 archived:v55 cloudStoreZone:v54];
LABEL_40:
      if (v35)
      {
        uint64_t v43 = oslog;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          [v35 type];
          uint64_t v44 = PKPaymentTransactionArchiveLocationTypeToString();
          long long v45 = [v21 identifier];
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v35;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v44;
          *(_WORD *)&buf[22] = 2114;
          long long v76 = v45;
          _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Adding transaction archive location %@ of type %{public}@ for transaction identifier %{public}@", buf, 0x20u);

          uint64_t v43 = oslog;
        }

        long long v46 = +[NSSet setWithObject:v35];
        id v47 = +[PaymentTransactionArchiveLocation insertOrUpdateTransactionArchiveLocations:forArchivePID:inDatabase:](PaymentTransactionArchiveLocation, "insertOrUpdateTransactionArchiveLocations:forArchivePID:inDatabase:", v46, [v59 persistentID], *(void *)(a1 + 40));
        goto LABEL_47;
      }
LABEL_48:

      if ((sub_1000140E0((uint64_t)SQLiteDatabase, a2) & 1) == 0) {
        goto LABEL_53;
      }
    }
    if (v26 != (id)1)
    {
      id v35 = 0;
      goto LABEL_48;
    }
    id v31 = v53;
    id v32 = v60;
    long long v33 = v32;
    if (v31 == v32)
    {
      unsigned int v34 = 1;
    }
    else
    {
      unsigned int v34 = 0;
      if (v53 && v32) {
        unsigned int v34 = [v31 isEqualToString:v32];
      }
    }

    +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"SELECT peer_payment_account.cloud_store_zone_names from peer_payment_account WHERE identifier = \"%@\";",
    __int16 v36 = v33);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    long long v76 = sub_100020D6C;
    *(void *)uint64_t v77 = sub_1000211A8;
    *(void *)&v77[8] = 0;
    uint64_t v37 = *(void *)(a1 + 40);
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    v62[2] = sub_100400958;
    v62[3] = &unk_10073AE78;
    void v62[4] = buf;
    sub_100012DC8(v37, v36, v62);
    if (!v34)
    {
      id v35 = 0;
      char v42 = 1;
LABEL_39:
      _Block_object_dispose(buf, 8);

      if ((v42 & 1) == 0) {
        goto LABEL_48;
      }
      goto LABEL_40;
    }
    __int16 v38 = [v7 objectForKey:*(void *)(*(void *)&buf[8] + 40)];
    if (!v38)
    {
      uint64_t v39 = +[NSString stringWithFormat:@"%@%@", v52, v33];
      id v40 = *(void **)(*(void *)&buf[8] + 40);
      *(void *)(*(void *)&buf[8] + 40) = v39;

      __int16 v38 = [v7 objectForKey:*(void *)(*(void *)&buf[8] + 40)];
      if (!v38)
      {
        id v41 = v54;
        if (!v54)
        {
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
          {
            long long v49 = [v21 identifier];
            *(_DWORD *)id v71 = 138543618;
            uint64_t v72 = v49;
            __int16 v73 = 2112;
            id v74 = v33;
            _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Error: there is no cloud store zone for transaction %{public}@ and peer payment account identifier %@", v71, 0x16u);

            char v42 = 0;
            id v35 = 0;
            __int16 v38 = oslog;
          }
          else
          {
            __int16 v38 = oslog;
            char v42 = 0;
            id v35 = 0;
          }
          goto LABEL_37;
        }
        __int16 v38 = v41;
      }
    }
    id v35 = [objc_alloc((Class)PKPaymentTransactionArchiveLocation) initWithType:0 archived:v55 cloudStoreZone:v38];
    char v42 = 1;
LABEL_37:

    goto LABEL_39;
  }
LABEL_53:
  uint64_t v50 = *(void *)(*(void *)(a1 + 48) + 8);
  if (*(unsigned char *)(v50 + 24))
  {
    BOOL v51 = sub_10035D060(*(void *)(a1 + 40), @"payment_transaction", @"is_cloud_kit_archived");
    uint64_t v50 = *(void *)(*(void *)(a1 + 48) + 8);
  }
  else
  {
    BOOL v51 = 0;
  }
  *(unsigned char *)(v50 + 24) = v51;
}

void sub_100400930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_100400958(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    while (1)
    {
      id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      if (v4) {
        break;
      }
      if ((sub_1000140E0((uint64_t)SQLiteDatabase, a2) & 1) == 0) {
        return;
      }
    }
    id v9 = v4;
    id v5 = [v4 componentsSeparatedByString:@","];
    uint64_t v6 = [v5 firstObject];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_100400D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100400D20(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1000140E0((uint64_t)SQLiteDatabase, a2))
  {
    do
    {
      id v4 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v5 = [v4 longLongValue];

      id v6 = SQLiteCopyFoundationValueForStatementColumn(a2, 1);
      [v6 doubleValue];
      double v8 = v7;

      id v9 = SQLiteCopyFoundationValueForStatementColumn(a2, 2);
      uint64_t v10 = (uint64_t)[v9 integerValue];

      id v11 = SQLiteCopyFoundationValueForStatementColumn(a2, 3);
      [v11 doubleValue];
      double v13 = v12;

      id v14 = SQLiteCopyFoundationValueForStatementColumn(a2, 4);
      uint64_t v15 = (uint64_t)[v14 integerValue];

      if (v8 != 0.0)
      {
        id v16 = +[AccountEndpointBackOff insertIfNotExistsForAccountType:1 endpointType:2 accountPID:v5 inDatabase:*(void *)(a1 + 32)];
        if (v10 >= 1)
        {
          do
          {
            [v16 increaseBackoffLevel];
            --v10;
          }
          while (v10);
        }
      }
      if (v13 != 0.0)
      {
        uint64_t v17 = +[AccountEndpointBackOff insertIfNotExistsForAccountType:1 endpointType:1 accountPID:v5 inDatabase:*(void *)(a1 + 32)];
        if (v15 >= 1)
        {
          do
          {
            [v17 increaseBackoffLevel];
            --v15;
          }
          while (v15);
        }
      }
    }
    while ((sub_1000140E0((uint64_t)SQLiteDatabase, a2) & 1) != 0);
  }
  BOOL result = sub_10035D060(*(void *)(a1 + 32), @"peer_payment_account", @"associated_account_next_possible_fetch_date");
  if (result)
  {
    BOOL result = sub_10035D060(*(void *)(a1 + 32), @"peer_payment_account", @"account_next_possible_fetch_date");
    if (result)
    {
      BOOL result = sub_10035D060(*(void *)(a1 + 32), @"peer_payment_account", @"associated_account_backoff_level");
      if (result)
      {
        BOOL result = sub_10035D060(*(void *)(a1 + 32), @"peer_payment_account", @"account_backoff_level");
        if (result) {
          BOOL result = sub_10035CE40(*(void *)(a1 + 32), 14407);
        }
      }
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_100401C98(uint64_t a1, void *a2)
{
  id v28 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [v28 uniqueID];
  id v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

  id v6 = [v28 dataAccessor];
  double v7 = [v6 dictionary];

  uint64_t v8 = PKPassKeyExpirationDate;
  id v9 = [v7 objectForKey:PKPassKeyExpirationDate];

  if (!v9) {
    goto LABEL_7;
  }
  uint64_t v10 = [v7 PKDateForKey:v8];
  id v11 = +[NSDate date];
  [v10 timeIntervalSinceDate:v11];
  double v13 = v12;

  if (v13 < 0.0)
  {
    id v14 = [v28 secureElementPass];
    uint64_t v15 = v14;
    if (v14)
    {
      id v16 = [v14 passActivationState];
      BOOL v17 = v16 == (id)4;
      if (v16 == (id)4) {
        uint64_t v18 = 3;
      }
      else {
        uint64_t v18 = 1;
      }
    }
    else
    {
      BOOL v17 = 1;
      uint64_t v18 = 2;
    }
  }
  else
  {
LABEL_7:
    BOOL v17 = 0;
    uint64_t v18 = 1;
  }
  uint64_t v19 = PKPassKeyVoided;
  id v20 = [v7 objectForKey:PKPassKeyVoided];

  if (v20)
  {
    unsigned int v21 = [v7 PKBoolForKey:v19];
    if (v21) {
      uint64_t v18 = 4;
    }
  }
  else
  {
    unsigned int v21 = 0;
  }
  uint64_t v22 = PKPassKeyRelevantDate;
  BOOL v23 = [v7 objectForKey:PKPassKeyRelevantDate];

  if (v23)
  {
    id v24 = +[NSDate date];
    long long v25 = [v7 PKDateForKey:v22];
    [v24 timeIntervalSinceDate:v25];
    double v27 = v26;

    if (v27 >= 86400.0)
    {
      BOOL v17 = 1;
      uint64_t v18 = 5;
    }
  }
  [v5 updateWithSortingState:v21 | v17 forSortingReason:v18];
}

void sub_100402064(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 secureElementPass];
  unsigned int v5 = [v4 isCarKeyPass];

  if (v5)
  {
    id v6 = [v3 dataAccessor];
    double v7 = [v6 dictionary];

    uint64_t v37 = a1;
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = [v3 uniqueID];
    id v35 = +[Pass anyInDatabase:v8 withUniqueID:v9];

    uint64_t v10 = [v7 objectForKey:PKPassKeyPaymentApplications];
    __int16 v36 = v7;
    id v11 = [v7 objectForKey:PKPassKeyAuxiliaryPaymentApplications];
    id v12 = objc_alloc_init((Class)NSMutableSet);
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id v13 = v10;
    id v14 = [v13 countByEnumeratingWithState:&v51 objects:v58 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v52;
      do
      {
        BOOL v17 = 0;
        do
        {
          if (*(void *)v52 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v51 + 1) + 8 * (void)v17) auxiliaryApplication:0];
          [v12 addObject:v18];

          BOOL v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v51 objects:v58 count:16];
      }
      while (v15);
    }

    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v19 = v11;
    id v20 = [v19 countByEnumeratingWithState:&v47 objects:v57 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v48;
      do
      {
        BOOL v23 = 0;
        do
        {
          if (*(void *)v48 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v47 + 1) + 8 * (void)v23) auxiliaryApplication:1];
          [v12 addObject:v24];

          BOOL v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v47 objects:v57 count:16];
      }
      while (v21);
    }
    id v38 = v3;

    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v25 = v12;
    id v26 = [v25 countByEnumeratingWithState:&v43 objects:v56 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v44;
      do
      {
        long long v29 = 0;
        do
        {
          if (*(void *)v44 != v28) {
            objc_enumerationMutation(v25);
          }
          long long v30 = objc_msgSend(*(id *)(*((void *)&v43 + 1) + 8 * (void)v29), "subcredentials", v35);
          long long v39 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          id v31 = [v30 countByEnumeratingWithState:&v39 objects:v55 count:16];
          if (v31)
          {
            id v32 = v31;
            uint64_t v33 = *(void *)v40;
            do
            {
              unsigned int v34 = 0;
              do
              {
                if (*(void *)v40 != v33) {
                  objc_enumerationMutation(v30);
                }
                [*(id *)(*((void *)&v39 + 1) + 8 * (void)v34) setSupportedRadioTechnologies:1];
                unsigned int v34 = (char *)v34 + 1;
              }
              while (v32 != v34);
              id v32 = [v30 countByEnumeratingWithState:&v39 objects:v55 count:16];
            }
            while (v32);
          }

          long long v29 = (char *)v29 + 1;
        }
        while (v29 != v27);
        id v27 = [v25 countByEnumeratingWithState:&v43 objects:v56 count:16];
      }
      while (v27);
    }

    +[PaymentApplication updatePaymentApplications:v25 forPass:v35 inDatabase:*(void *)(v37 + 32)];
    id v3 = v38;
  }
}

void sub_100402EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100402ED0(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 integerValue];

      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_1004037B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004037C8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _migrateTableFrom2To4DecimalDigitsPrecision:*(void *)(a1 + 40)];
  if (v2)
  {
    unsigned int v2 = sub_10000C100(*(void *)(a1 + 40), @"CREATE TABLE IF NOT EXISTS apricots (a INTEGER); ");
    if (v2)
    {
      unsigned int v2 = [*(id *)(a1 + 32) _migrateAmountDecimalDigitsToVersion:1 inDatabase:*(void *)(a1 + 40)];
      if (v2) {
        LOBYTE(v2) = sub_10035CE40(*(void *)(a1 + 40), 14462);
      }
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

void sub_1004043E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004043FC(uint64_t a1)
{
  if (![*(id *)(a1 + 32) containsObject:@"pineapples"]
    || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 48))))
  {
    LOBYTE(v2) = sub_10035CE40(*(void *)(a1 + 40), 15001);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
}

void sub_10040467C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100404698(uint64_t a1)
{
  if ((![*(id *)(a1 + 32) containsObject:@"pineapples"]
     || (unsigned int v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 48))) != 0)
    && (![*(id *)(a1 + 32) containsObject:@"oranges"]
     || (unsigned int v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 56))) != 0))
  {
    unsigned int v2 = [*(id *)(a1 + 64) _migrateAmountDecimalDigitsToVersion:3 inDatabase:*(void *)(a1 + 40)];
    if (v2) {
      LOBYTE(v2) = sub_10035CE40(*(void *)(a1 + 40), 15002);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
}

uint64_t sub_100404734(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _migrateTableFrom2To4DecimalDigitsPrecision:*(void *)(a1 + 40)];
  if (v2)
  {
    unsigned int v2 = [*(id *)(a1 + 32) _migrateAmountDecimalDigitsToVersion:3 inDatabase:*(void *)(a1 + 40)];
    if (v2) {
      LOBYTE(v2) = sub_10035CE40(*(void *)(a1 + 40), 15002);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

void sub_100404A4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 secureElementPass];
  unsigned int v5 = [v4 hasCredentials];

  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    double v7 = [v3 uniqueID];
    uint64_t v8 = +[Pass anyInDatabase:v6 withUniqueID:v7];

    id v24 = (void *)v8;
    +[PaymentApplication paymentApplicationsInDatabase:*(void *)(*(void *)(a1 + 32) + 8) forPass:v8];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue();
    id v28 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
    if (v28)
    {
      uint64_t v26 = *(void *)v35;
      id v27 = v3;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v35 != v26) {
            objc_enumerationMutation(obj);
          }
          uint64_t v29 = v9;
          uint64_t v10 = *(void **)(*((void *)&v34 + 1) + 8 * v9);
          uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
          id v12 = [v3 uniqueID];
          id v13 = [v10 secureElementIdentifier];
          id v14 = [v10 applicationIdentifier];
          id v15 = +[PaymentApplication anyInDatabase:v11 withPassUniqueIdentifier:v12 secureElementIdentifier:v13 paymentApplicationIdentifier:v14];

          uint64_t v16 = +[AppletSubcredential appletSubcredentialsInDatabase:forPaymentApplicationPID:](AppletSubcredential, "appletSubcredentialsInDatabase:forPaymentApplicationPID:", *(void *)(*(void *)(a1 + 32) + 8), [v15 persistentID]);
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          id v17 = [v16 countByEnumeratingWithState:&v30 objects:v38 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v31;
            do
            {
              id v20 = 0;
              do
              {
                if (*(void *)v31 != v19) {
                  objc_enumerationMutation(v16);
                }
                id v21 = [*(id *)(*((void *)&v30 + 1) + 8 * (void)v20) identifier];
                uint64_t v22 = +[AppletSubcredential appletSubcredentialWithIdentifier:v21 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
                id v23 = +[AppletSubcredentialRangingSuspensionReasons insertOrUpdateSubcredentialRangingSuspensionReasonForCredential:v22 forPaymentApplication:v15 withReasons:0 inDatabase:*(void *)(a1 + 40)];

                id v20 = (char *)v20 + 1;
              }
              while (v18 != v20);
              id v18 = [v16 countByEnumeratingWithState:&v30 objects:v38 count:16];
            }
            while (v18);
          }

          uint64_t v9 = v29 + 1;
          id v3 = v27;
        }
        while ((id)(v29 + 1) != v28);
        id v28 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
      }
      while (v28);
    }
  }
}

void sub_100405530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100405548(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _migrateNSNotFoundTo4DecimalDigits:*(void *)(a1 + 40)];
  if (v2)
  {
    unsigned int v2 = [*(id *)(a1 + 32) _migrateAmountDecimalDigitsToVersion:3 inDatabase:*(void *)(a1 + 40)];
    if (v2) {
      LOBYTE(v2) = sub_10035CE40(*(void *)(a1 + 40), 15008);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
}

void sub_100405ACC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 passType] == (id)1)
  {
    id v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Regenerating payment fields for pass: %@", (uint8_t *)&v11, 0xCu);
    }

    unsigned int v5 = [v3 dataAccessor];
    uint64_t v6 = [v5 dictionary];

    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = [v3 uniqueID];
    uint64_t v9 = +[Pass anyInDatabase:v7 withUniqueID:v8];

    if (v6 && v9)
    {
      id v10 = [objc_alloc((Class)PKSecureElementPassFieldCollection) initWithPassDictionary:v6];
      [v9 updateWithSecureElementPassFields:v10];
    }
  }
}

void sub_100405DF8(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (![v6 passType] && objc_msgSend(v6, "isExpiredBasedOnSigningDate"))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [v6 uniqueID];
    unsigned int v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

    [v5 updateWithSortingState:1 forSortingReason:6];
  }
}

void sub_100406174(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [v8 uniqueID];
    unsigned int v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

    id v6 = [v8 paymentPass];
    uint64_t v7 = [v6 shippingAddressSeed];
    [v5 setValue:v7 forProperty:@"shipping_address_seed"];
  }
}

void sub_100406450(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10040646C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v5 = [v3 manifestHash];

    if (!v5)
    {
      id v6 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = [v3 uniqueID];
        int v13 = 138412290;
        id v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adding manifest hash for pass %@", (uint8_t *)&v13, 0xCu);
      }
      id v8 = [v3 dataAccessor];
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = [v3 uniqueID];
      int v11 = +[Pass anyInDatabase:v9 withUniqueID:v10];

      id v12 = [v8 manifestHash];
      [v11 setValue:v12 forProperty:@"manifest_hash"];
    }
  }
}

void sub_10040699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_1004069B4(uint64_t a1)
{
  BOOL v2 = sub_10000C100(*(void *)(a1 + 32), @"CREATE TABLE IF NOT EXISTS kohlrabi (pid INTEGER, a TEXT, b INTEGER, c TEXT, d TEXT, e TEXT, PRIMARY KEY (pid));");
  if (v2)
  {
    BOOL v2 = sub_10000C100(*(void *)(a1 + 32), @"CREATE TABLE IF NOT EXISTS bacon (pid INTEGER, a TEXT, PRIMARY KEY (pid));");
    if (v2)
    {
      BOOL v2 = sub_10000C100(*(void *)(a1 + 32), @"CREATE TABLE IF NOT EXISTS egg (pid INTEGER, a INTEGER, b TEXT, PRIMARY KEY (pid));");
      if (v2)
      {
        BOOL v2 = sub_10035D008(*(void *)(a1 + 32), @"cherimoya", @"i TEXT");
        if (v2)
        {
          BOOL v2 = sub_10035D008(*(void *)(a1 + 32), @"cherimoya", @"j TEXT");
          if (v2) {
            LOBYTE(v2) = sub_10035D008(*(void *)(a1 + 32), @"loquat", @"l TEXT");
          }
        }
      }
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    return 0;
  }
  unsigned int v3 = objc_msgSend(*(id *)(a1 + 40), "_tranansaction_migrateLegacyCarKeySharesInDatabase:", *(void *)(a1 + 32));
  if (v3) {
    LOBYTE(v3) = sub_10035CE40(*(void *)(a1 + 32), 15037);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v3;
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) != 0;
}

void sub_100406BD0(uint64_t a1, void *a2)
{
  id v8 = a2;
  if ([v8 passType] == (id)1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [v8 uniqueID];
    unsigned int v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

    id v6 = [v8 paymentPass];
    uint64_t v7 = [v6 shippingAddressSeed];
    [v5 setValue:v7 forProperty:@"shipping_address_seed"];
  }
}

void sub_100408A38(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [a2 uniqueID];
  unsigned int v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

  id v6 = [v5 persistentID];
  +[PassShare passSharesForPassPID:v6 inDatabase:*(void *)(a1 + 32)];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v7 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(obj);
        }
        int v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v12 = [v5 pass];
        int v13 = [v12 secureElementPass];
        unsigned int v14 = [v13 isCarKeyPass];

        if (v14) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = 2;
        }
        [v11 setManageability:v15];
        +[PassShare addPassShare:v11 forPassPID:v6 inDatabase:*(void *)(a1 + 32)];
      }
      id v8 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v8);
  }
}

void sub_100408DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100408DCC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "_tranansaction_migrateLegacyCarKeySharesInDatabase:", *(void *)(*(void *)(a1 + 32) + 8));
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

void sub_1004093F0(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = [v10 secureElementPass];
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = [v10 uniqueID];
    id v6 = +[Pass anyInDatabase:v4 withUniqueID:v5];

    id v7 = [v6 persistentID];
    id v8 = [v3 auxiliaryRegistrationRequirements];
    uint64_t v9 = [v8 allRequirements];
    +[PassAuxiliaryRegistrationRequirement insertOrUpdateAuxiliaryRegistrationRequirements:v9 passPID:v7 inDatabase:*(void *)(a1 + 32)];
  }
}

void sub_10040A698(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ([v6 supportsIssuerBinding])
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = [v6 uniqueID];
    unsigned int v5 = +[Pass anyInDatabase:v3 withUniqueID:v4];

    [v5 updateWithSupportsIssuerBinding:1];
  }
}

uint64_t sub_10040B154(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
  if (result)
  {
    do
    {
      id v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
      id v6 = [v5 longLongValue];

      +[PayLaterInstallment updatePayoffDateForInstallmentPID:v6 inDatabase:*(void *)(a1 + 32)];
      uint64_t result = sub_1000140E0((uint64_t)SQLiteDatabase, a2);
    }
    while ((result & 1) != 0);
  }
  return result;
}

void sub_10040BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10040BE50(uint64_t a1)
{
  BOOL v2 = +[SQLiteEntity anyInDatabase:*(void *)(a1 + 32) predicate:0];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v2 persistentID]);
    id v5 = +[SQLiteComparisonPredicate predicateWithProperty:@"a" equalToValue:v4];

    id v6 = +[SQLiteEntity anyInDatabase:*(void *)(a1 + 32) predicate:v5];
    if (!v6)
    {
      id v7 = [v3 valueForProperty:@"d"];
      if (v7)
      {
        v14[0] = @"a";
        id v8 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v3 persistentID]);
        v14[1] = @"b";
        v15[0] = v8;
        v15[1] = v7;
        uint64_t v9 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];

        id v10 = [(SQLiteEntity *)[AppleBalanceAccountSummary alloc] initWithPropertyValues:v9 inDatabase:*(void *)(a1 + 32)];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v10 != 0;
      }
      else
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
      }
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    BOOL v11 = sub_10035D060(*(void *)(a1 + 32), @"broccoli", @"d");
    if (v11) {
      LOBYTE(v11) = sub_10035CE40(*(void *)(a1 + 32), 16101);
    }
  }
  else
  {
    LOBYTE(v11) = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v11;
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

  return v12;
}

void sub_10040C6B0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10040C6C8(uint64_t a1)
{
  if ((![*(id *)(a1 + 32) containsObject:@"ice_cream_banana"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 48))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_amount_modifiers"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 56))))
    && (![*(id *)(a1 + 32) containsObject:@"starfruits"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 64))))
    && (![*(id *)(a1 + 32) containsObject:@"strawberries"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 72))))
    && (![*(id *)(a1 + 32) containsObject:@"peer_payment_account"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 80))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_application"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 88))))
    && (![*(id *)(a1 + 32) containsObject:@"persimmon"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 96))))
    && (![*(id *)(a1 + 32) containsObject:@"mulberry"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 104))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_fee"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 112))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_balance"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 120))))
    && (![*(id *)(a1 + 32) containsObject:@"transit_applet_state_balance"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 128))))
    && (![*(id *)(a1 + 32) containsObject:@"avocados"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 136))))
    && (![*(id *)(a1 + 32) containsObject:@"apples"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 144))))
    && (![*(id *)(a1 + 32) containsObject:@"lucuma"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 152))))
    && (![*(id *)(a1 + 32) containsObject:@"watermelons"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 160))))
    && (![*(id *)(a1 + 32) containsObject:@"fig"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 168))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_tag"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 176))))
    && (![*(id *)(a1 + 32) containsObject:@"jostaberry"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 184))))
    && (![*(id *)(a1 + 32) containsObject:@"tomatoes"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 192))))
    && (![*(id *)(a1 + 32) containsObject:@"oranges"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 200))))
    && (![*(id *)(a1 + 32) containsObject:@"bananas"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 208))))
    && (![*(id *)(a1 + 32) containsObject:@"kiwi"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 216))))
    && (![*(id *)(a1 + 32) containsObject:@"peer_payment_account_feature_descriptor"]|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 224))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"breadfruit")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 232))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"coconuts")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 240))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"raisin")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 248))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"lychees")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 256))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"payment_transaction_amount")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 264))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"payment_transaction")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 272))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"transit_applet_state")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 280))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"prickly_pear")
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 288))))
    && (![*(id *)(a1 + 32) containsObject:@"payment_transaction_awards"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 296))))
    && (![*(id *)(a1 + 32) containsObject:@"pineapples"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 304))))
    && (![*(id *)(a1 + 32) containsObject:@"gojiberry"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 312))))
    && (![*(id *)(a1 + 32) containsObject:@"rambutans"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 320))))
    && (![*(id *)(a1 + 32) containsObject:@"currant"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 328))))
    && (![*(id *)(a1 + 32) containsObject:@"account_historical_balance"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 336))))
    && (![*(id *)(a1 + 32) containsObject:@"lemon"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 344))))
    && (![*(id *)(a1 + 32) containsObject:@"tomatillo"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 352))))
    && (![*(id *)(a1 + 32) containsObject:@"carrot"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 360))))
    && (![*(id *)(a1 + 32) containsObject:@"celery"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 368))))
    && (![*(id *)(a1 + 32) containsObject:@"apple_balance_dtu_promotion_configuration"]|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 376))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"credit_account_merge_summary")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 384))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"credit_account_merge_summary")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 384))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"credit_account_merge_summary_account_details")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 392))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"feijoa")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 400))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"feijoa")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 400))))&& (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", @"quinoa")|| (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 408))))
    && (![*(id *)(a1 + 32) containsObject:@"okra"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 416))))
    && (![*(id *)(a1 + 32) containsObject:@"oregano"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 424))))
    && (![*(id *)(a1 + 32) containsObject:@"wasabi"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 432))))
    && (![*(id *)(a1 + 32) containsObject:@"guanabana"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 440))))
    && (![*(id *)(a1 + 32) containsObject:@"marionberry"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 448))))
    && (![*(id *)(a1 + 32) containsObject:@"pineberry"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 456))))
    && (![*(id *)(a1 + 32) containsObject:@"peer_payment_requests"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 464))))
    && (![*(id *)(a1 + 32) containsObject:@"bokchoy"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 472))))
    && (![*(id *)(a1 + 32) containsObject:@"rhubarb"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 480))))
    && (![*(id *)(a1 + 32) containsObject:@"eggplant"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 488))))
    && (![*(id *)(a1 + 32) containsObject:@"cranberry"]
     || (BOOL v2 = sub_10000C100(*(void *)(a1 + 40), *(void **)(a1 + 496)))))
  {
    LOBYTE(v2) = sub_10035CE40(*(void *)(a1 + 40), 16104);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 504) + 8) + 24) = v2;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 504) + 8) + 24);
}

void sub_10040D1A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 relevantDate];
  id v5 = [v3 relevantDates];
  id v6 = v5;
  if (v4 && ![v5 count])
  {
    id v7 = [objc_alloc((Class)PKPassRelevantDate) initWithRelevantDate:v4];
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = [v3 uniqueID];
    id v10 = +[Pass anyInDatabase:v8 withUniqueID:v9];

    id v12 = v7;
    BOOL v11 = +[NSArray arrayWithObjects:&v12 count:1];
    +[PassRelevancyDates insertPassRelevancyDates:forPassPID:inDatabase:](PassRelevancyDates, "insertPassRelevancyDates:forPassPID:inDatabase:", v11, [v10 persistentID], *(void *)(a1 + 32));
  }
}

void sub_10040EC08(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dbPeerPaymentAccount];
  +[PeerPaymentAccountFeatureDescriptor updateFeatureDescriptorsSupportedForPeerPaymentAccount:v2 inDatabase:*(void *)(a1 + 40)];
}

void sub_10040F228(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 dataAccessor];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = [v3 uniqueID];

  id v7 = +[Pass anyInDatabase:v5 withUniqueID:v6];

  if (v4 && v7)
  {
    +[PassRelevancyDates deleteEntitiesForPassPID:inDatabase:](PassRelevancyDates, "deleteEntitiesForPassPID:inDatabase:", [v7 persistentID], *(void *)(a1 + 32));
    uint64_t v8 = [v4 dictionary];
    uint64_t v9 = [v8 objectForKey:PKPassKeyRelevantDates];
    uint64_t v10 = [v8 PKDateForKey:PKPassKeyRelevantDate];
    BOOL v11 = (void *)v10;
    if (v9)
    {
      id v12 = objc_msgSend(v9, "pk_createArrayBySafelyApplyingBlock:", &stru_10074FBA0);
      +[PassRelevancyDates insertPassRelevancyDates:forPassPID:inDatabase:](PassRelevancyDates, "insertPassRelevancyDates:forPassPID:inDatabase:", v12, [v7 persistentID], *(void *)(a1 + 32));
    }
    else
    {
      if (!v10) {
        goto LABEL_6;
      }
      id v13 = [objc_alloc((Class)PKPassRelevantDate) initWithRelevantDate:v10];
      id v12 = v13;
      if (v13)
      {
        id v15 = v13;
        unsigned int v14 = +[NSArray arrayWithObjects:&v15 count:1];
        +[PassRelevancyDates insertPassRelevancyDates:forPassPID:inDatabase:](PassRelevancyDates, "insertPassRelevancyDates:forPassPID:inDatabase:", v14, [v7 persistentID], *(void *)(a1 + 32));
      }
    }

LABEL_6:
  }
}

PKPassRelevantDate *__cdecl sub_10040F410(id a1, NSDictionary *a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)PKPassRelevantDate) initWithDictionary:v2];

  return (PKPassRelevantDate *)v3;
}

void sub_10040F5C4(uint64_t a1, void *a2)
{
  id v7 = a2;
  if ([v7 passType] == (id)1)
  {
    id v3 = [v7 secureElementPass];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = [v7 uniqueID];
    id v6 = +[Pass anyInDatabase:v4 withUniqueID:v5];

    objc_msgSend(v6, "updateWithContactlessActivationGroupingType:", objc_msgSend(v3, "contactlessActivationGroupingType"));
  }
}

void sub_10040FA24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 secureElementPass];
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 updateDevicePaymentApplicationsWithSecureElementIdentifiers:*(void *)(a1 + 32)];
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [v3 uniqueID];
    uint64_t v8 = +[Pass anyInDatabase:v6 withUniqueID:v7];

    id v9 = [v8 persistentID];
    uint64_t v10 = [v5 auxiliaryRegistrationRequirements];
    uint64_t v11 = [v10 allRequirements];

    id v12 = (void *)v11;
    +[PassAuxiliaryRegistrationRequirement insertOrUpdateAuxiliaryRegistrationRequirements:v11 passPID:v9 inDatabase:*(void *)(a1 + 40)];
    id v13 = objc_alloc_init(PDRemoteAssetDecryptionManager);
    unsigned int v14 = [v5 dataAccessor];
    id v15 = [v14 remoteAssetManagerForSEIDs:*(void *)(a1 + 32)];

    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v36 = v15;
    uint64_t v16 = [v15 deviceSpecificItems];
    id v17 = [v16 countByEnumeratingWithState:&v42 objects:v47 count:16];
    if (v17)
    {
      id v18 = v17;
      long long v35 = v8;
      uint64_t v37 = a1;
      int v19 = 0;
      uint64_t v20 = *(void *)v43;
      do
      {
        for (i = 0; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v43 != v20) {
            objc_enumerationMutation(v16);
          }
          uint64_t v22 = *(void *)(*((void *)&v42 + 1) + 8 * i);
          if ([(PDRemoteAssetDecryptionManager *)v13 assetRequiresDecryption:v22]) {
            v19 |= [(PDRemoteAssetDecryptionManager *)v13 decryptAsset:v22 forPass:v5];
          }
        }
        id v18 = [v16 countByEnumeratingWithState:&v42 objects:v47 count:16];
      }
      while (v18);

      uint64_t v8 = v35;
      if ((v19 & 1) == 0) {
        goto LABEL_23;
      }
      long long v33 = v12;
      id v34 = v3;
      uint64_t v16 = [v3 dataAccessor];
      CFURLRef v23 = [v16 fileURL];
      CFBundleRef v24 = CFBundleCreate(kCFAllocatorDefault, v23);

      if (v24)
      {
        _CFBundleFlushBundleCaches();
        CFRelease(v24);
      }
      id v25 = [v5 subcredentialConfigurationForSecureElementIdentifiers:*(void *)(v37 + 32)];
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v26 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v39;
        do
        {
          for (j = 0; j != v27; j = (char *)j + 1)
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v30 = *(void *)(*((void *)&v38 + 1) + 8 * (void)j);
            long long v31 = *(void **)(v37 + 48);
            long long v32 = [v25 objectForKey:v30];
            [v31 setObject:v32 forKey:v30];
          }
          id v27 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
        }
        while (v27);
      }

      id v3 = v34;
      uint64_t v8 = v35;
      id v12 = v33;
    }

LABEL_23:
  }
}

void sub_10040FD78(uint64_t a1)
{
  id v2 = PDUtilityQueue();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10040FE14;
  block[3] = &unk_10072E1E8;
  id v4 = *(id *)(a1 + 32);
  dispatch_async(v2, block);
}

void sub_10040FE14(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)PKDAManager);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        id v9 = objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v8, (void)v10);
        [v2 updateCredentialConfigurationForCredential:v8 configuration:v9 completion:0];
      }
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

void sub_1004100C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  id v3 = [v2 storedPasses];
  objc_msgSend(v3, "pk_objectsPassingTest:", &stru_10074FBE0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();

  id v4 = objc_msgSend(v6, "pk_createSetByApplyingBlock:", &stru_10074FC20);
  if ([v4 count])
  {
    id v5 = [*(id *)(a1 + 32) delegate];
    [v5 markPassWithUniqueIdentifiersForDeletion:v4];
  }
}

BOOL sub_100410178(id a1, PKPass *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  if ((id)[(PKPass *)v4 passType] == (id)1)
  {
    id v5 = [(PKPass *)v4 organizationName];
    id v6 = v5;
    if (v5 == @"Apple Pay Later")
    {
      unsigned __int8 v7 = 1;
    }
    else if (v5)
    {
      unsigned __int8 v7 = [(__CFString *)v5 isEqualToString:@"Apple Pay Later"];
    }
    else
    {
      unsigned __int8 v7 = 0;
    }
  }
  else
  {
    unsigned __int8 v7 = 0;
  }

  return v7;
}

NSString *__cdecl sub_100410214(id a1, PKSecureElementPass *a2)
{
  return (NSString *)[(PKSecureElementPass *)a2 uniqueID];
}

void sub_1004107DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v36 = [v3 dataAccessor];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [v3 uniqueID];

  id v6 = +[Pass anyInDatabase:v4 withUniqueID:v5];

  if (v36 && v6)
  {
    unsigned __int8 v7 = [v36 dictionary];
    uint64_t v8 = [v7 objectForKeyedSubscript:PKPassKeySellURL];
    if (v8)
    {
      [v6 setValue:v8 forProperty:@"sell_url"];
    }
    else
    {
      id v9 = +[NSNull null];
      [v6 setValue:v9 forProperty:@"sell_url"];
    }
    long long v10 = [v7 objectForKeyedSubscript:PKPassKeyTransferURL];
    if (v10)
    {
      [v6 setValue:v10 forProperty:@"transfer_url"];
    }
    else
    {
      long long v11 = +[NSNull null];
      [v6 setValue:v11 forProperty:@"transfer_url"];
    }
    long long v12 = [v7 objectForKeyedSubscript:PKPassKeyBagPolicyURL];
    if (v12)
    {
      [v6 setValue:v12 forProperty:@"bag_policy_url"];
    }
    else
    {
      long long v13 = +[NSNull null];
      [v6 setValue:v13 forProperty:@"bag_policy_url"];
    }
    unsigned int v14 = [v7 objectForKeyedSubscript:PKPassKeyOrderFoodURL];
    if (v14)
    {
      [v6 setValue:v14 forProperty:@"order_food_url"];
    }
    else
    {
      id v15 = +[NSNull null];
      [v6 setValue:v15 forProperty:@"order_food_url"];
    }
    uint64_t v16 = [v7 objectForKeyedSubscript:PKPassKeyTransitInformationURL];
    if (v16)
    {
      [v6 setValue:v16 forProperty:@"transit_information_url"];
    }
    else
    {
      id v17 = +[NSNull null];
      [v6 setValue:v17 forProperty:@"transit_information_url"];
    }
    id v18 = [v7 objectForKeyedSubscript:PKPassKeyParkingInformationURL];
    if (v18)
    {
      [v6 setValue:v18 forProperty:@"parking_information_url"];
    }
    else
    {
      int v19 = +[NSNull null];
      [v6 setValue:v19 forProperty:@"parking_information_url"];
    }
    uint64_t v20 = [v7 objectForKeyedSubscript:PKPassKeyDirectionsInformationURL];
    if (v20)
    {
      [v6 setValue:v20 forProperty:@"directions_information_url"];
    }
    else
    {
      id v21 = +[NSNull null];
      [v6 setValue:v21 forProperty:@"directions_information_url"];
    }
    uint64_t v22 = [v7 objectForKeyedSubscript:PKPassKeyMerchandiseURL];
    if (v22)
    {
      [v6 setValue:v22 forProperty:@"merchandise_url"];
    }
    else
    {
      CFURLRef v23 = +[NSNull null];
      [v6 setValue:v23 forProperty:@"merchandise_url"];
    }
    CFBundleRef v24 = [v7 objectForKeyedSubscript:PKPassKeyAccessibilityURL];
    if (v24)
    {
      [v6 setValue:v24 forProperty:@"accessibility_url"];
    }
    else
    {
      id v25 = +[NSNull null];
      [v6 setValue:v25 forProperty:@"accessibility_url"];
    }
    id v26 = [v7 objectForKeyedSubscript:PKPassKeyPurchaseParkingURL];
    if (v26)
    {
      [v6 setValue:v26 forProperty:@"purchase_parking_url"];
    }
    else
    {
      id v27 = +[NSNull null];
      [v6 setValue:v27 forProperty:@"purchase_parking_url"];
    }
    uint64_t v28 = [v7 objectForKeyedSubscript:PKPassKeyAddOnURL];
    if (v28)
    {
      [v6 setValue:v28 forProperty:@"add_on_url"];
    }
    else
    {
      uint64_t v29 = +[NSNull null];
      [v6 setValue:v29 forProperty:@"add_on_url"];
    }
    uint64_t v30 = [v7 objectForKeyedSubscript:PKPassKeyContactVenuePhoneNumber];
    if (v30)
    {
      [v6 setValue:v30 forProperty:@"contact_venue_phone_number"];
    }
    else
    {
      long long v31 = +[NSNull null];
      [v6 setValue:v31 forProperty:@"contact_venue_phone_number"];
    }
    long long v32 = [v7 objectForKeyedSubscript:PKPassKeyContactVenueEmail];
    if (v32)
    {
      [v6 setValue:v32 forProperty:@"contact_venue_email"];
    }
    else
    {
      long long v33 = +[NSNull null];
      [v6 setValue:v33 forProperty:@"contact_venue_email"];
    }
    id v34 = [v7 objectForKeyedSubscript:PKPassKeyContactVenueWebsite];
    if (v34)
    {
      [v6 setValue:v34 forProperty:@"contact_venue_website"];
    }
    else
    {
      long long v35 = +[NSNull null];
      [v6 setValue:v35 forProperty:@"contact_venue_website"];
    }
  }
}

void sub_100411378(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100411394(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && [v3 passType] == (id)1 && !*((unsigned char *)WeakRetained + 33))
  {
    uint64_t v4 = [v3 dataAccessor];
    id v5 = [v4 dictionary];

    uint64_t v6 = [v5 PKArrayContaining:objc_opt_class() forKey:PKPassKeyPaymentApplications];
    unsigned __int8 v7 = (void *)v6;
    if (v6) {
      uint64_t v8 = (void *)v6;
    }
    else {
      uint64_t v8 = &__NSArray0__struct;
    }
    id v9 = v8;

    uint64_t v28 = v5;
    uint64_t v10 = [v5 PKArrayContaining:objc_opt_class() forKey:PKPassKeyAuxiliaryPaymentApplications];
    long long v11 = (void *)v10;
    if (v10) {
      long long v12 = (void *)v10;
    }
    else {
      long long v12 = &__NSArray0__struct;
    }
    id v13 = v12;

    id v26 = v13;
    id v27 = v9;
    unsigned int v14 = [v9 arrayByAddingObjectsFromArray:v13];
    id v29 = v3;
    id v15 = [v3 uniqueID];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id obj = v14;
    id v16 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v33;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v33 != v18) {
            objc_enumerationMutation(obj);
          }
          id v20 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v32 + 1) + 8 * i) auxiliaryApplication:0];
          id v21 = [v20 automaticSelectionCriteria];
          if ([v21 count])
          {
            uint64_t v22 = WeakRetained[1];
            CFURLRef v23 = [v20 secureElementIdentifier];
            CFBundleRef v24 = [v20 applicationIdentifier];
            id v25 = +[PaymentApplication anyInDatabase:v22 withPassUniqueIdentifier:v15 secureElementIdentifier:v23 paymentApplicationIdentifier:v24];

            [v25 updateAutomaticSelectionCriteria:v21];
          }
        }
        id v17 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
      }
      while (v17);
    }

    id v3 = v29;
  }
}

void sub_10041171C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100411738(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && [v3 passType] == (id)1)
  {
    id v5 = [v3 dataAccessor];
    uint64_t v6 = [v5 dictionary];

    uint64_t v7 = WeakRetained[1];
    uint64_t v8 = [v3 uniqueID];
    id v9 = +[Pass anyInDatabase:v7 withUniqueID:v8];

    if (v6 && v9)
    {
      id v25 = v9;
      uint64_t v10 = [v6 objectForKey:PKPassKeyPaymentApplications];
      CFBundleRef v24 = [v6 objectForKey:PKPassKeyAuxiliaryPaymentApplications];
      long long v11 = +[NSMutableSet set];
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v12 = v10;
      id v13 = [v12 countByEnumeratingWithState:&v31 objects:v36 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v32;
        do
        {
          id v16 = 0;
          do
          {
            if (*(void *)v32 != v15) {
              objc_enumerationMutation(v12);
            }
            id v17 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v31 + 1) + 8 * (void)v16) auxiliaryApplication:0];
            [v11 addObject:v17];

            id v16 = (char *)v16 + 1;
          }
          while (v14 != v16);
          id v14 = [v12 countByEnumeratingWithState:&v31 objects:v36 count:16];
        }
        while (v14);
      }
      id v26 = v6;

      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v18 = v24;
      id v19 = [v18 countByEnumeratingWithState:&v27 objects:v35 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v28;
        do
        {
          uint64_t v22 = 0;
          do
          {
            if (*(void *)v28 != v21) {
              objc_enumerationMutation(v18);
            }
            id v23 = [objc_alloc((Class)PKPaymentApplication) initWithPaymentApplicationDictionary:*(void *)(*((void *)&v27 + 1) + 8 * (void)v22) auxiliaryApplication:1];
            [v11 addObject:v23];

            uint64_t v22 = (char *)v22 + 1;
          }
          while (v20 != v22);
          id v20 = [v18 countByEnumeratingWithState:&v27 objects:v35 count:16];
        }
        while (v20);
      }

      id v9 = v25;
      +[PaymentApplication updatePaymentApplications:v11 forPass:v25 inDatabase:WeakRetained[1]];

      uint64_t v6 = v26;
    }
  }
}

void sub_100411AD8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100411AF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && [v3 passType] == (id)1)
  {
    id v5 = [v3 dataAccessor];
    uint64_t v6 = [PDPassDaemonData alloc];
    uint64_t v7 = [v5 fileURL];
    uint64_t v8 = sub_1002C515C((id *)&v6->super.isa, v7);

    uint64_t v9 = WeakRetained[1];
    uint64_t v10 = [v3 uniqueID];
    long long v11 = +[Pass anyInDatabase:v9 withUniqueID:v10];

    if (v11 && v8)
    {
      id v12 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = [v3 uniqueID];
        int v14 = 138412546;
        uint64_t v15 = v13;
        __int16 v16 = 2112;
        id v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Database: Regenerating daemon data for pass %@. \n\n %@", (uint8_t *)&v14, 0x16u);
      }
      [v11 updateWithDaemonPassData:v8];
    }
  }
}

void sub_100411D54(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100411D70(uint64_t a1, void *a2)
{
  id v11 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v4 = [v11 dataAccessor];
    uint64_t v5 = WeakRetained[1];
    uint64_t v6 = [v11 uniqueID];
    uint64_t v7 = +[Pass anyInDatabase:v5 withUniqueID:v6];

    if (v4 && v7)
    {
      uint64_t v8 = [v7 displayProfile];
      uint64_t v9 = [v4 displayProfileOfType:0];
      id v10 = [v8 passStyle];
      if (v10 != [v9 passStyle]) {
        [v7 updateWithPassDisplayProfile:v9];
      }
    }
  }
}

void sub_100412528(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[PayLaterPaymentFundingSource alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = [(PayLaterPaymentFundingSource *)v5 fundingSource];
  [v3 safelyAddObject:v4];
}

void sub_10041269C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];

  uint64_t v6 = [*(id *)(a1 + 32) database];
  uint64_t v7 = [*(id *)(a1 + 32) valueForProperty:@"b"];
  id v12 = +[PayLaterFundingSourceDetails anyInDatabase:v6 forPID:v7];

  uint64_t v8 = *(void **)(a1 + 48);
  uint64_t v9 = [v12 fundingSourceDetails];
  [v8 setDetails:v9];

  id v10 = *(void **)(a1 + 48);
  id v11 = [*(id *)(a1 + 32) refundAmount];
  [v10 setRefundAmount:v11];
}

void sub_100412A8C(id a1, PKPayLaterPaymentFundingSource *a2, id a3)
{
}

void sub_100412A94(id a1, PKPayLaterPaymentFundingSource *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterPaymentFundingSource setType:](v4, "setType:", [a3 integerValue]);
}

uint64_t sub_100412BC8(uint64_t a1)
{
  return 1;
}

uint64_t sub_100412CC8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) group];
  [*(id *)(a1 + 40) _removePass:*(void *)(a1 + 32) fromGroup:v2];
  id v3 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 40) + 8) withGroup:v2];

  if (!v3) {
    [*(id *)(a1 + 40) _removeGroup:v2];
  }

  return 1;
}

uint64_t sub_100412E5C(id *a1)
{
  uint64_t v2 = [a1[4] groupingProfile];
  unsigned int v3 = [a1[5] isEqual:v2];
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = [a1[4] group];
    [a1[6] _removePass:a1[4] fromGroup:v4];
    id v5 = +[Pass anyInDatabase:*((void *)a1[6] + 1) withGroup:v4];

    if (!v5)
    {
      id v6 = +[PDAutomaticGroup createAutomaticGroupForPass:a1[4] withGroupingProfile:v2];
      [v4 updateWithAutomaticGroup:v6];
    }
    [a1[6] _insertPass:a1[4] groupingProfile:v2];
  }
  return v3 ^ 1;
}

uint64_t sub_10041301C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v3 = +[Pass predicateForExpired];
  uint64_t v4 = +[SQLiteCompoundPredicate negatedPredicate:v3];
  v15[0] = @"pass_group.group_order";
  v15[1] = @"ingested_date";
  id v5 = +[NSArray arrayWithObjects:v15 count:2];
  v14[0] = @"ASC";
  v14[1] = @"DESC";
  id v6 = +[NSArray arrayWithObjects:v14 count:2];
  uint64_t v7 = +[SQLiteEntity queryWithDatabase:v2 predicate:v4 orderingProperties:v5 orderingDirections:v6];

  v13[0] = @"unique_id";
  v13[1] = @"pass_group.group_order";
  uint64_t v8 = +[NSArray arrayWithObjects:v13 count:2];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100413218;
  v11[3] = &unk_10072ED00;
  uint64_t v9 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v12 = v9;
  [v7 enumeratePersistentIDsAndProperties:v8 usingBlock:v11];

  return 1;
}

void sub_100413218(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  id v5 = objc_msgSend(*(id *)(a1 + 32), "passWithUniqueIdentifier:");
  if (v5) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

BOOL sub_100413394(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v3 = +[SQLiteNullPredicate isNullPredicateWithProperty:@"group_pid"];
  uint64_t v4 = +[SQLiteEntity queryWithDatabase:v2 predicate:v3];

  id v5 = objc_alloc_init((Class)NSMutableArray);
  id v6 = objc_alloc_init((Class)NSMutableArray);
  id v20 = _NSConcreteStackBlock;
  uint64_t v21 = 3221225472;
  uint64_t v22 = sub_100413610;
  id v23 = &unk_10074FCF8;
  id v7 = v5;
  id v24 = v7;
  id v8 = v6;
  id v25 = v8;
  +[Pass enumeratePassesAndGroupingProfilesForQuery:v4 withHandler:&v20];
  uint64_t v9 = (char *)objc_msgSend(v7, "count", v20, v21, v22, v23);
  if (v9)
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      long long v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Creating groups for %lu passes", buf, 0xCu);
    }

    id v11 = 0;
    do
    {
      id v13 = *(void **)(a1 + 32);
      int v14 = [v7 objectAtIndex:v11];
      uint64_t v15 = [v8 objectAtIndex:v11];
      [v13 _insertPass:v14 groupingProfile:v15];

      ++v11;
    }
    while (v9 != v11);
    __int16 v16 = *(void **)(a1 + 32);
    id v17 = [v16 delegate];
    id v18 = [v17 catalogOfRecord];
    [v16 _applyCatalog:v18];
  }
  return v9 != 0;
}

void sub_100413610(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 addObject:a2];
  [*(id *)(a1 + 40) addObject:v6];
}

uint64_t sub_10041367C(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithUnsignedInteger:1];
  uint64_t v15 = +[SQLiteComparisonPredicate predicateWithProperty:@"pass_flavor" equalToValue:v2];

  unsigned int v3 = (id *)(a1 + 32);
  uint64_t v4 = +[Pass predicateForUniqueID:*(void *)(a1 + 32)];
  v28[0] = v15;
  v28[1] = v4;
  id v5 = +[NSArray arrayWithObjects:v28 count:2];
  int v14 = +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:v5];

  id v6 = +[SQLiteEntity queryWithDatabase:*(void *)(*(void *)(a1 + 40) + 8) predicate:v14];
  v27[0] = @"group_pid";
  v27[1] = @"unique_id";
  v27[2] = @"pass_group.group_order";
  v27[3] = @"pass_flavor";
  v27[4] = @"template";
  id v7 = +[NSArray arrayWithObjects:v27 count:5];
  id v8 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = *v3;
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Validate default pass ordering - default PID: %@", (uint8_t *)&buf, 0xCu);
  }

  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = -1;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = -1;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100413A08;
  v16[3] = &unk_10074FD20;
  id v17 = *v3;
  id v18 = &v20;
  p_long long buf = &buf;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v16];
  uint64_t v10 = *(void *)(*((void *)&buf + 1) + 24);
  if (v10 != -1 && v21[3] != v10)
  {
    id v11 = +[Pass anyInDatabase:*(void *)(*(void *)(a1 + 40) + 8) withUniqueID:*(void *)(a1 + 32)];
    id v12 = [v11 group];
    if (v12)
    {
      [*(id *)(a1 + 40) _moveGroup:v12 toIndex:*(void *)(*((void *)&buf + 1) + 24)];
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100517A20((uint64_t *)(a1 + 32), (uint64_t)&buf + 8, v8);
      }
    }
  }

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&buf, 8);

  return 1;
}

void sub_1004139D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100413A08(void *a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v11 = a4[1];
  id v6 = [a4[2] integerValue];
  if ([v11 isEqualToString:a1[4]]) {
    *(void *)(*(void *)(a1[5] + 8) + 24) = v6;
  }
  if ([a4[3] unsignedIntegerValue] == (id)1 && objc_msgSend(a4[4], "integerValue") == (id)6)
  {
    uint64_t v7 = *(void *)(a1[6] + 8);
    unint64_t v8 = *(void *)(v7 + 24);
    if ((unint64_t)v6 <= v8) {
      id v9 = *(id *)(v7 + 24);
    }
    else {
      id v9 = v6;
    }
    if (v8 == -1) {
      id v10 = v6;
    }
    else {
      id v10 = v9;
    }
    *(void *)(v7 + 24) = v10;
  }
}

uint64_t sub_100413B68(uint64_t a1)
{
  uint64_t v26 = (void *)PDOSTransactionCreate("PDDatabaseManager.groups");
  id v27 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v2 = [*(id *)(a1 + 32) groups];
  id v29 = [v2 count];

  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = [*(id *)(a1 + 32) groups];
  id v31 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
  if (!v31)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    goto LABEL_23;
  }
  uint64_t v3 = 0;
  char v32 = 0;
  uint64_t v4 = 0;
  uint64_t v30 = *(void *)v49;
  do
  {
    id v5 = 0;
    do
    {
      if (*(void *)v49 != v30) {
        objc_enumerationMutation(obj);
      }
      id v6 = *(void **)(*((void *)&v48 + 1) + 8 * (void)v5);
      unint64_t v8 = [v6 uniqueIDs];
      id v9 = [*(id *)(a1 + 40) _groupAtOrAfterIndex:v3 bestMatchingUniqueIDs:v8];
      id v10 = v9;
      if (v9)
      {
        id v11 = [v9 automaticGroup];
        if ([v11 updateOrderWithCatalogGroup:v6]) {
          [v10 updateWithAutomaticGroup:v11];
        }
        objc_msgSend(*(id *)(a1 + 40), "_fixDuplicateGroupsAtIndex:preservingGroupPID:maximumNumberOfGroups:", v3, objc_msgSend(v10, "persistentID"), v29);
        long long v33 = +[Pass queryWithDatabase:*(void *)(*(void *)(a1 + 40) + 8) group:v10];
        uint64_t v44 = 0;
        long long v45 = &v44;
        uint64_t v46 = 0x2020000000;
        uint64_t v47 = 0;
        uint64_t v40 = 0;
        long long v41 = &v40;
        uint64_t v42 = 0x2020000000;
        uint64_t v43 = 5;
        v54[0] = @"pass_flavor";
        v54[1] = @"template";
        uint64_t v12 = +[NSArray arrayWithObjects:v54 count:2];
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472;
        v39[2] = sub_100414134;
        v39[3] = &unk_10074FD48;
        void v39[4] = &v44;
        v39[5] = &v40;
        [v33 enumeratePersistentIDsAndProperties:v12 usingBlock:v39];

        if (v45[3] == 1 && v41[3] == 6)
        {
          if (v32)
          {
            [v27 addObject:v10];
            goto LABEL_15;
          }
          char v32 = 0;
          ++v4;
        }
        else
        {
          if ((v32 & 1) == 0) {
            uint64_t v4 = v3;
          }
LABEL_15:
          char v32 = 1;
        }
        [*(id *)(a1 + 40) _moveGroup:v10 toIndex:v3];
        _Block_object_dispose(&v40, 8);
        _Block_object_dispose(&v44, 8);

        ++v3;
      }

      id v5 = (char *)v5 + 1;
    }
    while (v31 != v5);
    id v13 = [obj countByEnumeratingWithState:&v48 objects:v55 count:16];
    id v31 = v13;
  }
  while (v13);
LABEL_23:

  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v14 = v27;
  id v15 = [v14 countByEnumeratingWithState:&v35 objects:v53 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v36;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v36 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void *)(*((void *)&v35 + 1) + 8 * i);
        [*(id *)(a1 + 40) _moveGroup:v18 toIndex:(char *)i + v4];
      }
      id v15 = [v14 countByEnumeratingWithState:&v35 objects:v53 count:16];
      v4 += (uint64_t)i;
    }
    while (v15);
  }

  uint64_t v44 = 0;
  long long v45 = &v44;
  uint64_t v46 = 0x2020000000;
  uint64_t v47 = v4;
  uint64_t v20 = +[NSNumber numberWithUnsignedInteger:v3];
  uint64_t v21 = +[SQLiteComparisonPredicate predicateWithProperty:@"group_order" greaterThanOrEqualToValue:v20];

  uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
  CFStringRef v52 = @"ingested_date";
  uint64_t v23 = +[NSArray arrayWithObjects:&v52 count:1];
  id v24 = +[SQLiteEntity queryWithDatabase:v22 predicate:v21 orderingProperties:v23];

  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1004141A4;
  v34[3] = &unk_100749300;
  v34[4] = *(void *)(a1 + 40);
  v34[5] = &v44;
  [v24 enumeratePersistentIDsUsingBlock:v34];

  _Block_object_dispose(&v44, 8);
  return 1;
}

void sub_1004140F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

id sub_100414134(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = [*a4 unsignedIntegerValue];
  id result = [a4[1] integerValue];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v8 + 24) != 1) {
    *(void *)(v8 + 24) = v6;
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(void *)(v9 + 24) != 6) {
    *(void *)(v9 + 24) = result;
  }
  return result;
}

void sub_1004141A4(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[Group alloc] initWithPersistentID:a2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  id v6 = +[Pass queryWithDatabase:*(void *)(*(void *)(a1 + 32) + 8) group:v5];
  v14[0] = @"pass_flavor";
  v14[1] = @"template";
  uint64_t v7 = +[NSArray arrayWithObjects:v14 count:2];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100414398;
  v9[3] = &unk_1007339F8;
  void v9[4] = &v10;
  [v6 enumeratePersistentIDsAndProperties:v7 usingBlock:v9];

  if (*((unsigned char *)v11 + 24)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
  [*(id *)(a1 + 32) _moveGroup:v5 toIndex:v8];
  if (*((unsigned char *)v11 + 24)) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }

  _Block_object_dispose(&v10, 8);
}

void sub_100414378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

id sub_100414398(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, unsigned char *a6)
{
  id result = [*a4 unsignedIntegerValue];
  if (result == (id)1)
  {
    id result = [a4[1] integerValue];
    if (result == (id)6)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      *a6 = 1;
    }
  }
  return result;
}

void sub_100414E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100414E94(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id v6 = [(SQLiteEntity *)[Group alloc] initWithPersistentID:a2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

void sub_1004151C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1004151F4(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v11 = a3;
  id v7 = *a4;
  uint64_t v8 = [*(id *)(a1 + 32) _groupWithPersistentID:v7];
  if (v8)
  {
    [*(id *)(a1 + 40) addObject:v7];
    id v9 = [*(id *)(a1 + 40) countForObject:v7];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    if ((unint64_t)v9 > *(void *)(v10 + 24))
    {
      *(void *)(v10 + 24) = v9;
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v8);
    }
  }
}

void sub_100415578(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  id v5 = objc_msgSend(*(id *)(a1 + 32), "_groupWithPersistentID:");
  if (v5) {
    [*(id *)(a1 + 40) addObject:v5];
  }
}

void sub_1004158E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [(SQLiteEntity *)[Group alloc] initWithPersistentID:a2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  [*(id *)(a1 + 40) addObject:v3];
}

uint64_t sub_100415958(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v1 = *(void *)(a1 + 48);
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    if (v2 < v1) {
      unint64_t v1 = v2;
    }
    uint64_t v6 = *(void *)v10;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v7), "updateWithOrder:", (char *)v7 + v1, (void)v9);
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      v1 += (unint64_t)v7;
    }
    while (v5);
  }

  return 1;
}

void sub_100415CA4(uint64_t a1, uint64_t a2)
{
  id v3 = [(SQLiteEntity *)[Group alloc] initWithPersistentID:a2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  [*(id *)(a1 + 40) addObject:v3];
}

void sub_100416060(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 addObject:v7];
  [*(id *)(a1 + 40) addPass:v7 withGroupingProfile:v6];
}

BOOL sub_100416D24(void *a1)
{
  id v1 = a1;
  id v2 = [v1 passType];
  id v3 = [v1 groupingID];

  BOOL v5 = v2 == (id)1 && v3 != 0;
  return v5;
}

uint64_t sub_100416E8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  id v5 = v3;
  id v6 = v5;
  if (v4 == v5)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
    if (v5 && v4) {
      uint64_t v7 = [v4 isEqualToString:v5] ^ 1;
    }
  }

  return v7;
}

void sub_100417898(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = +[NSMutableString string];
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_100417A70(id a1, NSMutableString *a2, id a3)
{
  if (a3) {
    -[NSMutableString setString:](a2, "setString:");
  }
}

id sub_100417CD4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setValue:0 forHTTPHeaderField:a2];
}

void sub_100418824(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountCreditTermsUpdate alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v3 = *(void **)(a1 + 40);
  id v4 = [(AccountCreditTermsUpdate *)v5 creditTermsUpdate];
  [v3 addObject:v4];
}

void sub_100418BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
  id v4 = *(void **)(a1 + 40);
  id v5 = [*(id *)(a1 + 48) creditLimit];
  [v4 setCreditLimit:v5];

  id v6 = [*(id *)(a1 + 48) persistentID];
  id v7 = [*(id *)(a1 + 48) database];
  id v8 = +[CreditAccountRates creditAccountRatesForCreditTermsUpdatePID:v6 inDatabase:v7];

  [*(id *)(a1 + 40) setRates:v8];
}

void sub_100418FA0(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
}

void sub_100418FA8(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
}

void sub_100418FB0(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountCreditTermsUpdate setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100419008(id a1, PKAccountCreditTermsUpdate *a2, id a3)
{
  id v4 = a2;
  -[PKAccountCreditTermsUpdate setInitiator:](v4, "setInitiator:", [a3 integerValue]);
}

void sub_10041922C(uint64_t a1, void *a2)
{
  id v3 = [a2 context];
  id v4 = [v3 configuration];
  id v5 = [v3 primaryRegion];
  id v6 = [v5 regionCode];
  id v7 = [v4 numberOfDaysBetweenMapsReprocessingForRegion:v6];

  if (v7) {
    double v8 = (double)(uint64_t)[v7 integerValue] * 86400.0;
  }
  else {
    double v8 = 604800.0;
  }
  *(double *)(*(void *)(a1 + 32) + 32) = v8;
  double v9 = *(double *)(*(void *)(a1 + 32) + 32);
  long long v10 = PKLogFacilityTypeGetObject();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9 <= 0.0)
  {
    if (v11)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Not scheduling merchant reprocessing activity because it's disabled in the config", buf, 2u);
    }
  }
  else
  {
    if (v11)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Scheduling merchant reprocessing activity", buf, 2u);
    }

    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(NSObject **)(v12 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1004193E0;
    block[3] = &unk_10072E1E8;
    void block[4] = v12;
    dispatch_async(v13, block);
  }
}

void sub_1004193E0()
{
  id v0 = PDDefaultQueue();
  PDScheduledActivityClientRegister();

  id v1 = +[NSDate date];
  id v2 = +[PDScheduledActivityCriteria maintenanceActivityCriteriaWithStartDate:v1];

  [v2 setRequireMainsPower:1];
  [v2 setRequireScreenSleep:1];
  [v2 setRequireNetworkConnectivity:1];
  [v2 setRepeating:1];
  [v2 setRepeatInterval:86400.0];
  PDScheduledActivityRegister();
}

void sub_100419548(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) _processingItemsForScheduledActivity];
  id v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    id v18 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Running maps reprocessing scheduled activity with %lu items", buf, 0xCu);
  }

  [*(id *)(a1 + 32) _logScheduledActivityWithItems:v3];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      double v9 = 0;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * (void)v9);
        objc_msgSend(*(id *)(a1 + 32), "_processItem:", v10, (void)v12);
        double v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }
}

CFStringRef PDAccountEndpointBackOffEndpointTypeToString(unint64_t a1)
{
  if (a1 > 0xA) {
    return @"account";
  }
  else {
    return off_10074FED0[a1];
  }
}

uint64_t sub_10041A790(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
  [v2 setValue:v3 forProperty:@"backoff_level"];

  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)_SQLValueForDate();
  [v4 setValue:v5 forProperty:@"next_fetch"];

  return 1;
}

void sub_10041AAE8(uint64_t a1)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10041AC3C;
  void v12[3] = &unk_100736EF0;
  id v2 = *(id *)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v2;
  id v3 = objc_retainBlock(v12);
  char v11 = 0;
  id v4 = *(void **)(a1 + 32);
  id v10 = 0;
  [v4 _currentPasscodeMeetsUpgradedPasscodePolicy:&v10 isPasscodeCompliant:&v11];
  id v5 = v10;
  if (v5)
  {
    ((void (*)(void *, void, id))v3[2])(v3, 0, v5);
  }
  else
  {
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10041AD18;
    v7[3] = &unk_10074FF30;
    uint64_t v8 = v3;
    char v9 = v11;
    [v6 _enforceUpgradedPasscodePolicy:1 withCompletion:v7];
  }
}

void sub_10041AC3C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 40);
  if (v6)
  {
    id v7 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10041AD00;
    block[3] = &unk_100736830;
    id v10 = v6;
    char v11 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10041AD00(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

uint64_t sub_10041AD18(uint64_t a1, uint64_t a2)
{
  if (a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned char *)(a1 + 40) == 0;
  }
  uint64_t v4 = !v3;
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v4, a2);
}

void sub_10041ADD8(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10041AE68;
  v4[3] = &unk_100731C90;
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 _updateUpgradedPasscodePolicyEnforcementWithCompletion:v4];
}

void sub_10041AE68(uint64_t a1, char a2)
{
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10041AF04;
    v5[3] = &unk_10073B5A0;
    id v6 = v2;
    char v7 = a2;
    dispatch_async(v4, v5);
  }
}

uint64_t sub_10041AF04(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10041AFC4(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) _requiresUpgradedPasscode];
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10041B070;
  v4[3] = &unk_10073B5A0;
  id v5 = *(id *)(a1 + 40);
  unsigned __int8 v6 = v2;
  dispatch_async(v3, v4);
}

uint64_t sub_10041B070(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

id sub_10041B0FC(uint64_t a1)
{
  if (PDUpgradePasscodeCheckedVersion() <= 0)
  {
    id v3 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Check if upgrade passcode is needed for OS update with version 1", buf, 2u);
    }

    uint64_t v4 = *(void **)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10041B1F8;
    v6[3] = &unk_10072E4F8;
    void v6[4] = v4;
    return [v4 _updateUpgradedPasscodePolicyEnforcementWithCompletion:v6];
  }
  else
  {
    unsigned __int8 v2 = *(void **)(a1 + 32);
    return _[v2 _updateUpgradedPasscodePolicyEnforcementWithRemovalOnly:1 completion:0];
  }
}

void sub_10041B1F8(uint64_t a1, char a2)
{
  unsigned __int8 v2 = *(NSObject **)(*(void *)(a1 + 32) + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10041B26C;
  block[3] = &unk_10074FF50;
  char v4 = a2;
  dispatch_async(v2, block);
}

void sub_10041B26C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    _PDSetUpgradePasscodeCheckedVersion(1);
  }
  else
  {
    id v1 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned __int8 v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Failed to enforce upgrade passcode on OS update", v2, 2u);
    }
  }
}

void sub_10041B3E8(uint64_t a1)
{
  unsigned __int8 v2 = +[MCProfileConnection sharedConnection];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v22 = 0;
  unsigned int v5 = [v2 changePasscodeFrom:v3 to:v4 outError:&v22];
  id v6 = v22;
  char v7 = v6;
  if (v5)
  {
    uint64_t v8 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Success to set the passcode", buf, 2u);
    }

    if ([v2 unlockScreenTypeForPasscode:*(void *)(a1 + 40) outSimplePasscodeType:0] >= 3) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 3;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error: Unhandled MCUnlockScreenType type", buf, 2u);
    }

    id v10 = objc_alloc((Class)CDPStateController);
    id v11 = objc_alloc_init((Class)CDPContext);
    id v12 = [v10 initWithContext:v11];

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    void v19[2] = sub_10041B628;
    v19[3] = &unk_1007305A0;
    uint64_t v13 = *(void *)(a1 + 40);
    long long v14 = *(void **)(a1 + 56);
    void v19[4] = *(void *)(a1 + 48);
    id v20 = v14;
    [v12 localSecretChangedTo:v13 secretType:v9 completion:v19];
  }
  else
  {
    long long v15 = *(NSObject **)(*(void *)(a1 + 48) + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10041B798;
    v16[3] = &unk_10072FDC8;
    id v17 = v6;
    id v18 = *(id *)(a1 + 56);
    dispatch_async(v15, v16);

    id v12 = v17;
  }
}

void sub_10041B628(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v7 = @"NO";
    if (a2) {
      CFStringRef v7 = @"YES";
    }
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v12 = v7;
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CDP state update success: %@ with error: %@", buf, 0x16u);
  }

  uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10041B778;
  block[3] = &unk_10072F788;
  id v10 = *(id *)(a1 + 40);
  dispatch_async(v8, block);
}

uint64_t sub_10041B778(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

uint64_t sub_10041B798(uint64_t a1)
{
  unsigned __int8 v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Failed to set the passcode with error %@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10041BAB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update upgrade passcode policy enforcement failed with error: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v3 == 0);
  }
}

void sub_10041BC38(uint64_t a1)
{
  unsigned __int8 v2 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 48)) {
      CFStringRef v3 = @"Enforcing";
    }
    else {
      CFStringRef v3 = @"Unenforcing";
    }
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%@ upgraded passcode policy", buf, 0xCu);
  }

  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v4 = [*(id *)(a1 + 32) _strongPasscodeRestrictions];
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = +[MCProfileConnection sharedConnection];
  id v12 = 0;
  [v5 applyRestrictionDictionary:v4 clientType:PKServiceBundleIdentifier clientUUID:PKMCRestrictionClientUUIDUpgradedPasscode localizedClientDescription:0 localizedWarningMessage:0 outRestrictionChanged:0 outEffectiveSettingsChanged:0 outError:&v12];
  id v6 = v12;

  id v7 = *(void **)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = *(NSObject **)(*(void *)(a1 + 32) + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10041BE08;
    block[3] = &unk_10072E598;
    id v11 = v7;
    id v10 = v6;
    dispatch_async(v8, block);
  }
}

uint64_t sub_10041BE08(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10041BFE4(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = *(void **)(*(void *)(a1 + 32) + 16);
  CFStringRef v3 = [a2 passTypeIdentifier];
  id v4 = [v2 isChinaRegionIdentifier:v3];

  return v4;
}

void sub_10041C9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10041CA10(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = [(SQLiteEntity *)[PeerPaymentAccountFeatureDescriptor alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  CFStringRef v3 = [(PeerPaymentAccountFeatureDescriptor *)v8 peerPaymentAccountFeatureDescriptor];
  id v4 = [v3 osVersionRange];
  uint64_t v5 = PKDeviceVersionMeetsRequiredVersion();
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (*(unsigned char *)(v6 + 24))
  {
    id v7 = +[NSNumber numberWithBool:v5];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [(SQLiteEntity *)v8 setValue:v7 forProperty:@"h"];
  }
  else
  {
    *(unsigned char *)(v6 + 24) = 0;
  }
}

void sub_10041CC50(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [(id)objc_opt_class() applyPropertySetters:*(void *)(a1 + 40) toObject:*(void *)(a1 + 48) withProperties:v5 values:a3];
}

void sub_10041CDDC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init((Class)PKPeerPaymentAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_10041D050(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
}

void sub_10041D058(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  CFStringRef v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentAccountFeatureDescriptor *)v3 setMinimumAmount:v4];
}

void sub_10041D0BC(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  CFStringRef v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentAccountFeatureDescriptor *)v3 setMaximumAmount:v4];
}

void sub_10041D120(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = [a3 componentsSeparatedByString:@","];
  [(PKPeerPaymentAccountFeatureDescriptor *)v4 setSupportedNetworks:v5];
}

void sub_10041D18C(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v9[0] = objc_opt_class();
  v9[1] = objc_opt_class();
  id v6 = +[NSArray arrayWithObjects:v9 count:2];
  id v7 = +[NSSet setWithArray:v6];
  id v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKPeerPaymentAccountFeatureDescriptor *)v5 setAmountSuggestions:v8];
}

void sub_10041D29C(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v9[0] = objc_opt_class();
  v9[1] = objc_opt_class();
  id v6 = +[NSArray arrayWithObjects:v9 count:2];
  id v7 = +[NSSet setWithArray:v6];
  id v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKPeerPaymentAccountFeatureDescriptor *)v5 setThresholdSuggestions:v8];
}

void sub_10041D3AC(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a3;
  id v5 = a2;
  v9[0] = objc_opt_class();
  v9[1] = objc_opt_class();
  id v6 = +[NSArray arrayWithObjects:v9 count:2];
  id v7 = +[NSSet setWithArray:v6];
  id v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];

  [(PKPeerPaymentAccountFeatureDescriptor *)v5 setFrequencyOptions:v8];
}

void sub_10041D4BC(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  id v5 = +[NSTimeZone timeZoneWithName:a3];
  [(PKPeerPaymentAccountFeatureDescriptor *)v4 setProductTimeZone:v5];
}

void sub_10041D534(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setMaximumPayments:](v4, "setMaximumPayments:", [a3 integerValue]);
}

void sub_10041D58C(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setEndProcessingHour:](v4, "setEndProcessingHour:", [a3 integerValue]);
}

void sub_10041D5E4(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKPeerPaymentAccountFeatureDescriptor setProactiveFetchPeriod:](v4, "setProactiveFetchPeriod:");
}

void sub_10041D638(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
}

void sub_10041D640(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setMerchantCapabilities:](v4, "setMerchantCapabilities:", [a3 unsignedIntegerValue]);
}

void sub_10041D698(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  CFStringRef v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentAccountFeatureDescriptor *)v3 setFeePercentage:v4];
}

void sub_10041D6FC(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  CFStringRef v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentAccountFeatureDescriptor *)v3 setMinimumFee:v4];
}

void sub_10041D760(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  CFStringRef v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKPeerPaymentAccountFeatureDescriptor *)v3 setMaximumFee:v4];
}

void sub_10041D7C4(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  CFStringRef v3 = a2;
  id v4 = (id)_OSVersionRequirementRangeForSQLValue();
  [(PKPeerPaymentAccountFeatureDescriptor *)v3 setOsVersionRange:v4];
}

void sub_10041D824(id a1, PKPeerPaymentAccountFeatureDescriptor *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentAccountFeatureDescriptor setSupported:](v4, "setSupported:", [a3 BOOLValue]);
}

void sub_10041DAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10041DAE8(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithMetadata:*(void *)(a1 + 32) forBaseMetadata:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) != 0;
}

void sub_10041DCA4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, unsigned char *a6)
{
  if (*a4)
  {
    id v8 = *a4;
    id v9 = objc_alloc((Class)NSSet);
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    id v12 = objc_msgSend(v9, "initWithObjects:", v10, v11, objc_opt_class(), 0);
    __int16 v13 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v12 fromData:v8 error:0];

    [*(id *)(a1 + 32) setVehicleFunctionStates:v13];
  }
  *a6 = 1;
}

void sub_10041E028(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[AccountAssistanceProgramMessage alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(AccountAssistanceProgramMessage *)v5 assistanceProgramMessage];
  [v3 addObject:v4];
}

id sub_10041E310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10041E4E4(id a1, PKAccountAssistanceProgramMessage *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountAssistanceProgramMessage *)v3 setPastDue:v4];
}

void sub_10041E548(id a1, PKAccountAssistanceProgramMessage *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountAssistanceProgramMessage *)v3 setChargeOffPreventionAmount:v4];
}

void sub_10041E5AC(id a1, PKAccountAssistanceProgramMessage *a2, id a3)
{
  uint64_t v3 = a2;
  PKCurrencyStorageNumberToCurrencyDecimal();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [(PKAccountAssistanceProgramMessage *)v3 setCurrentBalance:v4];
}

uint64_t sub_10041E6C4(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        +[PaymentTransactionToDeleteFromFinance deletePaymentTransactionToDeleteFromFinanceWithPID:inDatabase:](PaymentTransactionToDeleteFromFinance, "deletePaymentTransactionToDeleteFromFinanceWithPID:inDatabase:", objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * (void)v6), "longLongValue", (void)v8), *(void *)(*(void *)(a1 + 40) + 8));
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  return 1;
}

uint64_t sub_10041E884(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        long long v8 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7, (void)v10);
        +[PaymentTransaction resetNeedsSyncWithFinanceForTransactionWithPID:updateSequenceNumber:inDatabase:](PaymentTransaction, "resetNeedsSyncWithFinanceForTransactionWithPID:updateSequenceNumber:inDatabase:", v7, [v8 integerValue], *(void *)(*(void *)(a1 + 40) + 8));
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return 1;
}

void sub_10041F7A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_10041F850(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  long long v8 = *(void **)(*(void *)(a1 + 32) + 24);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_10041F920;
  v11[3] = &unk_100750258;
  id v12 = v6;
  id v13 = v7;
  uint64_t v14 = *(void *)(a1 + 40);
  id v9 = v6;
  id v10 = v7;
  [v8 initializeSecureElementIfNecessaryWithHandler:v11];
}

void sub_10041F920(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a2)
  {
    id v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    id v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation -  SE setup failed", v14, 2u);
    }

    uint64_t v11 = +[NSError errorWithDomain:PKIssuerBindingErrorDomain code:7 userInfo:0];
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v9();
}

void sub_10041FA1C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init((Class)LAContext);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (PKIsMac()) {
    PKLocalizedPaymentString(@"ISSUER_DATA_GENERATION_BODY_TEXT_TOUCH_ID_MAC", @"%@%@", *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  else {
  uint64_t v11 = PKLocalizedPaymentString(@"ISSUER_DATA_GENERATION_REASON", @"%@", *(void *)(a1 + 40));
  }
  v25[0] = v11;
  v24[0] = &off_10078B8F8;
  v24[1] = &off_10078B910;
  uint64_t v12 = PKLocalizedString(@"WALLET");
  void v24[2] = &off_10078B928;
  v25[1] = v12;
  void v25[2] = &__kCFBooleanTrue;
  id v13 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:3];

  v19[0] = _NSConcreteStackBlock;
  uint64_t v14 = *(void *)(a1 + 48);
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 56), *(int8x16_t *)(a1 + 56), 8uLL);
  uint64_t v16 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  v19[1] = 3221225472;
  void v19[2] = sub_10041FC18;
  v19[3] = &unk_1007502C0;
  int8x16_t v22 = v15;
  uint64_t v23 = *(void *)(a1 + 72);
  id v20 = v6;
  id v21 = v7;
  void v19[4] = v14;
  id v17 = v6;
  id v18 = v7;
  [v16 evaluatePolicy:2 options:v13 reply:v19];
}

void sub_10041FC18(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 72));
  id v6 = [*(id *)(a1[4] + 64) allObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 72));
  [v6 enumerateObjectsUsingBlock:&stru_100750298];
  if (a2) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = !v7;
  if (v7)
  {
    uint64_t v9 = [*(id *)(*(void *)(a1[8] + 8) + 40) externalizedContext];
  }
  else
  {
    uint64_t v9 = 0;
  }
  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), v9);
  if ((v8 & 1) == 0) {

  }
  id v10 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(*(void *)(a1[7] + 8) + 40)) {
      CFStringRef v11 = @"Y";
    }
    else {
      CFStringRef v11 = @"N";
    }
    uint64_t v12 = [v5 description];
    int v16 = 138412546;
    CFStringRef v17 = v11;
    __int16 v18 = 2112;
    id v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation - Obtained externalized auth: %@ error: %@", (uint8_t *)&v16, 0x16u);
  }
  if (v5)
  {
    uint64_t v13 = +[NSError errorWithDomain:PKIssuerBindingErrorDomain code:3 userInfo:0];
    uint64_t v14 = *(void *)(a1[9] + 8);
    int8x16_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_10041FE08(id a1, PDIssuerBindingManagerObserver *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector()) {
    [(PDIssuerBindingManagerObserver *)v4 issuerBindingFlowAuthenticationPerformed];
  }
}

void sub_10041FE58(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = v7;
  uint64_t v9 = *(void *)(*(void *)(a1[7] + 8) + 40);
  if (v9)
  {
    uint64_t v10 = a1[5];
    CFStringRef v11 = *(void **)(a1[4] + 24);
    uint64_t v12 = a1[6];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10041FF70;
    void v13[3] = &unk_100730708;
    uint64_t v16 = a1[8];
    id v15 = v7;
    id v14 = v6;
    [v11 checkFidoKeyPresenceForRelyingParty:v10 relyingPartyAccountHash:v12 fidoKeyHash:v9 completion:v13];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

uint64_t sub_10041FF70(void *a1, char a2)
{
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = a2 ^ 1;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], 0);
}

void sub_10041FF98(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  char v8 = v7;
  if (*(unsigned char *)(*(void *)(a1[8] + 8) + 24))
  {
    uint64_t v9 = a1[5];
    uint64_t v10 = *(void **)(a1[4] + 24);
    uint64_t v11 = a1[6];
    uint64_t v12 = a1[7];
    id v13 = objc_alloc_init((Class)NSData);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_1004200D0;
    v16[3] = &unk_100750310;
    uint64_t v19 = a1[9];
    id v18 = v8;
    id v14 = v6;
    uint64_t v15 = a1[10];
    id v17 = v14;
    uint64_t v20 = v15;
    [v10 createFidoKeyForRelyingParty:v9 relyingPartyAccountHash:v11 challenge:v12 externalizedAuth:v13 completion:v16];
  }
  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0);
  }
}

void sub_1004200D0(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = v12;
  if (!v9 || v12)
  {
    uint64_t v15 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = [v13 description];
      int v20 = 138412290;
      id v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation -  key creation failed with internal error %@", (uint8_t *)&v20, 0xCu);
    }
    uint64_t v17 = +[NSError errorWithDomain:PKIssuerBindingErrorDomain code:4 userInfo:0];
    uint64_t v18 = *(void *)(a1[7] + 8);
    uint64_t v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    id v14 = *(void (**)(void))(a1[5] + 16);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a4);
    id v14 = *(void (**)(void))(a1[5] + 16);
  }
  v14();
}

void sub_10042025C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 24);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_100420378;
  v16[3] = &unk_100750360;
  id v17 = v6;
  id v18 = v7;
  long long v19 = *(_OWORD *)(a1 + 80);
  id v14 = v6;
  id v15 = v7;
  [v9 signWithFidoKeyForRelyingParty:v8 relyingPartyAccountHash:v11 fidoKeyHash:v10 challenge:v12 publicKeyIdentifier:&stru_10075AAD8 externalizedAuth:v13 completion:v16];
}

void sub_100420378(void *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (!v6 || v7)
  {
    uint64_t v10 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = [v8 description];
      int v15 = 138412290;
      uint64_t v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation -  key signing failed with internal error %@", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v12 = +[NSError errorWithDomain:PKIssuerBindingErrorDomain code:5 userInfo:0];
    uint64_t v13 = *(void *)(a1[7] + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    id v9 = *(void (**)(void))(a1[5] + 16);
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
    id v9 = *(void (**)(void))(a1[5] + 16);
  }
  v9();
}

void sub_1004204E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = objc_alloc_init((Class)PKIssuerBindingData);
  [v8 setSessionIdentifier:*(void *)(a1 + 32)];
  [v8 setCreatedKeyHash:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  [v8 setSignedData:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  id v9 = +[NSURL URLWithString:*(void *)(a1 + 40)];
  [v8 setCallbackURL:v9];

  PKLogFacilityTypeGetObject();
  uint64_t v10 = (id)objc_claimAutoreleasedReturnValue();
  os_signpost_id_t v11 = os_signpost_id_make_with_pointer(v10, *(const void **)(a1 + 48));
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v12 = v11;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, v12, "issuerBindingData:post", "", buf, 2u);
    }
  }

  uint64_t v13 = *(void **)(*(void *)(a1 + 48) + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_10042069C;
  v16[3] = &unk_1007503B0;
  id v17 = v6;
  id v18 = v7;
  long long v19 = *(_OWORD *)(a1 + 72);
  id v14 = v6;
  id v15 = v7;
  [v13 requestPassesForIssuerBindingData:v8 handler:v16];
}

void sub_10042069C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 count];
  if (v6 || !v7)
  {
    os_signpost_id_t v12 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [v6 description];
      int v17 = 138412290;
      id v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation -  pass download failed %@", (uint8_t *)&v17, 0xCu);
    }
    uint64_t v14 = +[NSError errorWithDomain:PKIssuerBindingErrorDomain code:6 userInfo:0];
    uint64_t v15 = *(void *)(a1[7] + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    os_signpost_id_t v11 = *(void (**)(void))(a1[5] + 16);
  }
  else
  {
    id v8 = [v5 copy];
    uint64_t v9 = *(void *)(a1[6] + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    os_signpost_id_t v11 = *(void (**)(void))(a1[5] + 16);
  }
  v11();
}

uint64_t sub_100420810(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(*(void *)(*(void *)(v3 + 8) + 8) + 40)) {
    return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, 0);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_100420A78(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92));
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(v3 + 91);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 92));
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = v2;
  id v5 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v8);
        if (v4)
        {
          uint64_t v10 = [*(id *)(*((void *)&v19 + 1) + 8 * (void)v8) issuerBindingInformation];
          os_signpost_id_t v11 = [v10 PKStringForKey:@"issuerBindingData"];
          os_signpost_id_t v12 = objc_msgSend(v11, "pk_decodeHexadecimal");

          uint64_t v13 = *(void **)(a1 + 32);
          uint64_t v14 = [v9 uniqueID];
          uint64_t v15 = [v9 ingestedDate];
          uint64_t v16 = [v9 fidoProfile];
          [v13 _verifyIssuerBindingInformationForPassUniqueIdentifier:v14 passIngestionDate:v15 fidoProfile:v16 signedChallenge:v12 forFirstTime:0];
        }
        else
        {
          int v17 = *(void **)(a1 + 32);
          os_signpost_id_t v12 = [*(id *)(*((void *)&v19 + 1) + 8 * (void)v8) uniqueID];
          [v17 _updateNFCPayloadState:0 forPassUniqueIdentifier:v12 notify:0];
        }

        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v6);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92));
  *(unsigned char *)(*(void *)(a1 + 32) + 89) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92));
}

void sub_100420FAC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding];
  if ([v2 count] == (id)1)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    int v4 = [v2 anyObject];
    id v5 = [v4 uniqueID];
    [v3 _updateNFCPayloadState:2 forPassUniqueIdentifier:v5 notify:1];
  }
  else if ((unint64_t)[v2 count] >= 2)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v6 = v2;
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          os_signpost_id_t v11 = *(void **)(a1 + 32);
          os_signpost_id_t v12 = objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * (void)v10), "uniqueID", (void)v13);
          [v11 _updateNFCPayloadState:2 forPassUniqueIdentifier:v12 notify:0];

          uint64_t v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v8);
    }

    if ((PKIsPhone() & 1) != 0 || PKIsWatch()) {
      objc_msgSend(*(id *)(a1 + 32), "_sendGenericUserNotificationForStateUpdate:", 2, (void)v13);
    }
  }
}

void sub_1004215EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10042160C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(a1 + 32) + 24);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1004216D4;
  v11[3] = &unk_100749CC0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  [v8 initializeSecureElementIfNecessaryWithHandler:v11];
}

uint64_t sub_1004216D4(uint64_t a1, int a2)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2 ^ 1u);
}

void sub_1004216F0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 24);
  id v10 = [*(id *)(a1 + 48) relyingPartyIdentifier];
  os_signpost_id_t v11 = [*(id *)(a1 + 48) accountHash];
  id v12 = [*(id *)(a1 + 48) keyHash];
  id v13 = objc_msgSend(v12, "pk_decodeHexadecimal");
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  _DWORD v18[2] = sub_100421844;
  v18[3] = &unk_100750428;
  id v14 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  id v21 = v7;
  uint64_t v22 = v15;
  id v19 = v14;
  id v20 = v6;
  id v16 = v6;
  id v17 = v7;
  [v9 verifySignedChallenge:v8 forRelyingParty:v10 relyingPartyAccountHash:v11 fidoKeyHash:v13 completion:v18];
}

uint64_t sub_100421844(void *a1, int a2)
{
  int v4 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = @"NO";
    uint64_t v6 = a1[4];
    if (a2) {
      CFStringRef v5 = @"YES";
    }
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    CFStringRef v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Issuer binding validation for pass: %@ valid: %@", (uint8_t *)&v8, 0x16u);
  }

  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = a2;
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

id sub_100421940(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    BOOL v2 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    [*(id *)(a1 + 32) timeIntervalSinceNow];
    if (v4 >= -3600.0)
    {
      BOOL v2 = *(unsigned char *)(a1 + 64) == 0;
      uint64_t v3 = 3;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 92));
      id v5 = *(id *)(*(void *)(a1 + 40) + 80);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 92));
      if (v5 && ([v5 timeIntervalSinceNow], v6 < -3600.0))
      {
        BOOL v2 = 1;
        uint64_t v3 = 1;
      }
      else
      {
        BOOL v2 = 0;
        uint64_t v3 = 3;
      }
    }
  }
  [*(id *)(a1 + 40) _updateNFCPayloadState:v3 forPassUniqueIdentifier:*(void *)(a1 + 48) notify:v2];
  id v7 = *(void **)(a1 + 40);
  return _[v7 _updateActivatingCheckSchedule];
}

void sub_100421C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_opt_respondsToSelector()) {
    [v3 bindingStateChangedForPass:*(void *)(a1 + 32)];
  }
}

void sub_100421FC0(uint64_t a1)
{
  BOOL v2 = [*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBindingWithPayloadState:3];
  id v3 = PKLogFacilityTypeGetObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    id v26 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to verify activating passes: %lu", buf, 0xCu);
  }
  oslog = v3;

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = v2;
  id v4 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v21;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(obj);
        }
        int v8 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v9 = objc_msgSend(v8, "issuerBindingInformation", oslog);
        __int16 v10 = [v9 PKStringForKey:@"issuerBindingData"];
        CFStringRef v11 = objc_msgSend(v10, "pk_decodeHexadecimal");

        id v12 = *(void **)(a1 + 32);
        id v13 = [v8 uniqueID];
        id v14 = [v8 ingestedDate];
        uint64_t v15 = [v8 fidoProfile];
        [v12 _verifyIssuerBindingInformationForPassUniqueIdentifier:v13 passIngestionDate:v14 fidoProfile:v15 signedChallenge:v11 forFirstTime:0];
      }
      id v5 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v5);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 92));
  *(unsigned char *)(*(void *)(a1 + 32) + 88) = 0;
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(unsigned __int8 *)(v16 + 90);
  os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 92));
  if (v17)
  {
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Did defer verification - verifying now.", buf, 2u);
    }

    [*(id *)(a1 + 32) _verifyActivatingPasses];
  }
}

void sub_1004223F8(uint64_t a1)
{
  BOOL v2 = [*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(a1 + 32);
        int v8 = [*(id *)(*((void *)&v9 + 1) + 8 * (void)v6) uniqueID];
        [v7 _updateNFCPayloadState:0 forPassUniqueIdentifier:v8 notify:1];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
}

void sub_10042251C(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) passesSupportingIssuerBinding];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v16;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v7 = [v6 issuerBindingInformation];
        int v8 = [v7 PKStringForKey:@"issuerBindingData"];
        long long v9 = objc_msgSend(v8, "pk_decodeHexadecimal");

        long long v10 = *(void **)(a1 + 32);
        long long v11 = [v6 uniqueID];
        long long v12 = [v6 ingestedDate];
        id v13 = [v6 fidoProfile];
        [v10 _verifyIssuerBindingInformationForPassUniqueIdentifier:v11 passIngestionDate:v12 fidoProfile:v13 signedChallenge:v9 forFirstTime:0];
      }
      id v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }
}

void sub_100422760(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) hasPassesWithPayloadState:3])
  {
    if (PDScheduledActivityExists())
    {
      uint64_t v1 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Issuer binding activity already exists.", buf, 2u);
      }
    }
    else
    {
      uint64_t v1 = +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:0];
      id v3 = PKLogFacilityTypeGetObject();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scheduling issuer binding activity for every hour.", v6, 2u);
      }

      [v1 setRepeatInterval:3600.0];
      [v1 setRepeating:1];
      [v1 setReason:@"check issuer bound pass state"];
      PDScheduledActivityRegister();
    }
  }
  else
  {
    id v2 = PKLogFacilityTypeGetObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No activating passes, tearing down activity", v4, 2u);
    }

    PDScheduledActivityRemove();
  }
}

void sub_100423118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100423144(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _entryDidTimeout:*(void *)(a1 + 32)];
}

void sub_100423D08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v10 = objc_alloc_init((Class)PKPayLaterFinancingOptionInstallment);
  int v8 = [(SQLiteEntity *)[PayLaterFinancingOptionInstallment alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v10 withProperties:v7 values:a4];

  long long v9 = [(PayLaterFinancingOptionInstallment *)v8 _dueAmount];
  [v10 setDueAmount:v9];

  [*(id *)(a1 + 48) safelyAddObject:v10];
}

void sub_100424274(id a1, PKPayLaterFinancingOptionInstallment *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingOptionInstallment *)v3 setDueDate:v4];
}

id sub_1004246DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(a1 + 40) withProperties:a2 values:a3];
}

void sub_10042480C(id a1, PDAutomaticGroup *a2, id a3)
{
}

void sub_100424814(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a2;
  -[PDAutomaticGroup setPassStyle:](v4, "setPassStyle:", [a3 integerValue]);
}

void sub_10042486C(id a1, PDAutomaticGroup *a2, id a3)
{
}

void sub_100424874(id a1, PDAutomaticGroup *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDAutomaticGroup *)v3 setMinDate:v4];
}

void sub_1004248D4(id a1, PDAutomaticGroup *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDAutomaticGroup *)v3 setMaxDate:v4];
}

void sub_100424934(id a1, PDAutomaticGroup *a2, id a3)
{
  id v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PDAutomaticGroup *)v3 setIngestedDate:v4];
}

void sub_100424994(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a2;
  -[PDAutomaticGroup setNFCEnabled:](v4, "setNFCEnabled:", [a3 BOOLValue]);
}

void sub_1004249EC(id a1, PDAutomaticGroup *a2, id a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = a2;
    v9[0] = objc_opt_class();
    v9[1] = objc_opt_class();
    uint64_t v6 = +[NSArray arrayWithObjects:v9 count:2];
    id v7 = +[NSSet setWithArray:v6];
    int v8 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:v4 error:0];
    [(PDAutomaticGroup *)v5 setSortedPassUniqueIdentifiers:v8];
  }
  else
  {
    uint64_t v6 = a2;
    [(PDAutomaticGroup *)v6 setSortedPassUniqueIdentifiers:0];
  }
}

id _SQLValueForNotificationActionInfo(void *a1)
{
  id v1 = a1;
  if (!v1
    || (+[NSKeyedArchiver archivedDataWithRootObject:v1 requiringSecureCoding:1 error:0], (id v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    id v2 = +[NSNull null];
  }

  return v2;
}

id _NotificationActionInfoForSQLValue(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc((Class)NSSet);
  uint64_t v3 = objc_opt_class();
  id v4 = objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(), 0);
  uint64_t v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v4 fromData:v1 error:0];

  return v5;
}

void sub_100425744(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[DiscoveryNotification alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(DiscoveryNotification *)v5 notification];
  [v3 addObject:v4];
}

void sub_10042598C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[DiscoveryNotification alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(DiscoveryNotification *)v5 notification];
  [v3 addObject:v4];
}

void sub_100425BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[DiscoveryNotification alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(DiscoveryNotification *)v5 notification];
  [v3 addObject:v4];
}

void sub_100425E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = [(SQLiteEntity *)[DiscoveryNotification alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(DiscoveryNotification *)v5 notification];
  [v3 addObject:v4];
}

void sub_10042613C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10042615C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = [(SQLiteEntity *)[DiscoveryNotification alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = [(DiscoveryNotification *)v6 notification];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100426488(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = a3;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = a2;
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = 0;
    uint64_t v21 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v24;
    do
    {
      long long v9 = 0;
      long long v20 = v6;
      uint64_t v10 = v19 + 8 * (void)v6;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(obj);
        }
        long long v11 = *(void **)(*((void *)&v23 + 1) + 8 * (void)v9);
        long long v12 = *(void **)(v10 + 8 * (void)v9);
        id v13 = +[NSNull null];
        if (v12 == v13) {
          id v14 = 0;
        }
        else {
          id v14 = *(void **)(v10 + 8 * (void)v9);
        }
        id v15 = v14;

        if ([v11 isEqualToString:@"relevant_date_range_start_date"])
        {
          long long v16 = (void *)v7;
          uint64_t v7 = _DateForSQLValue();
        }
        else if ([v11 isEqualToString:@"relevant_date_range_end_date"])
        {
          long long v16 = (void *)v21;
          uint64_t v21 = _DateForSQLValue();
        }
        else
        {
          uint64_t v17 = [*(id *)(a1 + 32) objectForKey:v11];
          long long v16 = (void *)v17;
          if (v17) {
            (*(void (**)(uint64_t, void, id))(v17 + 16))(v17, *(void *)(a1 + 40), v15);
          }
        }

        long long v9 = (char *)v9 + 1;
      }
      while (v5 != v9);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      uint64_t v6 = (char *)v9 + (void)v20;
    }
    while (v5);
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v7 = 0;
  }
  if (v7 | v21)
  {
    id v18 = [objc_alloc((Class)PKDiscoveryRelevantDateRange) initWithStartDate:v7 endDate:v21];
    [*(id *)(a1 + 40) setRelevantDateRange:v18];
  }
}

void sub_100426DC4(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100426DCC(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setVersion:](v4, "setVersion:", [a3 integerValue]);
}

void sub_100426E24(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_100426E7C(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100426E84(id a1, PKDiscoveryNotification *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_OSVersionRequirementRangeForSQLValue();
  [(PKDiscoveryNotification *)v3 setOsVersionRange:v4];
}

void sub_100426EE4(id a1, PKDiscoveryNotification *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_HardwareVersionRangeForSQLValue();
  [(PKDiscoveryNotification *)v3 setHardwareVersionRange:v4];
}

void sub_100426F44(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setActionType:](v4, "setActionType:", [a3 integerValue]);
}

void sub_100426F9C(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100426FA4(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100426FAC(id a1, PKDiscoveryNotification *a2, id a3)
{
}

void sub_100426FB4(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  _NotificationActionInfoForSQLValue(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [(PKDiscoveryNotification *)v4 setActionInfo:v5];
}

void sub_100427018(id a1, PKDiscoveryNotification *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKDiscoveryNotification *)v3 setScheduledDeliveryDate:v4];
}

void sub_100427078(id a1, PKDiscoveryNotification *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryNotification setDelivered:](v4, "setDelivered:", [a3 integerValue] != 0);
}

void sub_100427640(uint64_t a1, uint64_t a2)
{
  id v5 = [(SQLiteEntity *)[PayLaterFinancingPlanDispute alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = [(PayLaterFinancingPlanDispute *)v5 disputeIdentifier];
  objc_msgSend(v3, "pk_safelyAddObject:", v4);
}

void sub_100427938(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  long long v12 = [(SQLiteEntity *)[PayLaterFinancingPlanDispute alloc] initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v8 = objc_alloc_init((Class)PKPayLaterFinancingPlanDispute);
  [*(id *)(a1 + 64) applyPropertySetters:*(void *)(a1 + 40) toObject:v8 withProperties:v7 values:a4];

  id v9 = [(SQLiteEntity *)v12 persistentID];
  uint64_t v10 = [*(id *)(a1 + 48) database];
  long long v11 = +[PayLaterAppliedPayment payLaterAppliedPaymentsForDisputePID:v9 inDatabase:v10];

  [v8 setAppliedPayments:v11];
  [*(id *)(a1 + 56) safelyAddObject:v8];
}

void sub_10042806C(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
}

void sub_100428074(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanDispute setState:](v4, "setState:", [a3 integerValue]);
}

void sub_1004280CC(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanDispute setRequiredDocuments:](v4, "setRequiredDocuments:", [a3 integerValue]);
}

void sub_100428124(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanDispute *)v3 setOpenDate:v4];
}

void sub_100428184(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanDispute *)v3 setLastUpdated:v4];
}

void sub_1004281E4(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
  uint64_t v3 = a2;
  id v4 = (id)_DateForSQLValue();
  [(PKPayLaterFinancingPlanDispute *)v3 setDeadlineDate:v4];
}

void sub_100428244(id a1, PKPayLaterFinancingPlanDispute *a2, id a3)
{
}

void sub_100428630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100428648(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) metadata];
  if (v2)
  {
    uint64_t v3 = +[TileMetadata insertMetadata:v2 inDatabase:*(void *)(a1 + 40)];
    if (v3)
    {
      id v4 = +[TileDescriptorState insertState:*(void *)(a1 + 48) inDatabase:*(void *)(a1 + 40)];
      if (v4
        && (v5 = [objc_alloc(*(Class *)(a1 + 80)) initWithDescriptor:*(void *)(a1 + 32) groupDescriptor:*(void *)(a1 + 56) metadata:v3 state:v4 order:*(void *)(a1 + 88) forPass:*(void *)(a1 + 64) inDatabase:*(void *)(a1 + 40)], uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8), v7 = *(void **)(v6 + 40), *(void *)(v6 + 40) = v5, v7, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)))
      {
        id v8 = [*(id *)(a1 + 32) states];
        BOOL v9 = +[TileState insertStates:v8 forDescriptor:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) inDatabase:*(void *)(a1 + 40)];
      }
      else
      {
        BOOL v9 = 0;
      }
    }
    else
    {
      BOOL v9 = 0;
    }
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

void sub_100428A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100428A4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v13 = v7;
  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    id v8 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    id v7 = v13;
  }
  LOBYTE(v12) = 1;
  id v11 = objc_msgSend(*(id *)(a1 + 56), "_createDescriptorStatePairForPID:withProperties:values:propertySetters:indices:inDatabase:supportGroups:", a2, v7, a4, *(void *)(a1 + 32), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 40), v12);
  if (v11) {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v11];
  }
}

void sub_100428C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100428CB4(uint64_t a1)
{
  id v35 = 0;
  long long v34 = 0uLL;
  CFStringRef v37 = @"state_pid";
  id v2 = +[NSArray arrayWithObjects:&v37 count:1];
  uint64_t v3 = +[TileDescriptor _propertySettersWithProperties:v2 effectiveProperties:&v35 indices:&v34];

  id v4 = [*(id *)(a1 + 64) _predicateForPassUniqueID:*(void *)(a1 + 32)];
  v36[0] = v4;
  id v5 = [*(id *)(a1 + 64) _predicateForNullGroupID];
  v36[1] = v5;
  uint64_t v6 = [*(id *)(a1 + 64) _predicateForContext:*(void *)(a1 + 72)];
  v36[2] = v6;
  id v7 = +[NSArray arrayWithObjects:v36 count:3];
  id v8 = +[SQLiteCompoundPredicate predicateMatchingAllPredicates:v7];

  uint64_t v9 = [*(id *)(a1 + 64) _tileDescriptorQueryWithPredicate:v8 inDatabase:*(void *)(a1 + 40)];
  uint64_t v30 = 0;
  id v31 = &v30;
  uint64_t v32 = 0x2020000000;
  char v33 = 0;
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 0;
  id v10 = v35;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  _DWORD v18[2] = sub_100428FB0;
  v18[3] = &unk_100750930;
  uint64_t v24 = *(void *)(a1 + 64);
  long long v17 = *(_OWORD *)(a1 + 48);
  id v11 = (id)v17;
  long long v21 = v17;
  id v12 = v3;
  id v19 = v12;
  long long v25 = v34;
  id v20 = *(id *)(a1 + 40);
  long long v22 = &v26;
  long long v23 = &v30;
  [v9 enumeratePersistentIDsAndProperties:v10 usingBlock:v18];
  if (*((unsigned char *)v31 + 24) || !*((unsigned char *)v27 + 24))
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0;

    BOOL v15 = *((unsigned char *)v31 + 24) == 0;
  }
  else
  {
    BOOL v15 = 1;
  }

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);

  return v15;
}

void sub_100428F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100428FB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  id v10 = a3;
  id v16 = v10;
  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    id v11 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v10 = v16;
  }
  LOBYTE(v15) = 1;
  id v14 = objc_msgSend(*(id *)(a1 + 80), "_createUpdatedDescriptorPairForPID:transform:withProperties:values:propertySetters:indices:inDatabase:updated:supportGroups:", a2, *(void *)(a1 + 48), v10, a4, *(void *)(a1 + 32), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 64) + 8) + 24, v15);
  if (v14)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v14];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    *a6 = 1;
  }
}