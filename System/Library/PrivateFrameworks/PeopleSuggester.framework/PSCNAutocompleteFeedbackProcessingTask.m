@interface PSCNAutocompleteFeedbackProcessingTask
@end

@implementation PSCNAutocompleteFeedbackProcessingTask

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  v3 = +[_PSLogging feedbackChannel];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl(&dword_1A314B000, v3, OS_LOG_TYPE_INFO, "_PSCNAutocompleteFeedbackTracker: Communicating the following impression to CoreAnalytics: %@", (uint8_t *)&v4, 0xCu);
  }

  AnalyticsSendEvent();
}

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_166(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  v3 = +[_PSLogging feedbackChannel];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl(&dword_1A314B000, v3, OS_LOG_TYPE_INFO, "_PSCNAutocompleteFeedbackTracker: Communicating the following submodel impression to CoreAnalytics: %@", (uint8_t *)&v4, 0xCu);
  }

  AnalyticsSendEvent();
}

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_169(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  v3 = +[_PSLogging feedbackChannel];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl(&dword_1A314B000, v3, OS_LOG_TYPE_INFO, "_PSCNAutocompleteFeedbackTracker: Communicating the following action to CoreAnalytics: %@", (uint8_t *)&v4, 0xCu);
  }

  AnalyticsSendEvent();
}

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_173(uint64_t a1, void *a2)
{
  v3 = [a2 eventBody];
  int v4 = v3;
  if (v3)
  {
    if (*(unsigned __int8 *)(a1 + 56) == [v3 isImplicit])
    {
      char v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
      uint64_t v6 = 0;
    }
    else
    {
      v8 = NSString;
      if (*(unsigned char *)(a1 + 56)) {
        v9 = @"YES";
      }
      else {
        v9 = @"NO";
      }
      if ([v4 isImplicit]) {
        v10 = @"YES";
      }
      else {
        v10 = @"NO";
      }
      [v8 stringWithFormat:@"processing implicit == %@, but feedback is implicit == %@", v9, v10];
      uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
      char v5 = 1;
    }
    if ((v5 & (v6 == 0)) != 0) {
      v11 = @"feedback type is not reliably reported yet";
    }
    else {
      v11 = v6;
    }
    v12 = v11;

    if (v5)
    {
      int v13 = 1;
    }
    else
    {
      v14 = *(void **)(a1 + 32);
      v15 = [v4 sourceBundleIdentifier];
      int v13 = [v14 containsObject:v15];
    }
    if ((v13 & (v12 == 0)) != 0) {
      v16 = @"feedback generated by testing or introspection, not usage within client app";
    }
    else {
      v16 = v12;
    }
    v7 = v16;

    if (v13)
    {
      v17 = +[_PSLogging feedbackChannel];
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
        __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_173_cold_2();
      }
    }
    else
    {
      [*(id *)(a1 + 40) processFeedback:v4];
    }
  }
  else
  {
    v7 = +[_PSLogging feedbackChannel];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_173_cold_1(v7);
    }
  }
}

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_185(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state])
  {
    int v4 = +[_PSLogging feedbackChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_185_cold_1(v3, v4);
    }
  }
  else
  {
    [*(id *)(a1 + 32) finish];
    int v4 = +[_PSLogging feedbackChannel];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v5 = 0;
      _os_log_impl(&dword_1A314B000, v4, OS_LOG_TYPE_DEFAULT, "_PSCNAutocompleteFeedbackProcessingTask: Successfully consumed stream", v5, 2u);
    }
  }
}

BOOL __58___PSCNAutocompleteFeedbackProcessingTask_runOverExplicit__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 feedbackType] == 4
    || [v2 feedbackType] == 5
    || ![v2 feedbackType]
    && ([v2 entered],
        char v5 = objc_claimAutoreleasedReturnValue(),
        uint64_t v6 = [v5 enterStatus],
        v5,
        v6))
  {
    BOOL v3 = 1;
  }
  else if ([v2 feedbackType] == 1)
  {
    v7 = [v2 exited];
    BOOL v3 = [v7 exitStatus] != 0;
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

BOOL __58___PSCNAutocompleteFeedbackProcessingTask_runOverImplicit__block_invoke(uint64_t a1, void *a2)
{
  return [a2 feedbackType] != 2;
}

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_173_cold_1(os_log_t log)
{
  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1A314B000, log, OS_LOG_TYPE_ERROR, "_PSCNAutocompleteFeedbackProcessingTask: Received malformed Biome Event. Skipping.", v1, 2u);
}

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_173_cold_2()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_0();
  _os_log_debug_impl(&dword_1A314B000, v0, OS_LOG_TYPE_DEBUG, "_PSCNAutocompleteFeedbackProcessingTask: Skipping feedback event - %@.", v1, 0xCu);
}

void __96___PSCNAutocompleteFeedbackProcessingTask_runWithInferredEnterAndExit_overImplicit_eventFilter___block_invoke_185_cold_1(void *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [a1 error];
  id v4 = [v3 description];
  [v4 UTF8String];
  OUTLINED_FUNCTION_0();
  _os_log_error_impl(&dword_1A314B000, a2, OS_LOG_TYPE_ERROR, "_PSCNAutocompleteFeedbackProcessingTask: Error: %s", v5, 0xCu);
}

@end