void operations_research::sat::PresolveContext::InsertVarValueEncoding(operations_research::sat::PresolveContext *this, const char *a2, int a3, uint64_t a4)
{
  const char *LiteralRepresentative;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t vars8;

  v10 = a3;
  v9 = a4;
  if (operations_research::sat::PresolveContext::RemapEncodingMaps(this)
    && operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v10, &v9))
  {
    LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, a2);
    v7 = (const char *)v10;
    v8 = v9;
    operations_research::sat::PresolveContext::InsertVarValueEncodingInternal(this, LiteralRepresentative, v7, v8, 1);
  }
}

uint64_t operations_research::sat::PresolveContext::StoreLiteralImpliesVarEqValue(operations_research::sat::PresolveContext *this, const char *a2, int a3, uint64_t a4)
{
  int v11 = a3;
  uint64_t v10 = a4;
  if (!operations_research::sat::PresolveContext::RemapEncodingMaps(this)
    || !operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v11, &v10))
  {
    return 0;
  }
  unsigned int LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, a2);
  int v7 = v11;
  uint64_t v8 = v10;

  return operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, LiteralRepresentative, v7, v8, 1);
}

uint64_t operations_research::sat::PresolveContext::StoreLiteralImpliesVarNEqValue(operations_research::sat::PresolveContext *this, const char *a2, int a3, uint64_t a4)
{
  int v11 = a3;
  uint64_t v10 = a4;
  if (!operations_research::sat::PresolveContext::RemapEncodingMaps(this)
    || !operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v11, &v10))
  {
    return 0;
  }
  unsigned int LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, a2);
  int v7 = v11;
  uint64_t v8 = v10;

  return operations_research::sat::PresolveContext::InsertHalfVarValueEncoding(this, LiteralRepresentative, v7, v8, 0);
}

BOOL operations_research::sat::PresolveContext::HasVarValueEncoding(operations_research::sat::PresolveContext *this, int a2, uint64_t a3, int *a4)
{
  int v19 = a2;
  uint64_t v18 = a3;
  BOOL result = operations_research::sat::PresolveContext::RemapEncodingMaps(this);
  if (result)
  {
    BOOL result = operations_research::sat::PresolveContext::CanonicalizeEncoding(this, &v19, &v18);
    if (result)
    {
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)this + 118, &v19, (uint64_t)v20);
      uint64_t v7 = 0;
      unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v18)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + v18));
      unint64_t v9 = v21[1];
      unint64_t v10 = (v8 >> 7) ^ (v9 >> 12);
      uint64_t v11 = v21[4];
      uint64_t v12 = 0x101010101010101 * (v8 & 0x7F);
      while (1)
      {
        uint64_t v13 = v10 & v11;
        uint64_t v14 = *(void *)(v9 + v13);
        unint64_t v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
        if (v15) {
          break;
        }
LABEL_8:
        if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
          return 0;
        }
        v7 += 8;
        unint64_t v10 = v7 + v13;
      }
      uint64_t v16 = v21[2];
      while (1)
      {
        unint64_t v17 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v11;
        if (*(void *)(v16 + 16 * v17) == v18) {
          break;
        }
        v15 &= v15 - 1;
        if (!v15) {
          goto LABEL_8;
        }
      }
      BOOL result = v17 != v11;
      if (a4)
      {
        if (v17 != v11)
        {
          *a4 = operations_research::sat::PresolveContext::GetLiteralRepresentative(this, (const char *)*(unsigned int *)(v16 + 16 * v17 + 8));
          return 1;
        }
      }
    }
  }
  return result;
}

const char *operations_research::sat::PresolveContext::GetOrCreateVarValueEncoding(operations_research::sat::PresolveContext *this, int a2, uint64_t a3)
{
  uint64_t ConstantVar = (uint64_t)this;
  int v46 = a2;
  uint64_t v45 = a3;
  if (operations_research::sat::PresolveContext::RemapEncodingMaps(this)
    && operations_research::sat::PresolveContext::CanonicalizeEncoding((operations_research::sat::PresolveContext *)ConstantVar, &v46, &v45))
  {
    int v44 = v46;
    uint64_t v5 = v45;
    if (operations_research::Domain::Contains((operations_research::Domain *)(*(void *)(ConstantVar + 512) + 24 * v46), v45))
    {
      absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>((uint64_t *)(ConstantVar + 944), &v44, (uint64_t)&v47);
      uint64_t v6 = 0;
      uint64_t v7 = v48;
      unint64_t v9 = v48 + 1;
      unint64_t v8 = v48[1];
      unint64_t v10 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + v5));
      unint64_t v11 = (v10 >> 7) ^ (v8 >> 12);
      uint64_t v12 = 0x101010101010101 * (v10 & 0x7F);
      uint64_t v13 = v48[4];
      while (1)
      {
        uint64_t v14 = v11 & v13;
        uint64_t v15 = *(void *)(v8 + v14);
        unint64_t v16 = ((v15 ^ v12) - 0x101010101010101) & ~(v15 ^ v12) & 0x8080808080808080;
        if (v16) {
          break;
        }
LABEL_9:
        if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_15;
        }
        v6 += 8;
        unint64_t v11 = v6 + v14;
      }
      uint64_t v17 = v48[2];
      while (1)
      {
        unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v13;
        if (*(void *)(v17 + 16 * v18) == v5) {
          break;
        }
        v16 &= v16 - 1;
        if (!v16) {
          goto LABEL_9;
        }
      }
      if (v18 != v13)
      {
        v35 = (const char *)*(unsigned int *)(v17 + 16 * v18 + 8);
        v36 = (operations_research::sat::PresolveContext *)ConstantVar;
        return operations_research::sat::PresolveContext::GetLiteralRepresentative(v36, v35);
      }
LABEL_15:
      if (operations_research::Domain::Size((operations_research::Domain *)(*(void *)(ConstantVar + 512) + 24 * v44)) == 1)
      {
        uint64_t ConstantVar = operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)ConstantVar, 1, v21);
        uint64_t v22 = 0;
        unint64_t v23 = v7[1];
        unint64_t v24 = (v10 >> 7) ^ (v23 >> 12);
        uint64_t v25 = v7[4];
        while (1)
        {
          uint64_t v26 = v24 & v25;
          uint64_t v27 = *(void *)(v23 + v26);
          unint64_t v28 = ((v27 ^ v12) - 0x101010101010101) & ~(v27 ^ v12) & 0x8080808080808080;
          if (v28) {
            break;
          }
LABEL_21:
          if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v30 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(v9, ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)* (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69* ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed+ v5)));
            uint64_t v29 = v7[2];
            uint64_t v40 = v29 + 16 * v30;
            *(void *)uint64_t v40 = v5;
            *(_DWORD *)(v40 + 8) = 0;
            goto LABEL_38;
          }
          v22 += 8;
          unint64_t v24 = v22 + v26;
        }
        uint64_t v29 = v7[2];
        while (1)
        {
          unint64_t v30 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v25;
          if (*(void *)(v29 + 16 * v30) == v5) {
            break;
          }
          v28 &= v28 - 1;
          if (!v28) {
            goto LABEL_21;
          }
        }
LABEL_38:
        *(_DWORD *)(v29 + 16 * v30 + 8) = ConstantVar;
        return (const char *)ConstantVar;
      }
      if (v44 < 0)
      {
        uint64_t v32 = -operations_research::Domain::Max((operations_research::Domain *)(*(void *)(ConstantVar + 512) + 24 * ~v44), v20);
        unsigned int v33 = v44;
        if ((v44 & 0x80000000) == 0) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v32 = operations_research::Domain::Min((operations_research::Domain *)(*(void *)(ConstantVar + 512) + 24 * v44), v20);
        unsigned int v33 = v44;
        if ((v44 & 0x80000000) == 0)
        {
LABEL_25:
          uint64_t v34 = operations_research::Domain::Max((operations_research::Domain *)(*(void *)(ConstantVar + 512) + 24 * v33), v31);
LABEL_29:
          if (operations_research::Domain::Size((operations_research::Domain *)(*(void *)(ConstantVar + 512)
                                                                               + 24 * v44)) == 2)
          {
            if (v5 == v32) {
              uint64_t v37 = v34;
            }
            else {
              uint64_t v37 = v32;
            }
            uint64_t v47 = v37;
            if (v7[1] + v7[4] == absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::find<long long>(v9, &v47))
            {
              if (v32 || v34 != 1)
              {
                v41 = (const char *)operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)ConstantVar);
                operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)ConstantVar, v41, v44, v34);
                unsigned int LiteralRepresentative = operations_research::sat::PresolveContext::GetLiteralRepresentative((operations_research::sat::PresolveContext *)ConstantVar, v41);
                if (v5 == v34) {
                  return (const char *)LiteralRepresentative;
                }
                else {
                  return (const char *)~LiteralRepresentative;
                }
              }
              else
              {
                LODWORD(ConstantVar) = operations_research::sat::PresolveContext::GetLiteralRepresentative((operations_research::sat::PresolveContext *)ConstantVar, (const char *)v44);
                uint64_t v43 = 1;
                *(_DWORD *)absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(v9, &v43) = ConstantVar;
                uint64_t v43 = 0;
                *(_DWORD *)absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(v9, &v43) = ~ConstantVar;
                if (v5 == 1) {
                  return (const char *)ConstantVar;
                }
                else {
                  return (const char *)~ConstantVar;
                }
              }
            }
            else
            {
              uint64_t ConstantVar = ~(unint64_t)operations_research::sat::PresolveContext::GetLiteralRepresentative((operations_research::sat::PresolveContext *)ConstantVar, (const char *)*(unsigned int *)(v38 + 8));
              *(_DWORD *)absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::operator[]<long long,absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>>(v9, &v45) = ConstantVar;
            }
            return (const char *)ConstantVar;
          }
          v39 = (const char *)operations_research::sat::PresolveContext::NewBoolVar((operations_research::sat::PresolveContext *)ConstantVar);
          operations_research::sat::PresolveContext::InsertVarValueEncoding((operations_research::sat::PresolveContext *)ConstantVar, v39, v44, v5);
          v36 = (operations_research::sat::PresolveContext *)ConstantVar;
          v35 = v39;
          return operations_research::sat::PresolveContext::GetLiteralRepresentative(v36, v35);
        }
      }
      uint64_t v34 = -operations_research::Domain::Min((operations_research::Domain *)(*(void *)(ConstantVar + 512) + 24 * ~v33), v31);
      goto LABEL_29;
    }
  }

  return (const char *)operations_research::sat::PresolveContext::GetOrCreateConstantVar((operations_research::sat::PresolveContext *)ConstantVar, 0, v4);
}

void operations_research::sat::PresolveContext::ReadObjectiveFromProto(operations_research::sat::PresolveContext *this, __n128 a2)
{
  if (*(void *)(*((void *)this + 6) + 120)) {
    v3 = *(uint64_t **)(*((void *)this + 6) + 120);
  }
  else {
    v3 = &operations_research::sat::_CpObjectiveProto_default_instance_;
  }
  *((void *)this + 80) = v3[11];
  a2.n128_u64[0] = v3[12];
  if (a2.n128_f64[0] == 0.0) {
    a2.n128_f64[0] = 1.0;
  }
  *((void *)this + 81) = a2.n128_u64[0];
  unint64_t v4 = *((int *)v3 + 16);
  if (v4)
  {
    *((unsigned char *)this + 608) = 1;
    operations_research::Domain::FromFlatSpanOfIntervals(v3[9], v4, &v43, a2);
    uint64_t v5 = (void *)((char *)this + 616);
    if ((unint64_t *)((char *)this + 616) != &v43)
    {
LABEL_8:
      uint64_t v6 = (void **)((char *)this + 624);
      if (*((unsigned char *)this + 616)) {
        operator delete(*v6);
      }
      *uint64_t v5 = v43;
      *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
      goto LABEL_11;
    }
  }
  else
  {
    *((unsigned char *)this + 608) = 0;
    operations_research::Domain::AllValues((uint64_t)&v43);
    uint64_t v5 = (void *)((char *)this + 616);
    if ((unint64_t *)((char *)this + 616) != &v43) {
      goto LABEL_8;
    }
  }
  if (v43) {
    operator delete(__p[0]);
  }
LABEL_11:
  unint64_t v7 = *((void *)this + 70);
  if (v7 < 0x80)
  {
    if (v7)
    {
      *((void *)this + 69) = 0;
      memset(*((void **)this + 67), 128, v7 + 8);
      *(unsigned char *)(*((void *)this + 67) + *((void *)this + 70)) = -1;
      unint64_t v7 = *((void *)this + 70);
      uint64_t v8 = v7 - (v7 >> 3);
      if (v7 == 7) {
        uint64_t v8 = 6;
      }
      *((void *)this + 72) = v8 - *((void *)this + 69);
    }
  }
  else
  {
    operator delete(*((void **)this + 67));
    unint64_t v7 = 0;
    *((void *)this + 67) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 72) = 0;
    *((void *)this + 68) = 0;
    *((void *)this + 70) = 0;
    *((void *)this + 69) = 0;
  }
  unint64_t v9 = (unint64_t *)*((void *)this + 71);
  if (v9)
  {
    v9[1] = 0;
    *unint64_t v9 = v7;
    v9[4] = 0;
    v9[2] = 0;
    if (*((int *)v3 + 4) < 1) {
      return;
    }
  }
  else if (*((int *)v3 + 4) < 1)
  {
    return;
  }
  uint64_t v10 = 0;
  unint64_t v11 = ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7));
  unint64_t v42 = v11 >> 7;
  uint64_t v12 = 0x101010101010101 * (v11 & 0x7F);
  do
  {
    uint64_t v18 = 0;
    int v19 = *(_DWORD *)(v3[3] + 4 * v10);
    if (v19 >= 0) {
      uint64_t v20 = *(void *)(v3[6] + 8 * v10);
    }
    else {
      uint64_t v20 = -*(void *)(v3[6] + 8 * v10);
    }
    if (~v19 > v19) {
      int v19 = ~v19;
    }
    LODWORD(v43) = v19;
    unint64_t v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v19)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v19));
    unint64_t v22 = *((void *)this + 67);
    unint64_t v23 = (v21 >> 7) ^ (v22 >> 12);
    uint64_t v24 = *((void *)this + 70);
    uint64_t v25 = 0x101010101010101 * (v21 & 0x7F);
    for (unint64_t i = v23; ; unint64_t i = v18 + v27)
    {
      unint64_t v27 = i & v24;
      uint64_t v28 = *(void *)(v22 + (i & v24));
      unint64_t v29 = ((v28 ^ v25) - 0x101010101010101) & ~(v28 ^ v25) & 0x8080808080808080;
      if (v29) {
        break;
      }
LABEL_36:
      if ((v28 & (~v28 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v31 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert((uint64_t *)this + 67, v21);
        uint64_t v30 = *((void *)this + 68);
        uint64_t v32 = v30 + 16 * v31;
        *(_DWORD *)uint64_t v32 = v43;
        *(void *)(v32 + 8) = 0;
        int v19 = v43;
        unint64_t v22 = *((void *)this + 67);
        uint64_t v24 = *((void *)this + 70);
        unint64_t v21 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v43)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + (int)v43));
        unint64_t v23 = (v21 >> 7) ^ (v22 >> 12);
        uint64_t v25 = 0x101010101010101 * (v21 & 0x7F);
        goto LABEL_39;
      }
      v18 += 8;
    }
    uint64_t v30 = *((void *)this + 68);
    while (1)
    {
      unint64_t v31 = (v27 + (__clz(__rbit64(v29)) >> 3)) & v24;
      if (*(_DWORD *)(v30 + 16 * v31) == v19) {
        break;
      }
      v29 &= v29 - 1;
      if (!v29) {
        goto LABEL_36;
      }
    }
LABEL_39:
    uint64_t v33 = 0;
    *(void *)(v30 + 16 * v31 + 8) += v20;
    while (1)
    {
      unint64_t v34 = v23 & v24;
      uint64_t v35 = *(void *)(v22 + v34);
      unint64_t v36 = ((v35 ^ v25) - 0x101010101010101) & ~(v35 ^ v25) & 0x8080808080808080;
      if (v36) {
        break;
      }
LABEL_44:
      if ((v35 & (~v35 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v38 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert((uint64_t *)this + 67, v21);
        uint64_t v37 = *((void *)this + 68);
        uint64_t v39 = v37 + 16 * v38;
        *(_DWORD *)uint64_t v39 = v43;
        *(void *)(v39 + 8) = 0;
        goto LABEL_47;
      }
      v33 += 8;
      unint64_t v23 = v33 + v34;
    }
    uint64_t v37 = *((void *)this + 68);
    while (1)
    {
      unint64_t v38 = (v34 + (__clz(__rbit64(v36)) >> 3)) & v24;
      if (*(_DWORD *)(v37 + 16 * v38) == v19) {
        break;
      }
      v36 &= v36 - 1;
      if (!v36) {
        goto LABEL_44;
      }
    }
LABEL_47:
    if (*(void *)(v37 + 16 * v38 + 8))
    {
      uint64_t v16 = 0;
      uint64_t v40 = (void *)(*((void *)this + 85) + 48 * (int)v43);
      uint64_t v17 = v42 ^ (*v40 >> 12);
      uint64_t v41 = v40[3];
      while (1)
      {
        uint64_t v13 = v17 & v41;
        uint64_t v14 = *(void *)(*v40 + v13);
        unint64_t v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
        if (v15) {
          break;
        }
LABEL_23:
        if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v40[1]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*((void *)this + 85) + 48 * (int)v43), ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7)))) = -1;
          goto LABEL_50;
        }
        v16 += 8;
        uint64_t v17 = v16 + v13;
      }
      while (*(_DWORD *)(v40[1] + 4 * ((v13 + (__clz(__rbit64(v15)) >> 3)) & v41)) != -1)
      {
        v15 &= v15 - 1;
        if (!v15) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>((uint64_t *)this + 67, (int *)&v43);
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((void *)this + 85) + 48 * (int)v43), &operations_research::sat::kObjectiveConstraint);
    }
LABEL_50:
    ++v10;
  }
  while (v10 < *((int *)v3 + 4));
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v3)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v3));
  uint64_t v5 = *a1;
  unint64_t v6 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  uint64_t v8 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v9 = v6 & v7;
    uint64_t v10 = *(void *)(v5 + (v6 & v7));
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_5:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v6 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v7;
    if (*(_DWORD *)(a1[1] + 16 * v12) == v3) {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_5;
    }
  }
  if (v12 == v7) {
    return 0;
  }
  --a1[2];
  uint64_t v14 = *(void *)(v5 + ((v12 - 8) & v7));
  unint64_t v15 = *(void *)(v5 + v12) & (~*(void *)(v5 + v12) << 6) & 0x8080808080808080;
  unint64_t v16 = v14 & (~v14 << 6) & 0x8080808080808080;
  if (v16) {
    BOOL v17 = v15 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v21 = 0;
    char v18 = -2;
  }
  else
  {
    unsigned int v19 = (__clz(v16) >> 3) + (__clz(__rbit64(v15)) >> 3);
    BOOL v20 = v19 >= 8;
    uint64_t v21 = v19 < 8;
    if (v20) {
      char v18 = -2;
    }
    else {
      char v18 = 0x80;
    }
  }
  *(unsigned char *)(v5 + v12) = v18;
  *(unsigned char *)((a1[3] & (v12 - 8)) + (a1[3] & 7) + *a1 + 1) = v18;
  uint64_t v22 = a1[4];
  a1[5] += v21;
  if (!v22) {
    return 1;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
  uint64_t result = 1;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  return result;
}

BOOL operations_research::sat::PresolveContext::CanonicalizeObjective(operations_research::sat::PresolveContext *this, unint64_t a2)
{
  uint64_t v3 = (void *)*((void *)this + 73);
  *((void *)this + 74) = v3;
  unint64_t v4 = (char *)*((void *)this + 67);
  uint64_t v5 = (int *)*((void *)this + 68);
  unint64_t v6 = v4;
  if (*v4 <= -2)
  {
    do
    {
      unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v6 = (void *)((char *)v6 + v7);
      v5 += 4 * v7;
    }
    while (*(char *)v6 < -1);
  }
  v139 = (uint64_t *)((char *)this + 584);
  uint64_t v8 = &v4[*((void *)this + 70)];
  if (v6 == (void *)v8) {
    goto LABEL_110;
  }
  v135 = (uint64_t *)((char *)this + 536);
  v137 = &v4[*((void *)this + 70)];
  do
  {
    int v9 = *v5;
    uint64_t v10 = *((void *)v5 + 1);
    unint64_t v11 = *((void *)this + 75);
    if ((unint64_t)v3 < v11)
    {
      *(_DWORD *)uint64_t v3 = v9;
      v3[1] = v10;
      v3 += 2;
      *((void *)this + 74) = v3;
      int v12 = *((char *)v6 + 1);
      unint64_t v6 = (void *)((char *)v6 + 1);
      v5 += 4;
      if (v12 > -2) {
        continue;
      }
      goto LABEL_23;
    }
    uint64_t v13 = (_DWORD *)*v139;
    uint64_t v14 = ((uint64_t)v3 - *v139) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = v11 - (void)v13;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v18 = (char *)operator new(16 * v17);
      uint64_t v19 = (uint64_t)&v18[16 * v14];
      *(_DWORD *)uint64_t v19 = v9;
      *(void *)(v19 + 8) = v10;
      if (v3 == (void *)v13)
      {
LABEL_26:
        uint64_t v21 = v3;
        *((void *)this + 73) = v19;
        uint64_t v3 = (void *)(v19 + 16);
        *((void *)this + 74) = v19 + 16;
        *((void *)this + 75) = &v18[16 * v17];
        if (v21) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    else
    {
      char v18 = 0;
      uint64_t v19 = 16 * v14;
      *(_DWORD *)uint64_t v19 = v9;
      *(void *)(v19 + 8) = v10;
      if (v3 == (void *)v13) {
        goto LABEL_26;
      }
    }
    uint64_t v20 = v19;
    do
    {
      *(_OWORD *)(v20 - 16) = *((_OWORD *)v3 - 1);
      v20 -= 16;
      v3 -= 2;
    }
    while (v3 != (void *)v13);
    uint64_t v21 = (void *)*v139;
    *((void *)this + 73) = v20;
    uint64_t v3 = (void *)(v19 + 16);
    *((void *)this + 74) = v19 + 16;
    *((void *)this + 75) = &v18[16 * v17];
    if (v21) {
LABEL_21:
    }
      operator delete(v21);
LABEL_22:
    uint64_t v8 = v137;
    *((void *)this + 74) = v3;
    int v22 = *((char *)v6 + 1);
    unint64_t v6 = (void *)((char *)v6 + 1);
    v5 += 4;
    if (v22 > -2) {
      continue;
    }
    do
    {
LABEL_23:
      unint64_t v23 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v6 = (void *)((char *)v6 + v23);
      v5 += 4 * v23;
    }
    while (*(char *)v6 < -1);
  }
  while (v6 != (void *)v8);
  uint64_t v24 = (_DWORD *)*v139;
  if ((void *)*v139 != v3)
  {
    uint64_t v136 = 0;
    unint64_t v25 = ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7));
    unint64_t v133 = v25 >> 7;
    uint64_t v134 = 0x101010101010101 * (v25 & 0x7F);
    while (1)
    {
      while (1)
      {
        uint64_t v31 = 0;
        LODWORD(v145) = 0;
        LODWORD(v145) = *v24;
        unint64_t v53 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (int)v145)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + (int)v145));
        unint64_t v54 = *((void *)this + 67);
        unint64_t v32 = (v53 >> 7) ^ (v54 >> 12);
        uint64_t v55 = *((void *)this + 70);
        uint64_t v56 = 0x101010101010101 * (v53 & 0x7F);
        while (1)
        {
          uint64_t v26 = v32 & v55;
          uint64_t v27 = *(void *)(v54 + v26);
          unint64_t v28 = ((v27 ^ v56) - 0x101010101010101) & ~(v27 ^ v56) & 0x8080808080808080;
          if (v28) {
            break;
          }
LABEL_34:
          if ((v27 & (~v27 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_73;
          }
          v31 += 8;
          unint64_t v32 = v31 + v26;
        }
        uint64_t v29 = *((void *)this + 68);
        while (1)
        {
          unint64_t v30 = (v26 + (__clz(__rbit64(v28)) >> 3)) & v55;
          if (*(_DWORD *)(v29 + 16 * v30) == v145) {
            break;
          }
          v28 &= v28 - 1;
          if (!v28) {
            goto LABEL_34;
          }
        }
        if (v30 == v55) {
          goto LABEL_73;
        }
        uint64_t v33 = *(void *)(v29 + 16 * v30 + 8);
        if (!*((unsigned char *)this + 64)
          && !*((unsigned char *)this + 608)
          && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 83) - *((void *)this + 82)) >> 3) == *(_DWORD *)(*((void *)this + 6) + 48))
        {
          unint64_t v34 = (void *)(*((void *)this + 85) + 48 * (int)v145);
          if (v34[2] == 1)
          {
            uint64_t v35 = 0;
            uint64_t v36 = v133 ^ (*v34 >> 12);
            uint64_t v37 = v34[3];
            while (1)
            {
              uint64_t v38 = v36 & v37;
              uint64_t v39 = *(void *)(*v34 + v38);
              unint64_t v40 = ((v39 ^ v134) - 0x101010101010101) & ~(v39 ^ v134) & 0x8080808080808080;
              if (v40) {
                break;
              }
LABEL_45:
              if ((v39 & (~v39 << 6) & 0x8080808080808080) != 0) {
                goto LABEL_60;
              }
              v35 += 8;
              uint64_t v36 = v35 + v38;
            }
            while (1)
            {
              unint64_t v41 = (v38 + (__clz(__rbit64(v40)) >> 3)) & v37;
              if (*(_DWORD *)(v34[1] + 4 * v41) == -1) {
                break;
              }
              v40 &= v40 - 1;
              if (!v40) {
                goto LABEL_45;
              }
            }
            if (v41 != v37)
            {
              v147 = (char *)operator new(0x28uLL);
              long long v148 = xmmword_23CE85CF0;
              strcpy(v147, "objective: variable not used elsewhere");
              operations_research::sat::PresolveContext::UpdateRuleStats((uint64_t)this, (uint64_t)&v147);
              if (SHIBYTE(v148) < 0) {
                operator delete(v147);
              }
              v131 = (const char *)v145;
              if (v33 < 1)
              {
                if ((v145 & 0x80000000) != 0) {
                  uint64_t v43 = -operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v145), v42);
                }
                else {
                  uint64_t v43 = operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * v145), v42);
                }
              }
              else if ((v145 & 0x80000000) != 0)
              {
                uint64_t v43 = -operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v145), v42);
              }
              else
              {
                uint64_t v43 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v145), v42);
              }
              operations_research::Domain::Domain(&v147, v43);
              char v44 = operations_research::sat::PresolveContext::IntersectDomainWith(this, v131, (const operations_research::Domain *)&v147, 0);
              if (v147)
              {
                char v132 = v44;
                operator delete((void *)v148);
                char v44 = v132;
              }
              if ((v44 & 1) == 0) {
                return 0;
              }
            }
          }
        }
LABEL_60:
        int v45 = (int)v145;
        if (~v145 > (int)v145) {
          int v45 = ~v145;
        }
        if (!operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * v45), (const char *)a2))break; {
        if ((v145 & 0x80000000) != 0)
        }
          uint64_t v47 = -operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v145), v46);
        else {
          uint64_t v47 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v145), v46);
        }
        v136 += v47 * v33;
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((void *)this + 85) + 48 * (int)v145), &operations_research::sat::kObjectiveConstraint);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v145);
LABEL_73:
        v24 += 4;
        if (v24 == (_DWORD *)v3) {
          goto LABEL_111;
        }
      }
      int v48 = (int)v145;
      if (~v145 <= (int)v145) {
        a2 = v145;
      }
      else {
        a2 = ~v145;
      }
      unint64_t v49 = (int)a2;
      uint64_t v50 = *((void *)this + 137);
      if ((int)a2 >= (unint64_t)((*((void *)this + 138) - v50) >> 2)
        || *(_DWORD *)(v50 + 4 * (int)a2) == a2)
      {
        uint64_t v51 = 0;
        uint64_t v52 = 1;
      }
      else
      {
        operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1088), a2);
        a2 = *(unsigned int *)(*((void *)this + 137) + 4 * v49);
        uint64_t v52 = *(void *)(*((void *)this + 140) + 8 * v49);
        uint64_t v51 = *(void *)(*((void *)this + 143) + 8 * v49);
        unint64_t v49 = (int)a2;
      }
      LODWORD(v147) = a2;
      *(void *)&long long v148 = v52;
      *((void *)&v148 + 1) = v51;
      uint64_t v57 = *((void *)this + 153);
      if (v49 < (*((void *)this + 154) - v57) >> 2
        && *(_DWORD *)(v57 + 4 * v49) != a2
        && (operations_research::AffineRelation::CompressPath((operations_research::sat::PresolveContext *)((char *)this + 1216), a2), a2 = *(unsigned int *)(*((void *)this + 153) + 4 * v49), uint64_t v58 = *(void *)(*((void *)this + 156) + 8 * v49), LODWORD(v147) = *(_DWORD *)(*((void *)this + 153) + 4 * v49), v58 == -1))
      {
        uint64_t v52 = -v52;
        *(void *)&long long v148 = v52;
        if ((v48 & 0x80000000) == 0)
        {
LABEL_80:
          if (a2 != v145) {
            goto LABEL_84;
          }
          goto LABEL_108;
        }
      }
      else if ((v48 & 0x80000000) == 0)
      {
        goto LABEL_80;
      }
      *(void *)&long long v148 = -v52;
      *((void *)&v148 + 1) = -v51;
      if (a2 != v145)
      {
LABEL_84:
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v145);
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((void *)this + 85) + 48 * (int)v145), &operations_research::sat::kObjectiveConstraint);
        uint64_t v59 = 0;
        v136 += *((void *)&v148 + 1) * v33;
        uint64_t v60 = v148 * v33;
        uint64_t v61 = (int)v147;
        unint64_t v62 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v61)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + v61));
        unint64_t v63 = *((void *)this + 67);
        unint64_t v64 = (v62 >> 7) ^ (v63 >> 12);
        uint64_t v65 = *((void *)this + 70);
        while (1)
        {
          unint64_t v66 = v64 & v65;
          uint64_t v67 = *(void *)(v63 + (v64 & v65));
          unint64_t v68 = ((v67 ^ (0x101010101010101 * (v62 & 0x7F))) - 0x101010101010101) & ~(v67 ^ (0x101010101010101
                                                                                              * (v62 & 0x7F))) & 0x8080808080808080;
          if (v68) {
            break;
          }
LABEL_89:
          if ((v67 & (~v67 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v70 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert(v135, v62);
            uint64_t v69 = *((void *)this + 68);
            LODWORD(v61) = v147;
            uint64_t v71 = v69 + 16 * v70;
            *(_DWORD *)uint64_t v71 = v147;
            *(void *)(v71 + 8) = 0;
            goto LABEL_92;
          }
          v59 += 8;
          unint64_t v64 = v59 + v66;
        }
        uint64_t v69 = *((void *)this + 68);
        while (1)
        {
          unint64_t v70 = (v66 + (__clz(__rbit64(v68)) >> 3)) & v65;
          if (*(_DWORD *)(v69 + 16 * v70) == v147) {
            break;
          }
          v68 &= v68 - 1;
          if (!v68) {
            goto LABEL_89;
          }
        }
LABEL_92:
        uint64_t v72 = v69 + 16 * v70;
        uint64_t v73 = *(void *)(v72 + 8) + v60;
        *(void *)(v72 + 8) = v73;
        if (v73)
        {
          uint64_t v74 = 0;
          v75 = (void *)(*((void *)this + 85) + 48 * (int)v61);
          uint64_t v76 = v133 ^ (*v75 >> 12);
          uint64_t v77 = v75[3];
          while (1)
          {
            uint64_t v78 = v76 & v77;
            uint64_t v79 = *(void *)(*v75 + v78);
            unint64_t v80 = ((v79 ^ v134) - 0x101010101010101) & ~(v79 ^ v134) & 0x8080808080808080;
            if (v80) {
              break;
            }
LABEL_97:
            if ((v79 & (~v79 << 6) & 0x8080808080808080) != 0)
            {
              *(_DWORD *)(v75[1]
                        + 4
                        * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*((void *)this + 85) + 48 * (int)v61), ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7)))) = -1;
              LODWORD(v61) = v147;
              goto LABEL_101;
            }
            v74 += 8;
            uint64_t v76 = v74 + v78;
          }
          while (*(_DWORD *)(v75[1] + 4 * ((v78 + (__clz(__rbit64(v80)) >> 3)) & v77)) != -1)
          {
            v80 &= v80 - 1;
            if (!v80) {
              goto LABEL_97;
            }
          }
LABEL_101:
          if (~v61 > (int)v61) {
            LODWORD(v61) = ~v61;
          }
          if (operations_research::Domain::IsFixed((operations_research::Domain *)(*((void *)this + 64) + 24 * (int)v61), (const char *)v62))
          {
            if ((v147 & 0x80000000) != 0) {
              uint64_t v81 = -operations_research::Domain::Max((operations_research::Domain *)(*((void *)this + 64) + 24 * ~v147), (const char *)a2);
            }
            else {
              uint64_t v81 = operations_research::Domain::Min((operations_research::Domain *)(*((void *)this + 64) + 24 * v147), (const char *)a2);
            }
            v136 += v81 * v73;
            absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((void *)this + 85) + 48 * (int)v147), &operations_research::sat::kObjectiveConstraint);
            absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v147);
          }
        }
        else
        {
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v135, (int *)&v147);
          absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*((void *)this + 85) + 48 * (int)v147), &operations_research::sat::kObjectiveConstraint);
        }
      }
LABEL_108:
      v24 += 4;
      if (v24 == (_DWORD *)v3) {
        goto LABEL_111;
      }
    }
  }
LABEL_110:
  uint64_t v136 = 0;
LABEL_111:
  operations_research::Domain::Domain(&v147, 0);
  v82 = (void *)*((void *)this + 73);
  *((void *)this + 74) = v82;
  v83 = (char *)*((void *)this + 67);
  v84 = (int *)*((void *)this + 68);
  v85 = v83;
  if (*v83 <= -2)
  {
    do
    {
      unint64_t v86 = (__clz(__rbit64(((*v85 >> 7) & ~*v85 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      v85 = (void *)((char *)v85 + v86);
      v84 += 4 * v86;
    }
    while (*(char *)v85 < -1);
  }
  v87 = &v83[*((void *)this + 70)];
  if (v85 != (void *)v87)
  {
    v138 = &v83[*((void *)this + 70)];
    while (1)
    {
      int v88 = *v84;
      uint64_t v89 = *((void *)v84 + 1);
      unint64_t v90 = *((void *)this + 75);
      if ((unint64_t)v82 < v90)
      {
        *(_DWORD *)v82 = v88;
        v82[1] = v89;
        v82 += 2;
        *((void *)this + 74) = v82;
        int v91 = *((char *)v85 + 1);
        v85 = (void *)((char *)v85 + 1);
        v84 += 4;
        if (v91 <= -2) {
          goto LABEL_133;
        }
        goto LABEL_115;
      }
      v92 = (void *)*v139;
      uint64_t v93 = ((uint64_t)v82 - *v139) >> 4;
      unint64_t v94 = v93 + 1;
      if ((unint64_t)(v93 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v95 = v90 - (void)v92;
      if (v95 >> 3 > v94) {
        unint64_t v94 = v95 >> 3;
      }
      if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v96 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v96 = v94;
      }
      if (v96)
      {
        if (v96 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v97 = (char *)operator new(16 * v96);
        uint64_t v98 = (uint64_t)&v97[16 * v93];
        *(_DWORD *)uint64_t v98 = v88;
        *(void *)(v98 + 8) = v89;
        if (v82 == v92)
        {
LABEL_136:
          v100 = v82;
          *((void *)this + 73) = v98;
          v82 = (void *)(v98 + 16);
          *((void *)this + 74) = v98 + 16;
          *((void *)this + 75) = &v97[16 * v96];
          if (v100) {
            goto LABEL_131;
          }
          goto LABEL_132;
        }
      }
      else
      {
        v97 = 0;
        uint64_t v98 = 16 * v93;
        *(_DWORD *)uint64_t v98 = v88;
        *(void *)(v98 + 8) = v89;
        if (v82 == v92) {
          goto LABEL_136;
        }
      }
      uint64_t v99 = v98;
      do
      {
        *(_OWORD *)(v99 - 16) = *((_OWORD *)v82 - 1);
        v99 -= 16;
        v82 -= 2;
      }
      while (v82 != v92);
      v100 = (void *)*v139;
      *((void *)this + 73) = v99;
      v82 = (void *)(v98 + 16);
      *((void *)this + 74) = v98 + 16;
      *((void *)this + 75) = &v97[16 * v96];
      if (v100) {
LABEL_131:
      }
        operator delete(v100);
LABEL_132:
      v87 = v138;
      *((void *)this + 74) = v82;
      int v101 = *((char *)v85 + 1);
      v85 = (void *)((char *)v85 + 1);
      v84 += 4;
      if (v101 <= -2)
      {
        do
        {
LABEL_133:
          unint64_t v102 = (__clz(__rbit64(((*v85 >> 7) & ~*v85 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v85 = (void *)((char *)v85 + v102);
          v84 += 4 * v102;
        }
        while (*(char *)v85 < -1);
      }
LABEL_115:
      if (v85 == (void *)v87)
      {
        uint64_t v103 = *v139;
        goto LABEL_140;
      }
    }
  }
  uint64_t v103 = (uint64_t)v82;
LABEL_140:
  unint64_t v104 = 126 - 2 * __clz(((uint64_t)v82 - v103) >> 4);
  if (v82 == (void *)v103) {
    uint64_t v105 = 0;
  }
  else {
    uint64_t v105 = v104;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v103, (int *)v82, (uint64_t)&v145, v105, 1);
  v106 = (unsigned int *)*((void *)this + 73);
  v107 = (unsigned int *)*((void *)this + 74);
  if (v106 != v107)
  {
    uint64_t v108 = 0;
    while (1)
    {
      uint64_t v109 = *((void *)v106 + 1);
      if (v109)
      {
        if (v109 >= 0) {
          unint64_t v110 = *((void *)v106 + 1);
        }
        else {
          unint64_t v110 = -v109;
        }
        unint64_t v111 = v108;
        do
        {
          uint64_t v108 = v110;
          unint64_t v110 = v111 % v110;
          unint64_t v111 = v108;
        }
        while (v110);
      }
      operations_research::sat::PresolveContext::DomainOf(this, (const char *)*v106, v140);
      operations_research::Domain::MultiplicationBy((operations_research::Domain *)v140, 0, v109, &v141);
      operations_research::Domain::AdditionWith((operations_research::Domain *)&v147, (const operations_research::Domain *)&v141, &v143, v112);
      operations_research::Domain::RelaxIfTooComplex(&v143, v113, (unint64_t *)&v145);
      if (v147) {
        operator delete((void *)v148);
      }
      v147 = v145;
      long long v148 = v146;
      v145 = 0;
      if (v143)
      {
        operator delete(__p);
        if ((v141 & 1) == 0)
        {
LABEL_156:
          if (v140[0]) {
            goto LABEL_160;
          }
          goto LABEL_145;
        }
      }
      else if ((v141 & 1) == 0)
      {
        goto LABEL_156;
      }
      operator delete(v142);
      if (v140[0]) {
LABEL_160:
      }
        operator delete((void *)v140[1]);
LABEL_145:
      v106 += 4;
      if (v106 == v107) {
        goto LABEL_162;
      }
    }
  }
  uint64_t v108 = 0;
LABEL_162:
  operations_research::Domain::Domain(&v141, -v136);
  v114 = (unint64_t *)((char *)this + 616);
  operations_research::Domain::AdditionWith((operations_research::sat::PresolveContext *)((char *)this + 616), (const operations_research::Domain *)&v141, &v143, v115);
  operations_research::Domain::IntersectionWith(&v143, (const operations_research::Domain *)&v147, (unint64_t *)&v145);
  if ((char **)((char *)this + 616) == &v145)
  {
    if (v145) {
      operator delete((void *)v146);
    }
  }
  else
  {
    v116 = (void **)((char *)this + 624);
    if (*((unsigned char *)this + 616)) {
      operator delete(*v116);
    }
    unint64_t *v114 = (unint64_t)v145;
    *(_OWORD *)v116 = v146;
    v145 = 0;
  }
  if (v143)
  {
    operator delete(__p);
    if (v141) {
LABEL_168:
    }
      operator delete(v142);
  }
  else if (v141)
  {
    goto LABEL_168;
  }
  operations_research::Domain::SimplifyUsingImpliedDomain((operations_research::sat::PresolveContext *)((char *)this + 616), (const operations_research::Domain *)&v147, (unint64_t *)&v145);
  if (v114 == (unint64_t *)&v145)
  {
    if (v145) {
      operator delete((void *)v146);
    }
  }
  else
  {
    v117 = (void **)((char *)this + 624);
    if (*((unsigned char *)this + 616)) {
      operator delete(*v117);
    }
    unint64_t *v114 = (unint64_t)v145;
    *(_OWORD *)v117 = v146;
  }
  *((double *)this + 80) = *((double *)this + 80) + (double)v136;
  if (v108 >= 2)
  {
    v118 = (char *)*((void *)this + 67);
    uint64_t v119 = *((void *)this + 68);
    if (*v118 > -2)
    {
      v120 = (void *)*((void *)this + 67);
    }
    else
    {
      v120 = (void *)*((void *)this + 67);
      do
      {
        unint64_t v121 = (__clz(__rbit64(((*v120 >> 7) & ~*v120 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v120 = (void *)((char *)v120 + v121);
        v119 += 16 * v121;
      }
      while (*(char *)v120 < -1);
    }
    v122 = &v118[*((void *)this + 70)];
    while (v120 != (void *)v122)
    {
      *(uint64_t *)(v119 + 8) /= v108;
      int v123 = *((char *)v120 + 1);
      v120 = (void *)((char *)v120 + 1);
      v119 += 16;
      if (v123 <= -2)
      {
        do
        {
          unint64_t v124 = (__clz(__rbit64(((*v120 >> 7) & ~*v120 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v120 = (void *)((char *)v120 + v124);
          v119 += 16 * v124;
        }
        while (*(char *)v120 < -1);
      }
    }
    operations_research::Domain::InverseMultiplicationBy((operations_research::sat::PresolveContext *)((char *)this + 616), v108, (unint64_t *)&v145);
    if (v114 == (unint64_t *)&v145)
    {
      if (v145) {
        operator delete((void *)v146);
      }
    }
    else
    {
      v125 = (void **)((char *)this + 624);
      if (*((unsigned char *)this + 616)) {
        operator delete(*v125);
      }
      unint64_t *v114 = (unint64_t)v145;
      *(_OWORD *)v125 = v146;
    }
    *((double *)this + 80) = *((double *)this + 80) / (double)v108;
    *((double *)this + 81) = *((double *)this + 81) * (double)v108;
  }
  BOOL IsEmpty = operations_research::Domain::IsEmpty((operations_research::sat::PresolveContext *)((char *)this + 616));
  if (!IsEmpty)
  {
    uint64_t v128 = operations_research::Domain::Max((operations_research::sat::PresolveContext *)((char *)this + 616), v126);
    operations_research::Domain::Domain(&v143, 0x8000000000000000, v128);
    operations_research::Domain::IntersectionWith(&v147, (const operations_research::Domain *)&v143, (unint64_t *)&v145);
    *((unsigned char *)this + 608) = operations_research::Domain::IsIncludedIn((operations_research::Domain *)&v145, (operations_research::sat::PresolveContext *)((char *)this + 616)) ^ 1;
    if (v145) {
      operator delete((void *)v146);
    }
    if (v143) {
      operator delete(__p);
    }
  }
  BOOL v129 = !IsEmpty;
  if (v147) {
    operator delete((void *)v148);
  }
  return v129;
}

void sub_23CD55278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29,void *__p)
{
  if (*(unsigned char *)(v30 - 112)) {
    operator delete(*(void **)(v30 - 104));
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PresolveContext::SubstituteVariableInObjective(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void **a5)
{
  v87[0] = a2;
  if (*(_DWORD *)(a4 + 16))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v85, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1278);
    uint64_t v72 = (void *)google::LogMessage::stream((google::LogMessage *)&v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Check failed: equality.enforcement_literal().empty() ", 53);
    goto LABEL_77;
  }
  if (a2 < 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v85, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1279);
    uint64_t v73 = (void *)google::LogMessage::stream((google::LogMessage *)&v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed: RefIsPositive(var_in_equality) ", 45);
LABEL_77:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v85);
  }
  uint64_t v5 = a5;
  uint64_t v6 = a4;
  uint64_t v8 = a1;
  if (a5) {
    a5[1] = *a5;
  }
  int v9 = (uint64_t *)(a1 + 536);
  uint64_t v10 = *(void *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<int,long long,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>>((uint64_t *)(a1 + 536), v87);
  uint64_t v85 = a3;
  LODWORD(v81[0]) = 0;
  if (!a3) {
    google::MakeCheckOpString<long long,int>((int)&v85, (int)v81, "coeff_in_equality != 0");
  }
  uint64_t v11 = v10 % a3;
  uint64_t v12 = v10 / a3;
  uint64_t v85 = v11;
  LODWORD(v81[0]) = 0;
  if (v11) {
    google::MakeCheckOpString<long long,int>((int)&v85, (int)v81, "coeff_in_objective % coeff_in_equality == 0");
  }
  uint64_t v13 = 0;
  unint64_t v14 = ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7));
  unint64_t v79 = v14 >> 7;
  uint64_t v80 = 0x101010101010101 * (v14 & 0x7F);
  uint64_t v75 = v6;
  uint64_t v76 = v8;
  uint64_t v78 = (uint64_t *)(v8 + 536);
  while (*(_DWORD *)(v6 + 60) == 12)
  {
    uint64_t v20 = *(void *)(v6 + 48);
    if (v13 >= *(int *)(v20 + 16)) {
      goto LABEL_59;
    }
    LODWORD(v85) = 0;
    uint64_t v21 = *(unsigned int *)(*(void *)(v20 + 24) + 4 * v13);
    LODWORD(v85) = v21;
    uint64_t v22 = *(void *)(*(void *)(v20 + 48) + 8 * v13);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_20:
      if (v21 == v87[0]) {
        goto LABEL_21;
      }
      goto LABEL_23;
    }
LABEL_22:
    v21 ^= 0xFFFFFFFFuLL;
    LODWORD(v85) = v21;
    uint64_t v22 = -v22;
    if (v21 == v87[0]) {
      goto LABEL_21;
    }
LABEL_23:
    uint64_t v23 = 0;
    unint64_t v24 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v21)
          * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                             * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                              + v21));
    unint64_t v25 = *(void *)(v8 + 536);
    unint64_t v26 = (v24 >> 7) ^ (v25 >> 12);
    uint64_t v27 = *(void *)(v8 + 560);
    while (1)
    {
      unint64_t v28 = v26 & v27;
      uint64_t v29 = *(void *)(v25 + v28);
      unint64_t v30 = ((v29 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v29 ^ (0x101010101010101
                                                                                          * (v24 & 0x7F))) & 0x8080808080808080;
      if (v30) {
        break;
      }
LABEL_28:
      if ((v29 & (~v29 << 6) & 0x8080808080808080) != 0)
      {
        unint64_t v32 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::prepare_insert(v9, v24);
        uint64_t v31 = *(void *)(v8 + 544);
        uint64_t v33 = v31 + 16 * v32;
        *(_DWORD *)uint64_t v33 = v85;
        *(void *)(v33 + 8) = 0;
        goto LABEL_31;
      }
      v23 += 8;
      unint64_t v26 = v23 + v28;
    }
    uint64_t v31 = *(void *)(v8 + 544);
    while (1)
    {
      unint64_t v32 = (v28 + (__clz(__rbit64(v30)) >> 3)) & v27;
      if (*(_DWORD *)(v31 + 16 * v32) == v21) {
        break;
      }
      v30 &= v30 - 1;
      if (!v30) {
        goto LABEL_28;
      }
    }
LABEL_31:
    uint64_t v34 = v31 + 16 * v32;
    uint64_t v37 = *(void *)(v34 + 8);
    uint64_t v36 = (uint64_t *)(v34 + 8);
    uint64_t v35 = v37;
    if (!v5 || v35) {
      goto LABEL_56;
    }
    uint64_t v39 = (char *)v5[1];
    unint64_t v38 = (unint64_t)v5[2];
    if ((unint64_t)v39 >= v38)
    {
      unint64_t v41 = v5;
      uint64_t v42 = v12;
      uint64_t v43 = v41;
      char v44 = (char *)*v41;
      uint64_t v45 = v39 - (unsigned char *)*v41;
      uint64_t v46 = v45 >> 2;
      unint64_t v47 = (v45 >> 2) + 1;
      if (v47 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v48 = v38 - (void)v44;
      if (v48 >> 1 > v47) {
        unint64_t v47 = v48 >> 1;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v77 = v47;
      if (v47)
      {
        if (v47 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v49 = operator new(4 * v47);
        uint64_t v50 = &v49[4 * v46];
        *uint64_t v50 = v85;
        uint64_t v40 = (uint64_t)(v50 + 1);
        if (v39 != v44)
        {
LABEL_43:
          unint64_t v51 = v39 - 4 - v44;
          unint64_t v52 = v77;
          if (v51 < 0x2C)
          {
            uint64_t v12 = v42;
            uint64_t v5 = v43;
            goto LABEL_51;
          }
          unint64_t v53 = v39 - &v49[v45];
          uint64_t v12 = v42;
          uint64_t v5 = v43;
          if (v53 < 0x20) {
            goto LABEL_87;
          }
          uint64_t v54 = (v51 >> 2) + 1;
          uint64_t v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v56 = &v39[-v55];
          uint64_t v50 = (_DWORD *)((char *)v50 - v55);
          uint64_t v57 = &v49[4 * v46 - 16];
          uint64_t v58 = v39 - 16;
          uint64_t v59 = v54 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            *uint64_t v57 = v60;
            v57 -= 2;
            v58 -= 32;
            v59 -= 8;
          }
          while (v59);
          uint64_t v39 = v56;
          if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_87:
            do
            {
LABEL_51:
              int v61 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *--uint64_t v50 = v61;
            }
            while (v39 != v44);
          }
LABEL_52:
          *uint64_t v5 = v50;
          v5[1] = (void *)v40;
          v5[2] = &v49[4 * v52];
          if (v44) {
            operator delete(v44);
          }
          uint64_t v6 = v75;
          uint64_t v8 = v76;
          goto LABEL_55;
        }
      }
      else
      {
        unint64_t v49 = 0;
        uint64_t v50 = (_DWORD *)(4 * v46);
        *(_DWORD *)(4 * v46) = v85;
        uint64_t v40 = 4 * v46 + 4;
        if (v39 != v44) {
          goto LABEL_43;
        }
      }
      uint64_t v12 = v42;
      uint64_t v5 = v43;
      unint64_t v52 = v77;
      goto LABEL_52;
    }
    *(_DWORD *)uint64_t v39 = v85;
    uint64_t v40 = (uint64_t)(v39 + 4);
LABEL_55:
    int v9 = v78;
    v5[1] = (void *)v40;
    uint64_t v35 = *v36;
LABEL_56:
    uint64_t v62 = v35 - v22 * v12;
    uint64_t *v36 = v62;
    if (v62)
    {
      uint64_t v18 = 0;
      unint64_t v63 = (void *)(*(void *)(v8 + 680) + 48 * (int)v85);
      uint64_t v19 = v79 ^ (*v63 >> 12);
      uint64_t v64 = v63[3];
      while (1)
      {
        uint64_t v15 = v19 & v64;
        uint64_t v16 = *(void *)(*v63 + v15);
        unint64_t v17 = ((v16 ^ v80) - 0x101010101010101) & ~(v16 ^ v80) & 0x8080808080808080;
        if (v17) {
          break;
        }
LABEL_11:
        if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
        {
          *(_DWORD *)(v63[1]
                    + 4
                    * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::prepare_insert((uint64_t *)(*(void *)(v8 + 680) + 48 * (int)v85), ((((unint64_t)&off_264E82C18 + 7) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)&off_264E82C18 + 7)))) = -1;
          goto LABEL_21;
        }
        v18 += 8;
        uint64_t v19 = v18 + v15;
      }
      while (*(_DWORD *)(v63[1] + 4 * ((v15 + (__clz(__rbit64(v17)) >> 3)) & v64)) != -1)
      {
        v17 &= v17 - 1;
        if (!v17) {
          goto LABEL_11;
        }
      }
LABEL_21:
      ++v13;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v9, (int *)&v85);
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*(void *)(v8 + 680) + 48 * (int)v85), &operations_research::sat::kObjectiveConstraint);
      ++v13;
    }
  }
  if (v13 < dword_26AEE19E8)
  {
    LODWORD(v85) = 0;
    uint64_t v21 = *(unsigned int *)(qword_26AEE19F0 + 4 * v13);
    LODWORD(v85) = v21;
    uint64_t v22 = *(void *)(qword_26AEE1A08 + 8 * v13);
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
LABEL_59:
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,long long>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,long long>>>::erase<int>(v9, v87);
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>::erase<int>((uint64_t *)(*(void *)(v8 + 680) + 48 * v87[0]), &operations_research::sat::kObjectiveConstraint);
  if (*(_DWORD *)(v6 + 60) == 12) {
    unint64_t v66 = *(uint64_t **)(v6 + 48);
  }
  else {
    unint64_t v66 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  operations_research::Domain::FromFlatSpanOfIntervals(v66[9], *((int *)v66 + 16), (unint64_t *)&v85, v65);
  BOOL v84 = 1;
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v85, &v84, v12, (unint64_t *)&v82);
  if (v85) {
    operator delete((void *)__p);
  }
  uint64_t v85 = v82;
  long long __p = *(_OWORD *)v83;
  if (!v84)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v82, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_context.cc", 1322);
    uint64_t v74 = (void *)google::LogMessage::stream((google::LogMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"Check failed: exact ", 20);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v82);
  }
  *(double *)(v8 + 640) = *(double *)(v8 + 640)
                        + (double)operations_research::Domain::Min((operations_research::Domain *)&v85, v67);
  uint64_t v69 = operations_research::Domain::Min((operations_research::Domain *)&v85, v68);
  operations_research::Domain::Domain(v81, -v69);
  operations_research::Domain::AdditionWith((operations_research::Domain *)(v8 + 616), (const operations_research::Domain *)v81, &v82, v70);
  if ((uint64_t *)(v8 + 616) == &v82)
  {
    if (v82) {
      operator delete(v83[0]);
    }
  }
  else
  {
    uint64_t v71 = (void **)(v8 + 624);
    if (*(unsigned char *)(v8 + 616)) {
      operator delete(*v71);
    }
    *(void *)(v8 + 616) = v82;
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v83;
    uint64_t v82 = 0;
  }
  if ((uint64_t)v81[0])
  {
    operator delete(v81[1]);
    *(unsigned char *)(v8 + 608) = 1;
    if (v85) {
LABEL_71:
    }
      operator delete((void *)__p);
  }
  else
  {
    *(unsigned char *)(v8 + 608) = 1;
    if (v85) {
      goto LABEL_71;
    }
  }
}

void sub_23CD55B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD55B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD55B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
  if (a17)
  {
    operator delete(__p);
    if ((a24 & 1) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 1) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_23CD55B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD55BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PresolveContext::WriteObjectiveToProto(operations_research::sat::PresolveContext *this)
{
  if (operations_research::Domain::IsEmpty((operations_research::sat::PresolveContext *)((char *)this + 616)))
  {
    HIBYTE(v49) = 0;
    LOBYTE(v47) = 0;
    operations_research::sat::PresolveContext::NotifyThatModelIsUnsat((uint64_t)this, (uint64_t)&v47);
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      return;
    }
    uint64_t v2 = v47;
    goto LABEL_53;
  }
  unint64_t v47 = 0;
  uint64_t v48 = 0;
  unint64_t v49 = 0;
  uint64_t v3 = (char *)*((void *)this + 67);
  unint64_t v4 = (int *)*((void *)this + 68);
  uint64_t v5 = v3;
  if (*v3 <= -2)
  {
    do
    {
      unint64_t v6 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      uint64_t v5 = (void *)((char *)v5 + v6);
      v4 += 4 * v6;
    }
    while (*(char *)v5 < -1);
  }
  uint64_t v46 = this;
  unint64_t v7 = &v3[*((void *)this + 70)];
  if (v5 != (void *)v7)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      int v11 = *v4;
      uint64_t v12 = *((void *)v4 + 1);
      if (v8 < v9)
      {
        *(_DWORD *)uint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        v8 += 16;
        uint64_t v48 = v8;
        int v13 = *((char *)v5 + 1);
        uint64_t v5 = (void *)((char *)v5 + 1);
        v4 += 4;
        if (v13 <= -2) {
          goto LABEL_26;
        }
        goto LABEL_8;
      }
      uint64_t v14 = (v8 - v10) >> 4;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v9 - v10) >> 3 > v15) {
        unint64_t v15 = (v9 - v10) >> 3;
      }
      if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        if (v16 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v17 = (char *)operator new(16 * v16);
        uint64_t v18 = (uint64_t)&v17[16 * v14];
        *(_DWORD *)uint64_t v18 = v11;
        *(void *)(v18 + 8) = v12;
        if (v8 == v10)
        {
LABEL_29:
          uint64_t v20 = (char *)v18;
          int v9 = &v17[16 * v16];
          uint64_t v8 = (char *)(v18 + 16);
          unint64_t v47 = (char *)v18;
          unint64_t v49 = v9;
          if (v10) {
            goto LABEL_24;
          }
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 16 * v14;
        *(_DWORD *)uint64_t v18 = v11;
        *(void *)(v18 + 8) = v12;
        if (v8 == v10) {
          goto LABEL_29;
        }
      }
      uint64_t v19 = v18;
      do
      {
        uint64_t v20 = (char *)(v19 - 16);
        *(_OWORD *)(v19 - 16) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v19 -= 16;
      }
      while (v8 != v10);
      int v9 = &v17[16 * v16];
      uint64_t v8 = (char *)(v18 + 16);
      unint64_t v47 = v20;
      unint64_t v49 = v9;
      if (v10) {
LABEL_24:
      }
        operator delete(v10);
LABEL_25:
      uint64_t v10 = v20;
      uint64_t v48 = v8;
      int v21 = *((char *)v5 + 1);
      uint64_t v5 = (void *)((char *)v5 + 1);
      v4 += 4;
      if (v21 <= -2)
      {
        do
        {
LABEL_26:
          unint64_t v22 = (__clz(__rbit64(((*v5 >> 7) & ~*v5 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v5 = (void *)((char *)v5 + v22);
          v4 += 4 * v22;
        }
        while (*(char *)v5 < -1);
      }
LABEL_8:
      if (v5 == (void *)v7) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v8 = 0;
  uint64_t v10 = 0;
LABEL_32:
  unint64_t v23 = 126 - 2 * __clz((v8 - v10) >> 4);
  if (v8 == v10) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>((uint64_t)v10, (int *)v8, (uint64_t)&v50, v24, 1);
  uint64_t v25 = *((void *)v46 + 6);
  uint64_t v26 = *(void *)(v25 + 120);
  if (!v26)
  {
    uint64_t v27 = *(void *)(v25 + 8);
    unint64_t v28 = (google::protobuf::Arena *)(v27 & 0xFFFFFFFFFFFFFFFELL);
    if (v27) {
      unint64_t v28 = *(google::protobuf::Arena **)v28;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::CpObjectiveProto>(v28);
    uint64_t v26 = v29;
    *(void *)(v25 + 120) = v29;
  }
  long long v30 = *((_OWORD *)v46 + 40);
  *(_DWORD *)(v26 + 64) = 0;
  *(_OWORD *)(v26 + 88) = v30;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), *((void *)v46 + 77) >> 1);
  unint64_t v31 = *((void *)v46 + 77);
  if (v31) {
    unint64_t v32 = (uint64_t *)*((void *)v46 + 78);
  }
  else {
    unint64_t v32 = (uint64_t *)((char *)v46 + 624);
  }
  if (v31 >= 2)
  {
    uint64_t v39 = &v32[2 * (v31 >> 1)];
    unsigned int v40 = *(_DWORD *)(v26 + 64);
    do
    {
      uint64_t v41 = *v32;
      int v42 = *(_DWORD *)(v26 + 68);
      unsigned int v43 = v40 + 1;
      if (v40 == v42)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v40 + 1);
        int v42 = *(_DWORD *)(v26 + 68);
      }
      uint64_t v44 = *(void *)(v26 + 72);
      *(void *)(v44 + 8 * v40) = v41;
      *(_DWORD *)(v26 + 64) = v43;
      uint64_t v45 = v32[1];
      v40 += 2;
      if (v43 == v42)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 64), v40);
        uint64_t v44 = *(void *)(v26 + 72);
      }
      *(void *)(v44 + 8 * v43) = v45;
      *(_DWORD *)(v26 + 64) = v40;
      v32 += 2;
    }
    while (v32 != v39);
  }
  *(_DWORD *)(v26 + 16) = 0;
  *(_DWORD *)(v26 + 40) = 0;
  uint64_t v33 = v47;
  uint64_t v34 = v48;
  if (v47 == v48)
  {
    if (!v47) {
      return;
    }
    goto LABEL_52;
  }
  do
  {
    int v35 = *(_DWORD *)v33;
    uint64_t v36 = *(unsigned int *)(v26 + 16);
    if (v36 == *(_DWORD *)(v26 + 20)) {
      google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v26 + 16), v36 + 1);
    }
    *(_DWORD *)(*(void *)(v26 + 24) + 4 * v36) = v35;
    *(_DWORD *)(v26 + 16) = v36 + 1;
    uint64_t v37 = *((void *)v33 + 1);
    uint64_t v38 = *(unsigned int *)(v26 + 40);
    if (v38 == *(_DWORD *)(v26 + 44)) {
      google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v26 + 40), v38 + 1);
    }
    *(void *)(*(void *)(v26 + 48) + 8 * v38) = v37;
    *(_DWORD *)(v26 + 40) = v38 + 1;
    v33 += 16;
  }
  while (v33 != v34);
  uint64_t v33 = v47;
  if (v47)
  {
LABEL_52:
    uint64_t v2 = v33;
LABEL_53:
    operator delete(v2);
  }
}

void sub_23CD55FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::AffineRelation::CompressPath(operations_research::AffineRelation *this, int a2)
{
  uint64_t v2 = (char *)*((void *)this + 13);
  *((void *)this + 14) = v2;
  unint64_t v32 = (void **)((char *)this + 104);
  uint64_t v3 = *((void *)this + 1);
  if (*(_DWORD *)(v3 + 4 * a2) == a2) {
    return;
  }
  int v4 = a2;
  uint64_t v6 = a2;
  do
  {
    while (1)
    {
      unint64_t v7 = *((void *)this + 15);
      if ((unint64_t)v2 >= v7) {
        break;
      }
      *(_DWORD *)uint64_t v2 = v4;
      v2 += 4;
      *((void *)this + 14) = v2;
      int v4 = *(_DWORD *)(v3 + 4 * v6);
      uint64_t v6 = v4;
      if (v4 == *(_DWORD *)(v3 + 4 * v4)) {
        goto LABEL_31;
      }
    }
    uint64_t v8 = (char *)*v32;
    uint64_t v9 = v2 - (unsigned char *)*v32;
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v7 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(4 * v13);
      unint64_t v15 = &v14[4 * v10];
      *unint64_t v15 = v4;
      uint64_t v16 = (uint64_t)(v15 + 1);
      if (v2 == v8) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v15 = (_DWORD *)(4 * v10);
      *(_DWORD *)(4 * v10) = v4;
      uint64_t v16 = 4 * v10 + 4;
      if (v2 == v8) {
        goto LABEL_28;
      }
    }
    unint64_t v17 = v2 - 4 - v8;
    if (v17 < 0xBC)
    {
      uint64_t v18 = v2;
      goto LABEL_27;
    }
    if (&v14[v9 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v14[v9 - 4])
    {
      uint64_t v18 = v2;
      goto LABEL_27;
    }
    if (&v2[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v2 - 4)
    {
      uint64_t v18 = v2;
      do
      {
LABEL_27:
        int v25 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--unint64_t v15 = v25;
      }
      while (v18 != v8);
      goto LABEL_28;
    }
    if ((unint64_t)(v2 - v14 - v9) < 0x20)
    {
      uint64_t v18 = v2;
      goto LABEL_27;
    }
    uint64_t v19 = (v17 >> 2) + 1;
    uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v18 = &v2[-v20];
    unint64_t v15 = (_DWORD *)((char *)v15 - v20);
    int v21 = &v14[4 * v10 - 16];
    unint64_t v22 = v2 - 16;
    uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      _OWORD *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_27;
    }
LABEL_28:
    *((void *)this + 13) = v15;
    *((void *)this + 14) = v16;
    *((void *)this + 15) = &v14[4 * v13];
    if (v8)
    {
      operator delete(v8);
      uint64_t v3 = *((void *)this + 1);
    }
    uint64_t v2 = (char *)v16;
    *((void *)this + 14) = v16;
    int v4 = *(_DWORD *)(v3 + 4 * v6);
    uint64_t v6 = v4;
  }
  while (v4 != *(_DWORD *)(v3 + 4 * v4));
LABEL_31:
  uint64_t v26 = (char *)*v32;
  if (v2 != *v32)
  {
    uint64_t v27 = *((void *)this + 4);
    uint64_t v28 = *((void *)this + 7);
    do
    {
      uint64_t v29 = *((int *)v2 - 1);
      v2 -= 4;
      uint64_t v30 = 8 * v29;
      uint64_t v31 = 8 * *(int *)(v3 + 4 * v29);
      *(void *)(v28 + v30) = *(void *)(v28 + 8 * v29) + *(void *)(v28 + v31) * *(void *)(v27 + 8 * v29);
      *(void *)(v27 + v30) = *(void *)(v27 + 8 * v29) * *(void *)(v27 + v31);
      *(_DWORD *)(v3 + 4 * v29) = v4;
    }
    while (v2 != v26);
  }
}

void operations_research::AffineRelation::IncreaseSizeOfMemberVectors(operations_research::AffineRelation *this, int a2)
{
  int v4 = (char *)*((void *)this + 2);
  uint64_t v3 = (void **)((char *)this + 8);
  uint64_t v5 = (uint64_t)&v4[-*((void *)this + 1)];
  if (a2 <= (unint64_t)(v5 >> 2)) {
    return;
  }
  unint64_t v34 = a2;
  unint64_t v7 = (unint64_t)v5 >> 2;
  if ((int)((unint64_t)v5 >> 2) < a2)
  {
    while (1)
    {
      unint64_t v12 = *((void *)this + 3);
      if ((unint64_t)v4 >= v12) {
        break;
      }
      *(_DWORD *)int v4 = v7;
      uint64_t v11 = (uint64_t)(v4 + 4);
LABEL_6:
      *((void *)this + 2) = v11;
      LODWORD(v7) = v7 + 1;
      int v4 = (char *)v11;
      if (v7 == a2) {
        goto LABEL_3;
      }
    }
    unint64_t v13 = (char *)*v3;
    uint64_t v14 = v4 - (unsigned char *)*v3;
    uint64_t v15 = v14 >> 2;
    unint64_t v16 = (v14 >> 2) + 1;
    if (v16 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v12 - (void)v13;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(4 * v18);
      uint64_t v20 = &v19[4 * v15];
      _DWORD *v20 = v7;
      uint64_t v11 = (uint64_t)(v20 + 1);
      if (v4 == v13) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = (_DWORD *)(4 * v15);
      *(_DWORD *)(4 * v15) = v7;
      uint64_t v11 = 4 * v15 + 4;
      if (v4 == v13) {
        goto LABEL_31;
      }
    }
    unint64_t v21 = v4 - 4 - v13;
    if (v21 >= 0xBC)
    {
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        unint64_t v22 = v4;
      }
      else if (&v4[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v4 - 4)
      {
        unint64_t v22 = v4;
      }
      else if ((unint64_t)(v4 - v19 - v14) >= 0x20)
      {
        uint64_t v23 = (v21 >> 2) + 1;
        uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v22 = &v4[-v24];
        uint64_t v20 = (_DWORD *)((char *)v20 - v24);
        int v25 = &v19[4 * v15 - 16];
        uint64_t v26 = v4 - 16;
        uint64_t v27 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *int v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_31:
          *((void *)this + 1) = v20;
          *((void *)this + 2) = v11;
          *((void *)this + 3) = &v19[4 * v18];
          if (v13) {
            operator delete(v13);
          }
          goto LABEL_6;
        }
      }
      else
      {
        unint64_t v22 = v4;
      }
    }
    else
    {
      unint64_t v22 = v4;
    }
    do
    {
      int v29 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--uint64_t v20 = v29;
    }
    while (v22 != v13);
    goto LABEL_31;
  }
LABEL_3:
  uint64_t v8 = *((void *)this + 7);
  uint64_t v9 = *((void *)this + 8);
  *(void *)__x = 0;
  unint64_t v10 = (v9 - v8) >> 3;
  if (v34 <= v10)
  {
    if (v34 < v10) {
      *((void *)this + 8) = v8 + 8 * v34;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 56, v34 - v10, (uint64_t *)__x);
  }
  *(void *)__x = 1;
  uint64_t v30 = *((void *)this + 4);
  unint64_t v31 = (*((void *)this + 5) - v30) >> 3;
  if (v34 <= v31)
  {
    if (v34 < v31) {
      *((void *)this + 5) = v30 + 8 * v34;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 32, v34 - v31, (uint64_t *)__x);
  }
  __x[0] = 1;
  uint64_t v32 = *((void *)this + 10);
  unint64_t v33 = (*((void *)this + 11) - v32) >> 2;
  if (v34 <= v33)
  {
    if (v34 < v33) {
      *((void *)this + 11) = v32 + 4 * v34;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v34 - v33, __x);
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedVariable>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v18));
      uint64_t v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::find_or_prepare_insert<std::string>(uint64_t *a1, unsigned __int8 *a2)
{
  unint64_t v2 = (const void **)a2;
  unint64_t v4 = *((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    unint64_t v5 = a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, (absl::lts_2020_02_25::hash_internal *)a2, v5);
  uint64_t v7 = 0;
  unint64_t v8 = ((((unint64_t)v6 + v5) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * ((void)v6 + v5));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = 0x101010101010101 * (v8 & 0x7F);
  char v12 = *((unsigned char *)v2 + 23);
  if (v12 >= 0) {
    size_t v13 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    size_t v13 = (size_t)v2[1];
  }
  uint64_t v14 = a1[3];
  if (v12 >= 0) {
    uint64_t v15 = v2;
  }
  else {
    uint64_t v15 = *v2;
  }
  while (1)
  {
    unint64_t v16 = v10 & v14;
    uint64_t v17 = *(void *)(v9 + (v10 & v14));
    unint64_t v18 = ((v17 ^ v11) - 0x101010101010101) & ~(v17 ^ v11) & 0x8080808080808080;
    if (v18) {
      break;
    }
LABEL_20:
    if ((v17 & (~v17 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::prepare_insert(a1, v8);
    }
    v7 += 8;
    unint64_t v10 = v7 + v16;
  }
  uint64_t v19 = a1[1];
  uint64_t v27 = v11;
  uint64_t v28 = v7;
  uint64_t v26 = v19;
  while (1)
  {
    unint64_t v20 = (v16 + (__clz(__rbit64(v18)) >> 3)) & v14;
    unint64_t v21 = v19 + 32 * v20;
    uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
    int v23 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *(void *)(v21 + 8);
    }
    if (v22 == v13)
    {
      uint64_t v24 = v23 >= 0 ? (const void *)v21 : *(const void **)v21;
      if (!memcmp(v24, v15, v13)) {
        return v20;
      }
    }
    v18 &= v18 - 1;
    uint64_t v11 = v27;
    uint64_t v7 = v28;
    uint64_t v19 = v26;
    if (!v18) {
      goto LABEL_20;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::drop_deletes_without_resize((absl::lts_2020_02_25::hash_internal::CityHashState *)a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  char v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)char v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v30 = a1[4];
    if (!v30) {
      return;
    }
LABEL_27:
    *((void *)v30 + 4) = v14 >> 3;
    *((void *)v30 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v15 = &v5[32 * (void)v13];
      int v16 = v15[23];
      if (v16 >= 0) {
        uint64_t v17 = (absl::lts_2020_02_25::hash_internal *)&v5[32 * (void)v13];
      }
      else {
        uint64_t v17 = *(absl::lts_2020_02_25::hash_internal **)v15;
      }
      if (v16 >= 0) {
        unint64_t v18 = v15[23];
      }
      else {
        unint64_t v18 = *((void *)v15 + 1);
      }
      uint64_t v19 = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, v17, v18);
      unint64_t v20 = ((((unint64_t)v19 + v18) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                               * ((void)v19 + v18));
      unint64_t v21 = *a1;
      uint64_t v22 = a1[3];
      unint64_t v23 = ((v20 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v22;
      unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = 0;
        do
        {
          v25 += 8;
          unint64_t v23 = (v25 + v23) & (unint64_t)v22;
          unint64_t v24 = *(void *)&v21[v23] & (~*(void *)&v21[v23] << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v26 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v22;
      v14 += v25;
      char v27 = v20 & 0x7F;
      v21[v26] = v27;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v26 - 8) & (unint64_t)a1[3])] = v27;
      uint64_t v28 = (uint64_t)&a1[1][32 * v26];
      long long v29 = *(_OWORD *)v15;
      *(void *)(v28 + 16) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *(void *)uint64_t v15 = 0;
      *(_DWORD *)(v28 + 24) = *((_DWORD *)v15 + 6);
      if (v15[23] < 0) {
        operator delete(*(void **)v15);
      }
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v30 = a1[4];
  if (v30) {
    goto LABEL_27;
  }
}

absl::lts_2020_02_25::hash_internal::CityHashState *absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::string,int>,absl::lts_2020_02_25::container_internal::StringHash,absl::lts_2020_02_25::container_internal::StringHashEq::Eq,std::allocator<std::pair<std::string const,int>>>::drop_deletes_without_resize(absl::lts_2020_02_25::hash_internal::CityHashState *result)
{
  unint64_t v1 = result;
  unint64_t v2 = *(int8x16_t **)result;
  uint64_t v3 = *((void *)result + 3);
  uint64_t v4 = *(void *)result + v3;
  if (v4 + 1 != *(void *)result)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)result;
    if (v5 < 0x18) {
      goto LABEL_35;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *unint64_t v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  if (!*((void *)result + 3))
  {
    unint64_t v15 = 0;
    *((void *)result + 5) = -*((void *)result + 2);
    uint64_t v46 = *((void *)result + 4);
    if (!v46) {
      return result;
    }
LABEL_32:
    *(void *)(v46 + 32) = v15 >> 3;
    *(void *)(v46 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    if (*(unsigned __int8 *)(*(void *)v1 + v14) == 254)
    {
      uint64_t v19 = *((void *)v1 + 1) + 32 * v14;
      int v20 = *(char *)(v19 + 23);
      if (v20 >= 0) {
        unint64_t v21 = (absl::lts_2020_02_25::hash_internal *)(*((void *)v1 + 1) + 32 * v14);
      }
      else {
        unint64_t v21 = *(absl::lts_2020_02_25::hash_internal **)v19;
      }
      if (v20 >= 0) {
        unint64_t v22 = *(unsigned __int8 *)(v19 + 23);
      }
      else {
        unint64_t v22 = *(void *)(v19 + 8);
      }
      uint64_t result = absl::lts_2020_02_25::hash_internal::CityHashState::combine_contiguous((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, v21, v22);
      unint64_t v23 = ((((unint64_t)result + v22) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                                  * ((void)result + v22));
      uint64_t v24 = *(void *)v1;
      uint64_t v25 = *((void *)v1 + 3);
      unint64_t v26 = ((v23 >> 7) ^ (*(void *)v1 >> 12)) & v25;
      uint64_t v27 = 0;
      unint64_t v28 = *(void *)(*(void *)v1 + v26) & (~*(void *)(*(void *)v1 + v26) << 7) & 0x8080808080808080;
      if (v28)
      {
        unint64_t v16 = ((v23 >> 7) ^ (*(void *)v1 >> 12)) & v25;
      }
      else
      {
        unint64_t v16 = ((v23 >> 7) ^ (*(void *)v1 >> 12)) & v25;
        do
        {
          v27 += 8;
          unint64_t v16 = (v27 + v16) & v25;
          unint64_t v28 = *(void *)(v24 + v16) & (~*(void *)(v24 + v16) << 7) & 0x8080808080808080;
        }
        while (!v28);
      }
      unint64_t v17 = (v16 + (__clz(__rbit64(v28)) >> 3)) & v25;
      v15 += v27;
      if ((((v17 - v26) ^ (v14 - v26)) & v25) > 7)
      {
        int v29 = *(unsigned __int8 *)(v24 + v17);
        char v30 = v23 & 0x7F;
        *(unsigned char *)(v24 + v17) = v30;
        *(unsigned char *)((*((void *)v1 + 3) & (v17 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = v30;
        uint64_t v31 = *((void *)v1 + 1);
        if (v29 == 128)
        {
          uint64_t v32 = v31 + 32 * v17;
          unint64_t v33 = (long long *)(v31 + 32 * v14);
          long long v34 = *v33;
          *(void *)(v32 + 16) = *((void *)v33 + 2);
          *(_OWORD *)uint64_t v32 = v34;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *(void *)unint64_t v33 = 0;
          *(_DWORD *)(v32 + 24) = *((_DWORD *)v33 + 6);
          *(unsigned char *)(*(void *)v1 + v14) = 0x80;
          *(unsigned char *)((*((void *)v1 + 3) & (v14 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = 0x80;
        }
        else
        {
          int v35 = (uint64_t *)(v31 + 32 * v14);
          uint64_t v36 = *v35;
          *(void *)&long long v47 = v35[1];
          *(void *)((char *)&v47 + 7) = *(uint64_t *)((char *)v35 + 15);
          char v37 = *((unsigned char *)v35 + 23);
          v35[1] = 0;
          v35[2] = 0;
          uint64_t *v35 = 0;
          LODWORD(v35) = *((_DWORD *)v35 + 6);
          uint64_t v38 = *((void *)v1 + 1);
          uint64_t v39 = 32 * v17;
          uint64_t v40 = v38 + v39;
          int v41 = *(_DWORD *)(v38 + v39 + 24);
          uint64_t v42 = v38 + 32 * v14;
          uint64_t v43 = *(void *)(v38 + v39 + 16);
          *(_OWORD *)uint64_t v42 = *(_OWORD *)v40;
          *(void *)(v42 + 16) = v43;
          *(void *)(v40 + 8) = 0;
          *(void *)(v40 + 16) = 0;
          *(void *)uint64_t v40 = 0;
          *(_DWORD *)(v42 + 24) = v41;
          uint64_t v44 = *((void *)v1 + 1) + v39;
          *(void *)uint64_t v44 = v36;
          *(void *)(v44 + 8) = v47;
          *(void *)(v44 + 15) = *(void *)((char *)&v47 + 7);
          *(unsigned char *)(v44 + 23) = v37;
          *(_DWORD *)(v44 + 24) = v35;
          --v14;
        }
      }
      else
      {
        char v18 = v23 & 0x7F;
        *(unsigned char *)(v24 + v14) = v18;
        *(unsigned char *)((*((void *)v1 + 3) & (v14 - 8)) + (*((void *)v1 + 3) & 7) + *(void *)v1 + 1) = v18;
      }
    }
    ++v14;
  }
  while (v14 != *((void *)v1 + 3));
  uint64_t v45 = v14 - (v14 >> 3);
  if (v14 == 7) {
    uint64_t v45 = 6;
  }
  *((void *)v1 + 5) = v45 - *((void *)v1 + 2);
  uint64_t v46 = *((void *)v1 + 4);
  if (v46) {
    goto LABEL_32;
  }
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,int>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,operations_research::sat::SavedVariable>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,operations_research::sat::SavedVariable>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFFCLL) + 12;
  int8x16_t v9 = (char *)operator new(v8 + 8 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int8x16_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int8x16_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      char v18 = &v5[8 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v18));
      int v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(void *)&a1[1][8 * v16] = *(void *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t std::vector<operations_research::Domain>::__emplace_back_slow_path<operations_research::Domain>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x16_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    int8x16_t v9 = 0;
  }
  uint64_t v17 = (uint64_t)&v9[24 * v5];
  uint64_t v10 = &v9[24 * v8];
  *(void *)uint64_t v17 = *(void *)a2;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)a2 = 0;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<operations_research::Domain>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>,std::reverse_iterator<operations_research::Domain*>>((uint64_t)(a1 + 2), v4, v4, v3, v3, v17, v17);
  int8x16_t v12 = (void **)*a1;
  uint64_t v11 = (void **)a1[1];
  *a1 = v13;
  a1[1] = v17 + 24;
  a1[2] = (uint64_t)v10;
  if (v11 != v12)
  {
    unint64_t v14 = v11;
    do
    {
      char v15 = *((unsigned char *)v14 - 24);
      v14 -= 3;
      if (v15) {
        operator delete(*(v11 - 2));
      }
      uint64_t v11 = v14;
    }
    while (v14 != v12);
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 24;
}

void sub_23CD576A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<operations_research::Domain>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v4[48 * a2];
      do
      {
        *(void *)uint64_t v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(_OWORD *)(v4 + 8) = 0uLL;
        *(_OWORD *)(v4 + 24) = 0uLL;
        *((void *)v4 + 5) = 0;
        v4 += 48;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v9 = 0x555555555555555;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(48 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    int8x16_t v12 = &v10[48 * v6];
    uint64_t v13 = &v10[48 * v9];
    unint64_t v14 = &v12[48 * a2];
    char v15 = v12;
    do
    {
      *(void *)char v15 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v15 + 8) = 0uLL;
      *(_OWORD *)(v15 + 24) = 0uLL;
      *((void *)v15 + 5) = 0;
      v15 += 48;
    }
    while (v15 != v14);
    unint64_t v16 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v17) {
        return;
      }
      goto LABEL_29;
    }
    do
    {
      uint64_t v18 = *((void *)v17 - 6);
      v17 -= 48;
      *(void *)uint64_t v17 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *((void *)v12 - 6) = v18;
      v12 -= 48;
      uint64_t v19 = *((void *)v17 + 1);
      uint64_t v20 = *((void *)v17 + 2);
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = 0;
      *((void *)v12 + 1) = v19;
      *((void *)v12 + 2) = v20;
      uint64_t v21 = *((void *)v17 + 3);
      uint64_t v22 = *((void *)v17 + 4);
      *((void *)v17 + 3) = 0;
      *((void *)v12 + 3) = v21;
      *((void *)v12 + 4) = v22;
      *((void *)v17 + 4) = 0;
      *((void *)v12 + 5) = *((void *)v17 + 5);
      *((void *)v17 + 5) = 0;
    }
    while (v17 != v16);
    unint64_t v23 = *a1;
    uint64_t v17 = a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v17 != v23)
    {
      do
      {
        if (*((void *)v17 - 3))
        {
          operator delete(*((void **)v17 - 6));
          *((void *)v17 - 1) = 0;
          *((void *)v17 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *((void *)v17 - 5) = 0;
          *((void *)v17 - 4) = 0;
          *((void *)v17 - 3) = 0;
        }
        uint64_t v24 = (void *)*((void *)v17 - 2);
        if (v24) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v24);
        }
        v17 -= 48;
      }
      while (v17 != v23);
      uint64_t v17 = v23;
    }
    if (v17)
    {
LABEL_29:
      operator delete(v17);
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + (v10 & v11));
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::prepare_insert(a1, v8);
      uint64_t v18 = a1[1] + 56 * result;
      *(_DWORD *)uint64_t v18 = *a2;
      *(void *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(void *)(v18 + 48) = 0;
      uint64_t v9 = *a1;
      uint64_t v15 = a1[1];
      char v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    unint64_t v10 = v6 + v12;
  }
  uint64_t v15 = a1[1];
  while (1)
  {
    unint64_t result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == v7) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_10:
  *(void *)a3 = v9 + result;
  *(void *)(a3 + 8) = v15 + 56 * result;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  uint64_t v32 = v4;
  if (!v4)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v31 = a1[4];
    if (!v31) {
      return;
    }
LABEL_21:
    *((void *)v31 + 4) = v14 >> 3;
    *((void *)v31 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v5] & 0x80000000) == 0)
    {
      unint64_t v16 = &v32[56 * (void)v13];
      unint64_t v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v16));
      uint64_t v18 = *a1;
      uint64_t v19 = a1[3];
      unint64_t v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      uint64_t v21 = 0;
      for (unint64_t i = *(void *)&(*a1)[v20] & (~*(void *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            unint64_t i = *(void *)&v18[v20] & (~*(void *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        unint64_t v20 = (v21 + v20) & (unint64_t)v19;
      }
      unint64_t v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      char v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      uint64_t v25 = (uint64_t)&a1[1][56 * v23];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v16;
      uint64_t v26 = *((void *)v16 + 1);
      *((void *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(v25 + 8) = v26;
      uint64_t v27 = *((void *)v16 + 2);
      *((void *)v16 + 2) = 0;
      uint64_t v28 = *((void *)v16 + 3);
      *((void *)v16 + 3) = 0;
      *(void *)(v25 + 16) = v27;
      *(void *)(v25 + 24) = v28;
      uint64_t v29 = *((void *)v16 + 4);
      uint64_t v30 = *((void *)v16 + 5);
      *((void *)v16 + 4) = 0;
      *(void *)(v25 + 32) = v29;
      *(void *)(v25 + 40) = v30;
      *((void *)v16 + 5) = 0;
      *(void *)(v25 + 48) = *((void *)v16 + 6);
      *((void *)v16 + 6) = 0;
      if (*((void *)v16 + 4))
      {
        operator delete(*((void **)v16 + 1));
        *((void *)v16 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *((void *)v16 + 6) = 0;
        *((void *)v16 + 3) = 0;
        *((void *)v16 + 4) = 0;
        *((void *)v16 + 2) = 0;
      }
      v14 += v21;
      uint64_t v15 = (void *)*((void *)v16 + 5);
      if (v15) {
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
      }
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  uint64_t v31 = a1[4];
  if (v31) {
    goto LABEL_21;
  }
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  v29[7] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(int8x16_t **)a1;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1 + v3;
  if (v4 + 1 != *(void *)a1)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)a1;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *unint64_t v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  uint64_t v14 = *(void *)(a1 + 24);
  if (!v14)
  {
    unint64_t v16 = 0;
    *(void *)(a1 + 40) = -*(void *)(a1 + 16);
    uint64_t v28 = *(void *)(a1 + 32);
    if (!v28) {
      return;
    }
LABEL_26:
    *(void *)(v28 + 32) = v16 >> 3;
    *(void *)(v28 + 16) = 0;
    return;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  do
  {
    unint64_t v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(void *)a1 + v15) == 254)
    {
      unint64_t v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(int *)(*(void *)(a1 + 8) + 56 * v15);
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          unint64_t v18 = (v17 + v18) & v14;
          unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        int v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v19 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
        uint64_t v26 = *(void *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, v26 + 56 * v19, v26 + 56 * v15);
          *(unsigned char *)(*(void *)a1 + v15) = 0x80;
          *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, *(void *)(a1 + 8) + 56 * v15, *(void *)(a1 + 8) + 56 * v19);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(a1 + 40, *(void *)(a1 + 8) + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    uint64_t v14 = *(void *)(a1 + 24);
  }
  while (v15 != v14);
  uint64_t v27 = v15 - (v15 >> 3);
  if (v15 == 7) {
    uint64_t v27 = 6;
  }
  *(void *)(a1 + 40) = v27 - *(void *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 32);
  if (v28) {
    goto LABEL_26;
  }
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)(a2 + 8) = v4;
  unint64_t v6 = (void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v9;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  if (*(void *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a3 + 48) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *unint64_t v6 = 0;
  }
  int8x16_t v10 = *(void **)(a3 + 40);
  if (v10) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v10);
  }
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::SavedLiteral,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>>>>::erase(void *a1, void *a2, uint64_t a3)
{
  if (*(void *)(a3 + 32))
  {
    operator delete(*(void **)(a3 + 8));
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
  }
  unint64_t v6 = *(void **)(a3 + 40);
  if (v6) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
  }
  uint64_t v7 = a1[3];
  --a1[2];
  uint64_t v8 = (char *)a2 - *a1;
  uint64_t v9 = *(void *)(*a1 + ((unint64_t)(v8 - 8) & v7));
  unint64_t v10 = *a2 & (~*a2 << 6) & 0x8080808080808080;
  unint64_t v11 = v9 & (~v9 << 6) & 0x8080808080808080;
  if (v11) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    uint64_t v16 = 0;
    char v13 = -2;
  }
  else
  {
    unsigned int v14 = (__clz(v11) >> 3) + (__clz(__rbit64(v10)) >> 3);
    BOOL v15 = v14 >= 8;
    uint64_t v16 = v14 < 8;
    if (v15) {
      char v13 = -2;
    }
    else {
      char v13 = 0x80;
    }
  }
  *(unsigned char *)a2 = v13;
  *(unsigned char *)((a1[3] & (unint64_t)(v8 - 8)) + (a1[3] & 7) + *a1 + 1) = v13;
  uint64_t v17 = a1[4];
  a1[5] += v16;
  if (v17)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 0xFFFFFFFFFFFFFFFFLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::try_emplace_impl<int const&>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v7)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + v7));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + (v10 & v11));
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::prepare_insert(a1, v8);
      uint64_t v18 = a1[1] + 56 * result;
      *(_DWORD *)uint64_t v18 = *a2;
      *(void *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(void *)(v18 + 48) = 0;
      uint64_t v9 = *a1;
      uint64_t v15 = a1[1];
      char v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    unint64_t v10 = v6 + v12;
  }
  uint64_t v15 = a1[1];
  while (1)
  {
    unint64_t result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(_DWORD *)(v15 + 56 * result) == v7) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_10:
  *(void *)a3 = v9 + result;
  *(void *)(a3 + 8) = v15 + 56 * result;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v30 = a1[4];
    if (!v30) {
      return;
    }
LABEL_21:
    *((void *)v30 + 4) = v14 >> 3;
    *((void *)v30 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v24 = &v5[56 * (void)v13];
      unint64_t v25 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v24)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(int *)v24));
      uint64_t v26 = *a1;
      uint64_t v27 = a1[3];
      unint64_t v28 = ((v25 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v27;
      unint64_t v29 = *(void *)&(*a1)[v28] & (~*(void *)&(*a1)[v28] << 7) & 0x8080808080808080;
      if (v29)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v28 = (v15 + v28) & (unint64_t)v27;
          unint64_t v29 = *(void *)&v26[v28] & (~*(void *)&v26[v28] << 7) & 0x8080808080808080;
        }
        while (!v29);
      }
      unint64_t v16 = (v28 + (__clz(__rbit64(v29)) >> 3)) & (unint64_t)v27;
      v14 += v15;
      char v17 = v25 & 0x7F;
      v26[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      uint64_t v18 = (uint64_t)&a1[1][56 * v16];
      uint64_t v19 = *((void *)v24 + 1);
      *(_DWORD *)uint64_t v18 = *(_DWORD *)v24;
      *((void *)v24 + 1) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)(v18 + 8) = v19;
      uint64_t v20 = *((void *)v24 + 2);
      uint64_t v21 = *((void *)v24 + 3);
      *((void *)v24 + 2) = 0;
      *((void *)v24 + 3) = 0;
      *(void *)(v18 + 16) = v20;
      *(void *)(v18 + 24) = v21;
      uint64_t v22 = *((void *)v24 + 4);
      uint64_t v23 = *((void *)v24 + 5);
      *((void *)v24 + 4) = 0;
      *(void *)(v18 + 32) = v22;
      *(void *)(v18 + 40) = v23;
      *((void *)v24 + 5) = 0;
      *(void *)(v18 + 48) = *((void *)v24 + 6);
      *((void *)v24 + 6) = 0;
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set((uint64_t)(v24 + 8));
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v30 = a1[4];
  if (v30) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = (unint64_t *)result;
  v29[7] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(int8x16_t **)result;
  uint64_t v3 = *(void *)(result + 24);
  uint64_t v4 = *(void *)result + v3;
  if (v4 + 1 != *(void *)result)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)result;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *unint64_t v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  unint64_t v14 = *(void *)(result + 24);
  if (!v14)
  {
    unint64_t v16 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    unint64_t v28 = *(void *)(result + 32);
    if (!v28) {
      return result;
    }
LABEL_26:
    *(void *)(v28 + 32) = v16 >> 3;
    *(void *)(v28 + 16) = 0;
    return result;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  do
  {
    unint64_t v20 = *v1;
    if (*(unsigned __int8 *)(*v1 + v15) == 254)
    {
      unint64_t v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)(v1[1] + 56 * v15);
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = ((v22 >> 7) ^ (v20 >> 12)) & v14;
      unint64_t v24 = *(void *)(v20 + v23) & (~*(void *)(v20 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ (v20 >> 12)) & v14;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ (v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          unint64_t v18 = (v17 + v18) & v14;
          unint64_t v24 = *(void *)(v20 + v18) & (~*(void *)(v20 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        int v25 = *(unsigned __int8 *)(v20 + v19);
        *(unsigned char *)(v20 + v19) = v22 & 0x7F;
        *(unsigned char *)((v1[3] & (v19 - 8)) + (v1[3] & 7) + *v1 + 1) = v22 & 0x7F;
        unint64_t v26 = v1[1];
        if (v25 == 128)
        {
          unint64_t result = absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), v26 + 56 * v19, v26 + 56 * v15);
          *(unsigned char *)(*v1 + v15) = 0x80;
          *(unsigned char *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), (uint64_t)v29, v26 + 56 * v15);
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), v1[1] + 56 * v15, v1[1] + 56 * v19);
          unint64_t result = absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>((uint64_t)(v1 + 5), v1[1] + 56 * v19, (uint64_t)v29);
          --v15;
        }
      }
      else
      {
        *(unsigned char *)(v20 + v15) = v22 & 0x7F;
        *(unsigned char *)((v1[3] & (v15 - 8)) + (v1[3] & 7) + *v1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    unint64_t v14 = v1[3];
  }
  while (v15 != v14);
  uint64_t v27 = v15 - (v15 >> 3);
  if (v15 == 7) {
    uint64_t v27 = 6;
  }
  v1[5] = v27 - v1[2];
  unint64_t v28 = v1[4];
  if (v28) {
    goto LABEL_26;
  }
  return result;
}

uint64_t absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<int,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>,void>::transfer<std::allocator<std::pair<int const,absl::lts_2020_02_25::flat_hash_map<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)(a2 + 8) = v3;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v5;
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v7;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::~raw_hash_set(a3 + 8);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::SavedLiteral>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::SavedLiteral>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  int8x16_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  int8x16_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)int8x16_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    unint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v18));
      unint64_t v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  unint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_map<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::try_emplace_impl<long long const&>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v9 = *a1;
  unint64_t v10 = (v8 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  while (1)
  {
    unint64_t v12 = v10 & v11;
    uint64_t v13 = *(void *)(v9 + (v10 & v11));
    unint64_t v14 = ((v13 ^ (0x101010101010101 * (v8 & 0x7F))) - 0x101010101010101) & ~(v13 ^ (0x101010101010101
                                                                                       * (v8 & 0x7F))) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v13 & (~v13 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(a1, v8);
      uint64_t v18 = a1[1] + 56 * result;
      *(void *)uint64_t v18 = *a2;
      *(void *)(v18 + 8) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(void *)(v18 + 48) = 0;
      uint64_t v9 = *a1;
      uint64_t v15 = a1[1];
      char v17 = 1;
      goto LABEL_10;
    }
    v6 += 8;
    unint64_t v10 = v6 + v12;
  }
  uint64_t v15 = a1[1];
  while (1)
  {
    unint64_t result = (v12 + (__clz(__rbit64(v14)) >> 3)) & v11;
    if (*(void *)(v15 + 56 * result) == v7) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  char v17 = 0;
LABEL_10:
  *(void *)a3 = v9 + result;
  *(void *)(a3 + 8) = v15 + 56 * result;
  *(unsigned char *)(a3 + 16) = v17;
  return result;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  unint64_t v33 = v4;
  if (!v4)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 56 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v32 = a1[4];
    if (!v32) {
      return;
    }
LABEL_21:
    *((void *)v32 + 4) = v14 >> 3;
    *((void *)v32 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v5] & 0x80000000) == 0)
    {
      unint64_t v16 = (uint64_t *)&v33[56 * (void)v13];
      unint64_t v17 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v16)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *v16));
      uint64_t v18 = *a1;
      unint64_t v19 = a1[3];
      unint64_t v20 = ((v17 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v19;
      uint64_t v21 = 0;
      for (unint64_t i = *(void *)&(*a1)[v20] & (~*(void *)&(*a1)[v20] << 7) & 0x8080808080808080;
            !i;
            unint64_t i = *(void *)&v18[v20] & (~*(void *)&v18[v20] << 7) & 0x8080808080808080)
      {
        v21 += 8;
        unint64_t v20 = (v21 + v20) & (unint64_t)v19;
      }
      unint64_t v23 = (v20 + (__clz(__rbit64(i)) >> 3)) & (unint64_t)v19;
      char v24 = v17 & 0x7F;
      v18[v23] = v24;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v23 - 8) & (unint64_t)a1[3])] = v24;
      int v25 = &a1[1][56 * v23];
      uint64_t v26 = *v16;
      uint64_t v27 = v16[1];
      v16[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(void *)int v25 = v26;
      *((void *)v25 + 1) = v27;
      uint64_t v28 = v16[2];
      v16[2] = 0;
      uint64_t v29 = v16[3];
      v16[3] = 0;
      *((void *)v25 + 2) = v28;
      *((void *)v25 + 3) = v29;
      uint64_t v30 = v16[4];
      uint64_t v31 = v16[5];
      v16[4] = 0;
      *((void *)v25 + 4) = v30;
      *((void *)v25 + 5) = v31;
      v16[5] = 0;
      *((void *)v25 + 6) = v16[6];
      v16[6] = 0;
      if (v16[4])
      {
        operator delete((void *)v16[1]);
        v16[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        v16[6] = 0;
        v16[3] = 0;
        v16[4] = 0;
        v16[2] = 0;
      }
      v14 += v21;
      uint64_t v15 = (void *)v16[5];
      if (v15) {
        absl::lts_2020_02_25::container_internal::UnsampleSlow(v15);
      }
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v5);
  uint64_t v32 = a1[4];
  if (v32) {
    goto LABEL_21;
  }
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>::drop_deletes_without_resize(uint64_t a1)
{
  v29[7] = *MEMORY[0x263EF8340];
  unint64_t v2 = *(int8x16_t **)a1;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1 + v3;
  if (v4 + 1 != *(void *)a1)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)a1;
    if (v5 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *unint64_t v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *unint64_t v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  uint64_t v14 = *(void *)(a1 + 24);
  if (!v14)
  {
    unint64_t v16 = 0;
    *(void *)(a1 + 40) = -*(void *)(a1 + 16);
    uint64_t v28 = *(void *)(a1 + 32);
    if (!v28) {
      return;
    }
LABEL_26:
    *(void *)(v28 + 32) = v16 >> 3;
    *(void *)(v28 + 16) = 0;
    return;
  }
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  do
  {
    unint64_t v20 = *(int8x16_t **)a1;
    if (*(unsigned __int8 *)(*(void *)a1 + v15) == 254)
    {
      unint64_t v21 = (unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
          + *(void *)(*(void *)(a1 + 8) + 56 * v15);
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v23) & (~*(uint64_t *)((char *)v20->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
      }
      else
      {
        uint64_t v17 = 0;
        unint64_t v18 = ((v22 >> 7) ^ ((unint64_t)v20 >> 12)) & v14;
        do
        {
          v17 += 8;
          unint64_t v18 = (v17 + v18) & v14;
          unint64_t v24 = *(uint64_t *)((unsigned char *)v20->i64 + v18) & (~*(uint64_t *)((char *)v20->i64 + v18) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v19 = (v18 + (__clz(__rbit64(v24)) >> 3)) & v14;
      v16 += v17;
      if ((((v19 - v23) ^ (v15 - v23)) & v14) > 7)
      {
        int v25 = v20->u8[v19];
        v20->i8[v19] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v19 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
        uint64_t v26 = *(void *)(a1 + 8);
        if (v25 == 128)
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (void *)(v26 + 56 * v19), (uint64_t *)(v26 + 56 * v15));
          *(unsigned char *)(*(void *)a1 + v15) = 0x80;
          *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = 0x80;
        }
        else
        {
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, v29, (uint64_t *)(v26 + 56 * v15));
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (void *)(*(void *)(a1 + 8) + 56 * v15), (uint64_t *)(*(void *)(a1 + 8) + 56 * v19));
          absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(a1 + 40, (void *)(*(void *)(a1 + 8) + 56 * v19), v29);
          --v15;
        }
      }
      else
      {
        v20->i8[v15] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(a1 + 24) & (v15 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v22 & 0x7F;
      }
    }
    ++v15;
    uint64_t v14 = *(void *)(a1 + 24);
  }
  while (v15 != v14);
  uint64_t v27 = v15 - (v15 >> 3);
  if (v15 == 7) {
    uint64_t v27 = 6;
  }
  *(void *)(a1 + 40) = v27 - *(void *)(a1 + 16);
  uint64_t v28 = *(void *)(a1 + 32);
  if (v28) {
    goto LABEL_26;
  }
}

void absl::lts_2020_02_25::container_internal::hash_policy_traits<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>,void>::transfer<std::allocator<std::pair<long long const,absl::lts_2020_02_25::flat_hash_set<int,absl::lts_2020_02_25::hash_internal::Hash<int>,std::equal_to<int>,std::allocator<int>>>>>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  a3[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *a2 = v4;
  a2[1] = v5;
  uint64_t v7 = a3 + 2;
  uint64_t v6 = a3[2];
  a3[2] = 0;
  uint64_t v8 = a3[3];
  a3[3] = 0;
  a2[2] = v6;
  a2[3] = v8;
  uint64_t v9 = a3[4];
  uint64_t v10 = a3[5];
  a3[4] = 0;
  a2[4] = v9;
  a2[5] = v10;
  a3[5] = 0;
  a2[6] = a3[6];
  a3[6] = 0;
  if (a3[4])
  {
    operator delete((void *)a3[1]);
    a3[1] = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    a3[6] = 0;
    v7[1] = 0;
    v7[2] = 0;
    *uint64_t v7 = 0;
  }
  uint64_t v11 = (void *)a3[5];
  if (v11) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v11);
  }
}

void operations_research::sat::DomainDeductions::AddDeduction(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  __x[0] = a3;
  LODWORD(v65) = 0;
  if ((a3 & 0x80000000) != 0) {
    google::MakeCheckOpString<int,int>((int)__x, (int)&v65, "var >= 0");
  }
  uint64_t v7 = (2 * a2) ^ (a2 >> 31);
  uint64_t v8 = a1 + 3;
  if ((int)v7 >= *((_DWORD *)a1 + 6))
  {
    unint64_t v9 = (int)v7 + 1;
    int v10 = v9 & ~((int)v9 >> 31);
    *((_DWORD *)a1 + 6) = v10;
    uint64_t v12 = a1[4];
    uint64_t v13 = a1[5];
    uint64_t v11 = (uint64_t)(a1 + 4);
    unint64_t v14 = (v10 + 63) >> 6;
    *(void *)__x = 0;
    unint64_t v15 = (v13 - v12) >> 3;
    if (v14 <= v15)
    {
      if (v14 < v15) {
        a1[5] = v12 + 8 * v14;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(v11, v14 - v15, (uint64_t *)__x);
    }
    uint64_t v17 = a1[13];
    uint64_t v16 = a1[14];
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3);
    if (v9 <= v18)
    {
      if (v9 < v18)
      {
        uint64_t v19 = v17 + 24 * v9;
        if (v16 != v19)
        {
          uint64_t v20 = a1[14];
          do
          {
            unint64_t v22 = *(void **)(v20 - 24);
            v20 -= 24;
            unint64_t v21 = v22;
            if (v22)
            {
              *(void *)(v16 - 16) = v21;
              operator delete(v21);
            }
            uint64_t v16 = v20;
          }
          while (v20 != v19);
        }
        a1[14] = v19;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)(a1 + 13), v9 - v18);
    }
  }
  uint64_t v23 = *a1;
  unint64_t v24 = (a1[1] - *a1) >> 2;
  if (v24 <= (int)a3)
  {
    unint64_t v25 = (int)a3 + 1;
    __x[0] = 0;
    if (v25 <= v24)
    {
      if (v25 < v24) {
        a1[1] = v23 + 4 * v25;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)a1, v25 - v24, __x);
    }
  }
  *(void *)__x = v7 | (a3 << 32);
  *(void *)long long __p = 0;
  unint64_t v26 = *(void *)a4;
  if ((*(void *)a4 & 1) == 0)
  {
    *(void *)long long __p = *(void *)a4;
    *(_OWORD *)&__p[8] = *(_OWORD *)(a4 + 8);
    goto LABEL_32;
  }
  uint64_t v27 = *(long long **)(a4 + 8);
  unint64_t v28 = v26 >> 1;
  if (v26 >= 4)
  {
    if (v26 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v29 = operator new(16 * v28);
    *(void *)&__p[8] = v29;
    *(void *)&__p[16] = v26 >> 1;
    *(void *)long long __p = 1;
    goto LABEL_29;
  }
  if (v26 >= 2)
  {
    uint64_t v29 = &__p[8];
    do
    {
LABEL_29:
      long long v31 = *v27++;
      *v29++ = v31;
      --v28;
    }
    while (v28);
    uint64_t v30 = *(void *)__p;
    goto LABEL_31;
  }
  uint64_t v30 = 0;
LABEL_31:
  *(void *)long long __p = v30 + (v26 & 0xFFFFFFFFFFFFFFFELL);
LABEL_32:
  unint64_t v32 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>(a1 + 16, __x);
  unint64_t v33 = v32;
  if (v34)
  {
    uint64_t v35 = a1[17] + 32 * v32;
    *(void *)uint64_t v35 = *(void *)__x;
    *(void *)(v35 + 8) = 0;
    *(void *)(v35 + 8) = *(void *)__p;
    *(_OWORD *)(v35 + 16) = *(_OWORD *)&__p[8];
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 3, v7);
    uint64_t v36 = a1[13] + 24 * (int)v7;
    char v37 = (uint64_t *)(v36 + 8);
    uint64_t v38 = *(char **)(v36 + 8);
    unint64_t v39 = *(void *)(v36 + 16);
    if ((unint64_t)v38 < v39)
    {
      *(_DWORD *)uint64_t v38 = a3;
      *char v37 = (uint64_t)(v38 + 4);
      return;
    }
    uint64_t v43 = *(char **)v36;
    uint64_t v44 = (uint64_t)&v38[-*(void *)v36];
    uint64_t v45 = v44 >> 2;
    unint64_t v46 = (v44 >> 2) + 1;
    if (v46 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v47 = v39 - (void)v43;
    if (v47 >> 1 > v46) {
      unint64_t v46 = v47 >> 1;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v46;
    }
    if (v48)
    {
      if (v48 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v49 = operator new(4 * v48);
      char v50 = &v49[4 * v45];
      unint64_t v51 = &v49[4 * v48];
      *char v50 = a3;
      uint64_t v52 = (uint64_t)(v50 + 1);
      int64_t v53 = v38 - v43;
      if (v38 == v43) {
        goto LABEL_60;
      }
    }
    else
    {
      unint64_t v49 = 0;
      char v50 = (_DWORD *)(4 * v45);
      unint64_t v51 = 0;
      *(_DWORD *)(4 * v45) = a3;
      uint64_t v52 = 4 * v45 + 4;
      int64_t v53 = v38 - v43;
      if (v38 == v43)
      {
LABEL_60:
        *(void *)uint64_t v36 = v50;
        *char v37 = v52;
        *(void *)(v36 + 16) = v51;
        if (v43) {
          operator delete(v43);
        }
        *char v37 = v52;
        return;
      }
    }
    unint64_t v54 = v53 - 4;
    if (v54 < 0x2C) {
      goto LABEL_72;
    }
    if ((unint64_t)(v38 - v49 - v44) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v55 = (v54 >> 2) + 1;
    uint64_t v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v57 = &v38[-v56];
    char v50 = (_DWORD *)((char *)v50 - v56);
    uint64_t v58 = &v49[4 * v45 - 16];
    uint64_t v59 = v38 - 16;
    uint64_t v60 = v55 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v61 = *(_OWORD *)v59;
      *(v58 - 1) = *((_OWORD *)v59 - 1);
      *uint64_t v58 = v61;
      v58 -= 2;
      v59 -= 32;
      v60 -= 8;
    }
    while (v60);
    uint64_t v38 = v57;
    if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_72:
      do
      {
        int v62 = *((_DWORD *)v38 - 1);
        v38 -= 4;
        *--char v50 = v62;
      }
      while (v38 != v43);
    }
    goto LABEL_60;
  }
  uint64_t v40 = a1[17];
  if (__p[0]) {
    operator delete(*(void **)&__p[8]);
  }
  int v41 = (const operations_research::Domain *)(v40 + 32 * v33 + 8);
  if ((operations_research::Domain::IsIncludedIn(v41, (const operations_research::Domain *)a4) & 1) == 0)
  {
    operations_research::Domain::IntersectionWith((void *)a4, v41, (unint64_t *)__x);
    if (v41 == (const operations_research::Domain *)__x)
    {
      if (__x[0]) {
        operator delete(*(void **)__p);
      }
    }
    else
    {
      uint64_t v42 = (void **)((char *)v41 + 8);
      if (*(unsigned char *)v41) {
        operator delete(*v42);
      }
      *(void *)int v41 = *(void *)__x;
      *(_OWORD *)uint64_t v42 = *(_OWORD *)__p;
    }
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v8, v7);
  }
}

void sub_23CD59D58(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD59D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p)
{
  if (a11) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::DomainDeductions::ProcessClause(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 4 * a3;
    char v6 = 1;
    uint64_t v7 = a2;
    unint64_t v102 = &a2[a3];
    do
    {
      int v8 = (2 * *v7) ^ (*v7 >> 31);
      if (v8 >= *((_DWORD *)a1 + 6)) {
        return;
      }
      v6 &= ((*(void *)(a1[4] + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0;
      ++v7;
      v5 -= 4;
    }
    while (v5);
    if ((v6 & 1) == 0)
    {
      v100 = a2;
      uint64_t v110 = 0;
      unint64_t v111 = 0;
      unint64_t v9 = 0;
      int v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      v122 = 0;
      int v123 = 0;
      unint64_t v124 = 0;
      uint64_t v119 = 0;
      v120 = 0;
      unint64_t v121 = 0;
      uint64_t v107 = a3;
      while (1)
      {
        uint64_t v103 = a2;
        uint64_t v15 = v4[13] + 24 * ((2 * *a2) ^ (*a2 >> 31));
        uint64_t v17 = *(int **)v15;
        uint64_t v16 = *(int **)(v15 + 8);
        uint64_t v108 = v16;
        if (*(int **)v15 != v16) {
          break;
        }
LABEL_9:
        uint64_t v119 = v13;
        v122 = v14;
        a2 = v103 + 1;
        if (v103 + 1 == v102)
        {
          if (v13 != v11)
          {
            uint64_t v60 = *v4;
            long long v61 = v13;
            do
            {
              uint64_t v62 = *(int *)v61;
              v61 += 4;
              *(_DWORD *)(v60 + 4 * v62) = 0;
            }
            while (v61 != v11);
          }
          unint64_t v63 = (v10 - v14) >> 2;
          std::vector<operations_research::Domain>::vector(&v117, v63);
          uint64_t v64 = v10;
          uint64_t v65 = v100;
          unint64_t v66 = v13;
          v106 = v10;
          do
          {
            while (v64 == v14)
            {
              uint64_t v64 = v14;
              if (++v65 == v102) {
                goto LABEL_99;
              }
            }
            unint64_t v67 = 0;
            int v101 = v65;
            int v68 = (2 * *v65) ^ (*v65 >> 31);
            do
            {
              uint64_t v70 = 0;
              uint64_t v71 = *(unsigned int *)&v14[4 * v67];
              uint64_t v69 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v68)
                    * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                       * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                        + v68));
              unint64_t v72 = (((unint64_t)(v69 + v71) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v69 + v71));
              unint64_t v73 = a1[16];
              unint64_t v74 = (v72 >> 7) ^ (v73 >> 12);
              uint64_t v75 = a1[19];
              uint64_t v76 = 0x101010101010101 * (v72 & 0x7F);
              while (1)
              {
                uint64_t v77 = v74 & v75;
                uint64_t v78 = *(void *)(v73 + v77);
                unint64_t v79 = ((v78 ^ v76) - 0x101010101010101) & ~(v78 ^ v76) & 0x8080808080808080;
                if (v79) {
                  break;
                }
LABEL_85:
                if ((v78 & (~v78 << 6) & 0x8080808080808080) != 0) {
                  goto LABEL_101;
                }
                v70 += 8;
                unint64_t v74 = v70 + v77;
              }
              while (1)
              {
                unint64_t v80 = (v77 + (__clz(__rbit64(v79)) >> 3)) & v75;
                uint64_t v81 = (_DWORD *)(a1[17] + 32 * v80);
                if (*v81 == v68 && v81[1] == v71) {
                  break;
                }
                v79 &= v79 - 1;
                if (!v79) {
                  goto LABEL_85;
                }
              }
              if (v80 == v75)
              {
LABEL_101:
                v87 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v125, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 200);
                int v88 = (void *)google::LogMessage::stream(v87);
                uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"Check failed: it != collection.end() ", 37);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"Map key not found", 17);
                google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v125);
              }
              operations_research::Domain::UnionWith((operations_research::Domain *)((char *)v117 + 24 * v67), (const operations_research::Domain *)(v81 + 2), &v115);
              v83 = (unint64_t *)((char *)v117 + 24 * v67);
              if (v83 == &v115)
              {
                if (v115) {
                  operator delete(*(void **)v116);
                }
              }
              else
              {
                BOOL v84 = (void **)(v83 + 1);
                if (*(unsigned char *)v83) {
                  operator delete(*v84);
                }
                unint64_t *v83 = v115;
                *(_OWORD *)BOOL v84 = *(_OWORD *)v116;
                uint64_t v13 = v66;
              }
              ++v67;
            }
            while (v63 > v67);
            int v10 = v106;
            uint64_t v64 = v106;
            uint64_t v65 = v101 + 1;
          }
          while (v101 + 1 != v102);
LABEL_99:
          if (v10 != v14)
          {
            uint64_t v85 = 0;
            unint64_t v86 = 0;
            do
            {
              int v90 = *(_DWORD *)&v14[4 * v86];
              LODWORD(v115) = v90;
              *(void *)v116 = 0;
              *(void *)v116 = *(void *)((char *)v117 + v85);
              *(_OWORD *)&v116[8] = *(_OWORD *)((char *)v117 + v85 + 8);
              *(void *)((char *)v117 + v85) = 0;
              unint64_t v91 = a4[1];
              if (v91 < a4[2])
              {
                *(_DWORD *)unint64_t v91 = v90;
                *(void *)(v91 + 8) = 0;
                *(void *)(v91 + 8) = *(void *)v116;
                *(_OWORD *)(v91 + 16) = *(_OWORD *)&v116[8];
                a4[1] = v91 + 32;
              }
              else
              {
                uint64_t v92 = std::vector<std::pair<int,operations_research::Domain>>::__push_back_slow_path<std::pair<int,operations_research::Domain>>(a4, (uint64_t)&v115);
                char v93 = v116[0];
                a4[1] = v92;
                if (v93) {
                  operator delete(*(void **)&v116[8]);
                }
              }
              ++v86;
              v85 += 24;
            }
            while (v63 > v86);
          }
          unint64_t v94 = (void **)v117;
          if (v117)
          {
            uint64_t v95 = v118;
            unint64_t v96 = v117;
            if (v118 != v117)
            {
              v97 = v118;
              do
              {
                char v98 = *((unsigned char *)v97 - 24);
                v97 -= 3;
                if (v98) {
                  operator delete(*(v95 - 2));
                }
                uint64_t v95 = v97;
              }
              while (v97 != v94);
              unint64_t v96 = v117;
            }
            v118 = v94;
            operator delete(v96);
          }
          if (v13)
          {
            v120 = v13;
            operator delete(v13);
            unint64_t v14 = v122;
          }
          if (v14)
          {
            int v123 = v14;
            operator delete(v14);
          }
          return;
        }
      }
      while (1)
      {
        int v18 = *v17;
        uint64_t v19 = *v4;
        int v20 = *(_DWORD *)(*v4 + 4 * *v17);
        if (v20)
        {
          int v21 = v20 + 1;
          *(_DWORD *)(v19 + 4 * v18) = v21;
          if (a3 != v21) {
            goto LABEL_13;
          }
          goto LABEL_39;
        }
        if (v11 < v111)
        {
          *(_DWORD *)uint64_t v11 = v18;
          v11 += 4;
          unint64_t v9 = v11;
          int v22 = *(_DWORD *)(v19 + 4 * v18) + 1;
          *(_DWORD *)(v19 + 4 * v18) = v22;
          if (a3 != v22) {
            goto LABEL_13;
          }
          goto LABEL_39;
        }
        uint64_t v105 = v10;
        int64_t v23 = v11 - v13;
        unint64_t v24 = v13;
        uint64_t v25 = (v11 - v13) >> 2;
        unint64_t v26 = v25 + 1;
        long long __p = v24;
        if ((unint64_t)(v25 + 1) >> 62) {
          goto LABEL_120;
        }
        unint64_t v27 = v111 - v24;
        unint64_t v28 = (v111 - v24) >> 1;
        if (v28 > v26) {
          unint64_t v26 = v28;
        }
        unint64_t v29 = v27 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v26;
        uint64_t v109 = v12;
        if (v29)
        {
          if (v29 >> 62) {
            goto LABEL_119;
          }
          unint64_t v30 = v29;
          long long v31 = operator new(4 * v29);
          unint64_t v29 = v30;
        }
        else
        {
          long long v31 = 0;
        }
        unint64_t v32 = &v31[4 * v25];
        *(_DWORD *)unint64_t v32 = v18;
        int8x16_t v112 = v32 + 4;
        unint64_t v33 = __p;
        if (v11 != __p) {
          break;
        }
        int v10 = v105;
        unint64_t v111 = &v31[4 * v29];
        if (__p)
        {
LABEL_35:
          operator delete(v33);
          uint64_t v4 = a1;
          uint64_t v19 = *a1;
          uint64_t v13 = v32;
          goto LABEL_38;
        }
LABEL_37:
        uint64_t v13 = v32;
        uint64_t v4 = a1;
LABEL_38:
        a3 = v107;
        uint64_t v16 = v108;
        unint64_t v9 = v112;
        uint64_t v12 = v109;
        uint64_t v11 = v112;
        int v37 = *(_DWORD *)(v19 + 4 * v18) + 1;
        *(_DWORD *)(v19 + 4 * v18) = v37;
        if (v107 != v37) {
          goto LABEL_13;
        }
LABEL_39:
        if (v10 >= v12)
        {
          long long __p = v13;
          uint64_t v38 = (v10 - v14) >> 2;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
          {
LABEL_120:
            v120 = v9;
            unint64_t v121 = v111;
            uint64_t v119 = __p;
            int v123 = (char *)v110;
            unint64_t v124 = v12;
            v122 = v14;
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v12 - v14) >> 1 > v39) {
            unint64_t v39 = (v12 - v14) >> 1;
          }
          if ((unint64_t)(v12 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v39;
          }
          v113 = v9;
          if (v40)
          {
            uint64_t v109 = v12;
            if (v40 >> 62)
            {
LABEL_119:
              v120 = v9;
              unint64_t v121 = v111;
              uint64_t v119 = __p;
              int v123 = (char *)v110;
              unint64_t v124 = v109;
              v122 = v14;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v41 = operator new(4 * v40);
            uint64_t v4 = a1;
            uint64_t v42 = &v41[4 * v38];
            *(_DWORD *)uint64_t v42 = v18;
            uint64_t v110 = (uint64_t)(v42 + 4);
            if (v10 != v14)
            {
LABEL_49:
              unint64_t v43 = v10 - 4 - v14;
              if (v43 < 0xBC
                || &v41[v10 - v14 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v10 - v14 - 4]
                || &v10[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4
                || (unint64_t)(v14 - v41) < 0x20)
              {
                uint64_t v44 = v10;
              }
              else
              {
                uint64_t v48 = (v43 >> 2) + 1;
                uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v44 = &v10[-v49];
                v42 -= v49;
                char v50 = &v41[4 * v38 - 16];
                unint64_t v51 = v10 - 16;
                uint64_t v52 = v48 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v53 = *(_OWORD *)v51;
                  *(v50 - 1) = *((_OWORD *)v51 - 1);
                  *char v50 = v53;
                  v50 -= 2;
                  v51 -= 32;
                  v52 -= 8;
                }
                while (v52);
                if (v48 == (v48 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_52:
                  uint64_t v12 = &v41[4 * v40];
                  if (v14) {
                    goto LABEL_53;
                  }
                  goto LABEL_54;
                }
              }
              do
              {
                int v45 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v42 - 1) = v45;
                v42 -= 4;
              }
              while (v44 != v14);
              goto LABEL_52;
            }
          }
          else
          {
            int v41 = 0;
            uint64_t v42 = (char *)(4 * v38);
            *(_DWORD *)(4 * v38) = v18;
            uint64_t v110 = 4 * v38 + 4;
            if (v10 != v14) {
              goto LABEL_49;
            }
          }
          uint64_t v12 = &v41[4 * v40];
          if (v14)
          {
LABEL_53:
            unint64_t v46 = v12;
            uint64_t v47 = v4;
            operator delete(v14);
            uint64_t v4 = v47;
            uint64_t v12 = v46;
          }
LABEL_54:
          int v10 = (char *)v110;
          unint64_t v14 = v42;
          a3 = v107;
          uint64_t v16 = v108;
          unint64_t v9 = v113;
          goto LABEL_13;
        }
        *(_DWORD *)int v10 = v18;
        v10 += 4;
        uint64_t v110 = (uint64_t)v10;
LABEL_13:
        if (++v17 == v16)
        {
          v120 = v9;
          unint64_t v121 = v111;
          int v123 = (char *)v110;
          unint64_t v124 = v12;
          goto LABEL_9;
        }
      }
      unint64_t v34 = v11 - 4 - __p;
      if (v34 < 0xBC
        || &v31[v23 - 4 - (v34 & 0xFFFFFFFFFFFFFFFCLL)] > &v31[v23 - 4]
        || &v11[-(v34 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v11 - 4
        || (unint64_t)(v11 - &v31[v23]) < 0x20)
      {
        uint64_t v35 = v11;
        int v10 = v105;
        unint64_t v33 = __p;
      }
      else
      {
        uint64_t v54 = (v34 >> 2) + 1;
        uint64_t v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v35 = &v11[-v55];
        v32 -= v55;
        uint64_t v56 = &v31[4 * v25 - 16];
        uint64_t v57 = v11 - 16;
        uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFF8;
        int v10 = v105;
        do
        {
          long long v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *uint64_t v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 8;
        }
        while (v58);
        unint64_t v33 = __p;
        if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          unint64_t v111 = &v31[4 * v29];
          if (v33) {
            goto LABEL_35;
          }
          goto LABEL_37;
        }
      }
      do
      {
        int v36 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v32 - 1) = v36;
        v32 -= 4;
      }
      while (v35 != v33);
      goto LABEL_34;
    }
  }
}

void sub_23CD5A610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,void *a27)
{
  if (a24) {
    operator delete(__p);
  }
  std::vector<operations_research::Domain>::~vector[abi:ne180100](&a27);
  if (v27)
  {
    *(void *)(v28 - 144) = v27;
    operator delete(v27);
    unint64_t v30 = *(void **)(v28 - 128);
    if (!v30)
    {
LABEL_5:
      std::vector<std::pair<int,operations_research::Domain>>::~vector[abi:ne180100](a10);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v30 = *(void **)(v28 - 128);
    if (!v30) {
      goto LABEL_5;
    }
  }
  *(void *)(v28 - 120) = v30;
  operator delete(v30);
  std::vector<std::pair<int,operations_research::Domain>>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void operations_research::sat::SubstituteVariable(operations_research::sat *this, uint64_t a2, uint64_t a3, const operations_research::sat::ConstraintProto *a4, operations_research::sat::ConstraintProto *a5, __n128 a6)
{
  if ((this & 0x80000000) != 0)
  {
    unint64_t v96 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v114, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 185);
    v97 = (void *)google::LogMessage::stream(v96);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"Check failed: RefIsPositive(var) ", 33);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v114);
  }
  int v6 = (int)this;
  if (a2 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = -a2;
  }
  v114 = (__n128 *)v7;
  LODWORD(v109) = 1;
  if (v7 != 1) {
    google::MakeCheckOpString<long long,int>((int)&v114, (int)&v109, "std::abs(var_coeff_in_definition) == 1");
  }
  v114 = 0;
  unint64_t v115 = 0;
  v116 = 0;
  int v8 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  if (*((_DWORD *)a4 + 15) == 12) {
    int v8 = (uint64_t *)*((void *)a4 + 6);
  }
  uint64_t v9 = *((unsigned int *)v8 + 4);
  if ((int)v9 < 1)
  {
LABEL_163:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v111, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 126);
    char v98 = (void *)google::LogMessage::stream((google::LogMessage *)&v111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Check failed: found ", 20);
    goto LABEL_164;
  }
  int v10 = 0;
  uint64_t v11 = 0;
  int v104 = (int)this;
  uint64_t v103 = *((unsigned int *)v8 + 4);
  do
  {
    while (1)
    {
      int v12 = *(_DWORD *)(v8[3] + 4 * v11);
      if (v12 >= 0) {
        unint64_t v13 = *(void *)(v8[6] + 8 * v11);
      }
      else {
        unint64_t v13 = -*(void *)(v8[6] + 8 * v11);
      }
      int v14 = v12 ^ (v12 >> 31);
      if (v14 == v6)
      {
        uint64_t v24 = v11 + 1;
        if (v24 == v9)
        {
          uint64_t v25 = a2;
          goto LABEL_62;
        }
        while (1)
        {
          while (1)
          {
            int v26 = *(_DWORD *)(v8[3] + 4 * v24);
            if (v26 >= 0) {
              unint64_t v27 = *(void *)(v8[6] + 8 * v24);
            }
            else {
              unint64_t v27 = -*(void *)(v8[6] + 8 * v24);
            }
            int v28 = v26 ^ (v26 >> 31);
            if (v28 == v6)
            {
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v111, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 118);
              v100 = (void *)google::LogMessage::stream((google::LogMessage *)&v111);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"Check failed: !found ", 21);
LABEL_164:
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v111);
            }
            if (v10 >= v116) {
              break;
            }
            v10->n128_u32[0] = v28;
            v10->n128_u64[1] = v27;
            unint64_t v115 = ++v10;
            if (++v24 == v9) {
              goto LABEL_61;
            }
          }
          unint64_t v29 = v114;
          uint64_t v30 = v10 - v114;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60) {
            goto LABEL_167;
          }
          uint64_t v32 = (char *)v116 - (char *)v114;
          if (((char *)v116 - (char *)v114) >> 3 > v31) {
            unint64_t v31 = v32 >> 3;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v31;
          }
          if (v33)
          {
            if (v33 >> 60) {
              goto LABEL_168;
            }
            unint64_t v34 = (char *)operator new(16 * v33);
            uint64_t v35 = (uint64_t)&v34[16 * v30];
            *(_DWORD *)uint64_t v35 = v28;
            *(void *)(v35 + 8) = v27;
            if (v10 == v29)
            {
LABEL_58:
              int v37 = v10;
              int v10 = (__n128 *)(v35 + 16);
              v114 = (__n128 *)v35;
              unint64_t v115 = (__n128 *)(v35 + 16);
              v116 = (__n128 *)&v34[16 * v33];
              if (!v37) {
                goto LABEL_55;
              }
              goto LABEL_54;
            }
          }
          else
          {
            unint64_t v34 = 0;
            uint64_t v35 = 16 * v30;
            *(_DWORD *)uint64_t v35 = v28;
            *(void *)(v35 + 8) = v27;
            if (v10 == v29) {
              goto LABEL_58;
            }
          }
          uint64_t v36 = v35;
          do
          {
            a6 = v10[-1];
            *(__n128 *)(v36 - 16) = a6;
            v36 -= 16;
            --v10;
          }
          while (v10 != v29);
          int v37 = v114;
          int v10 = (__n128 *)(v35 + 16);
          v114 = (__n128 *)v36;
          unint64_t v115 = (__n128 *)(v35 + 16);
          v116 = (__n128 *)&v34[16 * v33];
          if (!v37) {
            goto LABEL_55;
          }
LABEL_54:
          operator delete(v37);
LABEL_55:
          int v6 = v104;
          uint64_t v9 = v103;
          unint64_t v115 = v10;
          if (++v24 == v103) {
            goto LABEL_61;
          }
        }
      }
      if (v10 >= v116) {
        break;
      }
      v10->n128_u32[0] = v14;
      v10->n128_u64[1] = v13;
      unint64_t v115 = ++v10;
      if (++v11 == v9) {
        goto LABEL_60;
      }
    }
    uint64_t v15 = v114;
    uint64_t v16 = v10 - v114;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60) {
LABEL_167:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v18 = (char *)v116 - (char *)v114;
    if (((char *)v116 - (char *)v114) >> 3 > v17) {
      unint64_t v17 = v18 >> 3;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 60) {
LABEL_168:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int v20 = (char *)operator new(16 * v19);
      uint64_t v21 = (uint64_t)&v20[16 * v16];
      *(_DWORD *)uint64_t v21 = v14;
      *(void *)(v21 + 8) = v13;
      if (v10 == v15)
      {
LABEL_32:
        int64_t v23 = v10;
        int v10 = (__n128 *)(v21 + 16);
        v114 = (__n128 *)v21;
        unint64_t v115 = (__n128 *)(v21 + 16);
        v116 = (__n128 *)&v20[16 * v19];
        if (v23) {
          goto LABEL_28;
        }
        goto LABEL_29;
      }
    }
    else
    {
      int v20 = 0;
      uint64_t v21 = 16 * v16;
      *(_DWORD *)uint64_t v21 = v14;
      *(void *)(v21 + 8) = v13;
      if (v10 == v15) {
        goto LABEL_32;
      }
    }
    uint64_t v22 = v21;
    do
    {
      a6 = v10[-1];
      *(__n128 *)(v22 - 16) = a6;
      v22 -= 16;
      --v10;
    }
    while (v10 != v15);
    int64_t v23 = v114;
    int v10 = (__n128 *)(v21 + 16);
    v114 = (__n128 *)v22;
    unint64_t v115 = (__n128 *)(v21 + 16);
    v116 = (__n128 *)&v20[16 * v19];
    if (v23) {
LABEL_28:
    }
      operator delete(v23);
LABEL_29:
    int v6 = v104;
    uint64_t v9 = v103;
    unint64_t v115 = v10;
    ++v11;
  }
  while (v11 != v103);
LABEL_60:
  unint64_t v13 = 0;
LABEL_61:
  uint64_t v25 = a2;
  if (v14 != v6) {
    goto LABEL_163;
  }
LABEL_62:
  if (v25 >= 0) {
    unint64_t v38 = v13;
  }
  else {
    unint64_t v38 = -(uint64_t)v13;
  }
  int v39 = *(_DWORD *)(a3 + 60);
  unint64_t v40 = *(uint64_t **)(a3 + 48);
  if (v39 == 12) {
    int v41 = *(uint64_t **)(a3 + 48);
  }
  else {
    int v41 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  uint64_t v42 = *((unsigned int *)v41 + 4);
  if ((int)v42 >= 1)
  {
    uint64_t v43 = 0;
    while (2)
    {
      int v45 = *(_DWORD *)(a3 + 60);
      if (v45 == 12) {
        unint64_t v46 = *(uint64_t **)(a3 + 48);
      }
      else {
        unint64_t v46 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      }
      int v47 = *(_DWORD *)(v46[3] + 4 * v43);
      int v48 = v47 ^ (v47 >> 31);
      if (v48 == v6) {
        goto LABEL_72;
      }
      if (v45 == 12) {
        uint64_t v49 = *(uint64_t **)(a3 + 48);
      }
      else {
        uint64_t v49 = &operations_research::sat::_LinearConstraintProto_default_instance_;
      }
      uint64_t v50 = *(void *)(v49[6] + 8 * v43);
      if (v47 >= 0) {
        uint64_t v50 = -v50;
      }
      unint64_t v51 = v50 * v38;
      if (v10 < v116)
      {
        v10->n128_u32[0] = v48;
        v10->n128_u64[1] = v51;
        uint64_t v44 = v10 + 1;
      }
      else
      {
        uint64_t v52 = v114;
        uint64_t v53 = v10 - v114;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 60) {
          goto LABEL_167;
        }
        uint64_t v55 = (char *)v116 - (char *)v114;
        if (((char *)v116 - (char *)v114) >> 3 > v54) {
          unint64_t v54 = v55 >> 3;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          if (v56 >> 60) {
            goto LABEL_168;
          }
          uint64_t v57 = (char *)operator new(16 * v56);
          uint64_t v58 = (uint64_t)&v57[16 * v53];
          *(_DWORD *)uint64_t v58 = v48;
          *(void *)(v58 + 8) = v51;
          uint64_t v59 = v58;
          if (v10 == v52)
          {
LABEL_92:
            uint64_t v44 = (__n128 *)(v58 + 16);
            v114 = (__n128 *)v59;
            unint64_t v115 = (__n128 *)(v58 + 16);
            v116 = (__n128 *)&v57[16 * v56];
            if (v10) {
              goto LABEL_93;
            }
            goto LABEL_94;
          }
        }
        else
        {
          uint64_t v57 = 0;
          uint64_t v58 = 16 * v53;
          *(_DWORD *)uint64_t v58 = v48;
          *(void *)(v58 + 8) = v51;
          uint64_t v59 = 16 * v53;
          if (v10 == v52) {
            goto LABEL_92;
          }
        }
        do
        {
          a6 = v10[-1];
          *(__n128 *)(v59 - 16) = a6;
          v59 -= 16;
          --v10;
        }
        while (v10 != v52);
        int v10 = v114;
        uint64_t v44 = (__n128 *)(v58 + 16);
        v114 = (__n128 *)v59;
        unint64_t v115 = (__n128 *)(v58 + 16);
        v116 = (__n128 *)&v57[16 * v56];
        if (v10) {
LABEL_93:
        }
          operator delete(v10);
LABEL_94:
        int v6 = v104;
      }
      unint64_t v115 = v44;
      int v10 = v44;
LABEL_72:
      if (++v43 == v42)
      {
        int v39 = *(_DWORD *)(a3 + 60);
        unint64_t v40 = *(uint64_t **)(a3 + 48);
        break;
      }
      continue;
    }
  }
  BOOL v113 = 0;
  if (v39 == 12) {
    uint64_t v60 = v40;
  }
  else {
    uint64_t v60 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  operations_research::Domain::FromFlatSpanOfIntervals(v60[9], *((int *)v60 + 16), &v111, a6);
  operations_research::Domain::MultiplicationBy((operations_research::Domain *)&v111, &v113, -(uint64_t)v38, &v109);
  if (v111) {
    operator delete((void *)__p);
  }
  unint64_t v111 = v109;
  long long __p = *(_OWORD *)v110;
  if (!v113)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v109, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 201);
    uint64_t v99 = (void *)google::LogMessage::stream((google::LogMessage *)&v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Check failed: exact ", 20);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v109);
  }
  if (*((_DWORD *)a4 + 15) == 12) {
    long long v61 = (uint64_t *)*((void *)a4 + 6);
  }
  else {
    long long v61 = &operations_research::sat::_LinearConstraintProto_default_instance_;
  }
  operations_research::Domain::FromFlatSpanOfIntervals(v61[9], *((int *)v61 + 16), &v109, *(__n128 *)v110);
  operations_research::Domain::AdditionWith((operations_research::Domain *)&v109, (const operations_research::Domain *)&v111, &v107, v62);
  if (*((_DWORD *)a4 + 15) == 12)
  {
    uint64_t v63 = *((void *)a4 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a4);
    *((_DWORD *)a4 + 15) = 12;
    uint64_t v64 = *((void *)a4 + 1);
    uint64_t v65 = (google::protobuf::Arena *)(v64 & 0xFFFFFFFFFFFFFFFELL);
    if (v64) {
      uint64_t v65 = *(google::protobuf::Arena **)v65;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v65);
    uint64_t v63 = v66;
    *((void *)a4 + 6) = v66;
  }
  *(_DWORD *)(v63 + 64) = 0;
  google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v107 >> 1);
  unint64_t v67 = v107 & 1;
  if (v107) {
    int v68 = (uint64_t *)v108;
  }
  else {
    int v68 = (uint64_t *)&v108;
  }
  if (v107 >= 2)
  {
    uint64_t v69 = &v68[2 * (v107 >> 1)];
    unsigned int v70 = *(_DWORD *)(v63 + 64);
    do
    {
      uint64_t v71 = *v68;
      int v72 = *(_DWORD *)(v63 + 68);
      unsigned int v73 = v70 + 1;
      if (v70 == v72)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v70 + 1);
        int v72 = *(_DWORD *)(v63 + 68);
      }
      uint64_t v74 = *(void *)(v63 + 72);
      *(void *)(v74 + 8 * v70) = v71;
      *(_DWORD *)(v63 + 64) = v73;
      uint64_t v75 = v68[1];
      v70 += 2;
      if (v73 == v72)
      {
        google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)(v63 + 64), v70);
        uint64_t v74 = *(void *)(v63 + 72);
      }
      *(void *)(v74 + 8 * v73) = v75;
      *(_DWORD *)(v63 + 64) = v70;
      v68 += 2;
    }
    while (v68 != v69);
    unint64_t v67 = v107 & 1;
  }
  if (v67) {
    operator delete(v108);
  }
  if (*((_DWORD *)a4 + 15) == 12)
  {
    uint64_t v76 = *((void *)a4 + 6);
  }
  else
  {
    operations_research::sat::ConstraintProto::clear_constraint((uint64_t)a4);
    *((_DWORD *)a4 + 15) = 12;
    uint64_t v77 = *((void *)a4 + 1);
    uint64_t v78 = (google::protobuf::Arena *)(v77 & 0xFFFFFFFFFFFFFFFELL);
    if (v77) {
      uint64_t v78 = *(google::protobuf::Arena **)v78;
    }
    google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::LinearConstraintProto>(v78);
    uint64_t v76 = v79;
    *((void *)a4 + 6) = v79;
  }
  uint64_t v80 = (uint64_t)v114;
  uint64_t v81 = (int *)v115;
  unint64_t v82 = 126 - 2 * __clz(v115 - v114);
  *(_DWORD *)(v76 + 16) = 0;
  *(_DWORD *)(v76 + 40) = 0;
  v106 = (unsigned int *)(v76 + 40);
  if (v81 == (int *)v80) {
    uint64_t v83 = 0;
  }
  else {
    uint64_t v83 = v82;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,long long> *,false>(v80, v81, (uint64_t)&v107, v83, 1);
  BOOL v84 = v114;
  uint64_t v85 = v115;
  if (v114 != v115)
  {
    unsigned __int32 v86 = 0;
    uint64_t v87 = 0;
    do
    {
      while (1)
      {
        unsigned __int32 v88 = v84->n128_u32[0];
        if ((v84->n128_u32[0] & 0x80000000) != 0)
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v107, (google::glog_internal_namespace_ *)"./ortools/sat/presolve_util.cc", 141);
          uint64_t v95 = (void *)google::LogMessage::stream((google::LogMessage *)&v107);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"Check failed: RefIsPositive(entry.first) ", 41);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v107);
        }
        uint64_t v89 = v84->n128_i64[1];
        if (v88 != v86) {
          break;
        }
        v87 += v89;
        if (++v84 == v85) {
          goto LABEL_147;
        }
      }
      if (v87)
      {
        uint64_t v90 = *(unsigned int *)(v76 + 16);
        if (v90 == *(_DWORD *)(v76 + 20)) {
          google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v76 + 16), v90 + 1);
        }
        *(_DWORD *)(*(void *)(v76 + 24) + 4 * v90) = v86;
        *(_DWORD *)(v76 + 16) = v90 + 1;
        uint64_t v91 = *(unsigned int *)(v76 + 40);
        if (v91 == *(_DWORD *)(v76 + 44)) {
          google::protobuf::RepeatedField<long long>::Reserve(v106, v91 + 1);
        }
        *(void *)(*(void *)(v76 + 48) + 8 * v91) = v87;
        *(_DWORD *)(v76 + 40) = v91 + 1;
      }
      uint64_t v87 = v89;
      unsigned __int32 v86 = v88;
      ++v84;
    }
    while (v84 != v85);
LABEL_147:
    if (v87)
    {
      uint64_t v92 = *(unsigned int *)(v76 + 16);
      if (v92 == *(_DWORD *)(v76 + 20)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(v76 + 16), v92 + 1);
      }
      *(_DWORD *)(*(void *)(v76 + 24) + 4 * v92) = v86;
      *(_DWORD *)(v76 + 16) = v92 + 1;
      uint64_t v93 = *(unsigned int *)(v76 + 40);
      if (v93 == *(_DWORD *)(v76 + 44)) {
        google::protobuf::RepeatedField<long long>::Reserve(v106, v93 + 1);
      }
      *(void *)(*(void *)(v76 + 48) + 8 * v93) = v87;
      *(_DWORD *)(v76 + 40) = v93 + 1;
    }
  }
  if ((v109 & 1) == 0)
  {
    if ((v111 & 1) == 0) {
      goto LABEL_155;
    }
LABEL_159:
    operator delete((void *)__p);
    unint64_t v94 = v114;
    if (!v114) {
      return;
    }
LABEL_156:
    unint64_t v115 = v94;
    operator delete(v94);
    return;
  }
  operator delete(v110[0]);
  if (v111) {
    goto LABEL_159;
  }
LABEL_155:
  unint64_t v94 = v114;
  if (v114) {
    goto LABEL_156;
  }
}

void sub_23CD5B07C()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 104));
}

void sub_23CD5B084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, char a17, void *__p, uint64_t a19, char a20,void *a21)
{
  if (a17)
  {
    operator delete(__p);
    if (a20)
    {
LABEL_7:
      operator delete(a21);
      uint64_t v22 = *(void **)(v21 - 104);
      if (v22)
      {
LABEL_8:
        *(void *)(v21 - 96) = v22;
        operator delete(v22);
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else if (a20)
  {
    goto LABEL_7;
  }
  uint64_t v22 = *(void **)(v21 - 104);
  if (v22) {
    goto LABEL_8;
  }
  goto LABEL_4;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::find_or_prepare_insert<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v4)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v4)))
     + v3;
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = (v6 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*a1 + (v7 & v8));
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (v6 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (v6 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_8:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::prepare_insert(a1, v6);
    }
    v2 += 8;
    unint64_t v7 = v2 + v9;
  }
  while (1)
  {
    unint64_t v12 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    unint64_t v13 = (int *)(a1[1] + 32 * v12);
    int v15 = *v13;
    int v14 = v13[1];
    if (v15 == v4 && v14 == v3) {
      return v12;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_8;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v9 = (char *)operator new(v8 + 32 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    int v26 = a1[4];
    if (!v26) {
      return;
    }
LABEL_21:
    *((void *)v26 + 4) = v14 >> 3;
    *((void *)v26 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      unint64_t v19 = &v5[32 * (void)v13];
      unint64_t v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v19)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v19)))
          + *((unsigned int *)v19 + 1);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      uint64_t v22 = *a1;
      int64_t v23 = a1[3];
      unint64_t v24 = ((v21 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v23;
      unint64_t v25 = *(void *)&(*a1)[v24] & (~*(void *)&(*a1)[v24] << 7) & 0x8080808080808080;
      if (v25)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v24 = (v15 + v24) & (unint64_t)v23;
          unint64_t v25 = *(void *)&v22[v24] & (~*(void *)&v22[v24] << 7) & 0x8080808080808080;
        }
        while (!v25);
      }
      unint64_t v16 = (v24 + (__clz(__rbit64(v25)) >> 3)) & (unint64_t)v23;
      v14 += v15;
      char v17 = v21 & 0x7F;
      v22[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      uint64_t v18 = (uint64_t)&a1[1][32 * v16];
      *(void *)uint64_t v18 = *(void *)v19;
      *(void *)(v18 + 8) = 0;
      *(void *)(v18 + 8) = *((void *)v19 + 1);
      *(_OWORD *)(v18 + 16) = *((_OWORD *)v19 + 1);
      *((void *)v19 + 1) = 0;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  int v26 = a1[4];
  if (v26) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>,operations_research::Domain>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int>>,std::allocator<std::pair<std::pair<gtl::IntType<operations_research::sat::DomainDeductions::Index_tag_,int>,int> const,operations_research::Domain>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 40) = -*(void *)(result + 16);
    uint64_t v38 = *(void *)(result + 32);
    if (!v38) {
      return result;
    }
LABEL_26:
    *(void *)(v38 + 32) = v15 >> 3;
    *(void *)(v38 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(void *)(result + 8) + 32 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(void *)(result + 8) + 32 * v14))))
          + *(unsigned int *)(*(void *)(result + 8) + 32 * v14 + 4);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          uint64_t v26 = v25 + 32 * v18;
          uint64_t v27 = v25 + 32 * v14;
          *(void *)(v26 + 8) = 0;
          long long v28 = *(_OWORD *)(v27 + 16);
          *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
          *(_OWORD *)(v26 + 16) = v28;
          *(void *)(v27 + 8) = 0;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          unint64_t v29 = (long long *)(v25 + 32 * v14);
          long long v31 = *v29;
          long long v30 = v29[1];
          uint64_t v32 = (long long *)(v25 + 32 * v18);
          *((void *)v29 + 1) = 0;
          long long v33 = v32[1];
          *unint64_t v29 = *v32;
          v29[1] = v33;
          *((void *)v32 + 1) = 0;
          unint64_t v34 = (_OWORD *)(*(void *)(result + 8) + 32 * v18);
          *unint64_t v34 = v31;
          v34[1] = v30;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v35 = v14 - (v14 >> 3);
  BOOL v36 = v14 == 7;
  uint64_t v37 = 6;
  if (!v36) {
    uint64_t v37 = v35;
  }
  *(void *)(result + 40) = v37 - *(void *)(result + 16);
  uint64_t v38 = *(void *)(result + 32);
  if (v38) {
    goto LABEL_26;
  }
  return result;
}

uint64_t std::vector<std::pair<int,operations_research::Domain>>::__push_back_slow_path<std::pair<int,operations_research::Domain>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v16 = (uint64_t)&v10[32 * v5];
  int8x16_t v11 = &v10[32 * v9];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)a2;
  *(void *)(v16 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>((uint64_t)(a1 + 2), v4, v4, v3, v3, v16, v16);
  int8x16_t v12 = (void **)*a1;
  uint64_t v13 = (void **)a1[1];
  *a1 = v14;
  a1[1] = v16 + 32;
  a1[2] = (uint64_t)v11;
  while (v13 != v12)
  {
    if (*(unsigned char *)(v13 - 3)) {
      operator delete(*(v13 - 2));
    }
    v13 -= 4;
  }
  if (v12) {
    operator delete(v12);
  }
  return v16 + 32;
}

void sub_23CD5BAD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<int,operations_research::Domain>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<int,operations_research::Domain>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(unsigned char *)(v2 - 24))
      {
        operator delete(*(void **)(v2 - 16));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v18 = a6;
  uint64_t v19 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    while (1)
    {
      while (1)
      {
        int v10 = *(_DWORD *)(v9 - 32);
        v9 -= 32;
        *(_DWORD *)(v7 - 32) = v10;
        *(void *)(v7 - 24) = 0;
        unint64_t v11 = *(void *)(v9 + 8);
        if (v11) {
          break;
        }
        *(void *)(v7 - 24) = v11;
        *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
        uint64_t v7 = v19 - 32;
        v19 -= 32;
        a3 = v9;
        if (v9 == a5) {
          return v18;
        }
      }
      int8x16_t v12 = *(long long **)(a3 - 16);
      unint64_t v13 = v11 >> 1;
      if (v11 >= 4) {
        break;
      }
      if (v11 >= 2)
      {
        uint64_t v14 = (_OWORD *)(v7 - 16);
        do
        {
LABEL_11:
          long long v16 = *v12++;
          *v14++ = v16;
          --v13;
        }
        while (v13);
        uint64_t v15 = *(void *)(v7 - 24);
        goto LABEL_13;
      }
      uint64_t v15 = 0;
LABEL_13:
      *(void *)(v7 - 24) = v15 + (v11 & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v7 = v19 - 32;
      v19 -= 32;
      a3 = v9;
      if (v9 == a5) {
        return v18;
      }
    }
    if (v11 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = operator new(16 * v13);
    *(void *)(v7 - 16) = v14;
    *(void *)(v7 - 8) = v13;
    *(void *)(v7 - 24) = 1;
    goto LABEL_11;
  }
  return a6;
}

void sub_23CD5BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(v9 - 24)) {
    operator delete(*(void **)(v9 - 16));
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,operations_research::Domain>>,std::reverse_iterator<std::pair<int,operations_research::Domain>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(unsigned char *)(v3 + 8)) {
        operator delete(*(void **)(v3 + 16));
      }
      v3 += 32;
    }
  }
  return a1;
}

uint64_t operations_research::sat::ProbeBooleanVariables(operations_research::sat *this, double a2, operations_research::sat::Model *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = this;
  uint64_t v6 = *(unsigned int *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)this)
                       + 16);
  uint64_t v7 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)v4);
  if ((int)v6 >= 1)
  {
    uint64_t v8 = v7;
    long long v33 = v4;
    unsigned int v34 = v3;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    int8x16_t v12 = 0;
    uint64_t v35 = v6;
    while (1)
    {
      uint64_t v13 = *(void *)(v8 + 568);
      if (2 * (int)v10 >= (int)((unint64_t)(*(void *)(v8 + 576) - v13) >> 2)
        || ((uint64_t v14 = *(unsigned int *)(v13 + (v10 << 33 >> 30)), v14 != -1) ? (v15 = 2 * v10 == v14) : (v15 = 1),
            v15))
      {
        if (v9 >= v11)
        {
          uint64_t v16 = (v9 - v12) >> 2;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if ((v11 - v12) >> 1 > v17) {
            unint64_t v17 = (v11 - v12) >> 1;
          }
          if ((unint64_t)(v11 - v12) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18)
          {
            if (v18 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v19 = operator new(4 * v18);
            unint64_t v20 = &v19[4 * v16];
            *(_DWORD *)unint64_t v20 = v10;
            uint64_t v21 = (uint64_t)(v20 + 4);
            if (v9 == v12) {
              goto LABEL_26;
            }
LABEL_23:
            unint64_t v22 = v9 - 4 - v12;
            if (v22 < 0xBC)
            {
              unint64_t v23 = v9;
              goto LABEL_25;
            }
            if (&v19[v9 - v12 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v9 - v12 - 4])
            {
              unint64_t v23 = v9;
              goto LABEL_25;
            }
            if (&v9[-(v22 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
            {
              unint64_t v23 = v9;
              goto LABEL_25;
            }
            if ((unint64_t)(v12 - v19) < 0x20)
            {
              unint64_t v23 = v9;
              goto LABEL_25;
            }
            uint64_t v25 = (v22 >> 2) + 1;
            uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v23 = &v9[-v26];
            v20 -= v26;
            uint64_t v27 = &v19[4 * v16 - 16];
            long long v28 = v9 - 16;
            uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *uint64_t v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 8;
            }
            while (v29);
            if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_25:
                int v24 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v20 - 1) = v24;
                v20 -= 4;
              }
              while (v23 != v12);
            }
          }
          else
          {
            uint64_t v19 = 0;
            unint64_t v20 = (char *)(4 * v16);
            *(_DWORD *)(4 * v16) = v10;
            uint64_t v21 = 4 * v16 + 4;
            if (v9 != v12) {
              goto LABEL_23;
            }
          }
LABEL_26:
          unint64_t v11 = &v19[4 * v18];
          if (v12) {
            operator delete(v12);
          }
          uint64_t v9 = (char *)v21;
          int8x16_t v12 = v20;
          uint64_t v6 = v35;
          goto LABEL_4;
        }
        *(_DWORD *)uint64_t v9 = v10;
        v9 += 4;
      }
LABEL_4:
      if (++v10 == v6)
      {
        unsigned int v3 = v34;
        uint64_t v4 = v33;
        goto LABEL_41;
      }
    }
  }
  uint64_t v9 = 0;
  int8x16_t v12 = 0;
LABEL_41:
  uint64_t v31 = operations_research::sat::ProbeBooleanVariables((BOOL)v12, (v9 - v12) >> 2, (uint64_t)v4, v3, a2);
  if (v12) {
    operator delete(v12);
  }
  return v31;
}

void sub_23CD5BFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::ProbeBooleanVariables(BOOL inited, uint64_t a2, uint64_t a3, unsigned int a4, double a5)
{
  uint64_t v8 = (_DWORD *)inited;
  uint64_t v246 = *MEMORY[0x263EF8340];
  if (*operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::vlocal__ < 1)
  {
    int v10 = 0;
  }
  else if (operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::vlocal__ == &google::kLogSiteUninitialized)
  {
    inited = google::InitVLOG3__((google *)&operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/probing.cc", (const char *)1);
    int v10 = inited;
  }
  else
  {
    int v10 = 1;
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
  uint64_t v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a3);
  operations_research::sat::SatSolver::SetAssumptionLevel(v11, 0);
  uint64_t v12 = 0;
  if (!operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel((operations_research::sat::SatSolver *)v11)) {
    return v12;
  }
  unint64_t v204 = __PAIR64__(a4, v10);
  uint64_t v13 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a3);
  uint64_t v14 = *(void *)(v11 + 208);
  int v15 = *(_DWORD *)(v14 + 12);
  double v16 = *(double *)(v13 + 112);
  v241 = 0;
  v242 = 0;
  v243 = 0;
  uint64_t v17 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(a3);
  uint64_t v207 = v17;
  int v217 = *(_DWORD *)(v17 + 32);
  uint64_t v19 = (void *)(a3 + 32);
  unint64_t v18 = *(void **)(a3 + 32);
  int v202 = v15;
  if (!v18) {
    goto LABEL_20;
  }
  unint64_t v20 = (void *)(a3 + 32);
  do
  {
    unint64_t v21 = v18[4];
    BOOL v22 = v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
    if (v21 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      unint64_t v23 = v18;
    }
    else {
      unint64_t v23 = v18 + 1;
    }
    if (v22) {
      unint64_t v20 = v18;
    }
    unint64_t v18 = (void *)*v23;
  }
  while (*v23);
  if (v20 != v19
    && v20[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d
    && (v215 = (void *)v20[5]) != 0)
  {
    uint64_t v17 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ImpliedBounds>(a3);
    uint64_t v208 = v17;
    char v214 = 0;
  }
  else
  {
LABEL_20:
    v215 = 0;
    uint64_t v208 = 0;
    char v214 = 1;
  }
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v236 = 0;
  v237 = 0;
  v235 = 0;
  uint64_t v24 = *(unsigned int *)(v11 + 16);
  if ((int)v24 <= 0)
  {
    int v225 = 0;
    v227 = 0;
    v228 = 0;
    v226 = 0;
  }
  else
  {
    int v225 = 2 * v24;
    size_t v25 = 8 * ((unint64_t)(2 * v24 + 63) >> 6);
    v226 = operator new(v25);
    v228 = (char *)v226 + v25;
    bzero(v226, v25);
    v227 = (char *)v226 + v25;
  }
  v229 = &v225;
  uint64_t v231 = 0;
  v232 = 0;
  uint64_t v230 = 0xFFFFFFFFLL;
  v233 = 0;
  v234 = 0;
  uint64_t v26 = (void *)*v19;
  if (!*v19) {
    goto LABEL_35;
  }
  uint64_t v27 = v19;
  do
  {
    unint64_t v28 = v26[4];
    BOOL v29 = v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
      long long v30 = v26;
    }
    else {
      long long v30 = v26 + 1;
    }
    if (v29) {
      uint64_t v27 = v26;
    }
    uint64_t v26 = (void *)*v30;
  }
  while (*v30);
  if (v27 == v19 || v27[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
  {
LABEL_35:
    uint64_t v31 = 0;
    if (a2) {
      goto LABEL_36;
    }
LABEL_271:
    HIDWORD(v210) = 0;
    int v209 = 0;
    uint64_t v32 = 0;
LABEL_272:
    int v182 = 1;
LABEL_273:
    if (v204)
    {
      int v183 = *(_DWORD *)(*(void *)(v11 + 208) + 12);
      google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 239);
      v184 = (void *)google::LogMessage::stream((google::LogMessage *)v224);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"Probing deterministic_time: ", 28);
      v185 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)" (limit: ", 9);
      v186 = (void *)std::ostream::operator<<();
      v187 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)") wall_time: ", 13);
      absl::lts_2020_02_25::GetCurrentTimeNanos(v187);
      v188 = (void *)std::ostream::operator<<();
      v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)" (", 2);
      if (v182) {
        v190 = "";
      }
      else {
        v190 = "Aborted ";
      }
      if (v182) {
        uint64_t v191 = 0;
      }
      else {
        uint64_t v191 = 8;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)v190, v191);
      v192 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"/", 1);
      v193 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)")", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)v224);
      if (v183 - v202 >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 244);
        v194 = (void *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"Probing new fixed Boolean: ", 27);
        v195 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)" (", 2);
        v196 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"/", 1);
        v197 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)")", 1);
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
      if (v209 >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 247);
        v198 = (void *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"Probing new integer holes: ", 27);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
      if (SHIDWORD(v210) >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 249);
        v199 = (void *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Probing new integer bounds: ", 28);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
      if (v32 >= 1)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v224, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 251);
        v200 = (void *)google::LogMessage::stream((google::LogMessage *)v224);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"Probing new binary clause: ", 27);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v224);
      }
    }
    uint64_t v12 = 1;
    v180 = (char *)v232;
    if (!v232) {
      goto LABEL_261;
    }
    goto LABEL_260;
  }
  uint64_t v31 = v27[5];
  if (!a2) {
    goto LABEL_271;
  }
LABEL_36:
  uint64_t v32 = 0;
  int v209 = 0;
  uint64_t v210 = 0;
  v203 = &v8[a2];
  v205 = (int *)(v13 + 32);
  uint64_t v211 = v14;
  uint64_t v212 = v13;
  v213 = (operations_research::sat::SatSolver *)v11;
  while (1)
  {
    int v33 = 2 * *v8;
    uint64_t v34 = *(void *)(v207 + 568);
    if (v33 < (int)((unint64_t)(*(void *)(v207 + 576) - v34) >> 2))
    {
      int v35 = *(_DWORD *)(v34 + 4 * v33);
      if (v35 != -1 && v35 != v33) {
        goto LABEL_257;
      }
    }
    uint64_t v37 = *(unsigned __int8 **)(v13 + 120);
    if (v37 && (unsigned __int8 v38 = atomic_load(v37), (v38 & 1) != 0)
      || fmax(*(double *)(v13 + 104) - *(double *)(v13 + 112), 0.0) <= 0.0)
    {
LABEL_290:
      int v182 = 0;
      goto LABEL_273;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v17);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = CurrentTimeNanos;
    if (*(void *)(v13 + 24) <= CurrentTimeNanos - *(void *)(v13 + 8)) {
      uint64_t v41 = CurrentTimeNanos - *(void *)(v13 + 8);
    }
    else {
      uint64_t v41 = *(void *)(v13 + 24);
    }
    operations_research::RunningMax<long long>::Add(v205, v41);
    *(void *)(v13 + 8) = v40;
    if (*(void *)(*(void *)(v13 + 40) + 8 * *(int *)(v13 + 68)) + v40 >= *(void *)(v13 + 16))
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_291;
      }
      double v43 = *(double *)(v13 + 96);
      if (*(unsigned char *)(v13 + 72))
      {
        double v44 = v43
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v42) - *(void *)(v13 + 80) + *(void *)(v13 + 88))
            * -0.000000001;
        if (v44 <= 0.0001) {
          goto LABEL_291;
        }
      }
      else
      {
        double v44 = v43 + (double)*(uint64_t *)(v13 + 88) * -0.000000001;
        if (v44 <= 0.0001)
        {
LABEL_291:
          int v182 = 0;
          *(void *)(v13 + 16) = 0;
          goto LABEL_273;
        }
      }
      *(void *)(v13 + 16) = *(void *)(v13 + 8) + (uint64_t)(v44 * 1000000000.0);
    }
    if (*(double *)(v13 + 112) > v16 + a5) {
      goto LABEL_290;
    }
    v239 = v238;
    int v45 = (char *)v232;
    unint64_t v46 = (int *)v233;
    if (v232 != v233)
    {
      int v47 = (char *)v226;
      unint64_t v48 = v233 - (unsigned char *)v232 - 4;
      uint64_t v49 = (int *)v232;
      if (v48 < 4) {
        goto LABEL_303;
      }
      uint64_t v50 = (v48 >> 2) + 1;
      uint64_t v49 = (int *)((char *)v232 + 4 * (v50 & 0x7FFFFFFFFFFFFFFELL));
      unint64_t v51 = (int *)((char *)v232 + 4);
      uint64_t v52 = v50 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        unint64_t v53 = ((unint64_t)*v51 >> 3) & 0x1FFFFFFFFFFFFFF8;
        *(void *)&v47[((unint64_t)*(v51 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        *(void *)&v47[v53] = 0;
        v51 += 2;
        v52 -= 2;
      }
      while (v52);
      if (v50 != (v50 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_303:
        do
        {
          unint64_t v54 = *v49++;
          *(void *)&v47[(v54 >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
        }
        while (v49 != v46);
      }
    }
    uint64_t v216 = v32;
    uint64_t v55 = 0;
    LODWORD(v210) = v210 + 1;
    v233 = v45;
    LODWORD(v244) = v33;
    HIDWORD(v244) = v33 | 1;
    v201 = v8;
    int v56 = v217;
    do
    {
      unint64_t v57 = *((int *)&v244 + v55);
      if (((*(void *)(*(void *)(v14 + 24) + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v57 & 0x3E)) & 3) == 0)
      {
        *(_DWORD *)v224 = *(_DWORD *)(v11 + 304);
        LODWORD(v222[0]) = 0;
        if (*(_DWORD *)v224) {
          google::MakeCheckOpString<int,int>((int)v224, (int)v222, "sat_solver->CurrentDecisionLevel() == 0");
        }
        uint64_t v58 = v57;
        uint64_t v59 = *(int *)(v31 + 12);
        operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(v11, v58);
        double v60 = operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)v11);
        *(double *)(v13 + 112) = *(double *)(v13 + 112) + v60 - *(double *)(v11 + 1304);
        *(double *)(v11 + 1304) = v60;
        if (*(unsigned char *)(v11 + 496)) {
          goto LABEL_259;
        }
        if (*(_DWORD *)(v11 + 304))
        {
          if ((v214 & 1) == 0)
          {
            operations_research::sat::ImpliedBounds::ProcessIntegerTrail(v208, v58);
            operations_research::sat::IntegerTrail::AppendNewBounds(v215, (void **)&v238);
          }
          uint64_t v61 = v59 + 1;
          if ((int)v59 + 1 < *(_DWORD *)(v31 + 12))
          {
            char v218 = v58;
            uint64_t v219 = v58 ^ 1;
            do
            {
              unint64_t v63 = *(int *)(*(void *)(v31 + 72) + 4 * v61);
              uint64_t v64 = *((void *)v226 + (v63 >> 6));
              uint64_t v65 = v64 & (1 << v63);
              if (v58)
              {
                if (!v65) {
                  goto LABEL_126;
                }
                unint64_t v67 = v236;
                if (v236 < v237)
                {
                  *(_DWORD *)v236 = v63;
                  uint64_t v68 = (uint64_t)(v67 + 4);
LABEL_115:
                  v236 = (char *)v68;
                  goto LABEL_126;
                }
                uint64_t v69 = v235;
                uint64_t v70 = (v236 - v235) >> 2;
                unint64_t v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 62) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v72 = v237 - v235;
                if ((v237 - v235) >> 1 > v71) {
                  unint64_t v71 = v72 >> 1;
                }
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v73)
                {
                  if (v73 >> 62) {
                    goto LABEL_295;
                  }
                  uint64_t v74 = operator new(4 * v73);
                  uint64_t v75 = &v74[4 * v70];
                  *(_DWORD *)uint64_t v75 = v63;
                  uint64_t v68 = (uint64_t)(v75 + 4);
                  if (v67 != v69)
                  {
LABEL_92:
                    unint64_t v76 = v67 - 4 - v69;
                    if (v76 < 0x2C)
                    {
                      int v56 = v217;
                      goto LABEL_111;
                    }
                    int v56 = v217;
                    if ((unint64_t)(v69 - v74) < 0x20) {
                      goto LABEL_304;
                    }
                    uint64_t v87 = (v76 >> 2) + 1;
                    uint64_t v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v89 = &v67[-v88];
                    v75 -= v88;
                    uint64_t v90 = &v74[4 * v70 - 16];
                    uint64_t v91 = v67 - 16;
                    uint64_t v92 = v87 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v93 = *(_OWORD *)v91;
                      *(v90 - 1) = *((_OWORD *)v91 - 1);
                      *uint64_t v90 = v93;
                      v90 -= 2;
                      v91 -= 32;
                      v92 -= 8;
                    }
                    while (v92);
                    unint64_t v67 = v89;
                    if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_304:
                      do
                      {
LABEL_111:
                        int v94 = *((_DWORD *)v67 - 1);
                        v67 -= 4;
                        *((_DWORD *)v75 - 1) = v94;
                        v75 -= 4;
                      }
                      while (v67 != v69);
                    }
LABEL_112:
                    v235 = v75;
                    v237 = &v74[4 * v73];
                    if (v69) {
                      operator delete(v69);
                    }
                    LOBYTE(v58) = v218;
                    goto LABEL_115;
                  }
                }
                else
                {
                  uint64_t v74 = 0;
                  uint64_t v75 = (char *)(4 * v70);
                  *(_DWORD *)(4 * v70) = v63;
                  uint64_t v68 = 4 * v70 + 4;
                  if (v67 != v69) {
                    goto LABEL_92;
                  }
                }
                int v56 = v217;
                goto LABEL_112;
              }
              if (v65) {
                goto LABEL_126;
              }
              *((void *)v226 + (v63 >> 6)) = v64 | (1 << v63);
              uint64_t v66 = v233;
              if (v233 < v234)
              {
                *(_DWORD *)v233 = v63;
                v233 = v66 + 4;
                goto LABEL_126;
              }
              uint64_t v77 = (char *)v232;
              int64_t v78 = v233 - (unsigned char *)v232;
              uint64_t v79 = (v233 - (unsigned char *)v232) >> 2;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v81 = v234 - (unsigned char *)v232;
              if ((v234 - (unsigned char *)v232) >> 1 > v80) {
                unint64_t v80 = v81 >> 1;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                if (v82 >> 62) {
LABEL_295:
                }
                  std::__throw_bad_array_new_length[abi:ne180100]();
                uint64_t v83 = (char *)operator new(4 * v82);
                BOOL v84 = &v83[4 * v79];
                *(_DWORD *)BOOL v84 = v63;
                uint64_t v85 = (uint64_t)(v84 + 4);
                if (v66 == v77)
                {
LABEL_117:
                  int v56 = v217;
                  goto LABEL_123;
                }
              }
              else
              {
                uint64_t v83 = 0;
                BOOL v84 = (char *)(4 * v79);
                *(_DWORD *)(4 * v79) = v63;
                uint64_t v85 = 4 * v79 + 4;
                if (v66 == v77) {
                  goto LABEL_117;
                }
              }
              unint64_t v86 = v66 - 4 - v77;
              if (v86 >= 0x2C)
              {
                unint64_t v95 = v66 - &v83[v78];
                int v56 = v217;
                if (v95 >= 0x20)
                {
                  uint64_t v96 = (v86 >> 2) + 1;
                  uint64_t v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                  char v98 = &v66[-v97];
                  v84 -= v97;
                  uint64_t v99 = &v83[4 * v79 - 16];
                  v100 = v66 - 16;
                  uint64_t v101 = v96 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v102 = *(_OWORD *)v100;
                    *((_OWORD *)v99 - 1) = *((_OWORD *)v100 - 1);
                    *(_OWORD *)uint64_t v99 = v102;
                    v99 -= 32;
                    v100 -= 32;
                    v101 -= 8;
                  }
                  while (v101);
                  uint64_t v66 = v98;
                  if (v96 == (v96 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_123;
                  }
                }
              }
              else
              {
                int v56 = v217;
              }
              do
              {
                int v103 = *((_DWORD *)v66 - 1);
                v66 -= 4;
                *((_DWORD *)v84 - 1) = v103;
                v84 -= 4;
              }
              while (v66 != v77);
LABEL_123:
              v232 = v84;
              v233 = (char *)v85;
              v234 = &v83[4 * v82];
              if (v77) {
                operator delete(v77);
              }
              LOBYTE(v58) = v218;
              v233 = (char *)v85;
LABEL_126:
              uint64_t v104 = (uint64_t)(int)v63 >> 1;
              uint64_t v105 = *(void *)(v31 + 120);
              unsigned int v106 = *(_DWORD *)(v105 + 8 * ((int)v63 >> 1));
              if (v106 >> 28 == 3)
              {
                uint64_t v104 = *(int *)(*(void *)(v31 + 152) + 4 * v104);
                int v107 = *(_DWORD *)(v105 + 8 * v104) >> 28;
                if (!v107) {
                  goto LABEL_131;
                }
              }
              else
              {
                int v107 = v106 >> 28;
                if (!v107)
                {
LABEL_131:
                  if (*(_DWORD *)(*(void *)(v31 + 248) + 4 * v104) == v56) {
                    goto LABEL_75;
                  }
                  goto LABEL_132;
                }
              }
              if (v107 == v56) {
                goto LABEL_75;
              }
LABEL_132:
              uint64_t v108 = v63;
              unint64_t v109 = v242;
              if (v242 < v243)
              {
                unint64_t *v242 = v219 | ((unint64_t)v63 << 32);
                int8x16_t v62 = v109 + 1;
                goto LABEL_74;
              }
              uint64_t v110 = v241;
              uint64_t v111 = ((char *)v242 - (char *)v241) >> 3;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v113 = (char *)v243 - (char *)v241;
              if (((char *)v243 - (char *)v241) >> 2 > v112) {
                unint64_t v112 = v113 >> 2;
              }
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                if (v114 >> 61) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v115 = operator new(8 * v114);
              }
              else
              {
                unint64_t v115 = 0;
              }
              v116 = (uint64_t *)&v115[8 * v111];
              uint64_t *v116 = v219 | (v108 << 32);
              int8x16_t v62 = (unint64_t *)(v116 + 1);
              if (v109 == (unint64_t *)v110)
              {
                LOBYTE(v58) = v218;
                v241 = (uint64_t *)&v115[8 * v111];
                v243 = (unint64_t *)&v115[8 * v114];
                if (!v109) {
                  goto LABEL_74;
                }
LABEL_154:
                operator delete(v109);
                goto LABEL_74;
              }
              unint64_t v117 = (char *)(v109 - 1) - (char *)v110;
              if (v117 < 0x58)
              {
                LOBYTE(v58) = v218;
                do
                {
LABEL_152:
                  uint64_t v125 = *--v109;
                  *--v116 = v125;
                }
                while (v109 != (unint64_t *)v110);
                goto LABEL_153;
              }
              LOBYTE(v58) = v218;
              if ((unint64_t)((char *)v110 - v115) < 0x20) {
                goto LABEL_152;
              }
              uint64_t v118 = (v117 >> 3) + 1;
              uint64_t v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
              v120 = (char *)&v109[v119 / 0xFFFFFFFFFFFFFFF8];
              v116 = (uint64_t *)((char *)v116 - v119);
              unint64_t v121 = &v115[8 * v111 - 16];
              v122 = (char *)(v109 - 2);
              uint64_t v123 = v118 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v124 = *(_OWORD *)v122;
                *(v121 - 1) = *((_OWORD *)v122 - 1);
                *unint64_t v121 = v124;
                v121 -= 2;
                v122 -= 32;
                v123 -= 4;
              }
              while (v123);
              unint64_t v109 = (unint64_t *)v120;
              if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_152;
              }
LABEL_153:
              unint64_t v109 = (unint64_t *)v241;
              v241 = v116;
              v243 = (unint64_t *)&v115[8 * v114];
              if (v109) {
                goto LABEL_154;
              }
LABEL_74:
              v242 = v62;
LABEL_75:
              ++v61;
            }
            while (v61 < *(int *)(v31 + 12));
          }
          uint64_t v11 = (uint64_t)v213;
          uint64_t v14 = v211;
          uint64_t v13 = v212;
          if (!operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(v213)) {
            goto LABEL_259;
          }
          v126 = v235;
          v127 = (int *)v236;
          uint64_t v128 = (int *)v235;
          if (v235 != v236)
          {
            do
              operations_research::sat::SatSolver::AddUnitClause((uint64_t)v213, *v128++);
            while (v128 != v127);
          }
          v236 = v126;
          if (!operations_research::sat::SatSolver::FinishPropagation(v213)) {
            goto LABEL_259;
          }
          BOOL v129 = (unint64_t *)v241;
          v130 = (int *)v242;
          v131 = (int *)v241;
          uint64_t v132 = (char *)v242 - (char *)v241;
          if (v242 != (unint64_t *)v241)
          {
            do
            {
              operations_research::sat::SatSolver::AddBinaryClause((uint64_t)v213, *v131, v131[1]);
              v131 += 2;
            }
            while (v131 != v130);
          }
          v242 = v129;
          int v56 = v217;
          if (!operations_research::sat::SatSolver::FinishPropagation(v213)) {
            goto LABEL_259;
          }
          v216 += v132 >> 3;
        }
      }
      ++v55;
    }
    while (v55 != 2);
    unint64_t v133 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v239 - v238) >> 2));
    if (v239 == v238) {
      uint64_t v134 = 0;
    }
    else {
      uint64_t v134 = v133;
    }
    std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *,false>((uint64_t)v238, (unint64_t)v239, v134, 1);
    v135 = v239;
    if (v239 >= v240)
    {
      v137 = v238;
      unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * ((v239 - v238) >> 2);
      unint64_t v139 = v138 + 1;
      if (v138 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((v240 - v238) >> 2) > v139) {
        unint64_t v139 = 0x5555555555555556 * ((v240 - v238) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v240 - v238) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v140 = 0x1555555555555555;
      }
      else {
        unint64_t v140 = v139;
      }
      if (v140)
      {
        if (v140 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v141 = (char *)operator new(12 * v140);
      }
      else
      {
        unint64_t v141 = 0;
      }
      v142 = &v141[12 * v138];
      *(_DWORD *)v142 = -1;
      *(void *)(v142 + 4) = 0;
      unint64_t v143 = v142;
      if (v135 != v137)
      {
        do
        {
          uint64_t v144 = *(void *)(v135 - 12);
          v135 -= 12;
          int v145 = *((_DWORD *)v135 + 2);
          *(void *)(v143 - 12) = v144;
          v143 -= 12;
          *((_DWORD *)v143 + 2) = v145;
        }
        while (v135 != v137);
        v135 = v238;
      }
      uint64_t v136 = v142 + 12;
      v238 = v143;
      v239 = v142 + 12;
      v240 = &v141[12 * v140];
      if (v135) {
        operator delete(v135);
      }
    }
    else
    {
      *(_DWORD *)v239 = -1;
      *(void *)(v135 + 4) = 0;
      uint64_t v136 = v135 + 12;
    }
    v239 = v136;
    long long v146 = v238;
    if (v136 != v238)
    {
      unint64_t v147 = 0;
      uint64_t v148 = 0x7FFFFFFFFFFFFFFELL;
      unsigned int v149 = -1;
      int64_t v150 = 0x8000000000000002;
      uint64_t v151 = (uint64_t)v215;
      while (1)
      {
        int v152 = *(_DWORD *)&v146[12 * v147];
        if (v147)
        {
          if ((v152 & 0xFFFFFFFE) != v149) {
            break;
          }
        }
LABEL_238:
        long long v146 = v238;
        int64_t v176 = *(void *)&v238[12 * v147 + 4];
        if (v148 >= -v176) {
          uint64_t v177 = -v176;
        }
        else {
          uint64_t v177 = v148;
        }
        if (v150 <= v176) {
          int64_t v178 = *(void *)&v238[12 * v147 + 4];
        }
        else {
          int64_t v178 = v150;
        }
        if (v152) {
          uint64_t v148 = v177;
        }
        else {
          int64_t v150 = v178;
        }
        if (v147 && *(_DWORD *)&v238[12 * v147 - 12] == v152)
        {
          if (v176 >= *(void *)&v238[12 * v147 - 8]) {
            int64_t v176 = *(void *)&v238[12 * v147 - 8];
          }
          if (v176 > *(void *)(*(void *)(v151 + 40) + 12 * v152))
          {
            *(_DWORD *)v224 = v152;
            *(void *)&v224[4] = v176;
            unint64_t v179 = v206 & 0xFFFFFFFF00000000 | HIDWORD(v176);
            if (!operations_research::sat::IntegerTrail::Enqueue(v151, *(uint64_t *)v224, SHIDWORD(v176), 0, 0, 0, 0))goto LABEL_259; {
            unint64_t v206 = v179;
            }
            ++HIDWORD(v210);
            long long v146 = v238;
          }
        }
        ++v147;
        unsigned int v149 = v152 & 0xFFFFFFFE;
        if (0xAAAAAAAAAAAAAAABLL * ((v239 - v146) >> 2) <= v147) {
          goto LABEL_256;
        }
      }
      uint64_t v153 = v148 + 1;
      if (v153 >= v150)
      {
LABEL_237:
        uint64_t v148 = 0x7FFFFFFFFFFFFFFELL;
        int64_t v150 = 0x8000000000000002;
        goto LABEL_238;
      }
      uint64_t v154 = v151;
      int v155 = v149;
      uint64_t v156 = operations_research::sat::IntegerTrail::InitialVariableDomain(v154, v149);
      *(void *)v224 = 0;
      unint64_t v157 = *(void *)v156;
      if ((*(void *)v156 & 1) == 0)
      {
        *(void *)v224 = *(void *)v156;
        *(_OWORD *)&v224[8] = *(_OWORD *)(v156 + 8);
        goto LABEL_200;
      }
      v158 = *(long long **)(v156 + 8);
      unint64_t v159 = v157 >> 1;
      if (v157 < 4)
      {
        v160 = &v224[8];
        if (v157 >= 2) {
          goto LABEL_197;
        }
        uint64_t v161 = 0;
      }
      else
      {
        if (v157 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v160 = operator new(16 * v159);
        *(void *)&v224[8] = v160;
        *(void *)&v224[16] = v157 >> 1;
        *(void *)v224 = 1;
        do
        {
LABEL_197:
          long long v162 = *v158++;
          *v160++ = v162;
          --v159;
        }
        while (v159);
        uint64_t v161 = *(void *)v224;
      }
      *(void *)v224 = v161 + (v157 & 0xFFFFFFFFFFFFFFFELL);
LABEL_200:
      operations_research::Domain::Domain(v222, v153, v150 - 1);
      operations_research::Domain::Complement((operations_research::Domain *)v222, v223);
      operations_research::Domain::IntersectionWith(v224, (const operations_research::Domain *)v223, &v244);
      if (v223[0]) {
        operator delete((void *)v223[1]);
      }
      if ((uint64_t)v222[0]) {
        operator delete(v222[1]);
      }
      unint64_t v163 = v244;
      v164 = (long long *)v245;
      v165 = &v245;
      if (v244) {
        v165 = (long long *)v245;
      }
      unint64_t v166 = v244 >> 1;
      size_t v167 = v244 >> 1;
      if (v167 == *(void *)v224 >> 1)
      {
        if (v244 >= 2)
        {
          v168 = &v165[v167];
          v169 = &v224[8];
          if (v224[0]) {
            v169 = *(void **)&v224[8];
          }
          while (*(void *)v165 == *v169 && *((void *)v165 + 1) == v169[1])
          {
            ++v165;
            v169 += 2;
            if (v165 == v168) {
              goto LABEL_216;
            }
          }
          goto LABEL_218;
        }
LABEL_216:
        uint64_t v151 = (uint64_t)v215;
        char v171 = 1;
        if ((v244 & 1) == 0)
        {
LABEL_233:
          if (v224[0])
          {
            operator delete(*(void **)&v224[8]);
            if ((v171 & 1) == 0) {
              break;
            }
          }
          else if ((v171 & 1) == 0)
          {
            break;
          }
          goto LABEL_237;
        }
LABEL_232:
        operator delete((void *)v245);
        goto LABEL_233;
      }
LABEL_218:
      unint64_t v220 = 0;
      if ((v244 & 1) == 0)
      {
        unint64_t v220 = v244;
        long long v221 = v245;
        goto LABEL_228;
      }
      if (v244 < 4)
      {
        v172 = &v221;
        if (v244 >= 2) {
          goto LABEL_225;
        }
        unint64_t v173 = 0;
      }
      else
      {
        if (v244 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v172 = (long long *)operator new(v167 * 16);
        *(void *)&long long v221 = v172;
        *((void *)&v221 + 1) = v163 >> 1;
        unint64_t v220 = 1;
        do
        {
LABEL_225:
          long long v174 = *v164++;
          *v172++ = v174;
          --v166;
        }
        while (v166);
        unint64_t v173 = v220;
      }
      unint64_t v220 = v173 + (v163 & 0xFFFFFFFFFFFFFFFELL);
LABEL_228:
      char updated = operations_research::sat::IntegerTrail::UpdateInitialDomain((uint64_t)v215, v155, (operations_research::Domain *)&v220);
      if (v220) {
        operator delete((void *)v221);
      }
      ++v209;
      uint64_t v151 = (uint64_t)v215;
      if (updated)
      {
        char v171 = 1;
        if ((v244 & 1) == 0) {
          goto LABEL_233;
        }
      }
      else
      {
        char v171 = 0;
        if ((v244 & 1) == 0) {
          goto LABEL_233;
        }
      }
      goto LABEL_232;
    }
LABEL_256:
    uint64_t v11 = (uint64_t)v213;
    uint64_t v17 = operations_research::sat::SatSolver::FinishPropagation(v213);
    uint64_t v32 = v216;
    uint64_t v8 = v201;
    uint64_t v14 = v211;
    uint64_t v13 = v212;
    if ((v17 & 1) == 0) {
      break;
    }
LABEL_257:
    if (++v8 == v203) {
      goto LABEL_272;
    }
  }
LABEL_259:
  uint64_t v12 = 0;
  v180 = (char *)v232;
  if (!v232) {
    goto LABEL_261;
  }
LABEL_260:
  v233 = v180;
  operator delete(v180);
LABEL_261:
  if (v226)
  {
    v227 = (char *)v226;
    operator delete(v226);
  }
  if (v235) {
    operator delete(v235);
  }
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  if (v241) {
    operator delete(v241);
  }
  return v12;
}

void sub_23CD5D360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

void sub_23CD5D368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,void *a42,uint64_t a43,char a44,void *a45,uint64_t a46,uint64_t a47)
{
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(&a47);
  unint64_t v51 = *(void **)(v47 - 256);
  if (v51)
  {
    *(void *)(v47 - 248) = v51;
    operator delete(v51);
    unint64_t v48 = *(void **)(v47 - 232);
    if (v48)
    {
LABEL_7:
      *(void *)(v47 - 224) = v48;
      operator delete(v48);
      uint64_t v49 = *(void **)(v47 - 208);
      if (v49)
      {
LABEL_8:
        *(void *)(v47 - 200) = v49;
        operator delete(v49);
        _Unwind_Resume(a1);
      }
LABEL_4:
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v48 = *(void **)(v47 - 232);
    if (v48) {
      goto LABEL_7;
    }
  }
  uint64_t v49 = *(void **)(v47 - 208);
  if (v49) {
    goto LABEL_8;
  }
  goto LABEL_4;
}

uint64_t operations_research::sat::LookForTrivialSatSolution(BOOL this, double a2, operations_research::sat::Model *a3)
{
  int v3 = (int)a3;
  uint64_t v4 = (operations_research::sat *)this;
  if (*operations_research::sat::LookForTrivialSatSolution(double,operations_research::sat::Model *,BOOL)::vlocal__[0] < 1)
  {
    int v6 = 0;
  }
  else if (operations_research::sat::LookForTrivialSatSolution(double,operations_research::sat::Model *,BOOL)::vlocal__[0] == &google::kLogSiteUninitialized)
  {
    this = google::InitVLOG3__((google *)operations_research::sat::LookForTrivialSatSolution(double,operations_research::sat::Model *,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/probing.cc", (const char *)1);
    int v6 = this;
  }
  else
  {
    int v6 = 1;
  }
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  uint64_t v7 = (operations_research::sat::SatParameters **)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>((uint64_t)v4);
  operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t)v7, 0);
  uint64_t v8 = 0;
  if (operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel((operations_research::sat::SatSolver *)v7))
  {
    uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)v4);
    int v10 = (const operations_research::sat::SatParameters *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)v4);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v48, v10);
    operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v42, (const operations_research::sat::SatParameters *)v48);
    char v44 = 0;
    *(int8x8_t *)double v43 = vorr_s8(*(int8x8_t *)v43, (int8x8_t)0x4000000000000400);
    uint64_t v46 = 1;
    *(_DWORD *)&v43[8] |= 0x8000u;
    double v47 = a2;
    uint64_t v11 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>((uint64_t)v4);
    uint64_t v12 = v11;
    int v13 = 0;
    int v14 = v6 | v3;
    __s = " (Aborted)";
    double v15 = 0.0;
    do
    {
      double v16 = *(unsigned __int8 **)(v9 + 120);
      if (v16)
      {
        unsigned __int8 v17 = atomic_load(v16);
        if (v17) {
          goto LABEL_26;
        }
      }
      if (fmax(*(double *)(v9 + 104) - *(double *)(v9 + 112), 0.0) <= 0.0) {
        goto LABEL_26;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v11);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = CurrentTimeNanos;
      if (*(void *)(v9 + 24) <= CurrentTimeNanos - *(void *)(v9 + 8)) {
        uint64_t v20 = CurrentTimeNanos - *(void *)(v9 + 8);
      }
      else {
        uint64_t v20 = *(void *)(v9 + 24);
      }
      operations_research::RunningMax<long long>::Add((int *)(v9 + 32), v20);
      *(void *)(v9 + 8) = v19;
      if (*(void *)(*(void *)(v9 + 40) + 8 * *(int *)(v9 + 68)) + v19 >= *(void *)(v9 + 16))
      {
        if (!FLAGS_time_limit_use_usertime) {
          goto LABEL_18;
        }
        double v22 = *(double *)(v9 + 96);
        if (*(unsigned char *)(v9 + 72))
        {
          double v23 = v22
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v21) - *(void *)(v9 + 80) + *(void *)(v9 + 88))
              * -0.000000001;
          if (v23 <= 0.0001) {
            goto LABEL_18;
          }
        }
        else
        {
          double v23 = v22 + (double)*(uint64_t *)(v9 + 88) * -0.000000001;
          if (v23 <= 0.0001)
          {
LABEL_18:
            *(void *)(v9 + 16) = 0;
            goto LABEL_26;
          }
        }
        *(void *)(v9 + 16) = *(void *)(v9 + 8) + (uint64_t)(v23 * 1000000000.0);
      }
      if (v15 > a2) {
        goto LABEL_26;
      }
      operations_research::sat::SatSolver::SetParameters(v7, (const operations_research::sat::SatParameters *)v42);
      operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(v7[30]);
      int v24 = operations_research::sat::SatSolver::SolveWithTimeLimit((operations_research::sat::SatSolver *)v7, (operations_research::TimeLimit *)v9);
      double v25 = *(double *)(v9 + 112);
      double v15 = v15 + v25;
      uint64_t v8 = v24 == 2;
      if (v24 == 2)
      {
        if (v14)
        {
          google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 299);
          uint64_t v37 = (void *)google::LogMessage::stream((google::LogMessage *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Trivial exploration found feasible solution!", 44);
          goto LABEL_35;
        }
LABEL_37:
        *(double *)(v9 + 112) = v15 + v25;
        goto LABEL_38;
      }
      if ((operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel((operations_research::sat::SatSolver *)v7) & 1) == 0)
      {
        if (v14)
        {
          google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 305);
          unsigned __int8 v38 = (void *)google::LogMessage::stream((google::LogMessage *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"UNSAT during trivial exploration heuristic.", 43);
LABEL_35:
          google::LogMessage::~LogMessage((google::LogMessage *)v41);
        }
        double v25 = *(double *)(v9 + 112);
        goto LABEL_37;
      }
      operations_research::sat::RandomizeDecisionHeuristic<operations_research::sat::ModelRandomGenerator>(v12, (uint64_t)v42);
      int v45 = v13;
      *(int8x8_t *)&v43[4] = vorr_s8(*(int8x8_t *)&v43[4], (int8x8_t)0x800008000000);
      double v47 = a2 - v15;
      ++v13;
    }
    while (v13 != 1000);
    __s = "";
LABEL_26:
    operations_research::sat::SatSolver::SetParameters(v7, (const operations_research::sat::SatParameters *)v48);
    operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(v7[30]);
    *(double *)(v9 + 112) = v15 + *(double *)(v9 + 112);
    if (operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel((operations_research::sat::SatSolver *)v7))
    {
      if (v14)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v41, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 328);
        uint64_t v26 = (void *)google::LogMessage::stream((google::LogMessage *)v41);
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Random exploration.", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" num_fixed: +", 13);
        unint64_t v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" (", 2);
        BOOL v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/", 1);
        long long v30 = (void *)std::ostream::operator<<();
        uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" dtime: ", 8);
        uint64_t v32 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"/", 1);
        int v33 = (void *)std::ostream::operator<<();
        uint64_t v34 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" wtime: ", 8);
        absl::lts_2020_02_25::GetCurrentTimeNanos(v34);
        int v35 = (void *)std::ostream::operator<<();
        size_t v36 = strlen(__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)__s, v36);
        google::LogMessage::~LogMessage((google::LogMessage *)v41);
      }
      uint64_t v8 = operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v7);
    }
    else
    {
      uint64_t v8 = 0;
    }
LABEL_38:
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v42);
    operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v48);
  }
  return v8;
}

void sub_23CD5DA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)va);
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::FailedLiteralProbingRound(absl::lts_2020_02_25 *a1, uint64_t a2, uint64_t a3)
{
  absl::lts_2020_02_25::GetCurrentTimeNanos(a1);
  if (*operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::vlocal__ < 1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::vlocal__ != &google::kLogSiteUninitialized
  }
      || google::InitVLOG3__((google *)&operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/probing.cc", (const char *)1);
  int v6 = (int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a3);
  operations_research::sat::SatSolver::SetAssumptionLevel((uint64_t)v6, 0);
  v326 = (operations_research::sat::SatSolver *)v6;
  uint64_t v7 = 0;
  if (!operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel((operations_research::sat::SatSolver *)v6)) {
    return v7;
  }
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>(a3);
  uint64_t v7 = 0;
  if (!operations_research::sat::BinaryImplicationGraph::DetectEquivalences((operations_research::sat::BinaryImplicationGraph *)v8, 0))return v7; {
  uint64_t v9 = (uint64_t)v6;
  }
  if (!operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v6)) {
    return 0;
  }
  uint64_t v318 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(a3);
  double v10 = *(double *)(v318 + 112);
  uint64_t v11 = v6[4];
  uint64_t v12 = 2 * v11;
  int v305 = v6[4];
  uint64_t v322 = v8;
  if ((int)v11 <= 0)
  {
    LODWORD(v342) = 0;
    v344 = 0;
    v345 = 0;
    v343 = 0;
  }
  else
  {
    LODWORD(v342) = 2 * v11;
    v344 = 0;
    v345 = 0;
    v343 = 0;
    if ((unint64_t)(v12 + 63) >= 0x40)
    {
      v343 = (char *)operator new(((unint64_t)(v12 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      v345 = &v343[((unint64_t)(v12 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8];
      bzero(v343, ((unint64_t)(v12 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      v344 = v345;
    }
  }
  v346 = &v342;
  uint64_t v347 = 0xFFFFFFFFLL;
  uint64_t v348 = 0;
  v349 = 0;
  v350 = 0;
  uint64_t v351 = 0;
  int v13 = *(void **)(a3 + 32);
  if (!v13) {
    goto LABEL_25;
  }
  uint64_t v14 = a3 + 32;
  do
  {
    unint64_t v15 = v13[4];
    BOOL v16 = v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
    if (v15 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
      unsigned __int8 v17 = v13;
    }
    else {
      unsigned __int8 v17 = v13 + 1;
    }
    if (v16) {
      uint64_t v14 = (uint64_t)v13;
    }
    int v13 = (void *)*v17;
  }
  while (*v17);
  if (v14 != a3 + 32
    && *(void *)(v14 + 32) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d)
  {
    uint64_t v18 = *(void *)(v14 + 40);
  }
  else
  {
LABEL_25:
    uint64_t v18 = 0;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (absl::lts_2020_02_25 *)operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>(a3);
  uint64_t v20 = v19;
  int v323 = *(_DWORD *)(v8 + 32);
  int v317 = *((_DWORD *)v19 + 8);
  memset(&v341, 0, sizeof(v341));
  memset(&v340, 0, sizeof(v340));
  if ((a2 & 0x10000) == 0)
  {
    __x[0] = 0;
    if (v305) {
      std::vector<int>::__append(&v340, (int)v12, __x);
    }
  }
  *(void *)__x = 0;
  v338 = 0;
  v339 = 0;
  if (!*(unsigned char *)(v8 + 512))
  {
    v302 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 546);
    v303 = (void *)google::LogMessage::stream(v302);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v303, (uint64_t)"Check failed: is_dag_ ", 22);
    goto LABEL_396;
  }
  long long __p = 0;
  v335 = 0;
  v336 = 0;
  uint64_t v21 = v8;
  double v22 = *(unsigned char **)(v8 + 520);
  double v23 = *(unsigned char **)(v21 + 528);
  int64_t v24 = v23 - v22;
  if (v23 != v22)
  {
    if (v24 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v25 = (char *)operator new(v23 - v22);
    uint64_t v26 = &v25[4 * (v24 >> 2)];
    long long __p = v25;
    v336 = v26;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (absl::lts_2020_02_25 *)memcpy(v25, v22, v24);
    v335 = v26;
    if ((a2 & 0x101) != 0) {
      goto LABEL_40;
    }
    goto LABEL_35;
  }
  uint64_t v26 = 0;
  double v25 = 0;
  if ((a2 & 0x101) == 0)
  {
LABEL_35:
    if (v25 != v26)
    {
      uint64_t v27 = v26 - 4;
      if (v26 - 4 > v25)
      {
        unint64_t v28 = v25 + 4;
        do
        {
          int v29 = *((_DWORD *)v28 - 1);
          *((_DWORD *)v28 - 1) = *(_DWORD *)v27;
          *(_DWORD *)uint64_t v27 = v29;
          v27 -= 4;
          BOOL v16 = v28 >= v27;
          v28 += 4;
        }
        while (!v16);
      }
    }
  }
LABEL_40:
  if ((a2 & 0x10000) != 0)
  {
    __u[0] = -1;
    std::vector<int>::assign(&v341, (int)v12, __u);
    if (v26 != v25)
    {
      uint64_t v30 = 0;
      unint64_t v31 = (v26 - v25) >> 2;
      std::vector<int>::pointer begin = v341.__begin_;
      if (v31 <= 1) {
        unint64_t v31 = 1;
      }
      do
      {
        begin[*(int *)&v25[4 * v30]] = v30;
        ++v30;
      }
      while (v31 != v30);
    }
  }
  v319 = 0;
  v320 = 0;
  int v33 = 0;
  int v311 = 0;
  uint64_t v312 = 0;
  uint64_t v327 = 0;
  uint64_t v34 = 0;
  uint64_t v316 = 0;
  int v304 = BYTE4(a2) & 1 | v5;
  double v35 = v10 + *(double *)&a1;
  uint64_t v36 = v318;
  uint64_t v313 = 0;
  v314 = (int *)(v318 + 32);
  v315 = v20;
  while (1)
  {
    uint64_t v37 = *(unsigned __int8 **)(v36 + 120);
    if (v37)
    {
      unsigned __int8 v38 = atomic_load(v37);
      if (v38) {
        goto LABEL_363;
      }
    }
    if (fmax(*(double *)(v36 + 104) - *(double *)(v36 + 112), 0.0) <= 0.0) {
      goto LABEL_363;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v19);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = (uint64_t *)v320;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v41 = CurrentTimeNanos;
    if (*(void *)(v36 + 24) <= CurrentTimeNanos - *(void *)(v36 + 8)) {
      uint64_t v42 = CurrentTimeNanos - *(void *)(v36 + 8);
    }
    else {
      uint64_t v42 = *(void *)(v36 + 24);
    }
    operations_research::RunningMax<long long>::Add(v314, v42);
    *(void *)(v36 + 8) = v41;
    if (*(void *)(*(void *)(v36 + 40) + 8 * *(int *)(v36 + 68)) + v41 >= *(void *)(v36 + 16))
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_362;
      }
      double v44 = *(double *)(v36 + 96);
      if (*(unsigned char *)(v36 + 72))
      {
        double v45 = v44
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v43) - *(void *)(v36 + 80) + *(void *)(v36 + 88))
            * -0.000000001;
        if (v45 <= 0.0001) {
          goto LABEL_362;
        }
      }
      else
      {
        double v45 = v44 + (double)*(uint64_t *)(v36 + 88) * -0.000000001;
        if (v45 <= 0.0001)
        {
LABEL_362:
          *(void *)(v36 + 16) = 0;
          goto LABEL_363;
        }
      }
      *(void *)(v36 + 16) = *(void *)(v36 + 8) + (uint64_t)(v45 * 1000000000.0);
    }
    if (*(double *)(v36 + 112) > v35) {
      goto LABEL_363;
    }
    if ((a2 & 0x100) == 0) {
      operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v9, 0);
    }
    signed int v333 = -1;
    uint64_t v324 = v34;
    if ((a2 & 0x10000) == 0)
    {
      uint64_t v46 = v320;
      double v47 = v33;
      goto LABEL_166;
    }
    int v48 = *(_DWORD *)(v9 + 304);
    if (v48 < 1) {
      goto LABEL_167;
    }
    v328 = v33;
    uint64_t v49 = (void *)(*(void *)(v322 + 192)
                   + 32 * (*(int *)(*(void *)(v9 + 312) + 8 * (v48 - 1) + 4) ^ 1));
    unint64_t v52 = *v49;
    unint64_t v51 = (unsigned int *)(v49 + 1);
    unint64_t v50 = v52;
    if (v52) {
      unint64_t v51 = *(unsigned int **)v51;
    }
    if (v50 >= 2)
    {
      unint64_t v54 = &v51[v50 >> 1];
      double v47 = v328;
      uint64_t v46 = v320;
      v309 = v54;
      while (1)
      {
        uint64_t v55 = *v51;
        uint64_t v56 = v55 ^ 1;
        unint64_t v57 = (int)(v55 ^ 1);
        unint64_t v58 = v57 >> 6;
        if ((*(void *)&v343[8 * (v57 >> 6)] >> (v55 ^ 1u))) {
          goto LABEL_72;
        }
        int v59 = v341.__begin_[v57];
        if (v59 == -1) {
          goto LABEL_72;
        }
        unint64_t v60 = *(void *)(*(void *)(v18 + 24) + 8 * v58);
        if (((v60 >> (v56 & 0x3E)) & 3) != 0)
        {
          if ((v60 >> (v56 & 0x3F ^ 1)))
          {
            uint64_t v61 = v338;
            if (v338 >= (int *)v339)
            {
              int8x16_t v62 = *(int **)__x;
              unint64_t v63 = (char *)v338 - *(void *)__x;
              uint64_t v64 = ((uint64_t)v338 - *(void *)__x) >> 2;
              unint64_t v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v66 = (uint64_t)&v339[-*(void *)__x];
              if ((uint64_t)&v339[-*(void *)__x] >> 1 > v65) {
                unint64_t v65 = v66 >> 1;
              }
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v67 = v65;
              }
              if (v67)
              {
                v307 = (char *)v338 - *(void *)__x;
                if (v67 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v68 = v36;
                unint64_t v69 = v67;
                uint64_t v70 = operator new(4 * v67);
                unint64_t v67 = v69;
                uint64_t v36 = v68;
                unint64_t v63 = v307;
                unint64_t v71 = (char *)v70 + 4 * v64;
                *(_DWORD *)unint64_t v71 = v55;
                uint64_t v72 = (uint64_t)(v71 + 4);
                if (v61 == v62) {
                  goto LABEL_112;
                }
LABEL_106:
                unint64_t v83 = (char *)(v61 - 1) - (char *)v62;
                if (v83 < 0x2C) {
                  goto LABEL_428;
                }
                if ((unint64_t)((char *)v61 - &v63[(void)v70]) < 0x20) {
                  goto LABEL_428;
                }
                uint64_t v84 = (v83 >> 2) + 1;
                uint64_t v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
                unint64_t v86 = &v61[v85 / 0xFFFFFFFFFFFFFFFCLL];
                v71 -= v85;
                uint64_t v87 = (char *)v70 + 4 * v64 - 16;
                uint64_t v88 = v61 - 4;
                uint64_t v89 = v84 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v90 = *(_OWORD *)v88;
                  *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
                  *(_OWORD *)uint64_t v87 = v90;
                  v87 -= 32;
                  v88 -= 8;
                  v89 -= 8;
                }
                while (v89);
                uint64_t v61 = v86;
                if (v84 != (v84 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_428:
                  do
                  {
                    int v91 = *--v61;
                    *((_DWORD *)v71 - 1) = v91;
                    v71 -= 4;
                  }
                  while (v61 != v62);
                }
              }
              else
              {
                uint64_t v70 = 0;
                unint64_t v71 = (char *)(4 * v64);
                *(_DWORD *)(4 * v64) = v55;
                uint64_t v72 = 4 * v64 + 4;
                if (v61 != v62) {
                  goto LABEL_106;
                }
              }
LABEL_112:
              *(void *)__x = v71;
              v338 = (int *)v72;
              v339 = (char *)v70 + 4 * v67;
              if (v62) {
                operator delete(v62);
              }
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = (uint64_t *)v320;
              unint64_t v54 = v309;
              v338 = (int *)v72;
              goto LABEL_72;
            }
            int *v338 = v55;
            v338 = v61 + 1;
          }
        }
        else
        {
          unint64_t v73 = v56 | ((unint64_t)-v59 << 32);
          if (v46 >= v319)
          {
            uint64_t v74 = ((char *)v46 - (char *)v47) >> 3;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 61) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            if (((char *)v319 - (char *)v47) >> 2 > v75) {
              unint64_t v75 = ((char *)v319 - (char *)v47) >> 2;
            }
            if ((unint64_t)((char *)v319 - (char *)v47) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v75;
            }
            if (v76)
            {
              if (v76 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v77 = operator new(8 * v76);
              int64_t v78 = (unint64_t *)&v77[8 * v74];
              *int64_t v78 = v73;
              uint64_t v79 = (uint64_t)(v78 + 1);
              if (v46 != v47)
              {
LABEL_99:
                unint64_t v80 = (char *)&v46[-1].u64[1] - (char *)v47;
                uint64_t v36 = v318;
                if (v80 < 0x168)
                {
                  uint64_t v81 = v46;
                  goto LABEL_101;
                }
                if (&v77[(char *)v46 - (char *)v47 - 8 - (v80 & 0xFFFFFFFFFFFFFFF8)] > &v77[(char *)v46
                                                                                             - (char *)v47
                                                                                             - 8])
                {
                  uint64_t v81 = v46;
                  goto LABEL_101;
                }
                if ((unint64_t *)((char *)&v46[-1].u64[1] - (v80 & 0xFFFFFFFFFFFFFFF8)) > &v46[-1].u64[1])
                {
                  uint64_t v81 = v46;
                  goto LABEL_101;
                }
                if ((unint64_t)((char *)v47 - v77) < 0x20)
                {
                  uint64_t v81 = v46;
                  goto LABEL_101;
                }
                uint64_t v92 = (v80 >> 3) + 1;
                uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v81 = (int8x16_t *)((char *)v46 - v93);
                int64_t v78 = (unint64_t *)((char *)v78 - v93);
                int v94 = (int8x16_t *)&v77[8 * v74 - 16];
                unint64_t v95 = v46 - 1;
                uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  int8x16_t v97 = *v95;
                  v94[-1] = v95[-1];
                  *int v94 = v97;
                  v94 -= 2;
                  v95 -= 2;
                  v96 -= 4;
                }
                while (v96);
                if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_101:
                    unint64_t v82 = v81[-1].u64[1];
                    uint64_t v81 = (int8x16_t *)((char *)v81 - 8);
                    *--int64_t v78 = v82;
                  }
                  while (v81 != v47);
                }
                v319 = (int8x16_t *)&v77[8 * v76];
                if (v47) {
LABEL_103:
                }
                  operator delete(v47);
LABEL_104:
                uint64_t v46 = (int8x16_t *)v79;
                double v47 = (int8x16_t *)v78;
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = (uint64_t *)v320;
                unint64_t v54 = v309;
                goto LABEL_72;
              }
            }
            else
            {
              uint64_t v77 = 0;
              int64_t v78 = (unint64_t *)(8 * v74);
              *(void *)(8 * v74) = v73;
              uint64_t v79 = 8 * v74 + 8;
              if (v46 != v47) {
                goto LABEL_99;
              }
            }
            uint64_t v36 = v318;
            v319 = (int8x16_t *)&v77[8 * v76];
            if (v47) {
              goto LABEL_103;
            }
            goto LABEL_104;
          }
          v46->i64[0] = v73;
          uint64_t v46 = (int8x16_t *)((char *)v46 + 8);
          uint64_t v36 = v318;
        }
LABEL_72:
        if (++v51 == v54)
        {
          uint64_t v9 = (uint64_t)v326;
          unint64_t v53 = v328;
          goto LABEL_129;
        }
      }
    }
    uint64_t v46 = v320;
    unint64_t v53 = v328;
    double v47 = v328;
LABEL_129:
    char v98 = (unint64_t *)((char *)v47->u64 + (((char *)v40 - (char *)v53) << 29 >> 29));
    unint64_t v99 = 126 - 2 * __clz(((char *)v46 - (char *)v98) >> 3);
    if (v46 == (int8x16_t *)v98) {
      uint64_t v100 = 0;
    }
    else {
      uint64_t v100 = v99;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *,false>(v98, v46, v100, 1);
    if (v47 == v46)
    {
      double v47 = v46;
      goto LABEL_166;
    }
    while (1)
    {
      signed int v103 = v46[-1].i32[2];
      uint64_t v46 = (int8x16_t *)((char *)v46 - 8);
      signed int v102 = v103;
      if (v103 == -1)
      {
        int v116 = *(_DWORD *)(v9 + 304);
        __u[0] = v116;
        v353[0] = 0;
        if (v116 < 1) {
          google::MakeCheckOpString<int,int>((int)__u, (int)v353, "sat_solver->CurrentDecisionLevel() > 0");
        }
        operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v9, v116 - 1);
        goto LABEL_136;
      }
      unint64_t v104 = (unint64_t)v102 >> 6;
      if (((*(void *)&v343[8 * v104] >> v102) & 1) == 0) {
        break;
      }
LABEL_136:
      if (v47 == v46)
      {
        uint64_t v46 = v47;
        goto LABEL_166;
      }
    }
    unint64_t v105 = *(void *)(*(void *)(v18 + 24) + 8 * v104);
    if (((v105 >> (v102 & 0x3E)) & 3) != 0)
    {
      if (((v105 >> (v102 & 0x3F ^ 1u)) & 1) == 0) {
        goto LABEL_136;
      }
      int v106 = v102 ^ 1;
      int v107 = v338;
      if (v338 < (int *)v339)
      {
        int *v338 = v106;
        uint64_t v101 = (uint64_t)(v107 + 1);
        uint64_t v9 = (uint64_t)v326;
LABEL_135:
        v338 = (int *)v101;
        goto LABEL_136;
      }
      uint64_t v108 = *(int **)__x;
      unint64_t v109 = (char *)v338 - *(void *)__x;
      uint64_t v110 = ((uint64_t)v338 - *(void *)__x) >> 2;
      unint64_t v111 = v110 + 1;
      if ((unint64_t)(v110 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v112 = (uint64_t)&v339[-*(void *)__x];
      if ((uint64_t)&v339[-*(void *)__x] >> 1 > v111) {
        unint64_t v111 = v112 >> 1;
      }
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v113 = v111;
      }
      if (v113)
      {
        if (v113 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v114 = operator new(4 * v113);
        unint64_t v115 = (int *)((char *)v114 + 4 * v110);
        *unint64_t v115 = v106;
        uint64_t v101 = (uint64_t)(v115 + 1);
        if (v107 == v108) {
          goto LABEL_161;
        }
      }
      else
      {
        unint64_t v114 = 0;
        unint64_t v115 = (int *)(4 * v110);
        *(_DWORD *)(4 * v110) = v106;
        uint64_t v101 = 4 * v110 + 4;
        if (v107 == v108)
        {
LABEL_161:
          *(void *)__x = v115;
          v338 = (int *)v101;
          v339 = (char *)v114 + 4 * v113;
          if (v108) {
            operator delete(v108);
          }
          uint64_t v9 = (uint64_t)v326;
          uint64_t v36 = v318;
          goto LABEL_135;
        }
      }
      unint64_t v117 = (char *)(v107 - 1) - (char *)v108;
      if (v117 < 0x2C) {
        goto LABEL_429;
      }
      if ((unint64_t)((char *)v107 - &v109[(void)v114]) < 0x20) {
        goto LABEL_429;
      }
      uint64_t v118 = (v117 >> 2) + 1;
      uint64_t v119 = 4 * (v118 & 0x7FFFFFFFFFFFFFF8);
      v120 = &v107[v119 / 0xFFFFFFFFFFFFFFFCLL];
      unint64_t v115 = (int *)((char *)v115 - v119);
      unint64_t v121 = (char *)v114 + 4 * v110 - 16;
      v122 = v107 - 4;
      uint64_t v123 = v118 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v124 = *(_OWORD *)v122;
        *((_OWORD *)v121 - 1) = *((_OWORD *)v122 - 1);
        *(_OWORD *)unint64_t v121 = v124;
        v121 -= 32;
        v122 -= 8;
        v123 -= 8;
      }
      while (v123);
      int v107 = v120;
      if (v118 != (v118 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_429:
        do
        {
          int v125 = *--v107;
          *--unint64_t v115 = v125;
        }
        while (v107 != v108);
      }
      goto LABEL_161;
    }
    signed int v333 = v102;
LABEL_166:
    int v48 = *(_DWORD *)(v9 + 304);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = (uint64_t *)v46;
    int v33 = v47;
    uint64_t v34 = v324;
LABEL_167:
    v329 = v33;
    if (!v48) {
      break;
    }
    LODWORD(v126) = v333;
    if (v333 != -1) {
      goto LABEL_188;
    }
    *(void *)v306 = v48 - 1;
    uint64_t v127 = *(int *)(*(void *)(v9 + 312) + 8 * *(void *)v306 + 4) ^ 1;
    uint64_t v128 = (unint64_t *)(*(void *)(v322 + 192) + 32 * v127);
    uint64_t v308 = v127;
    LODWORD(v129) = v340.__begin_[v127];
    unint64_t v130 = *v128;
    if (*v128 < 2) {
      goto LABEL_170;
    }
    unint64_t v165 = 0;
    unint64_t v166 = v130 >> 1;
    size_t v167 = v128 + 1;
    v310 = v128;
    v321 = v40;
    while (2)
    {
      v170 = v167;
      if (v130) {
        v170 = (void *)*v167;
      }
      unint64_t v129 = (int)v129 % v166;
      unint64_t v168 = *((int *)v170 + (int)v129);
      int v169 = *((_DWORD *)v170 + (int)v129) ^ 1;
      if (((1 << v169) & *(void *)&v343[8 * (v168 >> 6)]) != 0)
      {
        int v33 = v329;
        goto LABEL_240;
      }
      unint64_t v171 = *(void *)(*(void *)(v18 + 24) + 8 * (v168 >> 6));
      if ((v171 >> (v169 & 0x3F ^ 1u)))
      {
        v172 = v338;
        if (v338 < (int *)v339)
        {
          int *v338 = v168;
          uint64_t v173 = (uint64_t)(v172 + 1);
          int v33 = v329;
          uint64_t v34 = v324;
          goto LABEL_269;
        }
        long long v174 = *(int **)__x;
        v175 = (char *)v338 - *(void *)__x;
        uint64_t v176 = ((uint64_t)v338 - *(void *)__x) >> 2;
        unint64_t v177 = v176 + 1;
        if ((unint64_t)(v176 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v178 = (uint64_t)&v339[-*(void *)__x];
        if ((uint64_t)&v339[-*(void *)__x] >> 1 > v177) {
          unint64_t v177 = v178 >> 1;
        }
        if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v179 = v177;
        }
        if (v179)
        {
          if (v179 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v180 = v179;
          v181 = operator new(4 * v179);
          unint64_t v179 = v180;
          int v182 = (char *)v181 + 4 * v176;
          *(_DWORD *)int v182 = v168;
          uint64_t v173 = (uint64_t)(v182 + 4);
          if (v172 != v174)
          {
LABEL_257:
            unint64_t v183 = (char *)(v172 - 1) - (char *)v174;
            int v33 = v329;
            if (v183 < 0x2C)
            {
              uint64_t v36 = v318;
              goto LABEL_265;
            }
            unint64_t v184 = (char *)v172 - &v175[(void)v181];
            uint64_t v36 = v318;
            if (v184 < 0x20) {
              goto LABEL_430;
            }
            uint64_t v185 = (v183 >> 2) + 1;
            uint64_t v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
            v187 = &v172[v186 / 0xFFFFFFFFFFFFFFFCLL];
            v182 -= v186;
            v188 = (char *)v181 + 4 * v176 - 16;
            v189 = v172 - 4;
            uint64_t v190 = v185 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v191 = *(_OWORD *)v189;
              *((_OWORD *)v188 - 1) = *((_OWORD *)v189 - 1);
              *(_OWORD *)v188 = v191;
              v188 -= 32;
              v189 -= 8;
              v190 -= 8;
            }
            while (v190);
            v172 = v187;
            if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_430:
              do
              {
LABEL_265:
                int v192 = *--v172;
                *((_DWORD *)v182 - 1) = v192;
                v182 -= 4;
              }
              while (v172 != v174);
            }
LABEL_266:
            *(void *)__x = v182;
            v338 = (int *)v173;
            v339 = (char *)v181 + 4 * v179;
            if (v174) {
              operator delete(v174);
            }
            uint64_t v34 = v324;
            uint64_t v9 = (uint64_t)v326;
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = v321;
            uint64_t v128 = v310;
LABEL_269:
            v338 = (int *)v173;
            unint64_t v130 = *v128;
LABEL_240:
            ++v165;
            LODWORD(v129) = v129 + 1;
            unint64_t v166 = v130 >> 1;
            if (v130 >> 1 <= v165) {
              goto LABEL_170;
            }
            continue;
          }
        }
        else
        {
          v181 = 0;
          int v182 = (char *)(4 * v176);
          *(_DWORD *)(4 * v176) = v168;
          uint64_t v173 = 4 * v176 + 4;
          if (v172 != v174) {
            goto LABEL_257;
          }
        }
        int v33 = v329;
        uint64_t v36 = v318;
        goto LABEL_266;
      }
      break;
    }
    int v33 = v329;
    if ((v171 & (1 << v169)) != 0) {
      goto LABEL_240;
    }
    signed int v333 = *((_DWORD *)v170 + (int)v129) ^ 1;
LABEL_170:
    v340.__begin_[v308] = v129;
    LODWORD(v126) = v333;
    if (v333 == -1)
    {
      v320 = (int8x16_t *)v40;
      operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)v9, v306[0]);
      continue;
    }
LABEL_188:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(&v342, v126);
    if (v333 == -1) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>((int)&v333, (int)&operations_research::sat::kNoLiteralIndex, "next_decision != kNoLiteralIndex");
    }
    if (v40 < (uint64_t *)v319)
    {
      *std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = 0xFFFFFFFFLL;
      v135 = (int8x16_t *)(v40 + 1);
      goto LABEL_213;
    }
    int64_t v136 = (char *)v40 - (char *)v33;
    uint64_t v137 = ((char *)v40 - (char *)v33) >> 3;
    unint64_t v138 = v137 + 1;
    if ((unint64_t)(v137 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v139 = v40;
    if (((char *)v319 - (char *)v33) >> 2 > v138) {
      unint64_t v138 = ((char *)v319 - (char *)v33) >> 2;
    }
    if ((unint64_t)((char *)v319 - (char *)v33) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v140 = v138;
    }
    if (v140)
    {
      if (v140 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v141 = (char *)operator new(8 * v140);
    }
    else
    {
      unint64_t v141 = 0;
    }
    v142 = &v141[8 * v137];
    *(void *)v142 = 0xFFFFFFFFLL;
    v135 = (int8x16_t *)(v142 + 8);
    unint64_t v143 = (int8x16_t *)v139;
    if (v139 == (uint64_t *)v33)
    {
      int v33 = (int8x16_t *)&v141[8 * v137];
      uint64_t v9 = (uint64_t)v326;
      v319 = (int8x16_t *)&v141[8 * v140];
      if (v139) {
        goto LABEL_212;
      }
    }
    else
    {
      unint64_t v144 = (char *)(v139 - 1) - (char *)v33;
      if (v144 < 0x168)
      {
        int v145 = (int8x16_t *)v139;
        uint64_t v9 = (uint64_t)v326;
        goto LABEL_210;
      }
      if (&v141[v136 - 8 - (v144 & 0xFFFFFFFFFFFFFFF8)] > &v141[v136 - 8]
        || (uint64_t *)((char *)v139 - (v144 & 0xFFFFFFFFFFFFFFF8) - 8) > v139 - 1
        || (unint64_t)((char *)v139 - &v141[v136]) < 0x20)
      {
        int v145 = (int8x16_t *)v139;
        uint64_t v9 = (uint64_t)v326;
        goto LABEL_210;
      }
      uint64_t v259 = (v144 >> 3) + 1;
      uint64_t v260 = 8 * (v259 & 0x3FFFFFFFFFFFFFFCLL);
      int v145 = (int8x16_t *)&v139[v260 / 0xFFFFFFFFFFFFFFF8];
      v142 -= v260;
      v261 = &v141[8 * v137 - 16];
      v262 = v139 - 2;
      uint64_t v263 = v259 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v9 = (uint64_t)v326;
      do
      {
        long long v264 = *(_OWORD *)v262;
        *((_OWORD *)v261 - 1) = *((_OWORD *)v262 - 1);
        *(_OWORD *)v261 = v264;
        v261 -= 32;
        v262 -= 4;
        v263 -= 4;
      }
      while (v263);
      if (v259 != (v259 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_210:
          uint64_t v146 = v145[-1].i64[1];
          int v145 = (int8x16_t *)((char *)v145 - 8);
          *((void *)v142 - 1) = v146;
          v142 -= 8;
        }
        while (v145 != v33);
      }
      unint64_t v143 = v33;
      int v33 = (int8x16_t *)v142;
      v319 = (int8x16_t *)&v141[8 * v140];
      if (v143) {
LABEL_212:
      }
        operator delete(v143);
    }
LABEL_213:
    uint64_t v325 = v34;
    int v147 = *(_DWORD *)(v9 + 304);
    int v148 = operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(v9, v333);
    int v149 = *(_DWORD *)(v9 + 304);
    double v150 = operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)v9);
    *(double *)(v36 + 112) = *(double *)(v36 + 112) + v150 - *(double *)(v9 + 1304);
    *(double *)(v9 + 1304) = v150;
    if (*(unsigned char *)(v9 + 496)) {
      goto LABEL_379;
    }
    if (v149 > v147)
    {
      v320 = v135;
      goto LABEL_281;
    }
    if ((a2 & 0x10000) != 0)
    {
      uint64_t v151 = v33;
      if (!v149) {
        goto LABEL_222;
      }
      int v152 = v147 + 1;
      uint64_t v151 = v135;
      while (v151 != v33)
      {
        __int32 v153 = v151[-1].i32[2];
        uint64_t v151 = (int8x16_t *)((char *)v151 - 8);
        v152 -= v153 == -1;
        if (v152 <= v149) {
          goto LABEL_222;
        }
      }
      v282 = google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 550);
      v283 = (void *)google::LogMessage::stream(v282);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)"Check failed: !queue.empty() ", 29);
LABEL_396:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__u);
    }
    uint64_t v151 = v135;
LABEL_222:
    v320 = v151;
    ++v313;
    if (!*(_DWORD *)(v9 + 304)
      && ((*(void *)(*(void *)(v18 + 24) + (((unint64_t)v333 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v333 & 0x3F ^ 1u)) & 1) == 0)
    {
      goto LABEL_281;
    }
    v330 = v33;
    unsigned int v154 = v333 ^ 1;
    int v155 = v338;
    if (v338 < (int *)v339)
    {
      int *v338 = v154;
      uint64_t v156 = (uint64_t)(v155 + 1);
      goto LABEL_280;
    }
    unint64_t v157 = *(int **)__x;
    v158 = (char *)v338 - *(void *)__x;
    uint64_t v159 = ((uint64_t)v338 - *(void *)__x) >> 2;
    unint64_t v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v161 = (uint64_t)&v339[-*(void *)__x];
    if ((uint64_t)&v339[-*(void *)__x] >> 1 > v160) {
      unint64_t v160 = v161 >> 1;
    }
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v162 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v162 = v160;
    }
    if (!v162)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = 0;
      unint64_t v163 = (unsigned int *)(4 * v159);
      *(_DWORD *)(4 * v159) = v154;
      uint64_t v156 = 4 * v159 + 4;
      if (v155 != v157) {
        goto LABEL_235;
      }
LABEL_271:
      uint64_t v36 = v318;
      goto LABEL_277;
    }
    if (v162 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (absl::lts_2020_02_25 *)operator new(4 * v162);
    unint64_t v163 = (unsigned int *)((char *)v19 + 4 * v159);
    *unint64_t v163 = v154;
    uint64_t v156 = (uint64_t)(v163 + 1);
    if (v155 == v157) {
      goto LABEL_271;
    }
LABEL_235:
    unint64_t v164 = (char *)(v155 - 1) - (char *)v157;
    if (v164 < 0x2C)
    {
      uint64_t v36 = v318;
      goto LABEL_276;
    }
    unint64_t v193 = (char *)v155 - &v158[(void)v19];
    uint64_t v36 = v318;
    if (v193 < 0x20) {
      goto LABEL_431;
    }
    uint64_t v194 = (v164 >> 2) + 1;
    uint64_t v195 = 4 * (v194 & 0x7FFFFFFFFFFFFFF8);
    v196 = &v155[v195 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v163 = (unsigned int *)((char *)v163 - v195);
    v197 = (_OWORD *)((char *)v19 + 4 * v159 - 16);
    v198 = v155 - 4;
    uint64_t v199 = v194 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v200 = *(_OWORD *)v198;
      *(v197 - 1) = *((_OWORD *)v198 - 1);
      _OWORD *v197 = v200;
      v197 -= 2;
      v198 -= 8;
      v199 -= 8;
    }
    while (v199);
    int v155 = v196;
    if (v194 != (v194 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_431:
      do
      {
LABEL_276:
        unsigned int v201 = *--v155;
        *--unint64_t v163 = v201;
      }
      while (v155 != v157);
    }
LABEL_277:
    *(void *)__x = v163;
    v338 = (int *)v156;
    v339 = (char *)v19 + 4 * v162;
    if (v157) {
      operator delete(v157);
    }
    uint64_t v9 = (uint64_t)v326;
LABEL_280:
    int v33 = v330;
    v338 = (int *)v156;
LABEL_281:
    ++v316;
    if (!v149)
    {
      uint64_t v34 = v325;
      continue;
    }
    int v202 = v33;
    int v203 = *(_DWORD *)(*(void *)(v9 + 312) + 8 * (v149 - 1) + 4);
    if (v148 < *(_DWORD *)(v18 + 12))
    {
      int v204 = 0;
      int v205 = v203 ^ 1;
      uint64_t v206 = v148;
      int32x4_t v331 = vdupq_n_s32(v203 ^ 1u);
      while (1)
      {
        int v207 = *(_DWORD *)(*(void *)(v18 + 72) + 4 * v206);
        if (v207 == v203) {
          goto LABEL_285;
        }
        if ((a2 & 0x1000000) == 0) {
          goto LABEL_306;
        }
        uint64_t v208 = (uint64_t)v207 >> 1;
        uint64_t v209 = *(void *)(v18 + 120);
        unsigned int v210 = *(_DWORD *)(v209 + 8 * (v207 >> 1));
        uint64_t v211 = v208;
        if ((v210 & 0xF0000000) == 0x30000000)
        {
          uint64_t v211 = *(int *)(*(void *)(v18 + 152) + 4 * v208);
          int v212 = *(_DWORD *)(v209 + 8 * v211) >> 28;
          if (v212) {
            goto LABEL_290;
          }
        }
        else
        {
          int v212 = *(_DWORD *)(v209 + 8 * (v207 >> 1)) >> 28;
          if (v212)
          {
LABEL_290:
            if (v212 != v317) {
              goto LABEL_306;
            }
            goto LABEL_294;
          }
        }
        if (*(_DWORD *)(*(void *)(v18 + 248) + 4 * v211) != v317) {
          goto LABEL_306;
        }
LABEL_294:
        if ((v210 & 0xF0000000) == 0x30000000)
        {
          uint64_t v213 = *(int *)(*(void *)(v18 + 152) + 4 * v208);
          unsigned int v214 = *(_DWORD *)(v209 + 8 * v213) >> 28;
          if (!v214) {
            goto LABEL_299;
          }
        }
        else
        {
          uint64_t v213 = (uint64_t)v207 >> 1;
          unsigned int v214 = v210 >> 28;
          if (!v214)
          {
LABEL_299:
            uint64_t v216 = *(void *)(v18 + 224) + 16 * v213;
            uint64_t v217 = *(void *)(v216 + 8);
            uint64_t v9 = (uint64_t)v326;
            if (v217) {
              goto LABEL_303;
            }
            goto LABEL_306;
          }
        }
        if (v214 - 1 > 1)
        {
          uint64_t v218 = *(void *)(*(void *)(v18 + 272) + 8 * v214);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (absl::lts_2020_02_25 *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v218 + 32))(v218, v18, *(unsigned int *)(v209 + 8 * v213 + 4));
          uint64_t v219 = (absl::lts_2020_02_25 **)(*(void *)(v18 + 224) + 16 * v213);
          *uint64_t v219 = v19;
          v219[1] = v220;
        }
        else
        {
          v215 = (void *)(*(void *)(v18 + 224) + 16 * v213);
          void *v215 = 0;
          v215[1] = 0;
        }
        *(_DWORD *)(*(void *)(v18 + 248) + 4 * v213) = *(_DWORD *)(v209 + 8 * v213) >> 28;
        *(_DWORD *)(*(void *)(v18 + 120) + 8 * v213) &= 0xFFFFFFFu;
        uint64_t v216 = *(void *)(v18 + 224) + 16 * v213;
        uint64_t v217 = *(void *)(v216 + 8);
        uint64_t v9 = (uint64_t)v326;
        if (v217)
        {
LABEL_303:
          long long v221 = *(_DWORD **)v216;
          uint64_t v222 = 4 * v217;
          while (*v221 != v205)
          {
            ++v221;
            v222 -= 4;
            if (!v222) {
              goto LABEL_306;
            }
          }
          operations_research::sat::BinaryImplicationGraph::AddBinaryClause(v322, v203 ^ 1, v207);
          int v227 = *(_DWORD *)(*(void *)(v18 + 120) + 8 * v208 + 4);
          v228 = (int *)operations_research::sat::LiteralWatchers::ReasonClause(v315, v227);
          v229 = v228 + 1;
          uint64_t v230 = *v228;
          if (!v230)
          {
            __u[0] = 0;
            v353[0] = 2;
LABEL_318:
            google::MakeCheckOpString<int,int>((int)__u, (int)v353, "test == 2");
          }
          unint64_t v231 = (v230 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v231 >= 7)
          {
            unint64_t v234 = v231 + 1;
            uint64_t v235 = (v231 + 1) & 0x7FFFFFFFFFFFFFF8;
            v233 = &v229[v235];
            int32x4_t v236 = vdupq_n_s32(v207);
            v237 = (int32x4_t *)(v228 + 5);
            int32x4_t v238 = 0uLL;
            uint64_t v239 = v235;
            int32x4_t v240 = 0uLL;
            do
            {
              int32x4_t v238 = vsubq_s32(vsubq_s32(v238, vceqq_s32(v237[-1], v236)), vceqq_s32(v237[-1], v331));
              int32x4_t v240 = vsubq_s32(vsubq_s32(v240, vceqq_s32(*v237, v236)), vceqq_s32(*v237, v331));
              v237 += 2;
              v239 -= 8;
            }
            while (v239);
            int v232 = vaddvq_s32(vaddq_s32(v240, v238));
            if (v234 != v235) {
              goto LABEL_322;
            }
          }
          else
          {
            int v232 = 0;
            v233 = v228 + 1;
LABEL_322:
            v241 = &v229[v230];
            do
            {
              int v243 = *v233++;
              int v242 = v243;
              if (v243 == v207) {
                int v244 = v232 + 1;
              }
              else {
                int v244 = v232;
              }
              if (v242 == v205) {
                int v232 = v244 + 1;
              }
              else {
                int v232 = v244;
              }
            }
            while (v233 != v241);
          }
          __u[0] = v232;
          v353[0] = 2;
          if (v232 != 2) {
            goto LABEL_318;
          }
          long long v245 = (_DWORD *)operations_research::sat::LiteralWatchers::ReasonClause(v315, v227);
          operations_research::sat::LiteralWatchers::LazyDetach((uint64_t)v315, v245);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (absl::lts_2020_02_25 *)operations_research::sat::BinaryImplicationGraph::ChangeReason(v322, v227, v203);
          ++v204;
          ++v327;
          if ((a2 & 1) == 0)
          {
LABEL_284:
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(&v342, v207);
            goto LABEL_285;
          }
          goto LABEL_285;
        }
LABEL_306:
        if ((a2 & 1) == 0) {
          goto LABEL_284;
        }
        uint64_t v223 = (uint64_t)v207 >> 1;
        uint64_t v224 = *(void *)(v18 + 120);
        unsigned int v225 = *(_DWORD *)(v224 + 8 * (v207 >> 1));
        if (v225 >> 28 == 3)
        {
          uint64_t v223 = *(int *)(*(void *)(v18 + 152) + 4 * v223);
          int v226 = *(_DWORD *)(v224 + 8 * v223) >> 28;
          if (v226) {
            goto LABEL_309;
          }
        }
        else
        {
          int v226 = v225 >> 28;
          if (v226)
          {
LABEL_309:
            if (v226 != v323) {
              goto LABEL_313;
            }
            goto LABEL_285;
          }
        }
        if (*(_DWORD *)(*(void *)(v18 + 248) + 4 * v223) != v323)
        {
LABEL_313:
          operations_research::sat::BinaryImplicationGraph::AddBinaryClause(v322, v203 ^ 1, v207);
          ++v327;
        }
LABEL_285:
        if (++v206 >= *(int *)(v18 + 12)) {
          goto LABEL_334;
        }
      }
    }
    int v204 = 0;
LABEL_334:
    if ((a2 & 0x1000000) != 0)
    {
      std::vector<int>::value_type v247 = v203 ^ 1;
      uint64_t v246 = (uint64_t)v315;
      uint64_t v248 = *((void *)v315 + 5) + 24 * v247;
      v249 = *(int **)v248;
      v250 = *(int **)(v248 + 8);
      int v33 = v202;
      if (*(int **)v248 == v250) {
        goto LABEL_337;
      }
      while (2)
      {
        if (((*(void *)(*(void *)(v18 + 24) + (((unint64_t)*v249 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v249) & 1) != 0
          && **((_DWORD **)v249 + 1))
        {
          __u[0] = v247;
          if (*v249 == v247) {
            google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int)v249, (int)__u, "w.blocking_literal != last_decision.Negated()");
          }
          uint64_t v251 = (uint64_t)*v249 >> 1;
          uint64_t v252 = *(void *)(v18 + 120);
          unsigned int v253 = *(_DWORD *)(v252 + 8 * (*v249 >> 1));
          if (v253 >> 28 == 3)
          {
            uint64_t v251 = *(int *)(*(void *)(v18 + 152) + 4 * v251);
            int v254 = *(_DWORD *)(v252 + 8 * v251) >> 28;
            if (v254) {
              goto LABEL_346;
            }
LABEL_349:
            if (*(_DWORD *)(*(void *)(v18 + 248) + 4 * v251) != v323) {
              goto LABEL_350;
            }
          }
          else
          {
            int v254 = v253 >> 28;
            if (!v254) {
              goto LABEL_349;
            }
LABEL_346:
            if (v254 != v323)
            {
LABEL_350:
              operations_research::sat::BinaryImplicationGraph::AddBinaryClause(v322, v247, *v249);
              ++v327;
              int v255 = *v249;
              uint64_t v256 = *(void *)(v18 + 120);
              unint64_t v257 = *(unsigned int *)(v256 + 8 * (*v249 >> 1));
              if ((v257 & 0xFFFFFFE) != 0)
              {
                int v258 = *(_DWORD *)(*(void *)(v9 + 312) + 8 * ((v257 >> 1) & 0x7FFFFFF) - 4);
                if (v258 != v255) {
                  operations_research::sat::BinaryImplicationGraph::ChangeReason(v322, *(_DWORD *)(v256 + 8 * ((uint64_t)v255 >> 1) + 4), v258);
                }
              }
            }
          }
          operations_research::sat::LiteralWatchers::LazyDetach((uint64_t)v315, *((_DWORD **)v249 + 1));
          ++v204;
        }
        v249 += 4;
        if (v249 == v250) {
          goto LABEL_337;
        }
        continue;
      }
    }
    int v33 = v202;
    uint64_t v246 = (uint64_t)v315;
LABEL_337:
    if (v204 < 1)
    {
      uint64_t v36 = v318;
      uint64_t v34 = v325;
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v19 = (absl::lts_2020_02_25 *)operations_research::sat::LiteralWatchers::CleanUpWatchers(v246);
      uint64_t v36 = v318;
      uint64_t v34 = v325;
      v312 += v204;
    }
  }
  v131 = *(int **)__x;
  uint64_t v132 = v338;
  if (*(int **)__x != v338)
  {
    do
    {
      if (((*(void *)(*(void *)(v18 + 24) + (((unint64_t)*v131 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *v131) & 1) == 0)
      {
        operations_research::sat::SatSolver::AddUnitClause(v9, *v131);
        ++v34;
      }
      ++v131;
    }
    while (v131 != v132);
    v131 = *(int **)__x;
  }
  v338 = v131;
  uint64_t v36 = v318;
  if (!operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v9)) {
    goto LABEL_379;
  }
  unint64_t v133 = (v335 - (unsigned char *)__p) >> 2;
  unint64_t v134 = v311;
  if (v133 > v311)
  {
    do
    {
      unint64_t v126 = *((int *)__p + v134);
      if (((*(void *)&v343[8 * (v126 >> 6)] >> v126) & 1) == 0
        && ((*(void *)(*(void *)(v18 + 24) + 8 * (v126 >> 6)) >> (v126 & 0x3E)) & 3) == 0)
      {
        signed int v333 = *((_DWORD *)__p + v134);
        int v311 = v134;
        goto LABEL_187;
      }
      ++v134;
    }
    while (v133 > v134);
    int v311 = v134;
  }
  LODWORD(v126) = v333;
LABEL_187:
  if (v126 != -1) {
    goto LABEL_188;
  }
LABEL_363:
  if (!operations_research::sat::SatSolver::ResetToLevelZero((operations_research::sat::SatSolver *)v9)) {
    goto LABEL_379;
  }
  v265 = *(int **)__x;
  v266 = v338;
  if (*(int **)__x != v338)
  {
    do
    {
      operations_research::sat::SatSolver::AddUnitClause(v9, *v265);
      ++v34;
      ++v265;
    }
    while (v265 != v266);
    v265 = *(int **)__x;
  }
  v338 = v265;
  v267 = (absl::lts_2020_02_25 *)operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v9);
  if (!v267)
  {
LABEL_379:
    uint64_t v7 = 0;
    v279 = __p;
    if (!__p) {
      goto LABEL_381;
    }
    goto LABEL_380;
  }
  uint64_t v268 = v318;
  v269 = *(unsigned __int8 **)(v318 + 120);
  double v270 = *(double *)(v318 + 112);
  if (!v269) {
    goto LABEL_371;
  }
  unsigned __int8 v271 = atomic_load(v269);
  if (v271) {
    goto LABEL_394;
  }
  uint64_t v268 = v318;
  double v270 = *(double *)(v318 + 112);
LABEL_371:
  if (fmax(*(double *)(v268 + 104) - v270, 0.0) <= 0.0)
  {
LABEL_394:
    BOOL v281 = 1;
    goto LABEL_402;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v272 = absl::lts_2020_02_25::GetCurrentTimeNanos(v267);
  uint64_t v273 = v318;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v274 = v272;
  if (*(void *)(v318 + 24) <= v272 - *(void *)(v318 + 8)) {
    uint64_t v275 = v272 - *(void *)(v318 + 8);
  }
  else {
    uint64_t v275 = *(void *)(v318 + 24);
  }
  operations_research::RunningMax<long long>::Add(v314, v275);
  *(void *)(v318 + 8) = v274;
  if (*(void *)(*(void *)(v318 + 40) + 8 * *(int *)(v318 + 68)) + v274 >= *(void *)(v318 + 16))
  {
    if (!FLAGS_time_limit_use_usertime
      || ((double v277 = *(double *)(v318 + 96), !*(unsigned char *)(v318 + 72))
        ? (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v278 = *(void *)(v318 + 88))
        : (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v278 = absl::lts_2020_02_25::GetCurrentTimeNanos(v276) - *(void *)(v318 + 80) + *(void *)(v318 + 88)),
          double v284 = v277 + (double)v278 * -0.000000001,
          v284 <= 0.0001))
    {
      *(void *)(v318 + 16) = 0;
      BOOL v281 = 1;
      goto LABEL_402;
    }
    uint64_t v273 = v318;
    *(void *)(v318 + 16) = *(void *)(v318 + 8) + (uint64_t)(v284 * 1000000000.0);
  }
  BOOL v281 = *(double *)(v273 + 112) > v35;
LABEL_402:
  if (v304)
  {
    v285 = google::LogMessage::LogMessage((google::LogMessage *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/probing.cc", 720);
    v286 = (void *)google::LogMessage::stream(v285);
    v287 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)"Probing. ", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v287, (uint64_t)" num_probed: ", 13);
    v288 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v288, (uint64_t)" num_fixed: +", 13);
    v289 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v289, (uint64_t)" (", 2);
    v290 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v290, (uint64_t)"/", 1);
    v291 = (void *)std::ostream::operator<<();
    v292 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, (uint64_t)")", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v292, (uint64_t)" explicit_fix:", 14);
    v293 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, (uint64_t)" num_conflicts:", 15);
    v294 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v294, (uint64_t)" new_binary_clauses: ", 21);
    v295 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v295, (uint64_t)" subsumed: ", 11);
    v296 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v296, (uint64_t)" dtime: ", 8);
    v297 = (void *)std::ostream::operator<<();
    v298 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v297, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v298);
    v299 = (void *)std::ostream::operator<<();
    if (v281) {
      v300 = " (Aborted)";
    }
    else {
      v300 = "";
    }
    if (v281) {
      uint64_t v301 = 10;
    }
    else {
      uint64_t v301 = 0;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)v300, v301);
    google::LogMessage::~LogMessage((google::LogMessage *)__u);
  }
  uint64_t v7 = operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)v9);
  v279 = __p;
  if (__p) {
LABEL_380:
  }
    operator delete(v279);
LABEL_381:
  if (*(void *)__x)
  {
    v338 = *(int **)__x;
    operator delete(*(void **)__x);
  }
  if (v340.__begin_)
  {
    v340.__end_ = v340.__begin_;
    operator delete(v340.__begin_);
  }
  if (v341.__begin_)
  {
    v341.__end_ = v341.__begin_;
    operator delete(v341.__begin_);
  }
  if (v33) {
    operator delete(v33);
  }
  if (v349)
  {
    v350 = v349;
    operator delete(v349);
  }
  if (v343)
  {
    v344 = v343;
    operator delete(v343);
  }
  return v7;
}

void sub_23CD5F73C()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_23CD5F744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v49 = a40;
    if (!a40)
    {
LABEL_3:
      unint64_t v50 = a43;
      if (!a43) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v49 = a40;
    if (!a40) {
      goto LABEL_3;
    }
  }
  operator delete(v49);
  unint64_t v50 = a43;
  if (!a43)
  {
LABEL_4:
    unint64_t v51 = a46;
    if (!a46) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v50);
  unint64_t v51 = a46;
  if (!a46)
  {
LABEL_5:
    if (!a31) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v51);
  if (!a31)
  {
LABEL_6:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset((void *)(v47 - 240));
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a31);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset((void *)(v47 - 240));
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BinaryImplicationGraph::ChangeReason(uint64_t result, int a2, int a3)
{
  int v3 = *(void **)(result + 128);
  if (((*(void *)(v3[3] + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v7, (google::glog_internal_namespace_ *)"./ortools/sat/clause.h", 660);
    int v6 = (void *)google::LogMessage::stream((google::LogMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Check failed: trail_->Assignment().LiteralIsTrue(new_reason) ", 61);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v7);
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 152)
                        + (((unint64_t)(*(void *)(result + 176) + a2) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((*(void *)(result + 176) + a2) & 0x3FFLL)) = a3 ^ 1;
  int v4 = *(_DWORD *)(result + 32);
  int v5 = *(int *)(v3[9] + 4 * a2) >> 1;
  *(_DWORD *)(v3[15] + 8 * v5) = *(_DWORD *)(v3[15] + 8 * v5) & 0xFFFFFFF | (v4 << 28);
  *(_DWORD *)(v3[31] + 4 * v5) = v4;
  return result;
}

void sub_23CD5F9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    double v10 = (int *)(a2 - 12);
    uint64_t v11 = (int *)(a2 - 24);
    uint64_t v12 = (int *)(a2 - 36);
    unint64_t v13 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v13;
          uint64_t v14 = a2 - v13;
          uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v13) >> 2);
          if (v5 || !v4)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return result;
              case 2:
                int v91 = *(_DWORD *)(a2 - 12);
                long long v90 = (uint64_t *)(a2 - 12);
                if (v91 >= *(_DWORD *)v13) {
                  return result;
                }
                goto LABEL_100;
              case 3:
                uint64_t v92 = (uint64_t *)(v13 + 12);
                int v93 = *(_DWORD *)(v13 + 12);
                int v95 = *(_DWORD *)(a2 - 12);
                long long v90 = (uint64_t *)(a2 - 12);
                int v94 = v95;
                if (v93 >= *(_DWORD *)v13)
                {
                  if (v94 < v93)
                  {
                    uint64_t v148 = *v92;
                    int v149 = *(_DWORD *)(v13 + 20);
                    int v150 = *((_DWORD *)v90 + 2);
                    uint64_t *v92 = *v90;
                    *(_DWORD *)(v13 + 20) = v150;
                    *((_DWORD *)v90 + 2) = v149;
                    *long long v90 = v148;
                    if (*(_DWORD *)(v13 + 12) < *(_DWORD *)v13)
                    {
                      int v206 = *(_DWORD *)(v13 + 8);
                      uint64_t v182 = *(void *)v13;
                      *(void *)unint64_t v13 = *v92;
                      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                      uint64_t *v92 = v182;
                      *(_DWORD *)(v13 + 20) = v206;
                    }
                  }
                }
                else if (v94 >= v93)
                {
                  int v207 = *(_DWORD *)(v13 + 8);
                  uint64_t v183 = *(void *)v13;
                  *(void *)unint64_t v13 = *v92;
                  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                  uint64_t *v92 = v183;
                  *(_DWORD *)(v13 + 20) = v207;
                  if (*(_DWORD *)v90 < *(_DWORD *)(v13 + 12))
                  {
                    uint64_t v157 = *v92;
                    int v158 = *(_DWORD *)(v13 + 20);
                    int v159 = *((_DWORD *)v90 + 2);
                    uint64_t *v92 = *v90;
                    *(_DWORD *)(v13 + 20) = v159;
                    *((_DWORD *)v90 + 2) = v158;
                    *long long v90 = v157;
                  }
                }
                else
                {
LABEL_100:
                  int v203 = *(_DWORD *)(v13 + 8);
                  uint64_t v179 = *(void *)v13;
                  uint64_t v96 = *v90;
                  *(_DWORD *)(v13 + 8) = *((_DWORD *)v90 + 2);
                  *(void *)unint64_t v13 = v96;
                  *((_DWORD *)v90 + 2) = v203;
                  *long long v90 = v179;
                }
                break;
              case 4:
                return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v13, (int *)(v13 + 12), (int *)(v13 + 24), a2 - 12);
              case 5:
                int8x16_t v97 = (uint64_t *)(v13 + 12);
                char v98 = (uint64_t *)(v13 + 24);
                unint64_t v99 = (uint64_t *)(v13 + 36);
                unint64_t result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v13, (int *)(v13 + 12), (int *)(v13 + 24), v13 + 36);
                int v101 = *(_DWORD *)(a2 - 12);
                unint64_t v100 = a2 - 12;
                if (v101 < *(_DWORD *)(v13 + 36))
                {
                  uint64_t v102 = *v99;
                  int v103 = *(_DWORD *)(v13 + 44);
                  int v104 = *(_DWORD *)(v100 + 8);
                  *unint64_t v99 = *(void *)v100;
                  *(_DWORD *)(v13 + 44) = v104;
                  *(_DWORD *)(v100 + 8) = v103;
                  *(void *)unint64_t v100 = v102;
                  if (*(_DWORD *)v99 < *(_DWORD *)v98)
                  {
                    int v105 = *(_DWORD *)(v13 + 32);
                    uint64_t v106 = *v98;
                    *char v98 = *v99;
                    *(_DWORD *)(v13 + 32) = *(_DWORD *)(v13 + 44);
                    *unint64_t v99 = v106;
                    *(_DWORD *)(v13 + 44) = v105;
                    if (*(_DWORD *)v98 < *(_DWORD *)v97)
                    {
                      int v107 = *(_DWORD *)(v13 + 20);
                      uint64_t v108 = *v97;
                      uint64_t *v97 = *v98;
                      *(_DWORD *)(v13 + 20) = *(_DWORD *)(v13 + 32);
                      *char v98 = v108;
                      *(_DWORD *)(v13 + 32) = v107;
                      if (*(_DWORD *)(v13 + 12) < *(_DWORD *)v13)
                      {
                        int v204 = *(_DWORD *)(v13 + 8);
                        uint64_t v180 = *(void *)v13;
                        *(void *)unint64_t v13 = *v97;
                        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v13 + 20);
                        uint64_t *v97 = v180;
                        *(_DWORD *)(v13 + 20) = v204;
                      }
                    }
                  }
                }
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v14 <= 287)
          {
            unint64_t v109 = v13 + 12;
            BOOL v111 = v13 == a2 || v109 == a2;
            if (a4)
            {
              if (!v111)
              {
                uint64_t v112 = 0;
                unint64_t v113 = v13;
                do
                {
                  unint64_t v115 = v109;
                  uint64_t v116 = *(void *)(v113 + 12);
                  if ((int)v116 < *(_DWORD *)v113)
                  {
                    int v117 = *(_DWORD *)(v113 + 20);
                    uint64_t v118 = v112;
                    do
                    {
                      uint64_t v119 = v13 + v118;
                      *(void *)(v119 + 12) = *(void *)(v13 + v118);
                      *(_DWORD *)(v119 + 20) = *(_DWORD *)(v13 + v118 + 8);
                      if (!v118)
                      {
                        uint64_t v114 = v13;
                        goto LABEL_119;
                      }
                      v118 -= 12;
                    }
                    while ((int)v116 < *(_DWORD *)(v119 - 12));
                    uint64_t v114 = v13 + v118 + 12;
LABEL_119:
                    *(void *)uint64_t v114 = v116;
                    *(_DWORD *)(v114 + 8) = v117;
                  }
                  unint64_t v109 = v115 + 12;
                  v112 += 12;
                  unint64_t v113 = v115;
                }
                while (v115 + 12 != a2);
              }
            }
            else if (!v111)
            {
              do
              {
                unint64_t v151 = v109;
                uint64_t v152 = *(void *)(v9 + 12);
                if ((int)v152 < *(_DWORD *)v9)
                {
                  int v153 = *(_DWORD *)(v9 + 20);
                  unint64_t v154 = v151;
                  do
                  {
                    unint64_t v155 = v154;
                    uint64_t v156 = *(void *)(v154 - 12);
                    v154 -= 12;
                    *(void *)unint64_t v155 = v156;
                    *(_DWORD *)(v155 + 8) = *(_DWORD *)(v155 - 4);
                  }
                  while ((int)v152 < *(_DWORD *)(v155 - 24));
                  *(void *)unint64_t v154 = v152;
                  *(_DWORD *)(v154 + 8) = v153;
                }
                unint64_t v109 = v151 + 12;
                unint64_t v9 = v151;
              }
              while (v151 + 12 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v13 != a2)
            {
              int64_t v120 = (unint64_t)(v15 - 2) >> 1;
              int64_t v121 = v120;
              do
              {
                if (v120 >= v121)
                {
                  uint64_t v123 = (2 * v121) | 1;
                  long long v124 = (void *)(v13 + 12 * v123);
                  uint64_t v125 = *v124;
                  if (2 * v121 + 2 < v15)
                  {
                    unint64_t result = *(void *)((char *)v124 + 12);
                    if ((int)v125 < (int)result)
                    {
                      uint64_t v125 = *(void *)((char *)v124 + 12);
                      long long v124 = (void *)((char *)v124 + 12);
                      uint64_t v123 = 2 * v121 + 2;
                    }
                  }
                  unint64_t v126 = (void *)(v13 + 12 * v121);
                  uint64_t v127 = *v126;
                  if ((int)v125 >= (int)*v126)
                  {
                    int v128 = *((_DWORD *)v126 + 2);
                    do
                    {
                      unint64_t v129 = v124;
                      uint64_t v130 = *v124;
                      unint64_t result = *((unsigned int *)v129 + 2);
                      *((_DWORD *)v126 + 2) = result;
                      void *v126 = v130;
                      if (v120 < v123) {
                        break;
                      }
                      unint64_t result = (2 * v123) | 1;
                      long long v124 = (void *)(v13 + 12 * result);
                      uint64_t v131 = 2 * v123 + 2;
                      uint64_t v132 = *v124;
                      if (v131 < v15 && (int)v132 < (int)*(void *)((char *)v124 + 12))
                      {
                        uint64_t v132 = *(void *)((char *)v124 + 12);
                        long long v124 = (void *)((char *)v124 + 12);
                        unint64_t result = v131;
                      }
                      unint64_t v126 = v129;
                      uint64_t v123 = result;
                    }
                    while ((int)v132 >= (int)v127);
                    *unint64_t v129 = v127;
                    *((_DWORD *)v129 + 2) = v128;
                  }
                }
                BOOL v122 = v121-- <= 0;
              }
              while (!v122);
              int64_t v133 = v14 / 0xCuLL;
              do
              {
                uint64_t v134 = 0;
                int v205 = *(_DWORD *)(v13 + 8);
                uint64_t v181 = *(void *)v13;
                v135 = (_DWORD *)v13;
                do
                {
                  uint64_t v137 = &v135[3 * v134 + 3];
                  uint64_t v138 = (2 * v134) | 1;
                  uint64_t v139 = 2 * v134 + 2;
                  if (v139 < v133)
                  {
                    unint64_t result = v137[3];
                    if (*v137 < (int)result)
                    {
                      v137 += 3;
                      uint64_t v138 = v139;
                    }
                  }
                  uint64_t v136 = *(void *)v137;
                  v135[2] = v137[2];
                  *(void *)v135 = v136;
                  v135 = v137;
                  uint64_t v134 = v138;
                }
                while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                a2 -= 12;
                if (v137 == (_DWORD *)a2)
                {
                  v137[2] = v205;
                  *(void *)uint64_t v137 = v181;
                }
                else
                {
                  uint64_t v140 = *(void *)a2;
                  v137[2] = *(_DWORD *)(a2 + 8);
                  *(void *)uint64_t v137 = v140;
                  *(_DWORD *)(a2 + 8) = v205;
                  *(void *)a2 = v181;
                  uint64_t v141 = (uint64_t)v137 - v13 + 12;
                  if (v141 >= 13)
                  {
                    unint64_t v142 = (v141 / 0xCuLL - 2) >> 1;
                    unint64_t v143 = (void *)(v13 + 12 * v142);
                    uint64_t v144 = *(void *)v137;
                    if (*(_DWORD *)v143 < (int)*(void *)v137)
                    {
                      int v145 = v137[2];
                      do
                      {
                        uint64_t v146 = v143;
                        uint64_t v147 = *v143;
                        v137[2] = v146[2];
                        *(void *)uint64_t v137 = v147;
                        if (!v142) {
                          break;
                        }
                        unint64_t v142 = (v142 - 1) >> 1;
                        unint64_t v143 = (void *)(v13 + 12 * v142);
                        uint64_t v137 = v146;
                      }
                      while (*(_DWORD *)v143 < (int)v144);
                      *(void *)uint64_t v146 = v144;
                      v146[2] = v145;
                    }
                  }
                }
                BOOL v122 = v133-- <= 2;
              }
              while (!v122);
            }
            return result;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          unint64_t v17 = v13 + 12 * ((unint64_t)v15 >> 1);
          int v18 = *v10;
          if ((unint64_t)v14 >= 0x601) {
            break;
          }
          int v21 = *(_DWORD *)v13;
          if (*(_DWORD *)v13 < *(_DWORD *)v17)
          {
            if (v18 >= v21)
            {
              int v192 = *(_DWORD *)(v17 + 8);
              uint64_t v168 = *(void *)v17;
              uint64_t v43 = *(void *)v13;
              *(_DWORD *)(v17 + 8) = *(_DWORD *)(v13 + 8);
              *(void *)unint64_t v17 = v43;
              *(_DWORD *)(v13 + 8) = v192;
              *(void *)unint64_t v13 = v168;
              if (*v10 >= *(_DWORD *)v13) {
                goto LABEL_33;
              }
              int v185 = *(_DWORD *)(v13 + 8);
              uint64_t v161 = *(void *)v13;
              uint64_t v44 = *(void *)v10;
              *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 - 4);
              *(void *)unint64_t v13 = v44;
            }
            else
            {
              int v185 = *(_DWORD *)(v17 + 8);
              uint64_t v161 = *(void *)v17;
              uint64_t v22 = *(void *)v10;
              *(_DWORD *)(v17 + 8) = *(_DWORD *)(a2 - 4);
              *(void *)unint64_t v17 = v22;
            }
            *(_DWORD *)(a2 - 4) = v185;
            *(void *)double v10 = v161;
LABEL_33:
            --a3;
            uint64_t v27 = *(void *)v13;
            if ((a4 & 1) == 0) {
              goto LABEL_55;
            }
            goto LABEL_34;
          }
          if (v18 >= v21) {
            goto LABEL_33;
          }
          int v188 = *(_DWORD *)(v13 + 8);
          uint64_t v164 = *(void *)v13;
          uint64_t v25 = *(void *)v10;
          *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 - 4);
          *(void *)unint64_t v13 = v25;
          *(_DWORD *)(a2 - 4) = v188;
          *(void *)double v10 = v164;
          if (*(_DWORD *)v13 >= *(_DWORD *)v17) {
            goto LABEL_33;
          }
          int v189 = *(_DWORD *)(v17 + 8);
          uint64_t v165 = *(void *)v17;
          uint64_t v26 = *(void *)v13;
          *(_DWORD *)(v17 + 8) = *(_DWORD *)(v13 + 8);
          *(void *)unint64_t v17 = v26;
          uint64_t v27 = v165;
          *(_DWORD *)(v13 + 8) = v189;
          *(void *)unint64_t v13 = v165;
          --a3;
          if (a4) {
            goto LABEL_34;
          }
LABEL_55:
          int v45 = *(_DWORD *)(v13 + 8);
          if (*(_DWORD *)(v13 - 12) < (int)v27) {
            goto LABEL_56;
          }
          if ((int)v27 < *v10)
          {
            do
            {
              int v82 = *(_DWORD *)(v13 + 12);
              v13 += 12;
            }
            while ((int)v27 >= v82);
          }
          else
          {
            unint64_t v83 = v13 + 12;
            do
            {
              unint64_t v13 = v83;
              if (v83 >= a2) {
                break;
              }
              v83 += 12;
            }
            while ((int)v27 >= *(_DWORD *)v13);
          }
          unint64_t v84 = a2;
          if (v13 < a2)
          {
            unint64_t v84 = a2;
            do
            {
              int v85 = *(_DWORD *)(v84 - 12);
              v84 -= 12;
            }
            while ((int)v27 < v85);
          }
          while (v13 < v84)
          {
            int v202 = *(_DWORD *)(v13 + 8);
            uint64_t v178 = *(void *)v13;
            uint64_t v86 = *(void *)v84;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v84 + 8);
            *(void *)unint64_t v13 = v86;
            *(_DWORD *)(v84 + 8) = v202;
            *(void *)unint64_t v84 = v178;
            do
            {
              int v87 = *(_DWORD *)(v13 + 12);
              v13 += 12;
            }
            while ((int)v27 >= v87);
            do
            {
              int v88 = *(_DWORD *)(v84 - 12);
              v84 -= 12;
            }
            while ((int)v27 < v88);
          }
          BOOL v4 = v13 - 12 >= v9;
          BOOL v5 = v13 - 12 == v9;
          if (v13 - 12 != v9)
          {
            uint64_t v89 = *(void *)(v13 - 12);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v13 - 4);
            *(void *)unint64_t v9 = v89;
          }
          a4 = 0;
          *(void *)(v13 - 12) = v27;
          *(_DWORD *)(v13 - 4) = v45;
        }
        int v19 = *(_DWORD *)v17;
        if (*(_DWORD *)v17 >= *(_DWORD *)v13)
        {
          if (v18 < v19)
          {
            int v186 = *(_DWORD *)(v17 + 8);
            uint64_t v162 = *(void *)v17;
            uint64_t v23 = *(void *)v10;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(a2 - 4);
            *(void *)unint64_t v17 = v23;
            *(_DWORD *)(a2 - 4) = v186;
            *(void *)double v10 = v162;
            if (*(_DWORD *)v17 < *(_DWORD *)v13)
            {
              int v187 = *(_DWORD *)(v13 + 8);
              uint64_t v163 = *(void *)v13;
              uint64_t v24 = *(void *)v17;
              *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
              *(void *)unint64_t v13 = v24;
              *(_DWORD *)(v17 + 8) = v187;
              *(void *)unint64_t v17 = v163;
            }
          }
        }
        else
        {
          if (v18 >= v19)
          {
            int v190 = *(_DWORD *)(v13 + 8);
            uint64_t v166 = *(void *)v13;
            uint64_t v28 = *(void *)v17;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
            *(void *)unint64_t v13 = v28;
            *(_DWORD *)(v17 + 8) = v190;
            *(void *)unint64_t v17 = v166;
            if (*v10 >= *(_DWORD *)v17) {
              goto LABEL_24;
            }
            int v184 = *(_DWORD *)(v17 + 8);
            uint64_t v160 = *(void *)v17;
            uint64_t v29 = *(void *)v10;
            *(_DWORD *)(v17 + 8) = *(_DWORD *)(a2 - 4);
            *(void *)unint64_t v17 = v29;
          }
          else
          {
            int v184 = *(_DWORD *)(v13 + 8);
            uint64_t v160 = *(void *)v13;
            uint64_t v20 = *(void *)v10;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 - 4);
            *(void *)unint64_t v13 = v20;
          }
          *(_DWORD *)(a2 - 4) = v184;
          *(void *)double v10 = v160;
        }
LABEL_24:
        uint64_t v30 = (uint64_t *)(v13 + 12);
        unint64_t v31 = v13 + 12 * v16;
        int v34 = *(_DWORD *)(v31 - 12);
        uint64_t v32 = (uint64_t *)(v31 - 12);
        int v33 = v34;
        int v35 = *v11;
        if (v34 >= *(_DWORD *)(v13 + 12))
        {
          if (v35 < v33)
          {
            int v191 = *((_DWORD *)v32 + 2);
            uint64_t v167 = *v32;
            uint64_t v39 = *(void *)v11;
            *((_DWORD *)v32 + 2) = *(_DWORD *)(a2 - 16);
            *uint64_t v32 = v39;
            *(_DWORD *)(a2 - 16) = v191;
            *(void *)uint64_t v11 = v167;
            if (*(_DWORD *)v32 < *(_DWORD *)v30)
            {
              uint64_t v40 = *v30;
              int v41 = *(_DWORD *)(v13 + 20);
              int v42 = *((_DWORD *)v32 + 2);
              *uint64_t v30 = *v32;
              *(_DWORD *)(v13 + 20) = v42;
              *((_DWORD *)v32 + 2) = v41;
              *uint64_t v32 = v40;
            }
          }
        }
        else if (v35 >= v33)
        {
          uint64_t v46 = *v30;
          int v47 = *(_DWORD *)(v13 + 20);
          int v48 = *((_DWORD *)v32 + 2);
          *uint64_t v30 = *v32;
          *(_DWORD *)(v13 + 20) = v48;
          *((_DWORD *)v32 + 2) = v47;
          *uint64_t v32 = v46;
          if (*v11 < (int)v46)
          {
            int v193 = *((_DWORD *)v32 + 2);
            uint64_t v169 = *v32;
            uint64_t v49 = *(void *)v11;
            *((_DWORD *)v32 + 2) = *(_DWORD *)(a2 - 16);
            *uint64_t v32 = v49;
            *(_DWORD *)(a2 - 16) = v193;
            *(void *)uint64_t v11 = v169;
          }
        }
        else
        {
          uint64_t v36 = *v30;
          int v37 = *(_DWORD *)(v13 + 20);
          int v38 = *(_DWORD *)(a2 - 16);
          *uint64_t v30 = *(void *)v11;
          *(_DWORD *)(v13 + 20) = v38;
          *(_DWORD *)(a2 - 16) = v37;
          *(void *)uint64_t v11 = v36;
        }
        unint64_t v50 = (uint64_t *)(v13 + 24);
        unint64_t v51 = v13 + 12 * v16;
        int v54 = *(_DWORD *)(v51 + 12);
        unint64_t v52 = (uint64_t *)(v51 + 12);
        int v53 = v54;
        int v55 = *v12;
        if (v54 >= *(_DWORD *)(v13 + 24))
        {
          if (v55 < v53)
          {
            int v194 = *((_DWORD *)v52 + 2);
            uint64_t v170 = *v52;
            uint64_t v59 = *(void *)v12;
            *((_DWORD *)v52 + 2) = *(_DWORD *)(a2 - 28);
            *unint64_t v52 = v59;
            *(_DWORD *)(a2 - 28) = v194;
            *(void *)uint64_t v12 = v170;
            if (*(_DWORD *)v52 < *(_DWORD *)v50)
            {
              uint64_t v60 = *v50;
              int v61 = *(_DWORD *)(v13 + 32);
              int v62 = *((_DWORD *)v52 + 2);
              *unint64_t v50 = *v52;
              *(_DWORD *)(v13 + 32) = v62;
              *((_DWORD *)v52 + 2) = v61;
              *unint64_t v52 = v60;
            }
          }
        }
        else if (v55 >= v53)
        {
          uint64_t v63 = *v50;
          int v64 = *(_DWORD *)(v13 + 32);
          int v65 = *((_DWORD *)v52 + 2);
          *unint64_t v50 = *v52;
          *(_DWORD *)(v13 + 32) = v65;
          *((_DWORD *)v52 + 2) = v64;
          *unint64_t v52 = v63;
          if (*v12 < (int)v63)
          {
            int v195 = *((_DWORD *)v52 + 2);
            uint64_t v171 = *v52;
            uint64_t v66 = *(void *)v12;
            *((_DWORD *)v52 + 2) = *(_DWORD *)(a2 - 28);
            *unint64_t v52 = v66;
            *(_DWORD *)(a2 - 28) = v195;
            *(void *)uint64_t v12 = v171;
          }
        }
        else
        {
          uint64_t v56 = *v50;
          int v57 = *(_DWORD *)(v13 + 32);
          int v58 = *(_DWORD *)(a2 - 28);
          *unint64_t v50 = *(void *)v12;
          *(_DWORD *)(v13 + 32) = v58;
          *(_DWORD *)(a2 - 28) = v57;
          *(void *)uint64_t v12 = v56;
        }
        int v67 = *(_DWORD *)v17;
        int v68 = *(_DWORD *)v52;
        if (*(_DWORD *)v17 >= *(_DWORD *)v32)
        {
          if (v68 < v67)
          {
            int v197 = *(_DWORD *)(v17 + 8);
            uint64_t v173 = *(void *)v17;
            *(void *)unint64_t v17 = *v52;
            *(_DWORD *)(v17 + 8) = *((_DWORD *)v52 + 2);
            *((_DWORD *)v52 + 2) = v197;
            *unint64_t v52 = v173;
            if (*(_DWORD *)v17 < *(_DWORD *)v32)
            {
              int v198 = *((_DWORD *)v32 + 2);
              uint64_t v174 = *v32;
              *uint64_t v32 = *(void *)v17;
              *((_DWORD *)v32 + 2) = *(_DWORD *)(v17 + 8);
              *(_DWORD *)(v17 + 8) = v198;
              *(void *)unint64_t v17 = v174;
            }
          }
        }
        else
        {
          if (v68 >= v67)
          {
            int v199 = *((_DWORD *)v32 + 2);
            uint64_t v175 = *v32;
            *uint64_t v32 = *(void *)v17;
            *((_DWORD *)v32 + 2) = *(_DWORD *)(v17 + 8);
            *(_DWORD *)(v17 + 8) = v199;
            *(void *)unint64_t v17 = v175;
            if (*(_DWORD *)v52 >= *(_DWORD *)v17) {
              goto LABEL_54;
            }
            int v196 = *(_DWORD *)(v17 + 8);
            uint64_t v172 = *(void *)v17;
            *(void *)unint64_t v17 = *v52;
            *(_DWORD *)(v17 + 8) = *((_DWORD *)v52 + 2);
          }
          else
          {
            int v196 = *((_DWORD *)v32 + 2);
            uint64_t v172 = *v32;
            *uint64_t v32 = *v52;
            *((_DWORD *)v32 + 2) = *((_DWORD *)v52 + 2);
          }
          *((_DWORD *)v52 + 2) = v196;
          *unint64_t v52 = v172;
        }
LABEL_54:
        int v200 = *(_DWORD *)(v13 + 8);
        uint64_t v176 = *(void *)v13;
        uint64_t v69 = *(void *)v17;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v17 + 8);
        *(void *)unint64_t v13 = v69;
        *(_DWORD *)(v17 + 8) = v200;
        *(void *)unint64_t v17 = v176;
        --a3;
        uint64_t v27 = *(void *)v13;
        if ((a4 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_34:
        int v45 = *(_DWORD *)(v13 + 8);
LABEL_56:
        uint64_t v70 = 0;
        do
        {
          int v71 = *(_DWORD *)(v13 + v70 + 12);
          v70 += 12;
        }
        while ((int)v27 > v71);
        unint64_t v72 = v13 + v70;
        unint64_t v73 = a2;
        if (v70 == 12)
        {
          unint64_t v73 = a2;
          do
          {
            if (v72 >= v73) {
              break;
            }
            int v75 = *(_DWORD *)(v73 - 12);
            v73 -= 12;
          }
          while ((int)v27 <= v75);
        }
        else
        {
          do
          {
            int v74 = *(_DWORD *)(v73 - 12);
            v73 -= 12;
          }
          while ((int)v27 <= v74);
        }
        v13 += v70;
        if (v72 < v73)
        {
          unint64_t v76 = v73;
          do
          {
            int v201 = *(_DWORD *)(v13 + 8);
            uint64_t v177 = *(void *)v13;
            uint64_t v77 = *(void *)v76;
            *(_DWORD *)(v13 + 8) = *(_DWORD *)(v76 + 8);
            *(void *)unint64_t v13 = v77;
            *(_DWORD *)(v76 + 8) = v201;
            *(void *)unint64_t v76 = v177;
            do
            {
              int v78 = *(_DWORD *)(v13 + 12);
              v13 += 12;
            }
            while ((int)v27 > v78);
            do
            {
              int v79 = *(_DWORD *)(v76 - 12);
              v76 -= 12;
            }
            while ((int)v27 <= v79);
          }
          while (v13 < v76);
        }
        if (v13 - 12 != v9)
        {
          uint64_t v80 = *(void *)(v13 - 12);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v13 - 4);
          *(void *)unint64_t v9 = v80;
        }
        *(void *)(v13 - 12) = v27;
        *(_DWORD *)(v13 - 4) = v45;
        if (v72 >= v73) {
          break;
        }
LABEL_75:
        unint64_t result = std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *,false>(v9, v13 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v81 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v9, (uint64_t *)(v13 - 12));
      unint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>((uint64_t *)v13, (uint64_t *)a2);
      if (result) {
        break;
      }
      if (!v81) {
        goto LABEL_75;
      }
    }
    a2 = v13 - 12;
    if (!v81) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (uint64_t *)((char *)a2 - 12);
      if (*((_DWORD *)a2 - 3) < *(_DWORD *)a1) {
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      uint64_t v7 = (uint64_t *)((char *)a1 + 12);
      int v8 = *((_DWORD *)a1 + 3);
      int v6 = (uint64_t *)((char *)a2 - 12);
      int v9 = *((_DWORD *)a2 - 3);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v9 < v8)
        {
          int v34 = *((_DWORD *)a1 + 5);
          uint64_t v35 = *v7;
          int v36 = *((_DWORD *)a2 - 1);
          *uint64_t v7 = *v6;
          *((_DWORD *)a1 + 5) = v36;
          *int v6 = v35;
          *((_DWORD *)a2 - 1) = v34;
          if (*((_DWORD *)a1 + 3) < *(_DWORD *)a1)
          {
            int v37 = *((_DWORD *)a1 + 2);
            uint64_t v38 = *a1;
            *a1 = *v7;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            *uint64_t v7 = v38;
            *((_DWORD *)a1 + 5) = v37;
          }
        }
      }
      else if (v9 >= v8)
      {
        int v43 = *((_DWORD *)a1 + 2);
        uint64_t v44 = *a1;
        *a1 = *v7;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        *uint64_t v7 = v44;
        *((_DWORD *)a1 + 5) = v43;
        if (*(_DWORD *)v6 < *((_DWORD *)a1 + 3))
        {
          int v45 = *((_DWORD *)a1 + 5);
          uint64_t v46 = *v7;
          int v47 = *((_DWORD *)a2 - 1);
          *uint64_t v7 = *v6;
          *((_DWORD *)a1 + 5) = v47;
          *int v6 = v46;
          *((_DWORD *)a2 - 1) = v45;
        }
      }
      else
      {
LABEL_7:
        int v10 = *((_DWORD *)a1 + 2);
        uint64_t v11 = *a1;
        int v12 = *((_DWORD *)v6 + 2);
        *a1 = *v6;
        *((_DWORD *)a1 + 2) = v12;
        *int v6 = v11;
        *((_DWORD *)v6 + 2) = v10;
      }
      return result;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(a1, (int *)a1 + 3, (int *)a1 + 6, (uint64_t)a2 - 12);
      return 1;
    case 5uLL:
      uint64_t v20 = (uint64_t *)((char *)a1 + 12);
      int v21 = a1 + 3;
      uint64_t v22 = (uint64_t *)((char *)a1 + 36);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(a1, (int *)a1 + 3, (int *)a1 + 6, (uint64_t)a1 + 36);
      int v24 = *((_DWORD *)a2 - 3);
      uint64_t v23 = (uint64_t)a2 - 12;
      if (v24 < *((_DWORD *)a1 + 9))
      {
        int v25 = *((_DWORD *)a1 + 11);
        uint64_t v26 = *v22;
        int v27 = *(_DWORD *)(v23 + 8);
        *uint64_t v22 = *(void *)v23;
        *((_DWORD *)a1 + 11) = v27;
        *(void *)uint64_t v23 = v26;
        *(_DWORD *)(v23 + 8) = v25;
        if (*(_DWORD *)v22 < *(_DWORD *)v21)
        {
          int v28 = *((_DWORD *)a1 + 8);
          uint64_t v29 = *v21;
          uint64_t *v21 = *v22;
          *((_DWORD *)a1 + 8) = *((_DWORD *)a1 + 11);
          *uint64_t v22 = v29;
          *((_DWORD *)a1 + 11) = v28;
          if (*(_DWORD *)v21 < *(_DWORD *)v20)
          {
            int v30 = *((_DWORD *)a1 + 5);
            uint64_t v31 = *v20;
            uint64_t *v20 = *v21;
            *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
            uint64_t *v21 = v31;
            *((_DWORD *)a1 + 8) = v30;
            if (*((_DWORD *)a1 + 3) < *(_DWORD *)a1)
            {
              int v32 = *((_DWORD *)a1 + 2);
              uint64_t v33 = *a1;
              *a1 = *v20;
              *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
              uint64_t *v20 = v33;
              *((_DWORD *)a1 + 5) = v32;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v13 = a1 + 3;
      int v14 = *((_DWORD *)a1 + 6);
      uint64_t v15 = (uint64_t *)((char *)a1 + 12);
      int v16 = *((_DWORD *)a1 + 3);
      int v17 = *(_DWORD *)a1;
      if (v16 >= *(_DWORD *)a1)
      {
        if (v14 < v16)
        {
          int v39 = *((_DWORD *)a1 + 5);
          uint64_t v40 = *v15;
          *uint64_t v15 = *v13;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *unint64_t v13 = v40;
          *((_DWORD *)a1 + 8) = v39;
          if (*(_DWORD *)v15 < v17)
          {
            int v41 = *((_DWORD *)a1 + 2);
            uint64_t v42 = *a1;
            *a1 = *v15;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
            *uint64_t v15 = v42;
            *((_DWORD *)a1 + 5) = v41;
          }
        }
      }
      else if (v14 >= v16)
      {
        int v48 = *((_DWORD *)a1 + 2);
        uint64_t v49 = *a1;
        *a1 = *v15;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 5);
        *uint64_t v15 = v49;
        *((_DWORD *)a1 + 5) = v48;
        if (v14 < *((_DWORD *)a1 + 3))
        {
          int v50 = *((_DWORD *)a1 + 5);
          uint64_t v51 = *v15;
          *uint64_t v15 = *v13;
          *((_DWORD *)a1 + 5) = *((_DWORD *)a1 + 8);
          *unint64_t v13 = v51;
          *((_DWORD *)a1 + 8) = v50;
        }
      }
      else
      {
        int v18 = *((_DWORD *)a1 + 2);
        uint64_t v19 = *a1;
        *a1 = *v13;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 8);
        *unint64_t v13 = v19;
        *((_DWORD *)a1 + 8) = v18;
      }
      uint64_t v52 = (uint64_t)a1 + 36;
      if ((uint64_t *)((char *)a1 + 36) == a2) {
        return 1;
      }
      uint64_t v53 = 0;
      int v54 = 0;
      break;
  }
  while (1)
  {
    uint64_t v55 = *(void *)v52;
    if ((int)*(void *)v52 < *(_DWORD *)v13) {
      break;
    }
LABEL_36:
    unint64_t v13 = (uint64_t *)v52;
    v53 += 12;
    v52 += 12;
    if ((uint64_t *)v52 == a2) {
      return 1;
    }
  }
  int v56 = *(_DWORD *)(v52 + 8);
  uint64_t v57 = v53;
  do
  {
    uint64_t v58 = (uint64_t)a1 + v57;
    *(void *)(v58 + 36) = *(uint64_t *)((char *)a1 + v57 + 24);
    *(_DWORD *)(v58 + 44) = *(_DWORD *)((char *)a1 + v57 + 32);
    if (v57 == -24)
    {
      *a1 = v55;
      *((_DWORD *)a1 + 2) = v56;
      if (++v54 != 8) {
        goto LABEL_36;
      }
      return v52 + 12 == (void)a2;
    }
    v57 -= 12;
  }
  while ((int)v55 < *(_DWORD *)(v58 + 12));
  uint64_t v59 = (uint64_t)a1 + v57;
  *(void *)(v59 + 36) = v55;
  *(_DWORD *)(v59 + 44) = v56;
  if (++v54 != 8) {
    goto LABEL_36;
  }
  return v52 + 12 == (void)a2;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::ProbeBooleanVariables(double,absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::BooleanVariable_tag_,int> const>,operations_research::sat::Model *,BOOL)::$_0 &,operations_research::sat::IntegerLiteral *>(uint64_t *result, int *a2, int *a3, uint64_t a4)
{
  int v4 = *a2;
  int v5 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v5 < v4)
    {
      int v9 = a2[2];
      uint64_t v10 = *(void *)a2;
      int v11 = a3[2];
      *(void *)a2 = *(void *)a3;
      a2[2] = v11;
      *(void *)a3 = v10;
      a3[2] = v9;
      if (*a2 < *(_DWORD *)result)
      {
        int v12 = *((_DWORD *)result + 2);
        uint64_t v13 = *result;
        int v14 = a2[2];
        *BOOL result = *(void *)a2;
        *((_DWORD *)result + 2) = v14;
        *(void *)a2 = v13;
        a2[2] = v12;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      int v6 = *((_DWORD *)result + 2);
      uint64_t v7 = *result;
      int v8 = a3[2];
      *BOOL result = *(void *)a3;
      *((_DWORD *)result + 2) = v8;
LABEL_9:
      *(void *)a3 = v7;
      a3[2] = v6;
      goto LABEL_10;
    }
    int v15 = *((_DWORD *)result + 2);
    uint64_t v16 = *result;
    int v17 = a2[2];
    *BOOL result = *(void *)a2;
    *((_DWORD *)result + 2) = v17;
    *(void *)a2 = v16;
    a2[2] = v15;
    if (*a3 < (int)v16)
    {
      int v6 = a2[2];
      uint64_t v7 = *(void *)a2;
      int v18 = a3[2];
      *(void *)a2 = *(void *)a3;
      a2[2] = v18;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < *a3)
  {
    int v19 = a3[2];
    uint64_t v20 = *(void *)a3;
    int v21 = *(_DWORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    a3[2] = v21;
    *(void *)a4 = v20;
    *(_DWORD *)(a4 + 8) = v19;
    if (*a3 < *a2)
    {
      int v22 = a2[2];
      uint64_t v23 = *(void *)a2;
      int v24 = a3[2];
      *(void *)a2 = *(void *)a3;
      a2[2] = v24;
      *(void *)a3 = v23;
      a3[2] = v22;
      if (*a2 < *(_DWORD *)result)
      {
        int v25 = *((_DWORD *)result + 2);
        uint64_t v26 = *result;
        int v27 = a2[2];
        *BOOL result = *(void *)a2;
        *((_DWORD *)result + 2) = v27;
        *(void *)a2 = v26;
        a2[2] = v25;
      }
    }
  }
  return result;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *,false>(unint64_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  uint64_t v10 = (int8x16_t *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
    if (v5 || !v4) {
      break;
    }
    if (v11 <= 191)
    {
      unint64_t v84 = (int8x16_t *)&v10->u64[1];
      BOOL v86 = v10 == a2 || v84 == a2;
      if (a4)
      {
        if (!v86)
        {
          uint64_t v87 = 0;
          int v88 = v10;
          do
          {
            __int32 v90 = v88->i32[3];
            __int32 v91 = v88->i32[1];
            int v88 = v84;
            if (v90 < v91)
            {
              uint64_t v92 = v84->i64[0];
              unint64_t v93 = HIDWORD(v88->i64[0]);
              uint64_t v94 = v87;
              do
              {
                *(uint64_t *)((char *)&v10->i64[1] + v94) = *(uint64_t *)((char *)v10->i64 + v94);
                if (!v94)
                {
                  uint64_t v89 = (uint64_t *)v10;
                  goto LABEL_129;
                }
                int v95 = *(__int32 *)((char *)&v10->i32[-1] + v94);
                v94 -= 8;
              }
              while (v95 > (int)v93);
              uint64_t v89 = (uint64_t *)((char *)&v10->i64[1] + v94);
LABEL_129:
              *uint64_t v89 = v92;
            }
            unint64_t v84 = (int8x16_t *)&v88->u64[1];
            v87 += 8;
          }
          while (&v88->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v86)
      {
        do
        {
          int v123 = *(_DWORD *)(v9 + 12);
          int v124 = *(_DWORD *)(v9 + 4);
          unint64_t v9 = (unint64_t)v84;
          if (v123 < v124)
          {
            uint64_t v125 = v84->i64[0];
            unint64_t v126 = HIDWORD(v84->i64[0]);
            uint64_t v127 = (void *)v9;
            do
            {
              int v128 = v127;
              uint64_t v129 = *--v127;
              *int v128 = v129;
            }
            while (*((_DWORD *)v128 - 3) > (int)v126);
            void *v127 = v125;
          }
          unint64_t v84 = (int8x16_t *)(v9 + 8);
        }
        while ((int8x16_t *)(v9 + 8) != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v96 = (unint64_t)(v12 - 2) >> 1;
        int64_t v97 = v96;
        do
        {
          if (v96 >= v97)
          {
            uint64_t v99 = (2 * v97) | 1;
            unint64_t v100 = &v10->i8[8 * v99];
            if (2 * v97 + 2 < v12)
            {
              BOOL v98 = *((_DWORD *)v100 + 1) < *((_DWORD *)v100 + 3);
              v100 += 8 * v98;
              if (v98) {
                uint64_t v99 = 2 * v97 + 2;
              }
            }
            int v101 = &v10->i8[8 * v97];
            if (*((_DWORD *)v100 + 1) >= *((_DWORD *)v101 + 1))
            {
              uint64_t v102 = *(void *)v101;
              uint64_t v103 = HIDWORD(*(void *)v101);
              do
              {
                int v104 = v101;
                int v101 = v100;
                *(void *)int v104 = *(void *)v100;
                if (v96 < v99) {
                  break;
                }
                uint64_t v105 = (2 * v99) | 1;
                unint64_t v100 = &v10->i8[8 * v105];
                uint64_t v106 = 2 * v99 + 2;
                if (v106 < v12)
                {
                  BOOL v98 = *((_DWORD *)v100 + 1) < *((_DWORD *)v100 + 3);
                  v100 += 8 * v98;
                  if (v98) {
                    uint64_t v105 = v106;
                  }
                }
                BOOL result = (unint64_t *)*((unsigned int *)v100 + 1);
                uint64_t v99 = v105;
              }
              while ((int)result >= (int)v103);
              *(void *)int v101 = v102;
            }
          }
          BOOL v98 = v97-- <= 0;
        }
        while (!v98);
        uint64_t v107 = (unint64_t)v11 >> 3;
        do
        {
          uint64_t v108 = 0;
          uint64_t v109 = v10->i64[0];
          i64 = v10->i64;
          do
          {
            uint64_t v111 = (uint64_t)&i64[v108 + 1];
            uint64_t v112 = (2 * v108) | 1;
            uint64_t v113 = 2 * v108 + 2;
            if (v113 < v107)
            {
              int v114 = *(_DWORD *)(v111 + 4);
              int v115 = *(_DWORD *)(v111 + 12);
              v111 += 8 * (v114 < v115);
              if (v114 < v115) {
                uint64_t v112 = v113;
              }
            }
            void *i64 = *(void *)v111;
            i64 = (void *)v111;
            uint64_t v108 = v112;
          }
          while (v112 <= (uint64_t)((unint64_t)(v107 - 2) >> 1));
          a2 = (int8x16_t *)((char *)a2 - 8);
          if ((int8x16_t *)v111 == a2)
          {
            *(void *)uint64_t v111 = v109;
          }
          else
          {
            *(void *)uint64_t v111 = a2->i64[0];
            a2->i64[0] = v109;
            uint64_t v116 = v111 - (void)v10 + 8;
            if (v116 >= 9)
            {
              unint64_t v117 = (((unint64_t)v116 >> 3) - 2) >> 1;
              uint64_t v118 = &v10->i8[8 * v117];
              if (*((_DWORD *)v118 + 1) < *(_DWORD *)(v111 + 4))
              {
                uint64_t v119 = *(void *)v111;
                uint64_t v120 = HIDWORD(*(void *)v111);
                do
                {
                  int64_t v121 = (void *)v111;
                  uint64_t v111 = (uint64_t)v118;
                  *int64_t v121 = *(void *)v118;
                  if (!v117) {
                    break;
                  }
                  unint64_t v117 = (v117 - 1) >> 1;
                  uint64_t v118 = &v10->i8[8 * v117];
                }
                while (*((_DWORD *)v118 + 1) < (int)v120);
                *(void *)uint64_t v111 = v119;
              }
            }
          }
          BOOL v98 = v107-- <= 2;
        }
        while (!v98);
      }
      return result;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    int v14 = &v10->i8[8 * ((unint64_t)v12 >> 1)];
    __int32 v15 = a2[-1].i32[3];
    if ((unint64_t)v11 < 0x401)
    {
      __int32 v18 = v10->i32[1];
      if (v18 < *((_DWORD *)v14 + 1))
      {
        uint64_t v19 = *(void *)v14;
        if (v15 < v18)
        {
          *(void *)int v14 = a2[-1].i64[1];
          goto LABEL_32;
        }
        *(void *)int v14 = v10->i64[0];
        v10->i64[0] = v19;
        if (a2[-1].i32[3] < SHIDWORD(v19))
        {
          v10->i64[0] = a2[-1].i64[1];
LABEL_32:
          a2[-1].i64[1] = v19;
        }
LABEL_33:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      if (v15 >= v18) {
        goto LABEL_33;
      }
      uint64_t v22 = v10->i64[0];
      v10->i64[0] = a2[-1].i64[1];
      a2[-1].i64[1] = v22;
      if (v10->i32[1] >= *((_DWORD *)v14 + 1)) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)v14;
      *(void *)int v14 = v10->i64[0];
      v10->i64[0] = v23;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
      goto LABEL_34;
    }
    __int32 v16 = *((_DWORD *)v14 + 1);
    if (v16 >= v10->i32[1])
    {
      if (v15 < v16)
      {
        uint64_t v20 = *(void *)v14;
        *(void *)int v14 = a2[-1].i64[1];
        a2[-1].i64[1] = v20;
        if (*((_DWORD *)v14 + 1) < v10->i32[1])
        {
          uint64_t v21 = v10->i64[0];
          v10->i64[0] = *(void *)v14;
          *(void *)int v14 = v21;
        }
      }
    }
    else
    {
      uint64_t v17 = v10->i64[0];
      if (v15 >= v16)
      {
        v10->i64[0] = *(void *)v14;
        *(void *)int v14 = v17;
        if (a2[-1].i32[3] >= SHIDWORD(v17)) {
          goto LABEL_24;
        }
        *(void *)int v14 = a2[-1].i64[1];
      }
      else
      {
        v10->i64[0] = a2[-1].i64[1];
      }
      a2[-1].i64[1] = v17;
    }
LABEL_24:
    int v24 = &v10->i8[8 * v13];
    int v25 = v24 - 8;
    __int32 v26 = *((_DWORD *)v24 - 1);
    __int32 v27 = a2[-1].i32[1];
    if (v26 >= v10->i32[3])
    {
      if (v27 < v26)
      {
        uint64_t v29 = *(void *)v25;
        *(void *)int v25 = a2[-1].i64[0];
        a2[-1].i64[0] = v29;
        if (*((_DWORD *)v25 + 1) < v10->i32[3])
        {
          uint64_t v30 = v10->i64[1];
          v10->i64[1] = *(void *)v25;
          *(void *)int v25 = v30;
        }
      }
    }
    else
    {
      uint64_t v28 = v10->i64[1];
      if (v27 >= v26)
      {
        v10->i64[1] = *(void *)v25;
        *(void *)int v25 = v28;
        if (a2[-1].i32[1] >= SHIDWORD(v28)) {
          goto LABEL_38;
        }
        *(void *)int v25 = a2[-1].i64[0];
      }
      else
      {
        v10->i64[1] = a2[-1].i64[0];
      }
      a2[-1].i64[0] = v28;
    }
LABEL_38:
    int v32 = &v10->i8[8 * v13];
    uint64_t v33 = v32 + 8;
    __int32 v34 = *((_DWORD *)v32 + 3);
    __int32 v35 = a2[-2].i32[3];
    if (v34 >= v10[1].i32[1])
    {
      if (v35 < v34)
      {
        uint64_t v37 = *(void *)v33;
        *(void *)uint64_t v33 = a2[-2].i64[1];
        a2[-2].i64[1] = v37;
        if (*((_DWORD *)v33 + 1) < v10[1].i32[1])
        {
          uint64_t v38 = v10[1].i64[0];
          v10[1].i64[0] = *(void *)v33;
          *(void *)uint64_t v33 = v38;
        }
      }
      goto LABEL_47;
    }
    uint64_t v36 = v10[1].i64[0];
    if (v35 < v34)
    {
      v10[1].i64[0] = a2[-2].i64[1];
LABEL_46:
      a2[-2].i64[1] = v36;
      goto LABEL_47;
    }
    v10[1].i64[0] = *(void *)v33;
    *(void *)uint64_t v33 = v36;
    if (a2[-2].i32[3] < SHIDWORD(v36))
    {
      *(void *)uint64_t v33 = a2[-2].i64[1];
      goto LABEL_46;
    }
LABEL_47:
    int v39 = *((_DWORD *)v14 + 1);
    int v40 = *((_DWORD *)v25 + 1);
    int v41 = *((_DWORD *)v33 + 1);
    if (v39 >= v40)
    {
      uint64_t v42 = *(void *)v14;
      if (v41 >= v39) {
        goto LABEL_57;
      }
      uint64_t v44 = *(void *)v33;
      *(void *)int v14 = *(void *)v33;
      *(void *)uint64_t v33 = v42;
      if (v40 <= SHIDWORD(v44))
      {
        uint64_t v64 = v10->i64[0];
        v10->i64[0] = v44;
        *(void *)int v14 = v64;
        --a3;
        if (a4) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v45 = *(void *)v25;
        *(void *)int v25 = v44;
        *(void *)int v14 = v45;
        uint64_t v46 = v10->i64[0];
        v10->i64[0] = v45;
        *(void *)int v14 = v46;
        --a3;
        if (a4) {
          goto LABEL_34;
        }
      }
LABEL_58:
      uint64_t v31 = v10->i64[0];
      if (v10[-1].i32[3] < v10->i32[1]) {
        goto LABEL_59;
      }
      if (a2[-1].i32[3] > SHIDWORD(v31))
      {
        int v65 = v10;
        do
        {
          uint64_t v10 = (int8x16_t *)&v65->u64[1];
          int v66 = v65->i32[3];
          int v65 = (int8x16_t *)((char *)v65 + 8);
        }
        while (v66 <= SHIDWORD(v31));
      }
      else
      {
        int v67 = (int8x16_t *)&v10->u64[1];
        do
        {
          uint64_t v10 = v67;
          if (v67 >= a2) {
            break;
          }
          int v68 = v67->i32[1];
          int v67 = (int8x16_t *)((char *)v67 + 8);
        }
        while (v68 <= SHIDWORD(v31));
      }
      uint64_t v69 = a2;
      if (v10 < a2)
      {
        uint64_t v70 = a2;
        do
        {
          uint64_t v69 = (int8x16_t *)((char *)v70 - 8);
          int v71 = v70[-1].i32[3];
          uint64_t v70 = (int8x16_t *)((char *)v70 - 8);
        }
        while (v71 > SHIDWORD(v31));
      }
      while (v10 < v69)
      {
        uint64_t v72 = v10->i64[0];
        v10->i64[0] = v69->i64[0];
        v69->i64[0] = v72;
        do
        {
          int v73 = v10->i32[3];
          uint64_t v10 = (int8x16_t *)((char *)v10 + 8);
        }
        while (v73 <= SHIDWORD(v31));
        do
        {
          int v74 = v69[-1].i32[3];
          uint64_t v69 = (int8x16_t *)((char *)v69 - 8);
        }
        while (v74 > SHIDWORD(v31));
      }
      int v75 = &v10[-1].i64[1];
      BOOL v4 = (unint64_t)&v10[-1].u64[1] >= v9;
      BOOL v5 = &v10[-1].u64[1] == (unint64_t *)v9;
      if (&v10[-1].u64[1] != (unint64_t *)v9) {
        *(void *)unint64_t v9 = *v75;
      }
      a4 = 0;
      uint64_t *v75 = v31;
    }
    else
    {
      uint64_t v42 = *(void *)v25;
      if (v41 >= v39)
      {
        *(void *)int v25 = *(void *)v14;
        *(void *)int v14 = v42;
        if (v41 < SHIDWORD(v42))
        {
          uint64_t v47 = *(void *)v33;
          *(void *)int v14 = *(void *)v33;
          *(void *)uint64_t v33 = v42;
          uint64_t v42 = v47;
        }
LABEL_57:
        uint64_t v48 = v10->i64[0];
        v10->i64[0] = v42;
        *(void *)int v14 = v48;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
      *(void *)int v25 = *(void *)v33;
      *(void *)uint64_t v33 = v42;
      uint64_t v43 = v10->i64[0];
      v10->i64[0] = *(void *)v14;
      *(void *)int v14 = v43;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_34:
      uint64_t v31 = v10->i64[0];
LABEL_59:
      uint64_t v49 = 0;
      do
      {
        int v50 = v10->i32[v49 + 3];
        v49 += 2;
      }
      while (v50 < SHIDWORD(v31));
      uint64_t v51 = &v10->i8[v49 * 4];
      uint64_t v52 = a2;
      if (v49 == 2)
      {
        uint64_t v55 = a2;
        while (v51 < (char *)v55)
        {
          uint64_t v53 = &v55[-1].i64[1];
          int v56 = v55[-1].i32[3];
          uint64_t v55 = (int8x16_t *)((char *)v55 - 8);
          if (v56 < SHIDWORD(v31)) {
            goto LABEL_67;
          }
        }
        uint64_t v53 = (uint64_t *)v55;
LABEL_76:
        int v62 = v51 - 8;
        if (v51 - 8 == (char *)v10) {
          goto LABEL_78;
        }
LABEL_77:
        v10->i64[0] = *(void *)v62;
        goto LABEL_78;
      }
      do
      {
        uint64_t v53 = &v52[-1].i64[1];
        int v54 = v52[-1].i32[3];
        uint64_t v52 = (int8x16_t *)((char *)v52 - 8);
      }
      while (v54 >= SHIDWORD(v31));
LABEL_67:
      if (v51 >= (char *)v53) {
        goto LABEL_76;
      }
      unint64_t v57 = (unint64_t)v51;
      uint64_t v58 = v53;
      do
      {
        uint64_t v59 = *(void *)v57;
        *(void *)unint64_t v57 = *v58;
        *uint64_t v58 = v59;
        do
        {
          int v60 = *(_DWORD *)(v57 + 12);
          v57 += 8;
        }
        while (v60 < SHIDWORD(v31));
        do
          int v61 = *((_DWORD *)v58-- - 1);
        while (v61 >= SHIDWORD(v31));
      }
      while (v57 < (unint64_t)v58);
      int v62 = (char *)(v57 - 8);
      if ((int8x16_t *)(v57 - 8) != v10) {
        goto LABEL_77;
      }
LABEL_78:
      *(void *)int v62 = v31;
      if (v51 < (char *)v53) {
        goto LABEL_81;
      }
      BOOL v63 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>(v10, (int8x16_t *)v62);
      uint64_t v10 = (int8x16_t *)(v62 + 8);
      BOOL result = (unint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((int8x16_t *)(v62 + 8), a2);
      if (result)
      {
        a2 = (int8x16_t *)v62;
        if (v63) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v63)
      {
LABEL_81:
        BOOL result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *,false>(v9, v62, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = (int8x16_t *)(v62 + 8);
      }
    }
  }
  switch(v12)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].i32[3] >= v10->i32[1]) {
        return result;
      }
      uint64_t v76 = v10->i64[0];
      goto LABEL_109;
    case 3:
      __int32 v77 = v10->i32[3];
      __int32 v78 = a2[-1].i32[3];
      if (v77 < v10->i32[1])
      {
        uint64_t v76 = v10->i64[0];
        if (v78 >= v77)
        {
          v10->i64[0] = v10->i64[1];
          v10->i64[1] = v76;
          if (a2[-1].i32[3] >= SHIDWORD(v76)) {
            return result;
          }
          v10->i64[1] = a2[-1].i64[1];
        }
        else
        {
LABEL_109:
          v10->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v76;
        return result;
      }
      if (v78 < v77)
      {
        uint64_t v122 = v10->i64[1];
        v10->i64[1] = a2[-1].i64[1];
        a2[-1].i64[1] = v122;
        if (v10->i32[3] < v10->i32[1]) {
          *uint64_t v10 = vextq_s8(*v10, *v10, 8uLL);
        }
      }
      break;
    case 4:
      return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)v10, &v10->u64[1], (unint64_t *)&v10[1], &a2[-1].u64[1]);
    case 5:
      BOOL result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)v10, &v10->u64[1], (unint64_t *)&v10[1], &v10[1].u64[1]);
      if (a2[-1].i32[3] < v10[1].i32[3])
      {
        uint64_t v79 = v10[1].i64[1];
        v10[1].i64[1] = a2[-1].i64[1];
        a2[-1].i64[1] = v79;
        if (v10[1].i32[3] < v10[1].i32[1])
        {
          uint64_t v81 = v10[1].i64[0];
          uint64_t v80 = v10[1].i64[1];
          v10[1].i64[0] = v80;
          v10[1].i64[1] = v81;
          if (v10->i32[3] > SHIDWORD(v80))
          {
            uint64_t v82 = v10->i64[1];
            v10->i64[1] = v80;
            v10[1].i64[0] = v82;
            if (v10->i32[1] > SHIDWORD(v80))
            {
              uint64_t v83 = v10->i64[0];
              v10->i64[0] = v80;
              v10->i64[1] = v83;
            }
          }
        }
      }
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].i32[3] < a1->i32[1])
      {
        uint64_t v6 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v6;
      }
      return result;
    case 3:
      __int32 v7 = a1->i32[3];
      __int32 v8 = a2[-1].i32[3];
      if (v7 >= a1->i32[1])
      {
        if (v8 < v7)
        {
          uint64_t v19 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v19;
          if (a1->i32[3] < a1->i32[1]) {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      else
      {
        uint64_t v9 = a1->i64[0];
        if (v8 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v9;
          if (a2[-1].i32[3] < SHIDWORD(v9))
          {
            a1->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v9;
          }
        }
        else
        {
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v9;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a2[-1].u64[1]);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1]);
      if (a2[-1].i32[3] >= a1[1].i32[3]) {
        return 1;
      }
      uint64_t v14 = a1[1].i64[1];
      a1[1].i64[1] = a2[-1].i64[1];
      a2[-1].i64[1] = v14;
      if (a1[1].i32[3] >= a1[1].i32[1]) {
        return 1;
      }
      uint64_t v16 = a1[1].i64[0];
      uint64_t v15 = a1[1].i64[1];
      a1[1].i64[0] = v15;
      a1[1].i64[1] = v16;
      if (a1->i32[3] <= SHIDWORD(v15)) {
        return 1;
      }
      uint64_t v17 = a1->i64[1];
      a1->i64[1] = v15;
      a1[1].i64[0] = v17;
      if (a1->i32[1] <= SHIDWORD(v15)) {
        return 1;
      }
      uint64_t v18 = a1->i64[0];
      a1->i64[0] = v15;
      a1->i64[1] = v18;
      return 1;
    default:
      __int32 v10 = a1->i32[3];
      int v11 = a1->i32[1];
      int v12 = a1[1].i32[1];
      if (v10 >= v11)
      {
        if (v12 < v10)
        {
          uint64_t v21 = a1->i64[1];
          uint64_t v20 = a1[1].i64[0];
          a1->i64[1] = v20;
          a1[1].i64[0] = v21;
          if (v11 > SHIDWORD(v20))
          {
            uint64_t v22 = a1->i64[0];
            a1->i64[0] = v20;
            a1->i64[1] = v22;
          }
        }
      }
      else
      {
        uint64_t v13 = a1->i64[0];
        if (v12 >= v10)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v13;
          if (v12 >= SHIDWORD(v13)) {
            goto LABEL_29;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v13;
      }
LABEL_29:
      uint64_t v23 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      __int32 v26 = a1 + 1;
      break;
  }
  while (v23->i32[1] >= v26->i32[1])
  {
LABEL_38:
    __int32 v26 = v23;
    v24 += 8;
    uint64_t v23 = (int8x16_t *)((char *)v23 + 8);
    if (v23 == a2) {
      return 1;
    }
  }
  uint64_t v27 = v23->i64[0];
  unint64_t v28 = HIDWORD(v23->i64[0]);
  uint64_t v29 = v24;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v29) = *(uint64_t *)((char *)a1[1].i64 + v29);
    if (v29 == -16)
    {
      a1->i64[0] = v27;
      if (++v25 != 8) {
        goto LABEL_38;
      }
      return &v23->u64[1] == (unint64_t *)a2;
    }
    int v30 = *(__int32 *)((char *)&a1->i32[3] + v29);
    v29 -= 8;
  }
  while (v30 > (int)v28);
  *(uint64_t *)((char *)&a1[1].i64[1] + v29) = v27;
  if (++v25 != 8) {
    goto LABEL_38;
  }
  return &v23->u64[1] == (unint64_t *)a2;
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::FailedLiteralProbingRound(operations_research::sat::ProbingOptions,operations_research::sat::Model *)::SavedNextLiteral *>(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  int v4 = *((_DWORD *)a2 + 1);
  LODWORD(v5) = *((_DWORD *)a3 + 1);
  if (v4 < *((_DWORD *)result + 1))
  {
    unint64_t v6 = *result;
    if ((int)v5 < v4)
    {
      *BOOL result = *a3;
      *a3 = v6;
      if (*((_DWORD *)a4 + 1) >= SHIDWORD(v6)) {
        return result;
      }
      goto LABEL_12;
    }
    *BOOL result = *a2;
    *a2 = v6;
    LODWORD(v5) = *((_DWORD *)a3 + 1);
    if ((int)v5 < SHIDWORD(v6))
    {
      *a2 = *a3;
      *a3 = v6;
      unint64_t v5 = HIDWORD(v6);
    }
    goto LABEL_11;
  }
  if ((int)v5 >= v4)
  {
LABEL_11:
    if (*((_DWORD *)a4 + 1) >= (int)v5) {
      return result;
    }
    goto LABEL_12;
  }
  unint64_t v7 = *a2;
  *a2 = *a3;
  *a3 = v7;
  if (*((_DWORD *)a2 + 1) >= *((_DWORD *)result + 1))
  {
    if (*((_DWORD *)a4 + 1) >= SHIDWORD(v7)) {
      return result;
    }
  }
  else
  {
    unint64_t v8 = *result;
    *BOOL result = *a2;
    *a2 = v8;
    if (*((_DWORD *)a4 + 1) >= *((_DWORD *)a3 + 1)) {
      return result;
    }
  }
LABEL_12:
  unint64_t v9 = *a3;
  *a3 = *a4;
  *a4 = v9;
  if (*((_DWORD *)a3 + 1) < *((_DWORD *)a2 + 1))
  {
    unint64_t v10 = *a2;
    *a2 = *a3;
    *a3 = v10;
    if (*((_DWORD *)a2 + 1) < *((_DWORD *)result + 1))
    {
      unint64_t v11 = *result;
      *BOOL result = *a2;
      *a2 = v11;
    }
  }
  return result;
}

operations_research::sat::PseudoCosts *operations_research::sat::PseudoCosts::PseudoCosts(operations_research::sat::PseudoCosts *this, operations_research::sat::Model *a2)
{
  *(void *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
  *((void *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if ((unint64_t)(-1431655765
                        * ((*(void *)(*(void *)this + 48) - *(void *)(*(void *)this + 40)) >> 2)) << 32)
    std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 3, (int)(-1431655765 * ((*(void *)(*(void *)this + 48) - *(void *)(*(void *)this + 40)) >> 2)));
  return this;
}

void sub_23CD61E50(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::PseudoCosts::InitializeCosts(operations_research::sat::PseudoCosts *this, double a2)
{
  if (!*((unsigned char *)this + 16))
  {
    if (*operations_research::sat::PseudoCosts::InitializeCosts(double)::vlocal__ >= 1
      && (operations_research::sat::PseudoCosts::InitializeCosts(double)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::PseudoCosts::InitializeCosts(double)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/pseudo_costs.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/pseudo_costs.cc", 36);
      int v4 = (void *)google::LogMessage::stream((google::LogMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Initializing pseudo costs", 25);
      google::LogMessage::~LogMessage((google::LogMessage *)v8);
    }
    uint64_t v5 = *((void *)this + 3);
    if (*((void *)this + 4) != v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        operations_research::sat::IncrementalAverage::Reset(v5 + v6, a2);
        ++v7;
        uint64_t v5 = *((void *)this + 3);
        v6 += 16;
      }
      while (v7 < (*((void *)this + 4) - v5) >> 4);
    }
    *((unsigned char *)this + 16) = 1;
  }
}

void sub_23CD61F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::PseudoCosts::UpdateCostForVar(uint64_t a1, uint64_t a2, double a3)
{
  int v4 = a2;
  int v11 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = (v6 - v5) >> 4;
  if ((int)a2 >= (int)v7)
  {
    unint64_t v9 = (((a2 << 32) | 0x100000000) + 0x100000000) >> 32;
    long long v10 = 0uLL;
    if (v9 <= v7)
    {
      if (v9 < v7)
      {
        uint64_t v6 = v5 + 16 * v9;
        *(void *)(a1 + 32) = v6;
      }
    }
    else
    {
      std::vector<operations_research::sat::IncrementalAverage>::__append((char **)(a1 + 24), v9 - v7, &v10);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
    }
    unint64_t v7 = (v6 - v5) >> 4;
  }
  *(void *)&long long v10 = v7;
  if ((int)v7 <= v4) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>((int)&v11, (int)&v10, "var < pseudo_costs_.size()");
  }
  operations_research::sat::IncrementalAverage::AddData((operations_research::sat::IncrementalAverage *)(v5 + 16 * v4), a3);
}

void sub_23CD620A4(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PseudoCosts::UpdateCost(operations_research::sat::PseudoCosts *this, int **a2, uint64_t a3)
{
  if (a3)
  {
    int v3 = *a2;
    int v4 = a2[1];
    if (*a2 != v4)
    {
      double v6 = (double)a3;
      if (a3 < (uint64_t)0x8000000000000003) {
        double v6 = -INFINITY;
      }
      if (a3 <= 0x7FFFFFFFFFFFFFFDLL) {
        double v7 = v6;
      }
      else {
        double v7 = INFINITY;
      }
      do
      {
        uint64_t v8 = *v3;
        unint64_t v9 = *(int *)(*(void *)(*(void *)this + 408) + 4 * v8);
        if (v9 == -1
          || ((*(void *)(*(void *)(*(void *)(*(void *)this + 936) + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(*(void *)(*(void *)this + 408) + 4 * v8)) & 1) == 0)
        {
          uint64_t v10 = *(void *)(v3 + 1);
          if (v10 >= 1)
          {
            if ((unint64_t)v10 <= 0x7FFFFFFFFFFFFFFDLL) {
              double v11 = (double)v10;
            }
            else {
              double v11 = INFINITY;
            }
            if (!*((unsigned char *)this + 16))
            {
              operations_research::sat::PseudoCosts::InitializeCosts(this, 0.0);
              LODWORD(v8) = *v3;
            }
            operations_research::sat::PseudoCosts::UpdateCostForVar((uint64_t)this, v8, v7 / v11);
          }
        }
        v3 += 3;
      }
      while (v3 != v4);
    }
  }
}

uint64_t operations_research::sat::PseudoCosts::GetBestDecisionVar(operations_research::sat::PseudoCosts *this)
{
  if (!*((unsigned char *)this + 16) || (int)((*((void *)this + 4) - *((void *)this + 3)) >> 4) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unsigned int v4 = -1;
  double v5 = -INFINITY;
  do
  {
    uint64_t v6 = *(void *)this;
    unint64_t v7 = *(int *)(*(void *)(*(void *)this + 408) + 4 * v3);
    if ((v7 == -1
       || ((*(void *)(*(void *)(*(void *)(v6 + 936) + 24) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      && *(void *)(*(void *)(v6 + 40) + v2) < -*(void *)(*(void *)(v6 + 40) + v2 + 12))
    {
      int Recordings = operations_research::sat::PseudoCosts::GetRecordings((uint64_t)this, v3);
      if (*(void *)(*((void *)this + 1) + 464) <= (int)(operations_research::sat::PseudoCosts::GetRecordings((uint64_t)this, (int)v3 + 1)+ Recordings))
      {
        double Cost = operations_research::sat::PseudoCosts::GetCost((uint64_t)this, v3);
        if (Cost >= 0.000001) {
          double v10 = Cost;
        }
        else {
          double v10 = 0.000001;
        }
        double v11 = operations_research::sat::PseudoCosts::GetCost((uint64_t)this, (int)v3 + 1);
        if (v11 < 0.000001) {
          double v11 = 0.000001;
        }
        double v12 = v10 * v11;
        if (v12 > v5)
        {
          double v5 = v12;
          unsigned int v4 = v3;
        }
      }
    }
    v3 += 2;
    v2 += 24;
  }
  while ((int)v3 < (int)((*((void *)this + 4) - *((void *)this + 3)) >> 4));
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  double v13 = operations_research::sat::PseudoCosts::GetCost((uint64_t)this, v4);
  if (v13 < operations_research::sat::PseudoCosts::GetCost((uint64_t)this, v4 ^ 1)) {
    return v4 ^ 1;
  }
  else {
    return v4;
  }
}

uint64_t operations_research::sat::PseudoCosts::GetRecordings(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = (*(void *)(a1 + 32) - v2) >> 4;
  if (a2 >= (int)v4) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>((int)&v5, (int)&v4, "var < pseudo_costs_.size()");
  }
  return *(unsigned int *)(v2 + 16 * a2 + 8);
}

void sub_23CD623F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double operations_research::sat::PseudoCosts::GetCost(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = (*(void *)(a1 + 32) - v2) >> 4;
  if (a2 >= (int)v4) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>((int)&v5, (int)&v4, "var < pseudo_costs_.size()");
  }
  return *(double *)(v2 + 16 * a2);
}

void sub_23CD624B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::GetBoundChanges(int a1@<W0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1 != -1)
  {
    uint64_t v6 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    unint64_t v7 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
    uint64_t v8 = *(void *)(v6 + 112);
    unint64_t v9 = (unint64_t)(*(void *)(v6 + 120) - v8) >> 5;
    double v10 = (unint64_t *)(v8 + 32 * a1);
    if (a1 >= (int)v9) {
      double v11 = (unint64_t *)(v6 + 56);
    }
    else {
      double v11 = v10;
    }
    unint64_t v14 = *v11;
    double v13 = v11 + 1;
    unint64_t v12 = v14;
    if (v14) {
      double v13 = (void *)*v13;
    }
    if (v12 >= 2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = (void *)((char *)v13 + 12 * (v12 >> 1));
      do
      {
        int v18 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 != -1)
        {
          unint64_t v19 = *(void *)((char *)v13 + 4);
          unint64_t v20 = *(int *)(v7[51] + 4 * v18);
          BOOL v21 = __OFADD__(v20, 1);
          if (v20 == -1
            || ((*(void *)(*(void *)(v7[117] + 24) + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          {
            uint64_t v22 = *(void *)(v7[5] + 12 * v18);
            uint64_t v23 = v19 - v22;
            uint64_t v24 = (v19 - v22) ^ v19;
            uint64_t v25 = v22 ^ v19;
            uint64_t v26 = (v19 >> 63) + 0x7FFFFFFFFFFFFFFFLL;
            if ((v24 & v25) < 0 == v21) {
              uint64_t v26 = v23;
            }
            if (v26 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v26 = 0x7FFFFFFFFFFFFFFELL;
            }
            if (v26 <= (uint64_t)0x8000000000000002) {
              unint64_t v27 = 0x8000000000000002;
            }
            else {
              unint64_t v27 = v26;
            }
            unint64_t v28 = (unint64_t)a3[2];
            if ((unint64_t)v15 < v28)
            {
              *(_DWORD *)uint64_t v15 = v18;
              *(void *)(v15 + 4) = v27;
              uint64_t v17 = v15 + 12;
            }
            else
            {
              uint64_t v29 = (char *)*a3;
              unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)*a3) >> 2);
              unint64_t v31 = v30 + 1;
              if (v30 + 1 > 0x1555555555555555) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)v29) >> 2);
              if (2 * v32 > v31) {
                unint64_t v31 = 2 * v32;
              }
              if (v32 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v33 = 0x1555555555555555;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                if (v33 > 0x1555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                __int32 v34 = (char *)operator new(12 * v33);
              }
              else
              {
                __int32 v34 = 0;
              }
              __int32 v35 = &v34[12 * v30];
              *(_DWORD *)__int32 v35 = v18;
              *(void *)(v35 + 4) = v27;
              uint64_t v36 = v35;
              if (v15 != v29)
              {
                do
                {
                  uint64_t v37 = *(void *)(v15 - 12);
                  v15 -= 12;
                  int v38 = *((_DWORD *)v15 + 2);
                  *(void *)(v36 - 12) = v37;
                  v36 -= 12;
                  *((_DWORD *)v36 + 2) = v38;
                }
                while (v15 != v29);
                uint64_t v15 = (char *)*a3;
              }
              uint64_t v17 = v35 + 12;
              *a3 = v36;
              a3[1] = v35 + 12;
              a3[2] = &v34[12 * v33];
              if (v15) {
                operator delete(v15);
              }
            }
            a3[1] = v17;
            uint64_t v15 = v17;
          }
        }
        double v13 = (void *)((char *)v13 + 12);
      }
      while (v13 != v16);
    }
  }
}

void sub_23CD6272C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void google::MakeCheckOpString<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,unsigned long>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CD627C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::IncrementalAverage>::__append(char **a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      unint64_t v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)unint64_t v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      unint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v6 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2) {
      uint64_t v10 = v8 + a2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v15 = &v12[16 * v8];
    uint64_t v16 = 16 * a2;
    uint64_t v17 = &v15[16 * a2];
    int v18 = v15;
    do
    {
      *(_OWORD *)int v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    unint64_t v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      unint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void operations_research::sat::RestartPolicy::Reset(operations_research::sat::RestartPolicy *this)
{
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 5) = 0;
  uint64_t v2 = *(void *)this;
  int v3 = *(_DWORD *)(*(void *)this + 100);
  *((_DWORD *)this + 3) = v3;
  *((_DWORD *)this + 4) = v3;
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = *(_DWORD *)(v2 + 268);
  *((_DWORD *)this + 14) = *(_DWORD *)(v2 + 352);
  *((_DWORD *)this + 19) = 0;
  *(void *)((char *)this + 60) = 0;
  *(void *)((char *)this + 68) = 0;
  uint64_t v4 = (void **)*((void *)this + 11);
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 15) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *((void *)this + 12);
      uint64_t v4 = (void **)(*((void *)this + 11) + 8);
      *((void *)this + 11) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 512;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v8 = 1024;
  }
  *((void *)this + 14) = v8;
LABEL_8:
  *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)this + 352);
  *(void *)((char *)this + 140) = 0;
  *(void *)((char *)this + 132) = 0;
  *((_DWORD *)this + 37) = 0;
  uint64_t v9 = (void **)*((void *)this + 20);
  uint64_t v10 = *((void *)this + 21);
  *((void *)this + 24) = 0;
  unint64_t v11 = v10 - (void)v9;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      uint64_t v12 = *((void *)this + 21);
      uint64_t v9 = (void **)(*((void *)this + 20) + 8);
      *((void *)this + 20) = v9;
      unint64_t v11 = v12 - (void)v9;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 512;
  }
  else
  {
    if (v11 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v13 = 1024;
  }
  *((void *)this + 23) = v13;
LABEL_15:
  *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)this + 356);
  *(void *)((char *)this + 212) = 0;
  *(void *)((char *)this + 204) = 0;
  *((_DWORD *)this + 55) = 0;
  unint64_t v14 = (void **)*((void *)this + 29);
  uint64_t v15 = *((void *)this + 30);
  *((void *)this + 33) = 0;
  unint64_t v16 = v15 - (void)v14;
  if (v16 >= 0x11)
  {
    do
    {
      operator delete(*v14);
      uint64_t v17 = *((void *)this + 30);
      unint64_t v14 = (void **)(*((void *)this + 29) + 8);
      *((void *)this + 29) = v14;
      unint64_t v16 = v17 - (void)v14;
    }
    while (v16 > 0x10);
  }
  if (v16 >> 3 == 1)
  {
    uint64_t v18 = 512;
    goto LABEL_21;
  }
  if (v16 >> 3 == 2)
  {
    uint64_t v18 = 1024;
LABEL_21:
    *((void *)this + 32) = v18;
  }
  unint64_t v19 = (char *)*((void *)this + 3);
  BOOL v86 = (void **)((char *)this + 24);
  *((void *)this + 4) = v19;
  uint64_t v20 = *(void *)this;
  if (*(int *)(*(void *)this + 40) < 1) {
    goto LABEL_55;
  }
  uint64_t v21 = 0;
  do
  {
    while (1)
    {
      int v22 = *(_DWORD *)(*(void *)(v20 + 48) + 4 * v21);
      unint64_t v23 = *((void *)this + 5);
      if ((unint64_t)v19 >= v23) {
        break;
      }
      *(_DWORD *)unint64_t v19 = v22;
      v19 += 4;
      *((void *)this + 4) = v19;
      if (++v21 >= *(int *)(v20 + 40)) {
        goto LABEL_54;
      }
    }
    uint64_t v24 = (char *)*v86;
    uint64_t v25 = v19 - (unsigned char *)*v86;
    uint64_t v26 = v25 >> 2;
    unint64_t v27 = (v25 >> 2) + 1;
    if (v27 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v23 - (void)v24;
    if (v28 >> 1 > v27) {
      unint64_t v27 = v28 >> 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      if (v29 >> 62) {
        goto LABEL_122;
      }
      unint64_t v30 = operator new(4 * v29);
      unint64_t v31 = &v30[4 * v26];
      _DWORD *v31 = v22;
      uint64_t v32 = (uint64_t)(v31 + 1);
      if (v19 == v24) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v30 = 0;
      unint64_t v31 = (_DWORD *)(4 * v26);
      *(_DWORD *)(4 * v26) = v22;
      uint64_t v32 = 4 * v26 + 4;
      if (v19 == v24) {
        goto LABEL_40;
      }
    }
    unint64_t v33 = v19 - 4 - v24;
    if (v33 < 0xBC)
    {
      __int32 v34 = v19;
      goto LABEL_39;
    }
    if (&v30[v25 - 4 - (v33 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v25 - 4])
    {
      __int32 v34 = v19;
      do
      {
LABEL_39:
        int v35 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *--unint64_t v31 = v35;
      }
      while (v34 != v24);
      goto LABEL_40;
    }
    if (&v19[-(v33 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4)
    {
      __int32 v34 = v19;
      goto LABEL_39;
    }
    if ((unint64_t)(v19 - &v30[v25]) < 0x20)
    {
      __int32 v34 = v19;
      goto LABEL_39;
    }
    uint64_t v36 = (v33 >> 2) + 1;
    uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
    __int32 v34 = &v19[-v37];
    unint64_t v31 = (_DWORD *)((char *)v31 - v37);
    int v38 = &v30[4 * v26 - 16];
    int v39 = v19 - 16;
    uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *int v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 8;
    }
    while (v40);
    if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_39;
    }
LABEL_40:
    *((void *)this + 3) = v31;
    *((void *)this + 4) = v32;
    *((void *)this + 5) = &v30[4 * v29];
    if (v24)
    {
      operator delete(v24);
      uint64_t v20 = *(void *)this;
    }
    unint64_t v19 = (char *)v32;
    *((void *)this + 4) = v32;
    ++v21;
  }
  while (v21 < *(int *)(v20 + 40));
LABEL_54:
  if (*v86 != v19) {
    return;
  }
LABEL_55:
  uint64_t v42 = *(void ***)(v20 + 56);
  v87[1] = 0;
  uint64_t v88 = 0;
  v87[0] = 0;
  unint64_t v43 = *((unsigned __int8 *)v42 + 23);
  uint64_t v44 = v42[1];
  if ((v43 & 0x80u) != 0)
  {
    uint64_t v42 = (void **)*v42;
    unint64_t v43 = (unint64_t)v44;
  }
  *(void *)&long long v89 = v42;
  *((void *)&v89 + 1) = v43;
  memset(v97, 0, sizeof(v97));
  *(_OWORD *)long long __p = 0u;
  if (v42 == v87)
  {
    *(_OWORD *)long long __p = 0uLL;
    v97[0] = 0;
    HIBYTE(v88) = 0;
    LOBYTE(v87[0]) = 0;
    *(void *)&long long v89 = v87;
    *((void *)&v89 + 1) = 0;
    *(_OWORD *)__int32 v90 = 0uLL;
    uint64_t v91 = 0;
    *(void *)&long long v92 = v90;
    *((void *)&v92 + 1) = 0;
  }
  else
  {
    *(_OWORD *)&v97[1] = v89;
    *(_OWORD *)__int32 v90 = 0uLL;
    uint64_t v91 = 0;
    long long v92 = v89;
  }
  char v93 = 44;
  absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()((uint64_t)v90, (uint64_t)__p);
  std::vector<std::string>::vector<std::__wrap_iter<std::string_view const*>,0>(&v94, (uint64_t)__p[0], (uint64_t)__p[1]);
  uint64_t v45 = (operations_research::sat *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v91) < 0)
  {
    operator delete(v90[0]);
    if ((SHIBYTE(v88) & 0x80000000) == 0) {
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
LABEL_64:
    uint64_t v46 = (uint64_t *)v94;
    uint64_t v47 = v95;
    if (v94 != v95) {
      goto LABEL_73;
    }
    goto LABEL_65;
  }
  operator delete(v87[0]);
  uint64_t v46 = (uint64_t *)v94;
  uint64_t v47 = v95;
  if (v94 == v95)
  {
LABEL_65:
    if (v46) {
      goto LABEL_103;
    }
LABEL_66:
    uint64_t v48 = (_DWORD *)*((void *)this + 4);
    if (*((_DWORD **)this + 3) == v48) {
      goto LABEL_110;
    }
    return;
  }
LABEL_73:
  while (2)
  {
    while (1)
    {
      restarted = (uint64_t *)operations_research::sat::SatParameters_RestartAlgorithm_descriptor(v45);
      LODWORD(v90[0]) = 0;
      uint64_t v45 = (operations_research::sat *)google::protobuf::internal::ParseNamedEnum(restarted, (uint64_t)v46, v90);
      if ((v45 & 1) == 0) {
        break;
      }
      int v51 = (int)v90[0];
      uint64_t v53 = (char *)*((void *)this + 4);
      unint64_t v52 = *((void *)this + 5);
      if ((unint64_t)v53 < v52)
      {
        *(_DWORD *)uint64_t v53 = v90[0];
        uint64_t v49 = (uint64_t)(v53 + 4);
LABEL_72:
        *((void *)this + 4) = v49;
        v46 += 3;
        if (v46 == v47) {
          goto LABEL_102;
        }
        continue;
      }
      int v54 = (char *)*v86;
      uint64_t v55 = v53 - (unsigned char *)*v86;
      uint64_t v56 = v55 >> 2;
      unint64_t v57 = (v55 >> 2) + 1;
      if (v57 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v58 = v52 - (void)v54;
      if (v58 >> 1 > v57) {
        unint64_t v57 = v58 >> 1;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (!v59)
      {
        uint64_t v45 = 0;
        int v60 = (_DWORD *)(4 * v56);
        *(_DWORD *)(4 * v56) = v90[0];
        uint64_t v49 = 4 * v56 + 4;
        if (v53 == v54) {
          goto LABEL_100;
        }
LABEL_94:
        unint64_t v67 = v53 - 4 - v54;
        if (v67 < 0x2C) {
          goto LABEL_127;
        }
        if ((unint64_t)(v53 - ((char *)v45 + v55)) < 0x20) {
          goto LABEL_127;
        }
        uint64_t v68 = (v67 >> 2) + 1;
        uint64_t v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v70 = &v53[-v69];
        int v60 = (_DWORD *)((char *)v60 - v69);
        int v71 = (_OWORD *)((char *)v45 + 4 * v56 - 16);
        uint64_t v72 = v53 - 16;
        uint64_t v73 = v68 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v74 = *(_OWORD *)v72;
          *(v71 - 1) = *((_OWORD *)v72 - 1);
          *int v71 = v74;
          v71 -= 2;
          v72 -= 32;
          v73 -= 8;
        }
        while (v73);
        uint64_t v53 = v70;
        if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_127:
          do
          {
            int v75 = *((_DWORD *)v53 - 1);
            v53 -= 4;
            *--int v60 = v75;
          }
          while (v53 != v54);
        }
        goto LABEL_100;
      }
      if (v59 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v45 = (operations_research::sat *)operator new(4 * v59);
      int v60 = (_DWORD *)((char *)v45 + 4 * v56);
      *int v60 = v51;
      uint64_t v49 = (uint64_t)(v60 + 1);
      if (v53 != v54) {
        goto LABEL_94;
      }
LABEL_100:
      *((void *)this + 3) = v60;
      *((void *)this + 4) = v49;
      *((void *)this + 5) = (char *)v45 + 4 * v59;
      if (!v54) {
        goto LABEL_72;
      }
      operator delete(v54);
      *((void *)this + 4) = v49;
      v46 += 3;
      if (v46 == v47) {
        goto LABEL_102;
      }
    }
    google::LogMessage::LogMessage((google::LogMessage *)v90, (google::glog_internal_namespace_ *)"./ortools/sat/restart.cc", 68, 1);
    int v61 = (void *)google::LogMessage::stream((google::LogMessage *)v90);
    int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Couldn't parse the RestartAlgorithm name: '", 43);
    int v63 = *((char *)v46 + 23);
    if (v63 >= 0) {
      uint64_t v64 = (uint64_t)v46;
    }
    else {
      uint64_t v64 = *v46;
    }
    if (v63 >= 0) {
      uint64_t v65 = *((unsigned __int8 *)v46 + 23);
    }
    else {
      uint64_t v65 = v46[1];
    }
    int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"'.", 2);
    google::LogMessage::~LogMessage((google::LogMessage *)v90);
    v46 += 3;
    if (v46 != v47) {
      continue;
    }
    break;
  }
LABEL_102:
  uint64_t v46 = (uint64_t *)v94;
  if (!v94) {
    goto LABEL_66;
  }
LABEL_103:
  uint64_t v76 = v95;
  if (v95 != v46)
  {
    do
    {
      if (*((char *)v76 - 1) < 0) {
        operator delete((void *)*(v76 - 3));
      }
      v76 -= 3;
    }
    while (v76 != v46);
    int v95 = v46;
    operator delete(v94);
    uint64_t v48 = (_DWORD *)*((void *)this + 4);
    if (*((_DWORD **)this + 3) != v48) {
      return;
    }
LABEL_110:
    unint64_t v77 = *((void *)this + 5);
    if ((unint64_t)v48 >= v77)
    {
      uint64_t v79 = v77 - (void)v48;
      uint64_t v80 = v79 >> 1;
      if ((unint64_t)(v79 >> 1) <= 1) {
        uint64_t v80 = 1;
      }
      BOOL v81 = (unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v81) {
        unint64_t v82 = v80;
      }
      if (v82 >> 62) {
LABEL_122:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      uint64_t v83 = v82;
      unint64_t v84 = operator new(4 * v82);
      int v85 = &v84[v83];
      _DWORD *v84 = 0;
      __int32 v78 = v84 + 1;
      *((void *)this + 3) = v84;
      *((void *)this + 4) = v84 + 1;
      *((void *)this + 5) = v85;
      if (v48) {
        operator delete(v48);
      }
    }
    else
    {
      _DWORD *v48 = 0;
      __int32 v78 = v48 + 1;
    }
    *((void *)this + 4) = v78;
    return;
  }
  int v95 = v46;
  operator delete(v46);
  uint64_t v48 = (_DWORD *)*((void *)this + 4);
  if (*((_DWORD **)this + 3) == v48) {
    goto LABEL_110;
  }
}

void sub_23CD630C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a10);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t operations_research::sat::RestartPolicy::ShouldRestart(operations_research::sat::RestartPolicy *this)
{
  unint64_t v1 = *((int *)this + 5);
  switch(*(_DWORD *)(*((void *)this + 3) + 4
                                             * (v1 % ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2))))
  {
    case 1:
      if (!*((_DWORD *)this + 13))
      {
        ++*((_DWORD *)this + 12);
        goto LABEL_22;
      }
      return 0;
    case 2:
      unint64_t v8 = *((void *)this + 15);
      if (v8 != *((_DWORD *)this + 14)) {
        return 0;
      }
      int v9 = *((_DWORD *)this + 15);
      double v10 = 0.0;
      double v11 = 0.0;
      if (v9) {
        double v11 = *((double *)this + 8) / (double)v9;
      }
      if (v8) {
        double v10 = *((double *)this + 9) / (double)v8;
      }
      if (v11 < *(double *)(*(void *)this + 344) * v10) {
        goto LABEL_22;
      }
      return 0;
    case 3:
      unint64_t v4 = *((void *)this + 24);
      if (v4 != *((_DWORD *)this + 32)) {
        return 0;
      }
      int v5 = *((_DWORD *)this + 33);
      double v6 = 0.0;
      double v7 = 0.0;
      if (v5) {
        double v7 = *((double *)this + 17) / (double)v5;
      }
      if (v4) {
        double v6 = *((double *)this + 18) / (double)v4;
      }
      if (v7 < *(double *)(*(void *)this + 376) * v6) {
        goto LABEL_22;
      }
      return 0;
    case 4:
      if (*((_DWORD *)this + 13)) {
        return 0;
      }
LABEL_22:
      int v12 = *((_DWORD *)this + 3);
      ++*((_DWORD *)this + 2);
      if (!v12)
      {
        *((_DWORD *)this + 5) = v1 + 1;
        int v13 = *((_DWORD *)this + 4) + (int)(*(double *)(*(void *)this + 104) * (double)*((int *)this + 4));
        *((_DWORD *)this + 3) = v13;
        *((_DWORD *)this + 4) = v13;
      }
      *((void *)this + 9) = 0;
      unint64_t v14 = (void **)*((void *)this + 11);
      uint64_t v15 = *((void *)this + 12);
      *((void *)this + 15) = 0;
      unint64_t v16 = v15 - (void)v14;
      if (v16 >= 0x11)
      {
        do
        {
          operator delete(*v14);
          uint64_t v17 = *((void *)this + 12);
          unint64_t v14 = (void **)(*((void *)this + 11) + 8);
          *((void *)this + 11) = v14;
          unint64_t v16 = v17 - (void)v14;
        }
        while (v16 > 0x10);
      }
      if (v16 >> 3 == 1)
      {
        uint64_t v18 = 512;
      }
      else
      {
        if (v16 >> 3 != 2) {
          goto LABEL_31;
        }
        uint64_t v18 = 1024;
      }
      *((void *)this + 14) = v18;
LABEL_31:
      *((void *)this + 18) = 0;
      unint64_t v19 = (void **)*((void *)this + 20);
      uint64_t v20 = *((void *)this + 21);
      *((void *)this + 24) = 0;
      unint64_t v21 = v20 - (void)v19;
      if (v21 >= 0x11)
      {
        do
        {
          operator delete(*v19);
          uint64_t v22 = *((void *)this + 21);
          unint64_t v19 = (void **)(*((void *)this + 20) + 8);
          *((void *)this + 20) = v19;
          unint64_t v21 = v22 - (void)v19;
        }
        while (v21 > 0x10);
      }
      if (v21 >> 3 == 1)
      {
        uint64_t v23 = 512;
      }
      else
      {
        if (v21 >> 3 != 2) {
          goto LABEL_38;
        }
        uint64_t v23 = 1024;
      }
      *((void *)this + 23) = v23;
LABEL_38:
      int v24 = *(_DWORD *)(*(void *)this + 268);
      *((_DWORD *)this + 13) = v24;
      uint64_t result = 1;
      if (*(_DWORD *)(*((void *)this + 3)
                     + 4
                     * (*((int *)this + 5)
                      % (unint64_t)((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 2))) == 1)
      {
        int v25 = *((_DWORD *)this + 12) + 1;
        while (v25 >= 3)
        {
          unsigned int v26 = v25 + 1;
          char v27 = __clz(v26);
          int v25 = v26 - (1 << (v27 ^ 0x1F));
          if (!v25)
          {
            *((_DWORD *)this + 13) = (1 << (30 - v27)) * v24;
            return 1;
          }
        }
        *((_DWORD *)this + 13) = v24;
        return 1;
      }
      return result;
    default:
      return 0;
  }
}

void operations_research::sat::RestartPolicy::OnConflict(operations_research::sat::RestartPolicy *this, int a2, int a3, int a4)
{
  int v8 = *((_DWORD *)this + 13);
  BOOL v9 = __OFSUB__(v8, 1);
  int v10 = v8 - 1;
  if (v10 < 0 == v9) {
    *((_DWORD *)this + 13) = v10;
  }
  int v11 = *((_DWORD *)this + 3);
  BOOL v9 = __OFSUB__(v11, 1);
  int v12 = v11 - 1;
  if (v12 < 0 == v9) {
    *((_DWORD *)this + 3) = v12;
  }
  int v13 = (void **)*((void *)this + 30);
  unint64_t v14 = (void **)*((void *)this + 29);
  ++*((_DWORD *)this + 51);
  *((float64x2_t *)this + 13) = vaddq_f64(*((float64x2_t *)this + 13), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0));
  if (v13 == v14) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (((char *)v13 - (char *)v14) << 7) - 1;
  }
  unint64_t v17 = *((void *)this + 32);
  uint64_t v16 = *((void *)this + 33);
  unint64_t v18 = v16 + v17;
  double v45 = (double)a2;
  if (v15 == v16 + v17)
  {
    std::deque<int>::__add_back_capacity((uint64_t)this + 224);
    unint64_t v14 = (void **)*((void *)this + 29);
    unint64_t v17 = *((void *)this + 32);
    uint64_t v16 = *((void *)this + 33);
    unint64_t v18 = v17 + v16;
  }
  (*(_DWORD **)((char *)v14 + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)))[v18 & 0x3FF] = a2;
  *((void *)this + 33) = v16 + 1;
  if (v16 + 1 > (unint64_t)*((int *)this + 50))
  {
    *((double *)this + 27) = *((double *)this + 27)
                           - (double)(*(int **)((char *)v14 + ((v17 >> 7) & 0x1FFFFFFFFFFFFF8)))[v17 & 0x3FF];
    unint64_t v19 = v17 + 1;
    *((void *)this + 32) = v19;
    *((void *)this + 33) = v16;
    if (v19 >= 0x800)
    {
      operator delete(*v14);
      *((void *)this + 29) += 8;
      *((void *)this + 32) -= 1024;
    }
  }
  uint64_t v20 = (void **)*((void *)this + 12);
  unint64_t v21 = (void **)*((void *)this + 11);
  ++*((_DWORD *)this + 15);
  *((float64x2_t *)this + 4) = vaddq_f64(*((float64x2_t *)this + 4), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a3), 0));
  if (v20 == v21) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = (((char *)v20 - (char *)v21) << 7) - 1;
  }
  unint64_t v24 = *((void *)this + 14);
  uint64_t v23 = *((void *)this + 15);
  unint64_t v25 = v23 + v24;
  if (v22 == v23 + v24)
  {
    std::deque<int>::__add_back_capacity((uint64_t)this + 80);
    unint64_t v21 = (void **)*((void *)this + 11);
    unint64_t v24 = *((void *)this + 14);
    uint64_t v23 = *((void *)this + 15);
    unint64_t v25 = v24 + v23;
  }
  (*(_DWORD **)((char *)v21 + ((v25 >> 7) & 0x1FFFFFFFFFFFFF8)))[v25 & 0x3FF] = a3;
  *((void *)this + 15) = v23 + 1;
  if (v23 + 1 > (unint64_t)*((int *)this + 14))
  {
    *((double *)this + 9) = *((double *)this + 9)
                          - (double)(*(int **)((char *)v21 + ((v24 >> 7) & 0x1FFFFFFFFFFFFF8)))[v24 & 0x3FF];
    unint64_t v26 = v24 + 1;
    *((void *)this + 14) = v26;
    *((void *)this + 15) = v23;
    if (v26 >= 0x800)
    {
      operator delete(*v21);
      *((void *)this + 11) += 8;
      *((void *)this + 14) -= 1024;
    }
  }
  char v27 = (void **)*((void *)this + 21);
  uint64_t v28 = (void **)*((void *)this + 20);
  ++*((_DWORD *)this + 33);
  *(float64x2_t *)((char *)this + 136) = vaddq_f64(*(float64x2_t *)((char *)this + 136), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a4), 0));
  if (v27 == v28) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = (((char *)v27 - (char *)v28) << 7) - 1;
  }
  unint64_t v31 = *((void *)this + 23);
  uint64_t v30 = *((void *)this + 24);
  unint64_t v32 = v30 + v31;
  if (v29 == v30 + v31)
  {
    std::deque<int>::__add_back_capacity((uint64_t)this + 152);
    uint64_t v28 = (void **)*((void *)this + 20);
    unint64_t v31 = *((void *)this + 23);
    uint64_t v30 = *((void *)this + 24);
    unint64_t v32 = v31 + v30;
  }
  (*(_DWORD **)((char *)v28 + ((v32 >> 7) & 0x1FFFFFFFFFFFFF8)))[v32 & 0x3FF] = a4;
  *((void *)this + 24) = v30 + 1;
  if (v30 + 1 > (unint64_t)*((int *)this + 32))
  {
    *((double *)this + 18) = *((double *)this + 18)
                           - (double)(*(int **)((char *)v28 + ((v31 >> 7) & 0x1FFFFFFFFFFFFF8)))[v31 & 0x3FF];
    unint64_t v33 = v31 + 1;
    *((void *)this + 23) = v33;
    *((void *)this + 24) = v30;
    if (v33 >= 0x800)
    {
      operator delete(*v28);
      *((void *)this + 20) += 8;
      *((void *)this + 23) -= 1024;
    }
  }
  if (*(unsigned char *)(*(void *)this + 98))
  {
    if (*((void *)this + 24) == *((_DWORD *)this + 32) && *((void *)this + 15) == *((_DWORD *)this + 14))
    {
      unint64_t v34 = *((void *)this + 33);
      if (v34 == *((_DWORD *)this + 50))
      {
        double v35 = *(double *)(*(void *)this + 360);
        if (v34)
        {
          if (v35 * (*((double *)this + 27) / (double)v34) >= v45) {
            return;
          }
        }
        else if (v35 * 0.0 >= v45)
        {
          return;
        }
        *((void *)this + 9) = 0;
        uint64_t v36 = (void **)*((void *)this + 11);
        uint64_t v37 = *((void *)this + 12);
        *((void *)this + 15) = 0;
        unint64_t v38 = v37 - (void)v36;
        if (v38 >= 0x11)
        {
          do
          {
            operator delete(*v36);
            uint64_t v39 = *((void *)this + 12);
            uint64_t v36 = (void **)(*((void *)this + 11) + 8);
            *((void *)this + 11) = v36;
            unint64_t v38 = v39 - (void)v36;
          }
          while (v38 > 0x10);
        }
        if (v38 >> 3 == 1)
        {
          uint64_t v40 = 512;
        }
        else
        {
          if (v38 >> 3 != 2)
          {
LABEL_44:
            *((void *)this + 18) = 0;
            long long v41 = (void **)*((void *)this + 20);
            uint64_t v42 = *((void *)this + 21);
            *((void *)this + 24) = 0;
            unint64_t v43 = v42 - (void)v41;
            if (v43 >= 0x11)
            {
              do
              {
                operator delete(*v41);
                uint64_t v44 = *((void *)this + 21);
                long long v41 = (void **)(*((void *)this + 20) + 8);
                *((void *)this + 20) = v41;
                unint64_t v43 = v44 - (void)v41;
              }
              while (v43 > 0x10);
            }
            if (v43 >> 3 == 1)
            {
              *((void *)this + 23) = 512;
            }
            else if (v43 >> 3 == 2)
            {
              *((void *)this + 23) = 1024;
            }
            return;
          }
          uint64_t v40 = 1024;
        }
        *((void *)this + 14) = v40;
        goto LABEL_44;
      }
    }
  }
}

void operations_research::sat::RestartPolicy::InfoString(operations_research::sat::RestartPolicy *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  *(void *)&double v44 = *((unsigned int *)this + 2);
  double v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num restarts: %d\n", 19, (uint64_t)&v44, 1, (uint64_t)&v40);
  operations_research::ProtoEnumToString<operations_research::sat::SatParameters_RestartAlgorithm>((operations_research::sat *)*(unsigned int *)(*((void *)this + 3)+ 4* (*((int *)this + 5)% (unint64_t)((uint64_t)(*((void *)this + 4)- *((void *)this + 3)) >> 2))), &v37);
  double v44 = COERCE_DOUBLE(&v37);
  double v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  current_strategy: %s\n", 23, (uint64_t)&v44, 1, (uint64_t)v38);
  if ((v39 & 0x80u) == 0) {
    unint64_t v4 = v38;
  }
  else {
    unint64_t v4 = (void **)v38[0];
  }
  if ((v39 & 0x80u) == 0) {
    std::string::size_type v5 = v39;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v38[1];
  }
  double v6 = std::string::append(&v40, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *((_DWORD *)this + 15);
  double v9 = 0.0;
  double v10 = 0.0;
  if (v8) {
    double v10 = *((double *)this + 8) / (double)v8;
  }
  unint64_t v11 = *((void *)this + 15);
  if (v11) {
    double v9 = *((double *)this + 9) / (double)v11;
  }
  double v44 = v10;
  double v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  double v46 = v9;
  uint64_t v47 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  conflict decision level avg: %f window: %f\n", 45, (uint64_t)&v44, 2, (uint64_t)v35);
  if ((v36 & 0x80u) == 0) {
    int v12 = v35;
  }
  else {
    int v12 = (void **)v35[0];
  }
  if ((v36 & 0x80u) == 0) {
    std::string::size_type v13 = v36;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v35[1];
  }
  unint64_t v14 = std::string::append(&v41, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = *((_DWORD *)this + 33);
  double v17 = 0.0;
  double v18 = 0.0;
  if (v16) {
    double v18 = *((double *)this + 17) / (double)v16;
  }
  unint64_t v19 = *((void *)this + 24);
  if (v19) {
    double v17 = *((double *)this + 18) / (double)v19;
  }
  double v44 = v18;
  double v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  double v46 = v17;
  uint64_t v47 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  conflict lbd avg: %f window: %f\n", 34, (uint64_t)&v44, 2, (uint64_t)v33);
  if ((v34 & 0x80u) == 0) {
    uint64_t v20 = v33;
  }
  else {
    uint64_t v20 = (void **)v33[0];
  }
  if ((v34 & 0x80u) == 0) {
    std::string::size_type v21 = v34;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)v33[1];
  }
  uint64_t v22 = std::string::append(&v42, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  int v24 = *((_DWORD *)this + 51);
  double v25 = 0.0;
  double v26 = 0.0;
  if (v24) {
    double v26 = *((double *)this + 26) / (double)v24;
  }
  unint64_t v27 = *((void *)this + 33);
  if (v27) {
    double v25 = *((double *)this + 27) / (double)v27;
  }
  double v44 = v26;
  double v45 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  double v46 = v25;
  uint64_t v47 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  conflict trail size avg: %f window: %f\n", 41, (uint64_t)&v44, 2, (uint64_t)__p);
  if ((v32 & 0x80u) == 0) {
    uint64_t v28 = __p;
  }
  else {
    uint64_t v28 = (void **)__p[0];
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v29 = v32;
  }
  else {
    std::string::size_type v29 = (std::string::size_type)__p[1];
  }
  uint64_t v30 = std::string::append(&v43, (const std::string::value_type *)v28, v29);
  *a2 = *v30;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if (((char)v34 & 0x80000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v43.__r_.__value_.__l.__data_);
  if (((char)v34 & 0x80000000) == 0)
  {
LABEL_40:
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(v33[0]);
  if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_41:
    if (((char)v36 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete(v42.__r_.__value_.__l.__data_);
  if (((char)v36 & 0x80000000) == 0)
  {
LABEL_42:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v35[0]);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_43:
    if (((char)v39 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v41.__r_.__value_.__l.__data_);
  if (((char)v39 & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v38[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_55:
    operator delete(v40.__r_.__value_.__l.__data_);
    return;
  }
LABEL_54:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_55;
  }
}

void sub_23CD63CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v50 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v50 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 96));
  if ((a20 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v50 - 105) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a15);
  if ((*(char *)(v50 - 105) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(*(void **)(v50 - 128));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a21);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a45);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a33);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a44 & 0x80000000) == 0) {
LABEL_20:
    }
      _Unwind_Resume(exception_object);
LABEL_19:
    operator delete(a39);
    _Unwind_Resume(exception_object);
  }
LABEL_18:
  operator delete(a27);
  if ((a44 & 0x80000000) == 0) {
    goto LABEL_20;
  }
  goto LABEL_19;
}

void operations_research::ProtoEnumToString<operations_research::sat::SatParameters_RestartAlgorithm>(operations_research::sat *a1@<X0>, std::string *a2@<X8>)
{
  v19[6] = *MEMORY[0x263EF8340];
  restarted = (google::protobuf::EnumDescriptor *)operations_research::sat::SatParameters_RestartAlgorithm_descriptor(a1);
  uint64_t ValueByNumber = google::protobuf::EnumDescriptor::FindValueByNumber(restarted, (int)a1);
  if (ValueByNumber)
  {
    long long v7 = *(long long **)ValueByNumber;
    if (*(char *)(*(void *)ValueByNumber + 23) < 0)
    {
      std::string::size_type v13 = *(const std::string::value_type **)v7;
      std::string::size_type v14 = *((void *)v7 + 1);
      std::string::__init_copy_ctor_external(a2, v13, v14);
    }
    else
    {
      long long v8 = *v7;
      a2->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
    }
  }
  else
  {
    v19[0] = "Invalid enum value of: ";
    v19[1] = 23;
    double v9 = (operations_research::sat *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(a1, v18, v6);
    v17[0] = v18;
    v17[1] = v9 - (operations_research::sat *)v18;
    v16[0] = " for enum type: ";
    v16[1] = 16;
    double v10 = (void **)operations_research::sat::SatParameters_RestartAlgorithm_descriptor(v9);
    unint64_t v11 = *v10;
    uint64_t v12 = *((unsigned __int8 *)*v10 + 23);
    if ((v12 & 0x80u) != 0)
    {
      unint64_t v11 = (void *)**v10;
      uint64_t v12 = (*v10)[1];
    }
    v15[0] = v11;
    v15[1] = v12;
    absl::lts_2020_02_25::StrCat((uint64_t)v19, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, a2);
  }
}

void absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v17 = 0;
  int v18 = 0;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  v22[0] = *(unsigned char *)(a1 + 40);
  if (*(void *)(a1 + 24))
  {
    unint64_t v3 = 0;
    while (v18 != 1)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      unint64_t v5 = *(void *)(a1 + 32);
      double v6 = absl::lts_2020_02_25::ByChar::Find(v22, v4, v5, v3);
      if ((char *)(v4 + v5) == v6) {
        int v18 = 1;
      }
      long long v8 = (char *)(v5 - v17);
      if (v5 < v17) {
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      }
      if (v8 >= &v6[-v4 - v17]) {
        long long v8 = &v6[-v4 - v17];
      }
      unint64_t v19 = v4 + v17;
      uint64_t v20 = v8;
      unint64_t v3 = (unint64_t)&v8[v17 + v7];
      unint64_t v17 = v3;
      if (v8) {
        goto LABEL_13;
      }
    }
    int v18 = 2;
  }
  else
  {
    int v18 = 2;
    unint64_t v17 = *(void *)(a1 + 32);
  }
LABEL_13:
  while (v18 != 2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v19;
    unint64_t v11 = v20;
LABEL_15:
    uint64_t v12 = (unint64_t *)&v23[2 * v9];
    *uint64_t v12 = v10;
    v12[1] = (unint64_t)v11;
    while (v18 != 1)
    {
      uint64_t v13 = *(void *)(a1 + 24);
      unint64_t v14 = *(void *)(a1 + 32);
      long long v15 = absl::lts_2020_02_25::ByChar::Find(v22, v13, v14, v17);
      if ((char *)(v13 + v14) == v15) {
        int v18 = 1;
      }
      unint64_t v11 = (char *)(v14 - v17);
      if (v14 < v17) {
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      }
      unint64_t v10 = v13 + v17;
      if (v11 >= &v15[-v13 - v17]) {
        unint64_t v11 = &v15[-v13 - v17];
      }
      unint64_t v19 = v13 + v17;
      uint64_t v20 = v11;
      v17 += (unint64_t)&v11[v16];
      if (v11)
      {
        if (++v9 == 16) {
          goto LABEL_26;
        }
        goto LABEL_15;
      }
    }
    int v18 = 2;
    ++v9;
LABEL_26:
    std::vector<std::string_view>::__insert_with_size[abi:ne180100]<absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *,absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *>((char **)a2, *(void *)(a2 + 8), (unint64_t)v23, &v23[2 * v9], v9);
  }
}

void sub_23CD64154(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::string_view>::__insert_with_size[abi:ne180100]<absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *,absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty>::ConvertToContainer<std::vector<std::string_view>,std::string_view,false>::operator()(absl::lts_2020_02_25::strings_internal::Splitter<absl::lts_2020_02_25::ByChar,absl::lts_2020_02_25::SkipEmpty> const&)::raw_view *>(char **a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  uint64_t v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  uint64_t v8 = a5 - 1;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = v6 >> 4;
  unint64_t v13 = (unint64_t)a1[1];
  unint64_t v14 = a1[2];
  if (a5 <= (uint64_t)&v14[-v13] >> 4)
  {
    uint64_t v22 = v13 - (void)v7;
    uint64_t v23 = (uint64_t)(v13 - (void)v7) >> 4;
    if (v23 >= a5)
    {
      unint64_t v24 = a3 + 16 * a5;
      unint64_t v27 = a1[1];
LABEL_45:
      unint64_t v57 = &v7[16 * a5];
      uint64_t v58 = &v27[-16 * a5];
      unint64_t v59 = v27;
      if ((unint64_t)v58 < v13)
      {
        unint64_t v59 = v27;
        do
        {
          long long v60 = *(_OWORD *)v58;
          v58 += 16;
          *(_OWORD *)unint64_t v59 = v60;
          v59 += 16;
        }
        while ((unint64_t)v58 < v13);
      }
      a1[1] = v59;
      if (v27 != v57) {
        memmove(&v27[-16 * ((v27 - v57) >> 4)], v7, v27 - v57);
      }
      if (v24 == a3) {
        return v7;
      }
      unint64_t v61 = v24 - a3 - 16;
      if (v61 < 0x150
        || ((unint64_t v67 = &v5[(v6 & 0xFFFFFFFFFFFFFFF0) + (v61 & 0xFFFFFFFFFFFFFFF0)],
             unint64_t v68 = (unint64_t)(v67 + 8),
             unint64_t v69 = (unint64_t)(v67 + 16),
             (unint64_t)&v5[(v6 & 0xFFFFFFFFFFFFFFF0) + 8] < (v61 & 0xFFFFFFFFFFFFFFF0) + a3 + 16)
          ? (BOOL v70 = a3 + 8 >= v69)
          : (BOOL v70 = 1),
            v70 ? (char v71 = 0) : (char v71 = 1),
            v68 > a3 ? (BOOL v72 = (unint64_t)v7 >= a3 + 8 + (v61 & 0xFFFFFFFFFFFFFFF0)) : (BOOL v72 = 1),
            !v72 || (v71 & 1) != 0))
      {
        int v62 = v7;
        int v63 = (uint64_t *)a3;
      }
      else
      {
        uint64_t v73 = (v61 >> 4) + 1;
        uint64_t v74 = 16 * (v73 & 0x1FFFFFFFFFFFFFFCLL);
        int v62 = &v7[v74];
        int v63 = (uint64_t *)(a3 + v74);
        int v75 = (const double *)(a3 + 32);
        uint64_t v76 = (double *)&v5[16 * v12 + 32];
        uint64_t v77 = v73 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          __int32 v78 = v75 - 4;
          float64x2x2_t v82 = vld2q_f64(v78);
          float64x2x2_t v85 = vld2q_f64(v75);
          uint64_t v79 = v76 - 4;
          vst2q_f64(v79, v82);
          vst2q_f64(v76, v85);
          v75 += 8;
          v76 += 8;
          v77 -= 4;
        }
        while (v77);
        if (v73 == (v73 & 0x1FFFFFFFFFFFFFFCLL)) {
          return v7;
        }
      }
      do
      {
        uint64_t v64 = *v63;
        uint64_t v65 = v63[1];
        v63 += 2;
        *(void *)int v62 = v64;
        *((void *)v62 + 1) = v65;
        v62 += 16;
      }
      while (v63 != (uint64_t *)v24);
      return v7;
    }
    unint64_t v24 = a3 + 16 * v23;
    if ((uint64_t *)v24 == a4)
    {
      unint64_t v27 = a1[1];
      goto LABEL_44;
    }
    unint64_t v25 = (unint64_t)a4 + -v22 - a3 - 16;
    if (v25 >= 0xD0)
    {
      BOOL v47 = v13 >= v22 + a3 + (v25 & 0xFFFFFFFFFFFFFFF0) + 16 || v24 >= (v25 & 0xFFFFFFFFFFFFFFF0) + v13 + 16;
      double v26 = (uint64_t *)(a3 + 16 * v23);
      unint64_t v27 = a1[1];
      if (v47)
      {
        uint64_t v48 = (v25 >> 4) + 1;
        uint64_t v49 = 16 * (v48 & 0x1FFFFFFFFFFFFFFCLL);
        double v26 = (uint64_t *)(v24 + v49);
        unint64_t v27 = (char *)(v13 + v49);
        uint64_t v50 = (double *)(v13 + 32);
        int v51 = (const double *)(a3 + 16 * v23 + 32);
        uint64_t v52 = v48 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v53 = v51 - 4;
          float64x2x2_t v81 = vld2q_f64(v53);
          float64x2x2_t v84 = vld2q_f64(v51);
          int v54 = v50 - 4;
          vst2q_f64(v54, v81);
          vst2q_f64(v50, v84);
          v50 += 8;
          v51 += 8;
          v52 -= 4;
        }
        while (v52);
        if (v48 == (v48 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_44:
          a1[1] = v27;
          if (v22 < 1) {
            return v7;
          }
          goto LABEL_45;
        }
      }
    }
    else
    {
      double v26 = (uint64_t *)(a3 + 16 * v23);
      unint64_t v27 = a1[1];
    }
    do
    {
      uint64_t v55 = *v26;
      uint64_t v56 = v26[1];
      v26 += 2;
      *(void *)unint64_t v27 = v55;
      *((void *)v27 + 1) = v56;
      v27 += 16;
    }
    while (v26 != a4);
    goto LABEL_44;
  }
  unint64_t v15 = a5 + ((uint64_t)(v13 - (void)v5) >> 4);
  if (v15 >> 60) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = v14 - v5;
  if (v16 >> 3 > v15) {
    unint64_t v15 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v18 = (char *)operator new(16 * v17);
    unint64_t v19 = (unint64_t)&v18[16 * v12];
    uint64_t v20 = (char *)(v19 + 16 * a5);
    uint64_t v21 = v8 & 0xFFFFFFFFFFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFFFFFFFuLL) < 0xD) {
      goto LABEL_21;
    }
  }
  else
  {
    int v18 = 0;
    unint64_t v19 = 16 * v12;
    uint64_t v20 = (char *)(16 * v12 + 16 * a5);
    uint64_t v21 = v8 & 0xFFFFFFFFFFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFFFFFFFuLL) < 0xD) {
      goto LABEL_21;
    }
  }
  if (v19 >= a3 + 16 * a5 || (unint64_t)&v18[16 * a5 + (v6 & 0xFFFFFFFFFFFFFFF0)] <= a3)
  {
    uint64_t v40 = v21 + 1;
    uint64_t v41 = (v21 + 1) & 0x1FFFFFFFFFFFFFFCLL;
    uint64_t v28 = (uint64_t *)(a3 + 16 * v41);
    std::string::size_type v29 = (char *)(v19 + 16 * v41);
    std::string v42 = (double *)&v18[16 * v12 + 32];
    std::string v43 = (const double *)(a3 + 32);
    uint64_t v44 = v41;
    do
    {
      double v45 = v43 - 4;
      float64x2x2_t v80 = vld2q_f64(v45);
      float64x2x2_t v83 = vld2q_f64(v43);
      double v46 = v42 - 4;
      vst2q_f64(v46, v80);
      vst2q_f64(v42, v83);
      v42 += 8;
      v43 += 8;
      v44 -= 4;
    }
    while (v44);
    if (v40 == v41) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v28 = (uint64_t *)a3;
  std::string::size_type v29 = (char *)v19;
  do
  {
LABEL_22:
    uint64_t v30 = *v28;
    uint64_t v31 = v28[1];
    v28 += 2;
    *(void *)std::string::size_type v29 = v30;
    *((void *)v29 + 1) = v31;
    v29 += 16;
  }
  while (v29 != v20);
LABEL_23:
  unsigned __int8 v32 = *a1;
  unint64_t v33 = v19;
  if (*a1 != v7)
  {
    unsigned __int8 v34 = v7;
    unint64_t v35 = v19;
    do
    {
      unint64_t v33 = v35 - 16;
      *(_OWORD *)(v35 - 16) = *((_OWORD *)v34 - 1);
      v34 -= 16;
      v35 -= 16;
    }
    while (v34 != v32);
  }
  unsigned __int8 v36 = &v18[16 * v17];
  std::string v37 = a1[1];
  uint64_t v38 = v37 - v7;
  if (v37 != v7) {
    memmove(v20, v7, v37 - v7);
  }
  unsigned __int8 v39 = *a1;
  *a1 = (char *)v33;
  a1[1] = &v20[v38];
  a1[2] = v36;
  if (v39) {
    operator delete(v39);
  }
  return (char *)v19;
}

void *std::vector<std::string>::vector<std::__wrap_iter<std::string_view const*>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  int v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = a3 - a2;
  if (a3 != a2)
  {
    if (v5 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 >> 4;
    uint64_t v9 = operator new(24 * (v5 >> 4));
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[24 * v8];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view const*,std::string_view const*,std::string*>(v4, a2, a3, v9);
  }
  return a1;
}

void sub_23CD64630(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    std::vector<std::string>::vector<std::__wrap_iter<std::string_view const*>,0>((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view const*,std::string_view const*,std::string*>(int a1, uint64_t a2, uint64_t a3, unsigned char *__dst)
{
  int v4 = __dst;
  unint64_t v13 = __dst;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    while (1)
    {
      size_t v7 = *(void *)(v6 + 8);
      if (v7 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = *(const void **)v6;
      if (v7 >= 0x17) {
        break;
      }
      v4[23] = v7;
      if (v7) {
        goto LABEL_4;
      }
LABEL_5:
      v4[v7] = 0;
      int v4 = v13 + 24;
      v13 += 24;
      v6 += 16;
      if (v6 == a3) {
        return v4;
      }
    }
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v11 = operator new(v9 + 1);
    *((void *)v4 + 1) = v7;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)int v4 = v11;
    int v4 = v11;
LABEL_4:
    memmove(v4, v8, v7);
    goto LABEL_5;
  }
  return v4;
}

void sub_23CD6475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD64770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

void operations_research::sat::RecordLPRelaxationValues(operations_research::sat *this, operations_research::sat::Model *a2)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    uint64_t v4 = (void *)((char *)this + 32);
    do
    {
      unint64_t v5 = v2[4];
      BOOL v6 = v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d;
      if (v5 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d) {
        size_t v7 = v2;
      }
      else {
        size_t v7 = v2 + 1;
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = (void *)*v7;
    }
    while (*v7);
    if (v4 != (void *)((char *)this + 32)
      && v4[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SharedLPSolutionRepository>(void)::d)
    {
      uint64_t v8 = (absl::lts_2020_02_25 **)v4[5];
      if (v8)
      {
        uint64_t v9 = operations_research::sat::Model::GetOrCreate<operations_research::sat::LPVariables>((uint64_t)this);
        uint64_t v10 = *(int *)(v9 + 24);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        long long __p = 0;
        if (v10)
        {
          if ((v10 & 0x80000000) != 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          long long __p = operator new(8 * v10);
          uint64_t v22 = (char *)__p + 8 * v10;
          memset_pattern16(__p, &unk_23CE7EE40, 8 * v10);
          uint64_t v21 = v22;
        }
        uint64_t v11 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)this);
        uint64_t v12 = *(void *)v9;
        uint64_t v13 = *(void *)(v9 + 8);
        if (v12 != v13)
        {
          uint64_t v14 = v11;
          uint64_t v15 = v12 + 8;
          do
          {
            uint64_t v16 = v15 - 8;
            unint64_t v18 = *(int *)(*(void *)(v14 + 408) + 4 * *(int *)(v15 - 8));
            if (v18 == -1
              || ((*(void *)(*(void *)(*(void *)(v14 + 936) + 24) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
            {
              uint64_t v19 = *(void *)v15;
              if (*(void *)v15 && *(unsigned char *)(v19 + 20316))
              {
                uint64_t v17 = *(int *)(v15 + 8);
                *((double *)__p + v17) = operations_research::sat::LinearProgrammingConstraint::GetSolutionValue(v19, *(_DWORD *)(v15 - 8));
              }
            }
            v15 += 24;
          }
          while (v16 + 24 != v13);
        }
        operations_research::sat::SharedLPSolutionRepository::NewLPSolution(v8, (char **)&__p);
        if (__p)
        {
          uint64_t v21 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_23CD64980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::GetRINSNeighborhood(absl::lts_2020_02_25 **a1@<X0>, void *a2@<X1>, absl::lts_2020_02_25 **a3@<X2>, operations_research::sat::SharedIncompleteSolutionManager *a4@<X3>, absl::lts_2020_02_25::Mutex *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v10 = a6;
  *((_OWORD *)a6 + 1) = 0u;
  *((_OWORD *)a6 + 2) = 0u;
  *(_OWORD *)a6 = 0u;
  if (a1)
  {
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 39), (absl::lts_2020_02_25::Mutex *)a2);
    uint64_t v12 = a1[44];
    uint64_t v11 = a1[45];
    absl::lts_2020_02_25::Mutex::Unlock(a1 + 39, v13, v14, v15, v16, v17, v18, v19);
    BOOL v20 = -858993459 * ((unint64_t)(v11 - v12) >> 3) == 0;
    if (a3) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (a3) {
      goto LABEL_7;
    }
  }
  if (!a4 && v20) {
    return;
  }
LABEL_7:
  uint64_t v137 = a1;
  if (a4)
  {
    if (operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(a4, (absl::lts_2020_02_25::Mutex *)a2))
    {
      operations_research::sat::SharedIncompleteSolutionManager::GetNewSolution(a4, v21, &v143);
      uint64_t v22 = v143;
      uint64_t v23 = (double *)__p;
      goto LABEL_81;
    }
    goto LABEL_78;
  }
  if (!a3)
  {
    if (!a2)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v143, (google::glog_internal_namespace_ *)"./ortools/sat/rins.cc", 127);
      int64_t v133 = (void *)google::LogMessage::stream((google::LogMessage *)&v143);
      uint64_t v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"Check failed: relaxation_solutions != nullptr ", 46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"No relaxation solutions repository or lp solutions repository provided.", 71);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v143);
    }
    uint64_t v141 = 0;
    unint64_t v142 = 0;
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a2 + 1), (absl::lts_2020_02_25::Mutex *)a2);
    uint64_t v56 = a2[6];
    uint64_t v55 = a2[7];
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)a2 + 1, v57, v58, v59, v60, v61, v62, v63);
    if (!(-858993459 * ((unint64_t)(v55 - v56) >> 3))) {
      goto LABEL_78;
    }
    operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(a2, a5, (uint64_t)&v143);
    uint64_t v64 = (uint64_t *)__p;
    unint64_t v33 = v145;
    if (v145 == __p)
    {
LABEL_156:
      uint64_t v23 = 0;
      uint64_t v22 = 0;
      if (!v33) {
        goto LABEL_81;
      }
      goto LABEL_80;
    }
    BOOL v136 = v20;
    uint64_t v23 = 0;
    uint64_t v22 = 0;
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    uint64_t v67 = 0;
    while (1)
    {
      while (1)
      {
        double v68 = (double)v64[v67];
        if ((unint64_t)v23 >= v66) {
          break;
        }
        *v23++ = v68;
        if (++v67 >= (unint64_t)((v33 - (unsigned char *)v64) >> 3)) {
          goto LABEL_158;
        }
      }
      uint64_t v69 = v23 - v65;
      unint64_t v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v71 = v66 - (void)v65;
      if (v71 >> 2 > v70) {
        unint64_t v70 = v71 >> 2;
      }
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v72 = v70;
      }
      if (v72)
      {
        if (v72 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v73 = v33;
        uint64_t v74 = operator new(8 * v72);
        unint64_t v33 = v73;
        uint64_t v22 = (double *)&v74[8 * v69];
        *uint64_t v22 = v68;
        uint64_t v75 = (uint64_t)(v22 + 1);
        if (v23 == v65) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v74 = 0;
        uint64_t v22 = (double *)(8 * v69);
        *(double *)(8 * v69) = v68;
        uint64_t v75 = 8 * v69 + 8;
        if (v23 == v65) {
          goto LABEL_64;
        }
      }
      unint64_t v76 = (char *)(v23 - 1) - (char *)v65;
      if (v76 >= 0x168)
      {
        if (&v74[(char *)v23 - (char *)v65 - 8 - (v76 & 0xFFFFFFFFFFFFFFF8)] > &v74[(char *)v23 - (char *)v65 - 8])
        {
          uint64_t v77 = v23;
        }
        else if ((double *)((char *)v23 - (v76 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1)
        {
          uint64_t v77 = v23;
        }
        else if ((unint64_t)((char *)v65 - v74) >= 0x20)
        {
          uint64_t v80 = (v76 >> 3) + 1;
          uint64_t v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v77 = &v23[v81 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v22 = (double *)((char *)v22 - v81);
          float64x2x2_t v82 = &v74[8 * v69 - 16];
          float64x2x2_t v83 = v23 - 2;
          uint64_t v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v85 = *(_OWORD *)v83;
            *(v82 - 1) = *((_OWORD *)v83 - 1);
            _OWORD *v82 = v85;
            v82 -= 2;
            v83 -= 4;
            v84 -= 4;
          }
          while (v84);
          if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_64;
          }
        }
        else
        {
          uint64_t v77 = v23;
        }
      }
      else
      {
        uint64_t v77 = v23;
      }
      do
      {
        uint64_t v78 = *((void *)v77-- - 1);
        *((void *)v22-- - 1) = v78;
      }
      while (v77 != v65);
LABEL_64:
      uint64_t v79 = &v74[8 * v72];
      if (v65)
      {
        operator delete(v65);
        uint64_t v64 = (uint64_t *)__p;
        unint64_t v33 = v145;
      }
      uint64_t v65 = v22;
      unint64_t v66 = (unint64_t)v79;
      uint64_t v23 = (double *)v75;
      if (++v67 >= (unint64_t)((v33 - (unsigned char *)v64) >> 3))
      {
LABEL_158:
        uint64_t v141 = v22;
        unint64_t v142 = v23;
        unint64_t v33 = v64;
        uint64_t v10 = a6;
        BOOL v20 = v136;
        if (!v64) {
          goto LABEL_81;
        }
LABEL_80:
        int v145 = v33;
        operator delete(v33);
        uint64_t v22 = v141;
        uint64_t v23 = v142;
        goto LABEL_81;
      }
    }
  }
  uint64_t v141 = 0;
  unint64_t v142 = 0;
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a3 + 1), (absl::lts_2020_02_25::Mutex *)a2);
  unint64_t v25 = a3[6];
  unint64_t v24 = a3[7];
  absl::lts_2020_02_25::Mutex::Unlock(a3 + 1, v26, v27, v28, v29, v30, v31, v32);
  if (!(-858993459 * ((unint64_t)(v24 - v25) >> 3)))
  {
LABEL_78:
    uint64_t v23 = 0;
    uint64_t v22 = 0;
    goto LABEL_81;
  }
  operations_research::sat::SharedSolutionRepository<double>::GetRandomBiasedSolution(a3, a5, (uint64_t)&v143);
  unsigned __int8 v34 = (double *)__p;
  unint64_t v33 = v145;
  if (v145 == __p) {
    goto LABEL_156;
  }
  BOOL v135 = v20;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  unint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  do
  {
    while ((unint64_t)v23 < v36)
    {
      *v23++ = v34[v37];
      if (++v37 >= (v33 - (unsigned char *)v34) >> 3) {
        goto LABEL_79;
      }
    }
    uint64_t v38 = v23 - v35;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v40 = v36 - (void)v35;
    if (v40 >> 2 > v39) {
      unint64_t v39 = v40 >> 2;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v39;
    }
    if (v41)
    {
      if (v41 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::string v42 = v33;
      std::string v43 = operator new(8 * v41);
      unint64_t v33 = v42;
      uint64_t v22 = (double *)&v43[8 * v38];
      *uint64_t v22 = v34[v37];
      uint64_t v44 = (uint64_t)(v22 + 1);
      if (v23 == v35) {
        goto LABEL_30;
      }
    }
    else
    {
      std::string v43 = 0;
      uint64_t v22 = (double *)(8 * v38);
      *(double *)(8 * v38) = v34[v37];
      uint64_t v44 = 8 * v38 + 8;
      if (v23 == v35) {
        goto LABEL_30;
      }
    }
    unint64_t v45 = (char *)(v23 - 1) - (char *)v35;
    if (v45 < 0x168)
    {
      double v46 = v23;
      goto LABEL_29;
    }
    if (&v43[(char *)v23 - (char *)v35 - 8 - (v45 & 0xFFFFFFFFFFFFFFF8)] > &v43[(char *)v23 - (char *)v35 - 8])
    {
      double v46 = v23;
      do
      {
LABEL_29:
        uint64_t v47 = *((void *)v46-- - 1);
        *((void *)v22-- - 1) = v47;
      }
      while (v46 != v35);
      goto LABEL_30;
    }
    if ((double *)((char *)v23 - (v45 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1)
    {
      double v46 = v23;
      goto LABEL_29;
    }
    if ((unint64_t)((char *)v35 - v43) < 0x20)
    {
      double v46 = v23;
      goto LABEL_29;
    }
    uint64_t v49 = (v45 >> 3) + 1;
    uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    double v46 = &v23[v50 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v22 = (double *)((char *)v22 - v50);
    int v51 = &v43[8 * v38 - 16];
    uint64_t v52 = v23 - 2;
    uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *int v51 = v54;
      v51 -= 2;
      v52 -= 4;
      v53 -= 4;
    }
    while (v53);
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_29;
    }
LABEL_30:
    uint64_t v48 = &v43[8 * v41];
    if (v35)
    {
      operator delete(v35);
      unsigned __int8 v34 = (double *)__p;
      unint64_t v33 = v145;
    }
    unint64_t v35 = v22;
    unint64_t v36 = (unint64_t)v48;
    uint64_t v23 = (double *)v44;
    ++v37;
  }
  while (v37 < (v33 - (unsigned char *)v34) >> 3);
LABEL_79:
  uint64_t v141 = v22;
  unint64_t v142 = v23;
  unint64_t v33 = v34;
  uint64_t v10 = a6;
  BOOL v20 = v135;
  if (v34) {
    goto LABEL_80;
  }
LABEL_81:
  if (v22 != v23)
  {
    BOOL v86 = v20;
    if ((unint64_t)(v23 - v22) <= 1) {
      uint64_t v87 = 1;
    }
    else {
      uint64_t v87 = v23 - v22;
    }
    if (v86)
    {
      uint64_t v88 = 0;
      uint64_t v140 = (void **)(v10 + 3);
      while (1)
      {
        double v90 = v22[v88];
        if (v90 != INFINITY) {
          break;
        }
LABEL_89:
        if (++v88 == v87) {
          goto LABEL_153;
        }
      }
      unint64_t v91 = vcvtmd_s64_f64(v90 + 0.000001);
      unint64_t v92 = vcvtpd_s64_f64(v90 + -0.000001);
      if (v91 != v92)
      {
        int64_t v97 = (char *)v10[4];
        unint64_t v96 = v10[5];
        if ((unint64_t)v97 < v96)
        {
          *(_DWORD *)int64_t v97 = v88;
          long long v89 = v97 + 24;
          *((void *)v97 + 1) = v91;
          *((void *)v97 + 2) = v92;
        }
        else
        {
          BOOL v98 = (char *)*v140;
          unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((v97 - (unsigned char *)*v140) >> 3);
          unint64_t v100 = v99 + 1;
          if (v99 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (void)v98) >> 3);
          if (2 * v101 > v100) {
            unint64_t v100 = 2 * v101;
          }
          if (v101 >= 0x555555555555555) {
            unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v102 = v100;
          }
          if (v102)
          {
            if (v102 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v103 = (char *)operator new(24 * v102);
          }
          else
          {
            uint64_t v103 = 0;
          }
          uint64_t v112 = &v103[24 * v99];
          *(_DWORD *)uint64_t v112 = v88;
          *((void *)v112 + 1) = v91;
          *((void *)v112 + 2) = v92;
          uint64_t v113 = v112;
          if (v97 != v98)
          {
            do
            {
              long long v114 = *(_OWORD *)(v97 - 24);
              *((void *)v113 - 1) = *((void *)v97 - 1);
              *(_OWORD *)(v113 - 24) = v114;
              v113 -= 24;
              v97 -= 24;
            }
            while (v97 != v98);
            int64_t v97 = (char *)*v140;
          }
          long long v89 = v112 + 24;
          uint64_t v10 = a6;
          a6[3] = (uint64_t)v113;
          a6[4] = (uint64_t)(v112 + 24);
          a6[5] = (uint64_t)&v103[24 * v102];
          if (v97) {
            operator delete(v97);
          }
        }
        v10[4] = (uint64_t)v89;
        goto LABEL_89;
      }
      uint64_t v94 = (char *)v10[1];
      unint64_t v93 = v10[2];
      if ((unint64_t)v94 < v93)
      {
        *(_DWORD *)uint64_t v94 = v88;
        *((void *)v94 + 1) = v91;
        int v95 = v94 + 16;
LABEL_127:
        v10[1] = (uint64_t)v95;
        goto LABEL_89;
      }
      int v104 = (char *)*v10;
      uint64_t v105 = (uint64_t)&v94[-*v10] >> 4;
      unint64_t v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v107 = v93 - (void)v104;
      if (v107 >> 3 > v106) {
        unint64_t v106 = v107 >> 3;
      }
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v108 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v108 = v106;
      }
      if (v108)
      {
        if (v108 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v109 = (char *)operator new(16 * v108);
        uint64_t v110 = (uint64_t)&v109[16 * v105];
        *(_DWORD *)uint64_t v110 = v88;
        *(void *)(v110 + 8) = v91;
        uint64_t v111 = v110;
        if (v94 == v104) {
          goto LABEL_125;
        }
        do
        {
LABEL_122:
          *(_OWORD *)(v111 - 16) = *((_OWORD *)v94 - 1);
          v111 -= 16;
          v94 -= 16;
        }
        while (v94 != v104);
        uint64_t v94 = (char *)*v10;
        int v95 = (char *)(v110 + 16);
        *uint64_t v10 = v111;
        v10[1] = v110 + 16;
        v10[2] = (uint64_t)&v109[16 * v108];
        if (!v94) {
          goto LABEL_127;
        }
      }
      else
      {
        uint64_t v109 = 0;
        uint64_t v110 = 16 * v105;
        *(_DWORD *)uint64_t v110 = v88;
        *(void *)(v110 + 8) = v91;
        uint64_t v111 = 16 * v105;
        if (v94 != v104) {
          goto LABEL_122;
        }
LABEL_125:
        int v95 = (char *)(v110 + 16);
        *uint64_t v10 = v111;
        v10[1] = v110 + 16;
        v10[2] = (uint64_t)&v109[16 * v108];
        if (!v94) {
          goto LABEL_127;
        }
      }
      operator delete(v94);
      goto LABEL_127;
    }
    uint64_t v115 = 0;
    uint64_t v116 = v137 + 38;
    while (2)
    {
      double v118 = v22[v115];
      if (v118 == INFINITY) {
        goto LABEL_131;
      }
      operations_research::sat::SharedSolutionRepository<long long>::GetRandomBiasedSolution(v116, a5, (uint64_t)&v143);
      unint64_t v117 = __p;
      uint64_t v119 = *((void *)__p + v115);
      if (vabdd_f64((double)v119, v118) < 0.0001)
      {
        int64_t v121 = (char *)v10[1];
        unint64_t v120 = v10[2];
        if ((unint64_t)v121 < v120)
        {
          *(_DWORD *)int64_t v121 = v115;
          *((void *)v121 + 1) = v119;
          v10[1] = (uint64_t)(v121 + 16);
          unint64_t v117 = __p;
          if (!__p) {
            goto LABEL_131;
          }
        }
        else
        {
          uint64_t v122 = v116;
          int v123 = (char *)*v10;
          uint64_t v124 = (uint64_t)&v121[-*v10] >> 4;
          unint64_t v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v126 = v120 - (void)v123;
          if (v126 >> 3 > v125) {
            unint64_t v125 = v126 >> 3;
          }
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v127 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v127 = v125;
          }
          if (v127)
          {
            if (v127 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v128 = (char *)operator new(16 * v127);
            uint64_t v129 = (uint64_t)&v128[16 * v124];
            *(_DWORD *)uint64_t v129 = v115;
            *(void *)(v129 + 8) = v119;
            uint64_t v130 = v129;
            if (v121 == v123)
            {
LABEL_148:
              uint64_t v131 = a6;
              goto LABEL_149;
            }
          }
          else
          {
            int v128 = 0;
            uint64_t v129 = 16 * v124;
            *(_DWORD *)uint64_t v129 = v115;
            *(void *)(v129 + 8) = v119;
            uint64_t v130 = 16 * v124;
            if (v121 == v123) {
              goto LABEL_148;
            }
          }
          do
          {
            *(_OWORD *)(v130 - 16) = *((_OWORD *)v121 - 1);
            v130 -= 16;
            v121 -= 16;
          }
          while (v121 != v123);
          uint64_t v131 = a6;
          int64_t v121 = (char *)*a6;
LABEL_149:
          uint64_t v132 = v129 + 16;
          uint64_t *v131 = v130;
          v131[1] = v129 + 16;
          v131[2] = (uint64_t)&v128[16 * v127];
          uint64_t v10 = v131;
          uint64_t v116 = v122;
          if (v121) {
            operator delete(v121);
          }
          v10[1] = v132;
          unint64_t v117 = __p;
          if (!__p)
          {
LABEL_131:
            if (++v115 == v87) {
              goto LABEL_153;
            }
            continue;
          }
        }
      }
      break;
    }
    int v145 = v117;
    operator delete(v117);
    goto LABEL_131;
  }
LABEL_153:
  if (v22) {
    operator delete(v22);
  }
}

void sub_23CD653F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, operations_research::sat::LinearExpr *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    operations_research::sat::LinearExpr::~LinearExpr(a11);
    _Unwind_Resume(a1);
  }
  operations_research::sat::LinearExpr::~LinearExpr(a11);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedSolutionRepository<double>::GetRandomBiasedSolution(void *a1@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (uint64_t)a2;
  BOOL v6 = (absl::lts_2020_02_25 **)(a1 + 1);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 1), a2);
  uint64_t v14 = (char *)a1[3];
  uint64_t v16 = (uint64_t *)a1[6];
  uint64_t v15 = (void *)a1[7];
  uint64_t v17 = *v16;
  uint64_t v60 = (void **)(a1 + 3);
  a1[4] = v14;
  if (v15 == v16)
  {
    int v45 = -858993459 * (v15 - v16);
    BOOL v42 = __OFSUB__(v45, 1);
    int v46 = v45 - 1;
    if (v46 < 0 == v42)
    {
LABEL_40:
      LODWORD(v61) = 0;
      HIDWORD(v61) = v46;
      uint64_t v62 = v61;
      int v47 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v3, (int *)&v62);
      goto LABEL_46;
    }
LABEL_43:
    int v47 = 0;
    goto LABEL_46;
  }
  uint64_t v56 = v3;
  uint64_t v57 = a3;
  uint64_t v58 = v6;
  uint64_t v59 = v17;
  unint64_t v18 = 0;
  do
  {
    uint64_t v21 = (int *)&v16[5 * v18];
    if (*(void *)v21 == v17 && v21[8] <= 100)
    {
      unint64_t v22 = a1[5];
      if ((unint64_t)v14 < v22)
      {
        *(_DWORD *)uint64_t v14 = v18;
        uint64_t v19 = (uint64_t)(v14 + 4);
LABEL_4:
        a1[4] = v19;
        uint64_t v14 = (char *)v19;
        goto LABEL_5;
      }
      uint64_t v23 = (char *)*v60;
      uint64_t v24 = v14 - (unsigned char *)*v60;
      uint64_t v25 = v24 >> 2;
      unint64_t v26 = (v24 >> 2) + 1;
      if (v26 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v22 - (void)v23;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v29 = operator new(4 * v28);
        uint64_t v30 = &v29[4 * v25];
        *uint64_t v30 = v18;
        uint64_t v19 = (uint64_t)(v30 + 1);
        if (v14 == v23) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (_DWORD *)(4 * v25);
        *(_DWORD *)(4 * v25) = v18;
        uint64_t v19 = 4 * v25 + 4;
        if (v14 == v23) {
          goto LABEL_23;
        }
      }
      unint64_t v31 = v14 - 4 - v23;
      if (v31 >= 0xBC)
      {
        if (&v29[v24 - 4 - (v31 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[v24 - 4])
        {
          uint64_t v32 = v14;
        }
        else if (&v14[-(v31 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
        {
          uint64_t v32 = v14;
        }
        else if ((unint64_t)(v14 - &v29[v24]) >= 0x20)
        {
          uint64_t v34 = (v31 >> 2) + 1;
          uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v32 = &v14[-v35];
          uint64_t v30 = (_DWORD *)((char *)v30 - v35);
          unint64_t v36 = &v29[4 * v25 - 16];
          unint64_t v37 = v14 - 16;
          uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            _OWORD *v36 = v39;
            v36 -= 2;
            v37 -= 32;
            v38 -= 8;
          }
          while (v38);
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v32 = v14;
        }
      }
      else
      {
        uint64_t v32 = v14;
      }
      do
      {
        int v33 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--uint64_t v30 = v33;
      }
      while (v32 != v23);
LABEL_23:
      a1[3] = v30;
      a1[4] = v19;
      a1[5] = &v29[4 * v28];
      if (v23)
      {
        operator delete(v23);
        uint64_t v16 = (uint64_t *)a1[6];
        uint64_t v15 = (void *)a1[7];
      }
      uint64_t v17 = v59;
      goto LABEL_4;
    }
LABEL_5:
    ++v18;
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v15 - v16);
  }
  while (v20 > v18);
  uint64_t v40 = *v60;
  if (*v60 == v14)
  {
    a3 = v57;
    BOOL v6 = v58;
    uint64_t v3 = v56;
    BOOL v42 = __OFSUB__(v20, 1);
    int v46 = v20 - 1;
    if (v46 < 0 == v42) {
      goto LABEL_40;
    }
    goto LABEL_43;
  }
  unint64_t v41 = (unint64_t)(v14 - v40) >> 2;
  BOOL v42 = __OFSUB__(v41, 1);
  int v43 = v41 - 1;
  a3 = v57;
  BOOL v6 = v58;
  size_t v7 = (absl::lts_2020_02_25::Mutex *)v56;
  if (v43 < 0 != v42)
  {
    uint64_t v44 = 0;
  }
  else
  {
    LODWORD(v61) = 0;
    HIDWORD(v61) = v43;
    uint64_t v62 = v61;
    uint64_t v44 = (int)absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v61, v56, (int *)&v62);
    uint64_t v40 = *v60;
  }
  int v47 = *(_DWORD *)&v40[4 * v44];
LABEL_46:
  uint64_t v48 = a1[6] + 40 * v47;
  int v49 = *(_DWORD *)(v48 + 32) + 1;
  *(_DWORD *)(v48 + 32) = v49;
  uint64_t v50 = *(void *)v48;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = v50;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v52 = *(unsigned char **)(v48 + 8);
  int v51 = *(unsigned char **)(v48 + 16);
  int64_t v53 = v51 - v52;
  if (v51 != v52)
  {
    if (v53 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    long long v54 = (char *)operator new(v51 - v52);
    *(void *)(a3 + 8) = v54;
    uint64_t v55 = &v54[8 * (v53 >> 3)];
    *(void *)(a3 + 24) = v55;
    memcpy(v54, v52, v53);
    *(void *)(a3 + 16) = v55;
  }
  *(_DWORD *)(a3 + 32) = v49;
  absl::lts_2020_02_25::Mutex::Unlock(v6, v7, v8, v9, v10, v11, v12, v13);
}

void sub_23CD658CC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, absl::lts_2020_02_25::Mutex *a12)
{
  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

operations_research::sat::SatDecisionPolicy *operations_research::sat::SatDecisionPolicy::SatDecisionPolicy(operations_research::sat::SatDecisionPolicy *this, operations_research::sat::Model *a2)
{
  *(void *)this = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((void *)this + 1) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>((uint64_t)a2);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 2) = v4;
  *((unsigned char *)this + 24) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 5, 1uLL);
  uint64_t v5 = *((void *)this + 8);
  if (*((void *)this + 9) != v5) {
    *((void *)this + 9) = v5;
  }
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0xFFFFFFFF00000000;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0x3FF0000000000000;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  return this;
}

void sub_23CD659CC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (void *)v1[8];
  if (v4)
  {
    v1[9] = v4;
    operator delete(v4);
    uint64_t v5 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[6] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatDecisionPolicy::IncreaseNumVariables(operations_research::sat::SatDecisionPolicy *this, int a2)
{
  uint64_t v6 = *((void *)this + 20);
  uint64_t v4 = (char *)this + 160;
  uint64_t v5 = v6;
  uint64_t v7 = *((void *)this + 21) - v6;
  unint64_t v8 = a2;
  *(void *)__x = *(void *)(*(void *)this + 112);
  BOOL v9 = a2 >= (unint64_t)(v7 >> 3);
  unint64_t v10 = a2 - (v7 >> 3);
  if (v10 != 0 && v9)
  {
    std::vector<double>::__append((uint64_t)v4, v10, (uint64_t *)__x);
  }
  else if (!v9)
  {
    *((void *)this + 21) = v5 + 8 * v8;
  }
  uint64_t v11 = *((void *)this + 23);
  uint64_t v12 = *((void *)this + 24);
  *(void *)__x = 0;
  unint64_t v13 = (v12 - v11) >> 3;
  if (v8 <= v13)
  {
    if (v8 < v13) {
      *((void *)this + 24) = v11 + 8 * v8;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 184, v8 - v13, (uint64_t *)__x);
  }
  uint64_t v14 = *((void *)this + 26);
  uint64_t v15 = *((void *)this + 27);
  *(void *)__x = 0;
  unint64_t v16 = (v15 - v14) >> 3;
  if (v8 <= v16)
  {
    if (v8 < v16) {
      *((void *)this + 27) = v14 + 8 * v8;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 208, v8 - v16, (uint64_t *)__x);
  }
  operations_research::BitQueue64::IncreaseSize((operations_research::sat::SatDecisionPolicy *)((char *)this + 120), a2);
  *(void *)__x = 0;
  uint64_t v17 = *((void *)this + 35);
  unint64_t v18 = (*((void *)this + 36) - v17) >> 3;
  if (v8 <= v18)
  {
    if (v8 < v18) {
      *((void *)this + 36) = v17 + 8 * v8;
    }
  }
  else
  {
    std::vector<double>::__append((uint64_t)this + 280, v8 - v18, (uint64_t *)__x);
  }
  std::vector<BOOL>::resize((uint64_t)this + 256, v8, 0);
  std::vector<BOOL>::resize((uint64_t)this + 232, v8, *(unsigned __int8 *)(*(void *)this + 304));
  operations_research::sat::SatDecisionPolicy::ResetInitialPolarity(this, v7 >> 3);
  uint64_t v19 = *((void *)this + 5);
  unint64_t v20 = (void *)((char *)this + 40);
  unint64_t v21 = (*((void *)this + 6) - v19) >> 4;
  if (v8 + 1 <= v21)
  {
    if (v8 + 1 < v21) {
      *((void *)this + 6) = v19 + 16 * (v8 + 1);
    }
  }
  else
  {
    std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 5, v8 + 1 - v21);
  }
  uint64_t v22 = *((void *)this + 8);
  uint64_t v23 = *((void *)this + 9);
  uint64_t v24 = (void *)((char *)this + 64);
  __x[0] = 0;
  unint64_t v25 = (v23 - v22) >> 2;
  if (v8 <= v25)
  {
    if (v8 < v25) {
      *((void *)this + 9) = v22 + 4 * v8;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 64), v8 - v25, __x);
  }
  if (*((unsigned char *)this + 24) && (int)(v7 >> 3) < a2)
  {
    uint64_t v26 = (int)(v7 >> 3);
    do
    {
      double v29 = *(double *)(*((void *)this + 20) + 8 * v26);
      int v30 = *((_DWORD *)this + 8);
      unsigned int v31 = v30 + 1;
      *((_DWORD *)this + 8) = v30 + 1;
      if (v30 >= 1)
      {
        while (1)
        {
          signed int v27 = v31 >> 1;
          uint64_t v34 = (double *)(*v20 + 16 * (v31 >> 1));
          uint64_t v35 = *(unsigned int *)v34;
          uint64_t v36 = *((unsigned int *)v34 + 1);
          double v37 = v34[1];
          if (v37 >= v29 && (v37 != v29 || *(float *)&v36 >= 0.0)) {
            break;
          }
          uint64_t v32 = *v20 + 16 * v31;
          *(void *)uint64_t v32 = v35 | (v36 << 32);
          *(double *)(v32 + 8) = v37;
          *(_DWORD *)(*v24 + 4 * (int)v35) = v31;
          BOOL v33 = v31 > 3;
          v31 >>= 1;
          if (!v33) {
            goto LABEL_30;
          }
        }
      }
      signed int v27 = v31;
LABEL_30:
      uint64_t v28 = *v20 + 16 * v27;
      *(void *)uint64_t v28 = v26;
      *(double *)(v28 + 8) = v29;
      *(_DWORD *)(*v24 + 4 * v26++) = v27;
    }
    while (v26 != v8);
  }
}

void operations_research::BitQueue64::IncreaseSize(operations_research::BitQueue64 *this, int a2)
{
  int v2 = *(_DWORD *)this;
  LODWORD(v7[0]) = a2;
  LODWORD(v8) = v2;
  if (v2 > a2) {
    google::MakeCheckOpString<int,int>((int)v7, (int)&v8, "size >= size_");
  }
  *(_DWORD *)this = a2;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  unint64_t v5 = (unint64_t)(a2 + 63) >> 6;
  v7[0] = 0;
  unint64_t v6 = (v4 - v3) >> 3;
  if (v5 <= v6)
  {
    if (v5 < v6) {
      *((void *)this + 2) = v3 + 8 * v5;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)this + 8, v5 - v6, v7);
  }
}

void sub_23CD65D64(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void *operations_research::sat::SatDecisionPolicy::ResetInitialPolarity(void *this, int a2)
{
  uint64_t v2 = (this[21] - this[20]) >> 3;
  if ((int)v2 > a2)
  {
    uint64_t v3 = this;
    unint64_t v4 = a2;
    do
    {
      switch(*(_DWORD *)(*v3 + 196))
      {
        case 0:
          uint64_t v5 = v3[32];
          unint64_t v6 = v4 >> 6;
          uint64_t v7 = 8 * (v4 >> 6);
          uint64_t v8 = 1 << v4;
          goto LABEL_16;
        case 1:
          uint64_t v5 = v3[32];
          unint64_t v6 = v4 >> 6;
          uint64_t v7 = 8 * (v4 >> 6);
          uint64_t v8 = 1 << v4;
          goto LABEL_4;
        case 2:
          uint64_t v11 = 0x100000000;
          this = (void *)std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v11, v3[2], &v11);
          uint64_t v5 = v3[32];
          unint64_t v6 = v4 >> 6;
          uint64_t v8 = 1 << v4;
          if (this) {
            uint64_t v10 = *(void *)(v5 + 8 * v6) | v8;
          }
          else {
            uint64_t v10 = *(void *)(v5 + 8 * v6) & ~v8;
          }
          *(void *)(v5 + 8 * v6) = v10;
          break;
        case 3:
          uint64_t v5 = v3[32];
          unint64_t v6 = v4 >> 6;
          uint64_t v8 = 1 << v4;
          uint64_t v7 = 8 * (v4 >> 6);
          if (*(double *)(v3[35] + 8 * v4) > 0.0) {
            goto LABEL_16;
          }
          goto LABEL_4;
        case 4:
          uint64_t v5 = v3[32];
          unint64_t v6 = v4 >> 6;
          uint64_t v8 = 1 << v4;
          uint64_t v7 = 8 * (v4 >> 6);
          if (*(double *)(v3[35] + 8 * v4) >= 0.0) {
LABEL_4:
          }
            uint64_t v9 = *(void *)(v5 + v7) & ~v8;
          else {
LABEL_16:
          }
            uint64_t v9 = *(void *)(v5 + v7) | v8;
          *(void *)(v5 + v7) = v9;
          break;
        default:
          uint64_t v5 = v3[32];
          unint64_t v6 = v4 >> 6;
          uint64_t v8 = 1 << v4;
          break;
      }
      *(_DWORD *)(*(void *)(v3[1] + 120) + 8 * v4) = *(_DWORD *)(*(void *)(v3[1] + 120) + 8 * v4) & 0xFFFFFFFE | ((*(void *)(v5 + 8 * v6) & v8) != 0);
      ++v4;
    }
    while (v4 != v2);
  }
  return this;
}

void operations_research::sat::SatDecisionPolicy::ResetDecisionHeuristic(operations_research::sat::SatDecisionPolicy *this)
{
  uint64_t v2 = *((void *)this + 21);
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 19) = 0x3FF0000000000000;
  unint64_t v4 = (int)((v2 - v3) >> 3);
  *(void *)__u = *(void *)(*(void *)this + 112);
  std::vector<double>::assign((uint64_t)this + 160, v4, (uint64_t *)__u);
  *(void *)__u = 0;
  std::vector<double>::assign((uint64_t)this + 184, v4, (uint64_t *)__u);
  *(void *)__u = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)this + 208, v4, (uint64_t *)__u);
  *((_DWORD *)this + 8) = 0;
  std::vector<int>::size_type v5 = (uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 2;
  __u[0] = 0;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 64), v5, __u);
  operations_research::sat::SatDecisionPolicy::ResetInitialPolarity(this, 0);
  LOBYTE(__u[0]) = *(unsigned char *)(*(void *)this + 304);
  std::vector<BOOL>::assign((char **)this + 29, v4, __u);
  *((void *)this + 11) = 0;
  *((void *)this + 13) = *((void *)this + 12);
  *((unsigned char *)this + 24) = 0;
}

void operations_research::sat::SatDecisionPolicy::InitializeVariableOrdering(std::vector<int> *this)
{
  p_end_cap = &this[2].__end_cap_;
  value = this[2].__end_cap_.__value_;
  unint64_t v4 = (char *)this[7].__begin_ - (char *)this[6].__end_cap_.__value_;
  LODWORD(this[1].__end_) = 0;
  std::vector<int>::size_type v5 = this[3].__begin_ - value;
  __u[0] = 0;
  std::vector<int>::assign((std::vector<int> *)((char *)this + 64), v5, __u);
  *(void *)__u = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unint64_t v73 = v4 >> 3;
  unint64_t v74 = v4;
  if ((int)(v4 >> 3) >= 1)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = (v4 >> 3);
    while (1)
    {
      if (((*(void *)(*((void *)this->__end_ + 3) + (((unint64_t)(2 * (int)v9) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v9 & 0x1Fu))) & 3) != 0) {
        goto LABEL_5;
      }
      double v12 = *(double *)&this[6].__end_cap_.__value_[2 * v9];
      if (v12 > 0.0)
      {
        float v13 = *(double *)&this[7].__end_cap_.__value_[2 * v9];
        int end = (int)this[1].__end_;
        unsigned int v15 = end + 1;
        LODWORD(this[1].__end_) = end + 1;
        if (end >= 1)
        {
          while (1)
          {
            int v18 = v15 >> 1;
            uint64_t v19 = this[1].__end_cap_.__value_;
            unint64_t v20 = (double *)&v19[4 * (v15 >> 1)];
            uint64_t v21 = *(unsigned int *)v20;
            uint64_t v22 = *((unsigned int *)v20 + 1);
            double v23 = v20[1];
            if (v23 >= v12 && (v23 != v12 || *(float *)&v22 >= v13)) {
              break;
            }
            unint64_t v16 = &v19[4 * v15];
            *(void *)unint64_t v16 = v21 | (v22 << 32);
            *((double *)v16 + 1) = v23;
            p_end_cap->__value_[(int)v21] = v15;
            BOOL v17 = v15 > 3;
            v15 >>= 1;
            if (!v17) {
              goto LABEL_18;
            }
          }
        }
        int v18 = v15;
LABEL_18:
        unint64_t v25 = &this[1].__end_cap_.__value_[4 * v18];
        *(void *)unint64_t v25 = v9 | ((unint64_t)LODWORD(v13) << 32);
        *((double *)v25 + 1) = v12;
        this[2].__end_cap_.__value_[v9] = v18;
        goto LABEL_5;
      }
      if (v8 >= v7) {
        break;
      }
      *(_DWORD *)uint64_t v8 = v9;
      uint64_t v11 = (uint64_t)(v8 + 4);
LABEL_4:
      uint64_t v76 = v11;
      uint64_t v8 = (char *)v11;
LABEL_5:
      if (++v9 == v10) {
        goto LABEL_48;
      }
    }
    uint64_t v26 = (v8 - v6) >> 2;
    unint64_t v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if ((v7 - v6) >> 1 > v27) {
      unint64_t v27 = (v7 - v6) >> 1;
    }
    if ((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28)
    {
      if (v28 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v29 = v28;
      int v30 = operator new(4 * v28);
      unint64_t v28 = v29;
      unsigned int v31 = &v30[4 * v26];
      *(_DWORD *)unsigned int v31 = v9;
      uint64_t v11 = (uint64_t)(v31 + 4);
      if (v8 == v6) {
        goto LABEL_34;
      }
    }
    else
    {
      int v30 = 0;
      unsigned int v31 = (char *)(4 * v26);
      *(_DWORD *)(4 * v26) = v9;
      uint64_t v11 = 4 * v26 + 4;
      if (v8 == v6) {
        goto LABEL_34;
      }
    }
    unint64_t v32 = v8 - 4 - v6;
    if (v32 >= 0xBC)
    {
      if (&v30[v8 - v6 - 4 - (v32 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v8 - v6 - 4])
      {
        BOOL v33 = v8;
      }
      else if (&v8[-(v32 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4)
      {
        BOOL v33 = v8;
      }
      else if ((unint64_t)(v6 - v30) >= 0x20)
      {
        uint64_t v36 = (v32 >> 2) + 1;
        uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        BOOL v33 = &v8[-v37];
        v31 -= v37;
        uint64_t v38 = &v30[4 * v26 - 16];
        long long v39 = v8 - 16;
        uint64_t v40 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *uint64_t v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        if (v36 == (v36 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_34;
        }
      }
      else
      {
        BOOL v33 = v8;
      }
    }
    else
    {
      BOOL v33 = v8;
    }
    do
    {
      int v34 = *((_DWORD *)v33 - 1);
      v33 -= 4;
      *((_DWORD *)v31 - 1) = v34;
      v31 -= 4;
    }
    while (v33 != v6);
LABEL_34:
    uint64_t v7 = &v30[4 * v28];
    *(void *)__u = v31;
    uint64_t v76 = v11;
    uint64_t v77 = v7;
    if (v6)
    {
      uint64_t v35 = v7;
      operator delete(v6);
      uint64_t v7 = v35;
    }
    unint64_t v6 = v31;
    goto LABEL_4;
  }
  uint64_t v8 = 0;
LABEL_48:
  int v42 = this->__begin_[16];
  if (v42 != 1)
  {
    uint64_t v43 = v74;
    if (v42 == 2)
    {
      uint64_t v44 = *(char **)__u;
      if ((uint64_t)&v8[-*(void *)__u] >= 5)
      {
        int v45 = this->__end_cap_.__value_;
        long long v79 = xmmword_23CE812D0;
        if ((unint64_t)(v8 - 4) > *(void *)__u)
        {
          uint64_t v46 = ((unint64_t)&v8[-*(void *)__u] >> 2) - 1;
          do
          {
            v78[0] = 0;
            v78[1] = v46;
            uint64_t v47 = std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v79, (uint64_t)v45, v78);
            if (v47)
            {
              int v48 = *(_DWORD *)v44;
              *(_DWORD *)uint64_t v44 = *(_DWORD *)&v44[4 * v47];
              *(_DWORD *)&v44[4 * v47] = v48;
            }
            v44 += 4;
            --v46;
          }
          while (v44 < v8 - 4);
        }
      }
    }
    goto LABEL_61;
  }
  uint64_t v43 = v74;
  int v49 = *(char **)__u;
  if (*(char **)__u != v8)
  {
    uint64_t v50 = v8 - 4;
    if ((unint64_t)(v8 - 4) > *(void *)__u)
    {
      unint64_t v51 = *(void *)__u + 4;
      do
      {
        int v52 = *(_DWORD *)(v51 - 4);
        *(_DWORD *)(v51 - 4) = *(_DWORD *)v50;
        *(_DWORD *)uint64_t v50 = v52;
        v50 -= 4;
        BOOL v53 = v51 >= (unint64_t)v50;
        v51 += 4;
      }
      while (!v53);
LABEL_61:
      int v49 = *(char **)__u;
    }
  }
  if (v49 != v8)
  {
    long long v54 = v49;
    do
    {
      uint64_t v57 = *(int *)v54;
      float v58 = *(double *)&this[7].__end_cap_.__value_[2 * v57];
      int v59 = (int)this[1].__end_;
      unsigned int v60 = v59 + 1;
      LODWORD(this[1].__end_) = v59 + 1;
      if (v59 >= 1)
      {
        while (1)
        {
          int v55 = v60 >> 1;
          uint64_t v62 = this[1].__end_cap_.__value_;
          uint64_t v63 = (double *)&v62[4 * (v60 >> 1)];
          uint64_t v64 = *(unsigned int *)v63;
          uint64_t v65 = *((unsigned int *)v63 + 1);
          double v66 = v63[1];
          if (v66 >= 0.0 && (v66 != 0.0 || *(float *)&v65 >= v58)) {
            break;
          }
          uint64_t v61 = &v62[4 * v60];
          *(void *)uint64_t v61 = v64 | (v65 << 32);
          *((double *)v61 + 1) = v66;
          p_end_cap->__value_[(int)v64] = v60;
          BOOL v17 = v60 > 3;
          v60 >>= 1;
          if (!v17) {
            goto LABEL_65;
          }
        }
      }
      int v55 = v60;
LABEL_65:
      uint64_t v56 = &this[1].__end_cap_.__value_[4 * v55];
      *(void *)uint64_t v56 = v57 | ((unint64_t)LODWORD(v58) << 32);
      *((void *)v56 + 1) = 0;
      this[2].__end_cap_.__value_[v57] = v55;
      v54 += 4;
    }
    while (v54 != v8);
  }
  LODWORD(this[5].__begin_) = v73;
  HIDWORD(this[5].__begin_) = -1;
  *(void *)&long long v79 = 0;
  std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::assign((uint64_t)&this[5].__end_, (unint64_t)((int)(v43 >> 3) + 63) >> 6, (uint64_t *)&v79);
  int v68 = this->__end_[3];
  int begin_high = v68 - 1;
  if (SHIDWORD(this[5].__begin_) > v68 - 1) {
    int begin_high = HIDWORD(this[5].__begin_);
  }
  HIDWORD(this[5].__begin_) = begin_high;
  int v70 = v68 >> 6;
  std::vector<int>::pointer v71 = this[5].__end_;
  *(void *)&v71[2 * (v68 >> 6)] |= ~(-1 << v68);
  if (v68 >= 64)
  {
    if (v70 >= 1) {
      int v72 = 1;
    }
    else {
      int v72 = v68 >> 6;
    }
    memset(&v71[2 * ((v70 - 1) - (unint64_t)(v70 - v72))], 255, 8 * (v70 - v72) + 8);
  }
  LOBYTE(this[1].__begin_) = 1;
  if (v49) {
    operator delete(v49);
  }
}

void sub_23CD6654C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatDecisionPolicy::SetAssignmentPreference(uint64_t result, int a2, double a3)
{
  if (*(unsigned char *)(*(void *)result + 455))
  {
    int v3 = a2 >> 1;
    unint64_t v4 = ((unint64_t)((uint64_t)a2 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8;
    *(void *)(*(void *)(result + 232) + v4) &= ~(1 << (a2 >> 1));
    uint64_t v5 = *(void *)(result + 256);
    uint64_t v6 = *(void *)(v5 + v4);
    uint64_t v7 = v6 | (1 << (a2 >> 1));
    if (a2) {
      uint64_t v7 = v6 & ~(1 << v3);
    }
    *(void *)(v5 + v4) = v7;
    *(double *)(*(void *)(result + 184) + 8 * v3) = a3;
    *(unsigned char *)(result + 24) = 0;
  }
  return result;
}

uint64_t operations_research::sat::SatDecisionPolicy::UpdateWeightedSign(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = *(void *)(result + 280);
    do
    {
      double v6 = (double)*(uint64_t *)(v3 + 4) / (double)a3;
      int v7 = *(_DWORD *)v3;
      v3 += 12;
      uint64_t v8 = 8 * (v7 >> 1);
      if ((v7 & 1) == 0) {
        double v6 = -v6;
      }
      *(double *)(v5 + v8) = *(double *)(v5 + v8) + v6;
    }
    while (v3 != v4);
  }
  return result;
}

void *operations_research::sat::SatDecisionPolicy::BumpVariableActivities(void *result, int **a2)
{
  if (!*(unsigned char *)(*result + 96))
  {
    double v6 = *a2;
    int v7 = a2[1];
    if (*a2 == v7) {
      return result;
    }
    double v8 = *(double *)(*result + 224);
    uint64_t v9 = *(void *)(result[1] + 120);
    double v10 = 1.0 / v8;
    while (1)
    {
      if ((*(_DWORD *)(v9 + 8 * (*v6 >> 1)) & 0xFFFFFFE) == 0) {
        goto LABEL_9;
      }
      uint64_t v11 = (float64x2_t *)result[20];
      uint64_t v12 = (uint64_t)*v6 >> 1;
      double v13 = *((double *)result + 19) + v11->f64[v12];
      v11->f64[v12] = v13;
      unint64_t v14 = *(int *)(v9 + v12 * 8 + 4);
      int v15 = *((_DWORD *)result + 31);
      if (v15 <= (int)v14) {
        int v15 = v14;
      }
      *((_DWORD *)result + 31) = v15;
      *(void *)(result[16] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (v13 <= v8) {
        goto LABEL_9;
      }
      *((double *)result + 19) = v10 * *((double *)result + 19);
      unint64_t v16 = result[21] - (void)v11;
      if ((int)(v16 >> 3) >= 1)
      {
        unint64_t v17 = (v16 >> 3);
        if (v17 >= 4)
        {
          uint64_t v19 = (v16 >> 3) & 3;
          unint64_t v18 = v17 - v19;
          unint64_t v20 = v11 + 1;
          unint64_t v21 = v17 - v19;
          do
          {
            float64x2_t v22 = vmulq_n_f64(*v20, v10);
            v20[-1] = vmulq_n_f64(v20[-1], v10);
            float64x2_t *v20 = v22;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          if (!v19) {
            goto LABEL_8;
          }
        }
        else
        {
          unint64_t v18 = 0;
        }
        unint64_t v23 = v18 - v17;
        uint64_t v24 = &v11->f64[v18];
        do
        {
          *uint64_t v24 = v10 * *v24;
          ++v24;
        }
        while (!__CFADD__(v23++, 1));
      }
LABEL_8:
      *((unsigned char *)result + 24) = 0;
LABEL_9:
      if (++v6 == v7) {
        return result;
      }
    }
  }
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result[26];
    do
    {
      int v5 = *v2++;
      ++*(void *)(v4 + 8 * (v5 >> 1));
    }
    while (v2 != v3);
  }
  return result;
}

double operations_research::sat::SatDecisionPolicy::UpdateVariableActivityIncrement(operations_research::sat::SatDecisionPolicy *this)
{
  double result = *((double *)this + 19) * (1.0 / *(double *)(*(void *)this + 216));
  *((double *)this + 19) = result;
  return result;
}

uint64_t operations_research::sat::SatDecisionPolicy::NextBranch(std::vector<int> *this)
{
  if (!LOBYTE(this[1].__begin_)) {
    operations_research::sat::SatDecisionPolicy::InitializeVariableOrdering(this);
  }
  double v2 = *((double *)this->__begin_ + 9);
  if (v2 == 0.0) {
    goto LABEL_14;
  }
  value = this->__end_cap_.__value_;
  uint64_t v4 = *((void *)value + 312);
  unint64_t v5 = (v4 + 1) % 0x270uLL;
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  LODWORD(v4) = value[(v4 + 397) % 0x270uLL] ^ ((value[v5] & 0x7FFFFFFE | value[v4] & 0x80000000) >> 1) ^ (value[v5] << 31 >> 31) & 0x9908B0DF;
  value[v6] = v4;
  LODWORD(v4) = ((v4 ^ (v4 >> 11)) << 7) & 0x9D2C5680 ^ v4 ^ (v4 >> 11);
  double v8 = (double)((v4 << 15) & 0xEFC60000 ^ v4 ^ (((v4 << 15) & 0xEFC60000 ^ v4) >> 18));
  if (v5 == 623) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = v5 + 1;
  }
  uint64_t v10 = 397;
  if (v5 >= 0xE3) {
    uint64_t v10 = -227;
  }
  unsigned int v11 = value[v10 + v5] ^ ((value[v9] & 0x7FFFFFFE | value[v5] & 0x80000000) >> 1) ^ (value[v9] << 31 >> 31) & 0x9908B0DF;
  value[v7] = v11;
  unsigned int v12 = ((v11 ^ (v11 >> 11)) << 7) & 0x9D2C5680 ^ v11 ^ (v11 >> 11);
  *((void *)value + 312) = v9;
  if ((v8 + (double)((v12 << 15) & 0xEFC60000 ^ v12 ^ (((v12 << 15) & 0xEFC60000 ^ v12) >> 18)) * 4294967300.0)
     * 5.42101086e-20
     + 0.0 >= v2)
  {
LABEL_14:
    uint64_t v19 = this[1].__end_cap_.__value_;
    int v20 = *((void *)v19 + 2);
    for (std::vector<int>::pointer i = this->__end_;
          ((*(void *)(*((void *)i + 3) + (((unint64_t)(2 * v20) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (*((void *)v19 + 2) & 0x1Fu))) & 3) != 0;
          int v20 = *((void *)v19 + 2))
    {
      this[2].__end_cap_.__value_[v20] = 0;
      uint64_t end_low = LODWORD(this[1].__end_);
      LODWORD(this[1].__end_) = end_low - 1;
      if ((int)end_low >= 2)
      {
        operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority((uint64_t)&this[1].__end_, 1, *(void *)&v19[4 * end_low], *(void *)&v19[4 * end_low + 2]);
        std::vector<int>::pointer i = this->__end_;
        uint64_t v19 = this[1].__end_cap_.__value_;
      }
      unint64_t v21 = *(int *)(*((void *)i + 15) + 8 * v20 + 4);
      int begin_high = HIDWORD(this[5].__begin_);
      if (begin_high <= (int)v21) {
        int begin_high = *(_DWORD *)(*((void *)i + 15) + 8 * v20 + 4);
      }
      HIDWORD(this[5].__begin_) = begin_high;
      *(void *)((char *)this[5].__end_ + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    }
    LODWORD(v24) = v20;
    double v25 = *((double *)this->__begin_ + 10);
    if (v25 == 0.0) {
      goto LABEL_31;
    }
  }
  else
  {
    while (1)
    {
      int v13 = LODWORD(this[1].__end_) - 1;
      LODWORD(v40) = 0;
      HIDWORD(v40) = v13;
      int v14 = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v40, (uint64_t)value, &v40);
      uint64_t v15 = *(void *)&this[1].__end_cap_.__value_[4 * v14 + 4];
      std::vector<int>::pointer i = this->__end_;
      if (((*(void *)(*((void *)i + 3) + (((unint64_t)(2 * (int)v15) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v15 & 0x1Fu))) & 3) == 0) {
        break;
      }
      unint64_t v17 = *(int *)(*((void *)i + 15) + 8 * (int)v15 + 4);
      int v18 = HIDWORD(this[5].__begin_);
      if (v18 <= (int)v17) {
        int v18 = v17;
      }
      HIDWORD(this[5].__begin_) = v18;
      *(void *)((char *)this[5].__end_ + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::Remove((int *)&this[1].__end_, v15);
      value = this->__end_cap_.__value_;
    }
    uint64_t v24 = *(void *)&this[1].__end_cap_.__value_[4 * v14 + 4];
    double v25 = *((double *)this->__begin_ + 10);
    if (v25 == 0.0) {
      goto LABEL_31;
    }
  }
  uint64_t v26 = this->__end_cap_.__value_;
  uint64_t v27 = *((void *)v26 + 312);
  unint64_t v28 = (v27 + 1) % 0x270uLL;
  uint64_t v29 = v27;
  uint64_t v30 = v28;
  LODWORD(v27) = v26[(v27 + 397) % 0x270uLL] ^ ((v26[v28] & 0x7FFFFFFE | v26[v27] & 0x80000000) >> 1) ^ (v26[v28] << 31 >> 31) & 0x9908B0DF;
  v26[v29] = v27;
  LODWORD(v27) = ((v27 ^ (v27 >> 11)) << 7) & 0x9D2C5680 ^ v27 ^ (v27 >> 11);
  double v31 = (double)((v27 << 15) & 0xEFC60000 ^ v27 ^ (((v27 << 15) & 0xEFC60000 ^ v27) >> 18));
  if (v28 == 623) {
    unint64_t v32 = 0;
  }
  else {
    unint64_t v32 = v28 + 1;
  }
  uint64_t v33 = 397;
  if (v28 >= 0xE3) {
    uint64_t v33 = -227;
  }
  unsigned int v34 = v26[v33 + v28] ^ ((v26[v32] & 0x7FFFFFFE | v26[v28] & 0x80000000) >> 1) ^ (v26[v32] << 31 >> 31) & 0x9908B0DF;
  v26[v30] = v34;
  unsigned int v35 = ((v34 ^ (v34 >> 11)) << 7) & 0x9D2C5680 ^ v34 ^ (v34 >> 11);
  *((void *)v26 + 312) = v32;
  if ((v31 + (double)((v35 << 15) & 0xEFC60000 ^ v35 ^ (((v35 << 15) & 0xEFC60000 ^ v35) >> 18)) * 4294967300.0)
     * 5.42101086e-20
     + 0.0 < v25)
  {
    uint64_t v40 = 0x100000000;
    int v36 = std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v40, (uint64_t)v26, &v40) == 0;
    return v36 | (2 * v24);
  }
LABEL_31:
  unint64_t v37 = (unint64_t)(int)v24 >> 6;
  if ((*(void *)&this[9].__end_cap_.__value_[2 * v37] & (1 << v24)) != 0) {
    int v38 = *(unsigned char *)(*((void *)i + 15) + 8 * (int)v24) & 1;
  }
  else {
    int v38 = (*(void *)&this[10].__end_cap_.__value_[2 * v37] & (1 << v24)) != 0;
  }
  int v36 = v38 ^ 1;
  return v36 | (2 * v24);
}

int *operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::Remove(int *result, int a2)
{
  uint64_t v2 = *((void *)result + 4);
  uint64_t v3 = 4 * a2;
  unsigned int v4 = *(_DWORD *)(v2 + v3);
  *(_DWORD *)(v2 + v3) = 0;
  uint64_t v5 = *result;
  *double result = v5 - 1;
  if (v4 != v5)
  {
    uint64_t v6 = (int)v4;
    uint64_t v7 = *((void *)result + 1);
    double v8 = (unsigned int *)(v7 + 16 * v5);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    double v11 = *((double *)v8 + 1);
    double v12 = *(double *)(v7 + 16 * (int)v4 + 8);
    if (v11 < v12) {
      return (int *)operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority((uint64_t)result, v4, v9 | (v10 << 32), *((void *)v8 + 1));
    }
    float v13 = *((float *)v8 + 1);
    if (v11 == v12 && *(float *)(v7 + 16 * (int)v4 + 4) > *(float *)&v10)
    {
      return (int *)operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority((uint64_t)result, v4, v9 | (v10 << 32), *((void *)v8 + 1));
    }
    else
    {
      uint64_t v14 = v9 | (v10 << 32);
      if ((int)v4 >= 2)
      {
        while (1)
        {
          unsigned int v16 = v4 >> 1;
          uint64_t v7 = *((void *)result + 1);
          unint64_t v17 = (double *)(v7 + 16 * (v4 >> 1));
          uint64_t v18 = *(unsigned int *)v17;
          uint64_t v19 = *((unsigned int *)v17 + 1);
          double v20 = v17[1];
          if (v20 >= v11)
          {
            BOOL v21 = v20 != v11 || v13 <= *(float *)&v19;
            if (v21) {
              break;
            }
          }
          uint64_t v15 = v7 + 16 * v4;
          *(void *)uint64_t v15 = v18 | (v19 << 32);
          *(double *)(v15 + 8) = v20;
          *(_DWORD *)(*((void *)result + 4) + 4 * (int)v18) = v4;
          BOOL v21 = v4 > 3;
          v4 >>= 1;
          if (!v21)
          {
            uint64_t v7 = *((void *)result + 1);
            unsigned int v4 = v16;
            break;
          }
        }
        uint64_t v6 = v4;
      }
      uint64_t v22 = v7 + 16 * v6;
      *(void *)uint64_t v22 = v14;
      *(double *)(v22 + 8) = v11;
      *(_DWORD *)(*((void *)result + 4) + 4 * (int)v9) = v4;
    }
  }
  return result;
}

uint64_t operations_research::sat::SatDecisionPolicy::PqInsertOrUpdate(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 8 * (int)a2;
  float v3 = *(double *)(*(void *)(result + 184) + v2);
  double v4 = *(double *)(*(void *)(result + 160) + v2);
  unsigned int v5 = *(_DWORD *)(*(void *)(result + 64) + 4 * (int)a2);
  if (v5)
  {
    unint64_t v6 = a2 | ((unint64_t)LODWORD(v3) << 32);
    if ((int)v5 >= 2)
    {
      while (1)
      {
        signed int v9 = v5 >> 1;
        uint64_t v10 = *(void *)(result + 40);
        double v11 = (double *)(v10 + 16 * (v5 >> 1));
        uint64_t v12 = *(unsigned int *)v11;
        uint64_t v13 = *((unsigned int *)v11 + 1);
        double v14 = v11[1];
        if (v14 >= v4 && (v14 != v4 || *(float *)&v13 >= v3)) {
          break;
        }
        uint64_t v7 = v10 + 16 * v5;
        *(void *)uint64_t v7 = v12 | (v13 << 32);
        *(double *)(v7 + 8) = v14;
        *(_DWORD *)(*(void *)(result + 64) + 4 * (int)v12) = v5;
        BOOL v8 = v5 > 3;
        v5 >>= 1;
        if (!v8) {
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
    unint64_t v6 = a2 | ((unint64_t)LODWORD(v3) << 32);
    int v16 = *(_DWORD *)(result + 32);
    unsigned int v5 = v16 + 1;
    *(_DWORD *)(result + 32) = v16 + 1;
    if (v16 >= 1)
    {
      while (1)
      {
        signed int v9 = v5 >> 1;
        uint64_t v18 = *(void *)(result + 40);
        uint64_t v19 = (double *)(v18 + 16 * (v5 >> 1));
        uint64_t v20 = *(unsigned int *)v19;
        uint64_t v21 = *((unsigned int *)v19 + 1);
        double v22 = v19[1];
        if (v22 >= v4 && (v22 != v4 || *(float *)&v21 >= v3)) {
          break;
        }
        uint64_t v17 = v18 + 16 * v5;
        *(void *)uint64_t v17 = v20 | (v21 << 32);
        *(double *)(v17 + 8) = v22;
        *(_DWORD *)(*(void *)(result + 64) + 4 * (int)v20) = v5;
        BOOL v8 = v5 > 3;
        v5 >>= 1;
        if (!v8) {
          goto LABEL_22;
        }
      }
    }
  }
  signed int v9 = v5;
LABEL_22:
  uint64_t v24 = *(void *)(result + 40) + 16 * v9;
  *(void *)uint64_t v24 = v6;
  *(double *)(v24 + 8) = v4;
  *(_DWORD *)(*(void *)(result + 64) + 4 * (int)a2) = v9;
  return result;
}

void operations_research::sat::SatDecisionPolicy::Untrail(operations_research::sat::SatDecisionPolicy *this, int a2)
{
  if (*(unsigned char *)(*(void *)this + 96))
  {
    uint64_t v4 = *((void *)this + 13);
    unsigned int v5 = (void **)((char *)this + 96);
    if (*((void *)this + 12) == v4)
    {
      int v6 = -1;
      uint64_t v7 = *(int *)(*((void *)this + 1) + 12);
      if ((int)v7 <= a2) {
        return;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(v4 - 16);
      uint64_t v7 = *(int *)(*((void *)this + 1) + 12);
      if ((int)v7 <= a2) {
        return;
      }
    }
    int v17 = 0;
    double v18 = fmax((double)*((uint64_t *)this + 11) * -0.000001 + 0.4, 0.06);
    do
    {
      if (v7 == v6)
      {
        uint64_t v21 = *((void *)this + 12);
        uint64_t v20 = *((void *)this + 13);
        v17 += *(_DWORD *)(v20 - 8);
        *((void *)this + 13) = v20 - 16;
        if (v21 == v20 - 16) {
          int v6 = -1;
        }
        else {
          int v6 = *(_DWORD *)(v20 - 32);
        }
      }
      int v22 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 72) + 4 * v7 - 4);
      signed int v23 = v22 >> 1;
      uint64_t v24 = (uint64_t)v22 >> 1;
      uint64_t v25 = *((void *)this + 26);
      uint64_t v26 = *(void *)(v25 + 8 * v23);
      if (v26 < 1)
      {
        double v27 = 0.0;
      }
      else
      {
        *(void *)(v25 + 8 * v24) = 0;
        double v27 = (double)v26 / (double)v17;
      }
      *(double *)(*((void *)this + 20) + 8 * v24) = (1.0 - v18) * *(double *)(*((void *)this + 20) + 8 * v24)
                                                    + v18 * v27;
      if (*((unsigned char *)this + 24)) {
        operations_research::sat::SatDecisionPolicy::PqInsertOrUpdate((uint64_t)this, v23);
      }
      --v7;
    }
    while (v7 > a2);
    if (v17 >= 1)
    {
      unint64_t v28 = (char *)*((void *)this + 12);
      uint64_t v29 = (char *)*((void *)this + 13);
      uint64_t v30 = *((void *)this + 1);
      if (v28 == v29)
      {
        int v31 = *(_DWORD *)(v30 + 12);
      }
      else
      {
        int v31 = *(_DWORD *)(v30 + 12);
        if (*((_DWORD *)v29 - 4) == v31)
        {
          *((void *)v29 - 1) += v17;
          return;
        }
      }
      unint64_t v32 = *((void *)this + 14);
      if ((unint64_t)v29 >= v32)
      {
        uint64_t v34 = (v29 - v28) >> 4;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v36 = v32 - (void)v28;
        if (v36 >> 3 > v35) {
          unint64_t v35 = v36 >> 3;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          if (v37 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v38 = (char *)operator new(16 * v37);
        }
        else
        {
          int v38 = 0;
        }
        long long v39 = &v38[16 * v34];
        *(_DWORD *)long long v39 = v31;
        *((void *)v39 + 1) = v17;
        uint64_t v33 = v39 + 16;
        if (v28 != v29)
        {
          do
          {
            *((_OWORD *)v39 - 1) = *((_OWORD *)v29 - 1);
            v39 -= 16;
            v29 -= 16;
          }
          while (v29 != v28);
          unint64_t v28 = (char *)*v5;
        }
        *((void *)this + 12) = v39;
        *((void *)this + 13) = v33;
        *((void *)this + 14) = &v38[16 * v37];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v29 = v31;
        *((void *)v29 + 1) = v17;
        uint64_t v33 = v29 + 16;
      }
      *((void *)this + 13) = v33;
    }
  }
  else if (*((unsigned char *)this + 24))
  {
    int v8 = *((_DWORD *)this + 31);
    if (v8 >= a2)
    {
      do
      {
        while (1)
        {
          operations_research::sat::SatDecisionPolicy::PqInsertOrUpdate((uint64_t)this, *(int *)(*(void *)(*((void *)this + 1) + 72) + 4 * v8) >> 1);
          int v9 = *((_DWORD *)this + 31);
          int v10 = v9 >> 6;
          uint64_t v11 = *((void *)this + 16);
          uint64_t v12 = 8 * (v9 >> 6);
          unint64_t v13 = *(void *)(v11 + v12) & ~(1 << v9);
          *(void *)(v11 + v12) = v13;
          if (!v13) {
            break;
          }
LABEL_8:
          int v8 = (__clz(v13) | (v10 << 6)) ^ 0x3F;
          *((_DWORD *)this + 31) = v8;
          if (v8 < a2) {
            return;
          }
        }
        uint64_t v14 = (uint64_t)v9 >> 6;
        uint64_t v15 = v11 - 8;
        while (v14)
        {
          int v16 = v14 - 1;
          unint64_t v13 = *(void *)(v15 + 8 * v14--);
          if (v13)
          {
            int v10 = v16;
            goto LABEL_8;
          }
        }
        int v8 = -1;
        *((_DWORD *)this + 31) = -1;
      }
      while (a2 <= -1);
    }
  }
}

uint64_t operations_research::IntegerPriorityQueue<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement,std::less<operations_research::sat::SatDecisionPolicy::WeightedVarQueueElement>>::SetAndDecreasePriority(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)result;
  int v5 = 2 * a2;
  int v6 = (2 * a2) | 1;
  if (v6 <= *(_DWORD *)result)
  {
    while (1)
    {
      uint64_t v17 = *(void *)(result + 8);
      double v18 = (double *)(v17 + 16 * v5);
      double v19 = v18[1];
      uint64_t v20 = (int *)(v17 + 16 * v6);
      unsigned int v21 = *v20;
      uint64_t v14 = v20[1];
      double v15 = *((double *)v20 + 1);
      if (v19 < v15 || (v19 == v15 ? (BOOL v22 = *((float *)v18 + 1) < *(float *)&v14) : (BOOL v22 = 0), v22))
      {
        if (v15 <= *(double *)&a4 && (v15 != *(double *)&a4 || *((float *)&a3 + 1) >= *(float *)&v14))
        {
LABEL_28:
          int v5 = a2;
          goto LABEL_30;
        }
      }
      else
      {
        unsigned int v21 = *(_DWORD *)v18;
        if (v19 > *(double *)&a4)
        {
          uint64_t v14 = *((unsigned int *)v18 + 1);
          double v15 = v18[1];
          int v6 = v5;
        }
        else
        {
          BOOL v23 = v19 == *(double *)&a4 && *((float *)&a3 + 1) < *((float *)v18 + 1);
          uint64_t v14 = *((unsigned int *)v18 + 1);
          double v15 = v18[1];
          int v6 = v5;
          if (!v23) {
            goto LABEL_28;
          }
        }
      }
      int v7 = v6;
      uint64_t v16 = v17 + 16 * a2;
      *(void *)uint64_t v16 = v21 | (unint64_t)(v14 << 32);
      *(_DWORD *)(*(void *)(result + 32) + 4 * (int)v21) = a2;
      *(double *)(v16 + 8) = v15;
      int v5 = 2 * v7;
      int v6 = (2 * v7) | 1;
      a2 = v7;
      if (v6 > v4) {
        goto LABEL_3;
      }
    }
  }
  int v7 = a2;
LABEL_3:
  if (v5 <= v4
    && ((uint64_t v8 = *(void *)(result + 8),
         int v9 = (double *)(v8 + 16 * v5),
         uint64_t v10 = *(unsigned int *)v9,
         uint64_t v11 = *((unsigned int *)v9 + 1),
         double v12 = v9[1],
         v12 > *(double *)&a4)
     || (v12 == *(double *)&a4 ? (BOOL v13 = *((float *)&a3 + 1) < *(float *)&v11) : (BOOL v13 = 0), v13)))
  {
    uint64_t v25 = v8 + 16 * v7;
    *(void *)uint64_t v25 = v10 | (v11 << 32);
    *(double *)(v25 + 8) = v12;
    *(_DWORD *)(*(void *)(result + 32) + 4 * (int)v10) = v7;
  }
  else
  {
    int v5 = v7;
  }
LABEL_30:
  uint64_t v26 = *(void *)(result + 8) + 16 * v5;
  *(void *)uint64_t v26 = a3;
  *(double *)(v26 + 8) = *(double *)&a4;
  *(_DWORD *)(*(void *)(result + 32) + 4 * (int)a3) = v5;
  return result;
}

uint64_t operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(void *a1, int a2, char *a3, uint64_t a4)
{
  v15[0] = a3;
  uint64_t v16 = &a3[4 * a4];
  uint64_t result = std::deque<std::vector<operations_research::sat::Literal>>::emplace_back<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(a1, v15, (const void **)&v16);
  if (!a4)
  {
LABEL_5:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 35);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: found ", 20);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v15);
  }
  uint64_t v9 = 0;
  while (*(_DWORD *)&a3[4 * v9] != a2)
  {
    if (a4 == ++v9) {
      goto LABEL_5;
    }
  }
  unint64_t v11 = a1[5] + a1[4] - 1;
  double v12 = *(int **)(*(void *)(a1[1] + 8 * (v11 / 0xAA)) + 24 * (v11 % 0xAA));
  uint64_t v13 = v9;
  int v14 = *v12;
  *double v12 = v12[v13];
  v12[v13] = v14;
  return result;
}

void sub_23CD67438(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t std::deque<std::vector<operations_research::sat::Literal>>::emplace_back<operations_research::sat::Literal const*,operations_research::sat::Literal const*>(void *a1, const void **a2, const void **a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<operations_research::sat::Literal>>::__add_back_capacity((uint64_t)a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *a2;
    int v14 = *a3;
    MEMORY[0] = 0;
    MEMORY[8] = 0;
    MEMORY[0x10] = 0;
    int64_t v13 = v14 - v11;
    if (v14 == v11) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = (void *)(*(void *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
    unint64_t v11 = *a2;
    double v12 = *a3;
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    int64_t v13 = v12 - v11;
    if (v12 == v11) {
      goto LABEL_11;
    }
  }
  if (v13 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  double v15 = (char *)operator new(v13);
  *uint64_t v10 = v15;
  v10[1] = v15;
  uint64_t v16 = &v15[4 * (v13 >> 2)];
  v10[2] = v16;
  memcpy(v15, v11, v13);
  v10[1] = v16;
LABEL_11:
  uint64_t v17 = a1[4];
  uint64_t v18 = a1[5] + 1;
  a1[5] = v18;
  unint64_t v19 = v17 + v18;
  uint64_t v20 = a1[1];
  unsigned int v21 = (void *)(v20 + 8 * (v19 / 0xAA));
  unint64_t v22 = *v21 + 24 * (v19 % 0xAA);
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  if (v22 == *v21) {
    return *(v21 - 1) + 4056;
  }
  else {
    return v22 - 24;
  }
}

void sub_23CD675C8(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::Inprocessing::PresolveLoop(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
  uint64_t v7 = result;
  if (a3) {
    goto LABEL_4;
  }
  if (*_MergedGlobals_17[0] < 1)
  {
    int v47 = 0;
  }
  else
  {
    if (_MergedGlobals_17[0] != &google::kLogSiteUninitialized)
    {
LABEL_4:
      int v47 = 1;
      goto LABEL_7;
    }
    uint64_t result = google::InitVLOG3__((google *)_MergedGlobals_17, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1);
    int v47 = result;
  }
LABEL_7:
  double v8 = *(double *)&a2;
  uint64_t v45 = v7;
  if (*off_26AED0118[0] <= 0)
  {
    int v16 = 0;
    uint64_t v17 = 0;
    unint64_t v9 = a1 + 4;
    double v10 = *(double *)(a1[4] + 112) + v8;
    unint64_t v11 = a1 + 5;
    int v48 = a1 + 1;
    uint64_t v12 = (a3 >> 16) & 1;
    int64_t v13 = (operations_research::sat::BinaryImplicationGraph ***)(a1 + 6);
    int v14 = a1 + 3;
    double v15 = a1 + 15;
    uint64_t v43 = (operations_research::sat::BoundedVariableElimination **)(a1 + 8);
    uint64_t v44 = (int64x2_t **)(a1 + 7);
  }
  else
  {
    if (off_26AED0118[0] == &google::kLogSiteUninitialized)
    {
      uint64_t result = google::InitVLOG3__((google *)off_26AED0118, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1);
      int v16 = result;
      unint64_t v9 = a1 + 4;
      double v10 = *(double *)(a1[4] + 112) + v8;
      unint64_t v11 = a1 + 5;
      int v48 = a1 + 1;
      uint64_t v12 = (a3 >> 16) & 1;
      int64_t v13 = (operations_research::sat::BinaryImplicationGraph ***)(a1 + 6);
      int v14 = a1 + 3;
      double v15 = a1 + 15;
      uint64_t v43 = (operations_research::sat::BoundedVariableElimination **)(a1 + 8);
      uint64_t v44 = (int64x2_t **)(a1 + 7);
      if (!result)
      {
        uint64_t v17 = 0;
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v9 = a1 + 4;
      double v10 = *(double *)(a1[4] + 112) + *(double *)&a2;
      unint64_t v11 = a1 + 5;
      int v48 = a1 + 1;
      uint64_t v12 = (a3 >> 16) & 1;
      int64_t v13 = (operations_research::sat::BinaryImplicationGraph ***)(a1 + 6);
      int v14 = a1 + 3;
      double v15 = a1 + 15;
      uint64_t v43 = (operations_research::sat::BoundedVariableElimination **)(a1 + 8);
      uint64_t v44 = (int64x2_t **)(a1 + 7);
      int v16 = 1;
    }
    uint64_t v17 = 0x100000000;
  }
LABEL_13:
  uint64_t v42 = (a3 >> 8) & 1 | v17;
  double v46 = 0.0;
  while (1)
  {
    uint64_t v18 = *v9;
    unint64_t v19 = *(unsigned __int8 **)(*v9 + 120);
    if (v19)
    {
      unsigned __int8 v20 = atomic_load(v19);
      if (v20) {
        break;
      }
    }
    if (fmax(*(double *)(v18 + 104) - *(double *)(v18 + 112), 0.0) <= 0.0) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
    if (*(void *)(v18 + 24) <= CurrentTimeNanos - *(void *)(v18 + 8)) {
      uint64_t v22 = CurrentTimeNanos - *(void *)(v18 + 8);
    }
    else {
      uint64_t v22 = *(void *)(v18 + 24);
    }
    operations_research::RunningMax<long long>::Add((int *)(v18 + 32), v22);
    *(void *)(v18 + 8) = CurrentTimeNanos;
    if (*(void *)(*(void *)(v18 + 40) + 8 * *(int *)(v18 + 68)) + CurrentTimeNanos >= *(void *)(v18 + 16))
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_49;
      }
      double v24 = *(double *)(v18 + 96);
      if (*(unsigned char *)(v18 + 72))
      {
        double v25 = v24
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v23) - *(void *)(v18 + 80) + *(void *)(v18 + 88))
            * -0.000000001;
        if (v25 <= 0.0001) {
          goto LABEL_49;
        }
      }
      else
      {
        double v25 = v24 + (double)*(uint64_t *)(v18 + 88) * -0.000000001;
        if (v25 <= 0.0001)
        {
LABEL_49:
          *(void *)(v18 + 16) = 0;
          break;
        }
      }
      *(void *)(v18 + 16) = *(void *)(v18 + 8) + (uint64_t)(v25 * 1000000000.0);
    }
    if (*(double *)(*v9 + 112) <= v10)
    {
      LODWORD(v50[0]) = *(_DWORD *)(*v11 + 304);
      v49[0] = 0;
      if (LODWORD(v50[0])) {
        google::MakeCheckOpString<int,int>((int)v50, (int)v49, "sat_solver_->CurrentDecisionLevel() == 0");
      }
      if ((operations_research::sat::Inprocessing::LevelZeroPropagate((operations_research::sat::Inprocessing *)a1) & 1) == 0) {
        return 0;
      }
      operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(a1[1]);
      uint64_t result = operations_research::sat::Inprocessing::DetectEquivalencesAndStamp((operations_research::sat::Inprocessing *)a1, v12, v16);
      if (!result) {
        return result;
      }
      uint64_t result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables((operations_research::sat::Inprocessing *)a1, v16);
      if (!result) {
        return result;
      }
      uint64_t result = operations_research::sat::StampingSimplifier::DoOneRound(*v13, v16);
      if (!result) {
        return result;
      }
      if (*v15 < *(int *)(*v14 + 12)) {
        continue;
      }
      uint64_t result = operations_research::sat::Inprocessing::MoreRedundantVariableToClean((operations_research::sat::Inprocessing *)a1);
      if ((result & 1) != 0 || !*(unsigned char *)(*v48 + 512)) {
        continue;
      }
      uint64_t result = operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound((operations_research::sat::Inprocessing *)a1, v16);
      if (!result) {
        return result;
      }
      if (*v15 < *(int *)(*v14 + 12)) {
        continue;
      }
      uint64_t result = operations_research::sat::Inprocessing::MoreRedundantVariableToClean((operations_research::sat::Inprocessing *)a1);
      if ((result & 1) != 0 || !*(unsigned char *)(*v48 + 512)) {
        continue;
      }
      operations_research::sat::BlockedClauseSimplifier::DoOneRound(*v44, v16);
      uint64_t result = operations_research::sat::BoundedVariableElimination::DoOneRound(*v43, v16);
      if (!result) {
        return result;
      }
      uint64_t result = operations_research::sat::Inprocessing::LevelZeroPropagate((operations_research::sat::Inprocessing *)a1);
      if (!result) {
        return result;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
      if (v10 - *(double *)(*v9 + 112) > 0.0)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = v26;
        unint64_t v41 = v42 | v41 & 0xFFFFFF0000000000 | 0x1010100;
        uint64_t result = operations_research::sat::FailedLiteralProbingRound(COERCE_ABSL_LTS_2020_02_25_(v10 - *(double *)(*v9 + 112)), v41, a1[13]);
        if (!result) {
          return result;
        }
        uint64_t result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
        double v46 = v46 + (double)(result - v45) * 0.000000001 - (double)(v27 - v45) * 0.000000001;
        if (*v15 < *(int *)(*v14 + 12)) {
          continue;
        }
        uint64_t result = operations_research::sat::Inprocessing::MoreRedundantVariableToClean((operations_research::sat::Inprocessing *)a1);
        if ((result & 1) != 0 || !*(unsigned char *)(*v48 + 512)) {
          continue;
        }
      }
    }
    break;
  }
  uint64_t result = operations_research::sat::Inprocessing::LevelZeroPropagate((operations_research::sat::Inprocessing *)a1);
  if ((result & v47) == 1)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v49, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 122);
    unint64_t v28 = (void *)google::LogMessage::stream((google::LogMessage *)v49);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Presolve.", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" num_fixed: ", 12);
    uint64_t v30 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" num_redundant: ", 16);
    uint64_t v31 = *(void *)(*v48 + 312) & 1;
    if (*(uint64_t *)(*v48 + 312) < 0) {
      uint64_t v31 = -v31;
    }
    v50[0] = v31;
    int v51 = 0;
    if (v31) {
      google::MakeCheckOpString<long long,int>((int)v50, (int)&v51, "num_redundant_literals_ % 2 == 0");
    }
    unint64_t v32 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"/", 1);
    uint64_t v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" num_implications: ", 19);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" num_watched_clauses: ", 22);
    unint64_t v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" dtime: ", 8);
    uint64_t v36 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"/", 1);
    unint64_t v37 = (void *)std::ostream::operator<<();
    int v38 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v38);
    long long v39 = (void *)std::ostream::operator<<();
    uint64_t v40 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" non-probing time: ", 19);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v40);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v49);
    return 1;
  }
  return result;
}

void sub_23CD67D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD67D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD67D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Inprocessing::LevelZeroPropagate(operations_research::sat::Inprocessing *this)
{
  int v3 = *(_DWORD *)(*((void *)this + 5) + 304);
  LODWORD(v4) = 0;
  if (v3) {
    google::MakeCheckOpString<int,int>((int)&v3, (int)&v4, "sat_solver_->CurrentDecisionLevel() == 0");
  }
  operations_research::sat::LiteralWatchers::AttachAllClauses(*((operations_research::sat::LiteralWatchers **)this + 2));
  return operations_research::sat::SatSolver::Propagate(*((operations_research::sat::SatSolver **)this + 5));
}

void sub_23CD67DBC(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::Inprocessing::DetectEquivalencesAndStamp(operations_research::sat::Inprocessing *this, int a2, int a3)
{
  if (!operations_research::sat::Inprocessing::LevelZeroPropagate(this)) {
    return 0;
  }
  operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(*((void *)this + 1));
  uint64_t v6 = (operations_research::sat::BinaryImplicationGraph *)*((void *)this + 1);
  if (!*((unsigned char *)v6 + 512)
    && (!operations_research::sat::BinaryImplicationGraph::DetectEquivalences(v6, a3)
     || !operations_research::sat::Inprocessing::LevelZeroPropagate(this)
     || a2
     && (!operations_research::sat::BinaryImplicationGraph::ComputeTransitiveReduction(*((operations_research::sat::BinaryImplicationGraph **)this + 1), a3)|| !operations_research::sat::Inprocessing::LevelZeroPropagate(this))))
  {
    return 0;
  }
  if (!operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(*((operations_research::sat::BinaryImplicationGraph ***)this + 6), a3))return 0; {

  }
  return operations_research::sat::Inprocessing::LevelZeroPropagate(this);
}

uint64_t operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(operations_research::sat::Inprocessing *this, int a2)
{
  LODWORD(v76) = *(_DWORD *)(*((void *)this + 5) + 304);
  LODWORD(__p) = 0;
  if (v76) {
    google::MakeCheckOpString<int,int>((int)&v76, (int)&__p, "sat_solver_->CurrentDecisionLevel() == 0");
  }
  uint64_t v4 = (absl::lts_2020_02_25 *)operations_research::sat::Inprocessing::LevelZeroPropagate(this);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(*((void *)this + 1) + 312);
  uint64_t v6 = v5 & 1;
  if (v5 < 0) {
    uint64_t v6 = -v6;
  }
  uint64_t v76 = (char *)v6;
  v72[0] = 0;
  if (v6) {
    google::MakeCheckOpString<long long,int>((int)&v76, (int)v72, "num_redundant_literals_ % 2 == 0");
  }
  uint64_t v7 = *(int *)(*((void *)this + 3) + 12);
  if (*((void *)this + 14) == v5 && *((void *)this + 15) == v7) {
    return 1;
  }
  *((void *)this + 14) = v5;
  *((void *)this + 15) = v7;
  absl::lts_2020_02_25::GetCurrentTimeNanos(v4);
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v9 = *(int *)(*((void *)this + 5) + 16);
  long long __p = 0;
  uint64_t v74 = 0;
  unint64_t v75 = 0;
  uint64_t v76 = 0;
  if (v9)
  {
    if ((v9 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 2 * v9;
    unint64_t v11 = ((unint64_t)(2 * v9 - 1) >> 6) + 1;
    long long __p = operator new(8 * v11);
    uint64_t v74 = 0;
    unint64_t v75 = v11;
    std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v10, 0);
  }
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)this
                                                                  + 2));
  operations_research::sat::LiteralWatchers::DetachAllClauses(*((operations_research::sat::LiteralWatchers **)this + 2));
  int v65 = a2;
  uint64_t v12 = *((void *)this + 2);
  int64_t v13 = *(int ***)(v12 + 304);
  int v68 = *(int ***)(v12 + 312);
  if (v13 == v68)
  {
    double v15 = 0;
    *(double *)(*((void *)this + 4) + 112) = *(double *)(*((void *)this + 4) + 112) + 0.0;
    if (!a2)
    {
LABEL_79:
      uint64_t v8 = 1;
      goto LABEL_80;
    }
LABEL_78:
    google::LogMessage::LogMessage((google::LogMessage *)v72, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 346);
    unsigned int v60 = (void *)google::LogMessage::stream((google::LogMessage *)v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Cleanup. num_removed_literals: ", 31);
    uint64_t v61 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" dtime: ", 8);
    uint64_t v62 = (void *)std::ostream::operator<<();
    uint64_t v63 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v63);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v72);
    goto LABEL_79;
  }
  int v14 = 0;
  double v15 = 0;
  uint64_t v66 = 0;
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v17 = *v13;
    unint64_t v19 = *v13 + 1;
    uint64_t v18 = **v13;
    if (v18) {
      break;
    }
LABEL_18:
    v16 += v18;
    if (++v13 == v68)
    {
      *(double *)(*((void *)this + 4) + 112) = *(double *)(*((void *)this + 4) + 112) + (double)v16 * 0.00000001;
      if (!v65) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
  }
  uint64_t v71 = v16;
  uint64_t v20 = 0;
  unsigned int v21 = &v19[v18];
  while (1)
  {
    unint64_t v22 = v17[v20 + 1];
    unint64_t v23 = *(void *)(*(void *)(*(void *)this + 8) + 8 * (v22 >> 6));
    if ((v23 & (1 << v22)) != 0)
    {
      uint64_t v57 = v14;
      if (!operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*((void **)this + 2), v22))
      {
        uint64_t v8 = 0;
        goto LABEL_80;
      }
      operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((void *)this + 2), v17);
      uint64_t v18 = *v17;
      v66 += v18;
      uint64_t v16 = v71;
LABEL_17:
      int v14 = v57;
      goto LABEL_18;
    }
    if (((v23 >> (v22 & 0x3F ^ 1)) & 1) != 0
      || (*(void *)(*(void *)(*((void *)this + 1) + 544) + 8 * (v22 >> 6)) & (1 << v22)) != 0)
    {
      break;
    }
    if (v18 == ++v20) {
      goto LABEL_72;
    }
  }
  v18 *= 2;
  uint64_t v77 = v15;
  uint64_t v69 = v18;
  int v70 = v17;
  uint64_t v67 = v13;
  while (2)
  {
    uint64_t v27 = *((void *)this + 1);
    uint64_t v28 = *(void *)(v27 + 576);
    uint64_t v29 = *(void *)(v27 + 568);
    int v30 = *v19;
    if (*v19 < (int)((unint64_t)(v28 - v29) >> 2))
    {
      int v31 = *(_DWORD *)(v29 + 4 * *v19);
      if (v31 == -1) {
        int v30 = *v19;
      }
      else {
        int v30 = v31;
      }
    }
    unint64_t v24 = (unint64_t)v30 >> 6;
    uint64_t v25 = 1 << v30;
    uint64_t v26 = *((void *)__p + v24);
    if (((1 << v30) & v26) != 0) {
      goto LABEL_28;
    }
    unint64_t v32 = *(void *)(*(void *)(*(void *)this + 8) + 8 * v24);
    if ((v32 >> (v30 & 0x3F ^ 1u))) {
      goto LABEL_28;
    }
    if (!(v26 & (1 << (v30 & 0x3F ^ 1u)) | v32 & v25))
    {
      *((void *)__p + v24) = v25 | v26;
      if (v15 < v14)
      {
        *(_DWORD *)double v15 = v30;
        uint64_t v33 = (uint64_t)(v15 + 4);
        goto LABEL_52;
      }
      uint64_t v34 = v76;
      unint64_t v35 = (char *)(v15 - v76);
      uint64_t v36 = (v15 - v76) >> 2;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v14 - v76) >> 1 > v37) {
        unint64_t v37 = (v14 - v76) >> 1;
      }
      if ((unint64_t)(v14 - v76) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v37;
      }
      if (v38)
      {
        if (v38 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v39 = v38;
        uint64_t v40 = operator new(4 * v38);
        unint64_t v38 = v39;
        unint64_t v41 = &v40[4 * v36];
        *(_DWORD *)unint64_t v41 = v30;
        uint64_t v33 = (uint64_t)(v41 + 4);
        if (v15 != v34)
        {
LABEL_46:
          unint64_t v42 = v15 - 4 - v34;
          if (v42 < 0xBC
            || &v35[(void)v40 - 4 - (v42 & 0xFFFFFFFFFFFFFFFCLL)] > &v35[(void)v40 - 4]
            || &v15[-(v42 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v15 - 4
            || (unint64_t)(v15 - v40 - (void)v35) < 0x20)
          {
            uint64_t v43 = v15;
            int64_t v13 = v67;
            uint64_t v18 = v69;
          }
          else
          {
            uint64_t v46 = (v42 >> 2) + 1;
            uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v43 = &v15[-v47];
            v41 -= v47;
            int v48 = &v40[4 * v36 - 16];
            int v49 = v15 - 16;
            uint64_t v50 = v46 & 0x7FFFFFFFFFFFFFF8;
            int64_t v13 = v67;
            do
            {
              long long v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              _OWORD *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 8;
            }
            while (v50);
            uint64_t v18 = v69;
            if (v46 == (v46 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_49:
              int v14 = &v40[4 * v38];
              uint64_t v76 = v41;
              uint64_t v78 = v14;
              if (v34) {
                goto LABEL_50;
              }
              goto LABEL_51;
            }
          }
          do
          {
            int v44 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v41 - 1) = v44;
            v41 -= 4;
          }
          while (v43 != v34);
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v40 = 0;
        unint64_t v41 = (char *)(4 * v36);
        *(_DWORD *)(4 * v36) = v30;
        uint64_t v33 = 4 * v36 + 4;
        if (v15 != v34) {
          goto LABEL_46;
        }
      }
      int64_t v13 = v67;
      uint64_t v18 = v69;
      int v14 = &v40[4 * v38];
      uint64_t v76 = v41;
      uint64_t v78 = v14;
      if (v34)
      {
LABEL_50:
        uint64_t v45 = v14;
        operator delete(v34);
        int v14 = v45;
      }
LABEL_51:
      uint64_t v17 = v70;
LABEL_52:
      uint64_t v77 = (char *)v33;
      double v15 = (char *)v33;
LABEL_28:
      if (++v19 == v21)
      {
        char v52 = 1;
        BOOL v53 = (int *)v76;
        if (v76 == v15) {
          goto LABEL_66;
        }
        goto LABEL_64;
      }
      continue;
    }
    break;
  }
  int v59 = v14;
  operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((void *)this + 2), v17);
  char v52 = 0;
  v66 += *v17;
  int v14 = v59;
  BOOL v53 = (int *)v76;
  if (v76 == v15) {
    goto LABEL_66;
  }
LABEL_64:
  long long v54 = (char *)__p;
  int v55 = v53;
  do
  {
    int v56 = *v55++;
    *(void *)&v54[((unint64_t)v56 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v56);
  }
  while (v55 != (int *)v15);
LABEL_66:
  if ((v52 & 1) == 0)
  {
    double v15 = (char *)v53;
LABEL_72:
    uint64_t v16 = v71;
    goto LABEL_18;
  }
  uint64_t v57 = v14;
  uint64_t v58 = *v70;
  if (operations_research::sat::LiteralWatchers::InprocessingRewriteClause(*((void *)this + 2), v70, v53, (v15 - (char *)v53) >> 2))
  {
    v66 += v58 - ((v15 - (char *)v53) >> 2);
    double v15 = (char *)v53;
    uint64_t v16 = v71;
    uint64_t v18 = v69;
    goto LABEL_17;
  }
  uint64_t v8 = 0;
  double v15 = (char *)v53;
LABEL_80:
  if (__p) {
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v77 = v15;
    operator delete(v15);
  }
  return v8;
}

void sub_23CD68598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD685A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD685A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v24 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v24 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::StampingSimplifier::DoOneRound(operations_research::sat::BinaryImplicationGraph **this, int a2)
{
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  uint64_t v4 = this[1];
  if (*((void *)v4 + 25) == *((void *)v4 + 24) || !*((void *)v4 + 27)) {
    return 1;
  }
  if (*((unsigned char *)this + 40)) {
    goto LABEL_4;
  }
  operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((BOOL)v4);
  if (!operations_research::sat::BinaryImplicationGraph::DetectEquivalences(this[1], a2)) {
    return 1;
  }
  operations_research::sat::StampingSimplifier::SampleTreeAndFillParent((operations_research::sat::StampingSimplifier *)this);
  BOOL result = operations_research::sat::StampingSimplifier::ComputeStamps((operations_research::sat::StampingSimplifier *)this);
  if (result)
  {
LABEL_4:
    *((unsigned char *)this + 40) = 0;
    int v5 = operations_research::sat::StampingSimplifier::ProcessClauses(this);
    BOOL result = 0;
    if (v5)
    {
      *((double *)this[4] + 14) = *((double *)this + 6) + *((double *)this[4] + 14);
      if (*operations_research::sat::StampingSimplifier::DoOneRound(BOOL)::vlocal__[0] < 1)
      {
        if (!a2) {
          return 1;
        }
        goto LABEL_15;
      }
      if (operations_research::sat::StampingSimplifier::DoOneRound(BOOL)::vlocal__[0] != &google::kLogSiteUninitialized)
      {
        if (!(a2 | 1)) {
          return 1;
        }
        goto LABEL_15;
      }
      if (google::InitVLOG3__((google *)operations_research::sat::StampingSimplifier::DoOneRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1) | a2)
      {
LABEL_15:
        google::LogMessage::LogMessage((google::LogMessage *)v13, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 600);
        uint64_t v7 = (void *)google::LogMessage::stream((google::LogMessage *)v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Stamping. num_removed_literals: ", 32);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" num_subsumed: ", 15);
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" num_fixed: ", 12);
        unint64_t v10 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" dtime: ", 8);
        unint64_t v11 = (void *)std::ostream::operator<<();
        uint64_t v12 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" wtime: ", 8);
        absl::lts_2020_02_25::GetCurrentTimeNanos(v12);
        std::ostream::operator<<();
        google::LogMessage::~LogMessage((google::LogMessage *)v13);
      }
      return 1;
    }
  }
  return result;
}

void sub_23CD68810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL operations_research::sat::Inprocessing::MoreRedundantVariableToClean(operations_research::sat::Inprocessing *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 1) + 312);
  uint64_t v2 = v1 & 1;
  if (v1 < 0) {
    uint64_t v2 = -v2;
  }
  uint64_t v4 = v2;
  int v5 = 0;
  if (v2) {
    google::MakeCheckOpString<long long,int>((int)&v4, (int)&v5, "num_redundant_literals_ % 2 == 0");
  }
  return *((void *)this + 14) < v1;
}

void sub_23CD688C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(operations_research::sat::Inprocessing *this, int a2)
{
  uint64_t v2 = this;
  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  v276 = 0;
  double v277 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v278 = 0;
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)v2 + 2));
  operations_research::sat::LiteralWatchers::DetachAllClauses(*((operations_research::sat::LiteralWatchers **)v2 + 2));
  uint64_t v3 = *((void *)v2 + 2);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v274 = 0;
  uint64_t v275 = 0;
  uint64_t v273 = 0;
  int v5 = *(unsigned char **)(v3 + 304);
  uint64_t v4 = *(unsigned char **)(v3 + 312);
  int64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (int **)operator new(v4 - v5);
    uint64_t v8 = &v7[v6 >> 3];
    uint64_t v273 = v7;
    uint64_t v275 = v8;
    memcpy(v7, v5, v6);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v274 = v8;
  }
  unint64_t v236 = v8 - v7;
  unint64_t v9 = 126 - 2 * __clz(v236);
  size_t v10 = (char *)v8 - (char *)v7;
  if (v8 == v7) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9;
  }
  v249 = v7;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,false>(v7, v8, v11, 1);
  uint64_t v12 = *(int *)(*((void *)v2 + 5) + 16);
  unint64_t v13 = 2 * v12;
  if ((int)v12 <= 0)
  {
    int v263 = 0;
    v265 = 0;
    v266 = 0;
    long long v264 = 0;
  }
  else
  {
    int v263 = 2 * v12;
    unint64_t v13 = (int)v13;
    unint64_t v14 = (int)v13 + 63;
    v265 = 0;
    v266 = 0;
    long long v264 = 0;
    if (v14 >= 0x40)
    {
      unint64_t v15 = v14 >> 6;
      size_t v16 = 8 * (v14 >> 6);
      long long v264 = (char *)operator new(v16);
      v266 = &v264[8 * v15];
      bzero(v264, v16);
      v265 = &v264[v16];
    }
  }
  v267 = &v263;
  uint64_t v268 = 0xFFFFFFFFLL;
  uint64_t v269 = 0;
  double v270 = 0;
  unsigned __int8 v271 = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v272 = 0;
  std::vector<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>::vector(&v261, v13);
  int v258 = 0;
  uint64_t v259 = 0;
  uint64_t v260 = 0;
  if (v8 != v249)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (int8x8_t *)operator new(v10);
    int v258 = v17;
    uint64_t v260 = &v17[v236];
    bzero(v17, v10);
    unint64_t v18 = 0;
    uint64_t v234 = 0;
    uint64_t v237 = 0;
    uint64_t v247 = 0;
    uint64_t v19 = 0;
    uint64_t v259 = (int8x8_t *)((char *)v17 + v10);
    long long __p = 0;
    uint64_t v256 = 0;
    unint64_t v257 = 0;
    uint64_t v248 = v17;
    v241 = v2;
    while (1)
    {
      if (v247 + v19 > 1000000000) {
        goto LABEL_249;
      }
      uint64_t v250 = v19;
      unint64_t v243 = v18;
      uint64_t v246 = v249[v18];
      unsigned int v21 = (char *)v270;
      uint64_t v20 = v271;
      if (v270 != (int *)v271)
      {
        unint64_t v22 = v264;
        unint64_t v23 = v271 - (char *)v270 - 4;
        unint64_t v24 = (char *)v270;
        if (v23 < 4) {
          goto LABEL_288;
        }
        uint64_t v25 = (v23 >> 2) + 1;
        unint64_t v24 = (char *)&v270[v25 & 0x7FFFFFFFFFFFFFFELL];
        uint64_t v26 = v270 + 1;
        uint64_t v27 = v25 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          unint64_t v28 = ((unint64_t)*v26 >> 3) & 0x1FFFFFFFFFFFFFF8;
          *(void *)&v22[((unint64_t)*(v26 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
          *(void *)&v22[v28] = 0;
          v26 += 2;
          v27 -= 2;
        }
        while (v27);
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFFELL))
        {
LABEL_288:
          do
          {
            unint64_t v29 = *(int *)v24;
            v24 += 4;
            *(void *)&v22[(v29 >> 3) & 0x1FFFFFFFFFFFFFF8] = 0;
          }
          while (v24 != v20);
        }
      }
      unsigned __int8 v271 = v21;
      int v31 = v246 + 1;
      uint64_t v30 = *v246;
      int v242 = v246 + 1;
      int8x8_t v32 = 0;
      if (!v30)
      {
        uint64_t v256 = (uint64_t)__p;
        uint64_t v19 = v250;
        goto LABEL_197;
      }
      uint64_t v33 = &v31[v30];
      do
      {
        int v36 = *v31;
        unint64_t v37 = (unint64_t)*v31 >> 6;
        uint64_t v38 = *(void *)&v264[8 * v37];
        if (((1 << *v31) & v38) == 0)
        {
          *(void *)&v264[8 * v37] = (1 << v36) | v38;
          if (v21 < v272)
          {
            *(_DWORD *)unsigned int v21 = v36;
            uint64_t v34 = (uint64_t)(v21 + 4);
            goto LABEL_28;
          }
          unint64_t v39 = v270;
          uint64_t v40 = (v21 - (char *)v270) >> 2;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v42 = v272 - (char *)v270;
          if ((v272 - (char *)v270) >> 1 > v41) {
            unint64_t v41 = v42 >> 1;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            if (v43 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v44 = operator new(4 * v43);
            uint64_t v45 = (int *)&v44[4 * v40];
            *uint64_t v45 = v36;
            uint64_t v34 = (uint64_t)(v45 + 1);
            if (v21 != (char *)v39)
            {
LABEL_43:
              unint64_t v46 = v21 - 4 - (char *)v39;
              if (v46 < 0xBC
                || &v44[v21 - (char *)v39 - 4 - (v46 & 0xFFFFFFFFFFFFFFFCLL)] > &v44[v21 - (char *)v39 - 4]
                || &v21[-(v46 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v21 - 4
                || (unint64_t)((char *)v39 - v44) < 0x20)
              {
                uint64_t v47 = v21;
                uint64_t v17 = v248;
              }
              else
              {
                uint64_t v49 = (v46 >> 2) + 1;
                uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v47 = &v21[-v50];
                uint64_t v45 = (int *)((char *)v45 - v50);
                long long v51 = &v44[4 * v40 - 16];
                char v52 = (long long *)(v21 - 16);
                uint64_t v53 = v49 & 0x7FFFFFFFFFFFFFF8;
                uint64_t v17 = v248;
                do
                {
                  long long v54 = *v52;
                  *(v51 - 1) = *(v52 - 1);
                  *long long v51 = v54;
                  v51 -= 2;
                  v52 -= 2;
                  v53 -= 8;
                }
                while (v53);
                if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_46:
                  double v270 = v45;
                  unsigned __int8 v271 = (char *)v34;
                  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v272 = &v44[4 * v43];
                  if (!v39) {
                    goto LABEL_28;
                  }
LABEL_50:
                  operator delete(v39);
LABEL_28:
                  unsigned __int8 v271 = (char *)v34;
                  unsigned int v21 = (char *)v34;
                  goto LABEL_29;
                }
              }
              do
              {
                int v48 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *--uint64_t v45 = v48;
              }
              while (v47 != (char *)v39);
              goto LABEL_46;
            }
          }
          else
          {
            int v44 = 0;
            uint64_t v45 = (int *)(4 * v40);
            *(_DWORD *)(4 * v40) = v36;
            uint64_t v34 = 4 * v40 + 4;
            if (v21 != (char *)v39) {
              goto LABEL_43;
            }
          }
          uint64_t v17 = v248;
          double v270 = v45;
          unsigned __int8 v271 = (char *)v34;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v272 = &v44[4 * v43];
          if (v39) {
            goto LABEL_50;
          }
          goto LABEL_28;
        }
LABEL_29:
        int v35 = (v36 >> 1) & 0x3F;
        if (v36 >> 1 <= 0) {
          int v35 = -(-(v36 >> 1) & 0x3F);
        }
        *(void *)&v32 |= 1 << v35;
        ++v31;
      }
      while (v31 != v33);
      uint64_t v55 = *v246;
      int v56 = (char *)__p;
      uint64_t v256 = (uint64_t)__p;
      if (!v55)
      {
LABEL_196:
        uint64_t v19 = v250;
        uint64_t v156 = v246 + 1;
        if (__p == v56) {
          goto LABEL_197;
        }
        goto LABEL_109;
      }
      uint64_t v57 = ~*(void *)&v32;
      uint64_t v58 = v246 + 1;
      uint64_t v239 = &v242[v55];
      int v59 = v249;
      uint64_t v19 = v250;
      while (2)
      {
        int v244 = v58;
        unsigned int v60 = (char *)v261 + 32 * *v58;
        unint64_t v63 = *v60;
        uint64_t v62 = (int *)(v60 + 1);
        unint64_t v61 = v63;
        if (v63) {
          uint64_t v62 = *(int **)v62;
        }
        v247 += v61 >> 1;
        if (v61 < 2) {
          goto LABEL_60;
        }
        uint64_t v64 = &v62[v61 >> 1];
        uint64_t v251 = v64;
        while (2)
        {
          uint64_t v66 = *v62;
          if ((*(void *)&v17[v66] & v57) != 0) {
            goto LABEL_67;
          }
          int v254 = -1;
          uint64_t v67 = v59[v66];
          uint64_t v70 = *v67;
          int v68 = v67 + 1;
          uint64_t v69 = v70;
          v19 += v70;
          if (!v70) {
            goto LABEL_142;
          }
          uint64_t v71 = &v68[v69];
          int v72 = -1;
          char v73 = 1;
          while (2)
          {
            while (2)
            {
              unint64_t v74 = *v68;
              unint64_t v75 = *(void *)&v264[(v74 >> 3) & 0x1FFFFFFFFFFFFFF8];
              if ((v75 >> v74))
              {
                if (++v68 != v71) {
                  continue;
                }
                if (v73)
                {
LABEL_142:
                  uint64_t v118 = *v246;
                  uint64_t v2 = v241;
                  operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((void *)v241 + 2), v246);
                  v237 += v118;
                  ++v234;
                  unint64_t v119 = v243;
                  goto LABEL_17;
                }
LABEL_79:
                if (v72 == -1) {
                  google::MakeCheckOpString<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>((int)&operations_research::sat::kNoLiteralIndex, (int)&v254, "kNoLiteralIndex != to_remove");
                }
                if (v56 < v257)
                {
                  *(_DWORD *)int v56 = v72;
                  uint64_t v65 = (uint64_t)(v56 + 4);
                  int v59 = v249;
                }
                else
                {
                  uint64_t v76 = (char *)__p;
                  int64_t v77 = v56 - (unsigned char *)__p;
                  uint64_t v78 = (v56 - (unsigned char *)__p) >> 2;
                  unint64_t v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 62) {
                    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v80 = v19;
                  uint64_t v81 = v257 - (unsigned char *)__p;
                  if ((v257 - (unsigned char *)__p) >> 1 > v79) {
                    unint64_t v79 = v81 >> 1;
                  }
                  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v82 = v79;
                  }
                  if (v82)
                  {
                    if (v82 >> 62) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    float64x2x2_t v83 = operator new(4 * v82);
                    uint64_t v84 = (int *)&v83[4 * v78];
                    int *v84 = v72;
                    uint64_t v65 = (uint64_t)(v84 + 1);
                    if (v56 != v76)
                    {
LABEL_90:
                      unint64_t v85 = v56 - 4 - v76;
                      int v59 = v249;
                      if (v85 < 0xBC
                        || &v83[v77 - 4 - (v85 & 0xFFFFFFFFFFFFFFFCLL)] > &v83[v77 - 4]
                        || &v56[-(v85 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
                        || (unint64_t)(v56 - v83 - v77) < 0x20)
                      {
                        BOOL v86 = v56;
                        uint64_t v17 = v248;
                        uint64_t v57 = ~*(void *)&v32;
                      }
                      else
                      {
                        uint64_t v88 = (v85 >> 2) + 1;
                        uint64_t v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
                        BOOL v86 = &v56[-v89];
                        uint64_t v84 = (int *)((char *)v84 - v89);
                        double v90 = &v83[4 * v78 - 16];
                        unint64_t v91 = v56 - 16;
                        uint64_t v92 = v88 & 0x7FFFFFFFFFFFFFF8;
                        uint64_t v57 = ~*(void *)&v32;
                        do
                        {
                          long long v93 = *(_OWORD *)v91;
                          *(v90 - 1) = *((_OWORD *)v91 - 1);
                          *double v90 = v93;
                          v90 -= 2;
                          v91 -= 32;
                          v92 -= 8;
                        }
                        while (v92);
                        uint64_t v17 = v248;
                        if (v88 == (v88 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_93:
                          long long __p = v84;
                          uint64_t v256 = v65;
                          unint64_t v257 = &v83[4 * v82];
                          if (v76) {
                            goto LABEL_94;
                          }
                          goto LABEL_95;
                        }
                      }
                      do
                      {
                        int v87 = *((_DWORD *)v86 - 1);
                        v86 -= 4;
                        *--uint64_t v84 = v87;
                      }
                      while (v86 != v76);
                      goto LABEL_93;
                    }
                  }
                  else
                  {
                    float64x2x2_t v83 = 0;
                    uint64_t v84 = (int *)(4 * v78);
                    *(_DWORD *)(4 * v78) = v72;
                    uint64_t v65 = 4 * v78 + 4;
                    if (v56 != v76) {
                      goto LABEL_90;
                    }
                  }
                  uint64_t v17 = v248;
                  int v59 = v249;
                  uint64_t v57 = ~*(void *)&v32;
                  long long __p = v84;
                  uint64_t v256 = v65;
                  unint64_t v257 = &v83[4 * v82];
                  if (v76) {
LABEL_94:
                  }
                    operator delete(v76);
LABEL_95:
                  uint64_t v19 = v80;
                  uint64_t v64 = v251;
                }
                uint64_t v256 = v65;
                int v56 = (char *)v65;
                goto LABEL_67;
              }
              break;
            }
            if (v72 == -1)
            {
              int v72 = v74 ^ 1;
              if ((v75 >> (v74 ^ 1u)))
              {
                char v73 = 0;
                int v254 = v74 ^ 1;
                if (++v68 == v71) {
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          int v59 = v249;
LABEL_67:
          if (++v62 != v64) {
            continue;
          }
          break;
        }
LABEL_60:
        uint64_t v58 = v244 + 1;
        if (v244 + 1 != v239) {
          continue;
        }
        break;
      }
      uint64_t v124 = *v246;
      unint64_t v125 = v246 + 1;
      uint64_t v235 = &v242[v124];
      if (v124)
      {
        uint64_t v250 = v19;
        while (1)
        {
          int32x4_t v240 = v125;
          uint64_t v245 = *v125;
          uint64_t v126 = (char *)v261 + 32 * (v245 ^ 1);
          unint64_t v129 = *v126;
          int v128 = (int *)(v126 + 1);
          unint64_t v127 = v129;
          if (v129) {
            int v128 = *(int **)v128;
          }
          unint64_t v238 = v127 >> 1;
          if (v127 >= 2) {
            break;
          }
LABEL_155:
          v247 += v238;
          unint64_t v125 = v240 + 1;
          if (v240 + 1 == v235) {
            goto LABEL_196;
          }
        }
        uint64_t v130 = &v128[v127 >> 1];
        while (2)
        {
          uint64_t v132 = *v128;
          if ((*(void *)&v17[v132] & v57) != 0)
          {
LABEL_162:
            if (++v128 == v130) {
              goto LABEL_155;
            }
            continue;
          }
          break;
        }
        int64_t v133 = v59[v132];
        uint64_t v136 = *v133;
        uint64_t v134 = v133 + 1;
        uint64_t v135 = v136;
        v250 += v136;
        if (v136)
        {
          uint64_t v137 = 4 * v135;
          do
          {
            unint64_t v138 = *v134;
            if (v138 != (v245 ^ 1)
              && ((*(void *)&v264[(v138 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v138) & 1) == 0)
            {
              goto LABEL_162;
            }
            ++v134;
            v137 -= 4;
          }
          while (v137);
        }
        if (v56 < v257)
        {
          *(_DWORD *)int v56 = v245;
          uint64_t v131 = (uint64_t)(v56 + 4);
        }
        else
        {
          uint64_t v139 = (char *)__p;
          int64_t v140 = v56 - (unsigned char *)__p;
          uint64_t v141 = (v56 - (unsigned char *)__p) >> 2;
          unint64_t v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v143 = v257 - (unsigned char *)__p;
          if ((v257 - (unsigned char *)__p) >> 1 > v142) {
            unint64_t v142 = v143 >> 1;
          }
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v144 = v142;
          }
          if (v144)
          {
            if (v144 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v145 = operator new(4 * v144);
            uint64_t v146 = &v145[4 * v141];
            *uint64_t v146 = v245;
            uint64_t v131 = (uint64_t)(v146 + 1);
            if (v56 != v139)
            {
LABEL_180:
              unint64_t v147 = v56 - 4 - v139;
              if (v147 < 0xBC
                || &v145[v140 - 4 - (v147 & 0xFFFFFFFFFFFFFFFCLL)] > &v145[v140 - 4]
                || &v56[-(v147 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
                || (unint64_t)(v56 - v145 - v140) < 0x20)
              {
                uint64_t v148 = v56;
                uint64_t v17 = v248;
                uint64_t v57 = ~*(void *)&v32;
              }
              else
              {
                uint64_t v150 = (v147 >> 2) + 1;
                uint64_t v151 = 4 * (v150 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v148 = &v56[-v151];
                uint64_t v146 = (_DWORD *)((char *)v146 - v151);
                uint64_t v152 = &v145[4 * v141 - 16];
                int v153 = v56 - 16;
                uint64_t v154 = v150 & 0x7FFFFFFFFFFFFFF8;
                uint64_t v57 = ~*(void *)&v32;
                do
                {
                  long long v155 = *(_OWORD *)v153;
                  *(v152 - 1) = *((_OWORD *)v153 - 1);
                  *uint64_t v152 = v155;
                  v152 -= 2;
                  v153 -= 32;
                  v154 -= 8;
                }
                while (v154);
                uint64_t v17 = v248;
                if (v150 == (v150 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_183:
                  long long __p = v146;
                  uint64_t v256 = v131;
                  unint64_t v257 = &v145[4 * v144];
                  if (v139) {
                    goto LABEL_184;
                  }
                  goto LABEL_185;
                }
              }
              do
              {
                int v149 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *--uint64_t v146 = v149;
              }
              while (v148 != v139);
              goto LABEL_183;
            }
          }
          else
          {
            int v145 = 0;
            uint64_t v146 = (_DWORD *)(4 * v141);
            *(_DWORD *)(4 * v141) = v245;
            uint64_t v131 = 4 * v141 + 4;
            if (v56 != v139) {
              goto LABEL_180;
            }
          }
          uint64_t v17 = v248;
          uint64_t v57 = ~*(void *)&v32;
          long long __p = v146;
          uint64_t v256 = v131;
          unint64_t v257 = &v145[4 * v144];
          if (v139) {
LABEL_184:
          }
            operator delete(v139);
LABEL_185:
          int v59 = v249;
        }
        uint64_t v256 = v131;
        int v56 = (char *)v131;
        goto LABEL_162;
      }
      uint64_t v156 = v246 + 1;
      if (__p == v56)
      {
LABEL_197:
        uint64_t v2 = v241;
        goto LABEL_215;
      }
LABEL_109:
      uint64_t v94 = v276;
      double v277 = v276;
      uint64_t v95 = *v246;
      unint64_t v96 = v156;
      int64_t v97 = &v156[v95];
      if (!v95)
      {
        int v120 = 0;
        BOOL v98 = v276;
        goto LABEL_150;
      }
      uint64_t v252 = v19;
      BOOL v98 = v276;
      unint64_t v99 = v96;
      while (2)
      {
        while (1)
        {
          int v100 = *v99;
          if (v98 >= v278) {
            break;
          }
          *v98++ = v100;
          double v277 = v98;
          if (++v99 == v97) {
            goto LABEL_143;
          }
        }
        unint64_t v101 = v276;
        uint64_t v102 = v98 - v276;
        unint64_t v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v104 = (char *)v278 - (char *)v276;
        if (((char *)v278 - (char *)v276) >> 1 > v103) {
          unint64_t v103 = v104 >> 1;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (!v105)
        {
          unint64_t v106 = 0;
          uint64_t v107 = (int *)(4 * v102);
          *(_DWORD *)(4 * v102) = v100;
          uint64_t v108 = 4 * v102 + 4;
          if (v98 != v101) {
            goto LABEL_122;
          }
LABEL_130:
          v276 = v107;
          double v277 = (int *)v108;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v278 = (int *)&v106[4 * v105];
          if (v101) {
            goto LABEL_126;
          }
          goto LABEL_127;
        }
        if (v105 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v106 = operator new(4 * v105);
        uint64_t v107 = (int *)&v106[4 * v102];
        int *v107 = v100;
        uint64_t v108 = (uint64_t)(v107 + 1);
        if (v98 == v101) {
          goto LABEL_130;
        }
LABEL_122:
        unint64_t v109 = (char *)(v98 - 1) - (char *)v101;
        if (v109 < 0xBC)
        {
          uint64_t v110 = v98;
          goto LABEL_124;
        }
        if (&v106[(char *)v98 - (char *)v101 - 4 - (v109 & 0xFFFFFFFFFFFFFFFCLL)] > &v106[(char *)v98
                                                                                         - (char *)v101
                                                                                         - 4])
        {
          uint64_t v110 = v98;
          goto LABEL_124;
        }
        if ((int *)((char *)v98 - (v109 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v98 - 1)
        {
          uint64_t v110 = v98;
          goto LABEL_124;
        }
        if ((unint64_t)((char *)v101 - v106) < 0x20)
        {
          uint64_t v110 = v98;
          goto LABEL_124;
        }
        uint64_t v112 = (v109 >> 2) + 1;
        uint64_t v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v110 = &v98[v113 / 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v107 = (int *)((char *)v107 - v113);
        long long v114 = &v106[4 * v102 - 16];
        uint64_t v115 = v98 - 4;
        uint64_t v116 = v112 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v117 = *(_OWORD *)v115;
          *(v114 - 1) = *((_OWORD *)v115 - 1);
          _OWORD *v114 = v117;
          v114 -= 2;
          v115 -= 8;
          v116 -= 8;
        }
        while (v116);
        if (v112 != (v112 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_124:
            int v111 = *--v110;
            *--uint64_t v107 = v111;
          }
          while (v110 != v101);
        }
        v276 = v107;
        double v277 = (int *)v108;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v278 = (int *)&v106[4 * v105];
        if (v101) {
LABEL_126:
        }
          operator delete(v101);
LABEL_127:
        BOOL v98 = (int *)v108;
        double v277 = (int *)v108;
        if (++v99 != v97) {
          continue;
        }
        break;
      }
LABEL_143:
      uint64_t v94 = v276;
      if (v276 == v98)
      {
        int v120 = 0;
        uint64_t v19 = v252;
      }
      else
      {
        int v120 = 0;
        int64_t v121 = __p;
        uint64_t v122 = v276;
        uint64_t v19 = v252;
        do
        {
          if (*v122 != *v121) {
            v94[v120++] = *v122;
          }
          ++v122;
        }
        while (v122 != v98);
      }
LABEL_150:
      int v254 = v120 + 1;
      unint64_t v123 = v98 - v94;
      v253[0] = v123;
      if (v123 != v120 + 1) {
        google::MakeCheckOpString<int,unsigned long>((int)&v254, (int)v253, "new_size + 1 == new_clause.size()");
      }
      if (v120 <= v123)
      {
        if (v120 < v123)
        {
          BOOL v98 = &v94[v120];
          double v277 = v98;
        }
      }
      else
      {
        std::vector<operations_research::sat::Literal>::__append((uint64_t)&v276, v120 - v123);
        uint64_t v94 = v276;
        BOOL v98 = v277;
      }
      uint64_t v157 = *v246;
      uint64_t v158 = v98 - v94;
      if (!operations_research::sat::LiteralWatchers::InprocessingRewriteClause(*((void *)v241 + 2), v246, v94, v158)) {
        goto LABEL_254;
      }
      uint64_t v237 = v237 - v158 + v157;
      uint64_t v159 = *v246;
      if (v159)
      {
        unint64_t v160 = (v159 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v2 = v241;
        if (v160 >= 3)
        {
          unint64_t v162 = v160 + 1;
          uint64_t v163 = (v160 + 1) & 0x7FFFFFFFFFFFFFFCLL;
          uint64_t v161 = &v242[v163];
          uint64_t v164 = (int32x2_t *)(v246 + 3);
          int8x16_t v165 = 0uLL;
          uint64_t v166 = v163;
          int8x16_t v167 = 0uLL;
          do
          {
            int32x2_t v168 = v164[-1];
            int32x2_t v169 = vshr_n_s32(v168, 1uLL);
            int32x2_t v170 = vshr_n_s32(*v164, 1uLL);
            int32x2_t v171 = vsub_s32(v169, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v169, (uint32x2_t)vcltz_s32(v168), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
            int32x2_t v172 = vsub_s32(v170, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v170, (uint32x2_t)vcltz_s32(*v164), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
            v173.i64[0] = v171.u32[0];
            v173.i64[1] = v171.u32[1];
            uint64x2_t v174 = v173;
            v173.i64[0] = v172.u32[0];
            v173.i64[1] = v172.u32[1];
            uint64x2_t v175 = (uint64x2_t)vdupq_n_s64(1uLL);
            int8x16_t v165 = vorrq_s8((int8x16_t)vshlq_u64(v175, v174), v165);
            int8x16_t v167 = vorrq_s8((int8x16_t)vshlq_u64(v175, v173), v167);
            v164 += 2;
            v166 -= 4;
          }
          while (v166);
          int8x16_t v176 = vorrq_s8(v167, v165);
          int8x8_t v32 = vorr_s8(*(int8x8_t *)v176.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL));
          if (v162 != v163) {
            goto LABEL_211;
          }
        }
        else
        {
          int8x8_t v32 = 0;
          uint64_t v161 = v246 + 1;
LABEL_211:
          uint64_t v177 = &v242[v159];
          do
          {
            int v178 = *v161++;
            int v179 = -(v178 >> 1) & 0x3F;
            int v180 = (v178 >> 1) & 0x3F;
            if (v178 >> 1 <= 0) {
              int v180 = -v179;
            }
            *(void *)&v32 |= 1 << v180;
          }
          while (v161 != v177);
        }
LABEL_215:
        uint64_t v181 = 0;
        uint64_t v182 = (void *)*((void *)v2 + 2);
        unint64_t v183 = (unint64_t)v246
             + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v246)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + (void)v246)));
        unint64_t v184 = ((v183 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v183);
        unint64_t v185 = v182[42];
        uint64_t v186 = v182[43];
        unint64_t v187 = (v184 >> 7) ^ (v185 >> 12);
        uint64_t v188 = v182[45];
        uint64_t v189 = 0x101010101010101 * (v184 & 0x7F);
        while (1)
        {
          uint64_t v190 = v187 & v188;
          uint64_t v191 = *(void *)(v185 + v190);
          unint64_t v192 = ((v191 ^ v189) - 0x101010101010101) & ~(v191 ^ v189) & 0x8080808080808080;
          if (v192) {
            break;
          }
LABEL_219:
          if ((v191 & (~v191 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_222;
          }
          v181 += 8;
          unint64_t v187 = v181 + v190;
        }
        while (1)
        {
          unint64_t v193 = (v190 + (__clz(__rbit64(v192)) >> 3)) & v188;
          if (*(int **)(v186 + 24 * v193) == v246) {
            break;
          }
          v192 &= v192 - 1;
          if (!v192) {
            goto LABEL_219;
          }
        }
        if (v193 == v188)
        {
LABEL_222:
          uint64_t v194 = *v246;
          int v195 = (char *)v261;
          if (v194)
          {
            uint64_t v196 = 4 * v194;
            int v197 = 0x7FFFFFFF;
            int v198 = -1;
            int v199 = v246 + 1;
            do
            {
              uint64_t v201 = *v199++;
              int v200 = v201;
              unint64_t v202 = *((void *)v261 + 4 * v201) >> 1;
              if (v202 < v197)
              {
                int v197 = v202;
                int v198 = v200;
              }
              v196 -= 4;
            }
            while (v196);
          }
          else
          {
            int v198 = -1;
          }
          uint64_t v203 = v19;
          v17[v243] = v32;
          int v204 = &v195[32 * v198];
          int v206 = v204 + 8;
          unint64_t v205 = *(void *)v204;
          if (*(void *)v204)
          {
            int v206 = (char *)*((void *)v204 + 1);
            unint64_t v207 = *((void *)v204 + 2);
            unint64_t v208 = v205 >> 1;
            unint64_t v119 = v243;
            if (v205 >> 1 == v207) {
              goto LABEL_234;
            }
          }
          else
          {
            unint64_t v207 = 6;
            unint64_t v208 = v205 >> 1;
            unint64_t v119 = v243;
            if (v205 >> 1 == 6)
            {
LABEL_234:
              if (((v207 >> 61) & 3) != 0) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v209 = (char *)operator new(8 * v207);
              unsigned int v210 = v209;
              *(_DWORD *)&v209[4 * v207] = v243;
              if (v205 >= 2)
              {
                unint64_t v211 = 0;
                if (v207 < 8 || (unint64_t)(v209 - v206) < 0x20)
                {
                  int v212 = v206;
                }
                else
                {
                  unint64_t v211 = v207 & 0xFFFFFFFFFFFFFFF8;
                  int v212 = &v206[4 * (v207 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v213 = v209 + 16;
                  unsigned int v214 = (long long *)(v206 + 16);
                  unint64_t v215 = v207 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    long long v216 = *v214;
                    *(v213 - 1) = *(v214 - 1);
                    _OWORD *v213 = v216;
                    v213 += 2;
                    v214 += 2;
                    v215 -= 8;
                  }
                  while (v215);
                  if (v207 == v211) {
                    goto LABEL_245;
                  }
                }
                unint64_t v217 = v207 - v211;
                uint64_t v218 = &v209[4 * v211];
                do
                {
                  int v219 = *(_DWORD *)v212;
                  v212 += 4;
                  *(_DWORD *)uint64_t v218 = v219;
                  v218 += 4;
                  --v217;
                }
                while (v217);
              }
LABEL_245:
              if (v205)
              {
                operator delete(*((void **)v204 + 1));
                unint64_t v205 = *(void *)v204;
              }
              *((void *)v204 + 1) = v210;
              *((void *)v204 + 2) = 2 * v207;
              v205 |= 1uLL;
              unint64_t v119 = v243;
LABEL_16:
              *(void *)int v204 = v205 + 2;
              uint64_t v2 = v241;
              uint64_t v19 = v203;
              goto LABEL_17;
            }
          }
          *(_DWORD *)&v206[4 * v208] = v119;
          goto LABEL_16;
        }
        unint64_t v119 = v243;
      }
      else
      {
        uint64_t v2 = v241;
        unint64_t v119 = v243;
      }
LABEL_17:
      unint64_t v18 = v119 + 1;
      if (v236 <= v18) {
        goto LABEL_249;
      }
    }
  }
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  uint64_t v247 = 0;
  long long __p = 0;
  uint64_t v256 = 0;
  unint64_t v257 = 0;
LABEL_249:
  if ((operations_research::sat::Inprocessing::LevelZeroPropagate(v2) & 1) == 0)
  {
LABEL_254:
    uint64_t v225 = 0;
    int v226 = __p;
    if (!__p) {
      goto LABEL_256;
    }
    goto LABEL_255;
  }
  *(double *)(*((void *)v2 + 4) + 112) = (double)v19 * 0.000000005
                                           + (double)v247 * 0.00000001
                                           + *(double *)(*((void *)v2 + 4) + 112);
  if (a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)v253, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 564);
    unint64_t v220 = (void *)google::LogMessage::stream((google::LogMessage *)v253);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"Subsume. num_removed_literals: ", 31);
    long long v221 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)" num_subsumed: ", 15);
    uint64_t v222 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)" dtime: ", 8);
    uint64_t v223 = (void *)std::ostream::operator<<();
    uint64_t v224 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v224);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v253);
  }
  uint64_t v225 = 1;
  int v226 = __p;
  if (__p)
  {
LABEL_255:
    uint64_t v256 = (uint64_t)v226;
    operator delete(v226);
  }
LABEL_256:
  if (v17)
  {
    uint64_t v259 = v17;
    operator delete(v17);
  }
  int v227 = (void **)v261;
  if (v261)
  {
    v228 = v262;
    v229 = v261;
    if (v262 != v261)
    {
      uint64_t v230 = v262;
      do
      {
        char v231 = *((unsigned char *)v230 - 32);
        v230 -= 4;
        if (v231) {
          operator delete(*(v228 - 3));
        }
        v228 = v230;
      }
      while (v230 != v227);
      v229 = v261;
    }
    v262 = v227;
    operator delete(v229);
  }
  if (v270)
  {
    unsigned __int8 v271 = (char *)v270;
    operator delete(v270);
  }
  if (v264)
  {
    v265 = v264;
    operator delete(v264);
  }
  if (v273) {
    operator delete(v273);
  }
  if (v276)
  {
    double v277 = v276;
    operator delete(v276);
  }
  return v225;
}

void sub_23CD69C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_23CD69C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void **a39,void **a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39)
  {
    unint64_t v46 = a40;
    uint64_t v47 = a39;
    if (a40 != a39)
    {
      int v48 = a40;
      do
      {
        char v49 = *((unsigned char *)v48 - 32);
        v48 -= 4;
        if (v49) {
          operator delete(*(v46 - 3));
        }
        unint64_t v46 = v48;
      }
      while (v48 != a39);
      uint64_t v47 = a39;
    }
    operator delete(v47);
    uint64_t v42 = *(void **)(v40 - 176);
    if (!v42)
    {
LABEL_7:
      unint64_t v43 = *(void **)(v40 - 224);
      if (!v43) {
        goto LABEL_8;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v42 = *(void **)(v40 - 176);
    if (!v42) {
      goto LABEL_7;
    }
  }
  *(void *)(v40 - 168) = v42;
  operator delete(v42);
  unint64_t v43 = *(void **)(v40 - 224);
  if (!v43)
  {
LABEL_8:
    int v44 = *(void **)(v40 - 152);
    if (!v44) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_21:
  *(void *)(v40 - 216) = v43;
  operator delete(v43);
  int v44 = *(void **)(v40 - 152);
  if (!v44)
  {
LABEL_10:
    uint64_t v45 = *(void **)(v40 - 128);
    if (v45)
    {
      *(void *)(v40 - 120) = v45;
      operator delete(v45);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_9:
  operator delete(v44);
  goto LABEL_10;
}

void operations_research::sat::BlockedClauseSimplifier::DoOneRound(int64x2_t *this, int a2)
{
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  this[2].i64[1] = 0;
  this[3].i32[0] = 0;
  this[3].i64[1] = 0;
  operations_research::sat::BlockedClauseSimplifier::InitializeForNewRound((operations_research::sat::BlockedClauseSimplifier *)this);
  while (1)
  {
    uint64_t v5 = this[2].i64[0];
    int64_t v6 = *(unsigned __int8 **)(v5 + 120);
    if (v6)
    {
      unsigned __int8 v7 = atomic_load(v6);
      if (v7) {
        break;
      }
    }
    if (fmax(*(double *)(v5 + 104) - *(double *)(v5 + 112), 0.0) <= 0.0) {
      break;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v4);
    if (*(void *)(v5 + 24) <= CurrentTimeNanos - *(void *)(v5 + 8)) {
      uint64_t v9 = CurrentTimeNanos - *(void *)(v5 + 8);
    }
    else {
      uint64_t v9 = *(void *)(v5 + 24);
    }
    operations_research::RunningMax<long long>::Add((int *)(v5 + 32), v9);
    *(void *)(v5 + 8) = CurrentTimeNanos;
    if (*(void *)(*(void *)(v5 + 40) + 8 * *(int *)(v5 + 68)) + CurrentTimeNanos >= *(void *)(v5 + 16))
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_19;
      }
      double v11 = *(double *)(v5 + 96);
      if (*(unsigned char *)(v5 + 72))
      {
        double v12 = v11
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v10) - *(void *)(v5 + 80) + *(void *)(v5 + 88))
            * -0.000000001;
        if (v12 <= 0.0001) {
          goto LABEL_19;
        }
      }
      else
      {
        double v12 = v11 + (double)*(uint64_t *)(v5 + 88) * -0.000000001;
        if (v12 <= 0.0001)
        {
LABEL_19:
          *(void *)(v5 + 16) = 0;
          break;
        }
      }
      *(void *)(v5 + 16) = *(void *)(v5 + 8) + (uint64_t)(v12 * 1000000000.0);
    }
    if (!this[9].i64[1]) {
      break;
    }
    unint64_t v13 = (void **)this[7].i64[1];
    unint64_t v14 = (*(int **)((char *)v13 + (((unint64_t)this[9].i64[0] >> 7) & 0x1FFFFFFFFFFFFF8)))[this[9].i64[0] & 0x3FF];
    *(void *)(this[5].i64[1] + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v14);
    int64x2_t v15 = vaddq_s64(this[9], (int64x2_t)xmmword_23CE7E330);
    this[9] = v15;
    if (v15.i64[0] >= 0x800uLL)
    {
      operator delete(*v13);
      this[7].i64[1] += 8;
      this[9].i64[0] -= 1024;
    }
    operations_research::sat::BlockedClauseSimplifier::ProcessLiteral((uint64_t)this, v14);
  }
  uint64_t v17 = this[11].i64[1];
  uint64_t v16 = this[12].i64[0];
  if (v16 != v17)
  {
    uint64_t v18 = this[12].i64[0];
    do
    {
      uint64_t v20 = *(void **)(v18 - 24);
      v18 -= 24;
      uint64_t v19 = v20;
      if (v20)
      {
        *(void *)(v16 - 16) = v19;
        operator delete(v19);
      }
      uint64_t v16 = v18;
    }
    while (v18 != v17);
  }
  this[12].i64[0] = v17;
  double v21 = *(double *)&this[2].i64[1] + (double)this[3].i64[1] * 0.00000001;
  *(double *)&this[2].i64[1] = v21;
  *(double *)(this[2].i64[0] + 112) = v21 + *(double *)(this[2].i64[0] + 112);
  if (*operations_research::sat::BlockedClauseSimplifier::DoOneRound(BOOL)::vlocal__[0] >= 1)
  {
    if (operations_research::sat::BlockedClauseSimplifier::DoOneRound(BOOL)::vlocal__[0] == &google::kLogSiteUninitialized)
    {
      if (!(google::InitVLOG3__((google *)operations_research::sat::BlockedClauseSimplifier::DoOneRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1) | a2))return; {
    }
      }
    else if (!(a2 | 1))
    {
      return;
    }
LABEL_32:
    google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 910);
    unint64_t v22 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Blocked clause. num_blocked_clauses: ", 37);
    unint64_t v23 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" dtime: ", 8);
    unint64_t v24 = (void *)std::ostream::operator<<();
    uint64_t v25 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v25);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v26);
    return;
  }
  if (a2) {
    goto LABEL_32;
  }
}

void sub_23CD6A13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BoundedVariableElimination::DoOneRound(operations_research::sat::BoundedVariableElimination *this, int a2)
{
  uint64_t v2 = this;
  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((void *)v2 + 14) = 0;
  *((void *)v2 + 37) = *((void *)v2 + 36);
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)v2 + 3));
  operations_research::sat::LiteralWatchers::DetachAllClauses(*((operations_research::sat::LiteralWatchers **)v2 + 3));
  uint64_t v3 = *((void *)v2 + 3);
  uint64_t v4 = *(uint64_t **)(v3 + 304);
  uint64_t v5 = *(uint64_t **)(v3 + 312);
  if (v4 != v5)
  {
    do
    {
      uint64_t v10 = 0;
      uint64_t v12 = *v4;
      *(void *)__u = v12;
      unint64_t v13 = (void *)*((void *)v2 + 3);
      unint64_t v14 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v12)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v12)))
          + v12;
      unint64_t v15 = ((v14 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v14);
      unint64_t v16 = v13[42];
      uint64_t v17 = v13[43];
      unint64_t v11 = (v15 >> 7) ^ (v16 >> 12);
      uint64_t v18 = v13[45];
      uint64_t v19 = 0x101010101010101 * (v15 & 0x7F);
      while (1)
      {
        uint64_t v6 = v11 & v18;
        uint64_t v7 = *(void *)(v16 + v6);
        unint64_t v8 = ((v7 ^ v19) - 0x101010101010101) & ~(v7 ^ v19) & 0x8080808080808080;
        if (v8) {
          break;
        }
LABEL_6:
        if ((v7 & (~v7 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_9;
        }
        v10 += 8;
        unint64_t v11 = v10 + v6;
      }
      while (1)
      {
        unint64_t v9 = (v6 + (__clz(__rbit64(v8)) >> 3)) & v18;
        if (*(void *)(v17 + 24 * v9) == v12) {
          break;
        }
        v8 &= v8 - 1;
        if (!v8) {
          goto LABEL_6;
        }
      }
      if (v9 == v18) {
LABEL_9:
      }
        gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back((void **)v2 + 36, __u);
      ++v4;
    }
    while (v4 != v5);
    uint64_t v3 = *((void *)v2 + 3);
  }
  std::vector<int>::size_type v20 = *(int *)(v3 + 88);
  if ((v20 & 0x80000000) == 0) {
    int v21 = *(_DWORD *)(v3 + 88);
  }
  else {
    int v21 = v20 + 1;
  }
  int v140 = v21;
  unint64_t v22 = (uint64_t *)((char *)v2 + 312);
  uint64_t v24 = *((void *)v2 + 39);
  uint64_t v23 = *((void *)v2 + 40);
  if (v23 != v24)
  {
    uint64_t v25 = *((void *)v2 + 40);
    do
    {
      uint64_t v27 = *(void **)(v25 - 24);
      v25 -= 24;
      uint64_t v26 = v27;
      if (v27)
      {
        *(void *)(v23 - 16) = v26;
        operator delete(v26);
      }
      uint64_t v23 = v25;
    }
    while (v25 != v24);
    uint64_t v23 = *v22;
  }
  *((void *)v2 + 40) = v24;
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
  if (v20 <= v28)
  {
    if (v20 < v28)
    {
      uint64_t v29 = v23 + 24 * (int)v20;
      if (v24 != v29)
      {
        uint64_t v30 = v24;
        do
        {
          int8x8_t v32 = *(void **)(v30 - 24);
          v30 -= 24;
          int v31 = v32;
          if (v32)
          {
            *(void *)(v24 - 16) = v31;
            operator delete(v31);
          }
          uint64_t v24 = v30;
        }
        while (v30 != v29);
      }
      *((void *)v2 + 40) = v29;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v2 + 312, v20 - v28);
  }
  uint64_t v33 = (void *)((char *)v2 + 336);
  __u[0] = 0;
  unint64_t v141 = v20;
  std::vector<int>::assign((std::vector<int> *)v2 + 14, v20, __u);
  uint64_t v34 = *((void *)v2 + 36);
  uint64_t v35 = *((void *)v2 + 37);
  unint64_t v142 = v2;
  if ((int)((unint64_t)(v35 - v34) >> 3) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v143 = (void *)((char *)v2 + 336);
    while (1)
    {
      uint64_t v38 = *(int **)(v34 + 8 * v36);
      uint64_t v40 = *v38;
      unint64_t v39 = v38 + 1;
      uint64_t v37 = v40;
      if (v40) {
        break;
      }
LABEL_34:
      *((void *)v2 + 9) += (int)v37;
      if (++v36 >= (int)((unint64_t)(v35 - v34) >> 3)) {
        goto LABEL_59;
      }
    }
    unint64_t v41 = &v39[v37];
    unint64_t v144 = v41;
    uint64_t v145 = v36;
    while (1)
    {
      uint64_t v43 = *v39;
      uint64_t v44 = *v22 + 24 * (int)v43;
      unint64_t v46 = (uint64_t *)(v44 + 8);
      uint64_t v45 = *(char **)(v44 + 8);
      unint64_t v47 = *(void *)(v44 + 16);
      if ((unint64_t)v45 >= v47) {
        break;
      }
      *(_DWORD *)uint64_t v45 = v36;
      uint64_t v42 = (uint64_t)(v45 + 4);
LABEL_38:
      *unint64_t v46 = v42;
      ++*(_DWORD *)(*v33 + 4 * v43);
      if (++v39 == v41)
      {
        uint64_t v2 = v142;
        uint64_t v34 = *((void *)v142 + 36);
        uint64_t v35 = *((void *)v142 + 37);
        LODWORD(v37) = **(_DWORD **)(v34 + 8 * v36);
        goto LABEL_34;
      }
    }
    int v48 = *(char **)v44;
    uint64_t v49 = (uint64_t)&v45[-*(void *)v44];
    uint64_t v50 = v49 >> 2;
    unint64_t v51 = (v49 >> 2) + 1;
    if (v51 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v52 = v47 - (void)v48;
    if (v52 >> 1 > v51) {
      unint64_t v51 = v52 >> 1;
    }
    if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v146 = v51;
    uint64_t v147 = *v39;
    if (v51)
    {
      if (v51 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v53 = operator new(4 * v51);
      uint64_t v36 = v145;
      long long v54 = &v53[4 * v50];
      *long long v54 = v145;
      uint64_t v42 = (uint64_t)(v54 + 1);
      if (v45 == v48) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v53 = 0;
      long long v54 = (_DWORD *)(4 * v50);
      *(_DWORD *)(4 * v50) = v36;
      uint64_t v42 = 4 * v50 + 4;
      if (v45 == v48)
      {
LABEL_56:
        *(void *)uint64_t v44 = v54;
        *unint64_t v46 = v42;
        *(void *)(v44 + 16) = &v53[4 * v146];
        if (v48)
        {
          operator delete(v48);
          uint64_t v36 = v145;
        }
        uint64_t v33 = v143;
        unint64_t v41 = v144;
        uint64_t v43 = v147;
        goto LABEL_38;
      }
    }
    unint64_t v55 = v45 - 4 - v48;
    if (v55 < 0x2C) {
      goto LABEL_150;
    }
    if ((unint64_t)(v45 - &v53[v49]) < 0x20) {
      goto LABEL_150;
    }
    uint64_t v56 = (v55 >> 2) + 1;
    uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v58 = &v45[-v57];
    long long v54 = (_DWORD *)((char *)v54 - v57);
    int v59 = &v53[4 * v50 - 16];
    unsigned int v60 = v45 - 16;
    uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *int v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 8;
    }
    while (v61);
    uint64_t v45 = v58;
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_150:
      do
      {
        int v63 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--long long v54 = v63;
      }
      while (v45 != v48);
    }
    goto LABEL_56;
  }
LABEL_59:
  uint64_t v64 = (v140 >> 1);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(*((void *)v2 + 5) + 12);
  *((void *)v2 + 34) = *((void *)v2 + 33);
  uint64_t v65 = (void *)((char *)v2 + 240);
  std::vector<BOOL>::resize((uint64_t)v2 + 240, (int)v64, 0);
  uint64_t v66 = *((void *)v2 + 24);
  uint64_t v67 = (uint64_t *)((char *)v2 + 192);
  unint64_t v68 = (*((void *)v2 + 25) - v66) >> 3;
  if ((int)v64 + 1 <= v68)
  {
    int v69 = v141;
    if ((int)v64 + 1 < v68) {
      *((void *)v142 + 25) = v66 + 8 * ((int)v64 + 1);
    }
  }
  else
  {
    std::vector<std::pair<gtl::IntType<operations_research::sat::GenericLiteralWatcher::IdType_tag_,int>,int>>::__append((void **)v2 + 24, (int)v64 + 1 - v68);
    int v69 = v141;
  }
  uint64_t v70 = *((void *)v142 + 27);
  uint64_t v71 = *((void *)v142 + 28);
  int v72 = (void *)((char *)v142 + 216);
  __u[0] = 0;
  unint64_t v73 = (v71 - v70) >> 2;
  if ((int)v64 <= v73)
  {
    if ((int)v64 < v73) {
      *((void *)v142 + 28) = v70 + 4 * (int)v64;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)v142 + 9, (int)v64 - v73, __u);
  }
  if (v69 >= 2)
  {
    uint64_t v74 = 0;
    char v75 = 0;
    unint64_t v76 = 0;
    do
    {
      if (((*(void *)(*(void *)(*((void *)v142 + 1) + 8)
                       + (((unint64_t)(v74 >> 32) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v75 & 0x3E)) & 3) == 0
        && ((*(void *)(*(void *)(*((void *)v142 + 2) + 664) + ((v76 >> 2) & 0x3FFFFFFFFFFFFFF8)) >> (v75 & 0x3E)) & 1) == 0)
      {
        operations_research::sat::BoundedVariableElimination::UpdatePriorityQueue(v142, v76);
      }
      ++v76;
      v75 += 2;
      v74 += 0x200000000;
    }
    while (v64 != v76);
  }
  std::vector<BOOL>::resize((uint64_t)v142 + 136, v141, 0);
  uint64_t v78 = *((void *)v142 + 6);
  unint64_t v79 = *(unsigned __int8 **)(v78 + 120);
  if (!v79)
  {
    while (1)
    {
LABEL_75:
      if (fmax(*(double *)(v78 + 104) - *(double *)(v78 + 112), 0.0) <= 0.0) {
        goto LABEL_119;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(updated);
      if (*(void *)(v78 + 24) <= CurrentTimeNanos - *(void *)(v78 + 8)) {
        uint64_t v82 = CurrentTimeNanos - *(void *)(v78 + 8);
      }
      else {
        uint64_t v82 = *(void *)(v78 + 24);
      }
      operations_research::RunningMax<long long>::Add((int *)(v78 + 32), v82);
      *(void *)(v78 + 8) = CurrentTimeNanos;
      if (*(void *)(*(void *)(v78 + 40) + 8 * *(int *)(v78 + 68)) + CurrentTimeNanos >= *(void *)(v78 + 16))
      {
        if (!FLAGS_time_limit_use_usertime) {
          goto LABEL_118;
        }
        double v84 = *(double *)(v78 + 96);
        if (*(unsigned char *)(v78 + 72))
        {
          double v85 = v84
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v83) - *(void *)(v78 + 80) + *(void *)(v78 + 88))
              * -0.000000001;
          if (v85 <= 0.0001) {
            goto LABEL_118;
          }
        }
        else
        {
          double v85 = v84 + (double)*(uint64_t *)(v78 + 88) * -0.000000001;
          if (v85 <= 0.0001)
          {
LABEL_118:
            *(void *)(v78 + 16) = 0;
            goto LABEL_119;
          }
        }
        *(void *)(v78 + 16) = *(void *)(v78 + 8) + (uint64_t)(v85 * 1000000000.0);
      }
      if (!*((_DWORD *)v142 + 46)) {
        goto LABEL_119;
      }
      uint64_t v86 = *((void *)v142 + 24);
      uint64_t v87 = *(void *)(v86 + 8);
      *(_DWORD *)(*((void *)v142 + 27) + 4 * (int)v87) = 0;
      uint64_t v88 = *((unsigned int *)v142 + 46);
      *((_DWORD *)v142 + 46) = v88 - 1;
      if ((int)v88 >= 2) {
        break;
      }
LABEL_102:
      LOBYTE(__u[0]) = 0;
      if (!operations_research::sat::BoundedVariableElimination::Propagate(v142)) {
        return 0;
      }
      int v98 = v87;
      while (operations_research::sat::BinaryImplicationGraph::FindFailedLiteralAroundVar(*((void *)v142 + 2), v87, __u))
      {
        if (!operations_research::sat::BoundedVariableElimination::Propagate(v142)) {
          return 0;
        }
      }
      if (LOBYTE(__u[0])) {
        return 0;
      }
      char updated = (absl::lts_2020_02_25 *)operations_research::sat::BoundedVariableElimination::CrossProduct((uint64_t)v142, v87);
      if (!updated) {
        return 0;
      }
      unint64_t v99 = (int *)*((void *)v142 + 33);
      int v100 = (int *)*((void *)v142 + 34);
      if (v99 == v100)
      {
        *((void *)v142 + 31) = 0;
        *((void *)v142 + 34) = v99;
        uint64_t v78 = *((void *)v142 + 6);
        unint64_t v79 = *(unsigned __int8 **)(v78 + 120);
        if (v79) {
          goto LABEL_74;
        }
      }
      else
      {
        do
        {
          unint64_t v101 = *v99;
          *(void *)(*v65 + ((v101 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v101);
          if (v101 != v98) {
            char updated = (absl::lts_2020_02_25 *)operations_research::sat::BoundedVariableElimination::UpdatePriorityQueue(v142, v101);
          }
          ++v99;
        }
        while (v99 != v100);
        uint64_t v102 = *((void *)v142 + 33);
        *((void *)v142 + 31) = 0;
        *((void *)v142 + 34) = v102;
        uint64_t v78 = *((void *)v142 + 6);
        unint64_t v79 = *(unsigned __int8 **)(v78 + 120);
        if (v79) {
          goto LABEL_74;
        }
      }
    }
    uint64_t v89 = *(void *)(v86 + 8 * v88);
    if (v88 >= 4)
    {
      int v92 = 1;
      int v90 = 2;
      int v93 = 3;
      do
      {
        uint64_t v86 = *v67;
        unint64_t v95 = *(void *)(*v67 + 8 * v90);
        unint64_t v96 = HIDWORD(v95);
        uint64_t v94 = *(void *)(*v67 + 8 * v93);
        if (SHIDWORD(v95) >= SHIDWORD(v94))
        {
          uint64_t v94 = *(void *)(*v67 + 8 * v90);
          int v91 = v90;
          if (SHIDWORD(v89) >= (int)v96) {
            goto LABEL_96;
          }
        }
        else
        {
          int v91 = v93;
          if (SHIDWORD(v89) >= SHIDWORD(v94))
          {
LABEL_96:
            int v90 = v92;
            goto LABEL_101;
          }
        }
        *(void *)(v86 + 8 * v92) = v94;
        *(_DWORD *)(*v72 + 4 * (int)v94) = v92;
        int v90 = 2 * v91;
        int v93 = (2 * v91) | 1;
        int v92 = v91;
      }
      while (v93 < (int)v88);
      uint64_t v86 = *v67;
      if (v90 >= (int)v88) {
        goto LABEL_100;
      }
    }
    else
    {
      int v90 = 2;
      int v91 = 1;
      if ((int)v88 <= 2) {
        goto LABEL_100;
      }
    }
    uint64_t v97 = *(void *)(v86 + 8 * v90);
    if (SHIDWORD(v89) < SHIDWORD(v97))
    {
      *(void *)(v86 + 8 * v91) = v97;
      *(_DWORD *)(*v72 + 4 * (int)v97) = v91;
      uint64_t v86 = *v67;
LABEL_101:
      *(void *)(v86 + 8 * v90) = v89;
      *(_DWORD *)(*v72 + 4 * (int)v89) = v90;
      goto LABEL_102;
    }
LABEL_100:
    int v90 = v91;
    goto LABEL_101;
  }
LABEL_74:
  unsigned __int8 v80 = atomic_load(v79);
  if ((v80 & 1) == 0) {
    goto LABEL_75;
  }
LABEL_119:
  operations_research::sat::BinaryImplicationGraph::CleanupAllRemovedVariables(*((operations_research::sat::BinaryImplicationGraph **)v142
                                                                               + 2));
  uint64_t v104 = *((void *)v142 + 3);
  unint64_t v105 = *(int ***)(v104 + 304);
  for (std::vector<int>::pointer i = *(int ***)(v104 + 312); v105 != i; ++v105)
  {
    uint64_t v111 = 0;
    uint64_t v116 = *v105;
    long long v117 = (void *)*((void *)v142 + 3);
    unint64_t v118 = (unint64_t)*v105
         + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v105)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + (void)*v105)));
    unint64_t v119 = ((v118 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v118);
    unint64_t v120 = v117[42];
    unint64_t v112 = (v119 >> 7) ^ (v120 >> 12);
    uint64_t v121 = v117[45];
    uint64_t v122 = 0x101010101010101 * (v119 & 0x7F);
    while (1)
    {
      uint64_t v107 = v112 & v121;
      uint64_t v108 = *(void *)(v120 + v107);
      unint64_t v109 = ((v108 ^ v122) - 0x101010101010101) & ~(v108 ^ v122) & 0x8080808080808080;
      if (v109) {
        break;
      }
LABEL_124:
      if ((v108 & (~v108 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_133;
      }
      v111 += 8;
      unint64_t v112 = v111 + v107;
    }
    while (1)
    {
      unint64_t v110 = (v107 + (__clz(__rbit64(v109)) >> 3)) & v121;
      if (*(int **)(v117[43] + 24 * v110) == v116) {
        break;
      }
      v109 &= v109 - 1;
      if (!v109) {
        goto LABEL_124;
      }
    }
    if (v110 != v121)
    {
      uint64_t v113 = *v116;
      if (v113)
      {
        unint64_t v114 = 0;
        uint64_t v115 = 4 * v113;
        while (((*(void *)(*(void *)(*((void *)v142 + 2) + 664)
                            + (((unint64_t)v116[v114 / 4 + 1] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v116[v114 / 4 + 1]) & 1) == 0)
        {
          v114 += 4;
          if (v115 == v114) {
            goto LABEL_133;
          }
        }
        operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)v117, v116);
      }
    }
LABEL_133:
    ;
  }
  uint64_t v124 = *((void *)v142 + 39);
  uint64_t v123 = *((void *)v142 + 40);
  if (v123 != v124)
  {
    uint64_t v125 = *((void *)v142 + 40);
    do
    {
      unint64_t v127 = *(void **)(v125 - 24);
      v125 -= 24;
      uint64_t v126 = v127;
      if (v127)
      {
        *(void *)(v123 - 16) = v126;
        operator delete(v126);
      }
      uint64_t v123 = v125;
    }
    while (v125 != v124);
  }
  *((void *)v142 + 40) = v124;
  *((void *)v142 + 43) = *((void *)v142 + 42);
  double v128 = *((double *)v142 + 8) + (double)*((uint64_t *)v142 + 9) * 0.00000001;
  *((double *)v142 + 8) = v128;
  *(double *)(*((void *)v142 + 6) + 112) = v128 + *(double *)(*((void *)v142 + 6) + 112);
  if (*operations_research::sat::BoundedVariableElimination::DoOneRound(BOOL)::vlocal__[0] > 0
    && (operations_research::sat::BoundedVariableElimination::DoOneRound(BOOL)::vlocal__[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)operations_research::sat::BoundedVariableElimination::DoOneRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1))|| a2)
  {
    google::LogMessage::LogMessage((google::LogMessage *)__u, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 1179);
    unint64_t v129 = (void *)google::LogMessage::stream((google::LogMessage *)__u);
    uint64_t v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"BVE.", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" num_fixed: ", 12);
    uint64_t v131 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" num_simplified_literals: ", 26);
    uint64_t v132 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)" num_blocked_clauses_: ", 23);
    int64_t v133 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)" num_eliminations: ", 19);
    uint64_t v134 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)" num_literals_diff: ", 20);
    uint64_t v135 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)" num_clause_diff: ", 18);
    uint64_t v136 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)" dtime: ", 8);
    uint64_t v137 = (void *)std::ostream::operator<<();
    unint64_t v138 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v138);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)__u);
  }
  return 1;
}

void sub_23CD6AD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::BinaryImplicationGraph::num_redundant_literals(operations_research::sat::BinaryImplicationGraph *this)
{
  uint64_t result = *((void *)this + 39);
  uint64_t v2 = result & 1;
  if (result < 0) {
    uint64_t v2 = -v2;
  }
  uint64_t v3 = v2;
  int v4 = 0;
  if (v2) {
    google::MakeCheckOpString<long long,int>((int)&v3, (int)&v4, "num_redundant_literals_ % 2 == 0");
  }
  return result;
}

void sub_23CD6AE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::Inprocessing::InprocessingRound(operations_research::sat::Inprocessing *this)
{
  absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  if (*operations_research::sat::Inprocessing::InprocessingRound(void)::vlocal__[0] < 1) {
    int v2 = 0;
  }
  else {
    int v2 = operations_research::sat::Inprocessing::InprocessingRound(void)::vlocal__[0] != &google::kLogSiteUninitialized
  }
      || google::InitVLOG3__((google *)operations_research::sat::Inprocessing::InprocessingRound(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1);
  double v3 = *(double *)(*((void *)this + 4) + 112);
  if (*((double *)this + 9) > v3 * 0.1) {
    return 1;
  }
  uint64_t v5 = *((void *)this + 3);
  std::vector<BOOL>::resize((uint64_t)this + 80, (uint64_t)(*(void *)(v5 + 128) - *(void *)(v5 + 120)) >> 3, 0);
  uint64_t v6 = *(char **)(v5 + 120);
  unint64_t v7 = *(void *)(v5 + 128) - (void)v6;
  if ((int)(v7 >> 3) >= 1)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *((void *)this + 10);
    uint64_t v10 = (v7 >> 3);
    do
    {
      while (1)
      {
        unint64_t v11 = v8 >> 6;
        uint64_t v12 = 1 << v8;
        char v13 = *v6;
        v6 += 8;
        if (v13) {
          break;
        }
        *(void *)(v9 + 8 * v11) &= ~v12;
        if (v10 == ++v8) {
          goto LABEL_13;
        }
      }
      *(void *)(v9 + 8 * v11) |= v12;
      ++v8;
    }
    while (v10 != v8);
  }
LABEL_13:
  uint64_t result = operations_research::sat::Inprocessing::DetectEquivalencesAndStamp(this, 1, v2);
  if (result)
  {
    uint64_t result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
    if (result)
    {
      uint64_t result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
      if (result)
      {
        absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
        uint64_t v14 = v2 ? 0x101010101 : 16843009;
        uint64_t result = operations_research::sat::FailedLiteralProbingRound((absl::lts_2020_02_25 *)0x4014000000000000, v14, *((void *)this + 13));
        if (result)
        {
          absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
          uint64_t result = operations_research::sat::Inprocessing::DetectEquivalencesAndStamp(this, 1, v2);
          if (result)
          {
            uint64_t result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
            if (result)
            {
              uint64_t result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
              if (result)
              {
                uint64_t result = operations_research::sat::StampingSimplifier::DoOneRound(*((operations_research::sat::BinaryImplicationGraph ***)this + 6), v2);
                if (result)
                {
                  uint64_t result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
                  if (result)
                  {
                    uint64_t result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
                    if (result)
                    {
                      operations_research::sat::SatSolver::MinimizeSomeClauses(*((operations_research::sat::SatSolver **)this + 5), 1000);
                      uint64_t result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
                      if (result)
                      {
                        uint64_t result = operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(this, v2);
                        if (result)
                        {
                          uint64_t result = operations_research::sat::Inprocessing::RemoveFixedAndEquivalentVariables(this, v2);
                          if (result)
                          {
                            operations_research::sat::BlockedClauseSimplifier::DoOneRound(*((int64x2_t **)this + 7), v2);
                            uint64_t result = operations_research::sat::BoundedVariableElimination::DoOneRound(*((operations_research::sat::BoundedVariableElimination **)this + 8), v2);
                            if (result)
                            {
                              uint64_t result = operations_research::sat::Inprocessing::LevelZeroPropagate(this);
                              if (result)
                              {
                                *((double *)this + 9) = *((double *)this + 9)
                                                      + *(double *)(*((void *)this + 4) + 112)
                                                      - v3;
                                google::LogMessage::LogMessage((google::LogMessage *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 190);
                                unint64_t v15 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
                                unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Presolve.", 9);
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" num_fixed: ", 12);
                                uint64_t v17 = (void *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" num_redundant: ", 16);
                                operations_research::sat::BinaryImplicationGraph::num_redundant_literals(*((operations_research::sat::BinaryImplicationGraph **)this + 1));
                                uint64_t v18 = (void *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/", 1);
                                uint64_t v19 = (void *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" num_implications: ", 19);
                                std::vector<int>::size_type v20 = (void *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" num_watched_clauses: ", 22);
                                int v21 = (void *)std::ostream::operator<<();
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" dtime: ", 8);
                                unint64_t v22 = (void *)std::ostream::operator<<();
                                uint64_t v23 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" wtime: ", 8);
                                absl::lts_2020_02_25::GetCurrentTimeNanos(v23);
                                uint64_t v24 = (void *)std::ostream::operator<<();
                                uint64_t v25 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" non-probing time: ", 19);
                                absl::lts_2020_02_25::GetCurrentTimeNanos(v25);
                                std::ostream::operator<<();
                                google::LogMessage::~LogMessage((google::LogMessage *)v26);
                                operations_research::sat::Trail::RestorePolarities(*((void *)this + 3), (uint64_t)this + 80);
                                return 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_23CD6B25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::Trail::RestorePolarities(uint64_t result, uint64_t a2)
{
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      *(_DWORD *)(*(void *)(result + 120) + v2) = *(_DWORD *)(*(void *)(result + 120) + v2) & 0xFFFFFFFE | (*(void *)(*(void *)a2 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1;
      ++v3;
      v2 += 8;
    }
    while ((uint64_t)v3 < *(int *)(a2 + 8));
  }
  return result;
}

BOOL operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(operations_research::sat::BinaryImplicationGraph **this, int a2)
{
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)this);
  this[6] = 0;
  this[9] = 0;
  int v4 = this[1];
  if (*((void *)v4 + 25) == *((void *)v4 + 24)) {
    return 1;
  }
  if (!*((void *)v4 + 27)) {
    return 1;
  }
  operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables((BOOL)v4);
  if (!operations_research::sat::BinaryImplicationGraph::DetectEquivalences(this[1], a2)) {
    return 1;
  }
  operations_research::sat::StampingSimplifier::SampleTreeAndFillParent((operations_research::sat::StampingSimplifier *)this);
  BOOL result = operations_research::sat::StampingSimplifier::ComputeStamps((operations_research::sat::StampingSimplifier *)this);
  if (!result) {
    return result;
  }
  *((unsigned char *)this + 40) = 1;
  *((double *)this[4] + 14) = *((double *)this + 6) + *((double *)this[4] + 14);
  if (*operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(BOOL)::vlocal__[0] < 1)
  {
    if (!a2) {
      return 1;
    }
    goto LABEL_12;
  }
  if (operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(BOOL)::vlocal__[0] != &google::kLogSiteUninitialized)
  {
    if (!(a2 | 1)) {
      return 1;
    }
    goto LABEL_12;
  }
  if (google::InitVLOG3__((google *)operations_research::sat::StampingSimplifier::ComputeStampsForNextRound(BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_inprocessing.cc", (const char *)1) | a2)
  {
LABEL_12:
    google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 626);
    uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v11);
    unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Prestamping.", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" num_fixed: ", 12);
    unint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" dtime: ", 8);
    uint64_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v10);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)v11);
  }
  return 1;
}

void sub_23CD6B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::StampingSimplifier::SampleTreeAndFillParent(operations_research::sat::StampingSimplifier *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!*(unsigned char *)(v1 + 512))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v23, (google::glog_internal_namespace_ *)"./ortools/sat/sat_inprocessing.cc", 634);
    unint64_t v22 = (void *)google::LogMessage::stream((google::LogMessage *)v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed: implication_graph_->IsDag() ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v23);
  }
  uint64_t v3 = *(void *)(v1 + 200) - *(void *)(v1 + 192);
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = (void *)((char *)this + 80);
  unint64_t v6 = (int)(v3 >> 5);
  unint64_t v7 = (*((void *)this + 11) - v4) >> 2;
  if (v6 <= v7)
  {
    if (v6 < v7) {
      *((void *)this + 11) = v4 + 4 * v6;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v6 - v7);
  }
  if ((int)((unint64_t)v3 >> 5) >= 1)
  {
    unint64_t v8 = 0;
    uint64_t v9 = ((unint64_t)v3 >> 5);
    do
    {
      *(_DWORD *)(*((void *)this + 10) + 4 * v8) = v8;
      uint64_t v10 = (void *)*((void *)this + 1);
      if (((*(void *)(v10[68] + 8 * (v8 >> 6)) >> v8) & 1) == 0
        && ((*(void *)(*(void *)(*(void *)this + 8) + 8 * (v8 >> 6)) >> (v8 & 0x3E)) & 3) == 0)
      {
        unint64_t v11 = operations_research::sat::BinaryImplicationGraph::DirectImplications(v10, v8 ^ 1);
        uint64_t v12 = *v11;
        if (*v11 != v11[1])
        {
          char v13 = v11;
          int v14 = 10;
          while (1)
          {
            unint64_t v15 = (unint64_t)((unsigned char *)v13[1] - v12) >> 2;
            BOOL v16 = __OFSUB__(v15, 1);
            int v17 = v15 - 1;
            if (v17 < 0 != v16)
            {
              int v19 = 0;
            }
            else
            {
              uint64_t v18 = *((void *)this + 3);
              LODWORD(v24) = 0;
              HIDWORD(v24) = v17;
              *(void *)uint64_t v23 = v24;
              int v19 = absl::lts_2020_02_25::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&v24, v18, v23);
              uint64_t v12 = *v13;
            }
            uint64_t v20 = *(unsigned int *)&v12[4 * v19] ^ 1;
            if (v8 != v20
              && ((1 << v20) & *(void *)(*(void *)(*((void *)this + 1) + 544)
                                           + (((unint64_t)*(int *)&v12[4 * v19] >> 3) & 0x1FFFFFFFFFFFFFF8))) == 0)
            {
              break;
            }
            if (!--v14) {
              goto LABEL_9;
            }
          }
          *(_DWORD *)(*v5 + 4 * v8) = v20;
        }
      }
LABEL_9:
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_23CD6B640(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::StampingSimplifier::ComputeStamps(operations_research::sat::StampingSimplifier *this)
{
  unint64_t v2 = *(void *)(*((void *)this + 1) + 200) - *(void *)(*((void *)this + 1) + 192);
  unint64_t v3 = v2 >> 5;
  uint64_t v4 = (unint64_t *)((char *)this + 104);
  std::vector<int>::value_type __u = 0;
  std::vector<int>::size_type v100 = (int)((uint64_t)v2 >> 5);
  std::vector<int>::assign((std::vector<int> *)((char *)this + 104), v100, &__u);
  unint64_t v5 = (v2 >> 5);
  if ((int)(v2 >> 5) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)this + 10);
    do
    {
      uint64_t v8 = *(unsigned int *)(v7 + 4 * v6);
      if (v6 != v8) {
        ++*(_DWORD *)(*v4 + 4 * (int)v8);
      }
      ++v6;
    }
    while (v5 != v6);
  }
  uint64_t v9 = (_DWORD *)*((void *)this + 16);
  uint64_t v10 = (unint64_t *)((char *)this + 128);
  unint64_t v11 = (uint64_t)((v2 << 27) + 0x100000000) >> 32;
  unint64_t v12 = (uint64_t)(*((void *)this + 17) - (void)v9) >> 2;
  if (v11 <= v12)
  {
    if (v11 < v12) {
      *((void *)this + 17) = &v9[v11];
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 128), v11 - v12);
    uint64_t v9 = (_DWORD *)*v10;
  }
  *uint64_t v9 = 0;
  if ((int)v3 >= 1)
  {
    int v13 = 0;
    int v14 = (int *)*v4;
    unint64_t v15 = v9 + 1;
    uint64_t v16 = (v3 + 1) - 1;
    do
    {
      int v17 = *v14++;
      v13 += v17;
      *v15++ = v13;
      --v16;
    }
    while (v16);
  }
  uint64_t v18 = *((void *)this + 19);
  unint64_t v19 = (*((void *)this + 20) - v18) >> 2;
  if (v100 <= v19)
  {
    if (v100 < v19) {
      *((void *)this + 20) = v18 + 4 * v100;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 152), v100 - v19);
  }
  if ((int)v3 < 1) {
    goto LABEL_36;
  }
  uint64_t v20 = 0;
  uint64_t v21 = *((void *)this + 10);
  do
  {
    uint64_t v22 = *(unsigned int *)(v21 + 4 * v20);
    if (v20 != v22)
    {
      uint64_t v23 = 4 * (int)v22;
      uint64_t v24 = *(int *)(*v10 + v23);
      *(_DWORD *)(*v10 + v23) = v24 + 1;
      *(_DWORD *)(*((void *)this + 19) + 4 * v24) = v20;
    }
    ++v20;
  }
  while (v5 != v20);
  unint64_t v25 = *v4;
  unint64_t v26 = *v10;
  if (v5 >= 8 && (v26 < v25 + 4 * v5 ? (BOOL v27 = v25 >= v26 + 4 * v5) : (BOOL v27 = 1), v27))
  {
    unint64_t v28 = v5 - (v2 >> 5);
    uint64_t v29 = (int32x4_t *)(v25 + 16);
    uint64_t v30 = (int32x4_t *)(v26 + 16);
    unint64_t v31 = v28;
    do
    {
      int32x4_t v32 = vsubq_s32(*v30, *v29);
      v30[-1] = vsubq_s32(v30[-1], v29[-1]);
      *uint64_t v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (!(v2 >> 5)) {
      goto LABEL_36;
    }
  }
  else
  {
    unint64_t v28 = 0;
  }
  uint64_t v33 = (_DWORD *)(v26 + 4 * v28);
  uint64_t v34 = (int *)(v25 + 4 * v28);
  unint64_t v35 = v28 - v5;
  do
  {
    int v36 = *v34++;
    *v33++ -= v36;
    BOOL v27 = __CFADD__(v35++, 1);
  }
  while (!v27);
LABEL_36:
  uint64_t v37 = *((void *)this + 28);
  unint64_t v38 = (*((void *)this + 29) - v37) >> 2;
  if (v100 <= v38)
  {
    if (v100 < v38) {
      *((void *)this + 29) = v37 + 4 * v100;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 224), v100 - v38);
  }
  uint64_t v39 = *((void *)this + 31);
  unint64_t v40 = (*((void *)this + 32) - v39) >> 2;
  if (v100 <= v40)
  {
    if (v100 < v40) {
      *((void *)this + 32) = v39 + 4 * v100;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 248), v100 - v40);
  }
  char v106 = 0;
  uint64_t v104 = (uint64_t *)((char *)this + 176);
  std::vector<BOOL>::assign((char **)this + 22, v100, &v106);
  if ((int)v3 < 1) {
    return 1;
  }
  unint64_t v101 = (void *)((char *)this + 128);
  uint64_t v102 = (uint64_t *)((char *)this + 224);
  uint64_t v41 = 0;
  BOOL v42 = 0;
  int v43 = 0;
  unint64_t v105 = (void **)((char *)this + 200);
  uint64_t v99 = (v2 >> 5);
  while (1)
  {
    uint64_t v103 = v41;
    if (v41 == *(_DWORD *)(*((void *)this + 10) + 4 * v41)) {
      break;
    }
LABEL_46:
    uint64_t v41 = v103 + 1;
    BOOL v42 = v103 + 1 >= (uint64_t)v100;
    if (v103 + 1 == v99) {
      return v42;
    }
  }
  BOOL v98 = v42;
  uint64_t v45 = (char *)*((void *)this + 26);
  unint64_t v44 = *((void *)this + 27);
  if ((unint64_t)v45 < v44)
  {
    *(_DWORD *)uint64_t v45 = v41;
    unint64_t v46 = v45 + 4;
    goto LABEL_69;
  }
  unint64_t v47 = (char *)*v105;
  uint64_t v48 = v45 - (unsigned char *)*v105;
  uint64_t v49 = v48 >> 2;
  unint64_t v50 = (v48 >> 2) + 1;
  if (v50 >> 62) {
LABEL_116:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v51 = v44 - (void)v47;
  if (v51 >> 1 > v50) {
    unint64_t v50 = v51 >> 1;
  }
  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v52 = v50;
  }
  if (v52)
  {
    if (v52 >> 62) {
LABEL_117:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v53 = operator new(4 * v52);
    long long v54 = &v53[4 * v49];
    *long long v54 = v103;
    unint64_t v46 = (char *)(v54 + 1);
    if (v45 == v47) {
      goto LABEL_67;
    }
    goto LABEL_61;
  }
  uint64_t v53 = 0;
  long long v54 = (_DWORD *)(4 * v49);
  *(_DWORD *)(4 * v49) = v41;
  unint64_t v46 = (char *)(4 * v49 + 4);
  if (v45 != v47)
  {
LABEL_61:
    unint64_t v55 = v45 - 4 - v47;
    if (v55 < 0x2C) {
      goto LABEL_120;
    }
    if ((unint64_t)(v45 - &v53[v48]) < 0x20) {
      goto LABEL_120;
    }
    uint64_t v56 = (v55 >> 2) + 1;
    uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v58 = &v45[-v57];
    long long v54 = (_DWORD *)((char *)v54 - v57);
    int v59 = &v53[4 * v49 - 16];
    unsigned int v60 = v45 - 16;
    uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *int v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 8;
    }
    while (v61);
    uint64_t v45 = v58;
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_120:
      do
      {
        int v63 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--long long v54 = v63;
      }
      while (v45 != v47);
    }
  }
LABEL_67:
  *((void *)this + 25) = v54;
  *((void *)this + 26) = v46;
  *((void *)this + 27) = &v53[4 * v52];
  if (v47) {
    operator delete(v47);
  }
LABEL_69:
  *((void *)this + 26) = v46;
  if (*((char **)this + 25) == v46) {
    goto LABEL_46;
  }
  uint64_t v64 = (uint64_t)v46;
  while (1)
  {
    int v65 = *(_DWORD *)(v64 - 4);
    v64 -= 4;
    uint64_t v66 = v65;
    uint64_t v67 = *v104;
    unint64_t v68 = (unint64_t)v65 >> 6;
    uint64_t v69 = 1 << v65;
    uint64_t v70 = *(void *)(*v104 + 8 * v68);
    if (((1 << v65) & v70) == 0) {
      break;
    }
    *((void *)this + 26) = v64;
    *(_DWORD *)(*((void *)this + 31) + 4 * v66) = v43;
LABEL_72:
    ++v43;
    unint64_t v46 = (char *)v64;
    if (*v105 == (void *)v64) {
      goto LABEL_46;
    }
  }
  uint64_t v71 = *v102;
  *(_DWORD *)(*v102 + 4 * v66) = v43;
  *(void *)(v67 + 8 * v68) = v69 | v70;
  int v72 = v66 ^ 1;
  if (((*(void *)(v67 + (((unint64_t)(int)(v66 ^ 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v66 ^ 1u)) & 1) == 0) {
    goto LABEL_82;
  }
  int v73 = *(_DWORD *)(v71 + 4 * v72);
  if (v73 < *(_DWORD *)(v71 + 4 * v103)) {
    goto LABEL_82;
  }
  if (v73 < v43)
  {
    uint64_t v74 = v66;
    do
    {
      int v75 = *(_DWORD *)(*((void *)this + 10) + 4 * v74);
      uint64_t v74 = v75;
    }
    while (*(_DWORD *)(v71 + 4 * v75) > v73);
    int v72 = v75 ^ 1;
  }
  ++*((void *)this + 9);
  if (operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*((void **)this + 2), v72))
  {
    unint64_t v46 = (char *)*((void *)this + 26);
LABEL_82:
    int v76 = *(_DWORD *)(*v101 + 4 * ((int)v66 + 1));
    uint64_t v77 = *(int *)(*v101 + 4 * v66);
    if ((int)v77 >= v76)
    {
      uint64_t v64 = (uint64_t)v46;
      goto LABEL_72;
    }
    while (2)
    {
      uint64_t v78 = *((void *)this + 19);
      unint64_t v79 = *((void *)this + 27);
      if ((unint64_t)v46 < v79)
      {
        *(_DWORD *)unint64_t v46 = *(_DWORD *)(v78 + 4 * v77);
        uint64_t v64 = (uint64_t)(v46 + 4);
      }
      else
      {
        unsigned __int8 v80 = (char *)*v105;
        uint64_t v81 = v46 - (unsigned char *)*v105;
        uint64_t v82 = v81 >> 2;
        unint64_t v83 = (v81 >> 2) + 1;
        if (v83 >> 62) {
          goto LABEL_116;
        }
        uint64_t v84 = v79 - (void)v80;
        if (v84 >> 1 > v83) {
          unint64_t v83 = v84 >> 1;
        }
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v85 = v83;
        }
        if (v85)
        {
          if (v85 >> 62) {
            goto LABEL_117;
          }
          uint64_t v86 = operator new(4 * v85);
          uint64_t v87 = &v86[4 * v82];
          _DWORD *v87 = *(_DWORD *)(v78 + 4 * v77);
          uint64_t v64 = (uint64_t)(v87 + 1);
          if (v46 == v80) {
            goto LABEL_101;
          }
        }
        else
        {
          uint64_t v86 = 0;
          uint64_t v87 = (_DWORD *)(4 * v82);
          *(_DWORD *)(4 * v82) = *(_DWORD *)(v78 + 4 * v77);
          uint64_t v64 = 4 * v82 + 4;
          if (v46 == v80) {
            goto LABEL_101;
          }
        }
        unint64_t v88 = v46 - 4 - v80;
        if (v88 >= 0xBC)
        {
          if (&v86[v81 - 4 - (v88 & 0xFFFFFFFFFFFFFFFCLL)] > &v86[v81 - 4])
          {
            uint64_t v89 = v46;
          }
          else if (&v46[-(v88 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v46 - 4)
          {
            uint64_t v89 = v46;
          }
          else if ((unint64_t)(v46 - &v86[v81]) >= 0x20)
          {
            uint64_t v91 = (v88 >> 2) + 1;
            uint64_t v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v89 = &v46[-v92];
            uint64_t v87 = (_DWORD *)((char *)v87 - v92);
            int v93 = &v86[4 * v82 - 16];
            uint64_t v94 = v46 - 16;
            uint64_t v95 = v91 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v96 = *(_OWORD *)v94;
              *(v93 - 1) = *((_OWORD *)v94 - 1);
              *int v93 = v96;
              v93 -= 2;
              v94 -= 32;
              v95 -= 8;
            }
            while (v95);
            if (v91 == (v91 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_101;
            }
          }
          else
          {
            uint64_t v89 = v46;
          }
        }
        else
        {
          uint64_t v89 = v46;
        }
        do
        {
          int v90 = *((_DWORD *)v89 - 1);
          v89 -= 4;
          *--uint64_t v87 = v90;
        }
        while (v89 != v80);
LABEL_101:
        *((void *)this + 25) = v87;
        *((void *)this + 26) = v64;
        *((void *)this + 27) = &v86[4 * v85];
        if (v80) {
          operator delete(v80);
        }
      }
      *((void *)this + 26) = v64;
      ++v77;
      unint64_t v46 = (char *)v64;
      if (v76 == v77) {
        goto LABEL_72;
      }
      continue;
    }
  }
  return v98;
}

uint64_t operations_research::sat::StampingSimplifier::ProcessClauses(operations_research::sat::LiteralWatchers **this)
{
  long long v155 = 0;
  uint64_t v156 = 0;
  uint64_t v157 = 0;
  long long __p = 0;
  int v153 = 0;
  uint64_t v154 = 0;
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(this[2]);
  operations_research::sat::LiteralWatchers::DetachAllClauses(this[2]);
  unint64_t v3 = this[2];
  unsigned int v136 = 1;
  uint64_t v137 = (int **)*((void *)v3 + 39);
  if (*((int ***)v3 + 38) != v137)
  {
    uint64_t v4 = 0;
    uint64_t v150 = 0;
    int v5 = 0;
    uint64_t v6 = (int **)*((void *)v3 + 38);
    while (1)
    {
      uint64_t v149 = (uint64_t)(*v6 + 1);
      if (!**v6) {
        goto LABEL_4;
      }
      int v141 = v5;
      signed __int32 v144 = v1;
      uint64_t v139 = v6;
      int v140 = *v6;
      uint64_t v7 = 0;
      unint64_t v138 = **v6;
      uint64_t v8 = **v6;
      uint64_t v9 = v4;
      uint64_t v10 = (uint64_t)(*v6 + 1);
      while (1)
      {
        int v11 = *(_DWORD *)(v10 + 4 * v7);
        unint64_t v12 = *(void *)(*((void *)*this + 1) + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if ((v12 >> v11)) {
          break;
        }
        if ((v12 >> (v11 & 0x3F ^ 1u))) {
          goto LABEL_8;
        }
        uint64_t v13 = 4 * v11;
        unsigned __int32 v14 = *(_DWORD *)((char *)this[28] + v13);
        unsigned __int32 v15 = *(_DWORD *)((char *)this[31] + v13);
        if (v9 >= v150)
        {
          uint64_t v17 = v9 - v4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v150 - (char *)v4) >> 3 > v18) {
            unint64_t v18 = ((char *)v150 - (char *)v4) >> 3;
          }
          if ((unint64_t)((char *)v150 - (char *)v4) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19)
          {
            if (v19 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v20 = (char *)operator new(16 * v19);
            uint64_t v21 = (uint64_t)&v20[16 * v17];
            *(_DWORD *)uint64_t v21 = v7;
            *(unsigned char *)(v21 + 4) = 0;
            *(_DWORD *)(v21 + 8) = v14;
            *(_DWORD *)(v21 + 12) = v15;
            if (v9 != v4)
            {
LABEL_22:
              uint64_t v22 = v21;
              do
              {
                uint64_t v23 = (__n128 *)(v22 - 16);
                *(__n128 *)(v22 - 16) = v9[-1];
                --v9;
                v22 -= 16;
              }
              while (v9 != v4);
              uint64_t v150 = (__n128 *)&v20[16 * v19];
              uint64_t v16 = (__n128 *)(v21 + 16);
              if (v4) {
LABEL_25:
              }
                operator delete(v4);
LABEL_26:
              uint64_t v4 = v23;
              uint64_t v10 = v149;
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v20 = 0;
            uint64_t v21 = 16 * v17;
            *(_DWORD *)uint64_t v21 = v7;
            *(unsigned char *)(v21 + 4) = 0;
            *(_DWORD *)(v21 + 8) = v14;
            *(_DWORD *)(v21 + 12) = v15;
            if (v9 != v4) {
              goto LABEL_22;
            }
          }
          uint64_t v23 = (__n128 *)v21;
          uint64_t v150 = (__n128 *)&v20[16 * v19];
          uint64_t v16 = (__n128 *)(v21 + 16);
          if (v4) {
            goto LABEL_25;
          }
          goto LABEL_26;
        }
        v9->n128_u32[0] = v7;
        v9->n128_u8[4] = 0;
        uint64_t v16 = v9 + 1;
        v9->n128_u32[2] = v14;
        v9->n128_u32[3] = v15;
LABEL_27:
        uint64_t v24 = 4 * (*(int *)(v10 + 4 * v7) ^ 1);
        unsigned __int32 v25 = *(_DWORD *)((char *)this[28] + v24);
        unsigned __int32 v26 = *(_DWORD *)((char *)this[31] + v24);
        if (v16 >= v150)
        {
          uint64_t v27 = v16 - v4;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v150 - (char *)v4) >> 3 > v28) {
            unint64_t v28 = ((char *)v150 - (char *)v4) >> 3;
          }
          if ((unint64_t)((char *)v150 - (char *)v4) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29)
          {
            if (v29 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v30 = (char *)operator new(16 * v29);
          }
          else
          {
            uint64_t v30 = 0;
          }
          unint64_t v31 = (__n128 *)&v30[16 * v27];
          v31->n128_u32[0] = v7;
          v31->n128_u8[4] = 1;
          uint64_t v150 = (__n128 *)&v30[16 * v29];
          v31->n128_u32[2] = v25;
          v31->n128_u32[3] = v26;
          uint64_t v9 = v31 + 1;
          if (v16 == v4)
          {
            uint64_t v10 = v149;
          }
          else
          {
            uint64_t v10 = v149;
            do
            {
              v31[-1] = v16[-1];
              --v31;
              --v16;
            }
            while (v16 != v4);
            if (!v4) {
              goto LABEL_48;
            }
          }
          operator delete(v4);
LABEL_48:
          uint64_t v4 = v31;
          goto LABEL_8;
        }
        v16->n128_u32[0] = v7;
        v16->n128_u8[4] = 1;
        uint64_t v9 = v16 + 1;
        v16->n128_u32[2] = v25;
        v16->n128_u32[3] = v26;
LABEL_8:
        if (++v7 == v8) {
          goto LABEL_50;
        }
      }
      operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)this[2], v140);
LABEL_50:
      int32x4_t v32 = v140;
      if (!*v140)
      {
        uint64_t v6 = v139;
        int v5 = v141;
        signed __int32 v1 = v144;
        goto LABEL_4;
      }
      int v5 = v141;
      signed __int32 v1 = v144;
      if (v4 == v9)
      {
        uint64_t v156 = (char *)v155;
        goto LABEL_137;
      }
      unint64_t v33 = v9 - v4;
      v34.n128_f64[0] = *((double *)this + 6) + (double)v33 * 0.000000015 * log((double)v33);
      this[6] = (operations_research::sat::LiteralWatchers *)v34.n128_u64[0];
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *,false>(v4, v9, 126 - 2 * __clz(v33), 1, v34);
      uint64_t v156 = (char *)v155;
      int v35 = -1;
      int v36 = v4;
      while (2)
      {
        if ((signed __int32)v36->n128_u32[3] >= v35)
        {
          signed __int32 v1 = v36->n128_u32[0];
          int v5 = v36->n128_u8[4];
          int v35 = v36->n128_i32[3];
          goto LABEL_54;
        }
        if (v5 == v36->n128_u8[4])
        {
          unsigned __int32 v37 = v36->n128_u32[0];
          signed __int32 v151 = v1;
          unsigned __int32 v158 = v37;
          if (v1 == v37) {
            google::MakeCheckOpString<int,int>((int)&v151, (int)&v158, "top_entry.i != e.i");
          }
          unint64_t v38 = (signed __int32 *)v156;
          if (v5)
          {
            if (v156 < v157)
            {
              *(_DWORD *)uint64_t v156 = v36->n128_u32[0];
              uint64_t v156 = (char *)(v38 + 1);
              goto LABEL_54;
            }
            int v142 = v5;
            int v146 = v35;
            BOOL v42 = (signed __int32 *)v155;
            int64_t v43 = v156 - (unsigned char *)v155;
            uint64_t v44 = (v156 - (unsigned char *)v155) >> 2;
            unint64_t v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62) {
              goto LABEL_208;
            }
            uint64_t v46 = v157 - (unsigned char *)v155;
            if ((v157 - (unsigned char *)v155) >> 1 > v45) {
              unint64_t v45 = v46 >> 1;
            }
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v47 = v45;
            }
            if (v47)
            {
              if (v47 >> 62) {
                goto LABEL_209;
              }
              unint64_t v48 = v47;
              uint64_t v49 = operator new(4 * v47);
              unint64_t v47 = v48;
              unint64_t v50 = &v49[4 * v44];
              *unint64_t v50 = v36->n128_u32[0];
              uint64_t v51 = (uint64_t)(v50 + 1);
              if (v38 != v42)
              {
LABEL_79:
                unint64_t v52 = (char *)(v38 - 1) - (char *)v42;
                if (v52 < 0x2C)
                {
                  int v35 = v146;
                  goto LABEL_108;
                }
                unint64_t v72 = (char *)v38 - &v49[v43];
                int v35 = v146;
                if (v72 < 0x20) {
                  goto LABEL_214;
                }
                uint64_t v73 = (v52 >> 2) + 1;
                uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                int v75 = &v38[v74 / 0xFFFFFFFFFFFFFFFCLL];
                unint64_t v50 = (_DWORD *)((char *)v50 - v74);
                int v76 = &v49[4 * v44 - 16];
                uint64_t v77 = (long long *)(v38 - 4);
                uint64_t v78 = v73 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v79 = *v77;
                  *(v76 - 1) = *(v77 - 1);
                  *int v76 = v79;
                  v76 -= 2;
                  v77 -= 2;
                  v78 -= 8;
                }
                while (v78);
                unint64_t v38 = v75;
                if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_214:
                  do
                  {
LABEL_108:
                    int v80 = *--v38;
                    *--unint64_t v50 = v80;
                  }
                  while (v38 != v42);
                }
LABEL_109:
                long long v155 = v50;
                uint64_t v156 = (char *)v51;
                uint64_t v157 = &v49[4 * v47];
                if (v42) {
                  operator delete(v42);
                }
                int v5 = v142;
                uint64_t v156 = (char *)v51;
LABEL_54:
                if (++v36 == v9)
                {
                  int32x4_t v32 = v140;
                  goto LABEL_137;
                }
                continue;
              }
            }
            else
            {
              uint64_t v49 = 0;
              unint64_t v50 = (_DWORD *)(4 * v44);
              *(_DWORD *)(4 * v44) = v36->n128_u32[0];
              uint64_t v51 = 4 * v44 + 4;
              if (v38 != v42) {
                goto LABEL_79;
              }
            }
            int v35 = v146;
            goto LABEL_109;
          }
          if (v156 < v157)
          {
LABEL_69:
            *unint64_t v38 = v1;
            uint64_t v41 = (uint64_t)(v38 + 1);
LABEL_131:
            int v5 = 0;
            uint64_t v156 = (char *)v41;
            goto LABEL_54;
          }
          int v147 = v35;
          long long v62 = (signed __int32 *)v155;
          int64_t v63 = v156 - (unsigned char *)v155;
          uint64_t v64 = (v156 - (unsigned char *)v155) >> 2;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62) {
LABEL_208:
          }
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          uint64_t v66 = v157 - (unsigned char *)v155;
          if ((v157 - (unsigned char *)v155) >> 1 > v65) {
            unint64_t v65 = v66 >> 1;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            if (v67 >> 62) {
LABEL_209:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            unint64_t v68 = v67;
            uint64_t v69 = operator new(4 * v67);
            unint64_t v67 = v68;
            uint64_t v70 = (signed __int32 *)&v69[4 * v64];
            *uint64_t v70 = v1;
            uint64_t v41 = (uint64_t)(v70 + 1);
            if (v38 != v62)
            {
LABEL_100:
              unint64_t v71 = (char *)(v38 - 1) - (char *)v62;
              if (v71 < 0x2C)
              {
                int v35 = v147;
                goto LABEL_128;
              }
              unint64_t v90 = (char *)v38 - &v69[v63];
              int v35 = v147;
              if (v90 < 0x20) {
                goto LABEL_215;
              }
              uint64_t v91 = (v71 >> 2) + 1;
              uint64_t v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
              int v93 = &v38[v92 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v70 = (signed __int32 *)((char *)v70 - v92);
              uint64_t v94 = &v69[4 * v64 - 16];
              uint64_t v95 = (long long *)(v38 - 4);
              uint64_t v96 = v91 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v97 = *v95;
                *(v94 - 1) = *(v95 - 1);
                *uint64_t v94 = v97;
                v94 -= 2;
                v95 -= 2;
                v96 -= 8;
              }
              while (v96);
              unint64_t v38 = v93;
              if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_215:
                do
                {
LABEL_128:
                  int v98 = *--v38;
                  *--uint64_t v70 = v98;
                }
                while (v38 != v62);
              }
LABEL_129:
              long long v155 = v70;
              uint64_t v156 = (char *)v41;
              uint64_t v157 = &v69[4 * v67];
              if (v62) {
                operator delete(v62);
              }
              goto LABEL_131;
            }
          }
          else
          {
            uint64_t v69 = 0;
            uint64_t v70 = (signed __int32 *)(4 * v64);
            *(_DWORD *)(4 * v64) = v1;
            uint64_t v41 = 4 * v64 + 4;
            if (v38 != v62) {
              goto LABEL_100;
            }
          }
          int v35 = v147;
          goto LABEL_129;
        }
        break;
      }
      if (v1 != v36->n128_u32[0])
      {
        if (v5) {
          goto LABEL_136;
        }
        goto LABEL_54;
      }
      this[9] = (operations_research::sat::LiteralWatchers *)((char *)this[9] + 1);
      uint64_t v39 = this[2];
      int v40 = *(_DWORD *)(v149 + 4 * v1);
      if (!v5)
      {
        signed __int32 v145 = v1;
        if (!operations_research::sat::LiteralWatchers::InprocessingFixLiteral(v39, v40 ^ 1)) {
          goto LABEL_195;
        }
        unint64_t v38 = (signed __int32 *)v156;
        if (v156 < v157) {
          goto LABEL_69;
        }
        uint64_t v53 = (signed __int32 *)v155;
        int64_t v54 = v156 - (unsigned char *)v155;
        uint64_t v55 = (v156 - (unsigned char *)v155) >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
          goto LABEL_208;
        }
        uint64_t v57 = v157 - (unsigned char *)v155;
        if ((v157 - (unsigned char *)v155) >> 1 > v56) {
          unint64_t v56 = v57 >> 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          if (v58 >> 62) {
            goto LABEL_209;
          }
          unint64_t v59 = v58;
          unsigned int v60 = operator new(4 * v58);
          unint64_t v58 = v59;
          uint64_t v61 = (signed __int32 *)&v60[4 * v55];
          *uint64_t v61 = v145;
          uint64_t v41 = (uint64_t)(v61 + 1);
          if (v38 == v53) {
            goto LABEL_119;
          }
LABEL_113:
          unint64_t v81 = (char *)(v38 - 1) - (char *)v53;
          if (v81 < 0x2C) {
            goto LABEL_216;
          }
          if ((unint64_t)((char *)v38 - &v60[v54]) < 0x20) {
            goto LABEL_216;
          }
          uint64_t v82 = (v81 >> 2) + 1;
          uint64_t v83 = 4 * (v82 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v84 = &v38[v83 / 0xFFFFFFFFFFFFFFFCLL];
          uint64_t v61 = (signed __int32 *)((char *)v61 - v83);
          unint64_t v85 = &v60[4 * v55 - 16];
          uint64_t v86 = (long long *)(v38 - 4);
          uint64_t v87 = v82 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v88 = *v86;
            *(v85 - 1) = *(v86 - 1);
            _OWORD *v85 = v88;
            v85 -= 2;
            v86 -= 2;
            v87 -= 8;
          }
          while (v87);
          unint64_t v38 = v84;
          if (v82 != (v82 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_216:
            do
            {
              int v89 = *--v38;
              *--uint64_t v61 = v89;
            }
            while (v38 != v53);
          }
        }
        else
        {
          unsigned int v60 = 0;
          uint64_t v61 = (signed __int32 *)(4 * v55);
          *(_DWORD *)(4 * v55) = v145;
          uint64_t v41 = 4 * v55 + 4;
          if (v38 != v53) {
            goto LABEL_113;
          }
        }
LABEL_119:
        long long v155 = v61;
        uint64_t v156 = (char *)v41;
        uint64_t v157 = &v60[4 * v58];
        if (v53) {
          operator delete(v53);
        }
        signed __int32 v1 = v145;
        goto LABEL_131;
      }
      if (!operations_research::sat::LiteralWatchers::InprocessingFixLiteral(v39, v40)) {
        goto LABEL_195;
      }
LABEL_136:
      this[7] = (operations_research::sat::LiteralWatchers *)((char *)this[7] + 1);
      int32x4_t v32 = v140;
      operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)this[2], v140);
LABEL_137:
      if (!*v32 || v155 == v156 && v138 <= v9 - v4)
      {
        uint64_t v6 = v139;
        goto LABEL_4;
      }
      uint64_t v148 = (char *)__p;
      int v153 = __p;
      std::__sort<std::__less<int,int> &,int *>();
      uint64_t v99 = v156;
      if (v155 == v156)
      {
LABEL_150:
        int v143 = v5;
      }
      else
      {
        std::vector<int>::size_type v100 = (char *)v155 + 4;
        do
        {
          if (v100 == v156) {
            goto LABEL_150;
          }
          int v101 = *((_DWORD *)v100 - 1);
          int v102 = *(_DWORD *)v100;
          v100 += 4;
        }
        while (v101 != v102);
        uint64_t v103 = v100 - 8;
        while (v100 != v99)
        {
          int v104 = v101;
          int v101 = *(_DWORD *)v100;
          if (v104 != *(_DWORD *)v100)
          {
            *((_DWORD *)v103 + 1) = v101;
            v103 += 4;
          }
          v100 += 4;
        }
        unint64_t v105 = v103 + 4;
        int v143 = v5;
        int64_t v106 = v99 - (v103 + 4);
        if (v99 != v103 + 4)
        {
          if (v99 != &v105[v106]) {
            memmove(v103 + 4, &v105[v106], 0);
          }
          uint64_t v156 = v105;
        }
      }
      uint64_t v107 = 0;
      int v108 = 0;
      if (v138 <= 1) {
        uint64_t v109 = 1;
      }
      else {
        uint64_t v109 = v138;
      }
      while (2)
      {
        if (v108 < (unint64_t)((v156 - (unsigned char *)v155) >> 2) && v107 == *((_DWORD *)v155 + v108))
        {
          ++v108;
          goto LABEL_160;
        }
        int v110 = *(_DWORD *)(v149 + 4 * v107);
        unint64_t v111 = *(void *)(*((void *)*this + 1) + (((unint64_t)v110 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if ((v111 >> v110))
        {
          operations_research::sat::LiteralWatchers::InprocessingRemoveClause((uint64_t)this[2], v32);
          goto LABEL_160;
        }
        if (((v111 >> (v110 & 0x3F ^ 1u)) & 1) == 0)
        {
          if (v148 < v154)
          {
            *(_DWORD *)uint64_t v148 = v110;
            uint64_t v112 = (uint64_t)(v148 + 4);
            goto LABEL_183;
          }
          uint64_t v113 = (char *)__p;
          int64_t v114 = v148 - (unsigned char *)__p;
          uint64_t v115 = (v148 - (unsigned char *)__p) >> 2;
          unint64_t v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v117 = v154 - (unsigned char *)__p;
          if ((v154 - (unsigned char *)__p) >> 1 > v116) {
            unint64_t v116 = v117 >> 1;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v118 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            if (v118 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v119 = v118;
            unint64_t v120 = (char *)operator new(4 * v118);
            uint64_t v121 = v148;
            unint64_t v118 = v119;
            uint64_t v122 = &v120[4 * v115];
            *(_DWORD *)uint64_t v122 = *(_DWORD *)(v149 + 4 * v107);
            uint64_t v112 = (uint64_t)(v122 + 4);
            if (v148 == v113) {
              goto LABEL_181;
            }
LABEL_178:
            unint64_t v123 = v121 - 4 - v113;
            if (v123 < 0xBC)
            {
              uint64_t v124 = v121;
              goto LABEL_180;
            }
            if (&v120[v114 - 4 - (v123 & 0xFFFFFFFFFFFFFFFCLL)] > &v120[v114 - 4])
            {
              uint64_t v124 = v148;
              goto LABEL_180;
            }
            if (&v121[-(v123 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v121 - 4)
            {
              uint64_t v124 = v148;
              goto LABEL_180;
            }
            if ((unint64_t)(v121 - v120 - v114) < 0x20)
            {
              uint64_t v124 = v148;
              goto LABEL_180;
            }
            uint64_t v126 = (v123 >> 2) + 1;
            uint64_t v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v124 = &v148[-v127];
            v122 -= v127;
            double v128 = &v120[4 * v115 - 16];
            unint64_t v129 = v148 - 16;
            uint64_t v130 = v126 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v131 = *(_OWORD *)v129;
              *((_OWORD *)v128 - 1) = *((_OWORD *)v129 - 1);
              *(_OWORD *)double v128 = v131;
              v128 -= 32;
              v129 -= 32;
              v130 -= 8;
            }
            while (v130);
            if (v126 != (v126 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_180:
                int v125 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *((_DWORD *)v122 - 1) = v125;
                v122 -= 4;
              }
              while (v124 != v113);
            }
          }
          else
          {
            unint64_t v120 = 0;
            uint64_t v122 = (char *)(4 * v115);
            *(_DWORD *)(4 * v115) = v110;
            uint64_t v112 = 4 * v115 + 4;
            uint64_t v121 = v148;
            if (v148 != v113) {
              goto LABEL_178;
            }
          }
LABEL_181:
          long long __p = v122;
          uint64_t v154 = &v120[4 * v118];
          if (v113) {
            operator delete(v113);
          }
LABEL_183:
          int v153 = (unsigned char *)v112;
          uint64_t v148 = (char *)v112;
          int32x4_t v32 = v140;
        }
LABEL_160:
        if (++v107 != v109) {
          continue;
        }
        break;
      }
      uint64_t v132 = (int *)__p;
      uint64_t v133 = (v153 - (unsigned char *)__p) >> 2;
      this[8] = (operations_research::sat::LiteralWatchers *)((char *)this[8] + v138 - v133);
      BOOL v134 = operations_research::sat::LiteralWatchers::InprocessingRewriteClause((uint64_t)this[2], v32, v132, v133);
      uint64_t v6 = v139;
      int v5 = v143;
      if (!v134)
      {
LABEL_195:
        unsigned int v136 = 0;
        if (!v4) {
          break;
        }
LABEL_198:
        operator delete(v4);
        break;
      }
LABEL_4:
      if (++v6 == v137)
      {
        unsigned int v136 = 1;
        if (!v4) {
          break;
        }
        goto LABEL_198;
      }
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (v155)
  {
    uint64_t v156 = (char *)v155;
    operator delete(v155);
  }
  return v136;
}

void sub_23CD6C9E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD6C9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (v25)
  {
    operator delete(v25);
    uint64_t v27 = __p;
    if (!__p)
    {
LABEL_3:
      unint64_t v28 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v27 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v27);
  unint64_t v28 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void operations_research::sat::BlockedClauseSimplifier::InitializeForNewRound(operations_research::sat::BlockedClauseSimplifier *this)
{
  unint64_t v2 = (void **)((char *)this + 160);
  *((void *)this + 21) = *((void *)this + 20);
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)this
                                                                  + 2));
  operations_research::sat::LiteralWatchers::DetachAllClauses((operations_research::sat::LiteralWatchers *)*(v2 - 18));
  uint64_t v3 = (uint64_t)*(v2 - 18);
  uint64_t v4 = *(uint64_t **)(v3 + 304);
  int v5 = *(uint64_t **)(v3 + 312);
  if (v4 != v5)
  {
    do
    {
      uint64_t v10 = 0;
      uint64_t v12 = *v4;
      uint64_t v75 = v12;
      uint64_t v13 = (void *)*((void *)this + 2);
      unint64_t v14 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v12)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v12)))
          + v12;
      unint64_t v15 = ((v14 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v14);
      unint64_t v16 = v13[42];
      uint64_t v17 = v13[43];
      unint64_t v11 = (v15 >> 7) ^ (v16 >> 12);
      uint64_t v18 = v13[45];
      uint64_t v19 = 0x101010101010101 * (v15 & 0x7F);
      while (1)
      {
        uint64_t v6 = v11 & v18;
        uint64_t v7 = *(void *)(v16 + v6);
        unint64_t v8 = ((v7 ^ v19) - 0x101010101010101) & ~(v7 ^ v19) & 0x8080808080808080;
        if (v8) {
          break;
        }
LABEL_6:
        if ((v7 & (~v7 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_9;
        }
        v10 += 8;
        unint64_t v11 = v10 + v6;
      }
      while (1)
      {
        unint64_t v9 = (v6 + (__clz(__rbit64(v8)) >> 3)) & v18;
        if (*(void *)(v17 + 24 * v9) == v12) {
          break;
        }
        v8 &= v8 - 1;
        if (!v8) {
          goto LABEL_6;
        }
      }
      if (v9 == v18) {
LABEL_9:
      }
        gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back(v2, &v75);
      ++v4;
    }
    while (v4 != v5);
    uint64_t v3 = *((void *)this + 2);
  }
  unint64_t v20 = *(int *)(v3 + 88);
  char v74 = 1;
  std::vector<BOOL>::assign((char **)this + 11, v20, &v74);
  if ((int)v20 >= 1)
  {
    int v21 = 0;
    uint64_t v22 = *((void *)this + 15);
    uint64_t v23 = *((void *)this + 16);
    uint64_t v24 = *((void *)this + 18);
    uint64_t v25 = *((void *)this + 19);
    do
    {
      if (v23 == v22) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = ((v23 - v22) << 7) - 1;
      }
      unint64_t v27 = v25 + v24;
      if (v26 == v25 + v24)
      {
        std::deque<operations_research::sat::Literal>::__add_back_capacity((uint64_t)this + 112);
        uint64_t v22 = *((void *)this + 15);
        uint64_t v23 = *((void *)this + 16);
        uint64_t v24 = *((void *)this + 18);
        uint64_t v25 = *((void *)this + 19);
        unint64_t v27 = v24 + v25;
      }
      *(_DWORD *)(*(void *)(v22 + ((v27 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v27 & 0x3FF)) = v21;
      *((void *)this + 19) = ++v25;
      ++v21;
    }
    while (v20 != v21);
  }
  std::vector<BOOL>::resize((uint64_t)this + 64, v20, 0);
  uint64_t v29 = *((void *)this + 23);
  uint64_t v28 = *((void *)this + 24);
  uint64_t v30 = (uint64_t *)((char *)this + 184);
  if (v28 != v29)
  {
    uint64_t v31 = *((void *)this + 24);
    do
    {
      unint64_t v33 = *(void **)(v31 - 24);
      v31 -= 24;
      int32x4_t v32 = v33;
      if (v33)
      {
        *(void *)(v28 - 16) = v32;
        operator delete(v32);
      }
      uint64_t v28 = v31;
    }
    while (v31 != v29);
    uint64_t v28 = *v30;
  }
  *((void *)this + 24) = v29;
  unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
  if (v20 <= v34)
  {
    if (v20 < v34)
    {
      uint64_t v35 = v28 + 24 * (int)v20;
      if (v29 != v35)
      {
        uint64_t v36 = v29;
        do
        {
          unint64_t v38 = *(void **)(v36 - 24);
          v36 -= 24;
          unsigned __int32 v37 = v38;
          if (v38)
          {
            *(void *)(v29 - 16) = v37;
            operator delete(v37);
          }
          uint64_t v29 = v36;
        }
        while (v36 != v35);
      }
      *((void *)this + 24) = v35;
    }
  }
  else
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 184, v20 - v34);
  }
  uint64_t v39 = *((void *)this + 20);
  uint64_t v40 = *((void *)this + 21);
  if ((int)((unint64_t)(v40 - v39) >> 3) >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v70 = this;
    unint64_t v71 = (char *)this + 184;
    do
    {
      int64_t v43 = *(int **)(v39 + 8 * v41);
      uint64_t v46 = *v43;
      unint64_t v45 = v43 + 1;
      uint64_t v44 = v46;
      if (!v46)
      {
        BOOL v42 = v70;
        goto LABEL_39;
      }
      unint64_t v47 = &v45[v44];
      unint64_t v72 = v47;
      uint64_t v73 = v41;
      do
      {
        while (1)
        {
          uint64_t v48 = *v30 + 24 * *v45;
          uint64_t v49 = (uint64_t *)(v48 + 8);
          unint64_t v50 = *(char **)(v48 + 8);
          unint64_t v51 = *(void *)(v48 + 16);
          if ((unint64_t)v50 >= v51) {
            break;
          }
          *(_DWORD *)unint64_t v50 = v41;
          *uint64_t v49 = (uint64_t)(v50 + 4);
          if (++v45 == v47) {
            goto LABEL_64;
          }
        }
        unint64_t v52 = *(char **)v48;
        uint64_t v53 = (uint64_t)&v50[-*(void *)v48];
        uint64_t v54 = v53 >> 2;
        unint64_t v55 = (v53 >> 2) + 1;
        if (v55 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v51 - (void)v52;
        if (v56 >> 1 > v55) {
          unint64_t v55 = v56 >> 1;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (!v57)
        {
          unint64_t v58 = 0;
          unint64_t v59 = (_DWORD *)(4 * v54);
          *(_DWORD *)(4 * v54) = v41;
          uint64_t v60 = 4 * v54 + 4;
          if (v50 == v52) {
            goto LABEL_61;
          }
LABEL_55:
          unint64_t v61 = v50 - 4 - v52;
          if (v61 < 0x2C) {
            goto LABEL_70;
          }
          if ((unint64_t)(v50 - &v58[v53]) < 0x20) {
            goto LABEL_70;
          }
          uint64_t v62 = (v61 >> 2) + 1;
          uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v64 = &v50[-v63];
          unint64_t v59 = (_DWORD *)((char *)v59 - v63);
          unint64_t v65 = &v58[4 * v54 - 16];
          uint64_t v66 = v50 - 16;
          uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v68 = *(_OWORD *)v66;
            *(v65 - 1) = *((_OWORD *)v66 - 1);
            *unint64_t v65 = v68;
            v65 -= 2;
            v66 -= 32;
            v67 -= 8;
          }
          while (v67);
          unint64_t v50 = v64;
          if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_70:
            do
            {
              int v69 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *--unint64_t v59 = v69;
            }
            while (v50 != v52);
          }
          goto LABEL_61;
        }
        if (v57 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v58 = operator new(4 * v57);
        uint64_t v41 = v73;
        unint64_t v59 = &v58[4 * v54];
        *unint64_t v59 = v73;
        uint64_t v60 = (uint64_t)(v59 + 1);
        if (v50 != v52) {
          goto LABEL_55;
        }
LABEL_61:
        *(void *)uint64_t v48 = v59;
        *uint64_t v49 = v60;
        *(void *)(v48 + 16) = &v58[4 * v57];
        if (v52)
        {
          operator delete(v52);
          uint64_t v41 = v73;
        }
        uint64_t v30 = (uint64_t *)v71;
        unint64_t v47 = v72;
        *uint64_t v49 = v60;
        ++v45;
      }
      while (v45 != v72);
LABEL_64:
      BOOL v42 = v70;
      uint64_t v39 = *((void *)v70 + 20);
      uint64_t v40 = *((void *)v70 + 21);
      LODWORD(v44) = **(_DWORD **)(v39 + 8 * v41);
LABEL_39:
      *((void *)v42 + 7) += (int)v44;
      ++v41;
    }
    while (v41 < (int)((unint64_t)(v40 - v39) >> 3));
  }
}

void operations_research::sat::BlockedClauseSimplifier::ProcessLiteral(uint64_t a1, int a2)
{
  unint64_t v3 = ((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  if (((*(void *)(*(void *)(*(void *)a1 + 8) + v3) >> (a2 & 0x3E)) & 3) == 0)
  {
    int v5 = *(void **)(a1 + 8);
    if (((*(void *)(v5[83] + v3) >> a2) & 1) == 0)
    {
      uint64_t v6 = operations_research::sat::BinaryImplicationGraph::DirectImplications(v5, a2);
      uint64_t v7 = (int *)*v6;
      unint64_t v8 = (int *)v6[1];
      if (*v6 == v8)
      {
        int v9 = 0;
      }
      else
      {
        int v9 = 0;
        uint64_t v10 = (int *)*v6;
        do
        {
          unint64_t v11 = *v10;
          if (v11 != a2)
          {
            ++v9;
            *(void *)(*(void *)(a1 + 64) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v10;
          }
          ++v10;
        }
        while (v10 != v8);
      }
      long long v88 = 0;
      uint64_t v12 = *(void *)(a1 + 184) + 24 * a2;
      unint64_t v14 = *(int **)v12;
      uint64_t v13 = *(int **)(v12 + 8);
      if (*(int **)v12 != v13)
      {
        unint64_t v85 = v6;
        uint64_t v87 = *(int **)(v12 + 8);
        unint64_t v15 = 0;
        unint64_t v16 = 0;
        uint64_t v17 = 0;
        while (1)
        {
          uint64_t v18 = *v14;
          uint64_t v19 = *(int **)(*(void *)(a1 + 160) + 8 * v18);
          uint64_t v20 = *v19;
          if (!v20) {
            goto LABEL_12;
          }
          if (v9 >= 1)
          {
            if ((int)v20 <= v9) {
              goto LABEL_12;
            }
            int v21 = 0;
            uint64_t v22 = v19 + 1;
            uint64_t v23 = 4 * v20;
            do
            {
              unint64_t v24 = *v22;
              if (v24 != a2) {
                v21 += (*(void *)(*(void *)(a1 + 64) + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v24 & 0x3F ^ 1)) & 1;
              }
              ++v22;
              v23 -= 4;
            }
            while (v23);
            *(void *)(a1 + 56) += v20;
            if (v21 < v9) {
              goto LABEL_12;
            }
          }
          if (v15 >= v16) {
            break;
          }
          *(_DWORD *)unint64_t v15 = v18;
          v15 += 4;
LABEL_12:
          if (++v14 == v13)
          {
            uint64_t v7 = (int *)*v85;
            unint64_t v8 = (int *)v85[1];
            if (*v85 == v8) {
              goto LABEL_54;
            }
            goto LABEL_52;
          }
        }
        int64_t v25 = v15 - v17;
        uint64_t v26 = (v15 - v17) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if ((v16 - v17) >> 1 > v27) {
          unint64_t v27 = (v16 - v17) >> 1;
        }
        if ((unint64_t)(v16 - v17) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28)
        {
          if (v28 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v29 = v28;
          uint64_t v30 = (char *)operator new(4 * v28);
          uint64_t v31 = v15;
          unint64_t v28 = v29;
          int32x4_t v32 = &v30[4 * v26];
          *(_DWORD *)int32x4_t v32 = v18;
          unint64_t v15 = v32 + 4;
          if (v31 == v17) {
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v31 = v15;
          uint64_t v30 = 0;
          int32x4_t v32 = (char *)(4 * v26);
          *(_DWORD *)(4 * v26) = v18;
          unint64_t v15 = (char *)(4 * v26 + 4);
          if (v31 == v17) {
            goto LABEL_36;
          }
        }
        unint64_t v33 = v31;
        unint64_t v34 = v31 - 4;
        unint64_t v35 = v31 - 4 - v17;
        if (v35 >= 0xBC)
        {
          if (&v30[v25 - 4 - (v35 & 0xFFFFFFFFFFFFFFFCLL)] > &v30[v25 - 4])
          {
            uint64_t v36 = v33;
          }
          else if (&v34[-(v35 & 0xFFFFFFFFFFFFFFFCLL)] > v34)
          {
            uint64_t v36 = v33;
          }
          else if ((unint64_t)(v34 - &v30[v25] + 4) >= 0x20)
          {
            uint64_t v39 = (v35 >> 2) + 1;
            uint64_t v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v36 = &v33[-v40];
            v32 -= v40;
            uint64_t v41 = &v30[4 * v26 - 16];
            BOOL v42 = v33 - 16;
            uint64_t v43 = v39 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v44 = *(_OWORD *)v42;
              *((_OWORD *)v41 - 1) = *((_OWORD *)v42 - 1);
              *(_OWORD *)uint64_t v41 = v44;
              v41 -= 32;
              v42 -= 32;
              v43 -= 8;
            }
            while (v43);
            if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v36 = v33;
          }
        }
        else
        {
          uint64_t v36 = v33;
        }
        do
        {
          int v37 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v32 - 1) = v37;
          v32 -= 4;
        }
        while (v36 != v17);
LABEL_36:
        unint64_t v16 = &v30[4 * v28];
        long long v88 = v32;
        if (v17)
        {
          unint64_t v38 = &v30[4 * v28];
          operator delete(v17);
          unint64_t v16 = v38;
        }
        uint64_t v17 = v32;
        uint64_t v13 = v87;
        goto LABEL_12;
      }
      unint64_t v15 = 0;
      if (v7 == v8) {
        goto LABEL_54;
      }
LABEL_52:
      uint64_t v45 = *(void *)(a1 + 64);
      do
      {
        int v46 = *v7++;
        *(void *)(v45 + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
      }
      while (v7 != v8);
LABEL_54:
      if (v88 != v15)
      {
        int v47 = a2 ^ 1;
        uint64_t v86 = v15;
        for (std::vector<int>::pointer i = v88; i != v15; i += 4)
        {
          uint64_t v49 = *(int *)i;
          uint64_t v50 = *(void *)(a1 + 160);
          unint64_t v51 = *(int **)(v50 + 8 * v49);
          uint64_t v54 = *v51;
          unint64_t v52 = (char *)(v51 + 1);
          uint64_t v53 = v54;
          uint64_t v55 = 4 * v54;
          if (v54)
          {
            uint64_t v56 = *(void *)(a1 + 64);
            uint64_t v57 = v55;
            unint64_t v58 = v52;
            do
            {
              int v59 = *(_DWORD *)v58;
              v58 += 4;
              *(void *)(v56 + (((unint64_t)v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
              v57 -= 4;
            }
            while (v57);
          }
          uint64_t v60 = *(void *)(a1 + 184) + 24 * v47;
          unint64_t v61 = *(int **)v60;
          uint64_t v62 = *(int **)(v60 + 8);
          if (v61 == v62)
          {
LABEL_68:
            if (!v53) {
              goto LABEL_76;
            }
            int v69 = 1;
            unint64_t v15 = v86;
          }
          else
          {
            while (1)
            {
              uint64_t v63 = *(int **)(v50 + 8 * *v61);
              uint64_t v64 = *v63;
              if (v64) {
                break;
              }
LABEL_67:
              if (++v61 == v62) {
                goto LABEL_68;
              }
            }
            unint64_t v65 = v63 + 1;
            uint64_t v66 = *(void *)(a1 + 56);
            uint64_t v67 = 4 * v64;
            do
            {
              unint64_t v68 = *v65;
              if (v68 != v47
                && ((*(void *)(*(void *)(a1 + 64) + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v68 & 0x3F ^ 1)) & 1) != 0)
              {
                *(void *)(a1 + 56) = v66 + 1;
                goto LABEL_67;
              }
              ++v65;
              ++v66;
              v67 -= 4;
            }
            while (v67);
            *(void *)(a1 + 56) = v66;
            if (!v53) {
              continue;
            }
            int v69 = 0;
          }
          uint64_t v70 = *(void *)(a1 + 64);
          uint64_t v71 = v55;
          unint64_t v72 = v52;
          do
          {
            int v73 = *(_DWORD *)v72;
            v72 += 4;
            *(void *)(v70 + (((unint64_t)v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v73);
            v71 -= 4;
          }
          while (v71);
          if (!v69) {
            continue;
          }
          char v74 = v52;
          do
          {
            int v75 = *(_DWORD *)v74 ^ 1;
            uint64_t v76 = *(void *)(a1 + 88);
            unint64_t v77 = (unint64_t)*(int *)v74 >> 6;
            uint64_t v78 = *(void *)(v76 + 8 * v77);
            if (((1 << v75) & v78) == 0)
            {
              uint64_t v79 = *(void *)(a1 + 128);
              uint64_t v80 = *(void *)(a1 + 120);
              *(void *)(v76 + 8 * v77) = (1 << v75) | v78;
              if (v79 == v80) {
                uint64_t v81 = 0;
              }
              else {
                uint64_t v81 = ((v79 - v80) << 7) - 1;
              }
              uint64_t v82 = *(void *)(a1 + 152);
              unint64_t v83 = v82 + *(void *)(a1 + 144);
              if (v81 == v83)
              {
                std::deque<operations_research::sat::Literal>::__add_back_capacity(a1 + 112);
                uint64_t v80 = *(void *)(a1 + 120);
                uint64_t v82 = *(void *)(a1 + 152);
                unint64_t v83 = *(void *)(a1 + 144) + v82;
              }
              *(_DWORD *)(*(void *)(v80 + ((v83 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v83 & 0x3FF)) = v75;
              *(void *)(a1 + 152) = v82 + 1;
            }
            v74 += 4;
            v55 -= 4;
          }
          while (v55);
LABEL_76:
          operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(void **)(a1 + 24), a2, v52, v53);
          unint64_t v15 = v86;
          ++*(_DWORD *)(a1 + 48);
          operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*(void *)(a1 + 16), *(int **)(*(void *)(a1 + 160) + 8 * v49));
        }
      }
      if (v88) {
        operator delete(v88);
      }
    }
  }
}

void sub_23CD6D524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back(void **a1, void *a2)
{
  int v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = (char *)*a1;
    uint64_t v9 = v5 - (unsigned char *)*a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v14 = operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v10];
    *unint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v18];
      unint64_t v15 = (void *)((char *)v15 - v18);
      uint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = (long long *)(v5 - 16);
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *uint64_t v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--unint64_t v15 = v23;
        }
        while (v6 != v8);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)int v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  a1[1] = v7;
}

void *operations_research::sat::BoundedVariableElimination::UpdatePriorityQueue(void *result, unsigned int a2)
{
  if (((*(void *)(*(void *)(result[1] + 8) + (((unint64_t)(int)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1F))) & 3) == 0)
  {
    uint64_t v3 = (int)(2 * a2);
    int v4 = -(*(_DWORD *)(result[42] + 4 * v3)
         + *(_DWORD *)(*(void *)(result[2] + 688) + 4 * (v3 | 1))
         + *(_DWORD *)(result[42] + 4 * (v3 | 1))
         + *(_DWORD *)(*(void *)(result[2] + 688) + 4 * (v3 & 0x3FFFFFFFFFFFFFFELL)));
    int v5 = (int *)(result + 23);
    int v6 = *(_DWORD *)(result[27] + 4 * (int)a2);
    unint64_t v7 = a2 | ((unint64_t)v4 << 32);
    if (v6)
    {
      return (void *)operations_research::IntegerPriorityQueue<operations_research::sat::BoundedVariableElimination::VariableWithPriority,std::less<operations_research::sat::BoundedVariableElimination::VariableWithPriority>>::ChangePriority((uint64_t)(result + 23), v7);
    }
    else
    {
      int v8 = *v5;
      unsigned int v9 = *v5 + 1;
      *int v5 = v9;
      if (v8 >= 1)
      {
        while (1)
        {
          signed int v10 = v9 >> 1;
          uint64_t v11 = result[24];
          uint64_t v12 = *(void *)(v11 + 8 * (v9 >> 1));
          if (SHIDWORD(v12) >= v4) {
            break;
          }
          *(void *)(v11 + 8 * v9) = v12;
          *(_DWORD *)(result[27] + 4 * (int)v12) = v9;
          BOOL v13 = v9 > 3;
          v9 >>= 1;
          if (!v13)
          {
            *(void *)(result[24] + 8 * v10) = v7;
            *(_DWORD *)(result[27] + 4 * (int)a2) = v10;
            return result;
          }
        }
      }
      *(void *)(result[24] + 8 * (int)v9) = v7;
      *(_DWORD *)(result[27] + 4 * (int)a2) = v9;
    }
  }
  return result;
}

BOOL operations_research::sat::BoundedVariableElimination::Propagate(operations_research::sat::BoundedVariableElimination *this)
{
  signed __int32 v1 = (operations_research::sat::Trail *)*((void *)this + 5);
  if (*((_DWORD *)this + 14) >= *((_DWORD *)v1 + 3)) {
    return 1;
  }
  do
  {
    BOOL v6 = operations_research::sat::BinaryImplicationGraph::Propagate(*((operations_research::sat::BinaryImplicationGraph **)this + 2), v1);
    if (!v6) {
      break;
    }
    int v7 = *(_DWORD *)(*(void *)(*((void *)this + 5) + 72) + 4 * *((int *)this + 14));
    uint64_t v3 = *((void *)this + 39);
    int v8 = (int **)(v3 + 24 * v7);
    unsigned int v9 = *v8;
    signed int v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        uint64_t v11 = *(int **)(*((void *)this + 36) + 8 * *v9);
        if (*v11)
        {
          int64x2_t v12 = *(int64x2_t *)((char *)this + 104);
          v13.i64[1] = -1;
          v13.i64[0] = *v11;
          v13.i64[0] = vsubq_s64(v12, v13).u64[0];
          v14.i64[0] = -1;
          v14.i64[1] = -1;
          v13.i64[1] = vaddq_s64(v12, v14).i64[1];
          *(int64x2_t *)((char *)this + 104) = v13;
          operations_research::sat::LiteralWatchers::InprocessingRemoveClause(*((void *)this + 3), v11);
        }
        ++v9;
      }
      while (v9 != v10);
      uint64_t v3 = *((void *)this + 39);
      unsigned int v9 = *(int **)(v3 + 24 * v7);
    }
    *(void *)(v3 + 24 * v7 + 8) = v9;
    int v15 = v7 ^ 1;
    unint64_t v16 = (int **)(v3 + 24 * (v7 ^ 1));
    int v4 = *v16;
    uint64_t v17 = v16[1];
    if (*v16 != v17)
    {
      while (1)
      {
        uint64_t v18 = *(int **)(*((void *)this + 36) + 8 * *v4);
        if (*v18)
        {
          if (!operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(this, v15, v18)) {
            return 0;
          }
        }
        if (++v4 == v17)
        {
          uint64_t v3 = *((void *)this + 39);
          int v4 = *(int **)(v3 + 24 * v15);
          break;
        }
      }
    }
    *(void *)(v3 + 24 * v15 + 8) = v4;
    int v5 = *((_DWORD *)this + 14) + 1;
    *((_DWORD *)this + 14) = v5;
    signed __int32 v1 = (operations_research::sat::Trail *)*((void *)this + 5);
  }
  while (v5 < *((_DWORD *)v1 + 3));
  return v6;
}

uint64_t operations_research::sat::BoundedVariableElimination::CrossProduct(uint64_t a1, int a2)
{
  if (((*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + (((unint64_t)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1Fu))) & 3) != 0) {
    return 1;
  }
  int v3 = 2 * a2;
  int v4 = 2 * a2;
  uint64_t v5 = (2 * a2) | 1;
  uint64_t v6 = *(void *)(a1 + 336);
  int v7 = *(void **)(a1 + 16);
  uint64_t v8 = v7[86];
  int v9 = *(_DWORD *)(v6 + 4 * v5);
  int v10 = *(_DWORD *)(v8 + 4 * v5) + *(_DWORD *)(v6 + 8 * a2);
  int v11 = *(_DWORD *)(v8 + 4 * ((2 * a2) & 0x3FFFFFFFFFFFFFFELL)) + v9;
  if (!(v10 | v11)) {
    return 1;
  }
  if (v10 >= 1 && v11 == 0)
  {
    ++*(void *)(a1 + 96);
    uint64_t result = operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*(void **)(a1 + 24), 2 * a2);
    if (result)
    {
      uint64_t v16 = *(void *)(a1 + 312);
      uint64_t v17 = (int **)(v16 + 24 * v4);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      if (*v17 != v19)
      {
        do
        {
          uint64_t v20 = *v18;
          uint64_t v21 = *(char **)(*(void *)(a1 + 288) + 8 * v20);
          uint64_t v22 = *(int *)v21;
          if (v22)
          {
            operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(void **)(a1 + 32), v3, v21 + 4, v22);
            operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(void *)(a1 + 288) + 8 * v20));
          }
          ++v18;
        }
        while (v18 != v19);
        uint64_t v16 = *(void *)(a1 + 312);
        uint64_t v18 = *(int **)(v16 + 24 * v4);
      }
      *(void *)(v16 + 24 * v4 + 8) = v18;
      return 1;
    }
    return result;
  }
  if (v10) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v11 < 1;
  }
  if (v14)
  {
    if ((*(void *)(v7[68] + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 & 0x3E)))
    {
      LODWORD(v76[0]) = v10;
      LODWORD(v77) = 1;
      if (v10 != 1) {
        google::MakeCheckOpString<int,int>((int)v76, (int)&v77, "s1 == 1");
      }
      LODWORD(v76[0]) = v11;
      LODWORD(v77) = 1;
      if (v11 != 1) {
        google::MakeCheckOpString<int,int>((int)v76, (int)&v77, "s2 == 1");
      }
      v76[0] = operations_research::sat::BinaryImplicationGraph::NumImplicationOnVariableRemoval(*(void **)(a1 + 16), a2);
      int v75 = 0;
      if (v76[0]) {
        google::MakeCheckOpString<long long,int>((int)v76, (int)&v75, "implication_graph_->NumImplicationOnVariableRemoval(var) == 0");
      }
      ++*(void *)(a1 + 96);
      operations_research::sat::BinaryImplicationGraph::RemoveBooleanVariable(*(void **)(a1 + 16), a2, *(void **)(a1 + 32));
      return 1;
    }
    uint64_t v30 = *(void *)a1;
    BOOL v31 = v10 < 2 || v11 < 2;
    if (!v31 && v11 * v10 > *(_DWORD *)(v30 + 324)) {
      return 1;
    }
    uint64_t v32 = *(int *)(v30 + 336);
    unint64_t v33 = operations_research::sat::BinaryImplicationGraph::DirectImplications(v7, 2 * a2);
    uint64_t v34 = (unsigned char *)v33[1] - (unsigned char *)*v33;
    uint64_t v35 = v32 + 2;
    uint64_t v36 = operations_research::sat::BinaryImplicationGraph::DirectImplications(*(void **)(a1 + 16), v5);
    uint64_t v37 = ((((unsigned char *)v36[1] - (unsigned char *)*v36) >> 2) + (v34 >> 2)) * (v32 + 2);
    uint64_t v38 = *(void *)(a1 + 312);
    uint64_t v39 = (int **)(v38 + 24 * v4);
    uint64_t v41 = *v39;
    uint64_t v40 = v39[1];
    if (v41 != v40)
    {
      uint64_t v42 = *(void *)(a1 + 288);
      unint64_t v43 = (char *)v40 - (char *)v41 - 4;
      if (v43 < 4)
      {
        long long v44 = v41;
        do
        {
LABEL_52:
          uint64_t v53 = *v44++;
          uint64_t v54 = **(int **)(v42 + 8 * v53);
          if (v54) {
            uint64_t v55 = v54 + v32;
          }
          else {
            uint64_t v55 = 0;
          }
          v37 += v55;
        }
        while (v44 != v40);
        goto LABEL_56;
      }
      uint64_t v45 = 0;
      uint64_t v46 = (v43 >> 2) + 1;
      long long v44 = &v41[v46 & 0x7FFFFFFFFFFFFFFELL];
      int v47 = v41 + 1;
      uint64_t v48 = v46 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v49 = **(int **)(v42 + 8 * *(v47 - 1));
        uint64_t v50 = **(int **)(v42 + 8 * *v47);
        if (v49) {
          uint64_t v51 = v49 + v32;
        }
        else {
          uint64_t v51 = 0;
        }
        if (v50) {
          uint64_t v52 = v50 + v32;
        }
        else {
          uint64_t v52 = 0;
        }
        v37 += v51;
        v45 += v52;
        v47 += 2;
        v48 -= 2;
      }
      while (v48);
      v37 += v45;
      if (v46 != (v46 & 0x7FFFFFFFFFFFFFFELL)) {
        goto LABEL_52;
      }
    }
LABEL_56:
    uint64_t v56 = (int **)(v38 + 24 * (int)v5);
    unint64_t v58 = *v56;
    uint64_t v57 = v56[1];
    if (v58 == v57) {
      goto LABEL_72;
    }
    uint64_t v59 = *(void *)(a1 + 288);
    unint64_t v60 = (char *)v57 - (char *)v58 - 4;
    if (v60 >= 4)
    {
      uint64_t v62 = 0;
      uint64_t v63 = (v60 >> 2) + 1;
      unint64_t v61 = &v58[v63 & 0x7FFFFFFFFFFFFFFELL];
      uint64_t v64 = v58 + 1;
      uint64_t v65 = v63 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v66 = **(int **)(v59 + 8 * *(v64 - 1));
        uint64_t v67 = **(int **)(v59 + 8 * *v64);
        if (v66) {
          uint64_t v68 = v66 + v32;
        }
        else {
          uint64_t v68 = 0;
        }
        if (v67) {
          uint64_t v69 = v67 + v32;
        }
        else {
          uint64_t v69 = 0;
        }
        v37 += v68;
        v62 += v69;
        v64 += 2;
        v65 -= 2;
      }
      while (v65);
      v37 += v62;
      if (v63 == (v63 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_72:
        *(void *)(a1 + 128) = v37;
        uint64_t v73 = operations_research::sat::BinaryImplicationGraph::NumImplicationOnVariableRemoval(*(void **)(a1 + 16), a2);
        *(void *)(a1 + 120) = v73 * v35;
        if (v73 * v35 <= *(void *)(a1 + 128))
        {
          uint64_t result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,true>((void *)a1, v5);
          if (!result) {
            return result;
          }
          if (*(void *)(a1 + 120) <= *(void *)(a1 + 128))
          {
            uint64_t result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,false>(a1, v3);
            if (!result) {
              return result;
            }
            uint64_t v74 = *(void *)(a1 + 120);
            if (v74 <= *(void *)(a1 + 128))
            {
              if (v74 >= 1)
              {
                uint64_t result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,false>((char **)a1, v3);
                if (!result) {
                  return result;
                }
                uint64_t result = operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,true>((void **)a1, v5);
                if (!result) {
                  return result;
                }
              }
              ++*(void *)(a1 + 96);
              operations_research::sat::BinaryImplicationGraph::RemoveBooleanVariable(*(void **)(a1 + 16), a2, *(void **)(a1 + 32));
              operations_research::sat::BoundedVariableElimination::DeleteAllClausesContaining(a1, v3);
              operations_research::sat::BoundedVariableElimination::DeleteAllClausesContaining(a1, v5);
            }
          }
        }
        return 1;
      }
    }
    else
    {
      unint64_t v61 = v58;
    }
    do
    {
      uint64_t v70 = *v61++;
      uint64_t v71 = **(int **)(v59 + 8 * v70);
      if (v71) {
        uint64_t v72 = v71 + v32;
      }
      else {
        uint64_t v72 = 0;
      }
      v37 += v72;
    }
    while (v61 != v57);
    goto LABEL_72;
  }
  ++*(void *)(a1 + 96);
  uint64_t result = operations_research::sat::LiteralWatchers::InprocessingFixLiteral(*(void **)(a1 + 24), v5);
  if (result)
  {
    uint64_t v23 = *(void *)(a1 + 312);
    unint64_t v24 = (int **)(v23 + 24 * (int)v5);
    int64_t v25 = *v24;
    uint64_t v26 = v24[1];
    if (*v24 != v26)
    {
      do
      {
        uint64_t v27 = *v25;
        unint64_t v28 = *(char **)(*(void *)(a1 + 288) + 8 * v27);
        uint64_t v29 = *(int *)v28;
        if (v29)
        {
          operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(void **)(a1 + 32), v5, v28 + 4, v29);
          operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(void *)(a1 + 288) + 8 * v27));
        }
        ++v25;
      }
      while (v25 != v26);
      uint64_t v23 = *(void *)(a1 + 312);
      int64_t v25 = *(int **)(v23 + 24 * (int)v5);
    }
    *(void *)(v23 + 24 * (int)v5 + 8) = v25;
    return 1;
  }
  return result;
}

void sub_23CD6DF1C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD6DF24(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD6DF2C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(void *a1, int a2, int *a3)
{
  int v3 = a3;
  uint64_t v6 = a3 + 1;
  uint64_t v5 = *a3;
  int v7 = (int *)a1[20];
  a1[13] -= v5;
  uint64_t v38 = (int **)(a1 + 20);
  a1[21] = v7;
  if (v5)
  {
    int v9 = &v6[v5];
    while (1)
    {
      while (1)
      {
        int v10 = *v6;
        if (*v6 != a2)
        {
          unint64_t v11 = *(void *)(*(void *)(a1[1] + 8) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v11 >> (v10 & 0x3F ^ 1u)) & 1) == 0) {
            break;
          }
        }
        --*(_DWORD *)(a1[42] + 4 * v10);
        if (++v6 == v9) {
          goto LABEL_34;
        }
      }
      if ((v11 >> (v10 & 0x3F)))
      {
        --a1[14];
        operations_research::sat::LiteralWatchers::InprocessingRemoveClause(a1[3], a3);
        return 1;
      }
      unint64_t v12 = a1[22];
      if ((unint64_t)v7 < v12)
      {
        *int v7 = v10;
        uint64_t v13 = (uint64_t)(v7 + 1);
        goto LABEL_22;
      }
      BOOL v14 = *v38;
      uint64_t v15 = (char *)v7 - (char *)*v38;
      uint64_t v16 = v15 >> 2;
      unint64_t v17 = (v15 >> 2) + 1;
      if (v17 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v12 - (void)v14;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v39 = v17;
      if (v17)
      {
        if (v17 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v19 = operator new(4 * v17);
        uint64_t v20 = (int *)&v19[4 * v16];
        int *v20 = v10;
        uint64_t v13 = (uint64_t)(v20 + 1);
        if (v7 == v14)
        {
LABEL_25:
          a1[20] = v20;
          a1[21] = v13;
          a1[22] = &v19[4 * v39];
          if (!v14) {
            goto LABEL_22;
          }
LABEL_21:
          operator delete(v14);
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = (int *)(4 * v16);
        *(_DWORD *)(4 * v16) = v10;
        uint64_t v13 = 4 * v16 + 4;
        if (v7 == v14) {
          goto LABEL_25;
        }
      }
      unint64_t v21 = (char *)(v7 - 1) - (char *)v14;
      if (v21 < 0xBC
        || &v19[v15 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v15 - 4]
        || (int *)((char *)v7 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v7 - 1
        || (unint64_t)((char *)v7 - &v19[v15]) < 0x20)
      {
        break;
      }
      uint64_t v25 = (v21 >> 2) + 1;
      uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v22 = &v7[v26 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v20 = (int *)((char *)v20 - v26);
      uint64_t v27 = &v19[4 * v16 - 16];
      unint64_t v28 = v7 - 4;
      uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *uint64_t v27 = v30;
        v27 -= 2;
        v28 -= 8;
        v29 -= 8;
      }
      while (v29);
      unint64_t v23 = v39;
      if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_19;
      }
LABEL_20:
      a1[20] = v20;
      a1[21] = v13;
      a1[22] = &v19[4 * v23];
      if (v14) {
        goto LABEL_21;
      }
LABEL_22:
      a1[21] = v13;
      int v7 = (int *)v13;
      if (++v6 == v9)
      {
LABEL_34:
        int v3 = a3;
        BOOL result = operations_research::sat::LiteralWatchers::InprocessingRewriteClause(a1[3], a3, *v38, v7 - *v38);
        if (result) {
          goto LABEL_37;
        }
        return result;
      }
    }
    uint64_t v22 = v7;
    unint64_t v23 = v39;
    do
    {
LABEL_19:
      int v24 = *--v22;
      *--uint64_t v20 = v24;
    }
    while (v22 != v14);
    goto LABEL_20;
  }
  BOOL result = operations_research::sat::LiteralWatchers::InprocessingRewriteClause(a1[3], a3, v7, 0);
  if (result)
  {
LABEL_37:
    uint64_t v32 = *v3;
    if (v32)
    {
      a1[13] += v32;
    }
    else
    {
      --a1[14];
      unint64_t v33 = (int *)a1[20];
      uint64_t v34 = (int *)a1[21];
      if (v33 != v34)
      {
        uint64_t v35 = a1[42];
        do
        {
          uint64_t v36 = *v33++;
          --*(_DWORD *)(v35 + 4 * v36);
        }
        while (v33 != v34);
      }
    }
    return 1;
  }
  return result;
}

uint64_t operations_research::IntegerPriorityQueue<operations_research::sat::BoundedVariableElimination::VariableWithPriority,std::less<operations_research::sat::BoundedVariableElimination::VariableWithPriority>>::ChangePriority(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(*(void *)(result + 32) + 4 * (int)a2);
  if ((int)v2 < 2 || *(_DWORD *)(*(void *)(result + 8) + ((4 * v2) & 0x3FFFFFFF8) + 4) >= SHIDWORD(a2))
  {
    int v7 = *(_DWORD *)result;
    int v8 = 2 * v2;
    int v9 = (2 * v2) | 1;
    if (v9 <= *(_DWORD *)result)
    {
      while (1)
      {
        uint64_t v14 = *(void *)(result + 8);
        uint64_t v15 = *(void *)(v14 + 8 * v8);
        uint64_t v13 = *(void *)(v14 + 8 * v9);
        if (SHIDWORD(v15) >= SHIDWORD(v13))
        {
          uint64_t v13 = *(void *)(v14 + 8 * v8);
          int v9 = v8;
          if (SHIDWORD(a2) >= SHIDWORD(v15)) {
            goto LABEL_15;
          }
        }
        else if (SHIDWORD(a2) >= SHIDWORD(v13))
        {
LABEL_15:
          *(void *)(*(void *)(result + 8) + 8 * (int)v2) = a2;
          *(_DWORD *)(*(void *)(result + 32) + 4 * (int)a2) = v2;
          return result;
        }
        *(void *)(v14 + 8 * (int)v2) = v13;
        *(_DWORD *)(*(void *)(result + 32) + 4 * (int)v13) = v2;
        int v10 = v9;
        int v8 = 2 * v9;
        int v9 = (2 * v9) | 1;
        LODWORD(v2) = v10;
        if (v9 > v7) {
          goto LABEL_8;
        }
      }
    }
    int v10 = *(_DWORD *)(*(void *)(result + 32) + 4 * (int)a2);
LABEL_8:
    if (v8 > v7 || (uint64_t v11 = *(void *)(result + 8), v12 = *(void *)(v11 + 8 * v8), SHIDWORD(a2) >= SHIDWORD(v12)))
    {
      *(void *)(*(void *)(result + 8) + 8 * v10) = a2;
      *(_DWORD *)(*(void *)(result + 32) + 4 * (int)a2) = v10;
    }
    else
    {
      *(void *)(v11 + 8 * v10) = v12;
      *(_DWORD *)(*(void *)(result + 32) + 4 * (int)v12) = v10;
      *(void *)(*(void *)(result + 8) + 8 * v8) = a2;
      *(_DWORD *)(*(void *)(result + 32) + 4 * (int)a2) = v8;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v3 = v2 >> 1;
      uint64_t v4 = *(void *)(result + 8);
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      if (SHIDWORD(v5) >= SHIDWORD(a2)) {
        break;
      }
      *(void *)(v4 + 8 * v2) = v5;
      *(_DWORD *)(*(void *)(result + 32) + 4 * (int)v5) = v2;
      BOOL v6 = v2 > 3;
      LODWORD(v2) = v2 >> 1;
      if (!v6)
      {
        *(void *)(*(void *)(result + 8) + 8 * v3) = a2;
        *(_DWORD *)(*(void *)(result + 32) + 4 * (int)a2) = v3;
        return result;
      }
    }
    *(void *)(v4 + 8 * v2) = a2;
    *(_DWORD *)(*(void *)(result + 32) + 4 * (int)a2) = v2;
  }
  return result;
}

uint64_t operations_research::sat::BoundedVariableElimination::DeleteClause(uint64_t a1, int *a2)
{
  uint64_t v4 = a2 + 1;
  uint64_t v3 = *a2;
  int64x2_t v5 = *(int64x2_t *)(a1 + 104);
  v6.i64[1] = -1;
  v6.i64[0] = v3;
  v7.i64[0] = -1;
  v7.i64[1] = -1;
  v6.i64[0] = vsubq_s64(v5, v6).u64[0];
  v6.i64[1] = vaddq_s64(v5, v7).i64[1];
  *(int64x2_t *)(a1 + 104) = v6;
  if (v3)
  {
    uint64_t v38 = (void **)(a1 + 264);
    int v8 = &v4[v3];
    while (1)
    {
      uint64_t v10 = *v4;
      int v11 = (int)v10 >> 1;
      --*(_DWORD *)(*(void *)(a1 + 336) + 4 * v10);
      unint64_t v12 = (uint64_t)(int)v10 >> 1;
      uint64_t v13 = *(void *)(a1 + 240);
      unint64_t v14 = v12 >> 6;
      uint64_t v15 = *(void *)(v13 + 8 * v14);
      if ((v15 & (1 << v11)) != 0) {
        goto LABEL_5;
      }
      *(void *)(v13 + 8 * v14) = v15 | (1 << v11);
      unint64_t v17 = *(int **)(a1 + 272);
      unint64_t v16 = *(void *)(a1 + 280);
      if ((unint64_t)v17 >= v16) {
        break;
      }
      *unint64_t v17 = v11;
      uint64_t v9 = (uint64_t)(v17 + 1);
LABEL_4:
      *(void *)(a1 + 272) = v9;
LABEL_5:
      if (++v4 == v8) {
        goto LABEL_28;
      }
    }
    uint64_t v18 = (int *)*v38;
    uint64_t v19 = (char *)v17 - (unsigned char *)*v38;
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v19 >> 2) + 1;
    if (v21 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v16 - (void)v18;
    if (v22 >> 1 > v21) {
      unint64_t v21 = v22 >> 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v24 = operator new(4 * v23);
      uint64_t v25 = (int *)&v24[4 * v20];
      *uint64_t v25 = v11;
      uint64_t v9 = (uint64_t)(v25 + 1);
      if (v17 == v18) {
        goto LABEL_25;
      }
    }
    else
    {
      int v24 = 0;
      uint64_t v25 = (int *)(4 * v20);
      *(_DWORD *)(4 * v20) = v11;
      uint64_t v9 = 4 * v20 + 4;
      if (v17 == v18)
      {
LABEL_25:
        *(void *)(a1 + 264) = v25;
        *(void *)(a1 + 272) = v9;
        *(void *)(a1 + 280) = &v24[4 * v23];
        if (v18) {
          operator delete(v18);
        }
        goto LABEL_4;
      }
    }
    unint64_t v26 = (char *)(v17 - 1) - (char *)v18;
    if (v26 < 0x2C) {
      goto LABEL_35;
    }
    if ((unint64_t)((char *)v17 - &v24[v19]) < 0x20) {
      goto LABEL_35;
    }
    uint64_t v27 = (v26 >> 2) + 1;
    uint64_t v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v29 = &v17[v28 / 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v25 = (int *)((char *)v25 - v28);
    long long v30 = &v24[4 * v20 - 16];
    BOOL v31 = v17 - 4;
    uint64_t v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *long long v30 = v33;
      v30 -= 2;
      v31 -= 8;
      v32 -= 8;
    }
    while (v32);
    unint64_t v17 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_35:
      do
      {
        int v34 = *--v17;
        *--uint64_t v25 = v34;
      }
      while (v17 != v18);
    }
    goto LABEL_25;
  }
LABEL_28:
  uint64_t v35 = *(void *)(a1 + 24);

  return operations_research::sat::LiteralWatchers::InprocessingRemoveClause(v35, a2);
}

uint64_t operations_research::sat::BoundedVariableElimination::DeleteAllClausesContaining(uint64_t result, int a2)
{
  uint64_t v3 = *(void *)(result + 312);
  uint64_t v4 = (int **)(v3 + 24 * a2);
  int64x2_t v5 = *v4;
  int64x2_t v6 = v4[1];
  if (*v4 != v6)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v9 = *v5;
      uint64_t v10 = *(char **)(*(void *)(v7 + 288) + 8 * v9);
      uint64_t v11 = *(int *)v10;
      if (v11)
      {
        operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(void **)(v7 + 32), a2, v10 + 4, v11);
        BOOL result = operations_research::sat::BoundedVariableElimination::DeleteClause(v7, *(int **)(*(void *)(v7 + 288) + 8 * v9));
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v3 = *(void *)(v7 + 312);
    int64x2_t v5 = *(int **)(v3 + 24 * a2);
  }
  *(void *)(v3 + 24 * a2 + 8) = v5;
  return result;
}

void operations_research::sat::BoundedVariableElimination::AddClause(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v62 = operations_research::sat::LiteralWatchers::InprocessingAddClause(*(void *)(a1 + 24), a2, a3);
  if (v62)
  {
    int64x2_t v6 = vdupq_n_s64(1uLL);
    v6.i64[0] = a3;
    *(int64x2_t *)(v5 + 104) = vaddq_s64(*(int64x2_t *)(v5 + 104), v6);
    uint64_t v8 = *(void *)(v5 + 288);
    uint64_t v7 = *(void *)(v5 + 296);
    gtl::ITIVector<gtl::IntType<operations_research::sat::BlockedClauseSimplifier::ClauseIndex_tag_,int>,operations_research::sat::SatClause *,std::allocator<operations_research::sat::SatClause *>>::push_back((void **)(v5 + 288), &v62);
    if (a3)
    {
      uint64_t v57 = (void **)(v5 + 264);
      uint64_t v58 = v5;
      unint64_t v60 = &v4[a3];
      unint64_t v61 = (unint64_t)(v7 - v8) >> 3;
      while (1)
      {
        uint64_t v10 = *v4;
        ++*(_DWORD *)(*(void *)(v5 + 336) + 4 * v10);
        uint64_t v11 = *(void *)(v5 + 312) + 24 * (int)v10;
        unint64_t v12 = (uint64_t *)(v11 + 8);
        uint64_t v13 = *(char **)(v11 + 8);
        unint64_t v14 = *(void *)(v11 + 16);
        if ((unint64_t)v13 < v14)
        {
          *(_DWORD *)uint64_t v13 = v61;
          uint64_t v15 = (uint64_t)(v13 + 4);
          goto LABEL_28;
        }
        unint64_t v16 = *(char **)v11;
        uint64_t v17 = (uint64_t)&v13[-*(void *)v11];
        uint64_t v18 = v17 >> 2;
        unint64_t v19 = (v17 >> 2) + 1;
        if (v19 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)v16;
        if (v20 >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        unint64_t v59 = v19;
        if (v19)
        {
          if (v19 >> 62) {
            goto LABEL_52;
          }
          unint64_t v21 = operator new(4 * v19);
          uint64_t v22 = &v21[4 * v18];
          *uint64_t v22 = v61;
          uint64_t v15 = (uint64_t)(v22 + 1);
          if (v13 == v16)
          {
LABEL_20:
            uint64_t v5 = v58;
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v21 = 0;
          uint64_t v22 = (_DWORD *)(4 * v18);
          *(_DWORD *)(4 * v18) = v61;
          uint64_t v15 = 4 * v18 + 4;
          if (v13 == v16) {
            goto LABEL_20;
          }
        }
        unint64_t v23 = v13 - 4 - v16;
        if (v23 < 0x2C) {
          break;
        }
        unint64_t v24 = v13 - &v21[v17];
        uint64_t v5 = v58;
        if (v24 < 0x20) {
          goto LABEL_25;
        }
        uint64_t v25 = (v23 >> 2) + 1;
        uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v27 = &v13[-v26];
        uint64_t v22 = (_DWORD *)((char *)v22 - v26);
        uint64_t v28 = &v21[4 * v18 - 16];
        uint64_t v29 = v13 - 16;
        uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *uint64_t v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 8;
        }
        while (v30);
        uint64_t v13 = v27;
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_25;
        }
LABEL_26:
        *(void *)uint64_t v11 = v22;
        *unint64_t v12 = v15;
        *(void *)(v11 + 16) = &v21[4 * v59];
        if (v16) {
          operator delete(v16);
        }
LABEL_28:
        *unint64_t v12 = v15;
        int v33 = (int)v10 >> 1;
        uint64_t v34 = *(void *)(v5 + 240);
        unint64_t v35 = (unint64_t)((uint64_t)(int)v10 >> 1) >> 6;
        uint64_t v36 = *(void *)(v34 + 8 * v35);
        if ((v36 & (1 << ((int)v10 >> 1))) != 0) {
          goto LABEL_6;
        }
        *(void *)(v34 + 8 * v35) = v36 | (1 << v33);
        uint64_t v38 = *(int **)(v5 + 272);
        unint64_t v37 = *(void *)(v5 + 280);
        if ((unint64_t)v38 >= v37)
        {
          unint64_t v39 = (int *)*v57;
          uint64_t v40 = (char *)v38 - (unsigned char *)*v57;
          uint64_t v41 = v40 >> 2;
          unint64_t v42 = (v40 >> 2) + 1;
          if (v42 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v43 = v37 - (void)v39;
          if (v43 >> 1 > v42) {
            unint64_t v42 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            if (v44 >> 62) {
LABEL_52:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v45 = operator new(4 * v44);
            uint64_t v46 = (int *)&v45[4 * v41];
            *uint64_t v46 = v33;
            uint64_t v9 = (uint64_t)(v46 + 1);
            if (v38 != v39)
            {
LABEL_39:
              unint64_t v47 = (char *)(v38 - 1) - (char *)v39;
              if (v47 < 0x2C)
              {
                uint64_t v5 = v58;
                goto LABEL_47;
              }
              unint64_t v48 = (char *)v38 - &v45[v40];
              uint64_t v5 = v58;
              if (v48 < 0x20) {
                goto LABEL_56;
              }
              uint64_t v49 = (v47 >> 2) + 1;
              uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v51 = &v38[v50 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v46 = (int *)((char *)v46 - v50);
              uint64_t v52 = &v45[4 * v41 - 16];
              uint64_t v53 = v38 - 4;
              uint64_t v54 = v49 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v55 = *(_OWORD *)v53;
                *(v52 - 1) = *((_OWORD *)v53 - 1);
                *uint64_t v52 = v55;
                v52 -= 2;
                v53 -= 8;
                v54 -= 8;
              }
              while (v54);
              uint64_t v38 = v51;
              if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_56:
                do
                {
LABEL_47:
                  int v56 = *--v38;
                  *--uint64_t v46 = v56;
                }
                while (v38 != v39);
              }
LABEL_48:
              *(void *)(v5 + 264) = v46;
              *(void *)(v5 + 272) = v9;
              *(void *)(v5 + 280) = &v45[4 * v44];
              if (v39) {
                operator delete(v39);
              }
              goto LABEL_5;
            }
          }
          else
          {
            uint64_t v45 = 0;
            uint64_t v46 = (int *)(4 * v41);
            *(_DWORD *)(4 * v41) = v33;
            uint64_t v9 = 4 * v41 + 4;
            if (v38 != v39) {
              goto LABEL_39;
            }
          }
          uint64_t v5 = v58;
          goto LABEL_48;
        }
        *uint64_t v38 = v33;
        uint64_t v9 = (uint64_t)(v38 + 1);
LABEL_5:
        *(void *)(v5 + 272) = v9;
LABEL_6:
        if (++v4 == v60) {
          return;
        }
      }
      uint64_t v5 = v58;
      do
      {
LABEL_25:
        int v32 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *--uint64_t v22 = v32;
      }
      while (v13 != v16);
      goto LABEL_26;
    }
  }
}

uint64_t operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,true>(void *a1, int a2)
{
  int v44 = a2;
  uint64_t v42 = *(int *)(*a1 + 336);
  uint64_t v4 = operations_research::sat::BinaryImplicationGraph::DirectImplications((void *)a1[2], a2);
  uint64_t v5 = (void *)(a1[39] + 24 * a2);
  uint64_t v7 = v5 + 1;
  uint64_t v6 = v5[1];
  uint64_t v8 = *v5;
  if (v6 == *v5)
  {
    char v38 = 1;
    return v38 & 1;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = v42;
  uint64_t v41 = v4;
  while (1)
  {
    uint64_t v12 = *(int *)(v8 + 4 * v9);
    uint64_t v13 = *(int **)(a1[36] + 8 * v12);
    uint64_t v16 = *v13;
    uint64_t v15 = v13 + 1;
    uint64_t v14 = v16;
    if (!v16) {
      goto LABEL_3;
    }
    uint64_t v17 = a1[17];
    uint64_t v18 = 4 * v14;
    uint64_t v19 = 4 * v14;
    uint64_t v20 = v15;
    do
    {
      int v21 = *v20++;
      *(void *)(v17 + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      v19 -= 4;
    }
    while (v19);
    uint64_t v22 = (char *)*v4;
    unint64_t v23 = (char *)v4[1];
    uint64_t v24 = a1[15];
    BOOL v25 = v23 == *v4;
    a1[9] += v14 + ((v23 - (unsigned char *)*v4) >> 2);
    if (!v25)
    {
      do
      {
        int v26 = *(_DWORD *)v22;
        int v43 = v26;
        if (v26 == v44) {
          google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int)&v43, (int)&v44, "l != lit");
        }
        unint64_t v27 = ((unint64_t)v26 >> 3) & 0x1FFFFFFFFFFFFFF8;
        char v28 = v26 & 0x3F;
        unint64_t v29 = *(void *)(a1[17] + v27);
        if (((v29 >> (v28 ^ 1u)) & 1) == 0)
        {
          if ((v29 >> v28))
          {
            char v30 = 0;
            goto LABEL_16;
          }
          a1[15] += v14 + v11;
        }
        v22 += 4;
      }
      while (v22 != v23);
    }
    char v30 = 1;
LABEL_16:
    uint64_t v31 = a1[17];
    do
    {
      int v32 = *v15++;
      *(void *)(v31 + (((unint64_t)v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v32);
      v18 -= 4;
    }
    while (v18);
    uint64_t v33 = a1[16];
    if ((v30 & 1) == 0) {
      break;
    }
LABEL_21:
    if (a1[15] > v33)
    {
      char v39 = 0;
      LOBYTE(v8) = 1;
      goto LABEL_28;
    }
    uint64_t v6 = *v7;
    uint64_t v8 = *v5;
LABEL_3:
    uint64_t v9 = ++v10;
    if (v10 >= (unint64_t)((v6 - v8) >> 2))
    {
      char v39 = 1;
      goto LABEL_28;
    }
  }
  uint64_t v34 = v7;
  unint64_t v35 = v5;
  ++a1[10];
  a1[15] = v24;
  a1[16] = v33 - (v14 + v11);
  if (operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(a1, v44, *(int **)(a1[36] + 8 * v12)))
  {
    uint64_t v5 = v35;
    uint64_t v7 = v34;
    int v36 = *(_DWORD *)(*v35 + 4 * v9);
    unint64_t v37 = (_DWORD *)(*v34 - 4);
    *(_DWORD *)(*v35 + 4 * v9) = *v37;
    *unint64_t v37 = v36;
    *uint64_t v34 = v37;
    --v10;
    uint64_t v33 = a1[16];
    uint64_t v4 = v41;
    uint64_t v11 = v42;
    goto LABEL_21;
  }
  char v39 = 0;
  LOBYTE(v8) = 0;
LABEL_28:
  char v38 = v39 | v8;
  return v38 & 1;
}

void sub_23CD6ED78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<true,false>(uint64_t a1, int a2)
{
  int v72 = a2;
  uint64_t v4 = *(int *)(*(void *)a1 + 336);
  uint64_t v62 = operations_research::sat::BinaryImplicationGraph::DirectImplications(*(void **)(a1 + 16), a2);
  uint64_t v5 = (void *)(*(void *)(a1 + 312) + 24 * a2);
  uint64_t v7 = v5 + 1;
  uint64_t v6 = v5[1];
  uint64_t v8 = *v5;
  if (v6 != *v5)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v59 = v4 - 1;
    unint64_t v60 = v5 + 1;
    uint64_t v11 = v4;
    uint64_t v67 = v4;
    unint64_t v61 = v5;
    do
    {
      uint64_t v12 = *(int **)(*(void *)(a1 + 288) + 8 * *(int *)(v8 + 4 * v9));
      uint64_t v15 = *v12;
      uint64_t v13 = (char *)(v12 + 1);
      uint64_t v14 = v15;
      if (v15)
      {
        uint64_t v63 = v9;
        uint64_t v64 = *(int *)(v8 + 4 * v9);
        uint64_t v16 = *(void *)(a1 + 136);
        uint64_t v17 = 4 * v14;
        uint64_t v18 = 4 * v14;
        uint64_t v19 = v13;
        do
        {
          int v20 = *(_DWORD *)v19;
          v19 += 4;
          *(void *)(v16 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
          v18 -= 4;
        }
        while (v18);
        uint64_t v22 = (char *)*v62;
        int v21 = (char *)v62[1];
        uint64_t v68 = *(void *)(a1 + 120);
        uint64_t v69 = v13;
        for (*(void *)(a1 + 72) += v14 + ((v21 - (unsigned char *)*v62) >> 2); v22 != v21; v22 += 4)
        {
          int v23 = *(_DWORD *)v22;
          LODWORD(v70) = v23;
          if (v23 == v72) {
            google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int)&v70, (int)&v72, "l != lit");
          }
          unint64_t v24 = ((unint64_t)v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
          char v25 = v23 & 0x3F;
          unint64_t v26 = *(void *)(*(void *)(a1 + 136) + v24);
          if (((v26 >> (v25 ^ 1u)) & 1) == 0)
          {
            if ((v26 >> v25))
            {
LABEL_39:
              char v47 = 1;
              goto LABEL_40;
            }
            *(void *)(a1 + 120) += v14 + v11;
          }
        }
        unint64_t v27 = (uint64_t *)(*(void *)(a1 + 312) + 24 * (v72 ^ 1));
        char v28 = (_DWORD *)v27[1];
        uint64_t v65 = v27 + 1;
        uint64_t v66 = v27;
        uint64_t v29 = *v27;
        if (v28 != (_DWORD *)*v27)
        {
          uint64_t v30 = 0;
          int v31 = 0;
          do
          {
            uint64_t v34 = *(void *)(a1 + 120);
            uint64_t v33 = *(void *)(a1 + 128);
            if (v34 > v33) {
              break;
            }
            uint64_t v35 = *(int *)(v29 + 4 * v30);
            int v36 = *(int **)(*(void *)(a1 + 288) + 8 * v35);
            unint64_t v37 = *v36;
            if (v37)
            {
              int v38 = 0;
              char v39 = v36 + 1;
              uint64_t v40 = *(void *)(a1 + 72);
              uint64_t v41 = 4 * v37;
              do
              {
                unint64_t v42 = *v39;
                if (v42 != (v72 ^ 1))
                {
                  uint64_t v43 = (v42 >> 3) & 0x1FFFFFFFFFFFFFF8;
                  char v44 = v42 & 0x3F;
                  unint64_t v45 = *(void *)(*(void *)(a1 + 136) + v43);
                  if ((v45 >> (v44 ^ 1u)))
                  {
                    *(void *)(a1 + 72) = v40 + 1;
                    goto LABEL_19;
                  }
                  if (((v45 >> v44) & 1) == 0) {
                    ++v38;
                  }
                }
                ++v39;
                ++v40;
                v41 -= 4;
              }
              while (v41);
              *(void *)(a1 + 72) = v40;
              unint64_t v46 = v38 + v14;
              if (v46 <= v37)
              {
                unint64_t v70 = v37;
                uint64_t v71 = v38 + v14;
                if (v46 != v37) {
                  google::MakeCheckOpString<unsigned long,unsigned long>((int)&v71, (int)&v70, "clause.size() + extra_size == other.size()");
                }
                ++*(void *)(a1 + 80);
                *(void *)(a1 + 128) = v33 - (v37 + v11);
                if (!v38)
                {
                  operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(void *)(a1 + 288) + 8 * v35));
                  char v47 = 1;
                  uint64_t v11 = v67;
                  uint64_t v13 = v69;
                  goto LABEL_40;
                }
                if (operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause((void *)a1, v72 ^ 1, *(int **)(*(void *)(a1 + 288) + 8 * v35)))
                {
                  uint64_t v29 = *v66;
                  char v28 = (_DWORD *)(*v65 - 4);
                  int v32 = *(_DWORD *)(*v66 + 4 * v30);
                  *(_DWORD *)(*v66 + 4 * v30) = *v28;
                  *char v28 = v32;
                  *uint64_t v65 = v28;
                  --v31;
                  uint64_t v11 = v67;
                  uint64_t v13 = v69;
                  goto LABEL_19;
                }
                goto LABEL_55;
              }
              if (!v38) {
                goto LABEL_39;
              }
              if ((unint64_t)(v14 - 1 + v38) >= 0x65)
              {
                char v47 = 0;
                *(void *)(a1 + 120) = v33 + 1;
                goto LABEL_40;
              }
              *(void *)(a1 + 120) = v59 + v14 + v38 + v34;
            }
LABEL_19:
            uint64_t v30 = ++v31;
          }
          while (v31 < (unint64_t)(((uint64_t)v28 - v29) >> 2));
        }
        char v47 = 0;
LABEL_40:
        uint64_t v48 = *(void *)(a1 + 136);
        uint64_t v49 = v13;
        uint64_t v7 = v60;
        uint64_t v5 = v61;
        do
        {
          int v50 = *(_DWORD *)v49;
          v49 += 4;
          *(void *)(v48 + (((unint64_t)v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v50);
          v17 -= 4;
        }
        while (v17);
        uint64_t v51 = *(void *)(a1 + 128);
        if (v47)
        {
          ++*(void *)(a1 + 80);
          *(void *)(a1 + 120) = v68;
          *(void *)(a1 + 128) = v51 - (v14 + v11);
          uint64_t v52 = v64;
          if (!operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause((void *)a1, v72, *(int **)(*(void *)(a1 + 288) + 8 * v64)))
          {
LABEL_55:
            int v57 = 0;
            LODWORD(v6) = 0;
            return (v57 | v6) & 1;
          }
          int v53 = *(_DWORD *)(*v61 + 4 * v63);
          uint64_t v54 = (_DWORD *)(*v60 - 4);
          *(_DWORD *)(*v61 + 4 * v63) = *v54;
          *uint64_t v54 = v53;
          *unint64_t v60 = v54;
          --v10;
          uint64_t v55 = *(void *)(a1 + 120);
          uint64_t v51 = *(void *)(a1 + 128);
          uint64_t v11 = v67;
          uint64_t v13 = v69;
          if (v55 > v51)
          {
LABEL_56:
            int v57 = 0;
            LODWORD(v6) = 1;
            return (v57 | v6) & 1;
          }
        }
        else
        {
          uint64_t v52 = v64;
          uint64_t v55 = *(void *)(a1 + 120);
          if (v55 > v51) {
            goto LABEL_56;
          }
        }
        if (v55 == v68) {
          char v56 = v47;
        }
        else {
          char v56 = 1;
        }
        if ((v56 & 1) == 0)
        {
          ++*(void *)(a1 + 88);
          *(void *)(a1 + 128) = v51 - v14 - v11;
          operations_research::sat::PostsolveClauses::AddClauseWithSpecialLiteral(*(void **)(a1 + 32), v72, v13, v14);
          operations_research::sat::BoundedVariableElimination::DeleteClause(a1, *(int **)(*(void *)(a1 + 288) + 8 * v52));
          uint64_t v11 = v67;
        }
      }
      uint64_t v9 = ++v10;
      uint64_t v8 = *v5;
      uint64_t v6 = *v7 - *v5;
    }
    while (v10 < (unint64_t)(v6 >> 2));
  }
  int v57 = 1;
  return (v57 | v6) & 1;
}

void sub_23CD6F2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD6F2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,false>(char **a1, int a2)
{
  int v123 = a2;
  uint64_t v107 = *((int *)*a1 + 84);
  uint64_t v4 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1[2], a2);
  uint64_t v5 = &a1[39][24 * a2];
  uint64_t v6 = (_DWORD *)*((void *)v5 + 1);
  int v108 = (_DWORD **)(v5 + 8);
  uint64_t v109 = v5;
  int v110 = v4;
  uint64_t v7 = *(void *)v5;
  if (v6 == *(_DWORD **)v5) {
    return 1;
  }
  int v114 = 0;
  unint64_t v120 = a1 + 20;
  uint64_t v8 = 0;
  while (2)
  {
    uint64_t v112 = v8;
    uint64_t v113 = *(int *)(v7 + 4 * v8);
    int v10 = *(int **)&a1[36][8 * v113];
    uint64_t v13 = *v10;
    uint64_t v12 = v10 + 1;
    uint64_t v11 = v13;
    if (!v13)
    {
LABEL_4:
      int v9 = v114;
      goto LABEL_5;
    }
    uint64_t v14 = a1[20];
    a1[21] = v14;
    uint64_t v115 = v11;
    uint64_t v15 = &v12[v11];
    unint64_t v119 = v12;
    do
    {
      int v17 = *v12;
      if (*v12 != v123)
      {
        unint64_t v18 = (unint64_t)a1[22];
        if ((unint64_t)v14 < v18)
        {
          *(_DWORD *)uint64_t v14 = v17;
          uint64_t v16 = (uint64_t)(v14 + 4);
LABEL_9:
          a1[21] = (char *)v16;
          uint64_t v14 = (char *)v16;
          goto LABEL_10;
        }
        uint64_t v19 = *v120;
        uint64_t v20 = v14 - *v120;
        uint64_t v21 = v20 >> 2;
        unint64_t v22 = (v20 >> 2) + 1;
        if (v22 >> 62) {
LABEL_123:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v23 = v18 - (void)v19;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          if (v24 >> 62) {
LABEL_124:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          char v25 = operator new(4 * v24);
          unint64_t v26 = &v25[4 * v21];
          *(_DWORD *)unint64_t v26 = v17;
          uint64_t v16 = (uint64_t)(v26 + 4);
          if (v14 == v19) {
            goto LABEL_27;
          }
        }
        else
        {
          char v25 = 0;
          unint64_t v26 = (char *)(4 * v21);
          *(_DWORD *)(4 * v21) = v17;
          uint64_t v16 = 4 * v21 + 4;
          if (v14 == v19) {
            goto LABEL_27;
          }
        }
        unint64_t v27 = v14 - 4 - v19;
        if (v27 >= 0xBC)
        {
          if (&v25[v20 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[v20 - 4])
          {
            char v28 = v14;
          }
          else if (&v14[-(v27 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4)
          {
            char v28 = v14;
          }
          else if ((unint64_t)(v14 - v25 - v20) >= 0x20)
          {
            uint64_t v30 = (v27 >> 2) + 1;
            uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            char v28 = &v14[-v31];
            v26 -= v31;
            int v32 = &v25[4 * v21 - 16];
            uint64_t v33 = v14 - 16;
            uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v35 = *(_OWORD *)v33;
              *(v32 - 1) = *((_OWORD *)v33 - 1);
              *int v32 = v35;
              v32 -= 2;
              v33 -= 32;
              v34 -= 8;
            }
            while (v34);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_27:
              a1[20] = v26;
              a1[21] = (char *)v16;
              a1[22] = &v25[4 * v24];
              if (v19) {
                operator delete(v19);
              }
              goto LABEL_9;
            }
          }
          else
          {
            char v28 = v14;
          }
        }
        else
        {
          char v28 = v14;
        }
        do
        {
          int v29 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *((_DWORD *)v26 - 1) = v29;
          v26 -= 4;
        }
        while (v28 != v19);
        goto LABEL_27;
      }
LABEL_10:
      *(void *)&a1[17][((unint64_t)v17 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v17;
      ++v12;
    }
    while (v12 != v15);
    unint64_t v37 = (char *)*v110;
    int v36 = (char *)v110[1];
    uint64_t v38 = v115;
    unint64_t v111 = a1[15];
    a1[9] += v115 + ((v36 - (unsigned char *)*v110) >> 2);
    if (v36 != v37)
    {
      while (1)
      {
        int v43 = *(_DWORD *)v37;
        int v122 = v43;
        if (v43 == v123) {
          google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int)&v122, (int)&v123, "l != lit");
        }
        unint64_t v44 = *(void *)&a1[17][((unint64_t)v43 >> 3) & 0x1FFFFFFFFFFFFFF8];
        if ((v44 >> (v43 & 0x3F ^ 1u))) {
          goto LABEL_45;
        }
        if ((v44 >> (v43 & 0x3F)))
        {
          char v100 = 1;
          uint64_t v41 = v119;
          goto LABEL_116;
        }
        unint64_t v46 = a1[21];
        unint64_t v45 = (unint64_t)a1[22];
        if ((unint64_t)v46 >= v45) {
          break;
        }
        *(_DWORD *)unint64_t v46 = v43;
        uint64_t v42 = (uint64_t)(v46 + 4);
LABEL_44:
        a1[21] = (char *)v42;
        operations_research::sat::BoundedVariableElimination::AddClause((uint64_t)a1, (int *)a1[20], (v42 - (uint64_t)a1[20]) >> 2);
        a1[21] -= 4;
LABEL_45:
        v37 += 4;
        if (v37 == v36) {
          goto LABEL_41;
        }
      }
      char v47 = *v120;
      uint64_t v48 = v46 - *v120;
      uint64_t v49 = v48 >> 2;
      unint64_t v50 = (v48 >> 2) + 1;
      if (v50 >> 62) {
        goto LABEL_123;
      }
      uint64_t v51 = v45 - (void)v47;
      if (v51 >> 1 > v50) {
        unint64_t v50 = v51 >> 1;
      }
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v52 = v50;
      }
      if (v52)
      {
        if (v52 >> 62) {
          goto LABEL_124;
        }
        int v53 = operator new(4 * v52);
        uint64_t v54 = &v53[4 * v49];
        *(_DWORD *)uint64_t v54 = v43;
        uint64_t v42 = (uint64_t)(v54 + 4);
        if (v46 == v47) {
          goto LABEL_67;
        }
      }
      else
      {
        int v53 = 0;
        uint64_t v54 = (char *)(4 * v49);
        *(_DWORD *)(4 * v49) = v43;
        uint64_t v42 = 4 * v49 + 4;
        if (v46 == v47)
        {
LABEL_67:
          a1[20] = v54;
          a1[21] = (char *)v42;
          a1[22] = &v53[4 * v52];
          if (v47) {
            operator delete(v47);
          }
          uint64_t v38 = v115;
          goto LABEL_44;
        }
      }
      unint64_t v55 = v46 - 4 - v47;
      if (v55 < 0x2C) {
        goto LABEL_127;
      }
      if ((unint64_t)(v46 - &v53[v48]) < 0x20) {
        goto LABEL_127;
      }
      uint64_t v56 = (v55 >> 2) + 1;
      uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v58 = &v46[-v57];
      v54 -= v57;
      uint64_t v59 = &v53[4 * v49 - 16];
      unint64_t v60 = v46 - 16;
      uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v62 = *(_OWORD *)v60;
        *(v59 - 1) = *((_OWORD *)v60 - 1);
        *uint64_t v59 = v62;
        v59 -= 2;
        v60 -= 32;
        v61 -= 8;
      }
      while (v61);
      unint64_t v46 = v58;
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_127:
        do
        {
          int v63 = *((_DWORD *)v46 - 1);
          v46 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v46 != v47);
      }
      goto LABEL_67;
    }
LABEL_41:
    unint64_t v116 = &a1[39][24 * (v123 ^ 1) + 8];
    uint64_t v117 = &a1[39][24 * (v123 ^ 1)];
    uint64_t v39 = *(void *)v117;
    if (*(void *)v116 == *(void *)v117)
    {
      char v100 = 0;
      uint64_t v41 = v119;
      goto LABEL_116;
    }
    unint64_t v40 = 0;
    uint64_t v41 = v119;
    while (2)
    {
      uint64_t v64 = *(int **)&a1[36][8 * *(int *)(v39 + 4 * v40)];
      uint64_t v65 = *v64;
      if (!v65) {
        goto LABEL_73;
      }
      unint64_t v118 = v40;
      int v66 = 0;
      uint64_t v67 = v64 + 1;
      uint64_t v68 = (uint64_t)&v64[v65 + 1];
      while (2)
      {
        int v70 = *v67;
        ++a1[9];
        if (v70 == (v123 ^ 1)) {
          goto LABEL_78;
        }
        unint64_t v71 = *(void *)&a1[17][((unint64_t)v70 >> 3) & 0x1FFFFFFFFFFFFFF8];
        if (((v71 >> (v70 & 0x3F ^ 1u)) & 1) == 0)
        {
          if ((v71 >> (v70 & 0x3F))) {
            goto LABEL_78;
          }
          uint64_t v73 = a1[21];
          unint64_t v72 = (unint64_t)a1[22];
          if ((unint64_t)v73 < v72)
          {
            *(_DWORD *)uint64_t v73 = v70;
            uint64_t v69 = (uint64_t)(v73 + 4);
            goto LABEL_77;
          }
          uint64_t v74 = *v120;
          uint64_t v75 = v73 - *v120;
          uint64_t v76 = v75 >> 2;
          unint64_t v77 = (v75 >> 2) + 1;
          if (v77 >> 62) {
            goto LABEL_123;
          }
          int v121 = v66;
          uint64_t v78 = v72 - (void)v74;
          if (v78 >> 1 > v77) {
            unint64_t v77 = v78 >> 1;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v77;
          }
          if (v79)
          {
            if (v79 >> 62) {
              goto LABEL_124;
            }
            uint64_t v80 = operator new(4 * v79);
            uint64_t v81 = &v80[4 * v76];
            *(_DWORD *)uint64_t v81 = v70;
            uint64_t v69 = (uint64_t)(v81 + 4);
            if (v73 != v74)
            {
LABEL_92:
              unint64_t v82 = v73 - 4 - v74;
              if (v82 < 0x2C)
              {
                uint64_t v41 = v119;
                goto LABEL_100;
              }
              unint64_t v83 = v73 - &v80[v75];
              uint64_t v41 = v119;
              if (v83 < 0x20) {
                goto LABEL_128;
              }
              uint64_t v84 = (v82 >> 2) + 1;
              uint64_t v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v86 = &v73[-v85];
              v81 -= v85;
              uint64_t v87 = &v80[4 * v76 - 16];
              long long v88 = v73 - 16;
              uint64_t v89 = v84 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v90 = *(_OWORD *)v88;
                *(v87 - 1) = *((_OWORD *)v88 - 1);
                _OWORD *v87 = v90;
                v87 -= 2;
                v88 -= 32;
                v89 -= 8;
              }
              while (v89);
              uint64_t v73 = v86;
              if (v84 != (v84 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_128:
                do
                {
LABEL_100:
                  int v91 = *((_DWORD *)v73 - 1);
                  v73 -= 4;
                  *((_DWORD *)v81 - 1) = v91;
                  v81 -= 4;
                }
                while (v73 != v74);
              }
LABEL_101:
              a1[20] = v81;
              a1[21] = (char *)v69;
              a1[22] = &v80[4 * v79];
              if (v74) {
                operator delete(v74);
              }
              int v66 = v121;
LABEL_77:
              ++v66;
              a1[21] = (char *)v69;
LABEL_78:
              if (++v67 == (int *)v68)
              {
                if (v66)
                {
                  operations_research::sat::BoundedVariableElimination::AddClause((uint64_t)a1, (int *)a1[20], (a1[21] - a1[20]) >> 2);
                  uint64_t v92 = a1[20];
                  unint64_t v93 = (a1[21] - v92) >> 2;
                  BOOL v94 = v93 >= v66;
                  unint64_t v95 = v93 - v66;
                  uint64_t v38 = v115;
                  if (v94) {
                    a1[21] = &v92[4 * v95];
                  }
                  else {
                    std::vector<operations_research::sat::Literal>::__append((uint64_t)v120, -(uint64_t)v66);
                  }
                  goto LABEL_72;
                }
                char v100 = 1;
                uint64_t v38 = v115;
                goto LABEL_116;
              }
              continue;
            }
          }
          else
          {
            uint64_t v80 = 0;
            uint64_t v81 = (char *)(4 * v76);
            *(_DWORD *)(4 * v76) = v70;
            uint64_t v69 = 4 * v76 + 4;
            if (v73 != v74) {
              goto LABEL_92;
            }
          }
          uint64_t v41 = v119;
          goto LABEL_101;
        }
        break;
      }
      uint64_t v96 = a1[20];
      unint64_t v97 = (a1[21] - v96) >> 2;
      unint64_t v98 = v97 - v66;
      if (v97 < v66)
      {
        std::vector<operations_research::sat::Literal>::__append((uint64_t)v120, -(uint64_t)v66);
        uint64_t v38 = v115;
LABEL_72:
        unint64_t v40 = v118;
        goto LABEL_73;
      }
      BOOL v99 = v97 > v98;
      uint64_t v38 = v115;
      unint64_t v40 = v118;
      if (v99) {
        a1[21] = &v96[4 * v98];
      }
LABEL_73:
      ++v40;
      uint64_t v39 = *(void *)v117;
      if (v40 < (uint64_t)(*(void *)v116 - *(void *)v117) >> 2) {
        continue;
      }
      break;
    }
    char v100 = 0;
LABEL_116:
    int v101 = a1[17];
    uint64_t v102 = 4 * v38;
    do
    {
      int v103 = *v41++;
      *(void *)&v101[((unint64_t)v103 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v103);
      v102 -= 4;
    }
    while (v102);
    if ((v100 & 1) == 0)
    {
      uint64_t v6 = *v108;
      uint64_t v7 = *(void *)v109;
      goto LABEL_4;
    }
    ++a1[10];
    int v104 = &a1[16][-v38 - v107];
    a1[15] = v111;
    a1[16] = v104;
    BOOL result = operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(a1, v123, *(int **)&a1[36][8 * v113]);
    if (!result) {
      return result;
    }
    uint64_t v7 = *(void *)v109;
    uint64_t v6 = *v108 - 1;
    int v106 = *(_DWORD *)(*(void *)v109 + 4 * v112);
    *(_DWORD *)(*(void *)v109 + 4 * v112) = *v6;
    *uint64_t v6 = v106;
    *int v108 = v6;
    int v9 = v114 - 1;
LABEL_5:
    int v114 = v9 + 1;
    uint64_t v8 = v114;
    if (v114 < (unint64_t)(((uint64_t)v6 - v7) >> 2)) {
      continue;
    }
    return 1;
  }
}

void sub_23CD6FB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

BOOL operations_research::sat::BoundedVariableElimination::ResolveAllClauseContaining<false,true>(void **a1, int a2)
{
  int v81 = a2;
  uint64_t v68 = *((int *)*a1 + 84);
  uint64_t v4 = operations_research::sat::BinaryImplicationGraph::DirectImplications(a1[2], a2);
  uint64_t v5 = (char *)a1[39] + 24 * a2;
  uint64_t v6 = (_DWORD *)v5[1];
  uint64_t v69 = (_DWORD **)(v5 + 1);
  int v70 = v5;
  unint64_t v71 = v4;
  uint64_t v7 = *v5;
  if (v6 == (_DWORD *)*v5) {
    return 1;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  unint64_t v79 = a1 + 20;
  while (2)
  {
    int v10 = (int *)*((void *)a1[36] + *(int *)(v7 + 4 * v8));
    uint64_t v13 = *v10;
    uint64_t v12 = v10 + 1;
    uint64_t v11 = v13;
    if (!v13) {
      goto LABEL_4;
    }
    uint64_t v73 = *(int *)(v7 + 4 * v8);
    uint64_t v74 = v8;
    int v75 = v9;
    uint64_t v76 = v11;
    uint64_t v14 = (char *)a1[20];
    a1[21] = v14;
    uint64_t v15 = &v12[v11];
    uint64_t v16 = v12;
    unint64_t v77 = v15;
    do
    {
      int v18 = *v16;
      if (*v16 != v81)
      {
        unint64_t v19 = (unint64_t)a1[22];
        if ((unint64_t)v14 < v19)
        {
          *(_DWORD *)uint64_t v14 = v18;
          uint64_t v17 = (uint64_t)(v14 + 4);
LABEL_8:
          a1[21] = (void *)v17;
          uint64_t v14 = (char *)v17;
          goto LABEL_9;
        }
        uint64_t v20 = (char *)*v79;
        uint64_t v21 = v14 - (unsigned char *)*v79;
        uint64_t v22 = v21 >> 2;
        unint64_t v23 = (v21 >> 2) + 1;
        if (v23 >> 62) {
LABEL_76:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v24 = v19 - (void)v20;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          if (v25 >> 62) {
LABEL_77:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          unint64_t v26 = operator new(4 * v25);
          unint64_t v27 = &v26[4 * v22];
          *unint64_t v27 = v18;
          uint64_t v17 = (uint64_t)(v27 + 1);
          if (v14 != v20)
          {
LABEL_21:
            unint64_t v28 = v14 - 4 - v20;
            if (v28 < 0xBC
              || &v26[v21 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4]
              || &v14[-(v28 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v14 - 4
              || (unint64_t)(v14 - v26 - v21) < 0x20)
            {
              int v29 = v14;
            }
            else
            {
              uint64_t v31 = (v28 >> 2) + 1;
              uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
              int v29 = &v14[-v32];
              unint64_t v27 = (_DWORD *)((char *)v27 - v32);
              uint64_t v33 = &v26[4 * v22 - 16];
              uint64_t v34 = v14 - 16;
              uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *uint64_t v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 8;
              }
              while (v35);
              if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_24:
                a1[20] = v27;
                a1[21] = (void *)v17;
                a1[22] = &v26[4 * v25];
                if (!v20)
                {
LABEL_26:
                  uint64_t v15 = v77;
                  goto LABEL_8;
                }
LABEL_25:
                operator delete(v20);
                goto LABEL_26;
              }
            }
            do
            {
              int v30 = *((_DWORD *)v29 - 1);
              v29 -= 4;
              *--unint64_t v27 = v30;
            }
            while (v29 != v20);
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v26 = 0;
          unint64_t v27 = (_DWORD *)(4 * v22);
          *(_DWORD *)(4 * v22) = v18;
          uint64_t v17 = 4 * v22 + 4;
          if (v14 != v20) {
            goto LABEL_21;
          }
        }
        a1[20] = v27;
        a1[21] = (void *)v17;
        a1[22] = &v26[4 * v25];
        if (!v20) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
LABEL_9:
      *(void *)((char *)a1[17] + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      ++v16;
    }
    while (v16 != v15);
    uint64_t v38 = (char *)*v71;
    unint64_t v37 = (char *)v71[1];
    unint64_t v72 = a1[15];
    a1[9] = (char *)a1[9] + v76 + ((v37 - (unsigned char *)*v71) >> 2);
    uint64_t v78 = v37;
    if (v37 != v38)
    {
      while (1)
      {
        int v47 = *(_DWORD *)v38;
        int v80 = v47;
        if (v47 == v81) {
          google::MakeCheckOpString<operations_research::sat::Literal,operations_research::sat::Literal>((int)&v80, (int)&v81, "l != lit");
        }
        unint64_t v48 = *(void *)((char *)a1[17] + (((unint64_t)v47 >> 3) & 0x1FFFFFFFFFFFFFF8));
        if ((v48 >> (v47 & 0x3F ^ 1u))) {
          goto LABEL_46;
        }
        if ((v48 >> (v47 & 0x3F)))
        {
          int v39 = 0;
          goto LABEL_39;
        }
        unint64_t v50 = (char *)a1[21];
        unint64_t v49 = (unint64_t)a1[22];
        if ((unint64_t)v50 >= v49) {
          break;
        }
        *(_DWORD *)unint64_t v50 = v47;
        uint64_t v46 = (uint64_t)(v50 + 4);
LABEL_45:
        a1[21] = (void *)v46;
        operations_research::sat::BoundedVariableElimination::AddClause((uint64_t)a1, (int *)a1[20], (v46 - (uint64_t)a1[20]) >> 2);
        a1[21] = (char *)a1[21] - 4;
LABEL_46:
        v38 += 4;
        if (v38 == v37) {
          goto LABEL_38;
        }
      }
      uint64_t v51 = (char *)*v79;
      uint64_t v52 = v50 - (unsigned char *)*v79;
      uint64_t v53 = v52 >> 2;
      unint64_t v54 = (v52 >> 2) + 1;
      if (v54 >> 62) {
        goto LABEL_76;
      }
      uint64_t v55 = v49 - (void)v51;
      if (v55 >> 1 > v54) {
        unint64_t v54 = v55 >> 1;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        if (v56 >> 62) {
          goto LABEL_77;
        }
        uint64_t v57 = operator new(4 * v56);
        uint64_t v58 = &v57[4 * v53];
        *uint64_t v58 = v47;
        uint64_t v46 = (uint64_t)(v58 + 1);
        if (v50 == v51) {
          goto LABEL_69;
        }
      }
      else
      {
        uint64_t v57 = 0;
        uint64_t v58 = (_DWORD *)(4 * v53);
        *(_DWORD *)(4 * v53) = v47;
        uint64_t v46 = 4 * v53 + 4;
        if (v50 == v51)
        {
LABEL_69:
          a1[20] = v58;
          a1[21] = (void *)v46;
          a1[22] = &v57[4 * v56];
          if (v51) {
            operator delete(v51);
          }
          unint64_t v37 = v78;
          goto LABEL_45;
        }
      }
      unint64_t v59 = v50 - 4 - v51;
      if (v59 < 0x2C) {
        goto LABEL_80;
      }
      if ((unint64_t)(v50 - &v57[v52]) < 0x20) {
        goto LABEL_80;
      }
      uint64_t v60 = (v59 >> 2) + 1;
      uint64_t v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
      long long v62 = &v50[-v61];
      uint64_t v58 = (_DWORD *)((char *)v58 - v61);
      int v63 = &v57[4 * v53 - 16];
      uint64_t v64 = v50 - 16;
      uint64_t v65 = v60 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v66 = *(_OWORD *)v64;
        *(v63 - 1) = *((_OWORD *)v64 - 1);
        *int v63 = v66;
        v63 -= 2;
        v64 -= 32;
        v65 -= 8;
      }
      while (v65);
      unint64_t v50 = v62;
      if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_80:
        do
        {
          int v67 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *--uint64_t v58 = v67;
        }
        while (v50 != v51);
      }
      goto LABEL_69;
    }
LABEL_38:
    int v39 = 1;
LABEL_39:
    int v9 = v75;
    unint64_t v40 = (char *)a1[17];
    uint64_t v41 = 4 * v76;
    do
    {
      int v42 = *v12++;
      *(void *)&v40[((unint64_t)v42 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v42);
      v41 -= 4;
    }
    while (v41);
    if (v39)
    {
      uint64_t v6 = *v69;
      uint64_t v7 = *v70;
      goto LABEL_4;
    }
    a1[10] = (char *)a1[10] + 1;
    int v43 = (char *)a1[16] - v76 - v68;
    a1[15] = v72;
    a1[16] = v43;
    BOOL result = operations_research::sat::BoundedVariableElimination::RemoveLiteralFromClause(a1, v81, *((int **)a1[36] + v73));
    if (result)
    {
      uint64_t v7 = *v70;
      uint64_t v6 = *v69 - 1;
      int v45 = *(_DWORD *)(*v70 + 4 * v74);
      *(_DWORD *)(*v70 + 4 * v74) = *v6;
      *uint64_t v6 = v45;
      *uint64_t v69 = v6;
      int v9 = v75 - 1;
LABEL_4:
      uint64_t v8 = ++v9;
      if (v9 < (unint64_t)(((uint64_t)v6 - v7) >> 2)) {
        continue;
      }
      return 1;
    }
    return result;
  }
}

void sub_23CD7013C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

int **std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,false>(int **result, int **a2, uint64_t a3, char a4)
{
  int v9 = result;
LABEL_2:
  int v10 = v9;
  while (1)
  {
    int v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unint64_t v82 = *(a2 - 1);
          unint64_t v83 = *v10;
          if (*v82 < **v10)
          {
            *int v10 = v82;
            *(a2 - 1) = v83;
          }
          return result;
        case 3:
          uint64_t v84 = *v10;
          uint64_t v85 = v10[1];
          int v86 = *v85;
          int v87 = **v10;
          long long v88 = *(a2 - 1);
          int v89 = *v88;
          if (*v85 >= v87)
          {
            if (v89 < v86)
            {
              v10[1] = v88;
              *(a2 - 1) = v85;
              int v142 = *v10;
              int v141 = v10[1];
              if (*v141 < **v10)
              {
                *int v10 = v141;
                v10[1] = v142;
              }
            }
          }
          else
          {
            if (v89 >= v86)
            {
              *int v10 = v85;
              v10[1] = v84;
              signed __int32 v151 = *(a2 - 1);
              if (*v151 >= v87) {
                return result;
              }
              v10[1] = v151;
            }
            else
            {
              *int v10 = v88;
            }
            *(a2 - 1) = v84;
          }
          return result;
        case 4:
          long long v90 = v10 + 1;
          int v91 = v10[1];
          uint64_t v92 = v10 + 2;
          unint64_t v93 = v10[2];
          BOOL v94 = *v10;
          int v95 = *v91;
          int v96 = **v10;
          int v97 = *v93;
          if (*v91 >= v96)
          {
            if (v97 >= v95)
            {
LABEL_182:
              int v91 = v93;
              int v143 = *(a2 - 1);
              if (*v143 >= *v91) {
                return result;
              }
LABEL_183:
              char *v92 = v143;
              *(a2 - 1) = v91;
              int v147 = *v92;
              uint64_t v148 = *v90;
              int v149 = *v147;
              if (*v147 < *v148)
              {
                v10[1] = v147;
                v10[2] = v148;
                uint64_t v150 = *v10;
                if (v149 < **v10)
                {
                  *int v10 = v147;
                  v10[1] = v150;
                }
              }
              return result;
            }
            *long long v90 = v93;
            char *v92 = v91;
            unint64_t v98 = v10;
            BOOL v99 = v10 + 1;
            BOOL result = (int **)v91;
            if (v97 >= v96)
            {
LABEL_174:
              int v143 = *(a2 - 1);
              if (*v143 >= *v91) {
                return result;
              }
              goto LABEL_183;
            }
          }
          else
          {
            unint64_t v98 = v10;
            BOOL v99 = v10 + 2;
            BOOL result = (int **)*v10;
            if (v97 >= v95)
            {
              *int v10 = v91;
              v10[1] = v94;
              unint64_t v98 = v10 + 1;
              BOOL v99 = v10 + 2;
              BOOL result = (int **)v94;
              if (v97 >= v96) {
                goto LABEL_182;
              }
            }
          }
          *unint64_t v98 = v93;
          *BOOL v99 = v94;
          int v91 = (int *)result;
          goto LABEL_174;
        case 5:
          return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,0>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v110 = (unint64_t)(v12 - 2) >> 1;
        int64_t v111 = v110;
        do
        {
          if (v110 >= v111)
          {
            uint64_t v113 = (2 * v111) | 1;
            int v114 = &v10[v113];
            uint64_t v115 = *v114;
            if (2 * v111 + 2 >= v12)
            {
              BOOL result = &v10[v111];
              unint64_t v118 = *result;
              int v119 = **result;
              if (*v115 >= v119) {
                goto LABEL_150;
              }
            }
            else
            {
              int v116 = *v115;
              int v117 = *v114[1];
              if (*v115 <= v117) {
                int v116 = *v114[1];
              }
              if (*v115 < v117)
              {
                uint64_t v115 = v114[1];
                ++v114;
                uint64_t v113 = 2 * v111 + 2;
              }
              BOOL result = &v10[v111];
              unint64_t v118 = *result;
              int v119 = **result;
              if (v116 >= v119)
              {
LABEL_150:
                while (1)
                {
                  int v122 = v114;
                  *BOOL result = v115;
                  if (v110 < v113) {
                    break;
                  }
                  uint64_t v123 = (2 * v113) | 1;
                  int v114 = &v10[v123];
                  uint64_t v113 = 2 * v113 + 2;
                  uint64_t v115 = *v114;
                  if (v113 < v12)
                  {
                    int v120 = *v115;
                    int v121 = *v114[1];
                    if (*v115 <= v121) {
                      int v120 = *v114[1];
                    }
                    if (*v115 >= v121)
                    {
                      uint64_t v113 = v123;
                    }
                    else
                    {
                      uint64_t v115 = v114[1];
                      ++v114;
                    }
                    BOOL result = v122;
                    if (v120 < v119) {
                      break;
                    }
                  }
                  else
                  {
                    uint64_t v113 = v123;
                    BOOL result = v122;
                    if (*v115 < v119) {
                      break;
                    }
                  }
                }
                char *v122 = v118;
              }
            }
          }
          BOOL v112 = v111-- <= 0;
        }
        while (!v112);
        uint64_t v124 = (unint64_t)v11 >> 3;
        do
        {
          uint64_t v125 = 0;
          uint64_t v126 = *v10;
          uint64_t v127 = v10;
          do
          {
            double v128 = &v127[v125];
            long long v131 = (unsigned int *)v128[1];
            unint64_t v129 = v128 + 1;
            uint64_t v130 = (int *)v131;
            uint64_t v132 = (2 * v125) | 1;
            uint64_t v133 = 2 * v125 + 2;
            if (v133 < v124)
            {
              BOOL result = (int **)*v130;
              if ((int)result < *v129[1])
              {
                uint64_t v130 = v129[1];
                ++v129;
                uint64_t v132 = v133;
              }
            }
            void *v127 = v130;
            uint64_t v127 = v129;
            uint64_t v125 = v132;
          }
          while (v132 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
          if (v129 == --a2)
          {
            *unint64_t v129 = v126;
          }
          else
          {
            *unint64_t v129 = *a2;
            *a2 = v126;
            uint64_t v134 = (char *)v129 - (char *)v10 + 8;
            if (v134 >= 9)
            {
              unint64_t v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
              unsigned int v136 = &v10[v135];
              uint64_t v137 = *v136;
              unint64_t v138 = *v129;
              int v139 = **v129;
              if (**v136 < v139)
              {
                do
                {
                  int v140 = v136;
                  *unint64_t v129 = v137;
                  if (!v135) {
                    break;
                  }
                  unint64_t v135 = (v135 - 1) >> 1;
                  unsigned int v136 = &v10[v135];
                  uint64_t v137 = *v136;
                  unint64_t v129 = v140;
                }
                while (**v136 < v139);
                *int v140 = v138;
              }
            }
          }
          BOOL v112 = v124-- <= 2;
        }
        while (!v112);
      }
      return result;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &v10[(unint64_t)v12 >> 1];
    uint64_t v15 = *(a2 - 1);
    int v16 = *v15;
    if ((unint64_t)v11 < 0x401)
    {
      uint64_t v21 = *v10;
      uint64_t v22 = *v14;
      int v23 = **v10;
      int v24 = **v14;
      if (v23 < v24)
      {
        if (v16 < v23)
        {
          *uint64_t v14 = v15;
          goto LABEL_32;
        }
        *uint64_t v14 = v21;
        *int v10 = v22;
        unint64_t v40 = *(a2 - 1);
        if (*v40 < v24)
        {
          *int v10 = v40;
LABEL_32:
          *(a2 - 1) = v22;
        }
LABEL_33:
        --a3;
        unint64_t v27 = *v10;
        int v28 = **v10;
        if (a4) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      if (v16 >= v23) {
        goto LABEL_33;
      }
      *int v10 = v15;
      *(a2 - 1) = v21;
      unint64_t v26 = *v14;
      if (**v10 >= **v14) {
        goto LABEL_33;
      }
      *uint64_t v14 = *v10;
      *int v10 = v26;
      --a3;
      unint64_t v27 = v26;
      int v28 = *v26;
      if (a4) {
        goto LABEL_56;
      }
LABEL_55:
      if (**(v10 - 1) < v28) {
        goto LABEL_56;
      }
      if (v28 < **(a2 - 1))
      {
        do
        {
          uint64_t v73 = v10[1];
          ++v10;
        }
        while (v28 >= *v73);
      }
      else
      {
        uint64_t v74 = v10 + 1;
        do
        {
          int v10 = v74;
          if (v74 >= a2) {
            break;
          }
          ++v74;
        }
        while (v28 >= **v10);
      }
      int v75 = a2;
      if (v10 < a2)
      {
        int v75 = a2;
        do
          uint64_t v76 = *--v75;
        while (v28 < *v76);
      }
      if (v10 < v75)
      {
        unint64_t v77 = *v10;
        uint64_t v78 = *v75;
        do
        {
          *int v10 = v78;
          signed __int32 *v75 = v77;
          do
          {
            unint64_t v79 = v10[1];
            ++v10;
            unint64_t v77 = v79;
          }
          while (v28 >= *v79);
          do
          {
            int v80 = *--v75;
            uint64_t v78 = v80;
          }
          while (v28 < *v80);
        }
        while (v10 < v75);
      }
      int v81 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        *int v9 = *v81;
      }
      a4 = 0;
      *int v81 = v27;
    }
    else
    {
      uint64_t v17 = *v14;
      int v18 = *v10;
      int v19 = **v14;
      int v20 = **v10;
      if (v19 >= v20)
      {
        if (v16 < v19)
        {
          *uint64_t v14 = v15;
          *(a2 - 1) = v17;
          unint64_t v25 = *v10;
          if (**v14 < **v10)
          {
            *int v10 = *v14;
            *uint64_t v14 = v25;
          }
        }
      }
      else
      {
        if (v16 >= v19)
        {
          *int v10 = v17;
          *uint64_t v14 = v18;
          int v29 = *(a2 - 1);
          if (*v29 >= v20) {
            goto LABEL_24;
          }
          *uint64_t v14 = v29;
        }
        else
        {
          *int v10 = v15;
        }
        *(a2 - 1) = v18;
      }
LABEL_24:
      int v30 = &v10[v13];
      uint64_t v33 = *(v30 - 1);
      uint64_t v31 = v30 - 1;
      uint64_t v32 = v33;
      uint64_t v34 = v10[1];
      int v35 = *v33;
      int v36 = *v34;
      unint64_t v37 = *(a2 - 2);
      int v38 = *v37;
      if (*v33 >= *v34)
      {
        if (v38 < v35)
        {
          int *v31 = v37;
          *(a2 - 2) = v32;
          int v39 = v10[1];
          if (**v31 < *v39)
          {
            v10[1] = *v31;
            int *v31 = v39;
          }
        }
      }
      else
      {
        if (v38 >= v35)
        {
          v10[1] = v32;
          int *v31 = v34;
          uint64_t v41 = *(a2 - 2);
          if (*v41 >= v36) {
            goto LABEL_38;
          }
          int *v31 = v41;
        }
        else
        {
          v10[1] = v37;
        }
        *(a2 - 2) = v34;
      }
LABEL_38:
      int v42 = &v10[v13];
      int v45 = v42[1];
      int v43 = v42 + 1;
      unint64_t v44 = v45;
      uint64_t v46 = v10[2];
      int v47 = *v45;
      int v48 = *v46;
      unint64_t v49 = *(a2 - 3);
      int v50 = *v49;
      if (*v45 >= *v46)
      {
        if (v50 < v47)
        {
          *int v43 = v49;
          *(a2 - 3) = v44;
          uint64_t v51 = v10[2];
          if (**v43 < *v51)
          {
            v10[2] = *v43;
            *int v43 = v51;
          }
        }
      }
      else
      {
        if (v50 >= v47)
        {
          v10[2] = v44;
          *int v43 = v46;
          uint64_t v52 = *(a2 - 3);
          if (*v52 >= v48) {
            goto LABEL_47;
          }
          *int v43 = v52;
        }
        else
        {
          v10[2] = v49;
        }
        *(a2 - 3) = v46;
      }
LABEL_47:
      uint64_t v53 = *v14;
      unint64_t v54 = *v31;
      int v55 = **v14;
      int v56 = **v31;
      uint64_t v57 = *v43;
      int v58 = **v43;
      if (v55 < v56)
      {
        if (v58 >= v55)
        {
          int *v31 = v53;
          *uint64_t v14 = v54;
          uint64_t v31 = v14;
          uint64_t v53 = v57;
          if (v58 >= v56)
          {
            uint64_t v53 = v54;
            goto LABEL_54;
          }
        }
LABEL_53:
        int *v31 = v57;
        *int v43 = v54;
        goto LABEL_54;
      }
      if (v58 >= v55) {
        goto LABEL_54;
      }
      *uint64_t v14 = v57;
      *int v43 = v53;
      int v43 = v14;
      uint64_t v53 = v54;
      if (v58 < v56) {
        goto LABEL_53;
      }
      uint64_t v53 = v57;
LABEL_54:
      unint64_t v59 = *v10;
      *int v10 = v53;
      *uint64_t v14 = v59;
      --a3;
      unint64_t v27 = *v10;
      int v28 = **v10;
      if ((a4 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      uint64_t v60 = 0;
      do
        uint64_t v61 = v10[++v60];
      while (*v61 < v28);
      long long v62 = &v10[v60];
      int v63 = a2;
      if (v60 == 1)
      {
        int v63 = a2;
        do
        {
          if (v62 >= v63) {
            break;
          }
          uint64_t v65 = *--v63;
        }
        while (*v65 >= v28);
      }
      else
      {
        do
          uint64_t v64 = *--v63;
        while (*v64 >= v28);
      }
      if (v62 >= v63)
      {
        unint64_t v71 = v62 - 1;
        if (v62 - 1 == v10) {
          goto LABEL_74;
        }
LABEL_73:
        *int v10 = *v71;
        goto LABEL_74;
      }
      long long v66 = *v63;
      int v67 = &v10[v60];
      uint64_t v68 = v63;
      do
      {
        *int v67 = v66;
        *uint64_t v68 = v61;
        do
        {
          uint64_t v69 = v67[1];
          ++v67;
          uint64_t v61 = v69;
        }
        while (*v69 < v28);
        do
        {
          int v70 = *--v68;
          long long v66 = v70;
        }
        while (*v70 >= v28);
      }
      while (v67 < v68);
      unint64_t v71 = v67 - 1;
      if (v67 - 1 != v10) {
        goto LABEL_73;
      }
LABEL_74:
      *unint64_t v71 = v27;
      if (v62 < v63) {
        goto LABEL_77;
      }
      BOOL v72 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **>(v10, v71);
      int v10 = v71 + 1;
      BOOL result = (int **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **>(v71 + 1, a2);
      if (result)
      {
        a2 = v71;
        if (v72) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v72)
      {
LABEL_77:
        BOOL result = (int **)std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,false>(v9, v71, a3, a4 & 1);
        a4 = 0;
        int v10 = v71 + 1;
      }
    }
  }
  char v100 = v10 + 1;
  BOOL v102 = v10 == a2 || v100 == a2;
  if (a4)
  {
    if (!v102)
    {
      uint64_t v103 = 0;
      int v104 = v10;
      do
      {
        uint64_t v107 = *v104;
        int v106 = v104[1];
        int v104 = v100;
        int v108 = *v106;
        if (*v106 < *v107)
        {
          uint64_t v109 = v103;
          do
          {
            *(int **)((char *)v10 + v109 + 8) = v107;
            if (!v109)
            {
              unint64_t v105 = v10;
              goto LABEL_122;
            }
            uint64_t v107 = *(int **)((char *)v10 + v109 - 8);
            v109 -= 8;
          }
          while (v108 < *v107);
          unint64_t v105 = (int **)((char *)v10 + v109 + 8);
LABEL_122:
          *unint64_t v105 = v106;
        }
        char v100 = v104 + 1;
        v103 += 8;
      }
      while (v104 + 1 != a2);
    }
  }
  else if (!v102)
  {
    do
    {
      signed __int32 v145 = *v9;
      signed __int32 v144 = v9[1];
      int v9 = v100;
      int v146 = *v144;
      if (*v144 < *v145)
      {
        do
        {
          char *v100 = v145;
          signed __int32 v145 = *(v100 - 2);
          --v100;
        }
        while (v146 < *v145);
        char *v100 = v144;
      }
      char v100 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

int **std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,0>(int **result, int **a2, int **a3, int **a4, int **a5)
{
  BOOL v5 = *a2;
  uint64_t v6 = *result;
  int v7 = **a2;
  int v8 = **result;
  int v9 = *a3;
  int v10 = **a3;
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      BOOL v5 = *a3;
      uint64_t v12 = *a4;
      if (**a4 >= *v9) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    uint64_t v11 = *result;
    if (**a2 < **result)
    {
      *BOOL result = *a2;
      *a2 = v11;
      BOOL v5 = *a3;
      uint64_t v12 = *a4;
      if (**a4 >= **a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v10 >= v7)
    {
      *BOOL result = v5;
      *a2 = v6;
      BOOL v5 = *a3;
      if (**a3 >= v8) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      *BOOL result = v9;
    }
    *a3 = v6;
    BOOL v5 = v6;
  }
LABEL_11:
  uint64_t v12 = *a4;
  if (**a4 >= *v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v12;
  *a4 = v5;
  unint64_t v13 = *a2;
  if (**a3 < **a2)
  {
    *a2 = *a3;
    *a3 = v13;
    uint64_t v14 = *result;
    if (**a2 < **result)
    {
      *BOOL result = *a2;
      *a2 = v14;
    }
  }
LABEL_17:
  uint64_t v15 = *a4;
  if (**a5 < **a4)
  {
    *a4 = *a5;
    *a5 = v15;
    int v16 = *a3;
    if (**a4 < **a3)
    {
      *a3 = *a4;
      *a4 = v16;
      uint64_t v17 = *a2;
      if (**a3 < **a2)
      {
        *a2 = *a3;
        *a3 = v17;
        int v18 = *result;
        if (**a2 < **result)
        {
          *BOOL result = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **>(int **a1, int **a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      uint64_t v12 = *(a2 - 1);
      unint64_t v13 = *a1;
      if (*v12 >= **a1) {
        return 1;
      }
      *a1 = v12;
      *(a2 - 1) = v13;
      return 1;
    case 3:
      uint64_t v14 = *a1;
      uint64_t v15 = a1[1];
      int v16 = *v15;
      int v17 = **a1;
      int v18 = *(a2 - 1);
      int v19 = *v18;
      if (*v15 >= v17)
      {
        if (v19 >= v16) {
          return 1;
        }
        a1[1] = v18;
        *(a2 - 1) = v15;
        unint64_t v40 = *a1;
        int v39 = a1[1];
        if (*v39 >= **a1) {
          return 1;
        }
        *a1 = v39;
        a1[1] = v40;
        return 1;
      }
      else if (v19 >= v16)
      {
        *a1 = v15;
        a1[1] = v14;
        uint64_t v46 = *(a2 - 1);
        if (*v46 >= v17) {
          return 1;
        }
        a1[1] = v46;
        *(a2 - 1) = v14;
        return 1;
      }
      else
      {
        *a1 = v18;
        *(a2 - 1) = v14;
        return 1;
      }
    case 4:
      int v20 = a1 + 1;
      uint64_t v21 = a1[1];
      uint64_t v22 = a1 + 2;
      int v23 = a1[2];
      int v24 = *a1;
      int v25 = *v21;
      int v26 = **a1;
      int v27 = *v23;
      if (*v21 < v26)
      {
        int v28 = a1;
        int v29 = a1 + 2;
        int v30 = *a1;
        if (v27 >= v25)
        {
          *a1 = v21;
          a1[1] = v24;
          int v28 = a1 + 1;
          int v29 = a1 + 2;
          int v30 = v24;
          if (v27 >= v26) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *int v28 = v23;
        *int v29 = v24;
        uint64_t v21 = v30;
LABEL_36:
        uint64_t v41 = *(a2 - 1);
        if (*v41 >= *v21) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v27 < v25)
      {
        char *v20 = v23;
        *uint64_t v22 = v21;
        int v28 = a1;
        int v29 = a1 + 1;
        int v30 = v21;
        if (v27 >= v26) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      uint64_t v21 = v23;
      uint64_t v41 = *(a2 - 1);
      if (*v41 >= *v21) {
        return 1;
      }
LABEL_39:
      *uint64_t v22 = v41;
      *(a2 - 1) = v21;
      int v42 = *v22;
      int v43 = *v20;
      int v44 = *v42;
      if (*v42 >= *v43) {
        return 1;
      }
      a1[1] = v42;
      a1[2] = v43;
      int v45 = *a1;
      if (v44 >= **a1) {
        return 1;
      }
      *a1 = v42;
      a1[1] = v45;
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::Inprocessing::SubsumeAndStrenghtenRound(BOOL)::$_0 &,operations_research::sat::SatClause **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      BOOL v4 = a1 + 2;
      uint64_t v3 = a1[2];
      BOOL v5 = a1[1];
      uint64_t v6 = *a1;
      int v7 = *v5;
      int v8 = **a1;
      int v9 = *v3;
      if (*v5 >= v8)
      {
        if (v9 >= v7) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *BOOL v4 = v5;
        int v10 = a1;
        uint64_t v11 = a1 + 1;
      }
      else
      {
        int v10 = a1;
        uint64_t v11 = a1 + 2;
        if (v9 < v7) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        int v10 = a1 + 1;
        uint64_t v11 = a1 + 2;
      }
      if (v9 >= v8) {
        goto LABEL_20;
      }
LABEL_19:
      *int v10 = v3;
      *uint64_t v11 = v6;
LABEL_20:
      uint64_t v31 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v32 = 0;
      for (uint64_t i = 24; ; i += 8)
      {
        uint64_t v34 = *v31;
        int v35 = *v4;
        int v36 = **v31;
        if (v36 < *v35) {
          break;
        }
LABEL_23:
        BOOL v4 = v31++;
        if (v31 == a2) {
          return 1;
        }
      }
      uint64_t v37 = i;
      do
      {
        *(int **)((char *)a1 + v37) = v35;
        uint64_t v38 = v37 - 8;
        if (v37 == 8)
        {
          *a1 = v34;
          if (++v32 != 8) {
            goto LABEL_23;
          }
          return v31 + 1 == a2;
        }
        int v35 = *(int **)((char *)a1 + v37 - 16);
        v37 -= 8;
      }
      while (v36 < *v35);
      *(int **)((char *)a1 + v38) = v34;
      if (++v32 != 8) {
        goto LABEL_23;
      }
      return v31 + 1 == a2;
  }
}

void *std::vector<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    BOOL v4 = operator new(32 * a2);
    *a1 = v4;
    a1[1] = v4;
    BOOL v5 = &v4[4 * a2];
    a1[2] = v5;
    uint64_t v6 = v4;
    if (((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_13;
    }
    uint64_t v7 = ((a2 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    uint64_t v6 = &v4[4 * (v7 & 0xFFFFFFFFFFFFFFELL)];
    int v8 = v4 + 4;
    uint64_t v9 = v7 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v8 - 4) = 0;
      *int v8 = 0;
      v8 += 8;
      v9 -= 2;
    }
    while (v9);
    if (v7 != (v7 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_13:
      do
      {
        *uint64_t v6 = 0;
        v6 += 4;
      }
      while (v6 != v5);
    }
    a1[1] = v5;
  }
  return a1;
}

void sub_23CD711AC(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<absl::lts_2020_02_25::InlinedVector<int,6ul,std::allocator<int>>>::vector((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    uint64_t v11 = a2 - 1;
    uint64_t v12 = a2 - 2;
    unint64_t v13 = a2 - 3;
    uint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (char *)a2 - (char *)v14;
          uint64_t v16 = a2 - v14;
          if (v6 || !v5)
          {
            switch(v16)
            {
              case 0:
              case 1:
                return;
              case 2:
                if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)v14->n128_u32[2])
                {
                  __n128 v141 = *v14;
                  *uint64_t v14 = a2[-1];
                  a2[-1] = v141;
                }
                return;
              case 3:
                uint64_t v69 = v14 + 1;
                signed __int32 v70 = v14[1].n128_i32[2];
                signed __int32 v71 = a2[-1].n128_i32[2];
                if (v70 >= (signed __int32)v14->n128_u32[2])
                {
                  if (v71 < v70)
                  {
                    __n128 v115 = *v69;
                    *uint64_t v69 = *v11;
                    *uint64_t v11 = v115;
                    if ((signed __int32)v14[1].n128_u32[2] < (signed __int32)v14->n128_u32[2])
                    {
                      __n128 v145 = *v14;
                      *uint64_t v14 = *v69;
                      *uint64_t v69 = v145;
                    }
                  }
                }
                else if (v71 < v70)
                {
LABEL_113:
                  __n128 v143 = *v14;
                  *uint64_t v14 = *v11;
                  *uint64_t v11 = v143;
                }
                else
                {
                  __n128 v142 = *v14;
                  *uint64_t v14 = *v69;
                  *uint64_t v69 = v142;
                  if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)v14[1].n128_u32[2])
                  {
                    __n128 v72 = *v69;
                    *uint64_t v69 = *v11;
                    *uint64_t v11 = v72;
                  }
                }
                break;
              case 4:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(v14, v14 + 1, v14 + 2, a2 - 1, a5);
                return;
              case 5:
                uint64_t v11 = v14 + 1;
                uint64_t v73 = v14 + 2;
                uint64_t v74 = v14 + 3;
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(v14, v14 + 1, v14 + 2, v14 + 3, a5);
                if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)v14[3].n128_u32[2])
                {
                  __n128 v75 = *v74;
                  *uint64_t v74 = a2[-1];
                  a2[-1] = v75;
                  if ((signed __int32)v14[3].n128_u32[2] < (signed __int32)v14[2].n128_u32[2])
                  {
                    __n128 v76 = *v73;
                    *uint64_t v73 = *v74;
                    *uint64_t v74 = v76;
                    if ((signed __int32)v14[2].n128_u32[2] < (signed __int32)v14[1].n128_u32[2])
                    {
                      __n128 v77 = *v11;
                      *uint64_t v11 = *v73;
                      *uint64_t v73 = v77;
                      if ((signed __int32)v14[1].n128_u32[2] < (signed __int32)v14->n128_u32[2]) {
                        goto LABEL_113;
                      }
                    }
                  }
                }
                return;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v15 <= 383)
          {
            uint64_t v78 = v14 + 1;
            BOOL v80 = v14 == a2 || v78 == a2;
            if (a4)
            {
              if (!v80)
              {
                uint64_t v81 = 0;
                unint64_t v82 = v14;
                do
                {
                  uint64_t v84 = v78;
                  signed __int32 v85 = v82[1].n128_i32[2];
                  if (v85 < (signed __int32)v82->n128_u32[2])
                  {
                    unint64_t v86 = v84->n128_u64[0];
                    unsigned __int32 v87 = v82[1].n128_u32[3];
                    uint64_t v88 = v81;
                    do
                    {
                      *(__n128 *)((char *)v14 + v88 + 16) = *(__n128 *)((char *)v14 + v88);
                      if (!v88)
                      {
                        uint64_t v83 = (uint64_t)v14;
                        goto LABEL_124;
                      }
                      signed __int32 v89 = *(__int32 *)((char *)&v14->n128_i32[-2] + v88);
                      v88 -= 16;
                    }
                    while (v85 < v89);
                    uint64_t v83 = (uint64_t)&v14[1] + v88;
LABEL_124:
                    *(void *)uint64_t v83 = v86;
                    *(_DWORD *)(v83 + 8) = v85;
                    *(_DWORD *)(v83 + 12) = v87;
                  }
                  uint64_t v78 = v84 + 1;
                  v81 += 16;
                  unint64_t v82 = v84;
                }
                while (&v84[1] != a2);
              }
            }
            else if (!v80)
            {
              do
              {
                int v116 = v78;
                signed __int32 v117 = a1[1].n128_i32[2];
                if (v117 < (signed __int32)a1->n128_u32[2])
                {
                  unint64_t v118 = v78->n128_u64[0];
                  unsigned __int32 v119 = a1[1].n128_u32[3];
                  int v120 = v116;
                  do
                  {
                    __n128 *v120 = v120[-1];
                    signed __int32 v121 = v120[-2].n128_i32[2];
                    --v120;
                  }
                  while (v117 < v121);
                  v120->n128_u64[0] = v118;
                  v120->n128_u32[2] = v117;
                  v120->n128_u32[3] = v119;
                }
                uint64_t v78 = v116 + 1;
                a1 = v116;
              }
              while (&v116[1] != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v14 != a2)
            {
              int64_t v90 = (unint64_t)(v16 - 2) >> 1;
              int64_t v91 = v90;
              do
              {
                if (v90 >= v91)
                {
                  uint64_t v93 = (2 * v91) | 1;
                  BOOL v94 = &v14[v93];
                  if (2 * v91 + 2 < v16)
                  {
                    BOOL v92 = (signed __int32)v94->n128_u32[2] < (signed __int32)v94[1].n128_u32[2];
                    v94 += v92;
                    if (v92) {
                      uint64_t v93 = 2 * v91 + 2;
                    }
                  }
                  int v95 = &v14[v91];
                  signed __int32 v96 = v95->n128_i32[2];
                  if ((signed __int32)v94->n128_u32[2] >= v96)
                  {
                    unint64_t v97 = v95->n128_u64[0];
                    unsigned __int32 v98 = v95->n128_u32[3];
                    do
                    {
                      BOOL v99 = v95;
                      int v95 = v94;
                      *BOOL v99 = *v94;
                      if (v90 < v93) {
                        break;
                      }
                      uint64_t v100 = (2 * v93) | 1;
                      BOOL v94 = &v14[v100];
                      uint64_t v101 = 2 * v93 + 2;
                      if (v101 < v16)
                      {
                        BOOL v92 = (signed __int32)v94->n128_u32[2] < (signed __int32)v94[1].n128_u32[2];
                        v94 += v92;
                        if (v92) {
                          uint64_t v100 = v101;
                        }
                      }
                      uint64_t v93 = v100;
                    }
                    while ((signed __int32)v94->n128_u32[2] >= v96);
                    v95->n128_u64[0] = v97;
                    v95->n128_u32[2] = v96;
                    v95->n128_u32[3] = v98;
                  }
                }
                BOOL v92 = v91-- <= 0;
              }
              while (!v92);
              uint64_t v102 = (unint64_t)v15 >> 4;
              do
              {
                uint64_t v103 = 0;
                __n128 v144 = *v14;
                int v104 = v14;
                do
                {
                  uint64_t v105 = (uint64_t)&v104[v103 + 1];
                  uint64_t v106 = (2 * v103) | 1;
                  uint64_t v107 = 2 * v103 + 2;
                  if (v107 < v102)
                  {
                    BOOL v92 = *(_DWORD *)(v105 + 8) < *(_DWORD *)(v105 + 24);
                    v105 += 16 * v92;
                    if (v92) {
                      uint64_t v106 = v107;
                    }
                  }
                  *int v104 = *(_OWORD *)v105;
                  int v104 = (_OWORD *)v105;
                  uint64_t v103 = v106;
                }
                while (v106 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                if ((__n128 *)v105 == --a2)
                {
                  *(__n128 *)uint64_t v105 = v144;
                }
                else
                {
                  *(__n128 *)uint64_t v105 = *a2;
                  *a2 = v144;
                  uint64_t v108 = v105 - (void)v14 + 16;
                  if (v108 >= 17)
                  {
                    unint64_t v109 = (((unint64_t)v108 >> 4) - 2) >> 1;
                    int64_t v110 = &v14[v109];
                    signed __int32 v111 = *(_DWORD *)(v105 + 8);
                    if ((signed __int32)v110->n128_u32[2] < v111)
                    {
                      uint64_t v112 = *(void *)v105;
                      int v113 = *(_DWORD *)(v105 + 12);
                      do
                      {
                        int v114 = (_OWORD *)v105;
                        uint64_t v105 = (uint64_t)v110;
                        _OWORD *v114 = *v110;
                        if (!v109) {
                          break;
                        }
                        unint64_t v109 = (v109 - 1) >> 1;
                        int64_t v110 = &v14[v109];
                      }
                      while ((signed __int32)v110->n128_u32[2] < v111);
                      *(void *)uint64_t v105 = v112;
                      *(_DWORD *)(v105 + 8) = v111;
                      *(_DWORD *)(v105 + 12) = v113;
                    }
                  }
                }
                BOOL v92 = v102-- <= 2;
              }
              while (!v92);
            }
            return;
          }
          unint64_t v17 = (unint64_t)v16 >> 1;
          int v18 = &v14[(unint64_t)v16 >> 1];
          signed __int32 v19 = a2[-1].n128_i32[2];
          if ((unint64_t)v15 >= 0x801) {
            break;
          }
          signed __int32 v21 = v14->n128_i32[2];
          if (v21 < (signed __int32)v18->n128_u32[2])
          {
            if (v19 >= v21)
            {
              __n128 v130 = *v18;
              *int v18 = *v14;
              a5 = v130;
              *uint64_t v14 = v130;
              if ((signed __int32)a2[-1].n128_u32[2] >= (signed __int32)v14->n128_u32[2]) {
                goto LABEL_32;
              }
              __n128 v123 = *v14;
              *uint64_t v14 = *v11;
            }
            else
            {
              __n128 v123 = *v18;
              *int v18 = *v11;
            }
            a5 = v123;
            *uint64_t v11 = v123;
LABEL_32:
            --a3;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v19 >= v21) {
            goto LABEL_32;
          }
          __n128 v126 = *v14;
          *uint64_t v14 = *v11;
          a5 = v126;
          *uint64_t v11 = v126;
          if ((signed __int32)v14->n128_u32[2] >= (signed __int32)v18->n128_u32[2]) {
            goto LABEL_32;
          }
          __n128 v127 = *v18;
          *int v18 = *v14;
          a5 = v127;
          *uint64_t v14 = v127;
          --a3;
          if (a4) {
            goto LABEL_33;
          }
LABEL_56:
          signed __int32 v29 = v14->n128_i32[2];
          if ((signed __int32)v14[-1].n128_u32[2] < v29) {
            goto LABEL_57;
          }
          if (v29 < (signed __int32)a2[-1].n128_u32[2])
          {
            uint64_t v57 = v14;
            do
            {
              uint64_t v14 = v57 + 1;
              signed __int32 v58 = v57[1].n128_i32[2];
              ++v57;
            }
            while (v29 >= v58);
          }
          else
          {
            unint64_t v59 = v14 + 1;
            do
            {
              uint64_t v14 = v59;
              if (v59 >= a2) {
                break;
              }
              signed __int32 v60 = v59->n128_i32[2];
              ++v59;
            }
            while (v29 >= v60);
          }
          uint64_t v61 = a2;
          if (v14 < a2)
          {
            long long v62 = a2;
            do
            {
              uint64_t v61 = v62 - 1;
              signed __int32 v63 = v62[-1].n128_i32[2];
              --v62;
            }
            while (v29 < v63);
          }
          unint64_t v64 = a1->n128_u64[0];
          unsigned __int32 v65 = a1->n128_u32[3];
          while (v14 < v61)
          {
            __n128 v140 = *v14;
            *uint64_t v14 = *v61;
            a5 = v140;
            *uint64_t v61 = v140;
            do
            {
              signed __int32 v66 = v14[1].n128_i32[2];
              ++v14;
            }
            while (v29 >= v66);
            do
            {
              signed __int32 v67 = v61[-1].n128_i32[2];
              --v61;
            }
            while (v29 < v67);
          }
          uint64_t v68 = v14 - 1;
          BOOL v5 = &v14[-1] >= a1;
          BOOL v6 = &v14[-1] == a1;
          if (&v14[-1] != a1)
          {
            a5 = *v68;
            *a1 = *v68;
          }
          a4 = 0;
          v14[-1].n128_u64[0] = v64;
          v14[-1].n128_u32[2] = v29;
          v14[-1].n128_u32[3] = v65;
        }
        signed __int32 v20 = v18->n128_i32[2];
        if (v20 >= (signed __int32)v14->n128_u32[2])
        {
          if (v19 < v20)
          {
            __n128 v124 = *v18;
            *int v18 = *v11;
            *uint64_t v11 = v124;
            if ((signed __int32)v18->n128_u32[2] < (signed __int32)v14->n128_u32[2])
            {
              __n128 v125 = *v14;
              *uint64_t v14 = *v18;
              *int v18 = v125;
            }
          }
        }
        else
        {
          if (v19 >= v20)
          {
            __n128 v128 = *v14;
            *uint64_t v14 = *v18;
            *int v18 = v128;
            if ((signed __int32)a2[-1].n128_u32[2] >= (signed __int32)v18->n128_u32[2]) {
              goto LABEL_23;
            }
            __n128 v122 = *v18;
            *int v18 = *v11;
          }
          else
          {
            __n128 v122 = *v14;
            *uint64_t v14 = *v11;
          }
          *uint64_t v11 = v122;
        }
LABEL_23:
        uint64_t v22 = v14 + 1;
        int v23 = &v14[v17];
        int v24 = v23 - 1;
        signed __int32 v25 = v23[-1].n128_i32[2];
        signed __int32 v26 = a2[-2].n128_i32[2];
        if (v25 >= (signed __int32)v14[1].n128_u32[2])
        {
          if (v26 < v25)
          {
            __n128 v129 = *v24;
            *int v24 = *v12;
            *uint64_t v12 = v129;
            if ((signed __int32)v24->n128_u32[2] < (signed __int32)v14[1].n128_u32[2])
            {
              __n128 v28 = *v22;
              *uint64_t v22 = *v24;
              *int v24 = v28;
            }
          }
        }
        else
        {
          if (v26 >= v25)
          {
            __n128 v30 = *v22;
            *uint64_t v22 = *v24;
            *int v24 = v30;
            if ((signed __int32)a2[-2].n128_u32[2] >= (signed __int32)v24->n128_u32[2]) {
              goto LABEL_37;
            }
            __n128 v131 = *v24;
            *int v24 = *v12;
            __n128 v27 = v131;
          }
          else
          {
            __n128 v27 = *v22;
            *uint64_t v22 = *v12;
          }
          *uint64_t v12 = v27;
        }
LABEL_37:
        uint64_t v31 = v14 + 2;
        int v32 = &v14[v17];
        uint64_t v33 = v32 + 1;
        signed __int32 v34 = v32[1].n128_i32[2];
        signed __int32 v35 = a2[-3].n128_i32[2];
        if (v34 >= (signed __int32)v14[2].n128_u32[2])
        {
          if (v35 < v34)
          {
            __n128 v132 = *v33;
            *uint64_t v33 = *v13;
            *unint64_t v13 = v132;
            if ((signed __int32)v33->n128_u32[2] < (signed __int32)v14[2].n128_u32[2])
            {
              __n128 v37 = *v31;
              __n128 *v31 = *v33;
              *uint64_t v33 = v37;
            }
          }
        }
        else
        {
          if (v35 >= v34)
          {
            __n128 v38 = *v31;
            __n128 *v31 = *v33;
            *uint64_t v33 = v38;
            if ((signed __int32)a2[-3].n128_u32[2] >= (signed __int32)v33->n128_u32[2]) {
              goto LABEL_46;
            }
            __n128 v133 = *v33;
            *uint64_t v33 = *v13;
            __n128 v36 = v133;
          }
          else
          {
            __n128 v36 = *v31;
            __n128 *v31 = *v13;
          }
          *unint64_t v13 = v36;
        }
LABEL_46:
        signed __int32 v39 = v18->n128_i32[2];
        signed __int32 v40 = v33->n128_i32[2];
        if (v39 >= (signed __int32)v24->n128_u32[2])
        {
          if (v40 < v39)
          {
            __n128 v135 = *v18;
            *int v18 = *v33;
            *uint64_t v33 = v135;
            if ((signed __int32)v18->n128_u32[2] < (signed __int32)v24->n128_u32[2])
            {
              __n128 v136 = *v24;
              *int v24 = *v18;
              *int v18 = v136;
            }
          }
        }
        else
        {
          if (v40 >= v39)
          {
            __n128 v137 = *v24;
            *int v24 = *v18;
            *int v18 = v137;
            if ((signed __int32)v33->n128_u32[2] >= (signed __int32)v18->n128_u32[2]) {
              goto LABEL_55;
            }
            __n128 v134 = *v18;
            *int v18 = *v33;
          }
          else
          {
            __n128 v134 = *v24;
            *int v24 = *v33;
          }
          *uint64_t v33 = v134;
        }
LABEL_55:
        __n128 v138 = *v14;
        *uint64_t v14 = *v18;
        a5 = v138;
        *int v18 = v138;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        signed __int32 v29 = v14->n128_i32[2];
LABEL_57:
        uint64_t v41 = 0;
        unint64_t v42 = v14->n128_u64[0];
        unsigned __int32 v43 = v14->n128_u32[3];
        do
          signed __int32 v44 = v14[++v41].n128_i32[2];
        while (v44 < v29);
        int v45 = &v14[v41];
        uint64_t v46 = a2;
        if (v41 == 1)
        {
          unint64_t v49 = a2;
          while (v45 < v49)
          {
            int v47 = v49 - 1;
            signed __int32 v50 = v49[-1].n128_i32[2];
            --v49;
            if (v50 < v29) {
              goto LABEL_65;
            }
          }
          int v47 = v49;
          uint64_t v14 = v45;
        }
        else
        {
          do
          {
            int v47 = v46 - 1;
            signed __int32 v48 = v46[-1].n128_i32[2];
            --v46;
          }
          while (v48 >= v29);
LABEL_65:
          uint64_t v14 = v45;
          if (v45 < v47)
          {
            uint64_t v51 = v47;
            do
            {
              __n128 v139 = *v14;
              *uint64_t v14 = *v51;
              a5 = v139;
              *uint64_t v51 = v139;
              do
              {
                signed __int32 v52 = v14[1].n128_i32[2];
                ++v14;
              }
              while (v52 < v29);
              do
              {
                signed __int32 v53 = v51[-1].n128_i32[2];
                --v51;
              }
              while (v53 >= v29);
            }
            while (v14 < v51);
          }
        }
        unint64_t v54 = v14 - 1;
        if (&v14[-1] != a1)
        {
          a5 = *v54;
          *a1 = *v54;
        }
        v14[-1].n128_u64[0] = v42;
        v14[-1].n128_u32[2] = v29;
        v14[-1].n128_u32[3] = v43;
        if (v45 >= v47) {
          break;
        }
LABEL_76:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *,false>(a1, &v14[-1], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v55 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(a1, v14 - 1, a5);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(v14, a2, v56))
      {
        break;
      }
      if (!v55) {
        goto LABEL_76;
      }
    }
    a2 = v14 - 1;
    if (!v55) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v5 = a2 - a1;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)a1->n128_u32[2])
      {
        __n128 v7 = *a1;
        *a1 = a2[-1];
        a2[-1] = v7;
      }
      return result;
    case 3:
      int v8 = a1 + 1;
      uint64_t v9 = a2 - 1;
      signed __int32 v10 = a1[1].n128_i32[2];
      signed __int32 v11 = a2[-1].n128_i32[2];
      if (v10 >= (signed __int32)a1->n128_u32[2])
      {
        if (v11 < v10)
        {
          __n128 v26 = *v8;
          *int v8 = *v9;
          *uint64_t v9 = v26;
          if ((signed __int32)a1[1].n128_u32[2] < (signed __int32)a1->n128_u32[2])
          {
            __n128 v27 = *a1;
            *a1 = *v8;
            *int v8 = v27;
          }
        }
      }
      else
      {
        if (v11 >= v10)
        {
          __n128 v30 = *a1;
          *a1 = *v8;
          *int v8 = v30;
          if ((signed __int32)a2[-1].n128_u32[2] >= (signed __int32)a1[1].n128_u32[2]) {
            return result;
          }
          __n128 v12 = *v8;
          *int v8 = *v9;
        }
        else
        {
          __n128 v12 = *a1;
          *a1 = *v9;
        }
        *uint64_t v9 = v12;
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      signed __int32 v19 = a1 + 1;
      signed __int32 v20 = a1 + 2;
      signed __int32 v21 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if ((signed __int32)a2[-1].n128_u32[2] < (signed __int32)a1[3].n128_u32[2])
      {
        __n128 v22 = *v21;
        __n128 *v21 = a2[-1];
        a2[-1] = v22;
        if ((signed __int32)a1[3].n128_u32[2] < (signed __int32)a1[2].n128_u32[2])
        {
          __n128 v23 = *v20;
          __n128 *v20 = *v21;
          __n128 *v21 = v23;
          if ((signed __int32)a1[2].n128_u32[2] < (signed __int32)a1[1].n128_u32[2])
          {
            __n128 v24 = *v19;
            *signed __int32 v19 = *v20;
            __n128 *v20 = v24;
            if ((signed __int32)a1[1].n128_u32[2] < (signed __int32)a1->n128_u32[2])
            {
              __n128 v25 = *a1;
              *a1 = *v19;
              *signed __int32 v19 = v25;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v13 = a1 + 2;
      uint64_t v14 = a1 + 1;
      signed __int32 v15 = a1[1].n128_i32[2];
      signed __int32 v16 = a1->n128_i32[2];
      signed __int32 v17 = a1[2].n128_i32[2];
      if (v15 >= v16)
      {
        if (v17 < v15)
        {
          __n128 v28 = *v14;
          *uint64_t v14 = *v13;
          *unint64_t v13 = v28;
          if ((signed __int32)a1[1].n128_u32[2] < v16)
          {
            __n128 v29 = *a1;
            *a1 = *v14;
            *uint64_t v14 = v29;
          }
        }
      }
      else
      {
        if (v17 >= v15)
        {
          __n128 v31 = *a1;
          *a1 = *v14;
          *uint64_t v14 = v31;
          if (v17 >= (signed __int32)a1[1].n128_u32[2]) {
            goto LABEL_29;
          }
          __n128 v18 = *v14;
          *uint64_t v14 = *v13;
        }
        else
        {
          __n128 v18 = *a1;
          *a1 = *v13;
        }
        *unint64_t v13 = v18;
      }
LABEL_29:
      int v32 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v33 = 0;
      int v34 = 0;
      break;
  }
  while (1)
  {
    signed __int32 v35 = v32->n128_i32[2];
    if (v35 < (signed __int32)v13->n128_u32[2]) {
      break;
    }
LABEL_32:
    unint64_t v13 = v32;
    v33 += 16;
    if (++v32 == a2) {
      return 1;
    }
  }
  unint64_t v36 = v32->n128_u64[0];
  unsigned __int32 v37 = v32->n128_u32[3];
  uint64_t v38 = v33;
  do
  {
    *(__n128 *)((char *)a1 + v38 + 48) = *(__n128 *)((char *)a1 + v38 + 32);
    if (v38 == -32)
    {
      a1->n128_u64[0] = v36;
      a1->n128_u32[2] = v35;
      a1->n128_u32[3] = v37;
      if (++v34 != 8) {
        goto LABEL_32;
      }
      return &v32[1] == a2;
    }
    signed __int32 v39 = *(__int32 *)((char *)&a1[1].n128_i32[2] + v38);
    v38 -= 16;
  }
  while (v35 < v39);
  signed __int32 v40 = (char *)a1 + v38;
  *((void *)v40 + 6) = v36;
  v40 += 48;
  *((_DWORD *)v40 + 2) = v35;
  *((_DWORD *)v40 + 3) = v37;
  if (++v34 != 8) {
    goto LABEL_32;
  }
  return &v32[1] == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::StampingSimplifier::ProcessClauses(void)::Entry *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  signed __int32 v5 = a2->n128_i32[2];
  signed __int32 v6 = a3->n128_i32[2];
  if (v5 >= (signed __int32)a1->n128_u32[2])
  {
    if (v6 < v5)
    {
      BOOL result = *a2;
      *a2 = *a3;
      *a3 = result;
      if ((signed __int32)a2->n128_u32[2] < (signed __int32)a1->n128_u32[2])
      {
        BOOL result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      BOOL result = *a1;
      *a1 = *a3;
LABEL_9:
      *a3 = result;
      goto LABEL_10;
    }
    BOOL result = *a1;
    *a1 = *a2;
    *a2 = result;
    if ((signed __int32)a3->n128_u32[2] < (signed __int32)a2->n128_u32[2])
    {
      BOOL result = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((signed __int32)a4->n128_u32[2] < (signed __int32)a3->n128_u32[2])
  {
    BOOL result = *a3;
    *a3 = *a4;
    *a4 = result;
    if ((signed __int32)a3->n128_u32[2] < (signed __int32)a2->n128_u32[2])
    {
      BOOL result = *a2;
      *a2 = *a3;
      *a3 = result;
      if ((signed __int32)a2->n128_u32[2] < (signed __int32)a1->n128_u32[2])
      {
        BOOL result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

void std::deque<operations_research::sat::Literal>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    signed __int32 v6 = *(void **)(a1 + 8);
    signed __int32 v5 = *(char **)(a1 + 16);
    __n128 v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)signed __int32 v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        int v34 = (char *)operator new(8 * v31);
        signed __int32 v35 = &v34[8 * v32];
        unint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        signed __int32 v5 = v35;
        if (!v37)
        {
          signed __int32 v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            uint64_t v74 = &v34[8 * v32];
            signed __int32 v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              signed __int32 v40 = &v35[v76];
              v7 += v76;
              __n128 v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            signed __int32 v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)signed __int32 v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    signed __int32 v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      __n128 v7 = *(char **)(a1 + 8);
    }
    signed __int32 v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      int64_t v91 = operator new(0x1000uLL);
      std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v91);
      return;
    }
    int64_t v91 = operator new(0x1000uLL);
    std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    signed __int32 v5 = *(char **)(a1 + 16);
    __n128 v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        int v34 = (char *)operator new(8 * v42);
        signed __int32 v35 = &v34[8 * v43];
        unint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        signed __int32 v5 = v35;
        if (!v37)
        {
          signed __int32 v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            unint64_t v82 = &v34[8 * v43];
            int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              int v47 = &v35[v84];
              v7 += v84;
              signed __int32 v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          signed __int32 v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  __n128 v25 = (char *)operator new(8 * v24);
  __n128 v26 = operator new(0x1000uLL);
  __n128 v27 = &v25[8 * v21];
  __n128 v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    int64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v49 = (char *)operator new(8 * v48);
      __n128 v27 = &v49[8 * (v48 >> 2)];
      __n128 v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      __n128 v25 = v49;
      *(void *)__n128 v27 = v90;
      __n128 v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)__n128 v27 = v26;
      __n128 v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          signed __int32 v60 = (char *)operator new(8 * v59);
          __n128 v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          signed __int32 v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          __n128 v29 = v53;
          if (!v37)
          {
            __n128 v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            unint64_t v64 = &v60[8 * v61];
            unsigned __int32 v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            unint64_t v64 = &v60[8 * v61];
            unsigned __int32 v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v64 = &v53[v68];
            unsigned __int32 v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            signed __int32 v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)signed __int32 v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)unint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          __n128 v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          signed __int32 v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          __n128 v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          __n128 v25 = v27;
        }
      }
      else
      {
        signed __int32 v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      __n128 v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)__n128 v27 = v26;
  __n128 v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  signed __int32 v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_23CD72790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23CD727AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CD727C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CD727D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DF5A2, (google::protobuf::internal *)0x2DF5A0, "ortools/gen/ortools/sat/sat_parameters.pb.cc", a4);
  operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_ = 0;
  unk_26AEE1250 = 0;
  qword_26AEE1258 = 0;
  unint64_t v4 = (char *)operator new(0x48uLL);
  strcpy(v4, "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART");
  operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_ = (uint64_t)v4;
  unk_26AEE1250 = xmmword_23CE834C0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyString, (void (*)(const void *))&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_, v5);
  operations_research::sat::_SatParameters_default_instance_ = (uint64_t)&unk_26F0C4610;
  *(void *)algn_26AEE12F8 = 0;
  xmmword_26AEE1300 = 0u;
  unk_26AEE1310 = 0u;
  qword_26AEE1320 = 0;
  operations_research::sat::SatParameters::SharedCtor((operations_research::sat::SatParameters *)&operations_research::sat::_SatParameters_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&operations_research::sat::_SatParameters_default_instance_, v6);
}

void sub_23CD728E8(_Unwind_Exception *a1)
{
}

uint64_t operations_research::sat::SatParameters_VariableOrder_descriptor(operations_research::sat *this)
{
  return file_level_enum_descriptors_ortools_2fsat_2fsat_5fparameters_2eproto;
}

uint64_t operations_research::sat::SatParameters_Polarity_descriptor(operations_research::sat *this)
{
  return qword_26AED0BE0;
}

uint64_t operations_research::sat::SatParameters_RestartAlgorithm_descriptor(operations_research::sat *this)
{
  return qword_26AED0C08;
}

BOOL operations_research::sat::SatParameters_RestartAlgorithm_IsValid(operations_research::sat *this)
{
  return this < 5;
}

double operations_research::sat::SatParameters::SharedCtor(operations_research::sat::SatParameters *this)
{
  unint64_t v2 = (char *)this + 264;
  if (atomic_load_explicit(scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_SatParameters_ortools_2fsat_2fsat_5fparameters_2eproto);
  }
  *((void *)this + 7) = &operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = xmmword_23CE8E2B0;
  *((_DWORD *)this + 52) = 10000;
  *(_OWORD *)((char *)this + 216) = xmmword_23CE8E2C0;
  *(_OWORD *)((char *)this + 232) = xmmword_23CE8E2D0;
  *(_OWORD *)((char *)this + 248) = xmmword_23CE8E2E0;
  *(_OWORD *)unint64_t v2 = xmmword_23CE8E2F0;
  *((void *)this + 35) = 0x7FF0000000000000;
  *((_OWORD *)this + 18) = xmmword_23CE8E300;
  *((void *)this + 38) = 0xC801010101;
  *((void *)this + 39) = 0x3FE0000000000000;
  *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0x1F400000001;
  *((void *)this + 41) = 0x403E000000000000;
  *((void *)this + 42) = 0x500000003;
  *((void *)this + 43) = 0x3FF0000000000000;
  *((void *)this + 44) = 0x138800000032;
  *((void *)this + 45) = 0x3FF6666666666666;
  *((_OWORD *)this + 23) = xmmword_23CE8E310;
  *((_DWORD *)this + 96) = 1;
  *(void *)(v2 + 124) = 0x101010101010101;
  *(_OWORD *)(v2 + 132) = xmmword_23CE8E320;
  *(_OWORD *)(v2 + 148) = xmmword_23CE8E330;
  *((_DWORD *)this + 107) = 2;
  *((void *)this + 54) = 0x3FA999999999999ALL;
  *((void *)this + 55) = 0x101010101010101;
  *((_OWORD *)this + 28) = xmmword_23CE8E340;
  *((void *)this + 58) = 100;
  *((void *)this + 59) = 0x416312D000000000;
  *((_OWORD *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = xmmword_23CE8E350;
  *((void *)this + 62) = 0x101010100000035;
  *((void *)this + 63) = 0x3F1A36E2EB1C432DLL;
  *((void *)this + 64) = 0x300000001;
  *((void *)this + 65) = 0x426D1A94A2000000;
  *((void *)this + 66) = 0x4197D78400000000;
  *((void *)this + 67) = 0x700000001;
  *((_WORD *)this + 272) = 257;
  *((unsigned char *)this + 546) = 1;
  *((_DWORD *)this + 137) = 10;
  *((void *)this + 69) = 0x4202A05F20000000;
  *(void *)&double result = 0x3E800000001;
  *((void *)this + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0x3E800000001;
  *((void *)this + 71) = 0x3FE999999999999ALL;
  return result;
}

operations_research::sat::SatParameters *operations_research::sat::SatParameters::SatParameters(operations_research::sat::SatParameters *this, google::protobuf::Arena *a2)
{
  *(void *)this = &unk_26F0C4610;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = a2;
  operations_research::sat::SatParameters::SharedCtor(this);
  return this;
}

void sub_23CD72BF8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  _Unwind_Resume(a1);
}

operations_research::sat::SatParameters *operations_research::sat::SatParameters::SatParameters(operations_research::sat::SatParameters *this, const operations_research::sat::SatParameters *a2)
{
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *(void *)this = &unk_26F0C4610;
  long long v5 = *((_OWORD *)a2 + 1);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_OWORD *)this + 1) = v5;
  *(void *)((char *)this + 44) = 0;
  *(void *)((char *)this + 36) = 0;
  *((_DWORD *)this + 13) = 0;
  int v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v6);
    __n128 v7 = (void *)*((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy(v7, *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  uint64_t v8 = *((void *)a2 + 1);
  if (v8)
  {
    if (*v4) {
      uint64_t v9 = (char *)((*v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v4);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v9, (const google::protobuf::UnknownFieldSet *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8));
  }
  *((void *)this + 7) = &operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v10 = (google::protobuf::Arena *)(*v4 & 0xFFFFFFFFFFFFFFFELL);
    if (*v4) {
      uint64_t v10 = *(google::protobuf::Arena **)v10;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, v10, *((long long **)a2 + 7));
  }
  memcpy((char *)this + 64, (char *)a2 + 64, 0x200uLL);
  return this;
}

void sub_23CD72D34(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatParameters::~SatParameters(operations_research::sat::SatParameters *this)
{
  uint64_t v2 = *((void *)this + 7);
  if ((uint64_t *)v2 != &operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_
    && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECF2BC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v5 && v6 == 0)
    {
      uint64_t v8 = *(void **)(v5 + 8);
      if (v8 != *(void **)(v5 + 16))
      {
        google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)(v5 + 8));
        uint64_t v8 = *(void **)(v5 + 8);
      }
      if (v8)
      {
        *(void *)(v5 + 16) = v8;
        operator delete(v8);
      }
      MEMORY[0x23ECF2BC0](v5, 0x20C40DC1BFBCFLL);
    }
  }
  google::protobuf::RepeatedField<BOOL>::~RepeatedField((uint64_t)this + 40);
}

{
  uint64_t vars8;

  operations_research::sat::SatParameters::~SatParameters(this);

  JUMPOUT(0x23ECF2BC0);
}

uint64_t operations_research::sat::SatParameters::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void operations_research::sat::SatParameters::Clear(operations_research::sat::SatParameters *this)
{
  uint64_t v2 = (char *)this + 16;
  unsigned int v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  if (v3)
  {
    uint64_t v4 = (std::string *)*((void *)this + 7);
    if (v4 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_) {
      std::string::operator=(v4, (const std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_);
    }
  }
  if ((v3 & 0xFE) != 0)
  {
    *((unsigned char *)this + 96) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
  }
  if ((v3 & 0xFF00) != 0)
  {
    *(void *)((char *)this + 105) = 0;
    *(void *)((char *)this + 97) = 0;
    *((unsigned char *)this + 121) = 0;
    *(void *)((char *)this + 113) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(_DWORD *)((char *)this + 129) = 0;
    *(void *)((char *)this + 122) = 0;
  }
  if (HIBYTE(v3))
  {
    *(void *)((char *)this + 14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
    *(void *)((char *)this + 133) = 0;
  }
  unsigned int v5 = *((_DWORD *)this + 5);
  if ((_BYTE)v5) {
    *(void *)((char *)this + 148) = 0;
  }
  if ((v5 & 0xFF00) != 0)
  {
    *((_DWORD *)this + 47) = 0;
    *(_OWORD *)((char *)this + 172) = 0u;
    *(_OWORD *)((char *)this + 156) = 0u;
    *((void *)this + 24) = 0x100000002;
  }
  if ((v5 & 0xFF0000) != 0)
  {
    *((void *)this + 25) = 0x271000000002;
    *((_DWORD *)this + 52) = 10000;
    *(_OWORD *)((char *)this + 216) = xmmword_23CE8E2C0;
    *(_OWORD *)((char *)this + 232) = xmmword_23CE8E2D0;
    *((void *)this + 31) = 0x3FEE666666666666;
  }
  if (HIBYTE(v5))
  {
    *((void *)this + 32) = 0x3F847AE147AE147BLL;
    *(_OWORD *)(v2 + 248) = xmmword_23CE8E2F0;
    *((void *)this + 35) = 0x7FF0000000000000;
    *((_OWORD *)this + 18) = xmmword_23CE8E300;
  }
  unsigned int v6 = *((_DWORD *)this + 6);
  if ((_BYTE)v6)
  {
    *((void *)this + 38) = 0xC801010101;
    *((void *)this + 39) = 0x3FE0000000000000;
    *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0x1F400000001;
  }
  if ((v6 & 0xFF00) != 0)
  {
    *((void *)this + 41) = 0x403E000000000000;
    *((void *)this + 42) = 0x500000003;
    *((void *)this + 43) = 0x3FF0000000000000;
    *((void *)this + 44) = 0x138800000032;
    *((void *)this + 45) = 0x3FF6666666666666;
    *((void *)this + 46) = 0x7FF0000000000000;
  }
  if ((v6 & 0xFF0000) != 0)
  {
    *((void *)this + 47) = 0x3FF0000000000000;
    *((void *)this + 48) = 0x101010100000001;
    *((_WORD *)this + 196) = 257;
  }
  if (HIBYTE(v6))
  {
    *((_WORD *)this + 197) = 257;
    *(_OWORD *)(v2 + 38google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = xmmword_23CE8E320;
    *(void *)((char *)this + 412) = 0x1FFFFFFFFLL;
  }
  unsigned int v7 = *((_DWORD *)this + 7);
  if ((_BYTE)v7)
  {
    *((_DWORD *)this + 105) = 1;
    *((void *)this + 53) = 0x201010101;
    *((void *)this + 54) = 0x3FA999999999999ALL;
    *((unsigned char *)this + 44google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 1;
  }
  if ((v7 & 0xFF00) != 0)
  {
    *(_DWORD *)((char *)this + 441) = 16843009;
    *(void *)((char *)this + 444) = 0x25801010101;
  }
  if ((v7 & 0xFF0000) != 0)
  {
    *((_DWORD *)this + 113) = 16843009;
    *((void *)this + 57) = 0x3200000064;
    *((void *)this + 58) = 100;
    *((void *)this + 59) = 0x416312D000000000;
  }
  if (HIBYTE(v7))
  {
    *((_OWORD *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = xmmword_23CE8E350;
    *((void *)this + 62) = 0x101010100000035;
    *((void *)this + 63) = 0x3F1A36E2EB1C432DLL;
  }
  int v8 = *((_DWORD *)this + 8);
  if ((_BYTE)v8)
  {
    *((void *)this + 64) = 0x300000001;
    *((void *)this + 65) = 0x426D1A94A2000000;
    *((void *)this + 66) = 0x4197D78400000000;
    *((void *)this + 67) = 0x700000001;
    *((_WORD *)this + 272) = 257;
  }
  if ((v8 & 0x3F00) != 0)
  {
    *((unsigned char *)this + 546) = 1;
    *((_DWORD *)this + 137) = 10;
    *((void *)this + 69) = 0x4202A05F20000000;
    *((void *)this + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0x3E800000001;
    *((void *)this + 71) = 0x3FE999999999999ALL;
  }
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((_DWORD *)v2 + 4) = 0;
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 1) != 0 && *(void *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8) != *(void *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 16))
  {
    google::protobuf::UnknownFieldSet::ClearFallback((google::protobuf::UnknownFieldSet *)((v9 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8));
  }
}

google::protobuf::UnknownFieldSet *operations_research::sat::SatParameters::_InternalParse(operations_research::sat::SatParameters *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::internal::ParseContext *a3, uint64_t a4, google::protobuf::internal::ParseContext *a5)
{
  int v8 = (unint64_t *)((char *)this + 8);
  uint64_t v9 = (std::string **)((char *)this + 56);
  uint64_t v10 = (unsigned int *)((char *)this + 40);
  while (1)
  {
LABEL_5:
    if ((unint64_t)a2 >= *(void *)a3)
    {
      if ((google::protobuf::UnknownFieldSet *)((char *)a2 - *((void *)a3 + 1)) == (google::protobuf::UnknownFieldSet *)*((int *)a3 + 7)) {
        return a2;
      }
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(a3, (const char *)a2, *((_DWORD *)a3 + 23));
      if (v266) {
        return a2;
      }
    }
    uint64_t v14 = (char *)a2 + 1;
    unsigned int v15 = *(unsigned __int8 *)a2;
    if ((*(char *)a2 & 0x80000000) == 0)
    {
      unsigned int v16 = (v15 >> 3) - 1;
      goto LABEL_8;
    }
    unsigned int v18 = v15 + (*v14 << 7);
    unsigned int v15 = v18 - 128;
    if (*v14 < 0) {
      break;
    }
    uint64_t v14 = (char *)a2 + 2;
    unsigned int v16 = (v15 >> 3) - 1;
    if (v16 <= 0xA5) {
      goto LABEL_8;
    }
LABEL_18:
    if (v15) {
      BOOL v21 = (v15 & 7) == 4;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21)
    {
      *((_DWORD *)a3 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v15 - 1;
      return (google::protobuf::UnknownFieldSet *)v14;
    }
    if (*v8) {
      uint64_t v22 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v22 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
    }
    uint64_t v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v15, (google::protobuf::UnknownFieldSet *)v22, (google::protobuf::UnknownFieldSet *)v14, (const char *)a3, a5);
LABEL_4:
    a2 = v13;
    if (!v13) {
      return a2;
    }
  }
  uint64_t TagFallback = google::protobuf::internal::ReadTagFallback(a2, (const char *)(v18 - 128));
  if (!TagFallback) {
    return 0;
  }
  uint64_t v14 = (char *)TagFallback;
  unsigned int v15 = v20;
  unsigned int v16 = (v20 >> 3) - 1;
  if (v16 > 0xA5) {
    goto LABEL_18;
  }
LABEL_8:
  switch(v16)
  {
    case 0u:
      if (v15 != 8) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v133 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v133 - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v133 - 128));
          if (!a2) {
            return a2;
          }
          uint64_t v17 = v249;
          if (v249 <= 2)
          {
LABEL_12:
            *((_DWORD *)this + 4) |= 2u;
            *((_DWORD *)this + 16) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2) {
            goto LABEL_12;
          }
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_12;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 1;
      goto LABEL_705;
    case 1u:
      if (v15 != 16) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v137 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v137 - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v137 - 128));
          if (!a2) {
            return a2;
          }
          uint64_t v17 = v252;
          if (v252 <= 4)
          {
LABEL_44:
            *((_DWORD *)this + 5) |= 0x8000u;
            *((_DWORD *)this + 49) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 4) {
            goto LABEL_44;
          }
        }
      }
      else if (v17 <= 4)
      {
        goto LABEL_44;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 2;
      goto LABEL_705;
    case 3u:
      if (v15 != 32) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v145 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v145 - 128);
        if (*(char *)a2 < 0)
        {
          a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v145 - 128));
          if (!a2) {
            return a2;
          }
          uint64_t v17 = v265;
          if (v265 <= 3)
          {
LABEL_556:
            *((_DWORD *)this + 5) |= 0x10000u;
            *((_DWORD *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 3) {
            goto LABEL_556;
          }
        }
      }
      else if (v17 <= 3)
      {
        goto LABEL_556;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 4;
      goto LABEL_705;
    case 0xAu:
      if (v15 != 88) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v25) = *v14;
      if ((v25 & 0x80) == 0) {
        goto LABEL_49;
      }
      __n128 v25 = (const char *)(v25 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v25);
        *((_DWORD *)this + 51) = v148;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_49:
        *((_DWORD *)this + 51) = v25;
      }
      goto LABEL_5;
    case 0xCu:
      if (v15 != 104) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x40000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v26) = *v14;
      if ((v26 & 0x80) == 0) {
        goto LABEL_54;
      }
      __n128 v26 = (const char *)(v26 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v26);
        *((_DWORD *)this + 52) = v149;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_54:
        *((_DWORD *)this + 52) = v26;
      }
      goto LABEL_5;
    case 0xEu:
      if (v15 != 121) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x80000u;
      *((void *)this + 27) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0xFu:
      if (v15 != 129) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x100000u;
      *((void *)this + 28) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x10u:
      if (v15 != 137) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x200000u;
      *((void *)this + 29) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x11u:
      if (v15 != 145) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x400000u;
      *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x15u:
      if (v15 != 177) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x800000u;
      *((void *)this + 31) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x16u:
      if (v15 != 185) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x1000000u;
      *((void *)this + 32) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x17u:
      if (v15 != 192) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x2000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v23) = *v14;
      if ((v23 & 0x80) == 0) {
        goto LABEL_31;
      }
      uint64_t v23 = (const char *)(v23 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v23);
        *((_DWORD *)this + 66) = v146;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_31:
        *((_DWORD *)this + 66) = v23;
      }
      goto LABEL_5;
    case 0x1Du:
      if (v15 != 240) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v27) = *v14;
      if ((v27 & 0x80) == 0) {
        goto LABEL_63;
      }
      __n128 v27 = (const char *)(v27 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v27);
        *((_DWORD *)this + 67) = v150;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_63:
        *((_DWORD *)this + 67) = v27;
      }
      goto LABEL_5;
    case 0x1Eu:
      if (v15 != 248) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v28) = *v14;
      if ((v28 & 0x80) == 0) {
        goto LABEL_68;
      }
      __n128 v28 = (const char *)(v28 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v28);
        *((_DWORD *)this + 68) = v151;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_68:
        *((_DWORD *)this + 68) = v28;
      }
      goto LABEL_5;
    case 0x1Fu:
      if (v15 != 1) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 8u;
      *((void *)this + 9) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x20u:
      if (v15 != 8) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 4u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v29 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_75;
      }
      unint64_t v29 = v29 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v29);
        *((unsigned char *)this + 306) = v152 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_75:
        *((unsigned char *)this + 306) = v29 != 0;
      }
      goto LABEL_5;
    case 0x21u:
      if (v15 != 16) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v138 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v138 - 128);
        if (*(char *)a2 < 0)
        {
          unsigned int v253 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v138 - 128));
          if (!v253) {
            return 0;
          }
          uint64_t v17 = v254;
          a2 = v253;
          if (v254 <= 4)
          {
LABEL_79:
            *((_DWORD *)this + 5) |= 0x10000000u;
            *((_DWORD *)this + 69) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 4) {
            goto LABEL_79;
          }
        }
      }
      else if (v17 <= 4)
      {
        goto LABEL_79;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 34;
      goto LABEL_705;
    case 0x22u:
      if (v15 != 24) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x80000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v30 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_84;
      }
      unint64_t v30 = v30 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v30);
        *((unsigned char *)this + 455) = v153 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_84:
        *((unsigned char *)this + 455) = v30 != 0;
      }
      goto LABEL_5;
    case 0x23u:
      if (v15 != 33) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x20000000u;
      *((void *)this + 35) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x24u:
      if (v15 != 40) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v24 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_36;
      }
      unint64_t v24 = v24 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v24);
        *((void *)this + 36) = v147;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_36:
        *((void *)this + 36) = v24;
      }
      goto LABEL_5;
    case 0x27u:
      if (v15 != 64) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x80000000;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v31 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_89;
      }
      unint64_t v31 = v31 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v31);
        *((void *)this + 37) = v154;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_89:
        *((void *)this + 37) = v31;
      }
      goto LABEL_5;
    case 0x28u:
      if (v15 != 72) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v32 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      unint64_t v32 = v32 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v32);
        *((unsigned char *)this + 99) = v155 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_94:
        *((unsigned char *)this + 99) = v32 != 0;
      }
      goto LABEL_5;
    case 0x2Au:
      if (v15 != 88) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x800000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v33 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_99;
      }
      unint64_t v33 = v33 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v33);
        *((unsigned char *)this + 132) = v156 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_99:
        *((unsigned char *)this + 132) = v33 != 0;
      }
      goto LABEL_5;
    case 0x2Bu:
      if (v15 != 96) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v34 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_104;
      }
      unint64_t v34 = v34 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v34);
        *((unsigned char *)this + 304) = v157 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_104:
        *((unsigned char *)this + 304) = v34 != 0;
      }
      goto LABEL_5;
    case 0x2Cu:
      if (v15 != 105) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x10u;
      *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x2Du:
      if (v15 != 112) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v35) = *v14;
      if ((v35 & 0x80) == 0) {
        goto LABEL_111;
      }
      signed __int32 v35 = (const char *)(v35 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v35);
        *((_DWORD *)this + 77) = v158;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_111:
        *((_DWORD *)this + 77) = v35;
      }
      goto LABEL_5;
    case 0x2Eu:
      if (v15 != 121) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x20u;
      *((void *)this + 39) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x2Fu:
      if (v15 != 128) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x1000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v36 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_118;
      }
      unint64_t v36 = v36 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v36);
        *((unsigned char *)this + 133) = v159 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_118:
        *((unsigned char *)this + 133) = v36 != 0;
      }
      goto LABEL_5;
    case 0x30u:
      if (v15 != 136) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v37 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_123;
      }
      unint64_t v37 = v37 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v37);
        *((unsigned char *)this + 307) = v160 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_123:
        *((unsigned char *)this + 307) = v37 != 0;
      }
      goto LABEL_5;
    case 0x31u:
      if (v15 != 144) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x40000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v38 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_128;
      }
      unint64_t v38 = v38 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v38);
        *((unsigned char *)this + 388) = v161 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_128:
        *((unsigned char *)this + 388) = v38 != 0;
      }
      goto LABEL_5;
    case 0x32u:
      if (v15 != 152) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v139 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v139 - 128);
        if (*(char *)a2 < 0)
        {
          int v255 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v139 - 128));
          if (!v255) {
            return 0;
          }
          uint64_t v17 = v256;
          a2 = v255;
          if (v256 <= 2)
          {
LABEL_132:
            *((_DWORD *)this + 4) |= 4u;
            *((_DWORD *)this + 17) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2) {
            goto LABEL_132;
          }
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_132;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 51;
      goto LABEL_705;
    case 0x33u:
      if (v15 != 160) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x4000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v117 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_569;
      }
      unint64_t v117 = v117 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v117);
        *((unsigned char *)this + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v233 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_569:
        *((unsigned char *)this + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v117 != 0;
      }
      goto LABEL_5;
    case 0x34u:
      if (v15 != 168) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v136 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v136 - 128);
        if (*(char *)a2 < 0)
        {
          uint64_t v250 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v136 - 128));
          if (!v250) {
            return 0;
          }
          uint64_t v17 = v251;
          a2 = v250;
          if (v251 <= 2)
          {
LABEL_40:
            *((_DWORD *)this + 6) |= 0x40u;
            *((_DWORD *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2) {
            goto LABEL_40;
          }
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_40;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 53;
      goto LABEL_705;
    case 0x35u:
      if (v15 != 176) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v39) = *v14;
      if ((v39 & 0x80) == 0) {
        goto LABEL_137;
      }
      unint64_t v39 = (const char *)(v39 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v39);
        *((_DWORD *)this + 81) = v162;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_137:
        *((_DWORD *)this + 81) = v39;
      }
      goto LABEL_5;
    case 0x36u:
      if (v15 != 184) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *v14;
      if ((v40 & 0x80) == 0) {
        goto LABEL_142;
      }
      signed __int32 v40 = (const char *)(v40 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v40);
        *((_DWORD *)this + 84) = v163;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_142:
        *((_DWORD *)this + 84) = v40;
      }
      goto LABEL_5;
    case 0x37u:
      if (v15 != 192) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v41 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_147;
      }
      unint64_t v41 = v41 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v41);
        *((unsigned char *)this + 305) = v164 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_147:
        *((unsigned char *)this + 305) = v41 != 0;
      }
      goto LABEL_5;
    case 0x38u:
      if (v15 != 201) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x100u;
      *((void *)this + 41) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x39u:
      if (v15 != 208) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v140 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v140 - 128);
        if (*(char *)a2 < 0)
        {
          unint64_t v257 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v140 - 128));
          if (!v257) {
            return 0;
          }
          uint64_t v17 = v258;
          a2 = v257;
          if (v258 <= 2)
          {
LABEL_153:
            *((_DWORD *)this + 4) |= 0x20u;
            *((_DWORD *)this + 22) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 2) {
            goto LABEL_153;
          }
        }
      }
      else if (v17 <= 2)
      {
        goto LABEL_153;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 58;
      goto LABEL_705;
    case 0x3Au:
      if (v15 != 216) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v118) = *v14;
      if ((v118 & 0x80) == 0) {
        goto LABEL_574;
      }
      unint64_t v118 = (const char *)(v118 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v118);
        *((_DWORD *)this + 85) = v234;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_574:
        *((_DWORD *)this + 85) = v118;
      }
      goto LABEL_5;
    case 0x3Bu:
      if (v15 != 224) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if ((*v14 & 0x80000000) == 0)
      {
        if (v17 <= 1) {
          goto LABEL_578;
        }
LABEL_697:
        if (*v8) {
          __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
        }
        unsigned int v135 = 60;
LABEL_705:
        google::protobuf::UnknownFieldSet::AddVarint((google::protobuf::UnknownFieldSet *)v134, v135, v17);
        goto LABEL_5;
      }
      int v144 = v17 + (*(unsigned __int8 *)a2 << 7);
      uint64_t v17 = (v144 - 128);
      if ((*(char *)a2 & 0x80000000) == 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
        if (v17 > 1) {
          goto LABEL_697;
        }
LABEL_578:
        *((_DWORD *)this + 4) |= 0x40u;
        *((_DWORD *)this + 23) = v17;
        goto LABEL_5;
      }
      int v263 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v144 - 128));
      if (v263)
      {
        uint64_t v17 = v264;
        a2 = v263;
        if (v264 > 1) {
          goto LABEL_697;
        }
        goto LABEL_578;
      }
      return 0;
    case 0x3Cu:
      if (v15 == 232)
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 - 2);
        while (1)
        {
          uint64_t v42 = *((unsigned __int8 *)a2 + 2);
          if (*((char *)a2 + 2) < 0)
          {
            int v44 = v42 + (*((unsigned __int8 *)a2 + 3) << 7);
            uint64_t v42 = (v44 - 128);
            if (*((char *)a2 + 3) < 0)
            {
              a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::UnknownFieldSet *)((char *)a2 + 2), (const char *)(v44 - 128));
              if (!a2) {
                return a2;
              }
              uint64_t v42 = v46;
              if (v46 > 4)
              {
LABEL_165:
                if (*v8) {
                  int64_t v45 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else {
                  int64_t v45 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
                }
                google::protobuf::UnknownFieldSet::AddVarint((google::protobuf::UnknownFieldSet *)v45, 0x3Du, v42);
                if (*(void *)a3 <= (unint64_t)a2) {
                  goto LABEL_5;
                }
                goto LABEL_161;
              }
            }
            else
            {
              a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 4);
              if (v42 > 4) {
                goto LABEL_165;
              }
            }
          }
          else
          {
            a2 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
            if (v42 > 4) {
              goto LABEL_165;
            }
          }
          uint64_t v43 = *((unsigned int *)this + 10);
          if (v43 == *((_DWORD *)this + 11)) {
            google::protobuf::RepeatedField<int>::Reserve(v10, v43 + 1);
          }
          *(_DWORD *)(*((void *)this + 6) + 4 * v43) = v42;
          *((_DWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v43 + 1;
          if (*(void *)a3 <= (unint64_t)a2) {
            goto LABEL_5;
          }
LABEL_161:
          if (*(_WORD *)a2 != 1000) {
            goto LABEL_5;
          }
        }
      }
      if (v15 != 234) {
        goto LABEL_18;
      }
      v268[0] = v10;
      v268[1] = (unsigned int *)operations_research::sat::SatParameters_RestartAlgorithm_IsValid;
      v268[2] = (unsigned int *)v8;
      int v269 = 61;
      uint64_t v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(a3, (google::protobuf::internal *)v14, v268);
      goto LABEL_4;
    case 0x3Du:
      if (v15 != 240) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x1000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v119) = *v14;
      if ((v119 & 0x80) == 0) {
        goto LABEL_583;
      }
      unsigned __int32 v119 = (const char *)(v119 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v119);
        *((_DWORD *)this + 88) = v235;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_583:
        *((_DWORD *)this + 88) = v119;
      }
      goto LABEL_5;
    case 0x3Eu:
      if (v15 != 249) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x800u;
      *((void *)this + 43) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x3Fu:
      if ((_BYTE)v15) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v120 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_590;
      }
      unint64_t v120 = v120 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v120);
        *((unsigned char *)this + 98) = v236 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_590:
        *((unsigned char *)this + 98) = v120 != 0;
      }
      goto LABEL_5;
    case 0x40u:
      if (v15 != 8) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x2000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v47) = *v14;
      if ((v47 & 0x80) == 0) {
        goto LABEL_177;
      }
      int v47 = (const char *)(v47 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v47);
        *((_DWORD *)this + 89) = v165;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_177:
        *((_DWORD *)this + 89) = v47;
      }
      goto LABEL_5;
    case 0x41u:
      if (v15 != 17) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x4000u;
      *((void *)this + 45) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x42u:
      if (v15 != 25) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x8000u;
      *((void *)this + 46) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x43u:
      if (v15 != 32) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v121) = *v14;
      if ((v121 & 0x80) == 0) {
        goto LABEL_597;
      }
      signed __int32 v121 = (const char *)(v121 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v121);
        *((_DWORD *)this + 25) = v237;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_597:
        *((_DWORD *)this + 25) = v121;
      }
      goto LABEL_5;
    case 0x44u:
      if (v15 != 41) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x1000u;
      *((void *)this + 13) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x45u:
      if (v15 != 50) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v48 = *((void *)this + 1);
      uint64_t v11 = (google::protobuf::Arena *)(v48 & 0xFFFFFFFFFFFFFFFELL);
      if (v48)
      {
        uint64_t v11 = *(google::protobuf::Arena **)v11;
        uint64_t v12 = *v9;
        if (*v9 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_) {
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v12 = *v9;
        if (*v9 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_) {
          goto LABEL_3;
        }
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v9, v11, (long long *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_);
      uint64_t v12 = *v9;
LABEL_3:
      uint64_t v13 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::InlineGreedyStringParser(v12, v14, (uint64_t)a3);
      goto LABEL_4;
    case 0x46u:
      if (v15 != 57) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x10000u;
      *((void *)this + 47) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x47u:
      if (v15 != 64) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x800000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v49 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_192;
      }
      unint64_t v49 = v49 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v49);
        *((unsigned char *)this + 393) = v166 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_192:
        *((unsigned char *)this + 393) = v49 != 0;
      }
      goto LABEL_5;
    case 0x48u:
      if (v15 != 72) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v122) = *v14;
      if ((v122 & 0x80) == 0) {
        goto LABEL_602;
      }
      __n128 v122 = (const char *)(v122 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v122);
        *((_DWORD *)this + 96) = v238;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_602:
        *((_DWORD *)this + 96) = v122;
      }
      goto LABEL_5;
    case 0x49u:
      if (v15 != 80) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x200000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v123 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_607;
      }
      unint64_t v123 = v123 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v123);
        *((unsigned char *)this + 391) = v239 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_607:
        *((unsigned char *)this + 391) = v123 != 0;
      }
      goto LABEL_5;
    case 0x4Au:
      if (v15 != 88) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v50 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_197;
      }
      unint64_t v50 = v50 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v50);
        *((unsigned char *)this + 96) = v167 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_197:
        *((unsigned char *)this + 96) = v50 != 0;
      }
      goto LABEL_5;
    case 0x4Bu:
      if (v15 != 97) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x2000u;
      *((void *)this + 14) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x4Cu:
      if (v15 != 104) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v51 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_202;
      }
      unint64_t v51 = v51 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v51);
        *((unsigned char *)this + 97) = v168 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_202:
        *((unsigned char *)this + 97) = v51 != 0;
      }
      goto LABEL_5;
    case 0x4Du:
      if (v15 != 112) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x8000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v52 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_207;
      }
      unint64_t v52 = v52 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v52);
        *((unsigned char *)this + 121) = v169 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_207:
        *((unsigned char *)this + 121) = v52 != 0;
      }
      goto LABEL_5;
    case 0x4Eu:
      if (v15 != 120) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x10000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v53 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_212;
      }
      unint64_t v53 = v53 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v53);
        *((unsigned char *)this + 122) = v170 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_212:
        *((unsigned char *)this + 122) = v53 != 0;
      }
      goto LABEL_5;
    case 0x4Fu:
      if (v15 != 128) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v54 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_217;
      }
      unint64_t v54 = v54 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v54);
        *((unsigned char *)this + 444) = v171 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_217:
        *((unsigned char *)this + 444) = v54 != 0;
      }
      goto LABEL_5;
    case 0x51u:
      if (v15 != 144) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v17 = *v14;
      if (*v14 < 0)
      {
        int v141 = v17 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v17 = (v141 - 128);
        if (*(char *)a2 < 0)
        {
          uint64_t v259 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v141 - 128));
          if (!v259) {
            return 0;
          }
          uint64_t v17 = v260;
          a2 = v259;
          if (v260 <= 6)
          {
LABEL_221:
            *((_DWORD *)this + 4) |= 0x40000u;
            *((_DWORD *)this + 31) = v17;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v17 <= 6) {
            goto LABEL_221;
          }
        }
      }
      else if (v17 <= 6)
      {
        goto LABEL_221;
      }
      if (*v8) {
        __n128 v134 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v134 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      unsigned int v135 = 82;
      goto LABEL_705;
    case 0x52u:
      if (v15 != 152) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x80000000;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v55 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_226;
      }
      unint64_t v55 = v55 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v55);
        *((unsigned char *)this + 147) = v172 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_226:
        *((unsigned char *)this + 147) = v55 != 0;
      }
      goto LABEL_5;
    case 0x53u:
      if (v15 != 160) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x80000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v56 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_231;
      }
      unint64_t v56 = v56 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v56);
        *((unsigned char *)this + 389) = v173 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_231:
        *((unsigned char *)this + 389) = v56 != 0;
      }
      goto LABEL_5;
    case 0x54u:
      if (v15 != 168) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x80000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v57 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_236;
      }
      unint64_t v57 = v57 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v57);
        *((unsigned char *)this + 128) = v174 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_236:
        *((unsigned char *)this + 128) = v57 != 0;
      }
      goto LABEL_5;
    case 0x55u:
      if (v15 != 176) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x1000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v124 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_614;
      }
      unint64_t v124 = v124 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v124);
        *((unsigned char *)this + 394) = v240 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_614:
        *((unsigned char *)this + 394) = v124 != 0;
      }
      goto LABEL_5;
    case 0x56u:
      if (v15 != 184) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x100000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v58 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_241;
      }
      unint64_t v58 = v58 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v58);
        *((unsigned char *)this + 129) = v175 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_241:
        *((unsigned char *)this + 129) = v58 != 0;
      }
      goto LABEL_5;
    case 0x57u:
      if (v15 != 192) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x400000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v59 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_246;
      }
      unint64_t v59 = v59 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v59);
        *((unsigned char *)this + 392) = v176 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_246:
        *((unsigned char *)this + 392) = v59 != 0;
      }
      goto LABEL_5;
    case 0x58u:
      if (v15 != 200) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x100000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v60 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_251;
      }
      unint64_t v60 = v60 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v60);
        *((unsigned char *)this + 39google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v177 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_251:
        *((unsigned char *)this + 39google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v60 != 0;
      }
      goto LABEL_5;
    case 0x59u:
      if (v15 != 208) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v125) = *v14;
      if ((v125 & 0x80) == 0) {
        goto LABEL_619;
      }
      __n128 v125 = (const char *)(v125 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v125);
        *((_DWORD *)this + 99) = v241;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_619:
        *((_DWORD *)this + 99) = v125;
      }
      goto LABEL_5;
    case 0x5Au:
      if (v15 != 216) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v126) = *v14;
      if ((v126 & 0x80) == 0) {
        goto LABEL_624;
      }
      __n128 v126 = (const char *)(v126 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v126);
        *((_DWORD *)this + 10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v242;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_624:
        *((_DWORD *)this + 10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v126;
      }
      goto LABEL_5;
    case 0x5Bu:
      if (v15 != 224) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v127 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_629;
      }
      unint64_t v127 = v127 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v127);
        *((unsigned char *)this + 123) = v243 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_629:
        *((unsigned char *)this + 123) = v127 != 0;
      }
      goto LABEL_5;
    case 0x5Cu:
      if (v15 != 232) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x2000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v61 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_256;
      }
      unint64_t v61 = v61 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v61);
        *((unsigned char *)this + 395) = v178 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_256:
        *((unsigned char *)this + 395) = v61 != 0;
      }
      goto LABEL_5;
    case 0x5Du:
      if (v15 != 240) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v62 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_261;
      }
      unint64_t v62 = v62 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v62);
        *((unsigned char *)this + 441) = v179 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_261:
        *((unsigned char *)this + 441) = v62 != 0;
      }
      goto LABEL_5;
    case 0x5Eu:
      if (v15 != 248) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 4u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v63 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_266;
      }
      unint64_t v63 = v63 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v63);
        *((unsigned char *)this + 425) = v180 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_266:
        *((unsigned char *)this + 425) = v63 != 0;
      }
      goto LABEL_5;
    case 0x5Fu:
      if ((_BYTE)v15) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x10000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v128) = *v14;
      if ((v128 & 0x80) == 0) {
        goto LABEL_634;
      }
      __n128 v128 = (const char *)(v128 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v128);
        *((_DWORD *)this + 101) = v244;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_634:
        *((_DWORD *)this + 101) = v128;
      }
      goto LABEL_5;
    case 0x60u:
      if (v15 != 8) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x20000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v64) = *v14;
      if ((v64 & 0x80) == 0) {
        goto LABEL_271;
      }
      unint64_t v64 = (const char *)(v64 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v64);
        *((_DWORD *)this + 102) = v181;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_271:
        *((_DWORD *)this + 102) = v64;
      }
      goto LABEL_5;
    case 0x61u:
      if (v15 != 16) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x400000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v65 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_276;
      }
      unint64_t v65 = v65 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v65);
        *((unsigned char *)this + 131) = v182 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_276:
        *((unsigned char *)this + 131) = v65 != 0;
      }
      goto LABEL_5;
    case 0x62u:
      if (v15 != 24) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v66) = *v14;
      if ((v66 & 0x80) == 0) {
        goto LABEL_281;
      }
      uint64_t v66 = (const char *)(v66 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v66);
        *((_DWORD *)this + 103) = v183;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_281:
        *((_DWORD *)this + 103) = v66;
      }
      goto LABEL_5;
    case 0x63u:
      if (v15 != 32) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 6) |= 0x80000000;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v67) = *v14;
      if ((v67 & 0x80) == 0) {
        goto LABEL_286;
      }
      uint64_t v67 = (const char *)(v67 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v67);
        *((_DWORD *)this + 104) = v184;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_286:
        *((_DWORD *)this + 104) = v67;
      }
      goto LABEL_5;
    case 0x64u:
      if (v15 != 40) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v68 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_291;
      }
      unint64_t v68 = v68 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v68);
        *((unsigned char *)this + 155) = v185 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_291:
        *((unsigned char *)this + 155) = v68 != 0;
      }
      goto LABEL_5;
    case 0x66u:
      if (v15 != 56) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v69 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_296;
      }
      unint64_t v69 = v69 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v69);
        *((unsigned char *)this + 151) = v186 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_296:
        *((unsigned char *)this + 151) = v69 != 0;
      }
      goto LABEL_5;
    case 0x67u:
      if (v15 != 64) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v70 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_301;
      }
      unint64_t v70 = v70 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v70);
        *((void *)this + 17) = v187;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_301:
        *((void *)this + 17) = v70;
      }
      goto LABEL_5;
    case 0x68u:
      if (v15 != 72) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v71 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_306;
      }
      unint64_t v71 = v71 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v71);
        *((unsigned char *)this + 148) = v188 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_306:
        *((unsigned char *)this + 148) = v71 != 0;
      }
      goto LABEL_5;
    case 0x69u:
      if (v15 != 80) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v72 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_311;
      }
      unint64_t v72 = v72 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v72);
        *((unsigned char *)this + 424) = v189 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_311:
        *((unsigned char *)this + 424) = v72 != 0;
      }
      goto LABEL_5;
    case 0x6Au:
      if (v15 != 88) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v73) = *v14;
      if ((v73 & 0x80) == 0) {
        goto LABEL_316;
      }
      uint64_t v73 = (const char *)(v73 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v73);
        *((_DWORD *)this + 105) = v190;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_316:
        *((_DWORD *)this + 105) = v73;
      }
      goto LABEL_5;
    case 0x6Bu:
      if (v15 != 96) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x20000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v74 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_321;
      }
      unint64_t v74 = v74 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v74);
        *((unsigned char *)this + 502) = v191 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_321:
        *((unsigned char *)this + 502) = v74 != 0;
      }
      goto LABEL_5;
    case 0x6Cu:
      if (v15 != 104) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v75 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_326;
      }
      unint64_t v75 = v75 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v75);
        *((unsigned char *)this + 503) = v192 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_326:
        *((unsigned char *)this + 503) = v75 != 0;
      }
      goto LABEL_5;
    case 0x6Du:
      if (v15 != 112) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x20u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v129) = *v14;
      if ((v129 & 0x80) == 0) {
        goto LABEL_639;
      }
      __n128 v129 = (const char *)(v129 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v129);
        *((_DWORD *)this + 107) = v245;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_639:
        *((_DWORD *)this + 107) = v129;
      }
      goto LABEL_5;
    case 0x6Eu:
      if (v15 != 120) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x10000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v76 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_331;
      }
      unint64_t v76 = v76 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v76);
        *((unsigned char *)this + 144) = v193 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_331:
        *((unsigned char *)this + 144) = v76 != 0;
      }
      goto LABEL_5;
    case 0x6Fu:
      if (v15 != 128) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v77 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_336;
      }
      unint64_t v77 = v77 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v77);
        *((unsigned char *)this + 44google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v194 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_336:
        *((unsigned char *)this + 44google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v77 != 0;
      }
      goto LABEL_5;
    case 0x70u:
      if (v15 != 136) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 8u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v130 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_644;
      }
      unint64_t v130 = v130 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v130);
        *((unsigned char *)this + 426) = v246 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_644:
        *((unsigned char *)this + 426) = v130 != 0;
      }
      goto LABEL_5;
    case 0x71u:
      if (v15 != 144) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v131 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_649;
      }
      unint64_t v131 = v131 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v131);
        *((unsigned char *)this + 427) = v247 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_649:
        *((unsigned char *)this + 427) = v131 != 0;
      }
      goto LABEL_5;
    case 0x72u:
      if (v15 != 153) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x40u;
      *((void *)this + 54) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x73u:
      if (v15 != 160) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v78 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_343;
      }
      unint64_t v78 = v78 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v78);
        *((unsigned char *)this + 442) = v195 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_343:
        *((unsigned char *)this + 442) = v78 != 0;
      }
      goto LABEL_5;
    case 0x74u:
      if (v15 != 168) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x1000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v79 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_348;
      }
      unint64_t v79 = v79 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v79);
        *((unsigned char *)this + 445) = v196 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_348:
        *((unsigned char *)this + 445) = v79 != 0;
      }
      goto LABEL_5;
    case 0x76u:
      if (v15 != 184) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x8000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *v14;
      if ((v80 & 0x80) == 0) {
        goto LABEL_353;
      }
      long long v80 = (const char *)(v80 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v80);
        *((_DWORD *)this + 112) = v197;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_353:
        *((_DWORD *)this + 112) = v80;
      }
      goto LABEL_5;
    case 0x77u:
      if (v15 != 192) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x2000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v132 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_654;
      }
      unint64_t v132 = v132 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v132);
        *((unsigned char *)this + 446) = v248 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_654:
        *((unsigned char *)this + 446) = v132 != 0;
      }
      goto LABEL_5;
    case 0x78u:
      if (v15 != 200) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x100000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v81) = *v14;
      if ((v81 & 0x80) == 0) {
        goto LABEL_358;
      }
      uint64_t v81 = (const char *)(v81 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v81);
        *((_DWORD *)this + 114) = v198;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_358:
        *((_DWORD *)this + 114) = v81;
      }
      goto LABEL_5;
    case 0x79u:
      if (v15 != 208) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x200000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v82) = *v14;
      if ((v82 & 0x80) == 0) {
        goto LABEL_363;
      }
      unint64_t v82 = (const char *)(v82 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v82);
        *((_DWORD *)this + 115) = v199;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_363:
        *((_DWORD *)this + 115) = v82;
      }
      goto LABEL_5;
    case 0x7Au:
      if (v15 != 216) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x400000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v83 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_368;
      }
      unint64_t v83 = v83 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v83);
        *((void *)this + 58) = v200;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_368:
        *((void *)this + 58) = v83;
      }
      goto LABEL_5;
    case 0x7Bu:
      if (v15 != 225) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x800000u;
      *((void *)this + 59) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x7Cu:
      if (v15 != 233) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x1000000u;
      *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x7Du:
      if (v15 != 241) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x2000000u;
      *((void *)this + 61) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x7Eu:
      if (v15 != 248) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v84) = *v14;
      if ((v84 & 0x80) == 0) {
        goto LABEL_379;
      }
      uint64_t v84 = (const char *)(v84 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v84);
        *((_DWORD *)this + 124) = v201;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_379:
        *((_DWORD *)this + 124) = v84;
      }
      goto LABEL_5;
    case 0x7Fu:
      if (v15 != 1) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x80000000;
      *((void *)this + 63) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x80u:
      if (v15 != 8) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x8000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v85 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_386;
      }
      unint64_t v85 = v85 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v85);
        *((unsigned char *)this + 50google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v202 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_386:
        *((unsigned char *)this + 50google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v85 != 0;
      }
      goto LABEL_5;
    case 0x81u:
      if (v15 != 16) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x20000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v86 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_391;
      }
      unint64_t v86 = v86 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v86);
        *((unsigned char *)this + 145) = v203 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_391:
        *((unsigned char *)this + 145) = v86 != 0;
      }
      goto LABEL_5;
    case 0x82u:
      if (v15 != 24) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v87 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_396;
      }
      unint64_t v87 = v87 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v87);
        *((unsigned char *)this + 443) = v204 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_396:
        *((unsigned char *)this + 443) = v87 != 0;
      }
      goto LABEL_5;
    case 0x83u:
      if (v15 != 32) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x200000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v88 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_401;
      }
      unint64_t v88 = v88 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v88);
        *((unsigned char *)this + 13google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v205 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_401:
        *((unsigned char *)this + 13google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v88 != 0;
      }
      goto LABEL_5;
    case 0x84u:
      if (v15 != 40) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v89 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_406;
      }
      unint64_t v89 = v89 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v89);
        *((unsigned char *)this + 157) = v206 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_406:
        *((unsigned char *)this + 157) = v89 != 0;
      }
      goto LABEL_5;
    case 0x85u:
      if (v15 != 48) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 1u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *v14;
      if ((v90 & 0x80) == 0) {
        goto LABEL_411;
      }
      int64_t v90 = (const char *)(v90 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v90);
        *((_DWORD *)this + 128) = v207;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_411:
        *((_DWORD *)this + 128) = v90;
      }
      goto LABEL_5;
    case 0x86u:
      if (v15 != 56) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x40u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v91 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_416;
      }
      unint64_t v91 = v91 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v91);
        *((unsigned char *)this + 544) = v208 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_416:
        *((unsigned char *)this + 544) = v91 != 0;
      }
      goto LABEL_5;
    case 0x87u:
      if (v15 != 64) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x20u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v92 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_421;
      }
      unint64_t v92 = v92 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v92);
        *((unsigned char *)this + 153) = v209 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_421:
        *((unsigned char *)this + 153) = v92 != 0;
      }
      goto LABEL_5;
    case 0x88u:
      if (v15 != 72) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 4u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v93 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_426;
      }
      unint64_t v93 = v93 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v93);
        *((unsigned char *)this + 15google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v210 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_426:
        *((unsigned char *)this + 15google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v93 != 0;
      }
      goto LABEL_5;
    case 0x89u:
      if (v15 != 80) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v94) = *v14;
      if ((v94 & 0x80) == 0) {
        goto LABEL_431;
      }
      BOOL v94 = (const char *)(v94 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v94);
        *((_DWORD *)this + 129) = v211;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_431:
        *((_DWORD *)this + 129) = v94;
      }
      goto LABEL_5;
    case 0x8Au:
      if (v15 != 88) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v95 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_436;
      }
      unint64_t v95 = v95 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v95);
        *((unsigned char *)this + 156) = v212 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_436:
        *((unsigned char *)this + 156) = v95 != 0;
      }
      goto LABEL_5;
    case 0x8Bu:
      if (v15 != 96) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x10000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v96 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_441;
      }
      unint64_t v96 = v96 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v96);
        *((unsigned char *)this + 452) = v213 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_441:
        *((unsigned char *)this + 452) = v96 != 0;
      }
      goto LABEL_5;
    case 0x8Cu:
      if (v15 != 104) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x40u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v97 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_446;
      }
      unint64_t v97 = v97 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v97);
        *((unsigned char *)this + 154) = v214 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_446:
        *((unsigned char *)this + 154) = v97 != 0;
      }
      goto LABEL_5;
    case 0x8Du:
      if (v15 != 112) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x400u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v98 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_451;
      }
      unint64_t v98 = v98 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v98);
        *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v215;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_451:
        *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v98;
      }
      goto LABEL_5;
    case 0x8Eu:
      if (v15 != 120) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x20000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v99 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_456;
      }
      unint64_t v99 = v99 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v99);
        *((unsigned char *)this + 453) = v216 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_456:
        *((unsigned char *)this + 453) = v99 != 0;
      }
      goto LABEL_5;
    case 0x8Fu:
      if (v15 != 128) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x80u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v100 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_461;
      }
      unint64_t v100 = v100 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v100);
        *((unsigned char *)this + 545) = v217 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_461:
        *((unsigned char *)this + 545) = v100 != 0;
      }
      goto LABEL_5;
    case 0x90u:
      if (v15 != 137) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 4u;
      *((void *)this + 65) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x91u:
      if (v15 != 145) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 8u;
      *((void *)this + 66) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x92u:
      if (v15 != 152) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v101) = *v14;
      if ((v101 & 0x80) == 0) {
        goto LABEL_470;
      }
      uint64_t v101 = (const char *)(v101 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v101);
        *((_DWORD *)this + 134) = v218;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_470:
        *((_DWORD *)this + 134) = v101;
      }
      goto LABEL_5;
    case 0x93u:
      if (v15 != 160) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x20u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v102) = *v14;
      if ((v102 & 0x80) == 0) {
        goto LABEL_475;
      }
      uint64_t v102 = (const char *)(v102 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v102);
        *((_DWORD *)this + 135) = v219;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_475:
        *((_DWORD *)this + 135) = v102;
      }
      goto LABEL_5;
    case 0x94u:
      if (v15 != 168) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x10u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v103 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_480;
      }
      unint64_t v103 = v103 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v103);
        *((unsigned char *)this + 152) = v220 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_480:
        *((unsigned char *)this + 152) = v103 != 0;
      }
      goto LABEL_5;
    case 0x95u:
      if (v15 != 176) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 2u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v104 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_485;
      }
      unint64_t v104 = v104 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v104);
        *((unsigned char *)this + 149) = v221 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_485:
        *((unsigned char *)this + 149) = v104 != 0;
      }
      goto LABEL_5;
    case 0x96u:
      if (v15 != 184) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v105) = *v14;
      if ((v105 & 0x80) == 0) {
        goto LABEL_490;
      }
      uint64_t v105 = (const char *)(v105 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v105);
        *((_DWORD *)this + 42) = v222;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_490:
        *((_DWORD *)this + 42) = v105;
      }
      goto LABEL_5;
    case 0x97u:
      if (v15 != 192) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x4000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v106 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_495;
      }
      unint64_t v106 = v106 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v106);
        *((unsigned char *)this + 447) = v223 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_495:
        *((unsigned char *)this + 447) = v106 != 0;
      }
      goto LABEL_5;
    case 0x98u:
      if (v15 != 200) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x200u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v107) = *v14;
      if ((v107 & 0x80) == 0) {
        goto LABEL_500;
      }
      uint64_t v107 = (const char *)(v107 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v107);
        *((_DWORD *)this + 137) = v224;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_500:
        *((_DWORD *)this + 137) = v107;
      }
      goto LABEL_5;
    case 0x99u:
      if (v15 != 208) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x800u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v108) = *v14;
      if ((v108 & 0x80) == 0) {
        goto LABEL_505;
      }
      uint64_t v108 = (const char *)(v108 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v108);
        *((_DWORD *)this + 14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v225;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_505:
        *((_DWORD *)this + 14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v108;
      }
      goto LABEL_5;
    case 0x9Au:
      if (v15 != 217) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x400u;
      *((void *)this + 69) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x9Bu:
      if (v15 != 225) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x2000u;
      *((void *)this + 71) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x9Cu:
      if (v15 != 232) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x1000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      LODWORD(v109) = *v14;
      if ((v109 & 0x80) == 0) {
        goto LABEL_514;
      }
      unint64_t v109 = (const char *)(v109 + (*(unsigned __int8 *)a2 << 7) - 128);
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, v109);
        *((_DWORD *)this + 141) = v226;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_514:
        *((_DWORD *)this + 141) = v109;
      }
      goto LABEL_5;
    case 0x9Du:
      if (v15 != 240) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x40000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v110 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_519;
      }
      unint64_t v110 = v110 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v110);
        *((unsigned char *)this + 454) = v227 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_519:
        *((unsigned char *)this + 454) = v110 != 0;
      }
      goto LABEL_5;
    case 0x9Eu:
      if (v15 != 249) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x1000u;
      *((void *)this + 22) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0x9Fu:
      if (v15 != 1) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 5) |= 0x2000u;
      *((void *)this + 23) = *(void *)v14;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 8);
      goto LABEL_5;
    case 0xA0u:
      if (v15 != 8) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x40000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v111 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_528;
      }
      unint64_t v111 = v111 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v111);
        *((unsigned char *)this + 146) = v228 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_528:
        *((unsigned char *)this + 146) = v111 != 0;
      }
      goto LABEL_5;
    case 0xA1u:
      if (v15 != 16) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x2000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v112 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_533;
      }
      unint64_t v112 = v112 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v112);
        *((unsigned char *)this + 134) = v229 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_533:
        *((unsigned char *)this + 134) = v112 != 0;
      }
      goto LABEL_5;
    case 0xA2u:
      if (v15 != 24) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 4) |= 0x4000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v113 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_538;
      }
      unint64_t v113 = v113 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v113);
        *((unsigned char *)this + 135) = v230 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_538:
        *((unsigned char *)this + 135) = v113 != 0;
      }
      goto LABEL_5;
    case 0xA3u:
      if (v15 != 32) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 7) |= 0x10000000u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v114 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_543;
      }
      unint64_t v114 = v114 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v114);
        *((unsigned char *)this + 501) = v231 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_543:
        *((unsigned char *)this + 501) = v114 != 0;
      }
      goto LABEL_5;
    case 0xA4u:
      if (v15 != 40) {
        goto LABEL_18;
      }
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      uint64_t v115 = *v14;
      if (*v14 < 0)
      {
        int v142 = v115 + (*(unsigned __int8 *)a2 << 7);
        uint64_t v115 = (v142 - 128);
        if (*(char *)a2 < 0)
        {
          v261 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)(v142 - 128));
          if (!v261) {
            return 0;
          }
          uint64_t v115 = v262;
          a2 = v261;
          if (v262 <= 3)
          {
LABEL_547:
            *((_DWORD *)this + 5) |= 0x4000u;
            *((_DWORD *)this + 48) = v115;
            goto LABEL_5;
          }
        }
        else
        {
          a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
          if (v115 <= 3) {
            goto LABEL_547;
          }
        }
      }
      else if (v115 <= 3)
      {
        goto LABEL_547;
      }
      if (*v8) {
        __n128 v143 = (char *)((*v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        __n128 v143 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v8);
      }
      google::protobuf::UnknownFieldSet::AddVarint((google::protobuf::UnknownFieldSet *)v143, 0xA5u, v115);
      goto LABEL_5;
    case 0xA5u:
      if (v15 != 48) {
        goto LABEL_18;
      }
      *((_DWORD *)this + 8) |= 0x100u;
      a2 = (google::protobuf::UnknownFieldSet *)(v14 + 1);
      unint64_t v116 = *v14;
      if ((*v14 & 0x80000000) == 0) {
        goto LABEL_552;
      }
      unint64_t v116 = v116 + (*(unsigned __int8 *)a2 << 7) - 128;
      if (*(char *)a2 < 0)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)v14, (const char *)v116);
        *((unsigned char *)this + 546) = v232 != 0;
        if (!a2) {
          return a2;
        }
      }
      else
      {
        a2 = (google::protobuf::UnknownFieldSet *)(v14 + 2);
LABEL_552:
        *((unsigned char *)this + 546) = v116 != 0;
      }
      goto LABEL_5;
    default:
      goto LABEL_18;
  }
}

const google::protobuf::UnknownFieldSet *operations_research::sat::SatParameters::_InternalSerialize(operations_research::sat::SatParameters *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = (char *)a2;
  if ((*((unsigned char *)this + 16) & 2) != 0)
  {
    if (*(void *)a3 <= (unint64_t)a2)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      unint64_t v19 = *((int *)this + 16);
      *uint64_t v4 = 8;
      if (v19 <= 0x7F)
      {
LABEL_56:
        v4[1] = v19;
        v4 += 2;
        int v6 = *((_DWORD *)this + 5);
        if ((v6 & 0x8000) != 0) {
          goto LABEL_65;
        }
        goto LABEL_3;
      }
    }
    else
    {
      unint64_t v19 = *((int *)this + 16);
      *(unsigned char *)a2 = 8;
      if (v19 <= 0x7F) {
        goto LABEL_56;
      }
    }
    v4[1] = v19 | 0x80;
    unint64_t v20 = v19 >> 7;
    if (v19 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v20 | 0x80;
        unint64_t v21 = v20 >> 7;
        ++v4;
        unint64_t v22 = v20 >> 14;
        v20 >>= 7;
      }
      while (v22);
      *(v4 - 1) = v21;
      int v6 = *((_DWORD *)this + 5);
      if ((v6 & 0x8000) != 0) {
        goto LABEL_65;
      }
    }
    else
    {
      v4[2] = v20;
      v4 += 3;
      int v6 = *((_DWORD *)this + 5);
      if ((v6 & 0x8000) != 0) {
        goto LABEL_65;
      }
    }
LABEL_3:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_4;
    }
LABEL_76:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v27 = *((int *)this + 50);
      *uint64_t v4 = 32;
      if (v27 <= 0x7F)
      {
LABEL_78:
        v4[1] = v27;
        v4 += 2;
        if ((v6 & 0x20000) != 0) {
          goto LABEL_87;
        }
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v27 = *((int *)this + 50);
      *uint64_t v4 = 32;
      if (v27 <= 0x7F) {
        goto LABEL_78;
      }
    }
    v4[1] = v27 | 0x80;
    unint64_t v28 = v27 >> 7;
    if (v27 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v28 | 0x80;
        unint64_t v29 = v28 >> 7;
        ++v4;
        unint64_t v30 = v28 >> 14;
        v28 >>= 7;
      }
      while (v30);
      *(v4 - 1) = v29;
      if ((v6 & 0x20000) != 0) {
        goto LABEL_87;
      }
    }
    else
    {
      v4[2] = v28;
      v4 += 3;
      if ((v6 & 0x20000) != 0) {
        goto LABEL_87;
      }
    }
LABEL_5:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_6;
    }
LABEL_98:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v35 = *((int *)this + 52);
      *uint64_t v4 = 104;
      if (v35 <= 0x7F)
      {
LABEL_100:
        v4[1] = v35;
        v4 += 2;
        if ((v6 & 0x80000) != 0) {
          goto LABEL_109;
        }
        goto LABEL_7;
      }
    }
    else
    {
      unint64_t v35 = *((int *)this + 52);
      *uint64_t v4 = 104;
      if (v35 <= 0x7F) {
        goto LABEL_100;
      }
    }
    v4[1] = v35 | 0x80;
    unint64_t v36 = v35 >> 7;
    if (v35 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v36 | 0x80;
        unint64_t v37 = v36 >> 7;
        ++v4;
        unint64_t v38 = v36 >> 14;
        v36 >>= 7;
      }
      while (v38);
      *(v4 - 1) = v37;
      if ((v6 & 0x80000) != 0) {
        goto LABEL_109;
      }
    }
    else
    {
      v4[2] = v36;
      v4 += 3;
      if ((v6 & 0x80000) != 0) {
        goto LABEL_109;
      }
    }
LABEL_7:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_112;
  }
  int v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x8000) == 0) {
    goto LABEL_3;
  }
LABEL_65:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v23 = *((int *)this + 49);
    *uint64_t v4 = 16;
    if (v23 <= 0x7F)
    {
LABEL_67:
      v4[1] = v23;
      v4 += 2;
      if ((v6 & 0x10000) != 0) {
        goto LABEL_76;
      }
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v23 = *((int *)this + 49);
    *uint64_t v4 = 16;
    if (v23 <= 0x7F) {
      goto LABEL_67;
    }
  }
  v4[1] = v23 | 0x80;
  unint64_t v24 = v23 >> 7;
  if (v23 >> 14)
  {
    v4 += 3;
    do
    {
      *(v4 - 1) = v24 | 0x80;
      unint64_t v25 = v24 >> 7;
      ++v4;
      unint64_t v26 = v24 >> 14;
      v24 >>= 7;
    }
    while (v26);
    *(v4 - 1) = v25;
    if ((v6 & 0x10000) != 0) {
      goto LABEL_76;
    }
  }
  else
  {
    v4[2] = v24;
    v4 += 3;
    if ((v6 & 0x10000) != 0) {
      goto LABEL_76;
    }
  }
LABEL_4:
  if ((v6 & 0x20000) == 0) {
    goto LABEL_5;
  }
LABEL_87:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v31 = *((int *)this + 51);
    *uint64_t v4 = 88;
    if (v31 <= 0x7F)
    {
LABEL_89:
      v4[1] = v31;
      v4 += 2;
      if ((v6 & 0x40000) != 0) {
        goto LABEL_98;
      }
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v31 = *((int *)this + 51);
    *uint64_t v4 = 88;
    if (v31 <= 0x7F) {
      goto LABEL_89;
    }
  }
  v4[1] = v31 | 0x80;
  unint64_t v32 = v31 >> 7;
  if (v31 >> 14)
  {
    v4 += 3;
    do
    {
      *(v4 - 1) = v32 | 0x80;
      unint64_t v33 = v32 >> 7;
      ++v4;
      unint64_t v34 = v32 >> 14;
      v32 >>= 7;
    }
    while (v34);
    *(v4 - 1) = v33;
    if ((v6 & 0x40000) != 0) {
      goto LABEL_98;
    }
  }
  else
  {
    v4[2] = v32;
    v4 += 3;
    if ((v6 & 0x40000) != 0) {
      goto LABEL_98;
    }
  }
LABEL_6:
  if ((v6 & 0x80000) == 0) {
    goto LABEL_7;
  }
LABEL_109:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v39 = *((void *)this + 27);
  *uint64_t v4 = 121;
  *(void *)(v4 + 1) = v39;
  v4 += 9;
  if ((v6 & 0x100000) == 0)
  {
LABEL_8:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_115;
  }
LABEL_112:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v40 = *((void *)this + 28);
  *(_WORD *)uint64_t v4 = 385;
  *(void *)(v4 + 2) = v40;
  v4 += 10;
  if ((v6 & 0x200000) == 0)
  {
LABEL_9:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_118;
  }
LABEL_115:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v41 = *((void *)this + 29);
  *(_WORD *)uint64_t v4 = 393;
  *(void *)(v4 + 2) = v41;
  v4 += 10;
  if ((v6 & 0x400000) == 0)
  {
LABEL_10:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_121;
  }
LABEL_118:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v42 = *((void *)this + 30);
  *(_WORD *)uint64_t v4 = 401;
  *(void *)(v4 + 2) = v42;
  v4 += 10;
  if ((v6 & 0x800000) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_124;
  }
LABEL_121:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v43 = *((void *)this + 31);
  *(_WORD *)uint64_t v4 = 433;
  *(void *)(v4 + 2) = v43;
  v4 += 10;
  if ((v6 & 0x1000000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_13;
    }
LABEL_127:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v45 = *((int *)this + 66);
      *(_WORD *)uint64_t v4 = 448;
      if (v45 <= 0x7F)
      {
LABEL_129:
        v4[2] = v45;
        v4 += 3;
        if ((v6 & 0x4000000) != 0) {
          goto LABEL_138;
        }
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v45 = *((int *)this + 66);
      *(_WORD *)uint64_t v4 = 448;
      if (v45 <= 0x7F) {
        goto LABEL_129;
      }
    }
    v4[2] = v45 | 0x80;
    unint64_t v46 = v45 >> 7;
    if (v45 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v46 | 0x80;
        unint64_t v47 = v46 >> 7;
        ++v4;
        unint64_t v48 = v46 >> 14;
        v46 >>= 7;
      }
      while (v48);
      *(v4 - 1) = v47;
      if ((v6 & 0x4000000) != 0) {
        goto LABEL_138;
      }
    }
    else
    {
      v4[3] = v46;
      v4 += 4;
      if ((v6 & 0x4000000) != 0) {
        goto LABEL_138;
      }
    }
LABEL_14:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_15;
    }
LABEL_149:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v53 = *((int *)this + 68);
      *(_WORD *)uint64_t v4 = 504;
      if (v53 <= 0x7F)
      {
LABEL_151:
        v4[2] = v53;
        v4 += 3;
        if ((*((unsigned char *)this + 16) & 8) != 0) {
          goto LABEL_160;
        }
        goto LABEL_16;
      }
    }
    else
    {
      unint64_t v53 = *((int *)this + 68);
      *(_WORD *)uint64_t v4 = 504;
      if (v53 <= 0x7F) {
        goto LABEL_151;
      }
    }
    v4[2] = v53 | 0x80;
    unint64_t v54 = v53 >> 7;
    if (v53 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v54 | 0x80;
        unint64_t v55 = v54 >> 7;
        ++v4;
        unint64_t v56 = v54 >> 14;
        v54 >>= 7;
      }
      while (v56);
      *(v4 - 1) = v55;
      if ((*((unsigned char *)this + 16) & 8) != 0) {
        goto LABEL_160;
      }
    }
    else
    {
      v4[3] = v54;
      v4 += 4;
      if ((*((unsigned char *)this + 16) & 8) != 0) {
        goto LABEL_160;
      }
    }
LABEL_16:
    if ((*((unsigned char *)this + 24) & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_163;
  }
LABEL_124:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v44 = *((void *)this + 32);
  *(_WORD *)uint64_t v4 = 441;
  *(void *)(v4 + 2) = v44;
  v4 += 10;
  if ((v6 & 0x2000000) != 0) {
    goto LABEL_127;
  }
LABEL_13:
  if ((v6 & 0x4000000) == 0) {
    goto LABEL_14;
  }
LABEL_138:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v49 = *((int *)this + 67);
    *(_WORD *)uint64_t v4 = 496;
    if (v49 <= 0x7F)
    {
LABEL_140:
      v4[2] = v49;
      v4 += 3;
      if ((v6 & 0x8000000) != 0) {
        goto LABEL_149;
      }
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v49 = *((int *)this + 67);
    *(_WORD *)uint64_t v4 = 496;
    if (v49 <= 0x7F) {
      goto LABEL_140;
    }
  }
  v4[2] = v49 | 0x80;
  unint64_t v50 = v49 >> 7;
  if (v49 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v50 | 0x80;
      unint64_t v51 = v50 >> 7;
      ++v4;
      unint64_t v52 = v50 >> 14;
      v50 >>= 7;
    }
    while (v52);
    *(v4 - 1) = v51;
    if ((v6 & 0x8000000) != 0) {
      goto LABEL_149;
    }
  }
  else
  {
    v4[3] = v50;
    v4 += 4;
    if ((v6 & 0x8000000) != 0) {
      goto LABEL_149;
    }
  }
LABEL_15:
  if ((*((unsigned char *)this + 16) & 8) == 0) {
    goto LABEL_16;
  }
LABEL_160:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v57 = *((void *)this + 9);
  *(_WORD *)uint64_t v4 = 641;
  *(void *)(v4 + 2) = v57;
  v4 += 10;
  if ((*((unsigned char *)this + 24) & 4) == 0)
  {
LABEL_17:
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_18;
    }
LABEL_166:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v59 = *((int *)this + 69);
      *(_WORD *)uint64_t v4 = 656;
      if (v59 <= 0x7F)
      {
LABEL_168:
        v4[2] = v59;
        v4 += 3;
        if ((*((unsigned char *)this + 30) & 8) != 0) {
          goto LABEL_177;
        }
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v59 = *((int *)this + 69);
      *(_WORD *)uint64_t v4 = 656;
      if (v59 <= 0x7F) {
        goto LABEL_168;
      }
    }
    v4[2] = v59 | 0x80;
    unint64_t v60 = v59 >> 7;
    if (v59 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v60 | 0x80;
        unint64_t v61 = v60 >> 7;
        ++v4;
        unint64_t v62 = v60 >> 14;
        v60 >>= 7;
      }
      while (v62);
      *(v4 - 1) = v61;
      if ((*((unsigned char *)this + 30) & 8) != 0) {
        goto LABEL_177;
      }
    }
    else
    {
      v4[3] = v60;
      v4 += 4;
      if ((*((unsigned char *)this + 30) & 8) != 0) {
        goto LABEL_177;
      }
    }
LABEL_19:
    int v7 = *((_DWORD *)this + 5);
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_180;
  }
LABEL_163:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v58 = *((unsigned char *)this + 306);
  *(_WORD *)uint64_t v4 = 648;
  v4[2] = v58;
  v4 += 3;
  if ((*((unsigned char *)this + 23) & 0x10) != 0) {
    goto LABEL_166;
  }
LABEL_18:
  if ((*((unsigned char *)this + 30) & 8) == 0) {
    goto LABEL_19;
  }
LABEL_177:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v63 = *((unsigned char *)this + 455);
  *(_WORD *)uint64_t v4 = 664;
  v4[2] = v63;
  v4 += 3;
  int v7 = *((_DWORD *)this + 5);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_183;
  }
LABEL_180:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v64 = *((void *)this + 35);
  *(_WORD *)uint64_t v4 = 673;
  *(void *)(v4 + 2) = v64;
  v4 += 10;
  if ((v7 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_194:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v69 = *((void *)this + 37);
      *(_WORD *)uint64_t v4 = 704;
      if (v69 <= 0x7F)
      {
LABEL_196:
        v4[2] = v69;
        v4 += 3;
        int v8 = *((_DWORD *)this + 4);
        if ((v8 & 0x400) != 0) {
          goto LABEL_205;
        }
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v69 = *((void *)this + 37);
      *(_WORD *)uint64_t v4 = 704;
      if (v69 <= 0x7F) {
        goto LABEL_196;
      }
    }
    v4[2] = v69 | 0x80;
    unint64_t v70 = v69 >> 7;
    if (v69 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v70 | 0x80;
        unint64_t v71 = v70 >> 7;
        ++v4;
        unint64_t v72 = v70 >> 14;
        v70 >>= 7;
      }
      while (v72);
      *(v4 - 1) = v71;
      int v8 = *((_DWORD *)this + 4);
      if ((v8 & 0x400) != 0) {
        goto LABEL_205;
      }
    }
    else
    {
      v4[3] = v70;
      v4 += 4;
      int v8 = *((_DWORD *)this + 4);
      if ((v8 & 0x400) != 0) {
        goto LABEL_205;
      }
    }
LABEL_23:
    if ((v8 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_208;
  }
LABEL_183:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v65 = *((void *)this + 36);
    *(_WORD *)uint64_t v4 = 680;
    if (v65 <= 0x7F)
    {
LABEL_185:
      v4[2] = v65;
      v4 += 3;
      if (v7 < 0) {
        goto LABEL_194;
      }
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v65 = *((void *)this + 36);
    *(_WORD *)uint64_t v4 = 680;
    if (v65 <= 0x7F) {
      goto LABEL_185;
    }
  }
  v4[2] = v65 | 0x80;
  unint64_t v66 = v65 >> 7;
  if (v65 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v66 | 0x80;
      unint64_t v67 = v66 >> 7;
      ++v4;
      unint64_t v68 = v66 >> 14;
      v66 >>= 7;
    }
    while (v68);
    *(v4 - 1) = v67;
    if (v7 < 0) {
      goto LABEL_194;
    }
  }
  else
  {
    v4[3] = v66;
    v4 += 4;
    if (v7 < 0) {
      goto LABEL_194;
    }
  }
LABEL_22:
  int v8 = *((_DWORD *)this + 4);
  if ((v8 & 0x400) == 0) {
    goto LABEL_23;
  }
LABEL_205:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v73 = *((unsigned char *)this + 99);
  *(_WORD *)uint64_t v4 = 712;
  v4[2] = v73;
  v4 += 3;
  if ((v8 & 0x800000) == 0)
  {
LABEL_24:
    if ((*((unsigned char *)this + 24) & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_211;
  }
LABEL_208:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v74 = *((unsigned char *)this + 132);
  *(_WORD *)uint64_t v4 = 728;
  v4[2] = v74;
  v4 += 3;
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
LABEL_25:
    if ((*((unsigned char *)this + 16) & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_214;
  }
LABEL_211:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v75 = *((unsigned char *)this + 304);
  *(_WORD *)uint64_t v4 = 736;
  v4[2] = v75;
  v4 += 3;
  if ((*((unsigned char *)this + 16) & 0x10) == 0)
  {
LABEL_26:
    int v9 = *((_DWORD *)this + 6);
    if ((v9 & 0x10) == 0) {
      goto LABEL_27;
    }
LABEL_217:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v77 = *((int *)this + 77);
      *(_WORD *)uint64_t v4 = 752;
      if (v77 <= 0x7F)
      {
LABEL_219:
        v4[2] = v77;
        v4 += 3;
        if ((v9 & 0x20) != 0) {
          goto LABEL_228;
        }
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v77 = *((int *)this + 77);
      *(_WORD *)uint64_t v4 = 752;
      if (v77 <= 0x7F) {
        goto LABEL_219;
      }
    }
    v4[2] = v77 | 0x80;
    unint64_t v78 = v77 >> 7;
    if (v77 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v78 | 0x80;
        unint64_t v79 = v78 >> 7;
        ++v4;
        unint64_t v80 = v78 >> 14;
        v78 >>= 7;
      }
      while (v80);
      *(v4 - 1) = v79;
      if ((v9 & 0x20) != 0) {
        goto LABEL_228;
      }
    }
    else
    {
      v4[3] = v78;
      v4 += 4;
      if ((v9 & 0x20) != 0) {
        goto LABEL_228;
      }
    }
LABEL_28:
    if ((*((unsigned char *)this + 19) & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_231;
  }
LABEL_214:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v76 = *((void *)this + 10);
  *(_WORD *)uint64_t v4 = 745;
  *(void *)(v4 + 2) = v76;
  v4 += 10;
  int v9 = *((_DWORD *)this + 6);
  if ((v9 & 0x10) != 0) {
    goto LABEL_217;
  }
LABEL_27:
  if ((v9 & 0x20) == 0) {
    goto LABEL_28;
  }
LABEL_228:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v81 = *((void *)this + 39);
  *(_WORD *)uint64_t v4 = 761;
  *(void *)(v4 + 2) = v81;
  v4 += 10;
  if ((*((unsigned char *)this + 19) & 1) == 0)
  {
LABEL_29:
    int v10 = *((_DWORD *)this + 6);
    if ((v10 & 8) == 0) {
      goto LABEL_30;
    }
    goto LABEL_234;
  }
LABEL_231:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v82 = *((unsigned char *)this + 133);
  *(_WORD *)uint64_t v4 = 896;
  v4[2] = v82;
  v4 += 3;
  int v10 = *((_DWORD *)this + 6);
  if ((v10 & 8) == 0)
  {
LABEL_30:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_237;
  }
LABEL_234:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v83 = *((unsigned char *)this + 307);
  *(_WORD *)uint64_t v4 = 904;
  v4[2] = v83;
  v4 += 3;
  if ((v10 & 0x40000) == 0)
  {
LABEL_31:
    int v11 = *((_DWORD *)this + 4);
    if ((v11 & 4) == 0) {
      goto LABEL_32;
    }
LABEL_240:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v85 = *((int *)this + 17);
      *(_WORD *)uint64_t v4 = 920;
      if (v85 <= 0x7F)
      {
LABEL_242:
        v4[2] = v85;
        v4 += 3;
        if ((v11 & 0x4000) != 0) {
          goto LABEL_251;
        }
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v85 = *((int *)this + 17);
      *(_WORD *)uint64_t v4 = 920;
      if (v85 <= 0x7F) {
        goto LABEL_242;
      }
    }
    v4[2] = v85 | 0x80;
    unint64_t v86 = v85 >> 7;
    if (v85 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v86 | 0x80;
        unint64_t v87 = v86 >> 7;
        ++v4;
        unint64_t v88 = v86 >> 14;
        v86 >>= 7;
      }
      while (v88);
      *(v4 - 1) = v87;
      if ((v11 & 0x4000) != 0) {
        goto LABEL_251;
      }
    }
    else
    {
      v4[3] = v86;
      v4 += 4;
      if ((v11 & 0x4000) != 0) {
        goto LABEL_251;
      }
    }
LABEL_33:
    int v12 = *((_DWORD *)this + 6);
    if ((v12 & 0x40) == 0) {
      goto LABEL_34;
    }
LABEL_254:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v90 = *((int *)this + 80);
      *(_WORD *)uint64_t v4 = 936;
      if (v90 <= 0x7F)
      {
LABEL_256:
        v4[2] = v90;
        v4 += 3;
        if ((v12 & 0x80) != 0) {
          goto LABEL_265;
        }
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v90 = *((int *)this + 80);
      *(_WORD *)uint64_t v4 = 936;
      if (v90 <= 0x7F) {
        goto LABEL_256;
      }
    }
    v4[2] = v90 | 0x80;
    unint64_t v91 = v90 >> 7;
    if (v90 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v91 | 0x80;
        unint64_t v92 = v91 >> 7;
        ++v4;
        unint64_t v93 = v91 >> 14;
        v91 >>= 7;
      }
      while (v93);
      *(v4 - 1) = v92;
      if ((v12 & 0x80) != 0) {
        goto LABEL_265;
      }
    }
    else
    {
      v4[3] = v91;
      v4 += 4;
      if ((v12 & 0x80) != 0) {
        goto LABEL_265;
      }
    }
LABEL_35:
    if ((v12 & 0x200) == 0) {
      goto LABEL_36;
    }
LABEL_276:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v98 = *((int *)this + 84);
      *(_WORD *)uint64_t v4 = 952;
      if (v98 <= 0x7F)
      {
LABEL_278:
        v4[2] = v98;
        v4 += 3;
        if ((v12 & 2) != 0) {
          goto LABEL_287;
        }
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v98 = *((int *)this + 84);
      *(_WORD *)uint64_t v4 = 952;
      if (v98 <= 0x7F) {
        goto LABEL_278;
      }
    }
    v4[2] = v98 | 0x80;
    unint64_t v99 = v98 >> 7;
    if (v98 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v99 | 0x80;
        unint64_t v100 = v99 >> 7;
        ++v4;
        unint64_t v101 = v99 >> 14;
        v99 >>= 7;
      }
      while (v101);
      *(v4 - 1) = v100;
      if ((v12 & 2) != 0) {
        goto LABEL_287;
      }
    }
    else
    {
      v4[3] = v99;
      v4 += 4;
      if ((v12 & 2) != 0) {
        goto LABEL_287;
      }
    }
LABEL_37:
    if ((v12 & 0x100) == 0) {
      goto LABEL_38;
    }
    goto LABEL_290;
  }
LABEL_237:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v84 = *((unsigned char *)this + 388);
  *(_WORD *)uint64_t v4 = 912;
  v4[2] = v84;
  v4 += 3;
  int v11 = *((_DWORD *)this + 4);
  if ((v11 & 4) != 0) {
    goto LABEL_240;
  }
LABEL_32:
  if ((v11 & 0x4000) == 0) {
    goto LABEL_33;
  }
LABEL_251:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v89 = *((unsigned char *)this + 120);
  *(_WORD *)uint64_t v4 = 928;
  v4[2] = v89;
  v4 += 3;
  int v12 = *((_DWORD *)this + 6);
  if ((v12 & 0x40) != 0) {
    goto LABEL_254;
  }
LABEL_34:
  if ((v12 & 0x80) == 0) {
    goto LABEL_35;
  }
LABEL_265:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v94 = *((int *)this + 81);
    *(_WORD *)uint64_t v4 = 944;
    if (v94 <= 0x7F)
    {
LABEL_267:
      v4[2] = v94;
      v4 += 3;
      if ((v12 & 0x200) != 0) {
        goto LABEL_276;
      }
      goto LABEL_36;
    }
  }
  else
  {
    unint64_t v94 = *((int *)this + 81);
    *(_WORD *)uint64_t v4 = 944;
    if (v94 <= 0x7F) {
      goto LABEL_267;
    }
  }
  v4[2] = v94 | 0x80;
  unint64_t v95 = v94 >> 7;
  if (v94 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v95 | 0x80;
      unint64_t v96 = v95 >> 7;
      ++v4;
      unint64_t v97 = v95 >> 14;
      v95 >>= 7;
    }
    while (v97);
    *(v4 - 1) = v96;
    if ((v12 & 0x200) != 0) {
      goto LABEL_276;
    }
  }
  else
  {
    v4[3] = v95;
    v4 += 4;
    if ((v12 & 0x200) != 0) {
      goto LABEL_276;
    }
  }
LABEL_36:
  if ((v12 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_287:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v102 = *((unsigned char *)this + 305);
  *(_WORD *)uint64_t v4 = 960;
  v4[2] = v102;
  v4 += 3;
  if ((v12 & 0x100) == 0)
  {
LABEL_38:
    if ((*((unsigned char *)this + 16) & 0x20) == 0) {
      goto LABEL_39;
    }
LABEL_293:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v104 = *((int *)this + 22);
      *(_WORD *)uint64_t v4 = 976;
      if (v104 <= 0x7F)
      {
LABEL_295:
        v4[2] = v104;
        v4 += 3;
        if ((*((unsigned char *)this + 25) & 4) != 0) {
          goto LABEL_304;
        }
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v104 = *((int *)this + 22);
      *(_WORD *)uint64_t v4 = 976;
      if (v104 <= 0x7F) {
        goto LABEL_295;
      }
    }
    v4[2] = v104 | 0x80;
    unint64_t v105 = v104 >> 7;
    if (v104 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v105 | 0x80;
        unint64_t v106 = v105 >> 7;
        ++v4;
        unint64_t v107 = v105 >> 14;
        v105 >>= 7;
      }
      while (v107);
      *(v4 - 1) = v106;
      if ((*((unsigned char *)this + 25) & 4) != 0) {
        goto LABEL_304;
      }
    }
    else
    {
      v4[3] = v105;
      v4 += 4;
      if ((*((unsigned char *)this + 25) & 4) != 0) {
        goto LABEL_304;
      }
    }
LABEL_40:
    if ((*((unsigned char *)this + 16) & 0x40) == 0) {
      goto LABEL_41;
    }
LABEL_315:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v112 = *((int *)this + 23);
      *(_WORD *)uint64_t v4 = 992;
      if (v112 <= 0x7F)
      {
LABEL_317:
        v4[2] = v112;
        v4 += 3;
        uint64_t v13 = *((unsigned int *)this + 10);
        if ((int)v13 >= 1) {
          goto LABEL_42;
        }
        goto LABEL_326;
      }
    }
    else
    {
      unint64_t v112 = *((int *)this + 23);
      *(_WORD *)uint64_t v4 = 992;
      if (v112 <= 0x7F) {
        goto LABEL_317;
      }
    }
    v4[2] = v112 | 0x80;
    unint64_t v113 = v112 >> 7;
    if (v112 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v113 | 0x80;
        unint64_t v114 = v113 >> 7;
        ++v4;
        unint64_t v115 = v113 >> 14;
        v113 >>= 7;
      }
      while (v115);
      *(v4 - 1) = v114;
      uint64_t v13 = *((unsigned int *)this + 10);
      if ((int)v13 >= 1) {
        goto LABEL_42;
      }
    }
    else
    {
      v4[3] = v113;
      v4 += 4;
      uint64_t v13 = *((unsigned int *)this + 10);
      if ((int)v13 >= 1) {
        goto LABEL_42;
      }
    }
    goto LABEL_326;
  }
LABEL_290:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v103 = *((void *)this + 41);
  *(_WORD *)uint64_t v4 = 969;
  *(void *)(v4 + 2) = v103;
  v4 += 10;
  if ((*((unsigned char *)this + 16) & 0x20) != 0) {
    goto LABEL_293;
  }
LABEL_39:
  if ((*((unsigned char *)this + 25) & 4) == 0) {
    goto LABEL_40;
  }
LABEL_304:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v108 = *((int *)this + 85);
    *(_WORD *)uint64_t v4 = 984;
    if (v108 <= 0x7F)
    {
LABEL_306:
      v4[2] = v108;
      v4 += 3;
      if ((*((unsigned char *)this + 16) & 0x40) != 0) {
        goto LABEL_315;
      }
      goto LABEL_41;
    }
  }
  else
  {
    unint64_t v108 = *((int *)this + 85);
    *(_WORD *)uint64_t v4 = 984;
    if (v108 <= 0x7F) {
      goto LABEL_306;
    }
  }
  v4[2] = v108 | 0x80;
  unint64_t v109 = v108 >> 7;
  if (v108 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v109 | 0x80;
      unint64_t v110 = v109 >> 7;
      ++v4;
      unint64_t v111 = v109 >> 14;
      v109 >>= 7;
    }
    while (v111);
    *(v4 - 1) = v110;
    if ((*((unsigned char *)this + 16) & 0x40) != 0) {
      goto LABEL_315;
    }
  }
  else
  {
    v4[3] = v109;
    v4 += 4;
    if ((*((unsigned char *)this + 16) & 0x40) != 0) {
      goto LABEL_315;
    }
  }
LABEL_41:
  uint64_t v13 = *((unsigned int *)this + 10);
  if ((int)v13 >= 1)
  {
LABEL_42:
    for (uint64_t i = 0; i != v13; ++i)
    {
      if (*(void *)a3 <= (unint64_t)v4)
      {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
        unint64_t v15 = *(int *)(*((void *)this + 6) + 4 * i);
        *(_WORD *)uint64_t v4 = 1000;
        if (v15 > 0x7F)
        {
LABEL_47:
          v4[2] = v15 | 0x80;
          unint64_t v16 = v15 >> 7;
          if (v15 >> 14)
          {
            v4 += 4;
            do
            {
              *(v4 - 1) = v16 | 0x80;
              unint64_t v17 = v16 >> 7;
              ++v4;
              unint64_t v18 = v16 >> 14;
              v16 >>= 7;
            }
            while (v18);
            *(v4 - 1) = v17;
          }
          else
          {
            v4[3] = v16;
            v4 += 4;
          }
          continue;
        }
      }
      else
      {
        unint64_t v15 = *(int *)(*((void *)this + 6) + 4 * i);
        *(_WORD *)uint64_t v4 = 1000;
        if (v15 > 0x7F) {
          goto LABEL_47;
        }
      }
      v4[2] = v15;
      v4 += 3;
    }
  }
LABEL_326:
  int v116 = *((_DWORD *)this + 6);
  if ((v116 & 0x1000) != 0)
  {
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v139 = *((int *)this + 88);
      *(_WORD *)uint64_t v4 = 1008;
      if (v139 <= 0x7F)
      {
LABEL_432:
        v4[2] = v139;
        v4 += 3;
        if ((v116 & 0x800) != 0) {
          goto LABEL_441;
        }
        goto LABEL_328;
      }
    }
    else
    {
      unint64_t v139 = *((int *)this + 88);
      *(_WORD *)uint64_t v4 = 1008;
      if (v139 <= 0x7F) {
        goto LABEL_432;
      }
    }
    v4[2] = v139 | 0x80;
    unint64_t v140 = v139 >> 7;
    if (v139 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v140 | 0x80;
        unint64_t v141 = v140 >> 7;
        ++v4;
        unint64_t v142 = v140 >> 14;
        v140 >>= 7;
      }
      while (v142);
      *(v4 - 1) = v141;
      if ((v116 & 0x800) != 0) {
        goto LABEL_441;
      }
    }
    else
    {
      v4[3] = v140;
      v4 += 4;
      if ((v116 & 0x800) != 0) {
        goto LABEL_441;
      }
    }
LABEL_328:
    if ((*((unsigned char *)this + 17) & 2) == 0) {
      goto LABEL_329;
    }
    goto LABEL_444;
  }
  if ((v116 & 0x800) == 0) {
    goto LABEL_328;
  }
LABEL_441:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v143 = *((void *)this + 43);
  *(_WORD *)uint64_t v4 = 1017;
  *(void *)(v4 + 2) = v143;
  v4 += 10;
  if ((*((unsigned char *)this + 17) & 2) == 0)
  {
LABEL_329:
    int v117 = *((_DWORD *)this + 6);
    if ((v117 & 0x2000) == 0) {
      goto LABEL_330;
    }
LABEL_447:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v145 = *((int *)this + 89);
      *(_WORD *)uint64_t v4 = 1160;
      if (v145 <= 0x7F)
      {
LABEL_449:
        v4[2] = v145;
        v4 += 3;
        if ((v117 & 0x4000) != 0) {
          goto LABEL_458;
        }
        goto LABEL_331;
      }
    }
    else
    {
      unint64_t v145 = *((int *)this + 89);
      *(_WORD *)uint64_t v4 = 1160;
      if (v145 <= 0x7F) {
        goto LABEL_449;
      }
    }
    v4[2] = v145 | 0x80;
    unint64_t v146 = v145 >> 7;
    if (v145 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v146 | 0x80;
        unint64_t v147 = v146 >> 7;
        ++v4;
        unint64_t v148 = v146 >> 14;
        v146 >>= 7;
      }
      while (v148);
      *(v4 - 1) = v147;
      if ((v117 & 0x4000) != 0) {
        goto LABEL_458;
      }
    }
    else
    {
      v4[3] = v146;
      v4 += 4;
      if ((v117 & 0x4000) != 0) {
        goto LABEL_458;
      }
    }
LABEL_331:
    if ((v117 & 0x8000) == 0) {
      goto LABEL_332;
    }
    goto LABEL_461;
  }
LABEL_444:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v144 = *((unsigned char *)this + 98);
  *(_WORD *)uint64_t v4 = 1152;
  v4[2] = v144;
  v4 += 3;
  int v117 = *((_DWORD *)this + 6);
  if ((v117 & 0x2000) != 0) {
    goto LABEL_447;
  }
LABEL_330:
  if ((v117 & 0x4000) == 0) {
    goto LABEL_331;
  }
LABEL_458:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v149 = *((void *)this + 45);
  *(_WORD *)uint64_t v4 = 1169;
  *(void *)(v4 + 2) = v149;
  v4 += 10;
  if ((v117 & 0x8000) == 0)
  {
LABEL_332:
    int v118 = *((_DWORD *)this + 4);
    if ((v118 & 0x800) == 0) {
      goto LABEL_333;
    }
LABEL_464:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v151 = *((int *)this + 25);
      *(_WORD *)uint64_t v4 = 1184;
      if (v151 <= 0x7F)
      {
LABEL_466:
        v4[2] = v151;
        v4 += 3;
        if ((v118 & 0x1000) != 0) {
          goto LABEL_475;
        }
        goto LABEL_334;
      }
    }
    else
    {
      unint64_t v151 = *((int *)this + 25);
      *(_WORD *)uint64_t v4 = 1184;
      if (v151 <= 0x7F) {
        goto LABEL_466;
      }
    }
    v4[2] = v151 | 0x80;
    unint64_t v152 = v151 >> 7;
    if (v151 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v152 | 0x80;
        unint64_t v153 = v152 >> 7;
        ++v4;
        unint64_t v154 = v152 >> 14;
        v152 >>= 7;
      }
      while (v154);
      *(v4 - 1) = v153;
      if ((v118 & 0x1000) != 0) {
        goto LABEL_475;
      }
    }
    else
    {
      v4[3] = v152;
      v4 += 4;
      if ((v118 & 0x1000) != 0) {
        goto LABEL_475;
      }
    }
LABEL_334:
    if ((v118 & 1) == 0) {
      goto LABEL_335;
    }
LABEL_478:
    uint64_t v156 = *((void *)this + 7);
    if (*(char *)(v156 + 23) < 0)
    {
      int64_t v157 = *(void *)(v156 + 8);
      if (v157 > 127) {
        goto LABEL_496;
      }
    }
    else
    {
      int64_t v157 = *(unsigned __int8 *)(v156 + 23);
    }
    if (*(void *)a3 - (void)v4 + 13 >= v157)
    {
      *(_WORD *)uint64_t v4 = 1202;
      int v158 = v4 + 3;
      v4[2] = v157;
      if (*(char *)(v156 + 23) >= 0) {
        uint64_t v159 = (const void *)v156;
      }
      else {
        uint64_t v159 = *(const void **)v156;
      }
      memcpy(v4 + 3, v159, v157);
      uint64_t v4 = &v158[v157];
      int v119 = *((_DWORD *)this + 6);
      if ((v119 & 0x10000) != 0) {
        goto LABEL_486;
      }
LABEL_336:
      if ((v119 & 0x800000) == 0) {
        goto LABEL_337;
      }
      goto LABEL_489;
    }
LABEL_496:
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a3, 70, v156, v4);
    int v119 = *((_DWORD *)this + 6);
    if ((v119 & 0x10000) != 0) {
      goto LABEL_486;
    }
    goto LABEL_336;
  }
LABEL_461:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v150 = *((void *)this + 46);
  *(_WORD *)uint64_t v4 = 1177;
  *(void *)(v4 + 2) = v150;
  v4 += 10;
  int v118 = *((_DWORD *)this + 4);
  if ((v118 & 0x800) != 0) {
    goto LABEL_464;
  }
LABEL_333:
  if ((v118 & 0x1000) == 0) {
    goto LABEL_334;
  }
LABEL_475:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v155 = *((void *)this + 13);
  *(_WORD *)uint64_t v4 = 1193;
  *(void *)(v4 + 2) = v155;
  v4 += 10;
  if (v118) {
    goto LABEL_478;
  }
LABEL_335:
  int v119 = *((_DWORD *)this + 6);
  if ((v119 & 0x10000) == 0) {
    goto LABEL_336;
  }
LABEL_486:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v160 = *((void *)this + 47);
  *(_WORD *)uint64_t v4 = 1209;
  *(void *)(v4 + 2) = v160;
  v4 += 10;
  if ((v119 & 0x800000) == 0)
  {
LABEL_337:
    if ((v119 & 0x20000) == 0) {
      goto LABEL_338;
    }
LABEL_492:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v162 = *((int *)this + 96);
      *(_WORD *)uint64_t v4 = 1224;
      if (v162 <= 0x7F)
      {
LABEL_494:
        v4[2] = v162;
        v4 += 3;
        if ((v119 & 0x200000) != 0) {
          goto LABEL_505;
        }
        goto LABEL_339;
      }
    }
    else
    {
      unint64_t v162 = *((int *)this + 96);
      *(_WORD *)uint64_t v4 = 1224;
      if (v162 <= 0x7F) {
        goto LABEL_494;
      }
    }
    v4[2] = v162 | 0x80;
    unint64_t v163 = v162 >> 7;
    if (v162 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v163 | 0x80;
        unint64_t v164 = v163 >> 7;
        ++v4;
        unint64_t v165 = v163 >> 14;
        v163 >>= 7;
      }
      while (v165);
      *(v4 - 1) = v164;
      if ((v119 & 0x200000) != 0) {
        goto LABEL_505;
      }
    }
    else
    {
      v4[3] = v163;
      v4 += 4;
      if ((v119 & 0x200000) != 0) {
        goto LABEL_505;
      }
    }
LABEL_339:
    int v120 = *((_DWORD *)this + 4);
    if ((v120 & 0x80) == 0) {
      goto LABEL_340;
    }
    goto LABEL_508;
  }
LABEL_489:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v161 = *((unsigned char *)this + 393);
  *(_WORD *)uint64_t v4 = 1216;
  v4[2] = v161;
  v4 += 3;
  if ((v119 & 0x20000) != 0) {
    goto LABEL_492;
  }
LABEL_338:
  if ((v119 & 0x200000) == 0) {
    goto LABEL_339;
  }
LABEL_505:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v166 = *((unsigned char *)this + 391);
  *(_WORD *)uint64_t v4 = 1232;
  v4[2] = v166;
  v4 += 3;
  int v120 = *((_DWORD *)this + 4);
  if ((v120 & 0x80) == 0)
  {
LABEL_340:
    if ((v120 & 0x2000) == 0) {
      goto LABEL_341;
    }
    goto LABEL_511;
  }
LABEL_508:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v167 = *((unsigned char *)this + 96);
  *(_WORD *)uint64_t v4 = 1240;
  v4[2] = v167;
  v4 += 3;
  if ((v120 & 0x2000) == 0)
  {
LABEL_341:
    if ((v120 & 0x100) == 0) {
      goto LABEL_342;
    }
    goto LABEL_514;
  }
LABEL_511:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v168 = *((void *)this + 14);
  *(_WORD *)uint64_t v4 = 1249;
  *(void *)(v4 + 2) = v168;
  v4 += 10;
  if ((v120 & 0x100) == 0)
  {
LABEL_342:
    if ((v120 & 0x8000) == 0) {
      goto LABEL_343;
    }
    goto LABEL_517;
  }
LABEL_514:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v169 = *((unsigned char *)this + 97);
  *(_WORD *)uint64_t v4 = 1256;
  v4[2] = v169;
  v4 += 3;
  if ((v120 & 0x8000) == 0)
  {
LABEL_343:
    if ((v120 & 0x10000) == 0) {
      goto LABEL_344;
    }
    goto LABEL_520;
  }
LABEL_517:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v170 = *((unsigned char *)this + 121);
  *(_WORD *)uint64_t v4 = 1264;
  v4[2] = v170;
  v4 += 3;
  if ((v120 & 0x10000) == 0)
  {
LABEL_344:
    if ((*((unsigned char *)this + 29) & 8) == 0) {
      goto LABEL_345;
    }
    goto LABEL_523;
  }
LABEL_520:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v171 = *((unsigned char *)this + 122);
  *(_WORD *)uint64_t v4 = 1272;
  v4[2] = v171;
  v4 += 3;
  if ((*((unsigned char *)this + 29) & 8) == 0)
  {
LABEL_345:
    int v121 = *((_DWORD *)this + 4);
    if ((v121 & 0x40000) == 0) {
      goto LABEL_346;
    }
LABEL_526:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v173 = *((int *)this + 31);
      *(_WORD *)uint64_t v4 = 1424;
      if (v173 <= 0x7F)
      {
LABEL_528:
        v4[2] = v173;
        v4 += 3;
        if (v121 < 0) {
          goto LABEL_537;
        }
        goto LABEL_347;
      }
    }
    else
    {
      unint64_t v173 = *((int *)this + 31);
      *(_WORD *)uint64_t v4 = 1424;
      if (v173 <= 0x7F) {
        goto LABEL_528;
      }
    }
    v4[2] = v173 | 0x80;
    unint64_t v174 = v173 >> 7;
    if (v173 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v174 | 0x80;
        unint64_t v175 = v174 >> 7;
        ++v4;
        unint64_t v176 = v174 >> 14;
        v174 >>= 7;
      }
      while (v176);
      *(v4 - 1) = v175;
      if (v121 < 0) {
        goto LABEL_537;
      }
    }
    else
    {
      v4[3] = v174;
      v4 += 4;
      if (v121 < 0) {
        goto LABEL_537;
      }
    }
LABEL_347:
    if ((*((unsigned char *)this + 26) & 8) == 0) {
      goto LABEL_348;
    }
    goto LABEL_540;
  }
LABEL_523:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v172 = *((unsigned char *)this + 444);
  *(_WORD *)uint64_t v4 = 1408;
  v4[2] = v172;
  v4 += 3;
  int v121 = *((_DWORD *)this + 4);
  if ((v121 & 0x40000) != 0) {
    goto LABEL_526;
  }
LABEL_346:
  if ((v121 & 0x80000000) == 0) {
    goto LABEL_347;
  }
LABEL_537:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v177 = *((unsigned char *)this + 147);
  *(_WORD *)uint64_t v4 = 1432;
  v4[2] = v177;
  v4 += 3;
  if ((*((unsigned char *)this + 26) & 8) == 0)
  {
LABEL_348:
    if ((*((unsigned char *)this + 18) & 8) == 0) {
      goto LABEL_349;
    }
    goto LABEL_543;
  }
LABEL_540:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v178 = *((unsigned char *)this + 389);
  *(_WORD *)uint64_t v4 = 1440;
  v4[2] = v178;
  v4 += 3;
  if ((*((unsigned char *)this + 18) & 8) == 0)
  {
LABEL_349:
    if ((*((unsigned char *)this + 27) & 1) == 0) {
      goto LABEL_350;
    }
    goto LABEL_546;
  }
LABEL_543:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v179 = *((unsigned char *)this + 128);
  *(_WORD *)uint64_t v4 = 1448;
  v4[2] = v179;
  v4 += 3;
  if ((*((unsigned char *)this + 27) & 1) == 0)
  {
LABEL_350:
    if ((*((unsigned char *)this + 18) & 0x10) == 0) {
      goto LABEL_351;
    }
    goto LABEL_549;
  }
LABEL_546:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v180 = *((unsigned char *)this + 394);
  *(_WORD *)uint64_t v4 = 1456;
  v4[2] = v180;
  v4 += 3;
  if ((*((unsigned char *)this + 18) & 0x10) == 0)
  {
LABEL_351:
    int v122 = *((_DWORD *)this + 6);
    if ((v122 & 0x400000) == 0) {
      goto LABEL_352;
    }
    goto LABEL_552;
  }
LABEL_549:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v181 = *((unsigned char *)this + 129);
  *(_WORD *)uint64_t v4 = 1464;
  v4[2] = v181;
  v4 += 3;
  int v122 = *((_DWORD *)this + 6);
  if ((v122 & 0x400000) == 0)
  {
LABEL_352:
    if ((v122 & 0x100000) == 0) {
      goto LABEL_353;
    }
    goto LABEL_555;
  }
LABEL_552:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v182 = *((unsigned char *)this + 392);
  *(_WORD *)uint64_t v4 = 1472;
  v4[2] = v182;
  v4 += 3;
  if ((v122 & 0x100000) == 0)
  {
LABEL_353:
    if ((v122 & 0x4000000) == 0) {
      goto LABEL_354;
    }
    goto LABEL_558;
  }
LABEL_555:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v183 = *((unsigned char *)this + 390);
  *(_WORD *)uint64_t v4 = 1480;
  v4[2] = v183;
  v4 += 3;
  if ((v122 & 0x4000000) == 0)
  {
LABEL_354:
    if ((v122 & 0x8000000) == 0) {
      goto LABEL_355;
    }
LABEL_569:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v188 = *((int *)this + 100);
      *(_WORD *)uint64_t v4 = 1496;
      if (v188 <= 0x7F)
      {
LABEL_571:
        v4[2] = v188;
        v4 += 3;
        if ((*((unsigned char *)this + 18) & 2) != 0) {
          goto LABEL_580;
        }
        goto LABEL_356;
      }
    }
    else
    {
      unint64_t v188 = *((int *)this + 100);
      *(_WORD *)uint64_t v4 = 1496;
      if (v188 <= 0x7F) {
        goto LABEL_571;
      }
    }
    v4[2] = v188 | 0x80;
    unint64_t v189 = v188 >> 7;
    if (v188 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v189 | 0x80;
        unint64_t v190 = v189 >> 7;
        ++v4;
        unint64_t v191 = v189 >> 14;
        v189 >>= 7;
      }
      while (v191);
      *(v4 - 1) = v190;
      if ((*((unsigned char *)this + 18) & 2) != 0) {
        goto LABEL_580;
      }
    }
    else
    {
      v4[3] = v189;
      v4 += 4;
      if ((*((unsigned char *)this + 18) & 2) != 0) {
        goto LABEL_580;
      }
    }
LABEL_356:
    if ((*((unsigned char *)this + 27) & 2) == 0) {
      goto LABEL_357;
    }
    goto LABEL_583;
  }
LABEL_558:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v184 = *((int *)this + 99);
    *(_WORD *)uint64_t v4 = 1488;
    if (v184 <= 0x7F)
    {
LABEL_560:
      v4[2] = v184;
      v4 += 3;
      if ((v122 & 0x8000000) != 0) {
        goto LABEL_569;
      }
      goto LABEL_355;
    }
  }
  else
  {
    unint64_t v184 = *((int *)this + 99);
    *(_WORD *)uint64_t v4 = 1488;
    if (v184 <= 0x7F) {
      goto LABEL_560;
    }
  }
  v4[2] = v184 | 0x80;
  unint64_t v185 = v184 >> 7;
  if (v184 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v185 | 0x80;
      unint64_t v186 = v185 >> 7;
      ++v4;
      unint64_t v187 = v185 >> 14;
      v185 >>= 7;
    }
    while (v187);
    *(v4 - 1) = v186;
    if ((v122 & 0x8000000) != 0) {
      goto LABEL_569;
    }
  }
  else
  {
    v4[3] = v185;
    v4 += 4;
    if ((v122 & 0x8000000) != 0) {
      goto LABEL_569;
    }
  }
LABEL_355:
  if ((*((unsigned char *)this + 18) & 2) == 0) {
    goto LABEL_356;
  }
LABEL_580:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v192 = *((unsigned char *)this + 123);
  *(_WORD *)uint64_t v4 = 1504;
  v4[2] = v192;
  v4 += 3;
  if ((*((unsigned char *)this + 27) & 2) == 0)
  {
LABEL_357:
    int v123 = *((_DWORD *)this + 7);
    if ((v123 & 0x100) == 0) {
      goto LABEL_358;
    }
    goto LABEL_586;
  }
LABEL_583:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v193 = *((unsigned char *)this + 395);
  *(_WORD *)uint64_t v4 = 1512;
  v4[2] = v193;
  v4 += 3;
  int v123 = *((_DWORD *)this + 7);
  if ((v123 & 0x100) == 0)
  {
LABEL_358:
    if ((v123 & 4) == 0) {
      goto LABEL_359;
    }
    goto LABEL_589;
  }
LABEL_586:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v194 = *((unsigned char *)this + 441);
  *(_WORD *)uint64_t v4 = 1520;
  v4[2] = v194;
  v4 += 3;
  if ((v123 & 4) == 0)
  {
LABEL_359:
    int v124 = *((_DWORD *)this + 6);
    if ((v124 & 0x10000000) == 0) {
      goto LABEL_360;
    }
    goto LABEL_592;
  }
LABEL_589:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v195 = *((unsigned char *)this + 425);
  *(_WORD *)uint64_t v4 = 1528;
  v4[2] = v195;
  v4 += 3;
  int v124 = *((_DWORD *)this + 6);
  if ((v124 & 0x10000000) == 0)
  {
LABEL_360:
    if ((v124 & 0x20000000) == 0) {
      goto LABEL_361;
    }
LABEL_603:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v200 = *((int *)this + 102);
      *(_WORD *)uint64_t v4 = 1672;
      if (v200 <= 0x7F)
      {
LABEL_605:
        v4[2] = v200;
        v4 += 3;
        if ((*((unsigned char *)this + 18) & 0x40) != 0) {
          goto LABEL_614;
        }
        goto LABEL_362;
      }
    }
    else
    {
      unint64_t v200 = *((int *)this + 102);
      *(_WORD *)uint64_t v4 = 1672;
      if (v200 <= 0x7F) {
        goto LABEL_605;
      }
    }
    v4[2] = v200 | 0x80;
    unint64_t v201 = v200 >> 7;
    if (v200 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v201 | 0x80;
        unint64_t v202 = v201 >> 7;
        ++v4;
        unint64_t v203 = v201 >> 14;
        v201 >>= 7;
      }
      while (v203);
      *(v4 - 1) = v202;
      if ((*((unsigned char *)this + 18) & 0x40) != 0) {
        goto LABEL_614;
      }
    }
    else
    {
      v4[3] = v201;
      v4 += 4;
      if ((*((unsigned char *)this + 18) & 0x40) != 0) {
        goto LABEL_614;
      }
    }
LABEL_362:
    int v125 = *((_DWORD *)this + 6);
    if ((v125 & 0x40000000) == 0) {
      goto LABEL_363;
    }
    goto LABEL_617;
  }
LABEL_592:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v196 = *((int *)this + 101);
    *(_WORD *)uint64_t v4 = 1664;
    if (v196 <= 0x7F)
    {
LABEL_594:
      v4[2] = v196;
      v4 += 3;
      if ((v124 & 0x20000000) != 0) {
        goto LABEL_603;
      }
      goto LABEL_361;
    }
  }
  else
  {
    unint64_t v196 = *((int *)this + 101);
    *(_WORD *)uint64_t v4 = 1664;
    if (v196 <= 0x7F) {
      goto LABEL_594;
    }
  }
  v4[2] = v196 | 0x80;
  unint64_t v197 = v196 >> 7;
  if (v196 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v197 | 0x80;
      unint64_t v198 = v197 >> 7;
      ++v4;
      unint64_t v199 = v197 >> 14;
      v197 >>= 7;
    }
    while (v199);
    *(v4 - 1) = v198;
    if ((v124 & 0x20000000) != 0) {
      goto LABEL_603;
    }
  }
  else
  {
    v4[3] = v197;
    v4 += 4;
    if ((v124 & 0x20000000) != 0) {
      goto LABEL_603;
    }
  }
LABEL_361:
  if ((*((unsigned char *)this + 18) & 0x40) == 0) {
    goto LABEL_362;
  }
LABEL_614:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v204 = *((unsigned char *)this + 131);
  *(_WORD *)uint64_t v4 = 1680;
  v4[2] = v204;
  v4 += 3;
  int v125 = *((_DWORD *)this + 6);
  if ((v125 & 0x40000000) == 0)
  {
LABEL_363:
    if ((v125 & 0x80000000) == 0) {
      goto LABEL_364;
    }
LABEL_628:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v209 = *((int *)this + 104);
      *(_WORD *)uint64_t v4 = 1696;
      if (v209 <= 0x7F)
      {
LABEL_630:
        v4[2] = v209;
        v4 += 3;
        int v126 = *((_DWORD *)this + 5);
        if ((v126 & 0x80) != 0) {
          goto LABEL_639;
        }
        goto LABEL_365;
      }
    }
    else
    {
      unint64_t v209 = *((int *)this + 104);
      *(_WORD *)uint64_t v4 = 1696;
      if (v209 <= 0x7F) {
        goto LABEL_630;
      }
    }
    v4[2] = v209 | 0x80;
    unint64_t v210 = v209 >> 7;
    if (v209 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v210 | 0x80;
        unint64_t v211 = v210 >> 7;
        ++v4;
        unint64_t v212 = v210 >> 14;
        v210 >>= 7;
      }
      while (v212);
      *(v4 - 1) = v211;
      int v126 = *((_DWORD *)this + 5);
      if ((v126 & 0x80) != 0) {
        goto LABEL_639;
      }
    }
    else
    {
      v4[3] = v210;
      v4 += 4;
      int v126 = *((_DWORD *)this + 5);
      if ((v126 & 0x80) != 0) {
        goto LABEL_639;
      }
    }
LABEL_365:
    if ((v126 & 8) == 0) {
      goto LABEL_366;
    }
    goto LABEL_642;
  }
LABEL_617:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v205 = *((int *)this + 103);
    *(_WORD *)uint64_t v4 = 1688;
    if (v205 <= 0x7F)
    {
LABEL_619:
      v4[2] = v205;
      v4 += 3;
      if (v125 < 0) {
        goto LABEL_628;
      }
      goto LABEL_364;
    }
  }
  else
  {
    unint64_t v205 = *((int *)this + 103);
    *(_WORD *)uint64_t v4 = 1688;
    if (v205 <= 0x7F) {
      goto LABEL_619;
    }
  }
  v4[2] = v205 | 0x80;
  unint64_t v206 = v205 >> 7;
  if (v205 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v206 | 0x80;
      unint64_t v207 = v206 >> 7;
      ++v4;
      unint64_t v208 = v206 >> 14;
      v206 >>= 7;
    }
    while (v208);
    *(v4 - 1) = v207;
    if (v125 < 0) {
      goto LABEL_628;
    }
  }
  else
  {
    v4[3] = v206;
    v4 += 4;
    if (v125 < 0) {
      goto LABEL_628;
    }
  }
LABEL_364:
  int v126 = *((_DWORD *)this + 5);
  if ((v126 & 0x80) == 0) {
    goto LABEL_365;
  }
LABEL_639:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v213 = *((unsigned char *)this + 155);
  *(_WORD *)uint64_t v4 = 1704;
  v4[2] = v213;
  v4 += 3;
  if ((v126 & 8) == 0)
  {
LABEL_366:
    if ((*((unsigned char *)this + 19) & 8) == 0) {
      goto LABEL_367;
    }
LABEL_645:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v215 = *((void *)this + 17);
      *(_WORD *)uint64_t v4 = 1728;
      if (v215 <= 0x7F)
      {
LABEL_647:
        v4[2] = v215;
        v4 += 3;
        if (*((unsigned char *)this + 20)) {
          goto LABEL_656;
        }
        goto LABEL_368;
      }
    }
    else
    {
      unint64_t v215 = *((void *)this + 17);
      *(_WORD *)uint64_t v4 = 1728;
      if (v215 <= 0x7F) {
        goto LABEL_647;
      }
    }
    v4[2] = v215 | 0x80;
    unint64_t v216 = v215 >> 7;
    if (v215 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v216 | 0x80;
        unint64_t v217 = v216 >> 7;
        ++v4;
        unint64_t v218 = v216 >> 14;
        v216 >>= 7;
      }
      while (v218);
      *(v4 - 1) = v217;
      if (*((unsigned char *)this + 20)) {
        goto LABEL_656;
      }
    }
    else
    {
      v4[3] = v216;
      v4 += 4;
      if (*((unsigned char *)this + 20)) {
        goto LABEL_656;
      }
    }
LABEL_368:
    int v127 = *((_DWORD *)this + 7);
    if ((v127 & 2) == 0) {
      goto LABEL_369;
    }
    goto LABEL_659;
  }
LABEL_642:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v214 = *((unsigned char *)this + 151);
  *(_WORD *)uint64_t v4 = 1720;
  v4[2] = v214;
  v4 += 3;
  if ((*((unsigned char *)this + 19) & 8) != 0) {
    goto LABEL_645;
  }
LABEL_367:
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_368;
  }
LABEL_656:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v219 = *((unsigned char *)this + 148);
  *(_WORD *)uint64_t v4 = 1736;
  v4[2] = v219;
  v4 += 3;
  int v127 = *((_DWORD *)this + 7);
  if ((v127 & 2) == 0)
  {
LABEL_369:
    if ((v127 & 1) == 0) {
      goto LABEL_370;
    }
LABEL_662:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v221 = *((int *)this + 105);
      *(_WORD *)uint64_t v4 = 1752;
      if (v221 <= 0x7F)
      {
LABEL_664:
        v4[2] = v221;
        v4 += 3;
        if ((v127 & 0x20000000) != 0) {
          goto LABEL_673;
        }
        goto LABEL_371;
      }
    }
    else
    {
      unint64_t v221 = *((int *)this + 105);
      *(_WORD *)uint64_t v4 = 1752;
      if (v221 <= 0x7F) {
        goto LABEL_664;
      }
    }
    v4[2] = v221 | 0x80;
    unint64_t v222 = v221 >> 7;
    if (v221 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v222 | 0x80;
        unint64_t v223 = v222 >> 7;
        ++v4;
        unint64_t v224 = v222 >> 14;
        v222 >>= 7;
      }
      while (v224);
      *(v4 - 1) = v223;
      if ((v127 & 0x20000000) != 0) {
        goto LABEL_673;
      }
    }
    else
    {
      v4[3] = v222;
      v4 += 4;
      if ((v127 & 0x20000000) != 0) {
        goto LABEL_673;
      }
    }
LABEL_371:
    if ((v127 & 0x40000000) == 0) {
      goto LABEL_372;
    }
    goto LABEL_676;
  }
LABEL_659:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v220 = *((unsigned char *)this + 424);
  *(_WORD *)uint64_t v4 = 1744;
  v4[2] = v220;
  v4 += 3;
  if (v127) {
    goto LABEL_662;
  }
LABEL_370:
  if ((v127 & 0x20000000) == 0) {
    goto LABEL_371;
  }
LABEL_673:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v225 = *((unsigned char *)this + 502);
  *(_WORD *)uint64_t v4 = 1760;
  v4[2] = v225;
  v4 += 3;
  if ((v127 & 0x40000000) == 0)
  {
LABEL_372:
    if ((v127 & 0x20) == 0) {
      goto LABEL_373;
    }
LABEL_679:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v227 = *((int *)this + 107);
      *(_WORD *)uint64_t v4 = 1776;
      if (v227 <= 0x7F)
      {
LABEL_681:
        v4[2] = v227;
        v4 += 3;
        if ((*((unsigned char *)this + 19) & 0x10) != 0) {
          goto LABEL_690;
        }
        goto LABEL_374;
      }
    }
    else
    {
      unint64_t v227 = *((int *)this + 107);
      *(_WORD *)uint64_t v4 = 1776;
      if (v227 <= 0x7F) {
        goto LABEL_681;
      }
    }
    v4[2] = v227 | 0x80;
    unint64_t v228 = v227 >> 7;
    if (v227 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v228 | 0x80;
        unint64_t v229 = v228 >> 7;
        ++v4;
        unint64_t v230 = v228 >> 14;
        v228 >>= 7;
      }
      while (v230);
      *(v4 - 1) = v229;
      if ((*((unsigned char *)this + 19) & 0x10) != 0) {
        goto LABEL_690;
      }
    }
    else
    {
      v4[3] = v228;
      v4 += 4;
      if ((*((unsigned char *)this + 19) & 0x10) != 0) {
        goto LABEL_690;
      }
    }
LABEL_374:
    int v128 = *((_DWORD *)this + 7);
    if ((v128 & 0x80) == 0) {
      goto LABEL_375;
    }
    goto LABEL_693;
  }
LABEL_676:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v226 = *((unsigned char *)this + 503);
  *(_WORD *)uint64_t v4 = 1768;
  v4[2] = v226;
  v4 += 3;
  if ((v127 & 0x20) != 0) {
    goto LABEL_679;
  }
LABEL_373:
  if ((*((unsigned char *)this + 19) & 0x10) == 0) {
    goto LABEL_374;
  }
LABEL_690:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v231 = *((unsigned char *)this + 144);
  *(_WORD *)uint64_t v4 = 1784;
  v4[2] = v231;
  v4 += 3;
  int v128 = *((_DWORD *)this + 7);
  if ((v128 & 0x80) == 0)
  {
LABEL_375:
    if ((v128 & 8) == 0) {
      goto LABEL_376;
    }
    goto LABEL_696;
  }
LABEL_693:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v232 = *((unsigned char *)this + 440);
  *(_WORD *)uint64_t v4 = 1920;
  v4[2] = v232;
  v4 += 3;
  if ((v128 & 8) == 0)
  {
LABEL_376:
    if ((v128 & 0x10) == 0) {
      goto LABEL_377;
    }
    goto LABEL_699;
  }
LABEL_696:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v233 = *((unsigned char *)this + 426);
  *(_WORD *)uint64_t v4 = 1928;
  v4[2] = v233;
  v4 += 3;
  if ((v128 & 0x10) == 0)
  {
LABEL_377:
    if ((v128 & 0x40) == 0) {
      goto LABEL_378;
    }
    goto LABEL_702;
  }
LABEL_699:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v234 = *((unsigned char *)this + 427);
  *(_WORD *)uint64_t v4 = 1936;
  v4[2] = v234;
  v4 += 3;
  if ((v128 & 0x40) == 0)
  {
LABEL_378:
    if ((v128 & 0x200) == 0) {
      goto LABEL_379;
    }
    goto LABEL_705;
  }
LABEL_702:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v235 = *((void *)this + 54);
  *(_WORD *)uint64_t v4 = 1945;
  *(void *)(v4 + 2) = v235;
  v4 += 10;
  if ((v128 & 0x200) == 0)
  {
LABEL_379:
    if ((v128 & 0x1000) == 0) {
      goto LABEL_380;
    }
    goto LABEL_708;
  }
LABEL_705:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v236 = *((unsigned char *)this + 442);
  *(_WORD *)uint64_t v4 = 1952;
  v4[2] = v236;
  v4 += 3;
  if ((v128 & 0x1000) == 0)
  {
LABEL_380:
    if ((v128 & 0x8000) == 0) {
      goto LABEL_381;
    }
LABEL_711:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v238 = *((int *)this + 112);
      *(_WORD *)uint64_t v4 = 1976;
      if (v238 <= 0x7F)
      {
LABEL_713:
        v4[2] = v238;
        v4 += 3;
        if ((v128 & 0x2000) != 0) {
          goto LABEL_722;
        }
        goto LABEL_382;
      }
    }
    else
    {
      unint64_t v238 = *((int *)this + 112);
      *(_WORD *)uint64_t v4 = 1976;
      if (v238 <= 0x7F) {
        goto LABEL_713;
      }
    }
    v4[2] = v238 | 0x80;
    unint64_t v239 = v238 >> 7;
    if (v238 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v239 | 0x80;
        unint64_t v240 = v239 >> 7;
        ++v4;
        unint64_t v241 = v239 >> 14;
        v239 >>= 7;
      }
      while (v241);
      *(v4 - 1) = v240;
      if ((v128 & 0x2000) != 0) {
        goto LABEL_722;
      }
    }
    else
    {
      v4[3] = v239;
      v4 += 4;
      if ((v128 & 0x2000) != 0) {
        goto LABEL_722;
      }
    }
LABEL_382:
    if ((v128 & 0x100000) == 0) {
      goto LABEL_383;
    }
LABEL_725:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v243 = *((int *)this + 114);
      *(_WORD *)uint64_t v4 = 1992;
      if (v243 <= 0x7F)
      {
LABEL_727:
        v4[2] = v243;
        v4 += 3;
        if ((v128 & 0x200000) != 0) {
          goto LABEL_736;
        }
        goto LABEL_384;
      }
    }
    else
    {
      unint64_t v243 = *((int *)this + 114);
      *(_WORD *)uint64_t v4 = 1992;
      if (v243 <= 0x7F) {
        goto LABEL_727;
      }
    }
    v4[2] = v243 | 0x80;
    unint64_t v244 = v243 >> 7;
    if (v243 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v244 | 0x80;
        unint64_t v245 = v244 >> 7;
        ++v4;
        unint64_t v246 = v244 >> 14;
        v244 >>= 7;
      }
      while (v246);
      *(v4 - 1) = v245;
      if ((v128 & 0x200000) != 0) {
        goto LABEL_736;
      }
    }
    else
    {
      v4[3] = v244;
      v4 += 4;
      if ((v128 & 0x200000) != 0) {
        goto LABEL_736;
      }
    }
LABEL_384:
    if ((v128 & 0x400000) == 0) {
      goto LABEL_385;
    }
LABEL_747:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v251 = *((void *)this + 58);
      *(_WORD *)uint64_t v4 = 2008;
      if (v251 <= 0x7F)
      {
LABEL_749:
        v4[2] = v251;
        v4 += 3;
        if ((v128 & 0x800000) != 0) {
          goto LABEL_758;
        }
        goto LABEL_386;
      }
    }
    else
    {
      unint64_t v251 = *((void *)this + 58);
      *(_WORD *)uint64_t v4 = 2008;
      if (v251 <= 0x7F) {
        goto LABEL_749;
      }
    }
    v4[2] = v251 | 0x80;
    unint64_t v252 = v251 >> 7;
    if (v251 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v252 | 0x80;
        unint64_t v253 = v252 >> 7;
        ++v4;
        unint64_t v254 = v252 >> 14;
        v252 >>= 7;
      }
      while (v254);
      *(v4 - 1) = v253;
      if ((v128 & 0x800000) != 0) {
        goto LABEL_758;
      }
    }
    else
    {
      v4[3] = v252;
      v4 += 4;
      if ((v128 & 0x800000) != 0) {
        goto LABEL_758;
      }
    }
LABEL_386:
    if ((v128 & 0x1000000) == 0) {
      goto LABEL_387;
    }
    goto LABEL_761;
  }
LABEL_708:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v237 = *((unsigned char *)this + 445);
  *(_WORD *)uint64_t v4 = 1960;
  v4[2] = v237;
  v4 += 3;
  if ((v128 & 0x8000) != 0) {
    goto LABEL_711;
  }
LABEL_381:
  if ((v128 & 0x2000) == 0) {
    goto LABEL_382;
  }
LABEL_722:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v242 = *((unsigned char *)this + 446);
  *(_WORD *)uint64_t v4 = 1984;
  v4[2] = v242;
  v4 += 3;
  if ((v128 & 0x100000) != 0) {
    goto LABEL_725;
  }
LABEL_383:
  if ((v128 & 0x200000) == 0) {
    goto LABEL_384;
  }
LABEL_736:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v247 = *((int *)this + 115);
    *(_WORD *)uint64_t v4 = 2000;
    if (v247 <= 0x7F)
    {
LABEL_738:
      v4[2] = v247;
      v4 += 3;
      if ((v128 & 0x400000) != 0) {
        goto LABEL_747;
      }
      goto LABEL_385;
    }
  }
  else
  {
    unint64_t v247 = *((int *)this + 115);
    *(_WORD *)uint64_t v4 = 2000;
    if (v247 <= 0x7F) {
      goto LABEL_738;
    }
  }
  v4[2] = v247 | 0x80;
  unint64_t v248 = v247 >> 7;
  if (v247 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v248 | 0x80;
      unint64_t v249 = v248 >> 7;
      ++v4;
      unint64_t v250 = v248 >> 14;
      v248 >>= 7;
    }
    while (v250);
    *(v4 - 1) = v249;
    if ((v128 & 0x400000) != 0) {
      goto LABEL_747;
    }
  }
  else
  {
    v4[3] = v248;
    v4 += 4;
    if ((v128 & 0x400000) != 0) {
      goto LABEL_747;
    }
  }
LABEL_385:
  if ((v128 & 0x800000) == 0) {
    goto LABEL_386;
  }
LABEL_758:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v255 = *((void *)this + 59);
  *(_WORD *)uint64_t v4 = 2017;
  *(void *)(v4 + 2) = v255;
  v4 += 10;
  if ((v128 & 0x1000000) == 0)
  {
LABEL_387:
    if ((v128 & 0x2000000) == 0) {
      goto LABEL_388;
    }
    goto LABEL_764;
  }
LABEL_761:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v256 = *((void *)this + 60);
  *(_WORD *)uint64_t v4 = 2025;
  *(void *)(v4 + 2) = v256;
  v4 += 10;
  if ((v128 & 0x2000000) == 0)
  {
LABEL_388:
    if ((v128 & 0x4000000) == 0) {
      goto LABEL_389;
    }
LABEL_767:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v258 = *((int *)this + 124);
      *(_WORD *)uint64_t v4 = 2040;
      if (v258 <= 0x7F)
      {
LABEL_769:
        v4[2] = v258;
        v4 += 3;
        if (v128 < 0) {
          goto LABEL_778;
        }
        goto LABEL_390;
      }
    }
    else
    {
      unint64_t v258 = *((int *)this + 124);
      *(_WORD *)uint64_t v4 = 2040;
      if (v258 <= 0x7F) {
        goto LABEL_769;
      }
    }
    v4[2] = v258 | 0x80;
    unint64_t v259 = v258 >> 7;
    if (v258 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v259 | 0x80;
        unint64_t v260 = v259 >> 7;
        ++v4;
        unint64_t v261 = v259 >> 14;
        v259 >>= 7;
      }
      while (v261);
      *(v4 - 1) = v260;
      if (v128 < 0) {
        goto LABEL_778;
      }
    }
    else
    {
      v4[3] = v259;
      v4 += 4;
      if (v128 < 0) {
        goto LABEL_778;
      }
    }
LABEL_390:
    if ((v128 & 0x8000000) == 0) {
      goto LABEL_391;
    }
    goto LABEL_781;
  }
LABEL_764:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v257 = *((void *)this + 61);
  *(_WORD *)uint64_t v4 = 2033;
  *(void *)(v4 + 2) = v257;
  v4 += 10;
  if ((v128 & 0x4000000) != 0) {
    goto LABEL_767;
  }
LABEL_389:
  if ((v128 & 0x80000000) == 0) {
    goto LABEL_390;
  }
LABEL_778:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v262 = *((void *)this + 63);
  *(_WORD *)uint64_t v4 = 2177;
  *(void *)(v4 + 2) = v262;
  v4 += 10;
  if ((v128 & 0x8000000) == 0)
  {
LABEL_391:
    if ((*((unsigned char *)this + 19) & 0x20) == 0) {
      goto LABEL_392;
    }
    goto LABEL_784;
  }
LABEL_781:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v263 = *((unsigned char *)this + 500);
  *(_WORD *)uint64_t v4 = 2184;
  v4[2] = v263;
  v4 += 3;
  if ((*((unsigned char *)this + 19) & 0x20) == 0)
  {
LABEL_392:
    if ((*((unsigned char *)this + 29) & 4) == 0) {
      goto LABEL_393;
    }
    goto LABEL_787;
  }
LABEL_784:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v264 = *((unsigned char *)this + 145);
  *(_WORD *)uint64_t v4 = 2192;
  v4[2] = v264;
  v4 += 3;
  if ((*((unsigned char *)this + 29) & 4) == 0)
  {
LABEL_393:
    if ((*((unsigned char *)this + 18) & 0x20) == 0) {
      goto LABEL_394;
    }
    goto LABEL_790;
  }
LABEL_787:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v265 = *((unsigned char *)this + 443);
  *(_WORD *)uint64_t v4 = 2200;
  v4[2] = v265;
  v4 += 3;
  if ((*((unsigned char *)this + 18) & 0x20) == 0)
  {
LABEL_394:
    if ((*((unsigned char *)this + 21) & 2) == 0) {
      goto LABEL_395;
    }
    goto LABEL_793;
  }
LABEL_790:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v266 = *((unsigned char *)this + 130);
  *(_WORD *)uint64_t v4 = 2208;
  v4[2] = v266;
  v4 += 3;
  if ((*((unsigned char *)this + 21) & 2) == 0)
  {
LABEL_395:
    int v129 = *((_DWORD *)this + 8);
    if ((v129 & 1) == 0) {
      goto LABEL_396;
    }
LABEL_796:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v268 = *((int *)this + 128);
      *(_WORD *)uint64_t v4 = 2224;
      if (v268 <= 0x7F)
      {
LABEL_798:
        v4[2] = v268;
        v4 += 3;
        if ((v129 & 0x40) != 0) {
          goto LABEL_807;
        }
        goto LABEL_397;
      }
    }
    else
    {
      unint64_t v268 = *((int *)this + 128);
      *(_WORD *)uint64_t v4 = 2224;
      if (v268 <= 0x7F) {
        goto LABEL_798;
      }
    }
    v4[2] = v268 | 0x80;
    unint64_t v269 = v268 >> 7;
    if (v268 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v269 | 0x80;
        unint64_t v270 = v269 >> 7;
        ++v4;
        unint64_t v271 = v269 >> 14;
        v269 >>= 7;
      }
      while (v271);
      *(v4 - 1) = v270;
      if ((v129 & 0x40) != 0) {
        goto LABEL_807;
      }
    }
    else
    {
      v4[3] = v269;
      v4 += 4;
      if ((v129 & 0x40) != 0) {
        goto LABEL_807;
      }
    }
LABEL_397:
    int v130 = *((_DWORD *)this + 5);
    if ((v130 & 0x20) == 0) {
      goto LABEL_398;
    }
    goto LABEL_810;
  }
LABEL_793:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v267 = *((unsigned char *)this + 157);
  *(_WORD *)uint64_t v4 = 2216;
  v4[2] = v267;
  v4 += 3;
  int v129 = *((_DWORD *)this + 8);
  if (v129) {
    goto LABEL_796;
  }
LABEL_396:
  if ((v129 & 0x40) == 0) {
    goto LABEL_397;
  }
LABEL_807:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v272 = *((unsigned char *)this + 544);
  *(_WORD *)uint64_t v4 = 2232;
  v4[2] = v272;
  v4 += 3;
  int v130 = *((_DWORD *)this + 5);
  if ((v130 & 0x20) == 0)
  {
LABEL_398:
    if ((v130 & 4) == 0) {
      goto LABEL_399;
    }
    goto LABEL_813;
  }
LABEL_810:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v273 = *((unsigned char *)this + 153);
  *(_WORD *)uint64_t v4 = 2240;
  v4[2] = v273;
  v4 += 3;
  if ((v130 & 4) == 0)
  {
LABEL_399:
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_400;
    }
LABEL_816:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v275 = *((int *)this + 129);
      *(_WORD *)uint64_t v4 = 2256;
      if (v275 <= 0x7F)
      {
LABEL_818:
        v4[2] = v275;
        v4 += 3;
        if (*((unsigned char *)this + 21)) {
          goto LABEL_827;
        }
        goto LABEL_401;
      }
    }
    else
    {
      unint64_t v275 = *((int *)this + 129);
      *(_WORD *)uint64_t v4 = 2256;
      if (v275 <= 0x7F) {
        goto LABEL_818;
      }
    }
    v4[2] = v275 | 0x80;
    unint64_t v276 = v275 >> 7;
    if (v275 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v276 | 0x80;
        unint64_t v277 = v276 >> 7;
        ++v4;
        unint64_t v278 = v276 >> 14;
        v276 >>= 7;
      }
      while (v278);
      *(v4 - 1) = v277;
      if (*((unsigned char *)this + 21)) {
        goto LABEL_827;
      }
    }
    else
    {
      v4[3] = v276;
      v4 += 4;
      if (*((unsigned char *)this + 21)) {
        goto LABEL_827;
      }
    }
LABEL_401:
    if ((*((unsigned char *)this + 30) & 1) == 0) {
      goto LABEL_402;
    }
    goto LABEL_830;
  }
LABEL_813:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v274 = *((unsigned char *)this + 150);
  *(_WORD *)uint64_t v4 = 2248;
  v4[2] = v274;
  v4 += 3;
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    goto LABEL_816;
  }
LABEL_400:
  if ((*((unsigned char *)this + 21) & 1) == 0) {
    goto LABEL_401;
  }
LABEL_827:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v279 = *((unsigned char *)this + 156);
  *(_WORD *)uint64_t v4 = 2264;
  v4[2] = v279;
  v4 += 3;
  if ((*((unsigned char *)this + 30) & 1) == 0)
  {
LABEL_402:
    int v131 = *((_DWORD *)this + 5);
    if ((v131 & 0x40) == 0) {
      goto LABEL_403;
    }
    goto LABEL_833;
  }
LABEL_830:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v280 = *((unsigned char *)this + 452);
  *(_WORD *)uint64_t v4 = 2272;
  v4[2] = v280;
  v4 += 3;
  int v131 = *((_DWORD *)this + 5);
  if ((v131 & 0x40) == 0)
  {
LABEL_403:
    if ((v131 & 0x400) == 0) {
      goto LABEL_404;
    }
LABEL_836:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v282 = *((void *)this + 20);
      *(_WORD *)uint64_t v4 = 2288;
      if (v282 <= 0x7F)
      {
LABEL_838:
        v4[2] = v282;
        v4 += 3;
        if ((*((unsigned char *)this + 30) & 2) != 0) {
          goto LABEL_847;
        }
        goto LABEL_405;
      }
    }
    else
    {
      unint64_t v282 = *((void *)this + 20);
      *(_WORD *)uint64_t v4 = 2288;
      if (v282 <= 0x7F) {
        goto LABEL_838;
      }
    }
    v4[2] = v282 | 0x80;
    unint64_t v283 = v282 >> 7;
    if (v282 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v283 | 0x80;
        unint64_t v284 = v283 >> 7;
        ++v4;
        unint64_t v285 = v283 >> 14;
        v283 >>= 7;
      }
      while (v285);
      *(v4 - 1) = v284;
      if ((*((unsigned char *)this + 30) & 2) != 0) {
        goto LABEL_847;
      }
    }
    else
    {
      v4[3] = v283;
      v4 += 4;
      if ((*((unsigned char *)this + 30) & 2) != 0) {
        goto LABEL_847;
      }
    }
LABEL_405:
    int v132 = *((_DWORD *)this + 8);
    if ((v132 & 0x80) == 0) {
      goto LABEL_406;
    }
    goto LABEL_850;
  }
LABEL_833:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v281 = *((unsigned char *)this + 154);
  *(_WORD *)uint64_t v4 = 2280;
  v4[2] = v281;
  v4 += 3;
  if ((v131 & 0x400) != 0) {
    goto LABEL_836;
  }
LABEL_404:
  if ((*((unsigned char *)this + 30) & 2) == 0) {
    goto LABEL_405;
  }
LABEL_847:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v286 = *((unsigned char *)this + 453);
  *(_WORD *)uint64_t v4 = 2296;
  v4[2] = v286;
  v4 += 3;
  int v132 = *((_DWORD *)this + 8);
  if ((v132 & 0x80) == 0)
  {
LABEL_406:
    if ((v132 & 4) == 0) {
      goto LABEL_407;
    }
    goto LABEL_853;
  }
LABEL_850:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v287 = *((unsigned char *)this + 545);
  *(_WORD *)uint64_t v4 = 2432;
  v4[2] = v287;
  v4 += 3;
  if ((v132 & 4) == 0)
  {
LABEL_407:
    if ((v132 & 8) == 0) {
      goto LABEL_408;
    }
    goto LABEL_856;
  }
LABEL_853:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v288 = *((void *)this + 65);
  *(_WORD *)uint64_t v4 = 2441;
  *(void *)(v4 + 2) = v288;
  v4 += 10;
  if ((v132 & 8) == 0)
  {
LABEL_408:
    if ((v132 & 0x10) == 0) {
      goto LABEL_409;
    }
    goto LABEL_859;
  }
LABEL_856:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v289 = *((void *)this + 66);
  *(_WORD *)uint64_t v4 = 2449;
  *(void *)(v4 + 2) = v289;
  v4 += 10;
  if ((v132 & 0x10) == 0)
  {
LABEL_409:
    if ((v132 & 0x20) == 0) {
      goto LABEL_410;
    }
LABEL_870:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v294 = *((int *)this + 135);
      *(_WORD *)uint64_t v4 = 2464;
      if (v294 <= 0x7F)
      {
LABEL_872:
        v4[2] = v294;
        v4 += 3;
        int v133 = *((_DWORD *)this + 5);
        if ((v133 & 0x10) != 0) {
          goto LABEL_881;
        }
        goto LABEL_411;
      }
    }
    else
    {
      unint64_t v294 = *((int *)this + 135);
      *(_WORD *)uint64_t v4 = 2464;
      if (v294 <= 0x7F) {
        goto LABEL_872;
      }
    }
    v4[2] = v294 | 0x80;
    unint64_t v295 = v294 >> 7;
    if (v294 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v295 | 0x80;
        unint64_t v296 = v295 >> 7;
        ++v4;
        unint64_t v297 = v295 >> 14;
        v295 >>= 7;
      }
      while (v297);
      *(v4 - 1) = v296;
      int v133 = *((_DWORD *)this + 5);
      if ((v133 & 0x10) != 0) {
        goto LABEL_881;
      }
    }
    else
    {
      v4[3] = v295;
      v4 += 4;
      int v133 = *((_DWORD *)this + 5);
      if ((v133 & 0x10) != 0) {
        goto LABEL_881;
      }
    }
LABEL_411:
    if ((v133 & 2) == 0) {
      goto LABEL_412;
    }
    goto LABEL_884;
  }
LABEL_859:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v290 = *((int *)this + 134);
    *(_WORD *)uint64_t v4 = 2456;
    if (v290 <= 0x7F)
    {
LABEL_861:
      v4[2] = v290;
      v4 += 3;
      if ((v132 & 0x20) != 0) {
        goto LABEL_870;
      }
      goto LABEL_410;
    }
  }
  else
  {
    unint64_t v290 = *((int *)this + 134);
    *(_WORD *)uint64_t v4 = 2456;
    if (v290 <= 0x7F) {
      goto LABEL_861;
    }
  }
  v4[2] = v290 | 0x80;
  unint64_t v291 = v290 >> 7;
  if (v290 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v291 | 0x80;
      unint64_t v292 = v291 >> 7;
      ++v4;
      unint64_t v293 = v291 >> 14;
      v291 >>= 7;
    }
    while (v293);
    *(v4 - 1) = v292;
    if ((v132 & 0x20) != 0) {
      goto LABEL_870;
    }
  }
  else
  {
    v4[3] = v291;
    v4 += 4;
    if ((v132 & 0x20) != 0) {
      goto LABEL_870;
    }
  }
LABEL_410:
  int v133 = *((_DWORD *)this + 5);
  if ((v133 & 0x10) == 0) {
    goto LABEL_411;
  }
LABEL_881:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v298 = *((unsigned char *)this + 152);
  *(_WORD *)uint64_t v4 = 2472;
  v4[2] = v298;
  v4 += 3;
  if ((v133 & 2) == 0)
  {
LABEL_412:
    if ((v133 & 0x800) == 0) {
      goto LABEL_413;
    }
LABEL_887:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v300 = *((int *)this + 42);
      *(_WORD *)uint64_t v4 = 2488;
      if (v300 <= 0x7F)
      {
LABEL_889:
        v4[2] = v300;
        v4 += 3;
        if ((*((unsigned char *)this + 29) & 0x40) != 0) {
          goto LABEL_898;
        }
        goto LABEL_414;
      }
    }
    else
    {
      unint64_t v300 = *((int *)this + 42);
      *(_WORD *)uint64_t v4 = 2488;
      if (v300 <= 0x7F) {
        goto LABEL_889;
      }
    }
    v4[2] = v300 | 0x80;
    unint64_t v301 = v300 >> 7;
    if (v300 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v301 | 0x80;
        unint64_t v302 = v301 >> 7;
        ++v4;
        unint64_t v303 = v301 >> 14;
        v301 >>= 7;
      }
      while (v303);
      *(v4 - 1) = v302;
      if ((*((unsigned char *)this + 29) & 0x40) != 0) {
        goto LABEL_898;
      }
    }
    else
    {
      v4[3] = v301;
      v4 += 4;
      if ((*((unsigned char *)this + 29) & 0x40) != 0) {
        goto LABEL_898;
      }
    }
LABEL_414:
    int v134 = *((_DWORD *)this + 8);
    if ((v134 & 0x200) == 0) {
      goto LABEL_415;
    }
    goto LABEL_901;
  }
LABEL_884:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v299 = *((unsigned char *)this + 149);
  *(_WORD *)uint64_t v4 = 2480;
  v4[2] = v299;
  v4 += 3;
  if ((v133 & 0x800) != 0) {
    goto LABEL_887;
  }
LABEL_413:
  if ((*((unsigned char *)this + 29) & 0x40) == 0) {
    goto LABEL_414;
  }
LABEL_898:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v304 = *((unsigned char *)this + 447);
  *(_WORD *)uint64_t v4 = 2496;
  v4[2] = v304;
  v4 += 3;
  int v134 = *((_DWORD *)this + 8);
  if ((v134 & 0x200) == 0)
  {
LABEL_415:
    if ((v134 & 0x800) == 0) {
      goto LABEL_416;
    }
LABEL_912:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v309 = *((int *)this + 140);
      *(_WORD *)uint64_t v4 = 2512;
      if (v309 <= 0x7F)
      {
LABEL_914:
        v4[2] = v309;
        v4 += 3;
        if ((v134 & 0x400) != 0) {
          goto LABEL_923;
        }
        goto LABEL_417;
      }
    }
    else
    {
      unint64_t v309 = *((int *)this + 140);
      *(_WORD *)uint64_t v4 = 2512;
      if (v309 <= 0x7F) {
        goto LABEL_914;
      }
    }
    v4[2] = v309 | 0x80;
    unint64_t v310 = v309 >> 7;
    if (v309 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v310 | 0x80;
        unint64_t v311 = v310 >> 7;
        ++v4;
        unint64_t v312 = v310 >> 14;
        v310 >>= 7;
      }
      while (v312);
      *(v4 - 1) = v311;
      if ((v134 & 0x400) != 0) {
        goto LABEL_923;
      }
    }
    else
    {
      v4[3] = v310;
      v4 += 4;
      if ((v134 & 0x400) != 0) {
        goto LABEL_923;
      }
    }
LABEL_417:
    if ((v134 & 0x2000) == 0) {
      goto LABEL_418;
    }
    goto LABEL_926;
  }
LABEL_901:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v305 = *((int *)this + 137);
    *(_WORD *)uint64_t v4 = 2504;
    if (v305 <= 0x7F)
    {
LABEL_903:
      v4[2] = v305;
      v4 += 3;
      if ((v134 & 0x800) != 0) {
        goto LABEL_912;
      }
      goto LABEL_416;
    }
  }
  else
  {
    unint64_t v305 = *((int *)this + 137);
    *(_WORD *)uint64_t v4 = 2504;
    if (v305 <= 0x7F) {
      goto LABEL_903;
    }
  }
  v4[2] = v305 | 0x80;
  unint64_t v306 = v305 >> 7;
  if (v305 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v306 | 0x80;
      unint64_t v307 = v306 >> 7;
      ++v4;
      unint64_t v308 = v306 >> 14;
      v306 >>= 7;
    }
    while (v308);
    *(v4 - 1) = v307;
    if ((v134 & 0x800) != 0) {
      goto LABEL_912;
    }
  }
  else
  {
    v4[3] = v306;
    v4 += 4;
    if ((v134 & 0x800) != 0) {
      goto LABEL_912;
    }
  }
LABEL_416:
  if ((v134 & 0x400) == 0) {
    goto LABEL_417;
  }
LABEL_923:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v313 = *((void *)this + 69);
  *(_WORD *)uint64_t v4 = 2521;
  *(void *)(v4 + 2) = v313;
  v4 += 10;
  if ((v134 & 0x2000) == 0)
  {
LABEL_418:
    if ((v134 & 0x1000) == 0) {
      goto LABEL_419;
    }
LABEL_929:
    if (*(void *)a3 <= (unint64_t)v4)
    {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      unint64_t v315 = *((int *)this + 141);
      *(_WORD *)uint64_t v4 = 2536;
      if (v315 <= 0x7F)
      {
LABEL_931:
        v4[2] = v315;
        v4 += 3;
        if ((*((unsigned char *)this + 30) & 4) != 0) {
          goto LABEL_940;
        }
        goto LABEL_420;
      }
    }
    else
    {
      unint64_t v315 = *((int *)this + 141);
      *(_WORD *)uint64_t v4 = 2536;
      if (v315 <= 0x7F) {
        goto LABEL_931;
      }
    }
    v4[2] = v315 | 0x80;
    unint64_t v316 = v315 >> 7;
    if (v315 >> 14)
    {
      v4 += 4;
      do
      {
        *(v4 - 1) = v316 | 0x80;
        unint64_t v317 = v316 >> 7;
        ++v4;
        unint64_t v318 = v316 >> 14;
        v316 >>= 7;
      }
      while (v318);
      *(v4 - 1) = v317;
      if ((*((unsigned char *)this + 30) & 4) != 0) {
        goto LABEL_940;
      }
    }
    else
    {
      v4[3] = v316;
      v4 += 4;
      if ((*((unsigned char *)this + 30) & 4) != 0) {
        goto LABEL_940;
      }
    }
LABEL_420:
    int v135 = *((_DWORD *)this + 5);
    if ((v135 & 0x1000) == 0) {
      goto LABEL_421;
    }
    goto LABEL_943;
  }
LABEL_926:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v314 = *((void *)this + 71);
  *(_WORD *)uint64_t v4 = 2529;
  *(void *)(v4 + 2) = v314;
  v4 += 10;
  if ((v134 & 0x1000) != 0) {
    goto LABEL_929;
  }
LABEL_419:
  if ((*((unsigned char *)this + 30) & 4) == 0) {
    goto LABEL_420;
  }
LABEL_940:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v319 = *((unsigned char *)this + 454);
  *(_WORD *)uint64_t v4 = 2544;
  v4[2] = v319;
  v4 += 3;
  int v135 = *((_DWORD *)this + 5);
  if ((v135 & 0x1000) == 0)
  {
LABEL_421:
    if ((v135 & 0x2000) == 0) {
      goto LABEL_422;
    }
    goto LABEL_946;
  }
LABEL_943:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v320 = *((void *)this + 22);
  *(_WORD *)uint64_t v4 = 2553;
  *(void *)(v4 + 2) = v320;
  v4 += 10;
  if ((v135 & 0x2000) == 0)
  {
LABEL_422:
    int v136 = *((_DWORD *)this + 4);
    if ((v136 & 0x40000000) == 0) {
      goto LABEL_423;
    }
    goto LABEL_949;
  }
LABEL_946:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v321 = *((void *)this + 23);
  *(_WORD *)uint64_t v4 = 2689;
  *(void *)(v4 + 2) = v321;
  v4 += 10;
  int v136 = *((_DWORD *)this + 4);
  if ((v136 & 0x40000000) == 0)
  {
LABEL_423:
    if ((v136 & 0x2000000) == 0) {
      goto LABEL_424;
    }
    goto LABEL_952;
  }
LABEL_949:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v322 = *((unsigned char *)this + 146);
  *(_WORD *)uint64_t v4 = 2696;
  v4[2] = v322;
  v4 += 3;
  if ((v136 & 0x2000000) == 0)
  {
LABEL_424:
    if ((v136 & 0x4000000) == 0) {
      goto LABEL_425;
    }
    goto LABEL_955;
  }
LABEL_952:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v323 = *((unsigned char *)this + 134);
  *(_WORD *)uint64_t v4 = 2704;
  v4[2] = v323;
  v4 += 3;
  if ((v136 & 0x4000000) == 0)
  {
LABEL_425:
    if ((*((unsigned char *)this + 31) & 0x10) == 0) {
      goto LABEL_426;
    }
    goto LABEL_958;
  }
LABEL_955:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v324 = *((unsigned char *)this + 135);
  *(_WORD *)uint64_t v4 = 2712;
  v4[2] = v324;
  v4 += 3;
  if ((*((unsigned char *)this + 31) & 0x10) == 0)
  {
LABEL_426:
    if ((*((unsigned char *)this + 21) & 0x40) == 0) {
      goto LABEL_427;
    }
    goto LABEL_961;
  }
LABEL_958:
  if (*(void *)a3 <= (unint64_t)v4) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v325 = *((unsigned char *)this + 501);
  *(_WORD *)uint64_t v4 = 2720;
  v4[2] = v325;
  v4 += 3;
  if ((*((unsigned char *)this + 21) & 0x40) == 0)
  {
LABEL_427:
    if ((*((unsigned char *)this + 33) & 1) == 0) {
      goto LABEL_428;
    }
LABEL_972:
    if (*(void *)a3 <= (unint64_t)v4) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    char v330 = *((unsigned char *)this + 546);
    *(_WORD *)uint64_t v4 = 2736;
    v4[2] = v330;
    v4 += 3;
    uint64_t v137 = *((void *)this + 1);
    if ((v137 & 1) == 0) {
      return (const google::protobuf::UnknownFieldSet *)v4;
    }
    goto LABEL_975;
  }
LABEL_961:
  if (*(void *)a3 <= (unint64_t)v4)
  {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    unint64_t v326 = *((int *)this + 48);
    *(_WORD *)uint64_t v4 = 2728;
    if (v326 <= 0x7F)
    {
LABEL_963:
      v4[2] = v326;
      v4 += 3;
      if (*((unsigned char *)this + 33)) {
        goto LABEL_972;
      }
      goto LABEL_428;
    }
  }
  else
  {
    unint64_t v326 = *((int *)this + 48);
    *(_WORD *)uint64_t v4 = 2728;
    if (v326 <= 0x7F) {
      goto LABEL_963;
    }
  }
  v4[2] = v326 | 0x80;
  unint64_t v327 = v326 >> 7;
  if (v326 >> 14)
  {
    v4 += 4;
    do
    {
      *(v4 - 1) = v327 | 0x80;
      unint64_t v328 = v327 >> 7;
      ++v4;
      unint64_t v329 = v327 >> 14;
      v327 >>= 7;
    }
    while (v329);
    *(v4 - 1) = v328;
    if (*((unsigned char *)this + 33)) {
      goto LABEL_972;
    }
  }
  else
  {
    v4[3] = v327;
    v4 += 4;
    if (*((unsigned char *)this + 33)) {
      goto LABEL_972;
    }
  }
LABEL_428:
  uint64_t v137 = *((void *)this + 1);
  if ((v137 & 1) == 0) {
    return (const google::protobuf::UnknownFieldSet *)v4;
  }
LABEL_975:

  return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)((v137 & 0xFFFFFFFFFFFFFFFELL) + 8), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
}

char *operations_research::sat::SatParameters::ByteSizeLong(operations_research::sat::SatParameters *this)
{
  uint64_t v1 = *((unsigned int *)this + 10);
  if (v1)
  {
    uint64_t v2 = (int32x2_t *)*((void *)this + 6);
    if ((v1 + 0x7FFFFFFF) >= 0x80000003)
    {
      int v3 = v1 & 0xFFFFFFFC;
      unsigned int v5 = v2 + 1;
      int64x2_t v6 = 0uLL;
      int v7 = v1 & 0xFFFFFFFC;
      int64x2_t v8 = 0uLL;
      do
      {
        int64x2_t v6 = (int64x2_t)vaddw_u32((uint64x2_t)v6, (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v5[-1]), (int8x8_t)0xA0000000ALL, (int8x8_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x4900000049, (int32x2_t)veor_s8((int8x8_t)vclz_s32((int32x2_t)(*(void *)&v5[-1] | 0x100000001)), (int8x8_t)0x1F0000001FLL), (int32x2_t)0x900000009), 6uLL)));
        int64x2_t v8 = (int64x2_t)vaddw_u32((uint64x2_t)v8, (uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*v5), (int8x8_t)0xA0000000ALL, (int8x8_t)vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x4900000049, (int32x2_t)veor_s8((int8x8_t)vclz_s32((int32x2_t)(*(void *)v5 | 0x100000001)), (int8x8_t)0x1F0000001FLL), (int32x2_t)0x900000009), 6uLL)));
        v5 += 2;
        v7 -= 4;
      }
      while (v7);
      uint64_t v4 = vaddvq_s64(vaddq_s64(v8, v6));
      goto LABEL_486;
    }
    int v3 = 0;
    uint64_t v4 = 0;
    do
    {
      __int32 v122 = v2->i32[v3];
      if (v122 < 0) {
        uint64_t v123 = 10;
      }
      else {
        uint64_t v123 = (9 * (__clz(v122 | 1) ^ 0x1F) + 73) >> 6;
      }
      v4 += v123;
      ++v3;
LABEL_486:
      ;
    }
    while (v1 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  int v9 = (const google::protobuf::UnknownFieldSet *)(v4 + 2 * v1);
  int v10 = *((_DWORD *)this + 4);
  if ((_BYTE)v10)
  {
    if (v10)
    {
      uint64_t v11 = *((void *)this + 7);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v10 & 2) == 0)
      {
LABEL_11:
        if ((v10 & 4) == 0) {
          goto LABEL_24;
        }
        goto LABEL_20;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_11;
    }
    int v14 = *((_DWORD *)this + 16);
    if (v14 < 0)
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 11);
      if ((v10 & 4) == 0)
      {
LABEL_24:
        unint64_t v17 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
        if ((v10 & 8) == 0) {
          unint64_t v17 = v9;
        }
        if ((v10 & 0x10) != 0) {
          unint64_t v17 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + 10);
        }
        if ((v10 & 0x20) != 0)
        {
          int v18 = *((_DWORD *)this + 22);
          if (v18 < 0) {
            uint64_t v19 = 10;
          }
          else {
            uint64_t v19 = (9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6;
          }
          unint64_t v17 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + v19 + 2);
        }
        if ((v10 & 0x40) != 0)
        {
          int v20 = *((_DWORD *)this + 23);
          if (v20 < 0) {
            uint64_t v21 = 10;
          }
          else {
            uint64_t v21 = (9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6;
          }
          unint64_t v17 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + v21 + 2);
        }
        if ((v10 & 0x80) != 0) {
          int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v17 + 3);
        }
        else {
          int v9 = v17;
        }
        goto LABEL_41;
      }
    }
    else
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1);
      if ((v10 & 4) == 0) {
        goto LABEL_24;
      }
    }
LABEL_20:
    int v15 = *((_DWORD *)this + 17);
    if (v15 < 0) {
      uint64_t v16 = 10;
    }
    else {
      uint64_t v16 = (9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6;
    }
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v16 + 2);
    goto LABEL_24;
  }
LABEL_41:
  if ((v10 & 0xFF00) != 0)
  {
    unint64_t v22 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v10 & 0x100) == 0) {
      unint64_t v22 = v9;
    }
    if ((v10 & 0x200) != 0) {
      unint64_t v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    }
    if ((v10 & 0x400) != 0) {
      unint64_t v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    }
    if ((v10 & 0x800) != 0)
    {
      int v23 = *((_DWORD *)this + 25);
      uint64_t v24 = (9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6;
      if (v23 >= 0) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 10;
      }
      unint64_t v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + v25 + 2);
    }
    if ((v10 & 0x1000) != 0) {
      unint64_t v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 10);
    }
    if ((v10 & 0x2000) != 0) {
      unint64_t v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 10);
    }
    if ((v10 & 0x4000) != 0) {
      unint64_t v22 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    }
    if ((v10 & 0x8000) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v22 + 3);
    }
    else {
      int v9 = v22;
    }
  }
  if ((v10 & 0xFF0000) != 0)
  {
    unint64_t v26 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v10 & 0x10000) == 0) {
      unint64_t v26 = v9;
    }
    if ((v10 & 0x20000) != 0) {
      unint64_t v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    }
    if ((v10 & 0x40000) != 0)
    {
      int v27 = *((_DWORD *)this + 31);
      uint64_t v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
      if (v27 >= 0) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 10;
      }
      unint64_t v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + v29 + 2);
    }
    if ((v10 & 0x80000) != 0) {
      unint64_t v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    }
    if ((v10 & 0x100000) != 0) {
      unint64_t v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    }
    if ((v10 & 0x200000) != 0) {
      unint64_t v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    }
    if ((v10 & 0x400000) != 0) {
      unint64_t v26 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    }
    if ((v10 & 0x800000) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v26 + 3);
    }
    else {
      int v9 = v26;
    }
  }
  if (HIBYTE(v10))
  {
    unint64_t v30 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v10 & 0x1000000) == 0) {
      unint64_t v30 = v9;
    }
    if ((v10 & 0x2000000) != 0) {
      unint64_t v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    }
    if ((v10 & 0x4000000) != 0) {
      unint64_t v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    }
    if ((v10 & 0x8000000) != 0) {
      unint64_t v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30
    }
                                                      + ((9 * (__clz(*((void *)this + 17) | 1) ^ 0x3F) + 73) >> 6)
                                                      + 2);
    if ((v10 & 0x10000000) != 0) {
      unint64_t v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    }
    if ((v10 & 0x20000000) != 0) {
      unint64_t v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    }
    if ((v10 & 0x40000000) != 0) {
      unint64_t v30 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    }
    if (v10 >= 0) {
      int v9 = v30;
    }
    else {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v30 + 3);
    }
  }
  unsigned int v31 = *((_DWORD *)this + 5);
  if ((_BYTE)v31)
  {
    unint64_t v32 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v31 & 1) == 0) {
      unint64_t v32 = v9;
    }
    if ((v31 & 2) != 0) {
      unint64_t v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    }
    if ((v31 & 4) != 0) {
      unint64_t v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    }
    if ((v31 & 8) != 0) {
      unint64_t v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    }
    if ((v31 & 0x10) != 0) {
      unint64_t v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    }
    if ((v31 & 0x20) != 0) {
      unint64_t v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    }
    if ((v31 & 0x40) != 0) {
      unint64_t v32 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    }
    if ((v31 & 0x80) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v32 + 3);
    }
    else {
      int v9 = v32;
    }
  }
  if ((v31 & 0xFF00) != 0)
  {
    unint64_t v33 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v31 & 0x100) == 0) {
      unint64_t v33 = v9;
    }
    if ((v31 & 0x200) != 0) {
      unint64_t v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + 3);
    }
    if ((v31 & 0x400) != 0) {
      unint64_t v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33
    }
                                                      + ((9 * (__clz(*((void *)this + 20) | 1) ^ 0x3F) + 73) >> 6)
                                                      + 2);
    if ((v31 & 0x800) != 0)
    {
      int v34 = *((_DWORD *)this + 42);
      if (v34 < 0) {
        uint64_t v35 = 10;
      }
      else {
        uint64_t v35 = (9 * (__clz(v34 | 1) ^ 0x1F) + 73) >> 6;
      }
      unint64_t v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + v35 + 2);
    }
    if ((v31 & 0x1000) != 0) {
      unint64_t v33 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + 10);
    }
    if ((v31 & 0x2000) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v33 + 10);
    }
    else {
      int v9 = v33;
    }
    if ((v31 & 0x4000) != 0)
    {
      int v36 = *((_DWORD *)this + 48);
      if (v36 < 0) {
        uint64_t v37 = 10;
      }
      else {
        uint64_t v37 = (9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6;
      }
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v37 + 2);
    }
    if ((v31 & 0x8000) != 0)
    {
      int v38 = *((_DWORD *)this + 49);
      if (v38 < 0) {
        uint64_t v39 = 10;
      }
      else {
        uint64_t v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
      }
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v39 + 1);
    }
  }
  if ((v31 & 0xFF0000) != 0)
  {
    if ((v31 & 0x10000) != 0)
    {
      int v47 = *((_DWORD *)this + 50);
      uint64_t v48 = (9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6;
      if (v47 >= 0) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 10;
      }
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v49 + 1);
      if ((v31 & 0x20000) == 0)
      {
LABEL_149:
        if ((v31 & 0x40000) == 0)
        {
LABEL_154:
          uint64_t v43 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 9);
          if ((v31 & 0x80000) == 0) {
            uint64_t v43 = v9;
          }
          if ((v31 & 0x100000) != 0) {
            uint64_t v43 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          }
          if ((v31 & 0x200000) != 0) {
            uint64_t v43 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          }
          if ((v31 & 0x400000) != 0) {
            uint64_t v43 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          }
          if ((v31 & 0x800000) != 0) {
            int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v43 + 10);
          }
          else {
            int v9 = v43;
          }
          goto LABEL_165;
        }
LABEL_150:
        int v40 = *((_DWORD *)this + 52);
        uint64_t v41 = (9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6;
        if (v40 >= 0) {
          uint64_t v42 = v41;
        }
        else {
          uint64_t v42 = 10;
        }
        int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v42 + 1);
        goto LABEL_154;
      }
    }
    else if ((v31 & 0x20000) == 0)
    {
      goto LABEL_149;
    }
    int v50 = *((_DWORD *)this + 51);
    uint64_t v51 = (9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6;
    if (v50 >= 0) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = 10;
    }
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v52 + 1);
    if ((v31 & 0x40000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_150;
  }
LABEL_165:
  if (!HIBYTE(v31)) {
    goto LABEL_177;
  }
  uint64_t v44 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
  if ((v31 & 0x1000000) == 0) {
    uint64_t v44 = v9;
  }
  if ((v31 & 0x2000000) != 0)
  {
    int v58 = *((_DWORD *)this + 66);
    if (v58 < 0)
    {
      uint64_t v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 12);
      if ((v31 & 0x4000000) != 0) {
        goto LABEL_441;
      }
    }
    else
    {
      uint64_t v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + ((9 * (__clz(v58 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v31 & 0x4000000) != 0) {
        goto LABEL_441;
      }
    }
LABEL_170:
    if ((v31 & 0x8000000) == 0) {
      goto LABEL_171;
    }
LABEL_449:
    int v114 = *((_DWORD *)this + 68);
    if (v114 < 0)
    {
      uint64_t v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 12);
      if ((v31 & 0x10000000) != 0) {
        goto LABEL_457;
      }
    }
    else
    {
      uint64_t v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + ((9 * (__clz(v114 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v31 & 0x10000000) != 0) {
        goto LABEL_457;
      }
    }
LABEL_172:
    if ((v31 & 0x20000000) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 10);
    }
    else {
      int v9 = v44;
    }
    if ((v31 & 0x40000000) == 0) {
      goto LABEL_176;
    }
    goto LABEL_468;
  }
  if ((v31 & 0x4000000) == 0) {
    goto LABEL_170;
  }
LABEL_441:
  int v112 = *((_DWORD *)this + 67);
  if (v112 < 0)
  {
    uint64_t v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + 12);
    if ((v31 & 0x8000000) != 0) {
      goto LABEL_449;
    }
  }
  else
  {
    uint64_t v44 = (const google::protobuf::UnknownFieldSet *)((char *)v44 + ((9 * (__clz(v112 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v31 & 0x8000000) != 0) {
      goto LABEL_449;
    }
  }
LABEL_171:
  if ((v31 & 0x10000000) == 0) {
    goto LABEL_172;
  }
LABEL_457:
  int v116 = *((_DWORD *)this + 69);
  if (v116 < 0) {
    uint64_t v117 = 10;
  }
  else {
    uint64_t v117 = (9 * (__clz(v116 | 1) ^ 0x1F) + 73) >> 6;
  }
  uint64_t v119 = (uint64_t)v44 + v117 + 2;
  if ((v31 & 0x20000000) != 0) {
    int v9 = (const google::protobuf::UnknownFieldSet *)(v119 + 10);
  }
  else {
    int v9 = (const google::protobuf::UnknownFieldSet *)v119;
  }
  if ((v31 & 0x40000000) == 0)
  {
LABEL_176:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_469;
  }
LABEL_468:
  int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9
                                                 + ((9 * (__clz(*((void *)this + 36) | 1) ^ 0x3F) + 73) >> 6)
                                                 + 2);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_177:
    unsigned int v45 = *((_DWORD *)this + 6);
    if (!(_BYTE)v45) {
      goto LABEL_220;
    }
    goto LABEL_178;
  }
LABEL_469:
  int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9
                                                 + ((9 * (__clz(*((void *)this + 37) | 1) ^ 0x3F) + 73) >> 6)
                                                 + 2);
  unsigned int v45 = *((_DWORD *)this + 6);
  if (!(_BYTE)v45) {
    goto LABEL_220;
  }
LABEL_178:
  unint64_t v46 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
  if ((v45 & 1) == 0) {
    unint64_t v46 = v9;
  }
  if ((v45 & 2) != 0) {
    unint64_t v46 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 3);
  }
  if ((v45 & 4) != 0) {
    unint64_t v46 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 3);
  }
  if ((v45 & 8) != 0) {
    unint64_t v46 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 3);
  }
  if ((v45 & 0x10) == 0)
  {
    if ((v45 & 0x20) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v46 + 10);
    }
    else {
      int v9 = v46;
    }
    if ((v45 & 0x40) == 0) {
      goto LABEL_191;
    }
LABEL_209:
    int v57 = *((_DWORD *)this + 80);
    if (v57 < 0)
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
      if ((v45 & 0x80) == 0) {
        goto LABEL_220;
      }
    }
    else
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v57 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x80) == 0) {
        goto LABEL_220;
      }
    }
    goto LABEL_216;
  }
  int v53 = *((_DWORD *)this + 77);
  uint64_t v54 = (9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6;
  if (v53 >= 0) {
    uint64_t v55 = v54;
  }
  else {
    uint64_t v55 = 10;
  }
  uint64_t v56 = (uint64_t)v46 + v55 + 2;
  if ((v45 & 0x20) != 0) {
    int v9 = (const google::protobuf::UnknownFieldSet *)(v56 + 10);
  }
  else {
    int v9 = (const google::protobuf::UnknownFieldSet *)v56;
  }
  if ((v45 & 0x40) != 0) {
    goto LABEL_209;
  }
LABEL_191:
  if ((v45 & 0x80) == 0) {
    goto LABEL_220;
  }
LABEL_216:
  int v59 = *((_DWORD *)this + 81);
  if (v59 < 0) {
    uint64_t v60 = 10;
  }
  else {
    uint64_t v60 = (9 * (__clz(v59 | 1) ^ 0x1F) + 73) >> 6;
  }
  int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v60 + 2);
LABEL_220:
  if ((v45 & 0xFF00) == 0) {
    goto LABEL_253;
  }
  unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
  if ((v45 & 0x100) == 0) {
    unint64_t v61 = v9;
  }
  if ((v45 & 0x200) != 0)
  {
    int v62 = *((_DWORD *)this + 84);
    if (v62 < 0)
    {
      unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 12);
      if ((v45 & 0x400) != 0) {
        goto LABEL_234;
      }
    }
    else
    {
      unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + ((9 * (__clz(v62 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x400) != 0) {
        goto LABEL_234;
      }
    }
LABEL_225:
    if ((v45 & 0x800) != 0) {
      unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
    }
    if ((v45 & 0x1000) == 0) {
      goto LABEL_228;
    }
    goto LABEL_240;
  }
  if ((v45 & 0x400) == 0) {
    goto LABEL_225;
  }
LABEL_234:
  int v63 = *((_DWORD *)this + 85);
  if (v63 < 0) {
    uint64_t v64 = 10;
  }
  else {
    uint64_t v64 = (9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6;
  }
  unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + v64 + 2);
  if ((v45 & 0x800) != 0) {
    unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
  }
  if ((v45 & 0x1000) == 0)
  {
LABEL_228:
    if ((v45 & 0x2000) == 0) {
      goto LABEL_248;
    }
LABEL_244:
    int v66 = *((_DWORD *)this + 89);
    if (v66 < 0) {
      uint64_t v67 = 10;
    }
    else {
      uint64_t v67 = (9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6;
    }
    unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + v67 + 2);
    goto LABEL_248;
  }
LABEL_240:
  int v65 = *((_DWORD *)this + 88);
  if ((v65 & 0x80000000) == 0)
  {
    unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + ((9 * (__clz(v65 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v45 & 0x2000) == 0) {
      goto LABEL_248;
    }
    goto LABEL_244;
  }
  unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 12);
  if ((v45 & 0x2000) != 0) {
    goto LABEL_244;
  }
LABEL_248:
  if ((v45 & 0x4000) != 0) {
    unint64_t v61 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
  }
  if ((v45 & 0x8000) != 0) {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v61 + 10);
  }
  else {
    int v9 = v61;
  }
LABEL_253:
  if ((v45 & 0xFF0000) != 0)
  {
    unint64_t v68 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
    if ((v45 & 0x10000) == 0) {
      unint64_t v68 = v9;
    }
    if ((v45 & 0x20000) != 0)
    {
      int v69 = *((_DWORD *)this + 96);
      uint64_t v70 = (9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6;
      if (v69 >= 0) {
        uint64_t v71 = v70;
      }
      else {
        uint64_t v71 = 10;
      }
      unint64_t v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + v71 + 2);
    }
    if ((v45 & 0x40000) != 0) {
      unint64_t v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    }
    if ((v45 & 0x80000) != 0) {
      unint64_t v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    }
    if ((v45 & 0x100000) != 0) {
      unint64_t v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    }
    if ((v45 & 0x200000) != 0) {
      unint64_t v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    }
    if ((v45 & 0x400000) != 0) {
      unint64_t v68 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    }
    if ((v45 & 0x800000) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v68 + 3);
    }
    else {
      int v9 = v68;
    }
  }
  if (!HIBYTE(v45)) {
    goto LABEL_286;
  }
  unint64_t v72 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
  if ((v45 & 0x1000000) == 0) {
    unint64_t v72 = v9;
  }
  if ((v45 & 0x2000000) != 0) {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v72 + 3);
  }
  else {
    int v9 = v72;
  }
  if ((v45 & 0x4000000) != 0)
  {
    int v84 = *((_DWORD *)this + 99);
    if (v84 < 0)
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
      if ((v45 & 0x8000000) != 0) {
        goto LABEL_445;
      }
    }
    else
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v84 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x8000000) != 0) {
        goto LABEL_445;
      }
    }
LABEL_282:
    if ((v45 & 0x10000000) == 0) {
      goto LABEL_283;
    }
LABEL_453:
    int v115 = *((_DWORD *)this + 101);
    if (v115 < 0)
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
      if ((v45 & 0x20000000) != 0) {
        goto LABEL_460;
      }
    }
    else
    {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v115 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v45 & 0x20000000) != 0) {
        goto LABEL_460;
      }
    }
LABEL_284:
    if ((v45 & 0x40000000) == 0) {
      goto LABEL_285;
    }
    goto LABEL_472;
  }
  if ((v45 & 0x8000000) == 0) {
    goto LABEL_282;
  }
LABEL_445:
  int v113 = *((_DWORD *)this + 100);
  if (v113 < 0)
  {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
    if ((v45 & 0x10000000) != 0) {
      goto LABEL_453;
    }
  }
  else
  {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v113 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v45 & 0x10000000) != 0) {
      goto LABEL_453;
    }
  }
LABEL_283:
  if ((v45 & 0x20000000) == 0) {
    goto LABEL_284;
  }
LABEL_460:
  int v118 = *((_DWORD *)this + 102);
  if (v118 < 0)
  {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
    if ((v45 & 0x40000000) != 0) {
      goto LABEL_472;
    }
  }
  else
  {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v118 | 1) ^ 0x1F) + 73) >> 6) + 2);
    if ((v45 & 0x40000000) != 0)
    {
LABEL_472:
      int v120 = *((_DWORD *)this + 103);
      if (v120 < 0)
      {
        int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
        if ((v45 & 0x80000000) != 0) {
          goto LABEL_476;
        }
      }
      else
      {
        int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v120 | 1) ^ 0x1F) + 73) >> 6) + 2);
        if ((v45 & 0x80000000) != 0) {
          goto LABEL_476;
        }
      }
LABEL_286:
      int v73 = *((_DWORD *)this + 7);
      if (!(_BYTE)v73) {
        goto LABEL_310;
      }
      goto LABEL_287;
    }
  }
LABEL_285:
  if ((v45 & 0x80000000) == 0) {
    goto LABEL_286;
  }
LABEL_476:
  int v121 = *((_DWORD *)this + 104);
  if (v121 < 0)
  {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 12);
    int v73 = *((_DWORD *)this + 7);
    if (!(_BYTE)v73) {
      goto LABEL_310;
    }
  }
  else
  {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + ((9 * (__clz(v121 | 1) ^ 0x1F) + 73) >> 6) + 2);
    int v73 = *((_DWORD *)this + 7);
    if (!(_BYTE)v73) {
      goto LABEL_310;
    }
  }
LABEL_287:
  if (v73)
  {
    int v74 = *((_DWORD *)this + 105);
    uint64_t v75 = (9 * (__clz(v74 | 1) ^ 0x1F) + 73) >> 6;
    if (v74 >= 0) {
      uint64_t v76 = v75;
    }
    else {
      uint64_t v76 = 10;
    }
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v76 + 2);
  }
  unint64_t v77 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
  if ((v73 & 2) == 0) {
    unint64_t v77 = v9;
  }
  if ((v73 & 4) != 0) {
    unint64_t v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  }
  if ((v73 & 8) != 0) {
    unint64_t v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  }
  if ((v73 & 0x10) != 0) {
    unint64_t v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  }
  if ((v73 & 0x20) != 0)
  {
    int v78 = *((_DWORD *)this + 107);
    uint64_t v79 = (9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6;
    if (v78 >= 0) {
      uint64_t v80 = v79;
    }
    else {
      uint64_t v80 = 10;
    }
    unint64_t v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + v80 + 2);
  }
  if ((v73 & 0x40) != 0) {
    unint64_t v77 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 10);
  }
  if ((v73 & 0x80) != 0) {
    int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v77 + 3);
  }
  else {
    int v9 = v77;
  }
LABEL_310:
  if ((v73 & 0xFF00) != 0)
  {
    uint64_t v81 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v73 & 0x100) == 0) {
      uint64_t v81 = v9;
    }
    if ((v73 & 0x200) != 0) {
      uint64_t v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    }
    if ((v73 & 0x400) != 0) {
      uint64_t v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    }
    if ((v73 & 0x800) != 0) {
      uint64_t v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    }
    if ((v73 & 0x1000) != 0) {
      uint64_t v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    }
    if ((v73 & 0x2000) != 0) {
      uint64_t v81 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    }
    if ((v73 & 0x4000) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v81 + 3);
    }
    else {
      int v9 = v81;
    }
    if ((v73 & 0x8000) != 0)
    {
      int v82 = *((_DWORD *)this + 112);
      if (v82 < 0) {
        uint64_t v83 = 10;
      }
      else {
        uint64_t v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
      }
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v83 + 2);
    }
  }
  if ((v73 & 0xFF0000) != 0)
  {
    unint64_t v85 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v73 & 0x10000) == 0) {
      unint64_t v85 = v9;
    }
    if ((v73 & 0x20000) != 0) {
      unint64_t v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 3);
    }
    if ((v73 & 0x40000) != 0) {
      unint64_t v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 3);
    }
    if ((v73 & 0x80000) != 0) {
      unint64_t v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 3);
    }
    if ((v73 & 0x100000) != 0)
    {
      int v93 = *((_DWORD *)this + 114);
      uint64_t v94 = (9 * (__clz(v93 | 1) ^ 0x1F) + 73) >> 6;
      if (v93 >= 0) {
        uint64_t v95 = v94;
      }
      else {
        uint64_t v95 = 10;
      }
      unint64_t v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + v95 + 2);
      if ((v73 & 0x200000) == 0)
      {
LABEL_345:
        if ((v73 & 0x400000) == 0) {
          goto LABEL_347;
        }
        goto LABEL_346;
      }
    }
    else if ((v73 & 0x200000) == 0)
    {
      goto LABEL_345;
    }
    int v96 = *((_DWORD *)this + 115);
    uint64_t v97 = (9 * (__clz(v96 | 1) ^ 0x1F) + 73) >> 6;
    if (v96 >= 0) {
      uint64_t v98 = v97;
    }
    else {
      uint64_t v98 = 10;
    }
    unint64_t v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + v98 + 2);
    if ((v73 & 0x400000) == 0) {
      goto LABEL_347;
    }
LABEL_346:
    unint64_t v85 = (const google::protobuf::UnknownFieldSet *)((char *)v85
                                                    + ((9 * (__clz(*((void *)this + 58) | 1) ^ 0x3F) + 73) >> 6)
                                                    + 2);
LABEL_347:
    if ((v73 & 0x800000) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v85 + 10);
    }
    else {
      int v9 = v85;
    }
  }
  if (HIBYTE(v73))
  {
    unint64_t v86 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
    if ((v73 & 0x1000000) == 0) {
      unint64_t v86 = v9;
    }
    if ((v73 & 0x2000000) != 0) {
      unint64_t v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 10);
    }
    if ((v73 & 0x4000000) != 0)
    {
      int v87 = *((_DWORD *)this + 124);
      uint64_t v88 = (9 * (__clz(v87 | 1) ^ 0x1F) + 73) >> 6;
      if (v87 >= 0) {
        uint64_t v89 = v88;
      }
      else {
        uint64_t v89 = 10;
      }
      unint64_t v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + v89 + 2);
    }
    if ((v73 & 0x8000000) != 0) {
      unint64_t v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    }
    if ((v73 & 0x10000000) != 0) {
      unint64_t v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    }
    if ((v73 & 0x20000000) != 0) {
      unint64_t v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    }
    if ((v73 & 0x40000000) != 0) {
      unint64_t v86 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 3);
    }
    if (v73 >= 0) {
      int v9 = v86;
    }
    else {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v86 + 10);
    }
  }
  int v90 = *((_DWORD *)this + 8);
  if ((_BYTE)v90)
  {
    if (v90)
    {
      int v91 = *((_DWORD *)this + 128);
      if (v91 < 0) {
        uint64_t v92 = 10;
      }
      else {
        uint64_t v92 = (9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6;
      }
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v92 + 2);
    }
    if ((v90 & 2) != 0)
    {
      int v99 = *((_DWORD *)this + 129);
      if (v99 < 0) {
        uint64_t v100 = 12;
      }
      else {
        uint64_t v100 = ((9 * (__clz(v99 | 1) ^ 0x1F) + 73) >> 6) + 2;
      }
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + v100);
    }
    unint64_t v101 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 10);
    if ((v90 & 4) == 0) {
      unint64_t v101 = v9;
    }
    if ((v90 & 8) != 0) {
      unint64_t v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + 10);
    }
    if ((v90 & 0x10) != 0)
    {
      int v102 = *((_DWORD *)this + 134);
      if (v102 < 0) {
        uint64_t v103 = 12;
      }
      else {
        uint64_t v103 = ((9 * (__clz(v102 | 1) ^ 0x1F) + 73) >> 6) + 2;
      }
      unint64_t v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + v103);
    }
    if ((v90 & 0x20) != 0)
    {
      int v104 = *((_DWORD *)this + 135);
      if (v104 < 0) {
        uint64_t v105 = 12;
      }
      else {
        uint64_t v105 = ((9 * (__clz(v104 | 1) ^ 0x1F) + 73) >> 6) + 2;
      }
      unint64_t v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + v105);
    }
    if ((v90 & 0x40) != 0) {
      unint64_t v101 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + 3);
    }
    if ((v90 & 0x80) != 0) {
      int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v101 + 3);
    }
    else {
      int v9 = v101;
    }
  }
  if ((v90 & 0x3F00) != 0)
  {
    unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v9 + 3);
    if ((v90 & 0x100) == 0) {
      unint64_t v106 = v9;
    }
    if ((v90 & 0x200) == 0)
    {
      if ((v90 & 0x400) != 0) {
        unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
      }
      if ((v90 & 0x800) == 0) {
        goto LABEL_417;
      }
LABEL_427:
      int v108 = *((_DWORD *)this + 140);
      if (v108 < 0)
      {
        unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 12);
        if ((v90 & 0x1000) == 0) {
          goto LABEL_435;
        }
      }
      else
      {
        unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + ((9 * (__clz(v108 | 1) ^ 0x1F) + 73) >> 6) + 2);
        if ((v90 & 0x1000) == 0)
        {
LABEL_435:
          if ((v90 & 0x2000) != 0) {
            int v9 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
          }
          else {
            int v9 = v106;
          }
          goto LABEL_438;
        }
      }
LABEL_431:
      int v109 = *((_DWORD *)this + 141);
      if (v109 < 0) {
        uint64_t v110 = 12;
      }
      else {
        uint64_t v110 = ((9 * (__clz(v109 | 1) ^ 0x1F) + 73) >> 6) + 2;
      }
      unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + v110);
      goto LABEL_435;
    }
    int v107 = *((_DWORD *)this + 137);
    if (v107 < 0)
    {
      unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 12);
      if ((v90 & 0x400) != 0) {
        unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
      }
      if ((v90 & 0x800) != 0) {
        goto LABEL_427;
      }
    }
    else
    {
      unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + ((9 * (__clz(v107 | 1) ^ 0x1F) + 73) >> 6) + 2);
      if ((v90 & 0x400) != 0) {
        unint64_t v106 = (const google::protobuf::UnknownFieldSet *)((char *)v106 + 10);
      }
      if ((v90 & 0x800) != 0) {
        goto LABEL_427;
      }
    }
LABEL_417:
    if ((v90 & 0x1000) == 0) {
      goto LABEL_435;
    }
    goto LABEL_431;
  }
LABEL_438:
  if (*((unsigned char *)this + 8)) {
    return google::protobuf::internal::ComputeUnknownFieldsSize((operations_research::sat::SatParameters *)((char *)this + 8), v9, (_DWORD *)this + 9);
  }
  *((_DWORD *)this + 9) = v9;
  return (char *)v9;
}

void operations_research::sat::SatParameters::MergeFrom(operations_research::sat::SatParameters *this, const google::protobuf::Message *lpsrc)
{
  if (v4)
  {
    operations_research::sat::SatParameters::MergeFrom(this, v4);
  }
  else
  {
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v5);
  }
}

void operations_research::sat::SatParameters::MergeFrom(operations_research::sat::SatParameters *this, const operations_research::sat::SatParameters *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    unsigned int v5 = (unint64_t *)((char *)this + 8);
    int64x2_t v6 = (const google::protobuf::UnknownFieldSet *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    uint64_t v7 = *((void *)this + 1);
    if (v7) {
      int64x2_t v8 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      int64x2_t v8 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v5);
    }
    google::protobuf::UnknownFieldSet::InternalMergeFrom((uint64_t)v8, v6);
  }
  int v9 = *((_DWORD *)a2 + 10);
  if (v9)
  {
    uint64_t v10 = *((int *)this + 10);
    google::protobuf::RepeatedField<int>::Reserve((unsigned int *)this + 10, v10 + v9);
    uint64_t v11 = *((void *)this + 6);
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
    memcpy((void *)(v11 + 4 * v10), *((const void **)a2 + 6), 4 * *((int *)a2 + 10));
  }
  unsigned int v12 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v12)
  {
    if ((v12 & 1) == 0)
    {
      if ((v12 & 2) == 0) {
        goto LABEL_10;
      }
LABEL_341:
      *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
      if ((v12 & 4) == 0)
      {
LABEL_11:
        if ((v12 & 8) == 0) {
          goto LABEL_12;
        }
        goto LABEL_343;
      }
LABEL_342:
      *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
      if ((v12 & 8) == 0)
      {
LABEL_12:
        if ((v12 & 0x10) == 0) {
          goto LABEL_13;
        }
        goto LABEL_344;
      }
LABEL_343:
      *((void *)this + 9) = *((void *)a2 + 9);
      if ((v12 & 0x10) == 0)
      {
LABEL_13:
        if ((v12 & 0x20) == 0) {
          goto LABEL_14;
        }
        goto LABEL_345;
      }
LABEL_344:
      *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((void *)a2 + 10);
      if ((v12 & 0x20) == 0)
      {
LABEL_14:
        if ((v12 & 0x40) == 0) {
          goto LABEL_15;
        }
        goto LABEL_346;
      }
LABEL_345:
      *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
      if ((v12 & 0x40) == 0)
      {
LABEL_15:
        if ((v12 & 0x80) == 0)
        {
LABEL_17:
          *((_DWORD *)this + 4) |= v12;
          goto LABEL_18;
        }
LABEL_16:
        *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
        goto LABEL_17;
      }
LABEL_346:
      *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
      if ((v12 & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    unint64_t v17 = (std::string *)*((void *)a2 + 7);
    *((_DWORD *)this + 4) |= 1u;
    int v18 = (std::string **)((char *)this + 56);
    uint64_t v19 = *((void *)this + 1);
    int v20 = (google::protobuf::Arena *)(v19 & 0xFFFFFFFFFFFFFFFELL);
    if (v19)
    {
      int v20 = *(google::protobuf::Arena **)v20;
      uint64_t v21 = *v18;
      if (*v18 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_)
      {
LABEL_202:
        std::string::operator=(v21, v17);
        if ((v12 & 2) != 0) {
          goto LABEL_341;
        }
LABEL_10:
        if ((v12 & 4) == 0) {
          goto LABEL_11;
        }
        goto LABEL_342;
      }
    }
    else
    {
      uint64_t v21 = *v18;
      if (*v18 != (std::string *)&operations_research::sat::SatParameters::_i_give_permission_to_break_this_code_default_default_restart_algorithms_) {
        goto LABEL_202;
      }
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, v20, (long long *)v17);
    if ((v12 & 2) != 0) {
      goto LABEL_341;
    }
    goto LABEL_10;
  }
LABEL_18:
  if ((v12 & 0xFF00) == 0) {
    goto LABEL_29;
  }
  if ((v12 & 0x100) != 0)
  {
    *((unsigned char *)this + 97) = *((unsigned char *)a2 + 97);
    if ((v12 & 0x200) == 0)
    {
LABEL_21:
      if ((v12 & 0x400) == 0) {
        goto LABEL_22;
      }
      goto LABEL_206;
    }
  }
  else if ((v12 & 0x200) == 0)
  {
    goto LABEL_21;
  }
  *((unsigned char *)this + 98) = *((unsigned char *)a2 + 98);
  if ((v12 & 0x400) == 0)
  {
LABEL_22:
    if ((v12 & 0x800) == 0) {
      goto LABEL_23;
    }
    goto LABEL_207;
  }
LABEL_206:
  *((unsigned char *)this + 99) = *((unsigned char *)a2 + 99);
  if ((v12 & 0x800) == 0)
  {
LABEL_23:
    if ((v12 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_208;
  }
LABEL_207:
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  if ((v12 & 0x1000) == 0)
  {
LABEL_24:
    if ((v12 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_209;
  }
LABEL_208:
  *((void *)this + 13) = *((void *)a2 + 13);
  if ((v12 & 0x2000) == 0)
  {
LABEL_25:
    if ((v12 & 0x4000) == 0) {
      goto LABEL_26;
    }
LABEL_210:
    *((unsigned char *)this + 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((unsigned char *)a2 + 120);
    if ((v12 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_209:
  *((void *)this + 14) = *((void *)a2 + 14);
  if ((v12 & 0x4000) != 0) {
    goto LABEL_210;
  }
LABEL_26:
  if ((v12 & 0x8000) != 0) {
LABEL_27:
  }
    *((unsigned char *)this + 121) = *((unsigned char *)a2 + 121);
LABEL_28:
  *((_DWORD *)this + 4) |= v12;
LABEL_29:
  if ((v12 & 0xFF0000) == 0) {
    goto LABEL_40;
  }
  if ((v12 & 0x10000) != 0)
  {
    *((unsigned char *)this + 122) = *((unsigned char *)a2 + 122);
    if ((v12 & 0x20000) == 0)
    {
LABEL_32:
      if ((v12 & 0x40000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_214;
    }
  }
  else if ((v12 & 0x20000) == 0)
  {
    goto LABEL_32;
  }
  *((unsigned char *)this + 123) = *((unsigned char *)a2 + 123);
  if ((v12 & 0x40000) == 0)
  {
LABEL_33:
    if ((v12 & 0x80000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_215;
  }
LABEL_214:
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  if ((v12 & 0x80000) == 0)
  {
LABEL_34:
    if ((v12 & 0x100000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_216;
  }
LABEL_215:
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 128);
  if ((v12 & 0x100000) == 0)
  {
LABEL_35:
    if ((v12 & 0x200000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_217;
  }
LABEL_216:
  *((unsigned char *)this + 129) = *((unsigned char *)a2 + 129);
  if ((v12 & 0x200000) == 0)
  {
LABEL_36:
    if ((v12 & 0x400000) == 0) {
      goto LABEL_37;
    }
LABEL_218:
    *((unsigned char *)this + 131) = *((unsigned char *)a2 + 131);
    if ((v12 & 0x800000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_217:
  *((unsigned char *)this + 13google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((unsigned char *)a2 + 130);
  if ((v12 & 0x400000) != 0) {
    goto LABEL_218;
  }
LABEL_37:
  if ((v12 & 0x800000) != 0) {
LABEL_38:
  }
    *((unsigned char *)this + 132) = *((unsigned char *)a2 + 132);
LABEL_39:
  *((_DWORD *)this + 4) |= v12;
LABEL_40:
  if (!HIBYTE(v12)) {
    goto LABEL_50;
  }
  if ((v12 & 0x1000000) != 0)
  {
    *((unsigned char *)this + 133) = *((unsigned char *)a2 + 133);
    if ((v12 & 0x2000000) == 0)
    {
LABEL_43:
      if ((v12 & 0x4000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_308;
    }
  }
  else if ((v12 & 0x2000000) == 0)
  {
    goto LABEL_43;
  }
  *((unsigned char *)this + 134) = *((unsigned char *)a2 + 134);
  if ((v12 & 0x4000000) == 0)
  {
LABEL_44:
    if ((v12 & 0x8000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_309;
  }
LABEL_308:
  *((unsigned char *)this + 135) = *((unsigned char *)a2 + 135);
  if ((v12 & 0x8000000) == 0)
  {
LABEL_45:
    if ((v12 & 0x10000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_310;
  }
LABEL_309:
  *((void *)this + 17) = *((void *)a2 + 17);
  if ((v12 & 0x10000000) == 0)
  {
LABEL_46:
    if ((v12 & 0x20000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_311;
  }
LABEL_310:
  *((unsigned char *)this + 144) = *((unsigned char *)a2 + 144);
  if ((v12 & 0x20000000) == 0)
  {
LABEL_47:
    if ((v12 & 0x40000000) == 0) {
      goto LABEL_48;
    }
LABEL_312:
    *((unsigned char *)this + 146) = *((unsigned char *)a2 + 146);
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_313:
    *((unsigned char *)this + 147) = *((unsigned char *)a2 + 147);
    goto LABEL_49;
  }
LABEL_311:
  *((unsigned char *)this + 145) = *((unsigned char *)a2 + 145);
  if ((v12 & 0x40000000) != 0) {
    goto LABEL_312;
  }
LABEL_48:
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_313;
  }
LABEL_49:
  *((_DWORD *)this + 4) |= v12;
LABEL_50:
  unsigned int v13 = *((_DWORD *)a2 + 5);
  if (!(_BYTE)v13) {
    goto LABEL_61;
  }
  if (v13)
  {
    *((unsigned char *)this + 148) = *((unsigned char *)a2 + 148);
    if ((v13 & 2) == 0)
    {
LABEL_53:
      if ((v13 & 4) == 0) {
        goto LABEL_54;
      }
      goto LABEL_222;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_53;
  }
  *((unsigned char *)this + 149) = *((unsigned char *)a2 + 149);
  if ((v13 & 4) == 0)
  {
LABEL_54:
    if ((v13 & 8) == 0) {
      goto LABEL_55;
    }
    goto LABEL_223;
  }
LABEL_222:
  *((unsigned char *)this + 15google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((unsigned char *)a2 + 150);
  if ((v13 & 8) == 0)
  {
LABEL_55:
    if ((v13 & 0x10) == 0) {
      goto LABEL_56;
    }
    goto LABEL_224;
  }
LABEL_223:
  *((unsigned char *)this + 151) = *((unsigned char *)a2 + 151);
  if ((v13 & 0x10) == 0)
  {
LABEL_56:
    if ((v13 & 0x20) == 0) {
      goto LABEL_57;
    }
    goto LABEL_225;
  }
LABEL_224:
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  if ((v13 & 0x20) == 0)
  {
LABEL_57:
    if ((v13 & 0x40) == 0) {
      goto LABEL_58;
    }
LABEL_226:
    *((unsigned char *)this + 154) = *((unsigned char *)a2 + 154);
    if ((v13 & 0x80) == 0) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
LABEL_225:
  *((unsigned char *)this + 153) = *((unsigned char *)a2 + 153);
  if ((v13 & 0x40) != 0) {
    goto LABEL_226;
  }
LABEL_58:
  if ((v13 & 0x80) != 0) {
LABEL_59:
  }
    *((unsigned char *)this + 155) = *((unsigned char *)a2 + 155);
LABEL_60:
  *((_DWORD *)this + 5) |= v13;
LABEL_61:
  if ((v13 & 0xFF00) == 0) {
    goto LABEL_72;
  }
  if ((v13 & 0x100) != 0)
  {
    *((unsigned char *)this + 156) = *((unsigned char *)a2 + 156);
    if ((v13 & 0x200) == 0)
    {
LABEL_64:
      if ((v13 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_230;
    }
  }
  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  *((unsigned char *)this + 157) = *((unsigned char *)a2 + 157);
  if ((v13 & 0x400) == 0)
  {
LABEL_65:
    if ((v13 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_231;
  }
LABEL_230:
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((void *)a2 + 20);
  if ((v13 & 0x800) == 0)
  {
LABEL_66:
    if ((v13 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_232;
  }
LABEL_231:
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  if ((v13 & 0x1000) == 0)
  {
LABEL_67:
    if ((v13 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_233;
  }
LABEL_232:
  *((void *)this + 22) = *((void *)a2 + 22);
  if ((v13 & 0x2000) == 0)
  {
LABEL_68:
    if ((v13 & 0x4000) == 0) {
      goto LABEL_69;
    }
LABEL_234:
    *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
    if ((v13 & 0x8000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
LABEL_233:
  *((void *)this + 23) = *((void *)a2 + 23);
  if ((v13 & 0x4000) != 0) {
    goto LABEL_234;
  }
LABEL_69:
  if ((v13 & 0x8000) != 0) {
LABEL_70:
  }
    *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
LABEL_71:
  *((_DWORD *)this + 5) |= v13;
LABEL_72:
  if ((v13 & 0xFF0000) == 0) {
    goto LABEL_83;
  }
  if ((v13 & 0x10000) != 0)
  {
    *((_DWORD *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((_DWORD *)a2 + 50);
    if ((v13 & 0x20000) == 0)
    {
LABEL_75:
      if ((v13 & 0x40000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_238;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_75;
  }
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  if ((v13 & 0x40000) == 0)
  {
LABEL_76:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_239;
  }
LABEL_238:
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  if ((v13 & 0x80000) == 0)
  {
LABEL_77:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_240;
  }
LABEL_239:
  *((void *)this + 27) = *((void *)a2 + 27);
  if ((v13 & 0x100000) == 0)
  {
LABEL_78:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_241;
  }
LABEL_240:
  *((void *)this + 28) = *((void *)a2 + 28);
  if ((v13 & 0x200000) == 0)
  {
LABEL_79:
    if ((v13 & 0x400000) == 0) {
      goto LABEL_80;
    }
LABEL_242:
    *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((void *)a2 + 30);
    if ((v13 & 0x800000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
LABEL_241:
  *((void *)this + 29) = *((void *)a2 + 29);
  if ((v13 & 0x400000) != 0) {
    goto LABEL_242;
  }
LABEL_80:
  if ((v13 & 0x800000) != 0) {
LABEL_81:
  }
    *((void *)this + 31) = *((void *)a2 + 31);
LABEL_82:
  *((_DWORD *)this + 5) |= v13;
LABEL_83:
  if (!HIBYTE(v13)) {
    goto LABEL_93;
  }
  if ((v13 & 0x1000000) != 0)
  {
    *((void *)this + 32) = *((void *)a2 + 32);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_86:
      if ((v13 & 0x4000000) == 0) {
        goto LABEL_87;
      }
      goto LABEL_316;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_86;
  }
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_87:
    if ((v13 & 0x8000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_317;
  }
LABEL_316:
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_88:
    if ((v13 & 0x10000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_318;
  }
LABEL_317:
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_89:
    if ((v13 & 0x20000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_319;
  }
LABEL_318:
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_90:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_91;
    }
LABEL_320:
    *((void *)this + 36) = *((void *)a2 + 36);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_92;
    }
LABEL_321:
    *((void *)this + 37) = *((void *)a2 + 37);
    goto LABEL_92;
  }
LABEL_319:
  *((void *)this + 35) = *((void *)a2 + 35);
  if ((v13 & 0x40000000) != 0) {
    goto LABEL_320;
  }
LABEL_91:
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_321;
  }
LABEL_92:
  *((_DWORD *)this + 5) |= v13;
LABEL_93:
  unsigned int v14 = *((_DWORD *)a2 + 6);
  if (!(_BYTE)v14) {
    goto LABEL_104;
  }
  if (v14)
  {
    *((unsigned char *)this + 304) = *((unsigned char *)a2 + 304);
    if ((v14 & 2) == 0)
    {
LABEL_96:
      if ((v14 & 4) == 0) {
        goto LABEL_97;
      }
      goto LABEL_246;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_96;
  }
  *((unsigned char *)this + 305) = *((unsigned char *)a2 + 305);
  if ((v14 & 4) == 0)
  {
LABEL_97:
    if ((v14 & 8) == 0) {
      goto LABEL_98;
    }
    goto LABEL_247;
  }
LABEL_246:
  *((unsigned char *)this + 306) = *((unsigned char *)a2 + 306);
  if ((v14 & 8) == 0)
  {
LABEL_98:
    if ((v14 & 0x10) == 0) {
      goto LABEL_99;
    }
    goto LABEL_248;
  }
LABEL_247:
  *((unsigned char *)this + 307) = *((unsigned char *)a2 + 307);
  if ((v14 & 0x10) == 0)
  {
LABEL_99:
    if ((v14 & 0x20) == 0) {
      goto LABEL_100;
    }
    goto LABEL_249;
  }
LABEL_248:
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  if ((v14 & 0x20) == 0)
  {
LABEL_100:
    if ((v14 & 0x40) == 0) {
      goto LABEL_101;
    }
LABEL_250:
    *((_DWORD *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((_DWORD *)a2 + 80);
    if ((v14 & 0x80) == 0) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
LABEL_249:
  *((void *)this + 39) = *((void *)a2 + 39);
  if ((v14 & 0x40) != 0) {
    goto LABEL_250;
  }
LABEL_101:
  if ((v14 & 0x80) != 0) {
LABEL_102:
  }
    *((_DWORD *)this + 81) = *((_DWORD *)a2 + 81);
LABEL_103:
  *((_DWORD *)this + 6) |= v14;
LABEL_104:
  if ((v14 & 0xFF00) == 0) {
    goto LABEL_115;
  }
  if ((v14 & 0x100) != 0)
  {
    *((void *)this + 41) = *((void *)a2 + 41);
    if ((v14 & 0x200) == 0)
    {
LABEL_107:
      if ((v14 & 0x400) == 0) {
        goto LABEL_108;
      }
      goto LABEL_254;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_107;
  }
  *((_DWORD *)this + 84) = *((_DWORD *)a2 + 84);
  if ((v14 & 0x400) == 0)
  {
LABEL_108:
    if ((v14 & 0x800) == 0) {
      goto LABEL_109;
    }
    goto LABEL_255;
  }
LABEL_254:
  *((_DWORD *)this + 85) = *((_DWORD *)a2 + 85);
  if ((v14 & 0x800) == 0)
  {
LABEL_109:
    if ((v14 & 0x1000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_256;
  }
LABEL_255:
  *((void *)this + 43) = *((void *)a2 + 43);
  if ((v14 & 0x1000) == 0)
  {
LABEL_110:
    if ((v14 & 0x2000) == 0) {
      goto LABEL_111;
    }
    goto LABEL_257;
  }
LABEL_256:
  *((_DWORD *)this + 88) = *((_DWORD *)a2 + 88);
  if ((v14 & 0x2000) == 0)
  {
LABEL_111:
    if ((v14 & 0x4000) == 0) {
      goto LABEL_112;
    }
LABEL_258:
    *((void *)this + 45) = *((void *)a2 + 45);
    if ((v14 & 0x8000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_113;
  }
LABEL_257:
  *((_DWORD *)this + 89) = *((_DWORD *)a2 + 89);
  if ((v14 & 0x4000) != 0) {
    goto LABEL_258;
  }
LABEL_112:
  if ((v14 & 0x8000) != 0) {
LABEL_113:
  }
    *((void *)this + 46) = *((void *)a2 + 46);
LABEL_114:
  *((_DWORD *)this + 6) |= v14;
LABEL_115:
  if ((v14 & 0xFF0000) == 0) {
    goto LABEL_126;
  }
  if ((v14 & 0x10000) != 0)
  {
    *((void *)this + 47) = *((void *)a2 + 47);
    if ((v14 & 0x20000) == 0)
    {
LABEL_118:
      if ((v14 & 0x40000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_262;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_118;
  }
  *((_DWORD *)this + 96) = *((_DWORD *)a2 + 96);
  if ((v14 & 0x40000) == 0)
  {
LABEL_119:
    if ((v14 & 0x80000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_263;
  }
LABEL_262:
  *((unsigned char *)this + 388) = *((unsigned char *)a2 + 388);
  if ((v14 & 0x80000) == 0)
  {
LABEL_120:
    if ((v14 & 0x100000) == 0) {
      goto LABEL_121;
    }
    goto LABEL_264;
  }
LABEL_263:
  *((unsigned char *)this + 389) = *((unsigned char *)a2 + 389);
  if ((v14 & 0x100000) == 0)
  {
LABEL_121:
    if ((v14 & 0x200000) == 0) {
      goto LABEL_122;
    }
    goto LABEL_265;
  }
LABEL_264:
  *((unsigned char *)this + 39google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((unsigned char *)a2 + 390);
  if ((v14 & 0x200000) == 0)
  {
LABEL_122:
    if ((v14 & 0x400000) == 0) {
      goto LABEL_123;
    }
LABEL_266:
    *((unsigned char *)this + 392) = *((unsigned char *)a2 + 392);
    if ((v14 & 0x800000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_124;
  }
LABEL_265:
  *((unsigned char *)this + 391) = *((unsigned char *)a2 + 391);
  if ((v14 & 0x400000) != 0) {
    goto LABEL_266;
  }
LABEL_123:
  if ((v14 & 0x800000) != 0) {
LABEL_124:
  }
    *((unsigned char *)this + 393) = *((unsigned char *)a2 + 393);
LABEL_125:
  *((_DWORD *)this + 6) |= v14;
LABEL_126:
  if (!HIBYTE(v14)) {
    goto LABEL_136;
  }
  if ((v14 & 0x1000000) != 0)
  {
    *((unsigned char *)this + 394) = *((unsigned char *)a2 + 394);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_129:
      if ((v14 & 0x4000000) == 0) {
        goto LABEL_130;
      }
      goto LABEL_324;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_129;
  }
  *((unsigned char *)this + 395) = *((unsigned char *)a2 + 395);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_130:
    if ((v14 & 0x8000000) == 0) {
      goto LABEL_131;
    }
    goto LABEL_325;
  }
LABEL_324:
  *((_DWORD *)this + 99) = *((_DWORD *)a2 + 99);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_131:
    if ((v14 & 0x10000000) == 0) {
      goto LABEL_132;
    }
    goto LABEL_326;
  }
LABEL_325:
  *((_DWORD *)this + 10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((_DWORD *)a2 + 100);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_132:
    if ((v14 & 0x20000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_327;
  }
LABEL_326:
  *((_DWORD *)this + 101) = *((_DWORD *)a2 + 101);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_133:
    if ((v14 & 0x40000000) == 0) {
      goto LABEL_134;
    }
LABEL_328:
    *((_DWORD *)this + 103) = *((_DWORD *)a2 + 103);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_135;
    }
LABEL_329:
    *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
    goto LABEL_135;
  }
LABEL_327:
  *((_DWORD *)this + 102) = *((_DWORD *)a2 + 102);
  if ((v14 & 0x40000000) != 0) {
    goto LABEL_328;
  }
LABEL_134:
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_329;
  }
LABEL_135:
  *((_DWORD *)this + 6) |= v14;
LABEL_136:
  unsigned int v15 = *((_DWORD *)a2 + 7);
  if (!(_BYTE)v15) {
    goto LABEL_147;
  }
  if (v15)
  {
    *((_DWORD *)this + 105) = *((_DWORD *)a2 + 105);
    if ((v15 & 2) == 0)
    {
LABEL_139:
      if ((v15 & 4) == 0) {
        goto LABEL_140;
      }
      goto LABEL_270;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_139;
  }
  *((unsigned char *)this + 424) = *((unsigned char *)a2 + 424);
  if ((v15 & 4) == 0)
  {
LABEL_140:
    if ((v15 & 8) == 0) {
      goto LABEL_141;
    }
    goto LABEL_271;
  }
LABEL_270:
  *((unsigned char *)this + 425) = *((unsigned char *)a2 + 425);
  if ((v15 & 8) == 0)
  {
LABEL_141:
    if ((v15 & 0x10) == 0) {
      goto LABEL_142;
    }
    goto LABEL_272;
  }
LABEL_271:
  *((unsigned char *)this + 426) = *((unsigned char *)a2 + 426);
  if ((v15 & 0x10) == 0)
  {
LABEL_142:
    if ((v15 & 0x20) == 0) {
      goto LABEL_143;
    }
    goto LABEL_273;
  }
LABEL_272:
  *((unsigned char *)this + 427) = *((unsigned char *)a2 + 427);
  if ((v15 & 0x20) == 0)
  {
LABEL_143:
    if ((v15 & 0x40) == 0) {
      goto LABEL_144;
    }
LABEL_274:
    *((void *)this + 54) = *((void *)a2 + 54);
    if ((v15 & 0x80) == 0) {
      goto LABEL_146;
    }
    goto LABEL_145;
  }
LABEL_273:
  *((_DWORD *)this + 107) = *((_DWORD *)a2 + 107);
  if ((v15 & 0x40) != 0) {
    goto LABEL_274;
  }
LABEL_144:
  if ((v15 & 0x80) != 0) {
LABEL_145:
  }
    *((unsigned char *)this + 44google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((unsigned char *)a2 + 440);
LABEL_146:
  *((_DWORD *)this + 7) |= v15;
LABEL_147:
  if ((v15 & 0xFF00) == 0) {
    goto LABEL_158;
  }
  if ((v15 & 0x100) != 0)
  {
    *((unsigned char *)this + 441) = *((unsigned char *)a2 + 441);
    if ((v15 & 0x200) == 0)
    {
LABEL_150:
      if ((v15 & 0x400) == 0) {
        goto LABEL_151;
      }
      goto LABEL_278;
    }
  }
  else if ((v15 & 0x200) == 0)
  {
    goto LABEL_150;
  }
  *((unsigned char *)this + 442) = *((unsigned char *)a2 + 442);
  if ((v15 & 0x400) == 0)
  {
LABEL_151:
    if ((v15 & 0x800) == 0) {
      goto LABEL_152;
    }
    goto LABEL_279;
  }
LABEL_278:
  *((unsigned char *)this + 443) = *((unsigned char *)a2 + 443);
  if ((v15 & 0x800) == 0)
  {
LABEL_152:
    if ((v15 & 0x1000) == 0) {
      goto LABEL_153;
    }
    goto LABEL_280;
  }
LABEL_279:
  *((unsigned char *)this + 444) = *((unsigned char *)a2 + 444);
  if ((v15 & 0x1000) == 0)
  {
LABEL_153:
    if ((v15 & 0x2000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_281;
  }
LABEL_280:
  *((unsigned char *)this + 445) = *((unsigned char *)a2 + 445);
  if ((v15 & 0x2000) == 0)
  {
LABEL_154:
    if ((v15 & 0x4000) == 0) {
      goto LABEL_155;
    }
LABEL_282:
    *((unsigned char *)this + 447) = *((unsigned char *)a2 + 447);
    if ((v15 & 0x8000) == 0) {
      goto LABEL_157;
    }
    goto LABEL_156;
  }
LABEL_281:
  *((unsigned char *)this + 446) = *((unsigned char *)a2 + 446);
  if ((v15 & 0x4000) != 0) {
    goto LABEL_282;
  }
LABEL_155:
  if ((v15 & 0x8000) != 0) {
LABEL_156:
  }
    *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
LABEL_157:
  *((_DWORD *)this + 7) |= v15;
LABEL_158:
  if ((v15 & 0xFF0000) == 0) {
    goto LABEL_169;
  }
  if ((v15 & 0x10000) != 0)
  {
    *((unsigned char *)this + 452) = *((unsigned char *)a2 + 452);
    if ((v15 & 0x20000) == 0)
    {
LABEL_161:
      if ((v15 & 0x40000) == 0) {
        goto LABEL_162;
      }
      goto LABEL_286;
    }
  }
  else if ((v15 & 0x20000) == 0)
  {
    goto LABEL_161;
  }
  *((unsigned char *)this + 453) = *((unsigned char *)a2 + 453);
  if ((v15 & 0x40000) == 0)
  {
LABEL_162:
    if ((v15 & 0x80000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_287;
  }
LABEL_286:
  *((unsigned char *)this + 454) = *((unsigned char *)a2 + 454);
  if ((v15 & 0x80000) == 0)
  {
LABEL_163:
    if ((v15 & 0x100000) == 0) {
      goto LABEL_164;
    }
    goto LABEL_288;
  }
LABEL_287:
  *((unsigned char *)this + 455) = *((unsigned char *)a2 + 455);
  if ((v15 & 0x100000) == 0)
  {
LABEL_164:
    if ((v15 & 0x200000) == 0) {
      goto LABEL_165;
    }
    goto LABEL_289;
  }
LABEL_288:
  *((_DWORD *)this + 114) = *((_DWORD *)a2 + 114);
  if ((v15 & 0x200000) == 0)
  {
LABEL_165:
    if ((v15 & 0x400000) == 0) {
      goto LABEL_166;
    }
LABEL_290:
    *((void *)this + 58) = *((void *)a2 + 58);
    if ((v15 & 0x800000) == 0) {
      goto LABEL_168;
    }
    goto LABEL_167;
  }
LABEL_289:
  *((_DWORD *)this + 115) = *((_DWORD *)a2 + 115);
  if ((v15 & 0x400000) != 0) {
    goto LABEL_290;
  }
LABEL_166:
  if ((v15 & 0x800000) != 0) {
LABEL_167:
  }
    *((void *)this + 59) = *((void *)a2 + 59);
LABEL_168:
  *((_DWORD *)this + 7) |= v15;
LABEL_169:
  if (!HIBYTE(v15)) {
    goto LABEL_179;
  }
  if ((v15 & 0x1000000) != 0)
  {
    *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((void *)a2 + 60);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_172:
      if ((v15 & 0x4000000) == 0) {
        goto LABEL_173;
      }
      goto LABEL_332;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_172;
  }
  *((void *)this + 61) = *((void *)a2 + 61);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_173:
    if ((v15 & 0x8000000) == 0) {
      goto LABEL_174;
    }
    goto LABEL_333;
  }
LABEL_332:
  *((_DWORD *)this + 124) = *((_DWORD *)a2 + 124);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_174:
    if ((v15 & 0x10000000) == 0) {
      goto LABEL_175;
    }
    goto LABEL_334;
  }
LABEL_333:
  *((unsigned char *)this + 50google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((unsigned char *)a2 + 500);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_175:
    if ((v15 & 0x20000000) == 0) {
      goto LABEL_176;
    }
    goto LABEL_335;
  }
LABEL_334:
  *((unsigned char *)this + 501) = *((unsigned char *)a2 + 501);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_176:
    if ((v15 & 0x40000000) == 0) {
      goto LABEL_177;
    }
LABEL_336:
    *((unsigned char *)this + 503) = *((unsigned char *)a2 + 503);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_178;
    }
LABEL_337:
    *((void *)this + 63) = *((void *)a2 + 63);
    goto LABEL_178;
  }
LABEL_335:
  *((unsigned char *)this + 502) = *((unsigned char *)a2 + 502);
  if ((v15 & 0x40000000) != 0) {
    goto LABEL_336;
  }
LABEL_177:
  if ((v15 & 0x80000000) != 0) {
    goto LABEL_337;
  }
LABEL_178:
  *((_DWORD *)this + 7) |= v15;
LABEL_179:
  int v16 = *((_DWORD *)a2 + 8);
  if (!(_BYTE)v16) {
    goto LABEL_190;
  }
  if (v16)
  {
    *((_DWORD *)this + 128) = *((_DWORD *)a2 + 128);
    if ((v16 & 2) == 0)
    {
LABEL_182:
      if ((v16 & 4) == 0) {
        goto LABEL_183;
      }
      goto LABEL_294;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_182;
  }
  *((_DWORD *)this + 129) = *((_DWORD *)a2 + 129);
  if ((v16 & 4) == 0)
  {
LABEL_183:
    if ((v16 & 8) == 0) {
      goto LABEL_184;
    }
    goto LABEL_295;
  }
LABEL_294:
  *((void *)this + 65) = *((void *)a2 + 65);
  if ((v16 & 8) == 0)
  {
LABEL_184:
    if ((v16 & 0x10) == 0) {
      goto LABEL_185;
    }
    goto LABEL_296;
  }
LABEL_295:
  *((void *)this + 66) = *((void *)a2 + 66);
  if ((v16 & 0x10) == 0)
  {
LABEL_185:
    if ((v16 & 0x20) == 0) {
      goto LABEL_186;
    }
    goto LABEL_297;
  }
LABEL_296:
  *((_DWORD *)this + 134) = *((_DWORD *)a2 + 134);
  if ((v16 & 0x20) == 0)
  {
LABEL_186:
    if ((v16 & 0x40) == 0) {
      goto LABEL_187;
    }
LABEL_298:
    *((unsigned char *)this + 544) = *((unsigned char *)a2 + 544);
    if ((v16 & 0x80) == 0) {
      goto LABEL_189;
    }
    goto LABEL_188;
  }
LABEL_297:
  *((_DWORD *)this + 135) = *((_DWORD *)a2 + 135);
  if ((v16 & 0x40) != 0) {
    goto LABEL_298;
  }
LABEL_187:
  if ((v16 & 0x80) != 0) {
LABEL_188:
  }
    *((unsigned char *)this + 545) = *((unsigned char *)a2 + 545);
LABEL_189:
  *((_DWORD *)this + 8) |= v16;
LABEL_190:
  if ((v16 & 0x3F00) == 0) {
    return;
  }
  if ((v16 & 0x100) != 0)
  {
    *((unsigned char *)this + 546) = *((unsigned char *)a2 + 546);
    if ((v16 & 0x200) == 0)
    {
LABEL_193:
      if ((v16 & 0x400) == 0) {
        goto LABEL_194;
      }
      goto LABEL_302;
    }
  }
  else if ((v16 & 0x200) == 0)
  {
    goto LABEL_193;
  }
  *((_DWORD *)this + 137) = *((_DWORD *)a2 + 137);
  if ((v16 & 0x400) == 0)
  {
LABEL_194:
    if ((v16 & 0x800) == 0) {
      goto LABEL_195;
    }
    goto LABEL_303;
  }
LABEL_302:
  *((void *)this + 69) = *((void *)a2 + 69);
  if ((v16 & 0x800) == 0)
  {
LABEL_195:
    if ((v16 & 0x1000) == 0) {
      goto LABEL_196;
    }
LABEL_304:
    *((_DWORD *)this + 141) = *((_DWORD *)a2 + 141);
    if ((v16 & 0x2000) == 0) {
      goto LABEL_198;
    }
    goto LABEL_197;
  }
LABEL_303:
  *((_DWORD *)this + 14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((_DWORD *)a2 + 140);
  if ((v16 & 0x1000) != 0) {
    goto LABEL_304;
  }
LABEL_196:
  if ((v16 & 0x2000) != 0) {
LABEL_197:
  }
    *((void *)this + 71) = *((void *)a2 + 71);
LABEL_198:
  *((_DWORD *)this + 8) |= v16;
}

void operations_research::sat::SatParameters::CopyFrom(operations_research::sat::SatParameters *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    operations_research::sat::SatParameters::Clear(this);
    if (v4)
    {
      operations_research::sat::SatParameters::MergeFrom(this, v4);
    }
    else
    {
      google::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
    }
  }
}

void operations_research::sat::SatParameters::CopyFrom(operations_research::sat::SatParameters *this, const operations_research::sat::SatParameters *a2)
{
  if (a2 != this)
  {
    operations_research::sat::SatParameters::Clear(this);
    operations_research::sat::SatParameters::MergeFrom(this, a2);
  }
}

uint64_t operations_research::sat::SatParameters::IsInitialized(operations_research::sat::SatParameters *this)
{
  return 1;
}

uint64_t operations_research::sat::SatParameters::GetMetadata(operations_research::sat::SatParameters *this)
{
  return *off_26AED0B80;
}

unint64_t google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::SatParameters>(google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  unint64_t AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((atomic_ullong *)this, 0x240uLL);
  }
  *(void *)unint64_t AlignedNoHook = &unk_26F0C4610;
  *(void *)(AlignedNoHook + 8) = this;
  *(_OWORD *)(AlignedNoHook + 16) = 0u;
  *(_OWORD *)(AlignedNoHook + 32) = 0u;
  *(void *)(AlignedNoHook + 48) = this;
  operations_research::sat::SatParameters::SharedCtor((operations_research::sat::SatParameters *)AlignedNoHook);
  return AlignedNoHook;
}

void sub_23CD7C500(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  MEMORY[0x23ECF2BC0](v1, 0x10A1C4095D8551FLL);
  _Unwind_Resume(a1);
}

void sub_23CD7C52C(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedField<BOOL>::~RepeatedField(v1 + 40);
  _Unwind_Resume(a1);
}

unint64_t operations_research::sat::SatParameters::New(operations_research::sat::SatParameters *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::SatParameters>(0);
}

unint64_t operations_research::sat::SatParameters::New(operations_research::sat::SatParameters *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<operations_research::sat::SatParameters>(a2);
}

uint64_t operations_research::sat::SatParameters::GetCachedSize(operations_research::sat::SatParameters *this)
{
  return *((unsigned int *)this + 9);
}

char *google::protobuf::internal::EpsCopyInputStream::ReadPackedVarint<char const* google::protobuf::internal::PackedEnumParser<google::protobuf::UnknownFieldSet>(void *,char const*,google::protobuf::internal::ParseContext *,BOOL (*)(int),google::protobuf::internal::InternalMetadata *,int)::{lambda(unsigned long long)#1}>(google::protobuf::internal::EpsCopyInputStream *this, google::protobuf::internal *a2, unsigned int **a3)
{
  int v6 = *(char *)a2;
  uint64_t v7 = (const char *)*(unsigned __int8 *)a2;
  if (v6 < 0)
  {
    SizeFallback = (char *)google::protobuf::internal::ReadSizeFallback(a2, v7);
    if (!SizeFallback) {
      return SizeFallback;
    }
  }
  else
  {
    SizeFallback = (char *)a2 + 1;
  }
  uint64_t v9 = *((void *)this + 1);
  int v10 = v7 + SizeFallback - v9;
  unint64_t v11 = v9 + (v10 & (v10 >> 31));
  *(void *)this = v11;
  int v12 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v10;
  int v13 = v12 - v10;
  if (v12 - v10 < 0) {
    return 0;
  }
LABEL_8:
  if ((unint64_t)SizeFallback < v11) {
    goto LABEL_11;
  }
LABEL_9:
  if (&SizeFallback[-*((void *)this + 1)] != (char *)*((int *)this + 7))
  {
    SizeFallback = (char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, SizeFallback, -1);
    if ((v15 & 1) == 0)
    {
      while (1)
      {
LABEL_11:
        uint64_t v16 = *SizeFallback;
        if (*SizeFallback < 0)
        {
          int v19 = v16 + (SizeFallback[1] << 7);
          uint64_t v16 = (v19 - 128);
          if (SizeFallback[1] < 0)
          {
            SizeFallback = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)SizeFallback, (const char *)(v19 - 128));
            if (!SizeFallback) {
              return SizeFallback;
            }
            uint64_t v16 = v23;
            if (((unsigned int (*)(uint64_t))a3[1])(v23))
            {
LABEL_13:
              unint64_t v17 = *a3;
              uint64_t v18 = **a3;
              if (v18 == (*a3)[1]) {
                google::protobuf::RepeatedField<int>::Reserve(*a3, v18 + 1);
              }
              *(_DWORD *)(*((void *)v17 + 1) + 4 * v18) = v16;
              *unint64_t v17 = v18 + 1;
              unint64_t v11 = *(void *)this;
              goto LABEL_8;
            }
          }
          else
          {
            SizeFallback += 2;
            if (((unsigned int (*)(void))a3[1])((v19 - 128))) {
              goto LABEL_13;
            }
          }
        }
        else
        {
          ++SizeFallback;
          if (((unsigned int (*)(uint64_t))a3[1])(v16)) {
            goto LABEL_13;
          }
        }
        unsigned int v20 = *((_DWORD *)a3 + 6);
        uint64_t v21 = (unint64_t *)a3[2];
        if (*v21) {
          unint64_t v22 = (char *)((*v21 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else {
          unint64_t v22 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<google::protobuf::UnknownFieldSet>(v21);
        }
        google::protobuf::UnknownFieldSet::AddVarint((google::protobuf::UnknownFieldSet *)v22, v20, v16);
        if ((unint64_t)SizeFallback >= *(void *)this) {
          goto LABEL_9;
        }
      }
    }
  }
  if (!*((_DWORD *)this + 20))
  {
    int v24 = *((_DWORD *)this + 7) + v13;
    *((_DWORD *)this + 7) = v24;
    *(void *)this = *((void *)this + 1) + (v24 & (v24 >> 31));
    return SizeFallback;
  }
  return 0;
}

void _GLOBAL__sub_I_sat_parameters_pb_cc()
{
}

operations_research::sat::SatSolver *operations_research::sat::SatSolver::SatSolver(operations_research::sat::SatSolver *this, operations_research::sat::Model *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = operations_research::sat::Model::GetOrCreate<operations_research::sat::BinaryImplicationGraph>((uint64_t)a2);
  *((void *)this + 4) = operations_research::sat::Model::GetOrCreate<operations_research::sat::LiteralWatchers>((uint64_t)a2);
  uint64_t v4 = operations_research::sat::Model::GetOrCreate<operations_research::sat::PbConstraints>((uint64_t)a2);
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 5) = v4;
  *((void *)this + 17) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((unsigned char *)this + 128) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 26) = operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  *((void *)this + 27) = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>((uint64_t)a2);
  *((void *)this + 28) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  *((void *)this + 29) = operations_research::sat::Model::GetOrCreate<operations_research::sat::RestartPolicy>((uint64_t)a2);
  *((void *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatDecisionPolicy>((uint64_t)a2);
  *((_DWORD *)this + 62) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = (char *)this + 248;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 72) = -1;
  *((_DWORD *)this + 76) = 0;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 61) = 0;
  *((unsigned char *)this + 496) = 0;
  *((_DWORD *)this + 86) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 457) = 0u;
  *((void *)this + 63) = 0x3FF0000000000000;
  *((_DWORD *)this + 128) = 0;
  *((_DWORD *)this + 13google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 68) = 0;
  *((void *)this + 66) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 69) = (char *)this + 520;
  *((void *)this + 7google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 71) = 0;
  *((_DWORD *)this + 14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = -1;
  *((void *)this + 78) = 0;
  *((void *)this + 76) = 0;
  *((void *)this + 77) = 0;
  *((void *)this + 74) = 0;
  *((_DWORD *)this + 15google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 73) = 0;
  *((void *)this + 79) = (char *)this + 600;
  *((void *)this + 81) = 0;
  *((void *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((_DWORD *)this + 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = -1;
  *((void *)this + 87) = 0;
  *((void *)this + 86) = 0;
  *((void *)this + 88) = 0;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  *((_DWORD *)this + 17google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 84) = 0;
  *((void *)this + 89) = (char *)this + 680;
  *((void *)this + 9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 91) = 0;
  *((_DWORD *)this + 18google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = -1;
  *((void *)this + 109) = 0;
  *((void *)this + 108) = 0;
  *((void *)this + 11google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *(_OWORD *)((char *)this + 844) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 111) = (char *)this + 856;
  *((void *)this + 113) = 0;
  *((void *)this + 112) = 0;
  *((_DWORD *)this + 224) = -1;
  *(_OWORD *)((char *)this + 1017) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((void *)this + 13google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((void *)this + 26);
  *((void *)this + 136) = 0;
  *((void *)this + 135) = 0;
  *((void *)this + 137) = 0;
  *((void *)this + 132) = 0;
  *((void *)this + 131) = 0;
  *((_DWORD *)this + 268) = 0;
  *((void *)this + 133) = 0;
  *((void *)this + 138) = (char *)this + 1072;
  *((void *)this + 14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 139) = 0;
  *((_DWORD *)this + 278) = -1;
  *(_OWORD *)((char *)this + 116google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *((unsigned char *)this + 1176) = 1;
  *((void *)this + 155) = 0;
  *((void *)this + 154) = 0;
  *((void *)this + 156) = 0;
  *(_OWORD *)((char *)this + 1212) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((void *)this + 157) = (char *)this + 1224;
  *((void *)this + 159) = 0;
  *((void *)this + 158) = 0;
  *((_DWORD *)this + 316) = -1;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *((unsigned char *)this + 1312) = 1;
  *((void *)this + 165) = 0;
  strcpy((char *)this + 1328, "SatSolver");
  *((unsigned char *)this + 1351) = 9;
  *((_DWORD *)this + 338) = 0;
  *((void *)this + 171) = 0;
  *((void *)this + 17google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 172) = 0;
  *((void *)this + 175) = 0;
  *((void *)this + 174) = 0;
  *((void *)this + 173) = (char *)this + 1392;
  operations_research::sat::SatSolver::InitializePropagators(this);
  return this;
}

void sub_23CD7CA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, operations_research::sat::MutableUpperBoundedLinearConstraint *a9, void **a10, operations_research::sat::BinaryClauseManager *a11, uint64_t *a12)
{
  int v36 = v12;
  operations_research::StatsGroup::~StatsGroup(v21);
  operations_research::sat::MutableUpperBoundedLinearConstraint::~MutableUpperBoundedLinearConstraint(v36);
  uint64_t v23 = (void *)v13[144];
  if (v23)
  {
    v13[145] = v23;
    operator delete(v23);
    operations_research::sat::VariableWithSameReasonIdentifier::~VariableWithSameReasonIdentifier(v20);
    int v24 = (void *)v13[126];
    if (!v24)
    {
LABEL_3:
      uint64_t v25 = (void *)v13[123];
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else
  {
    operations_research::sat::VariableWithSameReasonIdentifier::~VariableWithSameReasonIdentifier(v20);
    int v24 = (void *)v13[126];
    if (!v24) {
      goto LABEL_3;
    }
  }
  v13[127] = v24;
  operator delete(v24);
  uint64_t v25 = (void *)v13[123];
  if (!v25)
  {
LABEL_4:
    unint64_t v26 = (void *)v13[120];
    if (!v26) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  v13[124] = v25;
  operator delete(v25);
  unint64_t v26 = (void *)v13[120];
  if (!v26)
  {
LABEL_5:
    int v27 = (void *)v13[117];
    if (!v27) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  v13[121] = v26;
  operator delete(v26);
  int v27 = (void *)v13[117];
  if (!v27)
  {
LABEL_6:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v19);
    uint64_t v28 = (void *)v13[104];
    if (!v28) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  v13[118] = v27;
  operator delete(v27);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v19);
  uint64_t v28 = (void *)v13[104];
  if (!v28)
  {
LABEL_7:
    uint64_t v29 = (void *)v13[101];
    if (!v29) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  v13[105] = v28;
  operator delete(v28);
  uint64_t v29 = (void *)v13[101];
  if (!v29)
  {
LABEL_8:
    unint64_t v30 = (void *)v13[98];
    if (!v30) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  v13[102] = v29;
  operator delete(v29);
  unint64_t v30 = (void *)v13[98];
  if (!v30)
  {
LABEL_9:
    unsigned int v31 = (void *)v13[95];
    if (!v31) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_22:
  v13[99] = v30;
  operator delete(v30);
  unsigned int v31 = (void *)v13[95];
  if (!v31)
  {
LABEL_11:
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v17);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v16);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v15);
    unint64_t v32 = *v18;
    if (*v18)
    {
      v13[40] = v32;
      operator delete(v32);
    }
    unint64_t v33 = *a10;
    if (*a10)
    {
      v13[33] = v33;
      operator delete(v33);
    }
    operations_research::sat::BinaryClauseManager::~BinaryClauseManager(a11);
    std::vector<std::unique_ptr<operations_research::sat::SatPropagator>>::~vector[abi:ne180100]((void *)(v14 + 56));
    int v34 = (void *)v13[9];
    if (v34)
    {
      v13[10] = v34;
      operator delete(v34);
      uint64_t v35 = *(void **)v14;
      if (!*(void *)v14)
      {
LABEL_26:
        std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100](a12, 0);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      uint64_t v35 = *(void **)v14;
      if (!*(void *)v14) {
        goto LABEL_26;
      }
    }
    v13[7] = v35;
    operator delete(v35);
    std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100](a12, 0);
    _Unwind_Resume(a1);
  }
LABEL_10:
  v13[96] = v31;
  operator delete(v31);
  goto LABEL_11;
}

uint64_t *operations_research::sat::Model::Register<operations_research::sat::SatSolver>(uint64_t *result, uint64_t *a2)
{
  int v3 = result;
  unsigned int v5 = (uint64_t **)(result + 4);
  uint64_t v4 = (uint64_t *)result[4];
  if (v4)
  {
    int v6 = result + 4;
    uint64_t v7 = (void *)result[4];
    do
    {
      unint64_t v8 = v7[4];
      BOOL v9 = v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
      if (v8 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
        int v10 = v7;
      }
      else {
        int v10 = v7 + 1;
      }
      if (v9) {
        int v6 = v7;
      }
      uint64_t v7 = (void *)*v10;
    }
    while (*v10);
    if (v6 != (uint64_t *)v5
      && v6[4] <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d)
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v17, (google::glog_internal_namespace_ *)"./ortools/sat/model.h", 163);
      unint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Check failed: !gtl::ContainsKey(singletons_, type_id) ", 54);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v17);
    }
    while (1)
    {
      while (1)
      {
        int v12 = (uint64_t **)v4;
        unint64_t v13 = v4[4];
        if (v13 <= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
          break;
        }
        uint64_t v4 = *v12;
        unsigned int v5 = v12;
        if (!*v12) {
          goto LABEL_19;
        }
      }
      if (v13 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
        break;
      }
      uint64_t v4 = v12[1];
      if (!v4)
      {
        unsigned int v5 = v12 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    int v12 = (uint64_t **)(result + 4);
LABEL_19:
    uint64_t v14 = (uint64_t *)v12;
    int v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
    v12[5] = 0;
    *int v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *unsigned int v5 = (uint64_t *)v12;
    uint64_t v15 = *(void *)v3[3];
    uint64_t v16 = (uint64_t *)v12;
    if (v15)
    {
      v3[3] = v15;
      uint64_t v16 = *v5;
    }
    double result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v16);
    ++v3[5];
  }
  v12[5] = a2;
  return result;
}

void sub_23CD7CD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::SatSolver::~SatSolver(operations_research::sat::SatSolver *this)
{
  operations_research::StatsGroup::~StatsGroup((operations_research::sat::SatSolver *)((char *)this + 1328));
  uint64_t v2 = (void *)*((void *)this + 160);
  if (v2)
  {
    *((void *)this + 161) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 154);
  if (v3)
  {
    *((void *)this + 155) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 148);
  if (v4)
  {
    *((void *)this + 149) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 144);
  if (v5)
  {
    *((void *)this + 145) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 141);
  if (v6)
  {
    *((void *)this + 142) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 135);
  if (v7)
  {
    *((void *)this + 136) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (void *)*((void *)this + 131);
  if (v8)
  {
    *((void *)this + 132) = v8;
    operator delete(v8);
  }
  BOOL v9 = (void *)*((void *)this + 126);
  if (v9)
  {
    *((void *)this + 127) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 123);
  if (v10)
  {
    *((void *)this + 124) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 120);
  if (v11)
  {
    *((void *)this + 121) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 117);
  if (v12)
  {
    *((void *)this + 118) = v12;
    operator delete(v12);
  }
  unint64_t v13 = (void *)*((void *)this + 114);
  if (v13)
  {
    *((void *)this + 115) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)*((void *)this + 108);
  if (v14)
  {
    *((void *)this + 109) = v14;
    operator delete(v14);
  }
  uint64_t v15 = (void *)*((void *)this + 104);
  if (v15)
  {
    *((void *)this + 105) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 101);
  if (v16)
  {
    *((void *)this + 102) = v16;
    operator delete(v16);
  }
  unint64_t v17 = (void *)*((void *)this + 98);
  if (v17)
  {
    *((void *)this + 99) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 95);
  if (v18)
  {
    *((void *)this + 96) = v18;
    operator delete(v18);
  }
  int v19 = (void *)*((void *)this + 92);
  if (v19)
  {
    *((void *)this + 93) = v19;
    operator delete(v19);
  }
  unsigned int v20 = (void *)*((void *)this + 86);
  if (v20)
  {
    *((void *)this + 87) = v20;
    operator delete(v20);
  }
  uint64_t v21 = (void *)*((void *)this + 82);
  if (v21)
  {
    *((void *)this + 83) = v21;
    operator delete(v21);
  }
  unint64_t v22 = (void *)*((void *)this + 76);
  if (v22)
  {
    *((void *)this + 77) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 72);
  if (v23)
  {
    *((void *)this + 73) = v23;
    operator delete(v23);
  }
  int v24 = (void *)*((void *)this + 66);
  if (v24)
  {
    *((void *)this + 67) = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)*((void *)this + 39);
  if (v25)
  {
    *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v25;
    operator delete(v25);
  }
  unint64_t v26 = (void *)*((void *)this + 32);
  if (v26)
  {
    *((void *)this + 33) = v26;
    operator delete(v26);
  }
  int v27 = (void *)*((void *)this + 23);
  if (v27)
  {
    *((void *)this + 24) = v27;
    operator delete(v27);
  }
  if (*((void *)this + 20))
  {
    operator delete(*((void **)this + 17));
    *((void *)this + 22) = 0;
    *((void *)this + 17) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  }
  uint64_t v28 = (void *)*((void *)this + 21);
  if (v28) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v28);
  }
  uint64_t v29 = (void *)*((void *)this + 13);
  if (v29)
  {
    unint64_t v30 = (void *)*((void *)this + 14);
    unsigned int v31 = (void *)*((void *)this + 13);
    if (v30 != v29)
    {
      do
      {
        uint64_t v33 = *--v30;
        uint64_t v32 = v33;
        *unint64_t v30 = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
        }
      }
      while (v30 != v29);
      unsigned int v31 = (void *)*((void *)this + 13);
    }
    *((void *)this + 14) = v29;
    operator delete(v31);
  }
  int v34 = (void *)*((void *)this + 9);
  if (v34)
  {
    *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v34;
    operator delete(v34);
  }
  uint64_t v35 = (void *)*((void *)this + 6);
  if (v35)
  {
    *((void *)this + 7) = v35;
    operator delete(v35);
  }
  std::unique_ptr<operations_research::sat::Model>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

void operations_research::sat::SatSolver::SatSolver(operations_research::sat::SatSolver *this)
{
}

void sub_23CD7D070(_Unwind_Exception *a1)
{
  operations_research::sat::SatSolver::~SatSolver(v1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::PbConstraints>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  uint64_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d) {
      unsigned int v5 = v1;
    }
    else {
      unsigned int v5 = v1 + 1;
    }
    if (v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::PbConstraints>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void sub_23CD7D228(_Unwind_Exception *a1)
{
  MEMORY[0x23ECF2BC0](v1, 0x10F3C408FEC3A86);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatSolver::InitializePropagators(operations_research::sat::SatSolver *this)
{
  uint64_t v2 = (char **)((char *)this + 48);
  unint64_t v3 = (char *)*((void *)this + 6);
  *((void *)this + 7) = v3;
  uint64_t v4 = *((void *)this + 3);
  if (*(_OWORD *)(v4 + 216) != __PAIR128__(*(void *)(v4 + 232), 0))
  {
    unint64_t v5 = *((void *)this + 8);
    if ((unint64_t)v3 >= v5)
    {
      uint64_t v7 = v5 - (void)v3;
      uint64_t v8 = v7 >> 2;
      if ((unint64_t)(v7 >> 2) <= 1) {
        uint64_t v8 = 1;
      }
      BOOL v9 = (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v9) {
        unint64_t v10 = v8;
      }
      if (v10 >> 61) {
        goto LABEL_122;
      }
      uint64_t v11 = v10;
      int v12 = operator new(8 * v10);
      unint64_t v13 = &v12[v11];
      *int v12 = v4;
      int v6 = (char *)(v12 + 1);
      *((void *)this + 6) = v12;
      *((void *)this + 7) = v12 + 1;
      *((void *)this + 8) = v13;
      if (v3) {
        operator delete(v3);
      }
    }
    else
    {
      *(void *)unint64_t v3 = v4;
      int v6 = v3 + 8;
    }
    *((void *)this + 7) = v6;
    unint64_t v3 = v6;
  }
  uint64_t v14 = *((void *)this + 4);
  unint64_t v15 = *((void *)this + 8);
  if ((unint64_t)v3 < v15)
  {
    *(void *)unint64_t v3 = v14;
    uint64_t v16 = v3 + 8;
    goto LABEL_36;
  }
  unint64_t v17 = *v2;
  uint64_t v18 = v3 - *v2;
  uint64_t v19 = v18 >> 3;
  unint64_t v20 = (v18 >> 3) + 1;
  if (v20 >> 61) {
    goto LABEL_121;
  }
  uint64_t v21 = v15 - (void)v17;
  if (v21 >> 2 > v20) {
    unint64_t v20 = v21 >> 2;
  }
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (v22)
  {
    if (v22 >> 61) {
      goto LABEL_122;
    }
    uint64_t v23 = operator new(8 * v22);
    int v24 = &v23[8 * v19];
    uint64_t v25 = &v23[8 * v22];
    *int v24 = v14;
    uint64_t v16 = (char *)(v24 + 1);
    unint64_t v26 = (char *)(v3 - v17);
    if (v3 == v17) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v23 = 0;
    int v24 = (void *)(8 * v19);
    uint64_t v25 = 0;
    *(void *)(8 * v19) = v14;
    uint64_t v16 = (char *)(8 * v19 + 8);
    unint64_t v26 = (char *)(v3 - v17);
    if (v3 == v17) {
      goto LABEL_34;
    }
  }
  unint64_t v27 = (unint64_t)(v26 - 8);
  if (v27 >= 0x58)
  {
    if ((unint64_t)(v3 - v23 - v18) >= 0x20)
    {
      uint64_t v29 = (v27 >> 3) + 1;
      uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v28 = &v3[-v30];
      int v24 = (void *)((char *)v24 - v30);
      unsigned int v31 = &v23[8 * v19 - 16];
      uint64_t v32 = (long long *)(v3 - 16);
      uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v34 = *v32;
        *(v31 - 1) = *(v32 - 1);
        _OWORD *v31 = v34;
        v31 -= 2;
        v32 -= 2;
        v33 -= 4;
      }
      while (v33);
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v28 = v3;
    }
  }
  else
  {
    uint64_t v28 = v3;
  }
  do
  {
    uint64_t v35 = *((void *)v28 - 1);
    v28 -= 8;
    *--int v24 = v35;
  }
  while (v28 != v17);
LABEL_33:
  unint64_t v3 = *v2;
LABEL_34:
  *((void *)this + 6) = v24;
  *((void *)this + 7) = v16;
  *((void *)this + 8) = v25;
  if (v3) {
    operator delete(v3);
  }
LABEL_36:
  *((void *)this + 7) = v16;
  uint64_t v36 = *((void *)this + 5);
  if ((int)((*(void *)(v36 + 48) - *(void *)(v36 + 40)) >> 3) < 1) {
    goto LABEL_61;
  }
  unint64_t v37 = *((void *)this + 8);
  if ((unint64_t)v16 >= v37)
  {
    uint64_t v39 = *v2;
    uint64_t v40 = v16 - *v2;
    uint64_t v41 = v40 >> 3;
    unint64_t v42 = (v40 >> 3) + 1;
    if (v42 >> 61) {
      goto LABEL_121;
    }
    uint64_t v43 = v37 - (void)v39;
    if (v43 >> 2 > v42) {
      unint64_t v42 = v43 >> 2;
    }
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v44 = v42;
    }
    if (v44)
    {
      if (v44 >> 61) {
        goto LABEL_122;
      }
      unsigned int v45 = operator new(8 * v44);
      unint64_t v46 = &v45[8 * v41];
      int v47 = &v45[8 * v44];
      *unint64_t v46 = v36;
      uint64_t v38 = (uint64_t)(v46 + 1);
      uint64_t v48 = (char *)(v16 - v39);
      if (v16 != v39)
      {
LABEL_48:
        unint64_t v49 = (unint64_t)(v48 - 8);
        if (v49 >= 0x58)
        {
          if ((unint64_t)(v16 - v45 - v40) >= 0x20)
          {
            uint64_t v51 = (v49 >> 3) + 1;
            uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            int v50 = &v16[-v52];
            unint64_t v46 = (void *)((char *)v46 - v52);
            int v53 = &v45[8 * v41 - 16];
            uint64_t v54 = v16 - 16;
            uint64_t v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *int v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_58:
              uint64_t v16 = (char *)*((void *)this + 6);
              *((void *)this + 6) = v46;
              *((void *)this + 7) = v38;
              *((void *)this + 8) = v47;
              if (!v16) {
                goto LABEL_60;
              }
LABEL_59:
              operator delete(v16);
              goto LABEL_60;
            }
          }
          else
          {
            int v50 = v16;
          }
        }
        else
        {
          int v50 = v16;
        }
        do
        {
          uint64_t v57 = *((void *)v50 - 1);
          v50 -= 8;
          *--unint64_t v46 = v57;
        }
        while (v50 != v39);
        goto LABEL_58;
      }
    }
    else
    {
      unsigned int v45 = 0;
      unint64_t v46 = (void *)(8 * v41);
      int v47 = 0;
      *(void *)(8 * v41) = v36;
      uint64_t v38 = 8 * v41 + 8;
      uint64_t v48 = (char *)(v16 - v39);
      if (v16 != v39) {
        goto LABEL_48;
      }
    }
    *((void *)this + 6) = v46;
    *((void *)this + 7) = v38;
    *((void *)this + 8) = v47;
    goto LABEL_59;
  }
  *(void *)uint64_t v16 = v36;
  uint64_t v38 = (uint64_t)(v16 + 8);
LABEL_60:
  *((void *)this + 7) = v38;
  uint64_t v16 = (char *)v38;
LABEL_61:
  uint64_t v58 = *((void *)this + 9);
  if (*((void *)this + 10) != v58)
  {
    unint64_t v59 = 0;
    while (1)
    {
      unint64_t v61 = *((void *)this + 8);
      if ((unint64_t)v16 >= v61) {
        break;
      }
      *(void *)uint64_t v16 = *(void *)(v58 + 8 * v59);
      uint64_t v60 = v16 + 8;
LABEL_64:
      *((void *)this + 7) = v60;
      ++v59;
      uint64_t v58 = *((void *)this + 9);
      uint64_t v16 = v60;
      if (v59 >= (*((void *)this + 10) - v58) >> 3) {
        goto LABEL_95;
      }
    }
    int v62 = *v2;
    uint64_t v63 = v16 - *v2;
    uint64_t v64 = v63 >> 3;
    unint64_t v65 = (v63 >> 3) + 1;
    if (v65 >> 61) {
      goto LABEL_121;
    }
    uint64_t v66 = v61 - (void)v62;
    if (v66 >> 2 > v65) {
      unint64_t v65 = v66 >> 2;
    }
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v65;
    }
    if (v67)
    {
      if (v67 >> 61) {
        goto LABEL_122;
      }
      unint64_t v68 = operator new(8 * v67);
    }
    else
    {
      unint64_t v68 = 0;
    }
    int v69 = &v68[8 * v64];
    uint64_t v70 = &v68[8 * v67];
    *int v69 = *(void *)(v58 + 8 * v59);
    uint64_t v60 = (char *)(v69 + 1);
    if (v16 == v62)
    {
      *((void *)this + 6) = v69;
      *((void *)this + 7) = v60;
      *((void *)this + 8) = v70;
LABEL_83:
      operator delete(v16);
      goto LABEL_64;
    }
    unint64_t v71 = v16 - 8 - v62;
    if (v71 >= 0x168)
    {
      if (&v68[v63 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v68[v63 - 8])
      {
        unint64_t v72 = v16;
      }
      else if (&v16[-(v71 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8)
      {
        unint64_t v72 = v16;
      }
      else if ((unint64_t)(v16 - v68 - v63) >= 0x20)
      {
        uint64_t v74 = (v71 >> 3) + 1;
        uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v72 = &v16[-v75];
        int v69 = (void *)((char *)v69 - v75);
        uint64_t v76 = &v68[8 * v64 - 16];
        unint64_t v77 = v16 - 16;
        uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *uint64_t v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_80:
          uint64_t v16 = (char *)*((void *)this + 6);
          *((void *)this + 6) = v69;
          *((void *)this + 7) = v60;
          *((void *)this + 8) = v70;
          if (!v16) {
            goto LABEL_64;
          }
          goto LABEL_83;
        }
      }
      else
      {
        unint64_t v72 = v16;
      }
    }
    else
    {
      unint64_t v72 = v16;
    }
    do
    {
      uint64_t v73 = *((void *)v72 - 1);
      v72 -= 8;
      *--int v69 = v73;
    }
    while (v72 != v62);
    goto LABEL_80;
  }
  uint64_t v60 = v16;
LABEL_95:
  uint64_t v80 = *((void *)this + 12);
  if (v80)
  {
    unint64_t v81 = *((void *)this + 8);
    if ((unint64_t)v60 < v81)
    {
      *(void *)uint64_t v60 = v80;
      uint64_t v82 = (uint64_t)(v60 + 8);
LABEL_119:
      *((void *)this + 7) = v82;
      return;
    }
    uint64_t v83 = *v2;
    uint64_t v84 = v60 - *v2;
    uint64_t v85 = v84 >> 3;
    unint64_t v86 = (v84 >> 3) + 1;
    if (!(v86 >> 61))
    {
      uint64_t v87 = v81 - (void)v83;
      if (v87 >> 2 > v86) {
        unint64_t v86 = v87 >> 2;
      }
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v88 = v86;
      }
      if (!v88)
      {
        uint64_t v89 = 0;
        int v90 = (void *)(8 * v85);
        int v91 = 0;
        *(void *)(8 * v85) = v80;
        uint64_t v82 = 8 * v85 + 8;
        uint64_t v92 = (char *)(v60 - v83);
        if (v60 != v83)
        {
LABEL_107:
          unint64_t v93 = (unint64_t)(v92 - 8);
          if (v93 >= 0x58)
          {
            if ((unint64_t)(v60 - &v89[v84]) >= 0x20)
            {
              uint64_t v95 = (v93 >> 3) + 1;
              uint64_t v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v94 = &v60[-v96];
              int v90 = (void *)((char *)v90 - v96);
              uint64_t v97 = &v89[8 * v85 - 16];
              uint64_t v98 = v60 - 16;
              uint64_t v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v100 = *(_OWORD *)v98;
                *(v97 - 1) = *((_OWORD *)v98 - 1);
                _OWORD *v97 = v100;
                v97 -= 2;
                v98 -= 32;
                v99 -= 4;
              }
              while (v99);
              if (v95 == (v95 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_117:
                uint64_t v60 = (char *)*((void *)this + 6);
                *((void *)this + 6) = v90;
                *((void *)this + 7) = v82;
                *((void *)this + 8) = v91;
                if (!v60) {
                  goto LABEL_119;
                }
LABEL_118:
                operator delete(v60);
                goto LABEL_119;
              }
            }
            else
            {
              uint64_t v94 = v60;
            }
          }
          else
          {
            uint64_t v94 = v60;
          }
          do
          {
            uint64_t v101 = *((void *)v94 - 1);
            v94 -= 8;
            *--int v90 = v101;
          }
          while (v94 != v83);
          goto LABEL_117;
        }
LABEL_110:
        *((void *)this + 6) = v90;
        *((void *)this + 7) = v82;
        *((void *)this + 8) = v91;
        goto LABEL_118;
      }
      if (!(v88 >> 61))
      {
        uint64_t v89 = operator new(8 * v88);
        int v90 = &v89[8 * v85];
        int v91 = &v89[8 * v88];
        *int v90 = v80;
        uint64_t v82 = (uint64_t)(v90 + 1);
        uint64_t v92 = (char *)(v60 - v83);
        if (v60 != v83) {
          goto LABEL_107;
        }
        goto LABEL_110;
      }
LABEL_122:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_121:
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
}

void operations_research::sat::MutableUpperBoundedLinearConstraint::~MutableUpperBoundedLinearConstraint(operations_research::sat::MutableUpperBoundedLinearConstraint *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void operations_research::sat::VariableWithSameReasonIdentifier::~VariableWithSameReasonIdentifier(operations_research::sat::VariableWithSameReasonIdentifier *this)
{
  uint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

void operations_research::sat::BinaryClauseManager::~BinaryClauseManager(operations_research::sat::BinaryClauseManager *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  if (*((void *)this + 3))
  {
    operator delete(*(void **)this);
    *((void *)this + 5) = 0;
    *(void *)this = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v3);
  }
}

void *std::vector<std::unique_ptr<operations_research::sat::SatPropagator>>::~vector[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::SatSolver::SetNumVariables(operations_research::sat::SatSolver *this, int a2)
{
  int v8 = a2;
  if (*((_DWORD *)this + 4) > a2) {
    google::MakeCheckOpString<int,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>((int)&v8, this + 16, "num_variables >= num_variables_");
  }
  *((_DWORD *)this + 4) = a2;
  operations_research::sat::BinaryImplicationGraph::Resize(*((operations_research::sat::BinaryImplicationGraph **)this + 3), a2);
  operations_research::sat::LiteralWatchers::Resize(*((std::vector<int> **)this + 4), a2);
  operations_research::sat::Trail::Resize(*((operations_research::sat::Trail **)this + 26), a2);
  operations_research::sat::SatDecisionPolicy::IncreaseNumVariables(*((operations_research::sat::SatDecisionPolicy **)this + 30), a2);
  operations_research::sat::PbConstraints::Resize(*((operations_research::sat::PbConstraints **)this + 5), a2);
  uint64_t v4 = *((void *)this + 131);
  unint64_t v5 = (*((void *)this + 132) - v4) >> 2;
  if (a2 <= v5)
  {
    if (a2 < v5) {
      *((void *)this + 132) = v4 + 4 * a2;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 1048), a2 - v5);
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 1072, a2);
  uint64_t v6 = *((void *)this + 39);
  unint64_t v7 = (*((void *)this + 40) - v6) >> 3;
  if (a2 + 1 <= v7)
  {
    if (a2 + 1 < v7) {
      *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v6 + 8 * (a2 + 1);
    }
  }
  else
  {
    std::vector<operations_research::sat::SatSolver::Decision>::__append((uint64_t *)this + 39, a2 + 1 - v7);
  }
}

void sub_23CD7DBAC(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::PbConstraints::Resize(operations_research::sat::PbConstraints *this, int a2)
{
  if (*((void *)this + 5) != *((void *)this + 6))
  {
    unint64_t v4 = 2 * a2;
    uint64_t v7 = *((void *)this + 11);
    uint64_t v6 = *((void *)this + 12);
    unint64_t v5 = (char *)this + 88;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    if (v4 <= v8)
    {
      if (v4 < v8)
      {
        uint64_t v9 = v7 + 24 * (int)v4;
        if (v6 != v9)
        {
          uint64_t v10 = v6;
          do
          {
            int v12 = *(void **)(v10 - 24);
            v10 -= 24;
            uint64_t v11 = v12;
            if (v12)
            {
              *(void *)(v6 - 16) = v11;
              operator delete(v11);
            }
            uint64_t v6 = v10;
          }
          while (v10 != v9);
        }
        *((void *)this + 12) = v9;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v5, v4 - v8);
    }
    uint64_t v13 = *((void *)this + 34);
    unint64_t v14 = (*((void *)this + 35) - v13) >> 4;
    if (a2 <= v14)
    {
      if (a2 < v14) {
        *((void *)this + 35) = v13 + 16 * a2;
      }
    }
    else
    {
      std::vector<absl::lts_2020_02_25::Span<operations_research::sat::Literal const>>::__append((char **)this + 34, a2 - v14);
    }
  }
}

uint64_t operations_research::sat::SatSolver::num_branches(operations_research::sat::SatSolver *this)
{
  return *((void *)this + 46);
}

uint64_t operations_research::sat::SatSolver::num_failures(operations_research::sat::SatSolver *this)
{
  return *((void *)this + 47);
}

uint64_t operations_research::sat::SatSolver::num_propagations(operations_research::sat::SatSolver *this)
{
  return **((void **)this + 26) + *(int *)(*((void *)this + 26) + 12) - *((void *)this + 46);
}

double operations_research::sat::SatSolver::deterministic_time(operations_research::sat::SatSolver *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 5);
  return ((double)*(uint64_t *)(*((void *)this + 3) + 280)
        + (double)(**((void **)this + 26) + *(int *)(*((void *)this + 26) + 12)) * 8.0
        + (double)*(uint64_t *)(*((void *)this + 4) + 192) * 4.0
        + (double)*(uint64_t *)(*((void *)this + 4) + 200)
        + (double)v1[51] * 20.0
        + (double)v1[53] * 2.0
        + (double)v1[52])
       * 0.00000001;
}

uint64_t operations_research::sat::SatSolver::parameters(operations_research::sat::SatSolver *this)
{
  return *((void *)this + 28);
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep operations_research::sat::SatSolver::SetParameters(operations_research::sat::SatParameters **this, const operations_research::sat::SatParameters *a2)
{
  operations_research::sat::SatParameters::CopyFrom(this[28], a2);
  operations_research::sat::RestartPolicy::Reset(this[29]);
  unint64_t v5 = this[27];
  double v6 = *((double *)a2 + 35);
  uint64_t v7 = *((void *)a2 + 46);
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 13) = v7;
  *((void *)v5 + 16) = 0x7FF0000000000000;
  if (FLAGS_time_limit_use_usertime)
  {
    *((unsigned char *)v5 + 72) = 1;
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
    *((void *)v5 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = CurrentTimeNanos;
    *((double *)v5 + 12) = v6;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result = absl::lts_2020_02_25::GetCurrentTimeNanos(CurrentTimeNanos);
  *(void *)unint64_t v5 = result;
  *((void *)v5 + 1) = result;
  uint64_t v9 = result + (uint64_t)(v6 * 1000000000.0);
  if ((double)(result ^ 0x7FFFFFFFFFFFFFFFLL) * 0.000000001 <= v6) {
    uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *((void *)v5 + 2) = v9;
  return result;
}

uint64_t operations_research::sat::SatSolver::AddClauseDuringSearch(uint64_t a1, int *a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + 496)) {
    return 0;
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 208) + 12);
  if (a3 == 2)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(v7 + 216);
    if ((operations_research::sat::BinaryImplicationGraph::AddBinaryClauseDuringSearch(v7, *a2, a2[1]) & 1) == 0)
    {
      v9[0] = *(_DWORD *)(a1 + 304);
      LODWORD(v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
      if (v9[0]) {
        google::MakeCheckOpString<int,int>((int)v9, (int)&v10, "CurrentDecisionLevel() == 0");
      }
      goto LABEL_19;
    }
    if (!v8) {
      operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
    }
LABEL_16:
    if (*(_DWORD *)(*(void *)(a1 + 208) + 12) == v5) {
      return 1;
    }
    if (*(unsigned char *)(a1 + 496)) {
      return 0;
    }
    do
      uint64_t result = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution((operations_research::sat::SatSolver *)a1);
    while ((result & 1) == 0 && !*(unsigned char *)(a1 + 496));
    return result;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
LABEL_19:
      uint64_t result = 0;
      *(unsigned char *)(a1 + 496) = 1;
      return result;
    }
    if ((operations_research::sat::LiteralWatchers::AddClause(*(void **)(a1 + 32), a2, a3) & 1) == 0)
    {
      v9[0] = *(_DWORD *)(a1 + 304);
      LODWORD(v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
      if (v9[0]) {
        google::MakeCheckOpString<int,int>((int)v9, (int)&v10, "CurrentDecisionLevel() == 0");
      }
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  int v6 = *a2;

  return operations_research::sat::SatSolver::AddUnitClause(a1, v6);
}

void sub_23CD7DFEC(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7DFF4(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::AddUnitClause(uint64_t a1, int a2)
{
  v18[0] = *(_DWORD *)(a1 + 304);
  LODWORD(v19) = 0;
  if (v18[0]) {
    google::MakeCheckOpString<int,int>((int)v18, (int)&v19, "CurrentDecisionLevel() == 0");
  }
  if (*(unsigned char *)(a1 + 496)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 208);
  unint64_t v6 = (unint64_t)a2 >> 6;
  unint64_t v7 = *(void *)(*(void *)(v5 + 24) + 8 * v6);
  char v8 = a2 & 0x3F;
  if ((v7 >> (a2 & 0x3F ^ 1u)))
  {
LABEL_6:
    uint64_t result = 0;
    *(unsigned char *)(a1 + 496) = 1;
    return result;
  }
  uint64_t result = 1;
  uint64_t v9 = 1 << v8;
  if ((v7 & (1 << v8)) == 0)
  {
    uint64_t v10 = *(void *)(a1 + 1320);
    if (v10)
    {
      v18[0] = a2;
      operations_research::sat::DratProofHandler::AddClause(v10, v18, 1);
      uint64_t v5 = *(void *)(a1 + 208);
    }
    *(_DWORD *)(*(void *)(v5 + 72) + 4 * *(int *)(v5 + 12)) = a2;
    *(_DWORD *)(v5 + 8) = (*(_DWORD *)(v5 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x10000001;
    *(void *)(*(void *)(v5 + 120) + 8 * (a2 >> 1)) = *(void *)(v5 + 8);
    *(void *)(*(void *)(v5 + 24) + 8 * v6) |= v9;
    ++*(_DWORD *)(v5 + 12);
    if (*(void *)(a1 + 48) == *(void *)(a1 + 56)) {
      return 1;
    }
    int v11 = *(_DWORD *)(*(void *)(a1 + 208) + 12);
LABEL_12:
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 56);
    if (v12 == v13) {
      return 1;
    }
    uint64_t v14 = v12 + 8;
    while ((*(unsigned int (**)(void))(**(void **)(v14 - 8) + 16))(*(void *)(v14 - 8)))
    {
      uint64_t v15 = *(void *)(a1 + 208);
      int v16 = *(_DWORD *)(v15 + 12);
      BOOL v17 = v16 > v11 || v14 == v13;
      v14 += 8;
      if (v17)
      {
        uint64_t result = 1;
        BOOL v17 = v16 == v11;
        int v11 = *(_DWORD *)(v15 + 12);
        if (v17) {
          return result;
        }
        goto LABEL_12;
      }
    }
    goto LABEL_6;
  }
  return result;
}

void sub_23CD7E1EC(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::FinishPropagation(operations_research::sat::SatSolver *this)
{
  if (*((unsigned char *)this + 496)) {
    return 0;
  }
  do
    uint64_t result = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this);
  while ((result & 1) == 0 && !*((unsigned char *)this + 496));
  return result;
}

uint64_t operations_research::sat::SatSolver::Propagate(operations_research::sat::SatSolver *this)
{
  if (*((void *)this + 6) == *((void *)this + 7)) {
    return 1;
  }
  int v2 = *(_DWORD *)(*((void *)this + 26) + 12);
LABEL_3:
  uint64_t v3 = *((void *)this + 6);
  uint64_t v4 = *((void *)this + 7);
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v5 - 8) + 16))(*(void *)(v5 - 8));
    if (!result) {
      return result;
    }
    uint64_t v7 = *((void *)this + 26);
    int v8 = *(_DWORD *)(v7 + 12);
    BOOL v9 = v8 > v2 || v5 == v4;
    v5 += 8;
    if (v9)
    {
      BOOL v9 = v8 == v2;
      int v2 = *(_DWORD *)(v7 + 12);
      if (v9) {
        return 1;
      }
      goto LABEL_3;
    }
  }
}

uint64_t operations_research::sat::SatSolver::AddBinaryClause(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = *(char **)(a1 + 1152);
  *(void *)(a1 + 116google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v6;
  uint64_t v7 = *(char **)(a1 + 1168);
  if (v6 >= v7)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= 1) {
      uint64_t v10 = 1;
    }
    if (v9 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 > 0x1555555555555555) {
      goto LABEL_32;
    }
    uint64_t v12 = 12 * v11;
    uint64_t v13 = (char *)operator new(12 * v11);
    *(_DWORD *)uint64_t v13 = a2;
    uint64_t v7 = &v13[v12];
    *(void *)(v13 + 4) = 1;
    int v8 = v13 + 12;
    *(void *)(a1 + 1152) = v13;
    *(void *)(a1 + 116google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v13 + 12;
    *(void *)(a1 + 1168) = &v13[v12];
    if (v6)
    {
      operator delete(v6);
      uint64_t v7 = *(char **)(a1 + 1168);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v6 = a2;
    *(void *)(v6 + 4) = 1;
    int v8 = v6 + 12;
  }
  uint64_t v14 = (void **)(a1 + 1152);
  *(void *)(a1 + 116google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v8;
  if (v8 < v7)
  {
    *(_DWORD *)int v8 = a3;
    *(void *)(v8 + 4) = 1;
    uint64_t v15 = v8 + 12;
    goto LABEL_29;
  }
  int v16 = (char *)*v14;
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*v14) >> 2);
  unint64_t v18 = v17 + 1;
  if (v17 + 1 > 0x1555555555555555) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v16) >> 2);
  if (2 * v19 > v18) {
    unint64_t v18 = 2 * v19;
  }
  if (v19 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v20 = 0x1555555555555555;
  }
  else {
    unint64_t v20 = v18;
  }
  if (!v20)
  {
    uint64_t v21 = 0;
    goto LABEL_23;
  }
  if (v20 > 0x1555555555555555) {
LABEL_32:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v21 = (char *)operator new(12 * v20);
LABEL_23:
  unint64_t v22 = &v21[12 * v17];
  uint64_t v23 = &v21[12 * v20];
  *(_DWORD *)unint64_t v22 = a3;
  *(void *)(v22 + 4) = 1;
  uint64_t v15 = v22 + 12;
  if (v8 == v16)
  {
    *(void *)(a1 + 1152) = v22;
    *(void *)(a1 + 116google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v15;
    *(void *)(a1 + 1168) = v23;
  }
  else
  {
    do
    {
      uint64_t v24 = *(void *)(v8 - 12);
      v8 -= 12;
      int v25 = *((_DWORD *)v8 + 2);
      *(void *)(v22 - 12) = v24;
      v22 -= 12;
      *((_DWORD *)v22 + 2) = v25;
    }
    while (v8 != v16);
    int v8 = *(char **)(a1 + 1152);
    *(void *)(a1 + 1152) = v22;
    *(void *)(a1 + 116google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v15;
    *(void *)(a1 + 1168) = v23;
    if (!v8) {
      goto LABEL_29;
    }
  }
  operator delete(v8);
LABEL_29:
  *(void *)(a1 + 116google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v15;

  return operations_research::sat::SatSolver::AddLinearConstraint(a1, 1, 1, 0, 0, (void **)(a1 + 1152));
}

uint64_t operations_research::sat::SatSolver::AddLinearConstraint(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, void **a6)
{
  v54[0] = *(_DWORD *)(a1 + 304);
  LODWORD(v55) = 0;
  if (v54[0]) {
    google::MakeCheckOpString<int,int>((int)v54, (int)&v55, "CurrentDecisionLevel() == 0");
  }
  if (*(unsigned char *)(a1 + 496)) {
    return 0;
  }
  uint64_t v13 = (int *)*a6;
  uint64_t v14 = (int *)a6[1];
  BOOL v15 = __OFSUB__(*a6, v14);
  if (*a6 == v14)
  {
    uint64_t v17 = 0;
    int v16 = 0;
    unint64_t v27 = *a6;
  }
  else
  {
    int v16 = 0;
    uint64_t v17 = 0;
    do
    {
      unint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 208) + 24)
                      + (((unint64_t)*v13 >> 3) & 0x1FFFFFFFFFFFFFF8));
      int v21 = *v13 & 0x3F;
      if (((v20 >> (v21 ^ 1u)) & 1) == 0)
      {
        if ((v20 >> v21))
        {
          uint64_t v22 = *(void *)(v13 + 1);
          uint64_t v23 = -v22;
          uint64_t v24 = v17 - v22;
          uint64_t v25 = v24 ^ v17;
          uint64_t v17 = v24;
          if (((v24 ^ v23) & v25) < 0 != v15)
          {
            google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v54, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 313);
            unint64_t v26 = (void *)google::LogMessage::stream((google::LogMessage *)v54);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed: SafeAddInto(-term.coefficient, &fixed_variable_shift) ", 68);
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v18 = (uint64_t)*a6 + 12 * v16;
          uint64_t v19 = *(void *)v13;
          *(_DWORD *)(v18 + 8) = v13[2];
          *(void *)uint64_t v18 = v19;
          ++v16;
        }
      }
      v13 += 3;
      BOOL v15 = __OFSUB__(v13, v14);
    }
    while (v13 != v14);
    uint64_t v13 = (int *)*a6;
    unint64_t v27 = a6[1];
  }
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)v13) >> 2);
  if (v16 <= v28)
  {
    if (v16 < v28) {
      a6[1] = &v13[3 * v16];
    }
  }
  else
  {
    std::vector<operations_research::sat::LiteralWithCoeff>::__append(a6, v16 - v28);
  }
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  if ((operations_research::sat::ComputeBooleanLinearExpressionCanonicalForm((uint64_t **)a6, &v55, &v53) & 1) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v54, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 327);
    uint64_t v51 = (void *)google::LogMessage::stream((google::LogMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Check failed: ComputeBooleanLinearExpressionCanonicalForm(cst, &bound_shift, &max_value) ", 89);
    goto LABEL_54;
  }
  uint64_t v30 = v55 + v17;
  if ((((v55 + v17) ^ v17) & ((v55 + v17) ^ v55)) < 0 != v29)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v54, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 328);
    uint64_t v52 = (void *)google::LogMessage::stream((google::LogMessage *)v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Check failed: SafeAddInto(fixed_variable_shift, &bound_shift) ", 62);
LABEL_54:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v54);
  }
  v55 += v17;
  if (a4)
  {
    uint64_t v31 = operations_research::sat::ComputeCanonicalRhs(a5, v30, v53);
    if (!operations_research::sat::SatSolver::AddLinearConstraintInternal(a1, (uint64_t *)a6, v31, v53)) {
      goto LABEL_50;
    }
  }
  if (a2)
  {
    uint64_t v32 = (char *)*a6;
    int64_t v33 = (unsigned char *)a6[1] - (unsigned char *)*a6;
    if (!v33) {
      goto LABEL_34;
    }
    unint64_t v34 = v33 / 12;
    if (v34 <= 1) {
      unint64_t v34 = 1;
    }
    if (v34 >= 2)
    {
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v36 = v34 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v37 = *a6;
      do
      {
        int v38 = v37[3] ^ 1;
        *v37 ^= 1u;
        v37[3] = v38;
        v37 += 6;
        v36 -= 2;
      }
      while (v36);
      if (v34 == v35)
      {
LABEL_34:
        uint64_t v41 = operations_research::sat::ComputeNegatedCanonicalRhs(a3, v55, v53);
        if ((operations_research::sat::SatSolver::AddLinearConstraintInternal(a1, (uint64_t *)a6, v41, v53) & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v35 = 0;
    }
    uint64_t v39 = &v32[12 * v35];
    unint64_t v40 = v34 - v35;
    do
    {
      *(_DWORD *)v39 ^= 1u;
      v39 += 12;
      --v40;
    }
    while (v40);
    goto LABEL_34;
  }
LABEL_35:
  uint64_t v42 = *(void *)(a1 + 48);
  uint64_t v43 = *(void *)(a1 + 56);
  if (v42 == v43) {
    return 1;
  }
  int v44 = *(_DWORD *)(*(void *)(a1 + 208) + 12);
  while (*(_DWORD *)(*(void *)v42 + 36) == v44)
  {
    v42 += 8;
    if (v42 == v43) {
      return 1;
    }
  }
LABEL_48:
  uint64_t v49 = *(void *)(a1 + 48);
  uint64_t v50 = *(void *)(a1 + 56);
  if (v49 == v50) {
    return 1;
  }
  uint64_t v45 = v49 + 8;
  while ((*(unsigned int (**)(void))(**(void **)(v45 - 8) + 16))(*(void *)(v45 - 8)))
  {
    uint64_t v46 = *(void *)(a1 + 208);
    int v47 = *(_DWORD *)(v46 + 12);
    BOOL v48 = v47 > v44 || v45 == v50;
    v45 += 8;
    if (v48)
    {
      uint64_t result = 1;
      BOOL v48 = v47 == v44;
      int v44 = *(_DWORD *)(v46 + 12);
      if (v48) {
        return result;
      }
      goto LABEL_48;
    }
  }
LABEL_50:
  uint64_t result = 0;
  *(unsigned char *)(a1 + 496) = 1;
  return result;
}

void sub_23CD7E8FC(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7E904(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7E90C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7E914(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::AddProblemClause(void *a1, int *a2, uint64_t a3)
{
  uint64_t v4 = (void **)(a1 + 144);
  uint64_t v5 = (char *)a1[144];
  a1[145] = v5;
  if (a3)
  {
    unint64_t v6 = a2;
    uint64_t v7 = &a2[a3];
    do
    {
      while (1)
      {
        int v8 = *v6;
        unint64_t v9 = a1[146];
        if ((unint64_t)v5 >= v9) {
          break;
        }
        *(_DWORD *)uint64_t v5 = v8;
        *(void *)(v5 + 4) = 1;
        a1[145] = v5 + 12;
        ++v6;
        v5 += 12;
        if (v6 == v7) {
          goto LABEL_21;
        }
      }
      uint64_t v10 = (char *)*v4;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*v4) >> 2);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0x1555555555555555) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v10) >> 2);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v14 = 0x1555555555555555;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        BOOL v15 = (char *)operator new(12 * v14);
      }
      else
      {
        BOOL v15 = 0;
      }
      int v16 = &v15[12 * v11];
      *(_DWORD *)int v16 = v8;
      *(void *)(v16 + 4) = 1;
      uint64_t v17 = v16;
      if (v5 != v10)
      {
        do
        {
          uint64_t v18 = *(void *)(v5 - 12);
          v5 -= 12;
          int v19 = *((_DWORD *)v5 + 2);
          *(void *)(v17 - 12) = v18;
          v17 -= 12;
          *((_DWORD *)v17 + 2) = v19;
        }
        while (v5 != v10);
        uint64_t v5 = (char *)*v4;
      }
      unint64_t v20 = &v15[12 * v14];
      a1[144] = v17;
      int v21 = v16 + 12;
      a1[145] = v16 + 12;
      a1[146] = v20;
      if (v5) {
        operator delete(v5);
      }
      a1[145] = v21;
      ++v6;
      uint64_t v5 = v21;
    }
    while (v6 != v7);
  }
LABEL_21:

  return operations_research::sat::SatSolver::AddLinearConstraint((uint64_t)a1, 1, 1, 0, 0, v4);
}

uint64_t operations_research::sat::SatSolver::AddProblemClauseInternal(uint64_t a1, int *a2, unint64_t a3)
{
  LODWORD(v15[0]) = *(_DWORD *)(a1 + 304);
  LODWORD(v16) = 0;
  if (LODWORD(v15[0])) {
    google::MakeCheckOpString<int,int>((int)v15, (int)&v16, "CurrentDecisionLevel() == 0");
  }
  v15[0] = a3;
  int v14 = 0;
  if (!a3) {
    google::MakeCheckOpString<unsigned long,int>((int)v15, (int)&v14, "literals.size() > 0");
  }
  if (a3 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 208);
    int v5 = *a2;
    unint64_t v6 = (unint64_t)*a2 >> 6;
    unint64_t v7 = *(void *)(*(void *)(v4 + 24) + 8 * v6);
    if ((v7 >> (*a2 & 0x3F ^ 1u)))
    {
      return 0;
    }
    else
    {
      uint64_t result = 1;
      uint64_t v13 = 1 << (*a2 & 0x3F);
      if ((v13 & v7) == 0)
      {
        *(_DWORD *)(*(void *)(v4 + 72) + 4 * *(int *)(v4 + 12)) = v5;
        *(_DWORD *)(v4 + 8) = (*(_DWORD *)(v4 + 8) & 0xFFFFFFE | v5 & 1) ^ 0x10000001;
        *(void *)(*(void *)(v4 + 120) + 8 * (v5 >> 1)) = *(void *)(v4 + 8);
        *(void *)(*(void *)(v4 + 24) + 8 * v6) |= v13;
        ++*(_DWORD *)(v4 + 12);
        return 1;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(*(void *)(a1 + 224) + 306)) {
      BOOL v9 = a3 == 2;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      uint64_t v12 = *a2;
      uint64_t v11 = a2[1];
      if (!*(unsigned char *)(a1 + 128)
        || operations_research::sat::BinaryClauseManager::Add((uint64_t *)(a1 + 136), v12 | (v11 << 32)))
      {
        operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*(void *)(a1 + 24), v12, v11);
        operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
      }
      return 1;
    }
    else
    {
      char v10 = operations_research::sat::LiteralWatchers::AddClause(*(void **)(a1 + 32), a2, a3, *(void *)(a1 + 208));
      uint64_t result = 1;
      if ((v10 & 1) == 0)
      {
        *(unsigned char *)(a1 + 496) = 1;
        return 0;
      }
    }
  }
  return result;
}

void sub_23CD7ED0C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7ED14(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::AddLinearConstraintInternal(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 < 0) {
    goto LABEL_85;
  }
  if (a3 >= a4) {
    return 1;
  }
  if (a3) {
    operations_research::sat::SatDecisionPolicy::UpdateWeightedSign(*(void *)(a1 + 240), a2, a3);
  }
  int v8 = (int *)*a2;
  BOOL v9 = (int *)a2[1];
  uint64_t v10 = *(void *)(*a2 + 4);
  if (a4 - v10 <= a3)
  {
    uint64_t v16 = *(int **)(a1 + 832);
    *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v16;
    if (v8 == v9)
    {
      unint64_t v37 = v16;
      goto LABEL_49;
    }
    uint64_t v60 = (void **)(a1 + 832);
    while (1)
    {
      while (1)
      {
        int v17 = *v8 ^ 1;
        unint64_t v18 = *(void *)(a1 + 848);
        if ((unint64_t)v16 >= v18) {
          break;
        }
        *v16++ = v17;
        *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v16;
        v8 += 3;
        if (v8 == v9) {
          goto LABEL_47;
        }
      }
      int v19 = (int *)*v60;
      uint64_t v20 = (char *)v16 - (unsigned char *)*v60;
      uint64_t v21 = v20 >> 2;
      unint64_t v22 = (v20 >> 2) + 1;
      if (v22 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v18 - (void)v19;
      if (v23 >> 1 > v22) {
        unint64_t v22 = v23 >> 1;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        if (v24 >> 62) {
LABEL_87:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v25 = operator new(4 * v24);
        unint64_t v26 = (int *)&v25[4 * v21];
        *unint64_t v26 = v17;
        uint64_t v27 = (uint64_t)(v26 + 1);
        if (v16 == v19) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (int *)(4 * v21);
        *(_DWORD *)(4 * v21) = v17;
        uint64_t v27 = 4 * v21 + 4;
        if (v16 == v19) {
          goto LABEL_44;
        }
      }
      unint64_t v28 = (char *)(v16 - 1) - (char *)v19;
      if (v28 >= 0xBC)
      {
        if (&v25[v20 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[v20 - 4])
        {
          char v29 = v16;
        }
        else if ((int *)((char *)v16 - (v28 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v16 - 1)
        {
          char v29 = v16;
        }
        else if ((unint64_t)((char *)v16 - &v25[v20]) >= 0x20)
        {
          uint64_t v30 = (v28 >> 2) + 1;
          uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          char v29 = &v16[v31 / 0xFFFFFFFFFFFFFFFCLL];
          unint64_t v26 = (int *)((char *)v26 - v31);
          uint64_t v32 = &v25[4 * v21 - 16];
          int64_t v33 = v16 - 4;
          uint64_t v34 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *uint64_t v32 = v35;
            v32 -= 2;
            v33 -= 8;
            v34 -= 8;
          }
          while (v34);
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_44;
          }
        }
        else
        {
          char v29 = v16;
        }
      }
      else
      {
        char v29 = v16;
      }
      do
      {
        int v36 = *--v29;
        *--unint64_t v26 = v36;
      }
      while (v29 != v19);
LABEL_44:
      *(void *)(a1 + 832) = v26;
      *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v27;
      *(void *)(a1 + 848) = &v25[4 * v24];
      if (v19) {
        operator delete(v19);
      }
      uint64_t v16 = (int *)v27;
      *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v27;
      v8 += 3;
      if (v8 == v9)
      {
LABEL_47:
        unint64_t v37 = (int *)*v60;
LABEL_49:
        return operations_research::sat::SatSolver::AddProblemClauseInternal(a1, v37, v16 - v37);
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 224);
  if (!*(unsigned char *)(v11 + 306)
    || ((uint64_t v12 = 2 * v10, !*(unsigned char *)(v11 + 132)) ? (v13 = *((void *)v9 - 1) <= a3) : (v13 = 0),
        v13 ? (BOOL v14 = v12 <= a3) : (BOOL v14 = 1),
        v14))
  {
    *(unsigned char *)(a1 + 1312) = 0;
    operations_research::sat::PbConstraints::AddConstraint(*(void *)(a1 + 40), (uint64_t)a2, a3, *(void *)(a1 + 208));
  }
  int v38 = *(char **)(a1 + 832);
  *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v38;
  if (v8 == v9)
  {
    if (!operations_research::sat::BinaryImplicationGraph::AddAtMostOne(*(void *)(a1 + 24), v38, 0)) {
      goto LABEL_85;
    }
LABEL_83:
    operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
    return 1;
  }
  uint64_t v39 = (char **)(a1 + 832);
  do
  {
    while (1)
    {
      unint64_t v41 = *(void *)(a1 + 848);
      if ((unint64_t)v38 >= v41) {
        break;
      }
      int v40 = *v8;
      v8 += 3;
      *(_DWORD *)int v38 = v40;
      v38 += 4;
      *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v38;
      if (v8 == v9) {
        goto LABEL_82;
      }
    }
    uint64_t v42 = *v39;
    uint64_t v43 = v38 - *v39;
    uint64_t v44 = v43 >> 2;
    unint64_t v45 = (v43 >> 2) + 1;
    if (v45 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v46 = v41 - (void)v42;
    if (v46 >> 1 > v45) {
      unint64_t v45 = v46 >> 1;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v47 = v45;
    }
    if (v47)
    {
      if (v47 >> 62) {
        goto LABEL_87;
      }
      BOOL v48 = operator new(4 * v47);
      uint64_t v49 = (int *)&v48[4 * v44];
      *uint64_t v49 = *v8;
      uint64_t v50 = (uint64_t)(v49 + 1);
      if (v38 == v42) {
        goto LABEL_79;
      }
    }
    else
    {
      BOOL v48 = 0;
      uint64_t v49 = (int *)(4 * v44);
      *(_DWORD *)(4 * v44) = *v8;
      uint64_t v50 = 4 * v44 + 4;
      if (v38 == v42) {
        goto LABEL_79;
      }
    }
    unint64_t v51 = v38 - 4 - v42;
    if (v51 >= 0xBC)
    {
      if (&v48[v43 - 4 - (v51 & 0xFFFFFFFFFFFFFFFCLL)] > &v48[v43 - 4])
      {
        uint64_t v52 = v38;
      }
      else if (&v38[-(v51 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v38 - 4)
      {
        uint64_t v52 = v38;
      }
      else if ((unint64_t)(v38 - v48 - v43) >= 0x20)
      {
        uint64_t v53 = (v51 >> 2) + 1;
        uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v52 = &v38[-v54];
        uint64_t v49 = (int *)((char *)v49 - v54);
        uint64_t v55 = &v48[4 * v44 - 16];
        long long v56 = v38 - 16;
        uint64_t v57 = v53 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          *uint64_t v55 = v58;
          v55 -= 2;
          v56 -= 32;
          v57 -= 8;
        }
        while (v57);
        if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v52 = v38;
      }
    }
    else
    {
      uint64_t v52 = v38;
    }
    do
    {
      int v59 = *((_DWORD *)v52 - 1);
      v52 -= 4;
      *--uint64_t v49 = v59;
    }
    while (v52 != v42);
LABEL_79:
    *(void *)(a1 + 832) = v49;
    *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v50;
    *(void *)(a1 + 848) = &v48[4 * v47];
    if (v42) {
      operator delete(v42);
    }
    int v38 = (char *)v50;
    *(void *)(a1 + 84google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v50;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_82:
  if (operations_research::sat::BinaryImplicationGraph::AddAtMostOne(*(void *)(a1 + 24), *v39, (v38 - *v39) >> 2)) {
    goto LABEL_83;
  }
LABEL_85:
  uint64_t result = 0;
  *(unsigned char *)(a1 + 496) = 1;
  return result;
}

uint64_t operations_research::sat::SatSolver::AddLearnedClauseAndEnqueueUnitPropagation(uint64_t a1, uint64_t a2, int a3, __n128 a4)
{
  unint64_t v7 = *(int **)a2;
  uint64_t v8 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2;
  if (v8 == 2)
  {
    if (*(unsigned char *)(*(void *)(a1 + 224) + 306))
    {
      if (*(unsigned char *)(a1 + 128))
      {
        if (!operations_research::sat::BinaryClauseManager::Add((uint64_t *)(a1 + 136), *(void *)v7))
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 373);
          uint64_t v20 = (void *)google::LogMessage::stream((google::LogMessage *)v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Check failed: binary_clauses_.Add(BinaryClause(literals[0], literals[1])) ", 74);
          goto LABEL_22;
        }
        unint64_t v7 = *(int **)a2;
      }
      if (operations_research::sat::BinaryImplicationGraph::AddBinaryClauseDuringSearch(*(void *)(a1 + 24), *v7, v7[1]))
      {
        operations_research::sat::SatSolver::InitializePropagators((operations_research::sat::SatSolver *)a1);
        return 2;
      }
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 376);
      int v19 = (void *)google::LogMessage::stream((google::LogMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Check failed: binary_implication_graph_->AddBinaryClauseDuringSearch(literals[0], literals[1]) ", 95);
LABEL_22:
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v21);
    }
  }
  else if (v8 == 1)
  {
    LODWORD(v21[0]) = *(_DWORD *)(a1 + 304);
    LODWORD(v22) = 0;
    if (LODWORD(v21[0])) {
      google::MakeCheckOpString<int,int>((int)v21, (int)&v22, "CurrentDecisionLevel() == 0");
    }
    uint64_t v9 = *(void *)(a1 + 208);
    int v10 = *v7;
    *(_DWORD *)(*(void *)(v9 + 72) + 4 * *(int *)(v9 + 12)) = v10;
    *(_DWORD *)(v9 + 8) = (*(_DWORD *)(v9 + 8) & 0xFFFFFFE | v10 & 1) ^ 0x10000001;
    *(void *)(*(void *)(v9 + 120) + 8 * (v10 >> 1)) = *(void *)(v9 + 8);
    uint64_t v11 = 1;
    *(void *)(*(void *)(v9 + 24) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    ++*(_DWORD *)(v9 + 12);
    return v11;
  }
  operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded((operations_research::sat::SatSolver *)a1, a4);
  uint64_t v13 = operations_research::sat::SatSolver::ComputeLbd<std::vector<operations_research::sat::Literal>>(a1, (int **)a2);
  uint64_t v11 = v13;
  if (!a3 || (int)v13 <= *(_DWORD *)(*(void *)(a1 + 224) + 340))
  {
    if (operations_research::sat::LiteralWatchers::AddClause(*(void **)(a1 + 32), *(const void **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2, *(void *)(a1 + 208)))return v11; {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v21, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 398);
    }
    unint64_t v18 = (void *)google::LogMessage::stream((google::LogMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Check failed: clauses_propagator_->AddClause(literals, trail_) ", 63);
    goto LABEL_22;
  }
  --*(_DWORD *)(a1 + 512);
  v21[0] = (int *)operations_research::sat::LiteralWatchers::AddRemovableClause(*(void **)(a1 + 32), a2, *(void *)(a1 + 208));
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::find_or_prepare_insert<operations_research::sat::SatClause *>((uint64_t *)(v14 + 336), (uint64_t *)v21);
  if (v16)
  {
    uint64_t v17 = *(void *)(v14 + 344) + 24 * v15;
    *(int **)uint64_t v17 = v21[0];
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0;
  }
  *(_DWORD *)(*(void *)(v14 + 344) + 24 * v15 + 16) = v11;
  operations_research::sat::SatSolver::BumpClauseActivity(a1, v21[0]);
  return v11;
}

void sub_23CD7F4E8(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7F4F0(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7F4F8(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD7F500(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::BinaryClauseManager::Add(uint64_t *a1, uint64_t a2)
{
  int v4 = ~((int)a2 >> 1);
  if ((a2 & 1) == 0) {
    int v4 = ((int)a2 >> 1) + 1;
  }
  if ((a2 & 0x100000000) != 0) {
    unsigned int v5 = ~(a2 >> 33);
  }
  else {
    unsigned int v5 = (a2 >> 33) + 1;
  }
  unint64_t v45 = __PAIR64__(v5, v4);
  if (v4 <= (int)v5)
  {
    unsigned int v6 = v5;
    unsigned int v5 = v4;
  }
  else
  {
    unint64_t v45 = __PAIR64__(v4, v5);
    unsigned int v6 = v4;
  }
  uint64_t v7 = 0;
  unint64_t v8 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v5)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + v5)))
     + v6;
  unint64_t v9 = ((v8 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v8);
  unint64_t v10 = (v9 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v11 = a1[3];
  uint64_t v12 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v13 = v10 & v11;
    uint64_t v14 = *(void *)(*a1 + v13);
    unint64_t v15 = ((v14 ^ v12) - 0x101010101010101) & ~(v14 ^ v12) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_16:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_19;
    }
    v7 += 8;
    unint64_t v10 = v7 + v13;
  }
  while (1)
  {
    unint64_t v16 = (v13 + (__clz(__rbit64(v15)) >> 3)) & v11;
    uint64_t v17 = (int *)(a1[1] + 8 * v16);
    int v19 = *v17;
    int v18 = v17[1];
    if (v19 == v5 && v18 == v6) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_16;
    }
  }
  if (v16 != v11) {
    return 0;
  }
LABEL_19:
  unint64_t v21 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<int,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<int,int>>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::find_or_prepare_insert<std::pair<int,int>>(a1, (unsigned int *)&v45);
  if (v22) {
    *(void *)(a1[1] + 8 * v21) = v45;
  }
  unint64_t v24 = (uint64_t *)a1[7];
  unint64_t v23 = a1[8];
  if ((unint64_t)v24 >= v23)
  {
    unint64_t v26 = (char *)a1[6];
    uint64_t v27 = ((char *)v24 - v26) >> 3;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v23 - (void)v26;
    if (v29 >> 2 > v28) {
      unint64_t v28 = v29 >> 2;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      if (v30 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v31 = (char *)operator new(8 * v30);
      uint64_t v32 = (uint64_t *)&v31[8 * v27];
      int64_t v33 = &v31[8 * v30];
      *uint64_t v32 = a2;
      uint64_t v25 = (uint64_t)(v32 + 1);
      uint64_t v34 = (char *)((char *)v24 - v26);
      if (v24 == (uint64_t *)v26) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (uint64_t *)(8 * v27);
      int64_t v33 = 0;
      *(void *)(8 * v27) = a2;
      uint64_t v25 = 8 * v27 + 8;
      uint64_t v34 = (char *)((char *)v24 - v26);
      if (v24 == (uint64_t *)v26)
      {
LABEL_42:
        a1[6] = (uint64_t)v32;
        a1[7] = v25;
        a1[8] = (uint64_t)v33;
        if (v24) {
          operator delete(v24);
        }
        goto LABEL_44;
      }
    }
    unint64_t v36 = (unint64_t)(v34 - 8);
    if (v36 < 0x58) {
      goto LABEL_49;
    }
    if ((unint64_t)(v26 - v31) < 0x20) {
      goto LABEL_49;
    }
    uint64_t v37 = (v36 >> 3) + 1;
    uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v24[v38 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v32 = (uint64_t *)((char *)v32 - v38);
    int v40 = &v31[8 * v27 - 16];
    unint64_t v41 = v24 - 2;
    uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
      *(_OWORD *)int v40 = v43;
      v40 -= 32;
      v41 -= 4;
      v42 -= 4;
    }
    while (v42);
    unint64_t v24 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        uint64_t v44 = *--v24;
        *--uint64_t v32 = v44;
      }
      while (v24 != (uint64_t *)v26);
    }
    unint64_t v24 = (uint64_t *)a1[6];
    goto LABEL_42;
  }
  *unint64_t v24 = a2;
  uint64_t v25 = (uint64_t)(v24 + 1);
LABEL_44:
  a1[7] = v25;
  return 1;
}

void operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(operations_research::sat::SatSolver *this, __n128 a2)
{
  if (*((int *)this + 128) <= 0)
  {
    int v2 = this;
    long long __p = 0;
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v3 = (void *)*((void *)this + 4);
    int v4 = (char *)v3[42];
    unsigned int v5 = (uint64_t *)v3[43];
    if (*v4 > -2)
    {
      unsigned int v6 = (void *)v3[42];
      uint64_t v36 = v3[45];
      unint64_t v8 = &v4[v36];
      if (v4 != &v4[v36]) {
        goto LABEL_8;
      }
    }
    else
    {
      unsigned int v6 = (void *)v3[42];
      do
      {
        unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unsigned int v6 = (void *)((char *)v6 + v7);
        v5 += 3 * v7;
      }
      while (*(char *)v6 < -1);
      unint64_t v8 = &v4[v3[45]];
      if (v6 != (void *)v8)
      {
LABEL_8:
        while (1)
        {
          uint64_t v9 = *v5;
          int v10 = *(_DWORD *)(*v5 + 4);
          uint64_t v11 = *((void *)v2 + 26);
          uint64_t v12 = *(void *)(v11 + 120);
          unint64_t v13 = (unsigned int *)(v12 + 8 * (v10 >> 1));
          uint64_t v14 = (int)v13[1];
          if ((int)v14 < *(_DWORD *)(v11 + 12))
          {
            uint64_t v15 = (uint64_t)v10 >> 1;
            if (v15 == *(int *)(*(void *)(v11 + 72) + 4 * v14) >> 1) {
              break;
            }
          }
LABEL_18:
          if (!*((unsigned char *)v5 + 20))
          {
            uint64_t v20 = *v5;
            __n128 v52 = *(__n128 *)(v5 + 1);
            unint64_t v21 = v54;
            if ((unint64_t)v54 >= v55)
            {
              unint64_t v23 = v8;
              unint64_t v24 = (char *)__p;
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (unsigned char *)__p) >> 3);
              unint64_t v26 = v25 + 1;
              if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(v55 - (void)__p) >> 3) > v26) {
                unint64_t v26 = 0x5555555555555556 * ((uint64_t)(v55 - (void)__p) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)__p) >> 3) >= 0x555555555555555) {
                unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v27 = v26;
              }
              if (v27)
              {
                if (v27 > 0xAAAAAAAAAAAAAAALL) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v28 = (char *)operator new(24 * v27);
              }
              else
              {
                unint64_t v28 = 0;
              }
              uint64_t v29 = &v28[8 * ((v54 - (unsigned char *)__p) >> 3)];
              *(void *)uint64_t v29 = v20;
              a2 = v52;
              *(__n128 *)(v29 + 8) = v52;
              unint64_t v30 = &v28[24 * v25];
              unint64_t v8 = v23;
              if (v21 != v24)
              {
                do
                {
                  a2 = *(__n128 *)(v21 - 24);
                  *((void *)v30 - 1) = *((void *)v21 - 1);
                  *(__n128 *)(v30 - 24) = a2;
                  v30 -= 24;
                  v21 -= 24;
                }
                while (v21 != v24);
                unint64_t v21 = v24;
              }
              int v2 = this;
              uint64_t v31 = &v28[24 * v27];
              char v22 = v29 + 24;
              long long __p = v30;
              unint64_t v55 = (unint64_t)v31;
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *(void *)uint64_t v54 = v20;
              a2 = v52;
              *(__n128 *)(v21 + 8) = v52;
              char v22 = v21 + 24;
            }
            uint64_t v54 = v22;
            int v32 = *((char *)v6 + 1);
            unsigned int v6 = (void *)((char *)v6 + 1);
            v5 += 3;
            if (v32 > -2) {
              goto LABEL_7;
            }
            do
            {
LABEL_40:
              unint64_t v33 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              unsigned int v6 = (void *)((char *)v6 + v33);
              v5 += 3 * v33;
            }
            while (*(char *)v6 < -1);
            goto LABEL_7;
          }
          *((unsigned char *)v5 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
LABEL_20:
          int v19 = *((char *)v6 + 1);
          unsigned int v6 = (void *)((char *)v6 + 1);
          v5 += 3;
          if (v19 <= -2) {
            goto LABEL_40;
          }
LABEL_7:
          if (v6 == (void *)v8)
          {
            uint64_t v34 = __p;
            unint64_t v35 = (unint64_t)v54;
            goto LABEL_45;
          }
        }
        unsigned int v16 = *v13;
        if (v16 >> 28 == 3)
        {
          uint64_t v15 = *(int *)(*(void *)(v11 + 152) + 4 * v15);
          int v17 = *(_DWORD *)(v12 + 8 * v15) >> 28;
          if (v17) {
            goto LABEL_12;
          }
        }
        else
        {
          int v17 = v16 >> 28;
          if (v16 >> 28)
          {
LABEL_12:
            int v18 = (operations_research::sat::LiteralWatchers *)*((void *)v2 + 4);
            if (v17 == *((_DWORD *)v18 + 8)) {
              goto LABEL_13;
            }
LABEL_17:
            if (!v9) {
              goto LABEL_20;
            }
            goto LABEL_18;
          }
        }
        int v18 = (operations_research::sat::LiteralWatchers *)*((void *)v2 + 4);
        if (*(_DWORD *)(*(void *)(v11 + 248) + 4 * v15) == *((_DWORD *)v18 + 8))
        {
LABEL_13:
          if (operations_research::sat::LiteralWatchers::ReasonClause(v18, v14) == v9) {
            goto LABEL_20;
          }
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    uint64_t v34 = 0;
    unint64_t v35 = 0;
LABEL_45:
    unint64_t v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)v34) >> 3));
    if ((void *)v35 == v34) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v37;
    }
    if (*(_DWORD *)(*((void *)v2 + 28) + 92) == 1) {
      std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>((unint64_t)v34, v35, v38, 1, a2);
    }
    else {
      std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>((unint64_t)v34, v35, v38, 1, a2);
    }
    uint64_t v39 = (int **)__p;
    int v40 = v54;
    unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v54 - (unsigned char *)__p) >> 3);
    if (*(_DWORD *)(*((void *)v2 + 28) + 208) >= (int)v41) {
      int v42 = -1431655765 * ((v54 - (unsigned char *)__p) >> 3);
    }
    else {
      int v42 = *(_DWORD *)(*((void *)v2 + 28) + 208);
    }
    unsigned int v43 = v41 - v42;
    if ((int)v41 - v42 >= 1)
    {
      double v44 = *((double *)__p + 3 * v43 + 1);
      while (1)
      {
        double v45 = v44;
        double v44 = *((double *)__p + 3 * v43 - 2);
        if (v45 != v44 || *((_DWORD *)__p + 6 * v43 + 4) != *((_DWORD *)__p + 6 * v43 - 2)) {
          break;
        }
        ++v42;
        unsigned int v46 = v43--;
        if (v46 <= 1) {
          goto LABEL_68;
        }
      }
      if (v43 <= v41)
      {
        if (v43 < v41)
        {
          int v40 = (char *)__p + 24 * v43;
          uint64_t v54 = v40;
        }
      }
      else
      {
        std::vector<std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>>::__append((char **)&__p, v43 - v41);
        uint64_t v39 = (int **)__p;
        int v40 = v54;
      }
      while (v39 != (int **)v40)
      {
        unint64_t v47 = *v39;
        *((void *)v2 + 52) += **v39;
        operations_research::sat::LiteralWatchers::LazyDetach(*((void *)v2 + 4), v47);
        v39 += 3;
      }
      operations_research::sat::LiteralWatchers::CleanUpWatchers(*((void *)v2 + 4));
      if (!*((unsigned char *)v2 + 1032)) {
        operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)v2
      }
                                                                        + 4));
    }
LABEL_68:
    *((_DWORD *)v2 + 128) = *(_DWORD *)(*((void *)v2 + 28) + 204);
    if (*operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::vlocal__ >= 1
      && (operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::vlocal__ != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)&operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_solver.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v52, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2504);
      BOOL v48 = (void *)google::LogMessage::stream((google::LogMessage *)&v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Database cleanup, #protected:", 29);
      uint64_t v49 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" #kept:", 7);
      uint64_t v50 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" #deleted:", 10);
      std::ostream::operator<<();
      google::LogMessage::~LogMessage((google::LogMessage *)&v52);
    }
    if (__p)
    {
      uint64_t v54 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_23CD7FD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatSolver::ComputeLbd<std::vector<operations_research::sat::Literal>>(uint64_t a1, int **a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 224) + 307)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 340);
  }
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 856, ((*(_DWORD *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * (**a2 >> 1)) >> 1) & 0x7FFFFFF) + 1);
  unsigned int v6 = *a2;
  unsigned int v5 = a2[1];
  while (v6 != v5)
  {
    unint64_t v7 = ((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * (*v6 >> 1)) >> 1) & 0x7FFFFFF;
    if ((int)v7 > v4
      && ((*(void *)(*(void *)(a1 + 864) + ((v7 >> 3) & 0xFFFFF8)) >> ((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * (*v6 >> 1)) >> 1)) & 1) == 0)
    {
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((void *)(a1 + 856), v7);
    }
    ++v6;
  }
  return (*(void *)(a1 + 920) - *(void *)(a1 + 912)) >> 2;
}

uint64_t operations_research::sat::SatSolver::BumpClauseActivity(uint64_t a1, int *a2)
{
  uint64_t v3 = 0;
  uint64_t v31 = a2;
  int v4 = *(void **)(a1 + 32);
  unint64_t v5 = (unint64_t)a2
     + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + (void)a2)));
  unint64_t v6 = ((v5 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v5);
  unint64_t v7 = v4[42];
  unint64_t v8 = (v6 >> 7) ^ (v7 >> 12);
  uint64_t v9 = v4[45];
  uint64_t v10 = 0x101010101010101 * (v6 & 0x7F);
  while (1)
  {
    uint64_t v11 = v8 & v9;
    uint64_t v12 = *(void *)(v7 + v11);
    uint64_t result = (v12 ^ v10) - 0x101010101010101;
    unint64_t v14 = result & ~(v12 ^ v10) & 0x8080808080808080;
    if (v14) {
      break;
    }
LABEL_6:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0) {
      return result;
    }
    v3 += 8;
    unint64_t v8 = v3 + v11;
  }
  uint64_t result = v4[43];
  while (1)
  {
    unint64_t v15 = (v11 + (__clz(__rbit64(v14)) >> 3)) & v9;
    unint64_t v16 = result + 24 * v15;
    if (*(int **)v16 == a2) {
      break;
    }
    v14 &= v14 - 1;
    if (!v14) {
      goto LABEL_6;
    }
  }
  if (v15 != v9)
  {
    uint64_t result = operations_research::sat::SatSolver::ComputeLbd<operations_research::sat::SatClause>(a1, a2);
    uint64_t v17 = *(void *)(a1 + 224);
    if ((int)result >= *(_DWORD *)(v17 + 340))
    {
      int v18 = *(_DWORD *)(v17 + 88);
      if (v18 == 2)
      {
        if ((int)result + 1 < *(_DWORD *)(v16 + 16))
        {
          *(unsigned char *)(v16 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 1;
          *(_DWORD *)(v16 + 16) = result;
        }
      }
      else if (v18 == 1)
      {
        *(unsigned char *)(v16 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 1;
      }
      double v19 = *(double *)(a1 + 504);
      double v20 = v19 + *(double *)(v16 + 8);
      *(double *)(v16 + 8) = v20;
      double v21 = *(double *)(v17 + 240);
      if (v20 > v21)
      {
        double v22 = 1.0 / v21;
        *(double *)(a1 + 504) = v19 * v22;
        unint64_t v23 = *(void **)(a1 + 32);
        unint64_t v25 = (char *)v23[42];
        uint64_t v24 = v23[43];
        if (*v25 > -2)
        {
          unint64_t v26 = (void *)v23[42];
        }
        else
        {
          unint64_t v26 = (void *)v23[42];
          do
          {
            unint64_t v27 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            unint64_t v26 = (void *)((char *)v26 + v27);
            v24 += 24 * v27;
          }
          while (*(char *)v26 < -1);
        }
        unint64_t v28 = &v25[v23[45]];
        while (v26 != (void *)v28)
        {
          *(double *)(v24 + 8) = v22 * *(double *)(v24 + 8);
          int v29 = *((char *)v26 + 1);
          unint64_t v26 = (void *)((char *)v26 + 1);
          v24 += 24;
          if (v29 <= -2)
          {
            do
            {
              unint64_t v30 = (__clz(__rbit64(((*v26 >> 7) & ~*v26 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              unint64_t v26 = (void *)((char *)v26 + v30);
              v24 += 24 * v30;
            }
            while (*(char *)v26 < -1);
          }
        }
      }
    }
    else
    {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(*(void *)(a1 + 32) + 336), (uint64_t *)&v31);
    }
  }
  return result;
}

void operations_research::sat::SatSolver::AddPropagator(operations_research::sat::SatSolver *this, operations_research::sat::SatPropagator *a2)
{
  int v25 = *((_DWORD *)this + 76);
  LODWORD(v26) = 0;
  if (v25) {
    google::MakeCheckOpString<int,int>((int)&v25, (int)&v26, "CurrentDecisionLevel() == 0");
  }
  *((unsigned char *)this + 1312) = 0;
  operations_research::sat::Trail::RegisterPropagator(*((operations_research::sat::Trail **)this + 26), a2);
  unint64_t v5 = (char *)*((void *)this + 10);
  unint64_t v4 = *((void *)this + 11);
  if ((unint64_t)v5 < v4)
  {
    *(void *)unint64_t v5 = a2;
    uint64_t v6 = (uint64_t)(v5 + 8);
    goto LABEL_24;
  }
  unint64_t v7 = (char *)*((void *)this + 9);
  uint64_t v8 = (v5 - v7) >> 3;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 2 > v9) {
    unint64_t v9 = v10 >> 2;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(8 * v11);
    unint64_t v13 = &v12[8 * v8];
    unint64_t v14 = &v12[8 * v11];
    *(void *)unint64_t v13 = a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    unint64_t v15 = (char *)(v5 - v7);
    if (v5 == v7) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  uint64_t v12 = 0;
  unint64_t v13 = (char *)(8 * v8);
  unint64_t v14 = 0;
  *(void *)(8 * v8) = a2;
  uint64_t v6 = 8 * v8 + 8;
  unint64_t v15 = (char *)(v5 - v7);
  if (v5 != v7)
  {
LABEL_15:
    unint64_t v16 = (unint64_t)(v15 - 8);
    if (v16 < 0x58) {
      goto LABEL_30;
    }
    if ((unint64_t)(v7 - v12) < 0x20) {
      goto LABEL_30;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    double v19 = &v5[-v18];
    v13 -= v18;
    double v20 = &v12[8 * v8 - 16];
    double v21 = v5 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v21 - 1);
      *(_OWORD *)double v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    unint64_t v5 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        uint64_t v24 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - 1) = v24;
        v13 -= 8;
      }
      while (v5 != v7);
    }
    unint64_t v5 = (char *)*((void *)this + 9);
  }
LABEL_22:
  *((void *)this + 9) = v13;
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v6;
  *((void *)this + 11) = v14;
  if (v5) {
    operator delete(v5);
  }
LABEL_24:
  *((void *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v6;
  operations_research::sat::SatSolver::InitializePropagators(this);
}

void sub_23CD802D4(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SatSolver::AddLastPropagator(operations_research::sat::SatSolver *this, operations_research::sat::SatPropagator *a2)
{
  v5[0] = *((_DWORD *)this + 76);
  LODWORD(v6) = 0;
  if (v5[0]) {
    google::MakeCheckOpString<int,int>((int)v5, (int)&v6, "CurrentDecisionLevel() == 0");
  }
  if (*((void *)this + 12))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v5, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 413);
    unint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Check failed: last_propagator_ == nullptr ", 42);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v5);
  }
  *((unsigned char *)this + 1312) = 0;
  operations_research::sat::Trail::RegisterPropagator(*((operations_research::sat::Trail **)this + 26), a2);
  *((void *)this + 12) = a2;
  operations_research::sat::SatSolver::InitializePropagators(this);
}

void sub_23CD803B0(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD803B8(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 496)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  if (v4 != v5)
  {
    while (*(_DWORD *)(*(void *)v4 + 36) == *(_DWORD *)(*(void *)(a1 + 208) + 12))
    {
      v4 += 8;
      if (v4 == v5) {
        goto LABEL_6;
      }
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 500);
    uint64_t v8 = (void *)google::LogMessage::stream((google::LogMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed: PropagationIsDone() ", 34);
LABEL_16:
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v10);
  }
LABEL_6:
  operations_research::sat::SatSolver::EnqueueNewDecision(a1, a2);
  while ((operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution((operations_research::sat::SatSolver *)a1) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 496)) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  if (v6 != v7)
  {
    while (*(_DWORD *)(*(void *)v6 + 36) == *(_DWORD *)(*(void *)(a1 + 208) + 12))
    {
      v6 += 8;
      if (v6 == v7) {
        return *(unsigned int *)(a1 + 336);
      }
    }
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v10, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 505);
    unint64_t v9 = (void *)google::LogMessage::stream((google::LogMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Check failed: PropagationIsDone() ", 34);
    goto LABEL_16;
  }
  return *(unsigned int *)(a1 + 336);
}

void sub_23CD80500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD80508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::SatSolver::EnqueueNewDecision(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 208);
  int v4 = (int)a2 >> 1;
  if (((*(void *)(*(void *)(v3 + 24) + (((unint64_t)(2 * ((int)a2 >> 1)) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a2 & 0x3E)) & 3) != 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1711);
    uint64_t v10 = (void *)google::LogMessage::stream((google::LogMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Check failed: !Assignment().VariableIsAssigned(literal.Variable()) ", 67);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v11);
  }
  int v6 = *(_DWORD *)(a1 + 304);
  if (!v6)
  {
    uint64_t v7 = *(int *)(v3 + 12);
    if (*(_DWORD *)(a1 + 344) >= (int)v7
      || ((double)*(uint64_t *)(*(void *)(a1 + 24) + 280)
        + (double)(*(void *)v3 + v7) * 8.0
        + (double)*(uint64_t *)(*(void *)(a1 + 32) + 192) * 4.0
        + (double)*(uint64_t *)(*(void *)(a1 + 32) + 200)
        + (double)*(uint64_t *)(*(void *)(a1 + 40) + 408) * 20.0
        + (double)*(uint64_t *)(*(void *)(a1 + 40) + 424) * 2.0
        + (double)*(uint64_t *)(*(void *)(a1 + 40) + 416))
       * 0.00000001 <= *(double *)(a1 + 352) + 1.0)
    {
      int v6 = 0;
    }
    else
    {
      operations_research::sat::SatSolver::ProcessNewlyFixedVariables((operations_research::sat::SatSolver *)a1);
      uint64_t v3 = *(void *)(a1 + 208);
      int v6 = *(_DWORD *)(a1 + 304);
    }
  }
  ++*(void *)(a1 + 368);
  uint64_t v8 = *(unsigned int *)(v3 + 12);
  *(_DWORD *)(a1 + 336) = v8;
  *(void *)(*(void *)(a1 + 312) + 8 * v6) = v8 | (a2 << 32);
  LODWORD(v8) = *(_DWORD *)(a1 + 304) + 1;
  *(_DWORD *)(a1 + 304) = v8;
  *(_DWORD *)(*(void *)(a1 + 208) + 8) = *(_DWORD *)(*(void *)(a1 + 208) + 8) & 0xF0000001 | (2 * (v8 & 0x7FFFFFF));
  uint64_t v9 = *(void *)(a1 + 208);
  *(_DWORD *)(*(void *)(v9 + 72) + 4 * *(int *)(v9 + 12)) = a2;
  *(_DWORD *)(v9 + 8) = (*(_DWORD *)(v9 + 8) & 0xFFFFFFE | a2 & 1) ^ 0x20000001;
  *(void *)(*(void *)(v9 + 120) + 8 * v4) = *(void *)(v9 + 8);
  *(void *)(*(void *)(v9 + 24) + (((unint64_t)(int)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  ++*(_DWORD *)(v9 + 12);
}

void sub_23CD80700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(operations_research::sat::SatSolver *this)
{
  if (*((void *)this + 6) == *((void *)this + 7)) {
    return 1;
  }
  int v2 = *(_DWORD *)(*((void *)this + 26) + 12);
LABEL_3:
  uint64_t v3 = *((void *)this + 6);
  uint64_t v4 = *((void *)this + 7);
  if (v3 == v4) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  while ((*(unsigned int (**)(void))(**(void **)(v5 - 8) + 16))(*(void *)(v5 - 8)))
  {
    uint64_t v6 = *((void *)this + 26);
    int v7 = *(_DWORD *)(v6 + 12);
    BOOL v8 = v7 > v2 || v5 == v4;
    v5 += 8;
    if (v8)
    {
      BOOL v8 = v7 == v2;
      int v2 = *(_DWORD *)(v6 + 12);
      if (v8) {
        return 1;
      }
      goto LABEL_3;
    }
  }
  ++*((void *)this + 47);
  int v10 = *(_DWORD *)(*((void *)this + 26) + 12);
  int v11 = *((_DWORD *)this + 76);
  bzero(*((void **)this + 135), *((void *)this + 136) - *((void *)this + 135));
  *((void *)this + 142) = *((void *)this + 141);
  uint64_t v12 = (void *)*((void *)this + 26);
  unint64_t v14 = (int *)v12[12];
  unint64_t v13 = (int *)v12[13];
  int64_t v15 = (char *)v13 - (char *)v14;
  if (v13 == v14)
  {
    int v17 = -1;
  }
  else
  {
    uint64_t v16 = v12[15];
    if ((unint64_t)(v15 - 4) >= 4)
    {
      unint64_t v19 = ((unint64_t)(v15 - 4) >> 2) + 1;
      uint64_t v18 = &v14[v19 & 0x7FFFFFFFFFFFFFFELL];
      double v20 = v14 + 1;
      int v21 = -1;
      uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFFELL;
      int v23 = -1;
      do
      {
        if (v21 <= *(_DWORD *)(v16 + 8 * (*(v20 - 1) >> 1) + 4)) {
          int v21 = *(_DWORD *)(v16 + 8 * (*(v20 - 1) >> 1) + 4);
        }
        if (v23 <= *(_DWORD *)(v16 + 8 * (*v20 >> 1) + 4)) {
          int v23 = *(_DWORD *)(v16 + 8 * (*v20 >> 1) + 4);
        }
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      if (v21 <= v23) {
        int v17 = v23;
      }
      else {
        int v17 = v21;
      }
      if (v19 == (v19 & 0x7FFFFFFFFFFFFFFELL)) {
        goto LABEL_32;
      }
    }
    else
    {
      int v17 = -1;
      uint64_t v18 = v14;
    }
    uint64_t v24 = (int *)((char *)v14 + (v15 & 0xFFFFFFFFFFFFFFFCLL));
    do
    {
      int v25 = *v18++;
      int v26 = *(_DWORD *)(v16 + 8 * (v25 >> 1) + 4);
      if (v17 <= v26) {
        int v17 = v26;
      }
    }
    while (v18 != v24);
  }
LABEL_32:
  unint64_t v27 = (uint64_t *)((char *)this + 936);
  operations_research::sat::SatSolver::ComputeFirstUIPConflict((uint64_t)this, v17, (int **)this + 117, (int **)this + 120, (uint64_t **)this + 126);
  if (*((void *)this + 117) == *((void *)this + 118)) {
    goto LABEL_72;
  }
  operations_research::sat::SatDecisionPolicy::BumpVariableActivities(*((void **)this + 30), (int **)this + 117);
  operations_research::sat::SatDecisionPolicy::BumpVariableActivities(*((void **)this + 30), (int **)this + 120);
  if (*(unsigned char *)(*((void *)this + 28) + 97))
  {
    operations_research::sat::SatSolver::ComputeUnionOfReasons((uint64_t)this, (int **)this + 117, (int **)this + 123);
    operations_research::sat::SatDecisionPolicy::BumpVariableActivities(*((void **)this + 30), (int **)this + 123);
  }
  unint64_t v28 = *(int **)(*((void *)this + 26) + 144);
  if (v28) {
    operations_research::sat::SatSolver::BumpClauseActivity((uint64_t)this, v28);
  }
  operations_research::sat::SatSolver::BumpReasonActivities(this, (int **)this + 120);
  operations_research::sat::SatDecisionPolicy::UpdateVariableActivityIncrement(*((operations_research::sat::SatDecisionPolicy **)this
                                                                               + 30));
  *((double *)this + 63) = *((double *)this + 63) * (1.0 / *(double *)(*((void *)this + 28) + 232));
  operations_research::sat::PbConstraints::UpdateActivityIncrement(*((operations_research::sat::PbConstraints **)this + 5));
  uint64_t v29 = *((void *)this + 28);
  if (!(*((void *)this + 47) % *(int *)(v29 + 264)))
  {
    double v30 = *(double *)(v29 + 216);
    if (v30 < *(double *)(v29 + 248))
    {
      double v31 = v30 + *(double *)(v29 + 256);
      *(_DWORD *)(v29 + 20) |= 0x80000u;
      *(double *)(v29 + 216) = v31;
    }
  }
  if (!*(unsigned char *)(v29 + 132)) {
    goto LABEL_109;
  }
  uint64_t v32 = *((void *)this + 5);
  uint64_t v33 = *(int *)(v32 + 296);
  if (v33 == -1 || !*(void *)(*(void *)(v32 + 40) + 8 * v33))
  {
    uint64_t v34 = (int *)*((void *)this + 120);
    unint64_t v35 = (int *)*((void *)this + 121);
    while (1)
    {
      if (v34 == v35) {
        goto LABEL_109;
      }
      uint64_t v36 = (void *)*((void *)this + 26);
      uint64_t v37 = (uint64_t)*v34 >> 1;
      uint64_t v38 = v36[15];
      unsigned int v39 = *(_DWORD *)(v38 + 8 * (*v34 >> 1));
      if (v39 >> 28 != 3) {
        break;
      }
      uint64_t v37 = *(int *)(v36[19] + 4 * v37);
      unsigned int v39 = *(_DWORD *)(v38 + 8 * v37);
      uint64_t v40 = v37;
      if (v39 >> 28 != 3) {
        goto LABEL_48;
      }
      uint64_t v40 = *(int *)(v36[19] + 4 * v37);
      int v41 = *(_DWORD *)(v38 + 8 * v40) >> 28;
      if (v41)
      {
LABEL_53:
        int v42 = (operations_research::sat::PbConstraints *)*((void *)this + 5);
        if (v41 != *((_DWORD *)v42 + 8)) {
          goto LABEL_44;
        }
        goto LABEL_54;
      }
LABEL_49:
      int v42 = (operations_research::sat::PbConstraints *)*((void *)this + 5);
      if (*(_DWORD *)(v36[31] + 4 * v40) != *((_DWORD *)v42 + 8)) {
        goto LABEL_44;
      }
LABEL_54:
      if (operations_research::sat::PbConstraints::ReasonPbConstraint(v42, *(_DWORD *)(v38 + 8 * v37 + 4))) {
        goto LABEL_55;
      }
LABEL_44:
      ++v34;
    }
    uint64_t v40 = (uint64_t)*v34 >> 1;
LABEL_48:
    int v41 = v39 >> 28;
    if (v41) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
LABEL_55:
  operations_research::sat::MutableUpperBoundedLinearConstraint::ClearAndResize((operations_research::sat::SatSolver *)((char *)this + 1184), *((_DWORD *)this + 4));
  uint64_t v43 = *((void *)this + 5);
  uint64_t v44 = *(int *)(v43 + 296);
  if (v44 == -1
    || (double v45 = *(operations_research::sat::UpperBoundedLinearConstraint **)(*(void *)(v43 + 40) + 8 * v44)) == 0)
  {
    uint64_t v47 = *((void *)this + 26);
    BOOL v48 = *(int **)(v47 + 96);
    uint64_t v49 = *(void *)(v47 + 104) - (void)v48;
    if (!v49)
    {
      v143[0] = -1;
      LODWORD(v144) = 0;
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)v143, (int)&v144, "value >= 0");
    }
    unint64_t v50 = (unint64_t)(v49 - 4) >> 2;
    uint64_t v51 = 4 * (v49 >> 2);
    do
    {
      int v52 = *v48++;
      operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)this + 148, v52 ^ 1, 1);
      v51 -= 4;
    }
    while (v51);
    v143[0] = v50;
    unint64_t v27 = (uint64_t *)((char *)this + 936);
    *((void *)this + 151) += v50;
    uint64_t v46 = -1;
  }
  else
  {
    operations_research::sat::UpperBoundedLinearConstraint::AddToConflict(v45, (operations_research::sat::SatSolver *)((char *)this + 1184));
    *(_DWORD *)(*((void *)this + 5) + 296) = -1;
    uint64_t v46 = operations_research::sat::MutableUpperBoundedLinearConstraint::ComputeSlackForTrailPrefix((operations_research::sat::SatSolver *)((char *)this + 1184), *((const operations_research::sat::Trail **)this + 26), v17 + 1);
  }
  int v147 = 0;
  operations_research::sat::SatSolver::ComputePBConflict((uint64_t)this, v17, v46, (operations_research::sat::SatSolver *)((char *)this + 1184), &v147);
  int v53 = v147;
  if (v147 == -1)
  {
LABEL_72:
    uint64_t result = 0;
    *((unsigned char *)this + 496) = 1;
    return result;
  }
  char v144 = 0;
  unint64_t v145 = 0;
  uint64_t v146 = 0;
  operations_research::sat::MutableUpperBoundedLinearConstraint::CopyIntoVector((void *)this + 148, (uint64_t *)&v144);
  uint64_t v54 = v144;
  if (*((void *)this + 151) != 0xAAAAAAAAAAAAAAABLL * (v145 - v144) - 1) {
    goto LABEL_101;
  }
  if (v144 != v145)
  {
    uint64_t v55 = (uint64_t)v144;
    while (*(void *)(v55 + 4) == 1)
    {
      v55 += 12;
      if ((int *)v55 == v145) {
        goto LABEL_69;
      }
    }
LABEL_101:
    int v84 = *((_DWORD *)this + 76);
    LODWORD(v143[0]) = v53;
    int v148 = v84;
    if (v53 < v84)
    {
      operations_research::sat::SatSolver::Backtrack(this, v53);
      operations_research::sat::PbConstraints::AddLearnedConstraint(*((operations_research::sat::PbConstraints **)this + 5), (uint64_t)&v144, *((void *)this + 151), *((void *)this + 26));
    }
    google::MakeCheckOpString<int,int>((int)v143, (int)&v148, "pb_backjump_level < CurrentDecisionLevel()");
  }
LABEL_69:
  if (v53 < (int)operations_research::sat::SatSolver::ComputeBacktrackLevel((uint64_t)this, v27))
  {
    *((void *)this + 127) = *((void *)this + 126);
    *((void *)this + 118) = *((void *)this + 117);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)this + 520, *((_DWORD *)this + 4));
    int v141 = v11;
    int v137 = v10;
    uint64_t v57 = v144;
    long long v56 = v145;
    if (v144 != v145)
    {
      LODWORD(v138) = 0;
      int v58 = 0;
      unint64_t v142 = v27;
      while (1)
      {
        int v60 = *v57 >> 1;
        int v61 = (*(_DWORD *)(*(void *)(*((void *)this + 26) + 120) + 8 * v60) >> 1) & 0x7FFFFFF;
        if (!v61) {
          goto LABEL_75;
        }
        int v62 = (int *)*((void *)this + 118);
        if (v61 > v58)
        {
          unint64_t v138 = ((unint64_t)v62 - *v27) >> 2;
          int v58 = (*(_DWORD *)(*(void *)(*((void *)this + 26) + 120) + 8 * v60) >> 1) & 0x7FFFFFF;
        }
        int v63 = *v57 ^ 1;
        unint64_t v64 = *((void *)this + 119);
        if ((unint64_t)v62 >= v64) {
          break;
        }
        *int v62 = v63;
        uint64_t v59 = (uint64_t)(v62 + 1);
LABEL_74:
        *((void *)this + 118) = v59;
        operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((void *)this + 65, v60);
LABEL_75:
        v57 += 3;
        if (v57 == v56) {
          goto LABEL_105;
        }
      }
      int v139 = *v57 >> 1;
      int v140 = v58;
      unint64_t v65 = (int *)*v27;
      uint64_t v66 = (uint64_t)v62 - *v27;
      uint64_t v67 = v66 >> 2;
      unint64_t v68 = (v66 >> 2) + 1;
      if (v68 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v69 = v64 - (void)v65;
      if (v69 >> 1 > v68) {
        unint64_t v68 = v69 >> 1;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v68;
      }
      if (v70)
      {
        if (v70 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v71 = v70;
        unint64_t v72 = operator new(4 * v70);
        unint64_t v70 = v71;
        uint64_t v73 = (int *)&v72[4 * v67];
        *uint64_t v73 = v63;
        uint64_t v59 = (uint64_t)(v73 + 1);
        if (v62 != v65) {
          goto LABEL_89;
        }
      }
      else
      {
        unint64_t v72 = 0;
        uint64_t v73 = (int *)(4 * v67);
        *(_DWORD *)(4 * v67) = v63;
        uint64_t v59 = 4 * v67 + 4;
        if (v62 != v65)
        {
LABEL_89:
          unint64_t v74 = (char *)(v62 - 1) - (char *)v65;
          if (v74 >= 0x2C)
          {
            unint64_t v75 = (char *)v62 - &v72[v66];
            unint64_t v27 = v142;
            if (v75 >= 0x20)
            {
              uint64_t v76 = (v74 >> 2) + 1;
              uint64_t v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v78 = &v62[v77 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v73 = (int *)((char *)v73 - v77);
              long long v79 = &v72[4 * v67 - 16];
              uint64_t v80 = v62 - 4;
              uint64_t v81 = v76 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v82 = *(_OWORD *)v80;
                *(v79 - 1) = *((_OWORD *)v80 - 1);
                *long long v79 = v82;
                v79 -= 2;
                v80 -= 8;
                v81 -= 8;
              }
              while (v81);
              int v62 = v78;
              if (v76 == (v76 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_98;
              }
            }
          }
          else
          {
            unint64_t v27 = v142;
          }
          do
          {
            int v83 = *--v62;
            *--uint64_t v73 = v83;
          }
          while (v62 != v65);
LABEL_98:
          *((void *)this + 117) = v73;
          *((void *)this + 118) = v59;
          *((void *)this + 119) = &v72[4 * v70];
          if (v65) {
            operator delete(v65);
          }
          int v58 = v140;
          int v60 = v139;
          goto LABEL_74;
        }
      }
      unint64_t v27 = v142;
      goto LABEL_98;
    }
    LODWORD(v138) = 0;
LABEL_105:
    uint64_t v85 = (int *)*((void *)this + 117);
    if (v85 == *((int **)this + 118))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v143, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 708);
      int v136 = (void *)google::LogMessage::stream((google::LogMessage *)v143);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"Check failed: !learned_conflict_.empty() ", 41);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v143);
    }
    uint64_t v86 = (int)v138;
    int v87 = *v85;
    int *v85 = v85[v86];
    v85[v86] = v87;
    uint64_t v54 = v144;
    int v10 = v137;
    int v11 = v141;
  }
  if (v54)
  {
    unint64_t v145 = v54;
    operator delete(v54);
  }
LABEL_109:
  unint64_t v88 = (void *)*((void *)this + 3);
  if (v88[27] || v88[28] != v88[29])
  {
    int v89 = *(_DWORD *)(*((void *)this + 28) + 276);
    if (v89 == 4)
    {
      uint64_t v93 = *((void *)this + 26);
      uint64_t v94 = operations_research::sat::Model::GetOrCreate<operations_research::sat::ModelRandomGenerator>(*(void *)this);
      operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirstWithTransitiveReduction(v88, v93, (uint64_t)v27, (uint64_t)this + 520, v94);
      uint64_t v90 = *((void *)this + 118);
      uint64_t v91 = *((void *)this + 117);
      unsigned int v92 = *(_DWORD *)(*((void *)this + 28) + 200);
      goto LABEL_117;
    }
    if (v89 == 1) {
      operations_research::sat::BinaryImplicationGraph::MinimizeConflictFirst(*((void **)this + 3), *((void *)this + 26), v27, (void *)this + 65);
    }
  }
  uint64_t v90 = *((void *)this + 118);
  uint64_t v91 = *((void *)this + 117);
  unsigned int v92 = *(_DWORD *)(*((void *)this + 28) + 200);
  if (v92 > 3)
  {
LABEL_121:
    unint64_t v95 = (uint64_t)(*((void *)this + 118) - *((void *)this + 117)) >> 2;
    unint64_t v96 = (int)((v90 - v91) >> 2);
    BOOL v97 = v96 > v95;
    unint64_t v98 = v96 - v95;
    if (v97)
    {
      unint64_t v99 = v98 + *((void *)this + 49);
      ++*((void *)this + 48);
      *((void *)this + 49) = v99;
    }
    goto LABEL_124;
  }
LABEL_117:
  switch(v92)
  {
    case 0u:
      break;
    case 1u:
      operations_research::sat::SatSolver::MinimizeConflictSimple((uint64_t)this, v27);
      goto LABEL_121;
    case 2u:
      operations_research::sat::SatSolver::MinimizeConflictRecursively((uint64_t)this, v27);
      goto LABEL_121;
    case 3u:
      operations_research::sat::SatSolver::MinimizeConflictExperimental((uint64_t)this, v27);
      goto LABEL_121;
    default:
      goto LABEL_121;
  }
LABEL_124:
  long long v100 = (void *)*((void *)this + 3);
  if (v100[27] || v100[28] != v100[29])
  {
    int v101 = *(_DWORD *)(*((void *)this + 28) + 276);
    if (v101 == 3)
    {
      operations_research::sat::BinaryImplicationGraph::MinimizeConflictExperimental(v100, *((void *)this + 26), (int **)v27);
    }
    else if (v101 == 2)
    {
      operations_research::sat::BinaryImplicationGraph::MinimizeConflictWithReachability(v100, v27);
    }
  }
  uint64_t v102 = *((void *)this + 117);
  uint64_t v103 = *((void *)this + 118) - v102;
  unint64_t v104 = v103 >> 2;
  *((void *)this + 51) += v103 >> 2;
  if ((unint64_t)v103 < 5)
  {
    int v106 = 0;
  }
  else
  {
    uint64_t v105 = *(void *)(*((void *)this + 26) + 120);
    if (v104 <= 2) {
      unint64_t v104 = 2;
    }
    if (v104 >= 3)
    {
      int v108 = 0;
      int v109 = 0;
      uint64_t v107 = (v104 - 1) | 1;
      uint64_t v110 = (int *)(v102 + 8);
      unint64_t v111 = (v104 - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v108 <= ((*(_DWORD *)(v105 + 8 * (*(v110 - 1) >> 1)) >> 1) & 0x7FFFFFF)) {
          int v108 = (*(_DWORD *)(v105 + 8 * (*(v110 - 1) >> 1)) >> 1) & 0x7FFFFFF;
        }
        if (v109 <= ((*(_DWORD *)(v105 + 8 * (*v110 >> 1)) >> 1) & 0x7FFFFFF)) {
          int v109 = (*(_DWORD *)(v105 + 8 * (*v110 >> 1)) >> 1) & 0x7FFFFFF;
        }
        v110 += 2;
        v111 -= 2;
      }
      while (v111);
      if (v108 <= v109) {
        int v106 = v109;
      }
      else {
        int v106 = v108;
      }
      if (v104 - 1 == ((v104 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_150;
      }
    }
    else
    {
      int v106 = 0;
      uint64_t v107 = 1;
    }
    unint64_t v112 = v104 - v107;
    int v113 = (int *)(v102 + 4 * v107);
    do
    {
      int v114 = *v113++;
      int v115 = (*(_DWORD *)(v105 + 8 * (v114 >> 1)) >> 1) & 0x7FFFFFF;
      if (v106 <= v115) {
        int v106 = v115;
      }
      --v112;
    }
    while (v112);
  }
LABEL_150:
  operations_research::sat::SatSolver::Backtrack(this, v106);
  uint64_t v117 = *((void *)this + 165);
  if (v117) {
    operations_research::sat::DratProofHandler::AddClause(v117, *((int **)this + 117), (uint64_t)(*((void *)this + 118) - *((void *)this + 117)) >> 2);
  }
  int v118 = (_DWORD **)*((void *)this + 126);
  uint64_t v119 = (_DWORD **)*((void *)this + 127);
  if (v118 == v119 || !*(unsigned char *)(*((void *)this + 28) + 305))
  {
    int v134 = 1;
  }
  else
  {
    char v120 = 1;
    do
    {
      uint64_t v125 = 0;
      int v127 = *v118;
      int v128 = (void *)*((void *)this + 4);
      unint64_t v129 = (unint64_t)*v118
           + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v118)
              * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                 * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                  + (void)*v118)));
      unint64_t v130 = ((v129 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v129);
      unint64_t v131 = v128[42];
      unint64_t v126 = (v130 >> 7) ^ (v131 >> 12);
      uint64_t v132 = v128[45];
      uint64_t v133 = 0x101010101010101 * (v130 & 0x7F);
      while (1)
      {
        uint64_t v121 = v126 & v132;
        uint64_t v122 = *(void *)(v131 + v121);
        unint64_t v123 = ((v122 ^ v133) - 0x101010101010101) & ~(v122 ^ v133) & 0x8080808080808080;
        if (v123) {
          break;
        }
LABEL_158:
        if ((v122 & (~v122 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v124 = v128[45];
          goto LABEL_161;
        }
        v125 += 8;
        unint64_t v126 = v125 + v121;
      }
      while (1)
      {
        unint64_t v124 = (v121 + (__clz(__rbit64(v123)) >> 3)) & v132;
        if (*(_DWORD **)(v128[43] + 24 * v124) == v127) {
          break;
        }
        v123 &= v123 - 1;
        if (!v123) {
          goto LABEL_158;
        }
      }
LABEL_161:
      if (v124 == v132) {
        char v120 = 0;
      }
      operations_research::sat::LiteralWatchers::LazyDetach((uint64_t)v128, v127);
      ++v118;
    }
    while (v118 != v119);
    operations_research::sat::LiteralWatchers::CleanUpWatchers(*((void *)this + 4));
    *((void *)this + 53) += (uint64_t)(*((void *)this + 127) - *((void *)this + 126)) >> 3;
    int v134 = v120 & 1;
  }
  int v135 = operations_research::sat::SatSolver::AddLearnedClauseAndEnqueueUnitPropagation((uint64_t)this, (uint64_t)v27, v134, v116);
  operations_research::sat::SatDecisionPolicy::OnConflict(*((operations_research::sat::SatDecisionPolicy **)this + 30));
  operations_research::sat::RestartPolicy::OnConflict(*((operations_research::sat::RestartPolicy **)this + 29), v10, v11, v135);
  return 0;
}

void sub_23CD81424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD8142C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD81434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatSolver::RestoreSolverToAssumptionLevel(operations_research::sat::SatSolver *this)
{
  if (*((unsigned char *)this + 496)) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 85);
  if (*((_DWORD *)this + 76) > v2)
  {
    operations_research::sat::SatSolver::Backtrack(this, v2);
    return 1;
  }
  while ((operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this) & 1) == 0)
  {
    if (*((unsigned char *)this + 496)) {
      return 0;
    }
  }
  if (*((unsigned char *)this + 496)) {
    return 0;
  }
  int v4 = *((_DWORD *)this + 76);
  int v5 = *((_DWORD *)this + 85);
  if (v4 >= v5) {
    return 1;
  }
  uint64_t v6 = *((void *)this + 46);
  int v7 = *((_DWORD *)this + 76);
  while (1)
  {
    uint64_t v8 = *((void *)this + 39);
    unint64_t v9 = *(int *)(v8 + 8 * v7++ + 4);
    unint64_t v10 = *(void *)(*(void *)(*((void *)this + 26) + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v10 >> v9) & 1) == 0) {
      break;
    }
LABEL_11:
    if (v7 >= v5)
    {
      uint64_t result = 1;
      goto LABEL_22;
    }
  }
  if ((v10 >> (v9 & 0x3F ^ 1)))
  {
    uint64_t result = 0;
    *(_DWORD *)(v8 + 8 * v4 + 4) = v9;
    goto LABEL_22;
  }
  if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v9) != -1)
  {
    if (*((_DWORD *)this + 76) <= v4) {
      int v7 = *((_DWORD *)this + 76);
    }
    int v4 = *((_DWORD *)this + 76);
    goto LABEL_11;
  }
  uint64_t result = 0;
LABEL_22:
  *((void *)this + 46) = v6;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 76);
  return result;
}

void operations_research::sat::SatSolver::Backtrack(operations_research::sat::SatSolver *this, int a2)
{
  if (*((_DWORD *)this + 76) == a2) {
    return;
  }
  *(_DWORD *)(*((void *)this + 26) + 8) = *(_DWORD *)(*((void *)this + 26) + 8) & 0xF0000001 | (2 * (a2 & 0x7FFFFFF));
  if (*((_DWORD *)this + 76) > a2)
  {
    *((_DWORD *)this + 76) = a2;
    uint64_t v3 = *(unsigned int *)(*((void *)this + 39) + 8 * a2);
    int v4 = (uint64_t *)*((void *)this + 6);
    int v5 = (uint64_t *)*((void *)this + 7);
    if (v4 == v5) {
      goto LABEL_7;
    }
    do
    {
LABEL_6:
      uint64_t v6 = *v4++;
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v6 + 24))(v6, *((void *)this + 26), v3);
    }
    while (v4 != v5);
    goto LABEL_7;
  }
  uint64_t v3 = 0;
  int v4 = (uint64_t *)*((void *)this + 6);
  int v5 = (uint64_t *)*((void *)this + 7);
  if (v4 != v5) {
    goto LABEL_6;
  }
LABEL_7:
  operations_research::sat::SatDecisionPolicy::Untrail(*((operations_research::sat::SatDecisionPolicy **)this + 30), v3);
  uint64_t v7 = *((void *)this + 26);
  uint64_t v8 = *(int *)(v7 + 12);
  *(void *)v7 += (int)v8 - (int)v3;
  if ((int)v8 > (int)v3)
  {
    uint64_t v9 = *(void *)(v7 + 24);
    uint64_t v10 = v8 - (int)v3;
    int v11 = (int *)(*(void *)(v7 + 72) + 4 * (int)v3);
    do
    {
      int v12 = *v11++;
      *(void *)(v9 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(3 << (v12 & 0x3E));
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(v7 + 12) = v3;
  *((_DWORD *)this + 84) = v3;
}

uint64_t operations_research::sat::SatSolver::ReapplyAssumptionsIfNeeded(operations_research::sat::SatSolver *this)
{
  if (*((unsigned char *)this + 496)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 76);
  int v4 = *((_DWORD *)this + 85);
  if (v3 >= v4) {
    return 1;
  }
  uint64_t v5 = *((void *)this + 46);
  int v6 = *((_DWORD *)this + 76);
  while (1)
  {
    uint64_t v7 = *((void *)this + 39);
    unint64_t v8 = *(int *)(v7 + 8 * v6++ + 4);
    unint64_t v9 = *(void *)(*(void *)(*((void *)this + 26) + 24) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v9 >> v8) & 1) == 0) {
      break;
    }
LABEL_5:
    if (v6 >= v4)
    {
      uint64_t result = 1;
      goto LABEL_16;
    }
  }
  if ((v9 >> (v8 & 0x3F ^ 1)))
  {
    uint64_t result = 0;
    *(_DWORD *)(v7 + 8 * v3 + 4) = v8;
    goto LABEL_16;
  }
  if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v8) != -1)
  {
    if (*((_DWORD *)this + 76) <= v3) {
      int v6 = *((_DWORD *)this + 76);
    }
    int v3 = *((_DWORD *)this + 76);
    goto LABEL_5;
  }
  uint64_t result = 0;
LABEL_16:
  *((void *)this + 46) = v5;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 76);
  return result;
}

uint64_t operations_research::sat::SatSolver::ResetToLevelZero(operations_research::sat::SatSolver *this)
{
  if (*((unsigned char *)this + 496)) {
    return 0;
  }
  *((_DWORD *)this + 85) = 0;
  operations_research::sat::SatSolver::Backtrack(this, 0);
  uint64_t result = 0;
  do
  {
    if (*((unsigned char *)this + 496)) {
      break;
    }
    uint64_t result = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this);
  }
  while ((result & 1) == 0);
  return result;
}

uint64_t operations_research::sat::SatSolver::ResetWithGivenAssumptions(uint64_t a1, int **a2)
{
  if (*(unsigned char *)(a1 + 496)) {
    return 0;
  }
  *(_DWORD *)(a1 + 34google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)a1, 0);
  uint64_t result = 0;
  if (*(unsigned char *)(a1 + 496)) {
    return result;
  }
  while ((operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution((operations_research::sat::SatSolver *)a1) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 496)) {
      return 0;
    }
  }
  uint64_t v5 = *a2;
  BOOL v6 = a2[1] == *a2;
  unint64_t v7 = a2[1] - *a2;
  *(_DWORD *)(a1 + 34google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v7;
  if (!v6)
  {
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    unint64_t v8 = (_DWORD *)(*(void *)(a1 + 312) + 4);
    do
    {
      int v9 = *v5++;
      *unint64_t v8 = v9;
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  if (*(unsigned char *)(a1 + 496)) {
    return 0;
  }
  int v10 = *(_DWORD *)(a1 + 304);
  int v11 = *(_DWORD *)(a1 + 340);
  if (v10 >= v11) {
    return 1;
  }
  uint64_t v12 = *(void *)(a1 + 368);
  int v13 = *(_DWORD *)(a1 + 304);
  while (1)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    unint64_t v15 = *(int *)(v14 + 8 * v13++ + 4);
    unint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 208) + 24) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if (((v16 >> v15) & 1) == 0) {
      break;
    }
LABEL_16:
    if (v13 >= v11)
    {
      uint64_t result = 1;
      goto LABEL_27;
    }
  }
  if ((v16 >> (v15 & 0x3F ^ 1)))
  {
    uint64_t result = 0;
    *(_DWORD *)(v14 + 8 * v10 + 4) = v15;
    goto LABEL_27;
  }
  if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(a1, v15) != -1)
  {
    if (*(_DWORD *)(a1 + 304) <= v10) {
      int v13 = *(_DWORD *)(a1 + 304);
    }
    int v10 = *(_DWORD *)(a1 + 304);
    goto LABEL_16;
  }
  uint64_t result = 0;
LABEL_27:
  *(void *)(a1 + 368) = v12;
  *(_DWORD *)(a1 + 34google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(_DWORD *)(a1 + 304);
  return result;
}

void operations_research::sat::SatSolver::ComputeFirstUIPConflict(uint64_t a1, int a2, int **a3, int **a4, uint64_t **a5)
{
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 520, *(_DWORD *)(a1 + 16));
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  if (a2 == -1) {
    return;
  }
  int v10 = (void *)a1;
  int v11 = *(void **)(a1 + 208);
  int v187 = (*(_DWORD *)(v11[15] + 8 * (*(int *)(v11[9] + 4 * a2) >> 1)) >> 1) & 0x7FFFFFF;
  if (!v187) {
    return;
  }
  char v180 = a5;
  int v190 = 0;
  uint64_t v12 = (int *)v11[12];
  uint64_t v13 = (uint64_t)(v11[13] - (void)v12) >> 2;
  char v182 = (void **)(a1 + 576);
  char v183 = a4;
  char v179 = (void *)(a1 + 1072);
  uint64_t v181 = v11[18];
  unint64_t v188 = a3;
  unint64_t v189 = (void *)a1;
  if (!v13) {
    goto LABEL_87;
  }
  while (2)
  {
    int v15 = 0;
    int v16 = 0;
    int v17 = &v12[v13];
    unint64_t v184 = v17;
    do
    {
      int v18 = *v12;
      int v19 = *v12 >> 1;
      int v20 = (*(_DWORD *)(*(void *)(v10[26] + 120) + 8 * v19) >> 1) & 0x7FFFFFF;
      if (v20) {
        ++v16;
      }
      unint64_t v21 = (unint64_t)((uint64_t)v18 >> 1) >> 6;
      uint64_t v22 = v10[66];
      uint64_t v23 = *(void *)(v22 + 8 * v21);
      if ((v23 & (1 << v19)) == 0)
      {
        *(void *)(v22 + 8 * v21) = v23 | (1 << v19);
        uint64_t v24 = (int *)v10[73];
        unint64_t v25 = v10[74];
        if ((unint64_t)v24 < v25)
        {
          *uint64_t v24 = v19;
          v10[73] = v24 + 1;
          if (v20 == v187) {
            goto LABEL_7;
          }
          goto LABEL_35;
        }
        int v26 = (int *)*v182;
        uint64_t v27 = (char *)v24 - (unsigned char *)*v182;
        uint64_t v28 = v27 >> 2;
        unint64_t v29 = (v27 >> 2) + 1;
        if (v29 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v25 - (void)v26;
        if (v30 >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        int v186 = v16;
        int v191 = v15;
        unint64_t v185 = v29;
        if (v29)
        {
          if (v29 >> 62) {
            goto LABEL_183;
          }
          double v31 = operator new(4 * v29);
          int v10 = v189;
          uint64_t v32 = (int *)&v31[4 * v28];
          *uint64_t v32 = v19;
          uint64_t v33 = (uint64_t)(v32 + 1);
          if (v24 != v26) {
            goto LABEL_23;
          }
        }
        else
        {
          double v31 = 0;
          uint64_t v32 = (int *)(4 * v28);
          *(_DWORD *)(4 * v28) = v19;
          uint64_t v33 = 4 * v28 + 4;
          if (v24 != v26)
          {
LABEL_23:
            unint64_t v34 = (char *)(v24 - 1) - (char *)v26;
            unint64_t v35 = v185;
            if (v34 < 0x2C) {
              goto LABEL_190;
            }
            if ((unint64_t)((char *)v24 - &v31[v27]) < 0x20) {
              goto LABEL_190;
            }
            uint64_t v36 = (v34 >> 2) + 1;
            uint64_t v37 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v38 = &v24[v37 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v32 = (int *)((char *)v32 - v37);
            unsigned int v39 = &v31[4 * v28 - 16];
            uint64_t v40 = v24 - 4;
            uint64_t v41 = v36 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v42 = *(_OWORD *)v40;
              *(v39 - 1) = *((_OWORD *)v40 - 1);
              _OWORD *v39 = v42;
              v39 -= 2;
              v40 -= 8;
              v41 -= 8;
            }
            while (v41);
            uint64_t v24 = v38;
            if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_190:
              do
              {
                int v43 = *--v24;
                *--uint64_t v32 = v43;
              }
              while (v24 != v26);
            }
LABEL_32:
            v10[72] = v32;
            v10[73] = v33;
            v10[74] = &v31[4 * v35];
            if (v26)
            {
              operator delete(v26);
              int v10 = v189;
            }
            a3 = v188;
            int v16 = v186;
            int v15 = v191;
            int v17 = v184;
            v10[73] = v33;
            if (v20 == v187)
            {
LABEL_7:
              ++v15;
              ++v190;
              goto LABEL_8;
            }
LABEL_35:
            if (v20)
            {
              double v45 = a3[1];
              unint64_t v44 = (unint64_t)a3[2];
              if ((unint64_t)v45 < v44)
              {
                *double v45 = v18;
                uint64_t v46 = (uint64_t)(v45 + 1);
LABEL_70:
                ++v15;
                a3[1] = (int *)v46;
                goto LABEL_8;
              }
              unint64_t v50 = *a3;
              uint64_t v51 = (char *)v45 - (char *)*a3;
              uint64_t v52 = v51 >> 2;
              unint64_t v53 = (v51 >> 2) + 1;
              if (v53 >> 62) {
                goto LABEL_186;
              }
              uint64_t v54 = v44 - (void)v50;
              if (v54 >> 1 > v53) {
                unint64_t v53 = v54 >> 1;
              }
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v55 = v53;
              }
              int v192 = v15;
              if (v55)
              {
                if (v55 >> 62) {
                  goto LABEL_183;
                }
                int v56 = v16;
                uint64_t v57 = operator new(4 * v55);
                int v10 = v189;
                int v58 = (int *)&v57[4 * v52];
                *int v58 = v18;
                uint64_t v46 = (uint64_t)(v58 + 1);
                if (v45 == v50) {
                  goto LABEL_67;
                }
LABEL_61:
                unint64_t v68 = (char *)(v45 - 1) - (char *)v50;
                if (v68 < 0x2C) {
                  goto LABEL_191;
                }
                if ((unint64_t)((char *)v45 - &v57[v51]) < 0x20) {
                  goto LABEL_191;
                }
                uint64_t v69 = (v68 >> 2) + 1;
                uint64_t v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
                unint64_t v71 = &v45[v70 / 0xFFFFFFFFFFFFFFFCLL];
                int v58 = (int *)((char *)v58 - v70);
                unint64_t v72 = &v57[4 * v52 - 16];
                uint64_t v73 = v45 - 4;
                uint64_t v74 = v69 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v75 = *(_OWORD *)v73;
                  *(v72 - 1) = *((_OWORD *)v73 - 1);
                  *unint64_t v72 = v75;
                  v72 -= 2;
                  v73 -= 8;
                  v74 -= 8;
                }
                while (v74);
                double v45 = v71;
                if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_191:
                  do
                  {
                    int v76 = *--v45;
                    *--int v58 = v76;
                  }
                  while (v45 != v50);
                }
              }
              else
              {
                int v56 = v16;
                uint64_t v57 = 0;
                int v58 = (int *)(4 * v52);
                *(_DWORD *)(4 * v52) = v18;
                uint64_t v46 = 4 * v52 + 4;
                if (v45 != v50) {
                  goto LABEL_61;
                }
              }
LABEL_67:
              char *v188 = v58;
              v188[1] = (int *)v46;
              v188[2] = (int *)&v57[4 * v55];
              if (v50)
              {
                operator delete(v50);
                int v10 = v189;
              }
              int v16 = v56;
              a3 = v188;
              int v15 = v192;
              int v17 = v184;
              goto LABEL_70;
            }
            BOOL v48 = v183[1];
            unint64_t v47 = (unint64_t)v183[2];
            if ((unint64_t)v48 < v47)
            {
              int *v48 = v18;
              uint64_t v49 = (uint64_t)(v48 + 1);
LABEL_81:
              v183[1] = (int *)v49;
              goto LABEL_8;
            }
            uint64_t v59 = *v183;
            uint64_t v60 = (char *)v48 - (char *)*v183;
            uint64_t v61 = v60 >> 2;
            unint64_t v62 = (v60 >> 2) + 1;
            if (v62 >> 62) {
              goto LABEL_185;
            }
            uint64_t v63 = v47 - (void)v59;
            if (v63 >> 1 > v62) {
              unint64_t v62 = v63 >> 1;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v62;
            }
            int v193 = v15;
            if (v64)
            {
              if (v64 >> 62) {
                goto LABEL_183;
              }
              int v65 = v16;
              uint64_t v66 = operator new(4 * v64);
              int v10 = v189;
              uint64_t v67 = (int *)&v66[4 * v61];
              *uint64_t v67 = v18;
              uint64_t v49 = (uint64_t)(v67 + 1);
              if (v48 == v59) {
                goto LABEL_78;
              }
            }
            else
            {
              int v65 = v16;
              uint64_t v66 = 0;
              uint64_t v67 = (int *)(4 * v61);
              *(_DWORD *)(4 * v61) = v18;
              uint64_t v49 = 4 * v61 + 4;
              if (v48 == v59)
              {
LABEL_78:
                *char v183 = v67;
                v183[1] = (int *)v49;
                v183[2] = (int *)&v66[4 * v64];
                if (v59)
                {
                  operator delete(v59);
                  int v10 = v189;
                }
                int v16 = v65;
                a3 = v188;
                int v15 = v193;
                int v17 = v184;
                goto LABEL_81;
              }
            }
            unint64_t v77 = (char *)(v48 - 1) - (char *)v59;
            if (v77 < 0x2C) {
              goto LABEL_192;
            }
            if ((unint64_t)((char *)v48 - &v66[v60]) < 0x20) {
              goto LABEL_192;
            }
            uint64_t v78 = (v77 >> 2) + 1;
            uint64_t v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v80 = &v48[v79 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v67 = (int *)((char *)v67 - v79);
            uint64_t v81 = &v66[4 * v61 - 16];
            long long v82 = v48 - 4;
            uint64_t v83 = v78 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v84 = *(_OWORD *)v82;
              *(v81 - 1) = *((_OWORD *)v82 - 1);
              *uint64_t v81 = v84;
              v81 -= 2;
              v82 -= 8;
              v83 -= 8;
            }
            while (v83);
            BOOL v48 = v80;
            if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_192:
              do
              {
                int v85 = *--v48;
                *--uint64_t v67 = v85;
              }
              while (v48 != v59);
            }
            goto LABEL_78;
          }
        }
        unint64_t v35 = v185;
        goto LABEL_32;
      }
LABEL_8:
      ++v12;
    }
    while (v12 != v17);
    uint64_t v86 = v183;
    uint64_t v87 = v181;
    if (v15 <= 0)
    {
      unint64_t v88 = (char **)v180;
      if (!v181) {
        goto LABEL_109;
      }
    }
    else
    {
      unint64_t v88 = (char **)v180;
      v180[1] = *v180;
      if (!v181) {
        goto LABEL_109;
      }
    }
LABEL_88:
    if (a3[1] - *a3 + v190 != v16) {
      goto LABEL_109;
    }
    uint64_t v90 = v88[1];
    unint64_t v89 = (unint64_t)v88[2];
    if ((unint64_t)v90 < v89)
    {
      *(void *)uint64_t v90 = v87;
      uint64_t v91 = (uint64_t)(v90 + 8);
      goto LABEL_108;
    }
    unsigned int v92 = *v88;
    uint64_t v93 = (v90 - v92) >> 3;
    unint64_t v94 = v93 + 1;
    if ((unint64_t)(v93 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v95 = v89 - (void)v92;
    if (v95 >> 2 > v94) {
      unint64_t v94 = v95 >> 2;
    }
    if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v96 = v94;
    }
    if (!v96)
    {
      BOOL v97 = 0;
      unint64_t v98 = (uint64_t *)(8 * v93);
      *(void *)(8 * v93) = v181;
      uint64_t v91 = 8 * v93 + 8;
      if (v90 != v92) {
        goto LABEL_100;
      }
      goto LABEL_158;
    }
    if (v96 >> 61) {
      goto LABEL_183;
    }
    BOOL v97 = (char *)operator new(8 * v96);
    int v10 = v189;
    unint64_t v98 = (uint64_t *)&v97[8 * v93];
    *unint64_t v98 = v181;
    uint64_t v91 = (uint64_t)(v98 + 1);
    if (v90 == v92)
    {
LABEL_158:
      unint64_t v88 = (char **)v180;
      char *v180 = v98;
      v180[1] = (uint64_t *)v91;
      v180[2] = (uint64_t *)&v97[8 * v96];
      if (v90) {
        goto LABEL_107;
      }
      goto LABEL_108;
    }
LABEL_100:
    unint64_t v99 = v90 - 8 - v92;
    if (v99 < 0x58) {
      goto LABEL_193;
    }
    if ((unint64_t)(v92 - v97) < 0x20) {
      goto LABEL_193;
    }
    uint64_t v100 = (v99 >> 3) + 1;
    uint64_t v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v102 = &v90[-v101];
    unint64_t v98 = (uint64_t *)((char *)v98 - v101);
    uint64_t v103 = &v97[8 * v93 - 16];
    unint64_t v104 = (long long *)(v90 - 16);
    uint64_t v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v106 = *v104;
      *((_OWORD *)v103 - 1) = *(v104 - 1);
      *(_OWORD *)uint64_t v103 = v106;
      v103 -= 32;
      v104 -= 2;
      v105 -= 4;
    }
    while (v105);
    uint64_t v90 = v102;
    if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_193:
      do
      {
        uint64_t v107 = *((void *)v90 - 1);
        v90 -= 8;
        *--unint64_t v98 = v107;
      }
      while (v90 != v92);
    }
    unint64_t v88 = (char **)v180;
    uint64_t v90 = (char *)*v180;
    char *v180 = v98;
    v180[1] = (uint64_t *)v91;
    v180[2] = (uint64_t *)&v97[8 * v96];
    if (v90)
    {
LABEL_107:
      operator delete(v90);
      int v10 = v189;
    }
LABEL_108:
    v88[1] = (char *)v91;
LABEL_109:
    int v108 = (int *)(*(void *)(v10[26] + 72) + 4 * a2);
    do
    {
      int v110 = *v108--;
      int v109 = v110;
      int v111 = v110 >> 1;
      unint64_t v112 = (uint64_t)v110 >> 1;
      uint64_t v113 = 1 << (v110 >> 1);
      --a2;
    }
    while ((v113 & *(void *)(v10[66] + 8 * (v112 >> 6))) == 0);
    if (--v190)
    {
      int v115 = (char *)v86[1];
      unint64_t v114 = (unint64_t)v86[2];
      if ((unint64_t)v115 < v114)
      {
        *(_DWORD *)int v115 = v109;
        uint64_t v116 = (uint64_t)(v115 + 4);
        a3 = v188;
        goto LABEL_134;
      }
      uint64_t v117 = (char *)*v86;
      uint64_t v118 = (v115 - v117) >> 2;
      unint64_t v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 62) {
LABEL_185:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v120 = v114 - (void)v117;
      if (v120 >> 1 > v119) {
        unint64_t v119 = v120 >> 1;
      }
      if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v194 = v119;
      if (v119)
      {
        if (!(v119 >> 62))
        {
          uint64_t v121 = operator new(4 * v119);
          int v10 = v189;
          uint64_t v122 = (int *)&v121[4 * v118];
          int *v122 = v109;
          uint64_t v116 = (uint64_t)(v122 + 1);
          if (v115 != v117) {
            goto LABEL_122;
          }
          goto LABEL_131;
        }
LABEL_183:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v121 = 0;
      uint64_t v122 = (int *)(4 * v118);
      *(_DWORD *)(4 * v118) = v109;
      uint64_t v116 = 4 * v118 + 4;
      if (v115 != v117)
      {
LABEL_122:
        unint64_t v123 = v115 - 4 - v117;
        if (v123 < 0x2C) {
          goto LABEL_194;
        }
        if ((unint64_t)(v117 - v121) < 0x20) {
          goto LABEL_194;
        }
        uint64_t v124 = (v123 >> 2) + 1;
        uint64_t v125 = 4 * (v124 & 0x7FFFFFFFFFFFFFF8);
        unint64_t v126 = &v115[-v125];
        uint64_t v122 = (int *)((char *)v122 - v125);
        int v127 = &v121[4 * v118 - 16];
        int v128 = v115 - 16;
        uint64_t v129 = v124 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v130 = *(_OWORD *)v128;
          *(v127 - 1) = *((_OWORD *)v128 - 1);
          _OWORD *v127 = v130;
          v127 -= 2;
          v128 -= 32;
          v129 -= 8;
        }
        while (v129);
        int v115 = v126;
        if (v124 != (v124 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_194:
          do
          {
            int v131 = *((_DWORD *)v115 - 1);
            v115 -= 4;
            *--uint64_t v122 = v131;
          }
          while (v115 != v117);
        }
      }
LABEL_131:
      *char v183 = v122;
      v183[1] = (int *)v116;
      v183[2] = (int *)&v121[4 * v194];
      if (v117)
      {
        uint64_t v132 = v116;
        operator delete(v117);
        uint64_t v116 = v132;
        int v10 = v189;
      }
      a3 = v188;
      uint64_t v86 = v183;
LABEL_134:
      v86[1] = (int *)v116;
      uint64_t v133 = v10[135];
      unint64_t v134 = v112;
      if ((*(void *)(v133 + 8 * (v112 >> 6)) & v113) != 0)
      {
LABEL_135:
        if (*(_DWORD *)(v10[131] + 4 * v134) != v111)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          goto LABEL_149;
        }
      }
      else
      {
        uint64_t v135 = v10[130];
        if (*(_DWORD *)(*(void *)(v135 + 120) + 8 * v112) >> 28 == 3)
        {
          int v136 = *(_DWORD *)(*(void *)(v135 + 152) + 4 * v112);
          if (v136 != v111)
          {
            unint64_t v134 = v136;
            if ((*(void *)(v133 + (((unint64_t)v136 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v136)) {
              goto LABEL_135;
            }
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v179, v136);
            int v10 = v189;
            *(_DWORD *)(v189[131] + 4 * v134) = v111;
          }
        }
      }
      int v137 = (void *)v10[26];
      uint64_t v138 = v137[15];
      unsigned int v139 = *(_DWORD *)(v138 + 8 * v112);
      unint64_t v140 = v112;
      if (v139 >> 28 == 3)
      {
        unint64_t v140 = *(int *)(v137[19] + 4 * v112);
        unsigned int v139 = *(_DWORD *)(v138 + 8 * v140);
      }
      unsigned int v141 = v139 >> 28;
      if (v141)
      {
        if (v141 - 1 > 1)
        {
          uint64_t v143 = *(void *)(v137[34] + 8 * v141);
          uint64_t v144 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v143 + 32))(v143, v10[26], *(unsigned int *)(v138 + 8 * v140 + 4));
          int v10 = v189;
          unint64_t v145 = (uint64_t *)(v137[28] + 16 * v140);
          uint64_t *v145 = v144;
          v145[1] = v146;
        }
        else
        {
          unint64_t v142 = (void *)(v137[28] + 16 * v140);
          void *v142 = 0;
          v142[1] = 0;
        }
        *(_DWORD *)(v137[31] + 4 * v14google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(_DWORD *)(v138 + 8 * v140) >> 28;
        *(_DWORD *)(v137[15] + 8 * v140) &= 0xFFFFFFFu;
      }
      int v147 = (int **)(v137[28] + 16 * v140);
      uint64_t v12 = *v147;
      uint64_t v13 = (uint64_t)v147[1];
LABEL_149:
      int v148 = (void *)v10[26];
      uint64_t v149 = v148[15];
      unsigned int v150 = *(_DWORD *)(v149 + 8 * v112);
      if (v150 >> 28 == 3)
      {
        unint64_t v151 = *(int *)(v148[19] + 4 * v112);
        int v152 = *(_DWORD *)(v149 + 8 * v151) >> 28;
        if (v152)
        {
LABEL_154:
          unint64_t v153 = (operations_research::sat::LiteralWatchers *)v10[4];
          if (v152 == *((_DWORD *)v153 + 8))
          {
            uint64_t v14 = operations_research::sat::LiteralWatchers::ReasonClause(v153, *(_DWORD *)(v149 + 8 * v112 + 4));
            int v10 = v189;
            uint64_t v181 = v14;
            if (!v13) {
              goto LABEL_87;
            }
            continue;
          }
          uint64_t v181 = 0;
          if (!v13)
          {
LABEL_87:
            int v16 = 0;
            uint64_t v86 = v183;
            unint64_t v88 = (char **)v180;
            uint64_t v87 = v181;
            if (v181) {
              goto LABEL_88;
            }
            goto LABEL_109;
          }
          continue;
        }
      }
      else
      {
        unint64_t v151 = v112;
        int v152 = v150 >> 28;
        if (v152) {
          goto LABEL_154;
        }
      }
      int v152 = *(_DWORD *)(v148[31] + 4 * v151);
      goto LABEL_154;
    }
    break;
  }
  int v154 = v109 ^ 1;
  uint64_t v156 = a3[1];
  unint64_t v155 = (unint64_t)a3[2];
  if ((unint64_t)v156 < v155)
  {
    *uint64_t v156 = v154;
    uint64_t v157 = (uint64_t)(v156 + 1);
    goto LABEL_181;
  }
  int v158 = *a3;
  uint64_t v159 = (char *)v156 - (char *)*a3;
  uint64_t v160 = v159 >> 2;
  unint64_t v161 = (v159 >> 2) + 1;
  if (v161 >> 62) {
LABEL_186:
  }
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  uint64_t v162 = v155 - (void)v158;
  if (v162 >> 1 > v161) {
    unint64_t v161 = v162 >> 1;
  }
  if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v163 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v163 = v161;
  }
  if (v163)
  {
    if (v163 >> 62) {
      goto LABEL_183;
    }
    unint64_t v164 = operator new(4 * v163);
    unint64_t v165 = (int *)&v164[4 * v160];
    char v166 = &v164[4 * v163];
    int *v165 = v154;
    uint64_t v157 = (uint64_t)(v165 + 1);
    int64_t v167 = (char *)v156 - (char *)v158;
    if (v156 == v158) {
      goto LABEL_179;
    }
LABEL_173:
    unint64_t v168 = v167 - 4;
    if (v168 < 0x2C) {
      goto LABEL_195;
    }
    if ((unint64_t)((char *)v156 - &v164[v159]) < 0x20) {
      goto LABEL_195;
    }
    uint64_t v169 = (v168 >> 2) + 1;
    uint64_t v170 = 4 * (v169 & 0x7FFFFFFFFFFFFFF8);
    char v171 = &v156[v170 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v165 = (int *)((char *)v165 - v170);
    char v172 = &v164[4 * v160 - 16];
    unint64_t v173 = v156 - 4;
    uint64_t v174 = v169 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v175 = *(_OWORD *)v173;
      *(v172 - 1) = *((_OWORD *)v173 - 1);
      _OWORD *v172 = v175;
      v172 -= 2;
      v173 -= 8;
      v174 -= 8;
    }
    while (v174);
    uint64_t v156 = v171;
    if (v169 != (v169 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_195:
      do
      {
        int v176 = *--v156;
        *--unint64_t v165 = v176;
      }
      while (v156 != v158);
    }
  }
  else
  {
    unint64_t v164 = 0;
    unint64_t v165 = (int *)(4 * v160);
    char v166 = 0;
    *(_DWORD *)(4 * v16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v154;
    uint64_t v157 = 4 * v160 + 4;
    int64_t v167 = (char *)v156 - (char *)v158;
    if (v156 != v158) {
      goto LABEL_173;
    }
  }
LABEL_179:
  *a3 = v165;
  a3[1] = (int *)v157;
  a3[2] = (int *)v166;
  if (v158) {
    operator delete(v158);
  }
LABEL_181:
  a3[1] = (int *)v157;
  char v177 = *a3;
  int v178 = *(_DWORD *)(v157 - 4);
  *(_DWORD *)(v157 - 4) = **a3;
  *char v177 = v178;
}

void operations_research::sat::SatSolver::ComputeUnionOfReasons(uint64_t a1, int **a2, int **a3)
{
  BOOL v6 = (void *)(a1 + 680);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 680, *(_DWORD *)(a1 + 16));
  a3[1] = *a3;
  uint64_t v78 = a2;
  unint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  if (v7 == v8) {
    goto LABEL_68;
  }
  do
  {
    int v9 = *v7++;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v6, v9 >> 1);
  }
  while (v7 != v8);
  int v10 = *v78;
  uint64_t v79 = v78[1];
  if (*v78 == v79) {
    goto LABEL_68;
  }
  uint64_t v81 = (void **)(a1 + 736);
  long long v82 = a3;
  do
  {
    int v11 = *(void **)(a1 + 208);
    uint64_t v12 = (uint64_t)*v10 >> 1;
    uint64_t v13 = v11[15];
    unsigned int v14 = *(_DWORD *)(v13 + 8 * (*v10 >> 1));
    uint64_t v80 = v10;
    if (v14 >> 28 == 3)
    {
      uint64_t v12 = *(int *)(v11[19] + 4 * v12);
      unsigned int v15 = *(_DWORD *)(v13 + 8 * v12) >> 28;
      if (!v15) {
        goto LABEL_8;
      }
LABEL_11:
      if (v15 - 1 > 1)
      {
        uint64_t v19 = *(void *)(v11[34] + 8 * v15);
        uint64_t v20 = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v19 + 32))(v19, v11, *(unsigned int *)(v13 + 8 * v12 + 4));
        unint64_t v21 = (uint64_t *)(v11[28] + 16 * v12);
        uint64_t *v21 = v20;
        v21[1] = v22;
      }
      else
      {
        int v18 = (void *)(v11[28] + 16 * v12);
        *int v18 = 0;
        v18[1] = 0;
      }
      *(_DWORD *)(v11[31] + 4 * v12) = *(_DWORD *)(v13 + 8 * v12) >> 28;
      *(_DWORD *)(v11[15] + 8 * v12) &= 0xFFFFFFFu;
      uint64_t v16 = v11[28] + 16 * v12;
      uint64_t v17 = *(void *)(v16 + 8);
      if (!v17) {
        goto LABEL_5;
      }
LABEL_15:
      uint64_t v23 = *(int **)v16;
      uint64_t v24 = *(void *)v16 + 4 * v17;
      uint64_t v83 = v24;
      while (1)
      {
        int v26 = *v23;
        int v27 = *v23 >> 1;
        unint64_t v28 = (unint64_t)((uint64_t)*v23 >> 1) >> 6;
        uint64_t v29 = *(void *)(a1 + 688);
        uint64_t v30 = *(void *)(v29 + 8 * v28);
        if (((1 << v27) & v30) != 0) {
          goto LABEL_18;
        }
        *(void *)(v29 + 8 * v28) = (1 << v27) | v30;
        double v31 = *(int **)(a1 + 744);
        unint64_t v32 = *(void *)(a1 + 752);
        if ((unint64_t)v31 < v32)
        {
          int *v31 = v27;
          *(void *)(a1 + 744) = v31 + 1;
          unint64_t v34 = a3[1];
          unint64_t v33 = (unint64_t)a3[2];
          if ((unint64_t)v34 >= v33) {
            goto LABEL_44;
          }
          goto LABEL_16;
        }
        unint64_t v35 = (int *)*v81;
        uint64_t v36 = (char *)v31 - (unsigned char *)*v81;
        uint64_t v37 = v36 >> 2;
        unint64_t v38 = (v36 >> 2) + 1;
        if (v38 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v32 - (void)v35;
        if (v39 >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        unint64_t v40 = (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v38;
        if (!v40) {
          break;
        }
        if (v40 >> 62) {
          goto LABEL_72;
        }
        uint64_t v41 = operator new(4 * v40);
        long long v42 = (int *)&v41[4 * v37];
        *long long v42 = v27;
        uint64_t v43 = (uint64_t)(v42 + 1);
        if (v31 != v35) {
          goto LABEL_32;
        }
LABEL_41:
        *(void *)(a1 + 736) = v42;
        *(void *)(a1 + 744) = v43;
        *(void *)(a1 + 752) = &v41[4 * v40];
        if (v35) {
          operator delete(v35);
        }
        a3 = v82;
        uint64_t v24 = v83;
        *(void *)(a1 + 744) = v43;
        unint64_t v34 = v82[1];
        unint64_t v33 = (unint64_t)v82[2];
        if ((unint64_t)v34 >= v33)
        {
LABEL_44:
          unint64_t v53 = *a3;
          uint64_t v54 = (char *)v34 - (char *)*a3;
          uint64_t v55 = v54 >> 2;
          unint64_t v56 = (v54 >> 2) + 1;
          if (v56 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v57 = v33 - (void)v53;
          if (v57 >> 1 > v56) {
            unint64_t v56 = v57 >> 1;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            if (v58 >> 62) {
LABEL_72:
            }
              std::__throw_bad_array_new_length[abi:ne180100]();
            uint64_t v59 = operator new(4 * v58);
            uint64_t v60 = (int *)&v59[4 * v55];
            *uint64_t v60 = v26;
            uint64_t v25 = (uint64_t)(v60 + 1);
            if (v34 != v53)
            {
LABEL_53:
              unint64_t v61 = (char *)(v34 - 1) - (char *)v53;
              if (v61 < 0x2C) {
                goto LABEL_77;
              }
              if ((unint64_t)((char *)v34 - &v59[v54]) < 0x20) {
                goto LABEL_77;
              }
              uint64_t v62 = (v61 >> 2) + 1;
              uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v64 = &v34[v63 / 0xFFFFFFFFFFFFFFFCLL];
              uint64_t v60 = (int *)((char *)v60 - v63);
              int v65 = &v59[4 * v55 - 16];
              uint64_t v66 = v34 - 4;
              uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v68 = *(_OWORD *)v66;
                *(v65 - 1) = *((_OWORD *)v66 - 1);
                *int v65 = v68;
                v65 -= 2;
                v66 -= 8;
                v67 -= 8;
              }
              while (v67);
              unint64_t v34 = v64;
              if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_77:
                do
                {
                  int v69 = *--v34;
                  *--uint64_t v60 = v69;
                }
                while (v34 != v53);
              }
            }
          }
          else
          {
            uint64_t v59 = 0;
            uint64_t v60 = (int *)(4 * v55);
            *(_DWORD *)(4 * v55) = v26;
            uint64_t v25 = 4 * v55 + 4;
            if (v34 != v53) {
              goto LABEL_53;
            }
          }
          a3 = v82;
          int *v82 = v60;
          v82[1] = (int *)v25;
          v82[2] = (int *)&v59[4 * v58];
          if (v53) {
            operator delete(v53);
          }
          uint64_t v24 = v83;
          goto LABEL_17;
        }
LABEL_16:
        *unint64_t v34 = v26;
        uint64_t v25 = (uint64_t)(v34 + 1);
LABEL_17:
        a3[1] = (int *)v25;
LABEL_18:
        if (++v23 == (int *)v24) {
          goto LABEL_5;
        }
      }
      uint64_t v41 = 0;
      long long v42 = (int *)(4 * v37);
      *(_DWORD *)(4 * v37) = v27;
      uint64_t v43 = 4 * v37 + 4;
      if (v31 == v35) {
        goto LABEL_41;
      }
LABEL_32:
      unint64_t v44 = (char *)(v31 - 1) - (char *)v35;
      if (v44 < 0x2C) {
        goto LABEL_78;
      }
      if ((unint64_t)((char *)v31 - &v41[v36]) < 0x20) {
        goto LABEL_78;
      }
      uint64_t v45 = (v44 >> 2) + 1;
      uint64_t v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v47 = &v31[v46 / 0xFFFFFFFFFFFFFFFCLL];
      long long v42 = (int *)((char *)v42 - v46);
      BOOL v48 = &v41[4 * v37 - 16];
      uint64_t v49 = v31 - 4;
      uint64_t v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v51 = *(_OWORD *)v49;
        *(v48 - 1) = *((_OWORD *)v49 - 1);
        _OWORD *v48 = v51;
        v48 -= 2;
        v49 -= 8;
        v50 -= 8;
      }
      while (v50);
      double v31 = v47;
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_78:
        do
        {
          int v52 = *--v31;
          *--long long v42 = v52;
        }
        while (v31 != v35);
      }
      goto LABEL_41;
    }
    unsigned int v15 = v14 >> 28;
    if (v15) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v16 = v11[28] + 16 * v12;
    uint64_t v17 = *(void *)(v16 + 8);
    if (v17) {
      goto LABEL_15;
    }
LABEL_5:
    int v10 = v80 + 1;
  }
  while (v80 + 1 != v79);
  uint64_t v70 = *v78;
  unint64_t v71 = v78[1];
  if (*v78 != v71)
  {
    uint64_t v72 = *(void *)(a1 + 688);
    do
    {
      int v73 = *v70++;
      *(void *)(v72 + (((unint64_t)((uint64_t)v73 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v73 >> 1));
    }
    while (v70 != v71);
  }
LABEL_68:
  uint64_t v74 = *a3;
  long long v75 = a3[1];
  if (*a3 != v75)
  {
    uint64_t v76 = *(void *)(a1 + 688);
    do
    {
      int v77 = *v74++;
      *(void *)(v76 + (((unint64_t)((uint64_t)v77 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << (v77 >> 1));
    }
    while (v74 != v75);
  }
}

_DWORD *operations_research::sat::SatSolver::BumpReasonActivities(_DWORD *result, int **a2)
{
  int v2 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    int v4 = result;
    do
    {
      uint64_t v5 = (void *)v4[26];
      uint64_t v6 = v5[15];
      unsigned int v7 = *(_DWORD *)(v6 + 8 * (*v2 >> 1));
      if ((v7 & 0xFFFFFFE) == 0) {
        goto LABEL_4;
      }
      uint64_t v8 = (uint64_t)*v2 >> 1;
      uint64_t v9 = v8;
      if (v7 >> 28 == 3)
      {
        uint64_t v9 = *(int *)(v5[19] + 4 * v8);
        int v10 = *(_DWORD *)(v6 + 8 * v9) >> 28;
        if (v10)
        {
LABEL_8:
          int v11 = (operations_research::sat::LiteralWatchers *)v4[4];
          if (v10 != *((_DWORD *)v11 + 8)) {
            goto LABEL_9;
          }
          goto LABEL_16;
        }
      }
      else
      {
        int v10 = v7 >> 28;
        if (v7 >> 28) {
          goto LABEL_8;
        }
      }
      int v11 = (operations_research::sat::LiteralWatchers *)v4[4];
      if (*(_DWORD *)(v5[31] + 4 * v9) != *((_DWORD *)v11 + 8))
      {
LABEL_9:
        if (v7 >> 28 != 3) {
          goto LABEL_10;
        }
        goto LABEL_18;
      }
LABEL_16:
      unsigned int v14 = (int *)operations_research::sat::LiteralWatchers::ReasonClause(v11, *(_DWORD *)(v6 + 8 * v8 + 4));
      if (v14)
      {
        uint64_t result = (_DWORD *)operations_research::sat::SatSolver::BumpClauseActivity((uint64_t)v4, v14);
        goto LABEL_4;
      }
      uint64_t v5 = (void *)v4[26];
      uint64_t v6 = v5[15];
      unsigned int v7 = *(_DWORD *)(v6 + 8 * v8);
      if (v7 >> 28 != 3)
      {
LABEL_10:
        uint64_t v12 = v8;
        if (v7 >> 28 != 3) {
          goto LABEL_11;
        }
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v8 = *(int *)(v5[19] + 4 * v8);
      unsigned int v7 = *(_DWORD *)(v6 + 8 * v8);
      uint64_t v12 = v8;
      if (v7 >> 28 != 3)
      {
LABEL_11:
        unsigned int v13 = v7 >> 28;
        if (v13) {
          goto LABEL_12;
        }
        goto LABEL_20;
      }
LABEL_19:
      uint64_t v12 = *(int *)(v5[19] + 4 * v8);
      unsigned int v13 = *(_DWORD *)(v6 + 8 * v12) >> 28;
      if (v13)
      {
LABEL_12:
        uint64_t result = (_DWORD *)v4[5];
        if (v13 == result[8]) {
          goto LABEL_21;
        }
        goto LABEL_4;
      }
LABEL_20:
      uint64_t result = (_DWORD *)v4[5];
      if (*(_DWORD *)(v5[31] + 4 * v12) == result[8])
      {
LABEL_21:
        uint64_t result = (_DWORD *)operations_research::sat::PbConstraints::ReasonPbConstraint((operations_research::sat::PbConstraints *)result, *(_DWORD *)(v6 + 8 * v8 + 4));
        if (result) {
          uint64_t result = (_DWORD *)operations_research::sat::PbConstraints::BumpActivity(v4[5], (uint64_t)result);
        }
      }
LABEL_4:
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void operations_research::sat::SatSolver::ComputePBConflict(uint64_t a1, int a2, uint64_t a3, operations_research::sat::MutableUpperBoundedLinearConstraint *this, _DWORD *a5)
{
  uint64_t v58 = a3;
  LODWORD(v56[0]) = 0;
  if ((a3 & 0x8000000000000000) == 0) {
    google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v58, (int)v56, "slack < 0");
  }
  uint64_t v8 = a2;
  for (unsigned int i = a2 - 1; ; --i)
  {
    int v10 = *(void **)(a1 + 208);
    uint64_t v11 = v10[9];
    unint64_t v12 = *(int *)(v11 + 4 * v8);
    int v13 = (int)v12 >> 1;
    uint64_t v14 = *(void *)this;
    uint64_t v15 = *(void *)(*(void *)this + 8 * ((int)v12 >> 1));
    if (v15 >= 0) {
      uint64_t v16 = *(void *)(*(void *)this + 8 * v13);
    }
    else {
      uint64_t v16 = -v15;
    }
    if (!v15) {
      goto LABEL_3;
    }
    char v17 = v12 & 0x3E | (v15 < 1);
    uint64_t v18 = v10[3];
    if (((*(void *)(v18 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
      goto LABEL_3;
    }
    uint64_t v19 = (uint64_t)(int)v12 >> 1;
    int v20 = *(unsigned __int8 *)(*(void *)(a1 + 224) + 133);
    uint64_t v21 = 8 * v19;
    if (*(unsigned char *)(*(void *)(a1 + 224) + 133))
    {
      uint64_t v23 = *((void *)this + 3);
      uint64_t v22 = *((void *)this + 4);
      uint64_t v24 = v16 - (v22 - v23);
      if (v24 >= 1)
      {
        *((void *)this + 3) = v22 - v16;
        *((void *)this + 4) = v22 - v24;
        if (*(uint64_t *)(v14 + v21) > 0) {
          uint64_t v25 = v22 - v23;
        }
        else {
          uint64_t v25 = v23 - v22;
        }
        *(void *)(v14 + v21) = v25;
        if (v22 - v23 >= 0) {
          uint64_t v16 = v22 - v23;
        }
        else {
          uint64_t v16 = v23 - v22;
        }
      }
    }
    v58 += v16;
    if (v58 < 0) {
      goto LABEL_3;
    }
    if (v8 < 1) {
      break;
    }
    uint64_t v26 = v10[15];
    unsigned int v27 = (*(_DWORD *)(v26 + v21) >> 1) & 0x7FFFFFF;
    unint64_t v28 = (int *)(v11 + 4 * i);
    int v29 = v8;
    while (1)
    {
      unint64_t v30 = *v28;
      uint64_t v31 = *(void *)(v14 + 8 * ((int)v30 >> 1));
      if (v31)
      {
        if ((*(void *)(v18 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v30 & 0x3Eu | (v31 < 1)))) {
          break;
        }
      }
      --v28;
      if (--v29 <= 0) {
        goto LABEL_36;
      }
    }
    unsigned int v32 = (*(_DWORD *)(v26 + 8 * (*v28 >> 1)) >> 1) & 0x7FFFFFF;
    if (v32 < v27) {
      goto LABEL_37;
    }
    if (operations_research::sat::SatSolver::ResolvePBConflict(a1, v13, (unint64_t)this, &v58))
    {
      if (!*(unsigned char *)(*(void *)(a1 + 224) + 133)) {
        operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficients((uint64_t *)this);
      }
      uint64_t v33 = v58;
    }
    else
    {
      unint64_t v34 = *(const operations_research::sat::Trail **)(a1 + 208);
      if (*(unsigned char *)(*(void *)(a1 + 224) + 133)) {
        uint64_t v33 = operations_research::sat::MutableUpperBoundedLinearConstraint::ComputeSlackForTrailPrefix(this, v34, v8);
      }
      else {
        uint64_t v33 = operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficientsAndComputeSlackForTrailPrefix(this, v34, v8);
      }
      uint64_t v58 = v33;
    }
    LODWORD(v56[0]) = 0;
    if ((v33 & 0x8000000000000000) == 0) {
      google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,int>((int)&v58, (int)v56, "slack < 0");
    }
    if ((*((void *)this + 3) & 0x8000000000000000) != 0)
    {
      *a5 = -1;
      return;
    }
LABEL_3:
    --v8;
  }
LABEL_36:
  unsigned int v32 = 0;
LABEL_37:
  if (!v20) {
    operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceCoefficients((uint64_t *)this);
  }
  unint64_t v35 = (uint64_t *)operator new(8 * (v32 + 2));
  bzero(v35, 8 * v32 + 16);
  uint64_t v36 = (char *)operator new(8 * (v32 + 2));
  bzero(v36, 8 * v32 + 16);
  uint64_t v37 = (int *)*((void *)this + 12);
  unint64_t v38 = (int *)*((void *)this + 13);
  if (v37 != v38)
  {
    uint64_t v39 = *(void *)this;
    do
    {
      uint64_t v42 = *v37;
      uint64_t v43 = *(void *)(v39 + 8 * v42);
      if (v43 >= 0) {
        uint64_t v41 = *(void *)(v39 + 8 * v42);
      }
      else {
        uint64_t v41 = -v43;
      }
      if (v43)
      {
        uint64_t v44 = *(void *)(a1 + 208);
        uint64_t v45 = *(void *)(v44 + 24);
        unint64_t v40 = &v36[8 * v32 + 8];
        if (((*(void *)(v45 + (((unint64_t)(2 * (int)v42) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v42 & 0x1Fu))) & 3) != 0)
        {
          unint64_t v46 = ((unint64_t)*(unsigned int *)(*(void *)(v44 + 120) + 8 * v42) >> 1) & 0x7FFFFFF;
          unint64_t v40 = &v36[8 * v32 + 8];
          if (v46 <= v32)
          {
            if ((*(void *)(v45 + (((unint64_t)(2 * (int)v42) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> ((v43 < 1) | (2 * (v42 & 0x1F))))) {
              v35[v46] += v41;
            }
            unint64_t v40 = &v36[8 * v46];
          }
        }
        if (*(void *)v40 > v41) {
          uint64_t v41 = *(void *)v40;
        }
        *(void *)unint64_t v40 = v41;
      }
      ++v37;
    }
    while (v37 != v38);
  }
  unint64_t v47 = 0;
  uint64_t v48 = *v35;
  do
  {
    v48 += v35[v47 / 8 + 1];
    v35[v47 / 8 + 1] = v48;
    v47 += 8;
  }
  while (8 * v32 + 8 != v47);
  uint64_t v49 = 8 * v32;
  uint64_t v50 = *(void *)&v36[v49 + 8];
  do
  {
    if (*(void *)&v36[v49] > v50) {
      uint64_t v50 = *(void *)&v36[v49];
    }
    *(void *)&v36[v49] = v50;
    v49 -= 8;
  }
  while (v49 != -8);
  uint64_t v51 = *((void *)this + 3);
  if (*v35 <= v51)
  {
    uint64_t v52 = 0;
    uint64_t v53 = v32 + 1;
    while (1)
    {
      uint64_t v54 = v35[v52];
      uint64_t v57 = v54;
      v56[0] = v51;
      if (v54 > v51) {
        google::MakeCheckOpString<gtl::IntType<operations_research::sat::Coefficient_tag_,long long>,gtl::IntType<operations_research::sat::Coefficient_tag_,long long>>((int)&v57, (int)v56, "level_sum <= conflict->Rhs()");
      }
      if (v51 - v54 < *(void *)&v36[8 * v52 + 8]) {
        break;
      }
      if (v53 == ++v52)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v56, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2071);
        uint64_t v55 = (void *)google::LogMessage::stream((google::LogMessage *)v56);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, "The code should never reach here.");
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v56);
      }
    }
    *a5 = v52;
  }
  else
  {
    *a5 = -1;
  }
  operator delete(v36);
  operator delete(v35);
}

void sub_23CD832E4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD832EC(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD832F4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD832FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  operator delete(v12);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatSolver::ComputeBacktrackLevel(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1] - *a2;
  if ((unint64_t)v3 < 5) {
    return 0;
  }
  unint64_t v4 = v3 >> 2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 208) + 120);
  if (v4 <= 2) {
    unint64_t v4 = 2;
  }
  if (v4 < 3)
  {
    LODWORD(result) = 0;
    uint64_t v7 = 1;
LABEL_17:
    unint64_t v12 = (int *)(v2 + 4 * v7);
    unint64_t v13 = v4 - v7;
    do
    {
      int v14 = *v12++;
      int v15 = (*(_DWORD *)(v5 + 8 * (v14 >> 1)) >> 1) & 0x7FFFFFF;
      if ((int)result <= v15) {
        uint64_t result = v15;
      }
      else {
        uint64_t result = result;
      }
      --v13;
    }
    while (v13);
    return result;
  }
  int v8 = 0;
  int v9 = 0;
  uint64_t v7 = (v4 - 1) | 1;
  int v10 = (int *)(v2 + 8);
  unint64_t v11 = (v4 - 1) & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    if (v8 <= ((*(_DWORD *)(v5 + 8 * (*(v10 - 1) >> 1)) >> 1) & 0x7FFFFFF)) {
      int v8 = (*(_DWORD *)(v5 + 8 * (*(v10 - 1) >> 1)) >> 1) & 0x7FFFFFF;
    }
    if (v9 <= ((*(_DWORD *)(v5 + 8 * (*v10 >> 1)) >> 1) & 0x7FFFFFF)) {
      int v9 = (*(_DWORD *)(v5 + 8 * (*v10 >> 1)) >> 1) & 0x7FFFFFF;
    }
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v8 <= v9) {
    uint64_t result = v9;
  }
  else {
    uint64_t result = v8;
  }
  if (v4 - 1 != ((v4 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_17;
  }
  return result;
}

void operations_research::sat::SatDecisionPolicy::OnConflict(operations_research::sat::SatDecisionPolicy *this)
{
  if (*(unsigned char *)(*(void *)this + 96))
  {
    ++*((void *)this + 11);
    int v2 = *(_DWORD *)(*((void *)this + 1) + 12);
    unint64_t v4 = (char *)*((void *)this + 13);
    unint64_t v3 = *((void *)this + 14);
    if ((unint64_t)v4 >= v3)
    {
      uint64_t v6 = (char **)((char *)this + 96);
      uint64_t v7 = (char *)*((void *)this + 12);
      uint64_t v8 = (v4 - v7) >> 4;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v10 = v3 - (void)v7;
      if (v10 >> 3 > v9) {
        unint64_t v9 = v10 >> 3;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v12 = (char *)operator new(16 * v11);
      }
      else
      {
        unint64_t v12 = 0;
      }
      unint64_t v13 = &v12[16 * v8];
      *(_DWORD *)unint64_t v13 = v2;
      *((void *)v13 + 1) = 1;
      uint64_t v5 = v13 + 16;
      if (v4 != v7)
      {
        do
        {
          *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
          v13 -= 16;
          v4 -= 16;
        }
        while (v4 != v7);
        unint64_t v4 = *v6;
      }
      *((void *)this + 12) = v13;
      *((void *)this + 13) = v5;
      *((void *)this + 14) = &v12[16 * v11];
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v4 = v2;
      *((void *)v4 + 1) = 1;
      uint64_t v5 = v4 + 16;
    }
    *((void *)this + 13) = v5;
  }
}

uint64_t operations_research::sat::SatSolver::EnqueueDecisionAndBacktrackOnConflict(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  for (uint64_t i = *(void *)(a1 + 56); v3 != i; v3 += 8)
  {
    if (*(_DWORD *)(*(void *)v3 + 36) != *(_DWORD *)(*(void *)(a1 + 208) + 12))
    {
      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 845);
      int v14 = (void *)google::LogMessage::stream((google::LogMessage *)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Check failed: PropagationIsDone() ", 34);
      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v15);
    }
  }
  if (!*(unsigned char *)(a1 + 496))
  {
    *(_DWORD *)(*(void *)(a1 + 312) + 8 * *(int *)(a1 + 304) + 4) = a2;
    uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 208) + 12);
    int v7 = *(_DWORD *)(a1 + 304);
    int v8 = v7;
    int v9 = v7;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 312);
      unint64_t v11 = *(int *)(v10 + 8 * v9++ + 4);
      unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 208) + 24) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v12 >> v11) & 1) == 0)
      {
        if ((v12 >> (v11 & 0x3F ^ 1)))
        {
          *(_DWORD *)(v10 + 8 * v8 + 4) = v11;
          return v5;
        }
        int v13 = operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(a1, v11);
        if (v13 >= (int)v5) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v13;
        }
        if (v13 == -1) {
          return v5;
        }
        if (*(_DWORD *)(a1 + 304) <= v8) {
          int v9 = *(_DWORD *)(a1 + 304);
        }
        int v8 = *(_DWORD *)(a1 + 304);
      }
      if (v9 > v7) {
        return v5;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_23CD836A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SatSolver::SolveInternal(operations_research::sat::SatSolver *this, operations_research::TimeLimit *a2)
{
  uint64_t v2 = 1;
  if (*((unsigned char *)this + 496)) {
    return v2;
  }
  *((void *)this + 61) = 0;
  *((unsigned char *)this + 472) = 1;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(this);
  *((void *)this + 6google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = CurrentTimeNanos;
  uint64_t v6 = *((void *)this + 28);
  if (*(unsigned char *)(v6 + 99))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v62, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1108);
    int v7 = (void *)google::LogMessage::stream((google::LogMessage *)v62);
    int v8 = (operations_research *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Initial memory usage: ", 22);
    operations_research::MemoryUsage(v8, (uint64_t)&__p);
    if ((v61 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v61 & 0x80u) == 0) {
      uint64_t v10 = v61;
    }
    else {
      uint64_t v10 = v60;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v10);
    if ((char)v61 < 0) {
      operator delete(__p);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v62);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1109);
    unint64_t v11 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Number of variables: ", 21);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1110);
    unint64_t v12 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Number of clauses (size > 2): ", 30);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1112);
    int v13 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of binary clauses: ", 26);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1114);
    int v14 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Number of linear constraints: ", 30);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1116);
    int v15 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Number of fixed variables: ", 27);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1117);
    uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Number of watched clauses: ", 27);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__p);
    google::LogMessage::LogMessage((google::LogMessage *)v62, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1119);
    char v17 = (void *)google::LogMessage::stream((google::LogMessage *)v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Parameters: ", 12);
    google::protobuf::Message::ShortDebugString(&__p);
  }
  uint64_t v18 = (operations_research::sat::RestartPolicy **)((char *)this + 232);
  uint64_t v19 = *(int *)(v6 + 404) + (uint64_t)*(int *)(*((void *)this + 29) + 8);
  uint64_t v20 = *((void *)this + 47);
  uint64_t v21 = 10000 * (v20 / 10000) + 10000;
  uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v23 = *(void *)(v6 + 288);
  uint64_t v24 = v23 + v20;
  if (v23 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v25 = v24;
  }
  while (1)
  {
    while (1)
    {
      if (a2)
      {
        uint64_t v26 = (uint64_t *)*((void *)this + 5);
        double v27 = ((double)*(uint64_t *)(*((void *)this + 3) + 280)
             + (double)(**((void **)this + 26) + *(int *)(*((void *)this + 26) + 12)) * 8.0
             + (double)*(uint64_t *)(*((void *)this + 4) + 192) * 4.0
             + (double)*(uint64_t *)(*((void *)this + 4) + 200)
             + (double)v26[51] * 20.0
             + (double)v26[53] * 2.0
             + (double)v26[52])
            * 0.00000001;
        double v28 = *((double *)a2 + 14) + v27 - *((double *)this + 163);
        *((double *)a2 + 14) = v28;
        *((double *)this + 163) = v27;
        int v29 = (unsigned __int8 *)*((void *)a2 + 15);
        if (v29)
        {
          unsigned __int8 v30 = atomic_load(v29);
          if (v30) {
            goto LABEL_72;
          }
          double v28 = *((double *)a2 + 14);
        }
        if (fmax(*((double *)a2 + 13) - v28, 0.0) <= 0.0) {
          goto LABEL_72;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v31 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v32 = v31;
        uint64_t v33 = *((void *)a2 + 3) <= v31 - *((void *)a2 + 1) ? v31 - *((void *)a2 + 1) : *((void *)a2 + 3);
        operations_research::RunningMax<long long>::Add((int *)a2 + 8, v33);
        *((void *)a2 + 1) = v32;
        if (*(void *)(*((void *)a2 + 5) + 8 * *((int *)a2 + 17)) + v32 >= *((void *)a2 + 2))
        {
          if (!FLAGS_time_limit_use_usertime) {
            goto LABEL_71;
          }
          double v34 = *((double *)a2 + 12);
          if (*((unsigned char *)a2 + 72))
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CurrentTimeNanos);
            double v35 = v34 + (double)(CurrentTimeNanos - *((void *)a2 + 10) + *((void *)a2 + 11)) * -0.000000001;
            if (v35 <= 0.0001) {
              goto LABEL_71;
            }
          }
          else
          {
            double v35 = v34 + (double)*((uint64_t *)a2 + 11) * -0.000000001;
            if (v35 <= 0.0001)
            {
LABEL_71:
              *((void *)a2 + 2) = 0;
LABEL_72:
              if (*(unsigned char *)(*((void *)this + 28) + 99))
              {
                google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1153);
                uint64_t v53 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"The time limit has been reached. Aborting.", 42);
                goto LABEL_76;
              }
LABEL_77:
              uint64_t v2 = 3;
              goto LABEL_78;
            }
          }
          *((void *)a2 + 2) = *((void *)a2 + 1) + (uint64_t)(v35 * 1000000000.0);
        }
      }
      uint64_t v36 = *((void *)this + 47);
      if (v36 >= v25)
      {
        if (*(unsigned char *)(*((void *)this + 28) + 99))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1160);
          uint64_t v52 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"The conflict limit has been reached. Aborting.", 46);
          goto LABEL_76;
        }
        goto LABEL_77;
      }
      if (v36 < v21) {
        goto LABEL_34;
      }
      uint64_t v37 = operations_research::sysinfo::MemoryUsageProcess((operations_research::sysinfo *)CurrentTimeNanos);
      uint64_t v38 = *((void *)this + 28);
      if (v37 > *(void *)(v38 + 296) << 20)
      {
        if (*(unsigned char *)(v38 + 99))
        {
          google::LogMessage::LogMessage((google::LogMessage *)&__p, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1174);
          uint64_t v54 = (void *)google::LogMessage::stream((google::LogMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"The memory limit has been reached. Aborting.", 44);
LABEL_76:
          google::LogMessage::~LogMessage((google::LogMessage *)&__p);
        }
        goto LABEL_77;
      }
      uint64_t v21 = 10000 * (v36 / 10000) + 10000;
      uint64_t v36 = *((void *)this + 47);
LABEL_34:
      if (v36 >= v22)
      {
        google::LogMessage::LogMessage((google::LogMessage *)v62, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1183);
        uint64_t v39 = (void *)google::LogMessage::stream((google::LogMessage *)v62);
        operations_research::sat::SatSolver::RunningStatisticsString(this, (uint64_t)&__p);
        if ((v61 & 0x80u) == 0) {
          unint64_t v40 = &__p;
        }
        else {
          unint64_t v40 = __p;
        }
        if ((v61 & 0x80u) == 0) {
          uint64_t v41 = v61;
        }
        else {
          uint64_t v41 = v60;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        if ((char)v61 < 0) {
          operator delete(__p);
        }
        google::LogMessage::~LogMessage((google::LogMessage *)v62);
        uint64_t v22 = 10000 * (*((void *)this + 47) / 10000) + 10000;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this);
      if (CurrentTimeNanos) {
        break;
      }
      if (*((unsigned char *)this + 496)) {
        goto LABEL_70;
      }
    }
    if (*((unsigned char *)this + 496)) {
      goto LABEL_70;
    }
    uint64_t v57 = v19;
    uint64_t v58 = v18;
    int v42 = *((_DWORD *)this + 76);
    int v43 = *((_DWORD *)this + 85);
    if (v42 < v43) {
      break;
    }
LABEL_59:
    if (*(_DWORD *)(*((void *)this + 26) + 12) == *((_DWORD *)this + 4)) {
      goto LABEL_82;
    }
    uint64_t v18 = v58;
    if (operations_research::sat::RestartPolicy::ShouldRestart(*v58)) {
      operations_research::sat::SatSolver::Backtrack(this, *((_DWORD *)this + 85));
    }
    uint64_t v19 = v57;
    if (!*((_DWORD *)this + 76))
    {
      uint64_t v48 = *((int *)*v58 + 2);
      if (v57 <= v48)
      {
        uint64_t v49 = *((void *)this + 28);
        uint64_t v50 = *(int *)(v49 + 404);
        operations_research::sat::SatSolver::MinimizeSomeClauses(this, *(_DWORD *)(v49 + 408));
        if (*((unsigned char *)this + 496))
        {
LABEL_70:
          uint64_t v2 = 1;
          goto LABEL_78;
        }
        if (*(_DWORD *)(*((void *)this + 26) + 12) == *((_DWORD *)this + 4))
        {
LABEL_82:
          uint64_t v2 = 2;
          goto LABEL_78;
        }
        uint64_t v19 = v50 + v48;
      }
    }
    unsigned int Branch = operations_research::sat::SatDecisionPolicy::NextBranch(*((std::vector<int> **)this + 30));
    operations_research::sat::SatSolver::EnqueueNewDecision((uint64_t)this, Branch);
  }
  uint64_t v56 = *((void *)this + 46);
  int v44 = *((_DWORD *)this + 76);
  while (1)
  {
    uint64_t v45 = *((void *)this + 39);
    unint64_t v46 = *(int *)(v45 + 8 * v44++ + 4);
    unint64_t v47 = *(void *)(*(void *)(*((void *)this + 26) + 24) + ((v46 >> 3) & 0x1FFFFFFFFFFFFFF8));
    if ((v47 >> v46)) {
      goto LABEL_53;
    }
    if ((v47 >> (v46 & 0x3F ^ 1))) {
      break;
    }
    if (operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v46) == -1) {
      goto LABEL_81;
    }
    if (*((_DWORD *)this + 76) <= v42) {
      int v44 = *((_DWORD *)this + 76);
    }
    int v42 = *((_DWORD *)this + 76);
LABEL_53:
    if (v44 >= v43)
    {
      *((void *)this + 46) = v56;
      *((_DWORD *)this + 85) = v42;
      goto LABEL_59;
    }
  }
  *(_DWORD *)(v45 + 8 * v42 + 4) = v46;
LABEL_81:
  *((void *)this + 46) = v56;
  *((_DWORD *)this + 85) = *((_DWORD *)this + 76);
  uint64_t v2 = *((unsigned __int8 *)this + 496);
LABEL_78:
  operations_research::sat::SatSolver::StatusWithLog(this, v2);
  return v2;
}

void sub_23CD83F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD83F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD83F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD83F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a18);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a18);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SatSolver::StatusWithLog(operations_research::sat::SatSolver *a1, uint64_t a2)
{
  if (*(unsigned char *)(*((void *)a1 + 28) + 99))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 935);
    unint64_t v4 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    operations_research::sat::SatSolver::RunningStatisticsString(a1, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v12);
    google::LogMessage::LogMessage((google::LogMessage *)v12, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 936);
    int v7 = (void *)google::LogMessage::stream((google::LogMessage *)v12);
    operations_research::sat::SatSolver::StatusString((uint64_t)a1, a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v8 = &__p;
    }
    else {
      int v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    google::LogMessage::~LogMessage((google::LogMessage *)v12);
  }
  return a2;
}

void sub_23CD8419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatSolver::RunningStatisticsString(operations_research::sat::SatSolver *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  v15[18] = *(double *)MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 472))
  {
    this = (operations_research::sat::SatSolver *)absl::lts_2020_02_25::GetCurrentTimeNanos(this);
    unint64_t v4 = (char *)this + *((void *)v2 + 61) - *((void *)v2 + 60);
  }
  else
  {
    unint64_t v4 = (char *)*((void *)this + 61);
  }
  operations_research::MemoryUsage(this, (uint64_t)__p);
  *(void *)&double v5 = *((unsigned int *)v2 + 76);
  uint64_t v6 = (double *)*((void *)v2 + 4);
  double v7 = v6[44];
  *(void *)&double v8 = ((uint64_t)(*((void *)v6 + 39) - *((void *)v6 + 38)) >> 3) - *(void *)&v7;
  double v9 = *(double *)(*((void *)v2 + 3) + 216);
  *(void *)&double v10 = *(unsigned int *)(*((void *)v2 + 29) + 8);
  *(void *)&double v11 = (*((_DWORD *)v2 + 4) - *((_DWORD *)v2 + 86));
  v15[0] = (double)(uint64_t)v4 * 0.000000001;
  *(void *)&v15[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  *(void *)&void v15[2] = __p;
  double v12 = *((double *)v2 + 47);
  *(void *)&v15[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  v15[4] = v12;
  *(void *)&v15[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  void v15[6] = v5;
  *(void *)&v15[7] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  v15[8] = v8;
  *(void *)&v15[9] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v15[10] = v7;
  *(void *)&v15[11] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v15[12] = v9;
  *(void *)&v15[13] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  v15[14] = v10;
  *(void *)&v15[15] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  unsigned char v15[16] = v11;
  *(void *)&v15[17] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<int>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("%6.2fs, mem:%s, fails:%d, depth:%d, clauses:%d, tmp:%d, bin:%u, restarts:%d, vars:%d", 84, (uint64_t)v15, 9, a2);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23CD84370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatSolver::StatusString(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  v200[2] = *(double *)MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 472)) {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1)
  }
       - *(void *)(a1 + 480)
       + *(void *)(a1 + 488);
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v6 = *(void *)(a1 + 488);
  }
  operations_research::sat::SatStatusString(a2, (char *)v144);
  double v196 = COERCE_DOUBLE(v144);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("\n  status: %s\n", 14, (uint64_t)&v196, 1, (uint64_t)&v146);
  double v7 = (double)v6 * 0.000000001;
  double v196 = v7;
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  time: %fs\n", 12, (uint64_t)&v196, 1, (uint64_t)v142);
  if ((v143 & 0x80u) == 0) {
    double v8 = v142;
  }
  else {
    double v8 = (void **)v142[0];
  }
  if ((v143 & 0x80u) == 0) {
    std::string::size_type v9 = v143;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v142[1];
  }
  double v10 = std::string::append(&v146, (const std::string::value_type *)v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  operations_research::MemoryUsage((operations_research *)v10, (uint64_t)v138);
  double v196 = COERCE_DOUBLE(v138);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  memory: %s\n", 13, (uint64_t)&v196, 1, (uint64_t)v140);
  if ((v141 & 0x80u) == 0) {
    double v12 = v140;
  }
  else {
    double v12 = (void **)v140[0];
  }
  if ((v141 & 0x80u) == 0) {
    std::string::size_type v13 = v141;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v140[1];
  }
  char v14 = std::string::append(&v147, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v148.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  double v196 = *(double *)(a1 + 376);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  double v198 = (double)*(uint64_t *)&v196 / v7;
  unint64_t v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num failures: %d  (%.0f /sec)\n", 32, (uint64_t)&v196, 2, (uint64_t)v136);
  if ((v137 & 0x80u) == 0) {
    uint64_t v16 = v136;
  }
  else {
    uint64_t v16 = (void **)v136[0];
  }
  if ((v137 & 0x80u) == 0) {
    std::string::size_type v17 = v137;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v136[1];
  }
  uint64_t v18 = std::string::append(&v148, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v149.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  double v196 = *(double *)(a1 + 368);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  double v198 = (double)*(uint64_t *)&v196 / v7;
  unint64_t v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num branches: %d (%.0f /sec)\n", 31, (uint64_t)&v196, 2, (uint64_t)v134);
  if ((v135 & 0x80u) == 0) {
    uint64_t v20 = v134;
  }
  else {
    uint64_t v20 = (void **)v134[0];
  }
  if ((v135 & 0x80u) == 0) {
    std::string::size_type v21 = v135;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)v134[1];
  }
  uint64_t v22 = std::string::append(&v149, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v150.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  *(void *)&double v196 = **(void **)(a1 + 208) + *(int *)(*(void *)(a1 + 208) + 12) - *(void *)(a1 + 368);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  double v198 = (double)*(uint64_t *)&v196 / v7;
  unint64_t v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num propagations: %d  (%.0f /sec)\n", 36, (uint64_t)&v196, 2, (uint64_t)v132);
  if ((v133 & 0x80u) == 0) {
    uint64_t v24 = v132;
  }
  else {
    uint64_t v24 = (void **)v132[0];
  }
  if ((v133 & 0x80u) == 0) {
    std::string::size_type v25 = v133;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)v132[1];
  }
  uint64_t v26 = std::string::append(&v150, (const std::string::value_type *)v24, v25);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v151.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  double v196 = *(double *)(*(void *)(a1 + 24) + 272);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary propagations: %d\n", 30, (uint64_t)&v196, 1, (uint64_t)v130);
  if ((v131 & 0x80u) == 0) {
    double v28 = v130;
  }
  else {
    double v28 = (void **)v130[0];
  }
  if ((v131 & 0x80u) == 0) {
    std::string::size_type v29 = v131;
  }
  else {
    std::string::size_type v29 = (std::string::size_type)v130[1];
  }
  unsigned __int8 v30 = std::string::append(&v151, (const std::string::value_type *)v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  double v196 = *(double *)(*(void *)(a1 + 24) + 280);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary inspections: %d\n", 29, (uint64_t)&v196, 1, (uint64_t)v128);
  if ((v129 & 0x80u) == 0) {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v32 = v128;
  }
  else {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v32 = (void **)v128[0];
  }
  if ((v129 & 0x80u) == 0) {
    std::string::size_type v33 = v129;
  }
  else {
    std::string::size_type v33 = (std::string::size_type)v128[1];
  }
  double v34 = std::string::append(&v152, (const std::string::value_type *)v32, v33);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v153.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  double v196 = *(double *)(*(void *)(a1 + 24) + 304);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary redundant implications: %d\n", 40, (uint64_t)&v196, 1, (uint64_t)v126);
  if ((v127 & 0x80u) == 0) {
    uint64_t v36 = v126;
  }
  else {
    uint64_t v36 = (void **)v126[0];
  }
  if ((v127 & 0x80u) == 0) {
    std::string::size_type v37 = v127;
  }
  else {
    std::string::size_type v37 = (std::string::size_type)v126[1];
  }
  uint64_t v38 = std::string::append(&v153, (const std::string::value_type *)v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v154.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  double v40 = *(double *)(a1 + 392);
  double v196 = *(double *)(a1 + 384);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  double v198 = v40;
  unint64_t v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num classic minimizations: %d  (literals removed: %d)\n", 56, (uint64_t)&v196, 2, (uint64_t)v124);
  if ((v125 & 0x80u) == 0) {
    uint64_t v41 = v124;
  }
  else {
    uint64_t v41 = (void **)v124[0];
  }
  if ((v125 & 0x80u) == 0) {
    std::string::size_type v42 = v125;
  }
  else {
    std::string::size_type v42 = (std::string::size_type)v124[1];
  }
  int v43 = std::string::append(&v154, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v155.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  uint64_t v45 = *(void *)(a1 + 24);
  double v47 = *(double *)(v45 + 288);
  double v46 = *(double *)(v45 + 296);
  double v196 = v47;
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  double v198 = v46;
  unint64_t v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num binary minimizations: %d  (literals removed: %d)\n", 55, (uint64_t)&v196, 2, (uint64_t)v122);
  if ((v123 & 0x80u) == 0) {
    uint64_t v48 = v122;
  }
  else {
    uint64_t v48 = (void **)v122[0];
  }
  if ((v123 & 0x80u) == 0) {
    std::string::size_type v49 = v123;
  }
  else {
    std::string::size_type v49 = (std::string::size_type)v122[1];
  }
  uint64_t v50 = std::string::append(&v155, (const std::string::value_type *)v48, v49);
  long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v156.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  double v196 = *(double *)(*(void *)(a1 + 32) + 192);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num inspected clauses: %d\n", 28, (uint64_t)&v196, 1, (uint64_t)v120);
  if ((v121 & 0x80u) == 0) {
    uint64_t v52 = v120;
  }
  else {
    uint64_t v52 = (void **)v120[0];
  }
  if ((v121 & 0x80u) == 0) {
    std::string::size_type v53 = v121;
  }
  else {
    std::string::size_type v53 = (std::string::size_type)v120[1];
  }
  uint64_t v54 = std::string::append(&v156, (const std::string::value_type *)v52, v53);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  v157.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  double v196 = *(double *)(*(void *)(a1 + 32) + 200);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num inspected clause_literals: %d\n", 36, (uint64_t)&v196, 1, (uint64_t)v118);
  if ((v119 & 0x80u) == 0) {
    uint64_t v56 = v118;
  }
  else {
    uint64_t v56 = (void **)v118[0];
  }
  if ((v119 & 0x80u) == 0) {
    std::string::size_type v57 = v119;
  }
  else {
    std::string::size_type v57 = (std::string::size_type)v118[1];
  }
  uint64_t v58 = std::string::append(&v157, (const std::string::value_type *)v56, v57);
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v158.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  *(double *)&long long v59 = (double)*(uint64_t *)(a1 + 408) / (double)*(uint64_t *)(a1 + 376);
  double v196 = *(double *)(a1 + 408);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  double v198 = *(double *)&v59;
  unint64_t v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num learned literals: %d  (avg: %.1f /clause)\n", 48, (uint64_t)&v196, 2, (uint64_t)v116);
  if ((v117 & 0x80u) == 0) {
    uint64_t v60 = v116;
  }
  else {
    uint64_t v60 = (void **)v116[0];
  }
  if ((v117 & 0x80u) == 0) {
    std::string::size_type v61 = v117;
  }
  else {
    std::string::size_type v61 = (std::string::size_type)v116[1];
  }
  uint64_t v62 = std::string::append(&v158, (const std::string::value_type *)v60, v61);
  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v159.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  *(double *)&long long v63 = (double)*(uint64_t *)(a1 + 400) / (double)*(uint64_t *)(a1 + 376);
  double v196 = *(double *)(a1 + 400);
  unint64_t v197 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  double v198 = *(double *)&v63;
  unint64_t v199 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num learned PB literals: %d  (avg: %.1f /clause)\n", 51, (uint64_t)&v196, 2, (uint64_t)v114);
  if ((v115 & 0x80u) == 0) {
    unint64_t v64 = v114;
  }
  else {
    unint64_t v64 = (void **)v114[0];
  }
  if ((v115 & 0x80u) == 0) {
    std::string::size_type v65 = v115;
  }
  else {
    std::string::size_type v65 = (std::string::size_type)v114[1];
  }
  uint64_t v66 = std::string::append(&v159, (const std::string::value_type *)v64, v65);
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  int v193 = *(std::string::value_type **)(a1 + 424);
  unint64_t v194 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  num subsumed clauses: %d\n", 27, (uint64_t)&v193, 1, (uint64_t)&v196);
  if (v198 >= 0.0) {
    long long v68 = (const std::string::value_type *)&v196;
  }
  else {
    long long v68 = *(const std::string::value_type **)&v196;
  }
  if (v198 >= 0.0) {
    std::string::size_type v69 = HIBYTE(v198);
  }
  else {
    std::string::size_type v69 = (std::string::size_type)v197;
  }
  uint64_t v70 = std::string::append(&v160, v68, v69);
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  int v190 = *(std::string::value_type **)(a1 + 432);
  int v191 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_clauses: %d\n", 31, (uint64_t)&v190, 1, (uint64_t)&v193);
  if ((v195 & 0x80u) == 0) {
    uint64_t v72 = (const std::string::value_type *)&v193;
  }
  else {
    uint64_t v72 = v193;
  }
  if ((v195 & 0x80u) == 0) {
    std::string::size_type v73 = v195;
  }
  else {
    std::string::size_type v73 = (std::string::size_type)v194;
  }
  uint64_t v74 = std::string::append(&v161, v72, v73);
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  v162.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  int v187 = *(std::string::value_type **)(a1 + 440);
  unint64_t v188 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_decisions: %d\n", 33, (uint64_t)&v187, 1, (uint64_t)&v190);
  if ((v192 & 0x80u) == 0) {
    uint64_t v76 = (const std::string::value_type *)&v190;
  }
  else {
    uint64_t v76 = v190;
  }
  if ((v192 & 0x80u) == 0) {
    std::string::size_type v77 = v192;
  }
  else {
    std::string::size_type v77 = (std::string::size_type)v191;
  }
  uint64_t v78 = std::string::append(&v162, v76, v77);
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  unint64_t v184 = *(std::string::value_type **)(a1 + 448);
  unint64_t v185 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_true: %d\n", 28, (uint64_t)&v184, 1, (uint64_t)&v187);
  if ((v189 & 0x80u) == 0) {
    uint64_t v80 = (const std::string::value_type *)&v187;
  }
  else {
    uint64_t v80 = v187;
  }
  if ((v189 & 0x80u) == 0) {
    std::string::size_type v81 = v189;
  }
  else {
    std::string::size_type v81 = (std::string::size_type)v188;
  }
  long long v82 = std::string::append(&v163, v80, v81);
  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v164.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  uint64_t v181 = *(std::string::value_type **)(a1 + 456);
  char v182 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_subsumed: %d\n", 32, (uint64_t)&v181, 1, (uint64_t)&v184);
  if ((v186 & 0x80u) == 0) {
    long long v84 = (const std::string::value_type *)&v184;
  }
  else {
    long long v84 = v184;
  }
  if ((v186 & 0x80u) == 0) {
    std::string::size_type v85 = v186;
  }
  else {
    std::string::size_type v85 = (std::string::size_type)v185;
  }
  uint64_t v86 = std::string::append(&v164, v84, v85);
  long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
  v165.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v87;
  v86->__r_.__value_.__l.__size_ = 0;
  v86->__r_.__value_.__r.__words[2] = 0;
  v86->__r_.__value_.__r.__words[0] = 0;
  int v178 = *(void **)(a1 + 464);
  char v179 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  minimization_num_removed_literals: %d\n", 40, (uint64_t)&v178, 1, (uint64_t)&v181);
  if ((v183 & 0x80u) == 0) {
    unint64_t v88 = (const std::string::value_type *)&v181;
  }
  else {
    unint64_t v88 = v181;
  }
  if ((v183 & 0x80u) == 0) {
    std::string::size_type v89 = v183;
  }
  else {
    std::string::size_type v89 = (std::string::size_type)v182;
  }
  uint64_t v90 = std::string::append(&v165, v88, v89);
  long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  long long v175 = *(void **)(*(void *)(a1 + 40) + 424);
  int v176 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  pb num threshold updates: %d\n", 31, (uint64_t)&v175, 1, (uint64_t)&v178);
  if ((v180 & 0x80u) == 0) {
    unsigned int v92 = (const std::string::value_type *)&v178;
  }
  else {
    unsigned int v92 = (const std::string::value_type *)v178;
  }
  if ((v180 & 0x80u) == 0) {
    std::string::size_type v93 = v180;
  }
  else {
    std::string::size_type v93 = (std::string::size_type)v179;
  }
  unint64_t v94 = std::string::append(&v166, v92, v93);
  long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  char v172 = *(void **)(*(void *)(a1 + 40) + 408);
  unint64_t v173 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  pb num constraint lookups: %d\n", 32, (uint64_t)&v172, 1, (uint64_t)&v175);
  if ((v177 & 0x80u) == 0) {
    unint64_t v96 = (const std::string::value_type *)&v175;
  }
  else {
    unint64_t v96 = (const std::string::value_type *)v175;
  }
  if ((v177 & 0x80u) == 0) {
    std::string::size_type v97 = v177;
  }
  else {
    std::string::size_type v97 = (std::string::size_type)v176;
  }
  unint64_t v98 = std::string::append(&v167, v96, v97);
  long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  v168.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v99;
  v98->__r_.__value_.__l.__size_ = 0;
  v98->__r_.__value_.__r.__words[2] = 0;
  v98->__r_.__value_.__r.__words[0] = 0;
  v171.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(a1 + 40) + 416);
  v171.__r_.__value_.__l.__size_ = (std::string::size_type)absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<long long>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  pb num inspected constraint literals: %d\n", 43, (uint64_t)&v171, 1, (uint64_t)&v172);
  if ((v174 & 0x80u) == 0) {
    uint64_t v100 = (const std::string::value_type *)&v172;
  }
  else {
    uint64_t v100 = (const std::string::value_type *)v172;
  }
  if ((v174 & 0x80u) == 0) {
    std::string::size_type v101 = v174;
  }
  else {
    std::string::size_type v101 = (std::string::size_type)v173;
  }
  uint64_t v102 = std::string::append(&v168, v100, v101);
  long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  operations_research::sat::RestartPolicy::InfoString(*(operations_research::sat::RestartPolicy **)(a1 + 232), &v171);
  if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v104 = &v171;
  }
  else {
    unint64_t v104 = (std::string *)v171.__r_.__value_.__r.__words[0];
  }
  if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v171.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v171.__r_.__value_.__l.__size_;
  }
  long long v106 = std::string::append(&v169, (const std::string::value_type *)v104, size);
  long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v107;
  v106->__r_.__value_.__l.__size_ = 0;
  v106->__r_.__value_.__r.__words[2] = 0;
  v106->__r_.__value_.__r.__words[0] = 0;
  int v108 = *(uint64_t **)(a1 + 40);
  v200[0] = ((double)*(uint64_t *)(*(void *)(a1 + 24) + 280)
           + (double)(**(void **)(a1 + 208) + *(int *)(*(void *)(a1 + 208) + 12)) * 8.0
           + (double)*(uint64_t *)(*(void *)(a1 + 32) + 192) * 4.0
           + (double)*(uint64_t *)(*(void *)(a1 + 32) + 200)
           + (double)v108[51] * 20.0
           + (double)v108[53] * 2.0
           + (double)v108[52])
          * 0.00000001;
  *(void *)&v200[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("  deterministic time: %f\n", 25, (uint64_t)v200, 1, (uint64_t)__p);
  if ((v113 & 0x80u) == 0) {
    int v109 = __p;
  }
  else {
    int v109 = (void **)__p[0];
  }
  if ((v113 & 0x80u) == 0) {
    std::string::size_type v110 = v113;
  }
  else {
    std::string::size_type v110 = (std::string::size_type)__p[1];
  }
  int v111 = std::string::append(&v170, (const std::string::value_type *)v109, v110);
  *a3 = *v111;
  v111->__r_.__value_.__l.__size_ = 0;
  v111->__r_.__value_.__r.__words[2] = 0;
  v111->__r_.__value_.__r.__words[0] = 0;
  if ((char)v113 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      if ((SHIBYTE(v171.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_157;
      }
      goto LABEL_209;
    }
  }
  else if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v170.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v171.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_157:
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_210;
  }
LABEL_209:
  operator delete(v171.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_158:
    if (((char)v174 & 0x80000000) == 0) {
      goto LABEL_159;
    }
    goto LABEL_211;
  }
LABEL_210:
  operator delete(v169.__r_.__value_.__l.__data_);
  if (((char)v174 & 0x80000000) == 0)
  {
LABEL_159:
    if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_160;
    }
    goto LABEL_212;
  }
LABEL_211:
  operator delete(v172);
  if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_160:
    if (((char)v177 & 0x80000000) == 0) {
      goto LABEL_161;
    }
    goto LABEL_213;
  }
LABEL_212:
  operator delete(v168.__r_.__value_.__l.__data_);
  if (((char)v177 & 0x80000000) == 0)
  {
LABEL_161:
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_162;
    }
    goto LABEL_214;
  }
LABEL_213:
  operator delete(v175);
  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_162:
    if (((char)v180 & 0x80000000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_215;
  }
LABEL_214:
  operator delete(v167.__r_.__value_.__l.__data_);
  if (((char)v180 & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_164;
    }
    goto LABEL_216;
  }
LABEL_215:
  operator delete(v178);
  if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_164:
    if (((char)v183 & 0x80000000) == 0) {
      goto LABEL_165;
    }
    goto LABEL_217;
  }
LABEL_216:
  operator delete(v166.__r_.__value_.__l.__data_);
  if (((char)v183 & 0x80000000) == 0)
  {
LABEL_165:
    if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_166;
    }
    goto LABEL_218;
  }
LABEL_217:
  operator delete(v181);
  if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_166:
    if (((char)v186 & 0x80000000) == 0) {
      goto LABEL_167;
    }
    goto LABEL_219;
  }
LABEL_218:
  operator delete(v165.__r_.__value_.__l.__data_);
  if (((char)v186 & 0x80000000) == 0)
  {
LABEL_167:
    if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_168;
    }
    goto LABEL_220;
  }
LABEL_219:
  operator delete(v184);
  if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_168:
    if (((char)v189 & 0x80000000) == 0) {
      goto LABEL_169;
    }
    goto LABEL_221;
  }
LABEL_220:
  operator delete(v164.__r_.__value_.__l.__data_);
  if (((char)v189 & 0x80000000) == 0)
  {
LABEL_169:
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_170;
    }
    goto LABEL_222;
  }
LABEL_221:
  operator delete(v187);
  if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_170:
    if (((char)v192 & 0x80000000) == 0) {
      goto LABEL_171;
    }
    goto LABEL_223;
  }
LABEL_222:
  operator delete(v163.__r_.__value_.__l.__data_);
  if (((char)v192 & 0x80000000) == 0)
  {
LABEL_171:
    if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_172;
    }
    goto LABEL_224;
  }
LABEL_223:
  operator delete(v190);
  if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_172:
    if (((char)v195 & 0x80000000) == 0) {
      goto LABEL_173;
    }
    goto LABEL_225;
  }
LABEL_224:
  operator delete(v162.__r_.__value_.__l.__data_);
  if (((char)v195 & 0x80000000) == 0)
  {
LABEL_173:
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_174;
    }
    goto LABEL_226;
  }
LABEL_225:
  operator delete(v193);
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_174:
    if ((SHIBYTE(v198) & 0x80000000) == 0) {
      goto LABEL_175;
    }
    goto LABEL_227;
  }
LABEL_226:
  operator delete(v161.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v198) & 0x80000000) == 0)
  {
LABEL_175:
    if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_176;
    }
    goto LABEL_228;
  }
LABEL_227:
  operator delete(*(void **)&v196);
  if ((SHIBYTE(v160.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_176:
    if (((char)v115 & 0x80000000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_229;
  }
LABEL_228:
  operator delete(v160.__r_.__value_.__l.__data_);
  if (((char)v115 & 0x80000000) == 0)
  {
LABEL_177:
    if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_178;
    }
    goto LABEL_230;
  }
LABEL_229:
  operator delete(v114[0]);
  if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_178:
    if (((char)v117 & 0x80000000) == 0) {
      goto LABEL_179;
    }
    goto LABEL_231;
  }
LABEL_230:
  operator delete(v159.__r_.__value_.__l.__data_);
  if (((char)v117 & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_180;
    }
    goto LABEL_232;
  }
LABEL_231:
  operator delete(v116[0]);
  if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_180:
    if (((char)v119 & 0x80000000) == 0) {
      goto LABEL_181;
    }
    goto LABEL_233;
  }
LABEL_232:
  operator delete(v158.__r_.__value_.__l.__data_);
  if (((char)v119 & 0x80000000) == 0)
  {
LABEL_181:
    if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_234;
  }
LABEL_233:
  operator delete(v118[0]);
  if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_182:
    if (((char)v121 & 0x80000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_235;
  }
LABEL_234:
  operator delete(v157.__r_.__value_.__l.__data_);
  if (((char)v121 & 0x80000000) == 0)
  {
LABEL_183:
    if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_184;
    }
    goto LABEL_236;
  }
LABEL_235:
  operator delete(v120[0]);
  if ((SHIBYTE(v156.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_184:
    if (((char)v123 & 0x80000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_237;
  }
LABEL_236:
  operator delete(v156.__r_.__value_.__l.__data_);
  if (((char)v123 & 0x80000000) == 0)
  {
LABEL_185:
    if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_186;
    }
    goto LABEL_238;
  }
LABEL_237:
  operator delete(v122[0]);
  if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_186:
    if (((char)v125 & 0x80000000) == 0) {
      goto LABEL_187;
    }
    goto LABEL_239;
  }
LABEL_238:
  operator delete(v155.__r_.__value_.__l.__data_);
  if (((char)v125 & 0x80000000) == 0)
  {
LABEL_187:
    if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_188;
    }
    goto LABEL_240;
  }
LABEL_239:
  operator delete(v124[0]);
  if ((SHIBYTE(v154.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_188:
    if (((char)v127 & 0x80000000) == 0) {
      goto LABEL_189;
    }
    goto LABEL_241;
  }
LABEL_240:
  operator delete(v154.__r_.__value_.__l.__data_);
  if (((char)v127 & 0x80000000) == 0)
  {
LABEL_189:
    if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_190;
    }
    goto LABEL_242;
  }
LABEL_241:
  operator delete(v126[0]);
  if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_190:
    if (((char)v129 & 0x80000000) == 0) {
      goto LABEL_191;
    }
    goto LABEL_243;
  }
LABEL_242:
  operator delete(v153.__r_.__value_.__l.__data_);
  if (((char)v129 & 0x80000000) == 0)
  {
LABEL_191:
    if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_192;
    }
    goto LABEL_244;
  }
LABEL_243:
  operator delete(v128[0]);
  if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_192:
    if (((char)v131 & 0x80000000) == 0) {
      goto LABEL_193;
    }
    goto LABEL_245;
  }
LABEL_244:
  operator delete(v152.__r_.__value_.__l.__data_);
  if (((char)v131 & 0x80000000) == 0)
  {
LABEL_193:
    if ((SHIBYTE(v151.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_194;
    }
    goto LABEL_246;
  }
LABEL_245:
  operator delete(v130[0]);
  if ((SHIBYTE(v151.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_194:
    if (((char)v133 & 0x80000000) == 0) {
      goto LABEL_195;
    }
    goto LABEL_247;
  }
LABEL_246:
  operator delete(v151.__r_.__value_.__l.__data_);
  if (((char)v133 & 0x80000000) == 0)
  {
LABEL_195:
    if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_196;
    }
    goto LABEL_248;
  }
LABEL_247:
  operator delete(v132[0]);
  if ((SHIBYTE(v150.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_196:
    if (((char)v135 & 0x80000000) == 0) {
      goto LABEL_197;
    }
    goto LABEL_249;
  }
LABEL_248:
  operator delete(v150.__r_.__value_.__l.__data_);
  if (((char)v135 & 0x80000000) == 0)
  {
LABEL_197:
    if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_198;
    }
    goto LABEL_250;
  }
LABEL_249:
  operator delete(v134[0]);
  if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_198:
    if (((char)v137 & 0x80000000) == 0) {
      goto LABEL_199;
    }
    goto LABEL_251;
  }
LABEL_250:
  operator delete(v149.__r_.__value_.__l.__data_);
  if (((char)v137 & 0x80000000) == 0)
  {
LABEL_199:
    if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_200;
    }
    goto LABEL_252;
  }
LABEL_251:
  operator delete(v136[0]);
  if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_200:
    if (((char)v141 & 0x80000000) == 0) {
      goto LABEL_201;
    }
    goto LABEL_253;
  }
LABEL_252:
  operator delete(v148.__r_.__value_.__l.__data_);
  if (((char)v141 & 0x80000000) == 0)
  {
LABEL_201:
    if ((v139 & 0x80000000) == 0) {
      goto LABEL_202;
    }
    goto LABEL_254;
  }
LABEL_253:
  operator delete(v140[0]);
  if ((v139 & 0x80000000) == 0)
  {
LABEL_202:
    if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_203;
    }
    goto LABEL_255;
  }
LABEL_254:
  operator delete(v138[0]);
  if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_203:
    if (((char)v143 & 0x80000000) == 0) {
      goto LABEL_204;
    }
    goto LABEL_256;
  }
LABEL_255:
  operator delete(v147.__r_.__value_.__l.__data_);
  if (((char)v143 & 0x80000000) == 0)
  {
LABEL_204:
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_205;
    }
    goto LABEL_257;
  }
LABEL_256:
  operator delete(v142[0]);
  if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_205:
    if ((v145 & 0x80000000) == 0) {
      return;
    }
LABEL_258:
    operator delete(v144[0]);
    return;
  }
LABEL_257:
  operator delete(v146.__r_.__value_.__l.__data_);
  if (v145 < 0) {
    goto LABEL_258;
  }
}

void sub_23CD8554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((SLOBYTE(STACK[0x4A7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_56;
    }
  }
  else if ((SLOBYTE(STACK[0x4A7]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x490]);
  if ((SLOBYTE(STACK[0x4C7]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x487]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete((void *)STACK[0x4B0]);
  if ((SLOBYTE(STACK[0x487]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete((void *)STACK[0x470]);
  if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_59;
  }
LABEL_58:
  operator delete((void *)STACK[0x4C8]);
  if ((SLOBYTE(STACK[0x467]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SLOBYTE(STACK[0x4F7]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_60;
  }
LABEL_59:
  operator delete((void *)STACK[0x450]);
  if ((SLOBYTE(STACK[0x4F7]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete((void *)STACK[0x4E0]);
  if ((SLOBYTE(STACK[0x447]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SLOBYTE(STACK[0x50F]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_62;
  }
LABEL_61:
  operator delete((void *)STACK[0x430]);
  if ((SLOBYTE(STACK[0x50F]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SLOBYTE(STACK[0x427]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_63;
  }
LABEL_62:
  operator delete((void *)STACK[0x4F8]);
  if ((SLOBYTE(STACK[0x427]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(char *)(v91 - 217) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_63:
  operator delete((void *)STACK[0x410]);
  if ((*(char *)(v91 - 217) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SLOBYTE(STACK[0x407]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*(void **)(v91 - 240));
  if ((SLOBYTE(STACK[0x407]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((*(char *)(v91 - 193) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_66;
  }
LABEL_65:
  operator delete((void *)STACK[0x3F0]);
  if ((*(char *)(v91 - 193) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SLOBYTE(STACK[0x3E7]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_67;
  }
LABEL_66:
  operator delete(*(void **)(v91 - 216));
  if ((SLOBYTE(STACK[0x3E7]) & 0x80000000) == 0)
  {
LABEL_15:
    if ((*(char *)(v91 - 169) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_68;
  }
LABEL_67:
  operator delete((void *)STACK[0x3D0]);
  if ((*(char *)(v91 - 169) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete(*(void **)(v91 - 192));
  if ((SLOBYTE(STACK[0x3C7]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((*(char *)(v91 - 145) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete((void *)STACK[0x3B0]);
  if ((*(char *)(v91 - 145) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(*(void **)(v91 - 168));
  if ((SLOBYTE(STACK[0x3A7]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((*(char *)(v91 - 121) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete((void *)STACK[0x390]);
  if ((*(char *)(v91 - 121) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SLOBYTE(STACK[0x387]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_73;
  }
LABEL_72:
  operator delete(*(void **)(v91 - 144));
  if ((SLOBYTE(STACK[0x387]) & 0x80000000) == 0)
  {
LABEL_21:
    if ((*(char *)(v91 - 97) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_74;
  }
LABEL_73:
  operator delete((void *)STACK[0x370]);
  if ((*(char *)(v91 - 97) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_75;
  }
LABEL_74:
  operator delete(*(void **)(v91 - 120));
  if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
  {
LABEL_23:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_76;
  }
LABEL_75:
  operator delete((void *)STACK[0x350]);
  if ((a20 & 0x80000000) == 0)
  {
LABEL_24:
    if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete(a15);
  if ((SLOBYTE(STACK[0x347]) & 0x80000000) == 0)
  {
LABEL_25:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete((void *)STACK[0x330]);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_26:
    if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete(a21);
  if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((a32 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_80;
  }
LABEL_79:
  operator delete((void *)STACK[0x310]);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_28:
    if ((SLOBYTE(STACK[0x307]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete(a27);
  if ((SLOBYTE(STACK[0x307]) & 0x80000000) == 0)
  {
LABEL_29:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete((void *)STACK[0x2F0]);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_30:
    if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(a33);
  if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0)
  {
LABEL_31:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete((void *)STACK[0x2D0]);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_85;
  }
LABEL_84:
  operator delete(a39);
  if ((SLOBYTE(STACK[0x2C7]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_86;
  }
LABEL_85:
  operator delete((void *)STACK[0x2B0]);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_34:
    if ((SLOBYTE(STACK[0x2A7]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_87;
  }
LABEL_86:
  operator delete(a45);
  if ((SLOBYTE(STACK[0x2A7]) & 0x80000000) == 0)
  {
LABEL_35:
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete((void *)STACK[0x290]);
  if ((a56 & 0x80000000) == 0)
  {
LABEL_36:
    if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete(a51);
  if ((SLOBYTE(STACK[0x287]) & 0x80000000) == 0)
  {
LABEL_37:
    if ((a62 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_90;
  }
LABEL_89:
  operator delete((void *)STACK[0x270]);
  if ((a62 & 0x80000000) == 0)
  {
LABEL_38:
    if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
LABEL_90:
  operator delete(a57);
  if ((SLOBYTE(STACK[0x267]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((a68 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_92;
  }
LABEL_91:
  operator delete((void *)STACK[0x250]);
  if ((a68 & 0x80000000) == 0)
  {
LABEL_40:
    if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_93;
  }
LABEL_92:
  operator delete(a63);
  if ((SLOBYTE(STACK[0x247]) & 0x80000000) == 0)
  {
LABEL_41:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_94;
  }
LABEL_93:
  operator delete((void *)STACK[0x230]);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_42:
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_95;
  }
LABEL_94:
  operator delete(a69);
  if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
LABEL_43:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_96;
  }
LABEL_95:
  operator delete((void *)STACK[0x210]);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_44:
    if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_97;
  }
LABEL_96:
  operator delete(a73);
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_45:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_98;
  }
LABEL_97:
  operator delete(a91);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_46:
    if ((a90 & 0x80000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_99;
  }
LABEL_98:
  operator delete(a75);
  if ((a90 & 0x80000000) == 0)
  {
LABEL_47:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_100;
  }
LABEL_99:
  operator delete(a89);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_48:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_101;
  }
LABEL_100:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_49:
    if ((a88 & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(a77);
  if ((a88 & 0x80000000) == 0)
  {
LABEL_50:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_103;
  }
LABEL_102:
  operator delete(a87);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_51:
    if ((a86 & 0x80000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_104;
  }
LABEL_103:
  operator delete(a81);
  if ((a86 & 0x80000000) == 0)
  {
LABEL_52:
    if ((a84 & 0x80000000) == 0) {
LABEL_106:
    }
      _Unwind_Resume(a1);
LABEL_105:
    operator delete(a83);
    _Unwind_Resume(a1);
  }
LABEL_104:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0) {
    goto LABEL_106;
  }
  goto LABEL_105;
}

uint64_t operations_research::sat::SatSolver::SetAssumptionLevel(uint64_t this, int a2)
{
  v3[0] = a2;
  LODWORD(v4) = 0;
  if (a2 < 0) {
    google::MakeCheckOpString<int,int>((int)v3, (int)&v4, "assumption_level >= 0");
  }
  int v2 = *(_DWORD *)(this + 304);
  v3[0] = a2;
  LODWORD(v4) = v2;
  if (v2 < a2) {
    google::MakeCheckOpString<int,int>((int)v3, (int)&v4, "assumption_level <= CurrentDecisionLevel()");
  }
  *(_DWORD *)(this + 34google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = a2;
  return this;
}

void sub_23CD85E44(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD85E4C(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

uint64_t operations_research::sat::SatSolver::SolveWithTimeLimit(operations_research::sat::SatSolver *this, operations_research::TimeLimit *a2)
{
  if (!a2) {
    a2 = (operations_research::TimeLimit *)*((void *)this + 27);
  }
  return operations_research::sat::SatSolver::SolveInternal(this, a2);
}

void operations_research::sat::SatSolver::KeepAllClauseUsedToInfer(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 208);
  if (((*(void *)(*(void *)(v2 + 24) + (((unint64_t)(2 * a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (a2 & 0x1Fu))) & 3) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v43, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 954);
    uint64_t v41 = (void *)google::LogMessage::stream((google::LogMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: Assignment().VariableIsAssigned(variable) ", 56);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v43);
  }
  uint64_t v3 = *(void *)(v2 + 120);
  if ((*(_DWORD *)(v3 + 8 * a2) & 0xFFFFFFE) == 0) {
    return;
  }
  unint64_t v5 = *(int *)(v3 + 8 * a2 + 4);
  int v43 = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
    double v8 = 0;
  }
  else
  {
    if ((int)v5 <= -2) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    double v7 = operator new(8 * ((v5 >> 6) + 1));
    double v8 = v7;
    unint64_t v44 = v5 + 1;
    uint64_t v45 = (v5 >> 6) + 1;
    int v43 = v7;
    if (v6 >= 0x41) {
      unint64_t v9 = v5 >> 6;
    }
    else {
      unint64_t v9 = 0;
    }
    v7[v9] = 0;
    if (v6 >= 0x40) {
      bzero(v7, 8 * (v6 >> 6));
    }
    if ((v6 & 0x3F) != 0) {
      v8[v6 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
    }
  }
  *(void *)((char *)v8 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v5;
  if ((v5 & 0x80000000) != 0)
  {
LABEL_41:
    operator delete(v8);
    return;
  }
  unint64_t v10 = v5;
  int v11 = 1;
  do
  {
    uint64_t v12 = v8[v10 >> 6];
    if ((v12 & (1 << v10)) == 0) {
      goto LABEL_37;
    }
    v8[v10 >> 6] = v12 & ~(1 << v10);
    std::string::size_type v13 = *(void **)(a1 + 208);
    int v14 = *(_DWORD *)(v13[9] + 4 * v10);
    int v15 = v14 >> 1;
    uint64_t v42 = 0;
    uint64_t v16 = (uint64_t)v14 >> 1;
    uint64_t v17 = v13[15];
    unsigned int v18 = *(_DWORD *)(v17 + 8 * v15);
    uint64_t v19 = v16;
    if (v18 >> 28 == 3)
    {
      uint64_t v19 = *(int *)(v13[19] + 4 * v16);
      int v20 = *(_DWORD *)(v17 + 8 * v19) >> 28;
      if (v20)
      {
LABEL_18:
        std::string::size_type v21 = *(operations_research::sat::LiteralWatchers **)(a1 + 32);
        if (v20 == *((_DWORD *)v21 + 8)) {
          goto LABEL_22;
        }
        goto LABEL_24;
      }
    }
    else
    {
      int v20 = v18 >> 28;
      if (v20) {
        goto LABEL_18;
      }
    }
    std::string::size_type v21 = *(operations_research::sat::LiteralWatchers **)(a1 + 32);
    if (*(_DWORD *)(v13[31] + 4 * v19) == *((_DWORD *)v21 + 8))
    {
LABEL_22:
      uint64_t v42 = operations_research::sat::LiteralWatchers::ReasonClause(v21, *(_DWORD *)(v17 + 8 * v16 + 4));
      if (v42) {
        absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::erase<operations_research::sat::SatClause *>((uint64_t *)(*(void *)(a1 + 32) + 336), &v42);
      }
    }
LABEL_24:
    uint64_t v22 = *(void **)(a1 + 208);
    uint64_t v23 = v22[15];
    unsigned int v24 = *(_DWORD *)(v23 + 8 * v16);
    if (v24 >> 28 == 3)
    {
      uint64_t v16 = *(int *)(v22[19] + 4 * v16);
      unsigned int v24 = *(_DWORD *)(v23 + 8 * v16);
    }
    unsigned int v25 = v24 >> 28;
    if (v25)
    {
      if (v25 - 1 > 1)
      {
        uint64_t v27 = *(void *)(v22[34] + 8 * v25);
        uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 32))(v27, *(void *)(a1 + 208), *(unsigned int *)(v23 + 8 * v16 + 4));
        std::string::size_type v29 = (uint64_t *)(v22[28] + 16 * v16);
        *std::string::size_type v29 = v28;
        v29[1] = v30;
      }
      else
      {
        uint64_t v26 = (void *)(v22[28] + 16 * v16);
        *uint64_t v26 = 0;
        v26[1] = 0;
      }
      *(_DWORD *)(v22[31] + 4 * v16) = *(_DWORD *)(v23 + 8 * v16) >> 28;
      *(_DWORD *)(v22[15] + 8 * v16) &= 0xFFFFFFFu;
    }
    --v11;
    uint64_t v31 = v22[28] + 16 * v16;
    uint64_t v32 = *(void *)(v31 + 8);
    if (v32)
    {
      std::string::size_type v33 = *(int **)v31;
      uint64_t v34 = *(void *)(*(void *)(a1 + 208) + 120);
      double v8 = v43;
      uint64_t v35 = 4 * v32;
      do
      {
        if ((*(_DWORD *)(v34 + 8 * (*v33 >> 1)) & 0xFFFFFFE) != 0)
        {
          unint64_t v36 = *(int *)(v34 + 8 * ((uint64_t)*v33 >> 1) + 4);
          unint64_t v37 = v36 >> 6;
          uint64_t v38 = 1 << v36;
          uint64_t v39 = v8[v37];
          if ((v38 & v39) == 0)
          {
            v8[v37] = v38 | v39;
            ++v11;
          }
        }
        ++v33;
        v35 -= 4;
      }
      while (v35);
    }
LABEL_37:
    if (v11 < 1) {
      break;
    }
  }
  while ((uint64_t)v10-- > 0);
  double v8 = v43;
  if (v43) {
    goto LABEL_41;
  }
}

void sub_23CD86208(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CD8621C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23CD86230(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void operations_research::sat::SatSolver::TryToMinimizeClause(operations_research::sat::SatSolver *this, int *a2)
{
  LODWORD(v58) = *((_DWORD *)this + 76);
  LODWORD(__p) = 0;
  if (v58) {
    google::MakeCheckOpString<int,int>((int)&v58, (int)&__p, "CurrentDecisionLevel() == 0");
  }
  ++*((void *)this + 54);
  long long v59 = 0;
  uint64_t v60 = 0;
  std::string::size_type v57 = 0;
  uint64_t v58 = &v59;
  uint64_t v4 = *a2;
  std::string __p = 0;
  uint64_t v56 = 0;
  if (4 * v4)
  {
    if ((v4 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(4 * v4);
    std::string::size_type v57 = (int *)((char *)__p + 4 * v4);
    memcpy(__p, a2 + 1, 4 * v4);
    uint64_t v56 = v57;
  }
  if (!*((unsigned char *)this + 496))
  {
    while (1)
    {
      int v13 = operations_research::sat::MoveOneUnprocessedLiteralLast((uint64_t)&v58, *((_DWORD *)this + 76), (unsigned __int8 **)&__p);
      if (v13 == -1) {
        goto LABEL_6;
      }
      operations_research::sat::SatSolver::Backtrack(this, v13);
      int v14 = *((_DWORD *)this + 76);
      uint64_t v15 = v14;
      uint64_t v17 = (int *)__p;
      uint64_t v16 = v56;
      if (v14 >= (unint64_t)(((char *)v56 - (unsigned char *)__p) >> 2)) {
        goto LABEL_56;
      }
      while (1)
      {
        while (1)
        {
          unsigned int v18 = &v17[v15];
          unint64_t v19 = *v18;
          uint64_t v20 = *((void *)this + 26);
          unint64_t v21 = *(void *)(*(void *)(v20 + 24) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (((v21 >> (v19 & 0x3F ^ 1)) & 1) == 0) {
            break;
          }
          if (v16 != v18 + 1) {
            memmove(v18, v18 + 1, (char *)v16 - (char *)(v18 + 1));
          }
          uint64_t v56 = --v16;
          int v14 = *((_DWORD *)this + 76);
          uint64_t v15 = v14;
          uint64_t v17 = (int *)__p;
          if (v14 >= (unint64_t)(((char *)v16 - (unsigned char *)__p) >> 2)) {
            goto LABEL_56;
          }
        }
        if ((v21 >> (v19 & 0x3F))) {
          break;
        }
        ++*((void *)this + 55);
        operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict((uint64_t)this, v19 ^ 1);
        if (*a2 <= 0)
        {
          operations_research::sat::SatSolver::Backtrack(this, 0);
          goto LABEL_81;
        }
        if (*((unsigned char *)this + 496)) {
          goto LABEL_81;
        }
        uint64_t v17 = (int *)__p;
        uint64_t v16 = v56;
        int v14 = *((_DWORD *)this + 76);
        uint64_t v15 = v14;
        if (v14 >= (unint64_t)(((char *)v56 - (unsigned char *)__p) >> 2)) {
          goto LABEL_56;
        }
      }
      uint64_t v22 = *(void *)(v20 + 120);
      unint64_t v23 = *(unsigned int *)(v22 + 8 * ((int)v19 >> 1));
      uint64_t v24 = (v23 >> 1) & 0x7FFFFFF;
      if (!v24)
      {
        if (!v14)
        {
          if (*((void *)this + 165))
          {
            for (i = *((_DWORD *)this + 90); i < *(_DWORD *)(v20 + 12); uint64_t v20 = *((void *)this + 26))
            {
              int v61 = *(_DWORD *)(*(void *)(v20 + 72) + 4 * i);
              operations_research::sat::DratProofHandler::AddClause(*((void *)this + 165), &v61, 1);
              int i = *((_DWORD *)this + 90) + 1;
              *((_DWORD *)this + 9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = i;
            }
          }
        }
        ++*((void *)this + 56);
        *((void *)this + 58) += *a2;
        goto LABEL_92;
      }
      uint64_t v25 = (uint64_t)(int)v19 >> 1;
      if (v23 >> 28 == 3) {
        break;
      }
      uint64_t v26 = (uint64_t)(int)v19 >> 1;
      unsigned int v27 = v23 >> 28;
      if (!v27) {
        goto LABEL_32;
      }
LABEL_33:
      uint64_t v28 = (operations_research::sat::LiteralWatchers *)*((void *)this + 4);
      if (v27 == *((_DWORD *)v28 + 8)) {
        uint64_t v29 = operations_research::sat::LiteralWatchers::ReasonClause(v28, *(_DWORD *)(v22 + 8 * v25 + 4));
      }
      else {
        uint64_t v29 = 0;
      }
      if ((int *)v29 != a2)
      {
        uint64_t v54 = *((void *)this + 58);
        ++*((void *)this + 57);
        *((void *)this + 58) = v54 + *a2;
        operations_research::sat::SatSolver::KeepAllClauseUsedToInfer((uint64_t)this, v25);
LABEL_92:
        operations_research::sat::SatSolver::Backtrack(this, 0);
        operations_research::sat::LiteralWatchers::Detach(*((void **)this + 4), a2);
        goto LABEL_81;
      }
      uint64_t v17 = (int *)__p;
      uint64_t v16 = v56;
      if (v24 + 1 < (unint64_t)(((char *)v56 - (unsigned char *)__p) >> 2))
      {
        uint64_t v30 = (int *)((char *)__p + 4 * v24);
        uint64_t v56 = v30;
        if (v30 >= v57)
        {
          uint64_t v31 = v24;
          uint64_t v32 = (char *)v57 - (unsigned char *)__p;
          if (((char *)v57 - (unsigned char *)__p) >> 1 <= (unint64_t)v24 + 1) {
            uint64_t v33 = v24 + 1;
          }
          else {
            uint64_t v33 = v32 >> 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v35 = operator new(4 * v34);
          unint64_t v36 = (int *)&v35[4 * v31];
          int *v36 = v19;
          uint64_t v16 = v36 + 1;
          unint64_t v37 = (v31 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          if (v37 < 0xF) {
            goto LABEL_98;
          }
          if ((unint64_t)((char *)v17 - v35) < 0x20) {
            goto LABEL_98;
          }
          unint64_t v38 = v37 + 1;
          uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v30 = (int *)((char *)v30 - v39);
          unint64_t v36 = (int *)((char *)v36 - v39);
          double v40 = &v35[4 * v31 - 16];
          uint64_t v41 = &v17[v31 - 4];
          uint64_t v42 = v38 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v43 = *(_OWORD *)v41;
            *(v40 - 1) = *((_OWORD *)v41 - 1);
            *double v40 = v43;
            v40 -= 2;
            v41 -= 8;
            v42 -= 8;
          }
          while (v42);
          if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_98:
            do
            {
              int v44 = *--v30;
              *--unint64_t v36 = v44;
            }
            while (v30 != v17);
          }
          std::string __p = v36;
          uint64_t v56 = v16;
          std::string::size_type v57 = (int *)&v35[4 * v34];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *uint64_t v30 = v19;
          uint64_t v16 = v30 + 1;
        }
        uint64_t v56 = v16;
        uint64_t v17 = (int *)__p;
      }
LABEL_56:
      if (v17 == v16)
      {
        *((unsigned char *)this + 496) = 1;
        if (v16) {
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      int v45 = *(v16 - 1);
      double v46 = v59;
      double v47 = &v59;
      uint64_t v48 = &v59;
      if (v59)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v48 = (uint64_t **)v46;
            int v49 = *(_DWORD *)((char *)v46 + 25);
            if (v45 >= v49) {
              break;
            }
            double v46 = *v48;
            double v47 = v48;
            if (!*v48) {
              goto LABEL_64;
            }
          }
          if (v49 >= v45) {
            break;
          }
          double v46 = v48[1];
          if (!v46)
          {
            double v47 = v48 + 1;
            goto LABEL_64;
          }
        }
      }
      else
      {
LABEL_64:
        uint64_t v50 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v50 + 25) = v45;
        *(void *)uint64_t v50 = 0;
        *((void *)v50 + 1) = 0;
        *((void *)v50 + 2) = v48;
        *double v47 = (uint64_t *)v50;
        if (*v58)
        {
          uint64_t v58 = (uint64_t **)*v58;
          uint64_t v50 = (char *)*v47;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v59, (uint64_t *)v50);
        ++v60;
      }
      if (*((unsigned char *)this + 496)) {
        goto LABEL_6;
      }
    }
    uint64_t v26 = *(int *)(*(void *)(v20 + 152) + 4 * v25);
    unsigned int v27 = *(_DWORD *)(v22 + 8 * v26) >> 28;
    if (v27) {
      goto LABEL_33;
    }
LABEL_32:
    unsigned int v27 = *(_DWORD *)(*(void *)(v20 + 248) + 4 * v26);
    goto LABEL_33;
  }
LABEL_6:
  operations_research::sat::SatSolver::Backtrack(this, 0);
  unint64_t v5 = (int *)__p;
  int64_t v6 = (char *)v56 - (unsigned char *)__p;
  uint64_t v7 = ((char *)v56 - (unsigned char *)__p) >> 2;
  uint64_t v8 = *a2;
  if (v8 != v7)
  {
    if (v6 == 4)
    {
      uint64_t v9 = *((void *)this + 165);
      if (v9)
      {
        operations_research::sat::DratProofHandler::AddClause(v9, (int *)__p, ((char *)v56 - (unsigned char *)__p) >> 2);
        unint64_t v5 = (int *)__p;
      }
      uint64_t v10 = *((void *)this + 26);
      int v11 = *v5;
      int v12 = *v5 >> 1;
      if (((*(void *)(*(void *)(v10 + 24) + (((unint64_t)(2 * v12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v5 & 0x3E)) & 3) == 0)
      {
        *((void *)this + 58) += *a2;
        *(_DWORD *)(*(void *)(v10 + 72) + 4 * *(int *)(v10 + 12)) = v11;
        *(_DWORD *)(v10 + 8) = (*(_DWORD *)(v10 + 8) & 0xFFFFFFE | v11 & 1) ^ 0x10000001;
        *(void *)(*(void *)(v10 + 120) + 8 * v12) = *(void *)(v10 + 8);
        *(void *)(*(void *)(v10 + 24) + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        ++*(_DWORD *)(v10 + 12);
        while (!*((unsigned char *)this + 496)
             && (operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this) & 1) == 0)
          ;
      }
    }
    else if (v6 == 8 && *(unsigned char *)(*((void *)this + 28) + 306))
    {
      *((void *)this + 58) += (int)v8 - 2;
      uint64_t v51 = *v5;
      uint64_t v52 = v5[1];
      if (!*((unsigned char *)this + 128)
        || operations_research::sat::BinaryClauseManager::Add((uint64_t *)this + 17, v51 | (v52 << 32)))
      {
        operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*((void *)this + 3), v51, v52);
        operations_research::sat::SatSolver::InitializePropagators(this);
      }
      operations_research::sat::LiteralWatchers::Detach(*((void **)this + 4), a2);
      while (!*((unsigned char *)this + 496)
           && (operations_research::sat::SatSolver::PropagateAndStopAfterOneConflictResolution(this) & 1) == 0)
        ;
    }
    else
    {
      *((void *)this + 58) += v8 - v7;
      if (!operations_research::sat::LiteralWatchers::InprocessingRewriteClause(*((void *)this + 4), a2, v5, v7)) {
        *((unsigned char *)this + 496) = 1;
      }
    }
  }
LABEL_81:
  uint64_t v16 = (int *)__p;
  if (__p)
  {
LABEL_82:
    uint64_t v56 = v16;
    operator delete(v16);
  }
LABEL_83:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&v58, v59);
}

void sub_23CD86920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD86928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, void *a14)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatSolver::MinimizeSomeClauses(operations_research::sat::SatSolver *this, int a2)
{
  *((unsigned char *)this + 1032) = 1;
  uint64_t v3 = *((void *)this + 46) + a2;
  while (*((void *)this + 46) < v3)
  {
    uint64_t v4 = *((void *)this + 27);
    if (v4)
    {
      unint64_t v5 = *(unsigned __int8 **)(v4 + 120);
      if (v5)
      {
        unsigned __int8 v6 = atomic_load(v5);
        if (v6) {
          break;
        }
      }
      if (fmax(*(double *)(v4 + 104) - *(double *)(v4 + 112), 0.0) <= 0.0) {
        break;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(this);
      uint64_t v8 = *(void *)(v4 + 24) <= CurrentTimeNanos - *(void *)(v4 + 8)
         ? CurrentTimeNanos - *(void *)(v4 + 8)
         : *(void *)(v4 + 24);
      operations_research::RunningMax<long long>::Add((int *)(v4 + 32), v8);
      *(void *)(v4 + 8) = CurrentTimeNanos;
      if (*(void *)(*(void *)(v4 + 40) + 8 * *(int *)(v4 + 68)) + CurrentTimeNanos >= *(void *)(v4 + 16))
      {
        if (!FLAGS_time_limit_use_usertime) {
          goto LABEL_25;
        }
        double v10 = *(double *)(v4 + 96);
        if (*(unsigned char *)(v4 + 72))
        {
          double v11 = v10
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v9) - *(void *)(v4 + 80) + *(void *)(v4 + 88))
              * -0.000000001;
          if (v11 <= 0.0001) {
            goto LABEL_25;
          }
        }
        else
        {
          double v11 = v10 + (double)*(uint64_t *)(v4 + 88) * -0.000000001;
          if (v11 <= 0.0001)
          {
LABEL_25:
            *(void *)(v4 + 16) = 0;
            break;
          }
        }
        *(void *)(v4 + 16) = *(void *)(v4 + 8) + (uint64_t)(v11 * 1000000000.0);
      }
    }
    ClauseToMinimize = operations_research::sat::LiteralWatchers::NextClauseToMinimize(*((operations_research::sat::LiteralWatchers **)this
                                                                                       + 4));
    if (!ClauseToMinimize)
    {
      if (*operations_research::sat::SatSolver::MinimizeSomeClauses(int)::vlocal__[0] >= 1
        && (operations_research::sat::SatSolver::MinimizeSomeClauses(int)::vlocal__[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)operations_research::sat::SatSolver::MinimizeSomeClauses(int)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_solver.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v14, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1240);
        int v13 = (void *)google::LogMessage::stream((google::LogMessage *)v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Minimized all clauses, restarting from first one.", 49);
        google::LogMessage::~LogMessage((google::LogMessage *)v14);
      }
      *(_DWORD *)(*((void *)this + 4) + 328) = 0;
      break;
    }
    operations_research::sat::SatSolver::TryToMinimizeClause(this, ClauseToMinimize);
    if (*((unsigned char *)this + 496)) {
      return;
    }
  }
  *((unsigned char *)this + 1032) = 0;
  operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*((operations_research::sat::LiteralWatchers **)this
                                                                  + 4));
}

void sub_23CD86B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *operations_research::sat::LiteralWatchers::NextClauseToMinimize(operations_research::sat::LiteralWatchers *this)
{
  uint64_t v1 = *((void *)this + 38);
  unint64_t v2 = (*((void *)this + 39) - v1) >> 3;
  for (unint64_t i = *((int *)this + 82); v2 > i; *((_DWORD *)this + 82) = i)
  {
    double v10 = *(int **)(v1 + 8 * i);
    if (*v10 >= 1)
    {
      uint64_t v8 = 0;
      unint64_t v11 = (unint64_t)v10
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v10)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + (void)v10)));
      unint64_t v12 = ((v11 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v11);
      unint64_t v13 = *((void *)this + 42);
      unint64_t v9 = (v12 >> 7) ^ (v13 >> 12);
      uint64_t v14 = *((void *)this + 45);
      uint64_t v15 = 0x101010101010101 * (v12 & 0x7F);
      while (1)
      {
        uint64_t v4 = v9 & v14;
        uint64_t v5 = *(void *)(v13 + v4);
        unint64_t v6 = ((v5 ^ v15) - 0x101010101010101) & ~(v5 ^ v15) & 0x8080808080808080;
        if (v6) {
          break;
        }
LABEL_6:
        if ((v5 & (~v5 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_13;
        }
        v8 += 8;
        unint64_t v9 = v8 + v4;
      }
      while (1)
      {
        unint64_t v7 = (v4 + (__clz(__rbit64(v6)) >> 3)) & v14;
        if (*(int **)(*((void *)this + 43) + 24 * v7) == v10) {
          break;
        }
        v6 &= v6 - 1;
        if (!v6) {
          goto LABEL_6;
        }
      }
      if (v7 == v14)
      {
LABEL_13:
        *((_DWORD *)this + 82) = i + 1;
        return v10;
      }
    }
    ++i;
  }
  return 0;
}

void operations_research::sat::SatSolver::GetLastIncompatibleDecisions(operations_research::sat::SatSolver *this@<X0>, void *a2@<X8>)
{
  unint64_t v2 = this;
  uint64_t v3 = *((int *)this + 76);
  int v4 = *(_DWORD *)(*((void *)this + 39) + 8 * v3 + 4);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (((*(void *)(*(void *)(*((void *)this + 26) + 24) + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v4 & 0x3F ^ 1u)) & 1) == 0)
  {
    if (!v3) {
      return;
    }
    if ((v3 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(4 * v3);
    uint64_t v10 = 0;
    unint64_t v11 = a2;
    *a2 = v9;
    a2[1] = v9;
    a2[2] = &v9[4 * v3];
    while (1)
    {
      unint64_t v13 = (_DWORD *)(*((void *)v2 + 39) + 8 * v10 + 4);
      unint64_t v14 = v11[2];
      if ((unint64_t)v9 < v14)
      {
        *(_DWORD *)unint64_t v9 = *v13;
        uint64_t v12 = (uint64_t)(v9 + 4);
      }
      else
      {
        uint64_t v15 = (char *)*v11;
        uint64_t v16 = (uint64_t)&v9[-*v11];
        uint64_t v17 = v16 >> 2;
        unint64_t v18 = (v16 >> 2) + 1;
        if (v18 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v14 - (void)v15;
        if (v19 >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          if (v20 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v21 = operator new(4 * v20);
          uint64_t v22 = &v21[4 * v17];
          *uint64_t v22 = *v13;
          uint64_t v12 = (uint64_t)(v22 + 1);
          if (v9 != v15)
          {
LABEL_19:
            unint64_t v23 = v9 - 4 - v15;
            if (v23 < 0xBC
              || &v21[v16 - 4 - (v23 & 0xFFFFFFFFFFFFFFFCLL)] > &v21[v16 - 4]
              || &v9[-(v23 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4
              || (unint64_t)(v9 - v21 - v16) < 0x20)
            {
              uint64_t v24 = v9;
              unint64_t v11 = a2;
              unint64_t v2 = this;
            }
            else
            {
              uint64_t v26 = (v23 >> 2) + 1;
              uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v24 = &v9[-v27];
              uint64_t v22 = (_DWORD *)((char *)v22 - v27);
              uint64_t v28 = &v21[4 * v17 - 16];
              uint64_t v29 = v9 - 16;
              uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
              unint64_t v2 = this;
              do
              {
                long long v31 = *(_OWORD *)v29;
                *(v28 - 1) = *((_OWORD *)v29 - 1);
                *uint64_t v28 = v31;
                v28 -= 2;
                v29 -= 32;
                v30 -= 8;
              }
              while (v30);
              unint64_t v11 = a2;
              if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_22:
                *unint64_t v11 = v22;
                v11[1] = v12;
                v11[2] = &v21[4 * v20];
                if (!v15) {
                  goto LABEL_8;
                }
LABEL_26:
                operator delete(v15);
                goto LABEL_8;
              }
            }
            do
            {
              int v25 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *--uint64_t v22 = v25;
            }
            while (v24 != v15);
            goto LABEL_22;
          }
        }
        else
        {
          unint64_t v21 = 0;
          uint64_t v22 = (_DWORD *)(4 * v17);
          *(_DWORD *)(4 * v17) = *v13;
          uint64_t v12 = 4 * v17 + 4;
          if (v9 != v15) {
            goto LABEL_19;
          }
        }
        unint64_t v11 = a2;
        unint64_t v2 = this;
        *a2 = v22;
        a2[1] = v12;
        a2[2] = &v21[4 * v20];
        if (v15) {
          goto LABEL_26;
        }
      }
LABEL_8:
      v11[1] = v12;
      ++v10;
      unint64_t v9 = (char *)v12;
      if (v10 >= *((int *)v2 + 76)) {
        return;
      }
    }
  }
  uint64_t v5 = operator new(4uLL);
  *uint64_t v5 = v4;
  a2[1] = v5 + 1;
  a2[2] = v5 + 1;
  *a2 = v5;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize((uint64_t)v2 + 520, *((_DWORD *)v2 + 4));
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((void *)v2 + 65, v4 >> 1);
  uint64_t v6 = *((void *)v2 + 26);
  int v7 = *(_DWORD *)(*(void *)(v6 + 120) + 8 * (v4 >> 1) + 4);
  if (*((int *)v2 + 76) < 1) {
    uint64_t v8 = (int *)(v6 + 12);
  }
  else {
    uint64_t v8 = (int *)*((void *)v2 + 39);
  }
  uint64_t v32 = (int **)a2;
  int v107 = *v8;
  int v33 = *(_DWORD *)(v6 + 12);
  int v110 = v7;
  int v111 = v33;
  if (v7 >= v33) {
    google::MakeCheckOpString<int,int>((int)&v110, (int)&v111, "trail_index < trail_->Index()");
  }
  int v108 = (void **)((char *)v2 + 576);
  while (1)
  {
    if ((v7 & 0x80000000) == 0)
    {
      while (1)
      {
        int v34 = *(_DWORD *)(*(void *)(*((void *)v2 + 26) + 72) + 4 * v7);
        if ((*(void *)(*((void *)v2 + 66) + (((unint64_t)((uint64_t)v34 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v34 >> 1))) {
          break;
        }
        BOOL v102 = v7-- <= 0;
        if (v102)
        {
          int v7 = -1;
          break;
        }
      }
    }
    if (v7 < v107) {
      break;
    }
    uint64_t v35 = (void *)*((void *)v2 + 26);
    int v36 = *(_DWORD *)(v35[9] + 4 * v7);
    uint64_t v37 = (uint64_t)v36 >> 1;
    uint64_t v38 = v35[15];
    unsigned int v39 = *(_DWORD *)(v38 + 8 * (v36 >> 1));
    uint64_t v40 = v37;
    if ((v39 & 0xF0000000) == 0x30000000)
    {
      uint64_t v40 = *(int *)(v35[19] + 4 * v37);
      int v41 = *(_DWORD *)(v38 + 8 * v40) >> 28;
      if (!v41)
      {
LABEL_50:
        --v7;
        if (*(_DWORD *)(v35[31] + 4 * v40) == 2) {
          goto LABEL_47;
        }
        goto LABEL_51;
      }
    }
    else
    {
      int v41 = *(_DWORD *)(v38 + 8 * (v36 >> 1)) >> 28;
      if (!v41) {
        goto LABEL_50;
      }
    }
    --v7;
    if (v41 == 2)
    {
LABEL_47:
      long long v43 = v32[1];
      unint64_t v42 = (unint64_t)v32[2];
      if ((unint64_t)v43 >= v42)
      {
        double v46 = *v32;
        uint64_t v47 = (char *)v43 - (char *)*v32;
        uint64_t v48 = v47 >> 2;
        unint64_t v49 = (v47 >> 2) + 1;
        if (v49 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v50 = v42 - (void)v46;
        if (v50 >> 1 > v49) {
          unint64_t v49 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (!v51)
        {
          uint64_t v52 = 0;
          std::string::size_type v53 = (int *)(4 * v48);
          *(_DWORD *)(4 * v48) = v36;
          uint64_t v54 = 4 * v48 + 4;
          if (v43 == v46) {
            goto LABEL_104;
          }
LABEL_65:
          unint64_t v55 = (char *)(v43 - 1) - (char *)v46;
          if (v55 < 0x2C) {
            goto LABEL_126;
          }
          if ((unint64_t)((char *)v43 - &v52[v47]) < 0x20) {
            goto LABEL_126;
          }
          uint64_t v91 = (v55 >> 2) + 1;
          uint64_t v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
          std::string::size_type v93 = &v43[v92 / 0xFFFFFFFFFFFFFFFCLL];
          std::string::size_type v53 = (int *)((char *)v53 - v92);
          unint64_t v94 = &v52[4 * v48 - 16];
          long long v95 = v43 - 4;
          uint64_t v96 = v91 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v97 = *(_OWORD *)v95;
            *(v94 - 1) = *((_OWORD *)v95 - 1);
            *unint64_t v94 = v97;
            v94 -= 2;
            v95 -= 8;
            v96 -= 8;
          }
          while (v96);
          long long v43 = v93;
          if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_126:
            do
            {
              int v98 = *--v43;
              *--std::string::size_type v53 = v98;
            }
            while (v43 != v46);
          }
          goto LABEL_104;
        }
        if (v51 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v52 = operator new(4 * v51);
        std::string::size_type v53 = (int *)&v52[4 * v48];
        *std::string::size_type v53 = v36;
        uint64_t v54 = (uint64_t)(v53 + 1);
        if (v43 != v46) {
          goto LABEL_65;
        }
LABEL_104:
        uint64_t v32 = (int **)a2;
        *a2 = v53;
        a2[1] = v54;
        a2[2] = &v52[4 * v51];
        if (v46) {
          operator delete(v46);
        }
        a2[1] = v54;
      }
      else
      {
        *long long v43 = v36;
        v32[1] = v43 + 1;
      }
    }
    else
    {
LABEL_51:
      if ((v39 & 0xF0000000) == 0x30000000)
      {
        uint64_t v37 = *(int *)(v35[19] + 4 * v37);
        unsigned int v39 = *(_DWORD *)(v38 + 8 * v37);
      }
      unsigned int v44 = v39 >> 28;
      if (v44)
      {
        if (v44 - 1 > 1)
        {
          uint64_t v56 = *(void *)(v35[34] + 8 * v44);
          uint64_t v57 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v56 + 32))(v56, *((void *)v2 + 26), *(unsigned int *)(v38 + 8 * v37 + 4));
          uint64_t v58 = (uint64_t *)(v35[28] + 16 * v37);
          *uint64_t v58 = v57;
          v58[1] = v59;
        }
        else
        {
          int v45 = (void *)(v35[28] + 16 * v37);
          *int v45 = 0;
          v45[1] = 0;
        }
        *(_DWORD *)(v35[31] + 4 * v37) = *(_DWORD *)(v38 + 8 * v37) >> 28;
        *(_DWORD *)(v35[15] + 8 * v37) &= 0xFFFFFFFu;
      }
      uint64_t v60 = (int **)(v35[28] + 16 * v37);
      int v61 = v60[1];
      if (v61)
      {
        uint64_t v62 = *v60;
        uint64_t v63 = (uint64_t)&(*v60)[(void)v61];
LABEL_74:
        int v65 = *v62;
        int v66 = *v62 >> 1;
        if ((*(_DWORD *)(*(void *)(*((void *)v2 + 26) + 120) + 8 * v66) & 0xFFFFFFE) == 0) {
          goto LABEL_73;
        }
        unsigned int v67 = v65 >> 1;
        unint64_t v68 = (unint64_t)((uint64_t)v65 >> 1) >> 6;
        uint64_t v69 = *((void *)v2 + 66);
        uint64_t v70 = *(void *)(v69 + 8 * v68);
        uint64_t v71 = 1 << v67;
        if ((v70 & v71) != 0) {
          goto LABEL_73;
        }
        *(void *)(v69 + 8 * v68) = v70 | v71;
        uint64_t v72 = (int *)*((void *)v2 + 73);
        unint64_t v73 = *((void *)v2 + 74);
        if ((unint64_t)v72 < v73)
        {
          *uint64_t v72 = v66;
          uint64_t v64 = (uint64_t)(v72 + 1);
        }
        else
        {
          uint64_t v74 = (int *)*v108;
          uint64_t v75 = (char *)v72 - (unsigned char *)*v108;
          uint64_t v76 = v75 >> 2;
          unint64_t v77 = (v75 >> 2) + 1;
          if (v77 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v78 = v73 - (void)v74;
          if (v78 >> 1 > v77) {
            unint64_t v77 = v78 >> 1;
          }
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v77;
          }
          if (v79)
          {
            if (v79 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v80 = operator new(4 * v79);
            std::string::size_type v81 = (int *)&v80[4 * v76];
            *std::string::size_type v81 = v66;
            uint64_t v64 = (uint64_t)(v81 + 1);
            if (v72 != v74)
            {
LABEL_86:
              unint64_t v82 = (char *)(v72 - 1) - (char *)v74;
              if (v82 < 0x2C) {
                goto LABEL_127;
              }
              if ((unint64_t)((char *)v72 - &v80[v75]) < 0x20) {
                goto LABEL_127;
              }
              uint64_t v83 = (v82 >> 2) + 1;
              uint64_t v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
              std::string::size_type v85 = &v72[v84 / 0xFFFFFFFFFFFFFFFCLL];
              std::string::size_type v81 = (int *)((char *)v81 - v84);
              uint64_t v86 = &v80[4 * v76 - 16];
              long long v87 = v72 - 4;
              uint64_t v88 = v83 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v89 = *(_OWORD *)v87;
                *(v86 - 1) = *((_OWORD *)v87 - 1);
                *uint64_t v86 = v89;
                v86 -= 2;
                v87 -= 8;
                v88 -= 8;
              }
              while (v88);
              uint64_t v72 = v85;
              if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_127:
                do
                {
                  int v90 = *--v72;
                  *--std::string::size_type v81 = v90;
                }
                while (v72 != v74);
              }
            }
          }
          else
          {
            uint64_t v80 = 0;
            std::string::size_type v81 = (int *)(4 * v76);
            *(_DWORD *)(4 * v76) = v66;
            uint64_t v64 = 4 * v76 + 4;
            if (v72 != v74) {
              goto LABEL_86;
            }
          }
          unint64_t v2 = this;
          *((void *)this + 72) = v81;
          *((void *)this + 73) = v64;
          *((void *)this + 74) = &v80[4 * v79];
          if (v74) {
            operator delete(v74);
          }
        }
        *((void *)v2 + 73) = v64;
LABEL_73:
        if (++v62 == (int *)v63)
        {
          uint64_t v32 = (int **)a2;
          continue;
        }
        goto LABEL_74;
      }
    }
  }
  long long v99 = *v32;
  uint64_t v100 = v32[1];
  std::string::size_type v101 = v100 - 1;
  BOOL v102 = *v32 != v100 && v101 > v99;
  if (v102)
  {
    unint64_t v103 = (unint64_t)(v99 + 1);
    do
    {
      int v104 = *(_DWORD *)(v103 - 4);
      *(_DWORD *)(v103 - 4) = *v101;
      *v101-- = v104;
      BOOL v105 = v103 >= (unint64_t)v101;
      v103 += 4;
    }
    while (!v105);
  }
}

void sub_23CD87530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD87538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10 = *(void **)a9;
  if (*(void *)a9)
  {
    *(void *)(a9 + 8) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatSolver::ComputeLbd<operations_research::sat::SatClause>(uint64_t a1, int *a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 224) + 307)) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 340);
  }
  uint64_t v5 = a2 + 1;
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 856, ((*(_DWORD *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * (a2[1] >> 1)) >> 1) & 0x7FFFFFF) + 1);
  for (uint64_t i = 4 * *a2; i; i -= 4)
  {
    unint64_t v8 = ((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * (*v5 >> 1)) >> 1) & 0x7FFFFFF;
    if ((int)v8 > v4
      && ((*(void *)(*(void *)(a1 + 864) + ((v8 >> 3) & 0xFFFFF8)) >> ((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * (*v5 >> 1)) >> 1)) & 1) == 0)
    {
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set((void *)(a1 + 856), v8);
    }
    ++v5;
  }
  return (*(void *)(a1 + 920) - *(void *)(a1 + 912)) >> 2;
}

void operations_research::sat::SatStatusString(uint64_t a1@<X0>, char *a2@<X8>)
{
  switch((int)a1)
  {
    case 0:
      a2[23] = 17;
      strcpy(a2, "ASSUMPTIONS_UNSAT");
      break;
    case 1:
      a2[23] = 10;
      strcpy(a2, "INFEASIBLE");
      break;
    case 2:
      a2[23] = 8;
      strcpy(a2, "FEASIBLE");
      break;
    case 3:
      a2[23] = 13;
      strcpy(a2, "LIMIT_REACHED");
      break;
    default:
      google::LogMessage::LogMessage((google::LogMessage *)v8, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 2522, 2);
      int v4 = (void *)google::LogMessage::stream((google::LogMessage *)v8);
      uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid SatSolver::Status ", 26);
      operations_research::sat::SatStatusString(__p, a1);
      if ((v10 & 0x80u) == 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v7 = v10;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      if ((char)v10 < 0) {
        operator delete(__p[0]);
      }
      google::LogMessage::~LogMessage((google::LogMessage *)v8);
      a2[23] = 7;
      strcpy(a2, "UNKNOWN");
      break;
  }
}

void sub_23CD87844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a10);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a10);
  _Unwind_Resume(a1);
}

double operations_research::sat::SatSolver::ProcessNewlyFixedVariables(operations_research::sat::SatSolver *this)
{
  if (*((void *)this + 165))
  {
    if (!*((_DWORD *)this + 76))
    {
      int v20 = *((_DWORD *)this + 90);
      for (uint64_t i = *((void *)this + 26); v20 < *(_DWORD *)(i + 12); uint64_t i = *((void *)this + 26))
      {
        v22[0] = *(_DWORD *)(*(void *)(i + 72) + 4 * v20);
        operations_research::sat::DratProofHandler::AddClause(*((void *)this + 165), v22, 1);
        int v20 = *((_DWORD *)this + 90) + 1;
        *((_DWORD *)this + 9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v20;
      }
    }
  }
  uint64_t v2 = *((void *)this + 4);
  int v4 = *(int ***)(v2 + 304);
  uint64_t v3 = *(int ***)(v2 + 312);
  if (v4 == v3)
  {
    int v6 = 0;
    operations_research::sat::LiteralWatchers::CleanUpWatchers(v2);
    goto LABEL_23;
  }
  int v5 = 0;
  int v6 = 0;
  do
  {
    uint64_t v7 = *v4;
    uint64_t v8 = **v4;
    if ((int)v8 >= 1)
    {
      if (operations_research::sat::SatClause::RemoveFixedLiteralsAndTestIfTrue(*v4, *((void *)this + 26) + 16))
      {
        operations_research::sat::LiteralWatchers::LazyDetach(*((void *)this + 4), v7);
        ++v5;
      }
      else
      {
        uint64_t v9 = *v7;
        if (v9 != v8)
        {
          uint64_t v10 = *((void *)this + 165);
          if (v10)
          {
            *(void *)uint64_t v22 = *v7;
            int v23 = 0;
            if (!v9) {
              google::MakeCheckOpString<unsigned long,int>((int)v22, (int)&v23, "new_size > 0");
            }
            operations_research::sat::DratProofHandler::AddClause(v10, v7 + 1, v9);
            operations_research::sat::DratProofHandler::DeleteClause(*((void *)this + 165), v7 + 1, v8);
          }
          if (v9 == 2 && *(unsigned char *)(*((void *)this + 28) + 306))
          {
            uint64_t v11 = v7[1];
            uint64_t v12 = v7[2];
            if (!*((unsigned char *)this + 128)
              || operations_research::sat::BinaryClauseManager::Add((uint64_t *)this + 17, v11 | (v12 << 32)))
            {
              operations_research::sat::BinaryImplicationGraph::AddBinaryClause(*((void *)this + 3), v11, v12);
              operations_research::sat::SatSolver::InitializePropagators(this);
            }
            operations_research::sat::LiteralWatchers::LazyDetach(*((void *)this + 4), v7);
            ++v6;
          }
        }
      }
    }
    ++v4;
  }
  while (v4 != v3);
  operations_research::sat::LiteralWatchers::CleanUpWatchers(*((void *)this + 4));
  if (v5 <= 0)
  {
LABEL_23:
    if (v6 <= 0) {
      goto LABEL_28;
    }
  }
  if (*operations_research::sat::SatSolver::ProcessNewlyFixedVariables(void)::vlocal__ >= 1
    && (operations_research::sat::SatSolver::ProcessNewlyFixedVariables(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::SatSolver::ProcessNewlyFixedVariables(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/sat_solver.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v22, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.cc", 1587);
    google::LogMessage::stream((google::LogMessage *)v22);
    unint64_t v13 = (void *)std::ostream::operator<<();
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" fixed variables at level 0. ", 29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Detached ", 9);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" clauses. ", 10);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" converted to binary.", 21);
    google::LogMessage::~LogMessage((google::LogMessage *)v22);
  }
LABEL_28:
  operations_research::sat::BinaryImplicationGraph::RemoveFixedVariables(*((void *)this + 3));
  uint64_t v17 = *((void *)this + 26);
  uint64_t v18 = *(int *)(v17 + 12);
  *((_DWORD *)this + 86) = v18;
  double result = ((double)*(uint64_t *)(*((void *)this + 3) + 280)
          + (double)(*(void *)v17 + v18) * 8.0
          + (double)*(uint64_t *)(*((void *)this + 4) + 192) * 4.0
          + (double)*(uint64_t *)(*((void *)this + 4) + 200)
          + (double)*(uint64_t *)(*((void *)this + 5) + 408) * 20.0
          + (double)*(uint64_t *)(*((void *)this + 5) + 424) * 2.0
          + (double)*(uint64_t *)(*((void *)this + 5) + 416))
         * 0.00000001;
  *((double *)this + 44) = result;
  return result;
}

void sub_23CD87BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD87C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SatSolver::ResolvePBConflict(uint64_t a1, int a2, unint64_t a3, uint64_t *a4)
{
  LODWORD(v6) = a2;
  uint64_t v8 = *(void **)(a1 + 208);
  uint64_t v9 = v8[15];
  uint64_t v10 = (_DWORD *)(v9 + 8 * (int)v6);
  if (*v10 >> 28 != 3)
  {
    uint64_t v11 = (int)v6;
    unsigned int v12 = *(_DWORD *)(v9 + 8 * (int)v6);
    if (v12 >> 28 == 3) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v13 = v11;
    int v14 = v6;
    unsigned int v15 = v12 >> 28;
    if (!v15) {
      goto LABEL_9;
    }
LABEL_7:
    int v16 = v10[1];
    uint64_t v17 = *(operations_research::sat::PbConstraints **)(a1 + 40);
    if (v15 != *((_DWORD *)v17 + 8)) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v11 = *(int *)(v8[19] + 4 * (int)v6);
  unsigned int v12 = *(_DWORD *)(v9 + 8 * v11);
  if (v12 >> 28 != 3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v13 = *(int *)(v8[19] + 4 * v11);
  int v14 = v6;
  unsigned int v15 = *(_DWORD *)(v9 + 8 * v13) >> 28;
  if (v15) {
    goto LABEL_7;
  }
LABEL_9:
  int v16 = v10[1];
  uint64_t v17 = *(operations_research::sat::PbConstraints **)(a1 + 40);
  if (*(_DWORD *)(v8[31] + 4 * v13) != *((_DWORD *)v17 + 8)) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v18 = (operations_research::sat::UpperBoundedLinearConstraint *)operations_research::sat::PbConstraints::ReasonPbConstraint(v17, *(_DWORD *)(v9 + 8 * v11 + 4));
  uint64_t v8 = *(void **)(a1 + 208);
  if (v18)
  {
    operations_research::sat::UpperBoundedLinearConstraint::ResolvePBConflict(v18, v8, v14, (void **)a3, a4);
    return 0;
  }
LABEL_12:
  operations_research::sat::MutableUpperBoundedLinearConstraint::ReduceSlackTo(a3, v8, v16, *a4, 0);
  operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)a3, ((2 * v6) | (~*(void *)(*(void *)(*(void *)(a1 + 208) + 24)+ (((unint64_t)(2 * (int)v6) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (2 * (v14 & 0x1Fu))) & 1) ^ 1, 1);
  int v20 = *(void **)(a1 + 208);
  uint64_t v21 = v20[15];
  if (*(_DWORD *)(v21 + 8 * (int)v6) >> 28 != 3)
  {
    uint64_t v6 = (int)v6;
    uint64_t v22 = (_DWORD *)(v21 + 8 * (int)v6);
    unint64_t v23 = *v22;
    if (!(v23 >> 28)) {
      goto LABEL_14;
    }
LABEL_17:
    unint64_t v26 = v23 >> 28;
    if ((v26 - 1) > 1)
    {
      uint64_t v28 = *(void *)(v20[34] + 8 * v26);
      uint64_t v29 = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v28 + 32))(v28, v20, *(unsigned int *)(v21 + 8 * v6 + 4));
      uint64_t v30 = (uint64_t *)(v20[28] + 16 * v6);
      *uint64_t v30 = v29;
      v30[1] = v31;
    }
    else
    {
      uint64_t v27 = (void *)(v20[28] + 16 * v6);
      *uint64_t v27 = 0;
      v27[1] = 0;
    }
    *(_DWORD *)(v20[31] + 4 * v6) = *v22 >> 28;
    *(_DWORD *)(v20[15] + 8 * v6) &= 0xFFFFFFFu;
    uint64_t v24 = (int **)(v20[28] + 16 * v6);
    uint64_t v25 = (uint64_t)v24[1];
    if (!v25) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  uint64_t v6 = *(int *)(v20[19] + 4 * (int)v6);
  uint64_t v22 = (_DWORD *)(v21 + 8 * v6);
  unint64_t v23 = *v22;
  if (v23 >> 28) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v24 = (int **)(v20[28] + 16 * v6);
  uint64_t v25 = (uint64_t)v24[1];
  if (v25)
  {
LABEL_21:
    uint64_t v32 = *v24;
    uint64_t v33 = (v25 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v34 = 4 * v25;
    do
    {
      int v35 = *v32++;
      operations_research::sat::MutableUpperBoundedLinearConstraint::AddTerm((uint64_t *)a3, v35 ^ 1, 1);
      v34 -= 4;
    }
    while (v34);
    uint64_t v25 = v33 + 1;
  }
LABEL_24:
  *(void *)(a3 + 24) += v25;
  *a4 = -1;
  return 1;
}

uint64_t operations_research::sat::SatSolver::MinimizeConflictSimple(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if ((unint64_t)(v4 - *a2) >= 5)
  {
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(result + 304);
    unint64_t v7 = 1;
    int v8 = 1;
    while (1)
    {
      int v9 = *(_DWORD *)(v3 + 4 * v7);
      uint64_t v10 = *(void **)(v5 + 208);
      uint64_t v11 = v10[15];
      unsigned int v12 = *(_DWORD *)(v11 + 8 * (v9 >> 1));
      if (((v12 >> 1) & 0x7FFFFFF) == v6) {
        goto LABEL_3;
      }
      uint64_t v13 = (uint64_t)v9 >> 1;
      if (v12 >> 28 == 3)
      {
        uint64_t v13 = *(int *)(v10[19] + 4 * v13);
        unsigned int v14 = *(_DWORD *)(v11 + 8 * v13) >> 28;
        if (!v14)
        {
LABEL_8:
          uint64_t v15 = v10[28] + 16 * v13;
          uint64_t v16 = *(void *)(v15 + 8);
          if (v16) {
            goto LABEL_15;
          }
          goto LABEL_3;
        }
      }
      else
      {
        unsigned int v14 = v12 >> 28;
        if (!v14) {
          goto LABEL_8;
        }
      }
      if (v14 - 1 > 1)
      {
        uint64_t v18 = *(void *)(v10[34] + 8 * v14);
        double result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v18 + 32))(v18, *(void *)(v5 + 208), *(unsigned int *)(v11 + 8 * v13 + 4));
        uint64_t v19 = (uint64_t *)(v10[28] + 16 * v13);
        *uint64_t v19 = result;
        v19[1] = v20;
      }
      else
      {
        uint64_t v17 = (void *)(v10[28] + 16 * v13);
        *uint64_t v17 = 0;
        v17[1] = 0;
      }
      *(_DWORD *)(v10[31] + 4 * v13) = *(_DWORD *)(v11 + 8 * v13) >> 28;
      *(_DWORD *)(v10[15] + 8 * v13) &= 0xFFFFFFFu;
      uint64_t v15 = v10[28] + 16 * v13;
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
LABEL_15:
        uint64_t v21 = *(int **)v15;
        uint64_t v22 = 4 * v16;
        while ((*(_DWORD *)(*(void *)(*(void *)(v5 + 208) + 120) + 8 * (*v21 >> 1)) & 0xFFFFFFE) == 0
             || ((*(void *)(*(void *)(v5 + 528)
                            + (((unint64_t)((uint64_t)*v21 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (*v21 >> 1)) & 1) != 0)
        {
          ++v21;
          v22 -= 4;
          if (!v22) {
            goto LABEL_4;
          }
        }
      }
LABEL_3:
      *(_DWORD *)(*a2 + 4 * v8++) = *(_DWORD *)(*a2 + 4 * v7);
LABEL_4:
      ++v7;
      uint64_t v3 = *a2;
      uint64_t v4 = a2[1];
      if (v7 >= (v4 - *a2) >> 2) {
        goto LABEL_21;
      }
    }
  }
  int v8 = 1;
LABEL_21:
  uint64_t v23 = v3 + 4 * v8;
  if (v23 != v4) {
    a2[1] = v23;
  }
  return result;
}

void operations_research::sat::SatSolver::MinimizeConflictRecursively(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void *)(a1 + 600);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 600, *(_DWORD *)(a1 + 16));
  unint64_t v6 = *(int *)(a1 + 304);
  uint64_t v7 = *(void *)(a1 + 760);
  unint64_t v8 = (*(void *)(a1 + 768) - v7) >> 2;
  if (v8 <= v6)
  {
    unint64_t v9 = v6 + 1;
    std::vector<int>::value_type __x = 0x7FFFFFFF;
    if (v9 <= v8)
    {
      if (v9 < v8) {
        *(void *)(a1 + 768) = v7 + 4 * v9;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)(a1 + 760), v9 - v8, &__x);
    }
  }
  uint64_t v10 = *(int **)(a1 + 576);
  uint64_t v11 = *(int **)(a1 + 584);
  if (v10 != v11)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 208) + 120);
    uint64_t v13 = *(void *)(a1 + 760);
    do
    {
      uint64_t v14 = *v10++;
      uint64_t v15 = (unsigned int *)(v12 + 8 * v14);
      unint64_t v17 = *v15;
      signed int v16 = v15[1];
      uint64_t v18 = 4 * ((v17 >> 1) & 0x7FFFFFF);
      if (v16 >= *(_DWORD *)(v13 + v18)) {
        signed int v16 = *(_DWORD *)(v13 + v18);
      }
      *(_DWORD *)(v13 + v18) = v16;
    }
    while (v10 != v11);
  }
  uint64_t v19 = *a2;
  unint64_t v20 = a2[1] - *a2;
  if (v20 >= 5)
  {
    unint64_t v21 = 1;
    int v22 = 1;
    while (1)
    {
      int v23 = *(int *)(v19 + 4 * v21) >> 1;
      uint64_t v24 = *(void *)(a1 + 216);
      uint64_t v25 = *(unsigned __int8 **)(v24 + 120);
      if (v25)
      {
        unsigned __int8 v26 = atomic_load(v25);
        if (v26) {
          goto LABEL_29;
        }
      }
      if (fmax(*(double *)(v24 + 104) - *(double *)(v24 + 112), 0.0) <= 0.0) {
        goto LABEL_29;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)CanBeInferedFromConflictVariables);
      if (*(void *)(v24 + 24) <= CurrentTimeNanos - *(void *)(v24 + 8)) {
        uint64_t v28 = CurrentTimeNanos - *(void *)(v24 + 8);
      }
      else {
        uint64_t v28 = *(void *)(v24 + 24);
      }
      operations_research::RunningMax<long long>::Add((int *)(v24 + 32), v28);
      *(void *)(v24 + 8) = CurrentTimeNanos;
      if (*(void *)(*(void *)(v24 + 40) + 8 * *(int *)(v24 + 68)) + CurrentTimeNanos >= *(void *)(v24 + 16))
      {
        if (!FLAGS_time_limit_use_usertime) {
          goto LABEL_23;
        }
        double v30 = *(double *)(v24 + 96);
        if (*(unsigned char *)(v24 + 72))
        {
          double v31 = v30
              + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v29) - *(void *)(v24 + 80) + *(void *)(v24 + 88))
              * -0.000000001;
          if (v31 <= 0.0001) {
            goto LABEL_23;
          }
        }
        else
        {
          double v31 = v30 + (double)*(uint64_t *)(v24 + 88) * -0.000000001;
          if (v31 <= 0.0001)
          {
LABEL_23:
            *(void *)(v24 + 16) = 0;
LABEL_29:
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, v23);
            uint64_t v19 = *a2;
            *(_DWORD *)(*a2 + 4 * v22++) = *(_DWORD *)(*a2 + 4 * v21);
            goto LABEL_30;
          }
        }
        *(void *)(v24 + 16) = *(void *)(v24 + 8) + (uint64_t)(v31 * 1000000000.0);
      }
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * v23 + 4) <= *(_DWORD *)(*(void *)(a1 + 760)
                                                                                                + 4
                                                                                                * (((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 208) + 120) + 8 * v23) >> 1) & 0x7FFFFFF)))
        goto LABEL_29;
      BOOL CanBeInferedFromConflictVariables = operations_research::sat::SatSolver::CanBeInferedFromConflictVariables((void *)a1, v23);
      if (!CanBeInferedFromConflictVariables) {
        goto LABEL_29;
      }
      uint64_t v19 = *a2;
LABEL_30:
      ++v21;
      unint64_t v32 = (a2[1] - v19) >> 2;
      if (v32 <= v21)
      {
        uint64_t v33 = v22;
        BOOL v34 = v22 >= v32;
        unint64_t v35 = v22 - v32;
        if (v22 > v32) {
          goto LABEL_32;
        }
LABEL_34:
        if (!v34) {
          a2[1] = v19 + 4 * v33;
        }
        goto LABEL_36;
      }
    }
  }
  unint64_t v36 = v20 >> 2;
  uint64_t v33 = 1;
  BOOL v34 = v36 <= 1;
  unint64_t v35 = 1 - v36;
  if (v36) {
    goto LABEL_34;
  }
LABEL_32:
  std::vector<operations_research::sat::Literal>::__append((uint64_t)a2, v35);
LABEL_36:
  uint64_t v37 = *(void *)(a1 + 760);
  uint64_t v38 = *(int **)(a1 + 584);
  unsigned int v39 = *(int **)(a1 + 576);
  if (v38 - v39 >= (unint64_t)(int)((unint64_t)(*(void *)(a1 + 768) - v37) >> 3))
  {
    *(void *)(a1 + 768) = v37;
  }
  else if (v39 != v38)
  {
    uint64_t v40 = *(void *)(*(void *)(a1 + 208) + 120);
    do
    {
      uint64_t v41 = *v39++;
      *(_DWORD *)(v37 + 4 * (((unint64_t)*(unsigned int *)(v40 + 8 * v41) >> 1) & 0x7FFFFFF)) = 0x7FFFFFFF;
    }
    while (v39 != v38);
  }
}

void operations_research::sat::SatSolver::MinimizeConflictExperimental(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (void *)(a1 + 520);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::ClearAndResize(a1 + 520, *(_DWORD *)(a1 + 16));
  std::string v148 = a2;
  std::string v149 = v4;
  uint64_t v5 = (int *)*a2;
  unint64_t v6 = (int *)a2[1];
  uint64_t v155 = v3;
  if ((int *)*a2 != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    int v10 = *(_DWORD *)(v3 + 304);
    int v153 = v10;
    while (1)
    {
      uint64_t v12 = (*v5 >> 1);
      operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v4, *v5 >> 1);
      unint64_t v13 = ((unint64_t)*(unsigned int *)(*(void *)(*(void *)(v3 + 208) + 120) + 8 * (int)v12) >> 1) & 0x7FFFFFF;
      if ((int)v13 >= v10)
      {
        uint64_t v11 = v8;
      }
      else
      {
        unint64_t v14 = v12 | (v13 << 32);
        if (v8 >= v9)
        {
          uint64_t v15 = v7;
          uint64_t v16 = (char *)v8 - (char *)v7;
          uint64_t v17 = v16 >> 3;
          unint64_t v18 = (v16 >> 3) + 1;
          if (v18 >> 61) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v15;
          unint64_t v20 = (char *)v9 - (char *)v15;
          unint64_t v21 = ((char *)v9 - (char *)v15) >> 2;
          if (v21 > v18) {
            unint64_t v18 = v21;
          }
          if (v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v18;
          }
          if (v22)
          {
            if (v22 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v23 = operator new(8 * v22);
          }
          else
          {
            int v23 = 0;
          }
          uint64_t v24 = (uint64_t *)&v23[8 * v17];
          *uint64_t v24 = v14;
          uint64_t v25 = v24 + 1;
          unsigned __int8 v26 = v19;
          if (v8 != v19)
          {
            unint64_t v27 = (char *)(v8 - 1) - (char *)v19;
            uint64_t v3 = v155;
            if (v27 < 0x168
              || &v23[v16 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v23[v16 - 8]
              || (uint64_t *)((char *)v8 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1
              || (unint64_t)((char *)v8 - &v23[v16]) < 0x20)
            {
              uint64_t v28 = v8;
              unsigned __int8 v26 = v19;
              uint64_t v4 = v149;
              uint64_t v11 = v24 + 1;
            }
            else
            {
              uint64_t v30 = (v27 >> 3) + 1;
              uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v28 = &v8[v31 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v24 = (uint64_t *)((char *)v24 - v31);
              unint64_t v32 = &v23[8 * v17 - 16];
              uint64_t v33 = v8 - 2;
              uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              unsigned __int8 v26 = v19;
              do
              {
                long long v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                *unint64_t v32 = v35;
                v32 -= 2;
                v33 -= 4;
                v34 -= 4;
              }
              while (v34);
              uint64_t v4 = v149;
              uint64_t v11 = v25;
              if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_22:
                unint64_t v9 = (uint64_t *)&v23[8 * v22];
                if (v26) {
                  goto LABEL_23;
                }
                goto LABEL_24;
              }
            }
            do
            {
              uint64_t v29 = *--v28;
              *--uint64_t v24 = v29;
            }
            while (v28 != v26);
            goto LABEL_22;
          }
          uint64_t v3 = v155;
          uint64_t v4 = v149;
          uint64_t v11 = v24 + 1;
          unint64_t v9 = (uint64_t *)&v23[8 * v22];
          if (v26) {
LABEL_23:
          }
            operator delete(v26);
LABEL_24:
          uint64_t v7 = v24;
          int v10 = v153;
          goto LABEL_4;
        }
        *unint64_t v8 = v14;
        uint64_t v11 = v8 + 1;
        uint64_t v3 = v155;
      }
LABEL_4:
      ++v5;
      unint64_t v8 = v11;
      if (v5 == v6) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v7 = 0;
LABEL_35:
  unint64_t v36 = 126 - 2 * __clz(v11 - v7);
  if (v11 == v7) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  std::string v156 = 0;
  std::string v157 = 0;
  std::string v158 = 0;
  if (v11 == v7)
  {
    unint64_t v134 = 0;
    char v139 = (int *)*v148;
    uint64_t v138 = (int *)v148[1];
    int v140 = 0;
    uint64_t v141 = (uint64_t)v138 - *v148;
    if (v138 == (int *)*v148) {
      goto LABEL_166;
    }
    goto LABEL_160;
  }
  uint64_t v38 = v7;
  std::string v150 = v7;
  std::string v151 = v11;
  while (2)
  {
    uint64_t v39 = *v38;
    uint64_t v40 = *(void **)(v3 + 208);
    uint64_t v41 = v40[15];
    uint64_t v42 = *v38;
    if (*(_DWORD *)(v41 + (*v38 << 32 >> 29)) >> 28 == 3) {
      LODWORD(v42) = *(_DWORD *)(v40[19] + 4 * (int)v39);
    }
    uint64_t v43 = (int)v42;
    unsigned int v44 = (_DWORD *)(v41 + 8 * (int)v42);
    unint64_t v45 = *v44;
    if (v45 >> 28)
    {
      unint64_t v46 = v45 >> 28;
      if ((v46 - 1) > 1)
      {
        uint64_t v48 = *(void *)(v40[34] + 8 * v46);
        uint64_t v49 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v48 + 32))(v48, *(void *)(v3 + 208), *(unsigned int *)(v41 + 8 * v43 + 4));
        uint64_t v50 = (uint64_t *)(v40[28] + 16 * v43);
        *uint64_t v50 = v49;
        v50[1] = v51;
      }
      else
      {
        uint64_t v47 = (void *)(v40[28] + 16 * v43);
        *uint64_t v47 = 0;
        v47[1] = 0;
      }
      *(_DWORD *)(v40[31] + 4 * v43) = *v44 >> 28;
      *(_DWORD *)(v40[15] + 8 * v43) &= 0xFFFFFFFu;
    }
    uint64_t v52 = (int **)(v40[28] + 16 * v43);
    std::string::size_type v53 = v52[1];
    if (!v53) {
      goto LABEL_40;
    }
    int v152 = v39;
    std::string v154 = v38;
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = *v52;
    uint64_t v59 = (uint64_t)&(*v52)[(void)v53];
    do
    {
      int v61 = *v58;
      if ((*(_DWORD *)(*(void *)(*(void *)(v3 + 208) + 120) + 8 * (*v58 >> 1)) & 0xFFFFFFE) == 0
        || ((*(void *)(*(void *)(v3 + 528) + (((unint64_t)((uint64_t)v61 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v61 >> 1)) & 1) != 0)
      {
        goto LABEL_52;
      }
      if (v56 < v57)
      {
        *(_DWORD *)uint64_t v56 = v61;
        uint64_t v60 = (uint64_t)(v56 + 4);
        goto LABEL_51;
      }
      uint64_t v62 = (v56 - v55) >> 2;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v57 - v55) >> 1 > v63) {
        unint64_t v63 = (v57 - v55) >> 1;
      }
      if ((unint64_t)(v57 - v55) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v63;
      }
      if (v64)
      {
        if (v64 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v65 = operator new(4 * v64);
        uint64_t v54 = (int *)&v65[4 * v62];
        *uint64_t v54 = v61;
        uint64_t v60 = (uint64_t)(v54 + 1);
        if (v56 == v55)
        {
LABEL_71:
          uint64_t v3 = v155;
          uint64_t v57 = &v65[4 * v64];
          if (!v55) {
            goto LABEL_51;
          }
LABEL_72:
          operator delete(v55);
          goto LABEL_51;
        }
      }
      else
      {
        int v65 = 0;
        uint64_t v54 = (int *)(4 * v62);
        *(_DWORD *)(4 * v62) = v61;
        uint64_t v60 = 4 * v62 + 4;
        if (v56 == v55) {
          goto LABEL_71;
        }
      }
      unint64_t v66 = v56 - 4 - v55;
      if (v66 < 0xBC
        || &v65[v56 - v55 - 4 - (v66 & 0xFFFFFFFFFFFFFFFCLL)] > &v65[v56 - v55 - 4]
        || &v56[-(v66 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v56 - 4
        || (unint64_t)(v55 - v65) < 0x20)
      {
        unsigned int v67 = v56;
        uint64_t v3 = v155;
        do
        {
LABEL_67:
          int v68 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *--uint64_t v54 = v68;
        }
        while (v67 != v55);
        goto LABEL_68;
      }
      uint64_t v69 = (v66 >> 2) + 1;
      uint64_t v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v67 = &v56[-v70];
      uint64_t v54 = (int *)((char *)v54 - v70);
      uint64_t v71 = &v65[4 * v62 - 16];
      uint64_t v72 = v56 - 16;
      uint64_t v73 = v69 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v3 = v155;
      do
      {
        long long v74 = *(_OWORD *)v72;
        *(v71 - 1) = *((_OWORD *)v72 - 1);
        *uint64_t v71 = v74;
        v71 -= 2;
        v72 -= 32;
        v73 -= 8;
      }
      while (v73);
      if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_67;
      }
LABEL_68:
      uint64_t v57 = &v65[4 * v64];
      if (v55) {
        goto LABEL_72;
      }
LABEL_51:
      unint64_t v55 = (char *)v54;
      uint64_t v56 = (char *)v60;
      if ((unint64_t)(v60 - (void)v54) > 4) {
        break;
      }
LABEL_52:
      ++v58;
      uint64_t v60 = (uint64_t)v56;
    }
    while (v58 != (int *)v59);
    if (v54 == (int *)v60)
    {
      uint64_t v78 = v157;
      uint64_t v7 = v150;
      if (v157 < v158)
      {
        uint64_t v11 = v151;
        *(_DWORD *)std::string v157 = v152;
        uint64_t v38 = v154;
        v157 += 4;
        goto LABEL_152;
      }
      unint64_t v79 = v156;
      uint64_t v80 = (v157 - v156) >> 2;
      unint64_t v81 = v80 + 1;
      uint64_t v38 = v154;
      if ((unint64_t)(v80 + 1) >> 62) {
LABEL_178:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v82 = v158 - v156;
      if ((v158 - v156) >> 1 > v81) {
        unint64_t v81 = v82 >> 1;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v81;
      }
      if (v83)
      {
        if (v83 >> 62) {
          goto LABEL_179;
        }
        uint64_t v84 = (char *)operator new(4 * v83);
        std::string::size_type v85 = &v84[4 * v80];
        *(_DWORD *)std::string::size_type v85 = v152;
        uint64_t v86 = (uint64_t)(v85 + 4);
        if (v157 != v156) {
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v84 = 0;
        std::string::size_type v85 = (char *)(4 * v80);
        *(_DWORD *)(4 * v8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v152;
        uint64_t v86 = 4 * v80 + 4;
        if (v157 != v156)
        {
LABEL_96:
          unint64_t v87 = v157 - 4 - v156;
          if (v87 >= 0x2C)
          {
            uint64_t v3 = v155;
            if ((unint64_t)(v156 - v84) >= 0x20)
            {
              uint64_t v117 = (v87 >> 2) + 1;
              uint64_t v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
              unsigned __int8 v119 = &v157[-v118];
              v85 -= v118;
              uint64_t v120 = &v84[4 * v80 - 16];
              unsigned __int8 v121 = (long long *)(v157 - 16);
              uint64_t v122 = v117 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v123 = *v121;
                *((_OWORD *)v120 - 1) = *(v121 - 1);
                *(_OWORD *)uint64_t v120 = v123;
                v120 -= 32;
                v121 -= 2;
                v122 -= 8;
              }
              while (v122);
              uint64_t v78 = v119;
              if (v117 == (v117 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_137;
              }
            }
          }
          else
          {
            uint64_t v3 = v155;
          }
          do
          {
            int v124 = *((_DWORD *)v78 - 1);
            v78 -= 4;
            *((_DWORD *)v85 - 1) = v124;
            v85 -= 4;
          }
          while (v78 != v156);
LABEL_137:
          std::string v156 = v85;
          std::string v158 = &v84[4 * v83];
          if (v79) {
            operator delete(v79);
          }
          uint64_t v11 = v151;
          std::string v157 = (char *)v86;
          goto LABEL_152;
        }
      }
      uint64_t v3 = v155;
      goto LABEL_137;
    }
    BOOL v75 = v60 - (void)v54 == 4;
    uint64_t v7 = v150;
    uint64_t v11 = v151;
    uint64_t v38 = v154;
    if (!v75) {
      goto LABEL_152;
    }
    uint64_t v76 = v157;
    if (v157 < v158)
    {
      *(_DWORD *)std::string v157 = v152;
      uint64_t v77 = (uint64_t)(v157 + 4);
      goto LABEL_119;
    }
    uint64_t v88 = v156;
    uint64_t v89 = (v157 - v156) >> 2;
    unint64_t v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 62) {
      goto LABEL_178;
    }
    uint64_t v91 = v158 - v156;
    if ((v158 - v156) >> 1 > v90) {
      unint64_t v90 = v91 >> 1;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v90;
    }
    if (!v92)
    {
      std::string::size_type v93 = 0;
      unint64_t v94 = (char *)(4 * v89);
      *(_DWORD *)(4 * v89) = v152;
      uint64_t v77 = 4 * v89 + 4;
      if (v157 == v156) {
        goto LABEL_117;
      }
      goto LABEL_111;
    }
    if (v92 >> 62) {
      goto LABEL_179;
    }
    std::string::size_type v93 = (char *)operator new(4 * v92);
    unint64_t v94 = &v93[4 * v89];
    *(_DWORD *)unint64_t v94 = v152;
    uint64_t v77 = (uint64_t)(v94 + 4);
    if (v157 != v156)
    {
LABEL_111:
      unint64_t v95 = v157 - 4 - v156;
      if (v95 < 0x2C) {
        goto LABEL_184;
      }
      if ((unint64_t)(v156 - v93) < 0x20) {
        goto LABEL_184;
      }
      uint64_t v96 = (v95 >> 2) + 1;
      uint64_t v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
      int v98 = &v157[-v97];
      v94 -= v97;
      long long v99 = &v93[4 * v89 - 16];
      uint64_t v100 = (long long *)(v157 - 16);
      uint64_t v101 = v96 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v102 = *v100;
        *((_OWORD *)v99 - 1) = *(v100 - 1);
        *(_OWORD *)long long v99 = v102;
        v99 -= 32;
        v100 -= 2;
        v101 -= 8;
      }
      while (v101);
      uint64_t v76 = v98;
      if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_184:
        do
        {
          int v103 = *((_DWORD *)v76 - 1);
          v76 -= 4;
          *((_DWORD *)v94 - 1) = v103;
          v94 -= 4;
        }
        while (v76 != v156);
      }
    }
LABEL_117:
    std::string v156 = v94;
    std::string v158 = &v93[4 * v92];
    if (v88) {
      operator delete(v88);
    }
LABEL_119:
    std::string v157 = (char *)v77;
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v149, *v54 >> 1);
    int v104 = v148;
    long long v106 = (char *)v148[1];
    unint64_t v105 = v148[2];
    if ((unint64_t)v106 < v105)
    {
      *(_DWORD *)long long v106 = *v54;
      uint64_t v107 = (uint64_t)(v106 + 4);
      uint64_t v3 = v155;
      goto LABEL_151;
    }
    int v108 = (char *)*v148;
    uint64_t v109 = (uint64_t)&v106[-*v148];
    uint64_t v110 = v109 >> 2;
    unint64_t v111 = (v109 >> 2) + 1;
    if (v111 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v112 = v105 - (void)v108;
    if (v112 >> 1 > v111) {
      unint64_t v111 = v112 >> 1;
    }
    if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v113 = v111;
    }
    if (v113)
    {
      if (!(v113 >> 62))
      {
        unint64_t v114 = operator new(4 * v113);
        unsigned __int8 v115 = (int *)&v114[4 * v110];
        *unsigned __int8 v115 = *v54;
        uint64_t v107 = (uint64_t)(v115 + 1);
        if (v106 != v108) {
          goto LABEL_130;
        }
LABEL_141:
        uint64_t v3 = v155;
        goto LABEL_147;
      }
LABEL_179:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v114 = 0;
    unsigned __int8 v115 = (int *)(4 * v110);
    *(_DWORD *)(4 * v11google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *v54;
    uint64_t v107 = 4 * v110 + 4;
    if (v106 == v108) {
      goto LABEL_141;
    }
LABEL_130:
    unint64_t v116 = v106 - 4 - v108;
    if (v116 >= 0x2C)
    {
      unint64_t v125 = v106 - &v114[v109];
      uint64_t v3 = v155;
      if (v125 >= 0x20)
      {
        uint64_t v126 = (v116 >> 2) + 1;
        uint64_t v127 = 4 * (v126 & 0x7FFFFFFFFFFFFFF8);
        int v128 = &v106[-v127];
        unsigned __int8 v115 = (int *)((char *)v115 - v127);
        unsigned __int8 v129 = &v114[4 * v110 - 16];
        long long v130 = v106 - 16;
        uint64_t v131 = v126 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v132 = *(_OWORD *)v130;
          *(v129 - 1) = *((_OWORD *)v130 - 1);
          *unsigned __int8 v129 = v132;
          v129 -= 2;
          v130 -= 32;
          v131 -= 8;
        }
        while (v131);
        long long v106 = v128;
        if (v126 == (v126 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_147;
        }
      }
    }
    else
    {
      uint64_t v3 = v155;
    }
    do
    {
      int v133 = *((_DWORD *)v106 - 1);
      v106 -= 4;
      *--unsigned __int8 v115 = v133;
    }
    while (v106 != v108);
LABEL_147:
    *std::string v148 = v115;
    v148[1] = v107;
    v148[2] = &v114[4 * v113];
    if (v108) {
      operator delete(v108);
    }
    int v104 = v148;
LABEL_151:
    v104[1] = v107;
    uint64_t v11 = v151;
LABEL_152:
    if (v54) {
      operator delete(v54);
    }
LABEL_40:
    if (++v38 != v11) {
      continue;
    }
    break;
  }
  unint64_t v134 = v156;
  if (v156 != v157)
  {
    uint64_t v135 = *(void *)(v3 + 528);
    int v136 = (int *)v156;
    do
    {
      int v137 = *v136++;
      *(void *)(v135 + (((unint64_t)v137 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v137);
    }
    while (v136 != (int *)v157);
  }
  char v139 = (int *)*v148;
  uint64_t v138 = (int *)v148[1];
  int v140 = 0;
  uint64_t v141 = (uint64_t)v138 - *v148;
  if (v138 != (int *)*v148)
  {
LABEL_160:
    unint64_t v142 = v141 >> 2;
    uint64_t v143 = *(void *)(v3 + 528);
    if (v142 <= 1) {
      unint64_t v142 = 1;
    }
    uint64_t v144 = v139;
    do
    {
      int v146 = *v144++;
      int v145 = v146;
      if ((*(void *)(v143 + (((unint64_t)((uint64_t)v146 >> 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v146 >> 1))) {
        v139[v140++] = v145;
      }
      --v142;
    }
    while (v142);
  }
LABEL_166:
  std::string v147 = &v139[v140];
  if (v147 != v138) {
    v148[1] = v147;
  }
  if (v134) {
    operator delete(v134);
  }
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_23CD88F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (v21) {
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::SatSolver::CanBeInferedFromConflictVariables(void *a1, int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1[135];
  int v145 = a1 + 134;
  uint64_t v6 = 8 * a2;
  uint64_t v7 = a2;
  if (((*(void *)(v4 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
  {
    uint64_t v10 = a1[130];
    if (*(_DWORD *)(*(void *)(v10 + 120) + 8 * a2) >> 28 == 3)
    {
      int v11 = *(_DWORD *)(*(void *)(v10 + 152) + 4 * a2);
      if (v11 != a2)
      {
        uint64_t v7 = v11;
        if ((*(void *)(v4 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
          goto LABEL_2;
        }
        operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v145, v11);
        *(_DWORD *)(a1[131] + 4 * v7) = a2;
      }
    }
LABEL_8:
    uint64_t v12 = (_DWORD *)a1[98];
    a1[99] = v12;
    unint64_t v13 = a1[100];
    if ((unint64_t)v12 >= v13)
    {
      uint64_t v15 = v13 - (void)v12;
      uint64_t v16 = v15 >> 1;
      if ((unint64_t)(v15 >> 1) <= 1) {
        uint64_t v16 = 1;
      }
      BOOL v17 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v17) {
        unint64_t v18 = v16;
      }
      if (v18 >> 62) {
        goto LABEL_152;
      }
      uint64_t v19 = v18;
      unint64_t v20 = operator new(4 * v18);
      unint64_t v21 = &v20[v19];
      a1[98] = v20;
      _DWORD *v20 = a2;
      unint64_t v14 = v20 + 1;
      a1[99] = v20 + 1;
      a1[100] = v21;
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *uint64_t v12 = a2;
      unint64_t v14 = v12 + 1;
    }
    a1[99] = v14;
    unint64_t v22 = (_DWORD *)a1[101];
    a1[102] = v22;
    unint64_t v23 = a1[103];
    if ((unint64_t)v22 < v23)
    {
      *unint64_t v22 = a2;
      uint64_t v24 = v22 + 1;
      goto LABEL_26;
    }
    uint64_t v25 = v23 - (void)v22;
    uint64_t v26 = v25 >> 1;
    if ((unint64_t)(v25 >> 1) <= 1) {
      uint64_t v26 = 1;
    }
    BOOL v17 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v17) {
      unint64_t v27 = v26;
    }
    if (!(v27 >> 62))
    {
      uint64_t v28 = v27;
      uint64_t v29 = operator new(4 * v27);
      uint64_t v30 = &v29[v28];
      a1[101] = v29;
      *uint64_t v29 = a2;
      uint64_t v24 = v29 + 1;
      a1[102] = v29 + 1;
      a1[103] = v30;
      if (v22) {
        operator delete(v22);
      }
LABEL_26:
      a1[102] = v24;
      uint64_t v31 = (void *)a1[26];
      uint64_t v32 = v31[15];
      if (*(_DWORD *)(v32 + v6) >> 28 == 3)
      {
        uint64_t v33 = *(int *)(v31[19] + 4 * v3);
        uint64_t v34 = (_DWORD *)(v32 + 8 * v33);
        unint64_t v35 = *v34;
        if (v35 >> 28) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v33 = a2;
        uint64_t v34 = (_DWORD *)(v32 + 8 * a2);
        unint64_t v35 = *v34;
        if (v35 >> 28)
        {
LABEL_28:
          unint64_t v36 = v35 >> 28;
          if ((v36 - 1) > 1)
          {
            uint64_t v40 = *(void *)(v31[34] + 8 * v36);
            uint64_t v41 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v40 + 32))(v40, a1[26], *(unsigned int *)(v32 + 8 * v33 + 4));
            uint64_t v42 = (uint64_t *)(v31[28] + 16 * v33);
            *uint64_t v42 = v41;
            v42[1] = v43;
          }
          else
          {
            uint64_t v37 = (void *)(v31[28] + 16 * v33);
            *uint64_t v37 = 0;
            v37[1] = 0;
          }
          *(_DWORD *)(v31[31] + 4 * v33) = *v34 >> 28;
          *(_DWORD *)(v31[15] + 8 * v33) &= 0xFFFFFFFu;
          int v146 = (void **)(a1 + 101);
          uint64_t v38 = v31[28] + 16 * v33;
          uint64_t v39 = *(void *)(v38 + 8);
          if (v39) {
            goto LABEL_35;
          }
LABEL_64:
          uint64_t v70 = a1[102];
          if (a1[101] == v70)
          {
LABEL_144:
            uint64_t v141 = (int *)a1[98];
            unint64_t v142 = (int *)a1[99];
            if (v141 == v142)
            {
              return 1;
            }
            else
            {
              do
              {
                int v143 = *v141++;
                operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 75, v143);
              }
              while (v141 != v142);
              return a1[98] == a1[99];
            }
          }
          uint64_t v71 = a1 + 98;
          while (1)
          {
            uint64_t v72 = v70 - 4;
            int v73 = *(_DWORD *)(v70 - 4);
            long long v74 = (char *)a1[99];
            if (v73 == *((_DWORD *)v74 - 1))
            {
              if ((unint64_t)&v74[-*v71] >= 5)
              {
                operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 65, *(_DWORD *)(v70 - 4));
                uint64_t v70 = a1[102];
                long long v74 = (char *)a1[99];
              }
              a1[102] = v70 - 4;
              a1[99] = v74 - 4;
              goto LABEL_67;
            }
            uint64_t v75 = v73;
            unint64_t v76 = (unint64_t)v73 >> 6;
            if ((*(void *)(a1[66] + 8 * v76) & (1 << v73)) != 0) {
              goto LABEL_72;
            }
            uint64_t v77 = a1[135];
            uint64_t v78 = v73;
            if ((*(void *)(v77 + 8 * v76) & (1 << v73)) == 0)
            {
              uint64_t v80 = a1[130];
              if (*(_DWORD *)(*(void *)(v80 + 120) + 8 * v73) >> 28 != 3) {
                goto LABEL_81;
              }
              int v81 = *(_DWORD *)(*(void *)(v80 + 152) + 4 * v73);
              if (v81 == v73) {
                goto LABEL_81;
              }
              uint64_t v78 = v81;
              if (((*(void *)(v77 + (((unint64_t)v81 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v81) & 1) == 0)
              {
                operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(v145, v81);
                *(_DWORD *)(a1[131] + 4 * v78) = v73;
                long long v74 = (char *)a1[99];
                goto LABEL_81;
              }
            }
            unint64_t v79 = *(int *)(a1[131] + 4 * v78);
            if (v79 != v73)
            {
              if ((*(void *)(a1[76] + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v79)) {
                goto LABEL_144;
              }
LABEL_72:
              a1[102] = v72;
              goto LABEL_67;
            }
LABEL_81:
            unint64_t v82 = a1[100];
            if ((unint64_t)v74 < v82)
            {
              *(_DWORD *)long long v74 = v73;
              uint64_t v83 = (uint64_t)(v74 + 4);
              goto LABEL_98;
            }
            uint64_t v84 = (char *)*v71;
            uint64_t v85 = (uint64_t)&v74[-*v71];
            uint64_t v86 = v85 >> 2;
            unint64_t v87 = (v85 >> 2) + 1;
            if (v87 >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v88 = v82 - (void)v84;
            if (v88 >> 1 > v87) {
              unint64_t v87 = v88 >> 1;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v89 = v87;
            }
            if (v89)
            {
              if (v89 >> 62) {
                goto LABEL_152;
              }
              unint64_t v90 = operator new(4 * v89);
              uint64_t v91 = &v90[4 * v86];
              *uint64_t v91 = v73;
              uint64_t v83 = (uint64_t)(v91 + 1);
              if (v74 == v84)
              {
LABEL_138:
                uint64_t v71 = a1 + 98;
                a1[98] = v91;
                a1[99] = v83;
                a1[100] = &v90[4 * v89];
                if (!v84) {
                  goto LABEL_98;
                }
LABEL_97:
                operator delete(v84);
                goto LABEL_98;
              }
            }
            else
            {
              unint64_t v90 = 0;
              uint64_t v91 = (_DWORD *)(4 * v86);
              *(_DWORD *)(4 * v86) = v73;
              uint64_t v83 = 4 * v86 + 4;
              if (v74 == v84) {
                goto LABEL_138;
              }
            }
            unint64_t v92 = v74 - 4 - v84;
            if (v92 < 0x2C || (unint64_t)(v74 - &v90[v85]) < 0x20)
            {
              std::string::size_type v93 = v74;
              uint64_t v71 = a1 + 98;
              do
              {
LABEL_95:
                int v94 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *--uint64_t v91 = v94;
              }
              while (v93 != v84);
              goto LABEL_96;
            }
            uint64_t v135 = (v92 >> 2) + 1;
            uint64_t v136 = 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
            std::string::size_type v93 = &v74[-v136];
            uint64_t v91 = (_DWORD *)((char *)v91 - v136);
            int v137 = &v90[4 * v86 - 16];
            uint64_t v138 = v74 - 16;
            uint64_t v139 = v135 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v71 = a1 + 98;
            do
            {
              long long v140 = *(_OWORD *)v138;
              *(v137 - 1) = *((_OWORD *)v138 - 1);
              _OWORD *v137 = v140;
              v137 -= 2;
              v138 -= 32;
              v139 -= 8;
            }
            while (v139);
            if (v135 != (v135 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_95;
            }
LABEL_96:
            a1[98] = v91;
            a1[99] = v83;
            a1[100] = &v90[4 * v89];
            if (v84) {
              goto LABEL_97;
            }
LABEL_98:
            a1[99] = v83;
            unint64_t v95 = (void *)a1[26];
            uint64_t v96 = v95[15];
            unsigned int v97 = *(_DWORD *)(v96 + 8 * v75);
            if (v97 >> 28 == 3)
            {
              uint64_t v75 = *(int *)(v95[19] + 4 * v75);
              unsigned int v98 = *(_DWORD *)(v96 + 8 * v75) >> 28;
              if (v98) {
                goto LABEL_100;
              }
            }
            else
            {
              unsigned int v98 = v97 >> 28;
              if (v98)
              {
LABEL_100:
                if (v98 - 1 > 1)
                {
                  uint64_t v102 = *(void *)(v95[34] + 8 * v98);
                  uint64_t v103 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v102 + 32))(v102, a1[26], *(unsigned int *)(v96 + 8 * v75 + 4));
                  int v104 = (uint64_t *)(v95[28] + 16 * v75);
                  *int v104 = v103;
                  v104[1] = v105;
                }
                else
                {
                  long long v99 = (void *)(v95[28] + 16 * v75);
                  *long long v99 = 0;
                  v99[1] = 0;
                }
                *(_DWORD *)(v95[31] + 4 * v75) = *(_DWORD *)(v96 + 8 * v75) >> 28;
                *(_DWORD *)(v95[15] + 8 * v75) &= 0xFFFFFFFu;
                uint64_t v100 = (int **)(v95[28] + 16 * v75);
                uint64_t v101 = v100[1];
                if (!v101) {
                  goto LABEL_67;
                }
LABEL_107:
                long long v106 = *v100;
                uint64_t v107 = (uint64_t)&(*v100)[(void)v101];
                while (2)
                {
                  int v109 = *v106;
                  int v110 = *v106 >> 1;
                  uint64_t v111 = *(void *)(a1[26] + 120);
                  unint64_t v112 = ((unint64_t)*(unsigned int *)(v111 + 8 * v110) >> 1) & 0x7FFFFFF;
                  if (!v112) {
                    goto LABEL_110;
                  }
                  unint64_t v113 = (uint64_t)v109 >> 1;
                  uint64_t v114 = 1 << (v109 >> 1);
                  if ((*(void *)(a1[66] + 8 * (v113 >> 6)) & v114) != 0) {
                    goto LABEL_110;
                  }
                  if (*(_DWORD *)(v111 + 8 * v113 + 4) <= *(_DWORD *)(a1[95] + 4 * v112)
                    || (*(void *)(a1[76] + 8 * (v113 >> 6)) & v114) != 0)
                  {
                    goto LABEL_144;
                  }
                  unsigned __int8 v115 = (int *)a1[102];
                  unint64_t v116 = a1[103];
                  if ((unint64_t)v115 < v116)
                  {
                    *unsigned __int8 v115 = v110;
                    uint64_t v108 = (uint64_t)(v115 + 1);
                    goto LABEL_109;
                  }
                  uint64_t v117 = (int *)*v146;
                  uint64_t v118 = (char *)v115 - (unsigned char *)*v146;
                  uint64_t v119 = v118 >> 2;
                  unint64_t v120 = (v118 >> 2) + 1;
                  if (v120 >> 62) {
                    goto LABEL_153;
                  }
                  uint64_t v121 = v116 - (void)v117;
                  if (v121 >> 1 > v120) {
                    unint64_t v120 = v121 >> 1;
                  }
                  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v122 = v120;
                  }
                  if (v122)
                  {
                    if (v122 >> 62) {
                      goto LABEL_152;
                    }
                    long long v123 = operator new(4 * v122);
                    int v124 = (int *)&v123[4 * v119];
                    *int v124 = v110;
                    uint64_t v108 = (uint64_t)(v124 + 1);
                    if (v115 != v117)
                    {
LABEL_125:
                      unint64_t v125 = (char *)(v115 - 1) - (char *)v117;
                      if (v125 < 0x2C)
                      {
                        uint64_t v71 = a1 + 98;
                        goto LABEL_133;
                      }
                      unint64_t v126 = (char *)v115 - &v123[v118];
                      uint64_t v71 = a1 + 98;
                      if (v126 < 0x20) {
                        goto LABEL_157;
                      }
                      uint64_t v127 = (v125 >> 2) + 1;
                      uint64_t v128 = 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
                      unsigned __int8 v129 = &v115[v128 / 0xFFFFFFFFFFFFFFFCLL];
                      int v124 = (int *)((char *)v124 - v128);
                      long long v130 = &v123[4 * v119 - 16];
                      uint64_t v131 = v115 - 4;
                      uint64_t v132 = v127 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v133 = *(_OWORD *)v131;
                        *(v130 - 1) = *((_OWORD *)v131 - 1);
                        _OWORD *v130 = v133;
                        v130 -= 2;
                        v131 -= 8;
                        v132 -= 8;
                      }
                      while (v132);
                      unsigned __int8 v115 = v129;
                      if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_157:
                        do
                        {
LABEL_133:
                          int v134 = *--v115;
                          *--int v124 = v134;
                        }
                        while (v115 != v117);
                      }
LABEL_134:
                      a1[101] = v124;
                      a1[102] = v108;
                      a1[103] = &v123[4 * v122];
                      if (v117) {
                        operator delete(v117);
                      }
LABEL_109:
                      a1[102] = v108;
LABEL_110:
                      if (++v106 == (int *)v107) {
                        goto LABEL_67;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    long long v123 = 0;
                    int v124 = (int *)(4 * v119);
                    *(_DWORD *)(4 * v119) = v110;
                    uint64_t v108 = 4 * v119 + 4;
                    if (v115 != v117) {
                      goto LABEL_125;
                    }
                  }
                  break;
                }
                uint64_t v71 = a1 + 98;
                goto LABEL_134;
              }
            }
            uint64_t v100 = (int **)(v95[28] + 16 * v75);
            uint64_t v101 = v100[1];
            if (v101) {
              goto LABEL_107;
            }
LABEL_67:
            uint64_t v70 = a1[102];
            if (a1[101] == v70) {
              goto LABEL_144;
            }
          }
        }
      }
      int v146 = (void **)(a1 + 101);
      uint64_t v38 = v31[28] + 16 * v33;
      uint64_t v39 = *(void *)(v38 + 8);
      if (v39)
      {
LABEL_35:
        unsigned int v44 = *(int **)v38;
        uint64_t v45 = *(void *)v38 + 4 * v39;
        while (1)
        {
          int v46 = *v44 >> 1;
          unint64_t v47 = (uint64_t)*v44 >> 1;
          if (((1 << v46) & *(void *)(a1[66] + 8 * (v47 >> 6))) == 0)
          {
            uint64_t v48 = *(void *)(a1[26] + 120);
            unint64_t v49 = ((unint64_t)*(unsigned int *)(v48 + 8 * v47) >> 1) & 0x7FFFFFF;
            if (v49)
            {
              if (*(_DWORD *)(v48 + 8 * v47 + 4) <= *(_DWORD *)(a1[95] + 4 * v49)
                || (*(void *)(a1[76] + 8 * (v47 >> 6)) & (1 << v46)) != 0)
              {
                return 0;
              }
              uint64_t v50 = (int *)a1[102];
              unint64_t v51 = a1[103];
              if ((unint64_t)v50 < v51)
              {
                *uint64_t v50 = v46;
                uint64_t v52 = (uint64_t)(v50 + 1);
LABEL_63:
                a1[102] = v52;
                goto LABEL_37;
              }
              std::string::size_type v53 = (int *)*v146;
              uint64_t v54 = (char *)v50 - (unsigned char *)*v146;
              uint64_t v55 = v54 >> 2;
              unint64_t v56 = (v54 >> 2) + 1;
              if (v56 >> 62) {
LABEL_153:
              }
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              uint64_t v57 = v51 - (void)v53;
              if (v57 >> 1 > v56) {
                unint64_t v56 = v57 >> 1;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58)
              {
                if (v58 >> 62) {
                  goto LABEL_152;
                }
                uint64_t v59 = operator new(4 * v58);
                uint64_t v60 = (int *)&v59[4 * v55];
                *uint64_t v60 = v46;
                uint64_t v52 = (uint64_t)(v60 + 1);
                if (v50 == v53) {
                  goto LABEL_61;
                }
LABEL_55:
                unint64_t v61 = (char *)(v50 - 1) - (char *)v53;
                if (v61 < 0x2C) {
                  goto LABEL_158;
                }
                if ((unint64_t)((char *)v50 - &v59[v54]) < 0x20) {
                  goto LABEL_158;
                }
                uint64_t v62 = (v61 >> 2) + 1;
                uint64_t v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
                unint64_t v64 = &v50[v63 / 0xFFFFFFFFFFFFFFFCLL];
                uint64_t v60 = (int *)((char *)v60 - v63);
                int v65 = &v59[4 * v55 - 16];
                unint64_t v66 = v50 - 4;
                uint64_t v67 = v62 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v68 = *(_OWORD *)v66;
                  *(v65 - 1) = *((_OWORD *)v66 - 1);
                  *int v65 = v68;
                  v65 -= 2;
                  v66 -= 8;
                  v67 -= 8;
                }
                while (v67);
                uint64_t v50 = v64;
                if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_158:
                  do
                  {
                    int v69 = *--v50;
                    *--uint64_t v60 = v69;
                  }
                  while (v50 != v53);
                }
              }
              else
              {
                uint64_t v59 = 0;
                uint64_t v60 = (int *)(4 * v55);
                *(_DWORD *)(4 * v55) = v46;
                uint64_t v52 = 4 * v55 + 4;
                if (v50 != v53) {
                  goto LABEL_55;
                }
              }
LABEL_61:
              a1[101] = v60;
              a1[102] = v52;
              a1[103] = &v59[4 * v58];
              if (v53) {
                operator delete(v53);
              }
              goto LABEL_63;
            }
            operations_research::SparseBitset<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::Set(a1 + 65, *v44 >> 1);
          }
LABEL_37:
          if (++v44 == (int *)v45) {
            goto LABEL_64;
          }
        }
      }
      goto LABEL_64;
    }
LABEL_152:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
LABEL_2:
  unint64_t v8 = *(int *)(a1[131] + 4 * v7);
  if (v8 == a2) {
    goto LABEL_8;
  }
  return ((*(void *)(a1[76] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0;
}

operations_research::sat::PbConstraints *operations_research::sat::PbConstraints::PbConstraints(operations_research::sat::PbConstraints *this, operations_research::sat::Model *a2)
{
  strcpy((char *)this + 8, "PbConstraints");
  *((_WORD *)this + 11) = 0;
  *((unsigned char *)this + 31) = 13;
  *((void *)this + 4) = 0xFFFFFFFFLL;
  *(void *)this = &unk_26F0C4498;
  *(_OWORD *)((char *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = (char *)this + 112;
  *((void *)this + 19) = 0;
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((_DWORD *)this + 38) = -1;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *((void *)this + 21) = 0;
  *(_OWORD *)((char *)this + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 29) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *((_DWORD *)this + 74) = -1;
  *((_DWORD *)this + 76) = 0;
  *((void *)this + 39) = 0x3FF0000000000000;
  *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>((uint64_t)a2);
  strcpy((char *)this + 328, "PbConstraints");
  *((unsigned char *)this + 351) = 13;
  *((_DWORD *)this + 88) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = (char *)this + 392;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 51) = 0;
  uint64_t v4 = (operations_research::sat::Trail *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Trail>((uint64_t)a2);
  operations_research::sat::Trail::RegisterPropagator(v4, this);
  return this;
}

void sub_23CD89BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  operations_research::ConnectedComponents<int,int>::~ConnectedComponents(v6);
  absl::lts_2020_02_25::flat_hash_map<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::~flat_hash_map(v5);
  operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v4);
  std::vector<std::vector<int>>::~vector[abi:ne180100](v3);
  unint64_t v8 = *(void **)(v2 + 64);
  if (v8)
  {
    *(void *)(v2 + 72) = v8;
    operator delete(v8);
  }
  std::vector<std::unique_ptr<operations_research::sat::UpperBoundedLinearConstraint>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(void *)uint64_t v2 = a2;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*(void **)(v2 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t absl::lts_2020_02_25::flat_hash_map<long long,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,std::vector<operations_research::sat::UpperBoundedLinearConstraint *>>>>::~flat_hash_map(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v4) & 0x80000000) == 0)
      {
        uint64_t v6 = *v5 + v3;
        uint64_t v7 = *(void **)(v6 + 8);
        if (v7)
        {
          *(void *)(v6 + 16) = v7;
          operator delete(v7);
          uint64_t v2 = *(void *)(a1 + 24);
        }
      }
      ++v4;
      v3 += 32;
    }
    while (v4 != v2);
    operator delete(*(void **)a1);
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *uint64_t v5 = 0;
  }
  unint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v8);
  }
  return a1;
}

void *operations_research::sat::Model::Delete<operations_research::sat::PbConstraints>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C46D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::PbConstraints>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C46D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x23ECF2BC0);
}

void google::MakeCheckOpString<int,gtl::IntType<operations_research::sat::BooleanVariable_tag_,int>>(int a1, int a2, char *a3)
{
  google::base::CheckOpMessageBuilder::CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)&v3, a3);
}

void sub_23CD89E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  google::base::CheckOpMessageBuilder::~CheckOpMessageBuilder((google::base::CheckOpMessageBuilder *)va);
  _Unwind_Resume(a1);
}

void std::vector<operations_research::sat::SatSolver::Decision>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 > (v4 - (uint64_t)v5) >> 3)
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = (uint64_t)&v5[-*a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(8 * v12);
      uint64_t v14 = (uint64_t)&v13[8 * v9];
      uint64_t v15 = v14 + 8 * a2;
      uint64_t v16 = (_DWORD *)v14;
      uint64_t v17 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (!v17) {
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v13 = 0;
      uint64_t v14 = 8 * v9;
      uint64_t v15 = 8 * v9 + 8 * a2;
      uint64_t v16 = (_DWORD *)(8 * v9);
      uint64_t v17 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
      {
        do
        {
LABEL_24:
          *uint64_t v16 = -1;
          v16 += 2;
        }
        while (v16 != (_DWORD *)v15);
LABEL_25:
        uint64_t v24 = &v13[8 * v12];
        if (v5 != v7)
        {
          unint64_t v25 = v5 - v7 - 8;
          if (v25 < 0x58) {
            goto LABEL_41;
          }
          if ((unint64_t)(v5 - &v13[v8]) < 0x20) {
            goto LABEL_41;
          }
          uint64_t v26 = (v25 >> 3) + 1;
          uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v6 = &v5[-v27];
          v14 -= v27;
          uint64_t v28 = &v13[8 * v9 - 16];
          uint64_t v29 = v5 - 16;
          uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v31 = *(_OWORD *)v29;
            *((_OWORD *)v28 - 1) = *((_OWORD *)v29 - 1);
            *(_OWORD *)uint64_t v28 = v31;
            v28 -= 32;
            v29 -= 32;
            v30 -= 4;
          }
          while (v30);
          if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_41:
            do
            {
              uint64_t v32 = *((void *)v6 - 1);
              v6 -= 8;
              *(void *)(v14 - 8) = v32;
              v14 -= 8;
            }
            while (v6 != v7);
          }
        }
        uint64_t v33 = (void *)*a1;
        *a1 = v14;
        a1[1] = v15;
        a1[2] = (uint64_t)v24;
        if (v33)
        {
          operator delete(v33);
        }
        return;
      }
    }
    uint64_t v21 = v17 + 1;
    uint64_t v16 = (_DWORD *)(v14 + 8 * (v21 & 0x3FFFFFFFFFFFFFFELL));
    unint64_t v22 = (_DWORD *)(v14 + 8);
    uint64_t v23 = v21 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(v22 - 2) = -1;
      *unint64_t v22 = -1;
      v22 += 4;
      v23 -= 2;
    }
    while (v23);
    if (v21 == (v21 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (a2)
  {
    if (((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_42;
    }
    uint64_t v18 = ((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v6 = &v5[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v19 = v5 + 8;
    uint64_t v20 = v18 & 0x3FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -1;
      *uint64_t v19 = -1;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_42:
      do
      {
        *(_DWORD *)uint64_t v6 = -1;
        v6 += 8;
      }
      while (v6 != &v5[8 * a2]);
    }
    uint64_t v6 = &v5[8 * a2];
  }
  a1[1] = (uint64_t)v6;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::find_or_prepare_insert<operations_research::sat::SatClause *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
        * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                           * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                            + *a2)))
     + *a2;
  unint64_t v5 = ((v4 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v4);
  unint64_t v6 = (v5 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v7 = a1[3];
  while (1)
  {
    unint64_t v8 = v6 & v7;
    uint64_t v9 = *(void *)(*a1 + (v6 & v7));
    unint64_t v10 = ((v9 ^ (0x101010101010101 * (v5 & 0x7F))) - 0x101010101010101) & ~(v9 ^ (0x101010101010101 * (v5 & 0x7F))) & 0x8080808080808080;
    if (v10) {
      break;
    }
LABEL_5:
    if ((v9 & (~v9 << 6) & 0x8080808080808080) != 0) {
      return absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::prepare_insert(a1, v5);
    }
    v2 += 8;
    unint64_t v6 = v2 + v8;
  }
  while (1)
  {
    unint64_t v11 = (v8 + (__clz(__rbit64(v10)) >> 3)) & v7;
    if (*(void *)(a1[1] + 24 * v11) == v3) {
      return v11;
    }
    v10 &= v10 - 1;
    if (!v10) {
      goto LABEL_5;
    }
  }
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  unint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 24 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  unint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  unint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)unint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v27 = a1[4];
    if (!v27) {
      return;
    }
LABEL_21:
    *((void *)v27 + 4) = v14 >> 3;
    *((void *)v27 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v20 = &v5[24 * (void)v13];
      unint64_t v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(void *)v20)))
          + *(void *)v20;
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      uint64_t v23 = *a1;
      uint64_t v24 = a1[3];
      unint64_t v25 = ((v22 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v24;
      unint64_t v26 = *(void *)&(*a1)[v25] & (~*(void *)&(*a1)[v25] << 7) & 0x8080808080808080;
      if (v26)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v25 = (v15 + v25) & (unint64_t)v24;
          unint64_t v26 = *(void *)&v23[v25] & (~*(void *)&v23[v25] << 7) & 0x8080808080808080;
        }
        while (!v26);
      }
      unint64_t v16 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v24;
      v14 += v15;
      char v17 = v22 & 0x7F;
      v23[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      long long v18 = *(_OWORD *)v20;
      uint64_t v19 = (uint64_t)&a1[1][24 * v16];
      *(void *)(v19 + 16) = *((void *)v20 + 2);
      *(_OWORD *)uint64_t v19 = v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v27 = a1[4];
  if (v27) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Hash,absl::lts_2020_02_25::container_internal::HashEq<operations_research::sat::SatClause *,void>::Eq,std::allocator<std::pair<operations_research::sat::SatClause * const,operations_research::sat::ClauseInfo>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v39 = *(void *)(result + 32);
    if (!v39) {
      return result;
    }
LABEL_26:
    *(void *)(v39 + 32) = v15 >> 3;
    *(void *)(v39 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      uint64_t v20 = *(void *)(*(void *)(result + 8) + 24 * v14);
      unint64_t v21 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v20)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + v20)))
          + v20;
      unint64_t v22 = ((v21 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v21);
      unint64_t v23 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v24 = *(uint64_t *)((unsigned char *)v19->i64 + v23) & (~*(uint64_t *)((char *)v19->i64 + v23) << 7) & 0x8080808080808080;
      if (v24)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v22 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v24 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v24);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v24)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v23) ^ (v14 - v23)) & v13) > 7)
      {
        int v25 = v19->u8[v18];
        v19->i8[v18] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
        uint64_t v26 = *(void *)(result + 8);
        if (v25 == 128)
        {
          uint64_t v27 = v26 + 24 * v18;
          uint64_t v28 = (long long *)(v26 + 24 * v14);
          long long v29 = *v28;
          *(void *)(v27 + 16) = *((void *)v28 + 2);
          *(_OWORD *)uint64_t v27 = v29;
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v30 = (long long *)(v26 + 24 * v14);
          long long v31 = *v30;
          uint64_t v32 = *((void *)v30 + 2);
          uint64_t v33 = (long long *)(v26 + 24 * v18);
          uint64_t v34 = *((void *)v33 + 2);
          *uint64_t v30 = *v33;
          *((void *)v30 + 2) = v34;
          uint64_t v35 = *(void *)(result + 8) + 24 * v18;
          *(_OWORD *)uint64_t v35 = v31;
          *(void *)(v35 + 16) = v32;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v22 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v36 = v14 - (v14 >> 3);
  BOOL v37 = v14 == 7;
  uint64_t v38 = 6;
  if (!v37) {
    uint64_t v38 = v36;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v38 - *(void *)(result + 16);
  uint64_t v39 = *(void *)(result + 32);
  if (v39) {
    goto LABEL_26;
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::anonymous namespace'::WeightedVariable *,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                int v65 = *((_DWORD *)a2 - 1);
                int v66 = *(_DWORD *)(v10 + 4);
                if (v65 > v66 || (v65 == v66 ? (BOOL v67 = *((_DWORD *)a2 - 2) < *(_DWORD *)v10) : (BOOL v67 = 0), v67))
                {
                  uint64_t v68 = *(void *)v10;
                  *(void *)unint64_t v10 = *(a2 - 1);
                  *(a2 - 1) = v68;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                int v69 = (_DWORD *)(v10 + 16);
                int v70 = *((_DWORD *)a2 - 1);
                int v71 = *(_DWORD *)(v10 + 20);
                if (v70 > v71 || (v70 == v71 ? (BOOL v72 = *((_DWORD *)a2 - 2) < *v69) : (BOOL v72 = 0), v72))
                {
                  uint64_t v73 = *(void *)(v10 + 16);
                  *(void *)(v10 + 16) = *(a2 - 1);
                  *(a2 - 1) = v73;
                  int v74 = *(_DWORD *)(v10 + 20);
                  int v75 = *(_DWORD *)(v10 + 12);
                  if (v74 > v75 || (v74 == v75 ? (BOOL v76 = *v69 < *(_DWORD *)(v10 + 8)) : (BOOL v76 = 0), v76))
                  {
                    uint64_t v78 = *(void *)(v10 + 8);
                    uint64_t v77 = *(void *)(v10 + 16);
                    *(void *)(v10 + 8) = v77;
                    *(void *)(v10 + 16) = v78;
                    int v79 = *(_DWORD *)(v10 + 4);
                    if (v79 < SHIDWORD(v77) || v79 == HIDWORD(v77) && *(_DWORD *)v10 > (int)v77)
                    {
                      uint64_t v80 = *(void *)v10;
                      *(void *)unint64_t v10 = v77;
                      *(void *)(v10 + 8) = v80;
                    }
                  }
                }
                break;
              case 5uLL:
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            int v81 = (uint64_t *)(v10 + 8);
            BOOL v83 = (uint64_t *)v10 == a2 || v81 == a2;
            if (a4)
            {
              if (!v83)
              {
                uint64_t v84 = 0;
                uint64_t v85 = (_DWORD *)v10;
                do
                {
                  uint64_t v86 = v81;
                  int v87 = v85[3];
                  int v88 = v85[1];
                  if (v87 > v88 || (v87 == v88 ? (BOOL v89 = *(_DWORD *)v86 < *v85) : (BOOL v89 = 0), v89))
                  {
                    uint64_t v90 = *((void *)v85 + 1);
                    *((void *)v85 + 1) = *(void *)v85;
                    uint64_t v91 = (void *)v10;
                    if (v85 != (_DWORD *)v10)
                    {
                      uint64_t v92 = v84;
                      while (1)
                      {
                        std::string::size_type v93 = (void *)(v10 + v92);
                        int v94 = *(_DWORD *)(v10 + v92 - 4);
                        if (v94 >= SHIDWORD(v90) && (v94 != HIDWORD(v90) || *((_DWORD *)v93 - 2) <= (int)v90)) {
                          break;
                        }
                        *std::string::size_type v93 = *(v93 - 1);
                        v92 -= 8;
                        if (!v92)
                        {
                          uint64_t v91 = (void *)v10;
                          goto LABEL_146;
                        }
                      }
                      uint64_t v91 = (void *)(v10 + v92);
                    }
LABEL_146:
                    *uint64_t v91 = v90;
                  }
                  int v81 = v86 + 1;
                  v84 += 8;
                  uint64_t v85 = v86;
                }
                while (v86 + 1 != a2);
              }
            }
            else if (!v83)
            {
              do
              {
                uint64_t v139 = v81;
                int v140 = *(_DWORD *)(v9 + 12);
                int v141 = *(_DWORD *)(v9 + 4);
                if (v140 > v141 || (v140 == v141 ? (BOOL v142 = *(_DWORD *)v139 < *(_DWORD *)v9) : (BOOL v142 = 0), v142))
                {
                  uint64_t v143 = *v139;
                  unint64_t v144 = HIDWORD(*v139);
                  do
                  {
                    do
                    {
                      int v145 = (void *)v9;
                      *(void *)(v9 + 8) = *(void *)v9;
                      v9 -= 8;
                      int v146 = *((_DWORD *)v145 - 1);
                    }
                    while (v146 < (int)v144);
                  }
                  while (v146 == v144 && *((_DWORD *)v145 - 2) > (int)v143);
                  void *v145 = v143;
                }
                int v81 = v139 + 1;
                unint64_t v9 = (unint64_t)v139;
              }
              while (v139 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((uint64_t *)v10 != a2)
            {
              int64_t v96 = (v12 - 2) >> 1;
              int64_t v97 = v96;
              do
              {
                int64_t v98 = v97;
                if (v96 >= v97)
                {
                  uint64_t v99 = (2 * v97) | 1;
                  uint64_t v100 = (unsigned int *)(v10 + 8 * v99);
                  if (2 * v98 + 2 < (uint64_t)v12)
                  {
                    signed int v101 = v100[1];
                    signed int v102 = v100[3];
                    if (v101 > v102
                      || ((double result = *v100, v101 == v102) ? (v103 = (int)result < (int)v100[2]) : (v103 = 0), v103))
                    {
                      v100 += 2;
                      uint64_t v99 = 2 * v98 + 2;
                    }
                  }
                  int v104 = (unsigned int *)(v10 + 8 * v98);
                  signed int v105 = v100[1];
                  signed int v106 = v104[1];
                  if (v105 <= v106)
                  {
                    double result = *v100;
                    if (v105 != v106 || (int)result >= (int)*v104)
                    {
                      uint64_t v108 = *(void *)v104;
                      uint64_t v109 = HIDWORD(*(void *)v104);
                      do
                      {
                        int v110 = v104;
                        int v104 = v100;
                        *int v110 = *(void *)v100;
                        if (v96 < v99) {
                          break;
                        }
                        uint64_t v111 = 2 * v99;
                        uint64_t v99 = (2 * v99) | 1;
                        uint64_t v100 = (unsigned int *)(v10 + 8 * v99);
                        uint64_t v112 = v111 + 2;
                        if (v112 < (uint64_t)v12)
                        {
                          double result = v100[1];
                          int v113 = v100[3];
                          if ((int)result > v113
                            || (result == v113 ? (BOOL v114 = (int)*v100 < (int)v100[2]) : (BOOL v114 = 0), v114))
                          {
                            v100 += 2;
                            uint64_t v99 = v112;
                          }
                        }
                        int v115 = v100[1];
                        if (v115 > (int)v109) {
                          break;
                        }
                      }
                      while (v115 != v109 || (int)*v100 >= (int)v108);
                      *(void *)int v104 = v108;
                    }
                  }
                }
                int64_t v97 = v98 - 1;
              }
              while (v98);
              uint64_t v117 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v118 = 0;
                uint64_t v119 = *(void *)v10;
                unint64_t v120 = (uint64_t *)v10;
                do
                {
                  uint64_t v121 = v120;
                  v120 += v118 + 1;
                  uint64_t v122 = 2 * v118;
                  uint64_t v118 = (2 * v118) | 1;
                  uint64_t v123 = v122 + 2;
                  if (v123 < v117)
                  {
                    signed int v124 = *((_DWORD *)v120 + 1);
                    signed int v125 = *((_DWORD *)v120 + 3);
                    if (v124 > v125
                      || ((double result = *(unsigned int *)v120, v124 == v125)
                        ? (BOOL v126 = (int)result < *((_DWORD *)v120 + 2))
                        : (BOOL v126 = 0),
                          v126))
                    {
                      ++v120;
                      uint64_t v118 = v123;
                    }
                  }
                  *uint64_t v121 = *v120;
                }
                while (v118 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
                if (v120 == --a2)
                {
                  uint64_t *v120 = v119;
                }
                else
                {
                  uint64_t *v120 = *a2;
                  *a2 = v119;
                  uint64_t v127 = (uint64_t)v120 - v10 + 8;
                  if (v127 >= 9)
                  {
                    unint64_t v128 = ((unint64_t)v127 >> 3) - 2;
                    unint64_t v129 = v128 >> 1;
                    long long v130 = (_DWORD *)(v10 + 8 * (v128 >> 1));
                    signed int v131 = v130[1];
                    signed int v132 = *((_DWORD *)v120 + 1);
                    if (v131 > v132 || (v131 == v132 ? (BOOL v133 = *v130 < *(_DWORD *)v120) : (BOOL v133 = 0), v133))
                    {
                      uint64_t v134 = *v120;
                      uint64_t *v120 = *(void *)v130;
                      if (v128 >= 2)
                      {
                        while (1)
                        {
                          unint64_t v135 = v129 - 1;
                          unint64_t v129 = (v129 - 1) >> 1;
                          uint64_t v136 = (_DWORD *)(v10 + 8 * v129);
                          int v137 = v136[1];
                          if (v137 <= SHIDWORD(v134) && (v137 != HIDWORD(v134) || *v136 >= (int)v134)) {
                            break;
                          }
                          *(void *)long long v130 = *(void *)v136;
                          long long v130 = (_DWORD *)(v10 + 8 * v129);
                          if (v135 <= 1) {
                            goto LABEL_230;
                          }
                        }
                      }
                      uint64_t v136 = v130;
LABEL_230:
                      *(void *)uint64_t v136 = v134;
                    }
                  }
                }
                BOOL v23 = v117-- <= 2;
              }
              while (!v23);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = (int *)(v10 + 8 * (v12 >> 1));
          if ((unint64_t)v11 >= 0x401) {
            break;
          }
          --a3;
          if (a4) {
            goto LABEL_15;
          }
LABEL_12:
          int v17 = *(_DWORD *)(v9 - 4);
          int v18 = *(_DWORD *)(v9 + 4);
          if (v17 > v18 || v17 == v18 && *(_DWORD *)(v9 - 8) < *(_DWORD *)v9) {
            goto LABEL_15;
          }
          uint64_t v43 = *(void *)v9;
          uint64_t v44 = HIDWORD(*(void *)v9);
          int v45 = *((_DWORD *)a2 - 1);
          if (v45 < (int)v44 || v45 == v44 && *((_DWORD *)a2 - 2) > (int)v43)
          {
            unint64_t v46 = v9 + 8;
            do
            {
              unint64_t v10 = v46;
              int v47 = *(_DWORD *)(v46 + 4);
              BOOL v48 = v47 == v44;
              if (v47 < (int)v44) {
                break;
              }
              unint64_t v46 = v10 + 8;
            }
            while (!v48 || *(_DWORD *)v10 <= (int)v43);
          }
          else
          {
            unint64_t v62 = v9 + 8;
            do
            {
              unint64_t v10 = v62;
              if (v62 >= (unint64_t)a2) {
                break;
              }
              int v63 = *(_DWORD *)(v62 + 4);
              if (v63 < (int)v44) {
                break;
              }
              v62 += 8;
            }
            while (v63 != v44 || *(_DWORD *)v10 <= (int)v43);
          }
          uint64_t v50 = a2;
          if (v10 < (unint64_t)a2)
          {
            for (unint64_t i = (_DWORD *)a2 - 3; v45 < (int)v44 || v45 == v44 && i[1] > (int)v43; i -= 2)
            {
              int v52 = *i;
              int v45 = v52;
            }
            uint64_t v50 = (uint64_t *)(i + 1);
          }
          while (v10 < (unint64_t)v50)
          {
            uint64_t v53 = *(void *)v10;
            *(void *)unint64_t v10 = *v50;
            *uint64_t v50 = v53;
            unint64_t v54 = v10 + 8;
            do
            {
              unint64_t v10 = v54;
              int v55 = *(_DWORD *)(v54 + 4);
              BOOL v56 = v55 == v44;
              if (v55 < (int)v44) {
                break;
              }
              unint64_t v54 = v10 + 8;
            }
            while (!v56 || *(_DWORD *)v10 <= (int)v43);
            unint64_t v58 = v50 - 1;
            do
            {
              do
              {
                uint64_t v50 = v58;
                int v59 = *((_DWORD *)v58-- + 1);
              }
              while (v59 < (int)v44);
            }
            while (v59 == v44 && *(_DWORD *)v50 > (int)v43);
          }
          unint64_t v61 = (void *)(v10 - 8);
          BOOL v4 = v10 - 8 >= v9;
          BOOL v5 = v10 - 8 == v9;
          if (v10 - 8 != v9) {
            *(void *)unint64_t v9 = *v61;
          }
          a4 = 0;
          *unint64_t v61 = v43;
        }
        unint64_t v15 = (int *)(v9 + 8 * v13);
        uint64_t v16 = *(void *)v9;
        *(void *)unint64_t v9 = *(void *)v15;
        *(void *)unint64_t v15 = v16;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_15:
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)v9;
        uint64_t v21 = HIDWORD(*(void *)v9);
        while (1)
        {
          int v22 = *(_DWORD *)(v9 + v19 + 12);
          if (v22 <= (int)v21)
          {
            BOOL v23 = v22 == v21 && *(_DWORD *)(v9 + v19 + 8) < (int)v20;
            if (!v23) {
              break;
            }
          }
          v19 += 8;
        }
        unint64_t v24 = (uint64_t *)(v9 + v19);
        unint64_t v25 = v9 + v19 + 8;
        uint64_t v26 = a2 - 1;
        if (v19)
        {
          do
          {
            uint64_t v27 = v26;
            int v28 = *((_DWORD *)v26-- + 1);
            if (v28 > (int)v21) {
              break;
            }
          }
          while (v28 != v21 || *(_DWORD *)v27 >= (int)v20);
LABEL_38:
          if (v25 < (unint64_t)v27)
          {
            unint64_t v34 = v25;
            uint64_t v35 = v27;
            do
            {
              uint64_t v36 = *(void *)v34;
              *(void *)unint64_t v34 = *v35;
              v34 += 8;
              uint64_t *v35 = v36;
              while (1)
              {
                int v37 = *(_DWORD *)(v34 + 4);
                if (v37 <= (int)v21 && (v37 != v21 || *(_DWORD *)v34 >= (int)v20)) {
                  break;
                }
                v34 += 8;
              }
              uint64_t v39 = v35 - 1;
              do
              {
                uint64_t v35 = v39;
                int v40 = *((_DWORD *)v39-- + 1);
                if (v40 > (int)v21) {
                  break;
                }
              }
              while (v40 != v21 || *(_DWORD *)v35 >= (int)v20);
            }
            while (v34 < (unint64_t)v35);
            unint64_t v24 = (uint64_t *)(v34 - 8);
          }
        }
        else
        {
          uint64_t v30 = a2 - 1;
          while (1)
          {
            uint64_t v27 = v30;
            long long v31 = v30 + 1;
            if (v25 >= (unint64_t)v31) {
              break;
            }
            int v32 = *((_DWORD *)v27 + 1);
            if (v32 <= (int)v21)
            {
              uint64_t v30 = v27 - 1;
              if (v32 != v21 || *(_DWORD *)v27 >= (int)v20) {
                continue;
              }
            }
            goto LABEL_38;
          }
          uint64_t v27 = v31;
        }
        if (v24 != (uint64_t *)v9) {
          *(void *)unint64_t v9 = *v24;
        }
        *unint64_t v24 = v20;
        if (v25 >= (unint64_t)v27) {
          break;
        }
LABEL_62:
        a4 = 0;
        unint64_t v10 = (unint64_t)(v24 + 1);
      }
      unint64_t v10 = (unint64_t)(v24 + 1);
      if (result) {
        break;
      }
      if (!v42) {
        goto LABEL_62;
      }
    }
    a2 = v24;
    if (!v42) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::anonymous namespace'::WeightedVariable *,0>(uint64_t a1, int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  int v11 = *((_DWORD *)a4 + 1);
  int v12 = *(_DWORD *)(a3 + 4);
  if (v11 > v12 || (v11 == v12 ? (BOOL v13 = *(_DWORD *)a4 < *(_DWORD *)a3) : (BOOL v13 = 0), v13))
  {
    uint64_t v14 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v14;
    int v15 = *(_DWORD *)(a3 + 4);
    int v16 = a2[1];
    if (v15 > v16 || (v15 == v16 ? (BOOL v17 = *(_DWORD *)a3 < *a2) : (BOOL v17 = 0), v17))
    {
      uint64_t v18 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      int v19 = a2[1];
      int v20 = *(_DWORD *)(a1 + 4);
      if (v19 > v20 || v19 == v20 && *a2 < *(_DWORD *)a1)
      {
        uint64_t v21 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v21;
      }
    }
  }
  int v22 = *((_DWORD *)a5 + 1);
  int v23 = *((_DWORD *)a4 + 1);
  if (v22 > v23 || v22 == v23 && *(_DWORD *)a5 < *(_DWORD *)a4)
  {
    uint64_t v24 = *a4;
    *a4 = *a5;
    *a5 = v24;
    int v25 = *((_DWORD *)a4 + 1);
    int v26 = *(_DWORD *)(a3 + 4);
    if (v25 > v26 || v25 == v26 && *(_DWORD *)a4 < *(_DWORD *)a3)
    {
      uint64_t v27 = *(void *)a3;
      *(void *)a3 = *a4;
      *a4 = v27;
      int v28 = *(_DWORD *)(a3 + 4);
      int v29 = a2[1];
      if (v28 > v29 || v28 == v29 && *(_DWORD *)a3 < *a2)
      {
        uint64_t v30 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v30;
        int v31 = a2[1];
        int v32 = *(_DWORD *)(a1 + 4);
        if (v31 > v32 || v31 == v32 && *a2 < *(_DWORD *)a1)
        {
          uint64_t v33 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v33;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::anonymous namespace'::WeightedVariable *>(uint64_t *result, int *a2, uint64_t *a3)
{
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = *((_DWORD *)result + 1);
  if (v4 > v5 || (v4 == v5 ? (BOOL v6 = v3 < *(_DWORD *)result) : (BOOL v6 = 0), v6))
  {
    int v13 = *((_DWORD *)a3 + 1);
    if (v13 > v4 || (v13 == v4 ? (BOOL v14 = *(_DWORD *)a3 < v3) : (BOOL v14 = 0), v14))
    {
      uint64_t v15 = *result;
      *double result = *a3;
    }
    else
    {
      uint64_t v15 = *result;
      *double result = *(void *)a2;
      *(void *)a2 = v15;
      int v16 = *((_DWORD *)a3 + 1);
      if (v16 <= SHIDWORD(v15) && (v16 != HIDWORD(v15) || *(_DWORD *)a3 >= (int)v15)) {
        return result;
      }
      *(void *)a2 = *a3;
    }
    *a3 = v15;
    return result;
  }
  int v7 = *((_DWORD *)a3 + 1);
  if (v7 > v4 || (v7 == v4 ? (BOOL v8 = *(_DWORD *)a3 < v3) : (BOOL v8 = 0), v8))
  {
    uint64_t v9 = *(void *)a2;
    *(void *)a2 = *a3;
    *a3 = v9;
    int v10 = a2[1];
    int v11 = *((_DWORD *)result + 1);
    if (v10 > v11 || v10 == v11 && *a2 < *(_DWORD *)result)
    {
      uint64_t v12 = *result;
      *double result = *(void *)a2;
      *(void *)a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::anonymous namespace'::VariableWithLargerWeightFirst &,operations_research::sat::anonymous namespace'::WeightedVariable *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v19 = *(_DWORD *)(a2 - 4);
      int v20 = *(_DWORD *)(a1 + 4);
      if (v19 > v20 || (v19 == v20 ? (BOOL v21 = *(_DWORD *)(a2 - 8) < *(_DWORD *)a1) : (BOOL v21 = 0), v21))
      {
        uint64_t v22 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v22;
      }
      return result;
    case 3:
      return 1;
    case 4:
      int v23 = (_DWORD *)(a1 + 16);
      int v24 = *(_DWORD *)(a2 - 4);
      int v25 = *(_DWORD *)(a1 + 20);
      if (v24 <= v25 && (v24 != v25 || *(_DWORD *)(a2 - 8) >= *v23)) {
        return 1;
      }
      uint64_t v27 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = v27;
      int v28 = *(_DWORD *)(a1 + 20);
      int v29 = *(_DWORD *)(a1 + 12);
      if (v28 > v29 || (BOOL result = 1, v28 == v29) && *v23 < *(_DWORD *)(a1 + 8))
      {
        uint64_t v31 = *(void *)(a1 + 8);
        uint64_t v30 = *(void *)(a1 + 16);
        *(void *)(a1 + 8) = v30;
        *(void *)(a1 + 16) = v31;
        int v32 = *(_DWORD *)(a1 + 4);
        if (v32 < SHIDWORD(v30) || (BOOL result = 1, v32 == HIDWORD(v30)) && *(_DWORD *)a1 > (int)v30)
        {
          uint64_t v33 = *(void *)a1;
          *(void *)a1 = v30;
          *(void *)(a1 + 8) = v33;
          return 1;
        }
      }
      return result;
    case 5:
      return 1;
    default:
      uint64_t v6 = a1 + 16;
      uint64_t v7 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    int v11 = *(_DWORD *)(v7 + 4);
    int v12 = *(_DWORD *)(v6 + 4);
    if (v11 > v12 || (v11 == v12 ? (BOOL v13 = *(_DWORD *)v7 < *(_DWORD *)v6) : (BOOL v13 = 0), v13))
    {
      uint64_t v14 = *(void *)v7;
      *(void *)uint64_t v7 = *(void *)v6;
      int v10 = (void *)a1;
      if (v6 != a1)
      {
        uint64_t v15 = v8;
        while (1)
        {
          uint64_t v16 = a1 + v15;
          int v17 = *(_DWORD *)(a1 + v15 + 12);
          if (v17 >= SHIDWORD(v14) && (v17 != HIDWORD(v14) || *(_DWORD *)(v16 + 8) <= (int)v14)) {
            break;
          }
          *(void *)(v16 + 16) = *(void *)(v16 + 8);
          v15 -= 8;
          if (v15 == -16)
          {
            int v10 = (void *)a1;
            goto LABEL_6;
          }
        }
        int v10 = (void *)(a1 + v15 + 16);
      }
LABEL_6:
      *int v10 = v14;
      if (++v9 == 8) {
        return v7 + 8 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 8;
    v7 += 8;
    if (v7 == a2) {
      return 1;
    }
  }
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                int v79 = (unint64_t *)(a2 - 16);
                a5.n128_u64[0] = *(void *)(a2 - 16);
                int v80 = *(_DWORD *)(a2 - 8);
                int v81 = (__n128 *)(v11 + 8);
                int v82 = *(_DWORD *)(v11 + 16);
                BOOL v6 = v80 == v82;
                BOOL v83 = v80 > v82;
                if (v6) {
                  BOOL v83 = a5.n128_f64[0] < *(double *)(v11 + 8);
                }
                if (v83)
                {
                  uint64_t v84 = *(void *)v11;
                  *(void *)unint64_t v11 = *(void *)(a2 - 24);
                  *(void *)(a2 - 24) = v84;
                  a5 = *v81;
                  __n128 v167 = *v81;
                  unint64_t v85 = *v79;
                  *(void *)(v11 + 13) = *(void *)(a2 - 11);
                  v81->n128_u64[0] = v85;
                  *(void *)(a2 - 11) = *(unint64_t *)((char *)v167.n128_u64 + 5);
                  *int v79 = v167.n128_u64[0];
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)v11, (uint64_t *)(v11 + 24), (uint64_t *)(a2 - 24));
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v11, v11 + 24, v11 + 48, a2 - 24).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(v11, v11 + 24, v11 + 48, v11 + 72, a2 - 24).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v12 <= 575)
          {
            uint64_t v86 = (void *)(v11 + 24);
            BOOL v88 = v11 == a2 || v86 == (void *)a2;
            if (a4)
            {
              if (!v88)
              {
                uint64_t v89 = 0;
                uint64_t v90 = (void *)v11;
                do
                {
                  uint64_t v92 = v86;
                  a5.n128_u64[0] = v90[4];
                  int v93 = *((_DWORD *)v90 + 10);
                  int v94 = *((_DWORD *)v90 + 4);
                  BOOL v6 = v93 == v94;
                  BOOL v95 = v93 > v94;
                  if (v6) {
                    BOOL v95 = a5.n128_f64[0] < *((double *)v90 + 1);
                  }
                  if (v95)
                  {
                    uint64_t v96 = *v92;
                    int v97 = *((_DWORD *)v90 + 11);
                    uint64_t v98 = v89;
                    do
                    {
                      uint64_t v99 = (void *)(v11 + v98);
                      uint64_t v100 = *(void *)(v11 + v98 + 8);
                      v99[3] = *(void *)(v11 + v98);
                      v99[4] = v100;
                      *(void *)((char *)v99 + 37) = *(void *)(v11 + v98 + 13);
                      if (!v98)
                      {
                        uint64_t v91 = v11;
                        goto LABEL_103;
                      }
                      int v101 = *((_DWORD *)v99 - 2);
                      BOOL v6 = v93 == v101;
                      BOOL v102 = v93 > v101;
                      if (v6) {
                        BOOL v102 = a5.n128_f64[0] < *((double *)v99 - 2);
                      }
                      v98 -= 24;
                    }
                    while (v102);
                    uint64_t v91 = v11 + v98 + 24;
LABEL_103:
                    *(void *)uint64_t v91 = v96;
                    v99[1] = a5.n128_u64[0];
                    *(_DWORD *)(v91 + 16) = v93;
                    *(unsigned char *)(v91 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v97;
                  }
                  uint64_t v86 = v92 + 3;
                  v89 += 24;
                  uint64_t v90 = v92;
                }
                while (v92 + 3 != (void *)a2);
              }
            }
            else if (!v88)
            {
              int v153 = (unsigned char *)(v11 + 44);
              do
              {
                std::string v154 = v86;
                a5.n128_u64[0] = *(void *)(a1 + 32);
                int v155 = *(_DWORD *)(a1 + 40);
                int v156 = *(_DWORD *)(a1 + 16);
                BOOL v6 = v155 == v156;
                BOOL v157 = v155 > v156;
                if (v6) {
                  BOOL v157 = a5.n128_f64[0] < *(double *)(a1 + 8);
                }
                if (v157)
                {
                  uint64_t v158 = *v154;
                  int v159 = *(_DWORD *)(a1 + 44);
                  std::string v160 = v153;
                  do
                  {
                    *(void *)(v160 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(void *)(v160 - 44);
                    *(void *)(v160 - 12) = *(void *)(v160 - 36);
                    *(void *)(v160 - 7) = *(void *)(v160 - 31);
                    int v161 = *((_DWORD *)v160 - 13);
                    BOOL v6 = v155 == v161;
                    BOOL v162 = v155 > v161;
                    if (v6) {
                      BOOL v162 = a5.n128_f64[0] < *(double *)(v160 - 60);
                    }
                    v160 -= 24;
                  }
                  while (v162);
                  *(void *)(v160 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v158;
                  *(void *)(v160 - 12) = a5.n128_u64[0];
                  *((_DWORD *)v160 - 1) = v155;
                  unsigned char *v160 = v159;
                }
                uint64_t v86 = v154 + 3;
                v153 += 24;
                a1 = (unint64_t)v154;
              }
              while (v154 + 3 != (uint64_t *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v103 = (v13 - 2) >> 1;
              int64_t v104 = v103;
              do
              {
                int64_t v105 = v104;
                if (v103 >= v104)
                {
                  uint64_t v106 = (2 * v104) | 1;
                  unint64_t v107 = v11 + 24 * v106;
                  if (2 * v105 + 2 < (uint64_t)v13)
                  {
                    int v108 = *(_DWORD *)(v107 + 16);
                    int v109 = *(_DWORD *)(v107 + 40);
                    BOOL v6 = v108 == v109;
                    BOOL v110 = v108 > v109;
                    if (v6) {
                      BOOL v110 = *(double *)(v107 + 8) < *(double *)(v107 + 32);
                    }
                    v107 += 24 * v110;
                    if (v110) {
                      uint64_t v106 = 2 * v105 + 2;
                    }
                  }
                  unint64_t v111 = v11 + 24 * v105;
                  int v112 = *(_DWORD *)(v107 + 16);
                  a5.n128_u64[0] = *(void *)(v111 + 8);
                  int v113 = *(_DWORD *)(v111 + 16);
                  BOOL v6 = v112 == v113;
                  BOOL v114 = v112 > v113;
                  if (v6) {
                    BOOL v114 = *(double *)(v107 + 8) < a5.n128_f64[0];
                  }
                  if (!v114)
                  {
                    uint64_t v115 = *(void *)v111;
                    int v116 = *(_DWORD *)(v111 + 20);
                    do
                    {
                      unint64_t v120 = (void *)v111;
                      unint64_t v111 = v107;
                      void *v120 = *(void *)v107;
                      uint64_t v121 = *(void *)(v107 + 8);
                      *(void *)((char *)v120 + 13) = *(void *)(v111 + 13);
                      v120[1] = v121;
                      if (v103 < v106) {
                        break;
                      }
                      uint64_t v122 = (2 * v106) | 1;
                      unint64_t v107 = v11 + 24 * v122;
                      uint64_t v123 = 2 * v106 + 2;
                      if (v123 < (uint64_t)v13)
                      {
                        int v124 = *(_DWORD *)(v107 + 16);
                        int v125 = *(_DWORD *)(v107 + 40);
                        BOOL v6 = v124 == v125;
                        BOOL v126 = v124 > v125;
                        if (v6) {
                          BOOL v126 = *(double *)(v107 + 8) < *(double *)(v107 + 32);
                        }
                        v107 += 24 * v126;
                        if (v126) {
                          uint64_t v122 = v123;
                        }
                      }
                      int v117 = *(_DWORD *)(v107 + 16);
                      BOOL v118 = *(double *)(v107 + 8) < a5.n128_f64[0];
                      BOOL v6 = v117 == v113;
                      BOOL v119 = v117 > v113;
                      if (!v6) {
                        BOOL v118 = v119;
                      }
                      uint64_t v106 = v122;
                    }
                    while (!v118);
                    *(void *)unint64_t v111 = v115;
                    *(void *)(v111 + 8) = a5.n128_u64[0];
                    *(_DWORD *)(v111 + 16) = v113;
                    *(unsigned char *)(v111 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v116;
                  }
                }
                int64_t v104 = v105 - 1;
              }
              while (v105);
              int64_t v127 = v12 / 0x18uLL;
              do
              {
                uint64_t v129 = 0;
                uint64_t v130 = *(void *)v11;
                *(void *)std::string v168 = *(void *)(v11 + 8);
                *(void *)&v168[5] = *(void *)(v11 + 13);
                signed int v131 = (void *)v11;
                do
                {
                  uint64_t v134 = (uint64_t)&v131[3 * v129 + 3];
                  uint64_t v135 = (2 * v129) | 1;
                  uint64_t v136 = 2 * v129 + 2;
                  if (v136 < v127)
                  {
                    a5.n128_u64[0] = v131[3 * v129 + 4];
                    int v137 = v131[3 * v129 + 5];
                    int v138 = *(_DWORD *)(v134 + 40);
                    BOOL v6 = v137 == v138;
                    BOOL v139 = v137 > v138;
                    if (v6) {
                      BOOL v139 = a5.n128_f64[0] < *(double *)(v134 + 32);
                    }
                    v134 += 24 * v139;
                    if (v139) {
                      uint64_t v135 = v136;
                    }
                  }
                  void *v131 = *(void *)v134;
                  BOOL v133 = (void *)(v134 + 8);
                  uint64_t v132 = *(void *)(v134 + 8);
                  *(void *)((char *)v131 + 13) = *(void *)(v134 + 13);
                  v131[1] = v132;
                  signed int v131 = (void *)v134;
                  uint64_t v129 = v135;
                }
                while (v135 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
                if (v134 == a2 - 24)
                {
                  *(void *)uint64_t v134 = v130;
                  *(void *)(v134 + 13) = *(void *)&v168[5];
                  *BOOL v133 = *(void *)v168;
                }
                else
                {
                  *(void *)uint64_t v134 = *(void *)(a2 - 24);
                  uint64_t v140 = *(void *)(a2 - 16);
                  *(void *)(v134 + 13) = *(void *)(a2 - 11);
                  *BOOL v133 = v140;
                  *(void *)(a2 - 24) = v130;
                  *(void *)(a2 - 11) = *(void *)&v168[5];
                  *(void *)(a2 - 16) = *(void *)v168;
                  uint64_t v141 = v134 - v11 + 24;
                  if (v141 >= 25)
                  {
                    unint64_t v142 = (v141 / 0x18uLL - 2) >> 1;
                    uint64_t v143 = v11 + 24 * v142;
                    int v144 = *(_DWORD *)(v143 + 16);
                    a5.n128_u64[0] = *(void *)(v134 + 8);
                    int v145 = *(_DWORD *)(v134 + 16);
                    BOOL v6 = v144 == v145;
                    BOOL v146 = v144 > v145;
                    if (v6) {
                      BOOL v146 = *(double *)(v143 + 8) < a5.n128_f64[0];
                    }
                    if (v146)
                    {
                      uint64_t v147 = *(void *)v134;
                      int v148 = *(_DWORD *)(v134 + 20);
                      do
                      {
                        std::string v149 = (void *)v134;
                        uint64_t v134 = v143;
                        *std::string v149 = *(void *)v143;
                        uint64_t v150 = *(void *)(v143 + 8);
                        *(void *)((char *)v149 + 13) = *(void *)(v134 + 13);
                        v149[1] = v150;
                        if (!v142) {
                          break;
                        }
                        unint64_t v142 = (v142 - 1) >> 1;
                        uint64_t v143 = v11 + 24 * v142;
                        int v151 = *(_DWORD *)(v143 + 16);
                        BOOL v6 = v151 == v145;
                        BOOL v152 = v151 > v145;
                        if (v6) {
                          BOOL v152 = *(double *)(v143 + 8) < a5.n128_f64[0];
                        }
                      }
                      while (v152);
                      *(void *)uint64_t v134 = v147;
                      *(void *)(v134 + 8) = a5.n128_u64[0];
                      *(_DWORD *)(v134 + 16) = v145;
                      *(unsigned char *)(v134 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v148;
                    }
                  }
                }
                a2 -= 24;
              }
              while (v127-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = (uint64_t *)(v11 + 24 * (v13 >> 1));
          if ((unint64_t)v12 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24 * (v13 >> 1)), (uint64_t *)(a2 - 24));
            unint64_t v16 = a1 + 24 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24), (uint64_t *)(v16 - 24), (uint64_t *)(a2 - 48));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 24 + 24 * v14), (uint64_t *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(v16 - 24), v15, (uint64_t *)(a1 + 24 + 24 * v14));
            uint64_t v17 = *(void *)a1;
            *(void *)a1 = *v15;
            *uint64_t v15 = v17;
            long long v164 = *(_OWORD *)(a1 + 8);
            uint64_t v18 = *(void *)(v16 + 13);
            *(void *)(a1 + 8) = *(void *)(v16 + 8);
            *(void *)(a1 + 13) = v18;
            *(void *)(v16 + 13) = *(void *)((char *)&v164 + 5);
            *(void *)(v16 + 8) = v164;
            --a3;
            if (a4) {
              goto LABEL_21;
            }
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24 * (v13 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
            --a3;
            if (a4)
            {
LABEL_21:
              a5.n128_u64[0] = *(void *)(a1 + 8);
              int v20 = *(_DWORD *)(a1 + 16);
              break;
            }
          }
          int v19 = *(_DWORD *)(a1 - 8);
          a5.n128_u64[0] = *(void *)(a1 + 8);
          int v20 = *(_DWORD *)(a1 + 16);
          BOOL v6 = v19 == v20;
          BOOL v21 = v19 > v20;
          if (v6) {
            BOOL v21 = *(double *)(a1 - 16) < a5.n128_f64[0];
          }
          if (v21) {
            break;
          }
          int v22 = *(_DWORD *)(a2 - 8);
          BOOL v6 = v20 == v22;
          BOOL v23 = v20 > v22;
          if (v6) {
            BOOL v23 = a5.n128_f64[0] < *(double *)(a2 - 16);
          }
          if (v23)
          {
            unint64_t v24 = a1;
            do
            {
              unint64_t v11 = v24 + 24;
              double v25 = *(double *)(v24 + 32);
              int v26 = *(_DWORD *)(v24 + 40);
              BOOL v27 = a5.n128_f64[0] < v25;
              BOOL v6 = v20 == v26;
              BOOL v28 = v20 > v26;
              if (!v6) {
                BOOL v27 = v28;
              }
              unint64_t v24 = v11;
            }
            while (!v27);
          }
          else
          {
            unint64_t v57 = a1 + 24;
            do
            {
              unint64_t v11 = v57;
              if (v57 >= a2) {
                break;
              }
              double v58 = *(double *)(v57 + 8);
              int v59 = *(_DWORD *)(v57 + 16);
              BOOL v60 = a5.n128_f64[0] < v58;
              BOOL v6 = v20 == v59;
              BOOL v61 = v20 > v59;
              if (!v6) {
                BOOL v60 = v61;
              }
              unint64_t v57 = v11 + 24;
            }
            while (!v60);
          }
          unint64_t v62 = (double *)a2;
          if (v11 < a2)
          {
            int v63 = (double *)a2;
            do
            {
              unint64_t v62 = v63 - 3;
              double v64 = *(v63 - 2);
              int v65 = *((_DWORD *)v63 - 2);
              BOOL v66 = a5.n128_f64[0] < v64;
              BOOL v6 = v20 == v65;
              BOOL v67 = v20 > v65;
              if (!v6) {
                BOOL v66 = v67;
              }
              int v63 = v62;
            }
            while (v66);
          }
          uint64_t v68 = *(void *)a1;
          int v69 = *(_DWORD *)(a1 + 20);
          while (v11 < (unint64_t)v62)
          {
            uint64_t v70 = *(void *)v11;
            *(double *)unint64_t v11 = *v62;
            *(void *)unint64_t v62 = v70;
            long long v166 = *(_OWORD *)(v11 + 8);
            uint64_t v71 = *(void *)((char *)v62 + 13);
            *(double *)(v11 + 8) = v62[1];
            *(void *)(v11 + 13) = v71;
            *((void *)v62 + 1) = v166;
            *(double *)((char *)v62 + 13) = *(double *)((char *)&v166 + 5);
            do
            {
              double v72 = *(double *)(v11 + 32);
              int v73 = *(_DWORD *)(v11 + 40);
              v11 += 24;
              BOOL v6 = v20 == v73;
              BOOL v74 = v20 > v73;
              if (v6) {
                BOOL v74 = a5.n128_f64[0] < v72;
              }
            }
            while (!v74);
            do
            {
              double v75 = *(v62 - 2);
              int v76 = *((_DWORD *)v62 - 2);
              v62 -= 3;
              BOOL v6 = v20 == v76;
              BOOL v77 = v20 > v76;
              if (v6) {
                BOOL v77 = a5.n128_f64[0] < v75;
              }
            }
            while (v77);
          }
          BOOL v5 = v11 - 24 >= a1;
          BOOL v6 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            *(void *)a1 = *(void *)(v11 - 24);
            uint64_t v78 = *(void *)(v11 - 16);
            *(void *)(a1 + 13) = *(void *)(v11 - 11);
            *(void *)(a1 + 8) = v78;
          }
          a4 = 0;
          *(void *)(v11 - 24) = v68;
          *(void *)(v11 - 16) = a5.n128_u64[0];
          *(_DWORD *)(v11 - 8) = v20;
          *(unsigned char *)(v11 - 4) = v69;
        }
        uint64_t v29 = 0;
        uint64_t v30 = *(void *)a1;
        int v31 = *(_DWORD *)(a1 + 20);
        do
        {
          int v32 = *(_DWORD *)(a1 + v29 + 40);
          BOOL v6 = v32 == v20;
          BOOL v33 = v32 > v20;
          if (v6) {
            BOOL v33 = *(double *)(a1 + v29 + 32) < a5.n128_f64[0];
          }
          v29 += 24;
        }
        while (v33);
        unint64_t v34 = a1 + v29;
        unint64_t v35 = a2;
        if (v29 == 24)
        {
          unint64_t v41 = a2;
          while (v34 < v41)
          {
            uint64_t v36 = (uint64_t *)(v41 - 24);
            double v42 = *(double *)(v41 - 16);
            int v43 = *(_DWORD *)(v41 - 8);
            BOOL v44 = v42 < a5.n128_f64[0];
            BOOL v6 = v43 == v20;
            BOOL v45 = v43 > v20;
            if (!v6) {
              BOOL v44 = v45;
            }
            unint64_t v41 = (unint64_t)v36;
            if (v44) {
              goto LABEL_36;
            }
          }
          uint64_t v36 = (uint64_t *)v41;
          unint64_t v11 = v34;
        }
        else
        {
          do
          {
            uint64_t v36 = (uint64_t *)(v35 - 24);
            double v37 = *(double *)(v35 - 16);
            int v38 = *(_DWORD *)(v35 - 8);
            BOOL v39 = v37 < a5.n128_f64[0];
            BOOL v6 = v38 == v20;
            BOOL v40 = v38 > v20;
            if (!v6) {
              BOOL v39 = v40;
            }
            unint64_t v35 = (unint64_t)v36;
          }
          while (!v39);
LABEL_36:
          unint64_t v11 = v34;
          if (v34 < (unint64_t)v36)
          {
            unint64_t v46 = v36;
            do
            {
              uint64_t v47 = *(void *)v11;
              *(void *)unint64_t v11 = *v46;
              *unint64_t v46 = v47;
              long long v165 = *(_OWORD *)(v11 + 8);
              uint64_t v48 = *(uint64_t *)((char *)v46 + 13);
              *(void *)(v11 + 8) = v46[1];
              *(void *)(v11 + 13) = v48;
              v46[1] = v165;
              *(uint64_t *)((char *)v46 + 13) = *(void *)((char *)&v165 + 5);
              do
              {
                double v49 = *(double *)(v11 + 32);
                int v50 = *(_DWORD *)(v11 + 40);
                v11 += 24;
                BOOL v6 = v50 == v20;
                BOOL v51 = v50 > v20;
                if (v6) {
                  BOOL v51 = v49 < a5.n128_f64[0];
                }
              }
              while (v51);
              do
              {
                double v52 = *((double *)v46 - 2);
                int v53 = *((_DWORD *)v46 - 2);
                v46 -= 3;
                BOOL v6 = v53 == v20;
                BOOL v54 = v53 > v20;
                if (v6) {
                  BOOL v54 = v52 < a5.n128_f64[0];
                }
              }
              while (!v54);
            }
            while (v11 < (unint64_t)v46);
          }
        }
        if (v11 - 24 != a1)
        {
          *(void *)a1 = *(void *)(v11 - 24);
          uint64_t v55 = *(void *)(v11 - 16);
          *(void *)(a1 + 13) = *(void *)(v11 - 11);
          *(void *)(a1 + 8) = v55;
        }
        *(void *)(v11 - 24) = v30;
        *(void *)(v11 - 16) = a5.n128_u64[0];
        *(_DWORD *)(v11 - 8) = v20;
        *(unsigned char *)(v11 - 4) = v31;
        if (v34 >= (unint64_t)v36) {
          break;
        }
LABEL_51:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v56 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, v11 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v11, a2))
      {
        break;
      }
      if (!v56) {
        goto LABEL_51;
      }
    }
    a2 = v11 - 24;
    if (!v56) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a2, a3, a4);
  int v10 = (void *)(a5 + 8);
  result.n128_u64[0] = *(void *)(a5 + 8);
  int v12 = *(_DWORD *)(a5 + 16);
  unint64_t v13 = (long long *)(a4 + 8);
  int v14 = *(_DWORD *)(a4 + 16);
  BOOL v15 = v12 == v14;
  BOOL v16 = v12 > v14;
  if (v15) {
    BOOL v16 = result.n128_f64[0] < *(double *)(a4 + 8);
  }
  if (v16)
  {
    uint64_t v17 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v17;
    long long v34 = *v13;
    uint64_t v18 = *(void *)(a5 + 13);
    *(void *)unint64_t v13 = *v10;
    *(void *)(a4 + 13) = v18;
    *(void *)(a5 + 13) = *(void *)((char *)&v34 + 5);
    *int v10 = v34;
    result.n128_u64[0] = *(void *)(a4 + 8);
    LODWORD(v18) = *(_DWORD *)(a4 + 16);
    int v19 = (long long *)(a3 + 8);
    int v20 = *(_DWORD *)(a3 + 16);
    BOOL v15 = v18 == v20;
    BOOL v21 = (int)v18 > v20;
    if (v15) {
      BOOL v21 = result.n128_f64[0] < *(double *)(a3 + 8);
    }
    if (v21)
    {
      uint64_t v22 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v22;
      long long v35 = *v19;
      uint64_t v23 = *(void *)(a4 + 13);
      *(void *)int v19 = *(void *)v13;
      *(void *)(a3 + 13) = v23;
      *(void *)(a4 + 13) = *(void *)((char *)&v35 + 5);
      *(void *)unint64_t v13 = v35;
      result.n128_u64[0] = *(void *)(a3 + 8);
      LODWORD(v23) = *(_DWORD *)(a3 + 16);
      unint64_t v24 = (long long *)(a2 + 8);
      int v25 = *(_DWORD *)(a2 + 16);
      BOOL v15 = v23 == v25;
      BOOL v26 = (int)v23 > v25;
      if (v15) {
        BOOL v26 = result.n128_f64[0] < *(double *)(a2 + 8);
      }
      if (v26)
      {
        uint64_t v27 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v27;
        long long v36 = *v24;
        uint64_t v28 = *(void *)(a3 + 13);
        *(void *)unint64_t v24 = *(void *)v19;
        *(void *)(a2 + 13) = v28;
        *(void *)(a3 + 13) = *(void *)((char *)&v36 + 5);
        *(void *)int v19 = v36;
        result.n128_u64[0] = *(void *)(a2 + 8);
        LODWORD(v28) = *(_DWORD *)(a2 + 16);
        uint64_t v29 = (__n128 *)(a1 + 8);
        int v30 = *(_DWORD *)(a1 + 16);
        BOOL v15 = v28 == v30;
        BOOL v31 = (int)v28 > v30;
        if (v15) {
          BOOL v31 = result.n128_f64[0] < *(double *)(a1 + 8);
        }
        if (v31)
        {
          uint64_t v32 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v32;
          __n128 result = *v29;
          __n128 v37 = *v29;
          uint64_t v33 = *(void *)(a2 + 13);
          v29->n128_u64[0] = *(void *)v24;
          *(void *)(a1 + 13) = v33;
          *(void *)(a2 + 13) = *(unint64_t *)((char *)v37.n128_u64 + 5);
          *(void *)unint64_t v24 = v37.n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = a2 + 1;
  double v4 = *((double *)a2 + 1);
  int v5 = *((_DWORD *)a2 + 4);
  BOOL v6 = (long long *)(result + 1);
  int v7 = *((_DWORD *)result + 4);
  BOOL v8 = v5 == v7;
  BOOL v9 = v5 > v7;
  if (v8) {
    BOOL v10 = v4 < *((double *)result + 1);
  }
  else {
    BOOL v10 = v9;
  }
  unint64_t v11 = a3 + 1;
  int v12 = *((_DWORD *)a3 + 4);
  BOOL v8 = v12 == v5;
  BOOL v13 = v12 > v5;
  if (v8) {
    BOOL v14 = *((double *)a3 + 1) < v4;
  }
  else {
    BOOL v14 = v13;
  }
  if (v10)
  {
    uint64_t v15 = *result;
    if (v14)
    {
      *__n128 result = *a3;
      *a3 = v15;
      long long v28 = *v6;
      uint64_t v16 = *(uint64_t *)((char *)a3 + 13);
      *(void *)BOOL v6 = *v11;
      *(uint64_t *)((char *)result + 13) = v16;
LABEL_19:
      *(uint64_t *)((char *)a3 + 13) = *(void *)((char *)&v28 + 5);
      *unint64_t v11 = v28;
      return result;
    }
    *__n128 result = *a2;
    *a2 = v15;
    long long v31 = *v6;
    uint64_t v23 = *(uint64_t *)((char *)a2 + 13);
    *(void *)BOOL v6 = *v3;
    *(uint64_t *)((char *)result + 13) = v23;
    *(uint64_t *)((char *)a2 + 13) = *(void *)((char *)&v31 + 5);
    void *v3 = v31;
    int v24 = *((_DWORD *)a3 + 4);
    LODWORD(v23) = *((_DWORD *)a2 + 4);
    BOOL v8 = v24 == v23;
    BOOL v25 = v24 > (int)v23;
    if (v8) {
      BOOL v25 = *((double *)a3 + 1) < *((double *)a2 + 1);
    }
    if (v25)
    {
      double v26 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v26;
      long long v28 = *(_OWORD *)v3;
      uint64_t v27 = *(uint64_t *)((char *)a3 + 13);
      void *v3 = *v11;
      *(uint64_t *)((char *)a2 + 13) = v27;
      goto LABEL_19;
    }
  }
  else if (v14)
  {
    double v17 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v17;
    long long v29 = *(_OWORD *)v3;
    uint64_t v18 = *(uint64_t *)((char *)a3 + 13);
    void *v3 = *v11;
    *(uint64_t *)((char *)a2 + 13) = v18;
    *(uint64_t *)((char *)a3 + 13) = *(void *)((char *)&v29 + 5);
    *unint64_t v11 = v29;
    int v19 = *((_DWORD *)a2 + 4);
    LODWORD(v18) = *((_DWORD *)result + 4);
    BOOL v8 = v19 == v18;
    BOOL v20 = v19 > (int)v18;
    if (v8) {
      BOOL v20 = *((double *)a2 + 1) < *((double *)result + 1);
    }
    if (v20)
    {
      uint64_t v21 = *result;
      *__n128 result = *a2;
      *a2 = v21;
      long long v30 = *v6;
      uint64_t v22 = *(uint64_t *)((char *)a2 + 13);
      *(void *)BOOL v6 = *v3;
      *(uint64_t *)((char *)result + 13) = v22;
      *(uint64_t *)((char *)a2 + 13) = *(void *)((char *)&v30 + 5);
      void *v3 = v30;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v23 = (void *)(a2 - 16);
      int v24 = *(_DWORD *)(a2 - 8);
      BOOL v25 = (long long *)(a1 + 8);
      int v26 = *(_DWORD *)(a1 + 16);
      BOOL v14 = v24 == v26;
      BOOL v27 = v24 > v26;
      if (v14) {
        BOOL v27 = *(double *)(a2 - 16) < *(double *)(a1 + 8);
      }
      if (v27)
      {
        uint64_t v28 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v28;
        long long v30 = *v25;
        uint64_t v29 = *(void *)(a2 - 11);
        *(void *)BOOL v25 = *v23;
        *(void *)(a1 + 13) = v29;
        *(void *)(a2 - 11) = *(void *)((char *)&v30 + 5);
        *uint64_t v23 = v30;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v7 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    double v11 = *(double *)(v7 + 8);
    int v12 = *(_DWORD *)(v7 + 16);
    int v13 = *(_DWORD *)(v6 + 16);
    BOOL v14 = v12 == v13;
    BOOL v15 = v12 > v13;
    if (v14) {
      BOOL v15 = v11 < *(double *)(v6 + 8);
    }
    if (v15)
    {
      uint64_t v16 = *(void *)v7;
      int v17 = *(_DWORD *)(v7 + 20);
      uint64_t v18 = v8;
      do
      {
        uint64_t v19 = a1 + v18;
        uint64_t v20 = *(void *)(a1 + v18 + 56);
        *(void *)(v19 + 72) = *(void *)(a1 + v18 + 48);
        *(void *)(v19 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v20;
        *(void *)(v19 + 85) = *(void *)(a1 + v18 + 61);
        if (v18 == -48)
        {
          uint64_t v10 = a1;
          goto LABEL_6;
        }
        int v21 = *(_DWORD *)(v19 + 40);
        BOOL v14 = v12 == v21;
        BOOL v22 = v12 > v21;
        if (v14) {
          BOOL v22 = v11 < *(double *)(v19 + 32);
        }
        v18 -= 24;
      }
      while (v22);
      uint64_t v10 = a1 + v18 + 72;
LABEL_6:
      *(void *)uint64_t v10 = v16;
      *(double *)(v19 + 56) = v11;
      *(_DWORD *)(v10 + 16) = v12;
      *(unsigned char *)(v10 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v17;
      if (++v9 == 8) {
        return v7 + 24 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 24;
    v7 += 24;
    if (v7 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_0 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  uint64_t v8 = (void *)(a4 + 8);
  result.n128_u64[0] = *(void *)(a4 + 8);
  int v10 = *(_DWORD *)(a4 + 16);
  double v11 = (long long *)(a3 + 8);
  int v12 = *(_DWORD *)(a3 + 16);
  BOOL v13 = v10 == v12;
  BOOL v14 = v10 > v12;
  if (v13) {
    BOOL v14 = result.n128_f64[0] < *(double *)(a3 + 8);
  }
  if (v14)
  {
    uint64_t v15 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v15;
    long long v27 = *v11;
    uint64_t v16 = *(void *)(a4 + 13);
    *(void *)double v11 = *v8;
    *(void *)(a3 + 13) = v16;
    *(void *)(a4 + 13) = *(void *)((char *)&v27 + 5);
    *uint64_t v8 = v27;
    result.n128_u64[0] = *(void *)(a3 + 8);
    LODWORD(v16) = *(_DWORD *)(a3 + 16);
    int v17 = (long long *)(a2 + 8);
    int v18 = *(_DWORD *)(a2 + 16);
    BOOL v13 = v16 == v18;
    BOOL v19 = (int)v16 > v18;
    if (v13) {
      BOOL v19 = result.n128_f64[0] < *(double *)(a2 + 8);
    }
    if (v19)
    {
      uint64_t v20 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v20;
      long long v28 = *v17;
      uint64_t v21 = *(void *)(a3 + 13);
      *(void *)int v17 = *(void *)v11;
      *(void *)(a2 + 13) = v21;
      *(void *)(a3 + 13) = *(void *)((char *)&v28 + 5);
      *(void *)double v11 = v28;
      result.n128_u64[0] = *(void *)(a2 + 8);
      LODWORD(v21) = *(_DWORD *)(a2 + 16);
      BOOL v22 = (__n128 *)(a1 + 8);
      int v23 = *(_DWORD *)(a1 + 16);
      BOOL v13 = v21 == v23;
      BOOL v24 = (int)v21 > v23;
      if (v13) {
        BOOL v24 = result.n128_f64[0] < *(double *)(a1 + 8);
      }
      if (v24)
      {
        uint64_t v25 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v25;
        __n128 result = *v22;
        __n128 v29 = *v22;
        uint64_t v26 = *(void *)(a2 + 13);
        v22->n128_u64[0] = *(void *)v17;
        *(void *)(a1 + 13) = v26;
        *(void *)(a2 + 13) = *(unint64_t *)((char *)v29.n128_u64 + 5);
        *(void *)int v17 = v29.n128_u64[0];
      }
    }
  }
  return result;
}

double std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - v11;
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                BOOL v74 = (unint64_t *)(a2 - 16);
                a5.n128_u64[0] = *(void *)(a2 - 16);
                double v75 = (__n128 *)(v11 + 8);
                double v76 = *(double *)(v11 + 8);
                BOOL v77 = *(_DWORD *)(a2 - 8) > *(_DWORD *)(v11 + 16);
                if (a5.n128_f64[0] != v76) {
                  BOOL v77 = a5.n128_f64[0] < v76;
                }
                if (v77)
                {
                  uint64_t v78 = *(void *)v11;
                  *(void *)unint64_t v11 = *(void *)(a2 - 24);
                  *(void *)(a2 - 24) = v78;
                  a5 = *v75;
                  __n128 v159 = *v75;
                  unint64_t v79 = *v74;
                  *(void *)(v11 + 13) = *(void *)(a2 - 11);
                  v75->n128_u64[0] = v79;
                  *(void *)(a2 - 11) = *(unint64_t *)((char *)v159.n128_u64 + 5);
                  *BOOL v74 = v159.n128_u64[0];
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)v11, (uint64_t *)(v11 + 24), (uint64_t *)(a2 - 24));
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v11, v11 + 24, v11 + 48, a2 - 24).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(v11, v11 + 24, v11 + 48, v11 + 72, a2 - 24).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v12 <= 575)
          {
            int v80 = (void *)(v11 + 24);
            BOOL v82 = v11 == a2 || v80 == (void *)a2;
            if (a4)
            {
              if (!v82)
              {
                uint64_t v83 = 0;
                uint64_t v84 = (void *)v11;
                do
                {
                  uint64_t v86 = v80;
                  a5.n128_u64[0] = v84[4];
                  int v87 = *((_DWORD *)v84 + 10);
                  double v88 = *((double *)v84 + 1);
                  BOOL v89 = v87 > *((_DWORD *)v84 + 4);
                  if (a5.n128_f64[0] != v88) {
                    BOOL v89 = a5.n128_f64[0] < v88;
                  }
                  if (v89)
                  {
                    uint64_t v90 = *v86;
                    int v91 = *((_DWORD *)v84 + 11);
                    uint64_t v92 = v83;
                    do
                    {
                      int v93 = (void *)(v11 + v92);
                      uint64_t v94 = *(void *)(v11 + v92 + 8);
                      v93[3] = *(void *)(v11 + v92);
                      v93[4] = v94;
                      *(void *)((char *)v93 + 37) = *(void *)(v11 + v92 + 13);
                      if (!v92)
                      {
                        uint64_t v85 = v11;
                        goto LABEL_103;
                      }
                      double v95 = *((double *)v93 - 2);
                      BOOL v96 = v87 > *((_DWORD *)v93 - 2);
                      if (a5.n128_f64[0] != v95) {
                        BOOL v96 = a5.n128_f64[0] < v95;
                      }
                      v92 -= 24;
                    }
                    while (v96);
                    uint64_t v85 = v11 + v92 + 24;
LABEL_103:
                    *(void *)uint64_t v85 = v90;
                    v93[1] = a5.n128_u64[0];
                    *(_DWORD *)(v85 + 16) = v87;
                    *(unsigned char *)(v85 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v91;
                  }
                  int v80 = v86 + 3;
                  v83 += 24;
                  uint64_t v84 = v86;
                }
                while (v86 + 3 != (void *)a2);
              }
            }
            else if (!v82)
            {
              int v145 = (unsigned char *)(v11 + 44);
              do
              {
                BOOL v146 = v80;
                a5.n128_u64[0] = *(void *)(a1 + 32);
                int v147 = *(_DWORD *)(a1 + 40);
                double v148 = *(double *)(a1 + 8);
                BOOL v149 = v147 > *(_DWORD *)(a1 + 16);
                if (a5.n128_f64[0] != v148) {
                  BOOL v149 = a5.n128_f64[0] < v148;
                }
                if (v149)
                {
                  uint64_t v150 = *v146;
                  int v151 = *(_DWORD *)(a1 + 44);
                  BOOL v152 = v145;
                  do
                  {
                    *(void *)(v152 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(void *)(v152 - 44);
                    *(void *)(v152 - 12) = *(void *)(v152 - 36);
                    *(void *)(v152 - 7) = *(void *)(v152 - 31);
                    double v153 = *(double *)(v152 - 60);
                    BOOL v154 = v147 > *((_DWORD *)v152 - 13);
                    if (a5.n128_f64[0] != v153) {
                      BOOL v154 = a5.n128_f64[0] < v153;
                    }
                    v152 -= 24;
                  }
                  while (v154);
                  *(void *)(v152 - 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v150;
                  *(void *)(v152 - 12) = a5.n128_u64[0];
                  *((_DWORD *)v152 - 1) = v147;
                  *BOOL v152 = v151;
                }
                int v80 = v146 + 3;
                v145 += 24;
                a1 = (unint64_t)v146;
              }
              while (v146 + 3 != (uint64_t *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v97 = (v13 - 2) >> 1;
              int64_t v98 = v97;
              do
              {
                int64_t v99 = v98;
                if (v97 >= v98)
                {
                  uint64_t v100 = (2 * v98) | 1;
                  unint64_t v101 = v11 + 24 * v100;
                  if (2 * v99 + 2 < (uint64_t)v13)
                  {
                    double v102 = *(double *)(v101 + 8);
                    double v103 = *(double *)(v101 + 32);
                    BOOL v104 = *(_DWORD *)(v101 + 16) > *(_DWORD *)(v101 + 40);
                    if (v102 != v103) {
                      BOOL v104 = v102 < v103;
                    }
                    v101 += 24 * v104;
                    if (v104) {
                      uint64_t v100 = 2 * v99 + 2;
                    }
                  }
                  unint64_t v105 = v11 + 24 * v99;
                  double v106 = *(double *)(v101 + 8);
                  a5.n128_u64[0] = *(void *)(v105 + 8);
                  int v107 = *(_DWORD *)(v105 + 16);
                  BOOL v108 = *(_DWORD *)(v101 + 16) > v107;
                  if (v106 != a5.n128_f64[0]) {
                    BOOL v108 = v106 < a5.n128_f64[0];
                  }
                  if (!v108)
                  {
                    uint64_t v109 = *(void *)v105;
                    int v110 = *(_DWORD *)(v105 + 20);
                    do
                    {
                      int v113 = (void *)v105;
                      unint64_t v105 = v101;
                      void *v113 = *(void *)v101;
                      uint64_t v114 = *(void *)(v101 + 8);
                      *(void *)((char *)v113 + 13) = *(void *)(v105 + 13);
                      v113[1] = v114;
                      if (v97 < v100) {
                        break;
                      }
                      uint64_t v115 = (2 * v100) | 1;
                      unint64_t v101 = v11 + 24 * v115;
                      uint64_t v116 = 2 * v100 + 2;
                      if (v116 < (uint64_t)v13)
                      {
                        double v117 = *(double *)(v101 + 8);
                        double v118 = *(double *)(v101 + 32);
                        BOOL v119 = *(_DWORD *)(v101 + 16) > *(_DWORD *)(v101 + 40);
                        if (v117 != v118) {
                          BOOL v119 = v117 < v118;
                        }
                        v101 += 24 * v119;
                        if (v119) {
                          uint64_t v115 = v116;
                        }
                      }
                      double v111 = *(double *)(v101 + 8);
                      BOOL v112 = v111 < a5.n128_f64[0];
                      if (v111 == a5.n128_f64[0]) {
                        BOOL v112 = *(_DWORD *)(v101 + 16) > v107;
                      }
                      uint64_t v100 = v115;
                    }
                    while (!v112);
                    *(void *)unint64_t v105 = v109;
                    *(void *)(v105 + 8) = a5.n128_u64[0];
                    *(_DWORD *)(v105 + 16) = v107;
                    *(unsigned char *)(v105 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v110;
                  }
                }
                int64_t v98 = v99 - 1;
              }
              while (v99);
              int64_t v120 = v12 / 0x18uLL;
              do
              {
                uint64_t v122 = 0;
                uint64_t v123 = *(void *)v11;
                *(void *)std::string v160 = *(void *)(v11 + 8);
                *(void *)&v160[5] = *(void *)(v11 + 13);
                int v124 = (void *)v11;
                do
                {
                  uint64_t v127 = (uint64_t)&v124[3 * v122 + 3];
                  uint64_t v128 = (2 * v122) | 1;
                  uint64_t v129 = 2 * v122 + 2;
                  if (v129 < v120)
                  {
                    a5.n128_u64[0] = v124[3 * v122 + 4];
                    double v130 = *(double *)&v124[3 * v122 + 7];
                    BOOL v131 = SLODWORD(v124[3 * v122 + 5]) > SLODWORD(v124[3 * v122 + 8]);
                    if (a5.n128_f64[0] != v130) {
                      BOOL v131 = a5.n128_f64[0] < v130;
                    }
                    v127 += 24 * v131;
                    if (v131) {
                      uint64_t v128 = v129;
                    }
                  }
                  *int v124 = *(void *)v127;
                  BOOL v126 = (void *)(v127 + 8);
                  uint64_t v125 = *(void *)(v127 + 8);
                  *(void *)((char *)v124 + 13) = *(void *)(v127 + 13);
                  v124[1] = v125;
                  int v124 = (void *)v127;
                  uint64_t v122 = v128;
                }
                while (v128 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
                if (v127 == a2 - 24)
                {
                  *(void *)uint64_t v127 = v123;
                  *(void *)(v127 + 13) = *(void *)&v160[5];
                  void *v126 = *(void *)v160;
                }
                else
                {
                  *(void *)uint64_t v127 = *(void *)(a2 - 24);
                  uint64_t v132 = *(void *)(a2 - 16);
                  *(void *)(v127 + 13) = *(void *)(a2 - 11);
                  void *v126 = v132;
                  *(void *)(a2 - 24) = v123;
                  *(void *)(a2 - 11) = *(void *)&v160[5];
                  *(void *)(a2 - 16) = *(void *)v160;
                  uint64_t v133 = v127 - v11 + 24;
                  if (v133 >= 25)
                  {
                    unint64_t v134 = (v133 / 0x18uLL - 2) >> 1;
                    uint64_t v135 = v11 + 24 * v134;
                    double v136 = *(double *)(v135 + 8);
                    a5.n128_u64[0] = *(void *)(v127 + 8);
                    int v137 = *(_DWORD *)(v127 + 16);
                    BOOL v138 = *(_DWORD *)(v135 + 16) > v137;
                    if (v136 != a5.n128_f64[0]) {
                      BOOL v138 = v136 < a5.n128_f64[0];
                    }
                    if (v138)
                    {
                      uint64_t v139 = *(void *)v127;
                      int v140 = *(_DWORD *)(v127 + 20);
                      do
                      {
                        uint64_t v141 = (void *)v127;
                        uint64_t v127 = v135;
                        *uint64_t v141 = *(void *)v135;
                        uint64_t v142 = *(void *)(v135 + 8);
                        *(void *)((char *)v141 + 13) = *(void *)(v127 + 13);
                        v141[1] = v142;
                        if (!v134) {
                          break;
                        }
                        unint64_t v134 = (v134 - 1) >> 1;
                        uint64_t v135 = v11 + 24 * v134;
                        double v143 = *(double *)(v135 + 8);
                        BOOL v144 = *(_DWORD *)(v135 + 16) > v137;
                        if (v143 != a5.n128_f64[0]) {
                          BOOL v144 = v143 < a5.n128_f64[0];
                        }
                      }
                      while (v144);
                      *(void *)uint64_t v127 = v139;
                      *(void *)(v127 + 8) = a5.n128_u64[0];
                      *(_DWORD *)(v127 + 16) = v137;
                      *(unsigned char *)(v127 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v140;
                    }
                  }
                }
                a2 -= 24;
              }
              while (v120-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = (uint64_t *)(v11 + 24 * (v13 >> 1));
          if ((unint64_t)v12 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24 * (v13 >> 1)), (uint64_t *)(a2 - 24));
            unint64_t v16 = a1 + 24 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24), (uint64_t *)(v16 - 24), (uint64_t *)(a2 - 48));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 24 + 24 * v14), (uint64_t *)(a2 - 72));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(v16 - 24), v15, (uint64_t *)(a1 + 24 + 24 * v14));
            uint64_t v17 = *(void *)a1;
            *(void *)a1 = *v15;
            *uint64_t v15 = v17;
            long long v156 = *(_OWORD *)(a1 + 8);
            uint64_t v18 = *(void *)(v16 + 13);
            *(void *)(a1 + 8) = *(void *)(v16 + 8);
            *(void *)(a1 + 13) = v18;
            *(void *)(v16 + 13) = *(void *)((char *)&v156 + 5);
            *(void *)(v16 + 8) = v156;
            --a3;
            if (a4) {
              goto LABEL_21;
            }
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)(a1 + 24 * (v13 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
            --a3;
            if (a4)
            {
LABEL_21:
              a5.n128_u64[0] = *(void *)(a1 + 8);
              int v20 = *(_DWORD *)(a1 + 16);
              break;
            }
          }
          double v19 = *(double *)(a1 - 16);
          a5.n128_u64[0] = *(void *)(a1 + 8);
          int v20 = *(_DWORD *)(a1 + 16);
          BOOL v21 = *(_DWORD *)(a1 - 8) > v20;
          if (v19 != a5.n128_f64[0]) {
            BOOL v21 = v19 < a5.n128_f64[0];
          }
          if (v21) {
            break;
          }
          double v22 = *(double *)(a2 - 16);
          BOOL v23 = v20 > *(_DWORD *)(a2 - 8);
          if (a5.n128_f64[0] != v22) {
            BOOL v23 = a5.n128_f64[0] < v22;
          }
          if (v23)
          {
            unint64_t v24 = a1;
            do
            {
              unint64_t v11 = v24 + 24;
              double v25 = *(double *)(v24 + 32);
              BOOL v26 = v20 > *(_DWORD *)(v24 + 40);
              BOOL v27 = a5.n128_f64[0] < v25;
              if (a5.n128_f64[0] == v25) {
                BOOL v27 = v26;
              }
              unint64_t v24 = v11;
            }
            while (!v27);
          }
          else
          {
            unint64_t v54 = a1 + 24;
            do
            {
              unint64_t v11 = v54;
              if (v54 >= a2) {
                break;
              }
              double v55 = *(double *)(v54 + 8);
              BOOL v56 = v20 > *(_DWORD *)(v54 + 16);
              BOOL v57 = a5.n128_f64[0] < v55;
              if (a5.n128_f64[0] == v55) {
                BOOL v57 = v56;
              }
              unint64_t v54 = v11 + 24;
            }
            while (!v57);
          }
          double v58 = (double *)a2;
          if (v11 < a2)
          {
            int v59 = (double *)a2;
            do
            {
              double v58 = v59 - 3;
              double v60 = *(v59 - 2);
              BOOL v61 = v20 > *((_DWORD *)v59 - 2);
              BOOL v62 = a5.n128_f64[0] < v60;
              if (a5.n128_f64[0] == v60) {
                BOOL v62 = v61;
              }
              int v59 = v58;
            }
            while (v62);
          }
          uint64_t v63 = *(void *)a1;
          int v64 = *(_DWORD *)(a1 + 20);
          while (v11 < (unint64_t)v58)
          {
            uint64_t v65 = *(void *)v11;
            *(double *)unint64_t v11 = *v58;
            *(void *)double v58 = v65;
            long long v158 = *(_OWORD *)(v11 + 8);
            uint64_t v66 = *(void *)((char *)v58 + 13);
            *(double *)(v11 + 8) = v58[1];
            *(void *)(v11 + 13) = v66;
            *((void *)v58 + 1) = v158;
            *(double *)((char *)v58 + 13) = *(double *)((char *)&v158 + 5);
            do
            {
              double v67 = *(double *)(v11 + 32);
              int v68 = *(_DWORD *)(v11 + 40);
              v11 += 24;
              BOOL v69 = v20 > v68;
              if (a5.n128_f64[0] != v67) {
                BOOL v69 = a5.n128_f64[0] < v67;
              }
            }
            while (!v69);
            do
            {
              double v70 = *(v58 - 2);
              int v71 = *((_DWORD *)v58 - 2);
              v58 -= 3;
              BOOL v72 = v20 > v71;
              if (a5.n128_f64[0] != v70) {
                BOOL v72 = a5.n128_f64[0] < v70;
              }
            }
            while (v72);
          }
          BOOL v5 = v11 - 24 >= a1;
          BOOL v6 = v11 - 24 == a1;
          if (v11 - 24 != a1)
          {
            *(void *)a1 = *(void *)(v11 - 24);
            uint64_t v73 = *(void *)(v11 - 16);
            *(void *)(a1 + 13) = *(void *)(v11 - 11);
            *(void *)(a1 + 8) = v73;
          }
          a4 = 0;
          *(void *)(v11 - 24) = v63;
          *(void *)(v11 - 16) = a5.n128_u64[0];
          *(_DWORD *)(v11 - 8) = v20;
          *(unsigned char *)(v11 - 4) = v64;
        }
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)a1;
        int v30 = *(_DWORD *)(a1 + 20);
        do
        {
          double v31 = *(double *)(a1 + v28 + 32);
          BOOL v32 = *(_DWORD *)(a1 + v28 + 40) > v20;
          if (v31 != a5.n128_f64[0]) {
            BOOL v32 = v31 < a5.n128_f64[0];
          }
          v28 += 24;
        }
        while (v32);
        unint64_t v33 = a1 + v28;
        unint64_t v34 = a2;
        if (v28 == 24)
        {
          unint64_t v39 = a2;
          while (v33 < v39)
          {
            long long v35 = (uint64_t *)(v39 - 24);
            double v40 = *(double *)(v39 - 16);
            BOOL v41 = *(_DWORD *)(v39 - 8) > v20;
            BOOL v42 = v40 < a5.n128_f64[0];
            if (v40 == a5.n128_f64[0]) {
              BOOL v42 = v41;
            }
            unint64_t v39 = (unint64_t)v35;
            if (v42) {
              goto LABEL_36;
            }
          }
          long long v35 = (uint64_t *)v39;
          unint64_t v11 = v33;
        }
        else
        {
          do
          {
            long long v35 = (uint64_t *)(v34 - 24);
            double v36 = *(double *)(v34 - 16);
            BOOL v37 = *(_DWORD *)(v34 - 8) > v20;
            BOOL v38 = v36 < a5.n128_f64[0];
            if (v36 == a5.n128_f64[0]) {
              BOOL v38 = v37;
            }
            unint64_t v34 = (unint64_t)v35;
          }
          while (!v38);
LABEL_36:
          unint64_t v11 = v33;
          if (v33 < (unint64_t)v35)
          {
            int v43 = v35;
            do
            {
              uint64_t v44 = *(void *)v11;
              *(void *)unint64_t v11 = *v43;
              *int v43 = v44;
              long long v157 = *(_OWORD *)(v11 + 8);
              uint64_t v45 = *(uint64_t *)((char *)v43 + 13);
              *(void *)(v11 + 8) = v43[1];
              *(void *)(v11 + 13) = v45;
              v43[1] = v157;
              *(uint64_t *)((char *)v43 + 13) = *(void *)((char *)&v157 + 5);
              do
              {
                double v46 = *(double *)(v11 + 32);
                int v47 = *(_DWORD *)(v11 + 40);
                v11 += 24;
                BOOL v48 = v47 > v20;
                if (v46 != a5.n128_f64[0]) {
                  BOOL v48 = v46 < a5.n128_f64[0];
                }
              }
              while (v48);
              do
              {
                double v49 = *((double *)v43 - 2);
                int v50 = *((_DWORD *)v43 - 2);
                v43 -= 3;
                BOOL v51 = v50 > v20;
                if (v49 != a5.n128_f64[0]) {
                  BOOL v51 = v49 < a5.n128_f64[0];
                }
              }
              while (!v51);
            }
            while (v11 < (unint64_t)v43);
          }
        }
        if (v11 - 24 != a1)
        {
          *(void *)a1 = *(void *)(v11 - 24);
          uint64_t v52 = *(void *)(v11 - 16);
          *(void *)(a1 + 13) = *(void *)(v11 - 11);
          *(void *)(a1 + 8) = v52;
        }
        *(void *)(v11 - 24) = v29;
        *(void *)(v11 - 16) = a5.n128_u64[0];
        *(_DWORD *)(v11 - 8) = v20;
        *(unsigned char *)(v11 - 4) = v30;
        if (v33 >= (unint64_t)v35) {
          break;
        }
LABEL_51:
        std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,false>(a1, v11 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, v11 - 24);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(v11, a2))
      {
        break;
      }
      if (!v53) {
        goto LABEL_51;
      }
    }
    a2 = v11 - 24;
    if (!v53) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a2, a3, a4);
  int v10 = (void *)(a5 + 8);
  result.n128_u64[0] = *(void *)(a5 + 8);
  uint64_t v12 = (long long *)(a4 + 8);
  double v13 = *(double *)(a4 + 8);
  BOOL v14 = *(_DWORD *)(a5 + 16) > *(_DWORD *)(a4 + 16);
  if (result.n128_f64[0] != v13) {
    BOOL v14 = result.n128_f64[0] < v13;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v15;
    long long v32 = *v12;
    uint64_t v16 = *(void *)(a5 + 13);
    *(void *)uint64_t v12 = *v10;
    *(void *)(a4 + 13) = v16;
    *(void *)(a5 + 13) = *(void *)((char *)&v32 + 5);
    *int v10 = v32;
    result.n128_u64[0] = *(void *)(a4 + 8);
    uint64_t v17 = (long long *)(a3 + 8);
    double v18 = *(double *)(a3 + 8);
    BOOL v19 = *(_DWORD *)(a4 + 16) > *(_DWORD *)(a3 + 16);
    if (result.n128_f64[0] != v18) {
      BOOL v19 = result.n128_f64[0] < v18;
    }
    if (v19)
    {
      uint64_t v20 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v20;
      long long v33 = *v17;
      uint64_t v21 = *(void *)(a4 + 13);
      *(void *)uint64_t v17 = *(void *)v12;
      *(void *)(a3 + 13) = v21;
      *(void *)(a4 + 13) = *(void *)((char *)&v33 + 5);
      *(void *)uint64_t v12 = v33;
      result.n128_u64[0] = *(void *)(a3 + 8);
      double v22 = (long long *)(a2 + 8);
      double v23 = *(double *)(a2 + 8);
      BOOL v24 = *(_DWORD *)(a3 + 16) > *(_DWORD *)(a2 + 16);
      if (result.n128_f64[0] != v23) {
        BOOL v24 = result.n128_f64[0] < v23;
      }
      if (v24)
      {
        uint64_t v25 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v25;
        long long v34 = *v22;
        uint64_t v26 = *(void *)(a3 + 13);
        *(void *)double v22 = *(void *)v17;
        *(void *)(a2 + 13) = v26;
        *(void *)(a3 + 13) = *(void *)((char *)&v34 + 5);
        *(void *)uint64_t v17 = v34;
        result.n128_u64[0] = *(void *)(a2 + 8);
        BOOL v27 = (__n128 *)(a1 + 8);
        double v28 = *(double *)(a1 + 8);
        BOOL v29 = *(_DWORD *)(a2 + 16) > *(_DWORD *)(a1 + 16);
        if (result.n128_f64[0] != v28) {
          BOOL v29 = result.n128_f64[0] < v28;
        }
        if (v29)
        {
          uint64_t v30 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v30;
          __n128 result = *v27;
          __n128 v35 = *v27;
          uint64_t v31 = *(void *)(a2 + 13);
          v27->n128_u64[0] = *(void *)v22;
          *(void *)(a1 + 13) = v31;
          *(void *)(a2 + 13) = *(unint64_t *)((char *)v35.n128_u64 + 5);
          *(void *)double v22 = v35.n128_u64[0];
        }
      }
    }
  }
  return result;
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = a2 + 1;
  double v4 = *((double *)a2 + 1);
  int v5 = *((_DWORD *)a2 + 4);
  BOOL v6 = (long long *)(result + 1);
  double v7 = *((double *)result + 1);
  if (v4 == v7) {
    BOOL v8 = v5 > *((_DWORD *)result + 4);
  }
  else {
    BOOL v8 = v4 < v7;
  }
  int v9 = a3 + 1;
  double v10 = *((double *)a3 + 1);
  BOOL v11 = *((_DWORD *)a3 + 4) > v5;
  BOOL v12 = v10 < v4;
  if (v10 == v4) {
    BOOL v12 = v11;
  }
  if (v8)
  {
    double v13 = *(double *)result;
    if (v12)
    {
      *__n128 result = *a3;
      *(double *)a3 = v13;
      long long v28 = *v6;
      uint64_t v14 = *(uint64_t *)((char *)a3 + 13);
      *(void *)BOOL v6 = *v9;
      *(uint64_t *)((char *)result + 13) = v14;
LABEL_18:
      *(uint64_t *)((char *)a3 + 13) = *(void *)((char *)&v28 + 5);
      *int v9 = v28;
      return result;
    }
    *__n128 result = *a2;
    *(double *)a2 = v13;
    long long v31 = *v6;
    uint64_t v22 = *(uint64_t *)((char *)a2 + 13);
    *(void *)BOOL v6 = *v3;
    *(uint64_t *)((char *)result + 13) = v22;
    *(uint64_t *)((char *)a2 + 13) = *(void *)((char *)&v31 + 5);
    void *v3 = v31;
    double v23 = *((double *)a3 + 1);
    double v24 = *((double *)a2 + 1);
    BOOL v25 = *((_DWORD *)a3 + 4) > *((_DWORD *)a2 + 4);
    if (v23 != v24) {
      BOOL v25 = v23 < v24;
    }
    if (v25)
    {
      double v26 = *(double *)a2;
      *a2 = *a3;
      *(double *)a3 = v26;
      long long v28 = *(_OWORD *)v3;
      uint64_t v27 = *(uint64_t *)((char *)a3 + 13);
      void *v3 = *v9;
      *(uint64_t *)((char *)a2 + 13) = v27;
      goto LABEL_18;
    }
  }
  else if (v12)
  {
    double v15 = *(double *)a2;
    *a2 = *a3;
    *(double *)a3 = v15;
    long long v29 = *(_OWORD *)v3;
    uint64_t v16 = *(uint64_t *)((char *)a3 + 13);
    void *v3 = *v9;
    *(uint64_t *)((char *)a2 + 13) = v16;
    *(uint64_t *)((char *)a3 + 13) = *(void *)((char *)&v29 + 5);
    *int v9 = v29;
    double v17 = *((double *)a2 + 1);
    double v18 = *((double *)result + 1);
    BOOL v19 = *((_DWORD *)a2 + 4) > *((_DWORD *)result + 4);
    if (v17 != v18) {
      BOOL v19 = v17 < v18;
    }
    if (v19)
    {
      double v20 = *(double *)result;
      *__n128 result = *a2;
      *(double *)a2 = v20;
      long long v30 = *v6;
      uint64_t v21 = *(uint64_t *)((char *)a2 + 13);
      *(void *)BOOL v6 = *v3;
      *(uint64_t *)((char *)result + 13) = v21;
      *(uint64_t *)((char *)a2 + 13) = *(void *)((char *)&v30 + 5);
      void *v3 = v30;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v22 = (void *)(a2 - 16);
      double v23 = *(double *)(a2 - 16);
      double v24 = (long long *)(a1 + 8);
      double v25 = *(double *)(a1 + 8);
      BOOL v26 = *(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 16);
      if (v23 != v25) {
        BOOL v26 = v23 < v25;
      }
      if (v26)
      {
        uint64_t v27 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 24);
        *(void *)(a2 - 24) = v27;
        long long v29 = *v24;
        uint64_t v28 = *(void *)(a2 - 11);
        *(void *)double v24 = *v22;
        *(void *)(a1 + 13) = v28;
        *(void *)(a2 - 11) = *(void *)((char *)&v29 + 5);
        *uint64_t v22 = v29;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *,0>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      uint64_t v6 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      uint64_t v7 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    double v11 = *(double *)(v7 + 8);
    int v12 = *(_DWORD *)(v7 + 16);
    double v13 = *(double *)(v6 + 8);
    BOOL v14 = v12 > *(_DWORD *)(v6 + 16);
    if (v11 != v13) {
      BOOL v14 = v11 < v13;
    }
    if (v14)
    {
      uint64_t v15 = *(void *)v7;
      int v16 = *(_DWORD *)(v7 + 20);
      uint64_t v17 = v8;
      do
      {
        uint64_t v18 = a1 + v17;
        uint64_t v19 = *(void *)(a1 + v17 + 56);
        *(void *)(v18 + 72) = *(void *)(a1 + v17 + 48);
        *(void *)(v18 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v19;
        *(void *)(v18 + 85) = *(void *)(a1 + v17 + 61);
        if (v17 == -48)
        {
          uint64_t v10 = a1;
          goto LABEL_6;
        }
        double v20 = *(double *)(v18 + 32);
        BOOL v21 = v12 > *(_DWORD *)(v18 + 40);
        if (v11 != v20) {
          BOOL v21 = v11 < v20;
        }
        v17 -= 24;
      }
      while (v21);
      uint64_t v10 = a1 + v17 + 72;
LABEL_6:
      *(void *)uint64_t v10 = v15;
      *(double *)(v18 + 56) = v11;
      *(_DWORD *)(v10 + 16) = v12;
      *(unsigned char *)(v10 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v16;
      if (++v9 == 8) {
        return v7 + 24 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 24;
    v7 += 24;
    if (v7 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatSolver::CleanClauseDatabaseIfNeeded(void)::$_1 &,std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  uint64_t v8 = (void *)(a4 + 8);
  result.n128_u64[0] = *(void *)(a4 + 8);
  uint64_t v10 = (long long *)(a3 + 8);
  double v11 = *(double *)(a3 + 8);
  BOOL v12 = *(_DWORD *)(a4 + 16) > *(_DWORD *)(a3 + 16);
  if (result.n128_f64[0] != v11) {
    BOOL v12 = result.n128_f64[0] < v11;
  }
  if (v12)
  {
    uint64_t v13 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v13;
    long long v25 = *v10;
    uint64_t v14 = *(void *)(a4 + 13);
    *(void *)uint64_t v10 = *v8;
    *(void *)(a3 + 13) = v14;
    *(void *)(a4 + 13) = *(void *)((char *)&v25 + 5);
    *uint64_t v8 = v25;
    result.n128_u64[0] = *(void *)(a3 + 8);
    uint64_t v15 = (long long *)(a2 + 8);
    double v16 = *(double *)(a2 + 8);
    BOOL v17 = *(_DWORD *)(a3 + 16) > *(_DWORD *)(a2 + 16);
    if (result.n128_f64[0] != v16) {
      BOOL v17 = result.n128_f64[0] < v16;
    }
    if (v17)
    {
      uint64_t v18 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      long long v26 = *v15;
      uint64_t v19 = *(void *)(a3 + 13);
      *(void *)uint64_t v15 = *(void *)v10;
      *(void *)(a2 + 13) = v19;
      *(void *)(a3 + 13) = *(void *)((char *)&v26 + 5);
      *(void *)uint64_t v10 = v26;
      result.n128_u64[0] = *(void *)(a2 + 8);
      double v20 = (__n128 *)(a1 + 8);
      double v21 = *(double *)(a1 + 8);
      BOOL v22 = *(_DWORD *)(a2 + 16) > *(_DWORD *)(a1 + 16);
      if (result.n128_f64[0] != v21) {
        BOOL v22 = result.n128_f64[0] < v21;
      }
      if (v22)
      {
        uint64_t v23 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v23;
        __n128 result = *v20;
        __n128 v27 = *v20;
        uint64_t v24 = *(void *)(a2 + 13);
        v20->n128_u64[0] = *(void *)v15;
        *(void *)(a1 + 13) = v24;
        *(void *)(a2 + 13) = *(unint64_t *)((char *)v27.n128_u64 + 5);
        *(void *)uint64_t v15 = v27.n128_u64[0];
      }
    }
  }
  return result;
}

void std::vector<std::pair<operations_research::sat::SatClause *,operations_research::sat::ClauseInfo>>::__append(char **a1, unint64_t a2)
{
  int v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      double v11 = (char *)operator new(24 * v10);
    }
    else
    {
      double v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    double v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 24);
        *((void *)v13 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      int v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

operations_research::sat::SatPostsolver *operations_research::sat::SatPostsolver::SatPostsolver(operations_research::sat::SatPostsolver *this, int a2)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v4 = (int32x4_t **)((char *)this + 104);
  *((void *)this + 17) = 0;
  int v5 = (char *)this + 136;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 116) = 0u;
  *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = (char *)this + 128;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 42) = -1;
  if (a2)
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 104), a2);
    if (a2 >= 1)
    {
      uint64_t v6 = *v4;
      if (a2 < 8)
      {
        uint64_t v7 = 0;
        do
        {
LABEL_8:
          v6->i32[v7] = v7;
          ++v7;
        }
        while (a2 != v7);
        goto LABEL_9;
      }
      uint64_t v7 = a2 & 0x7FFFFFF8;
      int32x4_t v8 = (int32x4_t)xmmword_23CE7EC40;
      unint64_t v9 = v6 + 1;
      v10.i64[0] = 0x400000004;
      v10.i64[1] = 0x400000004;
      v11.i64[0] = 0x800000008;
      v11.i64[1] = 0x800000008;
      uint64_t v12 = a2 & 0xFFFFFFF8;
      do
      {
        v9[-1] = v8;
        *unint64_t v9 = vaddq_s32(v8, v10);
        int32x4_t v8 = vaddq_s32(v8, v11);
        v9 += 2;
        v12 -= 8;
      }
      while (v12);
      if (v7 != a2) {
        goto LABEL_8;
      }
    }
  }
LABEL_9:
  int v13 = (2 * a2) & ~((2 * a2) >> 31);
  *((_DWORD *)this + 32) = v13;
  unint64_t v14 = (v13 + 63) >> 6;
  uint64_t v18 = 0;
  uint64_t v15 = *((void *)this + 17);
  unint64_t v16 = (*((void *)this + 18) - v15) >> 3;
  if (v14 <= v16)
  {
    if (v14 < v16) {
      *((void *)this + 18) = v15 + 8 * v14;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)v5, v14 - v16, &v18);
  }
  return this;
}

void sub_23CD8E060(_Unwind_Exception *a1)
{
  uint64_t v7 = *v4;
  if (*v4)
  {
    v1[18] = v7;
    operator delete(v7);
    int32x4_t v8 = *v3;
    if (!*v3)
    {
LABEL_3:
      unint64_t v9 = (void *)v1[10];
      if (!v9) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    int32x4_t v8 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[14] = v8;
  operator delete(v8);
  unint64_t v9 = (void *)v1[10];
  if (!v9)
  {
LABEL_4:
    std::deque<int>::~deque[abi:ne180100](v2);
    int32x4_t v10 = *v5;
    if (!*v5) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[11] = v9;
  operator delete(v9);
  std::deque<int>::~deque[abi:ne180100](v2);
  int32x4_t v10 = *v5;
  if (!*v5) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  v1[2] = v10;
  operator delete(v10);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatPostsolver::Add(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  int v7 = operations_research::sat::SatPostsolver::ApplyReverseMapping(a1, a2);
  int v8 = v7;
  int32x4_t v10 = *(char **)(a1 + 88);
  unint64_t v9 = *(void *)(a1 + 96);
  int32x4_t v11 = v10;
  if ((unint64_t)v10 < v9)
  {
    *(_DWORD *)int32x4_t v10 = v7;
    uint64_t v12 = (uint64_t)(v10 + 4);
    goto LABEL_22;
  }
  int v13 = *(char **)(a1 + 80);
  uint64_t v14 = (v10 - v13) >> 2;
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = v9 - (void)v13;
  if (v16 >> 1 > v15) {
    unint64_t v15 = v16 >> 1;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 62) {
      goto LABEL_52;
    }
    uint64_t v18 = operator new(4 * v17);
    uint64_t v19 = &v18[4 * v14];
    double v20 = &v18[4 * v17];
    *uint64_t v19 = v8;
    uint64_t v12 = (uint64_t)(v19 + 1);
    int64_t v21 = v10 - v13;
    if (v10 == v13) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v18 = 0;
  uint64_t v19 = (_DWORD *)(4 * v14);
  double v20 = 0;
  *(_DWORD *)(4 * v14) = v8;
  uint64_t v12 = 4 * v14 + 4;
  int64_t v21 = v10 - v13;
  if (v10 != v13)
  {
LABEL_14:
    unint64_t v22 = v21 - 4;
    if (v22 < 0x2C) {
      goto LABEL_57;
    }
    if ((unint64_t)(v13 - v18) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v23 = (v22 >> 2) + 1;
    uint64_t v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    int32x4_t v11 = &v10[-v24];
    uint64_t v19 = (_DWORD *)((char *)v19 - v24);
    long long v25 = &v18[4 * v14 - 16];
    long long v26 = v10 - 16;
    uint64_t v27 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *long long v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 8;
    }
    while (v27);
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        int v29 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *--uint64_t v19 = v29;
      }
      while (v11 != v13);
    }
  }
LABEL_20:
  *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v19;
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v20;
  if (v13) {
    operator delete(v13);
  }
LABEL_22:
  *(void *)(a1 + 88) = v12;
  int v30 = *(_DWORD *)(a1 + 72);
  long long v32 = *(char **)(a1 + 16);
  unint64_t v31 = *(void *)(a1 + 24);
  if ((unint64_t)v32 < v31)
  {
    *(_DWORD *)long long v32 = v30;
    uint64_t v33 = (uint64_t)(v32 + 4);
    goto LABEL_43;
  }
  long long v34 = *(char **)(a1 + 8);
  uint64_t v35 = (v32 - v34) >> 2;
  unint64_t v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v37 = v31 - (void)v34;
  if (v37 >> 1 > v36) {
    unint64_t v36 = v37 >> 1;
  }
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v38 = v36;
  }
  if (!v38)
  {
    unint64_t v39 = 0;
    double v40 = (_DWORD *)(4 * v35);
    BOOL v41 = 0;
    *(_DWORD *)(4 * v35) = v30;
    uint64_t v33 = 4 * v35 + 4;
    int64_t v42 = v32 - v34;
    if (v32 == v34) {
      goto LABEL_41;
    }
LABEL_35:
    unint64_t v43 = v42 - 4;
    if (v43 < 0x2C) {
      goto LABEL_58;
    }
    if ((unint64_t)(v34 - v39) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v44 = (v43 >> 2) + 1;
    uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
    double v46 = &v32[-v45];
    double v40 = (_DWORD *)((char *)v40 - v45);
    int v47 = &v39[4 * v35 - 16];
    BOOL v48 = v32 - 16;
    uint64_t v49 = v44 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v50 = *(_OWORD *)v48;
      *(v47 - 1) = *((_OWORD *)v48 - 1);
      *int v47 = v50;
      v47 -= 2;
      v48 -= 32;
      v49 -= 8;
    }
    while (v49);
    long long v32 = v46;
    if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_58:
      do
      {
        int v51 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *--double v40 = v51;
      }
      while (v32 != v34);
    }
    goto LABEL_41;
  }
  if (v38 >> 62) {
LABEL_52:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  unint64_t v39 = operator new(4 * v38);
  double v40 = &v39[4 * v35];
  BOOL v41 = &v39[4 * v38];
  *double v40 = v30;
  uint64_t v33 = (uint64_t)(v40 + 1);
  int64_t v42 = v32 - v34;
  if (v32 != v34) {
    goto LABEL_35;
  }
LABEL_41:
  *(void *)(a1 + 8) = v40;
  *(void *)(a1 + 16) = v33;
  *(void *)(a1 + 24) = v41;
  if (v34) {
    operator delete(v34);
  }
LABEL_43:
  *(void *)(a1 + 16) = v33;
  if (a4)
  {
    uint64_t v52 = 4 * a4;
    do
    {
      int v53 = operations_research::sat::SatPostsolver::ApplyReverseMapping(a1, *a3);
      uint64_t v54 = *(void *)(a1 + 48);
      uint64_t v55 = *(void *)(a1 + 40);
      if (v54 == v55) {
        uint64_t v56 = 0;
      }
      else {
        uint64_t v56 = ((v54 - v55) << 7) - 1;
      }
      uint64_t v57 = *(void *)(a1 + 72);
      unint64_t v58 = v57 + *(void *)(a1 + 64);
      if (v56 == v58)
      {
        std::deque<operations_research::sat::Literal>::__add_back_capacity(a1 + 32);
        uint64_t v55 = *(void *)(a1 + 40);
        uint64_t v57 = *(void *)(a1 + 72);
        unint64_t v58 = *(void *)(a1 + 64) + v57;
      }
      *(_DWORD *)(*(void *)(v55 + ((v58 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v58 & 0x3FF)) = v53;
      *(void *)(a1 + 72) = v57 + 1;
      ++a3;
      v52 -= 4;
    }
    while (v52);
  }
}

uint64_t operations_research::sat::SatPostsolver::ApplyReverseMapping(uint64_t a1, int a2)
{
  char v2 = a2;
  int v3 = a2 >> 1;
  uint64_t v4 = *(void *)(a1 + 104);
  int v5 = (uint64_t *)(a1 + 104);
  if (a2 >> 1 >= (int)((unint64_t)(*(void *)(a1 + 112) - v4) >> 2))
  {
    do
    {
      int v7 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v7 + 1;
      int v14 = v7;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)v5, &v14);
      uint64_t v4 = *(void *)(a1 + 104);
    }
    while (v3 >= (int)((unint64_t)(*(void *)(a1 + 112) - v4) >> 2));
    int v8 = (2 * *(_DWORD *)(a1 + 4)) & ~((2 * *(_DWORD *)(a1 + 4)) >> 31);
    *(_DWORD *)(a1 + 128) = v8;
    uint64_t v9 = *(void *)(a1 + 136);
    uint64_t v10 = *(void *)(a1 + 144);
    unint64_t v11 = (v8 + 63) >> 6;
    uint64_t v15 = 0;
    unint64_t v12 = (v10 - v9) >> 3;
    if (v11 <= v12)
    {
      if (v11 < v12) {
        *(void *)(a1 + 144) = v9 + 8 * v11;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 136, v11 - v12, &v15);
      uint64_t v4 = *v5;
    }
  }
  return v2 & 1 | (2 * *(_DWORD *)(v4 + 4 * v3));
}

void operations_research::sat::SatPostsolver::ApplyMapping(uint64_t a1, uint64_t *a2)
{
  memset(&v22, 0, sizeof(v22));
  uint64_t v4 = (void *)(a1 + 104);
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v7 = v5 - *a2;
  if (*(void *)(a1 + 112) - *(void *)(a1 + 104) < v7)
  {
    do
    {
      int v8 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v8 + 1;
      LODWORD(v23) = v8;
      gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)v4, &v23);
      uint64_t v6 = *a2;
      uint64_t v5 = a2[1];
    }
    while (*(void *)(a1 + 112) - *(void *)(a1 + 104) < (unint64_t)(v5 - *a2));
    int v9 = (2 * *(_DWORD *)(a1 + 4)) & ~((2 * *(_DWORD *)(a1 + 4)) >> 31);
    *(_DWORD *)(a1 + 128) = v9;
    uint64_t v10 = *(void *)(a1 + 136);
    uint64_t v11 = *(void *)(a1 + 144);
    unint64_t v12 = (v9 + 63) >> 6;
    uint64_t v23 = 0;
    unint64_t v13 = (v11 - v10) >> 3;
    if (v12 <= v13)
    {
      if (v12 < v13) {
        *(void *)(a1 + 144) = v10 + 8 * v12;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a1 + 136, v12 - v13, &v23);
      uint64_t v6 = *a2;
      uint64_t v5 = a2[1];
    }
    unint64_t v7 = v5 - v6;
  }
  if ((int)(v7 >> 2) < 1)
  {
    std::vector<int>::pointer begin = 0;
    long long v19 = 0uLL;
  }
  else
  {
    std::vector<int>::pointer begin = 0;
    std::vector<int>::pointer v15 = 0;
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = *(int *)(v6 + 4 * v16);
      if (v17 != -1)
      {
        unint64_t v18 = v22.__end_ - v15;
        if ((int)v17 >= (int)v18)
        {
          if (v17 + 1 <= v18)
          {
            if (v17 + 1 < v18) {
              v22.__end_ = &v15[v17 + 1];
            }
          }
          else
          {
            std::vector<int>::__append(&v22, v17 + 1 - v18, &operations_research::sat::kNoBooleanVariable);
            std::vector<int>::pointer begin = v22.__begin_;
            uint64_t v6 = *a2;
            uint64_t v5 = a2[1];
          }
        }
        begin[v17] = *(_DWORD *)(*v4 + 4 * v16);
        std::vector<int>::pointer v15 = begin;
      }
      ++v16;
    }
    while (v16 < (int)((unint64_t)(v5 - v6) >> 2));
    long long v19 = *(_OWORD *)&v22.__end_;
  }
  int64_t v21 = *(int **)(a1 + 120);
  v22.__begin_ = *(std::vector<int>::pointer *)(a1 + 104);
  double v20 = v22.__begin_;
  v22.__end_cap_.__value_ = v21;
  *(void *)(a1 + 104) = begin;
  *(_OWORD *)(a1 + 112) = v19;
  if (v20)
  {
    v22.__end_ = v20;
    operator delete(v20);
  }
}

void sub_23CD8E6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPostsolver::Postsolve(uint64_t a1, int *a2)
{
  unint64_t v2 = *a2;
  if ((int)v2 > 1)
  {
    unint64_t v3 = 0;
    unint64_t v4 = v2 >> 1;
    uint64_t v5 = *((void *)a2 + 1);
    do
    {
      char v6 = 2 * (v3 & 0x1F);
      if (((*(void *)(v5 + (((unint64_t)(2 * (int)v3) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 3) == 0) {
        *(void *)(v5 + ((v3 >> 2) & 0x3FFFFFFFFFFFFFF8)) |= 1 << v6;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16) - v7;
  if ((int)(v8 >> 2) < 1)
  {
    uint64_t v11 = *((void *)a2 + 1);
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 72);
    uint64_t v10 = (v8 >> 2);
    uint64_t v11 = *((void *)a2 + 1);
    do
    {
      int v14 = *(_DWORD *)(v7 + 4 * (v10 - 1));
      if (v14 >= v9)
      {
LABEL_8:
        unint64_t v12 = *(int *)(*(void *)(a1 + 80) + 4 * (v10 - 1));
        *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) = *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) & ~(3 << (v12 & 0x3E)) | (1 << v12);
      }
      else
      {
        uint64_t v15 = v9;
        unint64_t v16 = *(void *)(a1 + 64) + v14;
        uint64_t v17 = v15 - v14;
        while (1)
        {
          int v18 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + ((v16 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v16 & 0x3FF));
          if ((*(void *)(v11 + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18)) {
            break;
          }
          ++v16;
          if (!--v17) {
            goto LABEL_8;
          }
        }
      }
      int v9 = v14;
    }
    while (v10-- > 1);
  }
  int v19 = (2 * *(_DWORD *)a1) & ~((2 * *(_DWORD *)a1) >> 31);
  *a2 = v19;
  unint64_t v20 = (v19 + 63) >> 6;
  uint64_t v24 = 0;
  unint64_t v21 = (*((void *)a2 + 2) - v11) >> 3;
  BOOL v22 = v20 >= v21;
  unint64_t v23 = v20 - v21;
  if (v23 != 0 && v22)
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 2), v23, &v24);
  }
  else if (!v22)
  {
    *((void *)a2 + 2) = v11 + 8 * v20;
  }
}

void operations_research::sat::SatPostsolver::ExtractAndPostsolveSolution(operations_research::sat::SatPostsolver *this@<X0>, const operations_research::sat::SatSolver *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5 = *((int *)a2 + 4);
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  unint64_t v16 = 0;
  if (v5)
  {
    if ((v5 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = (v5 - 1) >> 6;
    unint64_t v8 = operator new(8 * (v7 + 1));
    int v9 = v8;
    unint64_t v17 = v5;
    unint64_t v18 = v7 + 1;
    unint64_t v16 = v8;
    if (v5 >= 0x41) {
      unint64_t v10 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v10 = 0;
    }
    v8[v10] = 0;
    if (v5 >= 0x40) {
      bzero(v8, 8 * (v5 >> 6));
    }
    if ((v5 & 0x3F) != 0) {
      v9[v5 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
    }
    int v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = *(void *)(*((void *)a2 + 26) + 24);
    do
    {
      while (1)
      {
        unint64_t v14 = v12 >> 6;
        uint64_t v15 = 1 << v12;
        if ((*(void *)(v13 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v11 & 0x3E))) {
          break;
        }
        v9[v14] &= ~v15;
        ++v12;
        v11 += 2;
        if (v5 == v12) {
          goto LABEL_16;
        }
      }
      v9[v14] |= v15;
      ++v12;
      v11 += 2;
    }
    while (v5 != v12);
  }
  else
  {
    int v9 = 0;
  }
LABEL_16:
  operations_research::sat::SatPostsolver::PostsolveSolution((int *)this, (uint64_t *)&v16, a3);
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_23CD8EA28(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPostsolver::PostsolveSolution(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if ((int)a2[1] >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = a2[1];
    uint64_t v7 = *((void *)a1 + 13);
    uint64_t v8 = *a2;
    uint64_t v9 = *((void *)a1 + 17);
    do
    {
      *(void *)(v9 + (((unint64_t)(2 * *(_DWORD *)(v7 + 4 * v5)) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << ((((*(void *)(v8 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) | (2 * (*(_DWORD *)(v7 + 4 * v5) & 0x1F)));
      ++v5;
    }
    while (v6 != v5);
  }
  operations_research::sat::SatPostsolver::Postsolve((uint64_t)a1, a1 + 32);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<BOOL>::reserve((uint64_t)a3, *a1);
  if (*a1 >= 1)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    do
    {
      while (1)
      {
        uint64_t v12 = *(void *)(*((void *)a1 + 17) + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8));
        unint64_t v13 = a3[1];
        uint64_t v14 = a3[2];
        if (v13 == v14 << 6)
        {
          if ((uint64_t)(v13 + 1) < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v15 = v14 << 7;
          if (v15 <= (v13 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v13 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v16 = v15;
          }
          else {
            unint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
          }
          std::vector<BOOL>::reserve((uint64_t)a3, v16);
          unint64_t v13 = a3[1];
        }
        a3[1] = v13 + 1;
        uint64_t v17 = *a3;
        unint64_t v18 = v13 >> 6;
        uint64_t v19 = 1 << v13;
        if ((v12 & (1 << (v10 & 0x3E))) != 0) {
          break;
        }
        *(void *)(v17 + 8 * v18) &= ~v19;
        ++v11;
        v10 += 2;
        if (v11 >= *a1) {
          return;
        }
      }
      *(void *)(v17 + 8 * v18) |= v19;
      ++v11;
      v10 += 2;
    }
    while (v11 < *a1);
  }
}

void sub_23CD8EBF0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::AddClause(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 328);
  uint64_t v6 = *(void **)(a1 + 336);
  std::string __p = 0;
  BOOL v146 = 0;
  int v147 = 0;
  if (a3)
  {
    if (4 * a3 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(4 * a3);
    uint64_t v9 = &v8[4 * ((4 * a3) >> 2)];
    std::string __p = v8;
    int v147 = v9;
    memcpy(v8, a2, 4 * a3);
    BOOL v146 = v9;
    if ((unint64_t)v6 < *(void *)(a1 + 344)) {
      goto LABEL_4;
    }
LABEL_6:
    int v10 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(a1 + 328), (uint64_t)&__p);
    uint64_t v11 = (char *)__p;
    *(void *)(a1 + 336) = v10;
    if (v11)
    {
      BOOL v146 = v11;
      operator delete(v11);
    }
    goto LABEL_8;
  }
  uint64_t v9 = 0;
  uint64_t v8 = 0;
  if ((unint64_t)v6 >= *(void *)(a1 + 344)) {
    goto LABEL_6;
  }
LABEL_4:
  *uint64_t v6 = v8;
  v6[1] = v9;
  v6[2] = v9;
  *(void *)(a1 + 336) = v6 + 3;
LABEL_8:
  unint64_t v13 = *(void *)(a1 + 264);
  uint64_t v12 = *(void *)(a1 + 272);
  if (v13 == v12 << 6)
  {
    if ((uint64_t)(v13 + 1) < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (v13 > 0x3FFFFFFFFFFFFFFELL)
    {
      unint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v14 = v12 << 7;
      unint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
      if (v14 <= v15) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = v14;
      }
    }
    std::vector<BOOL>::reserve(a1 + 256, v16);
    unint64_t v13 = *(void *)(a1 + 264);
  }
  unint64_t v144 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v7) >> 3);
  uint64_t v17 = *(void *)(a1 + 296);
  uint64_t v18 = *(void *)(a1 + 288);
  *(void *)(a1 + 264) = v13 + 1;
  *(void *)(*(void *)(a1 + 256) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  if (v17 == v18) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = ((v17 - v18) << 7) - 1;
  }
  uint64_t v20 = *(void *)(a1 + 320);
  unint64_t v21 = v20 + *(void *)(a1 + 312);
  if (v19 == v21)
  {
    std::deque<int>::__add_back_capacity(a1 + 280);
    uint64_t v18 = *(void *)(a1 + 288);
    uint64_t v20 = *(void *)(a1 + 320);
    unint64_t v21 = *(void *)(a1 + 312) + v20;
  }
  *(_DWORD *)(*(void *)(v18 + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v21 & 0x3FF)) = v144;
  *(void *)(a1 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v20 + 1;
  uint64_t v22 = *(void *)(a1 + 336);
  uint64_t v23 = *(void *)(a1 + 448);
  uint64_t v24 = *(void *)(a1 + 456);
  long long v25 = *(int **)(v22 - 24);
  long long v26 = *(char **)(v22 - 16);
  uint64_t v142 = a1;
  unsigned __int8 v27 = 0;
  if (v23 != v24)
  {
    if (v26 == (char *)v25)
    {
      long long v26 = *(char **)(v22 - 24);
    }
    else
    {
      unint64_t v28 = (v26 - (char *)v25) >> 2;
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      int v29 = *(int **)(v22 - 24);
      do
      {
        uint64_t v30 = *v29;
        int v31 = *(_DWORD *)(v23 + 4 * v30);
        *v29++ = v31;
        v27 |= v30 != v31;
        --v28;
      }
      while (v28);
    }
  }
  unint64_t v32 = 126 - 2 * __clz((v26 - (char *)v25) >> 2);
  if (v26 == (char *)v25) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v25, v26, (uint64_t)&__p, v33, 1);
  long long v34 = *(char **)(v22 - 24);
  uint64_t v35 = *(char **)(v22 - 16);
  if (v34 == v35) {
    goto LABEL_47;
  }
  unint64_t v36 = v34 + 4;
  do
  {
    if (v36 == v35) {
      goto LABEL_47;
    }
    int v38 = *((_DWORD *)v36 - 1);
    int v37 = *(_DWORD *)v36;
    v36 += 4;
  }
  while (v38 != v37);
  unint64_t v39 = v36 - 8;
  while (v36 != v35)
  {
    int v40 = v37;
    int v37 = *(_DWORD *)v36;
    if (v40 != *(_DWORD *)v36)
    {
      *((_DWORD *)v39 + 1) = v37;
      v39 += 4;
    }
    v36 += 4;
  }
  int64_t v42 = v39 + 4;
  int64_t v43 = v35 - (v39 + 4);
  if (v35 == v39 + 4)
  {
LABEL_47:
    uint64_t v41 = v35 - v34;
    if ((unint64_t)v41 >= 5) {
      goto LABEL_48;
    }
LABEL_53:
    uint64_t v52 = (int32x2_t **)(*(void *)(v142 + 328) + 24 * (int)v144);
    uint64_t v54 = *v52;
    int v53 = v52[1];
    if (v54 == v53)
    {
      int8x8_t v56 = 0;
      goto LABEL_70;
    }
    unint64_t v55 = (char *)v53 - (char *)v54 - 4;
    if (v55 >= 0xC)
    {
      uint64_t v68 = (v55 >> 2) + 1;
      uint64_t v57 = (int *)v54 + (v68 & 0x7FFFFFFFFFFFFFFCLL);
      BOOL v69 = v54 + 1;
      int8x16_t v70 = 0uLL;
      uint64x2_t v71 = (uint64x2_t)vdupq_n_s64(1uLL);
      uint64_t v72 = v68 & 0x7FFFFFFFFFFFFFFCLL;
      int8x16_t v73 = 0uLL;
      do
      {
        int32x2_t v74 = v69[-1];
        int32x2_t v75 = vshr_n_s32(v74, 1uLL);
        int32x2_t v76 = vshr_n_s32(*v69, 1uLL);
        int32x2_t v77 = vsub_s32(v75, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v75, (uint32x2_t)vcltz_s32(v74), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
        int32x2_t v78 = vsub_s32(v76, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v76, (uint32x2_t)vcltz_s32(*v69), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
        v79.i64[0] = v77.u32[0];
        v79.i64[1] = v77.u32[1];
        uint64x2_t v80 = v79;
        v79.i64[0] = v78.u32[0];
        v79.i64[1] = v78.u32[1];
        int8x16_t v70 = vorrq_s8((int8x16_t)vshlq_u64(v71, v80), v70);
        int8x16_t v73 = vorrq_s8((int8x16_t)vshlq_u64(v71, v79), v73);
        v69 += 2;
        v72 -= 4;
      }
      while (v72);
      int8x16_t v81 = vorrq_s8(v73, v70);
      int8x8_t v56 = vorr_s8(*(int8x8_t *)v81.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL));
      if (v68 == (v68 & 0x7FFFFFFFFFFFFFFCLL)) {
        goto LABEL_70;
      }
    }
    else
    {
      int8x8_t v56 = 0;
      uint64_t v57 = (int *)v54;
    }
    do
    {
      int v82 = *v57++;
      int v83 = -(v82 >> 1) & 0x3F;
      int v84 = (v82 >> 1) & 0x3F;
      if (v82 >> 1 <= 0) {
        int v84 = -v83;
      }
      *(void *)&v56 |= 1 << v84;
    }
    while (v57 != (int *)v53);
LABEL_70:
    uint64_t v86 = *(int8x8_t **)(v142 + 360);
    unint64_t v85 = *(void *)(v142 + 368);
    if ((unint64_t)v86 < v85)
    {
      *uint64_t v86 = v56;
      uint64_t v87 = (uint64_t)&v86[1];
LABEL_91:
      *(void *)(v142 + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v87;
      uint64_t v106 = *(void *)(v142 + 1056);
      int v107 = (v106 != 0) & v27;
      uint64_t v108 = v142;
      uint64_t v109 = *(void *)(v22 - 16);
      if (v107 == 1)
      {
        operations_research::sat::DratProofHandler::AddClause(v106, *(int **)(v22 - 24), (v109 - *(void *)(v22 - 24)) >> 2);
        operations_research::sat::DratProofHandler::DeleteClause(*(void *)(v142 + 1056), (int *)a2, a3);
        uint64_t v109 = *(void *)(v22 - 16);
      }
      unint64_t v110 = (*(int *)(v109 - 4) | 1) + 1;
      double v111 = (void *)(v142 + 392);
      unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v142 + 400) - *(void *)(v142 + 392)) >> 3);
      if (v110 > v112)
      {
        std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(v142 + 392, v110 - v112);
        uint64_t v113 = *(void *)(v142 + 416);
        unint64_t v114 = (*(void *)(v142 + 424) - v113) >> 2;
        if (v110 <= v114)
        {
          if (v110 < v114) {
            *(void *)(v142 + 424) = v113 + 4 * v110;
          }
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(v142 + 416), v110 - v114);
        }
      }
      uint64_t v116 = *(int **)(v22 - 24);
      uint64_t v115 = *(int **)(v22 - 16);
      if (v116 == v115) {
        return;
      }
      uint64_t v141 = *(int **)(v22 - 16);
      while (1)
      {
        uint64_t v118 = *v116;
        uint64_t v119 = *v111 + 24 * (int)v118;
        uint64_t v121 = (uint64_t *)(v119 + 8);
        int64_t v120 = *(char **)(v119 + 8);
        unint64_t v122 = *(void *)(v119 + 16);
        if ((unint64_t)v120 >= v122) {
          break;
        }
        *(_DWORD *)int64_t v120 = v144;
        uint64_t v117 = (uint64_t)(v120 + 4);
LABEL_101:
        *uint64_t v121 = v117;
        ++*(_DWORD *)(*(void *)(v108 + 416) + 4 * v118);
        if (++v116 == v115) {
          return;
        }
      }
      uint64_t v123 = *(char **)v119;
      uint64_t v124 = (uint64_t)&v120[-*(void *)v119];
      uint64_t v125 = v124 >> 2;
      unint64_t v126 = (v124 >> 2) + 1;
      if (v126 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v127 = v122 - (void)v123;
      if (v127 >> 1 > v126) {
        unint64_t v126 = v127 >> 1;
      }
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v126 = 0x3FFFFFFFFFFFFFFFLL;
      }
      uint64_t v143 = *v116;
      if (v126)
      {
        if (v126 >> 62) {
          goto LABEL_125;
        }
        unint64_t v128 = v126;
        uint64_t v129 = operator new(4 * v126);
        double v130 = &v129[4 * v125];
        _DWORD *v130 = v144;
        uint64_t v117 = (uint64_t)(v130 + 1);
        if (v120 != v123) {
          goto LABEL_111;
        }
      }
      else
      {
        unint64_t v128 = 0;
        uint64_t v129 = 0;
        double v130 = (_DWORD *)(4 * v125);
        *(_DWORD *)(4 * v125) = v144;
        uint64_t v117 = 4 * v125 + 4;
        if (v120 != v123)
        {
LABEL_111:
          unint64_t v131 = v120 - 4 - v123;
          if (v131 >= 0x2C)
          {
            unint64_t v132 = v120 - &v129[v124];
            uint64_t v108 = v142;
            if (v132 >= 0x20)
            {
              uint64_t v133 = (v131 >> 2) + 1;
              uint64_t v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v135 = &v120[-v134];
              double v130 = (_DWORD *)((char *)v130 - v134);
              double v136 = &v129[4 * v125 - 16];
              int v137 = v120 - 16;
              uint64_t v138 = v133 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v139 = *(_OWORD *)v137;
                *(v136 - 1) = *((_OWORD *)v137 - 1);
                *double v136 = v139;
                v136 -= 2;
                v137 -= 32;
                v138 -= 8;
              }
              while (v138);
              int64_t v120 = v135;
              if (v133 == (v133 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_120;
              }
            }
          }
          else
          {
            uint64_t v108 = v142;
          }
          do
          {
            int v140 = *((_DWORD *)v120 - 1);
            v120 -= 4;
            *--double v130 = v140;
          }
          while (v120 != v123);
LABEL_120:
          *(void *)uint64_t v119 = v130;
          *uint64_t v121 = v117;
          *(void *)(v119 + 16) = &v129[4 * v128];
          if (v123) {
            operator delete(v123);
          }
          uint64_t v115 = v141;
          double v111 = (void *)(v142 + 392);
          uint64_t v118 = v143;
          goto LABEL_101;
        }
      }
      uint64_t v108 = v142;
      goto LABEL_120;
    }
    double v88 = *(int8x8_t **)(v142 + 352);
    uint64_t v89 = v86 - v88;
    unint64_t v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v91 = v85 - (void)v88;
    if (v91 >> 2 > v90) {
      unint64_t v90 = v91 >> 2;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v90;
    }
    if (v92)
    {
      if (v92 >> 61) {
LABEL_125:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      int v93 = operator new(8 * v92);
      uint64_t v94 = (int8x8_t *)&v93[8 * v89];
      double v95 = &v93[8 * v92];
      *uint64_t v94 = v56;
      uint64_t v87 = (uint64_t)&v94[1];
      int64_t v96 = (char *)v86 - (char *)v88;
      if (v86 == v88) {
        goto LABEL_89;
      }
    }
    else
    {
      int v93 = 0;
      uint64_t v94 = (int8x8_t *)(8 * v89);
      double v95 = 0;
      *(int8x8_t *)(8 * v89) = v56;
      uint64_t v87 = 8 * v89 + 8;
      int64_t v96 = (char *)v86 - (char *)v88;
      if (v86 == v88)
      {
LABEL_89:
        *(void *)(v142 + 352) = v94;
        *(void *)(v142 + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v87;
        *(void *)(v142 + 368) = v95;
        if (v88) {
          operator delete(v88);
        }
        goto LABEL_91;
      }
    }
    unint64_t v97 = v96 - 8;
    if (v97 < 0x58) {
      goto LABEL_131;
    }
    if ((unint64_t)((char *)v88 - v93) < 0x20) {
      goto LABEL_131;
    }
    uint64_t v98 = (v97 >> 3) + 1;
    uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v100 = &v86[v99 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v94 = (int8x8_t *)((char *)v94 - v99);
    unint64_t v101 = &v93[8 * v89 - 16];
    double v102 = v86 - 2;
    uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v104 = *(_OWORD *)v102->i8;
      *(v101 - 1) = *(_OWORD *)v102[-2].i8;
      *unint64_t v101 = v104;
      v101 -= 2;
      v102 -= 4;
      v103 -= 4;
    }
    while (v103);
    uint64_t v86 = v100;
    if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_131:
      do
      {
        int8x8_t v105 = v86[-1];
        --v86;
        v94[-1] = v105;
        --v94;
      }
      while (v86 != v88);
    }
    goto LABEL_89;
  }
  if (v35 != &v42[v43])
  {
    memmove(v39 + 4, &v42[v43], 0);
    long long v34 = *(char **)(v22 - 24);
  }
  *(void *)(v22 - 16) = v42;
  uint64_t v41 = v42 - v34;
  if ((unint64_t)(v42 - v34) < 5) {
    goto LABEL_53;
  }
LABEL_48:
  unint64_t v44 = v41 >> 2;
  uint64_t v45 = 2;
  if (v44 > 2) {
    uint64_t v45 = v44;
  }
  int v48 = *(_DWORD *)v34;
  double v46 = (int *)(v34 + 4);
  int v47 = v48;
  uint64_t v49 = v45 - 1;
  while (1)
  {
    int v50 = v47 ^ 1;
    int v51 = *v46++;
    int v47 = v51;
    if (v51 == v50) {
      break;
    }
    if (!--v49) {
      goto LABEL_53;
    }
  }
  uint64_t v59 = *(void *)(v142 + 288);
  uint64_t v58 = *(void *)(v142 + 296);
  uint64_t v60 = ((v58 - v59) << 7) - 1;
  BOOL v61 = v58 == v59;
  ++*(_DWORD *)(v142 + 472);
  uint64_t v63 = *(void *)(v142 + 312);
  uint64_t v62 = *(void *)(v142 + 320);
  if (v61) {
    uint64_t v60 = 0;
  }
  *(void *)(v142 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v62 - 1;
  if ((unint64_t)(v60 - (v62 + v63) + 1) >= 0x800)
  {
    operator delete(*(void **)(v58 - 8));
    *(void *)(v142 + 296) -= 8;
  }
  uint64_t v64 = *(void *)(v142 + 336);
  double v67 = *(void **)(v64 - 24);
  uint64_t v66 = v64 - 24;
  uint64_t v65 = v67;
  if (v67)
  {
    *(void *)(*(void *)(v142 + 336) - 16) = v65;
    operator delete(v65);
  }
  *(void *)(v142 + 336) = v66;
  --*(void *)(v142 + 264);
}

void sub_23CD8F494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::SetNumVariables(operations_research::sat::SatPresolver *this, int a2)
{
  unint64_t v2 = 2 * a2;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 50) - *((void *)this + 49)) >> 3);
  if (v2 > v3)
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)this + 392, v2 - v3);
    uint64_t v5 = *((void *)this + 52);
    unint64_t v6 = (*((void *)this + 53) - v5) >> 2;
    if (v2 <= v6)
    {
      if (v2 < v6) {
        *((void *)this + 53) = v5 + 4 * v2;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 416), v2 - v6);
    }
  }
}

void operations_research::sat::SatPresolver::AddClauseInternal(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 1056);
  if (v4) {
    operations_research::sat::DratProofHandler::AddClause(v4, *(int **)a2, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  uint64_t v6 = *(void *)(v3 + 328);
  uint64_t v5 = *(void **)(v3 + 336);
  std::string __p = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  if ((unint64_t)v5 >= *(void *)(v3 + 344))
  {
    uint64_t v7 = std::vector<std::vector<operations_research::sat::CircuitPropagator::Arc>>::__push_back_slow_path<std::vector<operations_research::sat::CircuitPropagator::Arc>>((char **)(v3 + 328), (uint64_t)&__p);
    uint64_t v8 = __p;
    *(void *)(v3 + 336) = v7;
    if (v8)
    {
      uint64_t v108 = v8;
      operator delete(v8);
      uint64_t v7 = *(char **)(v3 + 336);
    }
  }
  else
  {
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v5[2] = v109;
    uint64_t v7 = (char *)(v5 + 3);
    *(void *)(v3 + 336) = v5 + 3;
  }
  uint64_t v9 = *((void *)v7 - 3);
  *((void *)v7 - 3) = *(void *)a2;
  *(void *)a2 = v9;
  uint64_t v10 = *((void *)v7 - 2);
  *((void *)v7 - 2) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10;
  uint64_t v11 = *((void *)v7 - 1);
  *((void *)v7 - 1) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v11;
  unint64_t v13 = *(void *)(v3 + 264);
  uint64_t v12 = *(void *)(v3 + 272);
  if (v13 == v12 << 6)
  {
    if ((uint64_t)(v13 + 1) < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    if (v13 > 0x3FFFFFFFFFFFFFFELL)
    {
      unint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v14 = v12 << 7;
      unint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFC0) + 64;
      if (v14 <= v15) {
        unint64_t v16 = v15;
      }
      else {
        unint64_t v16 = v14;
      }
    }
    std::vector<BOOL>::reserve(v3 + 256, v16);
    unint64_t v13 = *(void *)(v3 + 264);
  }
  unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v6) >> 3);
  uint64_t v17 = *(void *)(v3 + 296);
  uint64_t v18 = *(void *)(v3 + 288);
  *(void *)(v3 + 264) = v13 + 1;
  *(void *)(*(void *)(v3 + 256) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
  if (v17 == v18) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = ((v17 - v18) << 7) - 1;
  }
  uint64_t v20 = *(void *)(v3 + 320);
  unint64_t v21 = v20 + *(void *)(v3 + 312);
  if (v19 == v21)
  {
    std::deque<int>::__add_back_capacity(v3 + 280);
    uint64_t v18 = *(void *)(v3 + 288);
    uint64_t v20 = *(void *)(v3 + 320);
    unint64_t v21 = *(void *)(v3 + 312) + v20;
  }
  *(_DWORD *)(*(void *)(v18 + ((v21 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v21 & 0x3FF)) = v106;
  *(void *)(v3 + 32google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v20 + 1;
  uint64_t v22 = *(void *)(v3 + 336);
  uint64_t v24 = *(int **)(v22 - 24);
  uint64_t v23 = *(int **)(v22 - 16);
  uint64_t v103 = v3;
  if (v24 != v23)
  {
    long long v104 = (void *)(v3 + 24);
    uint64_t v102 = v3 + 104;
    do
    {
      uint64_t v25 = *v24;
      uint64_t v26 = *(void *)(v3 + 392) + 24 * (int)v25;
      unsigned __int8 v27 = (uint64_t *)(v26 + 8);
      unint64_t v28 = *(char **)(v26 + 8);
      uint64_t v30 = (void *)(v26 + 16);
      unint64_t v29 = *(void *)(v26 + 16);
      if ((unint64_t)v28 < v29)
      {
        *(_DWORD *)unint64_t v28 = v106;
        uint64_t v31 = (uint64_t)(v28 + 4);
        goto LABEL_45;
      }
      unint64_t v32 = v23;
      uint64_t v33 = *(char **)v26;
      uint64_t v34 = (uint64_t)&v28[-*(void *)v26];
      uint64_t v35 = v34 >> 2;
      unint64_t v36 = (v34 >> 2) + 1;
      if (v36 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v37 = v29 - (void)v33;
      if (v37 >> 1 > v36) {
        unint64_t v36 = v37 >> 1;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v105 = v36;
      if (v36)
      {
        if (v36 >> 62) {
          goto LABEL_91;
        }
        int v38 = operator new(4 * v36);
        uint64_t v30 = (void *)(v26 + 16);
        unint64_t v39 = &v38[4 * v35];
        _DWORD *v39 = v106;
        uint64_t v31 = (uint64_t)(v39 + 1);
        if (v28 == v33)
        {
LABEL_36:
          uint64_t v23 = v32;
          unint64_t v41 = v105;
          goto LABEL_42;
        }
      }
      else
      {
        int v38 = 0;
        unint64_t v39 = (_DWORD *)(4 * v35);
        *(_DWORD *)(4 * v35) = v106;
        uint64_t v31 = 4 * v35 + 4;
        if (v28 == v33) {
          goto LABEL_36;
        }
      }
      unint64_t v40 = v28 - 4 - v33;
      unint64_t v41 = v105;
      if (v40 >= 0x2C)
      {
        unint64_t v42 = v28 - &v38[v34];
        uint64_t v23 = v32;
        if (v42 >= 0x20)
        {
          uint64_t v43 = (v40 >> 2) + 1;
          uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v45 = &v28[-v44];
          unint64_t v39 = (_DWORD *)((char *)v39 - v44);
          double v46 = &v38[4 * v35 - 16];
          int v47 = v28 - 16;
          uint64_t v48 = v43 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *double v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 8;
          }
          while (v48);
          unint64_t v28 = v45;
          if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        uint64_t v23 = v32;
      }
      do
      {
        int v50 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--unint64_t v39 = v50;
      }
      while (v28 != v33);
LABEL_42:
      *(void *)uint64_t v26 = v39;
      *unsigned __int8 v27 = v31;
      *uint64_t v30 = &v38[4 * v41];
      if (v33) {
        operator delete(v33);
      }
      uint64_t v3 = v103;
LABEL_45:
      *unsigned __int8 v27 = v31;
      uint64_t v51 = *(void *)(v3 + 416);
      ++*(_DWORD *)(v51 + 4 * v25);
      if (*(void *)v3 == *(void *)(v3 + 8)) {
        goto LABEL_50;
      }
      uint64_t v52 = (double *)(*(void *)v3 + 16 * ((int)v25 >> 1));
      v52[1] = (double)(*(_DWORD *)(v51 + 4 * (int)(v25 | 1)) + *(_DWORD *)(v51 + 4 * (int)(v25 & 0xFFFFFFFE)));
      unint64_t v53 = *(unsigned int *)v52;
      if ((v53 & 0x80000000) != 0
        || (uint64_t v54 = *(void *)(v3 + 32), v53 >= (*(void *)(v3 + 40) - v54) >> 3)
        || *(double **)(v54 + 8 * v53) != v52)
      {
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(v104, (uint64_t)v52);
LABEL_50:
        if (*(void *)(v3 + 96)) {
          goto LABEL_51;
        }
        goto LABEL_22;
      }
      AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)v104, (uint64_t)v52);
      if (*(void *)(v3 + 96))
      {
LABEL_51:
        unint64_t v55 = (double *)(*(void *)(*(void *)(v3 + 64)
                                   + (((unint64_t)(*(void *)(v3 + 88) + v25) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*(unsigned char *)(v3 + 88) + v25));
        v55[1] = (double)*(int *)(*(void *)(v3 + 416) + 4 * v25);
        unint64_t v56 = *(unsigned int *)v55;
        if ((v56 & 0x80000000) == 0)
        {
          uint64_t v57 = *(void *)(v3 + 112);
          if (v56 < (*(void *)(v3 + 120) - v57) >> 3 && *(double **)(v57 + 8 * v56) == v55) {
            AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority(v102, (uint64_t)v55);
          }
        }
      }
LABEL_22:
      ++v24;
    }
    while (v24 != v23);
  }
  uint64_t v58 = (int32x2_t **)(*(void *)(v3 + 328) + 24 * (int)v106);
  uint64_t v60 = *v58;
  uint64_t v59 = v58[1];
  if (v60 == v59)
  {
    int8x8_t v62 = 0;
    goto LABEL_67;
  }
  unint64_t v61 = (char *)v59 - (char *)v60 - 4;
  if (v61 >= 0xC)
  {
    uint64_t v64 = (v61 >> 2) + 1;
    uint64_t v63 = (int *)v60 + (v64 & 0x7FFFFFFFFFFFFFFCLL);
    uint64_t v65 = v60 + 1;
    int8x16_t v66 = 0uLL;
    uint64x2_t v67 = (uint64x2_t)vdupq_n_s64(1uLL);
    uint64_t v68 = v64 & 0x7FFFFFFFFFFFFFFCLL;
    int8x16_t v69 = 0uLL;
    do
    {
      int32x2_t v70 = v65[-1];
      int32x2_t v71 = vshr_n_s32(v70, 1uLL);
      int32x2_t v72 = vshr_n_s32(*v65, 1uLL);
      int32x2_t v73 = vsub_s32(v71, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v71, (uint32x2_t)vcltz_s32(v70), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
      int32x2_t v74 = vsub_s32(v72, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v72, (uint32x2_t)vcltz_s32(*v65), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
      v75.i64[0] = v73.u32[0];
      v75.i64[1] = v73.u32[1];
      uint64x2_t v76 = v75;
      v75.i64[0] = v74.u32[0];
      v75.i64[1] = v74.u32[1];
      int8x16_t v66 = vorrq_s8((int8x16_t)vshlq_u64(v67, v76), v66);
      int8x16_t v69 = vorrq_s8((int8x16_t)vshlq_u64(v67, v75), v69);
      v65 += 2;
      v68 -= 4;
    }
    while (v68);
    int8x16_t v77 = vorrq_s8(v69, v66);
    int8x8_t v62 = vorr_s8(*(int8x8_t *)v77.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL));
    if (v64 == (v64 & 0x7FFFFFFFFFFFFFFCLL)) {
      goto LABEL_67;
    }
  }
  else
  {
    int8x8_t v62 = 0;
    uint64_t v63 = (int *)v60;
  }
  do
  {
    int v78 = *v63++;
    int v79 = -(v78 >> 1) & 0x3F;
    int v80 = (v78 >> 1) & 0x3F;
    if (v78 >> 1 <= 0) {
      int v80 = -v79;
    }
    *(void *)&v62 |= 1 << v80;
  }
  while (v63 != (int *)v59);
LABEL_67:
  int v82 = *(int8x8_t **)(v3 + 360);
  unint64_t v81 = *(void *)(v3 + 368);
  if ((unint64_t)v82 < v81)
  {
    int8x8_t *v82 = v62;
    uint64_t v83 = (uint64_t)&v82[1];
    goto LABEL_89;
  }
  int v84 = *(int8x8_t **)(v3 + 352);
  uint64_t v85 = v82 - v84;
  unint64_t v86 = v85 + 1;
  if ((unint64_t)(v85 + 1) >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v87 = v81 - (void)v84;
  if (v87 >> 2 > v86) {
    unint64_t v86 = v87 >> 2;
  }
  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v88 = v86;
  }
  if (!v88)
  {
    uint64_t v89 = 0;
    unint64_t v90 = (int8x8_t *)(8 * v85);
    uint64_t v91 = 0;
    *(int8x8_t *)(8 * v85) = v62;
    uint64_t v83 = 8 * v85 + 8;
    int64_t v92 = (char *)v82 - (char *)v84;
    if (v82 != v84) {
      goto LABEL_78;
    }
LABEL_81:
    uint64_t v3 = v103;
    goto LABEL_87;
  }
  if (v88 >> 61) {
LABEL_91:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  uint64_t v89 = operator new(8 * v88);
  unint64_t v90 = (int8x8_t *)&v89[8 * v85];
  uint64_t v91 = &v89[8 * v88];
  *unint64_t v90 = v62;
  uint64_t v83 = (uint64_t)&v90[1];
  int64_t v92 = (char *)v82 - (char *)v84;
  if (v82 == v84) {
    goto LABEL_81;
  }
LABEL_78:
  unint64_t v93 = v92 - 8;
  if (v93 < 0x58)
  {
    uint64_t v3 = v103;
    do
    {
LABEL_86:
      int8x8_t v101 = v82[-1];
      --v82;
      v90[-1] = v101;
      --v90;
    }
    while (v82 != v84);
    goto LABEL_87;
  }
  uint64_t v3 = v103;
  if ((unint64_t)((char *)v84 - v89) < 0x20) {
    goto LABEL_86;
  }
  uint64_t v94 = (v93 >> 3) + 1;
  uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
  int64_t v96 = &v82[v95 / 0xFFFFFFFFFFFFFFF8];
  unint64_t v90 = (int8x8_t *)((char *)v90 - v95);
  unint64_t v97 = &v89[8 * v85 - 16];
  uint64_t v98 = v82 - 2;
  uint64_t v99 = v94 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v100 = *(_OWORD *)v98->i8;
    *(v97 - 1) = *(_OWORD *)v98[-2].i8;
    _OWORD *v97 = v100;
    v97 -= 2;
    v98 -= 4;
    v99 -= 4;
  }
  while (v99);
  int v82 = v96;
  if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_86;
  }
LABEL_87:
  *(void *)(v3 + 352) = v90;
  *(void *)(v3 + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v83;
  *(void *)(v3 + 368) = v91;
  if (v84) {
    operator delete(v84);
  }
LABEL_89:
  *(void *)(v3 + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v83;
}

void sub_23CD8FC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::VariableMapping(operations_research::sat::SatPresolver *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v8 = 0;
  uint64_t v3 = *((void *)this + 52);
  if ((int)((unint64_t)(*((void *)this + 53) - v3) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    int v7 = 1;
    do
    {
      if (*(int *)(v3 + (v5 >> 30)) <= 0 && *(int *)(v3 + 4 * v7) < 1)
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)a2, &operations_research::sat::kNoBooleanVariable);
      }
      else
      {
        gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)a2, &v8);
        ++v8;
      }
      ++v6;
      uint64_t v3 = *((void *)this + 52);
      v7 += 2;
      v5 += 0x200000000;
    }
    while (v6 < (int)((unint64_t)(*((void *)this + 53) - v3) >> 3));
  }
}

void sub_23CD8FD2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::LoadProblemIntoSatSolver(operations_research::sat::SatPresolver *this, operations_research::sat::SatSolver *a2)
{
  *((void *)this + 5) = *((void *)this + 4);
  *((void *)this + 1) = *(void *)this;
  *((void *)this + 33) = 0;
  uint64_t v3 = (void **)*((void *)this + 36);
  uint64_t v4 = *((void *)this + 37);
  *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  unint64_t v5 = v4 - (void)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v6 = *((void *)this + 37);
      uint64_t v3 = (void **)(*((void *)this + 36) + 8);
      *((void *)this + 36) = v3;
      unint64_t v5 = v6 - (void)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    uint64_t v7 = 512;
  }
  else
  {
    if (v5 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v7 = 1024;
  }
  *((void *)this + 39) = v7;
LABEL_8:
  uint64_t v9 = *((void *)this + 49);
  uint64_t v8 = *((void *)this + 50);
  if (v8 != v9)
  {
    uint64_t v10 = *((void *)this + 50);
    do
    {
      uint64_t v12 = *(void **)(v10 - 24);
      v10 -= 24;
      uint64_t v11 = v12;
      if (v12)
      {
        *(void *)(v8 - 16) = v11;
        operator delete(v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != v9);
  }
  *((void *)this + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v9;
  *((void *)this + 45) = *((void *)this + 44);
  operations_research::sat::SatPresolver::VariableMapping(this, &__p);
  if (__p == v50)
  {
    int v14 = 0;
  }
  else
  {
    unint64_t v13 = v50 - (unsigned char *)__p - 4;
    if (v13 < 0x1C)
    {
      int v14 = 0;
      unint64_t v15 = (int *)__p;
      goto LABEL_20;
    }
    uint64_t v16 = (v13 >> 2) + 1;
    unint64_t v15 = (int *)((char *)__p + 4 * (v16 & 0x7FFFFFFFFFFFFFF8));
    uint64_t v17 = (int32x4_t *)((char *)__p + 16);
    int32x4_t v18 = 0uLL;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    uint64_t v20 = v16 & 0x7FFFFFFFFFFFFFF8;
    int32x4_t v21 = 0uLL;
    do
    {
      int32x4_t v18 = vsubq_s32(v18, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v17[-1], v19)));
      int32x4_t v21 = vsubq_s32(v21, (int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v17, v19)));
      v17 += 2;
      v20 -= 8;
    }
    while (v20);
    int v14 = vaddvq_s32(vaddq_s32(v21, v18));
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_20:
        int v22 = *v15++;
        if (v22 != -1) {
          ++v14;
        }
      }
      while (v15 != (int *)v50);
    }
  }
  uint64_t v48 = 0;
  operations_research::sat::SatSolver::SetNumVariables(a2, v14);
  uint64_t v23 = *((void *)this + 41);
  uint64_t v47 = *((void *)this + 42);
  if (v23 == v47) {
    goto LABEL_65;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  while (2)
  {
    uint64_t v26 = *(int **)v23;
    unsigned __int8 v27 = *(int **)(v23 + 8);
    unint64_t v28 = v24;
    if (*(int **)v23 == v27)
    {
      *(void *)uint64_t v23 = 0;
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      if (v26) {
        goto LABEL_62;
      }
      goto LABEL_25;
    }
    do
    {
      while (1)
      {
        int v29 = *v26 & 1 | (2 * *((_DWORD *)__p + (*v26 >> 1)));
        if (v28 >= v25) {
          break;
        }
        *v28++ = v29;
        if (++v26 == v27) {
          goto LABEL_59;
        }
      }
      uint64_t v30 = v48;
      uint64_t v31 = v28 - v48;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v25 - (char *)v48) >> 1 > v32) {
        unint64_t v32 = ((char *)v25 - (char *)v48) >> 1;
      }
      if ((unint64_t)((char *)v25 - (char *)v48) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33)
      {
        if (v33 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v34 = operator new(4 * v33);
        uint64_t v35 = (int *)&v34[4 * v31];
        int *v35 = v29;
        uint64_t v36 = (uint64_t)(v35 + 1);
        if (v28 == v48) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = (int *)(4 * v31);
        *(_DWORD *)(4 * v31) = v29;
        uint64_t v36 = 4 * v31 + 4;
        if (v28 == v48) {
          goto LABEL_45;
        }
      }
      unint64_t v37 = (char *)(v28 - 1) - (char *)v48;
      if (v37 < 0xBC)
      {
        int v38 = v28;
        goto LABEL_44;
      }
      if (&v34[(char *)v28 - (char *)v48 - 4 - (v37 & 0xFFFFFFFFFFFFFFFCLL)] > &v34[(char *)v28 - (char *)v48 - 4])
      {
        int v38 = v28;
        do
        {
LABEL_44:
          int v39 = *--v38;
          *--uint64_t v35 = v39;
        }
        while (v38 != v48);
        goto LABEL_45;
      }
      if ((int *)((char *)v28 - (v37 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v28 - 1)
      {
        int v38 = v28;
        goto LABEL_44;
      }
      if ((unint64_t)((char *)v48 - v34) < 0x20)
      {
        int v38 = v28;
        goto LABEL_44;
      }
      uint64_t v40 = (v37 >> 2) + 1;
      uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      int v38 = &v28[v41 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v35 = (int *)((char *)v35 - v41);
      unint64_t v42 = &v34[4 * v31 - 16];
      uint64_t v43 = v28 - 4;
      uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v45 = *(_OWORD *)v43;
        *(v42 - 1) = *((_OWORD *)v43 - 1);
        *unint64_t v42 = v45;
        v42 -= 2;
        v43 -= 8;
        v44 -= 8;
      }
      while (v44);
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_44;
      }
LABEL_45:
      uint64_t v25 = (int *)&v34[4 * v33];
      uint64_t v48 = v35;
      if (v30) {
        operator delete(v30);
      }
      unint64_t v28 = (int *)v36;
      ++v26;
    }
    while (v26 != v27);
LABEL_59:
    uint64_t v24 = v48;
    if (v48 != v28) {
      operations_research::sat::SatSolver::AddProblemClause(a2, v48, v28 - v48);
    }
    uint64_t v26 = *(int **)v23;
    *(void *)uint64_t v23 = 0;
    *(void *)(v23 + 8) = 0;
    *(void *)(v23 + 16) = 0;
    if (v26) {
LABEL_62:
    }
      operator delete(v26);
LABEL_25:
    v23 += 24;
    if (v23 != v47) {
      continue;
    }
    break;
  }
  if (v24) {
    operator delete(v24);
  }
LABEL_65:
  if (__p)
  {
    int v50 = __p;
    operator delete(__p);
  }
}

void sub_23CD9015C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::SatPresolver::ProcessAllClauses(operations_research::sat::SatPresolver *this)
{
  unint64_t v2 = *((void *)this + 39);
  uint64_t v3 = *((void *)this + 36);
  uint64_t v4 = *((void *)this + 37);
  unint64_t v5 = (char *)(v3 + 8 * (v2 >> 10));
  if (v4 == v3)
  {
    uint64_t v6 = 0;
    unint64_t v10 = 0;
    uint64_t v7 = (void *)((char *)this + 320);
    uint64_t v9 = (char *)(v3 + 8 * ((*((void *)this + 40) + v2) >> 10));
    v31[0] = (uint64_t)this;
  }
  else
  {
    uint64_t v6 = (int *)(*(void *)v5 + 4 * (v2 & 0x3FF));
    uint64_t v7 = (void *)((char *)this + 320);
    unint64_t v8 = *((void *)this + 40) + v2;
    uint64_t v9 = (char *)(v3 + 8 * (v8 >> 10));
    unint64_t v10 = *(void *)v9 + 4 * (v8 & 0x3FF);
    v31[0] = (uint64_t)this;
    if ((int *)v10 != v6)
    {
      uint64_t v11 = ((uint64_t)(v10 - *(void *)v9) >> 2) + ((v9 - v5) << 7);
      uint64_t v12 = ((uint64_t)v6 - *(void *)v5) >> 2;
      if (v11 != v12)
      {
        unint64_t v13 = 63 - __clz(v11 - v12);
        goto LABEL_8;
      }
    }
  }
  unint64_t v13 = 0;
LABEL_8:
  uint64_t v14 = 1;
  std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>((unint64_t)v5, v6, v9, v10, v31, 2 * v13, 1);
  if (!*v7) {
    return v14;
  }
  int v15 = 0;
  while (1)
  {
    uint64_t v16 = (void **)*((void *)this + 36);
    unint64_t v17 = (*(int **)((char *)v16 + ((*((void *)this + 39) >> 7) & 0x1FFFFFFFFFFFFF8)))[*((void *)this + 39) & 0x3FFLL];
    *(void *)(*((void *)this + 32) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v17);
    uint64_t v18 = *((void *)this + 40) - 1;
    unint64_t v19 = *((void *)this + 39) + 1;
    *((void *)this + 39) = v19;
    *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v18;
    if (v19 >= 0x800)
    {
      operator delete(*v16);
      *((void *)this + 36) += 8;
      *((void *)this + 39) -= 1024;
    }
    uint64_t v20 = (absl::lts_2020_02_25 *)operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthers(this, v17);
    uint64_t v14 = (uint64_t)v20;
    if (!v20) {
      return v14;
    }
    if (v15 < 999)
    {
      ++v15;
      goto LABEL_11;
    }
    if ((uint64_t)(*((void *)this + 48) + *((void *)this + 47)) >= 1000000001) {
      break;
    }
    uint64_t v21 = *((void *)this + 133);
    if (!v21) {
      goto LABEL_25;
    }
    int v22 = *(unsigned __int8 **)(v21 + 120);
    if (v22)
    {
      unsigned __int8 v23 = atomic_load(v22);
      if (v23) {
        return v14;
      }
    }
    if (fmax(*(double *)(v21 + 104) - *(double *)(v21 + 112), 0.0) <= 0.0) {
      return v14;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos(v20);
    uint64_t v25 = *(void *)(v21 + 24) <= CurrentTimeNanos - *(void *)(v21 + 8)
        ? CurrentTimeNanos - *(void *)(v21 + 8)
        : *(void *)(v21 + 24);
    operations_research::RunningMax<long long>::Add((int *)(v21 + 32), v25);
    *(void *)(v21 + 8) = CurrentTimeNanos;
    if (*(void *)(*(void *)(v21 + 40) + 8 * *(int *)(v21 + 68)) + CurrentTimeNanos >= *(void *)(v21 + 16))
    {
      if (!FLAGS_time_limit_use_usertime) {
        goto LABEL_36;
      }
      double v27 = *(double *)(v21 + 96);
      if (*(unsigned char *)(v21 + 72))
      {
        double v28 = v27
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v26) - *(void *)(v21 + 80) + *(void *)(v21 + 88))
            * -0.000000001;
        if (v28 <= 0.0001) {
          goto LABEL_36;
        }
      }
      else
      {
        double v28 = v27 + (double)*(uint64_t *)(v21 + 88) * -0.000000001;
        if (v28 <= 0.0001)
        {
LABEL_36:
          *(void *)(v21 + 16) = 0;
          return 1;
        }
      }
      int v15 = 0;
      *(void *)(v21 + 16) = *(void *)(v21 + 8) + (uint64_t)(v28 * 1000000000.0);
    }
    else
    {
LABEL_25:
      int v15 = 0;
    }
LABEL_11:
    if (!*v7) {
      return v14;
    }
  }
  if (*operations_research::sat::SatPresolver::ProcessAllClauses(void)::vlocal__[0] < 1) {
    return 1;
  }
  if (operations_research::sat::SatPresolver::ProcessAllClauses(void)::vlocal__[0] != &google::kLogSiteUninitialized
    || (uint64_t v14 = 1,
        google::InitVLOG3__((google *)operations_research::sat::SatPresolver::ProcessAllClauses(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 307);
    int v29 = (void *)google::LogMessage::stream((google::LogMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Aborting ProcessAllClauses() because work limit has been reached", 64);
    google::LogMessage::~LogMessage((google::LogMessage *)v31);
    return 1;
  }
  return v14;
}

void sub_23CD90548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthers(operations_research::sat::SatPresolver *this, int a2)
{
  unint64_t v2 = *(int **)(*((void *)this + 41) + 24 * a2);
  uint64_t v3 = *((void *)this + 41) + 24 * a2;
  uint64_t v6 = *(int **)(v3 + 8);
  unint64_t v5 = (int **)(v3 + 8);
  uint64_t v4 = v6;
  if (v2 == v6) {
    return 1;
  }
  int64_t v96 = (int **)(*((void *)this + 41) + 24 * a2);
  uint64_t v9 = a2;
  uint64_t v10 = *v2;
  uint64_t v11 = *((void *)this + 52);
  int v12 = *(_DWORD *)(v11 + 4 * v10);
  do
  {
    uint64_t v14 = *v2++;
    int v13 = v14;
    int v15 = *(_DWORD *)(v11 + 4 * v14);
    if (v15 < v12)
    {
      LODWORD(v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v13;
      int v12 = v15;
    }
  }
  while (v2 != v4);
  uint64_t result = operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthersUsingLiteral(this, a2, v10);
  if (result)
  {
    unint64_t v17 = v96;
    uint64_t v18 = *v96;
    if (*v96 != *v5)
    {
      int v19 = 0x7FFFFFFF;
      int v20 = -1;
      do
      {
        uint64_t v21 = *v18;
        if (v21 != v10 && *(_DWORD *)(*((void *)this + 52) + 4 * v21) < v19)
        {
          int v19 = *(_DWORD *)(*((void *)this + 52) + 4 * v21);
          int v20 = *v18;
        }
        ++v18;
      }
      while (v18 != *v5);
      if (v20 != -1
        && *(_DWORD *)(*((void *)this + 52) + 4 * v20) < *(_DWORD *)(*((void *)this + 52) + 4 * ((int)v10 ^ 1)))
      {
        return operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthersUsingLiteral(this, a2, v20);
      }
    }
    int v22 = (std::vector<int> *)(*((void *)this + 49) + 24 * (int)(v10 ^ 1));
    std::vector<int>::pointer begin = v22->__begin_;
    int end = v22->__end_;
    p_int end = &v22->__end_;
    if (v22->__begin_ != end)
    {
      int v25 = 0;
      char v26 = 0;
      uint64_t v27 = *(void *)(*((void *)this + 44) + 8 * v9);
      uint64_t v94 = v27;
      uint64_t v95 = *((void *)this + 49) + 24 * (int)(v10 ^ 1);
      while (1)
      {
        int v28 = *begin;
        uint64_t v29 = *(void *)(*((void *)this + 44) + 8 * *begin);
        if (v29)
        {
          if ((v27 & ~v29) == 0)
          {
            uint64_t v30 = *((void *)this + 41);
            uint64_t v31 = v30 + 24 * v28;
            uint64_t v34 = *(int **)(v31 + 8);
            unint64_t v33 = (void *)(v31 + 8);
            unint64_t v32 = v34;
            uint64_t v35 = *(int **)(v30 + 24 * v28);
            unint64_t v36 = v34 - v35;
            unint64_t v37 = *v5;
            int v38 = *v17;
            unint64_t v39 = *v5 - *v17;
            if (v36 >= v39)
            {
              *((void *)this + 48) += v39 + v36;
              if (v38 == v37)
              {
LABEL_36:
                if (v35 == v32) {
                  return 0;
                }
              }
              else
              {
                uint64_t v40 = 0;
                int v41 = v36 - v39;
                unint64_t v42 = v35 + 1;
                while (1)
                {
                  while (1)
                  {
                    int v43 = v35[v40];
                    int v44 = *v38;
                    if (*v38 != v43) {
                      break;
                    }
                    ++v38;
                    ++v40;
                    ++v42;
                    if (v38 == v37) {
                      goto LABEL_36;
                    }
                  }
                  if (v44 == (v43 ^ 1)) {
                    break;
                  }
                  if (v44 < v43 || v41 < 1) {
                    goto LABEL_21;
                  }
                  --v41;
                  ++v40;
                  ++v42;
                  if (v38 == v37) {
                    goto LABEL_36;
                  }
                }
                while (++v38 != v37)
                {
                  while (1)
                  {
                    int v52 = *v42++;
                    int v51 = v52;
                    int v53 = *v38;
                    if (*v38 == v52) {
                      break;
                    }
                    if (v53 == (v51 ^ 1)) {
                      goto LABEL_21;
                    }
                    if (v53 < v51 || v41 < 1) {
                      goto LABEL_21;
                    }
                    --v41;
                    if (v38 == v37) {
                      goto LABEL_50;
                    }
                  }
                }
LABEL_50:
                unint64_t v55 = &v35[v40];
                size_t v56 = (char *)v32 - (char *)(v55 + 1);
                if (v32 != v55 + 1)
                {
                  size_t v91 = (char *)v32 - (char *)(v55 + 1);
                  int64_t v92 = v55;
                  memmove(v55, v55 + 1, v56);
                  size_t v56 = v91;
                  unint64_t v55 = v92;
                  uint64_t v27 = v94;
                  int v22 = (std::vector<int> *)v95;
                  unint64_t v17 = v96;
                  uint64_t v30 = *((void *)this + 41);
                  uint64_t v35 = *(int **)(v30 + 24 * v28);
                }
                *unint64_t v33 = (char *)v55 + v56;
                unint64_t v32 = *(int **)(v30 + 24 * v28 + 8);
                if (v35 == v32) {
                  return 0;
                }
              }
              uint64_t v46 = *((void *)this + 132);
              if (v46)
              {
                operations_research::sat::DratProofHandler::AddClause(v46, v35, v32 - v35);
                uint64_t v27 = v94;
                int v22 = (std::vector<int> *)v95;
                unint64_t v17 = v96;
                uint64_t v47 = *((void *)this + 41) + 24 * v28;
                uint64_t v35 = *(int **)v47;
                unint64_t v32 = *(int **)(v47 + 8);
              }
              if (v35 == v32)
              {
                int8x8_t v49 = 0;
              }
              else
              {
                unint64_t v48 = (char *)v32 - (char *)v35 - 4;
                if (v48 >= 0xC)
                {
                  uint64_t v57 = (v48 >> 2) + 1;
                  int v50 = &v35[v57 & 0x7FFFFFFFFFFFFFFCLL];
                  uint64_t v58 = (int32x2_t *)(v35 + 2);
                  int8x16_t v59 = 0uLL;
                  uint64_t v60 = v57 & 0x7FFFFFFFFFFFFFFCLL;
                  int8x16_t v61 = 0uLL;
                  do
                  {
                    int32x2_t v62 = v58[-1];
                    int32x2_t v63 = vshr_n_s32(v62, 1uLL);
                    int32x2_t v64 = vshr_n_s32(*v58, 1uLL);
                    int32x2_t v65 = vsub_s32(v63, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v63, (uint32x2_t)vcltz_s32(v62), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                    int32x2_t v66 = vsub_s32(v64, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v64, (uint32x2_t)vcltz_s32(*v58), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                    v67.i64[0] = v65.u32[0];
                    v67.i64[1] = v65.u32[1];
                    uint64x2_t v68 = v67;
                    v67.i64[0] = v66.u32[0];
                    v67.i64[1] = v66.u32[1];
                    uint64x2_t v69 = (uint64x2_t)vdupq_n_s64(1uLL);
                    int8x16_t v59 = vorrq_s8((int8x16_t)vshlq_u64(v69, v68), v59);
                    int8x16_t v61 = vorrq_s8((int8x16_t)vshlq_u64(v69, v67), v61);
                    v58 += 2;
                    v60 -= 4;
                  }
                  while (v60);
                  int8x16_t v70 = vorrq_s8(v61, v59);
                  int8x8_t v49 = vorr_s8(*(int8x8_t *)v70.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
                  if (v57 != (v57 & 0x7FFFFFFFFFFFFFFCLL)) {
                    goto LABEL_58;
                  }
                }
                else
                {
                  int8x8_t v49 = 0;
                  int v50 = v35;
                  do
                  {
LABEL_58:
                    int v71 = *v50++;
                    int v72 = -(v71 >> 1) & 0x3F;
                    int v73 = (v71 >> 1) & 0x3F;
                    if (v71 >> 1 <= 0) {
                      int v73 = -v72;
                    }
                    *(void *)&v49 |= 1 << v73;
                  }
                  while (v50 != v32);
                }
              }
              *(int8x8_t *)(*((void *)this + 44) + 8 * v28) = v49;
              uint64_t v74 = *((void *)this + 32);
              char v26 = 1;
              uint64_t v75 = *(void *)(v74 + 8 * ((unint64_t)v28 >> 6));
              if ((v75 & (1 << v28)) == 0)
              {
                uint64_t v76 = *((void *)this + 37);
                uint64_t v77 = *((void *)this + 36);
                *(void *)(v74 + 8 * ((unint64_t)v28 >> 6)) = v75 | (1 << v28);
                if (v76 == v77) {
                  uint64_t v78 = 0;
                }
                else {
                  uint64_t v78 = ((v76 - v77) << 7) - 1;
                }
                uint64_t v79 = *((void *)this + 40);
                unint64_t v80 = v79 + *((void *)this + 39);
                if (v78 == v80)
                {
                  std::deque<int>::__add_back_capacity((uint64_t)this + 280);
                  uint64_t v27 = v94;
                  int v22 = (std::vector<int> *)v95;
                  unint64_t v17 = v96;
                  uint64_t v77 = *((void *)this + 36);
                  uint64_t v79 = *((void *)this + 40);
                  unint64_t v80 = *((void *)this + 39) + v79;
                }
                *(_DWORD *)(*(void *)(v77 + ((v80 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v80 & 0x3FF)) = v28;
                *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v79 + 1;
                char v26 = 1;
              }
              goto LABEL_22;
            }
          }
LABEL_21:
          v22->__begin_[v25++] = v28;
        }
LABEL_22:
        if (++begin == end)
        {
          uint64_t v81 = (int)v10 ^ 1;
          std::vector<int>::pointer begin = v22->__begin_;
          uint64_t v82 = v25;
          unint64_t v83 = *p_end - v22->__begin_;
          BOOL v84 = v25 >= v83;
          if (v25 <= v83) {
            goto LABEL_71;
          }
          char v85 = v26;
          std::vector<int>::__append(v22, v25 - v83);
          char v26 = v85;
          goto LABEL_73;
        }
      }
    }
    char v26 = 0;
    int v25 = 0;
    uint64_t v81 = (int)v10 ^ 1;
    uint64_t v82 = 0;
    BOOL v84 = 1;
LABEL_71:
    if (!v84) {
      *p_int end = &begin[v82];
    }
LABEL_73:
    uint64_t v86 = *((void *)this + 52);
    *(_DWORD *)(v86 + 4 * v81) = v25;
    if ((v26 & 1) != 0 && *(void *)this != *((void *)this + 1))
    {
      uint64_t v87 = (double *)(*(void *)this + 16 * ((int)v10 >> 1));
      v87[1] = (double)(*(_DWORD *)(v86 + ((4 * (int)v10) | 4))
                      + *(_DWORD *)(v86 + 4 * ((int)v10 & 0x3FFFFFFFFFFFFFFELL)));
      unint64_t v88 = (void *)((char *)this + 24);
      unint64_t v89 = *(unsigned int *)v87;
      if ((v89 & 0x80000000) == 0
        && (uint64_t v90 = *((void *)this + 4), v89 < (*((void *)this + 5) - v90) >> 3)
        && *(double **)(v90 + 8 * v89) == v87)
      {
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)v88, (uint64_t)v87);
      }
      else
      {
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(v88, (uint64_t)v87);
      }
    }
    return 1;
  }
  return result;
}

std::chrono::duration<long long, std::ratio<1, 1000000>>::rep operations_research::sat::SatPresolver::Presolve(uint64_t a1, uint64_t a2, int a3)
{
  if (*operations_research::sat::SatPresolver::Presolve(std::vector<BOOL> const&,BOOL)::vlocal__ < 1)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
LABEL_6:
    if (!a3)
    {
      char v9 = operations_research::sat::SatPresolver::ProcessAllClauses((operations_research::sat::SatPresolver *)a1);
      int v10 = 0;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result = 0;
      if ((v9 & 1) == 0) {
        return result;
      }
      uint64_t v12 = *(void *)(a1 + 1064);
      if (!v12) {
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    goto LABEL_10;
  }
  if (operations_research::sat::SatPresolver::Presolve(std::vector<BOOL> const&,BOOL)::vlocal__ != &google::kLogSiteUninitialized)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
    goto LABEL_10;
  }
  BOOL inited = google::InitVLOG3__((google *)&operations_research::sat::SatPresolver::Presolve(std::vector<BOOL> const&,BOOL)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1);
  BOOL v8 = inited;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)inited);
  if (!v8) {
    goto LABEL_6;
  }
LABEL_10:
  unint64_t v13 = *(void *)(a2 + 8);
  int v14 = v13 & 0x3F;
  if (v13 > 0x3F || v14 != 0)
  {
    int v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = *(void **)a2;
    uint64_t v20 = *(void *)a2 + 8 * (v13 >> 6);
    do
    {
      v17 += (*v19 >> v18) & 1;
      int v21 = v18 + 1;
      v19 += v16 == 63;
      if (v16 == 63) {
        int v16 = 0;
      }
      else {
        int v16 = v21;
      }
      BOOL v22 = v19 == (void *)v20 && v14 == v16;
      int v18 = v16;
    }
    while (!v22);
  }
  google::LogMessage::LogMessage((google::LogMessage *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 336);
  unsigned __int8 v23 = (void *)google::LogMessage::stream((google::LogMessage *)v63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"num removable Booleans: ", 24);
  uint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" / ", 3);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v63);
  google::LogMessage::LogMessage((google::LogMessage *)v63, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 338);
  int v25 = (void *)google::LogMessage::stream((google::LogMessage *)v63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"num trivial clauses: ", 21);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v63);
  operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, 0.0);
  char v26 = (absl::lts_2020_02_25 *)operations_research::sat::SatPresolver::ProcessAllClauses((operations_research::sat::SatPresolver *)a1);
  if ((v26 & 1) == 0) {
    return 0;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = absl::lts_2020_02_25::GetCurrentTimeNanos(v26);
  operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, (double)(v27 - CurrentTimeNanos) * 0.000000001);
  int v10 = 1;
  uint64_t v12 = *(void *)(a1 + 1064);
  if (!v12) {
    goto LABEL_40;
  }
LABEL_25:
  int v28 = *(unsigned __int8 **)(v12 + 120);
  if (!v28 || (unsigned __int8 v29 = atomic_load(v28), (v29 & 1) == 0))
  {
    if (fmax(*(double *)(v12 + 104) - *(double *)(v12 + 112), 0.0) > 0.0)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
      if (*(void *)(v12 + 24) <= v30 - *(void *)(v12 + 8)) {
        uint64_t v31 = v30 - *(void *)(v12 + 8);
      }
      else {
        uint64_t v31 = *(void *)(v12 + 24);
      }
      operations_research::RunningMax<long long>::Add((int *)(v12 + 32), v31);
      *(void *)(v12 + 8) = v30;
      if (*(void *)(*(void *)(v12 + 40) + 8 * *(int *)(v12 + 68)) + v30 >= *(void *)(v12 + 16))
      {
        if (!FLAGS_time_limit_use_usertime
          || ((double v32 = *(double *)(v12 + 96), !*(unsigned char *)(v12 + 72))
            ? (uint64_t v33 = *(void *)(v12 + 88))
            : (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result),
               uint64_t v33 = result - *(void *)(v12 + 80) + *(void *)(v12 + 88)),
              double v34 = v32 + (double)v33 * -0.000000001,
              v34 <= 0.0001))
        {
          *(void *)(v12 + 16) = 0;
          return 1;
        }
        *(void *)(v12 + 16) = *(void *)(v12 + 8) + (uint64_t)(v34 * 1000000000.0);
      }
LABEL_40:
      if ((uint64_t)(*(void *)(a1 + 384) + *(void *)(a1 + 376)) > 1000000000) {
        return 1;
      }
      uint64_t v35 = *(void *)(a1 + 424) - *(void *)(a1 + 416);
      unint64_t v36 = (int)(v35 >> 3);
      unint64_t v37 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
      int v62 = v10;
      if (v36 <= v37)
      {
        if (v36 < v37) {
          *(void *)(a1 + 8) = *(void *)a1 + 16 * v36;
        }
      }
      else
      {
        std::vector<operations_research::sat::SatPresolver::PQElement>::__append((uint64_t *)a1, v36 - v37);
      }
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 1;
        uint64_t v41 = 4;
        do
        {
          uint64_t v42 = *(void *)a1;
          int v43 = (_DWORD *)(*(void *)a1 + v41);
          *int v43 = v39;
          *(double *)(v42 + 8 * v4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = (double)(*(_DWORD *)(*(void *)(a1 + 416) + 4 * (int)v40)
                                              + *(_DWORD *)(*(void *)(a1 + 416) + (v38 >> 30)));
          AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add((void *)(a1 + 24), (uint64_t)(v43 - 1));
          ++v39;
          v40 += 2;
          v38 += 0x200000000;
          v41 += 16;
        }
        while (((unint64_t)v35 >> 3) != v39);
      }
      int v44 = *(int ***)(a1 + 32);
      uint64_t v45 = *(void *)(a1 + 40);
      unint64_t v46 = (unint64_t)(v45 - (void)v44) >> 3;
      if ((int)v46 >= 1)
      {
        do
        {
          int v48 = v46 - 1;
          int v49 = **v44;
          unint64_t v50 = (*v44)[1];
          if (v49 == v48)
          {
            *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v45 - 8;
            if (((*(void *)(*(void *)a2 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v50) & 1) == 0) {
              goto LABEL_73;
            }
          }
          else
          {
            uint64_t v51 = 8 * v49;
            v44[(unint64_t)v51 / 8] = v44[v48];
            uint64_t v52 = *(void *)(a1 + 32);
            **(_DWORD **)(v52 + v51) = v49;
            *(void *)(a1 + 40) -= 8;
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result = AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority(a1 + 24, *(void *)(v52 + v51));
            if (((*(void *)(*(void *)a2 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v50) & 1) == 0) {
              goto LABEL_73;
            }
          }
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result = operations_research::sat::SatPresolver::CrossProduct(a1, 2 * (int)v50);
          if (result)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result = operations_research::sat::SatPresolver::ProcessAllClauses((operations_research::sat::SatPresolver *)a1);
            if (!result) {
              return result;
            }
          }
          uint64_t v53 = *(void *)(a1 + 1064);
          if (v53)
          {
            uint64_t v54 = *(unsigned __int8 **)(v53 + 120);
            if (v54)
            {
              unsigned __int8 v55 = atomic_load(v54);
              if (v55) {
                return 1;
              }
            }
            if (fmax(*(double *)(v53 + 104) - *(double *)(v53 + 112), 0.0) <= 0.0) {
              return 1;
            }
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v56 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
            uint64_t v57 = *(void *)(v53 + 24) <= v56 - *(void *)(v53 + 8)
                ? v56 - *(void *)(v53 + 8)
                : *(void *)(v53 + 24);
            operations_research::RunningMax<long long>::Add((int *)(v53 + 32), v57);
            *(void *)(v53 + 8) = v56;
            if (*(void *)(*(void *)(v53 + 40) + 8 * *(int *)(v53 + 68)) + v56 >= *(void *)(v53 + 16))
            {
              if (!FLAGS_time_limit_use_usertime) {
                goto LABEL_79;
              }
              double v58 = *(double *)(v53 + 96);
              if (*(unsigned char *)(v53 + 72))
              {
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep result = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
                double v47 = v58 + (double)(result - *(void *)(v53 + 80) + *(void *)(v53 + 88)) * -0.000000001;
                if (v47 <= 0.0001)
                {
LABEL_79:
                  *(void *)(v53 + 16) = 0;
                  return 1;
                }
              }
              else
              {
                double v47 = v58 + (double)*(uint64_t *)(v53 + 88) * -0.000000001;
                if (v47 <= 0.0001) {
                  goto LABEL_79;
                }
              }
              *(void *)(v53 + 16) = *(void *)(v53 + 8) + (uint64_t)(v47 * 1000000000.0);
            }
          }
          if ((uint64_t)(*(void *)(a1 + 384) + *(void *)(a1 + 376)) > 1000000000) {
            return 1;
          }
LABEL_73:
          int v44 = *(int ***)(a1 + 32);
          uint64_t v45 = *(void *)(a1 + 40);
          unint64_t v46 = (unint64_t)(v45 - (void)v44) >> 3;
        }
        while ((int)v46 > 0);
      }
      if (v62)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v59 = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)result);
        operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, (double)(v59 - CurrentTimeNanos) * 0.000000001);
        if (*(unsigned char *)(a1 + 873))
        {
          operations_research::sat::SatPresolver::PresolveWithBva((operations_research::sat::SatPresolver *)a1);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v61 = absl::lts_2020_02_25::GetCurrentTimeNanos(v60);
          operations_research::sat::SatPresolver::DisplayStats((operations_research::sat::SatPresolver *)a1, (double)(v61 - CurrentTimeNanos) * 0.000000001);
        }
      }
      else if (*(unsigned char *)(a1 + 873))
      {
        operations_research::sat::SatPresolver::PresolveWithBva((operations_research::sat::SatPresolver *)a1);
      }
    }
  }
  return 1;
}

void sub_23CD9118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD911A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void operations_research::sat::SatPresolver::DisplayStats(operations_research::sat::SatPresolver *this, double a2)
{
  unint64_t v2 = (uint64_t *)*((void *)this + 41);
  uint64_t v3 = (uint64_t *)*((void *)this + 42);
  if (v2 == v3)
  {
    uint64_t v10 = *((void *)this + 52);
    unint64_t v11 = *((void *)this + 53) - v10;
    if ((int)(v11 >> 3) < 1) {
      goto LABEL_26;
    }
    goto LABEL_10;
  }
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  do
  {
    uint64_t v7 = *v2;
    uint64_t v8 = v2[1];
    v2 += 3;
    if (v8 - v7 == 4) {
      int v9 = v6 + 1;
    }
    else {
      int v9 = v6;
    }
    if (v7 != v8)
    {
      int v6 = v9;
      ++v5;
      v4 += (unint64_t)(v8 - v7) >> 2;
    }
  }
  while (v2 != v3);
  uint64_t v10 = *((void *)this + 52);
  unint64_t v11 = *((void *)this + 53) - v10;
  if ((int)(v11 >> 3) >= 1)
  {
LABEL_10:
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    uint64_t v17 = 2 * (v11 >> 3);
    do
    {
      int v18 = *(_DWORD *)(v10 + (v12 >> 30));
      int v19 = *(_DWORD *)(v10 + 4 * ((int)v13 + 1));
      if (v18 | v19)
      {
        ++v16;
        if (v18 == 1 || v19 == 1) {
          int v21 = v15 + 1;
        }
        else {
          int v21 = v15;
        }
        if (v18) {
          BOOL v22 = v19 == 0;
        }
        else {
          BOOL v22 = 1;
        }
        if (v22) {
          ++v14;
        }
        else {
          int v15 = v21;
        }
      }
      v13 += 2;
      v12 += 0x200000000;
    }
    while (v17 != v13);
  }
LABEL_26:
  google::LogMessage::LogMessage((google::LogMessage *)v31, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 923);
  unsigned __int8 v23 = (void *)google::LogMessage::stream((google::LogMessage *)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" [", 2);
  uint64_t v24 = (void *)std::ostream::operator<<();
  int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"s]", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" clauses:", 9);
  char v26 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" literals:", 10);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v27 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" vars:", 6);
  int v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" one_side_vars:", 15);
  unsigned __int8 v29 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" simple_definition:", 19);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v30 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" singleton_clauses:", 19);
  std::ostream::operator<<();
  google::LogMessage::~LogMessage((google::LogMessage *)v31);
}

void sub_23CD913C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SatPresolver::CrossProduct(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 416);
  int v3 = *(_DWORD *)(v2 + 4 * a2);
  uint64_t v4 = a2 ^ 1;
  int v5 = *(_DWORD *)(v2 + 4 * v4);
  if (!(v3 | v5)) {
    return 0;
  }
  BOOL v8 = v3 < 2 || v5 < 2;
  if (!v8 && v5 * v3 > *(_DWORD *)(a1 + 804)) {
    return 0;
  }
  int v9 = *(_DWORD *)(a1 + 816);
  uint64_t v10 = *(void *)(a1 + 392);
  unint64_t v11 = (char **)(v10 + 24 * a2);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
    int v16 = 0;
    goto LABEL_22;
  }
  uint64_t v14 = *(void *)(a1 + 328);
  unint64_t v15 = v13 - v12 - 4;
  if (v15 < 4)
  {
    int v16 = 0;
    uint64_t v17 = v12;
    do
    {
LABEL_19:
      int v32 = *(_DWORD *)v17;
      v17 += 4;
      int v33 = v9 + ((*(void *)(v14 + 24 * v32 + 8) - *(void *)(v14 + 24 * v32)) >> 2);
      if (*(void *)(v14 + 24 * v32 + 8) == *(void *)(v14 + 24 * v32)) {
        int v33 = 0;
      }
      v16 += v33;
    }
    while (v17 != v13);
    goto LABEL_22;
  }
  int v18 = 0;
  int v19 = 0;
  uint64_t v20 = (v15 >> 2) + 1;
  uint64_t v17 = &v12[4 * (v20 & 0x7FFFFFFFFFFFFFFELL)];
  int v21 = (int *)(v12 + 4);
  uint64_t v22 = v20 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    unsigned __int8 v23 = (void *)(v14 + 24 * *(v21 - 1));
    uint64_t v24 = (uint64_t *)(v14 + 24 * *v21);
    uint64_t v26 = *v24;
    uint64_t v25 = v24[1];
    unint64_t v28 = v23[1] - *v23;
    BOOL v27 = v28 == 0;
    int v29 = v9 + (v28 >> 2);
    if (v27) {
      int v29 = 0;
    }
    unint64_t v30 = v25 - v26;
    BOOL v27 = v30 == 0;
    int v31 = v9 + (v30 >> 2);
    if (v27) {
      int v31 = 0;
    }
    v18 += v29;
    v19 += v31;
    v21 += 2;
    v22 -= 2;
  }
  while (v22);
  int v16 = v19 + v18;
  if (v20 != (v20 & 0x7FFFFFFFFFFFFFFELL)) {
    goto LABEL_19;
  }
LABEL_22:
  double v34 = (char **)(v10 + 24 * (int)v4);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  if (v35 != v36)
  {
    uint64_t v37 = *(void *)(a1 + 328);
    unint64_t v38 = v36 - v35 - 4;
    if (v38 >= 4)
    {
      int v40 = 0;
      uint64_t v41 = (v38 >> 2) + 1;
      uint64_t v39 = &v35[4 * (v41 & 0x7FFFFFFFFFFFFFFELL)];
      uint64_t v42 = (int *)(v35 + 4);
      uint64_t v43 = v41 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        int v44 = (void *)(v37 + 24 * *(v42 - 1));
        uint64_t v45 = (uint64_t *)(v37 + 24 * *v42);
        uint64_t v47 = *v45;
        uint64_t v46 = v45[1];
        unint64_t v48 = v44[1] - *v44;
        BOOL v27 = v48 == 0;
        int v49 = v9 + (v48 >> 2);
        if (v27) {
          int v49 = 0;
        }
        unint64_t v50 = v46 - v47;
        BOOL v27 = v50 == 0;
        int v51 = v9 + (v50 >> 2);
        if (v27) {
          int v51 = 0;
        }
        v16 += v49;
        v40 += v51;
        v42 += 2;
        v43 -= 2;
      }
      while (v43);
      v16 += v40;
      if (v41 == (v41 & 0x7FFFFFFFFFFFFFFELL)) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v39 = v35;
    }
    do
    {
      int v52 = *(_DWORD *)v39;
      v39 += 4;
      int v53 = v9 + ((*(void *)(v37 + 24 * v52 + 8) - *(void *)(v37 + 24 * v52)) >> 2);
      if (*(void *)(v37 + 24 * v52 + 8) == *(void *)(v37 + 24 * v52)) {
        int v53 = 0;
      }
      v16 += v53;
    }
    while (v39 != v36);
  }
LABEL_35:
  if (v3 >= v5) {
    int v54 = a2;
  }
  else {
    int v54 = a2 ^ 1;
  }
  unsigned __int8 v55 = (int **)(v10 + 24 * v54);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v56 = *v55;
  uint64_t v57 = v55[1];
  if (*v55 == v57)
  {
    std::string __p = 0;
    uint64_t v87 = 0;
    uint64_t i = 0;
    goto LABEL_65;
  }
  int v58 = 0;
  int v59 = v54 ^ 1;
  while (2)
  {
    int v60 = *v56;
    uint64_t v61 = *(void *)(a1 + 328);
    int v62 = (int **)(v61 + 24 * *v56);
    int32x2_t v63 = *v62;
    int32x2_t v64 = v62[1];
    if (v63 == v64) {
      goto LABEL_40;
    }
    uint64_t v65 = *(void *)(a1 + 392) + 24 * v59;
    int32x2_t v66 = *(int **)v65;
    uint64x2_t v67 = *(int **)(v65 + 8);
    if (v66 == v67) {
      goto LABEL_62;
    }
    char v68 = 1;
    while (2)
    {
      uint64x2_t v69 = (char **)(v61 + 24 * *v66);
      int8x16_t v70 = *v69;
      int v71 = v69[1];
      if (v70 == v71) {
        goto LABEL_44;
      }
      int v72 = ((unint64_t)(v71 - v70) >> 2) + ((unint64_t)((char *)v64 - (char *)v63) >> 2) - 2;
      int v73 = v63;
      while (1)
      {
        int v74 = *(_DWORD *)v70;
        int v75 = *v73;
        if (*v73 == *(_DWORD *)v70)
        {
          --v72;
          ++v73;
          v70 += 4;
          if (v73 == v64) {
            goto LABEL_58;
          }
          goto LABEL_48;
        }
        if (v75 == (v74 ^ 1)) {
          break;
        }
        if (v75 < v74) {
          ++v73;
        }
        else {
          v70 += 4;
        }
        if (v73 == v64) {
          goto LABEL_58;
        }
LABEL_48:
        if (v70 == v71) {
          goto LABEL_58;
        }
      }
      if (v75 != v54) {
        goto LABEL_44;
      }
      ++v73;
      v70 += 4;
      if (v73 != v64) {
        goto LABEL_48;
      }
LABEL_58:
      if ((v72 & 0x80000000) == 0)
      {
        char v68 = 0;
        uint64_t result = 0;
        v58 += v9 + v72;
        if (v58 > v16) {
          return result;
        }
      }
LABEL_44:
      if (++v66 != v67) {
        continue;
      }
      break;
    }
    if (v68)
    {
LABEL_62:
      if (*(unsigned char *)(a1 + 872))
      {
        operations_research::sat::SatPostsolver::Add(*(void *)(a1 + 440), v54, v63, v64 - v63);
        operations_research::sat::SatPresolver::Remove((operations_research::sat::SatPresolver *)a1, v60);
      }
    }
LABEL_40:
    if (++v56 != v57) {
      continue;
    }
    break;
  }
  uint64_t v76 = *(void *)(a1 + 392) + 24 * v54;
  uint64_t v77 = *(int **)v76;
  uint64_t v78 = *(int **)(v76 + 8);
  std::string __p = 0;
  uint64_t v87 = 0;
  for (uint64_t i = 0; v77 != v78; ++v77)
  {
    int v79 = *v77;
    unint64_t v80 = (void *)(*(void *)(a1 + 328) + 24 * *v77);
    if (*v80 != v80[1])
    {
      uint64_t v81 = *(void *)(a1 + 392) + 24 * v59;
      uint64_t v82 = *(int **)v81;
      unint64_t v83 = *(int **)(v81 + 8);
      while (v82 != v83)
      {
        uint64_t v84 = *(void *)(a1 + 328);
        uint64_t v85 = v84 + 24 * *v82;
        if (*(void *)v85 != *(void *)(v85 + 8))
        {
          if (operations_research::sat::ComputeResolvant(v54, (char **)(v84 + 24 * v79), (char **)v85, (unint64_t *)&__p))operations_research::sat::SatPresolver::AddClauseInternal(a1, (uint64_t)&__p); {
        }
          }
        ++v82;
      }
    }
  }
LABEL_65:
  operations_research::sat::SatPresolver::RemoveAndRegisterForPostsolveAllClauseContaining((operations_research::sat::SatPresolver *)a1, v54);
  operations_research::sat::SatPresolver::RemoveAndRegisterForPostsolveAllClauseContaining((operations_research::sat::SatPresolver *)a1, v54 ^ 1);
  if (__p)
  {
    uint64_t v87 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_23CD9186C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::SatPresolver::PresolveWithBva(operations_research::sat::SatPresolver *this)
{
  *((void *)this + 1) = *(void *)this;
  uint64_t v2 = (*((void *)this + 53) - *((void *)this + 52)) >> 2;
  int v3 = (void *)((char *)this + 104);
  *((void *)this + 15) = *((void *)this + 14);
  long long v18 = 0xFFFFFFFFFFFFFFFFLL;
  std::deque<operations_research::sat::SatPresolver::BvaPqElement>::assign((void *)this + 7, (int)(v2 & 0xFFFFFFFE), &v18);
  if ((int)(v2 & 0xFFFFFFFE) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2 & 0xFFFFFFFE;
    do
    {
      unint64_t v6 = v4 + *((void *)this + 11);
      uint64_t v7 = *(void *)(*((void *)this + 8) + ((v6 >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v8 = v7 + 16 * v6;
      *(_DWORD *)(v8 + 4) = v4;
      int v9 = *(_DWORD *)(*((void *)this + 52) + 4 * v4);
      *(double *)(v8 + 8) = (double)v9;
      if (v9 >= 3) {
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add(v3, v7 + 16 * v6);
      }
      ++v4;
    }
    while (v5 != v4);
  }
  uint64_t v10 = (int **)*((void *)this + 14);
  uint64_t v11 = *((void *)this + 15);
  unint64_t v12 = (unint64_t)(v11 - (void)v10) >> 3;
  if ((int)v12 >= 1)
  {
    do
    {
      int v15 = v12 - 1;
      int v16 = **v10;
      std::vector<int>::value_type v17 = (*v10)[1];
      if (v16 == v15)
      {
        *((void *)this + 15) = v11 - 8;
      }
      else
      {
        uint64_t v13 = 8 * v16;
        v10[(unint64_t)v13 / 8] = v10[v15];
        uint64_t v14 = *((void *)this + 14);
        **(_DWORD **)(v14 + v13) = v16;
        *((void *)this + 15) -= 8;
        AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority((uint64_t)v3, *(void *)(v14 + v13));
      }
      operations_research::sat::SatPresolver::SimpleBva(this, v17);
      uint64_t v10 = (int **)*((void *)this + 14);
      uint64_t v11 = *((void *)this + 15);
      unint64_t v12 = (unint64_t)(v11 - (void)v10) >> 3;
    }
    while ((int)v12 > 0);
  }
}

void operations_research::sat::SatPresolver::SimpleBva(operations_research::sat::SatPresolver *a1, std::vector<int>::value_type a2)
{
  uint64_t v191 = *MEMORY[0x263EF8340];
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 50) - *((void *)a1 + 49)) >> 3);
  std::vector<int>::value_type __x = 0;
  uint64_t v4 = *((void *)a1 + 23);
  unint64_t v5 = (*((void *)a1 + 24) - v4) >> 2;
  char v179 = a1;
  char v172 = (uint64_t *)((char *)a1 + 184);
  if (v3 <= v5)
  {
    if (v3 < v5) {
      *((void *)a1 + 24) = v4 + 4 * v3;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)a1 + 184), v3 - v5, &__x);
    a1 = v179;
  }
  std::vector<int>::value_type __x = a2;
  std::string v169 = (void **)((char *)a1 + 136);
  std::__tree<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::__assign_unique<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const*>((uint64_t)a1 + 136, &__x, &v189);
  unint64_t v6 = v179;
  uint64_t v7 = *((void *)v179 + 49);
  uint64_t v8 = (char **)(v7 + 24 * a2);
  std::string v171 = (char **)((char *)v179 + 160);
  if ((char **)((char *)v179 + 160) != v8)
  {
    int v9 = *(char **)(v7 + 24 * a2 + 8);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v171, *v8, v9, (v9 - *v8) >> 2);
    unint64_t v6 = v179;
  }
  uint64_t v10 = (unint64_t *)*((void *)v6 + 26);
  uint64_t v11 = (std::vector<int> *)((char *)v6 + 416);
  unsigned __int8 v180 = (void *)((char *)v6 + 144);
  *((void *)v6 + 27) = v10;
  unint64_t v12 = (unsigned int *)*((void *)v6 + 20);
  uint64_t v13 = (char *)*((void *)v6 + 21);
  unint64_t v173 = (void *)((char *)v6 + 392);
  unsigned __int8 v174 = (unint64_t **)((char *)v6 + 208);
  unsigned __int8 v177 = (std::vector<int> *)((char *)v6 + 416);
  if (v12 == (unsigned int *)v13)
  {
    int v15 = 0;
    unint64_t v93 = *v174;
    if (*v174 == v10) {
      goto LABEL_133;
    }
  }
  else
  {
    int v14 = 0;
    while (1)
    {
      int v170 = v14;
      int v182 = 0;
      int v16 = -1;
      long long v175 = v13;
      do
      {
        uint64_t v17 = *((void *)v6 + 41) + 24 * (int)*v12;
        long long v18 = *(int **)v17;
        uint64_t v20 = (int **)(v17 + 8);
        int v19 = *(int **)(v17 + 8);
        uint64_t v181 = v12;
        if (*(int **)v17 != v19)
        {
          int v21 = 0x7FFFFFFF;
          int v22 = -1;
          do
          {
            uint64_t v23 = *v18;
            if (v23 != a2 && v11->__begin_[v23] < v21)
            {
              int v21 = v11->__begin_[v23];
              int v22 = *v18;
            }
            ++v18;
          }
          while (v18 != v19);
          if (v22 != -1)
          {
            uint64_t v24 = *v173 + 24 * v22;
            uint64_t v25 = *(int **)v24;
            uint64_t v26 = *(int **)(v24 + 8);
            if (*(int **)v24 != v26)
            {
              unint64_t v178 = (unint64_t)*v12 << 32;
              int v176 = *(int **)(v24 + 8);
              do
              {
                int v31 = *v20;
                int v32 = *(int **)v17;
                int v33 = *(int **)(*((void *)v6 + 41) + 24 * *v25);
                double v34 = *(int **)(*((void *)v6 + 41) + 24 * *v25 + 8);
                if ((int *)((char *)*v20 - *(void *)v17) == (int *)((char *)v34 - (char *)v33))
                {
                  if (v32 != v31)
                  {
                    int v35 = -1;
                    do
                    {
                      if (v33 == v34)
                      {
                        if (*v32 != a2) {
                          goto LABEL_27;
                        }
                        goto LABEL_47;
                      }
                      int v36 = *v33;
                      int v37 = *v32;
                      if (*v32 == *v33)
                      {
                        ++v32;
                        ++v33;
                      }
                      else if (v37 >= v36)
                      {
                        if (v35 != -1) {
                          goto LABEL_27;
                        }
                        ++v33;
                        int v35 = v36;
                      }
                      else
                      {
                        if (v37 != a2) {
                          goto LABEL_27;
                        }
                        ++v32;
                      }
                    }
                    while (v32 != v31);
                    if (v33 == v34) {
                      goto LABEL_47;
                    }
                    if (v35 != -1) {
                      goto LABEL_27;
                    }
LABEL_41:
                    int v35 = *v33;
LABEL_47:
                    if (v35 == -1) {
                      goto LABEL_27;
                    }
                    unint64_t v38 = v180;
                    while (1)
                    {
                      unint64_t v38 = (void *)*v38;
                      if (!v38) {
                        break;
                      }
                      int v39 = *(_DWORD *)((char *)v38 + 25);
                      if (v35 >= v39)
                      {
                        if (v39 >= v35) {
                          goto LABEL_27;
                        }
                        ++v38;
                      }
                    }
                    int v185 = v16;
                    if (v35 == (a2 ^ 1)
                      && *operations_research::sat::SatPresolver::SimpleBva(gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>)::vlocal__[0] >= 1)
                    {
                      if (operations_research::sat::SatPresolver::SimpleBva(gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>)::vlocal__[0] != &google::kLogSiteUninitialized
                        || (unint64_t v6 = v179,
                            uint64_t v11 = v177,
                            uint64_t v13 = v175,
                            uint64_t v26 = v176,
                            google::InitVLOG3__((google *)operations_research::sat::SatPresolver::SimpleBva(gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
                      {
                        int v40 = google::LogMessage::LogMessage((google::LogMessage *)&__x, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 421);
                        uint64_t v41 = (void *)google::LogMessage::stream(v40);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"self-subsumbtion", 16);
                        google::LogMessage::~LogMessage((google::LogMessage *)&__x);
                        unint64_t v6 = v179;
                        uint64_t v11 = v177;
                        uint64_t v13 = v175;
                        uint64_t v26 = v176;
                      }
                    }
                    uint64_t v43 = (unint64_t *)*((void *)v6 + 27);
                    unint64_t v42 = *((void *)v6 + 28);
                    if ((unint64_t)v43 < v42)
                    {
                      *uint64_t v43 = v178 | v35;
                      uint64_t v10 = v43 + 1;
                    }
                    else
                    {
                      int v44 = *v174;
                      uint64_t v45 = (char *)v43 - (char *)*v174;
                      uint64_t v46 = v45 >> 3;
                      unint64_t v47 = (v45 >> 3) + 1;
                      if (v47 >> 61) {
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v48 = v42 - (void)v44;
                      if (v48 >> 2 > v47) {
                        unint64_t v47 = v48 >> 2;
                      }
                      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v49 = v47;
                      }
                      if (v49)
                      {
                        if (v49 >> 61) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        unint64_t v50 = v49;
                        int v51 = operator new(8 * v49);
                        unint64_t v49 = v50;
                        uint64_t v26 = v176;
                      }
                      else
                      {
                        int v51 = 0;
                      }
                      int v52 = (unint64_t *)&v51[8 * v46];
                      *int v52 = v178 | v35;
                      uint64_t v10 = v52 + 1;
                      if (v43 == v44)
                      {
                        unint64_t v6 = v179;
                        *((void *)v179 + 26) = v52;
                        *((void *)v179 + 27) = v10;
                        *((void *)v179 + 28) = &v51[8 * v49];
                        uint64_t v11 = v177;
                        if (v43) {
                          goto LABEL_80;
                        }
                      }
                      else
                      {
                        unint64_t v53 = (char *)(v43 - 1) - (char *)v44;
                        if (v53 < 0x58)
                        {
                          unint64_t v6 = v179;
                          goto LABEL_78;
                        }
                        unint64_t v54 = (char *)v43 - &v51[v45];
                        unint64_t v6 = v179;
                        if (v54 < 0x20) {
                          goto LABEL_236;
                        }
                        uint64_t v55 = (v53 >> 3) + 1;
                        uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
                        uint64_t v57 = &v43[v56 / 0xFFFFFFFFFFFFFFF8];
                        int v52 = (unint64_t *)((char *)v52 - v56);
                        int v58 = &v51[8 * v46 - 16];
                        int v59 = v43 - 2;
                        uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v61 = *(_OWORD *)v59;
                          *(v58 - 1) = *((_OWORD *)v59 - 1);
                          *int v58 = v61;
                          v58 -= 2;
                          v59 -= 4;
                          v60 -= 4;
                        }
                        while (v60);
                        uint64_t v43 = v57;
                        if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_236:
                          do
                          {
LABEL_78:
                            unint64_t v62 = *--v43;
                            *--int v52 = v62;
                          }
                          while (v43 != v44);
                        }
                        uint64_t v43 = *v174;
                        *((void *)v6 + 26) = v52;
                        *((void *)v6 + 27) = v10;
                        *((void *)v6 + 28) = &v51[8 * v49];
                        uint64_t v11 = v177;
                        if (v43)
                        {
LABEL_80:
                          int32x2_t v63 = v10;
                          operator delete(v43);
                          uint64_t v10 = v63;
                        }
                      }
                      uint64_t v13 = v175;
                    }
                    *((void *)v6 + 27) = v10;
                    uint64_t v27 = *((void *)v6 + 23);
                    uint64_t v28 = 4 * v35;
                    int v29 = *(_DWORD *)(v27 + v28);
                    *(_DWORD *)(v27 + v28) = v29 + 1;
                    int v30 = v182;
                    int v16 = v185;
                    if (v29 >= v182)
                    {
                      int v16 = v35;
                      int v30 = v29 + 1;
                    }
                    int v182 = v30;
                    goto LABEL_27;
                  }
                  if (v33 != v34) {
                    goto LABEL_41;
                  }
                }
LABEL_27:
                ++v25;
              }
              while (v25 != v26);
            }
          }
        }
        unint64_t v12 = v181 + 1;
      }
      while (v181 + 1 != (unsigned int *)v13);
      if (v16 == -1) {
        break;
      }
      if (~*((_DWORD *)v6 + 38) + v182 * *((_DWORD *)v6 + 38) <= v170)
      {
        int v15 = v170;
        unint64_t v93 = *v174;
        if (*v174 != v10) {
          goto LABEL_131;
        }
        goto LABEL_133;
      }
      int v183 = ~*((_DWORD *)v6 + 38) + v182 * *((_DWORD *)v6 + 38);
      int32x2_t v64 = (char **)v180;
      uint64_t v65 = (char *)*v180;
      int32x2_t v66 = (char **)v180;
      int v186 = v16;
      if (!*v180)
      {
LABEL_91:
        char v68 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v68 + 25) = v16;
        *(void *)char v68 = 0;
        *((void *)v68 + 1) = 0;
        *((void *)v68 + 2) = v64;
        *int32x2_t v66 = v68;
        uint64x2_t v69 = (void *)**v169;
        if (v69)
        {
          void *v169 = v69;
          char v68 = *v66;
        }
        unint64_t v6 = v179;
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v179 + 18), (uint64_t *)v68);
        uint64_t v13 = (char *)*((void *)v179 + 20);
        ++*((void *)v179 + 19);
        int8x16_t v70 = (unint64_t *)*((void *)v179 + 26);
        uint64_t v10 = (unint64_t *)*((void *)v179 + 27);
        uint64_t v11 = v177;
        *((void *)v179 + 21) = v13;
        if (v70 == v10) {
          goto LABEL_10;
        }
LABEL_96:
        int v71 = v10;
        while (2)
        {
          unint64_t v73 = *v70;
          *(_DWORD *)(*v172 + ((uint64_t)(*v70 << 32) >> 30)) = 0;
          if (v16 == v73)
          {
            unint64_t v74 = HIDWORD(v73);
            unint64_t v75 = *((void *)v6 + 22);
            if ((unint64_t)v13 < v75)
            {
              *(_DWORD *)uint64_t v13 = v74;
              uint64_t v72 = (uint64_t)(v13 + 4);
            }
            else
            {
              uint64_t v76 = *v171;
              uint64_t v77 = v13 - *v171;
              uint64_t v78 = v77 >> 2;
              unint64_t v79 = (v77 >> 2) + 1;
              if (v79 >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v80 = v75 - (void)v76;
              if (v80 >> 1 > v79) {
                unint64_t v79 = v80 >> 1;
              }
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v81 = v79;
              }
              if (v81)
              {
                if (v81 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v82 = operator new(4 * v81);
                uint64_t v10 = v71;
                unint64_t v83 = &v82[4 * v78];
                _DWORD *v83 = v74;
                uint64_t v72 = (uint64_t)(v83 + 1);
                if (v13 != v76)
                {
LABEL_111:
                  unint64_t v84 = v13 - 4 - v76;
                  if (v84 < 0xBC
                    || &v82[v77 - 4 - (v84 & 0xFFFFFFFFFFFFFFFCLL)] > &v82[v77 - 4]
                    || &v13[-(v84 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v13 - 4
                    || (unint64_t)(v13 - v82 - v77) < 0x20)
                  {
                    uint64_t v85 = v13;
                    unint64_t v6 = v179;
                    uint64_t v11 = v177;
                  }
                  else
                  {
                    uint64_t v87 = (v84 >> 2) + 1;
                    uint64_t v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v85 = &v13[-v88];
                    unint64_t v83 = (_DWORD *)((char *)v83 - v88);
                    unint64_t v89 = &v82[4 * v78 - 16];
                    uint64_t v90 = v13 - 16;
                    uint64_t v91 = v87 & 0x7FFFFFFFFFFFFFF8;
                    unint64_t v6 = v179;
                    do
                    {
                      long long v92 = *(_OWORD *)v90;
                      *(v89 - 1) = *((_OWORD *)v90 - 1);
                      *unint64_t v89 = v92;
                      v89 -= 2;
                      v90 -= 32;
                      v91 -= 8;
                    }
                    while (v91);
                    uint64_t v11 = v177;
                    if (v87 == (v87 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_114:
                      *((void *)v6 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v83;
                      *((void *)v6 + 21) = v72;
                      *((void *)v6 + 22) = &v82[4 * v81];
                      if (v76) {
                        goto LABEL_115;
                      }
                      goto LABEL_116;
                    }
                  }
                  do
                  {
                    int v86 = *((_DWORD *)v85 - 1);
                    v85 -= 4;
                    *--unint64_t v83 = v86;
                  }
                  while (v85 != v76);
                  goto LABEL_114;
                }
              }
              else
              {
                uint64_t v82 = 0;
                unint64_t v83 = (_DWORD *)(4 * v78);
                *(_DWORD *)(4 * v78) = v74;
                uint64_t v72 = 4 * v78 + 4;
                if (v13 != v76) {
                  goto LABEL_111;
                }
              }
              unint64_t v6 = v179;
              uint64_t v11 = v177;
              *((void *)v179 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v83;
              *((void *)v179 + 21) = v72;
              *((void *)v179 + 22) = &v82[4 * v81];
              if (v76)
              {
LABEL_115:
                operator delete(v76);
                uint64_t v10 = v71;
              }
LABEL_116:
              int v16 = v186;
            }
            *((void *)v6 + 21) = v72;
            uint64_t v13 = (char *)v72;
          }
          if (++v70 == v10)
          {
            uint64_t v10 = *v174;
            goto LABEL_10;
          }
          continue;
        }
      }
      while (1)
      {
        while (1)
        {
          int32x2_t v64 = (char **)v65;
          int v67 = *(_DWORD *)(v65 + 25);
          if (v16 >= v67) {
            break;
          }
          uint64_t v65 = *v64;
          int32x2_t v66 = v64;
          if (!*v64) {
            goto LABEL_91;
          }
        }
        if (v67 >= v16) {
          break;
        }
        uint64_t v65 = v64[1];
        if (!v65)
        {
          int32x2_t v66 = v64 + 1;
          goto LABEL_91;
        }
      }
      uint64_t v11 = v177;
      uint64_t v13 = (char *)*((void *)v6 + 20);
      *((void *)v6 + 21) = v13;
      int8x16_t v70 = (unint64_t *)*((void *)v6 + 26);
      if (v70 != v10) {
        goto LABEL_96;
      }
LABEL_10:
      *((void *)v6 + 27) = v10;
      unint64_t v12 = (unsigned int *)*((void *)v6 + 20);
      int v15 = v183;
      int v14 = v183;
      if (v12 == (unsigned int *)v13) {
        goto LABEL_130;
      }
    }
    int v15 = v170;
LABEL_130:
    unint64_t v93 = *v174;
    if (*v174 == v10) {
      goto LABEL_133;
    }
  }
LABEL_131:
  uint64_t v94 = *v172;
  uint64_t v95 = (int *)v93;
  do
  {
    uint64_t v96 = *v95;
    v95 += 2;
    *(_DWORD *)(v94 + 4 * v96) = 0;
  }
  while (v95 != (int *)v10);
LABEL_133:
  *((void *)v6 + 27) = v93;
  if (v15 > *((_DWORD *)v6 + 216))
  {
    uint64_t v98 = *((void *)v6 + 49);
    uint64_t v97 = *((void *)v6 + 50);
    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v98) >> 3);
    int64_t v100 = 0xAAAAAAAB00000000 * ((v97 - v98) >> 3);
    unint64_t v101 = (v100 + 0x200000000) >> 32;
    if (v101 <= v99)
    {
      if (v101 < v99)
      {
        uint64_t v102 = v98 + 24 * (int)v101;
        if (v97 != v102)
        {
          uint64_t v103 = *((void *)v6 + 50);
          do
          {
            unint64_t v105 = *(void **)(v103 - 24);
            v103 -= 24;
            long long v104 = v105;
            if (v105)
            {
              *(void *)(v97 - 16) = v104;
              operator delete(v104);
            }
            uint64_t v97 = v103;
          }
          while (v103 != v102);
        }
        unint64_t v6 = v179;
        *((void *)v179 + 5google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v102;
      }
    }
    else
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)v173, v101 - v99);
      unint64_t v6 = v179;
    }
    uint64_t v106 = *((void *)v6 + 52);
    unint64_t v107 = (*((void *)v6 + 53) - v106) >> 2;
    if (v101 <= v107)
    {
      if (v101 < v107) {
        *((void *)v6 + 53) = v106 + 4 * v101;
      }
    }
    else
    {
      std::vector<int>::__append(v177, v101 - v107);
      unint64_t v6 = v179;
    }
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::resize((void *)v6 + 7, (v100 + 0x200000000) >> 32);
    uint64_t v108 = *((void *)v179 + 11);
    uint64_t v187 = v100 >> 32;
    uint64_t v109 = *((void *)v179 + 8);
    *(_DWORD *)(*(void *)(v109 + (((unint64_t)(v108 + (v100 >> 32)) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (v108 + BYTE4(v100))
              + 4) = v99;
    uint64_t v184 = (int)v99 + 1;
    *(_DWORD *)(*(void *)(v109 + (((unint64_t)(v108 + v184) >> 5) & 0x7FFFFFFFFFFFFF8))
              + 16 * (v108 + v99 + 1)
              + 4) = v99 + 1;
    unint64_t v110 = (operations_research::sat::DratProofHandler *)*((void *)v179 + 132);
    if (v110) {
      operations_research::sat::DratProofHandler::AddOneVariable(v110);
    }
    double v111 = *v169;
    if (*v169 != v180)
    {
      unint64_t v112 = (void *)((char *)v179 + 232);
      do
      {
        std::vector<int>::value_type __x = *(_DWORD *)((char *)v111 + 25);
        int v189 = v99;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v112, (char *)&__x, v190, 2uLL);
        operations_research::sat::SatPresolver::AddClauseInternal((uint64_t)v179, (uint64_t)v112);
        uint64_t v113 = (void *)v111[1];
        if (v113)
        {
          do
          {
            unint64_t v114 = v113;
            uint64_t v113 = (void *)*v113;
          }
          while (v113);
        }
        else
        {
          do
          {
            unint64_t v114 = (void *)v111[2];
            BOOL v115 = *v114 == (void)v111;
            double v111 = v114;
          }
          while (!v115);
        }
        double v111 = v114;
      }
      while (v114 != v180);
    }
    uint64_t v116 = (int *)*((void *)v179 + 20);
    uint64_t v117 = (int *)*((void *)v179 + 21);
    if (v116 != v117)
    {
      uint64_t v118 = (char **)((char *)v179 + 232);
      do
      {
        uint64_t v119 = *((void *)v179 + 41);
        int64_t v120 = (char **)(v119 + 24 * *v116);
        if (v118 != v120)
        {
          uint64_t v121 = *(char **)(v119 + 24 * *v116 + 8);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v118, *v120, v121, (v121 - *v120) >> 2);
        }
        unint64_t v122 = (int *)*((void *)v179 + 29);
        uint64_t v123 = (char *)*((void *)v179 + 30);
        if (v122 != (int *)v123)
        {
          uint64_t v124 = (_DWORD *)*((void *)v179 + 29);
          while (*v124 != a2)
          {
            if (++v124 == (_DWORD *)v123) {
              goto LABEL_170;
            }
          }
          *uint64_t v124 = v99 + 1;
        }
LABEL_170:
        unint64_t v125 = 126 - 2 * __clz((v123 - (char *)v122) >> 2);
        if (v123 == (char *)v122) {
          uint64_t v126 = 0;
        }
        else {
          uint64_t v126 = v125;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,operations_research::sat::Literal *,false>(v122, v123, (uint64_t)&__x, v126, 1);
        operations_research::sat::SatPresolver::AddClauseInternal((uint64_t)v179, (uint64_t)v118);
        ++v116;
      }
      while (v116 != v117);
      unint64_t v128 = (int *)*((void *)v179 + 20);
      for (uint64_t i = (int *)*((void *)v179 + 21); v128 != i; ++v128)
      {
        int v129 = *v128;
        double v130 = v179;
        uint64_t v131 = *((void *)v179 + 41) + 24 * *v128;
        unint64_t v132 = *(int **)v131;
        uint64_t v134 = (int **)(v131 + 8);
        uint64_t v133 = *(int **)(v131 + 8);
        if (*(int **)v131 == v133)
        {
          int v136 = -1;
          int v137 = v169;
        }
        else
        {
          int v135 = 0x7FFFFFFF;
          int v136 = -1;
          int v137 = v169;
          do
          {
            uint64_t v138 = *v132;
            if (v138 != a2 && v177->__begin_[v138] < v135)
            {
              int v135 = v177->__begin_[v138];
              int v136 = *v132;
            }
            ++v132;
          }
          while (v132 != v133);
        }
        long long v139 = (void *)*v137;
        if ((void *)*v137 != v180)
        {
          int v140 = v136;
          do
          {
            int v141 = *(_DWORD *)((char *)v139 + 25);
            if (v141 != a2)
            {
              uint64_t v142 = *v173 + 24 * v140;
              uint64_t v143 = *(int **)v142;
              unint64_t v144 = *(int **)(v142 + 8);
              if (v143 != v144)
              {
                uint64_t v145 = *((void *)v130 + 41);
                uint64_t v146 = (uint64_t)*v134 - *(void *)v131;
                if (*v134 == *(int **)v131)
                {
                  while (1)
                  {
                    int v148 = *v143;
                    int v155 = *(char **)(v145 + 24 * *v143);
                    long long v156 = *(char **)(v145 + 24 * *v143 + 8);
                    if (v146 == v156 - v155)
                    {
                      if (v155 == v156)
                      {
                        if (v141 == -1) {
                          goto LABEL_214;
                        }
                      }
                      else if (*(_DWORD *)v155 == v141)
                      {
                        goto LABEL_214;
                      }
                    }
                    if (++v143 == v144) {
                      goto LABEL_215;
                    }
                  }
                }
                while (1)
                {
                  int v148 = *v143;
                  BOOL v149 = (int **)(v145 + 24 * *v143);
                  uint64_t v150 = *v149;
                  int v151 = v149[1];
                  if (v146 == (char *)v151 - (char *)*v149)
                  {
                    int v147 = -1;
                    BOOL v152 = *(int **)v131;
                    do
                    {
                      if (v150 == v151)
                      {
                        if (*v152 != a2) {
                          int v147 = -1;
                        }
                        goto LABEL_192;
                      }
                      int v153 = *v150;
                      int v154 = *v152;
                      if (*v152 == *v150)
                      {
                        ++v152;
                        ++v150;
                      }
                      else if (v154 >= v153)
                      {
                        if (v147 != -1) {
                          goto LABEL_207;
                        }
                        ++v150;
                        int v147 = v153;
                      }
                      else
                      {
                        if (v154 != a2) {
                          goto LABEL_207;
                        }
                        ++v152;
                      }
                    }
                    while (v152 != *v134);
                    if (v150 == v151) {
                      goto LABEL_192;
                    }
                    if (v147 != -1)
                    {
LABEL_207:
                      int v147 = -1;
                      goto LABEL_192;
                    }
                    int v147 = *v150;
LABEL_192:
                    if (v147 == v141) {
                      break;
                    }
                  }
                  if (++v143 == v144) {
                    goto LABEL_215;
                  }
                }
LABEL_214:
                operations_research::sat::SatPresolver::Remove(v130, v148);
                double v130 = v179;
              }
            }
LABEL_215:
            long long v157 = (void *)v139[1];
            if (v157)
            {
              do
              {
                long long v158 = v157;
                long long v157 = (void *)*v157;
              }
              while (v157);
            }
            else
            {
              do
              {
                long long v158 = (void *)v139[2];
                BOOL v115 = *v158 == (void)v139;
                long long v139 = v158;
              }
              while (!v115);
            }
            long long v139 = v158;
          }
          while (v158 != v180);
        }
        operations_research::sat::SatPresolver::Remove(v130, v129);
      }
    }
    __n128 v159 = v179;
    if (*((void *)v179 + 12))
    {
      unint64_t v160 = *((void *)v179 + 11) + v187;
      uint64_t v161 = *(void *)(*((void *)v179 + 8) + ((v160 >> 5) & 0x7FFFFFFFFFFFFF8));
      int v162 = *(_DWORD *)(*((void *)v179 + 52) + 4 * v187);
      *(double *)(v161 + 16 * v160 + 8) = (double)v162;
      if (v162 < 3
        || (AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add((void *)v179 + 13, v161 + 16 * v160), __n128 v159 = v179, *((void *)v179 + 12)))
      {
        unint64_t v163 = *((void *)v159 + 11) + v184;
        uint64_t v164 = *(void *)(*((void *)v159 + 8) + ((v163 >> 5) & 0x7FFFFFFFFFFFFF8));
        int v165 = *(_DWORD *)(*((void *)v159 + 52) + 4 * v184);
        *(double *)(v164 + 16 * v163 + 8) = (double)v165;
        if (v165 < 3
          || (AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add((void *)v159 + 13, v164 + 16 * v163), __n128 v159 = v179, *((void *)v179 + 12)))
        {
          unint64_t v166 = *((void *)v159 + 11) + a2;
          uint64_t v167 = *(void *)(*((void *)v159 + 8) + ((v166 >> 5) & 0x7FFFFFFFFFFFFF8));
          int v168 = *(_DWORD *)(*((void *)v159 + 52) + 4 * a2);
          *(double *)(v167 + 16 * v166 + 8) = (double)v168;
          if (v168 >= 3) {
            AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add((void *)v159 + 13, v167 + 16 * v166);
          }
        }
      }
    }
  }
}

void sub_23CD92884(_Unwind_Exception *a1)
{
  google::LogMessage::~LogMessage((google::LogMessage *)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::resize(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[5];
  if (a2 > v3)
  {
    unint64_t v4 = a2 - v3;
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(a1, v4);
    return;
  }
  if (a2 >= v3) {
    return;
  }
  unint64_t v5 = a1[4];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = (char *)(v7 + 8 * (v5 >> 8));
  if (v6 == v7)
  {
    uint64_t v9 = 0;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = *(void *)v8 + 16 * v5;
    if (!a2)
    {
LABEL_12:
      unsigned __int8 v11 = v5 + v3;
      unint64_t v12 = (char *)(v7 + 8 * ((v5 + v3) >> 8));
      uint64_t v13 = v6 - v7;
      if (v6 != v7) {
        goto LABEL_13;
      }
      goto LABEL_16;
    }
  }
  uint64_t v10 = a2 + ((v9 - *(void *)v8) >> 4);
  if (v10 >= 1)
  {
    v8 += 8 * ((unint64_t)v10 >> 8);
    uint64_t v9 = *(void *)v8 + 16 * v10;
    goto LABEL_12;
  }
  unint64_t v15 = 255 - v10;
  v8 -= 8 * (v15 >> 8);
  uint64_t v9 = *(void *)v8 + 16 * ~(_BYTE)v15;
  unsigned __int8 v11 = v5 + v3;
  unint64_t v12 = (char *)(v7 + 8 * ((v5 + v3) >> 8));
  uint64_t v13 = v6 - v7;
  if (v6 != v7)
  {
LABEL_13:
    uint64_t v14 = *(void *)v12 + 16 * v11;
    if (v9 == v14) {
      return;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v14 = 0;
  if (!v9) {
    return;
  }
LABEL_17:
  uint64_t v16 = ((v14 - *(void *)v12) >> 4) + 32 * (v12 - v8) - ((v9 - *(void *)v8) >> 4);
  if (v16 >= 1)
  {
    uint64_t v17 = v6 == v7 ? 0 : 32 * v13 - 1;
    unint64_t v18 = v3 - v16;
    a1[5] = v18;
    if (v17 - v5 - v18 >= 0x200)
    {
      do
      {
        operator delete(*(void **)(v6 - 8));
        uint64_t v19 = a1[1];
        uint64_t v6 = a1[2] - 8;
        a1[2] = v6;
        if (v6 == v19) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = 32 * (v6 - v19) - 1;
        }
      }
      while ((unint64_t)(v20 - (a1[5] + a1[4])) > 0x1FF);
    }
  }
}

void operations_research::sat::SatPresolver::Remove(operations_research::sat::SatPresolver *this, int a2)
{
  *(void *)(*((void *)this + 44) + 8 * a2) = 0;
  uint64_t v4 = *((void *)this + 41);
  unint64_t v5 = (int **)(v4 + 24 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    while (1)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *((void *)this + 52);
      --*(_DWORD *)(v9 + 4 * v8);
      if (*(void *)this == *((void *)this + 1)) {
        goto LABEL_9;
      }
      uint64_t v10 = (double *)(*(void *)this + 16 * ((int)v8 >> 1));
      v10[1] = (double)(*(_DWORD *)(v9 + 4 * (int)(v8 | 1)) + *(_DWORD *)(v9 + 4 * (int)(v8 & 0xFFFFFFFE)));
      unint64_t v11 = *(unsigned int *)v10;
      if ((v11 & 0x80000000) != 0) {
        break;
      }
      uint64_t v12 = *((void *)this + 4);
      if (v11 >= (*((void *)this + 5) - v12) >> 3 || *(double **)(v12 + 8 * v11) != v10) {
        break;
      }
      AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)this + 24, (uint64_t)v10);
      if (*((void *)this + 12))
      {
LABEL_10:
        uint64_t v13 = (double *)(*(void *)(*((void *)this + 8)
                                   + (((*((void *)this + 11) + (v8 & 0xFFFFFFFFFFFFFFFELL)) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (*((unsigned char *)this + 88) + (v8 & 0xFE)));
        v13[1] = (double)*(int *)(*((void *)this + 52) + 4 * (v8 & 0xFFFFFFFFFFFFFFFELL));
        unint64_t v14 = *(unsigned int *)v13;
        if ((v14 & 0x80000000) != 0
          || (uint64_t v15 = *((void *)this + 14), v14 >= (*((void *)this + 15) - v15) >> 3)
          || *(double **)(v15 + 8 * v14) != v13
          || (AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority((uint64_t)this + 104, (uint64_t)v13), *((void *)this + 12)))
        {
          uint64_t v16 = (double *)(*(void *)(*((void *)this + 8)
                                     + (((*((void *)this + 11) + (v8 | 1uLL)) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * (*((unsigned char *)this + 88) + (v8 | 1)));
          v16[1] = (double)*(int *)(*((void *)this + 52) + 4 * (v8 | 1));
          unint64_t v17 = *(unsigned int *)v16;
          if ((v17 & 0x80000000) == 0)
          {
            uint64_t v18 = *((void *)this + 14);
            if (v17 < (*((void *)this + 15) - v18) >> 3 && *(double **)(v18 + 8 * v17) == v16) {
              AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority((uint64_t)this + 104, (uint64_t)v16);
            }
          }
        }
      }
LABEL_3:
      if (++v6 == v7)
      {
        uint64_t v4 = *((void *)this + 41);
        goto LABEL_21;
      }
    }
    AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add((void *)this + 3, (uint64_t)v10);
LABEL_9:
    if (*((void *)this + 12)) {
      goto LABEL_10;
    }
    goto LABEL_3;
  }
LABEL_21:
  uint64_t v19 = *((void *)this + 132);
  if (v19)
  {
    operations_research::sat::DratProofHandler::DeleteClause(v19, *(int **)(v4 + 24 * a2), (uint64_t)(*(void *)(v4 + 24 * a2 + 8) - *(void *)(v4 + 24 * a2)) >> 2);
    uint64_t v4 = *((void *)this + 41);
  }
  uint64_t v20 = v4 + 24 * a2;
  int v21 = *(void **)v20;
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = 0;
  *(void *)uint64_t v20 = 0;
  if (v21)
  {
    operator delete(v21);
  }
}

uint64_t operations_research::sat::SatPresolver::ProcessClauseToSimplifyOthersUsingLiteral(operations_research::sat::SatPresolver *this, int a2, int a3)
{
  uint64_t v3 = *((void *)this + 41);
  uint64_t v4 = *(void *)(*((void *)this + 44) + 8 * a2);
  uint64_t v5 = *((void *)this + 49) + 24 * a3;
  uint64_t v6 = *(__int32 **)v5;
  uint64_t v7 = *(__int32 **)(v5 + 8);
  *((void *)this + 47) += ((uint64_t)v7 - *(void *)v5) >> 2;
  if (v7 != v6)
  {
    char v10 = 0;
    unint64_t v11 = (int **)(v3 + 24 * a2);
    uint64_t v12 = v11 + 1;
    unint64_t v107 = (void *)((char *)this + 24);
    uint64_t v106 = (char *)this + 280;
    while (1)
    {
      __int32 v16 = *v6;
      uint64_t v17 = *(void *)(*((void *)this + 44) + 8 * *v6);
      if (!v17) {
        goto LABEL_4;
      }
      uint64_t v18 = v4 & ~v17;
      if (v16 == a2 || v18 != 0) {
        goto LABEL_5;
      }
      unint64_t v20 = v16;
      uint64_t v21 = *((void *)this + 41);
      uint64_t v22 = v21 + 24 * v16;
      uint64_t v25 = *(unsigned char **)(v22 + 8);
      uint64_t v24 = (void *)(v22 + 8);
      uint64_t v23 = v25;
      uint64_t v26 = *(void *)(v21 + 24 * v16);
      unint64_t v27 = (uint64_t)&v25[-v26] >> 2;
      uint64_t v28 = *v12;
      int v29 = *v11;
      unint64_t v30 = *v12 - *v11;
      if (v27 < v30) {
        goto LABEL_5;
      }
      *((void *)this + 48) += v30 + v27;
      if (v29 != v28) {
        break;
      }
LABEL_3:
      uint64_t v13 = v11;
      int v14 = v16;
      uint64_t v15 = v12;
      operations_research::sat::SatPresolver::Remove(this, v14);
      uint64_t v12 = v15;
      unint64_t v11 = v13;
LABEL_4:
      char v10 = 1;
LABEL_5:
      if (++v6 == v7)
      {
        if (v10)
        {
          uint64_t v91 = (std::vector<int> *)(*((void *)this + 49) + 24 * a3);
          std::vector<int>::pointer begin = v91->__begin_;
          int end = v91->__end_;
          if (v91->__begin_ == end)
          {
            int v94 = 0;
          }
          else
          {
            int v94 = 0;
            uint64_t v95 = *((void *)this + 44);
            std::vector<int>::pointer v96 = v91->__begin_;
            do
            {
              uint64_t v97 = *v96;
              if (*(void *)(v95 + 8 * v97)) {
                begin[v94++] = v97;
              }
              ++v96;
            }
            while (v96 != end);
          }
          unint64_t v98 = end - begin;
          if (v94 <= v98)
          {
            if (v94 < v98) {
              v91->__end_ = &begin[v94];
            }
          }
          else
          {
            std::vector<int>::__append(v91, v94 - v98);
          }
        }
        return 1;
      }
    }
    uint64_t v31 = 0;
    int v32 = v27 - v30;
    int v33 = (int *)(v26 + 4);
    while (1)
    {
      while (1)
      {
        int v34 = *(_DWORD *)(v26 + v31);
        int v35 = *v29;
        if (*v29 != v34) {
          break;
        }
        ++v29;
        v31 += 4;
        ++v33;
        if (v29 == v28) {
          goto LABEL_3;
        }
      }
      if (v35 == (v34 ^ 1)) {
        break;
      }
      if (v35 < v34 || v32 < 1) {
        goto LABEL_5;
      }
      --v32;
      v31 += 4;
      ++v33;
      if (v29 == v28) {
        goto LABEL_3;
      }
    }
    int v37 = v29 + 1;
    if (v37 == v28)
    {
      unint64_t v38 = (char *)(v26 + v31);
      int v39 = (unsigned char *)(v26 + v31 + 4);
      size_t v40 = v23 - v39;
      long long v104 = v11;
      unint64_t v105 = v16;
      uint64_t v103 = v12;
      if (v23 == v39) {
        goto LABEL_27;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          int v50 = *v33++;
          int v49 = v50;
          int v51 = *v37;
          if (*v37 != v50) {
            break;
          }
          if (++v37 == v28) {
            goto LABEL_42;
          }
        }
        if (v51 == (v49 ^ 1)) {
          goto LABEL_5;
        }
        if (v51 < v49 || v32 < 1) {
          goto LABEL_5;
        }
        --v32;
      }
      while (v37 != v28);
LABEL_42:
      int v34 = *(_DWORD *)(v26 + v31);
      unint64_t v38 = (char *)(v26 + v31);
      int v39 = (unsigned char *)(v26 + v31 + 4);
      size_t v40 = v23 - v39;
      long long v104 = v11;
      unint64_t v105 = v16;
      uint64_t v103 = v12;
      if (v23 == v39)
      {
LABEL_27:
        *uint64_t v24 = &v38[v40];
        if (v34 != -1)
        {
          uint64_t v41 = *((void *)this + 41) + 24 * (int)v20;
          unint64_t v42 = *(int **)v41;
          uint64_t v43 = *(int **)(v41 + 8);
          if (v42 == v43) {
            return 0;
          }
          uint64_t v44 = *((void *)this + 132);
          if (v44)
          {
            operations_research::sat::DratProofHandler::AddClause(v44, v42, v43 - v42);
            unint64_t v20 = v105;
            uint64_t v45 = *((void *)this + 41) + 24 * (int)v105;
            unint64_t v42 = *(int **)v45;
            uint64_t v43 = *(int **)(v45 + 8);
          }
          if (v42 == v43)
          {
            int8x8_t v47 = 0;
          }
          else
          {
            unint64_t v46 = (char *)v43 - (char *)v42 - 4;
            if (v46 >= 0xC)
            {
              uint64_t v53 = (v46 >> 2) + 1;
              uint64_t v48 = &v42[v53 & 0x7FFFFFFFFFFFFFFCLL];
              unint64_t v54 = (int32x2_t *)(v42 + 2);
              int8x16_t v55 = 0uLL;
              uint64_t v56 = v53 & 0x7FFFFFFFFFFFFFFCLL;
              int8x16_t v57 = 0uLL;
              do
              {
                int32x2_t v58 = v54[-1];
                int32x2_t v59 = vshr_n_s32(v58, 1uLL);
                int32x2_t v60 = vshr_n_s32(*v54, 1uLL);
                int32x2_t v61 = vsub_s32(v59, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v59, (uint32x2_t)vcltz_s32(v58), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                int32x2_t v62 = vsub_s32(v60, (int32x2_t)(*(void *)&vsra_n_u32((uint32x2_t)v60, (uint32x2_t)vcltz_s32(*v54), 0x1AuLL) & 0xFFFFFFC0FFFFFFC0));
                v63.i64[0] = v61.u32[0];
                v63.i64[1] = v61.u32[1];
                uint64x2_t v64 = v63;
                v63.i64[0] = v62.u32[0];
                v63.i64[1] = v62.u32[1];
                uint64x2_t v65 = (uint64x2_t)vdupq_n_s64(1uLL);
                int8x16_t v55 = vorrq_s8((int8x16_t)vshlq_u64(v65, v64), v55);
                int8x16_t v57 = vorrq_s8((int8x16_t)vshlq_u64(v65, v63), v57);
                v54 += 2;
                v56 -= 4;
              }
              while (v56);
              int8x16_t v66 = vorrq_s8(v57, v55);
              int8x8_t v47 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
              if (v53 != (v53 & 0x7FFFFFFFFFFFFFFCLL)) {
                goto LABEL_48;
              }
            }
            else
            {
              int8x8_t v47 = 0;
              uint64_t v48 = v42;
              do
              {
LABEL_48:
                int v67 = *v48++;
                int v68 = -(v67 >> 1) & 0x3F;
                int v69 = (v67 >> 1) & 0x3F;
                if (v67 >> 1 <= 0) {
                  int v69 = -v68;
                }
                *(void *)&v47 |= 1 << v69;
              }
              while (v48 != v43);
            }
          }
          *(int8x8_t *)(*((void *)this + 44) + 8 * v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v47;
          uint64_t v70 = *((void *)this + 49) + 24 * v34;
          int v71 = *(__int32 **)(v70 + 8);
          uint64_t v102 = (__int32 **)(v70 + 8);
          uint64_t v72 = wmemchr(*(__int32 **)v70, v16, ((uint64_t)v71 - *(void *)v70) >> 2);
          if (v72) {
            unint64_t v73 = v72;
          }
          else {
            unint64_t v73 = v71;
          }
          unint64_t v74 = v73 + 1;
          if (v73 == v71 || v74 == v71)
          {
            uint64_t v12 = v103;
            unint64_t v11 = v104;
            unint64_t v90 = v105;
          }
          else
          {
            uint64_t v12 = v103;
            unint64_t v11 = v104;
            unint64_t v90 = v105;
            do
            {
              if (*v74 != v16) {
                *v73++ = *v74;
              }
              ++v74;
            }
            while (v74 != v71);
          }
          if (v73 != *v102) {
            *uint64_t v102 = v73;
          }
          uint64_t v76 = *((void *)this + 52);
          uint64_t v77 = 4 * v34;
          --*(_DWORD *)(v76 + v77);
          if (*(void *)this != *((void *)this + 1))
          {
            uint64_t v78 = (double *)(*(void *)this + 16 * (v34 >> 1));
            v78[1] = (double)(*(_DWORD *)(v76 + (v77 | 4)) + *(_DWORD *)(v76 + 4 * (v34 & 0x3FFFFFFFFFFFFFFELL)));
            unint64_t v79 = *(unsigned int *)v78;
            if ((v79 & 0x80000000) == 0
              && (uint64_t v80 = *((void *)this + 4), v79 < (*((void *)this + 5) - v80) >> 3)
              && *(double **)(v80 + 8 * v79) == v78)
            {
              AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority((uint64_t)v107, (uint64_t)v78);
            }
            else
            {
              AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(v107, (uint64_t)v78);
            }
            unint64_t v11 = v104;
            unint64_t v90 = v105;
            uint64_t v12 = v103;
          }
          uint64_t v81 = *((void *)this + 32);
          unint64_t v82 = v90 >> 6;
          uint64_t v83 = 1 << v90;
          uint64_t v84 = *(void *)(v81 + 8 * (v90 >> 6));
          if ((v84 & (1 << v90)) == 0)
          {
            uint64_t v85 = *((void *)this + 37);
            uint64_t v86 = *((void *)this + 36);
            *(void *)(v81 + 8 * v82) = v84 | v83;
            if (v85 == v86) {
              uint64_t v87 = 0;
            }
            else {
              uint64_t v87 = ((v85 - v86) << 7) - 1;
            }
            uint64_t v88 = *((void *)this + 40);
            unint64_t v89 = v88 + *((void *)this + 39);
            if (v87 == v89)
            {
              std::deque<int>::__add_back_capacity((uint64_t)v106);
              uint64_t v12 = v103;
              unint64_t v11 = v104;
              uint64_t v86 = *((void *)this + 36);
              uint64_t v88 = *((void *)this + 40);
              unint64_t v89 = *((void *)this + 39) + v88;
            }
            *(_DWORD *)(*(void *)(v86 + ((v89 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v89 & 0x3FF)) = v16;
            *((void *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v88 + 1;
          }
          goto LABEL_5;
        }
        goto LABEL_3;
      }
    }
    size_t v100 = v40;
    unint64_t v101 = v38;
    memmove(v38, v39, v40);
    size_t v40 = v100;
    unint64_t v38 = v101;
    unint64_t v11 = v104;
    unint64_t v20 = v105;
    uint64_t v12 = v103;
    goto LABEL_27;
  }
  return 1;
}

void operations_research::sat::SatPresolver::RemoveAndRegisterForPostsolveAllClauseContaining(operations_research::sat::SatPresolver *a1, int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *((void *)a1 + 49);
  uint64_t v5 = (int **)(v4 + 24 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    do
    {
      int v9 = *v6;
      uint64_t v10 = *((void *)a1 + 41) + 24 * *v6;
      unint64_t v11 = *(int **)v10;
      uint64_t v12 = *(int **)(v10 + 8);
      if (v11 != v12)
      {
        operations_research::sat::SatPostsolver::Add(*((void *)a1 + 55), a2, v11, v12 - v11);
        operations_research::sat::SatPresolver::Remove(a1, v9);
      }
      ++v6;
    }
    while (v6 != v7);
    uint64_t v4 = *((void *)a1 + 49);
    uint64_t v6 = *(int **)(v4 + 24 * (int)v3);
  }
  uint64_t v13 = (void *)(v4 + 24 * (int)v3);
  *uint64_t v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  if (v6) {
    operator delete(v6);
  }
  *(_DWORD *)(*((void *)a1 + 52) + 4 * v3) = 0;
}

uint64_t operations_research::sat::ComputeResolvant(int a1, char **a2, char **a3, unint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = (_DWORD *)*a4;
  a4[1] = *a4;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  int v9 = *a3;
  if (*a2 == v7 || v9 == a3[1])
  {
LABEL_6:
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(v4, v6, v8, v7, (v7 - v8) >> 2);
    std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>,std::__wrap_iter<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const*>>(v4, (void *)v4[1], v9, v5[1], (v5[1] - v9) >> 2);
    return 1;
  }
  uint64_t v12 = a2;
  unint64_t v74 = v4;
  while (1)
  {
    while (1)
    {
      int v15 = *(_DWORD *)v9;
      int v16 = *(_DWORD *)v8;
      if (*(_DWORD *)v8 != *(_DWORD *)v9) {
        break;
      }
      unint64_t v17 = v4[2];
      if ((unint64_t)v6 < v17)
      {
        *uint64_t v6 = v15;
        uint64_t v13 = (uint64_t)(v6 + 1);
      }
      else
      {
        uint64_t v18 = v5;
        uint64_t v19 = v12;
        unint64_t v20 = (unsigned char *)*v4;
        uint64_t v21 = (uint64_t)v6 - *v4;
        uint64_t v22 = v21 >> 2;
        unint64_t v23 = (v21 >> 2) + 1;
        if (v23 >> 62) {
          goto LABEL_104;
        }
        uint64_t v24 = v17 - (void)v20;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          if (v25 >> 62) {
            goto LABEL_105;
          }
          uint64_t v26 = operator new(4 * v25);
          unint64_t v27 = &v26[4 * v22];
          *unint64_t v27 = *(_DWORD *)v8;
          uint64_t v13 = (uint64_t)(v27 + 1);
          if (v6 != (_DWORD *)v20)
          {
LABEL_25:
            unint64_t v28 = (char *)(v6 - 1) - v20;
            if (v28 < 0xBC
              || &v26[v21 - 4 - (v28 & 0xFFFFFFFFFFFFFFFCLL)] > &v26[v21 - 4]
              || (_DWORD *)((char *)v6 - (v28 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v6 - 1
              || (unint64_t)((char *)v6 - v26 - v21) < 0x20)
            {
              int v29 = v6;
              uint64_t v12 = v19;
              uint64_t v5 = v18;
              uint64_t v4 = v74;
              goto LABEL_30;
            }
            uint64_t v55 = (v28 >> 2) + 1;
            uint64_t v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
            int v29 = &v6[v56 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v27 = (_DWORD *)((char *)v27 - v56);
            int8x16_t v57 = &v26[4 * v22 - 16];
            int32x2_t v58 = (long long *)(v6 - 4);
            uint64_t v59 = v55 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v12 = v19;
            do
            {
              long long v60 = *v58;
              *(v57 - 1) = *(v58 - 1);
              *int8x16_t v57 = v60;
              v57 -= 2;
              v58 -= 2;
              v59 -= 8;
            }
            while (v59);
            uint64_t v5 = v18;
            uint64_t v4 = v74;
            if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_30:
                int v30 = *--v29;
                *--unint64_t v27 = v30;
              }
              while (v29 != (_DWORD *)v20);
            }
            *uint64_t v4 = (unint64_t)v27;
            v4[1] = v13;
            v4[2] = (unint64_t)&v26[4 * v25];
            if (!v20) {
              goto LABEL_8;
            }
LABEL_48:
            operator delete(v20);
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t v26 = 0;
          unint64_t v27 = (_DWORD *)(4 * v22);
          *(_DWORD *)(4 * v22) = v15;
          uint64_t v13 = 4 * v22 + 4;
          if (v6 != (_DWORD *)v20) {
            goto LABEL_25;
          }
        }
        uint64_t v12 = v19;
        uint64_t v5 = v18;
        uint64_t v4 = v74;
        *unint64_t v74 = (unint64_t)v27;
        v74[1] = v13;
        v74[2] = (unint64_t)&v26[4 * v25];
        if (v20) {
          goto LABEL_48;
        }
      }
LABEL_8:
      v4[1] = v13;
      v8 += 4;
LABEL_9:
      v9 += 4;
LABEL_10:
      uint64_t v6 = (_DWORD *)v13;
      uint64_t v7 = v12[1];
      if (v8 == v7 || v9 == v5[1]) {
        goto LABEL_6;
      }
    }
    if (v16 != (v15 ^ 1))
    {
      unint64_t v32 = v4[2];
      if (v16 < v15)
      {
        if ((unint64_t)v6 < v32)
        {
          *uint64_t v6 = v16;
          uint64_t v13 = (uint64_t)(v6 + 1);
LABEL_66:
          v4[1] = v13;
          v8 += 4;
          goto LABEL_10;
        }
        int v33 = (unsigned char *)*v4;
        uint64_t v34 = (uint64_t)v6 - *v4;
        uint64_t v35 = v34 >> 2;
        unint64_t v36 = (v34 >> 2) + 1;
        if (v36 >> 62) {
          goto LABEL_104;
        }
        uint64_t v37 = v32 - (void)v33;
        if (v37 >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          if (v38 >> 62) {
            goto LABEL_105;
          }
          int v39 = operator new(4 * v38);
          size_t v40 = &v39[4 * v35];
          *size_t v40 = *(_DWORD *)v8;
          uint64_t v13 = (uint64_t)(v40 + 1);
          if (v6 != (_DWORD *)v33)
          {
LABEL_58:
            unint64_t v41 = (char *)(v6 - 1) - v33;
            if (v41 < 0xBC
              || &v39[v34 - 4 - (v41 & 0xFFFFFFFFFFFFFFFCLL)] > &v39[v34 - 4]
              || (_DWORD *)((char *)v6 - (v41 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v6 - 1
              || (unint64_t)((char *)v6 - v39 - v34) < 0x20)
            {
              unint64_t v42 = v6;
              uint64_t v4 = v74;
              goto LABEL_63;
            }
            uint64_t v61 = (v41 >> 2) + 1;
            uint64_t v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v42 = &v6[v62 / 0xFFFFFFFFFFFFFFFCLL];
            size_t v40 = (_DWORD *)((char *)v40 - v62);
            uint64x2_t v63 = &v39[4 * v35 - 16];
            uint64x2_t v64 = (long long *)(v6 - 4);
            uint64_t v65 = v61 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v66 = *v64;
              *(v63 - 1) = *(v64 - 1);
              *uint64x2_t v63 = v66;
              v63 -= 2;
              v64 -= 2;
              v65 -= 8;
            }
            while (v65);
            uint64_t v4 = v74;
            if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_63:
                int v43 = *--v42;
                *--size_t v40 = v43;
              }
              while (v42 != (_DWORD *)v33);
            }
            *uint64_t v4 = (unint64_t)v40;
            v4[1] = v13;
            v4[2] = (unint64_t)&v39[4 * v38];
            if (!v33) {
              goto LABEL_66;
            }
LABEL_65:
            operator delete(v33);
            goto LABEL_66;
          }
        }
        else
        {
          int v39 = 0;
          size_t v40 = (_DWORD *)(4 * v35);
          *(_DWORD *)(4 * v35) = v16;
          uint64_t v13 = 4 * v35 + 4;
          if (v6 != (_DWORD *)v33) {
            goto LABEL_58;
          }
        }
        uint64_t v4 = v74;
        *unint64_t v74 = (unint64_t)v40;
        v74[1] = v13;
        v74[2] = (unint64_t)&v39[4 * v38];
        if (!v33) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
      if ((unint64_t)v6 < v32)
      {
        *uint64_t v6 = v15;
        uint64_t v13 = (uint64_t)(v6 + 1);
LABEL_84:
        v4[1] = v13;
        goto LABEL_9;
      }
      uint64_t v44 = (unsigned char *)*v4;
      uint64_t v45 = (uint64_t)v6 - *v4;
      uint64_t v46 = v45 >> 2;
      unint64_t v47 = (v45 >> 2) + 1;
      if (v47 >> 62) {
LABEL_104:
      }
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      uint64_t v48 = v32 - (void)v44;
      if (v48 >> 1 > v47) {
        unint64_t v47 = v48 >> 1;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        if (v49 >> 62) {
LABEL_105:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        int v50 = operator new(4 * v49);
        int v51 = &v50[4 * v46];
        *int v51 = *(_DWORD *)v9;
        uint64_t v13 = (uint64_t)(v51 + 1);
        if (v6 != (_DWORD *)v44)
        {
LABEL_76:
          unint64_t v52 = (char *)(v6 - 1) - v44;
          if (v52 >= 0xBC
            && &v50[v45 - 4 - (v52 & 0xFFFFFFFFFFFFFFFCLL)] <= &v50[v45 - 4]
            && (_DWORD *)((char *)v6 - (v52 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v6 - 1
            && (unint64_t)((char *)v6 - v50 - v45) >= 0x20)
          {
            uint64_t v67 = (v52 >> 2) + 1;
            uint64_t v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v53 = &v6[v68 / 0xFFFFFFFFFFFFFFFCLL];
            int v51 = (_DWORD *)((char *)v51 - v68);
            int v69 = &v50[4 * v46 - 16];
            uint64_t v70 = (long long *)(v6 - 4);
            uint64_t v71 = v67 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v72 = *v70;
              *(v69 - 1) = *(v70 - 1);
              *int v69 = v72;
              v69 -= 2;
              v70 -= 2;
              v71 -= 8;
            }
            while (v71);
            uint64_t v4 = v74;
            if (v67 == (v67 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_82:
              *uint64_t v4 = (unint64_t)v51;
              v4[1] = v13;
              v4[2] = (unint64_t)&v50[4 * v49];
              if (!v44) {
                goto LABEL_84;
              }
LABEL_83:
              operator delete(v44);
              goto LABEL_84;
            }
          }
          else
          {
            uint64_t v53 = v6;
            uint64_t v4 = v74;
          }
          do
          {
            int v54 = *--v53;
            *--int v51 = v54;
          }
          while (v53 != (_DWORD *)v44);
          goto LABEL_82;
        }
      }
      else
      {
        int v50 = 0;
        int v51 = (_DWORD *)(4 * v46);
        *(_DWORD *)(4 * v46) = v15;
        uint64_t v13 = 4 * v46 + 4;
        if (v6 != (_DWORD *)v44) {
          goto LABEL_76;
        }
      }
      uint64_t v4 = v74;
      *unint64_t v74 = (unint64_t)v51;
      v74[1] = v13;
      v74[2] = (unint64_t)&v50[4 * v49];
      if (!v44) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }
    if (v16 != a1) {
      return 0;
    }
    v8 += 4;
    v9 += 4;
    uint64_t v7 = v12[1];
    if (v8 == v7 || v9 == v5[1]) {
      goto LABEL_6;
    }
  }
}

uint64_t AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::NoteChangedPriority(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)a2;
  int v3 = *(_DWORD *)a2 - 1;
  if (*(int *)a2 < 1) {
    int v3 = *(_DWORD *)a2;
  }
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = v2;
  double v6 = *(double *)(*(void *)(v4 + 8 * (v3 >> 1)) + 8);
  uint64_t v7 = *(void *)(v4 + 8 * v2);
  if (v6 <= *(double *)(a2 + 8))
  {
    unint64_t v13 = (2 * v2) | 1;
    unint64_t v14 = (*(void *)(result + 16) - v4) >> 3;
    if (v14 > v13)
    {
      int v15 = 2 * v2;
      double v16 = *(double *)(v7 + 8);
      int v17 = (2 * v2) | 1;
      int v18 = *(_DWORD *)a2;
      while (1)
      {
        int v2 = v15 + 2;
        if (v14 <= v15 + 2
          || (uint64_t v19 = *(void *)(v4 + 8 * v13),
              uint64_t v20 = *(void *)(v4 + 8 * v2),
              double v21 = *(double *)(v20 + 8),
              *(double *)(v19 + 8) <= v21))
        {
          uint64_t v20 = *(void *)(v4 + 8 * v17);
          double v21 = *(double *)(v20 + 8);
          int v2 = v17;
        }
        if (v16 <= v21) {
          break;
        }
        uint64_t v22 = 8 * v18;
        *(void *)(v4 + v22) = v20;
        uint64_t v4 = *(void *)(result + 8);
        uint64_t v23 = *(void *)(result + 16);
        **(_DWORD **)(v4 + v22) = v18;
        int v15 = 2 * v2;
        int v17 = (2 * v2) | 1;
        unint64_t v13 = v17;
        unint64_t v14 = (v23 - v4) >> 3;
        int v18 = v2;
        if (v14 <= v17) {
          goto LABEL_19;
        }
      }
      int v2 = v18;
LABEL_19:
      uint64_t v5 = v2;
    }
    *(void *)(v4 + 8 * v5) = v7;
    *(_DWORD *)uint64_t v7 = v2;
  }
  else
  {
    if (v2 >= 1)
    {
      double v8 = *(double *)(v7 + 8);
      while (1)
      {
        unsigned int v9 = v2 - 1;
        uint64_t v10 = (v2 - 1) >> 1;
        uint64_t v11 = *(void *)(v4 + 8 * v10);
        uint64_t v5 = v2;
        if (*(double *)(v11 + 8) <= v8) {
          break;
        }
        uint64_t v12 = 8 * v2;
        *(void *)(v4 + v12) = v11;
        uint64_t v4 = *(void *)(result + 8);
        **(_DWORD **)(v4 + v12) = v2;
        int v2 = v9 >> 1;
        if (v9 <= 1)
        {
          *(void *)(v4 + 8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v7;
          *(_DWORD *)uint64_t v7 = v10;
          return result;
        }
      }
    }
    *(void *)(v4 + 8 * v5) = v7;
    *(_DWORD *)uint64_t v7 = v2;
  }
  return result;
}

void AdjustablePriorityQueue<operations_research::sat::SatPresolver::PQElement,std::less<operations_research::sat::SatPresolver::PQElement>>::Add(void *a1, uint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 1);
  double v6 = (char *)a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)double v6 = a2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  unsigned int v9 = *v4;
  uint64_t v10 = v6 - *v4;
  uint64_t v11 = v10 >> 3;
  unint64_t v12 = (v10 >> 3) + 1;
  if (v12 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v5 - (void)v9;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v15 = operator new(8 * v14);
    double v16 = &v15[8 * v11];
    int v17 = &v15[8 * v14];
    *double v16 = a2;
    uint64_t v8 = (uint64_t)(v16 + 1);
    int v18 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 0;
  double v16 = (void *)(8 * v11);
  int v17 = 0;
  *(void *)(8 * v11) = a2;
  uint64_t v8 = 8 * v11 + 8;
  int v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v6 - v15 - v10) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v7 = &v6[-v21];
    double v16 = (void *)((char *)v16 - v21);
    uint64_t v22 = &v15[8 * v11 - 16];
    uint64_t v23 = v6 - 16;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v26 = *((void *)v7 - 1);
        v7 -= 8;
        *--double v16 = v26;
      }
      while (v7 != v9);
    }
    uint64_t v7 = *v4;
  }
LABEL_21:
  a1[1] = v16;
  a1[2] = v8;
  a1[3] = v17;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  a1[2] = v8;
  unint64_t v27 = (char *)a1[1];
  int v28 = ((unint64_t)(v8 - (void)v27) >> 3) - 1;
  uint64_t v29 = *(void *)&v27[8 * v28];
  if (v28 < 1)
  {
    uint64_t v33 = v28;
  }
  else
  {
    double v30 = *(double *)(v29 + 8);
    while (1)
    {
      unsigned int v31 = v28 - 1;
      uint64_t v32 = *(void *)&v27[8 * ((v28 - 1) >> 1)];
      uint64_t v33 = v28;
      if (*(double *)(v32 + 8) <= v30) {
        break;
      }
      uint64_t v34 = 8 * v28;
      *(void *)&v27[v34] = v32;
      unint64_t v27 = *v4;
      **(_DWORD **)&(*v4)[v34] = v28;
      int v28 = v31 >> 1;
      if (v31 <= 1)
      {
        uint64_t v33 = v31 >> 1;
        int v28 = v31 >> 1;
        break;
      }
    }
  }
  *(void *)&v27[8 * v33] = v29;
  *(_DWORD *)uint64_t v29 = v28;
}

uint64_t AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::NoteChangedPriority(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)a2;
  int v3 = *(_DWORD *)a2 - 1;
  if (*(int *)a2 < 1) {
    int v3 = *(_DWORD *)a2;
  }
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = v2;
  double v6 = *(double *)(*(void *)(v4 + 8 * (v3 >> 1)) + 8);
  uint64_t v7 = *(void *)(v4 + 8 * v2);
  if (v6 >= *(double *)(a2 + 8))
  {
    unint64_t v13 = (2 * v2) | 1;
    unint64_t v14 = (*(void *)(result + 16) - v4) >> 3;
    if (v14 > v13)
    {
      int v15 = 2 * v2;
      double v16 = *(double *)(v7 + 8);
      int v17 = (2 * v2) | 1;
      int v18 = *(_DWORD *)a2;
      while (1)
      {
        int v2 = v15 + 2;
        if (v14 <= v15 + 2
          || (uint64_t v19 = *(void *)(v4 + 8 * v13),
              uint64_t v20 = *(void *)(v4 + 8 * v2),
              double v21 = *(double *)(v20 + 8),
              *(double *)(v19 + 8) >= v21))
        {
          uint64_t v20 = *(void *)(v4 + 8 * v17);
          double v21 = *(double *)(v20 + 8);
          int v2 = v17;
        }
        if (v16 >= v21) {
          break;
        }
        uint64_t v22 = 8 * v18;
        *(void *)(v4 + v22) = v20;
        uint64_t v4 = *(void *)(result + 8);
        uint64_t v23 = *(void *)(result + 16);
        **(_DWORD **)(v4 + v22) = v18;
        int v15 = 2 * v2;
        int v17 = (2 * v2) | 1;
        unint64_t v13 = v17;
        unint64_t v14 = (v23 - v4) >> 3;
        int v18 = v2;
        if (v14 <= v17) {
          goto LABEL_19;
        }
      }
      int v2 = v18;
LABEL_19:
      uint64_t v5 = v2;
    }
    *(void *)(v4 + 8 * v5) = v7;
    *(_DWORD *)uint64_t v7 = v2;
  }
  else
  {
    if (v2 >= 1)
    {
      double v8 = *(double *)(v7 + 8);
      while (1)
      {
        unsigned int v9 = v2 - 1;
        uint64_t v10 = (v2 - 1) >> 1;
        uint64_t v11 = *(void *)(v4 + 8 * v10);
        uint64_t v5 = v2;
        if (*(double *)(v11 + 8) >= v8) {
          break;
        }
        uint64_t v12 = 8 * v2;
        *(void *)(v4 + v12) = v11;
        uint64_t v4 = *(void *)(result + 8);
        **(_DWORD **)(v4 + v12) = v2;
        int v2 = v9 >> 1;
        if (v9 <= 1)
        {
          *(void *)(v4 + 8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v7;
          *(_DWORD *)uint64_t v7 = v10;
          return result;
        }
      }
    }
    *(void *)(v4 + 8 * v5) = v7;
    *(_DWORD *)uint64_t v7 = v2;
  }
  return result;
}

void AdjustablePriorityQueue<operations_research::sat::SatPresolver::BvaPqElement,std::less<operations_research::sat::SatPresolver::BvaPqElement>>::Add(void *a1, uint64_t a2)
{
  uint64_t v4 = (char **)(a1 + 1);
  double v6 = (char *)a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(void *)double v6 = a2;
    uint64_t v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  unsigned int v9 = *v4;
  uint64_t v10 = v6 - *v4;
  uint64_t v11 = v10 >> 3;
  unint64_t v12 = (v10 >> 3) + 1;
  if (v12 >> 61) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v13 = v5 - (void)v9;
  if (v13 >> 2 > v12) {
    unint64_t v12 = v13 >> 2;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v15 = operator new(8 * v14);
    double v16 = &v15[8 * v11];
    int v17 = &v15[8 * v14];
    *double v16 = a2;
    uint64_t v8 = (uint64_t)(v16 + 1);
    int v18 = (char *)(v6 - v9);
    if (v6 == v9) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 0;
  double v16 = (void *)(8 * v11);
  int v17 = 0;
  *(void *)(8 * v11) = a2;
  uint64_t v8 = 8 * v11 + 8;
  int v18 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    unint64_t v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v6 - v15 - v10) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v20 = (v19 >> 3) + 1;
    uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v7 = &v6[-v21];
    double v16 = (void *)((char *)v16 - v21);
    uint64_t v22 = &v15[8 * v11 - 16];
    uint64_t v23 = v6 - 16;
    uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *uint64_t v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v26 = *((void *)v7 - 1);
        v7 -= 8;
        *--double v16 = v26;
      }
      while (v7 != v9);
    }
    uint64_t v7 = *v4;
  }
LABEL_21:
  a1[1] = v16;
  a1[2] = v8;
  a1[3] = v17;
  if (v7) {
    operator delete(v7);
  }
LABEL_23:
  a1[2] = v8;
  unint64_t v27 = (char *)a1[1];
  int v28 = ((unint64_t)(v8 - (void)v27) >> 3) - 1;
  uint64_t v29 = *(void *)&v27[8 * v28];
  if (v28 < 1)
  {
    uint64_t v33 = v28;
  }
  else
  {
    double v30 = *(double *)(v29 + 8);
    while (1)
    {
      unsigned int v31 = v28 - 1;
      uint64_t v32 = *(void *)&v27[8 * ((v28 - 1) >> 1)];
      uint64_t v33 = v28;
      if (*(double *)(v32 + 8) >= v30) {
        break;
      }
      uint64_t v34 = 8 * v28;
      *(void *)&v27[v34] = v32;
      unint64_t v27 = *v4;
      **(_DWORD **)&(*v4)[v34] = v28;
      int v28 = v31 >> 1;
      if (v31 <= 1)
      {
        uint64_t v33 = v31 >> 1;
        int v28 = v31 >> 1;
        break;
      }
    }
  }
  *(void *)&v27[8 * v33] = v29;
  *(_DWORD *)uint64_t v29 = v28;
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::assign(void *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v5 = a1[4];
  unint64_t v4 = a1[5];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = (char *)(v7 + 8 * (v5 >> 8));
  if (v4 < a2)
  {
    if (v6 == v7)
    {
      unsigned int v9 = 0;
      if (!v4) {
        goto LABEL_11;
      }
    }
    else
    {
      unsigned int v9 = (_OWORD *)(*(void *)v8 + 16 * v5);
      if (!v4)
      {
LABEL_11:
LABEL_13:
        std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(a1, a2, a3);
        return;
      }
    }
    do
    {
      *v9++ = *a3;
      if ((_OWORD *)((char *)v9 - *(void *)v8) == (_OWORD *)4096)
      {
        int v15 = (_OWORD *)*((void *)v8 + 1);
        v8 += 8;
        unsigned int v9 = v15;
      }
      --v4;
    }
    while (v4);
    a2 -= a1[5];
    goto LABEL_13;
  }
  if (v6 == v7)
  {
    uint64_t v10 = 0;
    if (!a2)
    {
LABEL_7:
      unsigned __int8 v11 = v5 + v4;
      unint64_t v12 = (char *)(v7 + 8 * ((v5 + v4) >> 8));
      uint64_t v13 = v6 - v7;
      if (v6 != v7) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v10 = (_OWORD *)(*(void *)v8 + 16 * v5);
    if (!a2) {
      goto LABEL_7;
    }
  }
  do
  {
    *v10++ = *a3;
    if ((_OWORD *)((char *)v10 - *(void *)v8) == (_OWORD *)4096)
    {
      double v16 = (_OWORD *)*((void *)v8 + 1);
      v8 += 8;
      uint64_t v10 = v16;
    }
    --a2;
  }
  while (a2);
  unint64_t v5 = a1[4];
  unint64_t v4 = a1[5];
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  unsigned __int8 v11 = v5 + v4;
  unint64_t v12 = (char *)(v7 + 8 * ((v5 + v4) >> 8));
  uint64_t v13 = v6 - v7;
  if (v6 != v7)
  {
LABEL_8:
    uint64_t v14 = *(void *)v12 + 16 * v11;
    if (v10 == (_OWORD *)v14) {
      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = 0;
  if (!v10) {
    return;
  }
LABEL_27:
  uint64_t v17 = ((v14 - *(void *)v12) >> 4) + 32 * (v12 - v8) - (((uint64_t)v10 - *(void *)v8) >> 4);
  if (v17 >= 1)
  {
    uint64_t v18 = 32 * v13 - 1;
    if (v6 == v7) {
      uint64_t v18 = 0;
    }
    unint64_t v19 = v4 - v17;
    a1[5] = v19;
    if (v18 - (v5 + v19) >= 0x200)
    {
      do
      {
        operator delete(*(void **)(v6 - 8));
        uint64_t v20 = a1[1];
        uint64_t v6 = a1[2] - 8;
        uint64_t v21 = 32 * (v6 - v20) - 1;
        a1[2] = v6;
        if (v6 == v20) {
          uint64_t v21 = 0;
        }
      }
      while ((unint64_t)(v21 - (a1[5] + a1[4])) > 0x1FF);
    }
  }
}

void operations_research::sat::ProbeAndFindEquivalentLiteral(int *a1, uint64_t a2, uint64_t a3, std::vector<int> *a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)a1);
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)a1, 0);
  a4->__end_ = a4->__begin_;
  double v7 = *(double *)(operations_research::sat::SatSolver::parameters((operations_research::sat::SatSolver *)a1) + 328);
  uint64_t v56 = 0;
  int8x16_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = a1;
  double v60 = v7 + operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)a1);
  uint64_t v8 = a1[4];
  int v9 = 2 * v8;
  uint64_t v53 = 0;
  int v54 = 0;
  uint64_t v55 = 0;
  FindStronglyConnectedComponents<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>(2 * v8, (uint64_t)&v56, (uint64_t)&v53);
  uint64_t v46 = (operations_research::sat::SatSolver *)a1;
  uint64_t v52 = 0;
  long long v50 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v48 = 0u;
  *(_OWORD *)unint64_t v49 = 0u;
  operations_research::MergingPartition::Reset((operations_research::MergingPartition *)v48, 2 * v8);
  unsigned __int8 v11 = (unsigned int **)v53;
  uint64_t v10 = v54;
  while (v11 != v10)
  {
    unint64_t v12 = *v11;
    if ((unint64_t)((char *)v11[1] - (char *)*v11) >= 5)
    {
      if (a4->__begin_ != a4->__end_
        || (std::vector<int>::value_type __x = -1, !v8)
        || (std::vector<int>::__append(a4, 2 * v8, &__x),
            unint64_t v12 = *v11,
            (unint64_t)((char *)v11[1] - (char *)*v11) >= 5))
      {
        uint64_t v13 = *v12;
        unint64_t v14 = 1;
        do
        {
          unsigned int v15 = v12[v14];
          operations_research::MergingPartition::MergePartsOf((operations_research::MergingPartition *)v48, v13, v15);
          operations_research::MergingPartition::MergePartsOf((operations_research::MergingPartition *)v48, v13 ^ 1, v15 ^ 1);
          ++v14;
          unint64_t v12 = *v11;
        }
        while (v14 < v11[1] - *v11);
      }
    }
    v11 += 3;
  }
  operations_research::sat::SatSolver::Backtrack(v46, 0);
  if (a4->__begin_ != a4->__end_ && (int)v8 >= 1)
  {
    unint64_t v30 = 0;
    uint64_t v31 = *((void *)v46 + 26);
    if (v9 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v9;
    }
    do
    {
      int RootAndCompressPath = operations_research::MergingPartition::GetRootAndCompressPath((operations_research::MergingPartition *)v48, v30);
      uint64_t v34 = *(void *)(v31 + 24);
      unint64_t v35 = *(void *)(v34 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8));
      if (((v35 >> (v30 & 0x3E)) & 3) != 0
        && ((*(void *)(v34 + (((unint64_t)RootAndCompressPath >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (RootAndCompressPath & 0x3E)) & 3) == 0)
      {
        int v36 = RootAndCompressPath ^ (((v35 >> v30) & 1) == 0);
        operations_research::sat::SatSolver::AddUnitClause((uint64_t)v46, v36);
        if (a3)
        {
          std::vector<int>::value_type __x = v36;
          operations_research::sat::DratProofHandler::AddClause(a3, &__x, 1);
        }
      }
      ++v30;
    }
    while (v32 != v30);
    unint64_t v37 = 0;
    int v38 = 0;
    while (1)
    {
      int v39 = operations_research::MergingPartition::GetRootAndCompressPath((operations_research::MergingPartition *)v48, v37);
      a4->__begin_[v37] = v39;
      uint64_t v40 = *(void *)(v31 + 24);
      unint64_t v41 = *(void *)(v40 + (((unint64_t)v39 >> 3) & 0x1FFFFFFFFFFFFFF8));
      unint64_t v42 = *(void *)(v40 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8));
      uint64_t v43 = v42 & (3 << (v37 & 0x3E));
      if (((v41 >> (v39 & 0x3E)) & 3) != 0) {
        break;
      }
      if (!v43)
      {
        if (v37 != v39)
        {
          int v45 = v39 ^ 1;
          std::vector<int>::value_type __x = v37;
          int v62 = v39 ^ 1;
          operations_research::sat::SatPostsolver::Add(a2, v37, &__x, 2);
          ++v38;
          if (a3)
          {
            std::vector<int>::value_type __x = v37;
            int v62 = v45;
            operations_research::sat::DratProofHandler::AddClause(a3, &__x, 2);
          }
        }
        goto LABEL_40;
      }
      int v44 = v39 ^ (((v42 >> v37) & 1) == 0);
      operations_research::sat::SatSolver::AddUnitClause((uint64_t)v46, v44);
      if (a3) {
        goto LABEL_44;
      }
LABEL_40:
      if (v32 == ++v37) {
        goto LABEL_17;
      }
    }
    if (v43) {
      goto LABEL_40;
    }
    int v44 = v37 ^ (((v41 >> v39) & 1) == 0);
    operations_research::sat::SatSolver::AddUnitClause((uint64_t)v46, v44);
    if (!a3) {
      goto LABEL_40;
    }
LABEL_44:
    std::vector<int>::value_type __x = v44;
    operations_research::sat::DratProofHandler::AddClause(a3, &__x, 1);
    goto LABEL_40;
  }
LABEL_17:
  if (*(unsigned char *)(operations_research::sat::SatSolver::parameters(v46) + 99)
    || *operations_research::sat::ProbeAndFindEquivalentLiteral(operations_research::sat::SatSolver *,operations_research::sat::SatPostsolver *,operations_research::sat::DratProofHandler *,gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,std::allocator<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>> *)::vlocal__ >= 1
    && (operations_research::sat::ProbeAndFindEquivalentLiteral(operations_research::sat::SatSolver *,operations_research::sat::SatPostsolver *,operations_research::sat::DratProofHandler *,gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,std::allocator<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>> *)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::ProbeAndFindEquivalentLiteral(operations_research::sat::SatSolver *,operations_research::sat::SatPostsolver *,operations_research::sat::DratProofHandler *,gtl::ITIVector<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,std::allocator<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>> *)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
  {
    uint64_t v17 = google::LogMessage::LogMessage((google::LogMessage *)&__x, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1239);
    uint64_t v18 = (void *)google::LogMessage::stream(v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Probing. fixed ", 15);
    unint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" + ", 3);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" equiv ", 7);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" total ", 7);
    uint64_t v22 = (void *)std::ostream::operator<<();
    uint64_t v23 = (absl::lts_2020_02_25 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" wtime: ", 8);
    absl::lts_2020_02_25::GetCurrentTimeNanos(v23);
    std::ostream::operator<<();
    google::LogMessage::~LogMessage((google::LogMessage *)&__x);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v49[1])
  {
    *(void **)&long long v50 = v49[1];
    operator delete(v49[1]);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  uint64_t v24 = (char *)v53;
  if (v53)
  {
    long long v25 = v54;
    uint64_t v26 = v53;
    if (v54 != v53)
    {
      unint64_t v27 = (char *)v54;
      do
      {
        uint64_t v29 = (unsigned int *)*((void *)v27 - 3);
        v27 -= 24;
        int v28 = v29;
        if (v29)
        {
          *(v25 - 2) = v28;
          operator delete(v28);
        }
        long long v25 = (unsigned int **)v27;
      }
      while (v27 != v24);
      uint64_t v26 = v53;
    }
    int v54 = (unsigned int **)v24;
    operator delete(v26);
  }
  if (v56)
  {
    int8x16_t v57 = v56;
    operator delete(v56);
  }
}

void sub_23CD946F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void FindStronglyConnectedComponents<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>(int a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)int v3 = 0u;
  *(_OWORD *)unint64_t v4 = 0u;
  StronglyConnectedComponentsFinder<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents((std::vector<int> *)v3, a1, a2, a3);
  if (__p[1])
  {
    *(void **)&long long v8 = __p[1];
    operator delete(__p[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v4[1])
  {
    *(void **)&long long v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_23CD94878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t operations_research::sat::SolveWithPresolve(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v8 = (const operations_research::sat::SatParameters *)operations_research::sat::SatSolver::parameters((operations_research::sat::SatSolver *)*a1);
  operations_research::sat::SatParameters::SatParameters((operations_research::sat::SatParameters *)v116, v8);
  operations_research::sat::SatPostsolver::SatPostsolver((operations_research::sat::SatPostsolver *)v102, *((_DWORD *)*a1 + 4));
  if (v116[99]) {
    goto LABEL_2;
  }
  if (*_MergedGlobals_18[0] < 1)
  {
    BOOL inited = 0;
  }
  else
  {
    if (_MergedGlobals_18[0] != &google::kLogSiteUninitialized)
    {
LABEL_2:
      BOOL inited = 1;
      goto LABEL_3;
    }
    BOOL inited = google::InitVLOG3__((google *)_MergedGlobals_18, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1);
  }
LABEL_3:
  uint64_t v10 = operations_research::sat::LookForTrivialSatSolution(**a1, fmin(fmax(*(double *)(a2 + 104) - *(double *)(a2 + 112), 0.0), 1.0), (operations_research::sat::Model *)inited);
  if ((v10 & 1) == 0)
  {
    if (*off_26AED0128[0] < 1
      || off_26AED0128[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AED0128, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1))
    {
      goto LABEL_141;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v95, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1264);
    uint64_t v24 = (void *)google::LogMessage::stream((google::LogMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"UNSAT during probing.", 21);
LABEL_27:
    google::LogMessage::~LogMessage((google::LogMessage *)&v95);
    goto LABEL_141;
  }
  if (*(_DWORD *)((*a1)[26] + 12) == *((_DWORD *)*a1 + 4))
  {
    if (*off_26AED0130[0] >= 1
      && (off_26AED0130[0] != &google::kLogSiteUninitialized
       || google::InitVLOG3__((google *)off_26AED0130, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v95, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1269);
      unsigned __int8 v11 = (void *)google::LogMessage::stream((google::LogMessage *)&v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Problem solved by trivial heuristic!", 36);
      google::LogMessage::~LogMessage((google::LogMessage *)&v95);
    }
    *(void *)(a3 + 8) = 0;
    unint64_t v12 = (operations_research::sat::SatSolver *)*a1;
    if (*((int *)*a1 + 4) >= 1)
    {
      int v13 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t v16 = *(void *)(*(void *)(*((void *)v12 + 26) + 24)
                        + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8));
        unint64_t v17 = *(void *)(a3 + 8);
        uint64_t v18 = *(void *)(a3 + 16);
        if (v17 == v18 << 6)
        {
          if ((uint64_t)(v17 + 1) < 0) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v19 = v18 << 7;
          if (v19 <= (v17 & 0xFFFFFFFFFFFFFFC0) + 64) {
            unint64_t v19 = (v17 & 0xFFFFFFFFFFFFFFC0) + 64;
          }
          if (v17 <= 0x3FFFFFFFFFFFFFFELL) {
            unint64_t v20 = v19;
          }
          else {
            unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          std::vector<BOOL>::reserve(a3, v20);
          unint64_t v17 = *(void *)(a3 + 8);
        }
        *(void *)(a3 + 8) = v17 + 1;
        uint64_t v21 = *(void **)a3;
        unint64_t v22 = v17 >> 6;
        uint64_t v23 = 1 << v17;
        if ((v16 & (1 << (v13 & 0x3E))) != 0) {
          uint64_t v15 = v21[v22] | v23;
        }
        else {
          uint64_t v15 = v21[v22] & ~v23;
        }
        v21[v22] = v15;
        ++v14;
        unint64_t v12 = (operations_research::sat::SatSolver *)*a1;
        v13 += 2;
      }
      while (v14 < *((int *)*a1 + 4));
    }
    goto LABEL_114;
  }
  BOOL v87 = inited;
  uint64_t v25 = 2;
  uint64_t v26 = *(unsigned __int8 **)(a2 + 120);
  if (v26)
  {
    unsigned __int8 v27 = atomic_load(v26);
    if (v27) {
      goto LABEL_104;
    }
  }
  if (fmax(*(double *)(a2 + 104) - *(double *)(a2 + 112), 0.0) <= 0.0) {
    goto LABEL_104;
  }
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep CurrentTimeNanos = absl::lts_2020_02_25::GetCurrentTimeNanos((absl::lts_2020_02_25 *)v10);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v29 = CurrentTimeNanos;
  if (*(void *)(a2 + 24) <= CurrentTimeNanos - *(void *)(a2 + 8)) {
    uint64_t v30 = CurrentTimeNanos - *(void *)(a2 + 8);
  }
  else {
    uint64_t v30 = *(void *)(a2 + 24);
  }
  operations_research::RunningMax<long long>::Add((int *)(a2 + 32), v30);
  *(void *)(a2 + 8) = v29;
  if (*(void *)(*(void *)(a2 + 40) + 8 * *(int *)(a2 + 68)) + v29 >= *(void *)(a2 + 16))
  {
    if (FLAGS_time_limit_use_usertime)
    {
      double v32 = *(double *)(a2 + 96);
      if (*(unsigned char *)(a2 + 72))
      {
        double v33 = v32
            + (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v31) - *(void *)(a2 + 80) + *(void *)(a2 + 88))
            * -0.000000001;
        if (v33 <= 0.0001) {
          goto LABEL_103;
        }
        goto LABEL_43;
      }
      double v33 = v32 + (double)*(uint64_t *)(a2 + 88) * -0.000000001;
      if (v33 > 0.0001)
      {
LABEL_43:
        *(void *)(a2 + 16) = *(void *)(a2 + 8) + (uint64_t)(v33 * 1000000000.0);
        goto LABEL_44;
      }
    }
LABEL_103:
    *(void *)(a2 + 16) = 0;
    goto LABEL_104;
  }
LABEL_44:
  uint64_t v34 = **a1;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(v34);
  operations_research::TimeLimit::MergeWithGlobalTimeLimit(v35, a2);
  uint64_t v36 = v117;
  unint64_t v37 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>(v34);
  if ((operations_research::sat::Inprocessing::PresolveLoop(v37, v36, v4 & 0xFFFFFFFFFF000000 | inited) & 1) == 0)
  {
    if (*off_26AED0138[0] < 1
      || off_26AED0138[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AED0138, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1))
    {
      goto LABEL_141;
    }
    google::LogMessage::LogMessage((google::LogMessage *)&v95, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1301);
    uint64_t v86 = (void *)google::LogMessage::stream((google::LogMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"UNSAT during probing.", 21);
    goto LABEL_27;
  }
  int v38 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(v34);
  uint64_t v39 = v38[1];
  if (v38[2] != v39)
  {
    unint64_t v40 = v38[4];
    unint64_t v41 = (void *)(v39 + 8 * (v40 / 0xAA));
    unint64_t v42 = *v41 + 24 * (v40 % 0xAA);
    unint64_t v43 = *(void *)(v39 + 8 * ((v38[5] + v40) / 0xAA)) + 24 * ((v38[5] + v40) % 0xAA);
    while (v42 != v43)
    {
      operations_research::sat::SatPostsolver::Add((uint64_t)v102, **(_DWORD **)v42, *(int **)v42, (uint64_t)(*(void *)(v42 + 8) - *(void *)v42) >> 2);
      v42 += 24;
      if (v42 - *v41 == 4080)
      {
        unint64_t v44 = v41[1];
        ++v41;
        unint64_t v42 = v44;
      }
    }
  }
  memset(&__src, 0, sizeof(__src));
  operations_research::sat::ProbeAndFindEquivalentLiteral((int *)*a1, (uint64_t)v102, a4, &__src);
  int v45 = (operations_research::sat::SatSolver *)*a1;
  if (!*((unsigned char *)*a1 + 496))
  {
    if (*((unsigned char *)v45 + 1312))
    {
      operations_research::sat::SatSolver::Backtrack(v45, 0);
      uint64_t v49 = (*a1)[26];
      if (*(int *)(v49 + 12) >= 1)
      {
        uint64_t v50 = 0;
        do
        {
          int v51 = operations_research::sat::SatPostsolver::ApplyReverseMapping((uint64_t)v102, *(_DWORD *)(*(void *)(v49 + 72) + 4 * v50));
          *(void *)((char *)v114 + (((unint64_t)v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
          ++v50;
          uint64_t v49 = (*a1)[26];
        }
        while (v50 < *(int *)(v49 + 12));
      }
      operations_research::sat::SatPresolver::SatPresolver((operations_research::sat::SatPresolver *)&v95, (operations_research::sat::SatPostsolver *)v102);
      operations_research::sat::SatParameters::CopyFrom((operations_research::sat::SatParameters *)v100, (const operations_research::sat::SatParameters *)v116);
      v100[72] = a4;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v99, (char *)__src.__begin_, (char *)__src.__end_, __src.__end_ - __src.__begin_);
      operations_research::sat::SatSolver::ExtractClauses<operations_research::sat::SatPresolver>((uint64_t)*a1, (uint64_t)&v95);
      uint64_t v52 = (operations_research::sat::SatSolver *)*a1;
      double v53 = operations_research::sat::SatSolver::deterministic_time((operations_research::sat::SatSolver *)*a1);
      *(double *)(a2 + 112) = *(double *)(a2 + 112) + v53 - *((double *)v52 + 163);
      *((double *)v52 + 163) = v53;
      *(double *)(a2 + 112) = *(double *)(operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(**a1)
                                        + 112)
                            + *(double *)(a2 + 112);
      int v54 = (operations_research::sat::SatSolver *)*a1;
      *a1 = 0;
      if (v54)
      {
        operations_research::sat::SatSolver::~SatSolver(v54);
        MEMORY[0x23ECF2BC0]();
      }
      uint64_t v55 = v98 - v97;
      uint64_t v93 = 0;
      unint64_t v94 = 0;
      std::string __p = 0;
      if (((unint64_t)(v98 - v97) >> 3))
      {
        if (v55 << 29 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v56 = (int)(v55 >> 3);
        std::string __p = operator new(8 * (((v56 - 1) >> 6) + 1));
        uint64_t v93 = 0;
        unint64_t v94 = ((v56 - 1) >> 6) + 1;
        std::vector<BOOL>::__construct_at_end[abi:ne180100](&__p, v56, 1);
      }
      if (operations_research::sat::SatPresolver::Presolve((uint64_t)&v95, (uint64_t)&__p, inited))
      {
        unint64_t v89 = 0;
        unint64_t v90 = 0;
        uint64_t v91 = 0;
        v118[0] = 0;
        uint64_t v57 = v97;
        if ((int)((unint64_t)(v98 - v97) >> 3) >= 1)
        {
          uint64_t v58 = 0;
          uint64_t v59 = 0;
          int v60 = 1;
          do
          {
            if (*(int *)(v57 + (v58 >> 30)) <= 0 && *(int *)(v57 + 4 * v60) < 1)
            {
              gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v89, &operations_research::sat::kNoBooleanVariable);
            }
            else
            {
              gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v89, v118);
              ++v118[0];
            }
            ++v59;
            uint64_t v57 = v97;
            v60 += 2;
            v58 += 0x200000000;
          }
          while (v59 < (int)((unint64_t)(v98 - v97) >> 3));
        }
        operations_research::sat::SatPostsolver::ApplyMapping((uint64_t)v102, (uint64_t *)&v89);
        if (v89)
        {
          unint64_t v90 = v89;
          operator delete(v89);
        }
        if (a4)
        {
          unint64_t v89 = 0;
          unint64_t v90 = 0;
          uint64_t v91 = 0;
          v118[0] = 0;
          uint64_t v63 = v97;
          if ((int)((unint64_t)(v98 - v97) >> 3) >= 1)
          {
            uint64_t v64 = 0;
            uint64_t v65 = 0;
            int v66 = 1;
            do
            {
              if (*(int *)(v63 + (v64 >> 30)) <= 0 && *(int *)(v63 + 4 * v66) < 1)
              {
                gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v89, &operations_research::sat::kNoBooleanVariable);
              }
              else
              {
                gtl::ITIVector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>,operations_research::glop::LinearProgram::VariableType,std::allocator<operations_research::glop::LinearProgram::VariableType>>::push_back((uint64_t)&v89, v118);
                ++v118[0];
              }
              ++v65;
              uint64_t v63 = v97;
              v66 += 2;
              v64 += 0x200000000;
            }
            while (v65 < (int)((unint64_t)(v98 - v97) >> 3));
          }
          operations_research::sat::DratProofHandler::ApplyMapping(a4, (uint64_t *)&v89);
          if (v89)
          {
            unint64_t v90 = v89;
            operator delete(v89);
          }
        }
        operator new();
      }
      if (*off_26AED0150[0] >= 1
        && (off_26AED0150[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AED0150, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)&v89, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1351);
        int v62 = (void *)google::LogMessage::stream((google::LogMessage *)&v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"UNSAT during presolve.", 22);
        google::LogMessage::~LogMessage((google::LogMessage *)&v89);
      }
      operator new();
    }
    if (*off_26AED0148[0] < 1
      || off_26AED0148[0] == &google::kLogSiteUninitialized
      && !google::InitVLOG3__((google *)off_26AED0148, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1))
    {
      int v47 = 5;
      std::vector<int>::pointer begin = __src.__begin_;
      if (!__src.__begin_) {
        goto LABEL_101;
      }
    }
    else
    {
      google::LogMessage::LogMessage((google::LogMessage *)&v95, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1321);
      uint64_t v61 = (void *)google::LogMessage::stream((google::LogMessage *)&v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"The problem is not a pure SAT problem, skipping the SAT specific presolve.", 74);
      google::LogMessage::~LogMessage((google::LogMessage *)&v95);
      int v47 = 5;
      std::vector<int>::pointer begin = __src.__begin_;
      if (!__src.__begin_) {
        goto LABEL_101;
      }
    }
LABEL_84:
    __src.__end_ = begin;
    operator delete(begin);
    goto LABEL_101;
  }
  if (*off_26AED0140[0] >= 1
    && (off_26AED0140[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0140, (int **)&fLI::FLAGS_v, "./ortools/sat/simplification.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)&v95, (google::glog_internal_namespace_ *)"./ortools/sat/simplification.cc", 1315);
    uint64_t v46 = (void *)google::LogMessage::stream((google::LogMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"UNSAT during probing.", 21);
    google::LogMessage::~LogMessage((google::LogMessage *)&v95);
  }
  int v47 = 1;
  uint64_t v25 = 1;
  std::vector<int>::pointer begin = __src.__begin_;
  if (__src.__begin_) {
    goto LABEL_84;
  }
LABEL_101:
  if (v47 != 5) {
    goto LABEL_115;
  }
LABEL_104:
  uint64_t v67 = **a1;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = operations_research::sat::Model::GetOrCreate<operations_research::TimeLimit>(v67);
  operations_research::TimeLimit::MergeWithGlobalTimeLimit(v68, a2);
  uint64_t v69 = *(void *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatParameters>(v67) + 328);
  uint64_t v70 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::Inprocessing>(v67);
  if (operations_research::sat::Inprocessing::PresolveLoop(v70, v69, v87 | 0x10100))
  {
    uint64_t v71 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::PostsolveClauses>(v67);
    uint64_t v72 = v71[1];
    if (v71[2] != v72)
    {
      unint64_t v73 = v71[4];
      unint64_t v74 = (void *)(v72 + 8 * (v73 / 0xAA));
      unint64_t v75 = *v74 + 24 * (v73 % 0xAA);
      unint64_t v76 = *(void *)(v72 + 8 * ((v71[5] + v73) / 0xAA)) + 24 * ((v71[5] + v73) % 0xAA);
      while (v75 != v76)
      {
        operations_research::sat::SatPostsolver::Add((uint64_t)v102, **(_DWORD **)v75, *(int **)v75, (uint64_t)(*(void *)(v75 + 8) - *(void *)v75) >> 2);
        v75 += 24;
        if (v75 - *v74 == 4080)
        {
          unint64_t v77 = v74[1];
          ++v74;
          unint64_t v75 = v77;
        }
      }
    }
    uint64_t v25 = operations_research::sat::SatSolver::SolveWithTimeLimit((operations_research::sat::SatSolver *)*a1, (operations_research::TimeLimit *)a2);
    if (v25 != 2)
    {
LABEL_115:
      uint64_t v78 = v114;
      if (!v114) {
        goto LABEL_117;
      }
      goto LABEL_116;
    }
    operations_research::sat::SatPostsolver::ExtractAndPostsolveSolution((operations_research::sat::SatPostsolver *)v102, (const operations_research::sat::SatSolver *)*a1, &v95);
    if (*(void *)a3)
    {
      operator delete(*(void **)a3);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    *(void *)a3 = v95;
    *(_OWORD *)(a3 + 8) = v96;
LABEL_114:
    uint64_t v25 = 2;
    goto LABEL_115;
  }
LABEL_141:
  uint64_t v25 = 1;
  uint64_t v78 = v114;
  if (v114)
  {
LABEL_116:
    BOOL v115 = v78;
    operator delete(v78);
  }
LABEL_117:
  if (v112)
  {
    uint64_t v113 = v112;
    operator delete(v112);
  }
  if (v110)
  {
    double v111 = v110;
    operator delete(v110);
  }
  unint64_t v79 = v106;
  uint64_t v80 = v107;
  uint64_t v109 = 0;
  unint64_t v81 = (char *)v107 - (char *)v106;
  if ((unint64_t)((char *)v107 - (char *)v106) >= 0x11)
  {
    do
    {
      operator delete(*v79);
      uint64_t v80 = v107;
      unint64_t v79 = v106 + 1;
      uint64_t v106 = v79;
      unint64_t v81 = (char *)v107 - (char *)v79;
    }
    while ((unint64_t)((char *)v107 - (char *)v79) > 0x10);
  }
  unint64_t v82 = v81 >> 3;
  if (v82 == 1)
  {
    uint64_t v83 = 512;
    goto LABEL_127;
  }
  if (v82 == 2)
  {
    uint64_t v83 = 1024;
LABEL_127:
    uint64_t v108 = v83;
  }
  if (v79 != v80)
  {
    do
    {
      uint64_t v84 = *v79++;
      operator delete(v84);
    }
    while (v79 != v80);
    if (v107 != v106) {
      unint64_t v107 = (void **)((char *)v107 + (((char *)v106 - (char *)v107 + 7) & 0xFFFFFFFFFFFFFFF8));
    }
  }
  if (v105) {
    operator delete(v105);
  }
  if (v103)
  {
    long long v104 = v103;
    operator delete(v103);
  }
  operations_research::sat::SatParameters::~SatParameters((operations_research::sat::SatParameters *)v116);
  return v25;
}

void sub_23CD95654(_Unwind_Exception *a1)
{
}

void operations_research::sat::SatSolver::ExtractClauses<operations_research::sat::SatPresolver>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 496))
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v26, (google::glog_internal_namespace_ *)"./ortools/sat/sat_solver.h", 322);
    uint64_t v25 = (void *)google::LogMessage::stream((google::LogMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Check failed: !IsModelUnsat() ", 30);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v26);
  }
  operations_research::sat::SatSolver::Backtrack((operations_research::sat::SatSolver *)a1, 0);
  if (operations_research::sat::SatSolver::FinishPropagation((operations_research::sat::SatSolver *)a1))
  {
    if (*(_DWORD *)(a1 + 344) < *(_DWORD *)(*(void *)(a1 + 208) + 12)) {
      operations_research::sat::SatSolver::ProcessNewlyFixedVariables((operations_research::sat::SatSolver *)a1);
    }
    operations_research::sat::LiteralWatchers::DeleteRemovedClauses(*(operations_research::sat::LiteralWatchers **)(a1 + 32));
    unint64_t v4 = 2 * *(int *)(a1 + 16);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 3);
    if (v4 > v5)
    {
      std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append(a2 + 392, v4 - v5);
      uint64_t v6 = *(void *)(a2 + 416);
      unint64_t v7 = (*(void *)(a2 + 424) - v6) >> 2;
      if (v4 <= v7)
      {
        if (v4 < v7) {
          *(void *)(a2 + 424) = v6 + 4 * v4;
        }
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a2 + 416), v4 - v7);
      }
    }
    operations_research::sat::BinaryImplicationGraph::ExtractAllBinaryClauses<operations_research::sat::SatPresolver>(*(void *)(a1 + 24), a2);
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = *(int ***)(v8 + 304);
    for (uint64_t i = *(int ***)(v8 + 312); v9 != i; ++v9)
    {
      uint64_t v15 = 0;
      unint64_t v17 = *v9;
      uint64_t v18 = *(void **)(a1 + 32);
      unint64_t v19 = (unint64_t)*v9
          + (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)*v9)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + (void)*v9)));
      unint64_t v20 = ((v19 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v19);
      unint64_t v21 = v18[42];
      uint64_t v22 = v18[43];
      unint64_t v16 = (v20 >> 7) ^ (v21 >> 12);
      uint64_t v23 = v18[45];
      uint64_t v24 = 0x101010101010101 * (v20 & 0x7F);
      while (1)
      {
        uint64_t v11 = v16 & v23;
        uint64_t v12 = *(void *)(v21 + v11);
        unint64_t v13 = ((v12 ^ v24) - 0x101010101010101) & ~(v12 ^ v24) & 0x8080808080808080;
        if (v13) {
          break;
        }
LABEL_15:
        if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0) {
          goto LABEL_18;
        }
        v15 += 8;
        unint64_t v16 = v15 + v11;
      }
      while (1)
      {
        unint64_t v14 = (v11 + (__clz(__rbit64(v13)) >> 3)) & v23;
        if (*(int **)(v22 + 24 * v14) == v17) {
          break;
        }
        v13 &= v13 - 1;
        if (!v13) {
          goto LABEL_15;
        }
      }
      if (v14 == v23)
      {
LABEL_18:
        operations_research::sat::SatPresolver::AddClause(a2, v17 + 1, *v17);
        continue;
      }
    }
  }
}

void sub_23CD95A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(unint64_t a1, int *a2, char *a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  BOOL v7 = a4 > (unint64_t)a2;
  if ((int *)a4 == a2) {
    return;
  }
  unint64_t v10 = a4;
  uint64_t v12 = a2;
  while (1)
  {
    uint64_t v14 = (void)&a3[-a1] << 7;
    uint64_t v15 = *(int **)a3;
    uint64_t v16 = v10 - *(void *)a3;
    uint64_t v17 = v16 >> 2;
    uint64_t v18 = *(char **)a1;
    uint64_t v19 = (uint64_t)v12 - *(void *)a1;
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = (v16 >> 2) + v14 - (v19 >> 2);
    if (!v7)
    {
      switch(v21)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((int *)v10 == v15) {
            unint64_t v10 = *((void *)a3 - 1) + 4096;
          }
          int v142 = *(_DWORD *)(v10 - 4);
          int v143 = *v12;
          uint64_t v144 = *(void *)(*a5 + 328);
          if (*(void *)(v144 + 24 * v142 + 8) - *(void *)(v144 + 24 * v142) < *(void *)(v144 + 24 * v143 + 8)
                                                                                     - *(void *)(v144 + 24 * v143))
          {
            *uint64_t v12 = v142;
            *(_DWORD *)(v10 - 4) = v143;
          }
          return;
        case 3uLL:
          if (v19 < -3)
          {
            uint64_t v145 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1022 - v20) >> 10))
                         + 4 * (~(1022 - (_WORD)v20) & 0x3FF));
            if ((int *)v10 != v15) {
              goto LABEL_277;
            }
          }
          else
          {
            uint64_t v145 = (int *)(*(void *)(a1 + (((unint64_t)(v20 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (((_WORD)v20 + 1) & 0x3FF));
            if ((int *)v10 != v15) {
              goto LABEL_277;
            }
          }
          unint64_t v10 = *((void *)a3 - 1) + 4096;
LABEL_277:
          uint64_t v210 = *(void *)(*a5 + 328);
          int v211 = *v145;
          int v212 = *v12;
          unint64_t v213 = *(void *)(v210 + 24 * v211 + 8) - *(void *)(v210 + 24 * v211);
          unint64_t v214 = *(void *)(v210 + 24 * v212 + 8) - *(void *)(v210 + 24 * v212);
          int v215 = *(_DWORD *)(v10 - 4);
          unint64_t v216 = *(void *)(v210 + 24 * v215 + 8) - *(void *)(v210 + 24 * v215);
          if (v213 >= v214)
          {
            if (v216 < v213)
            {
              int *v145 = v215;
              *(_DWORD *)(v10 - 4) = v211;
              int v217 = *v145;
              int v218 = *v12;
              if (*(void *)(v210 + 24 * v217 + 8) - *(void *)(v210 + 24 * v217) < *(void *)(v210 + 24 * v218 + 8)
                                                                                         - *(void *)(v210 + 24 * v218))
              {
                *uint64_t v12 = v217;
                int *v145 = v218;
              }
            }
          }
          else if (v216 >= v213)
          {
            *uint64_t v12 = v211;
            int *v145 = v212;
            int v228 = *(_DWORD *)(v10 - 4);
            if (*(void *)(v210 + 24 * v228 + 8) - *(void *)(v210 + 24 * v228) < v214)
            {
              int *v145 = v228;
              *(_DWORD *)(v10 - 4) = v212;
            }
          }
          else
          {
            *uint64_t v12 = v215;
            *(_DWORD *)(v10 - 4) = v212;
          }
          return;
        case 4uLL:
          if (v19 < -3)
          {
            uint64_t v146 = (void *)(a1 - 8 * ((unint64_t)(1022 - v20) >> 10));
            int v147 = (int *)(*v146 + 4 * (~(1022 - (_WORD)v20) & 0x3FF));
            if ((unint64_t)v19 < 0xFFFFFFFFFFFFFFF9)
            {
              char v219 = (void *)(a1 - 8 * ((unint64_t)(1021 - v20) >> 10));
              char v220 = (int *)(*v219 + 4 * (~(1021 - (_WORD)v20) & 0x3FF));
              if ((int *)v10 != v15)
              {
LABEL_287:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, v12, (uint64_t)v146, v147, (uint64_t)v219, v220, (uint64_t)a3, (int *)(v10 - 4), *(void *)(*a5 + 328));
                return;
              }
LABEL_286:
              uint64_t v221 = *((void *)a3 - 1);
              a3 -= 8;
              unint64_t v10 = v221 + 4096;
              goto LABEL_287;
            }
            unint64_t v148 = 1;
          }
          else
          {
            uint64_t v146 = (void *)(a1 + 8 * ((unint64_t)(v20 + 1) >> 10));
            int v147 = (int *)(*v146 + 4 * ((v20 + 1) & 0x3FF));
            unint64_t v148 = v20 + 2;
          }
          char v219 = (void *)(a1 + 8 * (v148 >> 10));
          char v220 = (int *)(*v219 + 4 * (v148 & 0x3FF));
          if ((int *)v10 != v15) {
            goto LABEL_287;
          }
          goto LABEL_286;
        case 5uLL:
          if (v19 < -3)
          {
            BOOL v149 = (void *)(a1 - 8 * ((unint64_t)(1022 - v20) >> 10));
            uint64_t v150 = (int *)(*v149 + 4 * (~(1022 - (_WORD)v20) & 0x3FF));
            if ((unint64_t)v19 < 0xFFFFFFFFFFFFFFF9)
            {
              unint64_t v222 = (void *)(a1 - 8 * ((unint64_t)(1021 - v20) >> 10));
              unint64_t v223 = (int *)(*v222 + 4 * (~(1021 - (_WORD)v20) & 0x3FF));
              if ((unint64_t)v19 < 0xFFFFFFFFFFFFFFF5)
              {
                char v225 = (void *)(a1 - 8 * ((unint64_t)(1020 - v20) >> 10));
                char v226 = (int *)(*v225 + 4 * (~(1020 - (_WORD)v20) & 0x3FF));
                if ((int *)v10 != v15)
                {
LABEL_293:
                  std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(a1, v12, (uint64_t)v149, v150, (uint64_t)v222, v223, (uint64_t)v225, v226, (uint64_t)a3, (int *)(v10 - 4), (uint64_t)a5);
                  return;
                }
LABEL_292:
                uint64_t v227 = *((void *)a3 - 1);
                a3 -= 8;
                unint64_t v10 = v227 + 4096;
                goto LABEL_293;
              }
              unint64_t v224 = 1;
LABEL_291:
              char v225 = (void *)(a1 + 8 * (v224 >> 10));
              char v226 = (int *)(*v225 + 4 * (v224 & 0x3FF));
              if ((int *)v10 != v15) {
                goto LABEL_293;
              }
              goto LABEL_292;
            }
            unint64_t v151 = 1;
          }
          else
          {
            BOOL v149 = (void *)(a1 + 8 * ((unint64_t)(v20 + 1) >> 10));
            uint64_t v150 = (int *)(*v149 + 4 * ((v20 + 1) & 0x3FF));
            unint64_t v151 = v20 + 2;
          }
          unint64_t v222 = (void *)(a1 + 8 * (v151 >> 10));
          unint64_t v223 = (int *)(*v222 + 4 * (v151 & 0x3FF));
          unint64_t v224 = v20 + 3;
          goto LABEL_291;
        default:
          JUMPOUT(0);
      }
    }
    if ((uint64_t)v21 <= 23)
    {
      uint64_t v152 = *a5;
      if (a7)
      {
        int v153 = v12 + 1;
        if ((char *)(v12 + 1) - v18 == 4096)
        {
          int v154 = *(char **)(a1 + 8);
          a1 += 8;
          uint64_t v18 = v154;
          int v153 = (int *)v154;
        }
        if (v153 == (int *)v10) {
          return;
        }
        uint64_t v155 = *(void *)(v152 + 328);
        while (1)
        {
          long long v156 = (int **)a1;
          uint64_t v157 = (uint64_t)v153;
          if (v153 == (int *)v18)
          {
            long long v156 = (int **)(a1 - 8);
            uint64_t v157 = *(void *)(a1 - 8) + 4096;
          }
          int v160 = *(_DWORD *)(v157 - 4);
          long long v158 = (int *)(v157 - 4);
          int v159 = v160;
          int v161 = *v153;
          unint64_t v162 = *(void *)(v155 + 24 * v161 + 8) - *(void *)(v155 + 24 * v161);
          if (v162 >= *(void *)(v155 + 24 * v160 + 8) - *(void *)(v155 + 24 * v160))
          {
            if ((char *)++v153 - v18 == 4096) {
              goto LABEL_221;
            }
          }
          else
          {
            unint64_t v163 = v153;
            while (1)
            {
              *unint64_t v163 = v159;
              if (v158 == v12) {
                break;
              }
              unint64_t v166 = v158;
              if (v158 == *v156)
              {
                uint64_t v164 = (uint64_t)*--v156;
                long long v158 = (int *)(v164 + 4096);
              }
              int v165 = *--v158;
              int v159 = v165;
              unint64_t v163 = v166;
              if (v162 >= *(void *)(v155 + 24 * v165 + 8) - *(void *)(v155 + 24 * v165)) {
                goto LABEL_220;
              }
            }
            unint64_t v166 = v12;
LABEL_220:
            *unint64_t v166 = v161;
            if ((char *)++v153 - v18 == 4096)
            {
LABEL_221:
              uint64_t v167 = *(char **)(a1 + 8);
              a1 += 8;
              uint64_t v18 = v167;
              int v153 = (int *)v167;
            }
          }
          if (v153 == (int *)v10) {
            return;
          }
        }
      }
      if (v19 >= -3)
      {
        unint64_t v230 = (char **)(a1 + 8 * ((unint64_t)++v20 >> 10));
      }
      else
      {
        unint64_t v229 = 1022 - v20;
        LOWORD(v2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = ~(1022 - v20);
        unint64_t v230 = (char **)(a1 - 8 * (v229 >> 10));
      }
      char v231 = *v230;
      char v232 = &(*v230)[4 * (v20 & 0x3FF)];
      if (v232 == (char *)v10) {
        return;
      }
      uint64_t v233 = *(void *)(v152 + 328);
      while (1)
      {
        uint64_t v234 = (v232 - v231) >> 2;
        if (v232 - v231 >= 5)
        {
          __int16 v236 = v234 - 1;
          char v237 = &v230[(unint64_t)(v234 - 1) >> 10];
        }
        else
        {
          unint64_t v235 = 1024 - v234;
          __int16 v236 = ~(_WORD)v235;
          char v237 = &v230[-(v235 >> 10)];
        }
        unint64_t v238 = *v237;
        unint64_t v239 = &(*v237)[4 * (v236 & 0x3FF)];
        int v240 = *(_DWORD *)v232;
        int v241 = *(_DWORD *)v239;
        unint64_t v242 = *(void *)(v233 + 24 * v240 + 8) - *(void *)(v233 + 24 * v240);
        if (v242 < *(void *)(v233 + 24 * v241 + 8) - *(void *)(v233 + 24 * v241)) {
          break;
        }
        v232 += 4;
        if (v232 - v231 == 4096) {
          goto LABEL_319;
        }
LABEL_306:
        if (v232 == (char *)v10) {
          return;
        }
      }
      unint64_t v243 = v232;
      do
      {
        unint64_t v246 = v239;
        *(_DWORD *)unint64_t v243 = v241;
        if (v239 == v238)
        {
          unint64_t v244 = *--v237;
          unint64_t v238 = v244;
          unint64_t v239 = v244 + 4096;
        }
        int v245 = *((_DWORD *)v239 - 1);
        v239 -= 4;
        int v241 = v245;
        unint64_t v243 = v246;
      }
      while (v242 < *(void *)(v233 + 24 * v245 + 8) - *(void *)(v233 + 24 * v245));
      *(_DWORD *)unint64_t v246 = v240;
      v232 += 4;
      if (v232 - v231 != 4096) {
        goto LABEL_306;
      }
LABEL_319:
      unint64_t v247 = v230[1];
      ++v230;
      char v231 = v247;
      char v232 = v247;
      goto LABEL_306;
    }
    if (!a6) {
      break;
    }
    unint64_t v22 = v21 >> 1;
    uint64_t v23 = v20 + (v21 >> 1);
    if (v21 < 0x81)
    {
      if (v23 < 1)
      {
        uint64_t v26 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v23) >> 10)) + 4
                                                                                   * (~(1023 - (_WORD)v23) & 0x3FF));
        if (v16 < 5) {
          goto LABEL_26;
        }
LABEL_16:
        unsigned __int8 v27 = (int *)(*(void *)&a3[((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v17 - 1) & 0x3FF));
      }
      else
      {
        uint64_t v26 = (int *)(*(void *)(a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF));
        if (v16 >= 5) {
          goto LABEL_16;
        }
LABEL_26:
        unsigned __int8 v27 = (int *)(*(void *)&a3[-8 * ((unint64_t)(1024 - v17) >> 10)] + 4 * (~(1024 - (_WORD)v17) & 0x3FF));
      }
      uint64_t v37 = *(void *)(*a5 + 328);
      int v38 = *v12;
      int v39 = *v26;
      unint64_t v40 = *(void *)(v37 + 24 * v38 + 8) - *(void *)(v37 + 24 * v38);
      unint64_t v41 = *(void *)(v37 + 24 * v39 + 8) - *(void *)(v37 + 24 * v39);
      int v42 = *v27;
      unint64_t v43 = *(void *)(v37 + 24 * v42 + 8) - *(void *)(v37 + 24 * v42);
      if (v40 >= v41)
      {
        if (v43 < v40)
        {
          *uint64_t v12 = v42;
          *unsigned __int8 v27 = v38;
          int v44 = *v12;
          int v45 = *v26;
          if (*(void *)(v37 + 24 * v44 + 8) - *(void *)(v37 + 24 * v44) < *(void *)(v37 + 24 * v45 + 8)
                                                                                 - *(void *)(v37 + 24 * v45))
          {
            *uint64_t v26 = v44;
            *uint64_t v12 = v45;
            --a6;
            if (a7) {
              goto LABEL_54;
            }
            goto LABEL_93;
          }
        }
      }
      else
      {
        if (v43 < v40)
        {
          *uint64_t v26 = v42;
          goto LABEL_52;
        }
        *uint64_t v26 = v38;
        *uint64_t v12 = v39;
        if (*(void *)(v37 + 24 * *v27 + 8) - *(void *)(v37 + 24 * *v27) < v41)
        {
          *uint64_t v12 = *v27;
LABEL_52:
          *unsigned __int8 v27 = v39;
        }
      }
      --a6;
      if (a7) {
        goto LABEL_54;
      }
      goto LABEL_93;
    }
    if (v23 < 1)
    {
      uint64_t v24 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v23) >> 10)) + 4 * (~(1023 - (_WORD)v23) & 0x3FF));
      unsigned int v249 = a7;
      if (v16 >= 5)
      {
LABEL_13:
        uint64_t v25 = (int *)(*(void *)&a3[((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v17 - 1) & 0x3FF));
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v24 = (int *)(*(void *)(a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF));
      unsigned int v249 = a7;
      if (v16 >= 5) {
        goto LABEL_13;
      }
    }
    uint64_t v25 = (int *)(*(void *)&a3[-8 * ((unint64_t)(1024 - v17) >> 10)] + 4 * (~(1024 - (_WORD)v17) & 0x3FF));
LABEL_19:
    uint64_t v28 = *(void *)(*a5 + 328);
    int v29 = *v24;
    int v30 = *v12;
    unint64_t v31 = *(void *)(v28 + 24 * v29 + 8) - *(void *)(v28 + 24 * v29);
    unint64_t v32 = *(void *)(v28 + 24 * v30 + 8) - *(void *)(v28 + 24 * v30);
    int v33 = *v25;
    unint64_t v34 = *(void *)(v28 + 24 * v33 + 8) - *(void *)(v28 + 24 * v33);
    if (v31 >= v32)
    {
      if (v34 < v31)
      {
        *uint64_t v24 = v33;
        *uint64_t v25 = v29;
        int v35 = *v24;
        int v36 = *v12;
        if (*(void *)(v28 + 24 * v35 + 8) - *(void *)(v28 + 24 * v35) < *(void *)(v28 + 24 * v36 + 8)
                                                                               - *(void *)(v28 + 24 * v36))
        {
          *uint64_t v12 = v35;
          *uint64_t v24 = v36;
        }
      }
    }
    else
    {
      if (v34 >= v31)
      {
        *uint64_t v12 = v29;
        *uint64_t v24 = v30;
        int v46 = *v25;
        if (*(void *)(v28 + 24 * v46 + 8) - *(void *)(v28 + 24 * v46) >= v32) {
          goto LABEL_37;
        }
        *uint64_t v24 = v46;
      }
      else
      {
        *uint64_t v12 = v33;
      }
      *uint64_t v25 = v30;
    }
LABEL_37:
    if (v19 < -3)
    {
      int v47 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1022 - v20) >> 10)) + 4 * (~(1022 - (_WORD)v20) & 0x3FF));
      uint64_t v48 = v22 + v20 - 1;
      unint64_t v49 = (unint64_t)v48 >> 7;
      if (v48 < 1)
      {
LABEL_39:
        uint64_t v50 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v48) >> 10)) + 4
                                                                                   * (~(1023 - (_WORD)v48) & 0x3FF));
        if (v16 < 9) {
          goto LABEL_40;
        }
        goto LABEL_43;
      }
    }
    else
    {
      int v47 = (int *)(*(void *)(a1 + (((unint64_t)(v20 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((v20 + 1) & 0x3FF));
      uint64_t v48 = v22 + v20 - 1;
      unint64_t v49 = (unint64_t)v48 >> 7;
      if (v48 < 1) {
        goto LABEL_39;
      }
    }
    uint64_t v50 = (int *)(*(void *)(a1 + (v49 & 0x1FFFFFFFFFFFFF8)) + 4 * (v48 & 0x3FF));
    if (v16 < 9)
    {
LABEL_40:
      int v51 = (int *)(*(void *)&a3[-8 * ((unint64_t)(1025 - v17) >> 10)] + 4 * (~(1025 - (_WORD)v17) & 0x3FF));
      goto LABEL_44;
    }
LABEL_43:
    int v51 = (int *)(*(void *)&a3[((unint64_t)(v17 - 2) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v17 - 2) & 0x3FF));
LABEL_44:
    int v52 = *v50;
    int v53 = *v47;
    unint64_t v54 = *(void *)(v28 + 24 * v52 + 8) - *(void *)(v28 + 24 * v52);
    unint64_t v55 = *(void *)(v28 + 24 * v53 + 8) - *(void *)(v28 + 24 * v53);
    int v56 = *v51;
    unint64_t v57 = *(void *)(v28 + 24 * v56 + 8) - *(void *)(v28 + 24 * v56);
    if (v54 >= v55)
    {
      if (v57 < v54)
      {
        *uint64_t v50 = v56;
        *int v51 = v52;
        int v58 = *v50;
        int v59 = *v47;
        if (*(void *)(v28 + 24 * v58 + 8) - *(void *)(v28 + 24 * v58) < *(void *)(v28 + 24 * v59 + 8)
                                                                               - *(void *)(v28 + 24 * v59))
        {
          *int v47 = v58;
          *uint64_t v50 = v59;
        }
      }
    }
    else
    {
      if (v57 >= v54)
      {
        *int v47 = v52;
        *uint64_t v50 = v53;
        int v63 = *v51;
        if (*(void *)(v28 + 24 * v63 + 8) - *(void *)(v28 + 24 * v63) >= v55) {
          goto LABEL_58;
        }
        *uint64_t v50 = v63;
      }
      else
      {
        *int v47 = v56;
      }
      *int v51 = v53;
    }
LABEL_58:
    if (v19 < -7)
    {
      uint64_t v64 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1021 - v20) >> 10)) + 4 * (~(1021 - (_WORD)v20) & 0x3FF));
      uint64_t v65 = v22 + v20 + 1;
      unint64_t v66 = (unint64_t)v65 >> 7;
      if (v65 < 1)
      {
LABEL_60:
        uint64_t v67 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v65) >> 10)) + 4
                                                                                   * (~(1023 - (_WORD)v65) & 0x3FF));
        if (v16 < 13) {
          goto LABEL_61;
        }
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v64 = (int *)(*(void *)(a1 + (((unint64_t)(v20 + 2) >> 7) & 0x1FFFFFFFFFFFFF8))
                  + 4 * ((v20 + 2) & 0x3FF));
      uint64_t v65 = v22 + v20 + 1;
      unint64_t v66 = (unint64_t)v65 >> 7;
      if (v65 < 1) {
        goto LABEL_60;
      }
    }
    uint64_t v67 = (int *)(*(void *)(a1 + (v66 & 0x1FFFFFFFFFFFFF8)) + 4 * (v65 & 0x3FF));
    if (v16 < 13)
    {
LABEL_61:
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = (int *)(*(void *)&a3[-8 * ((unint64_t)(1026 - v17) >> 10)] + 4 * (~(1026 - (_WORD)v17) & 0x3FF));
      goto LABEL_65;
    }
LABEL_64:
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = (int *)(*(void *)&a3[((unint64_t)(v17 - 3) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v17 - 3) & 0x3FF));
LABEL_65:
    int v69 = *v67;
    int v70 = *v64;
    unint64_t v71 = *(void *)(v28 + 24 * v69 + 8) - *(void *)(v28 + 24 * v69);
    unint64_t v72 = *(void *)(v28 + 24 * v70 + 8) - *(void *)(v28 + 24 * v70);
    int v73 = *v68;
    unint64_t v74 = *(void *)(v28 + 24 * v73 + 8) - *(void *)(v28 + 24 * v73);
    if (v71 >= v72)
    {
      if (v74 < v71)
      {
        *uint64_t v67 = v73;
        *std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = v69;
        int v75 = *v67;
        int v76 = *v64;
        if (*(void *)(v28 + 24 * v75 + 8) - *(void *)(v28 + 24 * v75) < *(void *)(v28 + 24 * *v64 + 8)
                                                                               - *(void *)(v28 + 24 * *v64))
        {
          *uint64_t v64 = v75;
          *uint64_t v67 = v76;
        }
      }
    }
    else
    {
      if (v74 >= v71)
      {
        *uint64_t v64 = v69;
        *uint64_t v67 = v70;
        if (*(void *)(v28 + 24 * *v68 + 8) - *(void *)(v28 + 24 * *v68) >= v72) {
          goto LABEL_74;
        }
        *uint64_t v67 = *v68;
      }
      else
      {
        *uint64_t v64 = v73;
      }
      *std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = v70;
    }
LABEL_74:
    if (v48 < 1)
    {
      unint64_t v77 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v48) >> 10)) + 4 * (~(1023 - (_WORD)v48) & 0x3FF));
      if (v23 >= 1)
      {
LABEL_76:
        uint64_t v78 = (int *)(*(void *)(a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF));
        if (v65 >= 1) {
          goto LABEL_77;
        }
        goto LABEL_80;
      }
    }
    else
    {
      unint64_t v77 = (int *)(*(void *)(a1 + (v49 & 0x1FFFFFFFFFFFFF8)) + 4 * (v48 & 0x3FF));
      if (v23 >= 1) {
        goto LABEL_76;
      }
    }
    uint64_t v78 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v23) >> 10)) + 4 * (~(1023 - (_WORD)v23) & 0x3FF));
    if (v65 >= 1)
    {
LABEL_77:
      unint64_t v79 = (int *)(*(void *)(a1 + (v66 & 0x1FFFFFFFFFFFFF8)) + 4 * (v65 & 0x3FF));
      goto LABEL_81;
    }
LABEL_80:
    unint64_t v79 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v65) >> 10)) + 4 * (~(1023 - (_WORD)v65) & 0x3FF));
LABEL_81:
    int v80 = *v78;
    int v81 = *v77;
    unint64_t v82 = *(void *)(v28 + 24 * v80 + 8) - *(void *)(v28 + 24 * v80);
    unint64_t v83 = *(void *)(v28 + 24 * v81 + 8) - *(void *)(v28 + 24 * v81);
    int v84 = *v79;
    unint64_t v85 = *(void *)(v28 + 24 * *v79 + 8) - *(void *)(v28 + 24 * *v79);
    if (v82 >= v83)
    {
      BOOL v111 = v85 >= v82;
      a7 = v249;
      if (!v111)
      {
        *uint64_t v78 = v84;
        *unint64_t v79 = v80;
        int v86 = *v78;
        int v87 = *v77;
        if (*(void *)(v28 + 24 * v86 + 8) - *(void *)(v28 + 24 * v86) < *(void *)(v28 + 24 * v87 + 8)
                                                                               - *(void *)(v28 + 24 * v87))
        {
          *unint64_t v77 = v86;
          *uint64_t v78 = v87;
        }
      }
    }
    else if (v85 >= v82)
    {
      *unint64_t v77 = v80;
      *uint64_t v78 = v81;
      int v88 = *v79;
      a7 = v249;
      if (*(void *)(v28 + 24 * v88 + 8) - *(void *)(v28 + 24 * v88) < v83)
      {
        *uint64_t v78 = v88;
        *unint64_t v79 = v81;
      }
    }
    else
    {
      *unint64_t v77 = v84;
      *unint64_t v79 = v81;
      a7 = v249;
    }
    if (v23 < 1)
    {
      uint64_t v91 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1023 - v23) >> 10)) + 4 * (~(1023 - (_WORD)v23) & 0x3FF));
      int v92 = *v12;
      *uint64_t v12 = *v91;
      *uint64_t v91 = v92;
      --a6;
      if (a7)
      {
LABEL_54:
        int v60 = *v12;
        uint64_t v61 = *(void *)(*a5 + 328);
        unint64_t v62 = *(void *)(v61 + 24 * v60 + 8) - *(void *)(v61 + 24 * v60);
        goto LABEL_97;
      }
    }
    else
    {
      unint64_t v89 = (int *)(*(void *)(a1 + (((unint64_t)v23 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v23 & 0x3FF));
      int v90 = *v12;
      *uint64_t v12 = *v89;
      *unint64_t v89 = v90;
      --a6;
      if (a7) {
        goto LABEL_54;
      }
    }
LABEL_93:
    if (v19 >= 5) {
      uint64_t v93 = (int *)(*(void *)(a1 + (((unint64_t)(v20 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
    }
                  + 4 * ((v20 - 1) & 0x3FF));
    else {
      uint64_t v93 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1024 - v20) >> 10)) + 4 * (~(1024 - (_WORD)v20) & 0x3FF));
    }
    int v94 = *v93;
    int v60 = *v12;
    uint64_t v61 = *(void *)(*a5 + 328);
    unint64_t v95 = *(void *)(v61 + 24 * v94 + 8) - *(void *)(v61 + 24 * v94);
    unint64_t v62 = *(void *)(v61 + 24 * v60 + 8) - *(void *)(v61 + 24 * v60);
    if (v95 >= v62)
    {
      if (v16 < 5)
      {
        if (v62 >= *(void *)(v61
                              + 24
                              * *(int *)(*(void *)&a3[-8 * ((unint64_t)(1024 - v17) >> 10)]
                                       + 4 * (~(1024 - (_WORD)v17) & 0x3FF))
                              + 8)
                  - *(void *)(v61
                              + 24
                              * *(int *)(*(void *)&a3[-8 * ((unint64_t)(1024 - v17) >> 10)]
                                       + 4 * (~(1024 - (_WORD)v17) & 0x3FF))))
          goto LABEL_151;
      }
      else if (v62 >= *(void *)(v61 {
                                 + 24
      }
                                 * *(int *)(*(void *)&a3[((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                          + 4 * ((v17 - 1) & 0x3FF))
                                 + 8)
                     - *(void *)(v61
                                 + 24
                                 * *(int *)(*(void *)&a3[((unint64_t)(v17 - 1) >> 7) & 0x1FFFFFFFFFFFFF8]
                                          + 4 * ((v17 - 1) & 0x3FF))))
      {
LABEL_151:
        uint64_t v127 = v12;
        do
        {
          if ((char *)++v127 - v18 == 4096)
          {
            int v129 = *(char **)(a1 + 8);
            a1 += 8;
            uint64_t v18 = v129;
            uint64_t v127 = (int *)v129;
          }
        }
        while ((a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v127 < v10)
             && v62 >= *(void *)(v61 + 24 * *v127 + 8) - *(void *)(v61 + 24 * *v127));
        goto LABEL_158;
      }
      uint64_t v127 = v12;
      do
      {
        if ((char *)++v127 - v18 == 4096)
        {
          uint64_t v134 = *(char **)(a1 + 8);
          a1 += 8;
          uint64_t v18 = v134;
          uint64_t v127 = (int *)v134;
        }
      }
      while (v62 >= *(void *)(v61 + 24 * *v127 + 8) - *(void *)(v61 + 24 * *v127));
LABEL_158:
      if (a1 < (unint64_t)a3 || (char *)a1 == a3 && (unint64_t)v127 < v10)
      {
        double v130 = a3;
        uint64_t v131 = (int *)v10;
        do
        {
          if (v131 == v15)
          {
            uint64_t v133 = (int *)*((void *)v130 - 1);
            v130 -= 8;
            uint64_t v15 = v133;
            uint64_t v131 = v133 + 1024;
          }
          int v132 = *--v131;
        }
        while (v62 < *(void *)(v61 + 24 * v132 + 8) - *(void *)(v61 + 24 * v132));
      }
      else
      {
        double v130 = a3;
        uint64_t v131 = (int *)v10;
      }
      while (a1 < (unint64_t)v130 || (char *)a1 == v130 && v127 < v131)
      {
        int v135 = *v127;
        int *v127 = *v131;
        int *v131 = v135;
        do
        {
          if ((char *)++v127 - v18 == 4096)
          {
            int v136 = *(char **)(a1 + 8);
            a1 += 8;
            uint64_t v18 = v136;
            uint64_t v127 = (int *)v136;
          }
        }
        while (v62 >= *(void *)(v61 + 24 * *v127 + 8) - *(void *)(v61 + 24 * *v127));
        do
        {
          if (v131 == v15)
          {
            uint64_t v138 = (int *)*((void *)v130 - 1);
            v130 -= 8;
            uint64_t v15 = v138;
            uint64_t v131 = v138 + 1024;
          }
          int v137 = *--v131;
        }
        while (v62 < *(void *)(v61 + 24 * v137 + 8) - *(void *)(v61 + 24 * v137));
      }
      uint64_t v139 = (char *)v127 - v18;
      uint64_t v140 = v139 >> 2;
      if (v139 < 5)
      {
        int v141 = (int *)(*(void *)(a1 - 8 * ((unint64_t)(1024 - v140) >> 10))
                     + 4 * (~(1024 - (_WORD)v140) & 0x3FF));
        if (v141 != v12) {
          goto LABEL_188;
        }
      }
      else
      {
        int v141 = (int *)(*(void *)(a1 + (((unint64_t)(v140 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v140 - 1) & 0x3FF));
        if (v141 == v12) {
          goto LABEL_189;
        }
LABEL_188:
        *uint64_t v12 = *v141;
      }
LABEL_189:
      a7 = 0;
      *int v141 = v60;
      goto LABEL_5;
    }
LABEL_97:
    long long v96 = *(int **)a1;
    uint64_t v97 = (void *)a1;
    uint64_t v98 = v12;
    do
    {
      if ((char *)++v98 - (char *)v96 == 4096)
      {
        size_t v100 = (int *)v97[1];
        ++v97;
        long long v96 = v100;
        uint64_t v98 = v100;
      }
      int v99 = *v98;
    }
    while (*(void *)(v61 + 24 * v99 + 8) - *(void *)(v61 + 24 * v99) < v62);
    uint64_t v101 = v98 - v96;
    if ((char *)v98 - (char *)v96 >= 5)
    {
      uint64_t v102 = *(void *)((char *)v97 + (((unint64_t)(v101 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
           + 4 * ((v101 - 1) & 0x3FF);
      uint64_t v103 = a3;
      long long v104 = (int *)v10;
      if ((int *)v102 == v12) {
        goto LABEL_111;
      }
LABEL_105:
      uint64_t v106 = *(int **)a3;
      uint64_t v103 = a3;
      long long v104 = (int *)v10;
      do
      {
        if (v104 == v106)
        {
          uint64_t v108 = (int *)*((void *)v103 - 1);
          v103 -= 8;
          uint64_t v106 = v108;
          long long v104 = v108 + 1024;
        }
        int v107 = *--v104;
      }
      while (*(void *)(v61 + 24 * v107 + 8) - *(void *)(v61 + 24 * v107) >= v62);
      goto LABEL_116;
    }
    uint64_t v105 = v97[-((unint64_t)(1024 - v101) >> 10)] + 4 * (~(1024 - (_WORD)v101) & 0x3FF);
    uint64_t v103 = a3;
    long long v104 = (int *)v10;
    if ((int *)v105 != v12) {
      goto LABEL_105;
    }
LABEL_111:
    while (v97 < (void *)v103 || v97 == (void *)v103 && v98 < v104)
    {
      if (v104 == *(int **)v103)
      {
        uint64_t v110 = *((void *)v103 - 1);
        v103 -= 8;
        long long v104 = (int *)(v110 + 4092);
        if (*(void *)(v61 + 24 * *(int *)(v110 + 4092) + 8) - *(void *)(v61 + 24 * *(int *)(v110 + 4092)) < v62) {
          break;
        }
      }
      else
      {
        int v109 = *--v104;
        if (*(void *)(v61 + 24 * v109 + 8) - *(void *)(v61 + 24 * v109) < v62) {
          break;
        }
      }
    }
LABEL_116:
    BOOL v111 = v97 != (void *)v103 || v98 >= v104;
    int v112 = v111;
    if (v97 < (void *)v103) {
      int v112 = 0;
    }
    while (v97 < (void *)v103 || v97 == (void *)v103 && v98 < v104)
    {
      *uint64_t v98 = *v104;
      *long long v104 = v99;
      do
      {
        if ((char *)++v98 - (char *)v96 == 4096)
        {
          uint64_t v113 = (int *)v97[1];
          ++v97;
          long long v96 = v113;
          uint64_t v98 = v113;
        }
        int v99 = *v98;
      }
      while (*(void *)(v61 + 24 * v99 + 8) - *(void *)(v61 + 24 * v99) < v62);
      unint64_t v114 = *(int **)v103;
      do
      {
        if (v104 == v114)
        {
          uint64_t v116 = (int *)*((void *)v103 - 1);
          v103 -= 8;
          unint64_t v114 = v116;
          long long v104 = v116 + 1024;
        }
        int v115 = *--v104;
      }
      while (*(void *)(v61 + 24 * v115 + 8) - *(void *)(v61 + 24 * v115) >= v62);
    }
    uint64_t v117 = (char *)v98 - (char *)v96;
    uint64_t v118 = v98 - v96;
    if (v117 >= 5)
    {
      unint64_t v119 = v118 - 1;
      unint64_t v120 = (unint64_t)&v97[v119 >> 10];
      uint64_t v121 = (int *)(*(void *)v120 + 4 * (v119 & 0x3FF));
      if (v121 == v12) {
        goto LABEL_140;
      }
LABEL_139:
      *uint64_t v12 = *v121;
      goto LABEL_140;
    }
    unint64_t v122 = 1024 - v118;
    unint64_t v120 = (unint64_t)&v97[-(v122 >> 10)];
    uint64_t v121 = (int *)(*(void *)v120 + 4 * (~v122 & 0x3FFLL));
    if (v121 != v12) {
      goto LABEL_139;
    }
LABEL_140:
    *uint64_t v121 = v60;
    if (!v112) {
      goto LABEL_146;
    }
    uint64_t v248 = a6;
    uint64_t v123 = a7;
    BOOL v124 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v12, (char *)v120, (uint64_t)v121, (uint64_t)a5);
    uint64_t v125 = (uint64_t)v121 - *(void *)v120;
    uint64_t v126 = v125 >> 2;
    if (v125 < -3)
    {
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v120 - 8 * ((unint64_t)(1022 - v126) >> 10)), (int *)(*(void *)(v120 - 8 * ((unint64_t)(1022 - v126) >> 10))+ 4 * (~(1022 - (_WORD)v126) & 0x3FF)), a3, v10, (uint64_t)a5))
      {
LABEL_166:
        a3 = (char *)v120;
        unint64_t v10 = (unint64_t)v121;
        uint64_t v127 = v12;
        a7 = v123;
        a6 = v248;
        if (v124) {
          return;
        }
        goto LABEL_5;
      }
    }
    else if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)(v120 + 8 * ((unint64_t)(v126 + 1) >> 10)), (int *)(*(void *)(v120 + 8 * ((unint64_t)(v126 + 1) >> 10)) + 4 * ((v126 + 1) & 0x3FF)), a3, v10, (uint64_t)a5))
    {
      goto LABEL_166;
    }
    a7 = v123;
    a6 = v248;
    if (v124)
    {
      uint64_t v127 = v121 + 1;
      if ((int *)((char *)v121 - *(void *)v120 + 4) == (int *)4096) {
        goto LABEL_148;
      }
    }
    else
    {
LABEL_146:
      std::__introsort<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,false>(a1, v12, v120, v121, a5, a6, a7 & 1);
      uint64_t v127 = v121 + 1;
      if ((int *)((char *)v121 - *(void *)v120 + 4) == (int *)4096)
      {
        a7 = 0;
LABEL_148:
        unint64_t v128 = *(int **)(v120 + 8);
        v120 += 8;
        uint64_t v127 = v128;
        goto LABEL_4;
      }
      a7 = 0;
    }
LABEL_4:
    a1 = v120;
LABEL_5:
    uint64_t v12 = v127;
    BOOL v7 = v10 > (unint64_t)v127;
    if ((int *)v10 == v127) {
      return;
    }
  }
  unint64_t v168 = (v21 - 2) >> 1;
  unint64_t v169 = 1023 - v168;
  do
  {
    int v170 = v12;
    std::string v171 = (char *)a1;
    if (v168)
    {
      uint64_t v172 = ((uint64_t)v12 - *(void *)a1) >> 2;
      unint64_t v173 = v168 + v172;
      if ((uint64_t)(v168 + v172) >= 1)
      {
        std::string v171 = (char *)(a1 + 8 * (v173 >> 10));
        int v170 = (int *)(*(void *)v171 + 4 * (v173 & 0x3FF));
      }
      else
      {
        std::string v171 = (char *)(a1 - 8 * ((v169 - v172) >> 10));
        int v170 = (int *)(*(void *)v171 + 4 * (~((_WORD)v169 - (_WORD)v172) & 0x3FF));
      }
    }
    std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((char *)a1, v12, *a5, v21, v171, v170);
    --v168;
    ++v169;
  }
  while (v168 != -1);
  unsigned __int8 v174 = *(int **)a3;
  uint64_t v175 = ((uint64_t)v12 - *(void *)a1) >> 2;
  uint64_t v176 = v14 + ((uint64_t)(v10 - *(void *)a3) >> 2) - v175;
  if (v176 < 2) {
    return;
  }
  while (2)
  {
    while (2)
    {
      uint64_t v177 = 0;
      int v178 = *v12;
      uint64_t v179 = *a5;
      unsigned __int8 v180 = v12;
      uint64_t v181 = (uint64_t *)a1;
      while (2)
      {
        int v182 = v180;
        if (v177 == -1)
        {
          uint64_t v183 = -1;
          uint64_t v177 = 0;
          if (v176 > 0) {
            goto LABEL_242;
          }
          goto LABEL_233;
        }
        uint64_t v184 = v177 + 1 + (((uint64_t)v180 - *v181) >> 2);
        if (v184 < 1)
        {
          unint64_t v185 = 1023 - v184;
          v181 -= v185 >> 10;
          unsigned __int8 v180 = (int *)(*v181 + 4 * (~(_WORD)v185 & 0x3FF));
          uint64_t v183 = (2 * v177) | 1;
          uint64_t v177 = 2 * v177 + 2;
          if (v177 < v176) {
            goto LABEL_242;
          }
          goto LABEL_233;
        }
        v181 += (unint64_t)v184 >> 10;
        unsigned __int8 v180 = (int *)(*v181 + 4 * (v184 & 0x3FF));
        uint64_t v183 = (2 * v177) | 1;
        uint64_t v177 = 2 * v177 + 2;
        if (v177 >= v176) {
          goto LABEL_233;
        }
LABEL_242:
        uint64_t v186 = (uint64_t)v180 - *v181;
        uint64_t v187 = v186 >> 2;
        if (v186 >= -3) {
          unint64_t v188 = (int *)(*(uint64_t *)((char *)v181 + (((unint64_t)(v187 + 1) >> 7) & 0x1FFFFFFFFFFFFF8))
        }
                       + 4 * ((v187 + 1) & 0x3FF));
        else {
          unint64_t v188 = (int *)(v181[-((unint64_t)(1022 - v187) >> 10)] + 4 * (~(1022 - (_WORD)v187) & 0x3FF));
        }
        uint64_t v189 = *(void *)(v179 + 328);
        if (*(void *)(v189 + 24 * *v180 + 8) - *(void *)(v189 + 24 * *v180) >= *(void *)(v189
                                                                                                  + 24 * *v188
                                                                                                  + 8)
                                                                                      - *(void *)(v189 + 24 * *v188))
        {
LABEL_233:
          uint64_t v177 = v183;
        }
        else if ((int *)((char *)++v180 - *v181) == (int *)4096)
        {
          int v190 = (int *)v181[1];
          ++v181;
          unsigned __int8 v180 = v190;
        }
        *int v182 = *v180;
        if (v177 <= (uint64_t)((unint64_t)(v176 - 2) >> 1)) {
          continue;
        }
        break;
      }
      if (v174 != (int *)v10)
      {
        uint64_t v191 = (int *)(v10 - 4);
        if (v180 != (int *)(v10 - 4)) {
          goto LABEL_250;
        }
LABEL_262:
        int *v180 = v178;
        goto LABEL_263;
      }
      uint64_t v191 = (int *)(*((void *)a3 - 1) + 4092);
      if (v180 == v191) {
        goto LABEL_262;
      }
LABEL_250:
      int *v180 = *v191;
      uint64_t v192 = (uint64_t)(v180 + 1);
      uint64_t v193 = *v181;
      if (v192 - *v181 == 4096)
      {
        uint64_t v194 = v181[1];
        ++v181;
        uint64_t v193 = v194;
        uint64_t v192 = v194;
      }
      *uint64_t v191 = v178;
      if ((int *)v192 == v12
        || (uint64_t v195 = ((v192 - v193) >> 2) - v175 + (((void)v181 - a1) << 7), v196 = v195 - 2, v195 < 2))
      {
LABEL_263:
        if (v174 != (int *)v10) {
          goto LABEL_231;
        }
LABEL_264:
        unint64_t v206 = (int *)*((void *)a3 - 1);
        a3 -= 8;
        unsigned __int8 v174 = v206;
        unint64_t v10 = (unint64_t)(v206 + 1023);
        BOOL v7 = v176-- <= 2;
        if (v7) {
          return;
        }
        continue;
      }
      break;
    }
    unint64_t v197 = v196 >> 1;
    double v198 = v12;
    if (v196 < 2) {
      goto LABEL_257;
    }
    unint64_t v199 = v197 + v175;
    if ((uint64_t)(v197 + v175) < 1)
    {
      double v198 = (int *)(*(void *)(a1 - 8 * ((1023 - v199) >> 10)) + 4 * (~(1023 - (_WORD)v199) & 0x3FF));
      if (v193 == v192) {
        goto LABEL_258;
      }
    }
    else
    {
      double v198 = (int *)(*(void *)(a1 + ((v199 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v199 & 0x3FF));
LABEL_257:
      if (v193 == v192) {
LABEL_258:
      }
        uint64_t v192 = *(v181 - 1) + 4096;
    }
    int v202 = *(_DWORD *)(v192 - 4);
    unint64_t v200 = (int *)(v192 - 4);
    int v201 = v202;
    uint64_t v203 = *(void *)(*a5 + 328);
    unint64_t v204 = *(void *)(v203 + 24 * v202 + 8) - *(void *)(v203 + 24 * v202);
    if (*(void *)(v203 + 24 * *v198 + 8) - *(void *)(v203 + 24 * *v198) >= v204) {
      goto LABEL_263;
    }
    int v205 = *v198;
    do
    {
      unint64_t v207 = v198;
      int *v200 = v205;
      if (!v197) {
        break;
      }
      unint64_t v208 = (v197 - 1) >> 1;
      double v198 = v12;
      if (v197 >= 3)
      {
        unint64_t v209 = v208 + v175;
        if ((uint64_t)(v208 + v175) >= 1) {
          double v198 = (int *)(*(void *)(a1 + ((v209 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v209 & 0x3FF));
        }
        else {
          double v198 = (int *)(*(void *)(a1 - 8 * ((1023 - v209) >> 10)) + 4 * (~(1023 - (_WORD)v209) & 0x3FF));
        }
      }
      int v205 = *v198;
      unint64_t v200 = v207;
      unint64_t v197 = (v197 - 1) >> 1;
    }
    while (*(void *)(v203 + 24 * v205 + 8) - *(void *)(v203 + 24 * v205) < v204);
    *unint64_t v207 = v201;
    if (v174 == (int *)v10) {
      goto LABEL_264;
    }
LABEL_231:
    v10 -= 4;
    BOOL v7 = v176-- <= 2;
    if (!v7) {
      continue;
    }
    break;
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9, int *a10, uint64_t a11)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(a1, a2, a3, a4, a5, a6, a7, a8, *(void *)(*(void *)a11 + 328));
  int v15 = *a10;
  int v16 = *a8;
  uint64_t v17 = *(void *)(*(void *)a11 + 328);
  if (*(void *)(v17 + 24 * v15 + 8) - *(void *)(v17 + 24 * v15) < *(void *)(v17 + 24 * v16 + 8)
                                                                         - *(void *)(v17 + 24 * v16))
  {
    *a8 = v15;
    *a10 = v16;
    int v18 = *a8;
    int v19 = *a6;
    if (*(void *)(v17 + 24 * v18 + 8) - *(void *)(v17 + 24 * v18) < *(void *)(v17 + 24 * v19 + 8)
                                                                           - *(void *)(v17 + 24 * v19))
    {
      *a6 = v18;
      *a8 = v19;
      int v20 = *a6;
      int v21 = *a4;
      if (*(void *)(v17 + 24 * v20 + 8) - *(void *)(v17 + 24 * v20) < *(void *)(v17 + 24 * v21 + 8)
                                                                             - *(void *)(v17 + 24 * v21))
      {
        *a4 = v20;
        *a6 = v21;
        int v22 = *a4;
        int v23 = *a2;
        if (*(void *)(v17 + 24 * v22 + 8) - *(void *)(v17 + 24 * v22) < *(void *)(v17 + 24 * v23 + 8)
                                                                               - *(void *)(v17 + 24 * v23))
        {
          *a2 = v22;
          *a4 = v23;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *a1, int *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if ((int *)a4 == a2) {
    return 1;
  }
  uint64_t v5 = (uint64_t)a3;
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = (uint64_t)a2 - *(void *)a1;
  uint64_t v8 = v7 >> 2;
  switch(((a4 - *(void *)a3) >> 2) + ((a3 - a1) << 7) - (v7 >> 2))
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (v6 == a4) {
        a4 = *((void *)a3 - 1) + 4096;
      }
      int v14 = *(_DWORD *)(a4 - 4);
      int v15 = *a2;
      uint64_t v16 = *(void *)(*(void *)a5 + 328);
      if (*(void *)(v16 + 24 * v14 + 8) - *(void *)(v16 + 24 * v14) < *(void *)(v16 + 24 * v15 + 8)
                                                                             - *(void *)(v16 + 24 * v15))
      {
        *a2 = v14;
        *(_DWORD *)(a4 - 4) = v15;
      }
      return 1;
    case 3:
      if (v7 < -3)
      {
        uint64_t v17 = (int *)(*(void *)&a1[-8 * ((unint64_t)(1022 - v8) >> 10)] + 4 * (~(1022 - (_WORD)v8) & 0x3FF));
        if (v6 != a4) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v17 = (int *)(*(void *)&a1[((unint64_t)(v8 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v8 + 1) & 0x3FF));
        if (v6 != a4) {
          goto LABEL_23;
        }
      }
      a4 = *((void *)a3 - 1) + 4096;
LABEL_23:
      uint64_t v25 = *(void *)(*(void *)a5 + 328);
      int v26 = *v17;
      int v27 = *a2;
      unint64_t v28 = *(void *)(v25 + 24 * v26 + 8) - *(void *)(v25 + 24 * v26);
      unint64_t v29 = *(void *)(v25 + 24 * v27 + 8) - *(void *)(v25 + 24 * v27);
      int v30 = *(_DWORD *)(a4 - 4);
      unint64_t v31 = *(void *)(v25 + 24 * v30 + 8) - *(void *)(v25 + 24 * v30);
      if (v28 >= v29)
      {
        if (v31 < v28)
        {
          *uint64_t v17 = v30;
          *(_DWORD *)(a4 - 4) = v26;
          int v38 = *v17;
          int v39 = *a2;
          if (*(void *)(v25 + 24 * v38 + 8) - *(void *)(v25 + 24 * v38) < *(void *)(v25 + 24 * v39 + 8)
                                                                                 - *(void *)(v25 + 24 * v39))
          {
            *a2 = v38;
            *uint64_t v17 = v39;
            return 1;
          }
        }
      }
      else
      {
        if (v31 < v28)
        {
          *a2 = v30;
          *(_DWORD *)(a4 - 4) = v27;
          return 1;
        }
        *a2 = v26;
        *uint64_t v17 = v27;
        int v52 = *(_DWORD *)(a4 - 4);
        if (*(void *)(v25 + 24 * v52 + 8) - *(void *)(v25 + 24 * v52) < v29)
        {
          *uint64_t v17 = v52;
          *(_DWORD *)(a4 - 4) = v27;
          return 1;
        }
      }
      return 1;
    case 4:
      if (v7 >= -3)
      {
        int v21 = &a1[8 * ((unint64_t)(v8 + 1) >> 10)];
        int v22 = (int *)(*(void *)v21 + 4 * ((v8 + 1) & 0x3FF));
        unint64_t v23 = v8 + 2;
        goto LABEL_37;
      }
      int v21 = &a1[-8 * ((unint64_t)(1022 - v8) >> 10)];
      int v22 = (int *)(*(void *)v21 + 4 * (~(1022 - (_WORD)v8) & 0x3FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v23 = 1;
LABEL_37:
        unint64_t v40 = &a1[8 * (v23 >> 10)];
        unint64_t v41 = (int *)(*(void *)v40 + 4 * (v23 & 0x3FF));
        if (v6 != a4) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      unint64_t v40 = &a1[-8 * ((unint64_t)(1021 - v8) >> 10)];
      unint64_t v41 = (int *)(*(void *)v40 + 4 * (~(1021 - (_WORD)v8) & 0x3FF));
      if (v6 == a4)
      {
LABEL_38:
        uint64_t v42 = *(void *)(v5 - 8);
        v5 -= 8;
        a4 = v42 + 4096;
      }
LABEL_39:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>((uint64_t)a1, a2, (uint64_t)v21, v22, (uint64_t)v40, v41, v5, (int *)(a4 - 4), *(void *)(*(void *)a5 + 328));
      return 1;
    case 5:
      if (v7 >= -3)
      {
        int v18 = &a1[8 * ((unint64_t)(v8 + 1) >> 10)];
        int v19 = (int *)(*(void *)v18 + 4 * ((v8 + 1) & 0x3FF));
        unint64_t v20 = v8 + 2;
LABEL_28:
        unint64_t v32 = &a1[8 * (v20 >> 10)];
        int v33 = (int *)(*(void *)v32 + 4 * (v20 & 0x3FF));
        unint64_t v34 = v8 + 3;
        goto LABEL_29;
      }
      int v18 = &a1[-8 * ((unint64_t)(1022 - v8) >> 10)];
      int v19 = (int *)(*(void *)v18 + 4 * (~(1022 - (_WORD)v8) & 0x3FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF9)
      {
        unint64_t v20 = 1;
        goto LABEL_28;
      }
      unint64_t v32 = &a1[-8 * ((unint64_t)(1021 - v8) >> 10)];
      int v33 = (int *)(*(void *)v32 + 4 * (~(1021 - (_WORD)v8) & 0x3FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF5)
      {
        unint64_t v34 = 1;
LABEL_29:
        int v35 = &a1[8 * (v34 >> 10)];
        int v36 = (int *)(*(void *)v35 + 4 * (v34 & 0x3FF));
        if (v6 != a4) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      unint64_t v73 = 1020 - v8;
      int v35 = &a1[-8 * (v73 >> 10)];
      int v36 = (int *)(*(void *)v35 + 4 * (~(_WORD)v73 & 0x3FF));
      if (v6 == a4)
      {
LABEL_30:
        uint64_t v37 = *(void *)(v5 - 8);
        v5 -= 8;
        a4 = v37 + 4096;
      }
LABEL_31:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>,0>((uint64_t)a1, a2, (uint64_t)v18, v19, (uint64_t)v32, v33, (uint64_t)v35, v36, v5, (int *)(a4 - 4), a5);
      return 1;
    default:
      if (v7 <= -8)
      {
        unint64_t v10 = &a1[-8 * ((unint64_t)(1021 - v8) >> 10)];
        uint64_t v11 = *(char **)v10;
        uint64_t v12 = (int *)(*(void *)v10 + 4 * (~(1021 - (_WORD)v8) & 0x3FF));
        unint64_t v13 = 1022 - v8;
        goto LABEL_20;
      }
      unint64_t v10 = &a1[8 * ((unint64_t)(v8 + 2) >> 10)];
      uint64_t v11 = *(char **)v10;
      uint64_t v12 = (int *)(*(void *)v10 + 4 * ((v8 + 2) & 0x3FF));
      if (v8 == -1)
      {
        unint64_t v13 = 1023;
LABEL_20:
        uint64_t v24 = (int *)(*(void *)&a1[-8 * (v13 >> 10)] + 4 * (~(_WORD)v13 & 0x3FF));
        goto LABEL_41;
      }
      uint64_t v24 = (int *)(*(void *)&a1[((unint64_t)(v8 + 1) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v8 + 1) & 0x3FF));
LABEL_41:
      uint64_t v43 = *(void *)(*(void *)a5 + 328);
      int v44 = *v24;
      int v45 = *a2;
      unint64_t v46 = *(void *)(v43 + 24 * v44 + 8) - *(void *)(v43 + 24 * v44);
      unint64_t v47 = *(void *)(v43 + 24 * v45 + 8) - *(void *)(v43 + 24 * v45);
      int v48 = *v12;
      unint64_t v49 = *(void *)(v43 + 24 * v48 + 8) - *(void *)(v43 + 24 * v48);
      if (v46 >= v47)
      {
        if (v49 < v46)
        {
          *uint64_t v24 = v48;
          *uint64_t v12 = v44;
          int v50 = *v24;
          int v51 = *a2;
          if (*(void *)(v43 + 24 * v50 + 8) - *(void *)(v43 + 24 * v50) < *(void *)(v43 + 24 * v51 + 8)
                                                                                 - *(void *)(v43 + 24 * v51))
          {
            *a2 = v50;
            *uint64_t v24 = v51;
          }
        }
      }
      else
      {
        if (v49 >= v46)
        {
          *a2 = v44;
          *uint64_t v24 = v45;
          int v53 = *v12;
          if (*(void *)(v43 + 24 * v53 + 8) - *(void *)(v43 + 24 * v53) >= v47) {
            goto LABEL_54;
          }
          *uint64_t v24 = v53;
        }
        else
        {
          *a2 = v48;
        }
        *uint64_t v12 = v45;
      }
LABEL_54:
      uint64_t v54 = ((char *)v12 - v11) >> 2;
      if ((char *)v12 - v11 < -3)
      {
        unint64_t v59 = 1022 - v54;
        int v56 = &v10[-8 * (v59 >> 10)];
        unint64_t v57 = *(_DWORD **)v56;
        uint64_t v58 = ~v59 & 0x3FFLL;
      }
      else
      {
        unint64_t v55 = v54 + 1;
        int v56 = &v10[8 * (v55 >> 10)];
        unint64_t v57 = *(_DWORD **)v56;
        uint64_t v58 = v55 & 0x3FF;
      }
      int v60 = &v57[v58];
      if (v60 == (int *)a4) {
        return 1;
      }
      int v61 = 0;
      while (1)
      {
        unint64_t v62 = v60;
        int v63 = v56;
        uint64_t v64 = v57;
        int v65 = *v60;
        int v66 = *v12;
        unint64_t v67 = *(void *)(v43 + 24 * v65 + 8) - *(void *)(v43 + 24 * v65);
        if (v67 < *(void *)(v43 + 24 * v66 + 8) - *(void *)(v43 + 24 * v66))
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = v60;
          while (1)
          {
            *std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = v66;
            if (v12 == a2) {
              break;
            }
            unint64_t v71 = v12;
            if (v12 == (int *)v11)
            {
              int v69 = (_DWORD *)*((void *)v10 - 1);
              v10 -= 8;
              uint64_t v11 = (char *)v69;
              uint64_t v12 = v69 + 1024;
            }
            int v70 = *--v12;
            int v66 = v70;
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = v71;
            if (v67 >= *(void *)(v43 + 24 * v70 + 8) - *(void *)(v43 + 24 * v70)) {
              goto LABEL_68;
            }
          }
          unint64_t v71 = a2;
LABEL_68:
          *unint64_t v71 = v65;
          if (++v61 == 8) {
            break;
          }
        }
        int v60 = v62 + 1;
        unint64_t v57 = v64;
        int v56 = v63;
        if ((char *)(v62 + 1) - (char *)v64 == 4096)
        {
          int v56 = v63 + 8;
          unint64_t v57 = (_DWORD *)*((void *)v63 + 1);
          int v60 = v57;
        }
        uint64_t v11 = (char *)v64;
        unint64_t v10 = v63;
        uint64_t v12 = v62;
        if (v60 == (int *)a4) {
          return 1;
        }
      }
      unint64_t v72 = v62 + 1;
      if ((char *)(v62 + 1) - (char *)v64 == 4096) {
        unint64_t v72 = (_DWORD *)*((void *)v63 + 1);
      }
      BOOL result = v72 == (_DWORD *)a4;
      break;
  }
  return result;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(uint64_t a1, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = *a4;
  int v10 = *a2;
  unint64_t v11 = *(void *)(a9 + 24 * v9 + 8) - *(void *)(a9 + 24 * v9);
  unint64_t v12 = *(void *)(a9 + 24 * v10 + 8) - *(void *)(a9 + 24 * v10);
  int v13 = *a6;
  unint64_t v14 = *(void *)(a9 + 24 * v13 + 8) - *(void *)(a9 + 24 * v13);
  if (v11 >= v12)
  {
    if (v14 >= v11)
    {
      int v15 = *a6;
      goto LABEL_13;
    }
    *a4 = v13;
    *a6 = v9;
    int v16 = *a4;
    int v17 = *a2;
    if (*(void *)(a9 + 24 * v16 + 8) - *(void *)(a9 + 24 * v16) >= *(void *)(a9 + 24 * v17 + 8)
                                                                          - *(void *)(a9 + 24 * v17))
    {
      int v15 = v9;
      int v13 = v9;
      goto LABEL_13;
    }
    *a2 = v16;
    *a4 = v17;
    int v13 = *a6;
    goto LABEL_11;
  }
  int v15 = *a2;
  if (v14 >= v11)
  {
    *a2 = v9;
    *a4 = v10;
    int v13 = *a6;
    if (*(void *)(a9 + 24 * v13 + 8) - *(void *)(a9 + 24 * v13) < v12)
    {
      *a4 = v13;
      goto LABEL_9;
    }
LABEL_11:
    int v15 = v13;
    goto LABEL_13;
  }
  *a2 = v13;
LABEL_9:
  *a6 = v10;
  int v13 = v10;
LABEL_13:
  int v18 = *a8;
  if (*(void *)(a9 + 24 * v18 + 8) - *(void *)(a9 + 24 * v18) < *(void *)(a9 + 24 * v15 + 8)
                                                                       - *(void *)(a9 + 24 * v15))
  {
    *a6 = v18;
    *a8 = v13;
    int v19 = *a6;
    int v20 = *a4;
    if (*(void *)(a9 + 24 * v19 + 8) - *(void *)(a9 + 24 * v19) < *(void *)(a9 + 24 * v20 + 8)
                                                                         - *(void *)(a9 + 24 * v20))
    {
      *a4 = v19;
      *a6 = v20;
      int v21 = *a4;
      int v22 = *a2;
      if (*(void *)(a9 + 24 * v21 + 8) - *(void *)(a9 + 24 * v21) < *(void *)(a9 + 24 * v22 + 8)
                                                                           - *(void *)(a9 + 24 * v22))
      {
        *a2 = v21;
        *a4 = v22;
      }
    }
  }
}

char *std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,operations_research::sat::SatPresolver::ProcessAllClauses(void)::$_0 &,std::__deque_iterator<int,int *,int &,int **,long,1024l>>(char *result, int *a2, uint64_t a3, uint64_t a4, char *a5, int *a6)
{
  if (a6 == a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a4 - 2;
    if (a4 < 2) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = (((uint64_t)a6 - *(void *)a5) >> 2) + ((a5 - result) << 7) - (((uint64_t)a2 - *(void *)result) >> 2);
    unint64_t v7 = a4 - 2;
    if (a4 < 2) {
      return result;
    }
  }
  uint64_t v8 = v7 >> 1;
  if (v8 >= v6)
  {
    uint64_t v9 = 2 * v6;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = ((uint64_t)a2 - *(void *)result) >> 2;
    unint64_t v12 = v11 + v10;
    if (v11 + v10 < 1)
    {
      unint64_t v19 = 1023 - v12;
      int v13 = &result[-8 * (v19 >> 10)];
      uint64_t v14 = *(void *)v13;
      int v15 = (int *)(*(void *)v13 + 4 * (~(_WORD)v19 & 0x3FF));
      uint64_t v16 = v9 + 2;
      if (v9 + 2 < a4)
      {
LABEL_8:
        uint64_t v17 = ((uint64_t)v15 - v14) >> 2;
        if ((uint64_t)v15 - v14 < -3) {
          int v18 = (int *)(*(void *)&v13[-8 * ((unint64_t)(1022 - v17) >> 10)]
        }
                      + 4 * (~(1022 - (_WORD)v17) & 0x3FF));
        else {
          int v18 = (int *)(*(void *)&v13[((unint64_t)(v17 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
        }
                      + 4 * ((v17 + 1) & 0x3FF));
        int v21 = *v18;
        uint64_t v20 = *(void *)(a3 + 328);
        if (*(void *)(v20 + 24 * *v15 + 8) - *(void *)(v20 + 24 * *v15) < *(void *)(v20 + 24 * v21 + 8)
                                                                                 - *(void *)(v20 + 24 * v21))
        {
          if ((int *)((char *)++v15 - v14) == (int *)4096) {
            int v15 = (int *)*((void *)v13 + 1);
          }
          uint64_t v10 = v16;
        }
LABEL_17:
        int v22 = *v15;
        int v23 = *a6;
        unint64_t v24 = *(void *)(v20 + 24 * v23 + 8) - *(void *)(v20 + 24 * v23);
        if (*(void *)(v20 + 24 * v22 + 8) - *(void *)(v20 + 24 * v22) < v24) {
          return result;
        }
        while (1)
        {
          *a6 = v22;
          a6 = v15;
          if (v8 < v10)
          {
LABEL_33:
            *a6 = v23;
            return result;
          }
          uint64_t v25 = (2 * v10) | 1;
          unint64_t v26 = v25 + v11;
          if (v25 + v11 < 1)
          {
            unint64_t v29 = 1023 - v26;
            int v27 = &result[-8 * (v29 >> 10)];
            uint64_t v28 = *(void *)v27;
            int v15 = (int *)(*(void *)v27 + 4 * (~v29 & 0x3FFLL));
            uint64_t v10 = 2 * v10 + 2;
            if (v10 >= a4) {
              goto LABEL_20;
            }
          }
          else
          {
            int v27 = &result[8 * (v26 >> 10)];
            uint64_t v28 = *(void *)v27;
            int v15 = (int *)(*(void *)v27 + 4 * (v26 & 0x3FF));
            uint64_t v10 = 2 * v10 + 2;
            if (v10 >= a4) {
              goto LABEL_20;
            }
          }
          uint64_t v30 = ((uint64_t)v15 - v28) >> 2;
          if ((uint64_t)v15 - v28 < -3) {
            unint64_t v31 = (int *)(*(void *)&v27[-8 * ((unint64_t)(1022 - v30) >> 10)]
          }
                        + 4 * (~(1022 - (_WORD)v30) & 0x3FF));
          else {
            unint64_t v31 = (int *)(*(void *)&v27[((unint64_t)(v30 + 1) >> 7) & 0x1FFFFFFFFFFFFF8]
          }
                        + 4 * ((v30 + 1) & 0x3FF));
          if (*(void *)(v20 + 24 * *v15 + 8) - *(void *)(v20 + 24 * *v15) < *(void *)(v20 + 24 * *v31 + 8)
                                                                                   - *(void *)(v20 + 24 * *v31))
          {
            if ((int *)((char *)++v15 - v28) == (int *)4096) {
              int v15 = (int *)*((void *)v27 + 1);
            }
            goto LABEL_21;
          }
LABEL_20:
          uint64_t v10 = v25;
LABEL_21:
          int v22 = *v15;
          if (*(void *)(v20 + 24 * v22 + 8) - *(void *)(v20 + 24 * v22) < v24) {
            goto LABEL_33;
          }
        }
      }
    }
    else
    {
      int v13 = &result[8 * (v12 >> 10)];
      uint64_t v14 = *(void *)v13;
      int v15 = (int *)(*(void *)v13 + 4 * (v12 & 0x3FF));
      uint64_t v16 = v9 + 2;
      if (v9 + 2 < a4) {
        goto LABEL_8;
      }
    }
    uint64_t v20 = *(void *)(a3 + 328);
    goto LABEL_17;
  }
  return result;
}

void std::__tree<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>::__assign_unique<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int> const*>(uint64_t a1, int *a2, int *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
LABEL_36:
      uint64_t v21 = a1;
      int v22 = 0;
LABEL_42:
      std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v21, v22);
      goto LABEL_43;
    }
    uint64_t v10 = (uint64_t *)v9[2];
    if (v10)
    {
      uint64_t v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *uint64_t v10 = 0;
        while (1)
        {
          int v33 = (uint64_t *)v10[1];
          if (!v33) {
            break;
          }
          do
          {
            uint64_t v10 = v33;
            int v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
      }
      else
      {
        for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
        {
          do
          {
            uint64_t v10 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      while (1)
      {
        unint64_t v12 = *v8;
        int v13 = *a2;
        uint64_t v14 = (uint64_t **)(a1 + 8);
        int v15 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          while (1)
          {
            while (1)
            {
              int v15 = (uint64_t **)v12;
              int v16 = *(_DWORD *)((char *)v12 + 25);
              if (v13 >= v16) {
                break;
              }
              unint64_t v12 = (uint64_t *)*v12;
              uint64_t v14 = v15;
              if (!*v15) {
                goto LABEL_19;
              }
            }
            if (v16 >= v13) {
              break;
            }
            unint64_t v12 = (uint64_t *)v12[1];
            if (!v12)
            {
              uint64_t v14 = v15 + 1;
              goto LABEL_19;
            }
          }
          int v18 = v10;
          ++a2;
        }
        else
        {
LABEL_19:
          *(_DWORD *)((char *)v9 + 25) = v13;
          *uint64_t v9 = 0;
          v9[1] = 0;
          v9[2] = (uint64_t)v15;
          *uint64_t v14 = v9;
          uint64_t v17 = **(void **)a1;
          if (v17)
          {
            *(void *)a1 = v17;
            uint64_t v9 = *v14;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v9);
          ++*(void *)(a1 + 16);
          if (!v10)
          {
            ++a2;
            goto LABEL_36;
          }
          int v18 = (uint64_t *)v10[2];
          if (v18)
          {
            unint64_t v19 = (uint64_t *)*v18;
            if ((uint64_t *)*v18 == v10)
            {
              *int v18 = 0;
              while (1)
              {
                uint64_t v20 = (void *)v18[1];
                if (!v20) {
                  break;
                }
                do
                {
                  int v18 = v20;
                  uint64_t v20 = (void *)*v20;
                }
                while (v20);
              }
            }
            else
            {
              for (v18[1] = 0; v19; unint64_t v19 = (uint64_t *)v18[1])
              {
                do
                {
                  int v18 = v19;
                  unint64_t v19 = (uint64_t *)*v19;
                }
                while (v19);
              }
            }
          }
          uint64_t v9 = v10;
          ++a2;
        }
        uint64_t v10 = v18;
        if (a2 == a3) {
          goto LABEL_38;
        }
      }
    }
    int v18 = v10;
LABEL_38:
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(a1, v9);
    if (v18)
    {
      for (uint64_t i = (void *)v18[2]; i; uint64_t i = (void *)i[2])
        int v18 = i;
      uint64_t v21 = a1;
      int v22 = v18;
      goto LABEL_42;
    }
  }
LABEL_43:
  if (a2 != a3)
  {
    unint64_t v24 = (uint64_t **)(a1 + 8);
    do
    {
      unint64_t v26 = *v24;
      int v27 = *a2;
      uint64_t v28 = (uint64_t **)(a1 + 8);
      unint64_t v29 = (uint64_t **)(a1 + 8);
      if (*v24)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v29 = (uint64_t **)v26;
            int v30 = *(_DWORD *)((char *)v26 + 25);
            if (v27 >= v30) {
              break;
            }
            unint64_t v26 = *v29;
            uint64_t v28 = v29;
            if (!*v29) {
              goto LABEL_55;
            }
          }
          if (v30 >= v27) {
            break;
          }
          unint64_t v26 = v29[1];
          if (!v26)
          {
            uint64_t v28 = v29 + 1;
            goto LABEL_55;
          }
        }
      }
      else
      {
LABEL_55:
        unint64_t v31 = (char *)operator new(0x20uLL);
        *(_DWORD *)(v31 + 25) = v27;
        *(void *)unint64_t v31 = 0;
        *((void *)v31 + 1) = 0;
        *((void *)v31 + 2) = v29;
        *uint64_t v28 = (uint64_t *)v31;
        uint64_t v32 = **(void **)a1;
        if (v32)
        {
          *(void *)a1 = v32;
          uint64_t v25 = *v28;
        }
        else
        {
          uint64_t v25 = (uint64_t *)v31;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v25);
        ++*(void *)(a1 + 16);
      }
      ++a2;
    }
    while (a2 != a3);
  }
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v5 - v4) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  unint64_t v9 = v6 - v8;
  BOOL v10 = a2 > v9;
  unint64_t v11 = a2 - v9;
  if (v10)
  {
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__add_back_capacity((uint64_t)a1, v11);
    uint64_t v7 = a1[5];
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v8 = a1[4] + v7;
  }
  unint64_t v12 = (void *)(v4 + 8 * (v8 >> 8));
  if (v5 == v4)
  {
    uint64_t v13 = 0;
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v13 = *v12 + 16 * v8;
    if (!a2) {
      return;
    }
  }
  uint64_t v14 = a2 + ((v13 - *v12) >> 4);
  if (v14 < 1)
  {
    unint64_t v16 = 255 - v14;
    LOBYTE(v14) = ~(-1 - v14);
    int v15 = &v12[-(v16 >> 8)];
  }
  else
  {
    int v15 = &v12[(unint64_t)v14 >> 8];
  }
  uint64_t v17 = *v15 + 16 * v14;
  if (v13 != v17)
  {
    while (1)
    {
      uint64_t v18 = v17;
      if (v12 != v15) {
        uint64_t v18 = *v12 + 4096;
      }
      if (v13 == v18)
      {
        if (v12 == v15) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v19 = v18 - v13 - 16;
        uint64_t v20 = (void *)v13;
        if (v19 < 0x10) {
          goto LABEL_30;
        }
        uint64_t v21 = (v19 >> 4) + 1;
        uint64_t v20 = (void *)(v13 + 16 * (v21 & 0x1FFFFFFFFFFFFFFELL));
        int v22 = (void *)(v13 + 16);
        uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 2) = -1;
          *int v22 = -1;
          *(v22 - 1) = 0;
          v22[1] = 0;
          v22 += 4;
          v23 -= 2;
        }
        while (v23);
        if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_30:
          do
          {
            void *v20 = -1;
            v20[1] = 0;
            v20 += 2;
          }
          while (v20 != (void *)v18);
        }
        v7 += (v18 - v13) >> 4;
        if (v12 == v15)
        {
LABEL_27:
          a1[5] = v7;
          return;
        }
      }
      uint64_t v24 = v12[1];
      ++v12;
      uint64_t v13 = v24;
      if (v24 == v17) {
        goto LABEL_27;
      }
    }
  }
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  int v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    *(void *)(a1 + 32) = v7 - (v8 << 8);
    if (!v8) {
      return;
    }
    while (1)
    {
      int v15 = *(void **)(a1 + 8);
      unint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          int v27 = (char *)operator new(8 * v24);
          uint64_t v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          int v3 = v28;
          if (!v29)
          {
            int v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              uint64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            uint64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v32 = &v28[v34];
            v16 += v34;
            int v35 = (long long *)(v15 + 3);
            int v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)int v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)uint64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            int v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        int v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          int v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        int v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)int v3 = v17;
      int v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        uint64_t v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v145 = operator new(0x1000uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 255;
        }
        else {
          uint64_t v116 = 256;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - (v6 << 8);
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= v8 << 8;
      if (!v8) {
        return;
      }
    }
    uint64_t v118 = *(char **)(a1 + 16);
    while (1)
    {
      unint64_t v120 = *(void **)(a1 + 8);
      uint64_t v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        uint64_t v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          int v132 = (char *)operator new(8 * v129);
          uint64_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          uint64_t v118 = v133;
          if (!v29)
          {
            uint64_t v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              int v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            int v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            int v136 = &v133[v138];
            v121 += v138;
            uint64_t v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)int v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            uint64_t v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        uint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          uint64_t v118 = *(char **)(a1 + 8);
        }
        unint64_t v119 = &v118[-8 * v126];
        uint64_t v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)uint64_t v118 = v122;
      uint64_t v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = v8 << 8;
  unint64_t v40 = &v13[8 * (v11 - v8)];
  unint64_t v41 = &v13[8 * v12];
  uint64_t v42 = v40;
  uint64_t v43 = v13;
  do
  {
    int v44 = operator new(0x1000uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      int v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      unint64_t v49 = &v40[-8 * (v47 >> 1)];
      int v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        int v50 = v40;
      }
      uint64_t v42 = &v49[v41 - v40];
      unint64_t v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v52 = (char *)operator new(8 * v51);
    int v53 = v43;
    unint64_t v54 = v51 >> 2;
    unint64_t v55 = &v52[8 * (v51 >> 2)];
    uint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      uint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v59 = &v55[v63];
        int v60 = &v40[v63];
        uint64_t v64 = (long long *)(v40 + 16);
        int v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)int v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        unint64_t v59 = &v52[8 * (v51 >> 2)];
        int v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)unint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    unint64_t v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    unint64_t v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)uint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v79 = (char *)operator new(8 * v78);
          int v80 = v79;
          unint64_t v81 = v78 >> 2;
          int v69 = &v79[8 * (v78 >> 2)];
          uint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            uint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              unint64_t v85 = &v79[8 * (v78 >> 2)];
              int v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v85 = &v69[v89];
            int v86 = &v40[v89];
            int v90 = (long long *)(v40 + 16);
            uint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)uint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)unint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          unint64_t v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        unint64_t v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        int v76 = &v40[-8 * (v74 >> 1)];
        unint64_t v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          unint64_t v77 = v40;
        }
        uint64_t v42 = &v76[v41 - v40];
        int v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        int v69 = v40;
      }
LABEL_81:
      *(void *)uint64_t v42 = *v68;
      v42 += 8;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      unint64_t v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  int v69 = v40;
LABEL_75:
  int v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v101 = (char *)operator new(8 * v100);
          uint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          int v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          uint64_t v42 = v69;
          if (!v29)
          {
            uint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            uint64_t v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            uint64_t v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v105 = &v69[v109];
            uint64_t v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            BOOL v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)BOOL v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)uint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          unint64_t v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          uint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          int v69 = &v97[8 * (v96 >> 1)];
          int v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            int v99 = v42;
          }
          uint64_t v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  unint64_t v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) -= v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_23CD98C94(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CD98CE0()
{
}

void std::vector<operations_research::sat::SatPresolver::PQElement>::__append(uint64_t *a1, unint64_t a2)
{
  unint64_t v5 = (void *)a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_37;
      }
      uint64_t v17 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      unint64_t v6 = &v5[2 * (v17 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v18 = v5 + 2;
      uint64_t v19 = v17 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v18 - 2) = -1;
        *uint64_t v18 = -1;
        *(v18 - 1) = 0;
        v18[1] = 0;
        v18 += 4;
        v19 -= 2;
      }
      while (v19);
      if (v17 != (v17 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_37:
        do
        {
          *unint64_t v6 = -1;
          v6[1] = 0;
          v6 += 2;
        }
        while (v6 != &v5[2 * a2]);
      }
      unint64_t v6 = &v5[2 * a2];
    }
    a1[1] = (uint64_t)v6;
    return;
  }
  unint64_t v7 = (void *)*a1;
  uint64_t v8 = ((uint64_t)v5 - *a1) >> 4;
  unint64_t v9 = v8 + a2;
  if ((v8 + a2) >> 60) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 3 > v9) {
    unint64_t v9 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(16 * v11);
    uint64_t v13 = (uint64_t)&v12[16 * v8];
    uint64_t v14 = v13 + 16 * a2;
    int v15 = (void *)v13;
    uint64_t v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (!v16) {
      goto LABEL_24;
    }
LABEL_21:
    uint64_t v20 = v16 + 1;
    int v15 = (void *)(v13 + 16 * (v20 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v21 = (void *)(v13 + 16);
    uint64_t v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v21 - 2) = -1;
      void *v21 = -1;
      *(v21 - 1) = 0;
      v21[1] = 0;
      v21 += 4;
      v22 -= 2;
    }
    while (v22);
    if (v20 == (v20 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  unint64_t v12 = 0;
  uint64_t v13 = 16 * v8;
  uint64_t v14 = 16 * v8 + 16 * a2;
  int v15 = (void *)(16 * v8);
  uint64_t v16 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (v16) {
    goto LABEL_21;
  }
  do
  {
LABEL_24:
    *int v15 = -1;
    v15[1] = 0;
    v15 += 2;
  }
  while (v15 != (void *)v14);
LABEL_25:
  int64_t v23 = &v12[16 * v11];
  if (v5 == v7)
  {
    unint64_t v25 = (void *)*a1;
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v23;
    if (!v25) {
      return;
    }
    goto LABEL_28;
  }
  do
  {
    uint64_t v24 = v13 - 16;
    *(_OWORD *)(v13 - 16) = *((_OWORD *)v6 - 1);
    v6 -= 2;
    v13 -= 16;
  }
  while (v6 != v7);
  unint64_t v25 = (void *)*a1;
  *a1 = v24;
  a1[1] = v14;
  a1[2] = (uint64_t)v23;
  if (v25)
  {
LABEL_28:
    operator delete(v25);
  }
}

void std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__append(void *a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 32 * (v7 - v6) - 1;
  }
  uint64_t v9 = a1[5];
  unint64_t v10 = v9 + a1[4];
  unint64_t v11 = v8 - v10;
  BOOL v12 = a2 > v11;
  unint64_t v13 = a2 - v11;
  if (v12)
  {
    std::deque<operations_research::sat::SatPresolver::BvaPqElement>::__add_back_capacity((uint64_t)a1, v13);
    uint64_t v9 = a1[5];
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v10 = a1[4] + v9;
  }
  uint64_t v14 = (void *)(v6 + 8 * (v10 >> 8));
  if (v7 == v6)
  {
    uint64_t v15 = 0;
    if (a2) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v18 = v15;
    uint64_t v17 = v14;
    goto LABEL_24;
  }
  uint64_t v15 = *v14 + 16 * v10;
  if (!a2) {
    goto LABEL_12;
  }
LABEL_9:
  uint64_t v16 = a2 + ((v15 - *v14) >> 4);
  if (v16 < 1)
  {
    unint64_t v19 = 255 - v16;
    LOBYTE(v16) = ~(-1 - v16);
    uint64_t v17 = &v14[-(v19 >> 8)];
  }
  else
  {
    uint64_t v17 = &v14[(unint64_t)v16 >> 8];
  }
  uint64_t v18 = *v17 + 16 * v16;
LABEL_24:
  while (v15 != v18)
  {
    uint64_t v20 = v18;
    if (v14 != v17) {
      uint64_t v20 = *v14 + 4096;
    }
    if (v15 == v20)
    {
      a1[5] = v9;
      if (v14 == v17) {
        return;
      }
    }
    else
    {
      uint64_t v21 = (_OWORD *)v15;
      do
        *v21++ = *a3;
      while (v21 != (_OWORD *)v20);
      uint64_t v9 = a1[5] + ((v20 - v15) >> 4);
      a1[5] = v9;
      if (v14 == v17) {
        return;
      }
    }
    uint64_t v22 = v14[1];
    ++v14;
    uint64_t v15 = v22;
  }
}

void StronglyConnectedComponentsFinder<int,operations_research::sat::PropagationGraph,std::vector<std::vector<int>>>::FindStronglyConnectedComponents(std::vector<int> *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  a1->__end_ = a1->__begin_;
  p_std::vector<int>::pointer begin = (void **)&a1[1].__begin_;
  a1[1].__end_ = a1[1].__begin_;
  uint64_t v7 = a1 + 2;
  __u[0] = 0;
  std::vector<int>::assign(a1 + 2, a2, __u);
  std::vector<int>::pointer begin = v6[3].__begin_;
  int v115 = (void **)&v6[3].__begin_;
  v6[3].__end_ = begin;
  if (a2 < 1) {
    return;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = a2;
  uint64_t v112 = a4;
  uint64_t v116 = v7;
  uint64_t v109 = a2;
  uint64_t v114 = v6;
  while (2)
  {
    if (v7->__begin_[v9]) {
      goto LABEL_4;
    }
    value = v6[3].__end_cap_.__value_;
    uint64_t v110 = v9;
    unint64_t v117 = v10;
    if (begin >= value)
    {
      uint64_t v14 = 1;
      uint64_t v15 = (char *)value - (char *)begin;
      if ((unint64_t)(v15 >> 1) > 1) {
        uint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 62) {
LABEL_117:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v17 = (int *)operator new(4 * v16);
        uint64_t v18 = v17;
        *uint64_t v17 = v110;
        uint64_t v13 = (uint64_t)(v17 + 1);
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        MEMORY[0] = v9;
        uint64_t v13 = 4;
      }
      v6[3].__begin_ = v18;
      v6[3].__end_ = (std::vector<int>::pointer)v13;
      v6[3].__end_cap_.__value_ = &v17[v16];
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<int>::pointer begin = v9;
      uint64_t v13 = (uint64_t)(begin + 1);
    }
    v6[3].__end_ = (std::vector<int>::pointer)v13;
    while (2)
    {
      signed int v21 = *(_DWORD *)(v13 - 4);
      unint64_t v19 = (int *)(v13 - 4);
      signed int v20 = v21;
      std::vector<int>::pointer v22 = v7->__begin_;
      int v23 = v7->__begin_[v21];
      if (v23)
      {
        v6[3].__end_ = v19;
        if (v117 != v23) {
          goto LABEL_21;
        }
        unint64_t v24 = (int)v117 - 1;
        std::vector<int>::pointer v26 = v6->__begin_;
        std::vector<int>::pointer end = v6->__end_;
        int v27 = &v6->__begin_[v24];
        std::vector<int>::pointer v118 = end;
        *(void *)std::vector<int>::value_type __u = v27;
        uint64_t v28 = *(void **)(v112 + 8);
        if ((unint64_t)v28 >= *(void *)(v112 + 16))
        {
          uint64_t v32 = std::vector<std::vector<int>>::__emplace_back_slow_path<int *,int *>((char **)v112, (const void **)__u, (const void **)&v118);
        }
        else
        {
          *uint64_t v28 = 0;
          v28[1] = 0;
          v28[2] = 0;
          if (end - v26 != v24)
          {
            int64_t v29 = (char *)end - (char *)v27;
            if ((char *)end - (char *)v27 < 0) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            int64_t v30 = (char *)operator new((char *)end - (char *)v27);
            *uint64_t v28 = v30;
            v28[1] = v30;
            unint64_t v31 = &v30[4 * (v29 >> 2)];
            v28[2] = v31;
            memcpy(v30, v27, v29);
            v28[1] = v31;
            uint64_t v7 = v116;
          }
          uint64_t v32 = (char *)(v28 + 3);
          *(void *)(v112 + 8) = v28 + 3;
        }
        *(void *)(v112 + 8) = v32;
        std::vector<int>::pointer v44 = v6->__begin_;
        unint64_t v45 = v6->__end_ - v6->__begin_;
        if (v24 >= v45)
        {
          if (v24 <= v45) {
            goto LABEL_49;
          }
        }
        else
        {
          std::vector<int>::pointer v46 = v7->__begin_;
          unint64_t v47 = (int)v117 - 1;
          do
            v46[v44[v47++]] = 0x7FFFFFFF;
          while (v45 > v47);
          if (v24 <= v45)
          {
            v6->__end_ = &v44[v24];
            goto LABEL_49;
          }
        }
        std::vector<int>::__append(v6, v24 - v45);
LABEL_49:
        std::vector<int>::pointer v49 = v6[1].__begin_;
        std::vector<int>::pointer v48 = v6[1].__end_;
        v6[1].__end_ = v48 - 1;
        if (v49 == v48 - 1) {
          unint64_t v117 = 0;
        }
        else {
          unint64_t v117 = *(v48 - 2);
        }
        goto LABEL_21;
      }
      uint64_t v34 = (char *)v6->__end_;
      uint64_t v33 = v6->__end_cap_.__value_;
      if (v34 < (char *)v33)
      {
        *(_DWORD *)uint64_t v34 = v20;
        uint64_t v35 = (uint64_t)(v34 + 4);
        goto LABEL_61;
      }
      std::vector<int>::pointer v36 = v6->__begin_;
      uint64_t v37 = v34 - (char *)v6->__begin_;
      uint64_t v38 = v37 >> 2;
      unint64_t v39 = (v37 >> 2) + 1;
      if (v39 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = (char *)v33 - (char *)v36;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        if (v41 >> 62) {
          goto LABEL_117;
        }
        uint64_t v42 = operator new(4 * v41);
        uint64_t v43 = (int *)&v42[4 * v38];
        *uint64_t v43 = v20;
        uint64_t v35 = (uint64_t)(v43 + 1);
        if (v34 == (char *)v36) {
          goto LABEL_58;
        }
        goto LABEL_52;
      }
      uint64_t v42 = 0;
      uint64_t v43 = (int *)(4 * v38);
      *(_DWORD *)(4 * v38) = v20;
      uint64_t v35 = 4 * v38 + 4;
      if (v34 != (char *)v36)
      {
LABEL_52:
        unint64_t v50 = v34 - 4 - (char *)v36;
        if (v50 < 0x2C) {
          goto LABEL_123;
        }
        if ((unint64_t)(v34 - &v42[v37]) < 0x20) {
          goto LABEL_123;
        }
        uint64_t v51 = (v50 >> 2) + 1;
        uint64_t v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
        int v53 = &v34[-v52];
        uint64_t v43 = (int *)((char *)v43 - v52);
        unint64_t v54 = &v42[4 * v38 - 16];
        unint64_t v55 = v34 - 16;
        uint64_t v56 = v51 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *unint64_t v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 8;
        }
        while (v56);
        uint64_t v34 = v53;
        if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_123:
          do
          {
            int v58 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *--uint64_t v43 = v58;
          }
          while (v34 != (char *)v36);
        }
      }
LABEL_58:
      v6->__begin_ = v43;
      v6->__end_ = (std::vector<int>::pointer)v35;
      v6->__end_cap_.__value_ = (int *)&v42[4 * v41];
      if (v36)
      {
        operator delete(v36);
        uint64_t v7 = v116;
        std::vector<int>::pointer v22 = v116->__begin_;
      }
      else
      {
        uint64_t v7 = v116;
      }
LABEL_61:
      v6->__end_ = (std::vector<int>::pointer)v35;
      unint64_t v59 = (v35 - (unint64_t)v6->__begin_) >> 2;
      v22[v20] = v59;
      uint64_t v61 = (char *)v6[1].__end_;
      int v60 = v6[1].__end_cap_.__value_;
      unint64_t v117 = v59;
      if (v61 >= (char *)v60)
      {
        uint64_t v63 = (char *)*p_begin;
        uint64_t v64 = v61 - (unsigned char *)*p_begin;
        uint64_t v65 = v64 >> 2;
        unint64_t v66 = (v64 >> 2) + 1;
        if (v66 >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = (char *)v60 - v63;
        if (v67 >> 1 > v66) {
          unint64_t v66 = v67 >> 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          if (v68 >> 62) {
            goto LABEL_117;
          }
          int v69 = operator new(4 * v68);
          int v70 = (int *)&v69[4 * v65];
          *int v70 = v117;
          uint64_t v62 = (uint64_t)(v70 + 1);
          if (v61 == v63) {
            goto LABEL_80;
          }
        }
        else
        {
          int v69 = 0;
          int v70 = (int *)(4 * v65);
          *(_DWORD *)(4 * v65) = v117;
          uint64_t v62 = 4 * v65 + 4;
          if (v61 == v63)
          {
LABEL_80:
            v6[1].__begin_ = v70;
            v6[1].__end_ = (std::vector<int>::pointer)v62;
            v6[1].__end_cap_.__value_ = (int *)&v69[4 * v68];
            if (v63) {
              operator delete(v63);
            }
            goto LABEL_82;
          }
        }
        unint64_t v71 = v61 - 4 - v63;
        if (v71 < 0x2C) {
          goto LABEL_124;
        }
        if ((unint64_t)(v61 - &v69[v64]) < 0x20) {
          goto LABEL_124;
        }
        uint64_t v72 = (v71 >> 2) + 1;
        uint64_t v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v74 = &v61[-v73];
        int v70 = (int *)((char *)v70 - v73);
        uint64_t v75 = &v69[4 * v65 - 16];
        int v76 = v61 - 16;
        uint64_t v77 = v72 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          _OWORD *v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 8;
        }
        while (v77);
        uint64_t v61 = v74;
        if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_124:
          do
          {
            int v79 = *((_DWORD *)v61 - 1);
            v61 -= 4;
            *--int v70 = v79;
          }
          while (v61 != v63);
        }
        goto LABEL_80;
      }
      *(_DWORD *)uint64_t v61 = v59;
      uint64_t v62 = (uint64_t)(v61 + 4);
LABEL_82:
      v6[1].__end_ = (std::vector<int>::pointer)v62;
      uint64_t v80 = operations_research::sat::PropagationGraph::operator[](a3, v20);
      int64_t v82 = *(int **)v80;
      unint64_t v81 = *(int **)(v80 + 8);
      if (*(int **)v80 == v81) {
        goto LABEL_21;
      }
      int v83 = 0x7FFFFFFF;
      do
      {
        uint64_t v84 = *v82;
        int v85 = v7->__begin_[v84];
        if (!v85)
        {
          std::vector<int>::pointer v87 = v6[3].__end_;
          int v86 = v6[3].__end_cap_.__value_;
          if (v87 < v86)
          {
            void *v87 = v84;
            v6[3].__end_ = v87 + 1;
            goto LABEL_86;
          }
          std::vector<int>::pointer v88 = (std::vector<int>::pointer)*v115;
          uint64_t v89 = (char *)v87 - (unsigned char *)*v115;
          uint64_t v90 = v89 >> 2;
          unint64_t v91 = (v89 >> 2) + 1;
          if (v91 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v92 = (char *)v86 - (char *)v88;
          if (v92 >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            if (v93 >> 62) {
              goto LABEL_117;
            }
            uint64_t v94 = operator new(4 * v93);
            uint64_t v95 = (int *)&v94[4 * v90];
            *uint64_t v95 = v84;
            uint64_t v96 = (uint64_t)(v95 + 1);
            if (v87 != v88) {
              goto LABEL_99;
            }
          }
          else
          {
            uint64_t v94 = 0;
            uint64_t v95 = (int *)(4 * v90);
            *(_DWORD *)(4 * v9google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v84;
            uint64_t v96 = 4 * v90 + 4;
            if (v87 != v88)
            {
LABEL_99:
              unint64_t v97 = (char *)(v87 - 1) - (char *)v88;
              if (v97 >= 0x2C)
              {
                unint64_t v98 = (char *)v87 - &v94[v89];
                uint64_t v7 = v116;
                if (v98 >= 0x20)
                {
                  uint64_t v99 = (v97 >> 2) + 1;
                  uint64_t v100 = 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                  uint64_t v101 = &v87[v100 / 0xFFFFFFFFFFFFFFFCLL];
                  uint64_t v95 = (int *)((char *)v95 - v100);
                  unint64_t v102 = &v94[4 * v90 - 16];
                  int64_t v103 = (long long *)(v87 - 4);
                  uint64_t v104 = v99 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v105 = *v103;
                    *(v102 - 1) = *(v103 - 1);
                    *unint64_t v102 = v105;
                    v102 -= 2;
                    v103 -= 2;
                    v104 -= 8;
                  }
                  while (v104);
                  std::vector<int>::pointer v87 = v101;
                  if (v99 == (v99 & 0x7FFFFFFFFFFFFFF8)) {
                    goto LABEL_108;
                  }
                }
              }
              else
              {
                uint64_t v7 = v116;
              }
              do
              {
                int v106 = *--v87;
                *--uint64_t v95 = v106;
              }
              while (v87 != v88);
LABEL_108:
              uint64_t v6 = v114;
              v114[3].__begin_ = v95;
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              v114[3].__end_cap_.__value_ = (int *)&v94[4 * v93];
              if (v88) {
                operator delete(v88);
              }
              v114[3].__end_ = (std::vector<int>::pointer)v96;
              goto LABEL_86;
            }
          }
          uint64_t v7 = v116;
          goto LABEL_108;
        }
        if (v85 < v83) {
          int v83 = v7->__begin_[v84];
        }
LABEL_86:
        ++v82;
      }
      while (v82 != v81);
      if (v83 < (int)v117)
      {
        uint64_t v107 = v6[1].__end_;
        do
        {
          unint64_t v108 = *(v107 - 2);
          --v107;
        }
        while ((int)v108 > v83);
        unint64_t v117 = v108;
        v6[1].__end_ = v107;
      }
LABEL_21:
      std::vector<int>::pointer begin = v6[3].__begin_;
      uint64_t v13 = (uint64_t)v6[3].__end_;
      if (begin != (int *)v13) {
        continue;
      }
      break;
    }
    uint64_t v11 = v109;
    uint64_t v9 = v110;
    unint64_t v10 = v117;
LABEL_4:
    if (++v9 != v11) {
      continue;
    }
    break;
  }
}

void sub_23CD9985C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  *(void *)(a13 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::PropagationGraph::operator[](uint64_t a1, signed int a2)
{
  *(void *)(a1 + 8) = *(void *)a1;
  operations_research::sat::SatSolver::Backtrack(*(operations_research::sat::SatSolver **)(a1 + 24), 0);
  if (operations_research::sat::SatSolver::deterministic_time(*(operations_research::sat::SatSolver **)(a1 + 24)) <= *(double *)(a1 + 32))
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(v4 + 208);
    unsigned int v6 = a2;
    if (((*(void *)(*(void *)(v5 + 24) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a2 & 0x3E)) & 3) == 0)
    {
      uint64_t v8 = *(int *)(v5 + 12);
      operations_research::sat::SatSolver::EnqueueDecisionAndBackjumpOnConflict(v4, v6);
      uint64_t v9 = *(void *)(a1 + 24);
      if (*(int *)(v9 + 304) >= 1)
      {
        uint64_t v10 = v8 + 1;
        uint64_t v11 = *(void *)(v9 + 208);
        if ((int)v8 + 1 < *(_DWORD *)(v11 + 12))
        {
          BOOL v12 = *(char **)(a1 + 8);
          while (1)
          {
            int v14 = *(_DWORD *)(*(void *)(v11 + 72) + 4 * v10);
            unint64_t v15 = *(void *)(a1 + 16);
            if ((unint64_t)v12 >= v15) {
              break;
            }
            *(_DWORD *)BOOL v12 = v14;
            uint64_t v13 = (uint64_t)(v12 + 4);
LABEL_8:
            *(void *)(a1 + 8) = v13;
            ++v10;
            uint64_t v11 = *(void *)(v9 + 208);
            BOOL v12 = (char *)v13;
            if (v10 >= *(int *)(v11 + 12)) {
              return a1;
            }
          }
          unint64_t v16 = *(char **)a1;
          uint64_t v17 = (uint64_t)&v12[-*(void *)a1];
          uint64_t v18 = v17 >> 2;
          unint64_t v19 = (v17 >> 2) + 1;
          if (v19 >> 62) {
            std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v15 - (void)v16;
          if (v20 >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            if (v21 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            std::vector<int>::pointer v22 = operator new(4 * v21);
            int v23 = &v22[4 * v18];
            *int v23 = v14;
            uint64_t v13 = (uint64_t)(v23 + 1);
            if (v12 == v16) {
              goto LABEL_33;
            }
          }
          else
          {
            std::vector<int>::pointer v22 = 0;
            int v23 = (_DWORD *)(4 * v18);
            *(_DWORD *)(4 * v18) = v14;
            uint64_t v13 = 4 * v18 + 4;
            if (v12 == v16) {
              goto LABEL_33;
            }
          }
          unint64_t v24 = v12 - 4 - v16;
          if (v24 >= 0xBC)
          {
            if (&v22[v17 - 4 - (v24 & 0xFFFFFFFFFFFFFFFCLL)] > &v22[v17 - 4])
            {
              unint64_t v25 = v12;
            }
            else if (&v12[-(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
            {
              unint64_t v25 = v12;
            }
            else if ((unint64_t)(v12 - &v22[v17]) >= 0x20)
            {
              uint64_t v26 = (v24 >> 2) + 1;
              uint64_t v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
              unint64_t v25 = &v12[-v27];
              int v23 = (_DWORD *)((char *)v23 - v27);
              uint64_t v28 = &v22[4 * v18 - 16];
              int64_t v29 = v12 - 16;
              uint64_t v30 = v26 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v31 = *(_OWORD *)v29;
                *(v28 - 1) = *((_OWORD *)v29 - 1);
                *uint64_t v28 = v31;
                v28 -= 2;
                v29 -= 32;
                v30 -= 8;
              }
              while (v30);
              if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_33:
                *(void *)a1 = v23;
                *(void *)(a1 + 8) = v13;
                *(void *)(a1 + 16) = &v22[4 * v21];
                if (v16)
                {
                  operator delete(v16);
                  uint64_t v9 = *(void *)(a1 + 24);
                }
                goto LABEL_8;
              }
            }
            else
            {
              unint64_t v25 = v12;
            }
          }
          else
          {
            unint64_t v25 = v12;
          }
          do
          {
            int v32 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *--int v23 = v32;
          }
          while (v25 != v16);
          goto LABEL_33;
        }
      }
    }
  }
  return a1;
}

void operations_research::sat::BinaryImplicationGraph::ExtractAllBinaryClauses<operations_research::sat::SatPresolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v29 = 0;
  uint64_t v3 = *(void *)(a1 + 192);
  uint64_t v2 = *(void *)(a1 + 200);
  if ((int)((unint64_t)(v2 - v3) >> 5) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      unsigned int v6 = (void *)(v3 + 32 * v5);
      unint64_t v9 = *v6;
      uint64_t v8 = (unsigned int *)(v6 + 1);
      unint64_t v7 = v9;
      if (v9) {
        uint64_t v8 = *(unsigned int **)v8;
      }
      if (v7 >= 2)
      {
        uint64_t v10 = v5 ^ 1;
        uint64_t v11 = &v8[v7 >> 1];
        do
        {
          uint64_t v23 = *v8;
          if ((int)v10 < (int)v23)
          {
            uint64_t v20 = 0;
            uint64_t v12 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v10)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v10));
            unint64_t v24 = (((unint64_t)(v12 + (int)v23) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * (v12 + (int)v23));
            for (unint64_t i = (v24 >> 7) ^ ((unint64_t)__p >> 12); ; unint64_t i = v20 + v13)
            {
              unint64_t v13 = i & v28;
              uint64_t v14 = *(void *)((char *)__p + v13);
              unint64_t v15 = ((v14 ^ (0x101010101010101 * (v24 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                                  * (v24 & 0x7F))) & 0x8080808080808080;
              if (v15) {
                break;
              }
LABEL_14:
              if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
              {
                unint64_t v22 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::prepare_insert((uint64_t *)&__p, v24);
                *(void *)(v27 + 8 * v22) = v10 | (v23 << 32);
                v30[0] = v5 ^ 1;
                v30[1] = v23;
                operations_research::sat::SatPresolver::AddClause(a2, v30, 2);
                goto LABEL_19;
              }
              v20 += 8;
            }
            while (1)
            {
              unint64_t v16 = (int *)(v27 + 8 * ((v13 + (__clz(__rbit64(v15)) >> 3)) & v28));
              int v18 = *v16;
              int v17 = v16[1];
              if (v18 == v10 && v17 == v23) {
                break;
              }
              v15 &= v15 - 1;
              if (!v15) {
                goto LABEL_14;
              }
            }
          }
LABEL_19:
          ++v8;
        }
        while (v8 != v11);
        uint64_t v3 = *(void *)(a1 + 192);
        uint64_t v2 = *(void *)(a1 + 200);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v2 - v3) >> 5));
    if ((void)v28)
    {
      operator delete(__p);
      std::string __p = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v29 = 0;
      *(void *)&long long v28 = 0;
      long long v27 = 0uLL;
    }
  }
  if (*((void *)&v28 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v28 + 1));
  }
}

void sub_23CD99D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::flat_hash_set<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::~flat_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  uint64_t v8 = (char *)operator new(v2 + 9 + 8 * v2);
  *a1 = v8;
  a1[1] = &v8[v2 + 9];
  memset(v8, 128, v2 + 8);
  v8[v2] = -1;
  uint64_t v9 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v9 = 6;
  }
  uint64_t v10 = a1[2];
  a1[5] = (char *)(v9 - (void)v10);
  uint64_t v11 = a1[4];
  if (v11)
  {
    *((void *)v11 + 1) = v10;
    *(void *)uint64_t v11 = v2;
    if (!v10)
    {
      *((void *)v11 + 4) = 0;
      *((void *)v11 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v13 = 0;
    unint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v13 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  do
  {
    if ((v12[(void)v4] & 0x80000000) == 0)
    {
      int v17 = &v5[8 * (void)v12];
      unint64_t v18 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(int *)v17)
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)v17)))
          + *((int *)v17 + 1);
      unint64_t v19 = ((v18 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v18);
      uint64_t v20 = *a1;
      unint64_t v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 0;
        do
        {
          v14 += 8;
          unint64_t v22 = (v14 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v15 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v13 += v14;
      char v16 = v19 & 0x7F;
      v20[v15] = v16;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v15 - 8) & (unint64_t)a1[3])] = v16;
      *(void *)&a1[1][8 * v15] = *(void *)v17;
    }
    ++v12;
  }
  while (v12 != v6);
  operator delete(v4);
  unint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,absl::lts_2020_02_25::hash_internal::Hash<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::equal_to<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>,gtl::IntType<operations_research::sat::LiteralIndex_tag_,int>>>>::drop_deletes_without_resize(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (!v13)
  {
    unint64_t v15 = 0;
    *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = -*(void *)(result + 16);
    uint64_t v30 = *(void *)(result + 32);
    if (!v30) {
      return result;
    }
LABEL_26:
    *(void *)(v30 + 32) = v15 >> 3;
    *(void *)(v30 + 16) = 0;
    return result;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    unint64_t v19 = *(int8x16_t **)result;
    if (*(unsigned __int8 *)(*(void *)result + v14) == 254)
    {
      unint64_t v20 = (((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
              + *(int *)(*(void *)(result + 8) + 8 * v14))
             * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                 + *(int *)(*(void *)(result + 8) + 8 * v14))))
          + *(int *)(*(void *)(result + 8) + 8 * v14 + 4);
      unint64_t v21 = ((v20 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * v20);
      unint64_t v22 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v22) & (~*(uint64_t *)((char *)v19->i64 + v22) << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
      }
      else
      {
        uint64_t v16 = 0;
        unint64_t v17 = ((v21 >> 7) ^ ((unint64_t)v19 >> 12)) & v13;
        do
        {
          v16 += 8;
          unint64_t v17 = (v16 + v17) & v13;
          unint64_t v23 = *(uint64_t *)((unsigned char *)v19->i64 + v17) & (~*(uint64_t *)((char *)v19->i64 + v17) << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v18 = (v17 + (__clz(__rbit64(v23)) >> 3)) & v13;
      v15 += v16;
      if ((((v18 - v22) ^ (v14 - v22)) & v13) > 7)
      {
        int v24 = v19->u8[v18];
        v19->i8[v18] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v18 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        uint64_t v25 = *(void *)(result + 8);
        if (v24 == 128)
        {
          *(void *)(v25 + 8 * v18) = *(void *)(v25 + 8 * v14);
          *(unsigned char *)(*(void *)result + v14) = 0x80;
          *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
        }
        else
        {
          uint64_t v26 = *(void *)(v25 + 8 * v14);
          *(void *)(v25 + 8 * v14) = *(void *)(v25 + 8 * v18);
          *(void *)(*(void *)(result + 8) + 8 * v18) = v26;
          --v14;
        }
      }
      else
      {
        v19->i8[v14] = v21 & 0x7F;
        *(unsigned char *)((*(void *)(result + 24) & (v14 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
      }
    }
    ++v14;
    uint64_t v13 = *(void *)(result + 24);
  }
  while (v14 != v13);
  uint64_t v27 = v14 - (v14 >> 3);
  BOOL v28 = v14 == 7;
  uint64_t v29 = 6;
  if (!v28) {
    uint64_t v29 = v27;
  }
  *(void *)(result + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v29 - *(void *)(result + 16);
  uint64_t v30 = *(void *)(result + 32);
  if (v30) {
    goto LABEL_26;
  }
  return result;
}

void operations_research::sat::SequentialLoop(uint64_t *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  int8x16_t v12 = 0;
  uint64_t v13 = 0;
  int8x16_t v11 = 0;
  uint64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    uint64_t v5 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    if (v4 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)operator new(v3 - v2);
    int8x16_t v11 = v5;
    uint64_t v13 = &v5[8 * (v4 >> 3)];
    bzero(v5, v4 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v12 = v13;
    uint64_t v8 = 0;
    if (v2 != v3) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    if (v9 == -1) {
      break;
    }
    uint64_t v10 = 8 * v9;
    ++*(void *)&v5[v10];
    (*(void (**)(void *__return_ptr))(**(void **)(*a1 + v10) + 24))(v14);
    if (!v15) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void *))(*v15 + 48))(v15);
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
LABEL_7:
      ++v8;
      uint64_t v2 = (char *)*a1;
      uint64_t v3 = (char *)a1[1];
      if ((char *)*a1 != v3)
      {
        do
        {
LABEL_8:
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)v2 + 32))(*(void *)v2, v6, v7);
          v2 += 8;
        }
        while (v2 != v3);
      }
    }
    else
    {
      if (!v15) {
        goto LABEL_7;
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*v15 + 40))(v15, v6, v7);
      ++v8;
      uint64_t v2 = (char *)*a1;
      uint64_t v3 = (char *)a1[1];
      if ((char *)*a1 != v3) {
        goto LABEL_8;
      }
    }
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_23CD9A63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t operations_research::sat::anonymous namespace'::NextSubsolverToSchedule(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (a1[1] == *a1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 0xFFFFFFFFLL;
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)(v2 + 8 * v5) + 16))(*(void *)(v2 + 8 * v5))
      && (v6 == -1 || *(void *)(*a2 + 8 * v5) < *(void *)(*a2 + 8 * (int)v6)))
    {
      uint64_t v6 = v5;
    }
    ++v5;
    uint64_t v2 = *a1;
  }
  while (v5 < (a1[1] - *a1) >> 3);
  if (v6 == -1
  {
    return v6;
  }
  google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/subsolver.cc", 44);
  uint64_t v7 = (void *)google::LogMessage::stream((google::LogMessage *)v15);
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Scheduling ", 11);
  uint64_t v9 = *(void *)(*a1 + 8 * (int)v6);
  if (*(char *)(v9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(void *)(v9 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)(v9 + 8);
    __p.__r_.__value_.__r.__words[2] = *(void *)(v9 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)v15);
  return v6;
}

void sub_23CD9A844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_23CD9A858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a16);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  _Unwind_Resume(a1);
}

void operations_research::sat::DeterministicLoop(uint64_t *a1, int a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v23[0] = a2;
  LODWORD(v18) = 0;
  if (a2 < 1) {
    google::MakeCheckOpString<int,int>((int)v23, (int)&v18, "num_threads > 0");
  }
  v23[0] = a3;
  *(_DWORD *)std::string __p = 0;
  if (a3 <= 0) {
    google::MakeCheckOpString<int,int>((int)v23, (int)__p, "batch_size > 0");
  }
  if (a3 == 1)
  {
    operations_research::sat::SequentialLoop(a1);
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v6 = a1[1];
    unint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v18 = 0;
    uint64_t v8 = v6 - v7;
    if (v6 == v7)
    {
      uint64_t v9 = 0;
    }
    else
    {
      if (v8 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = (char *)operator new(v6 - v7);
      unint64_t v18 = v9;
      unint64_t v20 = &v9[8 * (v8 >> 3)];
      bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v19 = v20;
    }
    uint64_t v10 = 0;
    uint64_t v12 = *a1;
    uint64_t v11 = a1[1];
    if (*a1 != v11)
    {
      do
      {
LABEL_15:
        (*(void (**)(void))(**(void **)v12 + 32))();
        v12 += 8;
      }
      while (v12 != v11);
    }
LABEL_16:
    char v17 = 17;
    strcpy(__p, "DeterministicLoop");
    operations_research::ThreadPool::ThreadPool((uint64_t)v23, (uint64_t)__p, a2);
    if (v17 < 0) {
      operator delete(*(void **)__p);
    }
    operations_research::ThreadPool::StartWorkers((uint64_t)v23);
    uint64_t v13 = 0;
    while (1)
    {
      if (v14 == -1) {
        break;
      }
      uint64_t v15 = 8 * v14;
      ++*(void *)&v9[v15];
      (*(void (**)(void *__return_ptr))(**(void **)(*a1 + v15) + 24))(v21);
      operations_research::ThreadPool::Schedule((uint64_t)v23, v21);
      if (v22 == v21)
      {
        (*(void (**)(void *))(v21[0] + 32))(v21);
      }
      else if (v22)
      {
        (*(void (**)(void))(*v22 + 40))();
      }
      if (a3 == ++v13)
      {
        v10 += v13;
        operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)v23);
LABEL_14:
        uint64_t v12 = *a1;
        uint64_t v11 = a1[1];
        if (*a1 == v11) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    v10 += v13;
    operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)v23);
    if (v13) {
      goto LABEL_14;
    }
    if (v9)
    {
      unint64_t v19 = v9;
      operator delete(v9);
    }
  }
}

void sub_23CD9AC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD9AC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD9AC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)&a22);
  if (!v22) {
    _Unwind_Resume(a1);
  }
  operator delete(v22);
  _Unwind_Resume(a1);
}

void operations_research::sat::NonDeterministicLoop(uint64_t *a1, int a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  v64[0] = a2;
  LODWORD(v47) = 0;
  if (a2 <= 0) {
    google::MakeCheckOpString<int,int>((int)v64, (int)&v47, "num_threads > 0");
  }
  if (a2 == 1)
  {
    operations_research::sat::SequentialLoop(a1);
    return;
  }
  atomic_ullong v51 = 0;
  uint64_t v52 = 0;
  int v50 = 0;
  char v62 = 20;
  strcpy(__p, "NonDeterministicLoop");
  operations_research::ThreadPool::ThreadPool((uint64_t)v64, (uint64_t)__p, a2);
  if (v62 < 0) {
    operator delete(*(void **)__p);
  }
  operations_research::ThreadPool::StartWorkers((uint64_t)v64);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  std::vector<int>::pointer v48 = 0;
  std::vector<int>::pointer v49 = 0;
  unint64_t v47 = 0;
  uint64_t v7 = v5 - v6;
  if (v5 == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    unint64_t v47 = v8;
    std::vector<int>::pointer v49 = &v8[8 * (v7 >> 3)];
    bzero(v8, v7 & 0xFFFFFFFFFFFFFFF8);
    std::vector<int>::pointer v48 = v49;
  }
  uint64_t v9 = 0;
  while (1)
  {
    while (1)
    {
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)&v52, v4);
      int v17 = v50;
      if (v50 == a2) {
        absl::lts_2020_02_25::CondVar::Wait(&v51, &v52);
      }
      absl::lts_2020_02_25::Mutex::Unlock(&v52, v10, v11, v12, v13, v14, v15, v16);
      uint64_t v18 = *a1;
      uint64_t v19 = a1[1];
      if (*a1 != v19)
      {
        do
        {
          (*(void (**)(void))(**(void **)v18 + 32))();
          v18 += 8;
        }
        while (v18 != v19);
      }
      int v22 = v20;
      if (v20 == -1) {
        break;
      }
      ++*(void *)&v8[8 * v20];
      absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)&v52, v21);
      ++v50;
      absl::lts_2020_02_25::Mutex::Unlock(&v52, v23, v24, v25, v26, v27, v28, v29);
      (*(void (**)(char *__return_ptr))(**(void **)(*a1 + 8 * v22) + 24))(__p);
      uint64_t v30 = *(void *)(*a1 + 8 * v22);
      if (*(char *)(v30 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v30 + 8), *(void *)(v30 + 16));
      }
      else
      {
        long long v31 = *(_OWORD *)(v30 + 8);
        v46.__r_.__value_.__r.__words[2] = *(void *)(v30 + 24);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v31;
      }
      uint64_t v32 = (uint64_t)v63;
      if (v63)
      {
        if (v63 == __p)
        {
          unint64_t v54 = v53;
          (*(void (**)(char *, void *))(*(void *)__p + 24))(__p, v53);
          goto LABEL_29;
        }
        uint64_t v32 = (*(uint64_t (**)(void))(*(void *)v63 + 16))();
      }
      unint64_t v54 = (void *)v32;
LABEL_29:
      int v55 = a2;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v56, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      }
      else {
        std::string v56 = v46;
      }
      *(void *)&long long v57 = &v52;
      *((void *)&v57 + 1) = &v50;
      int v58 = &v51;
      int v60 = 0;
      uint64_t v33 = operator new(0x60uLL);
      uint64_t v34 = v33;
      *uint64_t v33 = &unk_26F0C4710;
      uint64_t v35 = v33 + 1;
      if (v54)
      {
        if (v54 == v53)
        {
          v33[4] = v35;
          (*(void (**)(void *, void *))(v53[0] + 24))(v53, v35);
        }
        else
        {
          v33[4] = v54;
          unint64_t v54 = 0;
        }
      }
      else
      {
        v33[4] = 0;
      }
      *((_DWORD *)v34 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v55;
      std::vector<int>::pointer v36 = (std::string *)(v34 + 6);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v36, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
        v34[8] = *((void *)&v56.__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v34 + 9) = v57;
      v34[11] = v58;
      int v60 = v34;
      operations_research::ThreadPool::Schedule((uint64_t)v64, v59);
      if (v60 == v59)
      {
        (*(void (**)(void *))(v59[0] + 32))(v59);
        if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_44;
        }
LABEL_53:
        operator delete(v56.__r_.__value_.__l.__data_);
        uint64_t v37 = v54;
        if (v54 == v53) {
          goto LABEL_54;
        }
LABEL_45:
        if (v37) {
          (*(void (**)(void *))(*v37 + 40))(v37);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_55;
        }
LABEL_48:
        uint64_t v38 = v63;
        if (v63 != __p) {
          goto LABEL_49;
        }
LABEL_56:
        (*(void (**)(char *))(*(void *)__p + 32))(__p);
        ++v9;
      }
      else
      {
        if (v60) {
          (*(void (**)(void))(*v60 + 40))();
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_53;
        }
LABEL_44:
        uint64_t v37 = v54;
        if (v54 != v53) {
          goto LABEL_45;
        }
LABEL_54:
        (*(void (**)(void *))(v53[0] + 32))(v53);
        if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_48;
        }
LABEL_55:
        operator delete(v46.__r_.__value_.__l.__data_);
        uint64_t v38 = v63;
        if (v63 == __p) {
          goto LABEL_56;
        }
LABEL_49:
        if (v38) {
          (*(void (**)(char *))(*(void *)v38 + 40))(v38);
        }
        ++v9;
      }
    }
    if (!v17) {
      break;
    }
    AbslInternalSleepFor(0, 4000000);
  }
  if (v8) {
    operator delete(v8);
  }
  operations_research::ThreadPool::~ThreadPool((operations_research::ThreadPool *)v64);
  absl::lts_2020_02_25::CondVar::~CondVar((absl::lts_2020_02_25::CondVar *)&v51, v39, v40, v41, v42, v43, v44, v45);
  absl::lts_2020_02_25::Mutex::~Mutex((absl::lts_2020_02_25::Mutex *)&v52);
}

void sub_23CD9B338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_23CD9B340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_23CD9B450()
{
}

uint64_t operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2 != a1) {
      goto LABEL_3;
    }
LABEL_7:
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    return a1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 == a1) {
    goto LABEL_7;
  }
LABEL_3:
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F0C4710;
  uint64_t v2 = a1 + 8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3 != v2) {
      goto LABEL_3;
    }
LABEL_7:
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 == v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F0C4710;
  uint64_t v2 = a1 + 8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3 != v2)
    {
LABEL_3:
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
      }
LABEL_7:
      JUMPOUT(0x23ECF2BC0);
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3 != v2) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  goto LABEL_7;
}

void *std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  *uint64_t v2 = &unk_26F0C4710;
  std::__compressed_pair_elem<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23CD9B734(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C4710;
  return std::__compressed_pair_elem<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t result = *(void *)(a1 + 32);
    if (result != v2)
    {
LABEL_3:
      if (result)
      {
        uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
        return v4();
      }
      return result;
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 32);
    if (result != v2) {
      goto LABEL_3;
    }
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);

  return v5(v2);
}

void std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::destroy_deallocate(void **__p)
{
  uint64_t v2 = (char *)(__p + 1);
  if (*((char *)__p + 71) < 0)
  {
    operator delete(__p[6]);
    uint64_t v3 = (char *)__p[4];
    if (v3 != v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = (char *)__p[4];
    if (v3 != v2)
    {
LABEL_3:
      if (v3) {
        (*(void (**)(char *))(*(void *)v3 + 40))(v3);
      }
      uint64_t v4 = __p;
      goto LABEL_7;
    }
  }
  (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  uint64_t v4 = __p;

LABEL_7:
  operator delete(v4);
}

void std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v3 = *(absl::lts_2020_02_25::Mutex **)(a1 + 72);
  absl::lts_2020_02_25::Mutex::Lock(v3, v4);
  if ((int)*operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::operator() const(void)::vlocal__ >= 1
    && ((int *)operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::operator() const(void)::vlocal__ != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)&operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0::operator() const(void)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/subsolver.cc", (const char *)1)))
  {
    google::LogMessage::LogMessage((google::LogMessage *)v19, (google::glog_internal_namespace_ *)"./ortools/sat/subsolver.cc", 179);
    uint64_t v12 = (void *)google::LogMessage::stream((google::LogMessage *)v19);
    int v13 = *(char *)(a1 + 71);
    if (v13 >= 0) {
      uint64_t v14 = a1 + 48;
    }
    else {
      uint64_t v14 = *(void *)(a1 + 48);
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 71);
    }
    else {
      uint64_t v15 = *(void *)(a1 + 56);
    }
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" done.", 6);
    google::LogMessage::~LogMessage((google::LogMessage *)v19);
  }
  int v17 = *(_DWORD **)(a1 + 80);
  int v18 = (*v17)--;
  if (v18 == *(_DWORD *)(a1 + 40)) {
    absl::lts_2020_02_25::CondVar::SignalAll(*(atomic_ullong **)(a1 + 88), (uint64_t)v5, v6, v7, v8, v9, v10, v11);
  }
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v3, v5, v6, v7, v8, v9, v10, v11);
}

void sub_23CD9BA40(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_9SubSolverE"
                     "NS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_"
                                "9SubSolverENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_9SubSolverENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20NonDeterministicLoopERKNSt3__16vectorINS1_10unique_ptrINS0_9SubSolverENS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEiE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,std::allocator<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    uint64_t v5 = (std::string *)(a1 + 40);
    if ((*(char *)(a2 + 63) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_8:
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    goto LABEL_9;
  }
  if (v4 == a2)
  {
    *(void *)(a1 + 24) = a1;
    (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    uint64_t v5 = (std::string *)(a1 + 40);
    if ((*(char *)(a2 + 63) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_8;
  }
  *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    goto LABEL_8;
  }
LABEL_6:
  long long v6 = *(_OWORD *)(a2 + 40);
  v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
LABEL_9:
  long long v7 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v7;
  return a1;
}

void sub_23CD9BBF4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  if (v3 == v1)
  {
    std::__compressed_pair_elem<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0 const&,0ul>(v1);
    _Unwind_Resume(a1);
  }
  std::__compressed_pair_elem<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::NonDeterministicLoop(std::vector<std::unique_ptr<operations_research::sat::SubSolver>> const&,int)::$_0 const&,0ul>(v3);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedRelaxationSolutionRepository::NewRelaxationSolution(void **this, char **a2)
{
  size_t v2 = *((int *)a2 + 4);
  if (v2)
  {
    std::string __p = 0;
    uint64_t v15 = 0;
    int v17 = 0;
    uint64_t v16 = 0;
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&__p, a2[3], &a2[3][8 * v2], v2);
    uint64_t v13 = (uint64_t)-*((double *)a2 + 20);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(this + 1), v5);
    operations_research::sat::SharedSolutionRepository<long long>::AddInternal(this, &v13);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)this + 1, v6, v7, v8, v9, v10, v11, v12);
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
  }
}

void sub_23CD9BCB8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedLPSolutionRepository::NewLPSolution(absl::lts_2020_02_25 **a1, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v3 != v4)
  {
    std::string __p = 0;
    uint64_t v16 = 0;
    int v18 = 0;
    uint64_t v17 = 0;
    std::vector<double>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(&__p, v3, v4, (v4 - v3) >> 3);
    absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 1), v6);
    uint64_t v14 = -(uint64_t)a1[2];
    operations_research::sat::SharedSolutionRepository<double>::AddInternal(a1, &v14);
    absl::lts_2020_02_25::Mutex::Unlock(a1 + 1, v7, v8, v9, v10, v11, v12, v13);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_23CD9BD84(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  absl::lts_2020_02_25::Mutex::Unlock(v12, a2, a3, a4, a5, a6, a7, a8);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **operations_research::sat::SharedSolutionRepository<double>::AddInternal(void *a1, uint64_t *a2)
{
  uint64_t v5 = a1[9];
  unint64_t v6 = a1[10];
  uint64_t result = (void **)(a1 + 9);
  unint64_t v7 = (uint64_t)(v6 - v5) / 40;
  if (v6 != v5)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = *a2;
    uint64_t v11 = a2[2] - a2[1];
    if (v7 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (uint64_t)(v6 - v5) / 40;
    }
    while (1)
    {
      uint64_t v13 = *(void *)(v5 + 40 * v8);
      if (v13 == v10)
      {
        uint64_t v14 = *(double **)(v5 + 40 * v8 + 8);
        uint64_t v15 = *(double **)(v5 + 40 * v8 + 16);
        if ((char *)v15 - (char *)v14 == v11)
        {
          if (v14 == v15) {
            return result;
          }
          for (unint64_t i = (double *)a2[1]; *v14 == *i; ++i)
          {
            if (++v14 == v15) {
              return result;
            }
          }
        }
      }
      uint64_t v17 = *(void *)(v5 + 40 * v9);
      if (v17 == v13)
      {
        uint64_t v18 = v5 + 40 * v8;
        uint64_t v19 = *(void *)(v18 + 8);
        uint64_t v20 = *(void *)(v18 + 16);
        if (v19 == v20) {
          goto LABEL_6;
        }
        unint64_t v21 = *(double **)(v5 + 40 * v9 + 8);
        uint64_t v22 = v19 + 8;
        while (v21 != *(double **)(v5 + 40 * v9 + 16))
        {
          double v23 = *v21;
          double v24 = *(double *)(v22 - 8);
          if (*v21 < v24) {
            break;
          }
          ++v21;
          BOOL v25 = v24 < v23 || v22 == v20;
          v22 += 8;
          if (v25) {
            goto LABEL_6;
          }
        }
      }
      else if (v17 >= v13)
      {
        goto LABEL_6;
      }
      int v9 = v8;
LABEL_6:
      if (++v8 == v12) {
        goto LABEL_28;
      }
    }
  }
  int v9 = 0;
LABEL_28:
  if (v7 >= *(int *)a1)
  {
    int v32 = v9;
    uint64_t v33 = (uint64_t *)(v5 + 40 * v9);
    if (*a2 == *v33)
    {
      uint64_t v34 = v5 + 40 * v9;
      uint64_t v36 = *(void *)(v34 + 8);
      uint64_t v35 = *(void *)(v34 + 16);
      if (v36 == v35) {
        return result;
      }
      uint64_t v37 = (double *)a2[1];
      uint64_t v38 = v36 + 8;
      while (v37 != (double *)a2[2])
      {
        double v39 = *v37;
        double v40 = *(double *)(v38 - 8);
        if (*v37 < v40) {
          break;
        }
        ++v37;
        BOOL v41 = v40 < v39 || v38 == v35;
        v38 += 8;
        if (v41) {
          return result;
        }
      }
    }
    else if (*a2 >= *v33)
    {
      return result;
    }
    *uint64_t v33 = *a2;
    if (v33 != a2) {
      uint64_t result = (void **)std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)(v5 + 40 * v9 + 8), (char *)a2[1], (char *)a2[2], (a2[2] - a2[1]) >> 3);
    }
    *(_DWORD *)(v5 + 40 * v32 + 32) = *((_DWORD *)a2 + 8);
  }
  else if (v6 >= a1[11])
  {
    uint64_t result = (void **)std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<double>::Solution const&>(result, a2);
    a1[10] = result;
  }
  else
  {
    uint64_t v26 = *a2;
    *(void *)(v6 + 8) = 0;
    *(void *)unint64_t v6 = v26;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    uint64_t v28 = (unsigned char *)a2[1];
    uint64_t v27 = (unsigned char *)a2[2];
    int64_t v29 = v27 - v28;
    if (v27 != v28)
    {
      if (v29 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = (char *)operator new(v27 - v28);
      *(void *)(v6 + 8) = v30;
      *(void *)(v6 + 16) = v30;
      long long v31 = &v30[8 * (v29 >> 3)];
      *(void *)(v6 + 24) = v31;
      uint64_t result = (void **)memcpy(v30, v28, v29);
      *(void *)(v6 + 16) = v31;
    }
    *(_DWORD *)(v6 + 32) = *((_DWORD *)a2 + 8);
    a1[10] = v6 + 40;
    a1[10] = v6 + 40;
  }
  return result;
}

void sub_23CD9C068(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 16) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v3;
  _Unwind_Resume(exception_object);
}

BOOL operations_research::sat::SharedIncompleteSolutionManager::HasNewSolution(operations_research::sat::SharedIncompleteSolutionManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 24);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedIncompleteSolutionManager *)((char *)this + 24), a2);
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v6, v7, v8, v9, v10, v11, v12);
  return v5 != v4;
}

void operations_research::sat::SharedIncompleteSolutionManager::GetNewSolution(operations_research::sat::SharedIncompleteSolutionManager *this@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (absl::lts_2020_02_25 **)((char *)this + 24);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedIncompleteSolutionManager *)((char *)this + 24), a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v13 = *((void *)this + 1);
  if (*(void *)this != v13)
  {
    uint64_t v14 = *(void *)(v13 - 8);
    *(_OWORD *)a3 = *(_OWORD *)(v13 - 24);
    a3[2] = v14;
    *(void *)(v13 - 16) = 0;
    *(void *)(v13 - 8) = 0;
    *(void *)(v13 - 24) = 0;
    uint64_t v15 = *((void *)this + 1);
    uint64_t v18 = *(void **)(v15 - 24);
    uint64_t v17 = v15 - 24;
    uint64_t v16 = v18;
    if (v18)
    {
      *(void *)(*((void *)this + 1) - 16) = v16;
      operator delete(v16);
    }
    *((void *)this + 1) = v17;
  }
  absl::lts_2020_02_25::Mutex::Unlock(v5, v6, v7, v8, v9, v10, v11, v12);
}

void operations_research::sat::SharedIncompleteSolutionManager::AddNewSolution(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v4 = (absl::lts_2020_02_25 **)(a1 + 24);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 24), a2);
  uint64_t v12 = *(void **)(a1 + 8);
  if ((unint64_t)v12 >= *(void *)(a1 + 16))
  {
    uint64_t v17 = std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>((char **)a1, (uint64_t)a2);
  }
  else
  {
    *uint64_t v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    uint64_t v13 = *(const void **)a2;
    int64_t v14 = *((void *)a2 + 1) - *(void *)a2;
    if (v14)
    {
      if (v14 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = (char *)operator new(v14);
      *uint64_t v12 = v15;
      v12[1] = v15;
      uint64_t v16 = &v15[8 * (v14 >> 3)];
      v12[2] = v16;
      memcpy(v15, v13, v14);
      v12[1] = v16;
    }
    uint64_t v17 = (char *)(v12 + 3);
    *(void *)(a1 + 8) = v12 + 3;
  }
  *(void *)(a1 + 8) = v17;
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_23CD9C21C(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SharedResponseManager::SharedResponseManager(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + 1) = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  *(void *)(a1 + 48) = 0;
  operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)(a1 + 56), 0);
  *(_DWORD *)(a1 + 304) = 3;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 36google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(void *)(a1 + 408) = 0x8000000000000000;
  *(int64x2_t *)(a1 + 416) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 432) = xmmword_23CE909A0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  return a1;
}

void sub_23CD9C2F8(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::Mutex::~Mutex(v1);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::UpdatePrimalIntegral(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v11 = *((void *)this + 1);
  if ((_UNKNOWN *)v11 != &operations_research::sat::_CpModelProto_default_instance_ && *(void *)(v11 + 120))
  {
    uint64_t v12 = (absl::lts_2020_02_25::Mutex *)*((void *)this + 3);
    absl::lts_2020_02_25::Mutex::ReaderLock(v12, v4);
    double v13 = *(double *)(*((void *)v12 + 1) + 112);
    absl::lts_2020_02_25::Mutex::ReaderUnlock((atomic_ullong *)v12, v14, v15, v16, v17, v18, v19, v20);
    double v21 = v13 - *((double *)this + 57);
    *((double *)this + 57) = v13;
    uint64_t v22 = *(uint64_t **)(*((void *)this + 1) + 120);
    if (!v22) {
      uint64_t v22 = &operations_research::sat::_CpObjectiveProto_default_instance_;
    }
    double v23 = *((double *)v22 + 12);
    double v24 = fabs(v23);
    if (v23 == 0.0) {
      double v24 = 1.0;
    }
    *((long double *)this + 56) = *((double *)this + 56)
                                + v21
                                * log(v24 * vabdd_f64((double)*((uint64_t *)this + 52), (double)*((uint64_t *)this + 51))+ 1.0);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
}

void sub_23CD9C3E8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::SetGapLimitsFromParameters(operations_research::sat::SharedResponseManager *this, const operations_research::sat::SatParameters *a2)
{
  uint64_t v4 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v12 = *((void *)this + 1);
  if ((_UNKNOWN *)v12 != &operations_research::sat::_CpModelProto_default_instance_ && *(void *)(v12 + 120)) {
    *(_OWORD *)((char *)this + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *((_OWORD *)a2 + 11);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void operations_research::sat::SharedResponseManager::TestGapLimitsIfNeeded(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3 = *((double *)this + 5);
  if (v3 != 0.0 || *((double *)this + 6) != 0.0)
  {
    uint64_t v4 = *((void *)this + 53);
    if (v4 <= 0x7FFFFFFFFFFFFFFDLL)
    {
      uint64_t v5 = *((void *)this + 51);
      if (v5 >= (uint64_t)0x8000000000000003)
      {
        uint64_t v6 = *(uint64_t **)(*((void *)this + 1) + 120);
        double v7 = (double)v4;
        if (!v6) {
          uint64_t v6 = &operations_research::sat::_CpObjectiveProto_default_instance_;
        }
        if (v4 == 0x8000000000000000) {
          double v7 = -INFINITY;
        }
        double v8 = *((double *)v6 + 11);
        double v9 = *((double *)v6 + 12);
        double v10 = v7 + v8;
        if (v9 == 0.0) {
          double v9 = 1.0;
        }
        double v11 = v10 * v9;
        double v12 = (double)v5;
        if (v5 == 0x7FFFFFFFFFFFFFFFLL) {
          double v12 = INFINITY;
        }
        double v13 = vabdd_f64(v11, (v12 + v8) * v9);
        if (v13 <= v3)
        {
          if (*(unsigned char *)this)
          {
            google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 181);
            int64_t v14 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Absolute gap limit of ", 22);
            uint64_t v15 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" reached.", 9);
            google::LogMessage::~LogMessage((google::LogMessage *)v34);
          }
          *((_DWORD *)this + 52) = 4;
          uint64_t v16 = (unsigned __int8 **)*((void *)this + 3);
          absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v16, a2);
          atomic_store(1u, v16[3]);
          absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v16, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v13 / fmax(fabs(v11), 1.0) < *((double *)this + 6))
        {
          if (*(unsigned char *)this)
          {
            google::LogMessage::LogMessage((google::LogMessage *)v34, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 191);
            double v24 = (void *)google::LogMessage::stream((google::LogMessage *)v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Relative gap limit of ", 22);
            BOOL v25 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" reached.", 9);
            google::LogMessage::~LogMessage((google::LogMessage *)v34);
          }
          *((_DWORD *)this + 52) = 4;
          uint64_t v26 = (unsigned __int8 **)*((void *)this + 3);
          absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)v26, a2);
          atomic_store(1u, v26[3]);
          absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)v26, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
  }
}

void sub_23CD9C66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD9C680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void operations_research::sat::SharedResponseManager::UpdateInnerObjectiveBounds(uint64_t a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4)
{
  double v8 = (absl::lts_2020_02_25 **)(a1 + 32);
  double v9 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), a2);
  uint64_t v17 = *(void *)(a1 + 8);
  if ((_UNKNOWN *)v17 == &operations_research::sat::_CpModelProto_default_instance_
    || (uint64_t v18 = *(void *)(v17 + 120)) == 0)
  {
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)__p, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 203);
    BOOL v41 = (void *)google::LogMessage::stream((google::LogMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Check failed: model_proto_.has_objective() ", 43);
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)__p);
  }
  uint64_t v20 = *(void *)(a1 + 408);
  uint64_t v19 = *(void *)(a1 + 416);
  if (v20 <= v19)
  {
    if (v20 >= a3)
    {
      BOOL v21 = v19 > a4;
      if (v19 <= a4) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 424);
      if (v20 >= a3) {
        uint64_t v20 = a3;
      }
      *(void *)(a1 + 408) = v20;
      BOOL v21 = 1;
      if (v19 <= a4) {
        goto LABEL_12;
      }
    }
    *(void *)(a1 + 416) = a4;
    uint64_t v19 = a4;
LABEL_12:
    if (v20 <= v19)
    {
      if (*(unsigned char *)a1) {
        BOOL v25 = v21;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25)
      {
        uint64_t v26 = *(void *)(a1 + 424);
        if (v26 == 0x8000000000000000)
        {
          double v27 = -INFINITY;
        }
        else if (v26 == 0x7FFFFFFFFFFFFFFFLL)
        {
          double v27 = INFINITY;
        }
        else
        {
          double v27 = (double)v26;
        }
        double v29 = *(double *)(v18 + 88);
        double v28 = *(double *)(v18 + 96);
        if (v28 == 0.0) {
          double v30 = 1.0;
        }
        else {
          double v30 = *(double *)(v18 + 96);
        }
        double v31 = -INFINITY;
        double v32 = (double)v20;
        if (v20 == 0x7FFFFFFFFFFFFFFFLL) {
          double v32 = INFINITY;
        }
        if (v20 != 0x8000000000000000) {
          double v31 = v32;
        }
        double v33 = v30 * (v29 + v31);
        double v34 = -INFINITY;
        double v35 = (double)v19;
        if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
          double v35 = INFINITY;
        }
        if (v19 != 0x8000000000000000) {
          double v34 = v35;
        }
        double v36 = v30 * (v29 + v34);
        if (v28 >= 0.0) {
          double v37 = v33;
        }
        else {
          double v37 = v36;
        }
        if (v28 >= 0.0) {
          double v38 = v36;
        }
        else {
          double v38 = v33;
        }
        char v43 = 5;
        strcpy((char *)__p, "Bound");
        uint64_t v39 = *(void *)(a1 + 16);
        if (*(unsigned char *)v39) {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = absl::lts_2020_02_25::GetCurrentTimeNanos(v9) - *(void *)(v39 + 8) + *(void *)(v39 + 16);
        }
        else {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = *(void *)(v39 + 16);
        }
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }
      if (v21) {
        operations_research::sat::SharedResponseManager::TestGapLimitsIfNeeded((operations_research::sat::SharedResponseManager *)a1, v10);
      }
    }
    else
    {
      if (((*(_DWORD *)(a1 + 208) - 2) & 0xFFFFFFFD) != 0) {
        int v22 = 3;
      }
      else {
        int v22 = 4;
      }
      *(_DWORD *)(a1 + 208) = v22;
      if (*(unsigned char *)a1)
      {
        char v43 = 4;
        strcpy((char *)__p, "Done");
        uint64_t v23 = *(void *)(a1 + 16);
        if (*(unsigned char *)v23) {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24 = absl::lts_2020_02_25::GetCurrentTimeNanos(v9) - *(void *)(v23 + 8) + *(void *)(v23 + 16);
        }
        else {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24 = *(void *)(v23 + 16);
        }
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock(v8, v10, v11, v12, v13, v14, v15, v16);
}

void sub_23CD9C984(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  absl::lts_2020_02_25::Mutex::Unlock(v15, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::LogNewSatSolution(uint64_t a1, uint64_t a2, double a3)
{
  v12[6] = *MEMORY[0x263EF8340];
  google::LogMessage::LogMessage((google::LogMessage *)v11, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 133);
  uint64_t v6 = (void *)google::LogMessage::stream((google::LogMessage *)v11);
  v12[0] = a1;
  v12[1] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  *(double *)&v12[2] = a3;
  v12[3] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  v12[4] = a2;
  v12[5] = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("#%-5s %6.2fs  %s", 16, (uint64_t)v12, 3, (uint64_t)__p);
  if ((v10 & 0x80u) == 0) {
    double v7 = __p;
  }
  else {
    double v7 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v8 = v10;
  }
  else {
    uint64_t v8 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)v11);
}

void sub_23CD9CAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    google::LogMessage::~LogMessage((google::LogMessage *)&a15);
    _Unwind_Resume(a1);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a15);
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::LogNewSolution(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  double v18 = a5;
  uint64_t v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  double v20 = a6;
  BOOL v21 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("next:[%.9g,%.9g]", 16, (uint64_t)&v18, 2, (uint64_t)v16);
  google::LogMessage::LogMessage((google::LogMessage *)v15, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 125);
  unsigned __int8 v10 = (void *)google::LogMessage::stream((google::LogMessage *)v15);
  double v18 = *(double *)&a1;
  uint64_t v19 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  double v20 = a3;
  BOOL v21 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  double v22 = a4;
  uint64_t v23 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<double>;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24 = v16;
  BOOL v25 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  uint64_t v26 = a2;
  double v27 = absl::lts_2020_02_25::str_format_internal::FormatArgImpl::Dispatch<std::string>;
  absl::lts_2020_02_25::str_format_internal::FormatPack("#%-5s %6.2fs best:%-5.9g %-15s %s", 33, (uint64_t)&v18, 5, (uint64_t)__p);
  if ((v14 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v12 = v14;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if (((char)v14 & 0x80000000) == 0)
  {
    google::LogMessage::~LogMessage((google::LogMessage *)v15);
    if ((v17 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v16[0]);
    return;
  }
  operator delete(__p[0]);
  google::LogMessage::~LogMessage((google::LogMessage *)v15);
  if (v17 < 0) {
    goto LABEL_11;
  }
}

void sub_23CD9CCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  google::LogMessage::~LogMessage((google::LogMessage *)&a16);
  if (a23 < 0)
  {
    operator delete(a18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::NotifyThatImprovingProblemIsInfeasible(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v4 = (absl::lts_2020_02_25 **)(a1 + 32);
  uint64_t v5 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), a2);
  int v13 = *(_DWORD *)(a1 + 208);
  if (v13 == 4 || v13 == 2)
  {
    *(_DWORD *)(a1 + 208) = 4;
    uint64_t v15 = *(void *)(a1 + 8);
    if ((_UNKNOWN *)v15 == &operations_research::sat::_CpModelProto_default_instance_ || !*(void *)(v15 + 120)) {
      *(unsigned char *)(a1 + 212) = 1;
    }
    *(void *)(a1 + 408) = *(void *)(a1 + 424);
    if (*(unsigned char *)a1) {
      goto LABEL_13;
    }
  }
  else
  {
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 400);
    int v20 = 0;
    if (LODWORD(__p[0])) {
      google::MakeCheckOpString<int,int>((int)__p, (int)&v20, "num_solutions_ == 0");
    }
    *(_DWORD *)(a1 + 208) = 3;
    if (*(unsigned char *)a1)
    {
LABEL_13:
      char v19 = 4;
      strcpy((char *)__p, "Done");
      uint64_t v16 = *(void *)(a1 + 16);
      if (*(unsigned char *)v16) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = absl::lts_2020_02_25::GetCurrentTimeNanos(v5) - *(void *)(v16 + 8) + *(void *)(v16 + 16);
      }
      else {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v17 = *(void *)(v16 + 16);
      }
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock(v4, v6, v7, v8, v9, v10, v11, v12);
}

void sub_23CD9CE74(uint64_t a1, ...)
{
  va_start(va, a1);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CD9CE7C(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  absl::lts_2020_02_25::Mutex::Unlock(v15, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::AddUnsatCore(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v4 = (absl::lts_2020_02_25 **)(a1 + 32);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), a2);
  *(_DWORD *)(a1 + 168) = 0;
  uint64_t v12 = *(int **)a2;
  int v13 = (int *)*((void *)a2 + 1);
  if (*(int **)a2 != v13)
  {
    unsigned int v14 = 0;
    do
    {
      int v15 = *v12;
      if (v14 == *(_DWORD *)(a1 + 172)) {
        google::protobuf::RepeatedField<int>::Reserve((unsigned int *)(a1 + 168), v14 + 1);
      }
      *(_DWORD *)(*(void *)(a1 + 176) + 4 * v14) = v15;
      *(_DWORD *)(a1 + 168) = v14 + 1;
      ++v12;
      ++v14;
    }
    while (v12 != v13);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_23CD9CF64(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::SharedResponseManager::GetInnerObjectiveLowerBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v4 = *((void *)this + 51);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

uint64_t operations_research::sat::SharedResponseManager::GetInnerObjectiveUpperBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v4 = *((void *)this + 52);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

void operations_research::sat::SharedResponseManager::Synchronize(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  *((_OWORD *)this + 27) = *(_OWORD *)((char *)this + 408);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveLowerBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v4 = *((void *)this + 54);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

uint64_t operations_research::sat::SharedResponseManager::SynchronizedInnerObjectiveUpperBound(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  double v3 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v4 = *((void *)this + 55);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v5, v6, v7, v8, v9, v10, v11);
  return v4;
}

uint64_t operations_research::sat::SharedResponseManager::AddSolutionCallback(uint64_t a1, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v4 = (absl::lts_2020_02_25 **)(a1 + 32);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 32), a2);
  uint64_t v11 = *(unsigned int *)(a1 + 464);
  *(_DWORD *)(a1 + 464) = v11 + 1;
  unsigned int v18 = v11;
  unint64_t v12 = *(void *)(a1 + 480);
  if (v12 < *(void *)(a1 + 488))
  {
    *(_DWORD *)unint64_t v12 = v11;
    int v13 = (absl::lts_2020_02_25::Mutex *)(v12 + 8);
    unsigned int v14 = (void *)((char *)a2 + 24);
    int v15 = (absl::lts_2020_02_25::Mutex *)*((void *)a2 + 3);
    if (v15)
    {
      if (v15 == a2)
      {
        *(void *)(v12 + 32) = v13;
        (*(void (**)(void))(*(void *)*v14 + 24))();
        goto LABEL_9;
      }
      *(void *)(v12 + 32) = v15;
    }
    else
    {
      unsigned int v14 = (void *)(v12 + 32);
    }
    *unsigned int v14 = 0;
LABEL_9:
    uint64_t v16 = (_DWORD *)(v12 + 40);
    goto LABEL_10;
  }
  uint64_t v16 = std::vector<std::pair<int,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>>::__emplace_back_slow_path<int const&,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>((void **)(a1 + 472), &v18, a2);
  uint64_t v11 = v18;
LABEL_10:
  *(void *)(a1 + 48google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v16;
  absl::lts_2020_02_25::Mutex::Unlock(v4, v13, v5, v6, v7, v8, v9, v10);
  return v11;
}

void sub_23CD9D1B0(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::GetResponse(operations_research::sat::SharedResponseManager *this@<X0>, absl::lts_2020_02_25::Mutex *a2@<X1>, operations_research::sat::CpSolverResponse *a3@<X8>)
{
  uint64_t v5 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v6 = *((void *)this + 1);
  if ((_UNKNOWN *)v6 != &operations_research::sat::_CpModelProto_default_instance_)
  {
    uint64_t v7 = *(void *)(v6 + 120);
    if (v7)
    {
      int v8 = *((_DWORD *)this + 52);
      if (v8)
      {
        if (v8 == 3)
        {
          *((void *)this + 25) = 0;
          *((void *)this + 27) = 0;
          goto LABEL_19;
        }
        uint64_t v9 = *((void *)this + 53);
      }
      else
      {
        uint64_t v9 = *((void *)this + 52);
      }
      double v10 = (double)v9;
      if (v9 == 0x7FFFFFFFFFFFFFFFLL) {
        double v10 = INFINITY;
      }
      if (v9 == 0x8000000000000000) {
        double v10 = -INFINITY;
      }
      double v11 = *(double *)(v7 + 88);
      double v12 = *(double *)(v7 + 96);
      double v13 = v10 + v11;
      if (v12 == 0.0) {
        double v12 = 1.0;
      }
      *((double *)this + 25) = v13 * v12;
      uint64_t v14 = *((void *)this + 51);
      double v15 = -INFINITY;
      double v16 = (double)v14;
      if (v14 == 0x7FFFFFFFFFFFFFFFLL) {
        double v16 = INFINITY;
      }
      if (v14 != 0x8000000000000000) {
        double v15 = v16;
      }
      *((double *)this + 27) = v12 * (v11 + v15);
      *((void *)this + 36) = *((void *)this + 56);
    }
  }
LABEL_19:
  operations_research::sat::CpSolverResponse::CpSolverResponse(a3, (operations_research::sat::SharedResponseManager *)((char *)this + 56));
  absl::lts_2020_02_25::Mutex::Unlock(v5, v17, v18, v19, v20, v21, v22, v23);
}

void sub_23CD9D2EC(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedResponseManager::NewSolution(operations_research::sat::SharedResponseManager *this, const operations_research::sat::CpSolverResponse *a2, operations_research::sat::Model *a3)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v6 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  uint64_t v8 = *((void *)this + 1);
  if ((_UNKNOWN *)v8 == &operations_research::sat::_CpModelProto_default_instance_) {
    goto LABEL_9;
  }
  uint64_t v9 = *(operations_research::sat **)(v8 + 120);
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v16 = operations_research::sat::ComputeInnerObjective(v9, a2, v7);
  size_t v17 = *((int *)a2 + 4);
  if (v17)
  {
    *((void *)&v108 + 1) = 0;
    v109[0] = 0;
    int v110 = 0;
    v109[1] = 0;
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((void *)&v108 + 1, *((char **)a2 + 3), (char *)(*((void *)a2 + 3) + 8 * v17), v17);
    *(void *)&long long v108 = v16;
    absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 312), v18);
    operations_research::sat::SharedSolutionRepository<long long>::AddInternal((void **)this + 38, (uint64_t *)&v108);
    absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)this + 39, v19, v20, v21, v22, v23, v24, v25);
    if (*((void *)&v108 + 1))
    {
      v109[0] = *((void *)&v108 + 1);
      operator delete(*((void **)&v108 + 1));
    }
  }
  if (v16 <= *((void *)this + 52))
  {
    *((void *)this + 52) = v16 - 1;
    *((void *)this + 53) = v16;
    uint64_t v8 = *((void *)this + 1);
    if ((_UNKNOWN *)v8 != &operations_research::sat::_CpModelProto_default_instance_)
    {
LABEL_8:
      if (*(void *)(v8 + 120)) {
        goto LABEL_10;
      }
    }
LABEL_9:
    if (!*((unsigned char *)this + 1))
    {
      *((_DWORD *)this + 52) = 4;
      uint64_t v26 = (std::string *)*((void *)a2 + 17);
      double v27 = (std::string **)((char *)this + 192);
      uint64_t v33 = *((void *)this + 8);
      double v29 = (google::protobuf::Arena *)(v33 & 0xFFFFFFFFFFFFFFFELL);
      if ((v33 & 1) == 0)
      {
LABEL_11:
        double v30 = *v27;
        if (*v27 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_12:
          std::string::operator=(v30, v26);
LABEL_16:
          if ((operations_research::sat::SharedResponseManager *)((char *)this + 56) != a2)
          {
            *((_DWORD *)this + 18) = 0;
            double v31 = (absl::lts_2020_02_25::Mutex *)*((unsigned int *)a2 + 4);
            if (v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 18, (int)v31);
              double v34 = (void *)*((void *)this + 10);
              *((_DWORD *)this + 18) += *((_DWORD *)a2 + 4);
              memcpy(v34, *((const void **)a2 + 3), 8 * *((int *)a2 + 4));
            }
          }
          if ((operations_research::sat::SharedResponseManager *)((char *)this + 56) != a2)
          {
            *((_DWORD *)this + 24) = 0;
            double v31 = (absl::lts_2020_02_25::Mutex *)*((unsigned int *)a2 + 10);
            if (v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 24, (int)v31);
              double v35 = (void *)*((void *)this + 13);
              *((_DWORD *)this + 24) += *((_DWORD *)a2 + 10);
              memcpy(v35, *((const void **)a2 + 6), 8 * *((int *)a2 + 10));
            }
          }
          if ((operations_research::sat::SharedResponseManager *)((char *)this + 56) != a2)
          {
            *((_DWORD *)this + 3google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
            double v31 = (absl::lts_2020_02_25::Mutex *)*((unsigned int *)a2 + 16);
            if (v31)
            {
              google::protobuf::RepeatedField<long long>::Reserve((unsigned int *)this + 30, (int)v31);
              double v36 = (void *)*((void *)this + 16);
              *((_DWORD *)this + 30) += *((_DWORD *)a2 + 16);
              memcpy(v36, *((const void **)a2 + 9), 8 * *((int *)a2 + 16));
            }
          }
          uint64_t v37 = *((void *)this + 1);
          if ((_UNKNOWN *)v37 != &operations_research::sat::_CpModelProto_default_instance_
            && *(void *)(v37 + 120)
            && *((void *)this + 51) > *((void *)this + 52))
          {
            *((_DWORD *)this + 52) = 4;
          }
          ++*((_DWORD *)this + 100);
          if (!*(unsigned char *)this) {
            goto LABEL_91;
          }
          double v38 = (long long *)*((void *)a2 + 17);
          if (*((char *)v38 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v38, *((void *)v38 + 1));
          }
          else
          {
            long long v39 = *v38;
            v104.__r_.__value_.__r.__words[2] = *((void *)v38 + 2);
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v39;
          }
          if (a3)
          {
            *(void *)&long long v108 = " num_BOOL:";
            *((void *)&v108 + 1) = 10;
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = (char *)a3 + 32;
            BOOL v41 = (void *)*((void *)a3 + 4);
            do
            {
              unint64_t v42 = v41[4];
              BOOL v43 = v42 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d;
              if (v42 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::Trail>(void)::d) {
                uint64_t v44 = v41;
              }
              else {
                uint64_t v44 = v41 + 1;
              }
              if (v43) {
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = (char *)v41;
              }
              BOOL v41 = (void *)*v44;
            }
            while (*v44);
            uint64_t v45 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)((*(void *)(*((void *)v40 + 5) + 80)- *(void *)(*((void *)v40 + 5) + 72)) >> 2), v107, v32);
            __dst = (char *)v107;
            uint64_t v106 = v45 - (unsigned char *)v107;
            absl::lts_2020_02_25::StrAppend(&v104, (uint64_t)&v108, (uint64_t)&__dst);
          }
          uint64_t v46 = *((void *)this + 1);
          if ((_UNKNOWN *)v46 != &operations_research::sat::_CpModelProto_default_instance_)
          {
            uint64_t v47 = *(void *)(v46 + 120);
            if (v47)
            {
              uint64_t v48 = *((void *)this + 53);
              if (v48 == 0x8000000000000000)
              {
                double v49 = -INFINITY;
              }
              else if (v48 == 0x7FFFFFFFFFFFFFFFLL)
              {
                double v49 = INFINITY;
              }
              else
              {
                double v49 = (double)v48;
              }
              double v58 = *(double *)(v47 + 88);
              double v57 = *(double *)(v47 + 96);
              if (v57 == 0.0) {
                double v59 = 1.0;
              }
              else {
                double v59 = *(double *)(v47 + 96);
              }
              double v60 = -INFINITY;
              double v61 = INFINITY;
              uint64_t v62 = *((void *)this + 51);
              uint64_t v63 = *((void *)this + 52);
              if (v62 != 0x7FFFFFFFFFFFFFFFLL) {
                double v61 = (double)v62;
              }
              if (v62 != 0x8000000000000000) {
                double v60 = v61;
              }
              double v64 = v59 * (v58 + v60);
              double v65 = -INFINITY;
              double v66 = (double)v63;
              if (v63 == 0x7FFFFFFFFFFFFFFFLL) {
                double v66 = INFINITY;
              }
              if (v63 != 0x8000000000000000) {
                double v65 = v66;
              }
              double v67 = v59 * (v58 + v65);
              if (v57 >= 0.0) {
                double v68 = v67;
              }
              else {
                double v68 = v64;
              }
              if (v57 >= 0.0) {
                double v69 = v64;
              }
              else {
                double v69 = v67;
              }
              int v70 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)this + 100), v109, v32);
              size_t v71 = v70 - (absl::lts_2020_02_25 *)v109;
              *(void *)&long long v108 = v109;
              *((void *)&v108 + 1) = v70 - (absl::lts_2020_02_25 *)v109;
              if ((unint64_t)(v70 - (absl::lts_2020_02_25 *)v109) > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v71 >= 0x17)
              {
                uint64_t v75 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v71 | 7) != 0x17) {
                  uint64_t v75 = v71 | 7;
                }
                uint64_t v76 = v75 + 1;
                p_dst = (void **)operator new(v75 + 1);
                uint64_t v106 = v71;
                v107[0] = v76 | 0x8000000000000000;
                __dst = (char *)p_dst;
              }
              else
              {
                HIBYTE(v107[0]) = v70 - (absl::lts_2020_02_25 *)v109;
                p_dst = (void **)&__dst;
                if (v70 == (absl::lts_2020_02_25 *)v109)
                {
                  *((unsigned char *)&__dst + v71) = 0;
                  uint64_t v73 = *((void *)this + 2);
                  if (*(unsigned char *)v73)
                  {
LABEL_82:
                    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v74 = absl::lts_2020_02_25::GetCurrentTimeNanos(v70) - *(void *)(v73 + 8) + *(void *)(v73 + 16);
LABEL_88:
                    goto LABEL_89;
                  }
LABEL_87:
                  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v74 = *(void *)(v73 + 16);
                  goto LABEL_88;
                }
              }
              int v70 = (absl::lts_2020_02_25 *)memcpy(p_dst, v109, v71);
              *((unsigned char *)p_dst + v71) = 0;
              uint64_t v73 = *((void *)this + 2);
              if (*(unsigned char *)v73) {
                goto LABEL_82;
              }
              goto LABEL_87;
            }
          }
          int v50 = (absl::lts_2020_02_25 *)absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)this + 100), v109, v32);
          size_t v51 = v50 - (absl::lts_2020_02_25 *)v109;
          *(void *)&long long v108 = v109;
          *((void *)&v108 + 1) = v50 - (absl::lts_2020_02_25 *)v109;
          if ((unint64_t)(v50 - (absl::lts_2020_02_25 *)v109) > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v51 >= 0x17)
          {
            uint64_t v55 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v51 | 7) != 0x17) {
              uint64_t v55 = v51 | 7;
            }
            uint64_t v56 = v55 + 1;
            uint64_t v52 = (void **)operator new(v55 + 1);
            uint64_t v106 = v51;
            v107[0] = v56 | 0x8000000000000000;
            __dst = (char *)v52;
          }
          else
          {
            HIBYTE(v107[0]) = v50 - (absl::lts_2020_02_25 *)v109;
            uint64_t v52 = (void **)&__dst;
            if (v50 == (absl::lts_2020_02_25 *)v109)
            {
              *((unsigned char *)&__dst + v51) = 0;
              uint64_t v53 = *((void *)this + 2);
              if (*(unsigned char *)v53)
              {
LABEL_52:
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v54 = absl::lts_2020_02_25::GetCurrentTimeNanos(v50) - *(void *)(v53 + 8) + *(void *)(v53 + 16);
LABEL_58:
LABEL_89:
                if (SHIBYTE(v107[0]) < 0)
                {
                  operator delete(__dst);
                  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_91;
                  }
                }
                else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_91;
                }
                operator delete(v104.__r_.__value_.__l.__data_);
LABEL_91:
                operations_research::sat::SharedResponseManager::TestGapLimitsIfNeeded(this, v31);
                if (*((void *)this + 59) == *((void *)this + 60))
                {
LABEL_116:
                  if (FLAGS_cp_model_dump_solutions && *(unsigned char *)this)
                  {
                    unint64_t v91 = (char *)this + 496;
                    uint64_t v92 = *((unsigned __int8 *)this + 519);
                    if ((v92 & 0x80u) != 0)
                    {
                      unint64_t v91 = (char *)*((void *)this + 62);
                      uint64_t v92 = *((void *)this + 63);
                    }
                    *(void *)&long long v108 = v91;
                    *((void *)&v108 + 1) = v92;
                    __dst = "solution_";
                    uint64_t v106 = 9;
                    unint64_t v93 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)*((unsigned int *)this + 100), &v104.__r_.__value_.__s.__data_[16], v11);
                    v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104.__r_.__value_.__r.__words[2];
                    v104.__r_.__value_.__l.__size_ = v93 - (unsigned char *)&v104.__r_.__value_.__r.__words[2];
                    v103[0] = ".pbtxt";
                    v103[1] = 6;
                    absl::lts_2020_02_25::StrCat((uint64_t)&v108, (uint64_t)&__dst, (uint64_t)&v104, (uint64_t)v103, &v102);
                    google::LogMessage::LogMessage((google::LogMessage *)&v108, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 474);
                    uint64_t v94 = (void *)google::LogMessage::stream((google::LogMessage *)&v108);
                    uint64_t v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Dumping solution to '", 21);
                    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v96 = &v102;
                    }
                    else {
                      uint64_t v96 = (std::string *)v102.__r_.__value_.__r.__words[0];
                    }
                    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v102.__r_.__value_.__l.__size_;
                    }
                    unint64_t v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, size);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"'.", 2);
                    google::LogMessage::~LogMessage((google::LogMessage *)&v108);
                    std::string::size_type v99 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
                    uint64_t v100 = &v102;
                    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    {
                      std::string::size_type v99 = v102.__r_.__value_.__l.__size_;
                      uint64_t v100 = (std::string *)v102.__r_.__value_.__r.__words[0];
                    }
                    *(void *)&long long v108 = v100;
                    *((void *)&v108 + 1) = v99;
                    file::SetTextProto(&v108, 47802, &v104);
                    if (v104.__r_.__value_.__r.__words[0])
                    {
                      google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&__dst, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 475);
                      uint64_t v101 = (void *)google::LogMessage::stream((google::LogMessage *)&__dst);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Check failed: (file::SetTextProto(file, best_response_, file::Defaults())).ok() ", 80);
                      google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&__dst);
                    }
                    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v102.__r_.__value_.__l.__data_);
                    }
                  }
                  goto LABEL_131;
                }
                uint64_t v77 = *((void *)this + 1);
                if ((_UNKNOWN *)v77 == &operations_research::sat::_CpModelProto_default_instance_
                  || (uint64_t v78 = *(void *)(v77 + 120)) == 0)
                {
LABEL_113:
                  v87.n128_f64[0] = operations_research::sat::SharedResponseManager::SetStatsFromModelInternal((uint64_t)this, (uint64_t)a3);
                  uint64_t v88 = *((void *)this + 59);
                  for (uint64_t i = *((void *)this + 60); v88 != i; v88 += 40)
                  {
                    uint64_t v90 = *(void *)(v88 + 32);
                    if (!v90) {
                      std::__throw_bad_function_call[abi:ne180100]();
                    }
                    (*(void (**)(uint64_t, char *, __n128))(*(void *)v90 + 48))(v90, (char *)this + 56, v87);
                  }
                  goto LABEL_116;
                }
                int v79 = *((_DWORD *)this + 52);
                if (v79)
                {
                  if (v79 == 3)
                  {
                    *((void *)this + 25) = 0;
                    *((void *)this + 27) = 0;
                    goto LABEL_113;
                  }
                  uint64_t v80 = *((void *)this + 53);
                  if (v80 == 0x8000000000000000) {
                    goto LABEL_103;
                  }
                }
                else
                {
                  uint64_t v80 = *((void *)this + 52);
                  if (v80 == 0x8000000000000000)
                  {
LABEL_103:
                    double v81 = -INFINITY;
LABEL_105:
                    double v82 = *(double *)(v78 + 88);
                    double v83 = v81 + v82;
                    double v84 = *(double *)(v78 + 96);
                    if (v84 == 0.0) {
                      double v84 = 1.0;
                    }
                    *((double *)this + 25) = v83 * v84;
                    uint64_t v85 = *((void *)this + 51);
                    if (v85 == 0x8000000000000000)
                    {
                      double v86 = -INFINITY;
                    }
                    else if (v85 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      double v86 = INFINITY;
                    }
                    else
                    {
                      double v86 = (double)v85;
                    }
                    *((double *)this + 27) = v84 * (v82 + v86);
                    *((void *)this + 36) = *((void *)this + 56);
                    goto LABEL_113;
                  }
                }
                if (v80 == 0x7FFFFFFFFFFFFFFFLL) {
                  double v81 = INFINITY;
                }
                else {
                  double v81 = (double)v80;
                }
                goto LABEL_105;
              }
LABEL_57:
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v54 = *(void *)(v53 + 16);
              goto LABEL_58;
            }
          }
          int v50 = (absl::lts_2020_02_25 *)memcpy(v52, v109, v51);
          *((unsigned char *)v52 + v51) = 0;
          uint64_t v53 = *((void *)this + 2);
          if (*(unsigned char *)v53) {
            goto LABEL_52;
          }
          goto LABEL_57;
        }
LABEL_15:
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v27, v29, (long long *)v26);
        goto LABEL_16;
      }
LABEL_14:
      double v29 = *(google::protobuf::Arena **)v29;
      double v30 = *v27;
      if (*v27 != (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_12;
      }
      goto LABEL_15;
    }
LABEL_10:
    *((_DWORD *)this + 52) = 2;
    uint64_t v26 = (std::string *)*((void *)a2 + 17);
    double v27 = (std::string **)((char *)this + 192);
    uint64_t v28 = *((void *)this + 8);
    double v29 = (google::protobuf::Arena *)(v28 & 0xFFFFFFFFFFFFFFFELL);
    if ((v28 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
LABEL_131:
  absl::lts_2020_02_25::Mutex::Unlock(v6, v10, (uint64_t)v11, v17, v12, v13, v14, v15);
}

void sub_23CD9DC20(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,void *__p,uint64_t a43)
{
  absl::lts_2020_02_25::Mutex::Unlock(v43, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

double operations_research::sat::SharedResponseManager::SetStatsFromModelInternal(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)(a2 + 32);
    double v3 = *(void **)(a2 + 32);
    uint64_t v5 = (void *)(a2 + 32);
    uint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d;
      if (v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v6 + 1;
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      uint64_t v6 = (void *)*v9;
    }
    while (*v9);
    if (v5 == v4 || v5[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::SatSolver>(void)::d) {
      double v10 = 0;
    }
    else {
      double v10 = (int *)v5[5];
    }
    double v11 = (void *)(a2 + 32);
    do
    {
      unint64_t v12 = v3[4];
      BOOL v13 = v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
      if (v12 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
        uint64_t v14 = v3;
      }
      else {
        uint64_t v14 = v3 + 1;
      }
      if (v13) {
        double v11 = v3;
      }
      double v3 = (void *)*v14;
    }
    while (*v14);
    if (v11 == v4 || v11[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v11[5];
    }
    *(void *)(a1 + 224) = v10[4];
    *(void *)(a1 + 24google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = operations_research::sat::SatSolver::num_branches((operations_research::sat::SatSolver *)v10);
    *(void *)(a1 + 232) = operations_research::sat::SatSolver::num_failures((operations_research::sat::SatSolver *)v10);
    uint64_t v16 = (absl::lts_2020_02_25 *)operations_research::sat::SatSolver::num_propagations((operations_research::sat::SatSolver *)v10);
    *(void *)(a1 + 248) = v16;
    if (v15)
    {
      *(void *)(a1 + 256) = *(void *)(v15 + 848);
      size_t v17 = (void *)*v4;
      if (!*v4) {
        goto LABEL_40;
      }
    }
    else
    {
      *(void *)(a1 + 256) = 0;
      size_t v17 = (void *)*v4;
      if (!*v4) {
        goto LABEL_40;
      }
    }
    uint64_t v18 = v4;
    do
    {
      unint64_t v19 = v17[4];
      BOOL v20 = v19 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d;
      if (v19 >= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = v17 + 1;
      }
      if (v20) {
        uint64_t v18 = v17;
      }
      size_t v17 = (void *)*v21;
    }
    while (*v21);
    if (v18 != v4 && v18[4] <= (unint64_t)&gtl::FastTypeId<operations_research::TimeLimit>(void)::d)
    {
      uint64_t v22 = v18[5];
      goto LABEL_41;
    }
LABEL_40:
    uint64_t v22 = 0;
LABEL_41:
    *(double *)(a1 + 264) = (double)(absl::lts_2020_02_25::GetCurrentTimeNanos(v16) - *(void *)v22) * 0.000000001;
    double result = *(double *)(v22 + 112);
    *(double *)(a1 + 28google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = result;
  }
  return result;
}

void operations_research::sat::SharedResponseManager::LoadDebugSolution(operations_research::sat::SharedResponseManager *this, operations_research::sat::Model *a2)
{
  if (*FLAGS_cp_model_load_debug_solution)
  {
    uint64_t v5 = (char *)a2 + 32;
    uint64_t v4 = (void *)*((void *)a2 + 4);
    if (!v4) {
      goto LABEL_14;
    }
    uint64_t v6 = (char *)a2 + 32;
    do
    {
      unint64_t v7 = v4[4];
      BOOL v8 = v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
      if (v7 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d) {
        uint64_t v9 = v4;
      }
      else {
        uint64_t v9 = v4 + 1;
      }
      if (v8) {
        uint64_t v6 = (char *)v4;
      }
      uint64_t v4 = (void *)*v9;
    }
    while (*v9);
    if (v6 == v5
      || *((void *)v6 + 4) > (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d
      || !*((void *)v6 + 5))
    {
LABEL_14:
      operations_research::sat::CpSolverResponse::CpSolverResponse((operations_research::sat::CpSolverResponse *)v40, 0);
      google::LogMessage::LogMessage((google::LogMessage *)&v39, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 486);
      double v10 = (void *)google::LogMessage::stream((google::LogMessage *)&v39);
      double v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Reading solution from '", 23);
      size_t v12 = strlen(FLAGS_cp_model_load_debug_solution);
      BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, FLAGS_cp_model_load_debug_solution, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"'.", 2);
      google::LogMessage::~LogMessage((google::LogMessage *)&v39);
      *(void *)&long long v39 = FLAGS_cp_model_load_debug_solution;
      *((void *)&v39 + 1) = strlen(FLAGS_cp_model_load_debug_solution);
      file::GetTextProto(&v39, (google::protobuf::Message *)v40, 47802, &v38);
      if (v38)
      {
        google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v37, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 489);
        double v36 = (void *)google::LogMessage::stream((google::LogMessage *)v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Check failed: (file::GetTextProto(FLAGS_cp_model_load_debug_solution, &response, file::Defaults())).ok() ", 105);
        google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v37);
      }
      uint64_t v14 = (int **)operations_research::sat::Model::GetOrCreate<operations_research::sat::CpModelMapping>((uint64_t)a2);
      uint64_t v15 = (uint64_t *)operations_research::sat::Model::GetOrCreate<operations_research::sat::DebugSolution>((uint64_t)a2);
      uint64_t v16 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>((uint64_t)a2);
      unint64_t v18 = (int)(-1431655765 * ((*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2));
      unint64_t v19 = (v15[1] - *v15) >> 3;
      if (v18 <= v19)
      {
        if (v18 < v19) {
          v15[1] = *v15 + 8 * v18;
        }
      }
      else
      {
        std::vector<gtl::IntType<operations_research::glop::EntryIndex_tag_,long long>>::__append((uint64_t)v15, v18 - v19);
      }
      uint64_t v20 = v41;
      if (v41 >= 1)
      {
        uint64_t v21 = *v14;
        uint64_t v22 = v42;
        do
        {
          uint64_t v24 = *v21++;
          uint64_t v23 = v24;
          if (v24 != -1)
          {
            uint64_t v25 = *v15;
            *(void *)(*v15 + 8 * v23) = *v22;
            *(void *)(v25 + 8 * (int)(v23 ^ 1)) = -*v22;
          }
          ++v22;
          --v20;
        }
        while (v20);
      }
      uint64_t v26 = *(void **)v5;
      if (*(void *)v5)
      {
        double v27 = v5;
        do
        {
          unint64_t v28 = v26[4];
          BOOL v29 = v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d;
          if (v28 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d) {
            double v30 = v26;
          }
          else {
            double v30 = v26 + 1;
          }
          if (v29) {
            double v27 = (char *)v26;
          }
          uint64_t v26 = (void *)*v30;
        }
        while (*v30);
        if (v27 != v5
          && *((void *)v27 + 4) <= (unint64_t)&gtl::FastTypeId<operations_research::sat::ObjectiveDefinition>(void)::d)
        {
          uint64_t v31 = *((void *)v27 + 5);
          if (v31)
          {
            uint64_t v32 = *(int *)(v31 + 16);
            if (*(void *)(*((void *)this + 1) + 120)) {
              uint64_t v33 = *(operations_research::sat **)(*((void *)this + 1) + 120);
            }
            else {
              uint64_t v33 = (operations_research::sat *)&operations_research::sat::_CpObjectiveProto_default_instance_;
            }
            uint64_t v34 = operations_research::sat::ComputeInnerObjective(v33, (const operations_research::sat::CpObjectiveProto *)v40, v17);
            uint64_t v35 = *v15;
            *(void *)(*v15 + 8 * v32) = v34;
            *(void *)(v35 + 8 * (int)(v32 ^ 1)) = -v34;
          }
        }
      }
      operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)v40);
    }
  }
}

void sub_23CD9E154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va);
  _Unwind_Resume(a1);
}

void sub_23CD9E17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  google::LogMessage::~LogMessage((google::LogMessage *)va);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va1);
  _Unwind_Resume(a1);
}

void sub_23CD9E198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CD9E1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  absl::lts_2020_02_25::Status::~Status((absl::lts_2020_02_25::Status *)va);
  operations_research::sat::CpSolverResponse::~CpSolverResponse((operations_research::sat::CpSolverResponse *)va1);
  _Unwind_Resume(a1);
}

uint64_t operations_research::sat::Model::GetOrCreate<operations_research::sat::DebugSolution>(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    goto LABEL_12;
  }
  size_t v2 = (void *)(a1 + 32);
  do
  {
    unint64_t v3 = v1[4];
    BOOL v4 = v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d;
    if (v3 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v1 + 1;
    }
    if (v4) {
      size_t v2 = v1;
    }
    uint64_t v1 = (void *)*v5;
  }
  while (*v5);
  if (v2 == (void *)(a1 + 32)
    || v2[4] > (unint64_t)&gtl::FastTypeId<operations_research::sat::DebugSolution>(void)::d)
  {
LABEL_12:
    operator new();
  }
  return v2[5];
}

void operations_research::sat::SharedResponseManager::SetStatsFromModel(operations_research::sat::SharedResponseManager *this, operations_research::sat::Model *a2)
{
  BOOL v4 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  operations_research::sat::SharedResponseManager::SetStatsFromModelInternal((uint64_t)this, (uint64_t)a2);
  absl::lts_2020_02_25::Mutex::Unlock(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_23CD9E3A8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

BOOL operations_research::sat::SharedResponseManager::ProblemIsSolved(operations_research::sat::SharedResponseManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  size_t v2 = this;
  unint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 32);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedResponseManager *)((char *)this + 32), a2);
  LODWORD(v2) = *((_DWORD *)v2 + 52);
  absl::lts_2020_02_25::Mutex::Unlock(v3, v4, v5, v6, v7, v8, v9, v10);
  return (v2 - 3) < 2;
}

operations_research::sat::SharedBoundsManager *operations_research::sat::SharedBoundsManager::SharedBoundsManager(operations_research::sat::SharedBoundsManager *this, const operations_research::sat::CpModelProto *a2)
{
  uint64_t v4 = *((int *)a2 + 6);
  *(_DWORD *)this = v4;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  if (v4)
  {
    if ((v4 & 0x80000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)operator new(8 * v4);
    *((void *)this + 3) = v5;
    uint64_t v6 = &v5[8 * v4];
    *((void *)this + 5) = v6;
    memset_pattern16(v5, &unk_23CE909B0, 8 * v4);
    *((void *)this + 6) = 0;
    *((void *)this + 4) = v6;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    uint64_t v7 = (char *)operator new(8 * v4);
    *((void *)this + 6) = v7;
    uint64_t v8 = &v7[8 * v4];
    *((void *)this + 8) = v8;
    memset_pattern16(v7, &unk_23CE909C0, 8 * v4);
    *((void *)this + 7) = v8;
  }
  else
  {
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
  }
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = (char *)this + 72;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 28) = -1;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  if (v4)
  {
    uint64_t v9 = (char *)operator new(8 * v4);
    *((void *)this + 19) = v9;
    uint64_t v10 = &v9[8 * v4];
    *((void *)this + 21) = v10;
    memset_pattern16(v9, &unk_23CE909B0, 8 * v4);
    *((void *)this + 22) = 0;
    *((void *)this + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v10;
    *((void *)this + 23) = 0;
    *((void *)this + 24) = 0;
    uint64_t v11 = (char *)operator new(8 * v4);
    *((void *)this + 22) = v11;
    size_t v12 = &v11[8 * v4];
    *((void *)this + 24) = v12;
    memset_pattern16(v11, &unk_23CE909C0, 8 * v4);
    *((void *)this + 23) = v12;
  }
  else
  {
    *((void *)this + 22) = 0;
    *((void *)this + 23) = 0;
    *((void *)this + 24) = 0;
  }
  *(_OWORD *)((char *)this + 20google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  operations_research::SparseBitset<long long>::ClearAndResize((uint64_t *)this + 9, v4);
  uint64_t v13 = *(unsigned int *)this;
  if ((int)v13 >= 1)
  {
    uint64_t v14 = (uint64_t *)*((void *)this + 3);
    uint64_t v15 = (uint64_t *)*((void *)this + 6);
    uint64_t v16 = (void *)*((void *)this + 19);
    size_t v17 = (void *)*((void *)this + 22);
    unint64_t v18 = (uint64_t *)(*((void *)a2 + 4) + 8);
    do
    {
      uint64_t v19 = *v18++;
      uint64_t v20 = *(uint64_t **)(v19 + 24);
      *uint64_t v14 = *v20;
      *uint64_t v15 = v20[*(int *)(v19 + 16) - 1];
      uint64_t v21 = *v14++;
      *v16++ = v21;
      uint64_t v22 = *v15++;
      *v17++ = v22;
      --v13;
    }
    while (v13);
  }
  return this;
}

void sub_23CD9E62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, absl::lts_2020_02_25::Mutex *a10)
{
  uint64_t v15 = (void *)v10[19];
  if (v15)
  {
    v10[20] = v15;
    operator delete(v15);
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v11);
    uint64_t v16 = *v12;
    if (!*v12)
    {
LABEL_3:
      size_t v17 = *a9;
      if (!*a9) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    operations_research::SparseBitset<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>::~SparseBitset(v11);
    uint64_t v16 = *v12;
    if (!*v12) {
      goto LABEL_3;
    }
  }
  *uint64_t v13 = v16;
  operator delete(v16);
  size_t v17 = *a9;
  if (!*a9)
  {
LABEL_5:
    absl::lts_2020_02_25::Mutex::~Mutex(a10);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v10[4] = v17;
  operator delete(v17);
  goto LABEL_5;
}

void sub_23CD9E6F0()
{
  if (!*v0) {
    JUMPOUT(0x23CD9E6A0);
  }
  JUMPOUT(0x23CD9E698);
}

void operations_research::SparseBitset<long long>::ClearAndResize(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (unint64_t *)a1[7];
  uint64_t v4 = (unint64_t *)a1[8];
  if (300 * (v4 - v3) >= (unint64_t)a2)
  {
    uint64_t v12 = a2 & ~(a2 >> 63);
    *a1 = v12;
    uint64_t v14 = (void **)(a1 + 1);
    uint64_t v13 = (char *)a1[1];
    unint64_t v15 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v16 = a1[2] - (void)v13;
    unint64_t v17 = v16 >> 3;
    uint64_t v19 = 0;
    if (v15 <= v16 >> 3)
    {
      if (v15 < v16 >> 3) {
        a1[2] = (uint64_t)&v13[8 * v15];
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 1), v15 - (v16 >> 3), &v19);
      uint64_t v13 = (char *)*v14;
    }
    if (v15 >= v17) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = v15;
    }
    bzero(v13, 8 * v18);
    a1[8] = a1[7];
  }
  else
  {
    uint64_t v5 = (uint64_t)(a1 + 1);
    uint64_t v6 = a1[1];
    if (v3 != v4)
    {
      uint64_t v7 = v3;
      do
      {
        unint64_t v8 = *v7++;
        *(void *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) = 0;
      }
      while (v7 != v4);
    }
    a1[8] = (uint64_t)v3;
    uint64_t v9 = a2 & ~(a2 >> 63);
    *a1 = v9;
    unint64_t v10 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v19 = 0;
    unint64_t v11 = (a1[2] - v6) >> 3;
    if (v10 <= v11)
    {
      if (v10 < v11) {
        a1[2] = v6 + 8 * v10;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(v5, v10 - v11, &v19);
    }
  }
}

void **std::deque<operations_research::SparseBitset<long long>>::~deque[abi:ne180100](void **a1)
{
  std::deque<operations_research::SparseBitset<long long>>::clear(a1);
  size_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(uint64_t a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t *a4, void *a5, void *a6)
{
  v51[6] = *MEMORY[0x263EF8340];
  uint64_t v9 = (a4[1] - *a4) >> 2;
  v51[0] = v9;
  v48[0] = (uint64_t)(a5[1] - *a5) >> 3;
  if (v9 != v48[0]) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)v51, (int)v48, "variables.size() == new_lower_bounds.size()");
  }
  v51[0] = v9;
  v48[0] = (uint64_t)(a6[1] - *a6) >> 3;
  if (v9 != v48[0]) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)v51, (int)v48, "variables.size() == new_upper_bounds.size()");
  }
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 16), a2);
  uint64_t v17 = *a4;
  if (a4[1] != *a4)
  {
    for (unint64_t i = 0; i < (a4[1] - *a4) >> 2; ++i)
    {
      uint64_t v19 = (absl::lts_2020_02_25::numbers_internal *)*(unsigned int *)(v17 + 4 * i);
      if ((int)v19 >= *(_DWORD *)a1) {
        goto LABEL_5;
      }
      uint64_t v20 = 8 * (int)v19;
      uint64_t v21 = *(void *)(*(void *)(a1 + 24) + v20);
      uint64_t v22 = *(void *)(*(void *)(a1 + 48) + v20);
      uint64_t v23 = *(void *)(*a5 + 8 * i);
      uint64_t v24 = *(void *)(*a6 + 8 * i);
      LODWORD(v51[0]) = *(_DWORD *)(v17 + 4 * i);
      LODWORD(v48[0]) = 0;
      if ((v19 & 0x80000000) != 0) {
        google::MakeCheckOpString<int,int>((int)v51, (int)v48, "var >= 0");
      }
      if (v23 <= v21 && v24 >= v22) {
        goto LABEL_5;
      }
      if (v23 > v21) {
        *(void *)(*(void *)(a1 + 24) + 8 * (int)v19) = v23;
      }
      if (v24 < v22) {
        *(void *)(*(void *)(a1 + 48) + 8 * (int)v19) = v24;
      }
      operations_research::SparseBitset<long long>::Set((void *)(a1 + 72), (int)v19);
      if (*operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(operations_research::sat::CpModelProto const&,std::string const&,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&)::vlocal__ < 2
        || operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(operations_research::sat::CpModelProto const&,std::string const&,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&)::vlocal__ == &google::kLogSiteUninitialized
        && !google::InitVLOG3__((google *)&operations_research::sat::SharedBoundsManager::ReportPotentialNewBounds(operations_research::sat::CpModelProto const&,std::string const&,std::vector<int> const&,std::vector<long long> const&,std::vector<long long> const&)::vlocal__, (int **)&fLI::FLAGS_v, "./ortools/sat/synchronization.cc", (const char *)2))
      {
        goto LABEL_5;
      }
      uint64_t v26 = *(long long **)(*(void *)(*((void *)a2 + 4) + 8 * (int)v19 + 8) + 40);
      if (*((char *)v26 + 23) < 0)
      {
        unint64_t v11 = (char *)*((void *)v26 + 1);
        if (!v11)
        {
LABEL_25:
          v51[0] = "anonymous_var(";
          v51[1] = 14;
          unint64_t v28 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v19, v50, v11);
          v49[0] = v50;
          v49[1] = v28 - v50;
          v48[0] = ")";
          v48[1] = 1;
          absl::lts_2020_02_25::StrCat((uint64_t)v51, (uint64_t)v49, (uint64_t)v48, &v47);
          goto LABEL_26;
        }
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v26, (std::string::size_type)v11);
      }
      else
      {
        if (!*((unsigned char *)v26 + 23)) {
          goto LABEL_25;
        }
        long long v27 = *v26;
        v47.__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v27;
      }
LABEL_26:
      BOOL v29 = google::LogMessage::LogMessage((google::LogMessage *)v51, (google::glog_internal_namespace_ *)"./ortools/sat/synchronization.cc", 593);
      double v30 = (void *)google::LogMessage::stream(v29);
      uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"  '", 3);
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = a3;
      }
      else {
        uint64_t v33 = *(void *)a3;
      }
      if (v32 >= 0) {
        uint64_t v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
      double v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"' exports new bounds for ", 25);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v47;
      }
      else {
        uint64_t v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v47.__r_.__value_.__l.__size_;
      }
      long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)": from [", 8);
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ", 2);
      int v41 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"] to [", 6);
      unint64_t v42 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", ", 2);
      BOOL v43 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"]", 1);
      google::LogMessage::~LogMessage((google::LogMessage *)v51);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
LABEL_5:
      uint64_t v17 = *a4;
    }
  }
  absl::lts_2020_02_25::Mutex::Unlock((absl::lts_2020_02_25 **)(a1 + 16), v10, (uint64_t)v11, v12, v13, v14, v15, v16);
}

void sub_23CD9ED10()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 144));
}

void sub_23CD9ED18()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 144));
}

void sub_23CD9ED20()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 144));
}

void sub_23CD9ED28(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, absl::lts_2020_02_25 **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void operations_research::sat::SharedBoundsManager::Synchronize(operations_research::sat::SharedBoundsManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  uint64_t v56 = (absl::lts_2020_02_25 **)((char *)this + 16);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedBoundsManager *)((char *)this + 16), a2);
  unint64_t v3 = (uint64_t *)*((void *)this + 16);
  uint64_t v4 = (uint64_t *)*((void *)this + 17);
  if (v3 != v4)
  {
    unint64_t v5 = *((void *)this + 30);
    if (v5)
    {
      uint64_t v6 = 1;
      double v57 = (uint64_t *)*((void *)this + 17);
      while (1)
      {
        double v58 = v3;
        uint64_t v7 = *v3;
        uint64_t v8 = *v3 << 32 >> 29;
        *(void *)(*((void *)this + 19) + v8) = *(void *)(*((void *)this + 3) + v8);
        *(void *)(*((void *)this + 22) + v8) = *(void *)(*((void *)this + 6) + v8);
        if (v6) {
          break;
        }
LABEL_4:
        unint64_t v3 = v58 + 1;
        if (v58 + 1 == v57) {
          goto LABEL_34;
        }
      }
      unint64_t v9 = 0;
      uint64_t v61 = (int)v7;
      unint64_t v10 = (unint64_t)(int)v7 >> 6;
      uint64_t v11 = 1 << v7;
      uint64_t v59 = 1 << v7;
      unint64_t v60 = v10;
      while (1)
      {
        unint64_t v13 = *((void *)this + 29) + v9;
        uint64_t v14 = *(void *)(*((void *)this + 26) + 8 * (v13 / 0x33));
        unint64_t v15 = v13 % 0x33;
        uint64_t v16 = *(void *)(v14 + 80 * v15 + 8);
        uint64_t v17 = *(void *)(v16 + 8 * v10);
        if ((v17 & v11) != 0) {
          goto LABEL_9;
        }
        *(void *)(v16 + 8 * v1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v17 | v11;
        uint64_t v18 = v14 + 80 * v15;
        unint64_t v21 = *(void *)(v18 + 72);
        uint64_t v20 = (void *)(v18 + 72);
        unint64_t v19 = v21;
        uint64_t v23 = v20 - 1;
        uint64_t v22 = (char *)*(v20 - 1);
        if ((unint64_t)v22 >= v21) {
          break;
        }
        *(void *)uint64_t v22 = v61;
        uint64_t v12 = (uint64_t)(v22 + 8);
LABEL_8:
        *uint64_t v23 = v12;
LABEL_9:
        ++v9;
        uint64_t v6 = v5;
        if (v5 <= v9) {
          goto LABEL_4;
        }
      }
      uint64_t v24 = v20 - 2;
      uint64_t v25 = (char *)*(v20 - 2);
      uint64_t v26 = (v22 - v25) >> 3;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v19 - (void)v25;
      if (v28 >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v30 = v5;
        unint64_t v31 = v29;
        int v32 = operator new(8 * v29);
        uint64_t v24 = v20 - 2;
        unint64_t v29 = v31;
        unint64_t v5 = v30;
        uint64_t v26 = (v22 - v25) >> 3;
        uint64_t v33 = &v32[8 * v26];
        *uint64_t v33 = v61;
        uint64_t v12 = (uint64_t)(v33 + 1);
        if (v22 == v25) {
          goto LABEL_29;
        }
      }
      else
      {
        int v32 = 0;
        uint64_t v33 = (void *)(8 * v26);
        *(void *)(8 * v26) = v61;
        uint64_t v12 = 8 * v26 + 8;
        if (v22 == v25)
        {
LABEL_29:
          *uint64_t v24 = v33;
          *uint64_t v23 = v12;
          void *v20 = &v32[8 * v29];
          if (v25)
          {
            operator delete(v25);
            unint64_t v5 = *((void *)this + 30);
          }
          uint64_t v11 = v59;
          unint64_t v10 = v60;
          goto LABEL_8;
        }
      }
      unint64_t v34 = v22 - 8 - v25;
      if (v34 < 0x58) {
        goto LABEL_39;
      }
      if ((unint64_t)(v25 - v32) < 0x20) {
        goto LABEL_39;
      }
      uint64_t v35 = (v34 >> 3) + 1;
      uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v37 = &v22[-v36];
      uint64_t v33 = (void *)((char *)v33 - v36);
      uint64_t v38 = &v32[8 * v26 - 16];
      long long v39 = v22 - 16;
      uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *uint64_t v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 4;
      }
      while (v40);
      uint64_t v22 = v37;
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          uint64_t v42 = *((void *)v22 - 1);
          v22 -= 8;
          *--uint64_t v33 = v42;
        }
        while (v22 != v25);
      }
      goto LABEL_29;
    }
    uint64_t v43 = *((void *)this + 3);
    uint64_t v44 = *((void *)this + 19);
    uint64_t v45 = *((void *)this + 6);
    uint64_t v46 = *((void *)this + 22);
    do
    {
      uint64_t v47 = *v3++;
      uint64_t v48 = 8 * (int)v47;
      *(void *)(v44 + v48) = *(void *)(v43 + v48);
      *(void *)(v46 + v48) = *(void *)(v45 + v48);
    }
    while (v3 != v4);
  }
LABEL_34:
  bzero(*((void **)this + 10), *((void *)this + 11) - *((void *)this + 10));
  *((void *)this + 17) = *((void *)this + 16);
  absl::lts_2020_02_25::Mutex::Unlock(v56, v49, v50, v51, v52, v53, v54, v55);
}

void sub_23CD9F0B8(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, absl::lts_2020_02_25 **a10)
{
}

unint64_t operations_research::sat::SharedBoundsManager::RegisterNewId(operations_research::sat::SharedBoundsManager *this, absl::lts_2020_02_25::Mutex *a2)
{
  unint64_t v3 = (absl::lts_2020_02_25 **)((char *)this + 16);
  absl::lts_2020_02_25::Mutex::Lock((operations_research::sat::SharedBoundsManager *)((char *)this + 16), a2);
  uint64_t v4 = (void *)((char *)this + 200);
  unint64_t v5 = *((void *)this + 30);
  uint64_t v6 = (v5 << 32) + 0x100000000;
  if (v6 >> 32 > v5)
  {
    std::deque<operations_research::SparseBitset<long long>>::__append(v4, (v6 >> 32) - v5);
    goto LABEL_12;
  }
  if (v6 >> 32 < v5)
  {
    unint64_t v7 = *((void *)this + 29);
    uint64_t v8 = *((void *)this + 26);
    unint64_t v9 = (void *)(v8 + 8 * (v7 / 0x33));
    if (*((void *)this + 27) == v8)
    {
      unint64_t v10 = 0;
      if (v5 << 32 == 0xFFFFFFFF00000000)
      {
LABEL_11:
        std::deque<operations_research::SparseBitset<long long>>::__erase_to_end(v4, v9, v10);
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v10 = (void *)(*v9 + 80 * (v7 % 0x33));
      if (v5 << 32 == 0xFFFFFFFF00000000) {
        goto LABEL_11;
      }
    }
    uint64_t v11 = (v6 >> 32) - 0x3333333333333333 * (((uint64_t)v10 - *v9) >> 4);
    if (v11 < 1)
    {
      unint64_t v12 = 50 - v11;
      v9 -= v12 / 0x33;
      unint64_t v10 = (void *)(*v9 + 80 * (51 * (v12 / 0x33) - v12) + 4000);
    }
    else
    {
      v9 += v11 / 0x33uLL;
      unint64_t v10 = (void *)(*v9 + 80 * (v11 % 0x33uLL));
    }
    goto LABEL_11;
  }
LABEL_12:
  operations_research::SparseBitset<long long>::ClearAndResize((uint64_t *)(*(void *)(*((void *)this + 26) + 8 * ((*((void *)this + 29) + (int)v5) / 0x33uLL))+ 80 * ((*((void *)this + 29) + (int)v5) % 0x33uLL)), *(int *)this);
  int v20 = *(_DWORD *)this;
  if (*(int *)this >= 1)
  {
    int64_t v21 = 0;
    do
    {
      uint64_t v22 = *(void *)(*(void *)(*((void *)this + 1) + 32) + 8 * v21 + 8);
      uint64_t v23 = *(void **)(v22 + 24);
      if (*v23 != *(void *)(*((void *)this + 19) + 8 * v21)
        || v23[*(int *)(v22 + 16) - 1] != *(void *)(*((void *)this + 22) + 8 * v21))
      {
        operations_research::SparseBitset<long long>::Set((void *)(*(void *)(*((void *)this + 26) + 8 * ((*((void *)this + 29) + (int)v5) / 0x33uLL))+ 80 * ((*((void *)this + 29) + (int)v5) % 0x33uLL)), v21);
        int v20 = *(_DWORD *)this;
      }
      ++v21;
    }
    while (v21 < v20);
  }
  absl::lts_2020_02_25::Mutex::Unlock(v3, v13, v14, v15, v16, v17, v18, v19);
  return v5;
}

void sub_23CD9F330(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::lts_2020_02_25::Mutex::Unlock(v8, a2, a3, a4, a5, a6, a7, a8);
  _Unwind_Resume(a1);
}

void operations_research::sat::SharedBoundsManager::GetChangedBounds(void *a1, absl::lts_2020_02_25::Mutex *a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = a4;
  int v8 = (int)a2;
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  unint64_t v10 = (absl::lts_2020_02_25 **)(a1 + 2);
  absl::lts_2020_02_25::Mutex::Lock((absl::lts_2020_02_25::Mutex *)(a1 + 2), a2);
  unint64_t v11 = a1[29] + v8;
  uint64_t v94 = a1;
  uint64_t v12 = a1[26];
  unint64_t v13 = v11 / 0x33;
  uint64_t v14 = *(void *)(v12 + 8 * (v11 / 0x33));
  unint64_t v15 = v11 % 0x33;
  uint64_t v16 = v14 + 80 * v15;
  uint64_t v17 = *(uint64_t **)(v16 + 56);
  uint64_t v92 = *(uint64_t **)(v16 + 64);
  if (v17 != v92)
  {
    uint64_t v90 = v8;
    unint64_t v91 = v10;
    unint64_t v93 = v6;
    while (1)
    {
      uint64_t v18 = *v17;
      int v20 = (char *)a3[1];
      unint64_t v19 = a3[2];
      if ((unint64_t)v20 < v19)
      {
        *(_DWORD *)int v20 = v18;
        uint64_t v21 = (uint64_t)(v20 + 4);
        goto LABEL_26;
      }
      uint64_t v22 = (char *)*a3;
      uint64_t v23 = (uint64_t)&v20[-*a3];
      uint64_t v24 = v23 >> 2;
      unint64_t v25 = (v23 >> 2) + 1;
      if (v25 >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v19 - (void)v22;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      unint64_t v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v25;
      if (v27) {
        break;
      }
      uint64_t v28 = 0;
      unint64_t v29 = (_DWORD *)(4 * v24);
      *(_DWORD *)(4 * v24) = v18;
      uint64_t v21 = 4 * v24 + 4;
      if (v20 != v22) {
        goto LABEL_17;
      }
LABEL_23:
      *a3 = v29;
      a3[1] = v21;
      a3[2] = &v28[4 * v27];
      if (v22) {
        operator delete(v22);
      }
      uint64_t v6 = v93;
LABEL_26:
      a3[1] = v21;
      uint64_t v39 = v94[19];
      long long v41 = (char *)v6[1];
      unint64_t v40 = v6[2];
      if ((unint64_t)v41 >= v40)
      {
        uint64_t v43 = (char *)*v6;
        uint64_t v44 = (uint64_t)&v41[-*v6];
        uint64_t v45 = v44 >> 3;
        unint64_t v46 = (v44 >> 3) + 1;
        if (v46 >> 61) {
          goto LABEL_72;
        }
        uint64_t v47 = v40 - (void)v43;
        if (v47 >> 2 > v46) {
          unint64_t v46 = v47 >> 2;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          if (v48 >> 61) {
            goto LABEL_70;
          }
          double v49 = operator new(8 * v48);
          uint64_t v50 = &v49[8 * v45];
          *uint64_t v50 = *(void *)(v39 + 8 * (int)v18);
          uint64_t v42 = (uint64_t)(v50 + 1);
          if (v41 == v43) {
            goto LABEL_45;
          }
LABEL_39:
          unint64_t v51 = v41 - 8 - v43;
          if (v51 < 0x58) {
            goto LABEL_75;
          }
          if ((unint64_t)(v41 - &v49[v44]) < 0x20) {
            goto LABEL_75;
          }
          uint64_t v52 = (v51 >> 3) + 1;
          uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v54 = &v41[-v53];
          uint64_t v50 = (void *)((char *)v50 - v53);
          uint64_t v55 = &v49[8 * v45 - 16];
          uint64_t v56 = v41 - 16;
          uint64_t v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v58 = *(_OWORD *)v56;
            *(v55 - 1) = *((_OWORD *)v56 - 1);
            *uint64_t v55 = v58;
            v55 -= 2;
            v56 -= 32;
            v57 -= 4;
          }
          while (v57);
          long long v41 = v54;
          if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_75:
            do
            {
              uint64_t v59 = *((void *)v41 - 1);
              v41 -= 8;
              *--uint64_t v50 = v59;
            }
            while (v41 != v43);
          }
        }
        else
        {
          double v49 = 0;
          uint64_t v50 = (void *)(8 * v45);
          *(void *)(8 * v45) = *(void *)(v39 + 8 * (int)v18);
          uint64_t v42 = 8 * v45 + 8;
          if (v41 != v43) {
            goto LABEL_39;
          }
        }
LABEL_45:
        uint64_t v6 = v93;
        *unint64_t v93 = v50;
        v93[1] = v42;
        v93[2] = &v49[8 * v48];
        if (v43) {
          operator delete(v43);
        }
        goto LABEL_47;
      }
      *(void *)long long v41 = *(void *)(v39 + 8 * (int)v18);
      uint64_t v42 = (uint64_t)(v41 + 8);
LABEL_47:
      v6[1] = v42;
      uint64_t v60 = v94[22];
      uint64_t v62 = (char *)a5[1];
      unint64_t v61 = a5[2];
      if ((unint64_t)v62 < v61)
      {
        *(void *)uint64_t v62 = *(void *)(v60 + 8 * (int)v18);
        a5[1] = v62 + 8;
        if (++v17 == v92) {
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v63 = (char *)*a5;
        uint64_t v64 = (uint64_t)&v62[-*a5];
        uint64_t v65 = v64 >> 3;
        unint64_t v66 = (v64 >> 3) + 1;
        if (v66 >> 61) {
LABEL_72:
        }
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        uint64_t v67 = v61 - (void)v63;
        if (v67 >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          if (v68 >> 61) {
LABEL_70:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          double v69 = operator new(8 * v68);
          int v70 = &v69[8 * v65];
          *int v70 = *(void *)(v60 + 8 * (int)v18);
          uint64_t v71 = (uint64_t)(v70 + 1);
          if (v62 == v63) {
            goto LABEL_65;
          }
LABEL_59:
          unint64_t v72 = v62 - 8 - v63;
          if (v72 < 0x58) {
            goto LABEL_76;
          }
          if ((unint64_t)(v62 - &v69[v64]) < 0x20) {
            goto LABEL_76;
          }
          uint64_t v73 = (v72 >> 3) + 1;
          uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v75 = &v62[-v74];
          int v70 = (void *)((char *)v70 - v74);
          uint64_t v76 = &v69[8 * v65 - 16];
          uint64_t v77 = v62 - 16;
          uint64_t v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v79 = *(_OWORD *)v77;
            *(v76 - 1) = *((_OWORD *)v77 - 1);
            *uint64_t v76 = v79;
            v76 -= 2;
            v77 -= 32;
            v78 -= 4;
          }
          while (v78);
          uint64_t v62 = v75;
          if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_76:
            do
            {
              uint64_t v80 = *((void *)v62 - 1);
              v62 -= 8;
              *--int v70 = v80;
            }
            while (v62 != v63);
          }
          goto LABEL_65;
        }
        double v69 = 0;
        int v70 = (void *)(8 * v65);
        *(void *)(8 * v65) = *(void *)(v60 + 8 * (int)v18);
        uint64_t v71 = 8 * v65 + 8;
        if (v62 != v63) {
          goto LABEL_59;
        }
LABEL_65:
        *a5 = v70;
        a5[1] = v71;
        a5[2] = &v69[8 * v68];
        if (v63) {
          operator delete(v63);
        }
        uint64_t v6 = v93;
        a5[1] = v71;
        if (++v17 == v92)
        {
LABEL_68:
          uint64_t v12 = v94[26];
          unint64_t v10 = v91;
          unint64_t v81 = v94[29] + v90;
          unint64_t v13 = v81 / 0x33;
          unint64_t v15 = v81 % 0x33;
          goto LABEL_69;
        }
      }
    }
    if (v27 >> 62) {
      goto LABEL_70;
    }
    uint64_t v28 = operator new(4 * v27);
    unint64_t v29 = &v28[4 * v24];
    *unint64_t v29 = v18;
    uint64_t v21 = (uint64_t)(v29 + 1);
    if (v20 == v22) {
      goto LABEL_23;
    }
LABEL_17:
    unint64_t v30 = v20 - 4 - v22;
    if (v30 < 0x2C) {
      goto LABEL_77;
    }
    if ((unint64_t)(v20 - &v28[v23]) < 0x20) {
      goto LABEL_77;
    }
    uint64_t v31 = (v30 >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v33 = &v20[-v32];
    unint64_t v29 = (_DWORD *)((char *)v29 - v32);
    unint64_t v34 = &v28[4 * v24 - 16];
    uint64_t v35 = v20 - 16;
    uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *unint64_t v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 8;
    }
    while (v36);
    int v20 = v33;
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        int v38 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--unint64_t v29 = v38;
      }
      while (v20 != v22);
    }
    goto LABEL_23;
  }
LABEL_69:
  uint64_t v82 = *(void *)(v12 + 8 * v13) + 80 * v15;
  bzero(*(void **)(v82 + 8), *(void *)(v82 + 16) - *(void *)(v82 + 8));
  *(void *)(v82 + 64) = *(void *)(v82 + 56);
  absl::lts_2020_02_25::Mutex::Unlock(v10, v83, v84, v85, v86, v87, v88, v89);
}

void sub_23CD9F890(_Unwind_Exception *a1, absl::lts_2020_02_25::Mutex *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, absl::lts_2020_02_25 **a11)
{
}

void **operations_research::sat::SharedSolutionRepository<long long>::AddInternal(void **result, uint64_t *a2)
{
  long long v37 = (int *)result;
  unint64_t v3 = result[9];
  size_t v2 = result + 9;
  uint64_t v36 = result[10];
  if (v36 != v3)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    uint64_t v6 = (const void *)a2[1];
    uint64_t v7 = *a2;
    size_t v8 = a2[2] - (void)v6;
    if ((unint64_t)((v36 - v3) / 40) <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (v36 - v3) / 40;
    }
    while (1)
    {
      uint64_t v10 = *(void *)&v3[40 * v4];
      if (v10 == v7)
      {
        unint64_t v11 = &v3[40 * v4];
        double result = (void **)*((void *)v11 + 1);
        if (*((void *)v11 + 2) - (void)result == v8)
        {
          double result = (void **)memcmp(result, v6, v8);
          if (!result) {
            return result;
          }
        }
      }
      uint64_t v12 = *(void *)&v3[40 * v5];
      if (v12 == v10)
      {
        unint64_t v13 = &v3[40 * v4];
        uint64_t v15 = *((void *)v13 + 1);
        uint64_t v14 = *((void *)v13 + 2);
        if (v15 == v14) {
          goto LABEL_6;
        }
        uint64_t v16 = *(uint64_t **)&v3[40 * v5 + 8];
        uint64_t v17 = v15 + 8;
        while (v16 != *(uint64_t **)&v3[40 * v5 + 16])
        {
          uint64_t v18 = *v16;
          uint64_t v19 = *(void *)(v17 - 8);
          if (*v16 < v19) {
            break;
          }
          ++v16;
          BOOL v20 = v19 < v18 || v17 == v14;
          v17 += 8;
          if (v20) {
            goto LABEL_6;
          }
        }
      }
      else if (v12 >= v10)
      {
        goto LABEL_6;
      }
      int v5 = v4;
LABEL_6:
      if (++v4 == v9) {
        goto LABEL_24;
      }
    }
  }
  int v5 = 0;
LABEL_24:
  if ((v36 - v3) / 40 >= (unint64_t)*v37)
  {
    unint64_t v27 = (uint64_t *)&v3[40 * v5];
    if (*a2 == *v27)
    {
      uint64_t v28 = &v3[40 * v5];
      uint64_t v30 = *((void *)v28 + 1);
      uint64_t v29 = *((void *)v28 + 2);
      if (v30 == v29) {
        return result;
      }
      uint64_t v31 = (uint64_t *)a2[1];
      uint64_t v32 = v30 + 8;
      while (v31 != (uint64_t *)a2[2])
      {
        uint64_t v33 = *v31;
        uint64_t v34 = *(void *)(v32 - 8);
        if (*v31 < v34) {
          break;
        }
        ++v31;
        BOOL v35 = v34 < v33 || v32 == v29;
        v32 += 8;
        if (v35) {
          return result;
        }
      }
    }
    else if (*a2 >= *v27)
    {
      return result;
    }
    *unint64_t v27 = *a2;
    if (v27 != a2) {
      double result = (void **)std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(&v3[40 * v5 + 8], (char *)a2[1], (char *)a2[2], (a2[2] - a2[1]) >> 3);
    }
    *(_DWORD *)&v3[40 * v5 + 32] = *((_DWORD *)a2 + 8);
  }
  else if ((unint64_t)v36 >= *((void *)v37 + 11))
  {
    double result = (void **)std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<long long>::Solution const&>(v2, a2);
    *((void *)v37 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = result;
  }
  else
  {
    uint64_t v21 = *a2;
    *((void *)v36 + 1) = 0;
    *(void *)uint64_t v36 = v21;
    *((void *)v36 + 2) = 0;
    *((void *)v36 + 3) = 0;
    uint64_t v23 = (unsigned char *)a2[1];
    uint64_t v22 = (unsigned char *)a2[2];
    int64_t v24 = v22 - v23;
    if (v22 != v23)
    {
      if (v24 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = (char *)operator new(v22 - v23);
      *((void *)v36 + 1) = v25;
      *((void *)v36 + 2) = v25;
      uint64_t v26 = &v25[8 * (v24 >> 3)];
      *((void *)v36 + 3) = v26;
      double result = (void **)memcpy(v25, v23, v24);
      *((void *)v36 + 2) = v26;
    }
    *((_DWORD *)v36 + 8) = *((_DWORD *)a2 + 8);
    *((void *)v37 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v36 + 40;
    *((void *)v37 + 1google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v36 + 40;
  }
  return result;
}

void sub_23CD9FB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(a9 + 16) = v13;
    operator delete(v13);
  }
  *(void *)(a11 + 8google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = a9;
  _Unwind_Resume(exception_object);
}

void *std::vector<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<long long>::Solution const&>(void **a1, void *a2)
{
  uint64_t v4 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v4) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[10 * v5];
  v10[1] = 0;
  unint64_t v25 = (char *)&v9[10 * v8];
  v10[2] = 0;
  unint64_t v11 = (char **)(v10 + 2);
  uint64_t v12 = (unsigned char *)a2[1];
  *uint64_t v10 = *a2;
  v10[3] = 0;
  int64_t v24 = a2;
  unint64_t v13 = (unsigned char *)a2[2];
  int64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v13 - v12);
    v10[1] = v15;
    *unint64_t v11 = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    v10[3] = v16;
    memcpy(v15, v12, v14);
    *unint64_t v11 = v16;
  }
  v9[10 * v5 + 8] = *((_DWORD *)v24 + 8);
  uint64_t v17 = v10 + 5;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v25;
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v10[v18 / 8];
      BOOL v20 = &v3[v18];
      *(v19 - 5) = *(void *)&v3[v18 - 40];
      *(v19 - 3) = 0;
      *(v19 - 2) = 0;
      *((_OWORD *)v19 - 2) = *(_OWORD *)&v3[v18 - 32];
      *(v19 - 2) = *(void *)&v3[v18 - 16];
      *((void *)v20 - 4) = 0;
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_DWORD *)v19 - 2) = *(_DWORD *)&v3[v18 - 8];
      v18 -= 40;
    }
    while (&v3[v18] != v4);
    uint64_t v21 = (char *)*a1;
    unint64_t v3 = (char *)a1[1];
    uint64_t v17 = v10 + 5;
    *a1 = &v10[v18 / 8];
    a1[1] = v10 + 5;
    a1[2] = v25;
    if (v3 != v21)
    {
      do
      {
        uint64_t v22 = (void *)*((void *)v3 - 4);
        if (v22)
        {
          *((void *)v3 - 3) = v22;
          operator delete(v22);
        }
        v3 -= 40;
      }
      while (v3 != v21);
      unint64_t v3 = v21;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_23CD9FDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v7 = *v4;
  if (*v4)
  {
    *unint64_t v5 = v7;
    operator delete(v7);
  }
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<double>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = v12;
    double result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    uint64_t v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      double result = memmove(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    double result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, 8 * v17);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    std::vector<int> __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void *std::vector<operations_research::sat::SharedSolutionRepository<double>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<double>::Solution>>::__push_back_slow_path<operations_research::sat::SharedSolutionRepository<double>::Solution const&>(void **a1, void *a2)
{
  uint64_t v4 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v4) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[10 * v5];
  v10[1] = 0;
  unint64_t v25 = (char *)&v9[10 * v8];
  v10[2] = 0;
  BOOL v11 = (char **)(v10 + 2);
  unint64_t v12 = (unsigned char *)a2[1];
  *uint64_t v10 = *a2;
  v10[3] = 0;
  int64_t v24 = a2;
  uint64_t v13 = (unsigned char *)a2[2];
  int64_t v14 = v13 - v12;
  if (v13 != v12)
  {
    if (v14 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v13 - v12);
    v10[1] = v15;
    *BOOL v11 = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    v10[3] = v16;
    memcpy(v15, v12, v14);
    *BOOL v11 = v16;
  }
  v9[10 * v5 + 8] = *((_DWORD *)v24 + 8);
  unint64_t v17 = v10 + 5;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v25;
  }
  else
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v10[v18 / 8];
      BOOL v20 = &v3[v18];
      *(v19 - 5) = *(void *)&v3[v18 - 40];
      *(v19 - 3) = 0;
      *(v19 - 2) = 0;
      *((_OWORD *)v19 - 2) = *(_OWORD *)&v3[v18 - 32];
      *(v19 - 2) = *(void *)&v3[v18 - 16];
      *((void *)v20 - 4) = 0;
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_DWORD *)v19 - 2) = *(_DWORD *)&v3[v18 - 8];
      v18 -= 40;
    }
    while (&v3[v18] != v4);
    uint64_t v21 = (char *)*a1;
    unint64_t v3 = (char *)a1[1];
    unint64_t v17 = v10 + 5;
    *a1 = &v10[v18 / 8];
    a1[1] = v10 + 5;
    a1[2] = v25;
    if (v3 != v21)
    {
      do
      {
        uint64_t v22 = (void *)*((void *)v3 - 4);
        if (v22)
        {
          *((void *)v3 - 3) = v22;
          operator delete(v22);
        }
        v3 -= 40;
      }
      while (v3 != v21);
      unint64_t v3 = v21;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_23CDA0174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v7 = *v4;
  if (*v4)
  {
    *unint64_t v5 = v7;
    operator delete(v7);
  }
  std::__split_buffer<operations_research::sat::SharedSolutionRepository<long long>::Solution,std::allocator<operations_research::sat::SharedSolutionRepository<long long>::Solution> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[24 * v5];
  BOOL v11 = &v9[24 * v8];
  *((void *)v10 + 1) = 0;
  unint64_t v12 = (char **)(v10 + 8);
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = 0;
  uint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)uint64_t v10 = v15;
    *unint64_t v12 = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *((void *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *unint64_t v12 = v16;
  }
  unint64_t v17 = v10 + 24;
  unint64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      unint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - 1) = *((void *)v3 + 2);
      *(void *)unint64_t v3 = 0;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    BOOL v20 = *a1;
    unint64_t v3 = a1[1];
    unint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      uint64_t v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        unint64_t v3 = v21;
      }
      while (v21 != v20);
      unint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_23CDA0384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *std::vector<std::pair<int,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>>::__emplace_back_slow_path<int const&,std::function<void ()(operations_research::sat::CpSolverResponse const&)>>(void **a1, _DWORD *a2, void *a3)
{
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)v5) >> 3) > v7) {
    unint64_t v7 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)v5) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)v5) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v11 = operator new(40 * v10);
  }
  else
  {
    BOOL v11 = 0;
  }
  unint64_t v12 = &v11[5 * v6];
  *unint64_t v12 = *a2;
  uint64_t v13 = v12 + 2;
  int64_t v14 = (void *)a3[3];
  if (!v14)
  {
    v11[5 * v6 + 4] = 0;
    if (v4 == (unsigned char *)v5) {
      goto LABEL_26;
    }
LABEL_16:
    uint64_t v16 = 0;
    unint64_t v17 = v4;
    while (1)
    {
      long long v19 = &v12[v16];
      BOOL v20 = &v4[v16 * 4];
      v12[v16 - 10] = *(_DWORD *)&v4[v16 * 4 - 40];
      uint64_t v21 = *(unsigned char **)&v4[v16 * 4 - 8];
      if (v21)
      {
        if (v20 - 32 == v21)
        {
          *((void *)v19 - 1) = v19 - 8;
          (*(void (**)(void))(**((void **)v20 - 1) + 24))(*((void *)v20 - 1));
          goto LABEL_19;
        }
        unint64_t v18 = v17 - 8;
        *((void *)v19 - 1) = v21;
      }
      else
      {
        unint64_t v18 = v19 - 2;
      }
      *unint64_t v18 = 0;
LABEL_19:
      v17 -= 40;
      v16 -= 10;
      if (&v4[v16 * 4] == (unsigned char *)v5)
      {
        uint64_t v22 = (char *)&v12[v16];
        goto LABEL_27;
      }
    }
  }
  uint64_t v15 = &v11[5 * v6 + 4];
  if (v14 != a3)
  {
    *uint64_t v15 = v14;
    a3[3] = 0;
    if (v4 == (unsigned char *)v5) {
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  *uint64_t v15 = v13;
  (*(void (**)(void *))(*a3 + 24))(a3);
  unint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (v4 != *a1) {
    goto LABEL_16;
  }
LABEL_26:
  uint64_t v22 = (char *)&v11[5 * v6];
LABEL_27:
  int64_t v24 = (char *)*a1;
  uint64_t v23 = (char *)a1[1];
  *a1 = v22;
  a1[1] = v12 + 10;
  a1[2] = &v11[5 * v10];
  if (v23 != v24)
  {
    unint64_t v25 = v23 - 32;
    uint64_t v26 = v23 - 32;
    do
    {
      uint64_t v28 = (char *)*((void *)v26 + 3);
      if (v26 == v28)
      {
        (*(void (**)(char *))(*(void *)v26 + 32))(v26);
      }
      else if (v28)
      {
        (*(void (**)(char *, _DWORD *))(*(void *)v28 + 40))(v28, v13);
      }
      unint64_t v27 = v26 - 8;
      v26 -= 40;
      v25 -= 40;
    }
    while (v27 != v24);
  }
  if (v24) {
    operator delete(v24);
  }
  return v12 + 10;
}

void *operations_research::sat::Model::Delete<operations_research::sat::DebugSolution>::~Delete(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_26F0C4790;
  a1[1] = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x23ECF2BC0](v2, 0x20C40960023A9);
  }
  return a1;
}

void operations_research::sat::Model::Delete<operations_research::sat::DebugSolution>::~Delete(void *a1)
{
  uint64_t v1 = a1[1];
  *a1 = &unk_26F0C4790;
  a1[1] = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x23ECF2BC0](v1, 0x20C40960023A9);
  }

  JUMPOUT(0x23ECF2BC0);
}

void std::deque<operations_research::SparseBitset<long long>>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 51 * ((v5 - v4) >> 3) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  unint64_t v9 = v6 - v8;
  BOOL v10 = a2 > v9;
  unint64_t v11 = a2 - v9;
  if (v10)
  {
    std::deque<operations_research::SparseBitset<long long>>::__add_back_capacity((uint64_t)a1, v11);
    uint64_t v7 = a1[5];
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v8 = a1[4] + v7;
  }
  unint64_t v12 = (void *)(v4 + 8 * (v8 / 0x33));
  if (v5 == v4)
  {
    unint64_t v13 = 0;
    if (!a2) {
      return;
    }
  }
  else
  {
    unint64_t v13 = *v12 + 80 * (v8 % 0x33);
    if (!a2) {
      return;
    }
  }
  uint64_t v14 = a2 - 0x3333333333333333 * ((uint64_t)(v13 - *v12) >> 4);
  if (v14 < 1)
  {
    unint64_t v17 = 50 - v14;
    uint64_t v15 = &v12[-(v17 / 0x33)];
    unint64_t v16 = *v15 + 80 * (51 * (v17 / 0x33) - v17) + 4000;
    if (v13 != v16)
    {
      do
      {
LABEL_15:
        uint64_t v18 = v16;
        if (v12 != v15) {
          uint64_t v18 = *v12 + 4080;
        }
        if (v13 == v18)
        {
          a1[5] = v7;
          if (v12 == v15) {
            return;
          }
        }
        else
        {
          unint64_t v19 = v13;
          do
          {
            *(_OWORD *)unint64_t v19 = 0uLL;
            *(_OWORD *)(v19 + 16) = 0uLL;
            *(void *)(v19 + 32) = v19;
            *(void *)(v19 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
            *(void *)(v19 + 48) = 0;
            *(void *)(v19 + 56) = 0;
            *(_DWORD *)(v19 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = -1;
            *(void *)(v19 + 64) = 0;
            *(void *)(v19 + 72) = 0;
            v19 += 80;
          }
          while (v19 != v18);
          uint64_t v7 = a1[5] - 0x3333333333333333 * ((uint64_t)(v18 - v13) >> 4);
          a1[5] = v7;
          if (v12 == v15) {
            return;
          }
        }
        unint64_t v20 = v12[1];
        ++v12;
        unint64_t v13 = v20;
      }
      while (v20 != v16);
    }
  }
  else
  {
    uint64_t v15 = &v12[v14 / 0x33uLL];
    unint64_t v16 = *v15 + 80 * (v14 % 0x33uLL);
    if (v13 != v16) {
      goto LABEL_15;
    }
  }
}

void std::deque<operations_research::SparseBitset<long long>>::__erase_to_end(void *a1, void *a2, void *a3)
{
  unint64_t v3 = a3;
  unint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  unint64_t v9 = (void *)(v8 + 8 * ((v6 + v5) / 0x33));
  if (v7 == v8)
  {
    unint64_t v10 = 0;
    if (!a3) {
      return;
    }
  }
  else
  {
    unint64_t v10 = *v9 + 80 * ((v6 + v5) % 0x33);
    if ((void *)v10 == a3) {
      return;
    }
  }
  uint64_t v11 = 51 * (v9 - a2) - 0x3333333333333333 * ((uint64_t)(v10 - *v9) >> 4);
  uint64_t v12 = ((uint64_t)a3 - *a2) >> 4;
  uint64_t v13 = v11 + 0x3333333333333333 * v12;
  if (v13 < 1) {
    return;
  }
  uint64_t v14 = (void *)(v8 + 8 * (v6 / 0x33));
  if (v7 == v8)
  {
    unint64_t v15 = 0;
    if (!a3) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v15 = *v14 + 80 * (v6 % 0x33);
    if (a3 == (void *)v15)
    {
LABEL_15:
      if (v3 == (void *)v10) {
        goto LABEL_27;
      }
      do
      {
LABEL_20:
        uint64_t v21 = (void *)v3[7];
        if (v21)
        {
          v3[8] = v21;
          operator delete(v21);
        }
        uint64_t v22 = (void *)v3[1];
        if (v22)
        {
          v3[2] = v22;
          operator delete(v22);
        }
        v3 += 10;
        if ((void *)((char *)v3 - *v14) == (void *)4080)
        {
          uint64_t v23 = (void *)v14[1];
          ++v14;
          unint64_t v3 = v23;
        }
      }
      while (v3 != (void *)v10);
      uint64_t v8 = a1[1];
      uint64_t v7 = a1[2];
      unint64_t v6 = a1[4];
      uint64_t v5 = a1[5];
      goto LABEL_27;
    }
  }
  uint64_t v16 = 51 * (a2 - v14) - 0x3333333333333333 * v12;
  uint64_t v17 = (uint64_t)(v15 - *v14) >> 4;
  uint64_t v18 = v16 + 0x3333333333333333 * v17;
  if (!v18)
  {
    unint64_t v3 = (void *)v15;
    goto LABEL_15;
  }
  uint64_t v19 = v18 - 0x3333333333333333 * v17;
  if (v19 >= 1)
  {
    v14 += v19 / 0x33uLL;
    unint64_t v3 = (void *)(*v14 + 80 * (v19 % 0x33uLL));
    if (v3 == (void *)v10) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  unint64_t v20 = 50 - v19;
  v14 -= v20 / 0x33;
  unint64_t v3 = (void *)(*v14 + 80 * (51 * (v20 / 0x33) - v20) + 4000);
  if (v3 != (void *)v10) {
    goto LABEL_20;
  }
LABEL_27:
  if (v7 == v8) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = 51 * ((v7 - v8) >> 3) - 1;
  }
  uint64_t v25 = v5 - v13;
  a1[5] = v25;
  if (v24 - (v25 + v6) >= 0x66)
  {
    do
    {
      operator delete(*(void **)(v7 - 8));
      uint64_t v7 = a1[2] - 8;
      BOOL v26 = v7 == a1[1];
      uint64_t v27 = 51 * ((v7 - a1[1]) >> 3) - 1;
      a1[2] = v7;
      if (v26) {
        uint64_t v27 = 0;
      }
    }
    while ((unint64_t)(v27 - (a1[5] + a1[4])) > 0x65);
  }
}

void std::deque<operations_research::SparseBitset<long long>>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x33) {
    unint64_t v6 = v5 / 0x33 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x33;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 / 0x33) {
    unint64_t v8 = v7 / 0x33;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x33)
  {
    *(void *)(a1 + 32) = v7 - 51 * v8;
    if (!v8) {
      return;
    }
    while (1)
    {
      unint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          uint64_t v27 = (char *)operator new(8 * v24);
          uint64_t v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          unint64_t v3 = v28;
          if (!v29)
          {
            unint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              uint64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            uint64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v32 = &v28[v34];
            v16 += v34;
            BOOL v35 = (long long *)(v15 + 3);
            uint64_t v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)uint64_t v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)uint64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            unint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          unint64_t v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        unint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)unint64_t v3 = v17;
      unint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        uint64_t v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_back((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v145 = operator new(0xFF0uLL);
        std::__split_buffer<std::vector<operations_research::sat::Literal> *,std::allocator<std::vector<operations_research::sat::Literal> *>>::push_front((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 50;
        }
        else {
          uint64_t v116 = 51;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - 51 * v6;
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= 51 * v8;
      if (!v8) {
        return;
      }
    }
    std::vector<int>::pointer v118 = *(char **)(a1 + 16);
    while (1)
    {
      unint64_t v120 = *(void **)(a1 + 8);
      uint64_t v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        uint64_t v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          int v132 = (char *)operator new(8 * v129);
          uint64_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          std::vector<int>::pointer v118 = v133;
          if (!v29)
          {
            std::vector<int>::pointer v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              int v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            int v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            int v136 = &v133[v138];
            v121 += v138;
            uint64_t v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)int v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            std::vector<int>::pointer v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        uint64_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          std::vector<int>::pointer v118 = *(char **)(a1 + 8);
        }
        unint64_t v119 = &v118[-8 * v126];
        std::vector<int>::pointer v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)std::vector<int>::pointer v118 = v122;
      std::vector<int>::pointer v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      std::__throw_bad_array_new_length[abi:ne180100]();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = -51 * v8;
  unint64_t v40 = &v13[8 * (v11 - v8)];
  long long v41 = &v13[8 * v12];
  uint64_t v42 = v40;
  uint64_t v43 = v13;
  do
  {
    uint64_t v44 = operator new(0xFF0uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      double v49 = &v40[-8 * (v47 >> 1)];
      uint64_t v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        uint64_t v50 = v40;
      }
      uint64_t v42 = &v49[v41 - v40];
      unint64_t v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v52 = (char *)operator new(8 * v51);
    uint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    uint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      uint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        uint64_t v60 = &v40[v63];
        uint64_t v64 = (long long *)(v40 + 16);
        uint64_t v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)uint64_t v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        uint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    long long v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    unint64_t v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)uint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  unint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v79 = (char *)operator new(8 * v78);
          uint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          double v69 = &v79[8 * (v78 >> 2)];
          uint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            uint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              uint64_t v85 = &v79[8 * (v78 >> 2)];
              uint64_t v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v85 = &v69[v89];
            uint64_t v86 = &v40[v89];
            uint64_t v90 = (long long *)(v40 + 16);
            unint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)unint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)uint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          long long v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        unint64_t v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        uint64_t v76 = &v40[-8 * (v74 >> 1)];
        uint64_t v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          uint64_t v77 = v40;
        }
        uint64_t v42 = &v76[v41 - v40];
        double v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        double v69 = v40;
      }
LABEL_81:
      *(void *)uint64_t v42 = *v68;
      v42 += 8;
      unint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      unint64_t v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  double v69 = v40;
LABEL_75:
  int v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v101 = (char *)operator new(8 * v100);
          unint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          double v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          uint64_t v42 = v69;
          if (!v29)
          {
            uint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            long long v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            long long v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            long long v105 = &v69[v109];
            uint64_t v106 = &v43[v109];
            int v110 = (long long *)(v43 + 16);
            uint64_t v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)uint64_t v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)long long v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          long long v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          unint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          double v69 = &v97[8 * (v96 >> 1)];
          std::string::size_type v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            std::string::size_type v99 = v42;
          }
          uint64_t v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  uint64_t v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) += v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_23CDA1540(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23CDA158C()
{
}

void operations_research::sat::AddTableConstraint(uint64_t a1, absl::lts_2020_02_25::numbers_internal *a2, char *a3, uint64_t a4)
{
  uint64_t v688 = *MEMORY[0x263EF8340];
  uint64_t v613 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  unint64_t v7 = *(void **)a3;
  uint64_t v6 = *((void *)a3 + 1);
  v615 = a2;
  unint64_t v603 = (int)a2;
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v647, (int)a2);
  uint64_t v8 = (v6 - (uint64_t)v7) >> 3;
  v620 = a3;
  v602 = (absl::lts_2020_02_25::numbers_internal *)(0xAAAAAAAAAAAAAAABLL * v8);
  if (-1431655765 * (int)v8 < 1)
  {
    int v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v634 = (-1431655765 * v8);
    do
    {
      if ((int)v615 < 1)
      {
LABEL_17:
        uint64_t v24 = *(void *)a3 + 24 * v9;
        int v638 = v10;
        uint64_t v25 = *(void *)a3 + 24 * v10;
        long long v26 = *(_OWORD *)v24;
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
        *(_OWORD *)uint64_t v25 = v26;
        uint64_t v27 = *(void *)(v24 + 16);
        *(void *)(v24 + 16) = *(void *)(v25 + 16);
        *(void *)(v25 + 16) = v27;
        if ((int)v615 >= 1)
        {
          uint64_t v28 = 0;
          do
          {
            uint64_t v32 = 0;
            uint64_t v34 = (char *)v647 + 48 * v28;
            uint64_t v35 = *(void *)(*(void *)v620 + 24 * v638);
            uint64_t v36 = *(void *)(v35 + 8 * v28);
            unint64_t v37 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v36)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v36));
            unint64_t v33 = (v37 >> 7) ^ (*v34 >> 12);
            uint64_t v38 = v34[3];
            while (1)
            {
              unint64_t v29 = v33 & v38;
              uint64_t v30 = *(void *)(*v34 + v29);
              unint64_t v31 = ((v30 ^ (0x101010101010101 * (v37 & 0x7F))) - 0x101010101010101) & ~(v30 ^ (0x101010101010101
                                                                                                  * (v37 & 0x7F))) & 0x8080808080808080;
              if (v31) {
                break;
              }
LABEL_22:
              if ((v30 & (~v30 << 6) & 0x8080808080808080) != 0)
              {
                *(void *)(v34[1]
                          + 8
                          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert((uint64_t *)v647 + 6 * v28, v37)) = *(void *)(v35 + 8 * v28);
                goto LABEL_25;
              }
              v32 += 8;
              unint64_t v33 = v32 + v29;
            }
            while (*(void *)(v34[1] + 8 * ((v29 + (__clz(__rbit64(v31)) >> 3)) & v38)) != v36)
            {
              v31 &= v31 - 1;
              if (!v31) {
                goto LABEL_22;
              }
            }
LABEL_25:
            ++v28;
          }
          while (v28 != v615);
        }
        int v10 = v638 + 1;
        a3 = v620;
      }
      else
      {
        uint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = *(void *)(*(void *)(*(void *)a3 + 24 * v9) + 8 * v11);
          uint64_t v14 = (char *)v647 + 48 * v11;
          unint64_t v15 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v13)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v13));
          unint64_t v16 = (v15 >> 7) ^ (*v14 >> 12);
          uint64_t v17 = v14[3];
          uint64_t v18 = 0x101010101010101 * (v15 & 0x7F);
          while (1)
          {
            uint64_t v19 = v16 & v17;
            uint64_t v20 = *(void *)(*v14 + v19);
            unint64_t v21 = ((v20 ^ v18) - 0x101010101010101) & ~(v20 ^ v18) & 0x8080808080808080;
            if (v21) {
              break;
            }
LABEL_12:
            if ((v20 & (~v20 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_15;
            }
            v12 += 8;
            unint64_t v16 = v12 + v19;
          }
          while (1)
          {
            unint64_t v22 = (v19 + (__clz(__rbit64(v21)) >> 3)) & v17;
            if (*(void *)(v14[1] + 8 * v22) == v13) {
              break;
            }
            v21 &= v21 - 1;
            if (!v21) {
              goto LABEL_12;
            }
          }
          if (v22 == v17) {
            break;
          }
LABEL_7:
          if (++v11 == v615) {
            goto LABEL_17;
          }
        }
LABEL_15:
        int64_t v23 = (operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain(v613, *(_DWORD *)(a1 + 4 * v11));
        if (operations_research::Domain::Contains(v23, v13)) {
          goto LABEL_7;
        }
      }
      ++v9;
    }
    while (v9 != v634);
  }
  uint64_t v39 = *((void *)a3 + 1);
  unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v39 - *(void *)a3) >> 3);
  if (v10 > v40)
  {
    std::vector<std::vector<gtl::IntType<operations_research::glop::ColIndex_tag_,int>>>::__append((uint64_t)a3, v10 - v40);
    uint64_t v42 = *(void **)a3;
    uint64_t v41 = *((void *)a3 + 1);
    unint64_t v43 = v41 - *(void *)a3;
    if (v41 != *(void *)a3) {
      goto LABEL_30;
    }
LABEL_363:
    *(unsigned char *)(operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4) + 496) = 1;
    goto LABEL_768;
  }
  if (v10 >= v40)
  {
    uint64_t v41 = *((void *)a3 + 1);
    uint64_t v42 = *(void **)a3;
    unint64_t v43 = v39 - *(void *)a3;
    if (!v43) {
      goto LABEL_363;
    }
  }
  else
  {
    uint64_t v41 = *(void *)a3 + 24 * v10;
    if (v39 != v41)
    {
      uint64_t v64 = *((void *)a3 + 1);
      do
      {
        uint64_t v66 = *(void **)(v64 - 24);
        v64 -= 24;
        uint64_t v65 = v66;
        if (v66)
        {
          *(void *)(v39 - 16) = v65;
          operator delete(v65);
        }
        uint64_t v39 = v64;
      }
      while (v64 != v41);
    }
    *((void *)a3 + 1) = v41;
    uint64_t v42 = *(void **)a3;
    unint64_t v43 = v41 - *(void *)a3;
    if (v41 == *(void *)a3) {
      goto LABEL_363;
    }
  }
LABEL_30:
  if (v615 == 2)
  {
    uint64_t v44 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
    std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::vector(&__s2, v603);
    for (uint64_t i = 0; i != 2; ++i)
    {
      uint64_t v46 = (char **)((char *)v647 + 48 * i);
      uint64_t v47 = (uint64_t *)v46[1];
      uint64_t v48 = *v46;
      if (**v46 <= -2)
      {
        do
        {
          unint64_t v49 = (__clz(__rbit64(((*v48 >> 7) & ~*v48 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          uint64_t v48 = (void *)((char *)v48 + v49);
          v47 += v49;
        }
        while (*(char *)v48 < -1);
      }
      std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::const_iterator,0>(&v674, v48, v47, &v46[3][(void)*v46]);
      int v50 = *(_DWORD *)(a1 + 4 * i);
      v659 = 0;
      v660 = 0;
      v661 = 0;
      unint64_t v51 = v674;
      int64_t v52 = v675 - (unsigned char *)v674;
      if (v675 != v674)
      {
        if (v52 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        v659 = operator new(v675 - (unsigned char *)v674);
        v660 = (void **)v659;
        uint64_t v53 = (char *)v659 + 8 * (v52 >> 3);
        v661 = v53;
        memcpy(v659, v51, v52);
        v660 = (void **)v53;
      }
      operations_research::Domain::FromValues((int64_t **)&v659, (unint64_t *)&v662);
      operations_research::sat::IntegerTrail::UpdateInitialDomain(v44, v50, (operations_research::Domain *)&v662);
      if (v662) {
        operator delete(__p);
      }
      if (v659)
      {
        v660 = (void **)v659;
        operator delete(v659);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v648 - (unsigned char *)v647) >> 4) >= 2)
      {
        int v54 = *(_DWORD *)(a1 + 4 * i);
        *(void *)&long long v680 = &unk_26F0BD370;
        DWORD2(v68google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v54;
        v682 = &v680;
        uint64_t v55 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
        if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v55, SDWORD2(v680))) {
          operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v55, SDWORD2(v680));
        }
        operations_research::sat::IntegerEncoder::FullDomainEncoding(v55, SDWORD2(v680), (char **)&v656);
        if (v656)
        {
          uint64_t v657 = (uint64_t)v656;
          operator delete(v656);
        }
        if (v682 == &v680)
        {
          (*(void (**)(long long *))(v680 + 32))(&v680);
        }
        else if (v682)
        {
          (*(void (**)(void))(*(void *)v682 + 40))();
        }
        int64_t v56 = (char *)__s2 + 48 * i;
        uint64_t v57 = *(void *)&v686[32];
        uint64_t v58 = v687;
        *(void *)&v686[32] = 0;
        uint64_t v687 = 0;
        long long v59 = *(_OWORD *)v686;
        *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(void *)&v686[8] = 0;
        uint64_t v60 = *(void **)v56;
        *(_OWORD *)int64_t v56 = v59;
        long long v61 = *(_OWORD *)&v686[16];
        *(void *)&v686[16] = 0;
        *(void *)&v686[24] = 0;
        uint64_t v62 = *((void *)v56 + 3);
        uint64_t v63 = (void *)*((void *)v56 + 4);
        *((_OWORD *)v56 + 1) = v61;
        *((void *)v56 + 4) = v57;
        *((void *)v56 + 5) = v58;
        if (v62) {
          operator delete(v60);
        }
        if (v63) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v63);
        }
        if (*(void *)&v686[24])
        {
          operator delete(*(void **)v686);
          *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          uint64_t v687 = 0;
          memset(&v686[8], 0, 24);
        }
        if (*(void *)&v686[32]) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(*(void **)&v686[32]);
        }
      }
      if (v674)
      {
        v675 = (char *)v674;
        operator delete(v674);
      }
    }
    if (*((void *)v647 + 2) != 1 && *((void *)v647 + 8) != 1)
    {
      v676[0] = 0;
      v675 = 0;
      v674 = &v675;
      *(_OWORD *)&v655.__r_.__value_.__r.__words[1] = 0uLL;
      v655.__r_.__value_.__r.__words[0] = (std::string::size_type)&v655.__r_.__value_.__l.__size_;
      uint64_t v191 = *(uint64_t ***)v620;
      int v190 = (uint64_t **)*((void *)v620 + 1);
      if (*(uint64_t ***)v620 != v190)
      {
        v631 = (uint64_t **)*((void *)v620 + 1);
        while (1)
        {
          uint64_t v196 = 0;
          uint64_t v262 = **v191;
          unint64_t v261 = (void *)(*v191)[1];
          *(void *)v686 = v262;
          v650 = v261;
          unint64_t v263 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v262)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + v262));
          unint64_t v197 = (*(void *)__s2 >> 12) ^ (v263 >> 7);
          uint64_t v264 = *((void *)__s2 + 3);
          uint64_t v265 = 0x101010101010101 * (v263 & 0x7F);
          while (1)
          {
            uint64_t v192 = v197 & v264;
            uint64_t v193 = *(void *)(*(void *)__s2 + v192);
            unint64_t v194 = ((v193 ^ v265) - 0x101010101010101) & ~(v193 ^ v265) & 0x8080808080808080;
            if (v194) {
              break;
            }
LABEL_252:
            if ((v193 & (~v193 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_324;
            }
            v196 += 8;
            unint64_t v197 = v196 + v192;
          }
          while (1)
          {
            unint64_t v195 = (v192 + (__clz(__rbit64(v194)) >> 3)) & v264;
            if (*(void *)(*((void *)__s2 + 1) + 12 * v195) == v262) {
              break;
            }
            v194 &= v194 - 1;
            if (!v194) {
              goto LABEL_252;
            }
          }
          if (v195 == v264) {
            goto LABEL_324;
          }
          uint64_t v198 = 0;
          unint64_t v199 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v261)
                 * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                    * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                     + (void)v261));
          unint64_t v200 = *((void *)__s2 + 6);
          unint64_t v201 = (v200 >> 12) ^ (v199 >> 7);
          uint64_t v202 = *((void *)__s2 + 9);
          uint64_t v203 = 0x101010101010101 * (v199 & 0x7F);
          while (1)
          {
            uint64_t v204 = v201 & v202;
            uint64_t v205 = *(void *)(v200 + v204);
            unint64_t v206 = ((v205 ^ v203) - 0x101010101010101) & ~(v205 ^ v203) & 0x8080808080808080;
            if (v206) {
              break;
            }
LABEL_259:
            if ((v205 & (~v205 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_324;
            }
            v198 += 8;
            unint64_t v201 = v198 + v204;
          }
          while (1)
          {
            unint64_t v207 = (v204 + (__clz(__rbit64(v206)) >> 3)) & v202;
            if (*(void **)(*((void *)__s2 + 7) + 12 * v207) == v261) {
              break;
            }
            v206 &= v206 - 1;
            if (!v206) {
              goto LABEL_259;
            }
          }
          if (v207 == v202) {
            goto LABEL_324;
          }
          int v208 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>((uint64_t *)__s2, (uint64_t *)v686);
          int v209 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>((uint64_t *)__s2 + 6, (uint64_t *)&v650);
          uint64_t v210 = v675;
          int v211 = &v675;
          int v212 = &v675;
          if (v675)
          {
            while (1)
            {
              while (1)
              {
                int v212 = (char **)v210;
                int v213 = *((_DWORD *)v210 + 8);
                if (v208 >= v213) {
                  break;
                }
                uint64_t v210 = *v212;
                int v211 = v212;
                if (!*v212) {
                  goto LABEL_269;
                }
              }
              if (v213 >= v208) {
                break;
              }
              uint64_t v210 = v212[1];
              if (!v210)
              {
                int v211 = v212 + 1;
                goto LABEL_269;
              }
            }
            unint64_t v214 = v212;
            int v217 = v212[6];
            unint64_t v216 = v212[7];
            if (v217 >= v216)
            {
LABEL_274:
              char v219 = (char *)v214[5];
              uint64_t v220 = (v217 - v219) >> 2;
              unint64_t v221 = v220 + 1;
              if ((unint64_t)(v220 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v222 = v216 - v219;
              if (v222 >> 1 > v221) {
                unint64_t v221 = v222 >> 1;
              }
              if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v223 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v223 = v221;
              }
              if (v223)
              {
                if (v223 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                unint64_t v224 = v223;
                char v225 = operator new(4 * v223);
                unint64_t v223 = v224;
                char v226 = &v225[4 * v220];
                _DWORD *v226 = v209;
                uint64_t v218 = (uint64_t)(v226 + 1);
                if (v217 == v219) {
                  goto LABEL_291;
                }
LABEL_285:
                unint64_t v227 = v217 - 4 - v219;
                if (v227 < 0x2C) {
                  goto LABEL_808;
                }
                if ((unint64_t)(v219 - v225) < 0x20) {
                  goto LABEL_808;
                }
                uint64_t v228 = (v227 >> 2) + 1;
                uint64_t v229 = 4 * (v228 & 0x7FFFFFFFFFFFFFF8);
                unint64_t v230 = &v217[-v229];
                char v226 = (_DWORD *)((char *)v226 - v229);
                char v231 = &v225[4 * v220 - 16];
                char v232 = v217 - 16;
                uint64_t v233 = v228 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v234 = *(_OWORD *)v232;
                  *(v231 - 1) = *((_OWORD *)v232 - 1);
                  *char v231 = v234;
                  v231 -= 2;
                  v232 -= 32;
                  v233 -= 8;
                }
                while (v233);
                int v217 = v230;
                if (v228 != (v228 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_808:
                  do
                  {
                    int v235 = *((_DWORD *)v217 - 1);
                    v217 -= 4;
                    *--char v226 = v235;
                  }
                  while (v217 != v219);
                }
              }
              else
              {
                char v225 = 0;
                char v226 = (_DWORD *)(4 * v220);
                *(_DWORD *)(4 * v22google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v209;
                uint64_t v218 = 4 * v220 + 4;
                if (v217 != v219) {
                  goto LABEL_285;
                }
              }
LABEL_291:
              v214[5] = v226;
              v214[6] = v218;
              v214[7] = &v225[4 * v223];
              if (v219) {
                operator delete(v219);
              }
              goto LABEL_293;
            }
          }
          else
          {
LABEL_269:
            unint64_t v214 = operator new(0x40uLL);
            *((_DWORD *)v214 + 8) = v208;
            v214[6] = 0;
            v214[7] = 0;
            v214[5] = 0;
            *unint64_t v214 = 0;
            v214[1] = 0;
            v214[2] = v212;
            *int v211 = (char *)v214;
            int v215 = v214;
            if (*(void *)v674)
            {
              v674 = *(void **)v674;
              int v215 = (uint64_t *)*v211;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v675, v215);
            ++v676[0];
            int v217 = (char *)v214[6];
            unint64_t v216 = (char *)v214[7];
            if (v217 >= v216) {
              goto LABEL_274;
            }
          }
          *(_DWORD *)int v217 = v209;
          uint64_t v218 = (uint64_t)(v217 + 4);
LABEL_293:
          v214[6] = v218;
          std::string::size_type size = v655.__r_.__value_.__l.__size_;
          p_std::string::size_type size = &v655.__r_.__value_.__l.__size_;
LABEL_295:
          unint64_t v238 = (uint64_t **)p_size;
          if (size)
          {
            while (1)
            {
              p_std::string::size_type size = (std::string::size_type *)size;
              int v239 = *(_DWORD *)(size + 32);
              if (v209 < v239)
              {
                std::string::size_type size = *p_size;
                goto LABEL_295;
              }
              if (v239 >= v209) {
                break;
              }
              std::string::size_type size = p_size[1];
              if (!size)
              {
                unint64_t v238 = (uint64_t **)(p_size + 1);
                goto LABEL_300;
              }
            }
            int v240 = p_size;
          }
          else
          {
LABEL_300:
            int v240 = operator new(0x40uLL);
            v240[8] = v209;
            *((void *)v240 + 6) = 0;
            *((void *)v240 + 7) = 0;
            *((void *)v240 + 5) = 0;
            *(void *)int v240 = 0;
            *((void *)v240 + 1) = 0;
            *((void *)v240 + 2) = p_size;
            char *v238 = (uint64_t *)v240;
            int v241 = (uint64_t *)v240;
            if (*(void *)v655.__r_.__value_.__l.__data_)
            {
              v655.__r_.__value_.__r.__words[0] = *(void *)v655.__r_.__value_.__l.__data_;
              int v241 = *v238;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v655.__r_.__value_.__l.__size_, v241);
            ++v655.__r_.__value_.__r.__words[2];
          }
          unint64_t v243 = (char *)*((void *)v240 + 6);
          unint64_t v242 = *((void *)v240 + 7);
          if ((unint64_t)v243 >= v242)
          {
            int v245 = (char *)*((void *)v240 + 5);
            uint64_t v246 = (v243 - v245) >> 2;
            unint64_t v247 = v246 + 1;
            if ((unint64_t)(v246 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v248 = v242 - (void)v245;
            if (v248 >> 1 > v247) {
              unint64_t v247 = v248 >> 1;
            }
            if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v249 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v249 = v247;
            }
            if (v249)
            {
              if (v249 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v250 = operator new(4 * v249);
              unint64_t v251 = &v250[4 * v246];
              *unint64_t v251 = v208;
              uint64_t v244 = (uint64_t)(v251 + 1);
              if (v243 != v245) {
                goto LABEL_315;
              }
LABEL_327:
              *((void *)v240 + 5) = v251;
              *((void *)v240 + 6) = v244;
              *((void *)v240 + 7) = &v250[4 * v249];
              if (!v245) {
                goto LABEL_323;
              }
            }
            else
            {
              unint64_t v250 = 0;
              unint64_t v251 = (_DWORD *)(4 * v246);
              *(_DWORD *)(4 * v246) = v208;
              uint64_t v244 = 4 * v246 + 4;
              if (v243 == v245) {
                goto LABEL_327;
              }
LABEL_315:
              unint64_t v252 = v243 - 4 - v245;
              if (v252 < 0x2C) {
                goto LABEL_809;
              }
              if ((unint64_t)(v245 - v250) < 0x20) {
                goto LABEL_809;
              }
              uint64_t v253 = (v252 >> 2) + 1;
              uint64_t v254 = 4 * (v253 & 0x7FFFFFFFFFFFFFF8);
              uint64_t v255 = &v243[-v254];
              unint64_t v251 = (_DWORD *)((char *)v251 - v254);
              uint64_t v256 = &v250[4 * v246 - 16];
              uint64_t v257 = v243 - 16;
              uint64_t v258 = v253 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v259 = *(_OWORD *)v257;
                *(v256 - 1) = *((_OWORD *)v257 - 1);
                *uint64_t v256 = v259;
                v256 -= 2;
                v257 -= 32;
                v258 -= 8;
              }
              while (v258);
              unint64_t v243 = v255;
              if (v253 != (v253 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_809:
                do
                {
                  int v260 = *((_DWORD *)v243 - 1);
                  v243 -= 4;
                  *--unint64_t v251 = v260;
                }
                while (v243 != v245);
              }
              *((void *)v240 + 5) = v251;
              *((void *)v240 + 6) = v244;
              *((void *)v240 + 7) = &v250[4 * v249];
              if (!v245) {
                goto LABEL_323;
              }
            }
            operator delete(v245);
            goto LABEL_323;
          }
          *(_DWORD *)unint64_t v243 = v208;
          uint64_t v244 = (uint64_t)(v243 + 4);
LABEL_323:
          *((void *)v240 + 6) = v244;
          int v190 = v631;
LABEL_324:
          v191 += 3;
          if (v191 == v190)
          {
            v335 = (char **)v674;
            goto LABEL_493;
          }
        }
      }
      v335 = &v675;
LABEL_493:
      uint64_t v654 = 0;
      int v653 = 0;
      v650 = 0;
      v651 = 0;
      uint64_t v652 = 0;
      *(void *)v686 = a4;
      *(void *)&v686[8] = &v654;
      *(void *)&v686[16] = &v653;
      *(void *)&v686[24] = (char *)&v654 + 4;
      *(void *)&v686[32] = &v650;
      if (v335 != &v675)
      {
        do
        {
          v390 = (uint64_t *)v335[1];
          if (v390)
          {
            do
            {
              v391 = (uint64_t **)v390;
              v390 = (uint64_t *)*v390;
            }
            while (v390);
          }
          else
          {
            do
            {
              v391 = (uint64_t **)v335[2];
              BOOL v392 = *v391 == (uint64_t *)v335;
              v335 = (char **)v391;
            }
            while (!v392);
          }
          v335 = (char **)v391;
        }
        while (v391 != (uint64_t **)&v675);
      }
      std::string::size_type v380 = v655.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v655.__r_.__value_.__l.__data_ != &v655.__r_.__value_.__r.__words[1])
      {
        do
        {
          v393 = *(std::string **)(v380 + 8);
          if (v393)
          {
            do
            {
              v394 = v393;
              v393 = (std::string *)v393->__r_.__value_.__r.__words[0];
            }
            while (v393);
          }
          else
          {
            do
            {
              v394 = *(std::string **)(v380 + 16);
              BOOL v392 = v394->__r_.__value_.__r.__words[0] == v380;
              std::string::size_type v380 = (std::string::size_type)v394;
            }
            while (!v392);
          }
          std::string::size_type v380 = (std::string::size_type)v394;
        }
        while (v394 != (std::string *)&v655.__r_.__value_.__r.__words[1]);
      }
      if (*off_26AED0168[0] > 1
        && (off_26AED0168[0] != &google::kLogSiteUninitialized
         || google::InitVLOG3__((google *)off_26AED0168, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2)))
      {
        google::LogMessage::LogMessage((google::LogMessage *)v649, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 166);
        v381 = (void *)google::LogMessage::stream((google::LogMessage *)v649);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v381, (uint64_t)"Table: 2 variables, ", 20);
        v382 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v382, (uint64_t)" tuples encoded using ", 22);
        v383 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v383, (uint64_t)" clauses, ", 10);
        v384 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v384, (uint64_t)" large clauses, ", 16);
        v385 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v385, (uint64_t)" implications", 13);
        google::LogMessage::~LogMessage((google::LogMessage *)v649);
      }
      if (v650)
      {
        v651 = v650;
        operator delete(v650);
      }
      std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v655, (void *)v655.__r_.__value_.__l.__size_);
      std::__tree<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::__map_value_compare<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>,std::less<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,true>,std::allocator<std::__value_type<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,std::vector<operations_research::sat::Literal>>>>::destroy((uint64_t)&v674, v675);
    }
    v386 = (void **)__s2;
    if (__s2)
    {
      v387 = (void **)v678;
      v388 = __s2;
      if ((void *)v678 != __s2)
      {
        do
        {
          if (*(v387 - 3))
          {
            operator delete(*(v387 - 6));
            *(v387 - 1) = 0;
            *(v387 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
            *(v387 - 5) = 0;
            *(v387 - 4) = 0;
            *(v387 - 3) = 0;
          }
          v389 = *(v387 - 2);
          if (v389) {
            absl::lts_2020_02_25::container_internal::UnsampleSlow(v389);
          }
          v387 -= 6;
        }
        while (v387 != v386);
        v388 = __s2;
      }
      uint64_t v678 = (uint64_t)v386;
      goto LABEL_767;
    }
    goto LABEL_768;
  }
  unsigned int v601 = -1431655765 * (v43 >> 3);
  memset(&v686[8], 0, 32);
  *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  uint64_t v687 = 0;
  do
  {
    *(void *)&long long v680 = *v42;
    *((void *)&v680 + 1) = (((void)v615 << 32) - 0x100000000) >> 32;
    unint64_t v67 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::find_or_prepare_insert<absl::lts_2020_02_25::Span<long long const>>((uint64_t *)v686, (uint64_t)&v680);
    if (v68) {
      *(_OWORD *)(*(void *)&v686[8] + 16 * v67) = v680;
    }
    v42 += 3;
  }
  while (v42 != (void *)v41);
  v600 = *(absl::lts_2020_02_25::numbers_internal **)&v686[16];
  if (*(void *)&v686[24])
  {
    operator delete(*(void **)v686);
    *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v687 = 0;
    memset(&v686[8], 0, 24);
  }
  if (*(void *)&v686[32]) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*(void **)&v686[32]);
  }
  std::vector<std::vector<long long>>::vector(&v662, v603);
  if ((int)v615 >= 1)
  {
    uint64_t v70 = 0;
    do
    {
      uint64_t v71 = (char **)((char *)v647 + 48 * v70);
      unint64_t v72 = (uint64_t *)v71[1];
      uint64_t v73 = *v71;
      if (**v71 <= -2)
      {
        do
        {
          unint64_t v74 = (__clz(__rbit64(((*(void *)v73 >> 7) & ~*(void *)v73 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v73 += v74;
          v72 += v74;
        }
        while (*v73 < -1);
      }
      uint64_t v75 = &v71[3][(void)*v71];
      if (v73 == v75)
      {
        size_t v76 = 0;
      }
      else
      {
        size_t v76 = 0;
        uint64_t v77 = v73;
        do
        {
          int v78 = *++v77;
          if (v78 <= -2)
          {
            do
              v77 += (__clz(__rbit64(((*(void *)v77 >> 7) & ~*(void *)v77 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            while (*v77 < -1);
          }
          ++v76;
        }
        while (v77 != v75);
      }
      std::vector<long long>::__assign_with_size[abi:ne180100]<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator>((uint64_t)v662 + 24 * v70, v73, v72, v75, v69, v76);
      std::__sort<std::__less<long long,long long> &,long long *>();
      ++v70;
    }
    while (v70 != v615);
  }
  *(void *)v686 = v615;
  LODWORD(__s2) = 2;
  if ((unint64_t)v615 < 3) {
    google::MakeCheckOpString<unsigned long,int>((int)v686, (int)&__s2, "vars.size() > 2");
  }
  unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__p - (unsigned char *)v662) >> 3);
  LODWORD(v656) = v79;
  if ((int)v79 >= 1)
  {
    uint64_t v80 = 0;
    uint64_t v604 = (int)v79;
    uint64_t v605 = -1431655765 * (((unsigned char *)__p - (unsigned char *)v662) >> 3);
    uint64_t v608 = 2;
    uint64_t v607 = 1;
    uint64_t v610 = 8;
    do
    {
      if (v80)
      {
        *(_DWORD *)v686 = v80 + 3;
        unint64_t v81 = (void **)v686;
        if (v80 + 3 >= v604) {
          unint64_t v81 = &v656;
        }
        uint64_t v82 = *(int *)v81;
        unint64_t v635 = v80;
        uint64_t v606 = v80 + 1;
        if (v80 + 1 < v82)
        {
LABEL_97:
          uint64_t v611 = v82;
          uint64_t v83 = 2;
          unint64_t v619 = v607;
          uint64_t v639 = v608;
          do
          {
            unint64_t v84 = v619 - v635;
            if (v619 >= v635)
            {
              uint64_t v107 = (uint64_t *)((char *)v662 + v610);
              uint64_t v108 = v83;
              uint64_t v109 = 1;
              uint64_t v86 = v620;
              do
              {
                uint64_t v111 = *(v107 - 1);
                uint64_t v110 = *v107;
                uint64_t v112 = *v107 - v111;
                uint64_t v113 = v112 >> 3;
                if (v112 >> 3 >= 0) {
                  unint64_t v114 = v112 >> 3;
                }
                else {
                  unint64_t v114 = -v113;
                }
                int v115 = 63 - __clz(v114);
                if (v110 == v111) {
                  int v116 = 0;
                }
                else {
                  int v116 = v115;
                }
                if (v109 >= 0) {
                  unint64_t v117 = v109;
                }
                else {
                  unint64_t v117 = -v109;
                }
                int v118 = 63 - __clz(v117);
                if (!v109) {
                  int v118 = 0;
                }
                int v119 = v116 + v118;
                if (v119 <= 61)
                {
                  uint64_t v85 = v113 * v109;
                }
                else
                {
                  uint64_t v85 = 0;
                  if (v109 && v110 != v111)
                  {
                    uint64_t v85 = ((v113 ^ (unint64_t)v109) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
                    unint64_t v120 = v114 * v117;
                    if (v119 <= 0x3E && v120 < v85)
                    {
                      if (v85 >= 0) {
                        uint64_t v85 = v114 * v117;
                      }
                      else {
                        uint64_t v85 = -(uint64_t)v120;
                      }
                    }
                  }
                }
                v107 += 3;
                uint64_t v109 = v85;
                --v108;
              }
              while (v108);
            }
            else
            {
              uint64_t v85 = 1;
              uint64_t v86 = v620;
            }
            uint64_t v88 = *(void **)v86;
            uint64_t v87 = (void *)*((void *)v86 + 1);
            if (v85 > (unint64_t)(0x5555555555555556 * (((uint64_t)v87 - *(void *)v86) >> 3))) {
              break;
            }
            uint64_t v612 = v83;
            *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
            memset(&v686[8], 0, 32);
            uint64_t v687 = 0;
            uint64_t v627 = v85;
            if (v88 != v87)
            {
              unint64_t v629 = v84 + 1;
              uint64_t v89 = (char *)(8 * (v84 + 1));
              v621 = v87;
              while (1)
              {
                uint64_t v90 = (void *)(*v88 + 8 * v635);
                if ((unint64_t)v89 < 0x11) {
                  break;
                }
                if ((unint64_t)v89 < 0x401)
                {
                  unint64_t v91 = absl::lts_2020_02_25::hash_internal::CityHash64((absl::lts_2020_02_25::hash_internal *)(*v88 + 8 * v635), (unint64_t)v89);
                  uint64_t v92 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
LABEL_108:
                  uint64_t v93 = ((((unint64_t)v92 + v91) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)v92 + v91));
                  goto LABEL_109;
                }
                uint64_t v93 = (uint64_t)absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, (absl::lts_2020_02_25::hash_internal *)(*v88 + 8 * v635), v89);
LABEL_109:
                uint64_t v94 = 0;
                unint64_t v95 = (((v93 + v629) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                        * (v93 + v629));
                uint64_t v97 = *(void *)v686;
                uint64_t v96 = *(void *)&v686[8];
                unint64_t v98 = (v95 >> 7) ^ (*(void *)v686 >> 12);
                uint64_t v99 = *(void *)&v686[24];
                while (1)
                {
                  unint64_t v100 = v98 & v99;
                  uint64_t v101 = *(void *)(v97 + (v98 & v99));
                  unint64_t v102 = ((v101 ^ (0x101010101010101 * (v95 & 0x7F))) - 0x101010101010101) & ~(v101 ^ (0x101010101010101 * (v95 & 0x7F))) & 0x8080808080808080;
                  if (v102) {
                    break;
                  }
LABEL_115:
                  if ((v101 & (~v101 << 6) & 0x8080808080808080) != 0)
                  {
                    unint64_t v104 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<absl::lts_2020_02_25::Span<long long const>>,absl::lts_2020_02_25::hash_internal::Hash<absl::lts_2020_02_25::Span<long long const>>,std::equal_to<absl::lts_2020_02_25::Span<long long const>>,std::allocator<absl::lts_2020_02_25::Span<long long const>>>::prepare_insert((uint64_t *)v686, v95);
                    long long v105 = (void *)(*(void *)&v686[8] + 16 * v104);
                    *long long v105 = v90;
                    v105[1] = v629;
                    goto LABEL_118;
                  }
                  v94 += 8;
                  unint64_t v98 = v94 + v100;
                }
                uint64_t v616 = v96;
                uint64_t v617 = v94;
                while (1)
                {
                  uint64_t v103 = v96 + 16 * ((v100 + (__clz(__rbit64(v102)) >> 3)) & v99);
                  if (v89 == (char *)(8 * *(void *)(v103 + 8)) && !memcmp(*(const void **)v103, v90, (size_t)v89)) {
                    break;
                  }
                  v102 &= v102 - 1;
                  uint64_t v96 = v616;
                  uint64_t v94 = v617;
                  if (!v102) {
                    goto LABEL_115;
                  }
                }
LABEL_118:
                int v106 = *(_DWORD *)&v686[16];
                uint64_t v85 = v627;
                if (*(void *)&v686[16] == v627)
                {
                  uint64_t v172 = v612;
                  if (*(void *)&v686[24]) {
                    goto LABEL_241;
                  }
                  goto LABEL_242;
                }
                v88 += 3;
                if (v88 == v621) {
                  goto LABEL_147;
                }
              }
              unint64_t v91 = *(void *)&v89[(void)v90 - 8];
              uint64_t v92 = (_UNKNOWN **)(((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *v90)
                                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                     * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                      + *v90)));
              goto LABEL_108;
            }
            int v106 = 0;
LABEL_147:
            long long v680 = 0uLL;
            v681 = 0;
            uint64_t v122 = v615;
            unint64_t v123 = v635;
            if (v85 <= v106 || v85 >= 2 * v106) {
              goto LABEL_240;
            }
            uint64_t v678 = 0;
            __s2 = 0;
            unint64_t v679 = 0;
            if (v85 < 1) {
              goto LABEL_214;
            }
            uint64_t v630 = 0;
            int v622 = 0;
LABEL_153:
            while (2)
            {
              uint64_t v124 = (char *)__s2;
              uint64_t v678 = (uint64_t)__s2;
              if (v619 < v123)
              {
                uint64_t v125 = (char *)__s2;
                int64_t v126 = 0;
                goto LABEL_189;
              }
              int64_t v128 = v662;
              unint64_t v129 = v123;
              LODWORD(v13google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v630;
              do
              {
                int v132 = &v128[3 * v129];
                unint64_t v133 = (int)v130;
                uint64_t v134 = *v132;
                unint64_t v135 = (int)v130 % (unint64_t)((v132[1] - *v132) >> 3);
                if ((unint64_t)v124 < v679)
                {
                  *(void *)uint64_t v124 = *(void *)(v134 + 8 * v135);
                  v124 += 8;
                  goto LABEL_159;
                }
                int v136 = (char *)__s2;
                int64_t v137 = v124 - (unsigned char *)__s2;
                uint64_t v138 = (v124 - (unsigned char *)__s2) >> 3;
                unint64_t v139 = v138 + 1;
                if ((unint64_t)(v138 + 1) >> 61) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v140 = v679 - (void)__s2;
                if ((uint64_t)(v679 - (void)__s2) >> 2 > v139) {
                  unint64_t v139 = v140 >> 2;
                }
                if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v141 = v139;
                }
                if (v141)
                {
                  if (v141 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v85 = (uint64_t)operator new(8 * v141);
                  long long v142 = (void *)(v85 + 8 * v138);
                  void *v142 = *(void *)(v134 + 8 * v135);
                  uint64_t v143 = (uint64_t)(v142 + 1);
                  if (v124 == v136) {
                    goto LABEL_175;
                  }
                }
                else
                {
                  uint64_t v85 = 0;
                  long long v142 = (void *)(8 * v138);
                  *(void *)(8 * v138) = *(void *)(v134 + 8 * v135);
                  uint64_t v143 = 8 * v138 + 8;
                  if (v124 == v136) {
                    goto LABEL_175;
                  }
                }
                unint64_t v144 = v124 - 8 - v136;
                if (v144 >= 0x168)
                {
                  if (v85 + v137 - 8 - (v144 & 0xFFFFFFFFFFFFFFF8) > v85 + v137 - 8)
                  {
                    uint64_t v145 = v124;
                  }
                  else if (&v124[-(v144 & 0xFFFFFFFFFFFFFFF8) - 8] > v124 - 8)
                  {
                    uint64_t v145 = v124;
                  }
                  else if ((unint64_t)&v124[-v85 - v137] >= 0x20)
                  {
                    uint64_t v147 = (v144 >> 3) + 1;
                    uint64_t v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v145 = &v124[-v148];
                    long long v142 = (void *)((char *)v142 - v148);
                    BOOL v149 = (_OWORD *)(v85 + 8 * v138 - 16);
                    uint64_t v150 = v124 - 16;
                    uint64_t v151 = v147 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      long long v152 = *(_OWORD *)v150;
                      *(v149 - 1) = *((_OWORD *)v150 - 1);
                      *BOOL v149 = v152;
                      v149 -= 2;
                      v150 -= 32;
                      v151 -= 4;
                    }
                    while (v151);
                    if (v147 == (v147 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_175;
                    }
                  }
                  else
                  {
                    uint64_t v145 = v124;
                  }
                }
                else
                {
                  uint64_t v145 = v124;
                }
                do
                {
                  uint64_t v146 = *((void *)v145 - 1);
                  v145 -= 8;
                  *--long long v142 = v146;
                }
                while (v145 != v136);
LABEL_175:
                __s2 = v142;
                uint64_t v678 = v143;
                unint64_t v679 = v85 + 8 * v141;
                if (v136)
                {
                  operator delete(v136);
                  int64_t v128 = v662;
                }
                uint64_t v124 = (char *)v143;
LABEL_159:
                uint64_t v678 = (uint64_t)v124;
                unint64_t v131 = (uint64_t)(v128[3 * v129 + 1] - v128[3 * v129]) >> 3;
                ++v129;
                unint64_t v130 = v133 / v131;
              }
              while (v129 != v639);
              uint64_t v125 = (char *)__s2;
              int64_t v126 = v124 - (unsigned char *)__s2;
              if ((unint64_t)(v124 - (unsigned char *)__s2) >= 0x11)
              {
                if ((unint64_t)v126 < 0x401)
                {
                  uint64_t v85 = absl::lts_2020_02_25::hash_internal::CityHash64((absl::lts_2020_02_25::hash_internal *)__s2, v124 - (unsigned char *)__s2);
                  uint64_t v127 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                  goto LABEL_194;
                }
                int v153 = (_UNKNOWN **)absl::lts_2020_02_25::hash_internal::CityHashState::CombineLargeContiguousImpl64((absl::lts_2020_02_25::hash_internal::CityHashState *)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed, (absl::lts_2020_02_25::hash_internal *)__s2, (char *)(v124 - (unsigned char *)__s2));
              }
              else
              {
LABEL_189:
                if ((unint64_t)v126 >= 9)
                {
                  uint64_t v85 = *(void *)&v125[v126 - 8];
                  uint64_t v127 = (_UNKNOWN **)(((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                        + *(void *)v125)
                                       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                                           + *(void *)v125)));
                  goto LABEL_194;
                }
                if ((unint64_t)v126 >= 4)
                {
                  uint64_t v85 = ((unint64_t)*(unsigned int *)&v125[v126 - 4] << (8 * v126 - 32)) | *(unsigned int *)v125;
                  uint64_t v127 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                  goto LABEL_194;
                }
                int v153 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                uint64_t v127 = &absl::lts_2020_02_25::hash_internal::CityHashState::kSeed;
                if (v124 != v125) {
LABEL_194:
                }
                  int v153 = (_UNKNOWN **)(((((unint64_t)v127 + v85) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)v127 + v85)));
              }
              uint64_t v154 = 0;
              unint64_t v155 = ((((unint64_t)v153 + (v126 >> 3)) * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69 * ((void)v153 + (v126 >> 3)));
              uint64_t v156 = *(void *)v686;
              uint64_t v157 = *(void *)&v686[8];
              unint64_t v158 = (v155 >> 7) ^ (*(void *)v686 >> 12);
              uint64_t v159 = *(void *)&v686[24];
              uint64_t v160 = 0x101010101010101 * (v155 & 0x7F);
              while (1)
              {
                uint64_t v161 = v158 & v159;
                uint64_t v162 = *(void *)(v156 + (v158 & v159));
                unint64_t v163 = ((v162 ^ v160) - 0x101010101010101) & ~(v162 ^ v160) & 0x8080808080808080;
                if (v163) {
                  break;
                }
LABEL_201:
                if ((v162 & (~v162 << 6) & 0x8080808080808080) != 0)
                {
LABEL_204:
                  unint64_t v166 = (void *)*((void *)&v680 + 1);
                  if (*((void *)&v680 + 1) >= (unint64_t)v681)
                  {
                    uint64_t v85 = (uint64_t)std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>((char **)&v680, (uint64_t)&__s2);
                    uint64_t v122 = v615;
                    unint64_t v123 = v635;
                    uint64_t v169 = v627;
                  }
                  else
                  {
                    **((void **)&v680 + 1) = 0;
                    v166[1] = 0;
                    v166[2] = 0;
                    uint64_t v167 = __s2;
                    int64_t v168 = v678 - (void)__s2;
                    uint64_t v122 = v615;
                    unint64_t v123 = v635;
                    uint64_t v169 = v627;
                    if ((void *)v678 != __s2)
                    {
                      if (v168 < 0) {
                        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                      }
                      int v170 = (char *)operator new(v678 - (void)__s2);
                      *unint64_t v166 = v170;
                      v166[1] = v170;
                      std::string v171 = &v170[8 * (v168 >> 3)];
                      v166[2] = v171;
                      memcpy(v170, v167, v168);
                      v166[1] = v171;
                    }
                    uint64_t v85 = (uint64_t)(v166 + 3);
                  }
                  *((void *)&v680 + 1) = v85;
                  ++v622;
                  if (++v630 == v169) {
                    goto LABEL_214;
                  }
                  goto LABEL_153;
                }
                v154 += 8;
                unint64_t v158 = v154 + v161;
              }
              uint64_t v618 = v154;
              while (1)
              {
                unint64_t v164 = (v161 + (__clz(__rbit64(v163)) >> 3)) & v159;
                uint64_t v165 = v157 + 16 * v164;
                if (v126 == 8 * *(void *)(v165 + 8))
                {
                  uint64_t v85 = memcmp(*(const void **)v165, v125, v126);
                  if (!v85) {
                    break;
                  }
                }
                v163 &= v163 - 1;
                uint64_t v154 = v618;
                if (!v163) {
                  goto LABEL_201;
                }
              }
              if (v159 == v164) {
                goto LABEL_204;
              }
              uint64_t v122 = v615;
              unint64_t v123 = v635;
              if (++v630 != v627) {
                continue;
              }
              break;
            }
LABEL_214:
            if ((unint64_t)v122 < v123) {
              absl::lts_2020_02_25::base_internal::ThrowStdOutOfRange((absl::lts_2020_02_25::base_internal *)"pos > size()", v86);
            }
            std::vector<std::vector<long long>>::vector(&v674, (uint64_t *)&v680);
            if ((unint64_t)v615 - v635 >= (int)v619 - (int)v123 + 1) {
              int v173 = v619 - v123 + 1;
            }
            else {
              int v173 = v615 - v635;
            }
            operations_research::sat::AddNegatedTableConstraint(a1 + 4 * v635, v173, &v674, a4);
            unsigned __int8 v174 = (uint64_t *)v674;
            if (v674)
            {
              uint64_t v175 = v675;
              uint64_t v176 = v674;
              if (v675 != v674)
              {
                uint64_t v177 = v675;
                do
                {
                  uint64_t v179 = (void *)*((void *)v177 - 3);
                  v177 -= 24;
                  int v178 = v179;
                  if (v179)
                  {
                    *((void *)v175 - 2) = v178;
                    operator delete(v178);
                  }
                  uint64_t v175 = v177;
                }
                while (v177 != (char *)v174);
                uint64_t v176 = v674;
              }
              v675 = (char *)v174;
              operator delete(v176);
            }
            if (*off_26AED0170 >= 2
              && (off_26AED0170 != &google::kLogSiteUninitialized
               || google::InitVLOG3__((google *)&off_26AED0170, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2)))
            {
              google::LogMessage::LogMessage((google::LogMessage *)&v659, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 234);
              unsigned __int8 v180 = (void *)google::LogMessage::stream((google::LogMessage *)&v659);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)"  add negated tables with ", 26);
              uint64_t v181 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)" tuples on the range [", 22);
              int v182 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)",", 1);
              uint64_t v183 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"]", 1);
              google::LogMessage::~LogMessage((google::LogMessage *)&v659);
            }
            if (__s2)
            {
              uint64_t v678 = (uint64_t)__s2;
              operator delete(__s2);
            }
            uint64_t v184 = v680;
            if ((void)v680)
            {
              uint64_t v185 = *((void *)&v680 + 1);
              uint64_t v186 = (void *)v680;
              if (*((void *)&v680 + 1) != (void)v680)
              {
                uint64_t v187 = *((void *)&v680 + 1);
                do
                {
                  uint64_t v189 = *(void **)(v187 - 24);
                  v187 -= 24;
                  unint64_t v188 = v189;
                  if (v189)
                  {
                    *(void *)(v185 - 16) = v188;
                    operator delete(v188);
                  }
                  uint64_t v185 = v187;
                }
                while (v187 != v184);
                uint64_t v186 = (void *)v680;
              }
              *((void *)&v680 + 1) = v184;
              operator delete(v186);
            }
LABEL_240:
            uint64_t v172 = v612;
            if (*(void *)&v686[24])
            {
LABEL_241:
              operator delete(*(void **)v686);
              *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              uint64_t v687 = 0;
              memset(&v686[8], 0, 24);
            }
LABEL_242:
            if (*(void *)&v686[32]) {
              absl::lts_2020_02_25::container_internal::UnsampleSlow(*(void **)&v686[32]);
            }
            ++v639;
            uint64_t v83 = v172 + 1;
            ++v619;
          }
          while (v619 != v611);
        }
      }
      else
      {
        LODWORD(v82) = v656;
        unint64_t v635 = 0;
        uint64_t v606 = 1;
        if ((int)v656 > 1) {
          goto LABEL_97;
        }
      }
      ++v607;
      ++v608;
      v610 += 24;
      uint64_t v80 = v606;
    }
    while (v606 != v605);
  }
  std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::vector(&v659, v603);
  if ((int)v615 > 0)
  {
    uint64_t v266 = 0;
    do
    {
      char v267 = (char **)((char *)v647 + 48 * v266);
      unint64_t v268 = (uint64_t *)v267[1];
      unint64_t v269 = *v267;
      if (**v267 <= -2)
      {
        do
        {
          unint64_t v270 = (__clz(__rbit64(((*v269 >> 7) & ~*v269 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v269 = (void *)((char *)v269 + v270);
          v268 += v270;
        }
        while (*(char *)v269 < -1);
      }
      std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::iterator,0>(&v680, v269, v268, &v267[3][(void)*v267]);
      int v271 = *(_DWORD *)(a1 + 4 * v266);
      v643 = 0;
      v644 = 0;
      v645 = 0;
      char v272 = (const void *)v680;
      int64_t v273 = *((void *)&v680 + 1) - v680;
      if (*((void *)&v680 + 1) != (void)v680)
      {
        if (v273 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        v643 = operator new(*((void *)&v680 + 1) - v680);
        v644 = v643;
        char v274 = (char *)v643 + 8 * (v273 >> 3);
        v645 = v274;
        memcpy(v643, v272, v273);
        v644 = v274;
      }
      operations_research::Domain::FromValues((int64_t **)&v643, v646);
      operations_research::sat::IntegerTrail::UpdateInitialDomain(v613, v271, (operations_research::Domain *)v646);
      if (v646[0]) {
        operator delete((void *)v646[1]);
      }
      if (v643)
      {
        v644 = v643;
        operator delete(v643);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v648 - (unsigned char *)v647) >> 4) >= 2)
      {
        signed int v275 = *(_DWORD *)(a1 + 4 * v266);
        v683 = (void (**)(void **))&unk_26F0BD370;
        signed int v684 = v275;
        v685 = (void **)&v683;
        unint64_t v276 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
        if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v276, v684)) {
          operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v276, v684);
        }
        operations_research::sat::IntegerEncoder::FullDomainEncoding(v276, v684, (char **)v642);
        if (v642[0])
        {
          v642[1] = v642[0];
          operator delete(v642[0]);
        }
        if (v685 == (void **)&v683)
        {
          v683[4]((void **)&v683);
        }
        else if (v685)
        {
          (*((void (**)(void))*v685 + 5))();
        }
        unint64_t v277 = (char *)v659 + 48 * v266;
        uint64_t v278 = *(void *)&v686[32];
        uint64_t v279 = v687;
        *(void *)&v686[32] = 0;
        uint64_t v687 = 0;
        long long v280 = *(_OWORD *)v686;
        *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
        *(void *)&v686[8] = 0;
        char v281 = *(void **)v277;
        *(_OWORD *)unint64_t v277 = v280;
        long long v282 = *(_OWORD *)&v686[16];
        *(void *)&v686[16] = 0;
        *(void *)&v686[24] = 0;
        uint64_t v283 = *((void *)v277 + 3);
        unint64_t v284 = (void *)*((void *)v277 + 4);
        *((_OWORD *)v277 + 1) = v282;
        *((void *)v277 + 4) = v278;
        *((void *)v277 + 5) = v279;
        if (v283) {
          operator delete(v281);
        }
        if (v284) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v284);
        }
        if (*(void *)&v686[24])
        {
          operator delete(*(void **)v686);
          *(void *)v686 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          uint64_t v687 = 0;
          memset(&v686[8], 0, 24);
        }
        if (*(void *)&v686[32]) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(*(void **)&v686[32]);
        }
      }
      if ((void)v680)
      {
        *((void *)&v680 + 1) = v680;
        operator delete((void *)v680);
      }
      ++v266;
    }
    while (v266 != v615);
    unint64_t v285 = 0;
    char v286 = 0;
    char v287 = 0;
    uint64_t v288 = 0;
    v656 = 0;
    uint64_t v657 = 0;
    v658 = 0;
    uint64_t v289 = v620;
    while (1)
    {
      while (1)
      {
        uint64_t v290 = *((void *)v647 + 6 * v288 + 2);
        if (v287 >= v286) {
          break;
        }
        *(void *)char v287 = v290;
        v287 += 8;
        uint64_t v657 = (uint64_t)v287;
        if (++v288 == v615) {
          goto LABEL_393;
        }
      }
      uint64_t v291 = (v287 - v285) >> 3;
      unint64_t v292 = v291 + 1;
      if ((unint64_t)(v291 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v286 - v285) >> 2 > v292) {
        unint64_t v292 = (v286 - v285) >> 2;
      }
      unint64_t v293 = (unint64_t)(v286 - v285) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v292;
      if (v293)
      {
        if (v293 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v294 = operator new(8 * v293);
        unint64_t v295 = &v294[8 * v291];
        void *v295 = v290;
        uint64_t v296 = (uint64_t)(v295 + 1);
        if (v287 == v285)
        {
LABEL_384:
          uint64_t v289 = v620;
          char v286 = &v294[8 * v293];
          v656 = v295;
          uint64_t v657 = v296;
          v658 = v286;
          if (!v285) {
            goto LABEL_381;
          }
LABEL_380:
          operator delete(v285);
          goto LABEL_381;
        }
      }
      else
      {
        unint64_t v294 = 0;
        unint64_t v295 = (void *)(8 * v291);
        *(void *)(8 * v291) = v290;
        uint64_t v296 = 8 * v291 + 8;
        if (v287 == v285) {
          goto LABEL_384;
        }
      }
      unint64_t v297 = v287 - 8 - v285;
      if (v297 < 0x168
        || &v294[v287 - v285 - 8 - (v297 & 0xFFFFFFFFFFFFFFF8)] > &v294[v287 - v285 - 8]
        || &v287[-(v297 & 0xFFFFFFFFFFFFFFF8) - 8] > v287 - 8
        || (unint64_t)(v285 - v294) < 0x20)
      {
        break;
      }
      uint64_t v300 = (v297 >> 3) + 1;
      uint64_t v301 = 8 * (v300 & 0x3FFFFFFFFFFFFFFCLL);
      char v298 = &v287[-v301];
      unint64_t v295 = (void *)((char *)v295 - v301);
      unint64_t v302 = &v294[8 * v291 - 16];
      unint64_t v303 = v287 - 16;
      uint64_t v304 = v300 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v305 = *(_OWORD *)v303;
        *(v302 - 1) = *((_OWORD *)v303 - 1);
        _OWORD *v302 = v305;
        v302 -= 2;
        v303 -= 32;
        v304 -= 4;
      }
      while (v304);
      uint64_t v289 = v620;
      if (v300 != (v300 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_378;
      }
LABEL_379:
      char v286 = &v294[8 * v293];
      v656 = v295;
      uint64_t v657 = v296;
      v658 = v286;
      if (v285) {
        goto LABEL_380;
      }
LABEL_381:
      unint64_t v285 = (char *)v295;
      char v287 = (char *)v296;
      uint64_t v657 = v296;
      if (++v288 == v615)
      {
LABEL_393:
        unint64_t v306 = v656;
        goto LABEL_395;
      }
    }
    char v298 = v287;
    uint64_t v289 = v620;
    do
    {
LABEL_378:
      uint64_t v299 = *((void *)v298 - 1);
      v298 -= 8;
      *--unint64_t v295 = v299;
    }
    while (v298 != v285);
    goto LABEL_379;
  }
  char v287 = 0;
  unint64_t v306 = 0;
  v656 = 0;
  uint64_t v657 = 0;
  v658 = 0;
  uint64_t v289 = v620;
LABEL_395:
  operations_research::sat::CompressTuples((uint64_t)v306, (v287 - v306) >> 3, 0x8000000000000000, (uint64_t)v289);
  if (*_MergedGlobals_19[0] < 2) {
    goto LABEL_445;
  }
  uint64_t v309 = *(void *)v289;
  uint64_t v308 = *((void *)v289 + 1);
  if (_MergedGlobals_19[0] == &google::kLogSiteUninitialized
    && !google::InitVLOG3__((google *)_MergedGlobals_19, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2))
  {
    goto LABEL_445;
  }
  if ((int)v615 < 2)
  {
    uint64_t v313 = 1;
  }
  else
  {
    uint64_t v310 = (v615 - 1);
    unint64_t v311 = (uint64_t *)((char *)v647 + 16);
    uint64_t v312 = 1;
    do
    {
      uint64_t v315 = *v311;
      v311 += 6;
      unint64_t v314 = v315;
      if (v315 >= 0) {
        unint64_t v316 = v314;
      }
      else {
        unint64_t v316 = -(uint64_t)v314;
      }
      int v317 = 63 - __clz(v316);
      if (v314) {
        int v318 = v317;
      }
      else {
        int v318 = 0;
      }
      if (v312 >= 0) {
        unint64_t v319 = v312;
      }
      else {
        unint64_t v319 = -v312;
      }
      int v320 = 63 - __clz(v319);
      if (!v312) {
        int v320 = 0;
      }
      int v321 = v318 + v320;
      if (v321 <= 61)
      {
        uint64_t v313 = v314 * v312;
      }
      else
      {
        uint64_t v313 = 0;
        if (v312 && v314)
        {
          uint64_t v313 = ((v314 ^ v312) >> 63) + 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v322 = v316 * v319;
          if (v321 <= 0x3E && v322 < v313)
          {
            if (v313 >= 0) {
              uint64_t v313 = v316 * v319;
            }
            else {
              uint64_t v313 = -(uint64_t)v322;
            }
          }
        }
      }
      uint64_t v312 = v313;
      --v310;
    }
    while (v310);
  }
  *(void *)v686 = "Table: ";
  *(void *)&v686[8] = 7;
  char v324 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v615, &v681, v307);
  *(void *)&long long v680 = &v681;
  *((void *)&v680 + 1) = v324 - (unsigned char *)&v681;
  __s2 = " variables, original tuples = ";
  uint64_t v678 = 30;
  unint64_t v326 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v602, v676, v325);
  v674 = v676;
  v675 = (char *)(v326 - (unsigned char *)v676);
  absl::lts_2020_02_25::StrCat((uint64_t)v686, (uint64_t)&v680, (uint64_t)&__s2, (uint64_t)&v674, &v655);
  unsigned int v328 = v601;
  if (v601 != v602)
  {
    *(void *)v686 = ", valid tuples = ";
    *(void *)&v686[8] = 17;
    unint64_t v329 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v601, &v681, v327);
    *(void *)&long long v680 = &v681;
    *((void *)&v680 + 1) = v329 - (unsigned char *)&v681;
    absl::lts_2020_02_25::StrAppend(&v655, (uint64_t)v686, (uint64_t)&v680);
    unsigned int v328 = v601;
  }
  if (v600 == v328)
  {
    if (v313 <= (int)v600)
    {
      *(void *)v686 = ", full prefix = true";
      *(void *)&v686[8] = 20;
      absl::lts_2020_02_25::StrAppend((uint64_t)&v655, (uint64_t)v686);
    }
    else
    {
      *(void *)v686 = ", partial prefix = ";
      *(void *)&v686[8] = 19;
      char v330 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer((absl::lts_2020_02_25::numbers_internal *)v601, &v681, v327);
      *(void *)&long long v680 = &v681;
      *((void *)&v680 + 1) = v330 - (unsigned char *)&v681;
      __s2 = "/";
      uint64_t v678 = 1;
      v332 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v313, v676, v331);
      v674 = v676;
      v675 = (char *)(v332 - (unsigned char *)v676);
      absl::lts_2020_02_25::StrAppend(&v655, (uint64_t)v686, (uint64_t)&v680, (uint64_t)&__s2, (uint64_t)&v674);
    }
  }
  else
  {
    *(void *)v686 = ", num prefix tuples = ";
    *(void *)&v686[8] = 22;
    v334 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v600, &v681, v327);
    *(void *)&long long v680 = &v681;
    *((void *)&v680 + 1) = v334 - (unsigned char *)&v681;
    absl::lts_2020_02_25::StrAppend(&v655, (uint64_t)v686, (uint64_t)&v680);
  }
  v336 = (absl::lts_2020_02_25::numbers_internal *)(-1431655765 * ((unint64_t)(v308 - v309) >> 3));
  if (v336 != v601)
  {
    *(void *)v686 = ", compressed tuples = ";
    *(void *)&v686[8] = 22;
    v337 = absl::lts_2020_02_25::numbers_internal::FastIntToBuffer(v336, &v681, v333);
    *(void *)&long long v680 = &v681;
    *((void *)&v680 + 1) = v337 - (unsigned char *)&v681;
    absl::lts_2020_02_25::StrAppend(&v655, (uint64_t)v686, (uint64_t)&v680);
  }
  if (*off_26AED0160[0] >= 2
    && (off_26AED0160[0] != &google::kLogSiteUninitialized
     || google::InitVLOG3__((google *)off_26AED0160, (int **)&fLI::FLAGS_v, "./ortools/sat/table.cc", (const char *)2)))
  {
    v338 = google::LogMessage::LogMessage((google::LogMessage *)v686, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 363);
    v339 = (void *)google::LogMessage::stream(v338);
    if ((v655.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<int> v340 = &v655;
    }
    else {
      std::vector<int> v340 = (std::string *)v655.__r_.__value_.__r.__words[0];
    }
    if ((v655.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v341 = HIBYTE(v655.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v341 = v655.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v339, (uint64_t)v340, v341);
    google::LogMessage::~LogMessage((google::LogMessage *)v686);
  }
  if (SHIBYTE(v655.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v655.__r_.__value_.__l.__data_);
    uint64_t v343 = *(void *)v289;
    uint64_t v342 = *((void *)v289 + 1);
    uint64_t v344 = v342 - *(void *)v289;
    if (v344 == 24) {
      goto LABEL_748;
    }
  }
  else
  {
LABEL_445:
    uint64_t v343 = *(void *)v289;
    uint64_t v342 = *((void *)v289 + 1);
    uint64_t v344 = v342 - *(void *)v289;
    if (v344 == 24) {
      goto LABEL_748;
    }
  }
  unint64_t v345 = 0xAAAAAAAAAAAAAAABLL * (v344 >> 3);
  memset(v686, 0, 24);
  if (v342 == v343)
  {
    uint64_t v347 = 0;
    int v346 = (int)v615;
    if (v344 == 48) {
      goto LABEL_449;
    }
  }
  else
  {
    int v346 = (int)v615;
    if (v345 >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v347 = (int *)operator new(0xAAAAAAAAAAAAAAACLL * (v344 >> 3));
    *(void *)v686 = v347;
    *(void *)&v686[8] = v347;
    *(void *)&v686[16] = &v347[0xEAAAAAAAAAAAAAABLL * (v344 >> 3)];
    if (v344 == 48)
    {
LABEL_449:
      v672[0] = &unk_26F0BFC30;
      v673 = v672;
      uint64_t v348 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4);
      int v349 = *((_DWORD *)v348 + 4);
      operations_research::sat::SatSolver::SetNumVariables(v348, v349 + 1);
      v350 = *(char **)&v686[8];
      if (*(void *)&v686[8] < *(void *)&v686[16])
      {
        **(_DWORD **)&v686[8] = 2 * v349;
        uint64_t v351 = v350 + 4;
        goto LABEL_542;
      }
      v374 = *(char **)v686;
      uint64_t v375 = (uint64_t)(*(void *)&v686[8] - *(void *)v686) >> 2;
      unint64_t v376 = v375 + 1;
      if ((unint64_t)(v375 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v377 = *(void *)&v686[16] - *(void *)v686;
      if ((uint64_t)(*(void *)&v686[16] - *(void *)v686) >> 1 > v376) {
        unint64_t v376 = v377 >> 1;
      }
      if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v378 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v378 = v376;
      }
      if (v378)
      {
        if (v378 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v379 = operator new(4 * v378);
      }
      else
      {
        v379 = 0;
      }
      v395 = &v379[4 * v375];
      _DWORD *v395 = 2 * v349;
      uint64_t v351 = v395 + 1;
      if (v350 == v374)
      {
        int v346 = (int)v615;
        goto LABEL_540;
      }
      unint64_t v396 = v350 - v374 - 4;
      if (v396 >= 0x2C)
      {
        int v346 = (int)v615;
        if ((unint64_t)(v374 - v379) >= 0x20)
        {
          uint64_t v397 = (v396 >> 2) + 1;
          uint64_t v398 = 4 * (v397 & 0x7FFFFFFFFFFFFFF8);
          v399 = &v350[-v398];
          v395 = (_DWORD *)((char *)v395 - v398);
          v400 = &v379[4 * v375 - 16];
          v401 = v350 - 16;
          uint64_t v402 = v397 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v403 = *(_OWORD *)v401;
            *(v400 - 1) = *((_OWORD *)v401 - 1);
            _OWORD *v400 = v403;
            v400 -= 2;
            v401 -= 32;
            v402 -= 8;
          }
          while (v402);
          v350 = v399;
          if (v397 == (v397 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_540:
            *(void *)v686 = v395;
            *(void *)&v686[8] = v351;
            *(void *)&v686[16] = &v379[4 * v378];
            if (v374) {
              operator delete(v374);
            }
LABEL_542:
            *(void *)&v686[8] = v351;
            if (v673 == v672)
            {
              (*(void (**)(void *))(v672[0] + 32))(v672);
              v406 = *(int **)v686;
              v405 = *(int **)&v686[8];
              int v407 = **(_DWORD **)v686 ^ 1;
              uint64_t v408 = *(void *)&v686[16];
              if (*(void *)&v686[8] < *(void *)&v686[16])
              {
LABEL_546:
                int *v405 = v407;
                *(void *)&v686[8] = v405 + 1;
                goto LABEL_567;
              }
            }
            else
            {
              if (v673) {
                (*(void (**)(void))(*v673 + 40))();
              }
              v406 = *(int **)v686;
              v405 = *(int **)&v686[8];
              int v407 = **(_DWORD **)v686 ^ 1;
              uint64_t v408 = *(void *)&v686[16];
              if (*(void *)&v686[8] < *(void *)&v686[16]) {
                goto LABEL_546;
              }
            }
            uint64_t v409 = v405 - v406;
            unint64_t v410 = v409 + 1;
            if ((unint64_t)(v409 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v411 = v408 - (void)v406;
            if (v411 >> 1 > v410) {
              unint64_t v410 = v411 >> 1;
            }
            if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v412 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v412 = v410;
            }
            if (v412)
            {
              if (v412 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v413 = operator new(4 * v412);
              v414 = (int *)&v413[4 * v409];
              v415 = &v413[4 * v412];
              int *v414 = v407;
              uint64_t v416 = (uint64_t)(v414 + 1);
              int64_t v417 = (char *)v405 - (char *)v406;
              if (v405 != v406) {
                goto LABEL_557;
              }
            }
            else
            {
              v413 = 0;
              v414 = (int *)(4 * v409);
              v415 = 0;
              *(_DWORD *)(4 * v409) = v407;
              uint64_t v416 = 4 * v409 + 4;
              int64_t v417 = (char *)v405 - (char *)v406;
              if (v405 != v406)
              {
LABEL_557:
                unint64_t v418 = v417 - 4;
                if (v418 >= 0x2C)
                {
                  int v346 = (int)v615;
                  if ((unint64_t)((char *)v406 - v413) >= 0x20)
                  {
                    uint64_t v419 = (v418 >> 2) + 1;
                    uint64_t v420 = 4 * (v419 & 0x7FFFFFFFFFFFFFF8);
                    v421 = &v405[v420 / 0xFFFFFFFFFFFFFFFCLL];
                    v414 = (int *)((char *)v414 - v420);
                    v422 = &v413[4 * v409 - 16];
                    v423 = v405 - 4;
                    uint64_t v424 = v419 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v425 = *(_OWORD *)v423;
                      *(v422 - 1) = *((_OWORD *)v423 - 1);
                      _OWORD *v422 = v425;
                      v422 -= 2;
                      v423 -= 8;
                      v424 -= 8;
                    }
                    while (v424);
                    v405 = v421;
                    if (v419 == (v419 & 0x7FFFFFFFFFFFFFF8)) {
                      goto LABEL_566;
                    }
                  }
                }
                else
                {
                  int v346 = (int)v615;
                }
                do
                {
                  int v426 = *--v405;
                  *--v414 = v426;
                }
                while (v405 != v406);
LABEL_566:
                *(void *)v686 = v414;
                *(void *)&v686[8] = v416;
                *(void *)&v686[16] = v415;
                operator delete(v406);
                *(void *)&v686[8] = v416;
                goto LABEL_567;
              }
            }
            int v346 = (int)v615;
            goto LABEL_566;
          }
        }
      }
      else
      {
        int v346 = (int)v615;
      }
      do
      {
        int v404 = *((_DWORD *)v350 - 1);
        v350 -= 4;
        *--v395 = v404;
      }
      while (v350 != v374);
      goto LABEL_540;
    }
  }
  if (v345 >= 3)
  {
    v352 = v347;
    if (v342 == v343)
    {
LABEL_526:
      v667 = (void (**)(void **))&unk_26F0BD480;
      v668[0] = v352;
      v668[1] = (int *)(v347 - v352);
      v669 = (void **)&v667;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v668, a4);
      if (v669 == (void **)&v667)
      {
        v667[4]((void **)&v667);
      }
      else if (v669)
      {
        (*((void (**)(void))*v669 + 5))();
      }
      goto LABEL_567;
    }
    uint64_t v353 = 0;
    while (1)
    {
      v670[0] = &unk_26F0BFC30;
      v671 = v670;
      v354 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a4);
      int v355 = *((_DWORD *)v354 + 4);
      operations_research::sat::SatSolver::SetNumVariables(v354, v355 + 1);
      v356 = *(char **)&v686[8];
      if (*(void *)&v686[8] >= *(void *)&v686[16]) {
        break;
      }
      **(_DWORD **)&v686[8] = 2 * v355;
      uint64_t v357 = (uint64_t)(v356 + 4);
LABEL_478:
      *(void *)&v686[8] = v357;
      if (v671 == v670)
      {
        (*(void (**)(void *))(v670[0] + 32))(v670);
      }
      else if (v671)
      {
        (*(void (**)(void))(*v671 + 40))();
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v620 + 1) - *(void *)v620) >> 3) <= ++v353)
      {
        v352 = *(int **)v686;
        uint64_t v347 = *(int **)&v686[8];
        int v346 = (int)v615;
        goto LABEL_526;
      }
    }
    v358 = *(char **)v686;
    uint64_t v359 = (uint64_t)(*(void *)&v686[8] - *(void *)v686) >> 2;
    unint64_t v360 = v359 + 1;
    if ((unint64_t)(v359 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v361 = *(void *)&v686[16] - *(void *)v686;
    if ((uint64_t)(*(void *)&v686[16] - *(void *)v686) >> 1 > v360) {
      unint64_t v360 = v361 >> 1;
    }
    if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v362 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v362 = v360;
    }
    if (v362)
    {
      if (v362 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v363 = operator new(4 * v362);
      v364 = &v363[4 * v359];
      _DWORD *v364 = 2 * v355;
      uint64_t v357 = (uint64_t)(v364 + 1);
      if (v356 == v358) {
        goto LABEL_476;
      }
    }
    else
    {
      v363 = 0;
      v364 = (_DWORD *)(4 * v359);
      *(_DWORD *)(4 * v359) = 2 * v355;
      uint64_t v357 = 4 * v359 + 4;
      if (v356 == v358)
      {
LABEL_476:
        *(void *)v686 = v364;
        *(void *)&v686[8] = v357;
        *(void *)&v686[16] = &v363[4 * v362];
        if (v358) {
          operator delete(v358);
        }
        goto LABEL_478;
      }
    }
    unint64_t v365 = v356 - 4 - v358;
    if (v365 < 0x2C) {
      goto LABEL_810;
    }
    if ((unint64_t)(v358 - v363) < 0x20) {
      goto LABEL_810;
    }
    uint64_t v366 = (v365 >> 2) + 1;
    uint64_t v367 = 4 * (v366 & 0x7FFFFFFFFFFFFFF8);
    v368 = &v356[-v367];
    v364 = (_DWORD *)((char *)v364 - v367);
    v369 = &v363[4 * v359 - 16];
    v370 = v356 - 16;
    uint64_t v371 = v366 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v372 = *(_OWORD *)v370;
      *(v369 - 1) = *((_OWORD *)v370 - 1);
      _OWORD *v369 = v372;
      v369 -= 2;
      v370 -= 32;
      v371 -= 8;
    }
    while (v371);
    v356 = v368;
    if (v366 != (v366 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_810:
      do
      {
        int v373 = *((_DWORD *)v356 - 1);
        v356 -= 4;
        *--v364 = v373;
      }
      while (v356 != v358);
    }
    goto LABEL_476;
  }
LABEL_567:
  long long v680 = 0uLL;
  v681 = 0;
  uint64_t v678 = 0;
  __s2 = 0;
  unint64_t v679 = 0;
  v675 = 0;
  v674 = 0;
  v676[0] = 0;
  if (v346 >= 1)
  {
    unsigned int v427 = v346;
    v428 = 0;
    v429 = 0;
    v430 = 0;
    v632 = 0;
    v636 = 0;
    v640 = 0;
    v431 = 0;
    v432 = 0;
    v433 = 0;
    uint64_t v434 = 0;
    uint64_t v435 = v427;
    uint64_t v623 = v427;
    while (1)
    {
      if (*((void *)v647 + 6 * v434 + 2) == 1)
      {
        v436 = v429;
        v437 = v431;
        v438 = v432;
      }
      else
      {
        *((void *)&v680 + 1) = v433;
        uint64_t v678 = (uint64_t)v432;
        v675 = (char *)v431;
        uint64_t v439 = *(void *)v686;
        if (*(void *)&v686[8] != *(void *)v686)
        {
          unint64_t v440 = 0;
          v437 = v431;
          v438 = v432;
          uint64_t v628 = v434;
          while (1)
          {
            uint64_t v442 = *(void *)(*(void *)(*(void *)v620 + 24 * v440) + 8 * v434);
            if (v442 != 0x8000000000000000)
            {
              if (v433 < v640)
              {
                *(_DWORD *)v433 = *(_DWORD *)(v439 + 4 * v440);
                v433 += 4;
                *((void *)&v680 + 1) = v433;
                if (v432 < v632) {
                  goto LABEL_595;
                }
LABEL_611:
                v477 = (char *)__s2;
                v478 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v432 - (unsigned char *)__s2);
                uint64_t v479 = (v432 - (unsigned char *)__s2) >> 3;
                unint64_t v480 = v479 + 1;
                if ((unint64_t)(v479 + 1) >> 61) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                if ((v632 - (unsigned char *)__s2) >> 2 > v480) {
                  unint64_t v480 = (v632 - (unsigned char *)__s2) >> 2;
                }
                if ((unint64_t)(v632 - (unsigned char *)__s2) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v481 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v481 = v480;
                }
                if (v481)
                {
                  v626 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v432 - (unsigned char *)__s2);
                  uint64_t v633 = (v432 - (unsigned char *)__s2) >> 3;
                  if (v481 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v482 = v442;
                  v483 = v429;
                  v484 = v432;
                  v485 = v431;
                  v486 = v433;
                  unint64_t v487 = v481;
                  v488 = operator new(8 * v481);
                  v433 = v486;
                  v431 = v485;
                  v432 = v484;
                  v429 = v483;
                  unint64_t v481 = v487;
                  uint64_t v479 = v633;
                  v478 = v626;
                  v438 = &v488[8 * v633];
                  void *v438 = v482;
                  uint64_t v457 = (uint64_t)(v438 + 1);
                  if (v432 != v477)
                  {
LABEL_620:
                    unint64_t v489 = v432 - 8 - v477;
                    if (v489 < 0x168
                      || (char *)v478 + (void)v488 - (v489 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)v478
                                                                                         + (void)v488
                                                                                         - 8
                      || &v432[-(v489 & 0xFFFFFFFFFFFFFFF8) - 8] > v432 - 8
                      || (unint64_t)(v432 - v488 - (void)v478) < 0x20)
                    {
                      v490 = v432;
                      uint64_t v434 = v628;
                    }
                    else
                    {
                      uint64_t v510 = (v489 >> 3) + 1;
                      uint64_t v511 = 8 * (v510 & 0x3FFFFFFFFFFFFFFCLL);
                      v490 = &v432[-v511];
                      v438 = (void *)((char *)v438 - v511);
                      v512 = &v488[8 * v479 - 16];
                      v513 = (long long *)(v432 - 16);
                      uint64_t v514 = v510 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v515 = *v513;
                        *(v512 - 1) = *(v513 - 1);
                        _OWORD *v512 = v515;
                        v512 -= 2;
                        v513 -= 2;
                        v514 -= 4;
                      }
                      while (v514);
                      uint64_t v434 = v628;
                      if (v510 == (v510 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_623:
                        __s2 = v438;
                        v632 = &v488[8 * v481];
                        unint64_t v679 = (unint64_t)v632;
                        if (v477) {
                          goto LABEL_624;
                        }
                        goto LABEL_625;
                      }
                    }
                    do
                    {
                      uint64_t v491 = *((void *)v490 - 1);
                      v490 -= 8;
                      *--v438 = v491;
                    }
                    while (v490 != v477);
                    goto LABEL_623;
                  }
                }
                else
                {
                  v488 = 0;
                  v438 = (void *)(8 * v479);
                  *(void *)(8 * v479) = v442;
                  uint64_t v457 = 8 * v479 + 8;
                  if (v432 != v477) {
                    goto LABEL_620;
                  }
                }
                uint64_t v434 = v628;
                __s2 = v438;
                v632 = &v488[8 * v481];
                unint64_t v679 = (unint64_t)v632;
                if (v477)
                {
LABEL_624:
                  v492 = v477;
                  v493 = v433;
                  v494 = v431;
                  operator delete(v492);
                  v431 = v494;
                  v433 = v493;
                }
LABEL_625:
                uint64_t v678 = v457;
                v432 = (char *)v457;
                goto LABEL_576;
              }
              v458 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v433 - v429);
              uint64_t v459 = (v433 - v429) >> 2;
              unint64_t v460 = v459 + 1;
              if ((unint64_t)(v459 + 1) >> 62) {
LABEL_783:
              }
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              if ((v640 - v429) >> 1 > v460) {
                unint64_t v460 = (v640 - v429) >> 1;
              }
              if ((unint64_t)(v640 - v429) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v461 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v461 = v460;
              }
              if (v461)
              {
                v625 = (absl::lts_2020_02_25::hash_internal::CityHashState *)(v433 - v429);
                uint64_t v641 = (v433 - v429) >> 2;
                if (v461 >> 62) {
LABEL_782:
                }
                  std::__throw_bad_array_new_length[abi:ne180100]();
                unint64_t v462 = v440;
                uint64_t v463 = v442;
                v464 = v429;
                v465 = v432;
                v466 = v431;
                v467 = v433;
                unint64_t v468 = v461;
                v469 = operator new(4 * v461);
                v433 = v467;
                v431 = v466;
                v432 = v465;
                v429 = v464;
                uint64_t v442 = v463;
                unint64_t v461 = v468;
                unint64_t v440 = v462;
                uint64_t v459 = v641;
                v458 = v625;
                v428 = &v469[4 * v641];
                *(_DWORD *)v428 = *(_DWORD *)(v439 + 4 * v462);
                uint64_t v470 = (uint64_t)(v428 + 4);
                if (v433 != v429)
                {
LABEL_605:
                  unint64_t v471 = v433 - 4 - v429;
                  if (v471 < 0xBC
                    || (char *)v458 + (void)v469 - (v471 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v458 + (void)v469 - 4
                    || &v433[-(v471 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v433 - 4
                    || (unint64_t)(v433 - ((char *)v458 + (void)v469)) < 0x20)
                  {
                    v472 = v433;
                    uint64_t v434 = v628;
                  }
                  else
                  {
                    uint64_t v504 = (v471 >> 2) + 1;
                    uint64_t v505 = 4 * (v504 & 0x7FFFFFFFFFFFFFF8);
                    v472 = &v433[-v505];
                    v428 -= v505;
                    v506 = &v469[4 * v459 - 16];
                    v507 = v433 - 16;
                    uint64_t v508 = v504 & 0x7FFFFFFFFFFFFFF8;
                    uint64_t v434 = v628;
                    do
                    {
                      long long v509 = *(_OWORD *)v507;
                      *(v506 - 1) = *((_OWORD *)v507 - 1);
                      _OWORD *v506 = v509;
                      v506 -= 2;
                      v507 -= 32;
                      v508 -= 8;
                    }
                    while (v508);
                    if (v504 == (v504 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_608:
                      *(void *)&long long v680 = v428;
                      v640 = &v469[4 * v461];
                      v681 = v640;
                      if (v429) {
                        goto LABEL_609;
                      }
                      goto LABEL_610;
                    }
                  }
                  do
                  {
                    int v473 = *((_DWORD *)v472 - 1);
                    v472 -= 4;
                    *((_DWORD *)v428 - 1) = v473;
                    v428 -= 4;
                  }
                  while (v472 != v429);
                  goto LABEL_608;
                }
              }
              else
              {
                v469 = 0;
                v428 = (char *)(4 * v459);
                *(_DWORD *)(4 * v459) = *(_DWORD *)(v439 + 4 * v440);
                uint64_t v470 = 4 * v459 + 4;
                if (v433 != v429) {
                  goto LABEL_605;
                }
              }
              uint64_t v434 = v628;
              *(void *)&long long v680 = v428;
              v640 = &v469[4 * v461];
              v681 = v640;
              if (v429)
              {
LABEL_609:
                v474 = v429;
                v475 = v431;
                v476 = v432;
                operator delete(v474);
                v432 = v476;
                v431 = v475;
              }
LABEL_610:
              v429 = v428;
              v433 = (char *)v470;
              *((void *)&v680 + 1) = v470;
              if (v432 >= v632) {
                goto LABEL_611;
              }
LABEL_595:
              *(void *)v432 = v442;
              uint64_t v457 = (uint64_t)(v432 + 8);
              goto LABEL_625;
            }
            if (v431 < v636)
            {
              *(_DWORD *)v431 = *(_DWORD *)(v439 + 4 * v440);
              v441 = (uint64_t *)((char *)v431 + 4);
            }
            else
            {
              v443 = (uint64_t *)v674;
              v444 = (absl::lts_2020_02_25::hash_internal::CityHashState *)((char *)v431 - (unsigned char *)v674);
              uint64_t v445 = ((char *)v431 - (unsigned char *)v674) >> 2;
              unint64_t v446 = v445 + 1;
              if ((unint64_t)(v445 + 1) >> 62) {
                goto LABEL_783;
              }
              if (((char *)v636 - (unsigned char *)v674) >> 1 > v446) {
                unint64_t v446 = ((char *)v636 - (unsigned char *)v674) >> 1;
              }
              if ((unint64_t)((char *)v636 - (unsigned char *)v674) >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v447 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v447 = v446;
              }
              if (v447)
              {
                v624 = (absl::lts_2020_02_25::hash_internal::CityHashState *)((char *)v431 - (unsigned char *)v674);
                uint64_t v637 = ((char *)v431 - (unsigned char *)v674) >> 2;
                if (v447 >> 62) {
                  goto LABEL_782;
                }
                v448 = v429;
                v449 = v432;
                v450 = v431;
                v451 = v433;
                unint64_t v452 = v447;
                v453 = operator new(4 * v447);
                v433 = v451;
                v431 = v450;
                v432 = v449;
                v429 = v448;
                unint64_t v447 = v452;
                uint64_t v445 = v637;
                v444 = v624;
                v437 = (uint64_t *)&v453[4 * v637];
                *(_DWORD *)v437 = *(_DWORD *)(v439 + 4 * v440);
                v441 = (uint64_t *)((char *)v437 + 4);
                if (v450 != v443)
                {
LABEL_588:
                  unint64_t v454 = (char *)v431 - 4 - (char *)v443;
                  if (v454 < 0xBC
                    || (char *)v444 + (void)v453 - (v454 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v444 + (void)v453 - 4
                    || (char *)v431 - (v454 & 0xFFFFFFFFFFFFFFFCLL) - 4 > (char *)v431 - 4
                    || (unint64_t)((char *)v431 - v453 - (void)v444) < 0x20)
                  {
                    v455 = v431;
                    uint64_t v434 = v628;
                  }
                  else
                  {
                    uint64_t v498 = (v454 >> 2) + 1;
                    uint64_t v499 = 4 * (v498 & 0x7FFFFFFFFFFFFFF8);
                    v455 = (uint64_t *)((char *)v431 - v499);
                    v437 = (uint64_t *)((char *)v437 - v499);
                    v500 = &v453[4 * v445 - 16];
                    v501 = v431 - 2;
                    uint64_t v502 = v498 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v503 = *(_OWORD *)v501;
                      *(v500 - 1) = *((_OWORD *)v501 - 1);
                      _OWORD *v500 = v503;
                      v500 -= 2;
                      v501 -= 4;
                      v502 -= 8;
                    }
                    while (v502);
                    uint64_t v434 = v628;
                    if (v498 == (v498 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_591:
                      v674 = v437;
                      v636 = (uint64_t *)&v453[4 * v447];
                      v676[0] = v636;
                      if (!v443) {
                        goto LABEL_575;
                      }
LABEL_628:
                      v495 = v443;
                      v496 = v433;
                      v497 = v432;
                      operator delete(v495);
                      v432 = v497;
                      v433 = v496;
                      goto LABEL_575;
                    }
                  }
                  do
                  {
                    int v456 = *((_DWORD *)v455 - 1);
                    v455 = (uint64_t *)((char *)v455 - 4);
                    *((_DWORD *)v437 - 1) = v456;
                    v437 = (uint64_t *)((char *)v437 - 4);
                  }
                  while (v455 != v443);
                  goto LABEL_591;
                }
              }
              else
              {
                v453 = 0;
                v437 = (uint64_t *)(4 * v445);
                *(_DWORD *)(4 * v445) = *(_DWORD *)(v439 + 4 * v440);
                v441 = (uint64_t *)(4 * v445 + 4);
                if (v431 != v443) {
                  goto LABEL_588;
                }
              }
              uint64_t v434 = v628;
              v674 = v437;
              v636 = (uint64_t *)&v453[4 * v447];
              v676[0] = v636;
              if (v443) {
                goto LABEL_628;
              }
            }
LABEL_575:
            v675 = (char *)v441;
            v431 = v441;
LABEL_576:
            ++v440;
            uint64_t v439 = *(void *)v686;
            v436 = v428;
            v430 = v428;
            if (v440 >= (uint64_t)(*(void *)&v686[8] - *(void *)v686) >> 2) {
              goto LABEL_657;
            }
          }
        }
        v436 = v429;
        v437 = v431;
        v438 = v432;
LABEL_657:
        if (v430 == v433)
        {
          v430 = v433;
        }
        else
        {
          v433 = v430;
        }
        uint64_t v435 = v623;
      }
      ++v434;
      v429 = v436;
      v431 = v437;
      v432 = (char *)v438;
      if (v434 == v435) {
        goto LABEL_662;
      }
    }
  }
  v430 = 0;
LABEL_662:
  if (v600 != v601) {
    goto LABEL_740;
  }
  memset(&v655, 0, sizeof(v655));
  v516 = v620;
  v517 = *(uint64_t ***)v620;
  if (*((void *)v620 + 1) == *(void *)v620) {
    goto LABEL_740;
  }
  unint64_t v518 = 0;
  int v519 = (int)v615;
  uint64_t v520 = (v615 - 1);
  uint64_t v521 = (((void)v615 << 32) - 0x100000000) >> 32;
  do
  {
    v655.__r_.__value_.__l.__size_ = v655.__r_.__value_.__r.__words[0];
    if (v519 >= 2)
    {
      uint64_t v549 = 0;
      while (1)
      {
        if (*((void *)v647 + 6 * v549 + 2) == 1) {
          goto LABEL_704;
        }
        v517 = *(uint64_t ***)v516;
        uint64_t v551 = *(void *)(*(void *)(*(void *)v516 + 24 * v518) + 8 * v549);
        if (v551 == 0x8000000000000000) {
          goto LABEL_704;
        }
        uint64_t v552 = 0;
        v650 = *(void **)(*(void *)(*(void *)v516 + 24 * v518) + 8 * v549);
        v553 = (uint64_t *)((char *)v659 + 48 * v549);
        unint64_t v554 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v551)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v551));
        unint64_t v555 = ((unint64_t)*v553 >> 12) ^ (v554 >> 7);
        uint64_t v556 = v553[3];
        uint64_t v557 = 0x101010101010101 * (v554 & 0x7F);
        while (1)
        {
          unint64_t v558 = v555 & v556;
          uint64_t v559 = *(void *)(*v553 + v558);
          unint64_t v560 = ((v559 ^ v557) - 0x101010101010101) & ~(v559 ^ v557) & 0x8080808080808080;
          if (v560) {
            break;
          }
LABEL_711:
          if ((v559 & (~v559 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_699;
          }
          v552 += 8;
          unint64_t v555 = v552 + v558;
        }
        while (1)
        {
          unint64_t v561 = (v558 + (__clz(__rbit64(v560)) >> 3)) & v556;
          if (*(void *)(v553[1] + 12 * v561) == v551) {
            break;
          }
          v560 &= v560 - 1;
          if (!v560) {
            goto LABEL_711;
          }
        }
        if (v561 == v556) {
          goto LABEL_699;
        }
        int v562 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(v553, (uint64_t *)&v650) ^ 1;
        std::string::size_type v563 = v655.__r_.__value_.__l.__size_;
        if (v655.__r_.__value_.__l.__size_ >= v655.__r_.__value_.__r.__words[2]) {
          break;
        }
        *(_DWORD *)v655.__r_.__value_.__l.__size_ = v562;
        std::string::size_type v550 = v563 + 4;
        v516 = v620;
        int v519 = (int)v615;
        uint64_t v520 = (v615 - 1);
LABEL_703:
        v655.__r_.__value_.__l.__size_ = v550;
        uint64_t v521 = (((void)v615 << 32) - 0x100000000) >> 32;
LABEL_704:
        if (++v549 == v520)
        {
          v517 = *(uint64_t ***)v516;
          goto LABEL_737;
        }
      }
      v564 = (void *)v655.__r_.__value_.__r.__words[0];
      std::string::size_type v565 = v655.__r_.__value_.__l.__size_ - v655.__r_.__value_.__r.__words[0];
      uint64_t v566 = (uint64_t)(v655.__r_.__value_.__l.__size_ - v655.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v567 = v566 + 1;
      if ((unint64_t)(v566 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int64_t v568 = v655.__r_.__value_.__r.__words[2] - v655.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v655.__r_.__value_.__r.__words[2] - v655.__r_.__value_.__r.__words[0]) >> 1 > v567) {
        unint64_t v567 = v568 >> 1;
      }
      if ((unint64_t)v568 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v569 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v569 = v567;
      }
      if (v569)
      {
        if (v569 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v570 = (char *)operator new(4 * v569);
        v571 = (int *)&v570[4 * v566];
        int *v571 = v562;
        std::string::size_type v550 = (std::string::size_type)(v571 + 1);
        if ((void *)v563 != v564) {
          goto LABEL_724;
        }
      }
      else
      {
        v570 = 0;
        v571 = (int *)(4 * v566);
        *(_DWORD *)(4 * v566) = v562;
        std::string::size_type v550 = 4 * v566 + 4;
        if ((void *)v563 != v564)
        {
LABEL_724:
          unint64_t v572 = v563 - 4 - (void)v564;
          if (v572 >= 0x2C)
          {
            unint64_t v573 = v563 - (void)&v570[v565];
            uint64_t v520 = (v615 - 1);
            if (v573 >= 0x20)
            {
              uint64_t v574 = (v572 >> 2) + 1;
              uint64_t v575 = 4 * (v574 & 0x7FFFFFFFFFFFFFF8);
              std::string::size_type v576 = v563 - v575;
              v571 = (int *)((char *)v571 - v575);
              v577 = &v570[4 * v566 - 16];
              v578 = (long long *)(v563 - 16);
              uint64_t v579 = v574 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v580 = *v578;
                *((_OWORD *)v577 - 1) = *(v578 - 1);
                *(_OWORD *)v577 = v580;
                v577 -= 32;
                v578 -= 2;
                v579 -= 8;
              }
              while (v579);
              std::string::size_type v563 = v576;
              if (v574 == (v574 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_733;
              }
            }
          }
          else
          {
            uint64_t v520 = (v615 - 1);
          }
          do
          {
            int v581 = *(_DWORD *)(v563 - 4);
            v563 -= 4;
            *--v571 = v581;
          }
          while ((void *)v563 != v564);
LABEL_733:
          v655.__r_.__value_.__r.__words[0] = (std::string::size_type)v571;
          v655.__r_.__value_.__l.__size_ = v550;
          v655.__r_.__value_.__r.__words[2] = (std::string::size_type)&v570[4 * v569];
          if (v564) {
            operator delete(v564);
          }
          v516 = v620;
          int v519 = (int)v615;
          goto LABEL_703;
        }
      }
      uint64_t v520 = (v615 - 1);
      goto LABEL_733;
    }
LABEL_737:
    uint64_t v526 = 0;
    v582 = (void *)v517[3 * v518][v521];
    v650 = v582;
    v583 = (uint64_t *)((char *)v659 + 48 * (int)v521);
    unint64_t v584 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v582)
           * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                              * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                               + (void)v582));
    unint64_t v527 = (v584 >> 7) ^ ((unint64_t)*v583 >> 12);
    uint64_t v585 = v583[3];
    uint64_t v586 = 0x101010101010101 * (v584 & 0x7F);
    while (1)
    {
      unint64_t v522 = v527 & v585;
      uint64_t v523 = *(void *)(*v583 + v522);
      unint64_t v524 = ((v523 ^ v586) - 0x101010101010101) & ~(v523 ^ v586) & 0x8080808080808080;
      if (v524) {
        break;
      }
LABEL_668:
      if ((v523 & (~v523 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_698;
      }
      v526 += 8;
      unint64_t v527 = v526 + v522;
    }
    while (1)
    {
      unint64_t v525 = (v522 + (__clz(__rbit64(v524)) >> 3)) & v585;
      if (*(void **)(v583[1] + 12 * v525) == v582) {
        break;
      }
      v524 &= v524 - 1;
      if (!v524) {
        goto LABEL_668;
      }
    }
    if (v525 != v585)
    {
      int v528 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(v583, (uint64_t *)&v650);
      std::string::size_type v529 = v655.__r_.__value_.__l.__size_;
      if (v655.__r_.__value_.__l.__size_ < v655.__r_.__value_.__r.__words[2])
      {
        *(_DWORD *)v655.__r_.__value_.__l.__size_ = v528;
        std::string::size_type v530 = v529 + 4;
        v516 = v620;
        int v519 = (int)v615;
        uint64_t v521 = (((void)v615 << 32) - 0x100000000) >> 32;
        uint64_t v520 = (v615 - 1);
LABEL_694:
        v655.__r_.__value_.__l.__size_ = v530;
        v664 = (void (**)(void **))&unk_26F0BD480;
        v665[0] = (int *)v655.__r_.__value_.__l.__data_;
        v665[1] = (int *)((uint64_t)(v530 - v655.__r_.__value_.__r.__words[0]) >> 2);
        v666 = (void **)&v664;
        operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v665, a4);
        if (v666 == (void **)&v664)
        {
          v664[4]((void **)&v664);
        }
        else if (v666)
        {
          (*((void (**)(void))*v666 + 5))();
        }
        goto LABEL_698;
      }
      v531 = (void *)v655.__r_.__value_.__r.__words[0];
      std::string::size_type v532 = v655.__r_.__value_.__l.__size_ - v655.__r_.__value_.__r.__words[0];
      uint64_t v533 = (uint64_t)(v655.__r_.__value_.__l.__size_ - v655.__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v534 = v533 + 1;
      if ((unint64_t)(v533 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      int64_t v535 = v655.__r_.__value_.__r.__words[2] - v655.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v655.__r_.__value_.__r.__words[2] - v655.__r_.__value_.__r.__words[0]) >> 1 > v534) {
        unint64_t v534 = v535 >> 1;
      }
      if ((unint64_t)v535 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v536 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v536 = v534;
      }
      if (v536)
      {
        if (v536 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v537 = (char *)operator new(4 * v536);
        v538 = &v537[4 * v533];
        *(_DWORD *)v538 = v528;
        std::string::size_type v530 = (std::string::size_type)(v538 + 4);
        if ((void *)v529 != v531) {
          goto LABEL_682;
        }
      }
      else
      {
        v537 = 0;
        v538 = (char *)(4 * v533);
        *(_DWORD *)(4 * v533) = v528;
        std::string::size_type v530 = 4 * v533 + 4;
        if ((void *)v529 != v531)
        {
LABEL_682:
          unint64_t v539 = v529 - 4 - (void)v531;
          if (v539 >= 0x2C)
          {
            unint64_t v540 = v529 - (void)&v537[v532];
            uint64_t v520 = (v615 - 1);
            if (v540 >= 0x20)
            {
              uint64_t v541 = (v539 >> 2) + 1;
              uint64_t v542 = 4 * (v541 & 0x7FFFFFFFFFFFFFF8);
              std::string::size_type v543 = v529 - v542;
              v538 -= v542;
              v544 = &v537[4 * v533 - 16];
              v545 = (long long *)(v529 - 16);
              uint64_t v546 = v541 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v547 = *v545;
                *((_OWORD *)v544 - 1) = *(v545 - 1);
                *(_OWORD *)v544 = v547;
                v544 -= 32;
                v545 -= 2;
                v546 -= 8;
              }
              while (v546);
              std::string::size_type v529 = v543;
              if (v541 == (v541 & 0x7FFFFFFFFFFFFFF8)) {
                goto LABEL_691;
              }
            }
          }
          else
          {
            uint64_t v520 = (v615 - 1);
          }
          do
          {
            int v548 = *(_DWORD *)(v529 - 4);
            v529 -= 4;
            *((_DWORD *)v538 - 1) = v548;
            v538 -= 4;
          }
          while ((void *)v529 != v531);
LABEL_691:
          v655.__r_.__value_.__r.__words[0] = (std::string::size_type)v538;
          v655.__r_.__value_.__l.__size_ = v530;
          v655.__r_.__value_.__r.__words[2] = (std::string::size_type)&v537[4 * v536];
          if (v531) {
            operator delete(v531);
          }
          v516 = v620;
          int v519 = (int)v615;
          uint64_t v521 = (((void)v615 << 32) - 0x100000000) >> 32;
          goto LABEL_694;
        }
      }
      uint64_t v520 = (v615 - 1);
      goto LABEL_691;
    }
LABEL_698:
    v517 = *(uint64_t ***)v516;
LABEL_699:
    ++v518;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v516 + 1) - (void)v517) >> 3) > v518);
  if (v655.__r_.__value_.__r.__words[0])
  {
    v655.__r_.__value_.__l.__size_ = v655.__r_.__value_.__r.__words[0];
    operator delete(v655.__r_.__value_.__l.__data_);
  }
LABEL_740:
  if (v674) {
    operator delete(v674);
  }
  if (__s2) {
    operator delete(__s2);
  }
  if (v430)
  {
    *((void *)&v680 + 1) = v430;
    operator delete(v430);
  }
  if (*(void *)v686)
  {
    *(void *)&v686[8] = *(void *)v686;
    operator delete(*(void **)v686);
  }
LABEL_748:
  if (v656) {
    operator delete(v656);
  }
  v587 = (void **)v659;
  if (v659)
  {
    v588 = v660;
    v589 = v659;
    if (v660 != v659)
    {
      do
      {
        if (*(v588 - 3))
        {
          operator delete(*(v588 - 6));
          *(v588 - 1) = 0;
          *(v588 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v588 - 5) = 0;
          *(v588 - 4) = 0;
          *(v588 - 3) = 0;
        }
        v590 = *(v588 - 2);
        if (v590) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v590);
        }
        v588 -= 6;
      }
      while (v588 != v587);
      v589 = v659;
    }
    v660 = v587;
    operator delete(v589);
  }
  v591 = (char *)v662;
  if (v662)
  {
    v592 = __p;
    v388 = v662;
    if (__p != v662)
    {
      v593 = (char *)__p;
      do
      {
        v595 = (void *)*((void *)v593 - 3);
        v593 -= 24;
        v594 = v595;
        if (v595)
        {
          *(v592 - 2) = v594;
          operator delete(v594);
        }
        v592 = v593;
      }
      while (v593 != v591);
      v388 = v662;
    }
    std::string __p = v591;
LABEL_767:
    operator delete(v388);
  }
LABEL_768:
  v596 = (void **)v647;
  if (v647)
  {
    v597 = v648;
    v598 = v647;
    if (v648 != v647)
    {
      do
      {
        if (*(v597 - 3))
        {
          operator delete(*(v597 - 6));
          *(v597 - 1) = 0;
          *(v597 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v597 - 5) = 0;
          *(v597 - 4) = 0;
          *(v597 - 3) = 0;
        }
        v599 = *(v597 - 2);
        if (v599) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v599);
        }
        v597 -= 6;
      }
      while (v597 != v596);
      v598 = v647;
    }
    v648 = v596;
    operator delete(v598);
  }
}

void sub_23CDA5138()
{
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)(v0 - 160));
}

void sub_23CDA5140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  std::vector<std::vector<int>>::~vector[abi:ne180100](&a68);
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
  _Unwind_Resume(a1);
}

void sub_23CDA54AC()
{
  std::function<std::vector<operations_research::sat::IntegerEncoder::ValueLiteralPair> ()(operations_research::sat::Model *)>::~function((void *)(v0 - 240));
  JUMPOUT(0x23CDA54B8);
}

void sub_23CDA54E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  google::LogMessage::~LogMessage((google::LogMessage *)&a65);
  JUMPOUT(0x23CDA55CCLL);
}

void sub_23CDA54F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v70 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v70;
    operator delete(v70);
    uint64_t v71 = (void *)STACK[0x2A0];
    if (STACK[0x2A0])
    {
      STACK[0x2A8] = (unint64_t)v71;
      operator delete(v71);
      unint64_t v72 = *(void **)(v68 - 240);
      if (v72)
      {
        *(void *)(v68 - 232) = v72;
        operator delete(v72);
        uint64_t v73 = *(void **)(v68 - 160);
        if (v73)
        {
          *(void *)(v68 - 152) = v73;
          operator delete(v73);
        }
        if (a62)
        {
          a63 = (uint64_t)a62;
          operator delete(a62);
        }
        std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::~vector[abi:ne180100](&a65);
        std::vector<std::vector<int>>::~vector[abi:ne180100](&a68);
        std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
        _Unwind_Resume(a1);
      }
      JUMPOUT(0x23CDA52F8);
    }
    JUMPOUT(0x23CDA52F0);
  }
  JUMPOUT(0x23CDA52E8);
}

void sub_23CDA5564()
{
  uint64_t v2 = *(void **)v0;
  if (*(void *)v0)
  {
    *(void *)(v0 + 8) = v2;
    operator delete(v2);
  }
  *(void *)(v1 - 232) = v0;
  JUMPOUT(0x23CDA55CCLL);
}

void sub_23CDA558C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
}

void sub_23CDA55A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
}

void sub_23CDA55B4()
{
  if (*(void *)(v0 - 136)) {
    JUMPOUT(0x23CDA564CLL);
  }
  JUMPOUT(0x23CDA55E4);
}

void sub_23CDA55C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v70 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v70;
    operator delete(v70);
    uint64_t v71 = *(char **)(v68 - 240);
    if (!v71)
    {
LABEL_3:
      if (!*(void *)(v68 - 136)) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v71 = *(char **)(v68 - 240);
    if (!v71) {
      goto LABEL_3;
    }
  }
  uint64_t v73 = *(char **)(v68 - 232);
  unint64_t v74 = v71;
  if (v73 != v71)
  {
    uint64_t v75 = *(char **)(v68 - 232);
    do
    {
      uint64_t v77 = (void *)*((void *)v75 - 3);
      v75 -= 24;
      size_t v76 = v77;
      if (v77)
      {
        *((void *)v73 - 2) = v76;
        operator delete(v76);
      }
      uint64_t v73 = v75;
    }
    while (v75 != v71);
    unint64_t v74 = *(char **)(v68 - 240);
  }
  *(void *)(v68 - 232) = v71;
  operator delete(v74);
  if (!*(void *)(v68 - 136))
  {
LABEL_4:
    unint64_t v72 = *(void **)(v68 - 128);
    if (!v72) {
      goto LABEL_15;
    }
LABEL_16:
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v72);
LABEL_15:
    std::vector<std::vector<int>>::~vector[abi:ne180100](&a68);
    std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::~vector[abi:ne180100](&a49);
    _Unwind_Resume(a1);
  }
LABEL_14:
  operator delete(*(void **)(v68 - 160));
  *(void *)(v68 - 16google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(void *)(v68 - 12google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  a25[1] = 0;
  a25[2] = 0;
  *a25 = 0;
  unint64_t v72 = *(void **)(v68 - 128);
  if (!v72) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

void *std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[1] = v4;
    unint64_t v5 = &v4[48 * a2];
    a1[2] = v5;
    do
    {
      *(void *)uint64_t v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *((void *)v4 + 5) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23CDA575C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = (void **)*v1;
  if (*v1)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 3))
        {
          operator delete(*(v4 - 6));
          *(v4 - 1) = 0;
          *(v4 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v4 - 5) = 0;
          *(v4 - 4) = 0;
          *(v4 - 3) = 0;
        }
        uint64_t v6 = *(v4 - 2);
        if (v6) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
        }
        v4 -= 6;
      }
      while (v4 != v3);
      unint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::anonymous namespace'::GetEncoding(uint64_t a1, signed int a2, uint64_t a3)
{
  *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v5 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
  uint64_t v6 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a3);
  operations_research::sat::IntegerEncoder::FullDomainEncoding(v6, a2, &v18);
  unint64_t v7 = v18;
  uint64_t v8 = v19;
  if (v18 != v19)
  {
    do
    {
      uint64_t v14 = 0;
      unint64_t v16 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v7)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v7));
      unint64_t v15 = (v16 >> 7) ^ (*(void *)a1 >> 12);
      uint64_t v17 = *(void *)(a1 + 24);
      while (1)
      {
        unint64_t v9 = v15 & v17;
        uint64_t v10 = *(void *)(*(void *)a1 + v9);
        unint64_t v11 = ((v10 ^ (0x101010101010101 * (v16 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                            * (v16 & 0x7F))) & 0x8080808080808080;
        if (v11) {
          break;
        }
LABEL_7:
        if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v13 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)a1, v16);
          uint64_t v12 = *v5;
          *(void *)(*v5 + 12 * v13) = *(void *)v7;
          goto LABEL_10;
        }
        v14 += 8;
        unint64_t v15 = v14 + v9;
      }
      uint64_t v12 = *v5;
      while (1)
      {
        unint64_t v13 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v17;
        if (*(void *)(v12 + 12 * v13) == *(void *)v7) {
          break;
        }
        v11 &= v11 - 1;
        if (!v11) {
          goto LABEL_7;
        }
      }
LABEL_10:
      *(_DWORD *)(v12 + 12 * v13 + 8) = *((_DWORD *)v7 + 2);
      v7 += 12;
    }
    while (v7 != v8);
    unint64_t v7 = v18;
  }
  if (v7)
  {
    uint64_t v19 = v7;
    operator delete(v7);
  }
}

void sub_23CDA5974(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(v1);
  _Unwind_Resume(a1);
}

void sub_23CDA5988(_Unwind_Exception *a1)
{
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(v1);
  _Unwind_Resume(a1);
}

void sub_23CDA599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~flat_hash_map(v11);
  _Unwind_Resume(a1);
}

void operations_research::sat::anonymous namespace'::ProcessOneColumn(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  uint64_t v97 = (a1[1] - *a1) >> 2;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v100 = (v6 - *a2) >> 3;
  if (v97 != v100) {
    google::MakeCheckOpString<unsigned long,unsigned long>((int)&v97, (int)&v100, "line_literals.size() == values.size()");
  }
  uint64_t v97 = 0;
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  if (v6 == v7)
  {
    uint64_t v10 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = 0;
      unint64_t v13 = *(int **)(v7 + 8 * v11);
      uint64_t v94 = v13;
      unint64_t v14 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + (unint64_t)v13)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + (void)v13));
      unint64_t v15 = (v14 >> 7) ^ ((unint64_t)*a3 >> 12);
      uint64_t v16 = a3[3];
      uint64_t v17 = 0x101010101010101 * (v14 & 0x7F);
      while (1)
      {
        unint64_t v18 = v15 & v16;
        uint64_t v19 = *(void *)(*a3 + v18);
        unint64_t v20 = ((v19 ^ v17) - 0x101010101010101) & ~(v19 ^ v17) & 0x8080808080808080;
        if (v20) {
          break;
        }
LABEL_9:
        if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0)
        {
          uint64_t v22 = *a1;
          goto LABEL_15;
        }
        v12 += 8;
        unint64_t v15 = v12 + v18;
      }
      while (1)
      {
        unint64_t v21 = (v18 + (__clz(__rbit64(v20)) >> 3)) & v16;
        if (*(int **)(a3[1] + 12 * v21) == v13) {
          break;
        }
        v20 &= v20 - 1;
        if (!v20) {
          goto LABEL_9;
        }
      }
      uint64_t v22 = *a1;
      if (v21 == v16)
      {
LABEL_15:
        LODWORD(v10google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = *(_DWORD *)(v22 + 4 * v11) ^ 1;
        uint64_t v107 = (void (**)(void **))&unk_26F0BD480;
        v108[0] = (int *)&v100;
        v108[1] = (int *)1;
        uint64_t v109 = (void **)&v107;
        operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v108, a5);
        int64_t v23 = v109;
        if (v109 == (void **)&v107)
        {
          v107[4]((void **)&v107);
          goto LABEL_4;
        }
        goto LABEL_30;
      }
      if (v10 >= v9)
      {
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v8) >> 2) + 1;
        if (v24 > 0x1555555555555555) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v9 - v8) >> 2) > v24) {
          unint64_t v24 = 0x5555555555555556 * ((v9 - v8) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v25 = 0x1555555555555555;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v26 = (char *)operator new(12 * v25);
        uint64_t v27 = &v26[4 * ((v10 - v8) >> 2)];
        *(void *)uint64_t v27 = v13;
        *((_DWORD *)v27 + 2) = *(_DWORD *)(v22 + 4 * v11);
        for (uint64_t i = v27; v10 != v8; *((_DWORD *)i + 2) = v30)
        {
          uint64_t v29 = *(void *)(v10 - 12);
          v10 -= 12;
          int v30 = *((_DWORD *)v10 + 2);
          *(void *)(i - 12) = v29;
          i -= 12;
        }
        unint64_t v9 = &v26[12 * v25];
        uint64_t v10 = v27 + 12;
        uint64_t v97 = (uint64_t)i;
        unint64_t v98 = v27 + 12;
        uint64_t v99 = v9;
        if (v8)
        {
          operator delete(v8);
          uint64_t v22 = *a1;
        }
        uint64_t v8 = i;
      }
      else
      {
        *(void *)uint64_t v10 = v13;
        *((_DWORD *)v10 + 2) = *(_DWORD *)(v22 + 4 * v11);
        v10 += 12;
      }
      unint64_t v98 = v10;
      uint64_t v31 = *(unsigned int *)(v22 + 4 * v11);
      unint64_t v32 = v31 | ((unint64_t)*(unsigned int *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(a3, (uint64_t *)&v94) << 32);
      unint64_t v104 = (void (**)(void **))&unk_26F0BF9F8;
      unint64_t v105 = v32;
      int v106 = (void **)&v104;
      uint64_t v33 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a5);
      operations_research::sat::SatSolver::AddBinaryClause(v33, v105 ^ 1, SHIDWORD(v105));
      int64_t v23 = v106;
      if (v106 == (void **)&v104)
      {
        v104[4]((void **)&v104);
        goto LABEL_4;
      }
LABEL_30:
      if (v23) {
        (*((void (**)(void **))*v23 + 5))(v23);
      }
LABEL_4:
      ++v11;
      uint64_t v7 = *a2;
    }
    while (v11 < (a2[1] - *a2) >> 3);
    uint64_t v34 = v97;
  }
  unint64_t v35 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v10[-v34] >> 2));
  if (v10 == (char *)v34) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v35;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,false>(v34, (uint64_t *)v10, (uint64_t)&v94, v36, 1);
  uint64_t v94 = 0;
  unint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v38 = *(const void **)a4;
  uint64_t v37 = *(void *)(a4 + 8);
  int64_t v39 = v37 - *(void *)a4;
  if (v37 == *(void *)a4)
  {
    unint64_t v40 = 0;
    uint64_t v41 = (char *)v97;
    uint64_t v42 = &v98[-v97];
    if (v98 == (char *)v97) {
      goto LABEL_103;
    }
LABEL_44:
    uint64_t v43 = 0;
    unint64_t v44 = 0;
    unint64_t v45 = (uint64_t)v42 / 12;
    while (1)
    {
      unint64_t v46 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2;
      unint64_t v47 = (v95 - (char *)v94) >> 2;
      if (v46 <= v47)
      {
        if (v46 < v47) {
          unint64_t v95 = (char *)&v94[v46];
        }
      }
      else
      {
        std::vector<operations_research::sat::Literal>::__append((uint64_t)&v94, v46 - v47);
      }
      uint64_t v100 = *(void *)&v41[12 * v43];
      unint64_t v48 = (int)v44;
      if (v45 > (int)v44) {
        break;
      }
LABEL_78:
      int v69 = *(_DWORD *)gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(a3, &v100) ^ 1;
      uint64_t v70 = v95;
      unint64_t v91 = v44;
      if (v95 >= v96)
      {
        unint64_t v72 = v94;
        int64_t v73 = v95 - (char *)v94;
        uint64_t v74 = (v95 - (char *)v94) >> 2;
        unint64_t v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v76 = v96 - (char *)v94;
        if ((v96 - (char *)v94) >> 1 > v75) {
          unint64_t v75 = v76 >> 1;
        }
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v75;
        }
        if (v77)
        {
          if (v77 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v78 = (char *)operator new(4 * v77);
          unint64_t v79 = (int *)&v78[4 * v74];
          *unint64_t v79 = v69;
          uint64_t v71 = (uint64_t)(v79 + 1);
          if (v70 == (char *)v72) {
            goto LABEL_97;
          }
        }
        else
        {
          int v78 = 0;
          unint64_t v79 = (int *)(4 * v74);
          *(_DWORD *)(4 * v74) = v69;
          uint64_t v71 = 4 * v74 + 4;
          if (v70 == (char *)v72)
          {
LABEL_97:
            uint64_t v94 = v79;
            unint64_t v95 = (char *)v71;
            uint64_t v96 = &v78[4 * v77];
            if (v72) {
              operator delete(v72);
            }
            goto LABEL_99;
          }
        }
        unint64_t v80 = v70 - 4 - (char *)v72;
        if (v80 < 0x2C) {
          goto LABEL_117;
        }
        if ((unint64_t)(v70 - &v78[v73]) < 0x20) {
          goto LABEL_117;
        }
        uint64_t v81 = (v80 >> 2) + 1;
        uint64_t v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v83 = &v70[-v82];
        unint64_t v79 = (int *)((char *)v79 - v82);
        unint64_t v84 = &v78[4 * v74 - 16];
        uint64_t v85 = v70 - 16;
        uint64_t v86 = v81 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v87 = *(_OWORD *)v85;
          *((_OWORD *)v84 - 1) = *((_OWORD *)v85 - 1);
          *(_OWORD *)unint64_t v84 = v87;
          v84 -= 32;
          v85 -= 32;
          v86 -= 8;
        }
        while (v86);
        uint64_t v70 = v83;
        if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_117:
          do
          {
            int v88 = *((_DWORD *)v70 - 1);
            v70 -= 4;
            *--unint64_t v79 = v88;
          }
          while (v70 != (char *)v72);
        }
        goto LABEL_97;
      }
      *(_DWORD *)unint64_t v95 = v69;
      uint64_t v71 = (uint64_t)(v70 + 4);
LABEL_99:
      unint64_t v95 = (char *)v71;
      uint64_t v101 = (void (**)(void **))&unk_26F0BD480;
      v102[0] = v94;
      v102[1] = (int *)((v71 - (uint64_t)v94) >> 2);
      uint64_t v103 = (void **)&v101;
      operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v102, a5);
      unint64_t v44 = v91;
      if (v103 == (void **)&v101)
      {
        v101[4]((void **)&v101);
      }
      else if (v103)
      {
        (*((void (**)(void))*v103 + 5))();
      }
      uint64_t v43 = (int)v91;
      if (v45 <= (int)v91)
      {
        unint64_t v40 = v94;
        goto LABEL_103;
      }
    }
    while (1)
    {
      if (*(void *)&v41[12 * v48] != v100)
      {
LABEL_77:
        unint64_t v44 = v48;
        goto LABEL_78;
      }
      int v50 = (int *)&v41[12 * v48 + 8];
      unint64_t v51 = v95;
      if (v95 >= v96) {
        break;
      }
      *(_DWORD *)unint64_t v95 = *v50;
      uint64_t v49 = (uint64_t)(v51 + 4);
LABEL_54:
      unint64_t v95 = (char *)v49;
      if (++v48 == v45)
      {
        unint64_t v48 = v45;
        goto LABEL_77;
      }
    }
    int64_t v52 = v94;
    int64_t v53 = v95 - (char *)v94;
    uint64_t v54 = (v95 - (char *)v94) >> 2;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 62) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v56 = v96 - (char *)v94;
    if ((v96 - (char *)v94) >> 1 > v55) {
      unint64_t v55 = v56 >> 1;
    }
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v55;
    }
    if (v57)
    {
      if (v57 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v58 = (char *)operator new(4 * v57);
      long long v59 = (int *)&v58[4 * v54];
      *long long v59 = *v50;
      uint64_t v49 = (uint64_t)(v59 + 1);
      if (v51 == (char *)v52) {
        goto LABEL_74;
      }
    }
    else
    {
      uint64_t v58 = 0;
      long long v59 = (int *)(4 * v54);
      *(_DWORD *)(4 * v54) = *v50;
      uint64_t v49 = 4 * v54 + 4;
      if (v51 == (char *)v52)
      {
LABEL_74:
        uint64_t v94 = v59;
        unint64_t v95 = (char *)v49;
        uint64_t v96 = &v58[4 * v57];
        if (v52) {
          operator delete(v52);
        }
        goto LABEL_54;
      }
    }
    unint64_t v60 = v51 - 4 - (char *)v52;
    if (v60 < 0x2C) {
      goto LABEL_118;
    }
    if ((unint64_t)(v51 - &v58[v53]) < 0x20) {
      goto LABEL_118;
    }
    uint64_t v61 = (v60 >> 2) + 1;
    uint64_t v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v63 = &v51[-v62];
    long long v59 = (int *)((char *)v59 - v62);
    uint64_t v64 = &v58[4 * v54 - 16];
    uint64_t v65 = v51 - 16;
    uint64_t v66 = v61 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v67 = *(_OWORD *)v65;
      *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
      *(_OWORD *)uint64_t v64 = v67;
      v64 -= 32;
      v65 -= 32;
      v66 -= 8;
    }
    while (v66);
    unint64_t v51 = v63;
    if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_118:
      do
      {
        int v68 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *--long long v59 = v68;
      }
      while (v51 != (char *)v52);
    }
    goto LABEL_74;
  }
  if (v39 < 0) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v40 = (int *)operator new(v37 - *(void *)a4);
  uint64_t v94 = v40;
  unint64_t v95 = (char *)v40;
  uint64_t v96 = (char *)&v40[v39 >> 2];
  memcpy(v40, v38, v39);
  unint64_t v95 = (char *)&v40[v39 >> 2];
  uint64_t v41 = (char *)v97;
  uint64_t v42 = &v98[-v97];
  if (v98 != (char *)v97) {
    goto LABEL_44;
  }
LABEL_103:
  if (v40)
  {
    unint64_t v95 = (char *)v40;
    operator delete(v40);
    uint64_t v41 = (char *)v97;
  }
  if (v41) {
    operator delete(v41);
  }
}

void sub_23CDA6300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)va);
}

void sub_23CDA630C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *gtl::FindOrDie<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *a2)
       * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                          * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                           + *a2));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = (v4 >> 7) ^ ((unint64_t)*a1 >> 12);
  uint64_t v8 = a1[3];
  uint64_t v9 = 0x101010101010101 * (v4 & 0x7F);
  while (1)
  {
    uint64_t v10 = v7 & v8;
    uint64_t v11 = *(void *)(v5 + v10);
    unint64_t v12 = ((v11 ^ v9) - 0x101010101010101) & ~(v11 ^ v9) & 0x8080808080808080;
    if (v12) {
      break;
    }
LABEL_5:
    if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v2 += 8;
    unint64_t v7 = v2 + v10;
  }
  while (1)
  {
    unint64_t v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v8;
    unint64_t v14 = (void *)(v6 + 12 * v13);
    if (*v14 == v3) {
      break;
    }
    v12 &= v12 - 1;
    if (!v12) {
      goto LABEL_5;
    }
  }
  if (v13 == v8)
  {
LABEL_9:
    google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v18, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
    uint64_t v16 = (void *)google::LogMessage::stream((google::LogMessage *)v18);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Check failed: it != collection.end() ", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Map key not found: ", 19);
    std::ostream::operator<<();
    google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v18);
  }
  return v14 + 1;
}

void sub_23CDA64DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void **std::vector<absl::lts_2020_02_25::flat_hash_map<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 3))
        {
          operator delete(*(v3 - 6));
          *(v3 - 1) = 0;
          *(v3 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v3 - 5) = 0;
          *(v3 - 4) = 0;
          *(v3 - 3) = 0;
        }
        uint64_t v5 = *(v3 - 2);
        if (v5) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v5);
        }
        v3 -= 6;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void operations_research::sat::AddNegatedTableConstraint(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v189 = *MEMORY[0x263EF8340];
  uint64_t v8 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a4);
  uint64_t v164 = a4;
  int64_t v168 = (unsigned int *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a4);
  if (a3[1] == *a3) {
    return;
  }
  unsigned int v166 = a2;
  uint64_t v170 = a1;
  if (a2 < 1)
  {
    uint64_t v20 = 0;
    std::string __p = 0;
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    int v178 = 0;
LABEL_44:
    operations_research::sat::CompressTuples((uint64_t)__p, (v20 - (uint64_t)__p) >> 3, 0x8000000000000000, (uint64_t)a3);
    std::vector<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>>::vector(&v174, a2);
    if (a2 < 1)
    {
LABEL_61:
      std::string v171 = 0;
      uint64_t v172 = 0;
      int v173 = 0;
      unint64_t v57 = (void *)*a3;
      uint64_t v56 = (void *)a3[1];
      uint64_t v58 = __p;
      if ((void *)*a3 != v56)
      {
        int v59 = v166;
        uint64_t v60 = v166;
        uint64_t v167 = (void *)(v164 + 32);
        uint64_t v161 = v56;
        do
        {
LABEL_63:
          uint64_t v61 = (char *)v171;
          uint64_t v172 = (char *)v171;
          if (v59 < 1)
          {
            uint64_t v154 = (int *)v171;
            goto LABEL_181;
          }
          uint64_t v62 = 0;
          uint64_t v165 = v57;
          while (1)
          {
            int64_t v63 = *(void *)(*v57 + 8 * v62);
            if (v63 != 0x8000000000000000) {
              break;
            }
LABEL_66:
            if (++v62 == v60)
            {
              uint64_t v154 = (int *)v171;
              uint64_t v56 = v161;
LABEL_181:
              unsigned __int8 v180 = (void (**)(void **))&unk_26F0BD480;
              v181[0] = v154;
              v181[1] = (int *)((v61 - (char *)v154) >> 2);
              int v182 = (void **)&v180;
              operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v181, v164);
              if (v182 == (void **)&v180)
              {
                v180[4]((void **)&v180);
LABEL_186:
                v57 += 3;
                int v59 = v166;
                if (v57 == v56) {
                  goto LABEL_189;
                }
                goto LABEL_63;
              }
              if (!v182) {
                goto LABEL_186;
              }
              (*((void (**)(void))*v182 + 5))();
              v57 += 3;
              int v59 = v166;
              if (v57 == v56) {
                goto LABEL_189;
              }
              goto LABEL_63;
            }
          }
          uint64_t v64 = 0;
          uint64_t v65 = (uint64_t *)((char *)v174 + 48 * v62);
          unint64_t v66 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v63)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + v63));
          uint64_t v67 = *v65;
          unint64_t v68 = ((unint64_t)*v65 >> 12) ^ (v66 >> 7);
          uint64_t v69 = v65[3];
          uint64_t v70 = 0x101010101010101 * (v66 & 0x7F);
          for (unint64_t i = v68; ; unint64_t i = v64 + v72)
          {
            uint64_t v72 = i & v69;
            uint64_t v73 = *(void *)(v67 + (i & v69));
            unint64_t v74 = ((v73 ^ v70) - 0x101010101010101) & ~(v73 ^ v70) & 0x8080808080808080;
            if (v74) {
              break;
            }
LABEL_73:
            if ((v73 & (~v73 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_76;
            }
            v64 += 8;
          }
          uint64_t v75 = v65[1];
          while (1)
          {
            unint64_t v76 = (v72 + (__clz(__rbit64(v74)) >> 3)) & v69;
            if (*(void *)(v75 + 16 * v76) == v63) {
              break;
            }
            v74 &= v74 - 1;
            if (!v74) {
              goto LABEL_73;
            }
          }
          if (v76 != v69)
          {
            for (j = 0; ; unint64_t v68 = j + v96)
            {
              uint64_t v96 = v68 & v69;
              uint64_t v97 = *(void *)(v67 + v96);
              unint64_t v98 = ((v97 ^ v70) - 0x101010101010101) & ~(v97 ^ v70) & 0x8080808080808080;
              if (v98) {
                break;
              }
LABEL_103:
              if ((v97 & (~v97 << 6) & 0x8080808080808080) != 0) {
                goto LABEL_199;
              }
              j += 8;
            }
            while (1)
            {
              unint64_t v99 = (v96 + (__clz(__rbit64(v98)) >> 3)) & v69;
              if (*(void *)(v75 + 16 * v99) == v63) {
                break;
              }
              v98 &= v98 - 1;
              if (!v98) {
                goto LABEL_103;
              }
            }
            if (v99 == v69)
            {
LABEL_199:
              google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)v179, (google::glog_internal_namespace_ *)"./ortools/base/map_util.h", 180);
              uint64_t v159 = (void *)google::LogMessage::stream((google::LogMessage *)v179);
              uint64_t v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"Check failed: it != collection.end() ", 37);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"Map key not found: ", 19);
              std::ostream::operator<<();
              google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)v179);
            }
            int v100 = *(_DWORD *)(v75 + 16 * v99 + 8) ^ 1;
            if (v61 < v173)
            {
              *(_DWORD *)uint64_t v61 = v100;
              uint64_t v101 = (uint64_t)(v61 + 4);
LABEL_168:
              uint64_t v172 = (char *)v101;
              uint64_t v61 = (char *)v101;
              uint64_t v60 = v166;
              goto LABEL_66;
            }
            uint64_t v111 = (char *)v171;
            int64_t v112 = v61 - (unsigned char *)v171;
            uint64_t v113 = (v61 - (unsigned char *)v171) >> 2;
            unint64_t v114 = v113 + 1;
            if ((unint64_t)(v113 + 1) >> 62) {
              std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v115 = v173 - (unsigned char *)v171;
            if ((v173 - (unsigned char *)v171) >> 1 > v114) {
              unint64_t v114 = v115 >> 1;
            }
            if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v116 = v114;
            }
            if (v116)
            {
              if (v116 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v117 = v61;
              int v118 = operator new(4 * v116);
              uint64_t v61 = v117;
              int v119 = (int *)&v118[4 * v113];
              *int v119 = v100;
              uint64_t v101 = (uint64_t)(v119 + 1);
              if (v61 == v111) {
                goto LABEL_166;
              }
            }
            else
            {
              int v118 = 0;
              int v119 = (int *)(4 * v113);
              *(_DWORD *)(4 * v113) = v100;
              uint64_t v101 = 4 * v113 + 4;
              if (v61 == v111) {
                goto LABEL_166;
              }
            }
            unint64_t v145 = v61 - 4 - v111;
            if (v145 >= 0xBC)
            {
              if (&v118[v112 - 4 - (v145 & 0xFFFFFFFFFFFFFFFCLL)] > &v118[v112 - 4])
              {
                uint64_t v146 = v61;
              }
              else if (&v61[-(v145 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v61 - 4)
              {
                uint64_t v146 = v61;
              }
              else if ((unint64_t)(v61 - v118 - v112) >= 0x20)
              {
                uint64_t v148 = (v145 >> 2) + 1;
                uint64_t v149 = 4 * (v148 & 0x7FFFFFFFFFFFFFF8);
                uint64_t v146 = &v61[-v149];
                int v119 = (int *)((char *)v119 - v149);
                uint64_t v150 = &v118[4 * v113 - 16];
                uint64_t v151 = v61 - 16;
                uint64_t v152 = v148 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v153 = *(_OWORD *)v151;
                  *(v150 - 1) = *((_OWORD *)v151 - 1);
                  *uint64_t v150 = v153;
                  v150 -= 2;
                  v151 -= 32;
                  v152 -= 8;
                }
                while (v152);
                if (v148 == (v148 & 0x7FFFFFFFFFFFFFF8)) {
                  goto LABEL_166;
                }
              }
              else
              {
                uint64_t v146 = v61;
              }
            }
            else
            {
              uint64_t v146 = v61;
            }
            do
            {
              int v147 = *((_DWORD *)v146 - 1);
              v146 -= 4;
              *--int v119 = v147;
            }
            while (v146 != v111);
            goto LABEL_166;
          }
LABEL_76:
          int v77 = *(_DWORD *)(v170 + 4 * v62);
          uint64_t v186 = &unk_26F0BFD30;
          int v187 = v77;
          unint64_t v188 = &v186;
          uint64_t v78 = v164 + 32;
          unint64_t v79 = (void *)*v167;
          unint64_t v80 = (void *)*v167;
          do
          {
            unint64_t v81 = v80[4];
            BOOL v82 = v81 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
            if (v81 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
              uint64_t v83 = v80;
            }
            else {
              uint64_t v83 = v80 + 1;
            }
            if (v82) {
              uint64_t v78 = (uint64_t)v80;
            }
            unint64_t v80 = (void *)*v83;
          }
          while (*v83);
          int64_t v84 = *(void *)(*(void *)(*(void *)(v78 + 40) + 40) + 12 * v77);
          uint64_t v183 = &unk_26F0BFDF8;
          int v184 = v77;
          uint64_t v185 = &v183;
          uint64_t v85 = v164 + 32;
          do
          {
            unint64_t v86 = v79[4];
            BOOL v87 = v86 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d;
            if (v86 >= (unint64_t)&gtl::FastTypeId<operations_research::sat::IntegerTrail>(void)::d) {
              int v88 = v79;
            }
            else {
              int v88 = v79 + 1;
            }
            if (v87) {
              uint64_t v85 = (uint64_t)v79;
            }
            unint64_t v79 = (void *)*v88;
          }
          while (*v88);
          if (v63 >= v84)
          {
            int v89 = v77 ^ 1;
            int64_t v90 = -*(void *)(*(void *)(*(void *)(v85 + 40) + 40) + 12 * v89);
            if (v63 <= v90)
            {
              if (v63 > v84)
              {
                uint64_t v91 = 1 - v63;
                if (v63 < (uint64_t)0x8000000000000003) {
                  uint64_t v91 = 0x7FFFFFFFFFFFFFFFLL;
                }
                *(_DWORD *)uint64_t v179 = v89;
                *(void *)&v179[4] = v91;
                unint64_t v163 = v163 & 0xFFFFFFFF00000000 | HIDWORD(v91);
                int AssociatedLiteral = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v168, *(const char **)v179, SHIDWORD(v91));
                int v93 = AssociatedLiteral;
                uint64_t v94 = v172;
                if (v172 < v173)
                {
                  *(_DWORD *)uint64_t v172 = AssociatedLiteral;
                  uint64_t v61 = v94 + 4;
                  uint64_t v60 = v166;
                  goto LABEL_138;
                }
                unint64_t v102 = (char *)v171;
                int64_t v103 = v172 - (unsigned char *)v171;
                uint64_t v104 = (v172 - (unsigned char *)v171) >> 2;
                unint64_t v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 62) {
                  std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v106 = v173 - (unsigned char *)v171;
                if ((v173 - (unsigned char *)v171) >> 1 > v105) {
                  unint64_t v105 = v106 >> 1;
                }
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v107 = v105;
                }
                if (v107)
                {
                  if (v107 >> 62) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  uint64_t v108 = (char *)operator new(4 * v107);
                  uint64_t v109 = &v108[4 * v104];
                  *(_DWORD *)uint64_t v109 = v93;
                  uint64_t v61 = v109 + 4;
                  if (v94 != v102)
                  {
LABEL_117:
                    unint64_t v110 = v94 - 4 - v102;
                    uint64_t v60 = v166;
                    if (v110 < 0x2C) {
                      goto LABEL_214;
                    }
                    if ((unint64_t)(v94 - &v108[v103]) < 0x20) {
                      goto LABEL_214;
                    }
                    uint64_t v120 = (v110 >> 2) + 1;
                    uint64_t v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
                    uint64_t v122 = &v94[-v121];
                    v109 -= v121;
                    unint64_t v123 = &v108[4 * v104 - 16];
                    uint64_t v124 = v94 - 16;
                    uint64_t v125 = v120 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v126 = *(_OWORD *)v124;
                      *((_OWORD *)v123 - 1) = *((_OWORD *)v124 - 1);
                      *(_OWORD *)unint64_t v123 = v126;
                      v123 -= 32;
                      v124 -= 32;
                      v125 -= 8;
                    }
                    while (v125);
                    uint64_t v94 = v122;
                    if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_214:
                      do
                      {
                        int v127 = *((_DWORD *)v94 - 1);
                        v94 -= 4;
                        *((_DWORD *)v109 - 1) = v127;
                        v109 -= 4;
                      }
                      while (v94 != v102);
                    }
                    goto LABEL_136;
                  }
                }
                else
                {
                  uint64_t v108 = 0;
                  uint64_t v109 = (char *)(4 * v104);
                  *(_DWORD *)(4 * v104) = v93;
                  uint64_t v61 = (char *)(4 * v104 + 4);
                  if (v94 != v102) {
                    goto LABEL_117;
                  }
                }
                uint64_t v60 = v166;
LABEL_136:
                std::string v171 = v109;
                uint64_t v172 = v61;
                int v173 = &v108[4 * v107];
                if (v102)
                {
                  int64_t v128 = v61;
                  operator delete(v102);
                  uint64_t v61 = v128;
                }
LABEL_138:
                uint64_t v172 = v61;
                uint64_t v58 = __p;
              }
              if (v63 >= v90)
              {
                unint64_t v57 = v165;
                goto LABEL_66;
              }
              *(_DWORD *)uint64_t v179 = *(_DWORD *)(v170 + 4 * v62);
              *(void *)&v179[4] = v63 + 1;
              int v129 = operations_research::sat::IntegerEncoder::GetOrCreateAssociatedLiteral(v168, *(const char **)v179, (unint64_t)(v63 + 1) >> 32);
              unint64_t v57 = v165;
              int v130 = v129;
              unint64_t v131 = v172;
              unint64_t v162 = v162 & 0xFFFFFFFF00000000 | ((unint64_t)(v63 + 1) >> 32);
              if (v172 < v173)
              {
                *(_DWORD *)uint64_t v172 = v129;
                uint64_t v101 = (uint64_t)(v131 + 4);
                uint64_t v58 = __p;
                goto LABEL_168;
              }
              uint64_t v111 = (char *)v171;
              int64_t v132 = v172 - (unsigned char *)v171;
              uint64_t v133 = (v172 - (unsigned char *)v171) >> 2;
              unint64_t v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 62) {
                std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v135 = v173 - (unsigned char *)v171;
              if ((v173 - (unsigned char *)v171) >> 1 > v134) {
                unint64_t v134 = v135 >> 1;
              }
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v134;
              }
              if (v116)
              {
                if (v116 >> 62) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                int v118 = operator new(4 * v116);
                int v119 = (int *)&v118[4 * v133];
                *int v119 = v130;
                uint64_t v101 = (uint64_t)(v119 + 1);
                if (v131 != v111)
                {
LABEL_151:
                  unint64_t v136 = v131 - 4 - v111;
                  uint64_t v58 = __p;
                  if (v136 < 0x2C) {
                    goto LABEL_215;
                  }
                  if ((unint64_t)(v131 - &v118[v132]) < 0x20) {
                    goto LABEL_215;
                  }
                  uint64_t v137 = (v136 >> 2) + 1;
                  uint64_t v138 = 4 * (v137 & 0x7FFFFFFFFFFFFFF8);
                  unint64_t v139 = &v131[-v138];
                  int v119 = (int *)((char *)v119 - v138);
                  uint64_t v140 = &v118[4 * v133 - 16];
                  unint64_t v141 = v131 - 16;
                  uint64_t v142 = v137 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v143 = *(_OWORD *)v141;
                    *(v140 - 1) = *((_OWORD *)v141 - 1);
                    *uint64_t v140 = v143;
                    v140 -= 2;
                    v141 -= 32;
                    v142 -= 8;
                  }
                  while (v142);
                  unint64_t v131 = v139;
                  if (v137 != (v137 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_215:
                    do
                    {
                      int v144 = *((_DWORD *)v131 - 1);
                      v131 -= 4;
                      *--int v119 = v144;
                    }
                    while (v131 != v111);
                  }
                  goto LABEL_166;
                }
              }
              else
              {
                int v118 = 0;
                int v119 = (int *)(4 * v133);
                *(_DWORD *)(4 * v133) = v130;
                uint64_t v101 = 4 * v133 + 4;
                if (v131 != v111) {
                  goto LABEL_151;
                }
              }
              uint64_t v58 = __p;
LABEL_166:
              std::string v171 = v119;
              uint64_t v172 = (char *)v101;
              int v173 = &v118[4 * v116];
              if (v111) {
                operator delete(v111);
              }
              goto LABEL_168;
            }
          }
          int v59 = v166;
          uint64_t v56 = v161;
          unint64_t v57 = v165 + 3;
        }
        while (v165 + 3 != v161);
LABEL_189:
        if (v171)
        {
          uint64_t v172 = (char *)v171;
          operator delete(v171);
        }
      }
      unint64_t v155 = (void **)v174;
      if (v174)
      {
        uint64_t v156 = v175;
        uint64_t v157 = v174;
        if (v175 != v174)
        {
          do
          {
            if (*(v156 - 3))
            {
              operator delete(*(v156 - 6));
              *(v156 - 1) = 0;
              *(v156 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
              *(v156 - 5) = 0;
              *(v156 - 4) = 0;
              *(v156 - 3) = 0;
            }
            unint64_t v158 = *(v156 - 2);
            if (v158) {
              absl::lts_2020_02_25::container_internal::UnsampleSlow(v158);
            }
            v156 -= 6;
          }
          while (v156 != v155);
          uint64_t v157 = v174;
        }
        uint64_t v175 = v155;
        operator delete(v157);
      }
      if (v58)
      {
        uint64_t v177 = v58;
        operator delete(v58);
      }
      return;
    }
    uint64_t v41 = 0;
    while (1)
    {
      operations_research::sat::IntegerEncoder::PartialDomainEncoding(v168, *(_DWORD *)(v170 + 4 * v41), (char **)&v171);
      uint64_t v43 = (char *)v171;
      uint64_t v42 = v172;
      if (v171 == v172)
      {
        if (!v171) {
          goto LABEL_46;
        }
      }
      else
      {
        do
        {
          uint64_t v49 = 0;
          uint64_t v51 = *(void *)v43;
          int v52 = *((_DWORD *)v43 + 2);
          int64_t v53 = (char *)v174 + 48 * v41;
          unint64_t v54 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v43)
                * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                   * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                    + *(void *)v43));
          unint64_t v50 = (v54 >> 7) ^ (*v53 >> 12);
          uint64_t v55 = v53[3];
          while (1)
          {
            unint64_t v44 = v50 & v55;
            uint64_t v45 = *(void *)(*v53 + v44);
            unint64_t v46 = ((v45 ^ (0x101010101010101 * (v54 & 0x7F))) - 0x101010101010101) & ~(v45 ^ (0x101010101010101
                                                                                                * (v54 & 0x7F))) & 0x8080808080808080;
            if (v46) {
              break;
            }
LABEL_54:
            if ((v45 & (~v45 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v48 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)v174 + 6 * v41, v54);
              uint64_t v47 = v53[1];
              *(void *)(v47 + 16 * v48) = v51;
              goto LABEL_57;
            }
            v49 += 8;
            unint64_t v50 = v49 + v44;
          }
          uint64_t v47 = v53[1];
          while (1)
          {
            unint64_t v48 = (v44 + (__clz(__rbit64(v46)) >> 3)) & v55;
            if (*(void *)(v47 + 16 * v48) == v51) {
              break;
            }
            v46 &= v46 - 1;
            if (!v46) {
              goto LABEL_54;
            }
          }
LABEL_57:
          *(_DWORD *)(v47 + 16 * v48 + 8) = v52;
          v43 += 12;
        }
        while (v43 != v42);
        uint64_t v43 = (char *)v171;
        if (!v171) {
          goto LABEL_46;
        }
      }
      uint64_t v172 = v43;
      operator delete(v43);
LABEL_46:
      if (++v41 == v166) {
        goto LABEL_61;
      }
    }
  }
  uint64_t v9 = 0;
  int v10 = 0;
  do
  {
    uint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = (operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain(v8, *(_DWORD *)(a1 + 4 * v11));
      if (!operations_research::Domain::Contains(v12, *(void *)(*(void *)(*a3 + 24 * v9) + 8 * v11))) {
        break;
      }
      if (a2 == ++v11)
      {
        ++v10;
        uint64_t v13 = a3[1];
        goto LABEL_5;
      }
    }
    uint64_t v14 = a3[1];
    unint64_t v15 = (void *)(*a3 + 24 * v9);
    if (v15 != (void *)(v14 - 24))
    {
      std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(v15, *(char **)(v14 - 24), *(char **)(v14 - 16), (uint64_t)(*(void *)(v14 - 16) - *(void *)(v14 - 24)) >> 3);
      uint64_t v14 = a3[1];
    }
    uint64_t v13 = v14 - 24;
    uint64_t v16 = *(void **)(v14 - 24);
    if (v16)
    {
      *(void *)(v14 - 16) = v16;
      operator delete(v16);
    }
    a3[1] = v13;
LABEL_5:
    uint64_t v9 = v10;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v13 - *a3) >> 3) > v10);
  if (*a3 != v13)
  {
    std::string __p = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v176 = 0;
    uint64_t v177 = 0;
    int v178 = 0;
    while (1)
    {
      while (1)
      {
        unint64_t v21 = (operations_research::Domain *)operations_research::sat::IntegerTrail::InitialVariableDomain(v8, *(_DWORD *)(v170 + 4 * v19));
        unint64_t v22 = operations_research::Domain::Size(v21);
        unint64_t v23 = v22;
        if ((unint64_t)v18 >= v17) {
          break;
        }
        *v18++ = v22;
        uint64_t v20 = (uint64_t)v18;
        uint64_t v177 = v18;
        if (++v19 == a2) {
          goto LABEL_44;
        }
      }
      uint64_t v24 = v18 - __p;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v17 - (void)__p) >> 2 > v25) {
        unint64_t v25 = (uint64_t)(v17 - (void)__p) >> 2;
      }
      if (v17 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      if (v26)
      {
        if (v26 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v27 = v26;
        uint64_t v28 = operator new(8 * v26);
        unint64_t v26 = v27;
        uint64_t v29 = (unint64_t *)&v28[8 * v24];
        *uint64_t v29 = v23;
        uint64_t v20 = (uint64_t)(v29 + 1);
        int v30 = __p;
        if (v18 == __p) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t *)(8 * v24);
        *(void *)(8 * v24) = v23;
        uint64_t v20 = 8 * v24 + 8;
        int v30 = __p;
        if (v18 == __p) {
          goto LABEL_32;
        }
      }
      unint64_t v31 = (char *)(v18 - 1) - (char *)v30;
      if (v31 < 0x168
        || &v28[(char *)v18 - (char *)__p - 8 - (v31 & 0xFFFFFFFFFFFFFFF8)] > &v28[(char *)v18 - (char *)__p - 8]
        || (unint64_t *)((char *)v18 - (v31 & 0xFFFFFFFFFFFFFFF8) - 8) > v18 - 1
        || (unint64_t)((char *)__p - v28) < 0x20)
      {
        unint64_t v32 = v18;
        int v30 = __p;
      }
      else
      {
        uint64_t v35 = (v31 >> 3) + 1;
        uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v32 = &v18[v36 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v29 = (unint64_t *)((char *)v29 - v36);
        uint64_t v37 = &v28[8 * v24 - 16];
        uint64_t v38 = v18 - 2;
        uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *uint64_t v37 = v40;
          v37 -= 2;
          v38 -= 4;
          v39 -= 4;
        }
        while (v39);
        int v30 = __p;
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_32;
        }
      }
      do
      {
        unint64_t v33 = *--v32;
        *--uint64_t v29 = v33;
      }
      while (v32 != v30);
LABEL_32:
      uint64_t v176 = v29;
      uint64_t v34 = &v28[8 * v26];
      int v178 = v34;
      if (v30) {
        operator delete(v30);
      }
      std::string __p = v29;
      unint64_t v17 = (unint64_t)v34;
      uint64_t v177 = (unint64_t *)v20;
      ++v19;
      unint64_t v18 = (unint64_t *)v20;
      if (v19 == a2) {
        goto LABEL_44;
      }
    }
  }
}

void sub_23CDA73D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<absl::lts_2020_02_25::flat_hash_map<long long,operations_research::sat::Literal,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v4 = (char *)operator new(48 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[48 * a2];
    a1[2] = v5;
    do
    {
      *(void *)unint64_t v4 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *((void *)v4 + 5) = 0;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23CDA75B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void **)*v1;
  if (*v1)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*(v4 - 3))
        {
          operator delete(*(v4 - 6));
          *(v4 - 1) = 0;
          *(v4 - 6) = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v4 - 5) = 0;
          *(v4 - 4) = 0;
          *(v4 - 3) = 0;
        }
        uint64_t v6 = *(v4 - 2);
        if (v6) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v6);
        }
        v4 -= 6;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void operations_research::sat::TransitionConstraint(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  int v10 = *(const void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  int64_t v11 = v9 - *(void *)a1;
  if (v9 != *(void *)a1)
  {
    if (v11 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(v9 - *(void *)a1);
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    unint64_t v31 = v12;
    memcpy(v12, v10, v11);
    unint64_t v32 = v13;
  }
  std::vector<std::vector<long long>>::vector(&__p, a2);
  uint64_t v35 = a3;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v14 = *(const void **)a4;
  int64_t v15 = *(void *)(a4 + 8) - *(void *)a4;
  if (v15)
  {
    if (v15 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v36 = (char *)operator new(v15);
    uint64_t v37 = v36;
    uint64_t v16 = &v36[8 * (v15 >> 3)];
    uint64_t v38 = v16;
    memcpy(v36, v14, v15);
    uint64_t v37 = v16;
  }
  *(void *)(a5 + 24) = 0;
  unint64_t v17 = operator new(0x58uLL);
  v17[1] = 0;
  *unint64_t v17 = &unk_26F0C47C8;
  void v17[2] = 0;
  v17[3] = 0;
  int64_t v18 = v32 - v31;
  if (v32 != v31)
  {
    if (v18 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = (char *)operator new(v32 - v31);
    v17[1] = v19;
    void v17[2] = v19;
    uint64_t v20 = &v19[4 * (v18 >> 2)];
    v17[3] = v20;
    memcpy(v19, v31, v18);
    void v17[2] = v20;
  }
  std::vector<std::vector<long long>>::vector(v17 + 4, (uint64_t *)&__p);
  v17[8] = 0;
  unint64_t v21 = v36;
  v17[7] = v35;
  v17[9] = 0;
  v17[10] = 0;
  int64_t v22 = v37 - v21;
  if (v37 != v21)
  {
    if (v22 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v23 = (char *)operator new(v37 - v21);
    v17[8] = v23;
    v17[9] = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    v17[10] = v24;
    memcpy(v23, v21, v22);
    v17[9] = v24;
  }
  *(void *)(a5 + 24) = v17;
  if (v21)
  {
    uint64_t v37 = v21;
    operator delete(v21);
  }
  unint64_t v25 = (char *)__p;
  if (__p)
  {
    unint64_t v26 = v34;
    unint64_t v27 = __p;
    if (v34 != __p)
    {
      uint64_t v28 = v34;
      do
      {
        int v30 = (void *)*((void *)v28 - 3);
        v28 -= 24;
        uint64_t v29 = v30;
        if (v30)
        {
          *((void *)v26 - 2) = v29;
          operator delete(v29);
        }
        unint64_t v26 = v28;
      }
      while (v28 != v25);
      unint64_t v27 = __p;
    }
    uint64_t v34 = v25;
    operator delete(v27);
  }
  if (v31) {
    operator delete(v31);
  }
}

void sub_23CDA7874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int64_t v22 = *v20;
  if (*v20)
  {
    v19[2] = v22;
    operator delete(v22);
  }
  operator delete(v19);
  operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0::~$_0((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_23CDA78F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::vector<std::vector<int>>::~vector[abi:ne180100](v17);
  JUMPOUT(0x23CDA7918);
}

uint64_t operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      do
      {
        uint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v3;
    operator delete(v5);
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t operations_research::sat::anonymous namespace'::AddSizeTwoTable(absl::lts_2020_02_25::Span<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const>,std::vector<std::vector<long long>> const&,std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>> const&,operations_research::sat::Model *)::$_0::operator()(uint64_t result, unsigned int a2, char **a3, int a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  unint64_t v7 = a3[1];
  uint64_t v8 = *a3;
  uint64_t v9 = v7 - *a3;
  if (v9 >> 2 == a4) {
    return result;
  }
  uint64_t v10 = result;
  if (v9 == 4)
  {
    uint64_t v11 = *(void *)result;
    unint64_t v12 = a2 | ((unint64_t)*(unsigned int *)v8 << 32);
    uint64_t v47 = (uint64_t (**)(void **))&unk_26F0BF9F8;
    unint64_t v48 = v12;
    uint64_t v49 = (void **)&v47;
    uint64_t v13 = operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(v11);
    operations_research::sat::SatSolver::AddBinaryClause(v13, v48 ^ 1, SHIDWORD(v48));
    double result = (uint64_t)v49;
    if (v49 == (void **)&v47)
    {
      double result = v47[4]((void **)&v47);
      uint64_t v14 = (_DWORD **)(v10 + 24);
    }
    else
    {
      if (v49) {
        double result = (*((uint64_t (**)(void))*v49 + 5))();
      }
      uint64_t v14 = (_DWORD **)(v10 + 24);
    }
    goto LABEL_38;
  }
  std::vector<operations_research::sat::Literal>::__assign_with_size[abi:ne180100]<std::__wrap_iter<operations_research::sat::Literal*>,std::__wrap_iter<operations_research::sat::Literal*>>(*(void **)(result + 32), v8, v7, v9 >> 2);
  uint64_t v15 = *(void *)(v10 + 32);
  int v16 = a2 ^ 1;
  int64_t v18 = *(int **)(v15 + 8);
  unint64_t v17 = *(void *)(v15 + 16);
  if ((unint64_t)v18 < v17)
  {
    *int64_t v18 = v16;
    uint64_t v19 = (uint64_t)(v18 + 1);
    goto LABEL_29;
  }
  uint64_t v20 = *(int **)v15;
  uint64_t v21 = (uint64_t)v18 - *(void *)v15;
  uint64_t v22 = v21 >> 2;
  unint64_t v23 = (v21 >> 2) + 1;
  if (v23 >> 62) {
    std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v24 = v17 - (void)v20;
  if (v24 >> 1 > v23) {
    unint64_t v23 = v24 >> 1;
  }
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v25 = v23;
  }
  if (v25)
  {
    if (v25 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v26 = operator new(4 * v25);
    unint64_t v27 = (int *)&v26[4 * v22];
    uint64_t v28 = &v26[4 * v25];
    *unint64_t v27 = v16;
    uint64_t v19 = (uint64_t)(v27 + 1);
    int64_t v29 = (char *)v18 - (char *)v20;
    if (v18 == v20) {
      goto LABEL_27;
    }
    goto LABEL_21;
  }
  unint64_t v26 = 0;
  unint64_t v27 = (int *)(4 * v22);
  uint64_t v28 = 0;
  *(_DWORD *)(4 * v22) = v16;
  uint64_t v19 = 4 * v22 + 4;
  int64_t v29 = (char *)v18 - (char *)v20;
  if (v18 != v20)
  {
LABEL_21:
    unint64_t v30 = v29 - 4;
    if (v30 < 0x2C) {
      goto LABEL_44;
    }
    if ((unint64_t)((char *)v18 - &v26[v21]) < 0x20) {
      goto LABEL_44;
    }
    uint64_t v31 = (v30 >> 2) + 1;
    uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v33 = &v18[v32 / 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v27 = (int *)((char *)v27 - v32);
    uint64_t v34 = &v26[4 * v22 - 16];
    uint64_t v35 = v18 - 4;
    uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *uint64_t v34 = v37;
      v34 -= 2;
      v35 -= 8;
      v36 -= 8;
    }
    while (v36);
    int64_t v18 = v33;
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        int v38 = *--v18;
        *--unint64_t v27 = v38;
      }
      while (v18 != v20);
    }
  }
LABEL_27:
  *(void *)uint64_t v15 = v27;
  *(void *)(v15 + 8) = v19;
  *(void *)(v15 + 16) = v28;
  if (v20) {
    operator delete(v20);
  }
LABEL_29:
  *(void *)(v15 + 8) = v19;
  uint64_t v39 = *(void *)v10;
  uint64_t v40 = *(void *)(v10 + 32);
  uint64_t v41 = *(int **)v40;
  uint64_t v42 = (uint64_t)(*(void *)(v40 + 8) - *(void *)v40) >> 2;
  unint64_t v44 = (uint64_t (**)(void **))&unk_26F0BD480;
  v45[0] = v41;
  v45[1] = (int *)v42;
  unint64_t v46 = (void **)&v44;
  operations_research::sat::ClauseConstraint(absl::lts_2020_02_25::Span<operations_research::sat::Literal const>)::{lambda(operations_research::sat::Model *)#1}::operator()(v45, v39);
  double result = (uint64_t)v46;
  if (v46 == (void **)&v44)
  {
    double result = v44[4]((void **)&v44);
  }
  else if (v46)
  {
    double result = (*((uint64_t (**)(void))*v46 + 5))();
  }
  ++**(_DWORD **)(v10 + 8);
  if (a4 >= 0) {
    int v43 = a4;
  }
  else {
    int v43 = a4 + 1;
  }
  if ((uint64_t)v43 >> 1 < (unint64_t)((a3[1] - *a3) >> 2))
  {
    uint64_t v14 = (_DWORD **)(v10 + 16);
LABEL_38:
    ++**v14;
  }
  return result;
}

void sub_23CDA7D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23CDA7D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(operations_research::sat::Model *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::vector<long long>::vector<absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::const_iterator,0>(void *a1, void *a2, uint64_t *a3, void *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a4)
  {
    unint64_t v7 = a2;
    unint64_t v8 = 0;
    uint64_t v9 = a2;
    do
    {
      unint64_t v10 = v8;
      int v11 = *((char *)v9 + 1);
      uint64_t v9 = (void *)((char *)v9 + 1);
      if (v11 <= -2)
      {
        do
          uint64_t v9 = (void *)((char *)v9 + ((__clz(__rbit64(((*v9 >> 7) & ~*v9 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3));
        while (*(char *)v9 < -1);
      }
      ++v8;
    }
    while (v9 != a4);
    if (v10 >= 0x1FFFFFFFFFFFFFFFLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = operator new(8 * v8);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v8];
    do
    {
      uint64_t v13 = *a3++;
      *unint64_t v12 = v13;
      LODWORD(v13) = *((char *)v7 + 1);
      unint64_t v7 = (void *)((char *)v7 + 1);
      if ((int)v13 <= -2)
      {
        do
        {
          unint64_t v14 = (__clz(__rbit64(((*v7 >> 7) & ~*v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unint64_t v7 = (void *)((char *)v7 + v14);
          a3 += v14;
        }
        while (*(char *)v7 < -1);
      }
      ++v12;
    }
    while (v7 != a4);
    a1[1] = v12;
  }
  return a1;
}

void sub_23CDA7EB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::~raw_hash_set(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 4google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = 0;
    *(void *)a1 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(v2);
  }
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v64 = (uint64_t *)((char *)a2 - 12);
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v24 = *(uint64_t *)((char *)a2 - 12);
          uint64_t v25 = *(void *)v10;
          if (v24 >= *(void *)v10)
          {
            if (v25 < v24) {
              return result;
            }
            int v27 = *((_DWORD *)a2 - 1);
            int v26 = *(_DWORD *)(v10 + 8);
            if (v27 >= v26) {
              return result;
            }
          }
          else
          {
            int v26 = *(_DWORD *)(v10 + 8);
            int v27 = *((_DWORD *)a2 - 1);
          }
          *(void *)uint64_t v10 = v24;
          *(uint64_t *)((char *)a2 - 12) = v25;
          *(_DWORD *)(v10 + 8) = v27;
          *((_DWORD *)a2 - 1) = v26;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v10, (uint64_t *)(v10 + 12), v64);
        case 4uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v10, (uint64_t *)(v10 + 12), (uint64_t *)(v10 + 24));
          uint64_t v28 = *(uint64_t *)((char *)a2 - 12);
          uint64_t v29 = *(void *)(v10 + 24);
          if (v28 >= v29)
          {
            if (v29 < v28) {
              return result;
            }
            int v31 = *((_DWORD *)a2 - 1);
            int v30 = *(_DWORD *)(v10 + 32);
            if (v31 >= v30) {
              return result;
            }
          }
          else
          {
            int v30 = *(_DWORD *)(v10 + 32);
            int v31 = *((_DWORD *)a2 - 1);
          }
          *(void *)(v10 + 24) = v28;
          *(uint64_t *)((char *)a2 - 12) = v29;
          *(_DWORD *)(v10 + 32) = v31;
          *((_DWORD *)a2 - 1) = v30;
          uint64_t v32 = *(void *)(v10 + 24);
          uint64_t v33 = *(void *)(v10 + 12);
          if (v32 >= v33)
          {
            if (v33 < v32) {
              return result;
            }
            int v35 = *(_DWORD *)(v10 + 32);
            int v34 = *(_DWORD *)(v10 + 20);
            if (v35 >= v34) {
              return result;
            }
          }
          else
          {
            int v34 = *(_DWORD *)(v10 + 20);
            int v35 = *(_DWORD *)(v10 + 32);
          }
          *(void *)(v10 + 12) = v32;
          *(void *)(v10 + 24) = v33;
          *(_DWORD *)(v10 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v35;
          *(_DWORD *)(v10 + 32) = v34;
          uint64_t v36 = *(void *)v10;
          if (v32 >= *(void *)v10)
          {
            if (v36 < v32) {
              return result;
            }
            int v37 = *(_DWORD *)(v10 + 8);
            if (v35 >= v37) {
              return result;
            }
          }
          else
          {
            int v37 = *(_DWORD *)(v10 + 8);
          }
          *(void *)uint64_t v10 = v32;
          *(void *)(v10 + 12) = v36;
          *(_DWORD *)(v10 + 8) = v35;
          *(_DWORD *)(v10 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v37;
          return result;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v10, v10 + 12, v10 + 24, v10 + 36, v64);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 287) {
      break;
    }
    if (v12 == 1)
    {
      if ((uint64_t *)v10 != a2)
      {
        unint64_t v53 = (v15 - 2) >> 1;
        unint64_t v54 = v53 + 1;
        uint64_t v55 = (uint64_t *)(v10 + 12 * v53);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(v10, a3, v15, v55);
          uint64_t v55 = (uint64_t *)((char *)v55 - 12);
          --v54;
        }
        while (v54);
        unint64_t v56 = v14 / 0xCuLL;
        do
        {
          double result = (uint64_t)std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>((uint64_t *)v10, (uint64_t)a2, a3, v56);
          a2 = (uint64_t *)((char *)a2 - 12);
        }
        while (v56-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = (uint64_t *)(v10 + 12 * (v15 >> 1));
    if ((unint64_t)v14 < 0x601)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(v17, (uint64_t *)v10, v64);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)v10, v17, v64);
      uint64_t v18 = v10 + 12 * v16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v10 + 12), (uint64_t *)(v18 - 12), a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v10 + 24), (uint64_t *)(v10 + 12 + 12 * v16), (uint64_t *)((char *)a2 - 36));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)(v18 - 12), v17, (uint64_t *)(v10 + 12 + 12 * v16));
      uint64_t v19 = *(void *)v10;
      *(void *)uint64_t v10 = *v17;
      *unint64_t v17 = v19;
      LODWORD(v19) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v18 + 8);
      *(_DWORD *)(v18 + 8) = v19;
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v20 = *(void *)(v10 - 12);
    if (v20 >= *(void *)v10 && (*(void *)v10 < v20 || *(_DWORD *)(v10 - 4) >= *(_DWORD *)(v10 + 8)))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>((uint64_t *)v10, a2);
      unint64_t v11 = result;
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
LABEL_15:
    unint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>((uint64_t *)v10, (unint64_t)a2);
    if ((v22 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(v10, v21);
    unint64_t v11 = v21 + 12;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(v21 + 12, (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (uint64_t *)v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_18:
      double result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,false>(v10, v21, a3, -v13, a5 & 1);
      unint64_t v11 = v21 + 12;
      goto LABEL_20;
    }
  }
  int v38 = (uint64_t *)(v10 + 12);
  BOOL v40 = (uint64_t *)v10 == a2 || v38 == a2;
  if (a5)
  {
    if (v40) {
      return result;
    }
    uint64_t v41 = 0;
    uint64_t v42 = v10;
LABEL_50:
    uint64_t v43 = v42;
    uint64_t v42 = (uint64_t)v38;
    uint64_t v44 = *(void *)(v43 + 12);
    uint64_t v45 = *(void *)v43;
    if (v44 >= *(void *)v43)
    {
      if (v45 < v44) {
        goto LABEL_49;
      }
      int v46 = *(_DWORD *)(v43 + 20);
      int v47 = *(_DWORD *)(v43 + 8);
      if (v46 >= v47) {
        goto LABEL_49;
      }
    }
    else
    {
      int v46 = *(_DWORD *)(v43 + 20);
      int v47 = *(_DWORD *)(v43 + 8);
    }
    *(void *)(v43 + 12) = v45;
    *(_DWORD *)(v42 + 8) = v47;
    uint64_t v48 = v10;
    if (v43 == v10) {
      goto LABEL_48;
    }
    uint64_t v49 = v41;
    while (1)
    {
      uint64_t v52 = *(void *)(v10 + v49 - 12);
      if (v44 >= v52)
      {
        if (v52 < v44)
        {
          uint64_t v48 = v10 + v49;
          goto LABEL_48;
        }
        int v50 = *(_DWORD *)(v10 + v49 - 4);
        if (v46 >= v50)
        {
          uint64_t v48 = v43;
LABEL_48:
          *(void *)uint64_t v48 = v44;
          *(_DWORD *)(v48 + 8) = v46;
LABEL_49:
          int v38 = (uint64_t *)(v42 + 12);
          v41 += 12;
          if ((uint64_t *)(v42 + 12) == a2) {
            return result;
          }
          goto LABEL_50;
        }
      }
      else
      {
        int v50 = *(_DWORD *)(v10 + v49 - 4);
      }
      v43 -= 12;
      uint64_t v51 = v10 + v49;
      *(void *)uint64_t v51 = v52;
      *(_DWORD *)(v51 + 8) = v50;
      v49 -= 12;
      if (!v49)
      {
        uint64_t v48 = v10;
        goto LABEL_48;
      }
    }
  }
  if (!v40)
  {
    for (uint64_t i = v10 + 8; ; i += 12)
    {
      uint64_t v59 = v10;
      uint64_t v10 = (uint64_t)v38;
      uint64_t v60 = *(void *)(v59 + 12);
      uint64_t v61 = *(void *)v59;
      if (v60 < *(void *)v59) {
        break;
      }
      if (v61 >= v60)
      {
        int v62 = *(_DWORD *)(v59 + 20);
        if (v62 < *(_DWORD *)(v59 + 8)) {
          goto LABEL_84;
        }
      }
LABEL_79:
      int v38 = (uint64_t *)(v10 + 12);
      if ((uint64_t *)(v10 + 12) == a2) {
        return result;
      }
    }
    int v62 = *(_DWORD *)(v59 + 20);
LABEL_84:
    for (uint64_t j = i; ; j -= 12)
    {
      *(void *)(j + 4) = v61;
      *(_DWORD *)(j + 12) = *(_DWORD *)j;
      uint64_t v61 = *(void *)(j - 20);
      if (v60 >= v61 && (v61 < v60 || v62 >= *(_DWORD *)(j - 12))) {
        break;
      }
    }
    *(void *)(j - 8) = v60;
    *(_DWORD *)uint64_t j = v62;
    goto LABEL_79;
  }
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *j)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = *(uint64_t *)((char *)j - 12);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_DWORD *)j - 1)))
  {
    for (uint64_t i = (uint64_t *)((char *)a1 + 12);
          i < j && v2 >= *i && (*i < v2 || v3 >= *((_DWORD *)i + 2));
  }
  else
  {
    uint64_t i = a1;
    do
    {
      uint64_t v7 = *(uint64_t *)((char *)i + 12);
      uint64_t i = (uint64_t *)((char *)i + 12);
      uint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *((_DWORD *)i + 2)));
  }
  if (i < j)
  {
    for (uint64_t j = (uint64_t *)((char *)j - 12); v2 < v4 || v4 >= v2 && v3 < *((_DWORD *)j + 2); uint64_t j = (uint64_t *)((char *)j - 12))
    {
      uint64_t v8 = *(uint64_t *)((char *)j - 12);
      uint64_t v4 = v8;
    }
  }
  if (i < j)
  {
    uint64_t v9 = *i;
    uint64_t v10 = *j;
    do
    {
      *uint64_t i = v10;
      *uint64_t j = v9;
      uint64_t v11 = *(uint64_t *)((char *)i + 12);
      uint64_t i = (uint64_t *)((char *)i + 12);
      uint64_t v9 = v11;
      int v12 = *((_DWORD *)i - 1);
      *((_DWORD *)i - 1) = *((_DWORD *)j + 2);
      *((_DWORD *)j + 2) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *((_DWORD *)i + 2)))
      {
        uint64_t v13 = *(uint64_t *)((char *)i + 12);
        uint64_t i = (uint64_t *)((char *)i + 12);
        uint64_t v9 = v13;
      }
      do
      {
        do
        {
          uint64_t v14 = *(uint64_t *)((char *)j - 12);
          uint64_t j = (uint64_t *)((char *)j - 12);
          uint64_t v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *((_DWORD *)j + 2));
    }
    while (i < j);
  }
  if ((uint64_t *)((char *)i - 12) != a1)
  {
    *a1 = *(uint64_t *)((char *)i - 12);
    *((_DWORD *)a1 + 2) = *((_DWORD *)i - 1);
  }
  *(uint64_t *)((char *)i - 12) = v2;
  *((_DWORD *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    uint64_t v5 = *(uint64_t *)((char *)a1 + v2 + 12);
    if (v5 >= v3 && (v3 < v5 || *(_DWORD *)((char *)a1 + v2 + 20) >= v4)) {
      break;
    }
    v2 += 12;
  }
  unint64_t v6 = (unint64_t)a1 + v2 + 12;
  if (v2)
  {
    do
    {
      uint64_t v8 = *(void *)(a2 - 12);
      a2 -= 12;
      uint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        uint64_t v10 = *(void *)(a2 - 12);
        a2 -= 12;
        uint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = v6;
  }
  else
  {
    uint64_t v12 = *(void *)a2;
    unint64_t v13 = v6;
    unint64_t v14 = a2;
    do
    {
      *(void *)unint64_t v13 = v12;
      *(void *)unint64_t v14 = v5;
      int v15 = *(_DWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          uint64_t v16 = *(void *)(v13 + 12);
          v13 += 12;
          uint64_t v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_DWORD *)(v13 + 8) < v4);
      do
      {
        uint64_t v17 = *(void *)(v14 - 12);
        v14 -= 12;
        uint64_t v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_DWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if ((uint64_t *)(v13 - 12) != a1)
  {
    *a1 = *(void *)(v13 - 12);
    *((_DWORD *)a1 + 2) = *(_DWORD *)(v13 - 4);
  }
  *(void *)(v13 - 12) = v3;
  *(_DWORD *)(v13 - 4) = v4;
  return v13 - 12;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v19 = *(void *)(a2 - 12);
      uint64_t v20 = *(void *)a1;
      if (v19 < *(void *)a1)
      {
        int v21 = *(_DWORD *)(a1 + 8);
        int v22 = *(_DWORD *)(a2 - 4);
LABEL_24:
        *(void *)a1 = v19;
        *(void *)(a2 - 12) = v20;
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        return result;
      }
      if (v20 >= v19)
      {
        int v22 = *(_DWORD *)(a2 - 4);
        int v21 = *(_DWORD *)(a1 + 8);
        if (v22 < v21) {
          goto LABEL_24;
        }
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v23 = *(void *)(a2 - 12);
      uint64_t v24 = *(void *)(a1 + 24);
      if (v23 >= v24)
      {
        if (v24 < v23) {
          return 1;
        }
        int v26 = *(_DWORD *)(a2 - 4);
        int v25 = *(_DWORD *)(a1 + 32);
        if (v26 >= v25) {
          return 1;
        }
      }
      else
      {
        int v25 = *(_DWORD *)(a1 + 32);
        int v26 = *(_DWORD *)(a2 - 4);
      }
      *(void *)(a1 + 24) = v23;
      *(void *)(a2 - 12) = v24;
      *(_DWORD *)(a1 + 32) = v26;
      *(_DWORD *)(a2 - 4) = v25;
      uint64_t v27 = *(void *)(a1 + 24);
      uint64_t v28 = *(void *)(a1 + 12);
      if (v27 >= v28)
      {
        if (v28 < v27) {
          return 1;
        }
        int v30 = *(_DWORD *)(a1 + 32);
        int v29 = *(_DWORD *)(a1 + 20);
        if (v30 >= v29) {
          return 1;
        }
      }
      else
      {
        int v29 = *(_DWORD *)(a1 + 20);
        int v30 = *(_DWORD *)(a1 + 32);
      }
      *(void *)(a1 + 12) = v27;
      *(void *)(a1 + 24) = v28;
      *(_DWORD *)(a1 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v30;
      *(_DWORD *)(a1 + 32) = v29;
      uint64_t v31 = *(void *)a1;
      if (v27 < *(void *)a1)
      {
        int v32 = *(_DWORD *)(a1 + 8);
LABEL_46:
        *(void *)a1 = v27;
        *(void *)(a1 + 12) = v31;
        *(_DWORD *)(a1 + 8) = v30;
        BOOL result = 1;
        *(_DWORD *)(a1 + 2google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v32;
        return result;
      }
      if (v31 >= v27)
      {
        int v32 = *(_DWORD *)(a1 + 8);
        if (v30 < v32) {
          goto LABEL_46;
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>(a1, a1 + 12, a1 + 24, a1 + 36, (uint64_t *)(a2 - 12));
      return 1;
    default:
      uint64_t v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<long long,int> *>((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v7 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        uint64_t v11 = *(void *)v7;
        uint64_t v12 = *(void *)v6;
        if (*(void *)v7 >= *(void *)v6)
        {
          if (v12 < v11) {
            goto LABEL_7;
          }
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
          if (v13 >= v14) {
            goto LABEL_7;
          }
        }
        else
        {
          int v13 = *(_DWORD *)(v7 + 8);
          int v14 = *(_DWORD *)(v6 + 8);
        }
        *(void *)uint64_t v7 = v12;
        *(_DWORD *)(v7 + 8) = v14;
        uint64_t v10 = a1;
        if (v6 == a1) {
          goto LABEL_6;
        }
        uint64_t v15 = v8;
        while (2)
        {
          uint64_t v17 = a1 + v15;
          uint64_t v18 = *(void *)(a1 + v15 + 12);
          if (v11 < v18)
          {
            int v16 = *(_DWORD *)(v17 + 20);
LABEL_13:
            v6 -= 12;
            *(void *)(v17 + 24) = v18;
            *(_DWORD *)(a1 + v15 + 32) = v16;
            v15 -= 12;
            if (v15 == -24)
            {
              uint64_t v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v18 >= v11)
        {
          int v16 = *(_DWORD *)(a1 + v15 + 20);
          if (v13 >= v16)
          {
            uint64_t v10 = a1 + v15 + 24;
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        uint64_t v10 = v6;
LABEL_6:
        *(void *)uint64_t v10 = v11;
        *(_DWORD *)(v10 + 8) = v13;
        if (++v9 == 8) {
          return v7 + 12 == a2;
        }
LABEL_7:
        uint64_t v6 = v7;
        v8 += 12;
        v7 += 12;
        if (v7 != a2) {
          continue;
        }
        return 1;
      }
  }
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      uint64_t v6 = (uint64_t *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        uint64_t v7 = *(uint64_t *)((char *)v6 + 12);
        if (*v6 < v7 || v7 >= *v6 && *(_DWORD *)(result + 12 * v5 + 8) < *((_DWORD *)v6 + 5))
        {
          uint64_t v6 = (uint64_t *)((char *)v6 + 12);
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      uint64_t v8 = *v6;
      uint64_t v9 = *a4;
      if (*v6 >= *a4)
      {
        if (v9 >= v8)
        {
          int v11 = *((_DWORD *)v6 + 2);
          int v10 = *((_DWORD *)a4 + 2);
          if (v11 < v10) {
            return result;
          }
        }
        else
        {
          int v10 = *((_DWORD *)a4 + 2);
          int v11 = *((_DWORD *)v6 + 2);
        }
        *a4 = v8;
        *((_DWORD *)a4 + 2) = v11;
        if (v4 >= v5)
        {
          while (1)
          {
            uint64_t v13 = 2 * v5;
            uint64_t v5 = (2 * v5) | 1;
            uint64_t v12 = (uint64_t *)(result + 12 * v5);
            uint64_t v14 = v13 + 2;
            if (v14 < a3)
            {
              uint64_t v15 = *(uint64_t *)((char *)v12 + 12);
              if (*v12 < v15 || v15 >= *v12 && *(_DWORD *)(result + 12 * v5 + 8) < *((_DWORD *)v12 + 5))
              {
                uint64_t v12 = (uint64_t *)((char *)v12 + 12);
                uint64_t v5 = v14;
              }
            }
            uint64_t v16 = *v12;
            if (*v12 < v9) {
              break;
            }
            int v17 = *((_DWORD *)v12 + 2);
            if (v9 >= v16 && v17 < v10) {
              break;
            }
            *uint64_t v6 = v16;
            *((_DWORD *)v6 + 2) = v17;
            uint64_t v6 = v12;
            if (v4 < v5) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v12 = v6;
LABEL_14:
        *uint64_t v12 = v9;
        *((_DWORD *)v12 + 2) = v10;
      }
    }
  }
  return result;
}

uint64_t *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal> *>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *result;
    int v6 = *((_DWORD *)result + 2);
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = v7;
      uint64_t v9 = v4 + 1;
      uint64_t v7 = (uint64_t *)((char *)v7 + 12 * v4 + 12);
      uint64_t v10 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v11 = v10 + 2;
      if (v11 < a4)
      {
        uint64_t v12 = *(uint64_t *)((char *)v7 + 12);
        if (*v7 < v12 || v12 >= *v7 && *((_DWORD *)v8 + 3 * v9 + 2) < *((_DWORD *)v7 + 5))
        {
          uint64_t v7 = (uint64_t *)((char *)v7 + 12);
          uint64_t v4 = v11;
        }
      }
      *uint64_t v8 = *v7;
      *((_DWORD *)v8 + 2) = *((_DWORD *)v7 + 2);
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (uint64_t *)(a2 - 12))
    {
      *uint64_t v7 = v5;
      *((_DWORD *)v7 + 2) = v6;
      return result;
    }
    *uint64_t v7 = *(void *)(a2 - 12);
    *((_DWORD *)v7 + 2) = *(_DWORD *)(a2 - 4);
    *(void *)(a2 - 12) = v5;
    *(_DWORD *)(a2 - 4) = v6;
    uint64_t v13 = (char *)v7 - (char *)result + 12;
    if (v13 >= 13)
    {
      unint64_t v14 = v13 / 0xCuLL - 2;
      unint64_t v15 = v14 >> 1;
      uint64_t v16 = (uint64_t *)((char *)result + 12 * (v14 >> 1));
      uint64_t v17 = *v16;
      uint64_t v18 = *v7;
      if (*v16 >= *v7)
      {
        if (v18 < v17) {
          return result;
        }
        int v20 = *((_DWORD *)result + 3 * v15 + 2);
        int v19 = *((_DWORD *)v7 + 2);
        if (v20 >= v19) {
          return result;
        }
      }
      else
      {
        int v19 = *((_DWORD *)v7 + 2);
        int v20 = *((_DWORD *)result + 3 * v15 + 2);
      }
      *uint64_t v7 = v17;
      *((_DWORD *)v7 + 2) = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          unint64_t v23 = v15 - 1;
          unint64_t v15 = (v15 - 1) >> 1;
          int v21 = (uint64_t *)((char *)result + 12 * v15);
          uint64_t v24 = *v21;
          if (*v21 < v18)
          {
            int v22 = *((_DWORD *)result + 3 * v15 + 2);
          }
          else
          {
            if (v18 < v24) {
              break;
            }
            int v22 = *((_DWORD *)result + 3 * v15 + 2);
            if (v22 >= v19) {
              break;
            }
          }
          *uint64_t v16 = v24;
          *((_DWORD *)v16 + 2) = v22;
          uint64_t v16 = (uint64_t *)((char *)result + 12 * v15);
          if (v23 <= 1) {
            goto LABEL_19;
          }
        }
      }
      int v21 = v16;
LABEL_19:
      uint64_t *v21 = v18;
      *((_DWORD *)v21 + 2) = v19;
    }
  }
  return result;
}

void *std::vector<std::vector<long long>>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(v3, v4, v5, v8);
  }
  return a1;
}

void sub_23CDA8EF8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    std::vector<std::vector<operations_research::sat::Literal>>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_23CDA8FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_23CDA9004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<operations_research::sat::Literal>>,std::vector<operations_research::sat::Literal>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::prepare_insert(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[3];
  unint64_t v6 = (((unint64_t)*a1 >> 12) ^ (a2 >> 7)) & v5;
  unint64_t v7 = 0;
  for (unint64_t i = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(v4 + v6) & (~*(void *)(v4 + v6) << 7) & 0x8080808080808080)
  {
    v7 += 8;
    unint64_t v6 = (v7 + v6) & v5;
  }
  unint64_t first_non_full = (v6 + (__clz(__rbit64(i)) >> 3)) & v5;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + first_non_full) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary((uint64_t)a1);
      unint64_t first_non_full = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,int>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int> const,int>>>::find_first_non_full(a1, a2);
      unint64_t v7 = v13;
      uint64_t v4 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v4 + first_non_full) == 128);
  *(unsigned char *)(v4 + first_non_full) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (first_non_full - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  uint64_t v11 = (atomic_ullong *)a1[4];
  if (v11) {
    absl::lts_2020_02_25::container_internal::RecordInsertSlow(v11, a2, v7);
  }
  return first_non_full;
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::rehash_and_grow_if_necessary(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = 1;
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (2 * v1) | 1;
LABEL_4:
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::resize((char **)a1, (char *)v2);
    return;
  }
  absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,int>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,int>>>::drop_deletes_without_resize(a1);
}

void absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<long long,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<std::pair<long long const,operations_research::sat::Literal>>>::resize(char **a1, char *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  a1[3] = a2;
  if (!v5)
  {
    unint64_t v7 = a1[4];
    if (v7)
    {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v7);
      unint64_t v2 = (unint64_t)a1[3];
    }
    a1[4] = 0;
  }
  unint64_t v8 = (v2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v9 = (char *)operator new(v8 + 16 * v2);
  *a1 = v9;
  a1[1] = &v9[v8];
  memset(v9, 128, v2 + 8);
  v9[v2] = -1;
  uint64_t v10 = v2 - (v2 >> 3);
  if (v2 == 7) {
    uint64_t v10 = 6;
  }
  uint64_t v11 = a1[2];
  a1[5] = (char *)(v10 - (void)v11);
  uint64_t v12 = a1[4];
  if (v12)
  {
    *((void *)v12 + 1) = v11;
    *(void *)uint64_t v12 = v2;
    if (!v11)
    {
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 2) = 0;
    }
  }
  if (!v6)
  {
    unint64_t v14 = 0;
    uint64_t v24 = a1[4];
    if (!v24) {
      return;
    }
LABEL_21:
    *((void *)v24 + 4) = v14 >> 3;
    *((void *)v24 + 2) = 0;
    return;
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  do
  {
    if ((v13[(void)v4] & 0x80000000) == 0)
    {
      uint64_t v18 = &v5[16 * (void)v13];
      unint64_t v19 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v18)
            * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                               * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                + *(void *)v18));
      int v20 = *a1;
      int v21 = a1[3];
      unint64_t v22 = ((v19 >> 7) ^ ((unint64_t)*a1 >> 12)) & (unint64_t)v21;
      unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
      if (v23)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          v15 += 8;
          unint64_t v22 = (v15 + v22) & (unint64_t)v21;
          unint64_t v23 = *(void *)&v20[v22] & (~*(void *)&v20[v22] << 7) & 0x8080808080808080;
        }
        while (!v23);
      }
      unint64_t v16 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v21;
      v14 += v15;
      char v17 = v19 & 0x7F;
      v20[v16] = v17;
      (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v16 - 8) & (unint64_t)a1[3])] = v17;
      *(_OWORD *)&a1[1][16 * v16] = *(_OWORD *)v18;
    }
    ++v13;
  }
  while (v13 != v6);
  operator delete(v4);
  uint64_t v24 = a1[4];
  if (v24) {
    goto LABEL_21;
  }
}

void *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C47C8;
  unint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[4];
  if (v3)
  {
    uint64_t v4 = a1[5];
    uint64_t v5 = (void *)a1[4];
    if (v4 != v3)
    {
      uint64_t v6 = a1[5];
      do
      {
        unint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)a1[4];
    }
    a1[5] = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::~__func(void *a1)
{
  *a1 = &unk_26F0C47C8;
  unint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[4];
  if (v3)
  {
    uint64_t v4 = a1[5];
    uint64_t v5 = (void *)a1[4];
    if (v4 != v3)
    {
      uint64_t v6 = a1[5];
      do
      {
        unint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)a1[4];
    }
    a1[5] = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }

  JUMPOUT(0x23ECF2BC0);
}

void *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x58uLL);
  *unint64_t v2 = &unk_26F0C47C8;
  std::__compressed_pair_elem<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_23CDA9574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F0C47C8;
  return std::__compressed_pair_elem<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy(void *a1)
{
  unint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[4];
  if (v3)
  {
    uint64_t v4 = a1[5];
    uint64_t v5 = (void *)a1[4];
    if (v4 != v3)
    {
      uint64_t v6 = a1[5];
      do
      {
        unint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)a1[4];
    }
    a1[5] = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::destroy_deallocate(void *__p)
{
  unint64_t v2 = (void *)__p[8];
  if (v2)
  {
    __p[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = __p[4];
  if (v3)
  {
    uint64_t v4 = __p[5];
    uint64_t v5 = (void *)__p[4];
    if (v4 != v3)
    {
      uint64_t v6 = __p[5];
      do
      {
        unint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        unint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)__p[4];
    }
    __p[5] = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)__p[1];
  if (v9)
  {
    __p[2] = v9;
    operator delete(v9);
  }

  operator delete(__p);
}

void std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVaria"
                     "ble_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20I"
                                "ntegerVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN19operations_research3sat20TransitionConstraintERKNSt3__16vectorIN3gtl7IntTypeINS0_20IntegerVariable_tag_EiEENS1_9allocatorIS6_EEEERKNS2_INS2_IxNS7_IxEEEENS7_ISD_EEEExRKSD_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,std::allocator<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0>,void ()(operations_research::sat::Model *)>::target_type()
{
}

void *std::__compressed_pair_elem<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  std::vector<std::vector<long long>>::vector(a1 + 3, (uint64_t *)(a2 + 24));
  uint64_t v9 = *(void *)(a2 + 48);
  a1[7] = 0;
  a1[6] = v9;
  a1[8] = 0;
  a1[9] = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 56);
  uint64_t v10 = *(unsigned char **)(a2 + 64);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    a1[7] = v13;
    a1[8] = v13;
    unint64_t v14 = &v13[8 * (v12 >> 3)];
    a1[9] = v14;
    memcpy(v13, v11, v12);
    a1[8] = v14;
  }
  return a1;
}

void sub_23CDA9884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_objecta)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::__invoke[abi:ne180100]<operations_research::sat::TransitionConstraint(std::vector<gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>> const&,std::vector<std::vector<long long>> const&,long long,std::vector<long long> const&)::$_0 &,operations_research::sat::Model *>(void *a1, uint64_t a2)
{
  uint64_t v488 = *MEMORY[0x263EF8340];
  uint64_t v3 = operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerTrail>(a2);
  v428 = a1;
  unint64_t v4 = a1[1] - *a1;
  *(_DWORD *)v466 = v4 >> 2;
  LODWORD(v462) = 0;
  unint64_t v419 = v4 >> 2;
  uint64_t v422 = v3;
  if (*(int *)v466 < 1) {
    google::MakeCheckOpString<int,int>((int)v466, (int)&v462, "n > 0");
  }
  *(void *)&v466[8] = 0;
  *(void *)&v466[16] = 0;
  *(void *)v466 = &v466[8];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v5 + 8) - *(void *)v5;
      uint64_t v462 = v7 >> 3;
      LODWORD(v431[0]) = 3;
      if (v7 != 24) {
        google::MakeCheckOpString<unsigned long,int>((int)&v462, (int)v431, "transition.size() == 3");
      }
      uint64_t v8 = **(void **)v5;
      uint64_t v9 = *(void *)(*(void *)v5 + 8);
      uint64_t v10 = *(uint64_t **)&v466[8];
      uint64_t v11 = (uint64_t **)&v466[8];
      int64_t v12 = (uint64_t **)&v466[8];
      if (!*(void *)&v466[8]) {
        goto LABEL_26;
      }
      unint64_t v13 = &v466[8];
      unint64_t v14 = *(void **)&v466[8];
      do
      {
        uint64_t v15 = v14[4];
        if (v15 < v8)
        {
          ++v14;
        }
        else if (v8 >= v15)
        {
          if (v14[5] < v9) {
            ++v14;
          }
          else {
            unint64_t v13 = v14;
          }
        }
        else
        {
          unint64_t v13 = v14;
        }
        unint64_t v14 = (void *)*v14;
      }
      while (v14);
      if (v13 != &v466[8])
      {
        uint64_t v16 = *((void *)v13 + 4);
        if (v8 >= v16 && (v16 < v8 || v9 >= *((void *)v13 + 5)))
        {
          google::LogMessageFatal::LogMessageFatal((google::LogMessageFatal *)&v462, (google::glog_internal_namespace_ *)"./ortools/sat/table.cc", 606);
          v413 = (void *)google::LogMessage::stream((google::LogMessage *)&v462);
          v414 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v413, (uint64_t)"Check failed: !gtl::ContainsKey(unique_transition_checker, p) ", 62);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v414, (uint64_t)"Duplicate outgoing transitions with value ", 42);
          v415 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v415, (uint64_t)" from state ", 12);
          uint64_t v416 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v416, (uint64_t)".", 1);
          google::LogMessageFatal::~LogMessageFatal((google::LogMessageFatal *)&v462);
        }
      }
      do
      {
        while (1)
        {
          int64_t v12 = (uint64_t **)v10;
          uint64_t v17 = v10[4];
          if (v8 >= v17)
          {
            if (v17 < v8) {
              goto LABEL_24;
            }
            uint64_t v18 = (uint64_t)v12[5];
            if (v9 >= v18) {
              break;
            }
          }
          uint64_t v10 = *v12;
          uint64_t v11 = v12;
          if (!*v12) {
            goto LABEL_26;
          }
        }
        if (v18 >= v9) {
          goto LABEL_29;
        }
LABEL_24:
        uint64_t v10 = v12[1];
      }
      while (v10);
      uint64_t v11 = v12 + 1;
LABEL_26:
      unint64_t v19 = (uint64_t *)operator new(0x30uLL);
      v19[4] = v8;
      v19[5] = v9;
      *unint64_t v19 = 0;
      v19[1] = 0;
      v19[2] = (uint64_t)v12;
      *uint64_t v11 = v19;
      if (**(void **)v466)
      {
        *(void *)v466 = **(void **)v466;
        unint64_t v19 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&v466[8], v19);
      ++*(void *)&v466[16];
LABEL_29:
      v5 += 24;
      if (v5 == v6)
      {
        int v20 = *(void **)&v466[8];
        goto LABEL_33;
      }
    }
  }
  int v20 = 0;
LABEL_33:
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v466, v20);
  unint64_t v417 = (int)((uint64_t)v4 >> 2);
  std::vector<absl::lts_2020_02_25::flat_hash_set<long long,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>>::vector(&v471, v417);
  unint64_t __p = v4;
  uint64_t v427 = (v4 >> 2);
  if ((int)v419 > 0)
  {
    for (uint64_t i = 0; i != v427; ++i)
    {
      uint64_t v22 = operations_research::sat::IntegerTrail::InitialVariableDomain(v422, *(_DWORD *)(*v428 + 4 * i));
      *(void *)v466 = 0;
      unint64_t v23 = *(void *)v22;
      if ((*(void *)v22 & 1) == 0)
      {
        *(void *)v466 = *(void *)v22;
        *(_OWORD *)&v466[8] = *(_OWORD *)(v22 + 8);
        uint64_t v24 = (uint64_t *)v428[3];
        int v25 = (uint64_t *)v428[4];
        if (v24 != v25) {
          goto LABEL_54;
        }
        goto LABEL_58;
      }
      int v26 = *(long long **)(v22 + 8);
      unint64_t v27 = v23 >> 1;
      if (v23 < 4)
      {
        uint64_t v28 = &v466[8];
        if (v23 < 2)
        {
          uint64_t v29 = 0;
          goto LABEL_46;
        }
      }
      else
      {
        if (v23 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v28 = operator new(16 * v27);
        *(void *)&v466[8] = v28;
        *(void *)&v466[16] = v23 >> 1;
        *(void *)v466 = 1;
      }
      do
      {
        long long v30 = *v26++;
        *v28++ = v30;
        --v27;
      }
      while (v27);
      uint64_t v29 = *(void *)v466;
LABEL_46:
      unint64_t v23 = v29 + (v23 & 0xFFFFFFFFFFFFFFFELL);
      *(void *)v466 = v23;
      uint64_t v24 = (uint64_t *)v428[3];
      int v25 = (uint64_t *)v428[4];
      if (v24 != v25)
      {
        do
        {
LABEL_54:
          if (operations_research::Domain::Contains((operations_research::Domain *)v466, *(void *)(*v24 + 8)))
          {
            uint64_t v34 = 0;
            uint64_t v36 = &v471[6 * i];
            uint64_t v38 = *(void *)(*v24 + 8);
            unint64_t v39 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v38)
                  * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                     * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                      + v38));
            unint64_t v35 = (v39 >> 7) ^ ((unint64_t)*v36 >> 12);
            uint64_t v40 = v36[3];
            while (1)
            {
              unint64_t v31 = v35 & v40;
              uint64_t v32 = *(void *)(*v36 + v31);
              unint64_t v33 = ((v32 ^ (0x101010101010101 * (v39 & 0x7F))) - 0x101010101010101) & ~(v32 ^ (0x101010101010101
                                                                                                  * (v39 & 0x7F))) & 0x8080808080808080;
              if (v33) {
                break;
              }
LABEL_51:
              if ((v32 & (~v32 << 6) & 0x8080808080808080) != 0)
              {
                uint64_t v37 = *v24;
                *(void *)(v36[1]
                          + 8
                          * absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashSetPolicy<long long>,absl::lts_2020_02_25::hash_internal::Hash<long long>,std::equal_to<long long>,std::allocator<long long>>::prepare_insert(&v471[6 * i], v39)) = *(void *)(v37 + 8);
                goto LABEL_56;
              }
              v34 += 8;
              unint64_t v35 = v34 + v31;
            }
            while (*(void *)(v36[1] + 8 * ((v31 + (__clz(__rbit64(v33)) >> 3)) & v40)) != v38)
            {
              v33 &= v33 - 1;
              if (!v33) {
                goto LABEL_51;
              }
            }
          }
LABEL_56:
          v24 += 3;
        }
        while (v24 != v25);
        LOBYTE(v23) = v466[0];
      }
LABEL_58:
      if (v23) {
        operator delete(*(void **)&v466[8]);
      }
    }
  }
  unint64_t v468 = 0;
  v469 = 0;
  uint64_t v470 = 0;
  uint64_t v41 = (__p << 30) + 0x100000000;
  if (__p << 30 == 0xFFFFFFFF00000000)
  {
    uint64_t v44 = 0;
    uint64_t v48 = 8;
    int v47 = (uint64_t *)MEMORY[8];
    uint64_t v49 = v428[6];
    if (MEMORY[8]) {
      goto LABEL_65;
    }
  }
  else
  {
    if (v41 < 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    size_t v42 = 24 * (v41 >> 32);
    uint64_t v43 = (uint64_t **)operator new(v42);
    uint64_t v44 = v43;
    unint64_t v45 = 0;
    unint64_t v468 = (char *)v43;
    uint64_t v470 = &v43[v42 / 8];
    do
    {
      int v46 = &v43[v45 / 8];
      v46[2] = 0;
      v43[v45 / 8 + 1] = 0;
      *int v46 = (uint64_t *)&v43[v45 / 8 + 1];
      v45 += 24;
    }
    while (v42 != v45);
    v469 = (char *)&v43[v42 / 8];
    uint64_t v48 = (uint64_t)(v43 + 1);
    int v47 = v43[1];
    uint64_t v49 = v428[6];
    if (v47)
    {
LABEL_65:
      unint64_t v50 = v417;
      while (1)
      {
        while (1)
        {
          uint64_t v51 = (uint64_t **)v47;
          uint64_t v52 = v47[4];
          if (v49 >= v52) {
            break;
          }
          int v47 = *v51;
          uint64_t v48 = (uint64_t)v51;
          if (!*v51) {
            goto LABEL_73;
          }
        }
        if (v52 >= v49) {
          goto LABEL_76;
        }
        int v47 = v51[1];
        if (!v47)
        {
          uint64_t v48 = (uint64_t)(v51 + 1);
          goto LABEL_73;
        }
      }
    }
  }
  uint64_t v51 = (uint64_t **)v48;
  unint64_t v50 = v417;
LABEL_73:
  unint64_t v53 = (uint64_t *)operator new(0x28uLL);
  v53[4] = v49;
  *unint64_t v53 = 0;
  v53[1] = 0;
  v53[2] = (uint64_t)v51;
  *(void *)uint64_t v48 = v53;
  unint64_t v54 = (uint64_t *)**v44;
  if (v54)
  {
    *uint64_t v44 = v54;
    unint64_t v53 = *(uint64_t **)v48;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v44[1], v53);
  v44[2] = (uint64_t *)((char *)v44[2] + 1);
LABEL_76:
  std::set<long long>::set[abi:ne180100]<std::__wrap_iter<long long const*>>((void **)v466, (uint64_t *)v428[7], (uint64_t *)v428[8]);
  uint64_t v55 = v468;
  uint64_t v56 = (uint64_t)&v468[24 * (int)v50];
  uint64_t v57 = v56 + 8;
  std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy(v56, *(void **)(v56 + 8));
  *(void *)uint64_t v56 = *(void *)v466;
  uint64_t v58 = *(void *)&v466[8];
  *(void *)(v56 + 8) = *(void *)&v466[8];
  uint64_t v59 = *(void *)&v466[16];
  *(void *)(v56 + 16) = *(void *)&v466[16];
  if (v59)
  {
    *(void *)(v58 + 16) = v57;
    *(void *)v466 = &v466[8];
    *(void *)&v466[8] = 0;
    *(void *)&v466[16] = 0;
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v466, 0);
    if ((int)v419 <= 1) {
      goto LABEL_221;
    }
  }
  else
  {
    *(void *)uint64_t v56 = v57;
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v466, *(void **)&v466[8]);
    if ((int)v419 <= 1) {
      goto LABEL_221;
    }
  }
  if (v428[3] != v428[4])
  {
    uint64_t v60 = 0;
    uint64_t v61 = 1;
    do
    {
      int v62 = (uint64_t **)v428[3];
      int64_t v63 = (uint64_t **)v428[4];
      if (v62 != v63 && *(void *)&v468[24 * v60 + 8])
      {
        do
        {
          int v93 = &v468[24 * v60];
          uint64_t v96 = (void *)*((void *)v93 + 1);
          uint64_t v94 = v93 + 8;
          unint64_t v95 = v96;
          if (v96)
          {
            uint64_t v97 = *v62;
            uint64_t v98 = **v62;
            unint64_t v99 = v94;
            do
            {
              uint64_t v100 = v95[4];
              BOOL v101 = v100 < v98;
              if (v100 >= v98) {
                unint64_t v102 = v95;
              }
              else {
                unint64_t v102 = v95 + 1;
              }
              if (!v101) {
                unint64_t v99 = (char *)v95;
              }
              unint64_t v95 = (void *)*v102;
            }
            while (*v102);
            if (v99 != v94 && v98 >= *((void *)v99 + 4))
            {
              uint64_t v68 = 0;
              int64_t v103 = &v471[6 * v60];
              uint64_t v104 = v97[1];
              unint64_t v105 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v104)
                     * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                        * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                         + v104));
              uint64_t v106 = *v103;
              uint64_t v107 = v103[1];
              unint64_t v69 = (v105 >> 7) ^ ((unint64_t)*v103 >> 12);
              uint64_t v108 = v103[3];
              uint64_t v109 = 0x101010101010101 * (v105 & 0x7F);
              while (1)
              {
                uint64_t v64 = v69 & v108;
                uint64_t v65 = *(void *)(v106 + v64);
                unint64_t v66 = ((v65 ^ v109) - 0x101010101010101) & ~(v65 ^ v109) & 0x8080808080808080;
                if (v66) {
                  break;
                }
LABEL_89:
                if ((v65 & (~v65 << 6) & 0x8080808080808080) != 0) {
                  goto LABEL_140;
                }
                v68 += 8;
                unint64_t v69 = v68 + v64;
              }
              while (1)
              {
                unint64_t v67 = (v64 + (__clz(__rbit64(v66)) >> 3)) & v108;
                if (*(void *)(v107 + 8 * v67) == v104) {
                  break;
                }
                v66 &= v66 - 1;
                if (!v66) {
                  goto LABEL_89;
                }
              }
              if (v67 != v108)
              {
                uint64_t v70 = &v468[24 * v61];
                uint64_t v72 = (void **)(v70 + 8);
                uint64_t v71 = (void *)*((void *)v70 + 1);
                uint64_t v73 = v97[2];
                unint64_t v74 = v70 + 8;
                uint64_t v75 = v70 + 8;
                if (v71)
                {
                  while (1)
                  {
                    while (1)
                    {
                      uint64_t v75 = v71;
                      uint64_t v76 = v71[4];
                      if (v73 >= v76) {
                        break;
                      }
                      uint64_t v71 = (void *)*v75;
                      unint64_t v74 = v75;
                      if (!*v75) {
                        goto LABEL_99;
                      }
                    }
                    if (v76 >= v73) {
                      break;
                    }
                    uint64_t v71 = (void *)v75[1];
                    if (!v71)
                    {
                      unint64_t v74 = v75 + 1;
                      goto LABEL_99;
                    }
                  }
                }
                else
                {
LABEL_99:
                  int v77 = operator new(0x28uLL);
                  v77[4] = v73;
                  *int v77 = 0;
                  v77[1] = 0;
                  v77[2] = v75;
                  *unint64_t v74 = v77;
                  uint64_t v78 = **(void **)v70;
                  if (v78)
                  {
                    *(void *)uint64_t v70 = v78;
                    int v77 = (void *)*v74;
                  }
                  unint64_t v79 = *v72;
                  BOOL v80 = v77 == *v72;
                  *((unsigned char *)v77 + 24) = v80;
                  if (!v80)
                  {
                    do
                    {
                      uint64_t v81 = v77[2];
                      if (*(unsigned char *)(v81 + 24)) {
                        break;
                      }
                      BOOL v82 = *(unsigned char **)(v81 + 16);
                      uint64_t v83 = *(void *)v82;
                      if (*(void *)v82 == v81)
                      {
                        uint64_t v86 = *((void *)v82 + 1);
                        if (!v86 || (v87 = *(unsigned __int8 *)(v86 + 24), int64_t v84 = (unsigned char *)(v86 + 24), v87))
                        {
                          if (*(void **)v81 == v77)
                          {
                            *(unsigned char *)(v81 + 24) = 1;
                            v82[24] = 0;
                            uint64_t v90 = *(void *)(v81 + 8);
                            *(void *)BOOL v82 = v90;
                            if (v90) {
                              goto LABEL_116;
                            }
                          }
                          else
                          {
                            int v88 = *(uint64_t **)(v81 + 8);
                            uint64_t v89 = *v88;
                            *(void *)(v81 + 8) = *v88;
                            if (v89)
                            {
                              *(void *)(v89 + 16) = v81;
                              BOOL v82 = *(unsigned char **)(v81 + 16);
                            }
                            v88[2] = (uint64_t)v82;
                            *(void *)(*(void *)(v81 + 16) + 8 * (**(void **)(v81 + 16) != v81)) = v88;
                            *int v88 = v81;
                            *(void *)(v81 + 16) = v88;
                            BOOL v82 = (unsigned char *)v88[2];
                            uint64_t v81 = *(void *)v82;
                            *((unsigned char *)v88 + 24) = 1;
                            v82[24] = 0;
                            uint64_t v90 = *(void *)(v81 + 8);
                            *(void *)BOOL v82 = v90;
                            if (v90) {
LABEL_116:
                            }
                              *(void *)(v90 + 16) = v82;
                          }
                          *(void *)(v81 + 16) = *((void *)v82 + 2);
                          *(void *)(*((void *)v82 + 2) + 8 * (**((void **)v82 + 2) != (void)v82)) = v81;
                          *(void *)(v81 + 8) = v82;
LABEL_122:
                          *((void *)v82 + 2) = v81;
                          break;
                        }
                      }
                      else if (!v83 || (v85 = *(unsigned __int8 *)(v83 + 24), int64_t v84 = (unsigned char *)(v83 + 24), v85))
                      {
                        if (*(void **)v81 == v77)
                        {
                          uint64_t v92 = v77[1];
                          *(void *)uint64_t v81 = v92;
                          if (v92)
                          {
                            *(void *)(v92 + 16) = v81;
                            BOOL v82 = *(unsigned char **)(v81 + 16);
                          }
                          v77[2] = v82;
                          *(void *)(*(void *)(v81 + 16) + 8 * (**(void **)(v81 + 16) != v81)) = v77;
                          v77[1] = v81;
                          *(void *)(v81 + 16) = v77;
                          BOOL v82 = (unsigned char *)v77[2];
                          *((unsigned char *)v77 + 24) = 1;
                          v82[24] = 0;
                          uint64_t v81 = *((void *)v82 + 1);
                          uint64_t v91 = *(void **)v81;
                          *((void *)v82 + 1) = *(void *)v81;
                          if (v91) {
LABEL_120:
                          }
                            v91[2] = v82;
                        }
                        else
                        {
                          *(unsigned char *)(v81 + 24) = 1;
                          v82[24] = 0;
                          uint64_t v81 = *((void *)v82 + 1);
                          uint64_t v91 = *(void **)v81;
                          *((void *)v82 + 1) = *(void *)v81;
                          if (v91) {
                            goto LABEL_120;
                          }
                        }
                        *(void *)(v81 + 16) = *((void *)v82 + 2);
                        *(void *)(*((void *)v82 + 2) + 8 * (**((void **)v82 + 2) != (void)v82)) = v81;
                        *(void *)uint64_t v81 = v82;
                        goto LABEL_122;
                      }
                      *(unsigned char *)(v81 + 24) = 1;
                      int v77 = v82;
                      v82[24] = v82 == (unsigned char *)v79;
                      unsigned char *v84 = 1;
                    }
                    while (v82 != (unsigned char *)v79);
                  }
                  ++*((void *)v70 + 2);
                }
              }
            }
          }
LABEL_140:
          v62 += 3;
        }
        while (v62 != v63);
      }
      ++v60;
      ++v61;
    }
    while (v60 != v419 - 1);
    uint64_t v55 = v468;
    unint64_t v50 = v417;
  }
  do
  {
    uint64_t v112 = v50--;
    *(void *)&v466[8] = 0;
    *(void *)&v466[16] = 0;
    *(void *)v466 = &v466[8];
    unint64_t v114 = (uint64_t **)v428[3];
    uint64_t v113 = (uint64_t **)v428[4];
    if (v114 == v113 || !*(void *)&v55[24 * v50 + 8])
    {
      unsigned int v166 = 0;
      uint64_t v165 = &v466[8];
    }
    else
    {
      __pa = 0;
      do
      {
        uint64_t v148 = &v468[24 * v50];
        uint64_t v151 = (void *)*((void *)v148 + 1);
        uint64_t v149 = v148 + 8;
        uint64_t v150 = v151;
        if (v151)
        {
          uint64_t v152 = *v114;
          uint64_t v153 = **v114;
          uint64_t v154 = v149;
          do
          {
            uint64_t v155 = v150[4];
            BOOL v156 = v155 < v153;
            if (v155 >= v153) {
              uint64_t v157 = v150;
            }
            else {
              uint64_t v157 = v150 + 1;
            }
            if (!v156) {
              uint64_t v154 = (char *)v150;
            }
            uint64_t v150 = (void *)*v157;
          }
          while (*v157);
          if (v154 != v149 && v153 >= *((void *)v154 + 4))
          {
            uint64_t v119 = 0;
            unint64_t v158 = &v471[6 * v50];
            uint64_t v159 = v152[1];
            unint64_t v160 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v159)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v159));
            uint64_t v161 = *v158;
            uint64_t v162 = v158[1];
            unint64_t v120 = (v160 >> 7) ^ ((unint64_t)*v158 >> 12);
            uint64_t v163 = v158[3];
            uint64_t v164 = 0x101010101010101 * (v160 & 0x7F);
            while (1)
            {
              uint64_t v115 = v120 & v163;
              uint64_t v116 = *(void *)(v161 + v115);
              unint64_t v117 = ((v116 ^ v164) - 0x101010101010101) & ~(v116 ^ v164) & 0x8080808080808080;
              if (v117) {
                break;
              }
LABEL_154:
              if ((v116 & (~v116 << 6) & 0x8080808080808080) != 0) {
                goto LABEL_215;
              }
              v119 += 8;
              unint64_t v120 = v119 + v115;
            }
            while (1)
            {
              unint64_t v118 = (v115 + (__clz(__rbit64(v117)) >> 3)) & v163;
              if (*(void *)(v162 + 8 * v118) == v159) {
                break;
              }
              v117 &= v117 - 1;
              if (!v117) {
                goto LABEL_154;
              }
            }
            if (v118 != v163)
            {
              uint64_t v121 = &v468[24 * v112];
              uint64_t v124 = (void *)*((void *)v121 + 1);
              uint64_t v122 = v121 + 8;
              unint64_t v123 = v124;
              if (v124)
              {
                uint64_t v125 = v152[2];
                long long v126 = v122;
                do
                {
                  uint64_t v127 = v123[4];
                  BOOL v128 = v127 < v125;
                  if (v127 >= v125) {
                    int v129 = v123;
                  }
                  else {
                    int v129 = v123 + 1;
                  }
                  if (!v128) {
                    long long v126 = (char *)v123;
                  }
                  unint64_t v123 = (void *)*v129;
                }
                while (*v129);
                if (v126 != v122 && v125 >= *((void *)v126 + 4))
                {
                  int v130 = &v466[8];
                  unint64_t v131 = &v466[8];
                  if (*(void *)&v466[8])
                  {
                    int64_t v132 = *(void **)&v466[8];
                    while (1)
                    {
                      while (1)
                      {
                        unint64_t v131 = v132;
                        uint64_t v133 = v132[4];
                        if (v153 >= v133) {
                          break;
                        }
                        int64_t v132 = (void *)*v131;
                        int v130 = v131;
                        if (!*v131) {
                          goto LABEL_174;
                        }
                      }
                      if (v133 >= v153) {
                        break;
                      }
                      int64_t v132 = (void *)v131[1];
                      if (!v132)
                      {
                        int v130 = v131 + 1;
                        goto LABEL_174;
                      }
                    }
                  }
                  else
                  {
LABEL_174:
                    unint64_t v134 = operator new(0x28uLL);
                    v134[4] = v153;
                    *unint64_t v134 = 0;
                    v134[1] = 0;
                    v134[2] = v131;
                    void *v130 = v134;
                    if (**(void **)v466)
                    {
                      *(void *)v466 = **(void **)v466;
                      unint64_t v134 = (void *)*v130;
                    }
                    uint64_t v135 = *(unsigned char **)&v466[8];
                    *((unsigned char *)v134 + 24) = v134 == *(void **)&v466[8];
                    if (v134 != (void *)v135)
                    {
                      do
                      {
                        uint64_t v136 = v134[2];
                        if (*(unsigned char *)(v136 + 24)) {
                          break;
                        }
                        uint64_t v137 = *(unsigned char **)(v136 + 16);
                        uint64_t v138 = *(void *)v137;
                        if (*(void *)v137 == v136)
                        {
                          uint64_t v141 = *((void *)v137 + 1);
                          if (!v141 || (v142 = *(unsigned __int8 *)(v141 + 24), unint64_t v139 = (unsigned char *)(v141 + 24), v142))
                          {
                            if (*(void **)v136 == v134)
                            {
                              *(unsigned char *)(v136 + 24) = 1;
                              v137[24] = 0;
                              uint64_t v145 = *(void *)(v136 + 8);
                              *(void *)uint64_t v137 = v145;
                              if (v145) {
                                goto LABEL_190;
                              }
                            }
                            else
                            {
                              long long v143 = *(uint64_t **)(v136 + 8);
                              uint64_t v144 = *v143;
                              *(void *)(v136 + 8) = *v143;
                              if (v144)
                              {
                                *(void *)(v144 + 16) = v136;
                                uint64_t v137 = *(unsigned char **)(v136 + 16);
                              }
                              void v143[2] = (uint64_t)v137;
                              *(void *)(*(void *)(v136 + 16) + 8 * (**(void **)(v136 + 16) != v136)) = v143;
                              *long long v143 = v136;
                              *(void *)(v136 + 16) = v143;
                              uint64_t v137 = (unsigned char *)v143[2];
                              uint64_t v136 = *(void *)v137;
                              *((unsigned char *)v143 + 24) = 1;
                              v137[24] = 0;
                              uint64_t v145 = *(void *)(v136 + 8);
                              *(void *)uint64_t v137 = v145;
                              if (v145) {
LABEL_190:
                              }
                                *(void *)(v145 + 16) = v137;
                            }
                            *(void *)(v136 + 16) = *((void *)v137 + 2);
                            *(void *)(*((void *)v137 + 2) + 8 * (**((void **)v137 + 2) != (void)v137)) = v136;
                            *(void *)(v136 + 8) = v137;
LABEL_201:
                            *((void *)v137 + 2) = v136;
                            break;
                          }
                        }
                        else if (!v138 || (v140 = *(unsigned __int8 *)(v138 + 24), unint64_t v139 = (unsigned char *)(v138 + 24), v140))
                        {
                          if (*(void **)v136 == v134)
                          {
                            uint64_t v146 = v134[1];
                            *(void *)uint64_t v136 = v146;
                            if (v146)
                            {
                              *(void *)(v146 + 16) = v136;
                              uint64_t v137 = *(unsigned char **)(v136 + 16);
                            }
                            v134[2] = v137;
                            *(void *)(*(void *)(v136 + 16) + 8 * (**(void **)(v136 + 16) != v136)) = v134;
                            v134[1] = v136;
                            *(void *)(v136 + 16) = v134;
                            uint64_t v137 = (unsigned char *)v134[2];
                          }
                          else
                          {
                            unint64_t v134 = (void *)v134[2];
                          }
                          *((unsigned char *)v134 + 24) = 1;
                          v137[24] = 0;
                          uint64_t v136 = *((void *)v137 + 1);
                          int v147 = *(void **)v136;
                          *((void *)v137 + 1) = *(void *)v136;
                          if (v147) {
                            v147[2] = v137;
                          }
                          *(void *)(v136 + 16) = *((void *)v137 + 2);
                          *(void *)(*((void *)v137 + 2) + 8 * (**((void **)v137 + 2) != (void)v137)) = v136;
                          *(void *)uint64_t v136 = v137;
                          goto LABEL_201;
                        }
                        *(unsigned char *)(v136 + 24) = 1;
                        unint64_t v134 = v137;
                        v137[24] = v137 == v135;
                        unsigned char *v139 = 1;
                      }
                      while (v137 != v135);
                    }
                    *(void *)&v466[16] = ++__pa;
                  }
                }
              }
            }
          }
        }
LABEL_215:
        v114 += 3;
      }
      while (v114 != v113);
      uint64_t v55 = v468;
      uint64_t v165 = *(unsigned char **)v466;
      unsigned int v166 = __pa;
    }
    uint64_t v167 = &v55[24 * v50];
    uint64_t v168 = *(void *)v167;
    *(void *)uint64_t v167 = v165;
    *(void *)v466 = v168;
    uint64_t v170 = *((void *)v167 + 1);
    uint64_t v169 = v167 + 8;
    *((void *)v167 + 1) = *(void *)&v466[8];
    *(void *)&v466[8] = v170;
    uint64_t v171 = *((void *)v167 + 2);
    *((void *)v167 + 2) = v166;
    *(void *)&v466[16] = v171;
    if (*((void *)v167 + 2)) {
      uint64_t v167 = (char *)(*v169 + 16);
    }
    *(void *)uint64_t v167 = v169;
    unint64_t v110 = *(void **)&v466[8];
    uint64_t v111 = (void *)(*(void *)&v466[8] + 16);
    if (!v171) {
      uint64_t v111 = v466;
    }
    *uint64_t v111 = &v466[8];
    std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)v466, v110);
  }
  while (v112 > 2);
LABEL_221:
  memset(&v466[8], 0, 32);
  uint64_t v467 = 0;
  long long v463 = 0u;
  long long v464 = 0u;
  uint64_t v465 = 0;
  *(void *)v466 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  unint64_t v458 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  long long v459 = 0u;
  long long v460 = 0u;
  uint64_t v461 = 0;
  uint64_t v462 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
  if ((int)v419 < 1) {
    goto LABEL_537;
  }
  uint64_t v172 = 0;
  while (2)
  {
    int v456 = 0;
    uint64_t v457 = 0;
    unint64_t v452 = 0;
    v453 = 0;
    unint64_t v454 = 0;
    v455 = 0;
    v450 = 0;
    v451 = 0;
    unint64_t v446 = 0;
    unint64_t v447 = 0;
    v448 = 0;
    v449 = 0;
    int v173 = (uint64_t **)v428[3];
    unsigned __int8 v174 = (uint64_t **)v428[4];
    if (v173 == v174)
    {
      __pc = 0;
      uint64_t v296 = 0;
      unint64_t v295 = 0;
      v443 = 0;
      v444 = 0;
      uint64_t v445 = 0;
      goto LABEL_358;
    }
    __pb = 0;
    uint64_t v420 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = v172 + 1;
    do
    {
      while (1)
      {
        uint64_t v177 = &v468[24 * v172];
        unsigned __int8 v180 = (void *)*((void *)v177 + 1);
        int v178 = v177 + 8;
        uint64_t v179 = v180;
        if (v180)
        {
          uint64_t v181 = *v173;
          uint64_t v182 = **v173;
          uint64_t v183 = v178;
          do
          {
            uint64_t v184 = v179[4];
            BOOL v185 = v184 < v182;
            if (v184 >= v182) {
              uint64_t v186 = v179;
            }
            else {
              uint64_t v186 = v179 + 1;
            }
            if (!v185) {
              uint64_t v183 = (char *)v179;
            }
            uint64_t v179 = (void *)*v186;
          }
          while (*v186);
          if (v183 != v178 && v182 >= *((void *)v183 + 4))
          {
            uint64_t v187 = 0;
            unint64_t v188 = &v471[6 * v172];
            uint64_t v189 = v181[1];
            unint64_t v190 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v189)
                   * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                      * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                       + v189));
            uint64_t v191 = *v188;
            uint64_t v192 = v188[1];
            unint64_t v193 = (v190 >> 7) ^ ((unint64_t)*v188 >> 12);
            uint64_t v194 = v188[3];
            uint64_t v195 = 0x101010101010101 * (v190 & 0x7F);
            while (1)
            {
              uint64_t v196 = v193 & v194;
              uint64_t v197 = *(void *)(v191 + v196);
              unint64_t v198 = ((v197 ^ v195) - 0x101010101010101) & ~(v197 ^ v195) & 0x8080808080808080;
              if (v198) {
                break;
              }
LABEL_240:
              if ((v197 & (~v197 << 6) & 0x8080808080808080) != 0) {
                goto LABEL_253;
              }
              v187 += 8;
              unint64_t v193 = v187 + v196;
            }
            while (1)
            {
              unint64_t v199 = (v196 + (__clz(__rbit64(v198)) >> 3)) & v194;
              if (*(void *)(v192 + 8 * v199) == v189) {
                break;
              }
              v198 &= v198 - 1;
              if (!v198) {
                goto LABEL_240;
              }
            }
            if (v199 != v194)
            {
              unint64_t v200 = &v468[24 * v176];
              uint64_t v203 = (void *)*((void *)v200 + 1);
              unint64_t v201 = v200 + 8;
              uint64_t v202 = v203;
              if (v203)
              {
                uint64_t v204 = v181[2];
                uint64_t v205 = v201;
                do
                {
                  uint64_t v206 = v202[4];
                  BOOL v207 = v206 < v204;
                  if (v206 >= v204) {
                    int v208 = v202;
                  }
                  else {
                    int v208 = v202 + 1;
                  }
                  if (!v207) {
                    uint64_t v205 = (char *)v202;
                  }
                  uint64_t v202 = (void *)*v208;
                }
                while (*v208);
                if (v205 != v201 && v204 >= *((void *)v205 + 4)) {
                  break;
                }
              }
            }
          }
        }
LABEL_253:
        v173 += 3;
        if (v173 == v174) {
          goto LABEL_353;
        }
      }
      uint64_t v418 = v176;
      v486[0] = &unk_26F0BFC30;
      unint64_t v487 = v486;
      int v209 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
      int v210 = *((_DWORD *)v209 + 4);
      operations_research::sat::SatSolver::SetNumVariables(v209, v210 + 1);
      int v211 = 2 * v210;
      if (v175 < v420)
      {
        *(_DWORD *)uint64_t v175 = v211;
        uint64_t v212 = (uint64_t)(v175 + 4);
        int v213 = __pb;
        int v456 = v175 + 4;
        unint64_t v214 = v487;
        if (v487 == v486) {
          goto LABEL_276;
        }
        goto LABEL_257;
      }
      uint64_t v219 = (v175 - __pb) >> 2;
      unint64_t v220 = v219 + 1;
      if ((unint64_t)(v219 + 1) >> 62) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      if ((v420 - __pb) >> 1 > v220) {
        unint64_t v220 = (v420 - __pb) >> 1;
      }
      if ((unint64_t)(v420 - __pb) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v221 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v221 = v220;
      }
      if (v221)
      {
        if (v221 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v222 = v221;
        unint64_t v223 = operator new(4 * v221);
        unint64_t v221 = v222;
        unint64_t v224 = (int *)&v223[4 * v219];
        *unint64_t v224 = v211;
        uint64_t v212 = (uint64_t)(v224 + 1);
        char v225 = __pb;
        if (v175 != __pb)
        {
LABEL_270:
          unint64_t v226 = v175 - 4 - v225;
          if (v226 < 0xBC
            || &v223[v175 - __pb - 4 - (v226 & 0xFFFFFFFFFFFFFFFCLL)] > &v223[v175 - __pb - 4]
            || &v175[-(v226 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v175 - 4
            || (unint64_t)(__pb - v223) < 0x20)
          {
            unint64_t v227 = v175;
          }
          else
          {
            uint64_t v271 = (v226 >> 2) + 1;
            uint64_t v272 = 4 * (v271 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v227 = &v175[-v272];
            unint64_t v224 = (int *)((char *)v224 - v272);
            int64_t v273 = &v223[4 * v219 - 16];
            char v274 = v175 - 16;
            uint64_t v275 = v271 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v276 = *(_OWORD *)v274;
              *(v273 - 1) = *((_OWORD *)v274 - 1);
              *int64_t v273 = v276;
              v273 -= 2;
              v274 -= 32;
              v275 -= 8;
            }
            while (v275);
            if (v271 == (v271 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_273:
              v455 = v224;
              int v456 = (_DWORD *)v212;
              uint64_t v420 = &v223[4 * v221];
              uint64_t v457 = v420;
              if (!v225) {
                goto LABEL_275;
              }
LABEL_274:
              operator delete(v225);
              goto LABEL_275;
            }
          }
          do
          {
            int v228 = *((_DWORD *)v227 - 1);
            v227 -= 4;
            *--unint64_t v224 = v228;
          }
          while (v227 != v225);
          goto LABEL_273;
        }
      }
      else
      {
        unint64_t v223 = 0;
        unint64_t v224 = (int *)(4 * v219);
        *(_DWORD *)(4 * v219) = v211;
        uint64_t v212 = 4 * v219 + 4;
        char v225 = __pb;
        if (v175 != __pb) {
          goto LABEL_270;
        }
      }
      v455 = v224;
      int v456 = (_DWORD *)v212;
      uint64_t v420 = &v223[4 * v221];
      uint64_t v457 = v420;
      if (v225) {
        goto LABEL_274;
      }
LABEL_275:
      int v213 = (char *)v224;
      int v456 = (_DWORD *)v212;
      unint64_t v214 = v487;
      if (v487 == v486)
      {
LABEL_276:
        (*(void (**)(void *))(v486[0] + 32))(v486);
        uint64_t v215 = **v173;
        int v217 = v453;
        unint64_t v216 = v454;
        __pb = v213;
        if (v453 < v454) {
          goto LABEL_260;
        }
        goto LABEL_277;
      }
LABEL_257:
      if (v214) {
        (*(void (**)(void *))(*v214 + 40))(v214);
      }
      uint64_t v215 = **v173;
      int v217 = v453;
      unint64_t v216 = v454;
      __pb = v213;
      if (v453 < v454)
      {
LABEL_260:
        *(void *)int v217 = v215;
        uint64_t v218 = (uint64_t)(v217 + 8);
        goto LABEL_299;
      }
LABEL_277:
      uint64_t v229 = v452;
      uint64_t v230 = (v217 - v452) >> 3;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v232 = v216 - v452;
      if (v232 >> 2 > v231) {
        unint64_t v231 = v232 >> 2;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        if (v233 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v234 = v233;
        int v235 = operator new(8 * v233);
        unint64_t v233 = v234;
        __int16 v236 = &v235[8 * v230];
        *(void *)__int16 v236 = v215;
        uint64_t v218 = (uint64_t)(v236 + 8);
        if (v217 == v229) {
          goto LABEL_297;
        }
LABEL_291:
        unint64_t v237 = v217 - 8 - v229;
        if (v237 < 0x58) {
          goto LABEL_582;
        }
        if ((unint64_t)(v229 - v235) < 0x20) {
          goto LABEL_582;
        }
        uint64_t v238 = (v237 >> 3) + 1;
        uint64_t v239 = 8 * (v238 & 0x3FFFFFFFFFFFFFFCLL);
        int v240 = &v217[-v239];
        v236 -= v239;
        int v241 = &v235[8 * v230 - 16];
        unint64_t v242 = v217 - 16;
        uint64_t v243 = v238 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v244 = *(_OWORD *)v242;
          *(v241 - 1) = *((_OWORD *)v242 - 1);
          _OWORD *v241 = v244;
          v241 -= 2;
          v242 -= 32;
          v243 -= 4;
        }
        while (v243);
        int v217 = v240;
        if (v238 != (v238 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_582:
          do
          {
            uint64_t v245 = *((void *)v217 - 1);
            v217 -= 8;
            *((void *)v236 - 1) = v245;
            v236 -= 8;
          }
          while (v217 != v229);
        }
        goto LABEL_297;
      }
      int v235 = 0;
      __int16 v236 = (char *)(8 * v230);
      *(void *)(8 * v23google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = v215;
      uint64_t v218 = 8 * v230 + 8;
      if (v217 != v229) {
        goto LABEL_291;
      }
LABEL_297:
      unint64_t v452 = v236;
      unint64_t v454 = &v235[8 * v233];
      if (v229) {
        operator delete(v229);
      }
LABEL_299:
      v453 = (char *)v218;
      uint64_t v246 = (*v173)[1];
      unint64_t v247 = v450;
      if (v450 < v451)
      {
        *(void *)v450 = v246;
        uint64_t v176 = v418;
        v450 = v247 + 8;
        if (v418 == v427) {
          goto LABEL_301;
        }
        goto LABEL_343;
      }
      unint64_t v261 = v449;
      uint64_t v262 = (v450 - v449) >> 3;
      unint64_t v263 = v262 + 1;
      if ((unint64_t)(v262 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v264 = v451 - v449;
      if ((v451 - v449) >> 2 > v263) {
        unint64_t v263 = v264 >> 2;
      }
      if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v265 = v263;
      }
      if (v265)
      {
        if (v265 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v266 = v265;
        char v267 = operator new(8 * v265);
        unint64_t v265 = v266;
        unint64_t v268 = &v267[8 * v262];
        *(void *)unint64_t v268 = v246;
        uint64_t v269 = (uint64_t)(v268 + 8);
        if (v247 == v261)
        {
LABEL_325:
          uint64_t v176 = v418;
          goto LABEL_340;
        }
      }
      else
      {
        char v267 = 0;
        unint64_t v268 = (char *)(8 * v262);
        *(void *)(8 * v262) = v246;
        uint64_t v269 = 8 * v262 + 8;
        if (v247 == v261) {
          goto LABEL_325;
        }
      }
      unint64_t v270 = v247 - 8 - v261;
      if (v270 < 0x58)
      {
        uint64_t v176 = v418;
        do
        {
LABEL_339:
          uint64_t v284 = *((void *)v247 - 1);
          v247 -= 8;
          *((void *)v268 - 1) = v284;
          v268 -= 8;
        }
        while (v247 != v261);
        goto LABEL_340;
      }
      uint64_t v176 = v418;
      if ((unint64_t)(v261 - v267) < 0x20) {
        goto LABEL_339;
      }
      uint64_t v277 = (v270 >> 3) + 1;
      uint64_t v278 = 8 * (v277 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v279 = &v247[-v278];
      v268 -= v278;
      long long v280 = &v267[8 * v262 - 16];
      char v281 = (long long *)(v247 - 16);
      uint64_t v282 = v277 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v283 = *v281;
        *(v280 - 1) = *(v281 - 1);
        *long long v280 = v283;
        v280 -= 2;
        v281 -= 2;
        v282 -= 4;
      }
      while (v282);
      unint64_t v247 = v279;
      if (v277 != (v277 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_339;
      }
LABEL_340:
      v449 = v268;
      v451 = &v267[8 * v265];
      if (v261) {
        operator delete(v261);
      }
      v450 = (char *)v269;
      if (v176 == v427)
      {
LABEL_301:
        uint64_t v248 = 0;
        unint64_t v250 = v447;
        unint64_t v249 = v448;
        if (v447 < v448) {
          goto LABEL_344;
        }
        goto LABEL_302;
      }
LABEL_343:
      uint64_t v248 = (*v173)[2];
      unint64_t v250 = v447;
      unint64_t v249 = v448;
      if (v447 < v448)
      {
LABEL_344:
        *(void *)unint64_t v250 = v248;
        uint64_t v259 = (uint64_t)(v250 + 8);
        goto LABEL_352;
      }
LABEL_302:
      unint64_t v251 = v446;
      uint64_t v252 = (v250 - v446) >> 3;
      unint64_t v253 = v252 + 1;
      if ((unint64_t)(v252 + 1) >> 61) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v254 = v249 - v446;
      if (v254 >> 2 > v253) {
        unint64_t v253 = v254 >> 2;
      }
      if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v255 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v255 = v253;
      }
      if (v255)
      {
        if (v255 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v256 = v255;
        uint64_t v257 = operator new(8 * v255);
        unint64_t v255 = v256;
        uint64_t v258 = &v257[8 * v252];
        *(void *)uint64_t v258 = v248;
        uint64_t v259 = (uint64_t)(v258 + 8);
        if (v250 == v251)
        {
LABEL_327:
          uint64_t v176 = v418;
          goto LABEL_350;
        }
      }
      else
      {
        uint64_t v257 = 0;
        uint64_t v258 = (char *)(8 * v252);
        *(void *)(8 * v252) = v248;
        uint64_t v259 = 8 * v252 + 8;
        if (v250 == v251) {
          goto LABEL_327;
        }
      }
      unint64_t v260 = v250 - 8 - v251;
      if (v260 < 0x58)
      {
        uint64_t v176 = v418;
        do
        {
LABEL_349:
          uint64_t v292 = *((void *)v250 - 1);
          v250 -= 8;
          *((void *)v258 - 1) = v292;
          v258 -= 8;
        }
        while (v250 != v251);
        goto LABEL_350;
      }
      uint64_t v176 = v418;
      if ((unint64_t)(v251 - v257) < 0x20) {
        goto LABEL_349;
      }
      uint64_t v285 = (v260 >> 3) + 1;
      uint64_t v286 = 8 * (v285 & 0x3FFFFFFFFFFFFFFCLL);
      char v287 = &v250[-v286];
      v258 -= v286;
      uint64_t v288 = &v257[8 * v252 - 16];
      uint64_t v289 = (long long *)(v250 - 16);
      uint64_t v290 = v285 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v291 = *v289;
        *(v288 - 1) = *(v289 - 1);
        _OWORD *v288 = v291;
        v288 -= 2;
        v289 -= 2;
        v290 -= 4;
      }
      while (v290);
      unint64_t v250 = v287;
      if (v285 != (v285 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_349;
      }
LABEL_350:
      unint64_t v446 = v258;
      v448 = &v257[8 * v255];
      if (v251) {
        operator delete(v251);
      }
LABEL_352:
      unint64_t v447 = (char *)v259;
      v173 += 3;
      uint64_t v175 = (char *)v212;
    }
    while (v173 != v174);
LABEL_353:
    unint64_t v293 = v449;
    v443 = 0;
    v444 = 0;
    uint64_t v445 = 0;
    int64_t v294 = v450 - v449;
    __pc = v449;
    if (v450 == v449)
    {
      uint64_t v296 = 0;
      unint64_t v295 = 0;
    }
    else
    {
      if (v294 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v295 = (char *)operator new(v450 - v449);
      v443 = v295;
      uint64_t v296 = &v295[8 * (v294 >> 3)];
      uint64_t v445 = v296;
      memcpy(v295, v293, v294);
      v444 = v296;
    }
LABEL_358:
    unint64_t v297 = 126 - 2 * __clz((v296 - v295) >> 3);
    if (v296 == v295) {
      uint64_t v298 = 0;
    }
    else {
      uint64_t v298 = v297;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>((uint64_t)v295, v296, (uint64_t)v431, v298, 1);
    if (v296 != v295)
    {
      uint64_t v299 = v295 + 8;
      while (v299 != v296)
      {
        uint64_t v300 = *((void *)v299 - 1);
        uint64_t v301 = *(void *)v299;
        v299 += 8;
        if (v300 == v301)
        {
          unint64_t v302 = v299 - 16;
          while (v299 != v296)
          {
            uint64_t v303 = v300;
            uint64_t v300 = *(void *)v299;
            if (v303 != *(void *)v299)
            {
              *((void *)v302 + 1) = v300;
              v302 += 8;
            }
            v299 += 8;
          }
          uint64_t v309 = (char *)(v296 - (v302 + 8));
          if (v296 == v302 + 8) {
            break;
          }
          uint64_t v308 = (v302 + 8 - v295) >> 3;
          uint64_t v304 = &v295[8 * v308];
          int64_t v305 = v302 + 8 - v304;
          if (v296 != &v309[(void)v304]) {
            memmove(&v295[8 * v308], &v309[(void)v304], v302 + 8 - v304);
          }
          uint64_t v296 = &v304[v305];
          v444 = &v304[v305];
          unint64_t v306 = *(void *)&v466[24];
          if (*(void *)&v466[24] >= 0x80uLL) {
            goto LABEL_380;
          }
          goto LABEL_374;
        }
      }
    }
    unint64_t v306 = *(void *)&v466[24];
    if (*(void *)&v466[24] < 0x80uLL)
    {
LABEL_374:
      if (v306)
      {
        *(void *)&v466[16] = 0;
        memset(*(void **)v466, 128, v306 + 8);
        *(unsigned char *)(*(void *)v466 + *(void *)&v466[24]) = -1;
        unint64_t v306 = *(void *)&v466[24];
        uint64_t v307 = v306 - (v306 >> 3);
        if (*(void *)&v466[24] == 7) {
          uint64_t v307 = 6;
        }
        uint64_t v467 = v307 - *(void *)&v466[16];
      }
    }
    else
    {
LABEL_380:
      operator delete(*(void **)v466);
      unint64_t v306 = 0;
      *(void *)v466 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v467 = 0;
      memset(&v466[8], 0, 24);
    }
    uint64_t v310 = *(unint64_t **)&v466[32];
    if (!*(void *)&v466[32])
    {
      size_t v311 = v296 - v295;
      uint64_t v312 = (v296 - v295) >> 3;
      if ((unint64_t)(v296 - v295) >= 9) {
        goto LABEL_383;
      }
LABEL_445:
      v431[0] = (void *)v312;
      int v430 = 1;
      if (v311 != 8) {
        google::MakeCheckOpString<unsigned long,int>((int)v431, (int)&v430, "s.size() == 1");
      }
      uint64_t v350 = *(void *)v295;
      uint64_t v351 = *(unsigned int *)(*v428 + 4 * v172);
      unint64_t v480 = (void (**)(void **))&unk_26F0C0AC8;
      v481[0] = v351;
      v481[1] = v350;
      uint64_t v482 = (void **)&v480;
      operations_research::sat::LowerOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)v481, a2);
      if (v482 == (void **)&v480)
      {
        v480[4]((void **)&v480);
      }
      else if (v482)
      {
        (*((void (**)(void))*v482 + 5))();
      }
      uint64_t v352 = *(unsigned int *)(*v428 + 4 * v172);
      v477 = (void (**)(void **))&unk_26F0C0B48;
      v478[0] = v352;
      v478[1] = v350;
      uint64_t v479 = (void **)&v477;
      operations_research::sat::GreaterOrEqual(gtl::IntType<operations_research::sat::IntegerVariable_tag_,int>,long long)::{lambda(operations_research::sat::Model *)#1}::operator()((int *)v478, a2);
      if (v479 == (void **)&v477)
      {
        v477[4]((void **)&v477);
      }
      else if (v479)
      {
        (*((void (**)(void))*v479 + 5))();
      }
LABEL_454:
      operator delete(v295);
      v431[0] = 0;
      v431[1] = 0;
      *(void *)&long long v432 = 0;
      int v346 = v446;
      int64_t v347 = v447 - v446;
      if (v447 == v446) {
        goto LABEL_455;
      }
LABEL_442:
      if (v347 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v348 = (char *)operator new(v347);
      int v349 = &v348[8 * (v347 >> 3)];
      v431[0] = v348;
      *(void *)&long long v432 = v349;
      memcpy(v348, v346, v347);
      goto LABEL_456;
    }
    *(void *)(*(void *)&v466[32] + 8) = 0;
    unint64_t *v310 = v306;
    v310[4] = 0;
    v310[2] = 0;
    size_t v311 = v296 - v295;
    uint64_t v312 = (v296 - v295) >> 3;
    if ((unint64_t)(v296 - v295) < 9) {
      goto LABEL_445;
    }
LABEL_383:
    unint64_t v440 = 0;
    uint64_t v441 = 0;
    uint64_t v442 = 0;
    if ((v311 & 0x8000000000000000) != 0) {
      std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v313 = (char *)operator new(v311);
    unint64_t v440 = v313;
    uint64_t v441 = (uint64_t)v313;
    uint64_t v442 = &v313[8 * v312];
    unint64_t v314 = v313;
    v421 = v295;
    if (v295 != v296)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v315 = *(void *)v295;
          if (v313 >= v442) {
            break;
          }
          *(void *)uint64_t v313 = v315;
          v313 += 8;
          uint64_t v441 = (uint64_t)v313;
          v295 += 8;
          if (v295 == v296) {
            goto LABEL_414;
          }
        }
        unint64_t v316 = v440;
        int64_t v317 = v313 - v440;
        uint64_t v318 = (v313 - v440) >> 3;
        unint64_t v319 = v318 + 1;
        if ((unint64_t)(v318 + 1) >> 61) {
          std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v320 = v442 - v440;
        if ((v442 - v440) >> 2 > v319) {
          unint64_t v319 = v320 >> 2;
        }
        unint64_t v321 = (unint64_t)v320 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v319;
        if (v321)
        {
          if (v321 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v322 = operator new(8 * v321);
          char v323 = &v322[8 * v318];
          *(void *)char v323 = v315;
          uint64_t v324 = (uint64_t)(v323 + 8);
          if (v313 == v316)
          {
LABEL_405:
            unint64_t v440 = v323;
            uint64_t v441 = v324;
            uint64_t v442 = &v322[8 * v321];
            if (!v316) {
              goto LABEL_402;
            }
LABEL_401:
            operator delete(v316);
            goto LABEL_402;
          }
        }
        else
        {
          unint64_t v322 = 0;
          char v323 = (char *)(8 * v318);
          *(void *)(8 * v318) = v315;
          uint64_t v324 = 8 * v318 + 8;
          if (v313 == v316) {
            goto LABEL_405;
          }
        }
        unint64_t v325 = v313 - 8 - v316;
        if (v325 < 0x168
          || &v322[v317 - 8 - (v325 & 0xFFFFFFFFFFFFFFF8)] > &v322[v317 - 8]
          || &v313[-(v325 & 0xFFFFFFFFFFFFFFF8) - 8] > v313 - 8
          || (unint64_t)(v313 - v322 - v317) < 0x20)
        {
          break;
        }
        uint64_t v328 = (v325 >> 3) + 1;
        uint64_t v329 = 8 * (v328 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v326 = &v313[-v329];
        v323 -= v329;
        char v330 = &v322[8 * v318 - 16];
        int32x4_t v331 = (long long *)(v313 - 16);
        uint64_t v332 = v328 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v333 = *v331;
          *(v330 - 1) = *(v331 - 1);
          _OWORD *v330 = v333;
          v330 -= 2;
          v331 -= 2;
          v332 -= 4;
        }
        while (v332);
        if (v328 != (v328 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_399;
        }
LABEL_400:
        unint64_t v440 = v323;
        uint64_t v441 = v324;
        uint64_t v442 = &v322[8 * v321];
        if (v316) {
          goto LABEL_401;
        }
LABEL_402:
        uint64_t v313 = (char *)v324;
        uint64_t v441 = v324;
        v295 += 8;
        if (v295 == v296)
        {
LABEL_414:
          unint64_t v314 = v440;
          goto LABEL_415;
        }
      }
      unint64_t v326 = v313;
      do
      {
LABEL_399:
        uint64_t v327 = *((void *)v326 - 1);
        v326 -= 8;
        *((void *)v323 - 1) = v327;
        v323 -= 8;
      }
      while (v326 != v316);
      goto LABEL_400;
    }
LABEL_415:
    int v334 = *(_DWORD *)(*v428 + 4 * v172);
    v437 = 0;
    v438 = 0;
    v436 = 0;
    uint64_t v335 = v313 - v314;
    unint64_t v295 = v421;
    if (v313 != v314)
    {
      if (v335 < 0) {
        std::vector<L2CycleEstimator *>::__throw_length_error[abi:ne180100]();
      }
      v436 = operator new(v313 - v314);
      v437 = v436;
      v336 = (char *)v436 + 8 * (v335 >> 3);
      v438 = v336;
      memcpy(v436, v314, v313 - v314);
      v437 = v336;
    }
    operations_research::Domain::FromValues((int64_t **)&v436, v439);
    operations_research::sat::IntegerTrail::UpdateInitialDomain(v422, v334, (operations_research::Domain *)v439);
    if (v439[0]) {
      operator delete((void *)v439[1]);
    }
    if (v436)
    {
      v437 = v436;
      operator delete(v436);
    }
    signed int v337 = *(_DWORD *)(*v428 + 4 * v172);
    v483 = (void (**)(void **))&unk_26F0BD370;
    signed int v484 = v337;
    v485 = (void **)&v483;
    v338 = (void *)operations_research::sat::Model::GetOrCreate<operations_research::sat::IntegerEncoder>(a2);
    if (!operations_research::sat::IntegerEncoder::VariableIsFullyEncoded((uint64_t)v338, v484)) {
      operations_research::sat::IntegerEncoder::FullyEncodeVariable((uint64_t)v338, v484);
    }
    operations_research::sat::IntegerEncoder::FullDomainEncoding(v338, v484, (char **)v435);
    if (v435[0])
    {
      v435[1] = v435[0];
      operator delete(v435[0]);
    }
    if (v485 == (void **)&v483)
    {
      v483[4]((void **)&v483);
    }
    else if (v485)
    {
      (*((void (**)(void))*v485 + 5))();
    }
    v339 = v433;
    uint64_t v340 = v434;
    v433 = 0;
    uint64_t v434 = 0;
    std::string::size_type v341 = *(void **)v466;
    long long v342 = *(_OWORD *)v431;
    long long v343 = v432;
    v431[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    v431[1] = 0;
    long long v432 = 0uLL;
    uint64_t v344 = *(void *)&v466[24];
    unint64_t v345 = *(void **)&v466[32];
    *(_OWORD *)v466 = v342;
    *(_OWORD *)&v466[16] = v343;
    *(void *)&v466[32] = v339;
    uint64_t v467 = v340;
    if (v344) {
      operator delete(v341);
    }
    if (v345) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v345);
    }
    if (*((void *)&v432 + 1))
    {
      operator delete(v431[0]);
      v431[0] = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v434 = 0;
      long long v432 = 0uLL;
      v431[1] = 0;
    }
    if (v433) {
      absl::lts_2020_02_25::container_internal::UnsampleSlow(v433);
    }
    if (v440)
    {
      uint64_t v441 = (uint64_t)v440;
      operator delete(v440);
    }
    if (v421) {
      goto LABEL_454;
    }
    v431[0] = 0;
    v431[1] = 0;
    *(void *)&long long v432 = 0;
    int v346 = v446;
    int64_t v347 = v447 - v446;
    if (v447 != v446) {
      goto LABEL_442;
    }
LABEL_455:
    int v349 = 0;
    uint64_t v348 = 0;
LABEL_456:
    unint64_t v353 = 126 - 2 * __clz((v349 - v348) >> 3);
    if (v349 == v348) {
      uint64_t v354 = 0;
    }
    else {
      uint64_t v354 = v353;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> *,false>((uint64_t)v348, v349, (uint64_t)&v443, v354, 1);
    if (v349 != v348)
    {
      int v355 = v348 + 8;
      while (v355 != v349)
      {
        uint64_t v356 = *((void *)v355 - 1);
        uint64_t v357 = *(void *)v355;
        v355 += 8;
        if (v356 == v357)
        {
          v358 = v355 - 16;
          while (v355 != v349)
          {
            uint64_t v359 = v356;
            uint64_t v356 = *(void *)v355;
            if (v359 != *(void *)v355)
            {
              *((void *)v358 + 1) = v356;
              v358 += 8;
            }
            v355 += 8;
          }
          unint64_t v365 = (char *)(v349 - (v358 + 8));
          if (v349 == v358 + 8) {
            break;
          }
          uint64_t v364 = (v358 + 8 - v348) >> 3;
          unint64_t v360 = &v348[8 * v364];
          int64_t v361 = v358 + 8 - v360;
          if (v349 != &v365[(void)v360]) {
            memmove(&v348[8 * v364], &v365[(void)v360], v358 + 8 - v360);
          }
          int v349 = &v360[v361];
          v431[1] = &v360[v361];
          unint64_t v362 = v460;
          if ((unint64_t)v460 >= 0x80) {
            goto LABEL_478;
          }
          goto LABEL_472;
        }
      }
    }
    unint64_t v362 = v460;
    if ((unint64_t)v460 < 0x80)
    {
LABEL_472:
      if (v362)
      {
        *((void *)&v459 + 1) = 0;
        memset((void *)v458, 128, v362 + 8);
        *(unsigned char *)(v458 + v46google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ortools_2fsat_2fsat_5fparameters_2eproto, 0) = -1;
        unint64_t v362 = v460;
        uint64_t v363 = v362 - (v362 >> 3);
        if ((void)v460 == 7) {
          uint64_t v363 = 6;
        }
        uint64_t v461 = v363 - *((void *)&v459 + 1);
      }
    }
    else
    {
LABEL_478:
      operator delete((void *)v458);
      unint64_t v362 = 0;
      unint64_t v458 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
      uint64_t v461 = 0;
      *(void *)&long long v460 = 0;
      long long v459 = 0uLL;
    }
    uint64_t v366 = (unint64_t *)*((void *)&v460 + 1);
    if (*((void *)&v460 + 1))
    {
      *(void *)(*((void *)&v460 + 1) + 8) = 0;
      *uint64_t v366 = v362;
      v366[4] = 0;
      v366[2] = 0;
      unint64_t v367 = v349 - v348;
      if (v349 - v348 == 16) {
        goto LABEL_481;
      }
    }
    else
    {
      unint64_t v367 = v349 - v348;
      if (v349 - v348 == 16)
      {
LABEL_481:
        v475[0] = &unk_26F0BFC30;
        v476 = v475;
        v368 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
        int v369 = *((_DWORD *)v368 + 4);
        operations_research::sat::SatSolver::SetNumVariables(v368, v369 + 1);
        if (v476 == v475)
        {
          (*(void (**)(void *))(v475[0] + 32))(v475);
        }
        else if (v476)
        {
          (*(void (**)(void))(*v476 + 40))();
        }
        uint64_t v370 = 0;
        int v371 = 2 * v369;
        unint64_t v372 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + *(void *)v348)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + *(void *)v348));
        unint64_t v373 = v458;
        uint64_t v374 = v459;
        unint64_t v375 = v458 >> 12;
        unint64_t v376 = (v458 >> 12) ^ (v372 >> 7);
        uint64_t v377 = v460;
        while (1)
        {
          unint64_t v378 = v376 & v460;
          uint64_t v379 = *(void *)(v458 + v378);
          unint64_t v380 = ((v379 ^ (0x101010101010101 * (v372 & 0x7F))) - 0x101010101010101) & ~(v379 ^ (0x101010101010101
                                                                                                  * (v372 & 0x7F))) & 0x8080808080808080;
          if (v380) {
            break;
          }
LABEL_489:
          if ((v379 & (~v379 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v381 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v458, v372);
            uint64_t v374 = v459;
            *(void *)(v459 + 12 * v381) = *(void *)v348;
            unint64_t v373 = v458;
            uint64_t v377 = v460;
            unint64_t v375 = v458 >> 12;
            goto LABEL_493;
          }
          v370 += 8;
          unint64_t v376 = v370 + v378;
        }
        while (1)
        {
          unint64_t v381 = (v378 + (__clz(__rbit64(v380)) >> 3)) & v460;
          if (*(void *)(v459 + 12 * v381) == *(void *)v348) {
            break;
          }
          v380 &= v380 - 1;
          if (!v380) {
            goto LABEL_489;
          }
        }
LABEL_493:
        uint64_t v382 = 0;
        *(_DWORD *)(v374 + 12 * v381 + 8) = v371;
        int v383 = v371 | 1;
        uint64_t v384 = *((void *)v349 - 1);
        unint64_t v385 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v384)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v384));
        unint64_t v386 = v375 ^ (v385 >> 7);
        uint64_t v387 = v459;
        while (1)
        {
          unint64_t v388 = v386 & v377;
          uint64_t v389 = *(void *)(v373 + v388);
          unint64_t v390 = ((v389 ^ (0x101010101010101 * (v385 & 0x7F))) - 0x101010101010101) & ~(v389 ^ (0x101010101010101
                                                                                                  * (v385 & 0x7F))) & 0x8080808080808080;
          if (v390) {
            break;
          }
LABEL_497:
          if ((v389 & (~v389 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v391 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v458, v385);
            uint64_t v387 = v459;
            *(void *)(v459 + 12 * v391) = *((void *)v349 - 1);
            goto LABEL_501;
          }
          v382 += 8;
          unint64_t v386 = v382 + v388;
        }
        while (1)
        {
          unint64_t v391 = (v388 + (__clz(__rbit64(v390)) >> 3)) & v377;
          if (*(void *)(v459 + 12 * v391) == v384) {
            break;
          }
          v390 &= v390 - 1;
          if (!v390) {
            goto LABEL_497;
          }
        }
LABEL_501:
        *(_DWORD *)(v387 + 12 * v391 + 8) = v383;
        goto LABEL_518;
      }
    }
    if (v348 != v349 && v367 >= 9)
    {
      BOOL v392 = v348;
LABEL_512:
      while (2)
      {
        uint64_t v399 = *(void *)v392;
        v473[0] = &unk_26F0BFC30;
        v474 = v473;
        v400 = (operations_research::sat::SatSolver *)operations_research::sat::Model::GetOrCreate<operations_research::sat::SatSolver>(a2);
        int v401 = *((_DWORD *)v400 + 4);
        operations_research::sat::SatSolver::SetNumVariables(v400, v401 + 1);
        if (v474 == v473)
        {
          (*(void (**)(void *))(v473[0] + 32))(v473);
        }
        else if (v474)
        {
          (*(void (**)(void))(*v474 + 40))();
        }
        uint64_t v397 = 0;
        int v402 = 2 * v401;
        unint64_t v403 = ((((unint64_t)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed + v399)
               * (unsigned __int128)0x9DDFEA08EB382D69) >> 64) ^ (0x9DDFEA08EB382D69
                                                                  * ((void)&absl::lts_2020_02_25::hash_internal::CityHashState::kSeed
                                                                   + v399));
        for (unint64_t j = (v458 >> 12) ^ (v403 >> 7); ; unint64_t j = v397 + v393)
        {
          unint64_t v393 = j & v460;
          uint64_t v394 = *(void *)(v458 + v393);
          unint64_t v395 = ((v394 ^ (0x101010101010101 * (v403 & 0x7F))) - 0x101010101010101) & ~(v394 ^ (0x101010101010101
                                                                                                  * (v403 & 0x7F))) & 0x8080808080808080;
          if (v395)
          {
            while (1)
            {
              unint64_t v396 = (v393 + (__clz(__rbit64(v395)) >> 3)) & v460;
              if (*(void *)(v459 + 12 * v396) == v399) {
                break;
              }
              v395 &= v395 - 1;
              if (!v395) {
                goto LABEL_509;
              }
            }
            *(_DWORD *)(v459 + 12 * v396 + 8) = v402;
            v392 += 8;
            if (v392 == v349) {
              goto LABEL_518;
            }
            goto LABEL_512;
          }
LABEL_509:
          if ((v394 & (~v394 << 6) & 0x8080808080808080) != 0) {
            break;
          }
          v397 += 8;
        }
        unint64_t v404 = absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::prepare_insert((uint64_t *)&v458, v403);
        uint64_t v405 = v459;
        *(void *)(v459 + 12 * v404) = v399;
        *(_DWORD *)(v405 + 12 * v404 + 8) = v402;
        v392 += 8;
        if (v392 != v349) {
          continue;
        }
        break;
      }
    }
LABEL_518:
    if (v348) {
      operator delete(v348);
    }
    if (*((void *)&v463 + 1))
    {
      v431[0] = 0;
      v431[1] = 0;
      *(void *)&long long v432 = 0;
    }
    if (*(void *)&v466[16])
    {
      v431[0] = 0;
      v431[1] = 0;
      *(void *)&long long v432 = 0;
    }
    if (*((void *)&v459 + 1))
    {
      v431[0] = 0;
      v431[1] = 0;
      *(void *)&long long v432 = 0;
    }
    absl::lts_2020_02_25::container_internal::raw_hash_set<absl::lts_2020_02_25::container_internal::FlatHashMapPolicy<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>,operations_research::sat::Literal>,absl::lts_2020_02_25::hash_internal::Hash<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::equal_to<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long>>,std::allocator<std::pair<gtl::IntType<operations_research::sat::IntegerValue_tag_,long long> const,operations_research::sat::Literal>>>::operator=((long long *)&v462, (char **)&v458);
    if (v346) {
      operator delete(v346);
    }
    if (__pc) {
      operator delete(__pc);
    }
    if (v452) {
      operator delete(v452);
    }
    if (v455) {
      operator delete(v455);
    }
    if (++v172 != v427) {
      continue;
    }
    break;
  }
  if ((void)v460)
  {
    operator delete((void *)v458);
    unint64_t v458 = (unint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v461 = 0;
    *(void *)&long long v460 = 0;
    long long v459 = 0uLL;
  }
LABEL_537:
  if (*((void *)&v460 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v460 + 1));
  }
  if ((void)v464)
  {
    operator delete((void *)v462);
    uint64_t v462 = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v465 = 0;
    *(void *)&long long v464 = 0;
    long long v463 = 0uLL;
  }
  if (*((void *)&v464 + 1)) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*((void **)&v464 + 1));
  }
  if (*(void *)&v466[24])
  {
    operator delete(*(void **)v466);
    *(void *)v466 = &absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
    uint64_t v467 = 0;
    memset(&v466[8], 0, 24);
  }
  if (*(void *)&v466[32]) {
    absl::lts_2020_02_25::container_internal::UnsampleSlow(*(void **)&v466[32]);
  }
  v406 = v468;
  if (v468)
  {
    int v407 = v469;
    if (v469 != v468)
    {
      do
      {
        uint64_t v408 = v407 - 24;
        std::__tree<std::__value_type<unsigned long,void *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,void *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,void *>>>::destroy((uint64_t)(v407 - 24), *((void **)v407 - 2));
        int v407 = v408;
      }
      while (v408 != v406);
      v406 = v468;
    }
    operator delete(v406);
  }
  uint64_t v409 = v471;
  if (v471)
  {
    unint64_t v410 = v472;
    uint64_t v411 = v471;
    if (v472 != v471)
    {
      do
      {
        if (*(v410 - 3))
        {
          operator delete((void *)*(v410 - 6));
          *(v410 - 1) = 0;
          *(v410 - 6) = (uint64_t)&absl::lts_2020_02_25::container_internal::EmptyGroup(void)::empty_group;
          *(v410 - 5) = 0;
          *(v410 - 4) = 0;
          *(v410 - 3) = 0;
        }
        unint64_t v412 = (void *)*(v410 - 2);
        if (v412) {
          absl::lts_2020_02_25::container_internal::UnsampleSlow(v412);
        }
        v410 -= 6;
      }
      while (v410 != v409);
      uint64_t v411 = v471;
    }
    v472 = v409;
    operator delete(v411);
  }
}