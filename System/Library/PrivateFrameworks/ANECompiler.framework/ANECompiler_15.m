uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::anec::UnrealizedConversionCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl,mlir::ExecutionCostOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::anec::UnrealizedConversionCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl,mlir::ExecutionCostOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl>(void)::Empty>>();
  uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  uint64_t v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  uint64_t v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  uint64_t v9 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl>(void)::Empty>>();
  uint64_t v10 = mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ExecutionCostOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl>(void)::Empty>>()
{
  v0 = &unk_267771000;
  {
    v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl<Empty>]";
      unint64_t v11 = 110;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      v0 = (void *)&unk_267771000;
    }
  }
  return v0[273];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::anec::UnrealizedConversionCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl,mlir::ExecutionCostOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

uint64_t mlir::Op<mlir::anec::UnrealizedConversionCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl,mlir::ExecutionCostOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::anec::UnrealizedConversionCast>,mlir::OpTrait::OneResult<mlir::anec::UnrealizedConversionCast>,mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl<mlir::anec::UnrealizedConversionCast>,mlir::OpTrait::ZeroSuccessors<mlir::anec::UnrealizedConversionCast>,mlir::OpTrait::OneOperand<mlir::anec::UnrealizedConversionCast>,mlir::OpTrait::OpInvariants<mlir::anec::UnrealizedConversionCast>,mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl<mlir::anec::UnrealizedConversionCast>,mlir::ExecutionCostOpInterface::Trait<mlir::anec::UnrealizedConversionCast>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (uint64_t v7 = a1,
        mlir::anec::UnrealizedConversionCast::verifyInvariantsImpl((mlir::anec::UnrealizedConversionCast *)&v7)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl<mlir::anec::A11Legacy>>((uint64_t)a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::anec::UnrealizedConversionCast,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::ShapedType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)0>::Impl,mlir::ExecutionCostOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::anec::getOpMinimumFamilyImpl<(mlir::anec::Family)3>(uint64_t a1)
{
  uint64_t v2 = 0x100000002;
  uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)3>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)3>::Impl>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v3)) {
    return 0x100000003;
  }
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)2>::Impl>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v4)) {
    return v2;
  }
  uint64_t v5 = mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)1>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::MinimumFamily<(mlir::anec::Family)1>::Impl>(void)::Empty>>();
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v5)) {
    return 0x100000001;
  }

  return mlir::anec::getOpMinimumFamilyImpl<(mlir::anec::Family)0>(a1);
}

uint64_t *llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(uint64_t *a1)
{
  v1 = a1;
  uint64_t v2 = *a1;
  unint64_t v3 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v4 = *(unsigned int *)(v2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void **)(v2 + 8);
  unint64_t v6 = &v5[2 * v4];
  do
  {
    unint64_t v7 = v4 >> 1;
    unint64_t v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 == v6 || *v5 != v3 || !v5[1]) {
    return 0;
  }
  if (v1)
  {
    uint64_t v12 = *v1;
    unint64_t v13 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v14 = *(unsigned int *)(v12 + 16);
    if (v14)
    {
      v15 = *(void **)(v12 + 8);
      do
      {
        unint64_t v16 = v14 >> 1;
        v17 = &v15[2 * (v14 >> 1)];
        unint64_t v19 = *v17;
        v18 = v17 + 2;
        v14 += ~(v14 >> 1);
        if (v19 < v13) {
          v15 = v18;
        }
        else {
          unint64_t v14 = v16;
        }
      }
      while (v14);
    }
  }
  return v1;
}

void ZinIrBroadcastUnitInfo::~ZinIrBroadcastUnitInfo(ZinIrBroadcastUnitInfo *this)
{
  *(void *)this = &unk_26C34F840;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    unint64_t v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      unint64_t v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_26C34F840;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    unint64_t v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      unint64_t v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void *std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_41;
    }
    if (prime < v8)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v8) {
LABEL_41:
      }
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void *)a1;
  v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *unint64_t v11 = *v23;
LABEL_55:
    void *v23 = v11;
    goto LABEL_56;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v24 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v11;
}

void llvm::detail::provider_format_adapter<long long &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<long long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<long long,void>::format(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  float v14 = a3;
  uint64_t v15 = a4;
  int v13 = 0;
  if (llvm::detail::HelperFunctions::consumeHexStyle((uint64_t)&v14, &v13))
  {
    int v6 = v13;
    unint64_t v16 = 0;
    if (llvm::consumeUnsignedInteger(&v14, 0xAu, &v16)) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = v16;
    }
    if (ZinHWEnumsUtils::IsHWKernelFormatFloat(v6)) {
      unint64_t v8 = v7 + 2;
    }
    else {
      unint64_t v8 = v7;
    }
    return llvm::write_hex(a2, *a1, v13, v8, 1);
  }
  if (v15)
  {
    int v10 = 0;
    unsigned int v11 = *v14;
    if (v11 <= 0x63)
    {
      if (v11 != 68)
      {
        if (v11 != 78) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
LABEL_18:
      int v10 = 0;
      ++v14;
      goto LABEL_19;
    }
    if (v11 == 100) {
      goto LABEL_18;
    }
    if (v11 == 110)
    {
LABEL_17:
      ++v14;
      int v10 = 1;
LABEL_19:
      --v15;
    }
  }
  else
  {
    int v10 = 0;
  }
LABEL_20:
  unint64_t v16 = 0;
  if (llvm::consumeUnsignedInteger(&v14, 0xAu, &v16)) {
    size_t v12 = 0;
  }
  else {
    size_t v12 = v16;
  }
  return llvm::write_integer(a2, *a1, v12, v10);
}

BOOL llvm::detail::HelperFunctions::consumeHexStyle(uint64_t a1, int *a2)
{
  BOOL v4 = llvm::StringRef::starts_with_insensitive((unsigned __int8 **)a1, "x", 1uLL);
  if (!v4) {
    return v4;
  }
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= 2)
  {
    int v6 = *(unsigned __int8 **)a1;
    if (**(_WORD **)a1 == 11640)
    {
      unint64_t v7 = v6 + 2;
      unint64_t v8 = v5 - 2;
      int v9 = 1;
    }
    else
    {
      if (*(_WORD *)v6 == 11608)
      {
        int v9 = 0;
      }
      else
      {
        if (*(_WORD *)v6 == 11128)
        {
          unint64_t v7 = v6 + 2;
          unint64_t v8 = v5 - 2;
          goto LABEL_15;
        }
        if (*v6 == 120)
        {
LABEL_10:
          unint64_t v7 = v6 + 1;
          unint64_t v8 = v5 - 1;
LABEL_15:
          int v9 = 3;
          goto LABEL_16;
        }
        if (*(_WORD *)v6 != 11096) {
          goto LABEL_18;
        }
        int v9 = 2;
      }
      unint64_t v7 = v6 + 2;
      unint64_t v8 = v5 - 2;
    }
LABEL_16:
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
LABEL_20:
    *a2 = v9;
    return v4;
  }
  if (v5)
  {
    int v6 = *(unsigned __int8 **)a1;
    if (**(unsigned char **)a1 == 120) {
      goto LABEL_10;
    }
  }
LABEL_18:
  if (llvm::StringRef::consume_front((const void **)a1, "X", 1uLL))
  {
    int v9 = 2;
    goto LABEL_20;
  }
  return v4;
}

uint64_t llvm::StringRef::consume_front(const void **a1, const void *a2, size_t __n)
{
  size_t v3 = (size_t)a1[1];
  if (v3 < __n) {
    return 0;
  }
  int v6 = (char *)*a1;
  if (__n)
  {
    if (memcmp(*a1, a2, __n)) {
      return 0;
    }
  }
  if (v3 >= __n) {
    size_t v8 = __n;
  }
  else {
    size_t v8 = v3;
  }
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

void llvm::detail::provider_format_adapter<long long const&>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<long long const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

uint64_t llvm::SmallVectorImpl<long long>::insert_one_impl<long long>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 8 * v6 == a2)
  {
    uint64_t v10 = *a3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      uint64_t v5 = *(void *)a1;
    }
    *(void *)(v5 + 8 * v6) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v11;
    return *(void *)a1 + 8 * v11 - 8;
  }
  else
  {
    uint64_t v7 = (a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 8);
      uint64_t v5 = *(void *)a1;
      uint64_t v6 = *(unsigned int *)(a1 + 8);
    }
    size_t v8 = (uint64_t *)(v5 + 8 * v7);
    int v9 = (void *)(v5 + 8 * v6);
    *int v9 = *(v9 - 1);
    if (v9 - 1 != v8)
    {
      memmove(v8 + 1, v8, (char *)(v9 - 1) - (char *)v8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *size_t v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::ElementwiseMax &>(mlir::anec::ElementwiseMax &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::Value &,llvm::APFloat &,llvm::APFloat>(mlir::Float16Type **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  v31[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.clamped_relu", (const unsigned __int8 *)0x11, Context);
  if (!v12)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"anec.clamped_relu";
    v25[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  uint64_t v13 = *a3;
  uint64_t v15 = *(void **)(a4 + 8);
  float v14 = (const llvm::detail::DoubleAPFloat *)(a4 + 8);
  unint64_t v17 = llvm::APFloatBase::PPCDoubleDouble(v16);
  if (v17 == v15) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v30, v14);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v30, v14);
  }
  v18 = (void *)(a5 + 8);
  if (v17 == *(void **)(a5 + 8)) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v28, v18);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v28, (uint64_t)v18);
  }
  mlir::anec::ClampedRelu::build(a1, (uint64_t)v31, v13, (uint64_t)v29, (uint64_t)v27);
  if (v17 == (void *)v28[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v28);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v28);
  }
  if (v17 == (void *)v30[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v30);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v30);
  }
  unint64_t v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ClampedRelu,void>::id) {
    uint8x8_t v20 = v19;
  }
  else {
    uint8x8_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v20;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::ElementwiseMin &>(mlir::anec::ElementwiseMin &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ClampedRelu,mlir::Value &,llvm::APFloat,llvm::APFloat&>(mlir::Float16Type **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  v31[38] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.clamped_relu", (const unsigned __int8 *)0x11, Context);
  if (!v12)
  {
    __int16 v26 = 1283;
    v25[2] = (uint64_t)"anec.clamped_relu";
    v25[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v11);
  uint64_t v13 = *a3;
  uint64_t v15 = *(void **)(a4 + 8);
  float v14 = (void *)(a4 + 8);
  unint64_t v17 = llvm::APFloatBase::PPCDoubleDouble(v16);
  if (v17 == v15) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v30, v14);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v30, (uint64_t)v14);
  }
  v18 = (const llvm::detail::DoubleAPFloat *)(a5 + 8);
  if (v17 == *(void **)(a5 + 8)) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v28, v18);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v28, v18);
  }
  mlir::anec::ClampedRelu::build(a1, (uint64_t)v31, v13, (uint64_t)v29, (uint64_t)v27);
  if (v17 == (void *)v28[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v28);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v28);
  }
  if (v17 == (void *)v30[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v30);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v30);
  }
  unint64_t v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ClampedRelu,void>::id) {
    uint8x8_t v20 = v19;
  }
  else {
    uint8x8_t v20 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v20;
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRNeuron *,std::shared_ptr<mlir::anec::ANECIRNeuron>::__shared_ptr_default_delete<mlir::anec::ANECIRNeuron,mlir::anec::ANECIRNeuron>,std::allocator<mlir::anec::ANECIRNeuron>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

mlir::anec::ANECIRUnit *std::__shared_ptr_pointer<mlir::anec::ANECIRNeuron *,std::shared_ptr<mlir::anec::ANECIRNeuron>::__shared_ptr_default_delete<mlir::anec::ANECIRNeuron,mlir::anec::ANECIRNeuron>,std::allocator<mlir::anec::ANECIRNeuron>>::__on_zero_shared(uint64_t a1)
{
  result = *(mlir::anec::ANECIRUnit **)(a1 + 24);
  if (result)
  {
    mlir::anec::ANECIRUnit::~ANECIRUnit(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void std::deque<mlir::Operation *>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_57:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v30 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v30 = 1;
      }
      if (!(v30 >> 61))
      {
        unint64_t v31 = v30 >> 2;
        uint64_t v32 = 8 * v30;
        v33 = (char *)operator new(8 * v30);
        v34 = &v33[8 * v31];
        v35 = &v33[v32];
        int64_t v37 = v5 - v7;
        BOOL v36 = v5 == v7;
        uint64_t v5 = v34;
        if (!v36)
        {
          uint64_t v5 = &v34[v37 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v38 = v37 - 8;
          if ((unint64_t)(v37 - 8) >= 0x38)
          {
            v52 = &v33[8 * v31];
            v39 = v52;
            if ((unint64_t)(v52 - v7) >= 0x20)
            {
              uint64_t v53 = (v38 >> 3) + 1;
              uint64_t v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
              v39 = &v34[v54];
              v7 += v54;
              v55 = (long long *)(v6 + 3);
              v56 = v52 + 16;
              uint64_t v57 = v53 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v58 = *v55;
                *(v56 - 1) = *(v55 - 1);
                _OWORD *v56 = v58;
                v55 += 2;
                v56 += 2;
                v57 -= 4;
              }
              while (v57);
              if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_55;
              }
            }
          }
          else
          {
            v39 = &v33[8 * v31];
          }
          do
          {
            uint64_t v59 = *(void *)v7;
            v7 += 8;
            *(void *)v39 = v59;
            v39 += 8;
          }
          while (v39 != v5);
        }
        goto LABEL_55;
      }
LABEL_65:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_57;
  }
  v18 = *(char **)(a1 + 8);
  unint64_t v17 = *(char **)(a1 + 16);
  uint64_t v19 = v17 - v18;
  uint64_t v20 = (v17 - v18) >> 3;
  uint64_t v21 = *(char **)(a1 + 24);
  uint64_t v22 = (uint64_t)&v21[-*(void *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      v68 = (char *)operator new(0x1000uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v68);
      return;
    }
    v68 = (char *)operator new(0x1000uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v68);
    v40 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v40 + 1);
    uint64_t v8 = *v40;
    *(void *)(a1 + 8) = v40 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_57;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v41 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v41 = 1;
      }
      if (!(v41 >> 61))
      {
        unint64_t v42 = v41 >> 2;
        uint64_t v43 = 8 * v41;
        v33 = (char *)operator new(8 * v41);
        v34 = &v33[8 * v42];
        v35 = &v33[v43];
        int64_t v44 = v5 - v7;
        BOOL v36 = v5 == v7;
        uint64_t v5 = v34;
        if (!v36)
        {
          uint64_t v5 = &v34[v44 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v45 = v44 - 8;
          if ((unint64_t)(v44 - 8) >= 0x38)
          {
            v60 = &v33[8 * v42];
            v46 = v60;
            if ((unint64_t)(v60 - v7) >= 0x20)
            {
              uint64_t v61 = (v45 >> 3) + 1;
              uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
              v46 = &v34[v62];
              v7 += v62;
              v63 = (long long *)(v40 + 3);
              v64 = v60 + 16;
              uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v66 = *v63;
                *(v64 - 1) = *(v63 - 1);
                _OWORD *v64 = v66;
                v63 += 2;
                v64 += 2;
                v65 -= 4;
              }
              while (v65);
              if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_55;
              }
            }
          }
          else
          {
            v46 = &v33[8 * v42];
          }
          do
          {
            uint64_t v67 = *(void *)v7;
            v7 += 8;
            *(void *)v46 = v67;
            v46 += 8;
          }
          while (v46 != v5);
        }
LABEL_55:
        *(void *)a1 = v33;
        *(void *)(a1 + 8) = v34;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v35;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_57;
      }
      goto LABEL_65;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v21 == *(char **)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  uint64_t v72 = a1 + 24;
  if (v24 >> 61) {
    goto LABEL_65;
  }
  v25 = (char *)operator new(8 * v24);
  __int16 v26 = &v25[8 * v20];
  v68 = v25;
  v69 = v26;
  v27 = &v25[8 * v24];
  v71 = v27;
  v28 = operator new(0x1000uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18) {
        unint64_t v47 = 1;
      }
      else {
        unint64_t v47 = v19 >> 2;
      }
      if (v47 >> 61) {
        goto LABEL_65;
      }
      v48 = (char *)operator new(8 * v47);
      __int16 v26 = &v48[8 * (v47 >> 2)];
      v27 = &v48[8 * v47];
      v68 = v48;
      v69 = v26;
      v71 = v27;
      operator delete(v25);
      v18 = *(char **)(a1 + 8);
      unint64_t v17 = *(char **)(a1 + 16);
      v25 = v48;
    }
    else
    {
      unint64_t v29 = v20 + 2;
      if (v20 >= -1) {
        unint64_t v29 = v20 + 1;
      }
      v26 -= 8 * (v29 >> 1);
      v69 = v26;
    }
  }
  *(void *)__int16 v26 = v28;
  v49 = v26 + 8;
  v70 = v26 + 8;
  if (v17 == v18)
  {
    unint64_t v17 = v18;
  }
  else
  {
    do
    {
      v17 -= 8;
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)&v68, v17);
    }
    while (v17 != *(char **)(a1 + 8));
    v25 = v68;
    __int16 v26 = v69;
    v18 = *(char **)(a1 + 16);
    v49 = v70;
    v27 = v71;
  }
  v50 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v26;
  v68 = v50;
  v69 = v17;
  v51 = *(char **)(a1 + 24);
  *(void *)(a1 + 16) = v49;
  *(void *)(a1 + 24) = v27;
  v70 = v18;
  v71 = v51;
  if (v18 != v17) {
    v70 = &v18[(v17 - v18 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v50) {
    operator delete(v50);
  }
}

BOOL mlir::detail::constant_op_binder<mlir::DenseFPElementsAttr>::match(unint64_t **a1, uint64_t a2)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 48) + 32))(*(void *)(a2 + 48), v4)) {
    return 0;
  }
  v9[0] = v10;
  v9[1] = (void *)0x100000000;
  mlir::Operation::fold(a2, 0, 0, (uint64_t)v9);
  unint64_t v5 = *(void *)v9[0] & 0xFFFFFFFFFFFFFFF8;
  if (mlir::DenseFPElementsAttr::classof(v5)) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 0;
  }
  BOOL v7 = v6 != 0;
  if (v6 && *a1) {
    **a1 = v6;
  }
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return v7;
}

void ZinIrSoftmaxUnitInfo::~ZinIrSoftmaxUnitInfo(ZinIrSoftmaxUnitInfo *this)
{
  *(void *)this = &unk_26C34D9C0;
  unint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      BOOL v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    BOOL v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      BOOL v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_26C34D9C0;
  unint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      BOOL v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    BOOL v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      BOOL v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void *std::__hash_table<ZinIrDimension,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,std::allocator<ZinIrDimension>>::__emplace_unique_key_args<ZinIrDimension,ZinIrDimension>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t prime = v16;
    }
    else {
      size_t prime = v15;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_41;
    }
    if (prime < v7)
    {
      unint64_t v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
      {
        unint64_t v18 = std::__next_prime(v18);
      }
      else
      {
        uint64_t v20 = 1 << -(char)__clz(v18 - 1);
        if (v18 >= 2) {
          unint64_t v18 = v20;
        }
      }
      if (prime <= v18) {
        size_t prime = v18;
      }
      if (prime < v7) {
LABEL_41:
      }
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v10 = *v22;
LABEL_55:
    *uint64_t v22 = v10;
    goto LABEL_56;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v23 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v10;
}

void ZinIrChannelToSpaceUnitInfo::~ZinIrChannelToSpaceUnitInfo(ZinIrChannelToSpaceUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrPixelShuffleUnitInfo::~ZinIrPixelShuffleUnitInfo(ZinIrPixelShuffleUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrPixelUnshuffleUnitInfo::~ZinIrPixelUnshuffleUnitInfo(ZinIrPixelUnshuffleUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrSpaceToChannelUnitInfo::~ZinIrSpaceToChannelUnitInfo(ZinIrSpaceToChannelUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrBatchToSpaceUnitInfo::~ZinIrBatchToSpaceUnitInfo(ZinIrBatchToSpaceUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrSpaceToBatchUnitInfo::~ZinIrSpaceToBatchUnitInfo(ZinIrSpaceToBatchUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrResizeUnitInfo::~ZinIrResizeUnitInfo(ZinIrResizeUnitInfo *this)
{
  *(void *)this = &unk_26C34CF28;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C34CF28;
  uint64_t v2 = (void *)*((void *)this + 22);
  if (v2)
  {
    *((void *)this + 23) = v2;
    operator delete(v2);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

void llvm::detail::provider_format_adapter<unsigned long long &>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<unsigned long long,void>::format(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  BOOL v14 = a3;
  uint64_t v15 = a4;
  int v13 = 0;
  if (llvm::detail::HelperFunctions::consumeHexStyle((uint64_t)&v14, &v13))
  {
    int v6 = v13;
    unint64_t v16 = 0;
    if (llvm::consumeUnsignedInteger(&v14, 0xAu, &v16)) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = v16;
    }
    if (ZinHWEnumsUtils::IsHWKernelFormatFloat(v6)) {
      unint64_t v8 = v7 + 2;
    }
    else {
      unint64_t v8 = v7;
    }
    return llvm::write_hex(a2, *a1, v13, v8, 1);
  }
  if (v15)
  {
    int v10 = 0;
    unsigned int v11 = *v14;
    if (v11 <= 0x63)
    {
      if (v11 != 68)
      {
        if (v11 != 78) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
LABEL_18:
      int v10 = 0;
      ++v14;
      goto LABEL_19;
    }
    if (v11 == 100) {
      goto LABEL_18;
    }
    if (v11 == 110)
    {
LABEL_17:
      ++v14;
      int v10 = 1;
LABEL_19:
      --v15;
    }
  }
  else
  {
    int v10 = 0;
  }
LABEL_20:
  unint64_t v16 = 0;
  if (llvm::consumeUnsignedInteger(&v14, 0xAu, &v16)) {
    size_t v12 = 0;
  }
  else {
    size_t v12 = v16;
  }
  return llvm::write_integer(a2, *a1, v12, v10);
}

void llvm::detail::provider_format_adapter<unsigned long>::~provider_format_adapter()
{
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format((unint64_t *)(a1 + 8), a2, a3, a4);
}

void ZinIrInputViewUnitInfo::~ZinIrInputViewUnitInfo(ZinIrInputViewUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrTransposeUnitInfo::~ZinIrTransposeUnitInfo(ZinIrTransposeUnitInfo *this)
{
  *(void *)this = &unk_26C34F988;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 6);
    uint64_t v5 = (void *)*((void *)this + 5);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v3;
    operator delete(v5);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_26C34F988;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 6);
    uint64_t v5 = (void *)*((void *)this + 5);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v3;
    operator delete(v5);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>,unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>::InsertIntoBucket<unsigned long long const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = (37 * *a3) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -1)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -2;
      }
      if (v15) {
        int v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 16 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void *llvm::DenseMap<unsigned long long,unsigned long long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_41;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *int v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          *int v10 = -1;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      unint64_t v17 = v4;
      do
      {
        uint64_t v24 = *(void *)v17;
        if (*(void *)v17 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v25 = (37 * v24) & v16;
          unint64_t v23 = &result[2 * v25];
          uint64_t v26 = *v23;
          if (v24 != *v23)
          {
            v27 = 0;
            int v28 = 1;
            while (v26 != -1)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -2;
              }
              if (v29) {
                v27 = v23;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v16;
              unint64_t v23 = &result[2 * (v30 & v16)];
              uint64_t v26 = *v23;
              if (v24 == *v23) {
                goto LABEL_23;
              }
            }
            if (v27) {
              unint64_t v23 = v27;
            }
          }
LABEL_23:
          void *v23 = v24;
          v23[1] = *((void *)v17 + 1);
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        unint64_t v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_18;
    }
    uint64_t v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v20 = result + 2;
    uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -1;
      *uint64_t v20 = -1;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      uint64_t v22 = &result[2 * v18];
      do
      {
        *int v10 = -1;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

void ZinIrPadUnitInfo::~ZinIrPadUnitInfo(ZinIrPadUnitInfo *this)
{
  *(void *)this = &unk_26C3499A0;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C3499A0;
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrMatrixMultUnitInfo::~ZinIrMatrixMultUnitInfo(ZinIrMatrixMultUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrFlattenUnitInfo::~ZinIrFlattenUnitInfo(ZinIrFlattenUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrUnflattenUnitInfo::~ZinIrUnflattenUnitInfo(ZinIrUnflattenUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrReshapeUnitInfo::~ZinIrReshapeUnitInfo(ZinIrReshapeUnitInfo *this)
{
  *(void *)this = &unk_26C34D9A0;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 6);
    unint64_t v5 = (void *)*((void *)this + 5);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      unint64_t v5 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v3;
    operator delete(v5);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  *(void *)this = &unk_26C34D9A0;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 6);
    unint64_t v5 = (void *)*((void *)this + 5);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      unint64_t v5 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v3;
    operator delete(v5);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrConcatUnitInfo::~ZinIrConcatUnitInfo(ZinIrConcatUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrInstanceNormUnitInfo::~ZinIrInstanceNormUnitInfo(ZinIrInstanceNormUnitInfo *this)
{
  *(void *)this = &unk_26C34E768;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    int v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      int v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_26C34E768;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    int v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      int v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

__CFString *ZinIrInstanceNormUnitInfo::GetInvalidDimError(ZinIrInstanceNormUnitInfo *this)
{
  return @"InvalidUnitInstanceNormDimension";
}

__CFString *ZinIrInstanceNormUnitInfo::GetMissingEpsilonError(ZinIrInstanceNormUnitInfo *this)
{
  return @"MissingInstanceNormEpsilon";
}

BOOL ZinIrInstanceNormUnitInfo::SupportDim(ZinIrInstanceNormUnitInfo *this, const __CFString *a2)
{
  return !ZinCFStringEquals(a2, @"Channel") && !ZinCFStringEquals(a2, @"Batch");
}

void ZinIrCropResizeUnitInfo::~ZinIrCropResizeUnitInfo(ZinIrCropResizeUnitInfo *this)
{
  *(void *)this = &unk_26C3500A0;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C3500A0;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrGatherUnitInfo::~ZinIrGatherUnitInfo(ZinIrGatherUnitInfo *this)
{
  *(void *)this = &unk_26C34CC48;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }

  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C34CC48;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  ZinIrTextureUnitInfo::~ZinIrTextureUnitInfo(this);

  JUMPOUT(0x21667D3C0);
}

void ZinIrArgMinMaxUnitInfo::~ZinIrArgMinMaxUnitInfo(ZinIrArgMinMaxUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrGlobalArgMinMaxUnitInfo::~ZinIrGlobalArgMinMaxUnitInfo(ZinIrGlobalArgMinMaxUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrTileUnitInfo::~ZinIrTileUnitInfo(ZinIrTileUnitInfo *this)
{
  *(void *)this = &unk_26C34AE48;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    int v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      int v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_26C34AE48;
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  *(void *)this = &unk_26C345B80;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 6);
    int v7 = (void *)*((void *)this + 5);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      int v7 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void *std::__hash_table<std::__hash_value_type<ZinIrDimension,int>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,int>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,int>>>::__emplace_unique_key_args<ZinIrDimension,std::piecewise_construct_t const&,std::tuple<ZinIrDimension&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_41;
    }
    if (prime < v8)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v8) {
LABEL_41:
      }
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t v11 = *v23;
LABEL_55:
    void *v23 = v11;
    goto LABEL_56;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v24 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v11;
}

void ZinIrDeQuantUnitInfo::~ZinIrDeQuantUnitInfo(ZinIrDeQuantUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void ZinIrQuantUnitInfo::~ZinIrQuantUnitInfo(ZinIrQuantUnitInfo *this)
{
  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26C345B80;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    unint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::T0::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A11Legacy::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A17::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A16::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A12::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A13::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A14::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::anec::A15::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v11[2] = *MEMORY[0x263EF8340];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

MirInfoChannelAssignment *mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(MirInfoChannelAssignment *this, MirInfoChannelAssignment *a2, uint64_t a3)
{
  uint64_t v3 = this;
  uint64_t v18 = a3;
  unint64_t v4 = a2 - this;
  if (a2 - this >= 257)
  {
    AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v18);
    unint64_t v7 = v6;
    unint64_t v8 = v4 >> 4;
    while (1)
    {
      uint64_t v9 = v8 >> 1;
      uint64_t NumNeededNEs = MirInfoChannelAssignment::GetNumNeededNEs((MirInfoChannelAssignment *)((char *)v3 + 16 * (v8 >> 1)));
      int v10 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&NumNeededNEs);
      unint64_t v12 = v11;
      size_t v13 = v7 >= v11 ? v11 : v7;
      if (v13)
      {
        int v14 = memcmp(v10, AttrData, v13);
        if (v14) {
          break;
        }
      }
      if (v12 == v7) {
        return (MirInfoChannelAssignment *)((char *)v3 + 16 * (v8 >> 1));
      }
      if (v12 < v7) {
        goto LABEL_3;
      }
LABEL_4:
      unint64_t v8 = v9;
      if (v9 <= 0) {
        return v3;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_3:
    uint64_t v3 = (MirInfoChannelAssignment *)((char *)v3 + 16 * (v8 >> 1) + 16);
    uint64_t v9 = v8 + ~v9;
    goto LABEL_4;
  }
  if (this == a2) {
    return a2;
  }
  while (MirInfoChannelAssignment::GetNumNeededNEs(v3) != a3)
  {
    uint64_t v3 = (MirInfoChannelAssignment *)((char *)v3 + 16);
    if (v3 == a2) {
      return a2;
    }
  }
  return v3;
}

void *std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  int v10 = &v9[8 * v3];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)int v10 = v12;
  size_t v13 = v10 + 8;
  int v14 = (char *)*a1;
  BOOL v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v19 = &v15[-v18];
    v10 -= v18;
    uint8x8_t v20 = &v9[8 * v3 - 16];
    uint64_t v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)uint8x8_t v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    BOOL v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)BOOL v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    BOOL v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void *mlir::RewritePatternSet::add<mlir::anec::ElementwiseAdd>(mlir::LogicalResult (*)(mlir::anec::ElementwiseAdd,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::anec::ElementwiseAdd>(mlir::LogicalResult (*)(mlir::anec::ElementwiseAdd,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseAdd>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseAdd>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseAdd>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::anec::ElementwiseAdd>(mlir::LogicalResult (*)(mlir::anec::ElementwiseAdd,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::anec::ElementwiseMax>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMax,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::anec::ElementwiseMax>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMax,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMax>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMax>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMax>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::anec::ElementwiseMax>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMax,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::anec::ElementwiseMin>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMin,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::anec::ElementwiseMin>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMin,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMin>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMin>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMin>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::anec::ElementwiseMin>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMin,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::anec::ElementwiseMult>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMult,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::anec::ElementwiseMult>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMult,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMult>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMult>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseMult>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::anec::ElementwiseMult>(mlir::LogicalResult (*)(mlir::anec::ElementwiseMult,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::anec::ElementwiseSub>(mlir::LogicalResult (*)(mlir::anec::ElementwiseSub,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::anec::ElementwiseSub>(mlir::LogicalResult (*)(mlir::anec::ElementwiseSub,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseSub>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseSub>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::ElementwiseSub>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::anec::ElementwiseSub>(mlir::LogicalResult (*)(mlir::anec::ElementwiseSub,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::anec::Reshape>(mlir::LogicalResult (*)(mlir::anec::Reshape,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::anec::Reshape>(mlir::LogicalResult (*)(mlir::anec::Reshape,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Reshape>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Reshape>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Reshape>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::anec::Reshape>(mlir::LogicalResult (*)(mlir::anec::Reshape,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void *mlir::RewritePatternSet::add<mlir::anec::Transpose>(mlir::LogicalResult (*)(mlir::anec::Transpose,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }
  return a1;
}

void mlir::RewritePatternSet::add<mlir::anec::Transpose>(mlir::LogicalResult (*)(mlir::anec::Transpose,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2 != a1 + 12) {
    free(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 != a1 + 6) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Transpose>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Transpose>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Transpose>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::RewritePatternSet::add<mlir::anec::Transpose>(mlir::LogicalResult (*)(mlir::anec::Transpose,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void mlir::anec::computeOpKeyString(mlir::anec *this@<X0>, std::string *a2@<X8>)
{
  if (*((unsigned char *)this + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"name", 4), v6))
  {
    if (InherentAttr) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, "name", 4uLL);
    if (InherentAttr)
    {
LABEL_4:
      v29[0] = InherentAttr;
      uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v29);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      uint64_t v9 = (const void *)AttrData;
      size_t v10 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v21 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v21 = v8 | 7;
        }
        uint64_t v22 = v21 + 1;
        long long v23 = (std::string *)operator new(v21 + 1);
        a2->__r_.__value_.__l.__size_ = v10;
        a2->__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
        a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        a2 = v23;
      }
      else
      {
        *((unsigned char *)&a2->__r_.__value_.__s + 23) = v8;
        if (!v8) {
          goto LABEL_18;
        }
      }
      memmove(a2, v9, v10);
LABEL_18:
      a2->__r_.__value_.__s.__data_[v10] = 0;
      return;
    }
  }
  v29[0] = *(void *)(*((void *)this + 6) + 8);
  __int16 v26 = 1283;
  v25[2] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v29);
  v25[3] = v11;
  v27[0] = v25;
  v27[2] = "_";
  __int16 v28 = 770;
  uint64_t v12 = mlir::anec::ANECIRNetwork::name_counter_++;
  uint64_t v24 = v12;
  v25[0] = "__";
  v29[0] = v27;
  v29[2] = &v24;
  __int16 v30 = 2818;
  llvm::Twine::str((llvm::Twine *)v29, a2);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::anec *)((char *)this + 24));
  int v14 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v15 = v14 < 0;
  unint64_t v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v14 >= 0) {
    unint64_t v16 = a2;
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v15) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  __int16 v28 = 261;
  v27[0] = v16;
  v27[1] = size;
  uint64_t v18 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v27);
  unint64_t v19 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::anec *)((char *)this + 24));
  __int16 v30 = 261;
  v29[0] = "name";
  v29[1] = 4;
  uint64_t v20 = mlir::StringAttr::get(v19, (mlir::MLIRContext *)v29);
  mlir::Operation::setAttr((uint64_t)this, v20, v18);
}

uint64_t mlir::anec::getANECIRDataType(uint64_t a1)
{
  uint64_t v5 = a1;
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&v5, 8))
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0x100000000;
  }
  else if (mlir::Type::isSignedInteger((mlir::Type *)&v5, 8) || mlir::Type::isSignlessInteger((mlir::Type *)&v5, 8))
  {
    uint64_t v2 = 0x100000000;
    uint64_t v1 = 1;
  }
  else
  {
    uint64_t v2 = 0x100000000;
    if (mlir::Type::isF16((mlir::Type *)&v5))
    {
      uint64_t v1 = 2;
    }
    else
    {
      BOOL isF32 = mlir::Type::isF32((mlir::Type *)&v5);
      if (!isF32) {
        uint64_t v2 = 0;
      }
      uint64_t v1 = 3;
      if (!isF32) {
        uint64_t v1 = 0;
      }
    }
  }
  return v1 | v2;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL isF32;
  void v6[2];
  uint64_t OperandRange;

  v6[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8));
  v6[1] = v1;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v6);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0x100000000;
  }
  else if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8) {
         || mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 8))
  }
  {
    uint64_t v3 = 0x100000000;
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v3 = 0x100000000;
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      uint64_t v2 = 2;
    }
    else
    {
      BOOL isF32 = mlir::Type::isF32((mlir::Type *)&OperandRange);
      if (!isF32) {
        uint64_t v3 = 0;
      }
      uint64_t v2 = 3;
      if (!isF32) {
        uint64_t v2 = 0;
      }
    }
  }
  return v2 | v3;
}

void mlir::anec::ANECIRInput::Serialize(mlir::anec::ANECIRInput *this)
{
}

size_t anonymous namespace'::stringify_to_cfstr@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 1:
      CFStringRef v3 = @"Int8";
      break;
    case 2:
      CFStringRef v3 = @"Float16";
      break;
    case 3:
      CFStringRef v3 = @"Float32";
      break;
    default:
      CFStringRef v3 = @"UInt8";
      break;
  }
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  size_t result = strlen(CStringPtr);
  if (result > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  size_t result = (size_t)memmove(a2, CStringPtr, v6);
LABEL_14:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void mlir::anec::ANECIROutput::Serialize(mlir::anec::ANECIROutput *this)
{
}

void mlir::anec::ANECIRUnit::Serialize(mlir::anec::ANECIRUnit *this, const ZinIrUnitInfo *a2)
{
  uint64_t v2 = (mlir::anec::ANECDictionary *)*((void *)this + 5);
  if (!v2) {
    mlir::anec::ANECDictionary::Create(0);
  }

  mlir::anec::ANECDictionary::Create(v2, a2);
}

void mlir::anec::ANECDictionary::Add<std::pair<std::string,mlir::anec::ANECIRDataType>,std::string (*)(std::pair<std::string,mlir::anec::ANECIRDataType> const&)>(plist::PListArray *a1, CFStringRef theString, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t), char a6)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v12 = strlen(CStringPtr);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v18 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_8;
  }
  HIBYTE(v18) = v12;
  int v14 = __dst;
  if (v12) {
LABEL_8:
  }
    memmove(v14, CStringPtr, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  mlir::anec::ANECDictionary::Add<std::pair<std::string,mlir::anec::ANECIRDataType>,std::string (*)(std::pair<std::string,mlir::anec::ANECIRDataType> const&)>(a1, (uint64_t)__dst, a3, a4, a5, a6);
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
}

void anonymous namespace'::get_elem<std::pair<std::string,mlir::anec::ANECIRDataType>,0ul,anonymous namespace'::identity_xform<std::string>>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

size_t anonymous namespace'::get_elem<std::pair<std::string,mlir::anec::ANECIRDataType>,1ul,anonymous namespace'::tensortype_to_string>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void mlir::anec::ANECDictionary::Add<std::pair<mlir::anec::ANECIRDataType,unsigned long>,std::string (*)(std::pair<mlir::anec::ANECIRDataType,unsigned long> const&)>(plist::PListArray *a1, CFStringRef theString, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t), char a6)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v12 = strlen(CStringPtr);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v18 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_8;
  }
  HIBYTE(v18) = v12;
  int v14 = __dst;
  if (v12) {
LABEL_8:
  }
    memmove(v14, CStringPtr, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  mlir::anec::ANECDictionary::Add<std::pair<mlir::anec::ANECIRDataType,unsigned long>,std::string (*)(std::pair<mlir::anec::ANECIRDataType,unsigned long> const&)>(a1, (uint64_t)__dst, a3, a4, a5, a6);
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
}

size_t anonymous namespace'::get_elem<std::pair<mlir::anec::ANECIRDataType,unsigned long>,0ul,anonymous namespace'::tensortype_to_string>@<X0>(int *a1@<X0>, void *a2@<X8>)
{
}

void mlir::anec::ANECDictionary::Add<std::pair<mlir::anec::ANECIRDataType,unsigned long>,unsigned long (*)(std::pair<mlir::anec::ANECIRDataType,unsigned long> const&)>(plist::PListArray *a1, CFStringRef theString, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), char a6)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v12 = strlen(CStringPtr);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v18 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_8;
  }
  HIBYTE(v18) = v12;
  int v14 = __dst;
  if (v12) {
LABEL_8:
  }
    memmove(v14, CStringPtr, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  mlir::anec::ANECDictionary::Add<std::pair<mlir::anec::ANECIRDataType,unsigned long>,unsigned long (*)(std::pair<mlir::anec::ANECIRDataType,unsigned long> const&)>(a1, (uint64_t)__dst, a3, a4, a5, a6);
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
}

uint64_t anonymous namespace'::get_elem<std::pair<mlir::anec::ANECIRDataType,unsigned long>,1ul,anonymous namespace'::identity_xform<unsigned long>>(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void mlir::anec::ANECIRGOCUnit::Serialize(mlir::anec::ANECIRGOCUnit *this, const ZinIrUnitInfo *a2)
{
  mlir::anec::ANECIRUnit::Serialize(this, a2);
  mlir::anec::ANECDictionary::Create(v2);
}

void mlir::anec::ANECIRConvPoolBase::addParams(int a1, mlir::anec::ANECDictionary **a2, unint64_t a3, int a4, uint64_t a5)
{
  if (a5) {
    mlir::anec::ANECDictionary::PListEntry(*a2);
  }
  mlir::anec::ANECDictionary::PListEntry(*a2);
}

void mlir::anec::ANECDictionary::Add<unsigned long,unsigned long const& (*)(unsigned long const&)>(plist::PListArray *a1, CFStringRef theString, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), char a6)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v12 = strlen(CStringPtr);
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v15 = v12 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    unint64_t v18 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_8;
  }
  HIBYTE(v18) = v12;
  int v14 = __dst;
  if (v12) {
LABEL_8:
  }
    memmove(v14, CStringPtr, (size_t)v13);
  *((unsigned char *)v13 + (void)v14) = 0;
  mlir::anec::ANECDictionary::Add<unsigned long,unsigned long const& (*)(unsigned long const&)>(a1, (uint64_t)__dst, a3, a4, a5, a6);
  if (SHIBYTE(v18) < 0) {
    operator delete(__dst[0]);
  }
}

size_t mlir::anec::ANECIRNeuron::ActivationToAneIRType@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 1:
      CFStringRef v3 = @"ClampedReLU";
      break;
    case 2:
      CFStringRef v3 = @"Cos";
      break;
    case 3:
      CFStringRef v3 = @"Degamma";
      break;
    case 4:
      CFStringRef v3 = @"Dirac";
      break;
    case 5:
      CFStringRef v3 = @"ELU";
      break;
    case 6:
      CFStringRef v3 = @"Erf";
      break;
    case 7:
      CFStringRef v3 = @"Exp2";
      break;
    case 8:
      CFStringRef v3 = @"Floor";
      break;
    case 9:
      CFStringRef v3 = @"GELU";
      break;
    case 10:
      CFStringRef v3 = @"SigmoidHighPrecision";
      break;
    case 11:
      CFStringRef v3 = @"Inv";
      break;
    case 12:
      CFStringRef v3 = @"LeakyReLU";
      break;
    case 13:
      CFStringRef v3 = @"Log2";
      break;
    case 14:
      CFStringRef v3 = @"ReLUN";
      break;
    case 15:
      CFStringRef v3 = @"ReLU";
      break;
    case 16:
      CFStringRef v3 = @"RoundNearest";
      break;
    case 17:
      CFStringRef v3 = @"Rsqrt";
      break;
    case 18:
      CFStringRef v3 = @"Sigmoid";
      break;
    case 19:
      CFStringRef v3 = @"Sign";
      break;
    case 20:
      CFStringRef v3 = @"Sin";
      break;
    case 21:
      CFStringRef v3 = @"Sqr";
      break;
    case 22:
      CFStringRef v3 = @"Sqrt";
      break;
    case 23:
      CFStringRef v3 = @"Swish";
      break;
    case 24:
      CFStringRef v3 = @"Tanh";
      break;
    case 25:
      CFStringRef v3 = @"Trunc";
      break;
    default:
      CFStringRef v3 = @"Ceil";
      break;
  }
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  size_t result = strlen(CStringPtr);
  if (result > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_36;
    }
  }
  size_t result = (size_t)memmove(a2, CStringPtr, v6);
LABEL_36:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void mlir::anec::ANECIRNeuron::Serialize(mlir::anec::ANECIRNeuron *this, const ZinIrUnitInfo *a2)
{
  mlir::anec::ANECIRUnit::Serialize(this, a2);
  mlir::anec::ANECDictionary::Create(v2);
}

size_t mlir::anec::ANECIRPoolUnit::PoolTypeToAneIRType@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1)
  {
    if (a1 == 2) {
      CFStringRef v3 = @"L2";
    }
    else {
      CFStringRef v3 = @"Avg";
    }
  }
  else
  {
    CFStringRef v3 = @"Max";
  }
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  size_t result = strlen(CStringPtr);
  if (result > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  size_t result = (size_t)memmove(a2, CStringPtr, v6);
LABEL_14:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void mlir::anec::ANECIRPoolUnit::Serialize(mlir::anec::ANECIRPoolUnit *this, const ZinIrUnitInfo *a2)
{
  mlir::anec::ANECIRUnit::Serialize(this, a2);
  mlir::anec::ANECDictionary::Create(v2);
}

uint64_t mlir::anec::ANECIRConstant::SetWeight(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(result + 40) = a2;
  *(_DWORD *)(result + 48) = a3;
  *(void *)(result + 88) = a8;
  *(void *)(result + 96) = a9;
  *(void *)(result + 72) = a6;
  *(void *)(result + 80) = a7;
  *(void *)(result + 56) = a4;
  *(void *)(result + 64) = a5;
  return result;
}

void mlir::anec::ANECIRConstant::Serialize(mlir::anec::ANECIRConstant *this)
{
}

void mlir::anec::ANECIRNetwork::Serialize(mlir::anec::ANECIRNetwork *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  mlir::anec::ANECDictionary::Create(this);
}

void mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRInput,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(plist::PListArray *a1, CFStringRef theString, mlir::anec::ANECIRInput **a3, uint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v10 = strlen(CStringPtr);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    size_t v12 = operator new(v13 + 1);
    __p[1] = v11;
    unint64_t v19 = v14 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v19) = v10;
  size_t v12 = __p;
  if (v10) {
LABEL_8:
  }
    memmove(v12, CStringPtr, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  uint64_t v15 = (void *)a5[3];
  if (v15)
  {
    if (v15 == a5)
    {
      uint64_t v21 = v20;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v20);
    }
    else
    {
      uint64_t v21 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRInput,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(a1, (uint64_t)__p, a3, a4);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(__p[0]);
    return;
  }
  if (v21) {
    (*(void (**)(void *, uint64_t, uint64_t))(*v21 + 40))(v21, v16, v17);
  }
  if (SHIBYTE(v19) < 0) {
    goto LABEL_20;
  }
}

void mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIROutput,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(plist::PListArray *a1, CFStringRef theString, mlir::anec::ANECIROutput **a3, uint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v10 = strlen(CStringPtr);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    size_t v12 = operator new(v13 + 1);
    __p[1] = v11;
    unint64_t v19 = v14 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v19) = v10;
  size_t v12 = __p;
  if (v10) {
LABEL_8:
  }
    memmove(v12, CStringPtr, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  uint64_t v15 = (void *)a5[3];
  if (v15)
  {
    if (v15 == a5)
    {
      uint64_t v21 = v20;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v20);
    }
    else
    {
      uint64_t v21 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIROutput,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(a1, (uint64_t)__p, a3, a4);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(__p[0]);
    return;
  }
  if (v21) {
    (*(void (**)(void *, uint64_t, uint64_t))(*v21 + 40))(v21, v16, v17);
  }
  if (SHIBYTE(v19) < 0) {
    goto LABEL_20;
  }
}

void mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRUnit,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(uint64_t *a1, CFStringRef theString, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v10 = strlen(CStringPtr);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    size_t v12 = operator new(v13 + 1);
    __p[1] = v11;
    unint64_t v19 = v14 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v19) = v10;
  size_t v12 = __p;
  if (v10) {
LABEL_8:
  }
    memmove(v12, CStringPtr, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  uint64_t v15 = (void *)a5[3];
  if (v15)
  {
    if (v15 == a5)
    {
      uint64_t v21 = v20;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v20);
    }
    else
    {
      uint64_t v21 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRUnit,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(a1, (uint64_t)__p, a3, a4, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(__p[0]);
    return;
  }
  if (v21) {
    (*(void (**)(void *, uint64_t, uint64_t))(*v21 + 40))(v21, v16, v17);
  }
  if (SHIBYTE(v19) < 0) {
    goto LABEL_20;
  }
}

void mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRConstant,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(plist::PListArray *a1, CFStringRef theString, mlir::anec::ANECIRConstant **a3, uint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v10 = strlen(CStringPtr);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    size_t v12 = operator new(v13 + 1);
    __p[1] = v11;
    unint64_t v19 = v14 | 0x8000000000000000;
    __p[0] = v12;
    goto LABEL_8;
  }
  HIBYTE(v19) = v10;
  size_t v12 = __p;
  if (v10) {
LABEL_8:
  }
    memmove(v12, CStringPtr, (size_t)v11);
  *((unsigned char *)v11 + (void)v12) = 0;
  uint64_t v15 = (void *)a5[3];
  if (v15)
  {
    if (v15 == a5)
    {
      uint64_t v21 = v20;
      (*(void (**)(void *, void *))(*a5 + 24))(a5, v20);
    }
    else
    {
      uint64_t v21 = (void *)(*(uint64_t (**)(void *))(*v15 + 16))(v15);
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRConstant,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(a1, (uint64_t)__p, a3, a4);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(__p[0]);
    return;
  }
  if (v21) {
    (*(void (**)(void *, uint64_t, uint64_t))(*v21 + 40))(v21, v16, v17);
  }
  if (SHIBYTE(v19) < 0) {
    goto LABEL_20;
  }
}

void mlir::anec::ANECIRNetwork::getUnits(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 224);
  for (i = *(uint64_t **)(a1 + 232); v2 != i; v2 += 2)
  {
    uint64_t v15 = *v2;
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    unint64_t v7 = *(void *)a2;
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      unint64_t v12 = v6 + 1;
      BOOL v13 = v7 + 16 * v6 > (unint64_t)&v15;
      if (v7 <= (unint64_t)&v15 && v13)
      {
        uint64_t v14 = (char *)&v15 - v7;
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(a2, v12);
        unint64_t v7 = *(void *)a2;
        uint64_t v8 = &v14[*(void *)a2];
        goto LABEL_8;
      }
      llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(a2, v12);
      unint64_t v7 = *(void *)a2;
    }
    uint64_t v8 = (char *)&v15;
LABEL_8:
    uint64_t v9 = *(unsigned int *)(a2 + 8);
    long long v10 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16 * v9) = *(_OWORD *)v8;
    if (*((void *)&v10 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
      LODWORD(v9) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 8) = v9 + 1;
    uint64_t v11 = v16;
    if (v16)
    {
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void mlir::anec::ANECIRNetwork::getConstants(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 248);
  for (i = *(uint64_t **)(a1 + 256); v2 != i; v2 += 2)
  {
    uint64_t v15 = *v2;
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    uint64_t v16 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *(unsigned int *)(a2 + 8);
    unint64_t v7 = *(void *)a2;
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      unint64_t v12 = v6 + 1;
      BOOL v13 = v7 + 16 * v6 > (unint64_t)&v15;
      if (v7 <= (unint64_t)&v15 && v13)
      {
        uint64_t v14 = (char *)&v15 - v7;
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(a2, v12);
        unint64_t v7 = *(void *)a2;
        uint64_t v8 = &v14[*(void *)a2];
        goto LABEL_8;
      }
      llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(a2, v12);
      unint64_t v7 = *(void *)a2;
    }
    uint64_t v8 = (char *)&v15;
LABEL_8:
    uint64_t v9 = *(unsigned int *)(a2 + 8);
    long long v10 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16 * v9) = *(_OWORD *)v8;
    if (*((void *)&v10 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
      LODWORD(v9) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a2 + 8) = v9 + 1;
    uint64_t v11 = v16;
    if (v16)
    {
      if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void mlir::anec::ANECIRNetwork::getInputs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    unint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = &v4[2 * v2];
    do
    {
      uint64_t v16 = *v4;
      uint64_t v6 = (std::__shared_weak_count *)v4[1];
      uint64_t v17 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      unint64_t v8 = *(void *)a2;
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        unint64_t v13 = v7 + 1;
        BOOL v14 = v8 + 16 * v7 > (unint64_t)&v16;
        if (v8 <= (unint64_t)&v16 && v14)
        {
          uint64_t v15 = (char *)&v16 - v8;
          llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(a2, v13);
          unint64_t v8 = *(void *)a2;
          uint64_t v9 = &v15[*(void *)a2];
          goto LABEL_8;
        }
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow(a2, v13);
        unint64_t v8 = *(void *)a2;
      }
      uint64_t v9 = (char *)&v16;
LABEL_8:
      uint64_t v10 = *(unsigned int *)(a2 + 8);
      long long v11 = *(_OWORD *)v9;
      *(_OWORD *)(v8 + 16 * v10) = *(_OWORD *)v9;
      if (*((void *)&v11 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
        LODWORD(v10) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(a2 + 8) = v10 + 1;
      unint64_t v12 = v17;
      if (v17)
      {
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void mlir::anec::ANECIROperation::Serialize(mlir::anec::ANECIROperation *this)
{
}

void mlir::anec::ANECIRProcedure::Serialize(mlir::anec::ANECIRProcedure *this)
{
}

void mlir::anec::ANECIRTop::Serialize(mlir::anec::ANECDictionary *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v3 = a3;
  mlir::anec::ANECDictionary::Create(a1);
}

BOOL plist::PListDict::insert(uint64_t a1, CFStringRef theString, uint64_t *a3)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v6 = strlen(CStringPtr);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v19 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v19) = v6;
  unint64_t v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memmove(v8, CStringPtr, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  uint64_t v11 = a1 + 8;
  unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::find<std::string>((void *)(a1 + 8), (uint64_t)__dst);
  if (!v12)
  {
    uint64_t v20 = __dst;
    BOOL v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (long long **)&v20);
    uint64_t v16 = *a3;
    uint64_t v15 = a3[1];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 6);
    *((void *)v14 + 5) = v16;
    *((void *)v14 + 6) = v15;
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst[0]);
  }
  return v12 == 0;
}

void mlir::anec::ANECIRTop::Write(mlir::anec::ANECDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void mlir::anec::ANECIRGOCUnit::~ANECIRGOCUnit(mlir::anec::ANECIRGOCUnit *this)
{
  mlir::anec::ANECIRUnit::~ANECIRUnit(this);

  JUMPOUT(0x21667D3C0);
}

void mlir::anec::ANECIRNeuron::~ANECIRNeuron(mlir::anec::ANECIRNeuron *this)
{
  mlir::anec::ANECIRUnit::~ANECIRUnit(this);

  JUMPOUT(0x21667D3C0);
}

void mlir::anec::ANECIRPoolUnit::~ANECIRPoolUnit(mlir::anec::ANECIRPoolUnit *this)
{
  mlir::anec::ANECIRUnit::~ANECIRUnit(this);

  JUMPOUT(0x21667D3C0);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v16 == v8)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 <= 0x40)
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = *(uint64_t *)((char *)a2 + a3 - 8) + v8;
      uint64_t v16 = __ROR8__(v15 + v14, 52);
      uint64_t v17 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v18 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      uint64_t v19 = v18 + v15;
      unint64_t v20 = 0x9AE16A3B2F90404FLL;
      unint64_t v21 = 0xC3A5C85C97CB3127 * (v19 + v17)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + v16
           + __ROR8__(v18, 31));
      unint64_t v22 = v17 - 0x3C5A37A36834CED9 * (v21 ^ (v21 >> 47));
      return (v22 ^ (v22 >> 47)) * v20;
    }
    uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 48);
    uint64_t v30 = *(uint64_t *)((char *)a2 + a3 - 40);
    uint64_t v31 = *(uint64_t *)((char *)a2 + a3 - 24);
    uint64_t v33 = *(uint64_t *)((char *)a2 + a3 - 64);
    uint64_t v32 = *(uint64_t *)((char *)a2 + a3 - 56);
    uint64_t v34 = *(uint64_t *)((char *)a2 + a3 - 16);
    uint64_t v35 = *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v36 = v32 + v34;
    unint64_t v37 = 0x9DDFEA08EB382D69
        * (v31 ^ ((0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))));
    unint64_t v38 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
    unint64_t v39 = v33 + a3 + v32 + v29;
    uint64_t v40 = v39 + v30;
    unint64_t v41 = __ROR8__(v39, 44) + v33 + a3 + __ROR8__(v30 + v33 + a3 - 0x622015F714C7D297 * (v37 ^ (v37 >> 47)), 21);
    uint64_t v42 = v32 + v34 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v43 = v42 + v31 + v34;
    uint64_t v44 = __ROR8__(v43, 44);
    uint64_t v45 = v43 + v35;
    uint64_t v46 = v44 + v42 + __ROR8__(v42 + v30 + v35, 21);
    uint64_t v48 = *a2;
    unint64_t v47 = a2 + 4;
    unint64_t v49 = v48 - 0x4B6D499041670D8DLL * v30;
    uint64_t v50 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v51 = *(v47 - 3);
      uint64_t v52 = v49 + v40 + v36 + v51;
      uint64_t v53 = v47[2];
      uint64_t v54 = v47[3];
      uint64_t v55 = v47[1];
      unint64_t v36 = v55 + v40 - 0x4B6D499041670D8DLL * __ROR8__(v36 + v41 + v53, 42);
      uint64_t v56 = v38 + v45;
      uint64_t v57 = *(v47 - 2);
      uint64_t v58 = *(v47 - 1);
      uint64_t v59 = *(v47 - 4) - 0x4B6D499041670D8DLL * v41;
      uint64_t v60 = v59 + v45 + v58;
      uint64_t v61 = v59 + v51 + v57;
      uint64_t v40 = v61 + v58;
      uint64_t v62 = __ROR8__(v61, 44) + v59;
      unint64_t v63 = (0xB492B66FBE98F273 * __ROR8__(v52, 37)) ^ v46;
      unint64_t v49 = 0xB492B66FBE98F273 * __ROR8__(v56, 33);
      unint64_t v41 = v62 + __ROR8__(v60 + v63, 21);
      unint64_t v64 = v49 + v46 + *v47;
      uint64_t v45 = v64 + v55 + v53 + v54;
      uint64_t v46 = __ROR8__(v64 + v55 + v53, 44) + v64 + __ROR8__(v36 + v57 + v64 + v54, 21);
      v47 += 8;
      unint64_t v38 = v63;
      v50 += 64;
    }
    while (v50);
    unint64_t v65 = v49
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) >> 47));
    unint64_t v66 = 0x9DDFEA08EB382D69
        * (v65 ^ (v63
                - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) ^ ((0x9DDFEA08EB382D69 * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) >> 47))));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) ^ ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) >> 47));
  }
  else
  {
    if (a3 > 0x10)
    {
      uint64_t v23 = a2[1];
      unint64_t v24 = 0xB492B66FBE98F273 * *a2;
      uint64_t v25 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v24 - v23, 43);
      unint64_t v26 = v24
          + a3
          + __ROR8__(v23 ^ 0xC949D7C7509E6557, 20)
          - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v27 = 0x9DDFEA08EB382D69 * ((v25 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v26);
      unint64_t v28 = v26 ^ (v27 >> 47) ^ v27;
LABEL_8:
      unint64_t v22 = 0x9DDFEA08EB382D69 * v28;
      return (v22 ^ (v22 >> 47)) * v20;
    }
    if (a3 >= 9)
    {
      uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
      uint64_t v4 = __ROR8__(v3 + a3, a3);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
    }
    if (a3 >= 4)
    {
      uint64_t v67 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v68 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v67);
      unint64_t v28 = v67 ^ (v68 >> 47) ^ v68;
      goto LABEL_8;
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (a3)
    {
      unint64_t v69 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v69 ^ (v69 >> 47));
    }
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v11)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  uint64_t v16 = (unsigned __int8 *)operator new(0x38uLL);
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v11;
  uint64_t v23 = (std::string *)(v16 + 16);
  unint64_t v24 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)v24, *((void *)v24 + 1));
  }
  else
  {
    long long v25 = *v24;
    *((void *)v16 + 4) = *((void *)v24 + 2);
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
  }
  *((void *)v16 + 5) = 0;
  *((void *)v16 + 6) = 0;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    BOOL v28 = 1;
    if (v12 >= 3) {
      BOOL v28 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v12);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_62;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_62:
      }
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v36 = *(void *)a1;
  unint64_t v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)uint64_t v16 = *v37;
LABEL_76:
    *unint64_t v37 = v16;
    goto LABEL_77;
  }
  *(void *)uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v36 + 8 * v4) = a1 + 16;
  if (*(void *)v16)
  {
    unint64_t v38 = *(void *)(*(void *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12) {
        v38 %= v12;
      }
    }
    else
    {
      v38 &= v12 - 1;
    }
    unint64_t v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_76;
  }
LABEL_77:
  ++*(void *)(a1 + 24);
  return v16;
}

void mlir::anec::ANECDictionary::Add(uint64_t *a1, CFStringRef theString, uint64_t *a3)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v6 = strlen(CStringPtr);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v7;
    unint64_t v16 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  p_dst = &__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, CStringPtr, v7);
  *((unsigned char *)p_dst + v7) = 0;
  uint64_t v11 = a3[1];
  uint64_t v13 = *a3;
  unint64_t v14 = (std::__shared_weak_count *)v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  mlir::anec::ANECDictionary::Add(a1, &__dst, &v13);
  unint64_t v12 = v14;
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v16) < 0) {
LABEL_14:
  }
    operator delete((void *)__dst);
}

void mlir::anec::ANECDictionary::PListEntry(mlir::anec::ANECDictionary *this, CFStringRef theString)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  size_t v3 = strlen(CStringPtr);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v4 = v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v5 = operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v9 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v9) = v3;
    unint64_t v5 = __dst;
    if (!v3)
    {
LABEL_9:
      *((unsigned char *)v5 + v4) = 0;
      mlir::anec::ANECDictionary::PListEntry();
    }
  }
  memmove(v5, CStringPtr, v4);
  goto LABEL_9;
}

plist::PListArray *mlir::anec::ANECDictionary::Add<std::pair<std::string,mlir::anec::ANECIRDataType>,std::string (*)(std::pair<std::string,mlir::anec::ANECIRDataType> const&)>(plist::PListArray *result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t), char a6)
{
  if (a4)
  {
    if (a4 == 1 && (a6 & 1) == 0)
    {
      a5(&v6, a3);
      mlir::anec::ANECDictionary::PListEntry();
    }
    plist::PListArray::Create(result);
  }
  return result;
}

plist::PListArray *mlir::anec::ANECDictionary::Add<std::pair<mlir::anec::ANECIRDataType,unsigned long>,std::string (*)(std::pair<mlir::anec::ANECIRDataType,unsigned long> const&)>(plist::PListArray *result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t), char a6)
{
  if (a4)
  {
    if (a4 == 1 && (a6 & 1) == 0)
    {
      a5(&v6, a3);
      mlir::anec::ANECDictionary::PListEntry();
    }
    plist::PListArray::Create(result);
  }
  return result;
}

plist::PListArray *mlir::anec::ANECDictionary::Add<std::pair<mlir::anec::ANECIRDataType,unsigned long>,unsigned long (*)(std::pair<mlir::anec::ANECIRDataType,unsigned long> const&)>(plist::PListArray *result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), char a6)
{
  if (a4)
  {
    uint64_t v6 = result;
    if (a4 == 1 && (a6 & 1) == 0)
    {
      a5(a3);
      mlir::anec::ANECDictionary::PListEntry(v6);
    }
    plist::PListArray::Create(result);
  }
  return result;
}

plist::PListArray *mlir::anec::ANECDictionary::Add<unsigned long,unsigned long const& (*)(unsigned long const&)>(plist::PListArray *result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), char a6)
{
  if (a4)
  {
    uint64_t v6 = result;
    if (a4 == 1 && (a6 & 1) == 0)
    {
      a5(a3);
      mlir::anec::ANECDictionary::PListEntry(v6);
    }
    plist::PListArray::Create(result);
  }
  return result;
}

plist::PListArray *mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRInput,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(plist::PListArray *a1, uint64_t a2, mlir::anec::ANECIRInput **a3, uint64_t a4)
{
  if (a4) {
    mlir::anec::ANECIRInput::Serialize(*a3);
  }
  return mlir::anec::ANECDictionary::Add<std::shared_ptr<mlir::anec::ANECIRInput>,void mlir::anec::ANECDictionary::AddLayerNames<mlir::anec::ANECIRInput>(std::string const&,llvm::ArrayRef<std::shared_ptr<mlir::anec::ANECIRInput>>)::{lambda(std::shared_ptr<mlir::anec::ANECIRInput> const&)#1}>(a1, a2, (uint64_t *)a3, 0, 1);
}

plist::PListArray *mlir::anec::ANECDictionary::Add<std::shared_ptr<mlir::anec::ANECIRInput>,void mlir::anec::ANECDictionary::AddLayerNames<mlir::anec::ANECIRInput>(std::string const&,llvm::ArrayRef<std::shared_ptr<mlir::anec::ANECIRInput>>)::{lambda(std::shared_ptr<mlir::anec::ANECIRInput> const&)#1}>(plist::PListArray *result, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  if (a4)
  {
    if (a4 == 1 && (a5 & 1) == 0)
    {
      uint64_t v5 = *a3;
      if (*(char *)(*a3 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
      }
      else
      {
        long long v6 = *(_OWORD *)(v5 + 8);
        v7.__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
        *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v6;
      }
      mlir::anec::ANECDictionary::PListEntry();
    }
    plist::PListArray::Create(result);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_11ANECIRInputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_11ANECIRInputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEv()
{
  unint64_t result = operator new(0x10uLL);
  void *result = &unk_26C387970;
  return result;
}

void _ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_11ANECIRInputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEPNS0_6__baseISA_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26C387970;
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_11ANECIRInputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_EclEOS9_(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

plist::PListArray *mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIROutput,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(plist::PListArray *a1, uint64_t a2, mlir::anec::ANECIROutput **a3, uint64_t a4)
{
  if (a4) {
    mlir::anec::ANECIROutput::Serialize(*a3);
  }
  return mlir::anec::ANECDictionary::Add<std::shared_ptr<mlir::anec::ANECIRInput>,void mlir::anec::ANECDictionary::AddLayerNames<mlir::anec::ANECIRInput>(std::string const&,llvm::ArrayRef<std::shared_ptr<mlir::anec::ANECIRInput>>)::{lambda(std::shared_ptr<mlir::anec::ANECIRInput> const&)#1}>(a1, a2, (uint64_t *)a3, 0, 1);
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_12ANECIROutputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_12ANECIROutputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEv()
{
  unint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3879B8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_12ANECIROutputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEPNS0_6__baseISA_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3879B8;
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_12ANECIROutputENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_EclEOS9_(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

plist::PListArray *mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRUnit,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v10 = 16 * a4;
    uint64_t v11 = a3;
    do
    {
      uint64_t v12 = *v11;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)*v11 + 16))(&v18, *v11);
      uint64_t v13 = *(void *)(a5 + 24);
      if (!v13)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        JUMPOUT(0x211470ED8);
      }
      (*(void (**)(void **__return_ptr))(*(void *)v13 + 48))(&v20);
      mlir::anec::ANECDictionary::PListEntry(&v20, &v22);
      mlir::anec::ANECDictionary::Add(a1, (long long *)(v12 + 8), &v22);
      unint64_t v14 = v23;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        uint64_t v15 = v21;
        if (v21)
        {
LABEL_8:
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      else
      {
        uint64_t v15 = v21;
        if (v21) {
          goto LABEL_8;
        }
      }
      unint64_t v16 = v19;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  return mlir::anec::ANECDictionary::Add<std::shared_ptr<mlir::anec::ANECIRInput>,void mlir::anec::ANECDictionary::AddLayerNames<mlir::anec::ANECIRInput>(std::string const&,llvm::ArrayRef<std::shared_ptr<mlir::anec::ANECIRInput>>)::{lambda(std::shared_ptr<mlir::anec::ANECIRInput> const&)#1}>((plist::PListArray *)a1, a2, a3, a4, 1);
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_10ANECIRUnitENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_10ANECIRUnitENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEv()
{
  unint64_t result = operator new(0x10uLL);
  void *result = &unk_26C387928;
  return result;
}

void _ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_10ANECIRUnitENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEPNS0_6__baseISA_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26C387928;
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_10ANECIRUnitENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_EclEOS9_(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

plist::PListArray *mlir::anec::ANECDictionary::AddLayers<mlir::anec::ANECIRConstant,std::function<std::shared_ptr<mlir::anec::ANECDictionary> ()(std::shared_ptr<mlir::anec::ANECDictionary>)>>(plist::PListArray *a1, uint64_t a2, mlir::anec::ANECIRConstant **a3, uint64_t a4)
{
  if (a4) {
    mlir::anec::ANECIRConstant::Serialize(*a3);
  }
  return mlir::anec::ANECDictionary::Add<std::shared_ptr<mlir::anec::ANECIRInput>,void mlir::anec::ANECDictionary::AddLayerNames<mlir::anec::ANECIRInput>(std::string const&,llvm::ArrayRef<std::shared_ptr<mlir::anec::ANECIRInput>>)::{lambda(std::shared_ptr<mlir::anec::ANECIRInput> const&)#1}>(a1, a2, (uint64_t *)a3, 0, 1);
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_14ANECIRConstantENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_ED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_14ANECIRConstantENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEv()
{
  unint64_t result = operator new(0x10uLL);
  void *result = &unk_26C387A00;
  return result;
}

void _ZNKSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_14ANECIRConstantENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_E7__cloneEPNS0_6__baseISA_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26C387A00;
}

void _ZNSt3__110__function6__funcIZN4mlir4anec14ANECDictionary9AddLayersINS3_14ANECIRConstantENS_8functionIFNS_10shared_ptrIS4_EES9_EEEEEvPK10__CFStringN4llvm8ArrayRefINS8_IT_EEEET0_Ed_UlRKS9_E_NS_9allocatorISN_EESA_EclEOS9_(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

plist::PListArray *mlir::anec::ANECDictionary::Add<std::shared_ptr<mlir::anec::ANECIRNetwork>,void mlir::anec::ANECDictionary::AddLayerNames<mlir::anec::ANECIRNetwork>(std::string const&,llvm::ArrayRef<std::shared_ptr<mlir::anec::ANECIRNetwork>>)::{lambda(std::shared_ptr<mlir::anec::ANECIRNetwork> const&)#1}>(plist::PListArray *result, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  if (a4)
  {
    if (a4 == 1 && (a5 & 1) == 0)
    {
      uint64_t v5 = *a3;
      if (*(char *)(*a3 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v5 + 200), *(void *)(v5 + 208));
      }
      else {
        std::string v6 = *(std::string *)(v5 + 200);
      }
      mlir::anec::ANECDictionary::PListEntry();
    }
    plist::PListArray::Create(result);
  }
  return result;
}

void std::__shared_ptr_emplace<plist::PListString>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<plist::PListString>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389F50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<plist::PListString>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<plist::PListString>::__shared_ptr_emplace[abi:nn180100]<__CFString const*,std::allocator<plist::PListString>,0>(uint64_t a1, const __CFString **a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C389F50;
  CFStringRef v3 = *a2;
  *(void *)(a1 + 24) = &unk_26C380490;
  CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
  size_t v5 = strlen(CStringPtr);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    std::string v7 = operator new(v8 + 1);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v9 | 0x8000000000000000;
    *(void *)(a1 + 32) = v7;
  }
  else
  {
    std::string v7 = (void *)(a1 + 32);
    *(unsigned char *)(a1 + 55) = v5;
    if (!v5) {
      goto LABEL_9;
    }
  }
  memmove(v7, CStringPtr, v6);
LABEL_9:
  *((unsigned char *)v7 + v6) = 0;
  return a1;
}

void std::allocator<plist::PListString>::construct[abi:nn180100]<plist::PListString,char const(&)[19]>(int a1, void *a2, char *__s)
{
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (long long *)operator new(v8 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v9 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_8:
  }
    memcpy(p_dst, __s, v6);
  *((unsigned char *)p_dst + v6) = 0;
  *a2 = &unk_26C380490;
  uint64_t v10 = (std::string *)(a2 + 1);
  if (SHIBYTE(v13) < 0)
  {
    uint64_t v11 = (void *)__dst;
    std::string::__init_copy_ctor_external(v10, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    operator delete(v11);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = __dst;
    v10->__r_.__value_.__r.__words[2] = v13;
  }
}

BOOL mlir::anec::ANECIRWeights::hasConstant(mlir::anec::ANECIRWeights *this, mlir::Operation *a2)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v11 = (uint64_t **)v12;
  mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v11, (uint64_t)a2);
  int v3 = *((_DWORD *)this + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 6);
  int v5 = v3 - 1;
  unsigned int v6 = v5 & ((LODWORD(v12[0]) >> 4) ^ (LODWORD(v12[0]) >> 9));
  uint64_t v7 = *(void *)(v4 + 8 * v6);
  if (v7 == v12[0]) {
    return 1;
  }
  int v9 = 1;
  do
  {
    BOOL result = v7 != -4096;
    if (v7 == -4096) {
      break;
    }
    unsigned int v10 = v6 + v9++;
    unsigned int v6 = v10 & v5;
    uint64_t v7 = *(void *)(v4 + 8 * v6);
  }
  while (v7 != v12[0]);
  return result;
}

uint64_t mlir::anec::ANECIRWeights::resetForNextFunction(uint64_t this)
{
  if (*(void *)(this + 56))
  {
    uint64_t v1 = (int64x2_t **)(this + 48);
    uint64_t v2 = *(unsigned int *)(this + 64);
    if (v2 <= 4 * *(_DWORD *)(this + 56) || v2 < 0x41)
    {
      if (v2)
      {
        int v3 = *v1;
        unint64_t v4 = (v2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        int v5 = *v1;
        if (v4 < 3) {
          goto LABEL_10;
        }
        unint64_t v6 = v4 + 1;
        int v5 = (int64x2_t *)((char *)v3 + 8 * (v6 & 0x3FFFFFFFFFFFFFFCLL));
        uint64_t v7 = v3 + 1;
        int64x2_t v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        uint64_t v9 = v6 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v7[-1] = v8;
          *uint64_t v7 = v8;
          v7 += 2;
          v9 -= 4;
        }
        while (v9);
        if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_10:
          unsigned int v10 = (int64x2_t *)((char *)v3 + 8 * v2);
          do
          {
            v5->i64[0] = -4096;
            int v5 = (int64x2_t *)((char *)v5 + 8);
          }
          while (v5 != v10);
        }
      }
      *(void *)(this + 56) = 0;
    }
    else
    {
      return llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::shrink_and_clear(this + 48);
    }
  }
  return this;
}

uint64_t mlir::anec::ANECIRWeights::addConstant(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v42[0] = a2;
  v42[1] = a3;
  uint64_t ArgOperands = a2;
  uint64_t v7 = a1[6];
  uint64_t v5 = (uint64_t)(a1 + 6);
  uint64_t v6 = v7;
  int v8 = *(_DWORD *)(v5 + 16);
  unsigned int v9 = a2 >> 4;
  if (v8)
  {
    int v10 = v8 - 1;
    unsigned int v11 = v10 & (v9 ^ (a2 >> 9));
    uint64_t v12 = (uint64_t *)(v6 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_14;
    }
    unint64_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        unint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = (uint64_t *)(v6 + 8 * v11);
      uint64_t v13 = *v12;
      if (*v12 == a2) {
        goto LABEL_14;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(v5, v18, &ArgOperands);
LABEL_14:
  uint64_t v19 = a1[1];
  uint64_t v20 = *((unsigned int *)a1 + 6);
  if (v20)
  {
    LODWORD(v21) = (v9 ^ (a2 >> 9)) & (v20 - 1);
    uint64_t v22 = *(void *)(v19 + 16 * v21);
    if (v22 == a2)
    {
      if (v21 != v20)
      {
        uint64_t v23 = (void *)(v19 + 16 * v20);
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    int v24 = 1;
    while (v22 != -4096)
    {
      int v25 = v21 + v24++;
      uint64_t v21 = v25 & (v20 - 1);
      uint64_t v22 = *(void *)(v19 + 16 * v21);
      if (v22 == a2) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v21 = *((unsigned int *)a1 + 6);
LABEL_23:
  if (v21 != v20)
  {
    uint64_t v23 = (void *)(v19 + 16 * v20);
    int8x8_t v32 = v23;
    if (!v20)
    {
LABEL_33:
      uint64_t v35 = (unsigned int *)(a1 + 5);
      if (v32 != v23) {
        uint64_t v35 = (unsigned int *)(v32 + 1);
      }
      return *(void *)(a1[4] + 16 * *v35 + 8);
    }
LABEL_32:
    unsigned int v33 = v20 - 1;
    LODWORD(v20) = (v9 ^ (a2 >> 9)) & (v20 - 1);
    int8x8_t v32 = (void *)(v19 + 16 * v20);
    uint64_t v34 = *v32;
    if (*v32 != a2)
    {
      int v37 = 1;
      while (v34 != -4096)
      {
        int v38 = v20 + v37++;
        uint64_t v20 = v38 & v33;
        uint64_t v34 = *(void *)(v19 + 16 * v20);
        if (v34 == a2)
        {
          int8x8_t v32 = (void *)(v19 + 16 * v20);
          goto LABEL_33;
        }
      }
      int8x8_t v32 = v23;
    }
    goto LABEL_33;
  }
LABEL_24:
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v42);
  uint64_t v40 = v26;
  *(void *)unint64_t v41 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  BOOL isF32 = mlir::Type::isF32((mlir::Type *)v41);
  uint64_t v28 = -4;
  if (!isF32) {
    uint64_t v28 = -1;
  }
  uint64_t v29 = *a1;
  uint64_t v30 = 3;
  if (!isF32) {
    uint64_t v30 = 0;
  }
  uint64_t v31 = (v30 + v29) & v28;
  llvm::raw_ostream::write((llvm::raw_ostream *)a1[9], v41, v31 - v29);
  uint64_t ArgOperands = v42[0];
  uint64_t v40 = v31;
  llvm::MapVector<void const*,unsigned long long,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,unsigned long long>,0u>>::try_emplace<unsigned long long>((uint64_t)(a1 + 1), &ArgOperands, &v40);
  if (mlir::ElementsAttr::getType((mlir::ElementsAttr *)v42)) {
    mlir::TypeID::get<mlir::ShapedType>();
  }
  *a1 = mlir::writeConstantData((llvm::raw_ostream *)a1[9]);
  return v31;
}

uint64_t mlir::anec::ANECIRWeights::addConstant(mlir::anec::ANECIRWeights *this, mlir::Operation *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v4 = (uint64_t **)&v5;
  mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v4, (uint64_t)a2);
  return mlir::anec::ANECIRWeights::addConstant((uint64_t *)this, v5, v6);
}

uint64_t mlir::anec::ANECIRWeights::lookupConstant(mlir::anec::ANECIRWeights *this, mlir::Operation *a2)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v13 = (uint64_t **)v14;
  mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v13, (uint64_t)a2);
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((unsigned int *)this + 6);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((LODWORD(v14[0]) >> 4) ^ (LODWORD(v14[0]) >> 9));
    uint64_t v6 = (void *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == v14[0]) {
      goto LABEL_8;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == v14[0])
      {
        uint64_t v6 = (void *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  uint64_t v6 = (void *)(v3 + 16 * v4);
LABEL_8:
  BOOL v10 = v6 == (void *)(v3 + 16 * v4);
  unsigned int v11 = (unsigned int *)((char *)this + 40);
  if (!v10) {
    unsigned int v11 = (unsigned int *)(v6 + 1);
  }
  return *(void *)(*((void *)this + 4) + 16 * *v11 + 8);
}

uint64_t llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  int v2 = *(_DWORD *)(result + 8);
  int v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64) {
    int v3 = 64;
  }
  if (v2) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 != v1) {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v1));
  }
  *(void *)(result + 8) = 0;
  if (v1)
  {
    uint64_t v5 = *(llvm **)result;
    unint64_t v6 = (v1 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v7 = *(llvm **)result;
    if (v6 < 3) {
      goto LABEL_12;
    }
    unint64_t v8 = v6 + 1;
    uint64_t v7 = (llvm *)((char *)v5 + 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL));
    int v9 = (int64x2_t *)((char *)v5 + 16);
    int64x2_t v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v9[-1] = v10;
      *int v9 = v10;
      v9 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      uint64_t v12 = (llvm *)((char *)v5 + 8 * v1);
      do
      {
        *(void *)uint64_t v7 = -4096;
        uint64_t v7 = (llvm *)((char *)v7 + 8);
      }
      while (v7 != v12);
    }
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>,void const*,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseSetPair<void const*>>::InsertIntoBucket<void const*,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    uint64_t v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(a1, v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(void *)a1 + 8 * v11);
  uint64_t v12 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a2;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a2 = (uint64_t *)(*(void *)a1 + 8 * (v16 & v10));
      uint64_t v12 = *a2;
      if (v8 == *a2) {
        goto LABEL_4;
      }
    }
    if (v13) {
      a2 = v13;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  return a2;
}

uint64_t llvm::MapVector<void const*,unsigned long long,llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,llvm::SmallVector<std::pair<void const*,unsigned long long>,0u>>::try_emplace<unsigned long long>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v28 = *a2;
  int v29 = 0;
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = *(void *)a1;
    unsigned int v9 = v7 - 1;
    uint64_t v10 = (v7 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    unsigned int v11 = (void *)(*(void *)a1 + 16 * v10);
    uint64_t v12 = *v11;
    if (v6 == *v11) {
      return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v10 + 8);
    }
    uint64_t v21 = 0;
    int v22 = 1;
    while (v12 != -4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v12 == -8192;
      }
      if (v23) {
        uint64_t v21 = v11;
      }
      int v24 = v10 + v22++;
      uint64_t v10 = v24 & v9;
      unsigned int v11 = (void *)(v8 + 16 * v10);
      uint64_t v12 = *v11;
      if (v6 == *v11) {
        return *(void *)(a1 + 24) + 16 * *(unsigned int *)(v8 + 16 * v10 + 8);
      }
    }
    if (v21) {
      uint64_t v14 = (uint64_t)v21;
    }
    else {
      uint64_t v14 = (uint64_t)v11;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t inserted = llvm::DenseMapBase<llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::InsertIntoBucket<void const*,unsigned int>(a1, v14, &v28, &v29);
  unsigned int v16 = (uint64_t *)(a1 + 24);
  uint64_t v17 = *(unsigned int *)(a1 + 32);
  *(_DWORD *)(inserted + 8) = v17;
  if (v17 >= *(_DWORD *)(a1 + 36))
  {
    uint64_t v25 = *a2;
    uint64_t v26 = *a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v16, (void *)(a1 + 40), v17 + 1, 16);
    float v27 = (uint64_t *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 32));
    uint64_t *v27 = v25;
    v27[1] = v26;
    LODWORD(v17) = *(_DWORD *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v18 = *v16;
    uint64_t v19 = (uint64_t *)(*v16 + 16 * v17);
    *uint64_t v19 = *a2;
    v19[1] = *a3;
  }
  unsigned int v20 = v17 + 1;
  *(_DWORD *)(a1 + 32) = v20;
  return v18 + 16 * v20 - 16;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>,void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::InsertIntoBucket<void const*,unsigned int>(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    uint64_t v10 = *(void *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(a1, v9);
  uint64_t v10 = *a3;
  int v12 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & v12;
  a2 = *(void *)a1 + 16 * v13;
  uint64_t v14 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != -4096)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == -8192;
      }
      if (v17) {
        uint64_t v15 = a2;
      }
      unsigned int v18 = v13 + v16++;
      unsigned int v13 = v18 & v12;
      a2 = *(void *)a1 + 16 * (v18 & v12);
      uint64_t v14 = *(void *)a2;
      if (v10 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v15) {
      a2 = v15;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = *a4;
  return a2;
}

void *llvm::DenseMap<void const*,unsigned int,llvm::DenseMapInfo<void const*,void>,llvm::detail::DenseMapPair<void const*,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  uint64_t v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_10;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      uint64_t v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      unsigned int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *unsigned int v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        uint64_t v15 = &result[2 * v11];
        do
        {
          *uint64_t v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if (v3)
    {
      int v16 = v4;
      do
      {
        uint64_t v23 = *(void *)v16;
        if ((*(void *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v24 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v25 = v24 & ((v23 >> 4) ^ (v23 >> 9));
          uint64_t v22 = *(void *)a1 + 16 * v25;
          uint64_t v26 = *(void *)v22;
          if (v23 != *(void *)v22)
          {
            uint64_t v27 = 0;
            int v28 = 1;
            while (v26 != -4096)
            {
              if (v27) {
                BOOL v29 = 0;
              }
              else {
                BOOL v29 = v26 == -8192;
              }
              if (v29) {
                uint64_t v27 = v22;
              }
              unsigned int v30 = v25 + v28++;
              unsigned int v25 = v30 & v24;
              uint64_t v22 = *(void *)a1 + 16 * (v30 & v24);
              uint64_t v26 = *(void *)v22;
              if (v23 == *(void *)v22) {
                goto LABEL_24;
              }
            }
            if (v27) {
              uint64_t v22 = v27;
            }
          }
LABEL_24:
          *(void *)uint64_t v22 = v23;
          *(_DWORD *)(v22 + 8) = *((_DWORD *)v16 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        int v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_19;
    }
    uint64_t v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    uint64_t v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v19 = result + 2;
    uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *uint64_t v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      uint64_t v21 = &result[2 * v17];
      do
      {
        *uint64_t v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

void mlir::anec::ANECDictionary::Create(mlir::anec::ANECDictionary *this)
{
}

void mlir::anec::ANECDictionary::Create(mlir::anec::ANECDictionary *this, const ZinIrUnitInfo *a2)
{
  switch(*((_DWORD *)this + 8))
  {
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xD:
    case 0xE:
    case 0x17:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x21:
    case 0x26:
    case 0x28:
    case 0x2A:
    case 0x2B:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
      __break(1u);
      JUMPOUT(0x211472624);
    case 3:
      ZinCreateConcatUnit(this);
      break;
    case 4:
      ZinCreateEWUnit(this);
      break;
    case 0xB:
      ZinCreateFlattenUnit(this);
      break;
    case 0xC:
      ZinCreateUnflattenUnit(this);
      break;
    case 0xF:
      ZinCreateArgMinMaxUnit(this);
      break;
    case 0x10:
      ZinCreateGlobalArgMinMaxUnit(this);
      break;
    case 0x11:
      ZinCreateInputViewUnit(this);
      break;
    case 0x12:
      ZinCreateMatrixMultUnit(this);
      break;
    case 0x13:
      ZinCreateBroadcastUnit(this);
      break;
    case 0x14:
      ZinCreateReductionUnit(this);
      break;
    case 0x15:
      ZinCreateTransposeUnit((int **)this);
      break;
    case 0x16:
      ZinCreateReshapeUnit((int **)this);
      break;
    case 0x18:
      ZinCreateSoftmaxUnit(this);
      break;
    case 0x19:
      ZinCreateInstanceNormUnit(this);
      break;
    case 0x1F:
      ZinCreatePixelShuffleUnit(this);
      break;
    case 0x20:
      ZinCreatePixelUnshuffleUnit(this);
      break;
    case 0x22:
      ZinCreateSpaceToBatchUnit(this);
      break;
    case 0x23:
      ZinCreateBatchToSpaceUnit(this);
      break;
    case 0x24:
      ZinCreateSpaceToChannelUnit(this);
      break;
    case 0x25:
      ZinCreateChannelToSpaceUnit(this);
      break;
    case 0x27:
      ZinCreateGatherUnit(this);
      break;
    case 0x29:
      ZinCreateResizeUnit(this);
      break;
    case 0x2C:
      ZinCreatePadUnit(this);
      break;
    case 0x2D:
      ZinCreateTileUnit(this);
      break;
    case 0x2E:
      ZinCreateCropResizeUnit(this);
      break;
    case 0x3A:
      ZinCreateQuantUnit(this);
      break;
    case 0x3B:
      ZinCreateDeQuantUnit(this);
      break;
    case 0x3C:
      ZinCreateLinearUnit(this);
      break;
    default:
      ZinCreateConvUnit(this);
      break;
  }
  operator new();
}

void mlir::anec::ANECDictionary::Add(uint64_t *a1, long long *a2, uint64_t *a3)
{
  plist::PListDict::GetValueForKey(*a1, (uint64_t)a2, &v13);
  int v7 = v13;
  unint64_t v6 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return;
    }
  }
  else if (v7)
  {
    return;
  }
  unsigned int v8 = (void *)(*a1 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::find<std::string>(v8, (uint64_t)a2))
  {
    unsigned int v13 = a2;
    unsigned int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v13);
    uint64_t v11 = *a3;
    uint64_t v10 = a3[1];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 + 6);
    *((void *)v9 + 5) = v11;
    *((void *)v9 + 6) = v10;
    if (v12)
    {
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

uint64_t mlir::anec::ANECDictionary::WriteToStream(mlir::anec::ANECDictionary *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = MEMORY[0x263F8C340] + 24;
  uint64_t v5 = MEMORY[0x263F8C340] + 64;
  v20[0] = MEMORY[0x263F8C340] + 64;
  unint64_t v6 = (uint64_t *)MEMORY[0x263F8C2C8];
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v15 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(uint64_t *)((char *)&v16[-1] + *(void *)(v15 - 24)) = v7;
  unsigned int v8 = (std::ios_base *)((char *)&v16[-1] + *(void *)(v15 - 24));
  std::ios_base::init(v8, v16);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v15 = v4;
  v20[0] = v5;
  std::streambuf::basic_streambuf();
  uint64_t v9 = MEMORY[0x263F8C318] + 16;
  v16[0] = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)uint64_t v17 = 0u;
  long long v18 = 0u;
  int v19 = 16;
  plist::PListDict::Dump(*(void *)this, &v15, 0, 4);
  std::stringbuf::str();
  if ((v14 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    size_t v11 = v14;
  }
  else {
    size_t v11 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(a2, (const char *)v10, v11);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *v6;
  *(uint64_t *)((char *)&v16[-1] + *(void *)(v15 - 24)) = v6[3];
  v16[0] = v9;
  if (SBYTE7(v18) < 0) {
    operator delete(v17[0]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21667D2B0](v20);
  return 0;
}

void mlir::anec::ANECDictionary::PListEntry(mlir::anec::ANECDictionary *this)
{
}

{
  operator new();
}

{
  operator new();
}

void mlir::anec::ANECDictionary::PListEntry()
{
}

void mlir::anec::ANECDictionary::PListEntry(void **a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = (*a1)[1];
  *a2 = **a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void mlir::anec::ANECDictionary::PListEntry(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
}

void mlir::anec::ANECDictionary::Create(ZinIrUnitInfo const&)::$_0::__invoke(const __CFString *a1, const __CFString *a2, uint64_t *a3)
{
  long long __p = 0uLL;
  uint64_t v9 = 0;
  ZinGetString(a1, (uint64_t)&__p);
  plist::PListType::PListFromCF(&v6, a2);
  mlir::anec::ANECDictionary::Add(a3, &__p, (uint64_t *)&v6);
  uint64_t v5 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (SHIBYTE(v9) < 0) {
LABEL_4:
  }
    operator delete((void *)__p);
}

void std::__shared_ptr_pointer<mlir::anec::ANECDictionary *,std::shared_ptr<mlir::anec::ANECDictionary>::__shared_ptr_default_delete<mlir::anec::ANECDictionary,mlir::anec::ANECDictionary>,std::allocator<mlir::anec::ANECDictionary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<mlir::anec::ANECDictionary *,std::shared_ptr<mlir::anec::ANECDictionary>::__shared_ptr_default_delete<mlir::anec::ANECDictionary,mlir::anec::ANECDictionary>,std::allocator<mlir::anec::ANECDictionary>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void std::__shared_ptr_pointer<plist::PListInt *,std::shared_ptr<plist::PListType>::__shared_ptr_default_delete<plist::PListType,plist::PListInt>,std::allocator<plist::PListInt>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<plist::PListInt *,std::shared_ptr<plist::PListType>::__shared_ptr_default_delete<plist::PListType,plist::PListInt>,std::allocator<plist::PListInt>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<plist::PListBool *,std::shared_ptr<plist::PListType>::__shared_ptr_default_delete<plist::PListType,plist::PListBool>,std::allocator<plist::PListBool>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<plist::PListBool *,std::shared_ptr<plist::PListType>::__shared_ptr_default_delete<plist::PListType,plist::PListBool>,std::allocator<plist::PListBool>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<plist::PListString *,std::shared_ptr<plist::PListType>::__shared_ptr_default_delete<plist::PListType,plist::PListString>,std::allocator<plist::PListString>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<plist::PListString *,std::shared_ptr<plist::PListType>::__shared_ptr_default_delete<plist::PListType,plist::PListString>,std::allocator<plist::PListString>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void plist::PListType::PListFromCF(plist::PListReal **__return_ptr a1@<X8>, const __CFString *this@<X0>)
{
  if (!this)
  {
LABEL_18:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  CFTypeID v5 = CFGetTypeID(this);
  if (v5 == CFStringGetTypeID())
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v29 = 0;
    ZinGetString(this, (uint64_t)__p);
    unint64_t v6 = operator new(0x38uLL);
    v6[1] = 0;
    v6[2] = 0;
    *unint64_t v6 = &unk_26C389F50;
    uint64_t v7 = (uint64_t)(v6 + 3);
    v6[3] = &unk_26C380490;
    unsigned int v8 = (std::string *)(v6 + 4);
    if (SHIBYTE(v29) < 0)
    {
      std::string::__init_copy_ctor_external(v8, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      int v20 = SHIBYTE(v29);
      *a1 = (plist::PListReal *)v7;
      a1[1] = (plist::PListReal *)v6;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v6[6] = v29;
      *a1 = (plist::PListReal *)v7;
      a1[1] = (plist::PListReal *)v6;
    }
    return;
  }
  CFTypeID v9 = CFGetTypeID(this);
  if (v9 == CFBooleanGetTypeID())
  {
    BOOL v10 = CFBooleanGetValue((CFBooleanRef)this) != 0;
    size_t v11 = operator new(0x28uLL);
    v11[1] = 0;
    v11[2] = 0;
    *size_t v11 = &unk_26C389FC0;
    uint64_t v12 = (uint64_t)(v11 + 3);
    unint64_t v11[3] = &unk_26C3804E0;
    *((unsigned char *)v11 + 32) = v10;
LABEL_7:
    *a1 = (plist::PListReal *)v12;
    a1[1] = (plist::PListReal *)v11;
    return;
  }
  CFTypeID v13 = CFGetTypeID(this);
  if (v13 != CFNumberGetTypeID())
  {
    CFTypeID v21 = CFGetTypeID(this);
    if (v21 == CFDictionaryGetTypeID()) {
      operator new();
    }
    CFTypeID v22 = CFGetTypeID(this);
    if (v22 == CFArrayGetTypeID()) {
      operator new();
    }
    goto LABEL_18;
  }
  CFNumberType Type = CFNumberGetType((CFNumberRef)this);
  double v27 = 0.0;
  CFNumberGetValue((CFNumberRef)this, Type, &v27);
  IsFloatCFNumberType Type = CFNumberIsFloatType((CFNumberRef)this);
  CFIndex ByteSize = CFNumberGetByteSize((CFNumberRef)this);
  if (IsFloatType)
  {
    if (ByteSize == 4)
    {
      uint64_t v17 = operator new(0x38uLL);
      v17[1] = 0;
      v17[2] = 0;
      void *v17 = &unk_26C389FF8;
      long long v18 = (plist::PListReal *)(v17 + 3);
      double v19 = *(float *)&v27;
    }
    else
    {
      CFNumberGetByteSize((CFNumberRef)this);
      uint64_t v17 = operator new(0x38uLL);
      v17[1] = 0;
      v17[2] = 0;
      void *v17 = &unk_26C389FF8;
      long long v18 = (plist::PListReal *)(v17 + 3);
      double v19 = v27;
    }
    *a1 = plist::PListReal::PListReal(v18, v19);
    a1[1] = (plist::PListReal *)v17;
  }
  else
  {
    if (ByteSize == 1)
    {
      size_t v11 = operator new(0x28uLL);
      v11[1] = 0;
      v11[2] = 0;
      *size_t v11 = &unk_26C389F88;
      uint64_t v12 = (uint64_t)(v11 + 3);
      uint64_t v23 = SLOBYTE(v27);
      unint64_t v11[3] = &unk_26C3804B8;
      v11[4] = v23;
      goto LABEL_7;
    }
    if (CFNumberGetByteSize((CFNumberRef)this) == 2)
    {
      int v24 = (double *)operator new(0x28uLL);
      v24[1] = 0.0;
      v24[2] = 0.0;
      *(void *)int v24 = &unk_26C389F88;
      uint64_t v25 = (uint64_t)(v24 + 3);
      *(void *)&double v26 = SLOWORD(v27);
    }
    else if (CFNumberGetByteSize((CFNumberRef)this) == 4)
    {
      int v24 = (double *)operator new(0x28uLL);
      v24[1] = 0.0;
      v24[2] = 0.0;
      *(void *)int v24 = &unk_26C389F88;
      uint64_t v25 = (uint64_t)(v24 + 3);
      *(void *)&double v26 = SLODWORD(v27);
    }
    else
    {
      CFNumberGetByteSize((CFNumberRef)this);
      int v24 = (double *)operator new(0x28uLL);
      v24[1] = 0.0;
      v24[2] = 0.0;
      *(void *)int v24 = &unk_26C389F88;
      uint64_t v25 = (uint64_t)(v24 + 3);
      double v26 = v27;
    }
    *((void *)v24 + 3) = &unk_26C3804B8;
    v24[4] = v26;
    *a1 = (plist::PListReal *)v25;
    a1[1] = (plist::PListReal *)v24;
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<plist::PListInt>::~shared_ptr[abi:nn180100]((uint64_t)__p);
  }
}

uint64_t std::shared_ptr<plist::PListInt>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void plist::PListDict::Create(plist::PListDict *this)
{
}

void plist::PListArray::Create(plist::PListArray *this)
{
}

void *plist::PListString::DoPrint(uint64_t a1, void *a2, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_b = (void **)operator new(v7 + 1);
    size_t v27 = __len;
    int64_t v28 = v8 | 0x8000000000000000;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v28) = __len;
  p_b = (void **)&__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, __len);
  *((unsigned char *)p_b + __len) = 0;
  if (v28 >= 0) {
    CFTypeID v9 = (void **)&__b;
  }
  else {
    CFTypeID v9 = __b;
  }
  if (v28 >= 0) {
    uint64_t v10 = HIBYTE(v28);
  }
  else {
    uint64_t v10 = v27;
  }
  size_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
  char v25 = 8;
  strcpy((char *)v24, "<string>");
  uint64_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v24, 8);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v14 = a1 + 8;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 8);
  }
  double v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, v17, v18);
  char v23 = 10;
  strcpy((char *)__p, "</string>\n");
  int v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)__p, 10);
  if ((v23 & 0x80000000) == 0)
  {
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(v24[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      return v20;
    }
LABEL_27:
    operator delete(__b);
    return v20;
  }
  operator delete(__p[0]);
  if (v25 < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (SHIBYTE(v28) < 0) {
    goto LABEL_27;
  }
  return v20;
}

plist::PListReal *plist::PListReal::PListReal(plist::PListReal *this, double a2)
{
  *(void *)this = &unk_26C380530;
  *((void *)this + 1) = 0;
  uint64_t v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (a2 == -INFINITY)
  {
    CFTypeID v5 = "-infinity";
LABEL_7:
    MEMORY[0x21667CCF0]((char *)this + 8, v5);
    return this;
  }
  if (a2 == INFINITY)
  {
    CFTypeID v5 = "+infinity";
    goto LABEL_7;
  }
  if (a2 == 0.0)
  {
    CFTypeID v5 = "0.0";
    goto LABEL_7;
  }
  memset(&v10, 0, sizeof(v10));
  int v7 = snprintf(0, 0, "%.*g", 17, a2);
  begin = 0;
  size_t v9 = v7 + 1;
  if (v7 != -1)
  {
    std::vector<char>::__append(&v10, v7 + 1);
    begin = v10.__begin_;
  }
  snprintf(begin, v9, "%.*g", 17, a2);
  MEMORY[0x21667CCF0](v3, v10.__begin_);
  if (v10.__begin_)
  {
    v10.__end_ = v10.__begin_;
    operator delete(v10.__begin_);
  }
  return this;
}

void *plist::PListReal::DoPrint(uint64_t a1, void *a2, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_b = (void **)operator new(v7 + 1);
    size_t v27 = __len;
    int64_t v28 = v8 | 0x8000000000000000;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v28) = __len;
  p_b = (void **)&__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, __len);
  *((unsigned char *)p_b + __len) = 0;
  if (v28 >= 0) {
    size_t v9 = (void **)&__b;
  }
  else {
    size_t v9 = __b;
  }
  if (v28 >= 0) {
    uint64_t v10 = HIBYTE(v28);
  }
  else {
    uint64_t v10 = v27;
  }
  size_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
  char v25 = 6;
  strcpy((char *)v24, "<real>");
  uint64_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)v24, 6);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v14 = a1 + 8;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 8);
  }
  double v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, v17, v18);
  char v23 = 8;
  strcpy((char *)__p, "</real>\n");
  int v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)__p, 8);
  if ((v23 & 0x80000000) == 0)
  {
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(v24[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      return v20;
    }
LABEL_27:
    operator delete(__b);
    return v20;
  }
  operator delete(__p[0]);
  if (v25 < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (SHIBYTE(v28) < 0) {
    goto LABEL_27;
  }
  return v20;
}

void *plist::PListInt::DoPrint(uint64_t a1, void *a2, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_b = (void **)operator new(v7 + 1);
    size_t v24 = __len;
    int64_t v25 = v8 | 0x8000000000000000;
    __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v25) = __len;
  p_b = (void **)&__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, __len);
  *((unsigned char *)p_b + __len) = 0;
  if (v25 >= 0) {
    size_t v9 = (void **)&__b;
  }
  else {
    size_t v9 = __b;
  }
  if (v25 >= 0) {
    uint64_t v10 = HIBYTE(v25);
  }
  else {
    uint64_t v10 = v24;
  }
  size_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
  char v22 = 9;
  strcpy((char *)__p, "<integer>");
  uint64_t v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 9);
  std::to_string(&v20, *(void *)(a1 + 8));
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v13 = &v20;
  }
  else {
    uint64_t v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v20.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
  char v19 = 11;
  strcpy((char *)v18, "</integer>\n");
  int v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, 11);
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_24;
      }
LABEL_28:
      operator delete(__p[0]);
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        return v16;
      }
LABEL_29:
      operator delete(__b);
      return v16;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if (v22 < 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (SHIBYTE(v25) < 0) {
    goto LABEL_29;
  }
  return v16;
}

void *plist::PListBool::DoPrint(uint64_t a1, void *a2, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_b = (long long *)operator new(v7 + 1);
    *((void *)&__b + 1) = __len;
    int64_t v15 = v8 | 0x8000000000000000;
    *(void *)&long long __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v15) = __len;
  p_b = &__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, __len);
  *((unsigned char *)p_b + __len) = 0;
  if (v15 >= 0) {
    size_t v9 = &__b;
  }
  else {
    size_t v9 = (long long *)__b;
  }
  if (v15 >= 0) {
    uint64_t v10 = HIBYTE(v15);
  }
  else {
    uint64_t v10 = *((void *)&__b + 1);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
  if (SHIBYTE(v15) < 0)
  {
    operator delete((void *)__b);
    if (*(unsigned char *)(a1 + 8)) {
      goto LABEL_17;
    }
  }
  else if (*(unsigned char *)(a1 + 8))
  {
LABEL_17:
    HIBYTE(v15) = 8;
    strcpy((char *)&__b, "<true/>\n");
    size_t v11 = a2;
    uint64_t v12 = 8;
    goto LABEL_20;
  }
  HIBYTE(v15) = 9;
  strcpy((char *)&__b, "<false/>\n");
  size_t v11 = a2;
  uint64_t v12 = 9;
LABEL_20:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)&__b, v12);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__b);
  }
  return a2;
}

void *plist::PListDict::DoPrint(uint64_t a1, void *a2, size_t __len, uint64_t a4)
{
  if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_68:
  }
    abort();
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    p_b = (void **)operator new(v9 + 1);
    size_t v41 = __len;
    int64_t v42 = v10 | 0x8000000000000000;
    long long __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v42) = __len;
  p_b = (void **)&__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, __len);
  *((unsigned char *)p_b + __len) = 0;
  if (v42 >= 0) {
    size_t v11 = (void **)&__b;
  }
  else {
    size_t v11 = __b;
  }
  if (v42 >= 0) {
    uint64_t v12 = HIBYTE(v42);
  }
  else {
    uint64_t v12 = v41;
  }
  uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, v12);
  char v39 = 7;
  strcpy((char *)__p, "<dict>\n");
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 7);
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42) < 0)
  {
    operator delete(__b);
    uint64_t v14 = *(uint64_t ***)(a1 + 24);
    if (!v14) {
      goto LABEL_50;
    }
    goto LABEL_21;
  }
  uint64_t v14 = *(uint64_t ***)(a1 + 24);
  if (v14)
  {
LABEL_21:
    size_t v15 = a4 + __len;
    size_t v16 = ((a4 + __len) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((a4 + __len) | 7) != 0x17) {
      size_t v16 = (a4 + __len) | 7;
    }
    size_t v17 = v16 + 1;
    unint64_t v35 = (v16 + 1) | 0x8000000000000000;
    while (1)
    {
      if (v15 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_68;
      }
      if (v15 >= 0x17) {
        break;
      }
      HIBYTE(v42) = a4 + __len;
      uint64_t v18 = (void **)&__b;
      if (v15) {
        goto LABEL_30;
      }
LABEL_31:
      *((unsigned char *)v18 + v15) = 0;
      if (v42 >= 0) {
        char v19 = (void **)&__b;
      }
      else {
        char v19 = __b;
      }
      if (v42 >= 0) {
        uint64_t v20 = HIBYTE(v42);
      }
      else {
        uint64_t v20 = v41;
      }
      CFTypeID v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v19, v20);
      char v39 = 5;
      strcpy((char *)__p, "<key>");
      char v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)__p, 5);
      int v23 = *((char *)v14 + 39);
      if (v23 >= 0) {
        uint64_t v24 = (uint64_t)(v14 + 2);
      }
      else {
        uint64_t v24 = (uint64_t)v14[2];
      }
      if (v23 >= 0) {
        uint64_t v25 = *((unsigned __int8 *)v14 + 39);
      }
      else {
        uint64_t v25 = (uint64_t)v14[3];
      }
      double v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, v24, v25);
      char v37 = 7;
      strcpy((char *)v36, "</key>\n");
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)v36, 7);
      if (v37 < 0)
      {
        operator delete(v36[0]);
        if ((v39 & 0x80000000) == 0)
        {
LABEL_45:
          if (SHIBYTE(v42) < 0) {
            goto LABEL_49;
          }
          goto LABEL_24;
        }
      }
      else if ((v39 & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(__p[0]);
      if (SHIBYTE(v42) < 0) {
LABEL_49:
      }
        operator delete(__b);
LABEL_24:
      (*(void (**)(uint64_t *, void *, size_t, uint64_t))(*v14[5] + 16))(v14[5], a2, v15, a4);
      uint64_t v14 = (uint64_t **)*v14;
      if (!v14) {
        goto LABEL_50;
      }
    }
    uint64_t v18 = (void **)operator new(v17);
    size_t v41 = a4 + __len;
    int64_t v42 = v35;
    long long __b = v18;
LABEL_30:
    memset(v18, 32, v15);
    goto LABEL_31;
  }
LABEL_50:
  if (__len >= 0x17)
  {
    size_t v28 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v28 = __len | 7;
    }
    size_t v29 = v28 + 1;
    size_t v27 = (void **)operator new(v28 + 1);
    size_t v41 = __len;
    int64_t v42 = v29 | 0x8000000000000000;
    long long __b = v27;
    goto LABEL_56;
  }
  HIBYTE(v42) = __len;
  size_t v27 = (void **)&__b;
  if (__len) {
LABEL_56:
  }
    memset(v27, 32, __len);
  *((unsigned char *)v27 + __len) = 0;
  if (v42 >= 0) {
    unsigned int v30 = (void **)&__b;
  }
  else {
    unsigned int v30 = __b;
  }
  if (v42 >= 0) {
    uint64_t v31 = HIBYTE(v42);
  }
  else {
    uint64_t v31 = v41;
  }
  int8x8_t v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v30, v31);
  char v39 = 8;
  strcpy((char *)__p, "</dict>\n");
  unsigned int v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)__p, 8);
  if (v39 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      return v33;
    }
LABEL_67:
    operator delete(__b);
    return v33;
  }
  if (SHIBYTE(v42) < 0) {
    goto LABEL_67;
  }
  return v33;
}

void *plist::PListDict::Dump(uint64_t a1, void *a2, size_t a3, uint64_t a4)
{
  size_t v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v8, 39);
  operator delete(v8);
  size_t v9 = (char *)operator new(0x68uLL);
  strcpy(v9, "<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n");
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, 103);
  operator delete(v9);
  size_t v10 = (char *)operator new(0x20uLL);
  strcpy(v10, "<plist version=\"1.0.2\">\n");
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v10, 24);
  operator delete(v10);
  plist::PListDict::DoPrint(a1, a2, a3, a4);
  char v15 = 8;
  strcpy((char *)__p, "</plist>");
  size_t v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)__p, 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

uint64_t *plist::PListDict::GetValueForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (result)
  {
    uint64_t v5 = result[6];
    *a3 = result[5];
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void *plist::PListArray::DoPrint(uint64_t a1, void *a2, size_t __len, uint64_t a4)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    p_b = (void **)operator new(v9 + 1);
    size_t v28 = __len;
    int64_t v29 = v10 | 0x8000000000000000;
    long long __b = p_b;
    goto LABEL_8;
  }
  HIBYTE(v29) = __len;
  p_b = (void **)&__b;
  if (__len) {
LABEL_8:
  }
    memset(p_b, 32, __len);
  *((unsigned char *)p_b + __len) = 0;
  if (v29 >= 0) {
    size_t v11 = (void **)&__b;
  }
  else {
    size_t v11 = __b;
  }
  if (v29 >= 0) {
    uint64_t v12 = HIBYTE(v29);
  }
  else {
    uint64_t v12 = v28;
  }
  uint64_t v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v11, v12);
  char v26 = 8;
  strcpy((char *)__p, "<array>\n");
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 8);
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__b);
LABEL_17:
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  char v15 = *(uint64_t **)(a1 + 16);
  while (v14 != v15)
  {
    uint64_t v16 = *v14;
    v14 += 2;
    (*(void (**)(uint64_t, void *, size_t, uint64_t))(*(void *)v16 + 16))(v16, a2, a4 + __len, a4);
  }
  if (__len >= 0x17)
  {
    size_t v18 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v18 = __len | 7;
    }
    size_t v19 = v18 + 1;
    size_t v17 = (void **)operator new(v18 + 1);
    size_t v28 = __len;
    int64_t v29 = v19 | 0x8000000000000000;
    long long __b = v17;
    goto LABEL_25;
  }
  HIBYTE(v29) = __len;
  size_t v17 = (void **)&__b;
  if (__len) {
LABEL_25:
  }
    memset(v17, 32, __len);
  *((unsigned char *)v17 + __len) = 0;
  if (v29 >= 0) {
    uint64_t v20 = (void **)&__b;
  }
  else {
    uint64_t v20 = __b;
  }
  if (v29 >= 0) {
    uint64_t v21 = HIBYTE(v29);
  }
  else {
    uint64_t v21 = v28;
  }
  char v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)v20, v21);
  char v26 = 9;
  strcpy((char *)__p, "</array>\n");
  int v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)__p, 9);
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      return v23;
    }
LABEL_38:
    operator delete(__b);
    return v23;
  }
  if (SHIBYTE(v29) < 0) {
    goto LABEL_38;
  }
  return v23;
}

void plist::PListString::~PListString(void **this)
{
  *this = &unk_26C380490;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C380490;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x21667D3C0);
}

void plist::PListInt::~PListInt(plist::PListInt *this)
{
}

void plist::PListBool::~PListBool(plist::PListBool *this)
{
}

void plist::PListArray::~PListArray(plist::PListArray *this)
{
  *(void *)this = &unk_26C380468;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_26C380468;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }

  JUMPOUT(0x21667D3C0);
}

void plist::PListDict::~PListDict(plist::PListDict *this)
{
  *(void *)this = &unk_26C380508;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C380508;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x21667D3C0);
}

void plist::PListReal::~PListReal(void **this)
{
  *this = &unk_26C380530;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C380530;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x21667D3C0);
}

void plist::PListType::PListFromCF(void const*)::$_0::__invoke(const __CFString *a1, plist::PListType *a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v15 = 0;
  ZinGetString(a1, (uint64_t)__p);
  plist::PListType::PListFromCF(&v12, a2, v5);
  unint64_t v6 = (void *)(a3 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::find<std::string>(v6, (uint64_t)__p))
  {
    uint64_t v16 = __p;
    size_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v16);
    uint64_t v10 = v12;
    size_t v9 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    size_t v11 = (std::__shared_weak_count *)*((void *)v8 + 6);
    *((void *)v8 + 5) = v10;
    *((void *)v8 + 6) = v9;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  size_t v7 = v13;
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (SHIBYTE(v15) < 0) {
LABEL_5:
  }
    operator delete(__p[0]);
}

void plist::PListType::PListFromCF(void const*)::$_1::__invoke(plist::PListType *a1, void *a2)
{
  plist::PListType::PListFromCF((uint64_t *)&v6, a1, a2);
  uint64_t v3 = (void *)a2[2];
  if ((unint64_t)v3 >= a2[3])
  {
    uint64_t v5 = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>((uint64_t)(a2 + 1), &v6);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
    a2[2] = v5;
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  *uint64_t v3 = v6;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  v3[1] = *((void *)&v6 + 1);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a2[2] = v3 + 2;
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<plist::PListType>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 6);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x21667CE40](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      size_t v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x21667CE50](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        uint64_t v16 = __b;
      }
      else {
        uint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void std::__shared_ptr_emplace<plist::PListBool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<plist::PListBool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<plist::PListBool>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<plist::PListReal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<plist::PListReal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<plist::PListReal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<plist::PListInt>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<plist::PListInt>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C389F88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_emplace<plist::PListInt>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_pointer<plist::PListDict *,std::shared_ptr<plist::PListDict>::__shared_ptr_default_delete<plist::PListDict,plist::PListDict>,std::allocator<plist::PListDict>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<plist::PListDict *,std::shared_ptr<plist::PListDict>::__shared_ptr_default_delete<plist::PListDict,plist::PListDict>,std::allocator<plist::PListDict>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<plist::PListArray *,std::shared_ptr<plist::PListArray>::__shared_ptr_default_delete<plist::PListArray,plist::PListArray>,std::allocator<plist::PListArray>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<plist::PListArray *,std::shared_ptr<plist::PListArray>::__shared_ptr_default_delete<plist::PListArray,plist::PListArray>,std::allocator<plist::PListArray>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void mlir::anec::getANECCanonicalizeQuantPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::anec::anonymous namespace'::ANEC_AddGocs::~ANEC_AddGocs(mlir::anec::_anonymous_namespace_::ANEC_AddGocs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_AddGocs *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v163[1] = *(uint64_t ***)MEMORY[0x263EF8340];
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v151 = 0;
  v157 = v159;
  v159[0] = a2;
  uint64_t v158 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v150 = v5;
  v152 = v5;
  uint64_t ArgOperands = *(uint64_t **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v150, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_253;
    }
    uint64_t v17 = v150;
    if (mlir::RewriterBase::Listener::classof(v11))
    {
      uint64_t v12 = *((void *)v17 + 3);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
      uint64_t v16 = (void **)&ArgOperands;
      goto LABEL_25;
    }
    goto LABEL_252;
  }
  uint64_t v7 = DefiningOp;
  uint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id) {
    int v10 = (uint64_t *)DefiningOp;
  }
  else {
    int v10 = 0;
  }
  uint64_t ArgOperands = v10;
  if (!v9)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_253;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v14 = v13;
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
      uint64_t v16 = &v155;
LABEL_25:
      uint64_t v24 = v15(v11, v12, v14, v16);
LABEL_26:
      uint64_t v11 = v24;
      goto LABEL_253;
    }
    goto LABEL_252;
  }
  uint64_t v151 = DefiningOp;
  v155 = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ArgOperands, 0) + 24);
  uint64_t v18 = mlir::Value::getDefiningOp((mlir::Value *)&v155);
  if (!v18)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_253;
    }
    uint64_t v25 = ArgOperands;
    if (mlir::RewriterBase::Listener::classof(v11))
    {
      uint64_t v12 = v25[3];
      goto LABEL_12;
    }
    goto LABEL_252;
  }
  uint64_t v19 = v18;
  uint64_t v20 = *(void **)(*(void *)(v18 + 48) + 16);
  BOOL v21 = v20 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
  if (v20 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    int64_t v22 = (void *)v18;
  }
  else {
    int64_t v22 = 0;
  }
  v155 = v22;
  if (!v21)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_253;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v19 + 24);
      goto LABEL_24;
    }
LABEL_252:
    uint64_t v11 = 0;
    goto LABEL_253;
  }
  uint64_t v154 = v18;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v155, 0);
  uint64_t v27 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v155, 1u);
  uint64_t v28 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v155, 2u);
  unsigned int v29 = v158;
  if (v158 >= HIDWORD(v158))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, v159, v158 + 1, 8);
    unsigned int v29 = v158;
  }
  *((void *)v157 + v29) = v19;
  LODWORD(v158) = v158 + 1;
  v155 = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ArgOperands, 1u) + 24);
  uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&v155);
  if (!v30)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_253;
    }
    unint64_t v35 = ArgOperands;
    if (mlir::RewriterBase::Listener::classof(v11))
    {
      uint64_t v12 = v35[3];
      goto LABEL_12;
    }
    goto LABEL_252;
  }
  uint64_t v31 = v30;
  int8x8_t v32 = *(void **)(*(void *)(v30 + 48) + 16);
  BOOL v33 = v32 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
  if (v32 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v34 = (void *)v30;
  }
  else {
    uint64_t v34 = 0;
  }
  v155 = v34;
  if (!v33)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_253;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_252;
    }
    uint64_t v12 = *(void *)(v31 + 24);
LABEL_24:
    uint64_t v14 = v23;
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
    uint64_t v16 = (void **)v163;
    goto LABEL_25;
  }
  uint64_t v153 = v30;
  uint64_t v36 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v155, 0);
  uint64_t v149 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v155, 1u);
  uint64_t v37 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v155, 2u);
  unsigned int v38 = v158;
  if (v158 >= HIDWORD(v158))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, v159, v158 + 1, 8);
    unsigned int v38 = v158;
  }
  *((void *)v157 + v38) = v31;
  uint64_t v39 = (v158 + 1);
  LODWORD(v158) = v39;
  if (v39 >= HIDWORD(v158))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, v159, v39 + 1, 8);
    LODWORD(v39) = v158;
  }
  *((void *)v157 + v39) = v7;
  LODWORD(v158) = v158 + 1;
  uint64_t v40 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v150, 1u);
  size_t v41 = *(uint64_t **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v150, 2u) + 24);
  v155 = 0;
  uint64_t v156 = 0;
  v163[0] = (uint64_t **)&v155;
  uint64_t ArgOperands = v41;
  uint64_t v42 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!v42) {
    goto LABEL_212;
  }
  uint64_t v148 = v36;
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v163, v42)) {
    goto LABEL_212;
  }
  uint64_t ArgOperands = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v155);
  uint64_t v161 = v43;
  uint64_t v44 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                 + 136);
  uint64_t v147 = v40;
  if (v44 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v44 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t ArgOperands = v162;
    uint64_t v161 = 0xC00000000;
    mlir::getIntValues<float>((uint64_t)v155, v156, (uint64_t)&ArgOperands, 0);
    if (v161)
    {
      uint64_t v51 = 4 * v161 - 4;
      uint64_t v52 = (float *)ArgOperands;
      do
      {
        float v53 = *v52++;
        BOOL v54 = v53 == 0.0;
        BOOL v55 = v53 != 0.0 || v51 == 0;
        v51 -= 4;
      }
      while (!v55);
    }
    else
    {
      BOOL v54 = 1;
    }
    if (ArgOperands != v162) {
      free(ArgOperands);
    }
    if (!v54) {
      goto LABEL_212;
    }
  }
  else
  {
    uint64_t ArgOperands = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v155);
    uint64_t v161 = v45;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_212;
    uint64_t ArgOperands = v162;
    uint64_t v161 = 0xC00000000;
    mlir::getIntValues<float>((uint64_t)v155, v156, (uint64_t)&ArgOperands, 0);
    if (v161)
    {
      uint64_t v46 = 4 * v161 - 4;
      unint64_t v47 = (float *)ArgOperands;
      do
      {
        float v48 = *v47++;
        BOOL v49 = v48 == 0.0;
        BOOL v50 = v48 != 0.0 || v46 == 0;
        v46 -= 4;
      }
      while (!v50);
    }
    else
    {
      BOOL v49 = 1;
    }
    if (ArgOperands != v162) {
      free(ArgOperands);
    }
    if (!v49)
    {
LABEL_212:
      uint64_t v121 = *((void *)a3 + 2);
      if (!v121 || !mlir::RewriterBase::Listener::classof(v121)) {
        goto LABEL_252;
      }
      uint64_t v122 = *((void *)a2 + 3);
LABEL_215:
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t **))(*(void *)v121 + 64))(v121, v122, v123, &ArgOperands);
      goto LABEL_26;
    }
  }
  uint64_t v56 = *(uint64_t **)(v28 + 24);
  v155 = 0;
  uint64_t v156 = 0;
  v163[0] = (uint64_t **)&v155;
  uint64_t ArgOperands = v56;
  uint64_t v57 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!v57 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v163, v57))
  {
LABEL_236:
    uint64_t v121 = *((void *)a3 + 2);
    if (!v121 || !mlir::RewriterBase::Listener::classof(v121)) {
      goto LABEL_252;
    }
    uint64_t v122 = *((void *)a2 + 3);
    goto LABEL_215;
  }
  uint64_t ArgOperands = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v155);
  uint64_t v161 = v58;
  uint64_t v59 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                 + 136);
  BOOL v68 = v59 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v59 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v68
    || v59 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v59 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t ArgOperands = v162;
    uint64_t v161 = 0xC00000000;
    mlir::getIntValues<float>((uint64_t)v155, v156, (uint64_t)&ArgOperands, 0);
    if (v161)
    {
      uint64_t v69 = 4 * v161 - 4;
      v70 = (float *)ArgOperands;
      do
      {
        float v71 = *v70++;
        BOOL v72 = v71 == 0.0;
        BOOL v73 = v71 != 0.0 || v69 == 0;
        v69 -= 4;
      }
      while (!v73);
    }
    else
    {
      BOOL v72 = 1;
    }
    if (ArgOperands != v162) {
      free(ArgOperands);
    }
    if (!v72) {
      goto LABEL_236;
    }
  }
  else
  {
    uint64_t ArgOperands = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v155);
    uint64_t v161 = v124;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_236;
    uint64_t ArgOperands = v162;
    uint64_t v161 = 0xC00000000;
    mlir::getIntValues<float>((uint64_t)v155, v156, (uint64_t)&ArgOperands, 0);
    if (v161)
    {
      uint64_t v125 = 4 * v161 - 4;
      v126 = (float *)ArgOperands;
      do
      {
        float v127 = *v126++;
        BOOL v128 = v127 == 0.0;
        BOOL v129 = v127 != 0.0 || v125 == 0;
        v125 -= 4;
      }
      while (!v129);
    }
    else
    {
      BOOL v128 = 1;
    }
    if (ArgOperands != v162) {
      free(ArgOperands);
    }
    if (!v128) {
      goto LABEL_236;
    }
  }
  v74 = *(uint64_t **)(v37 + 24);
  v155 = 0;
  uint64_t v156 = 0;
  v163[0] = (uint64_t **)&v155;
  uint64_t ArgOperands = v74;
  uint64_t v75 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!v75 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v163, v75))
  {
LABEL_249:
    uint64_t v121 = *((void *)a3 + 2);
    if (!v121 || !mlir::RewriterBase::Listener::classof(v121)) {
      goto LABEL_252;
    }
    uint64_t v122 = *((void *)a2 + 3);
    goto LABEL_215;
  }
  uint64_t ArgOperands = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v155);
  uint64_t v161 = v76;
  v77 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                 + 136);
  BOOL v86 = v77 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v77 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v86
    || v77 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v77 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    uint64_t ArgOperands = v162;
    uint64_t v161 = 0xC00000000;
    mlir::getIntValues<float>((uint64_t)v155, v156, (uint64_t)&ArgOperands, 0);
    if (v161)
    {
      uint64_t v87 = 4 * v161 - 4;
      v88 = (float *)ArgOperands;
      do
      {
        float v89 = *v88++;
        BOOL v90 = v89 == 0.0;
        BOOL v91 = v89 != 0.0 || v87 == 0;
        v87 -= 4;
      }
      while (!v91);
    }
    else
    {
      BOOL v90 = 1;
    }
    if (ArgOperands != v162) {
      free(ArgOperands);
    }
    if (!v90) {
      goto LABEL_249;
    }
  }
  else
  {
    uint64_t ArgOperands = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v155);
    uint64_t v161 = v130;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_249;
    uint64_t ArgOperands = v162;
    uint64_t v161 = 0xC00000000;
    mlir::getIntValues<float>((uint64_t)v155, v156, (uint64_t)&ArgOperands, 0);
    if (v161)
    {
      uint64_t v131 = 4 * v161 - 4;
      v132 = (float *)ArgOperands;
      do
      {
        float v133 = *v132++;
        BOOL v134 = v133 == 0.0;
        BOOL v135 = v133 != 0.0 || v131 == 0;
        v131 -= 4;
      }
      while (!v135);
    }
    else
    {
      BOOL v134 = 1;
    }
    if (ArgOperands != v162) {
      free(ArgOperands);
    }
    if (!v134) {
      goto LABEL_249;
    }
  }
  v92 = (uint64_t *)(*(void *)(*(void *)(v147 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v92) {
    goto LABEL_177;
  }
  uint64_t v93 = *v92;
  unint64_t v94 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v95 = *(unsigned int *)(v93 + 16);
  if (!v95) {
    goto LABEL_177;
  }
  v96 = *(void **)(v93 + 8);
  v97 = &v96[2 * v95];
  do
  {
    unint64_t v98 = v95 >> 1;
    v99 = &v96[2 * (v95 >> 1)];
    unint64_t v101 = *v99;
    v100 = v99 + 2;
    v95 += ~(v95 >> 1);
    if (v101 < v94) {
      v96 = v100;
    }
    else {
      unint64_t v95 = v98;
    }
  }
  while (v95);
  if (v96 != v97 && *v96 == v94) {
    uint64_t v102 = v96[1];
  }
  else {
LABEL_177:
  }
    uint64_t v102 = 0;
  uint64_t ArgOperands = v92;
  uint64_t v161 = v102;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(Shape, v104) != 1)
  {
    uint64_t v121 = *((void *)a3 + 2);
    if (!v121 || !mlir::RewriterBase::Listener::classof(v121)) {
      goto LABEL_252;
    }
    uint64_t v122 = *((void *)a2 + 3);
    goto LABEL_215;
  }
  v105 = (uint64_t *)(*(void *)(*(void *)(v27 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v105) {
    goto LABEL_188;
  }
  uint64_t v106 = *v105;
  unint64_t v107 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v108 = *(unsigned int *)(v106 + 16);
  if (!v108) {
    goto LABEL_188;
  }
  v109 = *(void **)(v106 + 8);
  v110 = &v109[2 * v108];
  do
  {
    unint64_t v111 = v108 >> 1;
    v112 = &v109[2 * (v108 >> 1)];
    unint64_t v114 = *v112;
    v113 = v112 + 2;
    v108 += ~(v108 >> 1);
    if (v114 < v107) {
      v109 = v113;
    }
    else {
      unint64_t v108 = v111;
    }
  }
  while (v108);
  if (v109 != v110 && *v109 == v107) {
    uint64_t v115 = v109[1];
  }
  else {
LABEL_188:
  }
    uint64_t v115 = 0;
  uint64_t ArgOperands = v105;
  uint64_t v161 = v115;
  v116 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
  if (mlir::ShapedType::getNumElements(v116, v117) == 1)
  {
    v155 = (void *)(*(void *)(*(void *)(v149 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t ArgOperands = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v155);
    uint64_t v161 = v118;
    v119 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&ArgOperands);
    if (mlir::ShapedType::getNumElements(v119, v120) == 1)
    {
      if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF8))
                        + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v148 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
                          + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        {
          uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v152, 0);
          uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
          if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
                            + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
          {
            uint64_t v138 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v151, 0);
            uint64_t v139 = mlir::detail::OpResultImpl::getNextResultAtOffset(v138, 0);
            uint64_t ArgOperands = (uint64_t *)mlir::getElementTypeOrSelf((void *)(*(void *)(v139 + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isF16((mlir::Type *)&ArgOperands))
            {
              uint64_t v140 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v154, 0);
              uint64_t v141 = mlir::detail::OpResultImpl::getNextResultAtOffset(v140, 0);
              uint64_t ArgOperands = (uint64_t *)mlir::getElementTypeOrSelf((void *)(*(void *)(v141 + 8) & 0xFFFFFFFFFFFFFFF8));
              if (mlir::Type::isF16((mlir::Type *)&ArgOperands))
              {
                uint64_t v142 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v153, 0);
                uint64_t v143 = mlir::detail::OpResultImpl::getNextResultAtOffset(v142, 0);
                uint64_t ArgOperands = (uint64_t *)mlir::getElementTypeOrSelf((void *)(*(void *)(v143 + 8) & 0xFFFFFFFFFFFFFFF8));
                if (mlir::Type::isF16((mlir::Type *)&ArgOperands))
                {
                  uint64_t v144 = *(void *)(*((void *)v157 + 1) + 24);
                  uint64_t ArgOperands = *(uint64_t **)(*(void *)v157 + 24);
                  uint64_t v161 = v144;
                  uint64_t v145 = *(void *)(*((void *)v157 + 3) + 24);
                  v162[0] = *(void *)(*((void *)v157 + 2) + 24);
                  v162[1] = v145;
                  mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, &ArgOperands, (mlir::MLIRContext *)4, 0);
                }
              }
              else
              {
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        else
        {
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
LABEL_253:
  if (v157 != v159) {
    free(v157);
  }
  return v11;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#12}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#13}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#14}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#15}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#16}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#17}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#18}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::canonicalizeAddGocs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v72 = a3;
  uint64_t v73 = a2;
  uint64_t v70 = a6;
  uint64_t v71 = a4;
  uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v73);
  uint64_t v14 = (uint64_t *)(*(void *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v14) {
    goto LABEL_10;
  }
  uint64_t v15 = *v14;
  unint64_t v16 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v17 = *(unsigned int *)(v15 + 16);
  if (!v17) {
    goto LABEL_10;
  }
  uint64_t v18 = *(void **)(v15 + 8);
  uint64_t v19 = &v18[2 * v17];
  do
  {
    unint64_t v20 = v17 >> 1;
    BOOL v21 = &v18[2 * (v17 >> 1)];
    unint64_t v23 = *v21;
    int64_t v22 = v21 + 2;
    v17 += ~(v17 >> 1);
    if (v23 < v16) {
      uint64_t v18 = v22;
    }
    else {
      unint64_t v17 = v20;
    }
  }
  while (v17);
  if (v18 != v19 && *v18 == v16) {
    uint64_t v24 = v18[1];
  }
  else {
LABEL_10:
  }
    uint64_t v24 = 0;
  v69[0] = (uint64_t)v14;
  v69[1] = v24;
  uint64_t v25 = (uint64_t *)(*(void *)(v73 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25) {
    goto LABEL_20;
  }
  uint64_t v26 = *v25;
  unint64_t v27 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v28 = *(unsigned int *)(v26 + 16);
  if (!v28) {
    goto LABEL_20;
  }
  unsigned int v29 = *(void **)(v26 + 8);
  uint64_t v30 = &v29[2 * v28];
  do
  {
    unint64_t v31 = v28 >> 1;
    int8x8_t v32 = &v29[2 * (v28 >> 1)];
    unint64_t v34 = *v32;
    BOOL v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27) {
      unsigned int v29 = v33;
    }
    else {
      unint64_t v28 = v31;
    }
  }
  while (v28);
  if (v29 != v30 && *v29 == v27) {
    uint64_t v35 = v29[1];
  }
  else {
LABEL_20:
  }
    uint64_t v35 = 0;
  v68[0] = (uint64_t)v25;
  v68[1] = v35;
  long long v76 = 0uLL;
  v74 = (uint64_t **)&v76;
  uint64_t v75 = a5;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v75);
  if (DefiningOp && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v74, DefiningOp))
  {
    int SplatFloat = mlir::getSplatFloatValue<float>(v76, *((uint64_t *)&v76 + 1));
    unsigned int v38 = SplatFloat & 0xFFFFFF00;
    int v39 = SplatFloat;
  }
  else
  {
    unsigned int v38 = 0;
    int v39 = 0;
  }
  long long v76 = 0uLL;
  v74 = (uint64_t **)&v76;
  uint64_t v75 = a7;
  uint64_t v40 = mlir::Value::getDefiningOp((mlir::Value *)&v75);
  if (v40 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v74, v40))
  {
    int v41 = mlir::getSplatFloatValue<float>(v76, *((uint64_t *)&v76 + 1));
    unsigned int v42 = v41 & 0xFFFFFF00;
    int v43 = v41;
  }
  else
  {
    unsigned int v42 = 0;
    int v43 = 0;
  }
  long long v76 = 0uLL;
  v74 = (uint64_t **)&v76;
  uint64_t v75 = a8;
  uint64_t v44 = mlir::Value::getDefiningOp((mlir::Value *)&v75);
  if (v44 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v74, v44))
  {
    int v46 = mlir::getSplatFloatValue<float>(v76, *((uint64_t *)&v76 + 1));
    unsigned int v47 = v46 & 0xFFFFFF00;
    int v48 = v46;
  }
  else
  {
    unsigned int v47 = 0;
    int v48 = 0;
  }
  float v66 = COERCE_FLOAT(v39 | v38) * COERCE_FLOAT(v43 | v42);
  float v67 = COERCE_FLOAT(v48 | v47) / COERCE_FLOAT(v43 | v42);
  long long v76 = xmmword_211F09710;
  long long v77 = unk_211F09720;
  BOOL v49 = (mlir::Float32Type **)(a1 + 8);
  F32CFNumberType Type = mlir::Builder::getF32Type(v49, v45);
  uint64_t v51 = (void *)mlir::RankedTensorType::get((uint64_t)&v76, 4, F32Type, 0);
  long long v76 = xmmword_211F09710;
  long long v77 = unk_211F09720;
  F16CFNumberType Type = mlir::Builder::getF16Type(v49, v52);
  uint64_t v75 = mlir::MemRefType::get((uint64_t *)&v76, (mlir::AffineMap *)4, F16Type, 0, 0, 0);
  *(void *)&long long v76 = mlir::createRawElementsAttr(v51, &v67, (const void *)4);
  *((void *)&v76 + 1) = v54;
  v74 = (uint64_t **)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v49, Loc, &v75, (void **)&v76);
  *(void *)&long long v76 = mlir::createRawElementsAttr(v51, &v66, (const void *)4);
  *((void *)&v76 + 1) = v55;
  unint64_t v65 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v49, Loc, &v75, (void **)&v76);
  uint64_t v57 = mlir::Builder::getF16Type(v49, v56);
  LOBYTE(v76) = 0;
  LOBYTE(v77) = 0;
  *(void *)&long long v76 = mlir::ShapedType::cloneWith(v69, &v76, v57);
  *((void *)&v76 + 1) = v58;
  unint64_t v64 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType,mlir::Value &,mlir::mps::ConstantOp &,mlir::Value &>((mlir::OpBuilder *)v49, Loc, (uint64_t *)&v76, &v71, &v74, &v70);
  uint64_t v60 = mlir::Builder::getF16Type(v49, v59);
  LOBYTE(v76) = 0;
  LOBYTE(v77) = 0;
  *(void *)&long long v76 = mlir::ShapedType::cloneWith(v68, &v76, v60);
  *((void *)&v76 + 1) = v61;
  unint64_t v63 = mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::ShapedType,mlir::Value &,mlir::anec::GOC &>((mlir::OpBuilder *)v49, Loc, (uint64_t *)&v76, &v72, &v64);
  return (char *)mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::anec::ElementwiseAdd &,mlir::mps::ConstantOp &,mlir::Value &>((mlir::OpBuilder *)v49, Loc, v68, &v63, &v65, &v70)- 16;
}

void *llvm::SmallVector<mlir::Value,4u>::SmallVector(void *a1, const void *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  size_t v6 = 8 * a3;
  if ((unint64_t)(8 * a3) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, (8 * a3) >> 3, 8);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v7 = 0;
  if (a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    unsigned int v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + (v6 >> 3);
  return a1;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::ElementwiseAdd type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp1");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp2 is not ::mlir::anec::GOC type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp1");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp2 is not ::mlir::anec::GOC type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'lhs_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'rhs_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'scale' failed to satisfy constraint: 'has only one element'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'lhs_scale' failed to satisfy constraint: 'has only one element'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#12}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'rhs_scale' failed to satisfy constraint: 'has only one element'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#13}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'lhs' failed to satisfy constraint: 'is constant >= 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#14}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'rhs' failed to satisfy constraint: 'is constant >= 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#15}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is constant >= 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#16}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'add' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#17}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'lhs_goc' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_AddGocs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#18}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'rhs_goc' failed to satisfy constraint: 'is FP16 value'");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType,mlir::Value &,mlir::mps::ConstantOp &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.gain_offset_control";
    v21[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5 - 16, *a6);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::ElementwiseAdd,mlir::ShapedType,mlir::Value &,mlir::anec::GOC &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.add", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.add";
    v19[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::ElementwiseAdd::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5 - 16);
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseAdd,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::anec::ElementwiseAdd &,mlir::mps::ConstantOp &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, uint64_t *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    v21[2] = (uint64_t)"anec.gain_offset_control";
    v21[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, *a3, *a4 - 16, *a5 - 16, *a6);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::~ANEC_ConvFilterGOC(mlir::anec::_anonymous_namespace_::ANEC_ConvFilterGOC *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_ConvFilterGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v71[4] = *MEMORY[0x263EF8340];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v69 = v71;
  v71[0] = a2;
  uint64_t v70 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id) {
    size_t v6 = a2;
  }
  else {
    size_t v6 = 0;
  }
  uint64_t v56 = v6;
  uint64_t v59 = v6;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v56, 0);
  v67[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v56, 1u) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v67);
  if (!DefiningOp)
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_95;
    }
    unint64_t v17 = v56;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_72:
      uint64_t v16 = v18;
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    BOOL v9 = (void *)DefiningOp;
  }
  else {
    BOOL v9 = 0;
  }
  v67[0] = v9;
  if (v9)
  {
    uint64_t v58 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 0);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 1u);
    uint64_t v11 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 2u);
  }
  else
  {
    uint64_t v40 = *((void *)a3 + 2);
    if (!v40) {
      goto LABEL_94;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_94;
    }
    uint64_t v11 = v5;
    uint64_t ODSOperands = v5;
    if (!v41) {
      goto LABEL_94;
    }
  }
  int v12 = v70;
  if (v70 >= HIDWORD(v70))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
    int v12 = v70;
  }
  v69[v12] = v8;
  LODWORD(v70) = v70 + 1;
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v14))
  {
    uint64_t v15 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v15)
    {
LABEL_58:
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, v67);
        goto LABEL_72;
      }
      goto LABEL_94;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v15) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v57 = v15;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v21 = v19;
  if (v19 && (mlir::DenseIntElementsAttr::classof(v19) & 1) != 0)
  {
    uint64_t v60 = v21;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v24 = v22;
    if (v22 && (mlir::DenseIntElementsAttr::classof(v22) & 1) != 0)
    {
      uint64_t v63 = v24;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v26))
      {
        uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v27 = v25;
      if (!v25 || (mlir::anec::PaddingModeAttr::classof(v25) & 1) == 0) {
        uint64_t v27 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v61 = v27;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v29))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        IntegerCFNumberType Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL);
      }
      uint64_t v62 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v31 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v32))
      {
        uint64_t v31 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v31 || *(_UNKNOWN **)(*(void *)v31 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v31 = 0;
      }
      uint64_t v64 = v31;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v33 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v34))
      {
        uint64_t v33 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v35 = v33;
      if (v33)
      {
        if (mlir::DenseFPElementsAttr::classof(v33)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v65 = v36;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v42 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v43))
      {
        uint64_t v42 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v44 = v42;
      if (v42 && !mlir::DenseIntElementsAttr::classof(v42)) {
        uint64_t v44 = 0;
      }
      uint64_t v66 = v44;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      v67[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)v67))
      {
        v67[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)v67)
          && (uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0),
              uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v49 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
          BOOL v50 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v49, 0);
          Owner = (mlir::Operation *)mlir::detail::OpResultImpl::getOwner(v50);
          {
            {
              if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
                                + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              {
LABEL_89:
                if (v36)
                {
                }
                else
                {
                  if (!v44)
                  {
                    uint64_t v55 = *(void **)(v69[1] + 24);
                    v67[0] = *(void **)(*v69 + 24);
                    v67[1] = v55;
                    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v67, (mlir::MLIRContext *)2, 0);
                  }
                }
              }
              else
              {
                uint64_t v52 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
                float v53 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v52, 0);
                while (1)
                {
                  float v53 = (void *)*v53;
                  if (!v53) {
                    break;
                  }
                  if (*(_UNKNOWN **)(*(void *)(v53[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                    goto LABEL_89;
                  }
                }
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (v37 && mlir::RewriterBase::Listener::classof(v37))
    {
      uint64_t v38 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_94:
  uint64_t v16 = 0;
LABEL_95:
  if (v69 != v71) {
    free(v69);
  }
  return v16;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::anec::anonymous namespace'::isKernelScaleGOCCompatible(mlir::Operation *a1, void *a2)
{
  uint64_t v3 = *(void **)(*((void *)a1 + 6) + 16);
  if (!a1 || v3 != &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id)
  {
    if (v3 == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
      char v34 = a1;
    }
    else {
      char v34 = 0;
    }
    v80 = v34;
    uint64_t v78 = a2;
    uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v78);
    if (!result) {
      return result;
    }
    uint64_t v35 = result;
    uint64_t v36 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v35 + 48) + 32))(*(void *)(v35 + 48), v36);
    if (!result) {
      return result;
    }
    uint64_t v37 = (void *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v80) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v37) {
      goto LABEL_45;
    }
    uint64_t v38 = *v37;
    unint64_t v39 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v40 = *(unsigned int *)(v38 + 16);
    if (!v40) {
      goto LABEL_45;
    }
    char v41 = *(void **)(v38 + 8);
    uint64_t v42 = &v41[2 * v40];
    do
    {
      unint64_t v43 = v40 >> 1;
      uint64_t v44 = &v41[2 * (v40 >> 1)];
      unint64_t v46 = *v44;
      uint64_t v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39) {
        char v41 = v45;
      }
      else {
        unint64_t v40 = v43;
      }
    }
    while (v40);
    if (v41 != v42 && *v41 == v39) {
      uint64_t v47 = v41[1];
    }
    else {
LABEL_45:
    }
      uint64_t v47 = 0;
    uint64_t v78 = v37;
    uint64_t v79 = v47;
    uint64_t v48 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v80) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v48) {
      goto LABEL_55;
    }
    uint64_t v49 = *v48;
    unint64_t v50 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v51 = *(unsigned int *)(v49 + 16);
    if (!v51) {
      goto LABEL_55;
    }
    uint64_t v52 = *(void **)(v49 + 8);
    float v53 = &v52[2 * v51];
    do
    {
      unint64_t v54 = v51 >> 1;
      uint64_t v55 = &v52[2 * (v51 >> 1)];
      unint64_t v57 = *v55;
      uint64_t v56 = v55 + 2;
      v51 += ~(v51 >> 1);
      if (v57 < v50) {
        uint64_t v52 = v56;
      }
      else {
        unint64_t v51 = v54;
      }
    }
    while (v51);
    if (v52 != v53 && *v52 == v50) {
      uint64_t v58 = v52[1];
    }
    else {
LABEL_55:
    }
      uint64_t v58 = 0;
    long long v76 = v48;
    uint64_t v77 = v58;
    uint64_t v59 = (mlir::Operation *)(a2[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v59) {
      goto LABEL_65;
    }
    uint64_t v60 = *(void *)v59;
    unint64_t v61 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v62 = *(unsigned int *)(v60 + 16);
    if (!v62) {
      goto LABEL_65;
    }
    uint64_t v63 = *(void **)(v60 + 8);
    uint64_t v64 = &v63[2 * v62];
    do
    {
      unint64_t v65 = v62 >> 1;
      uint64_t v66 = &v63[2 * (v62 >> 1)];
      unint64_t v68 = *v66;
      float v67 = v66 + 2;
      v62 += ~(v62 >> 1);
      if (v68 < v61) {
        uint64_t v63 = v67;
      }
      else {
        unint64_t v62 = v65;
      }
    }
    while (v62);
    if (v63 != v64 && *v63 == v61) {
      uint64_t v69 = (mlir::Operation *)v63[1];
    }
    else {
LABEL_65:
    }
      uint64_t v69 = 0;
    v75[0] = v59;
    v75[1] = v69;
    Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v75);
    uint64_t NumElements = mlir::ShapedType::getNumElements(Shape, v71);
    unsigned int Groups = mlir::anec::Convolution::getGroups(&v80);
    if (*(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v78) == Groups)
    {
      BOOL v73 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v78) + 8) != 1;
      if (NumElements != 1)
      {
LABEL_68:
        if (*(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v76) + 8) == NumElements)
        {
          mlir::ShapedType::getShape((mlir::ShapedType *)v75);
          if (v74 == 4)
          {
            uint64_t v33 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v75) + 8 * v73);
            return v33 == NumElements;
          }
        }
        return 0;
      }
    }
    else
    {
      BOOL v73 = 1;
      if (NumElements != 1) {
        goto LABEL_68;
      }
    }
    return 1;
  }
  v75[0] = a1;
  uint64_t v78 = a2;
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v78);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 48) + 32))(*(void *)(v5 + 48), v6);
    if (result)
    {
      if (*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)v75) + 8) >= 8uLL) {
        mlir::TypeID::get<mlir::ShapedType>();
      }
      unsigned int v7 = (void *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v75) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v7) {
        goto LABEL_16;
      }
      uint64_t v8 = *v7;
      unint64_t v9 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v10 = *(unsigned int *)(v8 + 16);
      if (!v10) {
        goto LABEL_16;
      }
      uint64_t v11 = *(void **)(v8 + 8);
      int v12 = &v11[2 * v10];
      do
      {
        unint64_t v13 = v10 >> 1;
        char v14 = &v11[2 * (v10 >> 1)];
        unint64_t v16 = *v14;
        uint64_t v15 = v14 + 2;
        v10 += ~(v10 >> 1);
        if (v16 < v9) {
          uint64_t v11 = v15;
        }
        else {
          unint64_t v10 = v13;
        }
      }
      while (v10);
      if (v11 != v12 && *v11 == v9) {
        uint64_t v17 = v11[1];
      }
      else {
LABEL_16:
      }
        uint64_t v17 = 0;
      uint64_t v78 = v7;
      uint64_t v79 = v17;
      uint64_t v18 = (void *)(a2[1] & 0xFFFFFFFFFFFFFFF8);
      if (!v18) {
        goto LABEL_26;
      }
      uint64_t v19 = *v18;
      unint64_t v20 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v21 = *(unsigned int *)(v19 + 16);
      if (!v21) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void **)(v19 + 8);
      char v23 = &v22[2 * v21];
      do
      {
        unint64_t v24 = v21 >> 1;
        uint64_t v25 = &v22[2 * (v21 >> 1)];
        unint64_t v27 = *v25;
        char v26 = v25 + 2;
        v21 += ~(v21 >> 1);
        if (v27 < v20) {
          uint64_t v22 = v26;
        }
        else {
          unint64_t v21 = v24;
        }
      }
      while (v21);
      if (v22 != v23 && *v22 == v20) {
        uint64_t v28 = v22[1];
      }
      else {
LABEL_26:
      }
        uint64_t v28 = 0;
      long long v76 = v18;
      uint64_t v77 = v28;
      char v29 = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)&v76);
      uint64_t NumElements = mlir::ShapedType::getNumElements(v29, v30);
      mlir::anec::Convolution::getGroups(v75);
      if (NumElements != 1)
      {
        if (*(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&v78) + 8) == NumElements)
        {
          mlir::ShapedType::getShape((mlir::ShapedType *)&v76);
          if (v32 == 4)
          {
            uint64_t v33 = *(void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v76);
            return v33 == NumElements;
          }
        }
        return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

BOOL mlir::anec::anonymous namespace'::checkConstantPred<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(double)#1}>(void *a1)
{
  v31[6] = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  char v26 = (uint64_t **)&v27;
  uint64_t ArgOperands = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v26, DefiningOp)) {
    return 0;
  }
  uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
  uint64_t v30 = v2;
  uint64_t v3 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                + 136);
  BOOL v12 = v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v3 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (v12
    || (v3 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      ? (BOOL v19 = v3 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      : (BOOL v19 = 1),
        v19))
  {
    uint64_t ArgOperands = v31;
    uint64_t v30 = 0xC00000000;
    mlir::getIntValues<float>(v27, v28, (uint64_t)&ArgOperands, 0);
    unint64_t v13 = ArgOperands;
    if (v30)
    {
      uint64_t v14 = 4 * v30 - 4;
      uint64_t v15 = (float *)ArgOperands;
      do
      {
        float v16 = *v15++;
        BOOL v17 = v16 == 0.0;
        BOOL v18 = v16 != 0.0 || v14 == 0;
        v14 -= 4;
      }
      while (!v18);
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
    uint64_t v30 = v20;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      return 0;
    uint64_t ArgOperands = v31;
    uint64_t v30 = 0xC00000000;
    mlir::getIntValues<float>(v27, v28, (uint64_t)&ArgOperands, 0);
    unint64_t v13 = ArgOperands;
    if (v30)
    {
      uint64_t v21 = 4 * v30 - 4;
      uint64_t v22 = (float *)ArgOperands;
      do
      {
        float v23 = *v22++;
        BOOL v17 = v23 == 0.0;
        BOOL v24 = v23 != 0.0 || v21 == 0;
        v21 -= 4;
      }
      while (!v24);
      goto LABEL_55;
    }
  }
  BOOL v17 = 1;
LABEL_55:
  if (v13 != v31) {
    free(v13);
  }
  return v17;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Convolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::UnitAttr &,mlir::DenseFPElementsAttr &,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  v31[38] = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v21 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.convolution", (const unsigned __int8 *)0x10, Context);
  if (!v22)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"anec.convolution";
    v29[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v21);
  mlir::anec::Convolution::build(a1, (uint64_t)v31, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  float v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id) {
    BOOL v24 = v23;
  }
  else {
    BOOL v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v24;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.gain_offset_control";
    v19[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v11);
  mlir::ValueRange::ValueRange(v22, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::ValueRange::ValueRange(v21, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, v22[0], v22[1], v21[0], v21[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  unint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v14;
}

uint64_t *llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::operator llvm::SmallVector<mlir::Value,4u><llvm::SmallVector<mlir::Value,4u>,void>@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *result;
  unint64_t v3 = result[1];
  *a2 = a2 + 2;
  a2[1] = 0x400000000;
  if (v3 < 5)
  {
    if (!v3)
    {
      int v8 = 0;
      goto LABEL_9;
    }
    uint64_t v5 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, a2 + 2, v3, 8);
    uint64_t v5 = *((unsigned int *)a2 + 2);
  }
  uint64_t v6 = 0;
  uint64_t v7 = *a2 + 8 * v5;
  do
  {
    uint64_t result = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v6);
    *(void *)(v7 + 8 * v6++) = result;
  }
  while (v3 != v6);
  int v8 = *((_DWORD *)a2 + 2);
LABEL_9:
  *((_DWORD *)a2 + 2) = v8 + v3;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::GOC &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::GOC type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, w_out' failed to satisfy constraint: ''");
}

uint64_t mlir::matchPattern<mlir::detail::constant_op_matcher>(uint64_t a1)
{
  uint64_t v4 = a1;
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v4);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 48) + 32))(*(void *)(v2 + 48), v3);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, w_scale' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::~ANEC_ConvFilterMult(mlir::anec::_anonymous_namespace_::ANEC_ConvFilterMult *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_ConvFilterMult *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v70[4] = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  unint64_t v68 = v70;
  v70[0] = a2;
  uint64_t v69 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  uint64_t v58 = v6;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 0);
  v66[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 1u) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v66);
  if (!DefiningOp)
  {
    uint64_t v15 = *((void *)a3 + 2);
    if (!v15) {
      goto LABEL_94;
    }
    uint64_t v16 = v55;
    if (mlir::RewriterBase::Listener::classof(v15))
    {
LABEL_72:
      uint64_t v15 = v17;
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    unint64_t v9 = (void *)DefiningOp;
  }
  else {
    unint64_t v9 = 0;
  }
  v66[0] = v9;
  if (v9)
  {
    unint64_t v57 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v66, 0);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v66, 1u);
  }
  else
  {
    uint64_t v39 = *((void *)a3 + 2);
    if (!v39) {
      goto LABEL_93;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_93;
    }
    uint64_t ODSOperands = v5;
    if (!v40) {
      goto LABEL_93;
    }
  }
  int v11 = v69;
  if (v69 >= HIDWORD(v69))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
    int v11 = v69;
  }
  v68[v11] = v8;
  LODWORD(v69) = v69 + 1;
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v13))
  {
    uint64_t v14 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v14 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v14)
    {
LABEL_58:
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v36 + 64))(v36, v37, v38, v66);
        goto LABEL_72;
      }
      goto LABEL_93;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v14) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v56 = v14;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v18 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v19)) {
    uint64_t v18 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v20 = v18;
  if (v18 && (mlir::DenseIntElementsAttr::classof(v18) & 1) != 0)
  {
    uint64_t v59 = v20;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v21 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v22)) {
      uint64_t v21 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v23 = v21;
    if (v21 && (mlir::DenseIntElementsAttr::classof(v21) & 1) != 0)
    {
      uint64_t v63 = v23;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v24 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v25))
      {
        uint64_t v24 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v26 = v24;
      if (!v24 || (mlir::anec::PaddingModeAttr::classof(v24) & 1) == 0) {
        uint64_t v26 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v62 = v26;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v28))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        IntegerCFNumberType Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL);
      }
      uint64_t v61 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v30 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v31))
      {
        uint64_t v30 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v30 || *(_UNKNOWN **)(*(void *)v30 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v30 = 0;
      }
      uint64_t v60 = v30;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v32 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v33))
      {
        uint64_t v32 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v34 = v32;
      if (v32)
      {
        if (mlir::DenseFPElementsAttr::classof(v32)) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v64 = v35;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v41 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v42))
      {
        uint64_t v41 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v43 = v41;
      if (v41 && !mlir::DenseIntElementsAttr::classof(v41)) {
        uint64_t v43 = 0;
      }
      uint64_t v65 = v43;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      v66[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)v66))
      {
        v66[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)v66)
          && (uint64_t v46 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v57, 0),
              uint64_t v47 = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v48 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
          uint64_t v49 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v48, 0);
          Owner = (mlir::Operation *)mlir::detail::OpResultImpl::getOwner(v49);
          {
            if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                           + 8) & 0xFFFFFFFFFFFFFFF8))
                              + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
            {
LABEL_88:
              if (v35)
              {
              }
              else
              {
                if (!v43)
                {
                  unint64_t v54 = *(void **)(v68[1] + 24);
                  v66[0] = *(void **)(*v68 + 24);
                  v66[1] = v54;
                  mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v66, (mlir::MLIRContext *)2, 0);
                }
              }
            }
            else
            {
              uint64_t v51 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
              uint64_t v52 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0);
              while (1)
              {
                uint64_t v52 = (void *)*v52;
                if (!v52) {
                  break;
                }
                if (*(_UNKNOWN **)(*(void *)(v52[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                  goto LABEL_88;
                }
              }
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v36 = *((void *)a3 + 2);
    if (v36 && mlir::RewriterBase::Listener::classof(v36))
    {
      uint64_t v37 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_93:
  uint64_t v15 = 0;
LABEL_94:
  if (v68 != v70) {
    free(v68);
  }
  return v15;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::reshapeConstantToGOCScale(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v31 = 0;
  uint64_t v32 = a2;
  uint64_t v30 = 0;
  v33[0] = (uint64_t **)&v30;
  v35[0] = a2;
  uint64_t result = (char *)mlir::Value::getDefiningOp((mlir::Value *)v35);
  if (result)
  {
    if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v33, (uint64_t)result))
    {
      uint64_t NumElements = (uint64_t **)mlir::ElementsAttr::getNumElements(v30, v31);
      uint64_t v5 = (mlir::Float16Type **)(a1 + 8);
      uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v32);
      v35[0] = 1;
      v35[1] = (uint64_t)NumElements;
      int64x2_t v26 = vdupq_n_s64(1uLL);
      int64x2_t v36 = v26;
      F16CFNumberType Type = mlir::Builder::getF16Type(v5, v7);
      uint64_t v29 = mlir::MemRefType::get(v35, (mlir::AffineMap *)4, F16Type, 0, 0, 0);
      uint64_t v9 = v30;
      uint64_t v10 = v31;
      v33[0] = (uint64_t **)1;
      v33[1] = NumElements;
      int64x2_t v34 = v26;
      v27[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v30);
      v27[1] = v11;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v27);
      char v13 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v33, 4, OperandRange, 0);
      uint64_t v14 = (uint64_t)v13;
      if (!v13) {
        goto LABEL_12;
      }
      uint64_t v15 = *v13;
      unint64_t v16 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v17 = *(unsigned int *)(v15 + 16);
      if (!v17) {
        goto LABEL_12;
      }
      uint64_t v18 = *(void **)(v15 + 8);
      char v19 = &v18[2 * v17];
      do
      {
        unint64_t v20 = v17 >> 1;
        uint64_t v21 = &v18[2 * (v17 >> 1)];
        unint64_t v23 = *v21;
        char v22 = v21 + 2;
        v17 += ~(v17 >> 1);
        if (v23 < v16) {
          uint64_t v18 = v22;
        }
        else {
          unint64_t v17 = v20;
        }
      }
      while (v17);
      if (v18 != v19 && *v18 == v16) {
        uint64_t v24 = v18[1];
      }
      else {
LABEL_12:
      }
        uint64_t v24 = 0;
      v28[0] = mlir::reshapeElementsAttr(v9, v10, v14, v24);
      v28[1] = v25;
      return (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v5, Loc, &v29, v28)- 16;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::ElementwiseMult &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::ElementwiseMult type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, w_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, w_scale' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::~ANEC_ConvInputGOC(mlir::anec::_anonymous_namespace_::ANEC_ConvInputGOC *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_ConvInputGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v72[4] = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v57 = 0;
  uint64_t v70 = v72;
  v72[0] = a2;
  uint64_t v71 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Convolution,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  uint64_t v56 = v6;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_97;
    }
    unint64_t v17 = v55;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_72:
      uint64_t v16 = v18;
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  ElementTypeOrSelf = v9;
  if (v9)
  {
    unint64_t v57 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
    uint64_t v11 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 1u);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 2u);
  }
  else
  {
    uint64_t v40 = *((void *)a3 + 2);
    if (!v40) {
      goto LABEL_96;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_96;
    }
    uint64_t ODSOperands = v5;
    uint64_t v11 = v5;
    if (!v41) {
      goto LABEL_96;
    }
  }
  int v12 = v71;
  if (v71 >= HIDWORD(v71))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v71 + 1, 8);
    int v12 = v71;
  }
  v70[v12] = v8;
  LODWORD(v71) = v71 + 1;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 1u);
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v14))
  {
    uint64_t v15 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v15)
    {
LABEL_58:
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, &ElementTypeOrSelf);
        goto LABEL_72;
      }
      goto LABEL_96;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v15) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v58 = v15;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v21 = v19;
  if (v19 && (mlir::DenseIntElementsAttr::classof(v19) & 1) != 0)
  {
    uint64_t v59 = v21;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v24 = v22;
    if (v22 && (mlir::DenseIntElementsAttr::classof(v22) & 1) != 0)
    {
      uint64_t v62 = v24;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v26))
      {
        uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v27 = v25;
      if (!v25 || (mlir::anec::PaddingModeAttr::classof(v25) & 1) == 0) {
        uint64_t v27 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v60 = v27;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v29))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        IntegerCFNumberType Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL);
      }
      uint64_t v61 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v31 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v32))
      {
        uint64_t v31 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v31 || *(_UNKNOWN **)(*(void *)v31 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v31 = 0;
      }
      uint64_t v63 = v31;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v33 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v34))
      {
        uint64_t v33 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v35 = v33;
      if (v33)
      {
        if (mlir::DenseFPElementsAttr::classof(v33)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v64 = v36;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v42 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v43))
      {
        uint64_t v42 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v44 = v42;
      if (v42 && !mlir::DenseIntElementsAttr::classof(v42)) {
        uint64_t v44 = 0;
      }
      uint64_t v65 = v44;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)
          && (uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v57, 0),
              uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v49 = *(void *)(v11 + 24);
          ElementTypeOrSelf = 0;
          uint64_t v67 = 0;
          p_ElementTypeOrSelf = &ElementTypeOrSelf;
          uint64_t v69 = v49;
          uint64_t v50 = mlir::Value::getDefiningOp((mlir::Value *)&v69);
          if (v50
            && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&p_ElementTypeOrSelf, v50)
            && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ElementTypeOrSelf) & 1) != 0)
          {
            {
              if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
                                + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              {
LABEL_91:
                if (v36)
                {
                }
                else
                {
                  if (!v44)
                  {
                    uint64_t v54 = *(void *)(v70[1] + 24);
                    ElementTypeOrSelf = *(void **)(*v70 + 24);
                    uint64_t v67 = v54;
                    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)2, 0);
                  }
                }
              }
              else
              {
                uint64_t v51 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
                uint64_t v52 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0);
                while (1)
                {
                  uint64_t v52 = (void *)*v52;
                  if (!v52) {
                    break;
                  }
                  if (*(_UNKNOWN **)(*(void *)(v52[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                    goto LABEL_91;
                  }
                }
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (v37 && mlir::RewriterBase::Listener::classof(v37))
    {
      uint64_t v38 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_96:
  uint64_t v16 = 0;
LABEL_97:
  if (v70 != v72) {
    free(v70);
  }
  return v16;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::reduceSplatConst(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  v53[5] = *MEMORY[0x263EF8340];
  uint64_t v50 = a2;
  uint64_t v4 = (uint64_t *)(*((void *)a2 + 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *v4;
  unint64_t v6 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v7 = *(unsigned int *)(v5 + 16);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void **)(v5 + 8);
  uint64_t v9 = &v8[2 * v7];
  do
  {
    unint64_t v10 = v7 >> 1;
    uint64_t v11 = &v8[2 * (v7 >> 1)];
    unint64_t v13 = *v11;
    int v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6) {
      uint64_t v8 = v12;
    }
    else {
      unint64_t v7 = v10;
    }
  }
  while (v7);
  if (v8 != v9 && *v8 == v6) {
    uint64_t v14 = v8[1];
  }
  else {
LABEL_10:
  }
    uint64_t v14 = 0;
  v49[0] = v4;
  v49[1] = v14;
  Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v49);
  if (mlir::ShapedType::getNumElements(Shape, v16) != 1)
  {
    v48[0] = 0;
    v48[1] = 0;
    v47[0] = (uint64_t **)v48;
    long long __b = v2;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__b);
    if (DefiningOp) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v47, DefiningOp);
    }
    mlir::ElementsAttr::value_begin<mlir::TypedAttr,void>((mlir::CallOpInterface *)v48, (uint64_t)&__b);
    if (BYTE1(__b)) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v53[0];
    }
    if ((_BYTE)__b) {
      uint64_t v19 = *(void *)(v52 + 8 * v18);
    }
    else {
      uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v52 + 24))();
    }
    char v20 = (uint64_t **)((uint64_t (*)(uint64_t))v53[1])(v19);
    uint64_t v22 = v21;
    if (!(_BYTE)__b)
    {
      uint64_t v23 = v52;
      uint64_t v52 = 0;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
    v47[0] = v20;
    v47[1] = v22;
    mlir::ShapedType::getShape((mlir::ShapedType *)v49);
    unint64_t v25 = v24;
    long long __b = v53;
    HIDWORD(v52) = 5;
    if (v24 < 6)
    {
      if (v24) {
        memset_pattern16(v53, &unk_211ED5510, 8 * v24);
      }
      char v26 = v53;
    }
    else
    {
      LODWORD(v52) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v53, v24, 8);
      char v26 = (uint64_t *)__b;
      memset_pattern16(__b, &unk_211ED5510, 8 * v25);
    }
    LODWORD(v52) = v25;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v49);
    uint64_t v46 = mlir::MemRefType::get(v26, (mlir::AffineMap *)v25, OperandRange, 0, 0, 0);
    char v28 = __b;
    uint64_t v29 = v52;
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v47);
    uint64_t v31 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v28, v29, canMapOperands, 0);
    char v32 = (mlir::OpBuilder *)(a1 + 8);
    uint64_t v33 = *(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v50) + 24);
    if (!v31) {
      goto LABEL_37;
    }
    uint64_t v34 = *v31;
    unint64_t v35 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v36 = *(unsigned int *)(v34 + 16);
    if (!v36) {
      goto LABEL_37;
    }
    uint64_t v37 = *(void **)(v34 + 8);
    uint64_t v38 = &v37[2 * v36];
    do
    {
      unint64_t v39 = v36 >> 1;
      uint64_t v40 = &v37[2 * (v36 >> 1)];
      unint64_t v42 = *v40;
      char v41 = v40 + 2;
      v36 += ~(v36 >> 1);
      if (v42 < v35) {
        uint64_t v37 = v41;
      }
      else {
        unint64_t v36 = v39;
      }
    }
    while (v36);
    if (v37 != v38 && *v37 == v35) {
      uint64_t v43 = v37[1];
    }
    else {
LABEL_37:
    }
      uint64_t v43 = 0;
    uint64_t v45 = (uint64_t *)mlir::DenseElementsAttr::get((uint64_t)v31, v43, (uint64_t *)v47, 1uLL);
    uint64_t v2 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>(v32, v33, &v46, &v45)- 16;
    if (__b != v53) {
      free(__b);
    }
  }
  return v2;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_2(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::GOC &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::GOC type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.convolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, x_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_scale' failed to satisfy constraint: 'splat constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_ConvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

uint64_t mlir::ElementsAttr::value_begin<mlir::TypedAttr,void>@<X0>(mlir::CallOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = mlir::ElementsAttr::getValues<mlir::TypedAttr,void>(a1, (uint64_t)v5);
  int v4 = v5[0];
  *(unsigned char *)a2 = v5[0];
  *(unsigned char *)(a2 + 1) = v5[1];
  if (v4) {
    *(void *)(a2 + 8) = v6;
  }
  else {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  *(_OWORD *)(a2 + 16) = v7;
  if (!v8)
  {
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v5[0])
  {
    uint64_t result = v6;
    uint64_t v6 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t mlir::ElementsAttr::getValues<mlir::TypedAttr,void>@<X0>(mlir::CallOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands(a1);
  uint64_t v6 = v5;
  mlir::ElementsAttr::getValues<mlir::Attribute>((uint64_t *)a1, (uint64_t)v11);
  uint64_t result = llvm::map_range<mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>,mlir::TypedAttr (*)(mlir::Attribute)>(v11, (uint64_t)_ZZNK4mlir12ElementsAttr9getValuesINS_9TypedAttrEvEENS_6detail17ElementsAttrRangeIN4llvm15mapped_iteratorINS3_20ElementsAttrIteratorINS_9AttributeEEEPFT_S8_EDTclclsr3stdE7declvalISC_EEdeclL_ZNSt3__17declvalB8nn180100IS9_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEEvENUlS8_E_8__invokeES8_, (uint64_t)v15);
  int v8 = v15[0];
  *(unsigned char *)a2 = v15[0];
  *(unsigned char *)(a2 + 1) = v15[1];
  if (v8) {
    *(void *)(a2 + 8) = v16;
  }
  else {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  *(_OWORD *)(a2 + 16) = v17;
  int v9 = v18;
  *(unsigned char *)(a2 + 32) = v18;
  *(unsigned char *)(a2 + 33) = v19;
  if (v9)
  {
    *(_OWORD *)(a2 + 40) = *(_OWORD *)v20;
    *(void *)(a2 + 56) = *(void *)&v20[16];
    *(void *)(a2 + 64) = ArgOperands;
    *(void *)(a2 + 72) = v6;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v20 + 16))(*(void *)v20);
    int v10 = v18;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)&v20[8];
    *(void *)(a2 + 64) = ArgOperands;
    *(void *)(a2 + 72) = v6;
    if (!v10)
    {
      uint64_t result = *(void *)v20;
      *(void *)char v20 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  if (!v15[0])
  {
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v13)
  {
    uint64_t result = v14;
    uint64_t v14 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v11[0])
  {
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t llvm::map_range<mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>,mlir::TypedAttr (*)(mlir::Attribute)>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v19 = *a1;
  char v6 = a1[1];
  char v20 = v6;
  if (v19)
  {
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v21 = *((void *)a1 + 1);
    uint64_t v22 = v7;
    char v8 = 1;
    uint64_t v9 = v21;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 1) + 16))(&v21);
    char v6 = v20;
    uint64_t v7 = *((void *)a1 + 2);
    uint64_t v22 = v7;
    char v8 = 0;
    uint64_t v9 = v21;
    uint64_t v21 = 0;
  }
  char v10 = a1[25];
  char v16 = v10;
  if (a1[24])
  {
    uint64_t v11 = *((void *)a1 + 5);
    uint64_t v17 = *((void *)a1 + 4);
    uint64_t v18 = v11;
    int v12 = 0;
    uint64_t result = v17;
    char v14 = 1;
    uint64_t v15 = v17;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 4) + 16))(&v17);
    char v10 = v16;
    uint64_t v11 = *((void *)a1 + 5);
    uint64_t v18 = v11;
    char v14 = 0;
    uint64_t result = 0;
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    int v12 = 1;
  }
  *(unsigned char *)a3 = v8;
  *(unsigned char *)(a3 + 1) = v6;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = a2;
  *(unsigned char *)(a3 + 32) = v14;
  *(unsigned char *)(a3 + 33) = v10;
  *(void *)(a3 + 40) = v15;
  *(void *)(a3 + 48) = v11;
  *(void *)(a3 + 56) = a2;
  if (v12)
  {
    uint64_t v17 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v19)
  {
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t mlir::ElementsAttr::getValues<mlir::Attribute>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)a1);
  uint64_t v6 = v5;
  mlir::ElementsAttr::value_begin<mlir::Attribute>((mlir::BranchOpInterface *)a1, (uint64_t)v12);
  uint64_t NumElements = mlir::ElementsAttr::getNumElements(*a1, a1[1]);
  __int16 v9 = 257;
  uint64_t v10 = 0;
  uint64_t v11 = NumElements;
  uint64_t result = mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(a2, ArgOperands, v6, v12, (char *)&v9);
  if (!(_BYTE)v9)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  if (!v12[0])
  {
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

uint64_t mlir::ElementsAttr::value_begin<mlir::Attribute>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = mlir::TypeID::get<mlir::Attribute>();
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4);
  if (!v11) {
    mlir::ElementsAttr::value_begin<mlir::Attribute>((llvm *)v9, (uint64_t *)a1);
  }
  char v6 = v9[1];
  if (v9[0])
  {
    uint64_t v7 = v10;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = v10;
  }
  *(unsigned char *)a2 = v8;
  *(unsigned char *)(a2 + 1) = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0;
  return result;
}

uint64_t mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, char *a5)
{
  unsigned __int8 v22 = *a4;
  char v23 = a4[1];
  if (v22) {
    uint64_t v24 = *((void *)a4 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)a4 + 1) + 16))(&v24);
  }
  uint64_t v25 = *((void *)a4 + 2);
  char v19 = *a5;
  char v20 = a5[1];
  if (*a5) {
    v21[0] = *((void *)a5 + 1);
  }
  else {
    (*(void (**)(void *__return_ptr))(**((void **)a5 + 1) + 16))(v21);
  }
  uint64_t v10 = *((void *)a5 + 2);
  v21[1] = v10;
  int v11 = v22;
  uint64_t v12 = v24;
  if (!v22) {
    uint64_t v24 = 0;
  }
  char v13 = v23;
  uint64_t v14 = v21[0];
  if (!v19) {
    v21[0] = 0;
  }
  uint64_t v15 = v25;
  *(unsigned char *)a1 = v22;
  *(unsigned char *)(a1 + 1) = v13;
  if (v11) {
    *(void *)(a1 + 8) = v12;
  }
  else {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  *(void *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 24) = v19;
  *(unsigned char *)(a1 + 25) = v20;
  if (v19)
  {
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = a2;
    *(void *)(a1 + 56) = a3;
    if (v11) {
      goto LABEL_20;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = a2;
    *(void *)(a1 + 56) = a3;
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v11) {
      goto LABEL_20;
    }
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
LABEL_20:
  if (!v19)
  {
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  if (!v22)
  {
    uint64_t v17 = v24;
    uint64_t v24 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  return a1;
}

llvm::raw_ostream *mlir::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  uint64_t v4 = a2;
  mlir::Attribute::print((mlir::Attribute *)&v4, a1);
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, char *__s)
{
  if (!__s) {
    return a1;
  }
  size_t v4 = strlen(__s);
  uint64_t v5 = (void *)*((void *)a1 + 4);
  if (v4 <= *((void *)a1 + 3) - (void)v5)
  {
    if (v4)
    {
      memcpy(v5, __s, v4);
      *((void *)a1 + 4) += v4;
    }
    return a1;
  }

  return llvm::raw_ostream::write(a1, __s, v4);
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, const void *a2, size_t a3)
{
  uint64_t v6 = *((void *)this + 3);
  uint64_t v5 = (void *)*((void *)this + 4);
  if (a3 <= v6 - (uint64_t)v5)
  {
    if (a3)
    {
      memcpy(v5, a2, a3);
      *((void *)this + 4) += a3;
    }
    return this;
  }
  else
  {
    return llvm::raw_ostream::write(this, (const char *)a2, a3);
  }
}

const char *llvm::getTypeName<mlir::Attribute>()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
  unint64_t v6 = 65;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  uint64_t v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

uint64_t mlir::TypeID::get<mlir::Attribute>()
{
  unint64_t v0 = &unk_267771000;
  {
    unint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::Attribute]";
      unint64_t v11 = 65;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::Attribute,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[276];
}

uint64_t *_ZZNK4mlir12ElementsAttr9getValuesINS_9TypedAttrEvEENS_6detail17ElementsAttrRangeIN4llvm15mapped_iteratorINS3_20ElementsAttrIteratorINS_9AttributeEEEPFT_S8_EDTclclsr3stdE7declvalISC_EEdeclL_ZNSt3__17declvalB8nn180100IS9_EEDTclsr3stdE9__declvalISA_ELi0EEEvEEEEEEEEvENUlS8_E_8__invokeES8_(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    unint64_t v3 = mlir::TypeID::get<mlir::TypedAttr>();
    unint64_t v4 = *(unsigned int *)(v2 + 16);
    if (v4)
    {
      uint64_t v5 = *(void **)(v2 + 8);
      do
      {
        unint64_t v6 = v4 >> 1;
        uint64_t v7 = &v5[2 * (v4 >> 1)];
        unint64_t v9 = *v7;
        unint64_t v8 = v7 + 2;
        v4 += ~(v4 >> 1);
        if (v9 < v3) {
          uint64_t v5 = v8;
        }
        else {
          unint64_t v4 = v6;
        }
      }
      while (v4);
    }
  }
  return a1;
}

uint64_t mlir::TypeID::get<mlir::TypedAttr>()
{
  unint64_t v0 = &unk_267771000;
  {
    unint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v11 = 65;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[278];
}

void mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::~ANEC_DeconvFilterGOC(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterGOC *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v71[4] = *MEMORY[0x263EF8340];
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v60 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v69 = v71;
  v71[0] = a2;
  uint64_t v70 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t v56 = v6;
  uint64_t v59 = v6;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v56, 0);
  v67[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v56, 1u) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v67);
  if (!DefiningOp)
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_95;
    }
    uint64_t v17 = v56;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_72:
      uint64_t v16 = v18;
      goto LABEL_95;
    }
    goto LABEL_94;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  v67[0] = v9;
  if (v9)
  {
    uint64_t v58 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 0);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 1u);
    uint64_t v11 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v67, 2u);
  }
  else
  {
    uint64_t v40 = *((void *)a3 + 2);
    if (!v40) {
      goto LABEL_94;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_94;
    }
    uint64_t v11 = v5;
    uint64_t ODSOperands = v5;
    if (!v41) {
      goto LABEL_94;
    }
  }
  int v12 = v70;
  if (v70 >= HIDWORD(v70))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
    int v12 = v70;
  }
  v69[v12] = v8;
  LODWORD(v70) = v70 + 1;
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v14))
  {
    uint64_t v15 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v15)
    {
LABEL_58:
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, v67);
        goto LABEL_72;
      }
      goto LABEL_94;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v15) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v57 = v15;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v21 = v19;
  if (v19 && (mlir::DenseIntElementsAttr::classof(v19) & 1) != 0)
  {
    uint64_t v60 = v21;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v24 = v22;
    if (v22 && (mlir::DenseIntElementsAttr::classof(v22) & 1) != 0)
    {
      uint64_t v63 = v24;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v26))
      {
        uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v27 = v25;
      if (!v25 || (mlir::anec::PaddingModeAttr::classof(v25) & 1) == 0) {
        uint64_t v27 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v61 = v27;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v29))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        IntegerCFNumberType Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL);
      }
      uint64_t v62 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v31 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v32))
      {
        uint64_t v31 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v31 || *(_UNKNOWN **)(*(void *)v31 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v31 = 0;
      }
      uint64_t v64 = v31;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v33 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v34))
      {
        uint64_t v33 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v35 = v33;
      if (v33)
      {
        if (mlir::DenseFPElementsAttr::classof(v33)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v65 = v36;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v42 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v43))
      {
        uint64_t v42 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v44 = v42;
      if (v42 && !mlir::DenseIntElementsAttr::classof(v42)) {
        uint64_t v44 = 0;
      }
      uint64_t v66 = v44;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      v67[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)v67))
      {
        v67[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)v67)
          && (uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0),
              uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v49 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
          uint64_t v50 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v49, 0);
          Owner = (mlir::Operation *)mlir::detail::OpResultImpl::getOwner(v50);
          {
            {
              if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
                                + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              {
LABEL_89:
                if (v36)
                {
                }
                else
                {
                  if (!v44)
                  {
                    uint64_t v55 = *(void **)(v69[1] + 24);
                    v67[0] = *(void **)(*v69 + 24);
                    v67[1] = v55;
                    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v67, (mlir::MLIRContext *)2, 0);
                  }
                }
              }
              else
              {
                uint64_t v52 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v59, 0);
                float v53 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v52, 0);
                while (1)
                {
                  float v53 = (void *)*v53;
                  if (!v53) {
                    break;
                  }
                  if (*(_UNKNOWN **)(*(void *)(v53[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                    goto LABEL_89;
                  }
                }
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (v37 && mlir::RewriterBase::Listener::classof(v37))
    {
      uint64_t v38 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_94:
  uint64_t v16 = 0;
LABEL_95:
  if (v69 != v71) {
    free(v69);
  }
  return v16;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::Value &,mlir::Value &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::UnitAttr &,mlir::DenseFPElementsAttr &,mlir::DenseIntElementsAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  v31[38] = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v21 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.deconvolution", (const unsigned __int8 *)0x12, Context);
  if (!v22)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"anec.deconvolution";
    v29[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v21);
  mlir::anec::Deconvolution::build(a1, (uint64_t)v31, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  char v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v24;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, w_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, w_scale' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::~ANEC_DeconvFilterMult(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterMult *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_DeconvFilterMult *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v70[4] = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v68 = v70;
  v70[0] = a2;
  uint64_t v69 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  uint64_t v58 = v6;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 0);
  v66[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 1u) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v66);
  if (!DefiningOp)
  {
    uint64_t v15 = *((void *)a3 + 2);
    if (!v15) {
      goto LABEL_94;
    }
    uint64_t v16 = v55;
    if (mlir::RewriterBase::Listener::classof(v15))
    {
LABEL_72:
      uint64_t v15 = v17;
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  v66[0] = v9;
  if (v9)
  {
    uint64_t v57 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v66, 0);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v66, 1u);
  }
  else
  {
    uint64_t v39 = *((void *)a3 + 2);
    if (!v39) {
      goto LABEL_93;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_93;
    }
    uint64_t ODSOperands = v5;
    if (!v40) {
      goto LABEL_93;
    }
  }
  int v11 = v69;
  if (v69 >= HIDWORD(v69))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v69 + 1, 8);
    int v11 = v69;
  }
  v68[v11] = v8;
  LODWORD(v69) = v69 + 1;
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v13))
  {
    uint64_t v14 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v14 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v14)
    {
LABEL_58:
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v36 + 64))(v36, v37, v38, v66);
        goto LABEL_72;
      }
      goto LABEL_93;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v14) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v56 = v14;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v18 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v19)) {
    uint64_t v18 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v20 = v18;
  if (v18 && (mlir::DenseIntElementsAttr::classof(v18) & 1) != 0)
  {
    uint64_t v59 = v20;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v21 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v22)) {
      uint64_t v21 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v23 = v21;
    if (v21 && (mlir::DenseIntElementsAttr::classof(v21) & 1) != 0)
    {
      uint64_t v63 = v23;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v24 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v25))
      {
        uint64_t v24 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v26 = v24;
      if (!v24 || (mlir::anec::PaddingModeAttr::classof(v24) & 1) == 0) {
        uint64_t v26 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v62 = v26;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v28))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        IntegerCFNumberType Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL);
      }
      uint64_t v61 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v30 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v31))
      {
        uint64_t v30 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v30 || *(_UNKNOWN **)(*(void *)v30 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v30 = 0;
      }
      uint64_t v60 = v30;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v32 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v33))
      {
        uint64_t v32 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v34 = v32;
      if (v32)
      {
        if (mlir::DenseFPElementsAttr::classof(v32)) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v64 = v35;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v41 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v42))
      {
        uint64_t v41 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v43 = v41;
      if (v41 && !mlir::DenseIntElementsAttr::classof(v41)) {
        uint64_t v43 = 0;
      }
      uint64_t v65 = v43;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      v66[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)v66))
      {
        v66[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)v66)
          && (uint64_t v46 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v57, 0),
              uint64_t v47 = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v47 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v48 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
          uint64_t v49 = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset(v48, 0);
          Owner = (mlir::Operation *)mlir::detail::OpResultImpl::getOwner(v49);
          {
            if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                           + 8) & 0xFFFFFFFFFFFFFFF8))
                              + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
            {
LABEL_88:
              if (v35)
              {
              }
              else
              {
                if (!v43)
                {
                  uint64_t v54 = *(void **)(v68[1] + 24);
                  v66[0] = *(void **)(*v68 + 24);
                  v66[1] = v54;
                  mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v66, (mlir::MLIRContext *)2, 0);
                }
              }
            }
            else
            {
              uint64_t v51 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
              uint64_t v52 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0);
              while (1)
              {
                uint64_t v52 = (void *)*v52;
                if (!v52) {
                  break;
                }
                if (*(_UNKNOWN **)(*(void *)(v52[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                  goto LABEL_88;
                }
              }
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v36 = *((void *)a3 + 2);
      if (v36 && mlir::RewriterBase::Listener::classof(v36))
      {
        uint64_t v37 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v36 = *((void *)a3 + 2);
    if (v36 && mlir::RewriterBase::Listener::classof(v36))
    {
      uint64_t v37 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_93:
  uint64_t v15 = 0;
LABEL_94:
  if (v68 != v70) {
    free(v68);
  }
  return v15;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, w_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, w_scale' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'w, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvFilterMult::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::~ANEC_DeconvInputGOC(mlir::anec::_anonymous_namespace_::ANEC_DeconvInputGOC *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_DeconvInputGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v72[4] = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v57 = 0;
  uint64_t v70 = v72;
  v72[0] = a2;
  uint64_t v71 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  uint64_t v56 = v6;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v16 = *((void *)a3 + 2);
    if (!v16) {
      goto LABEL_97;
    }
    uint64_t v17 = v55;
    if (mlir::RewriterBase::Listener::classof(v16))
    {
LABEL_72:
      uint64_t v16 = v18;
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v9 = (void *)DefiningOp;
  }
  else {
    uint64_t v9 = 0;
  }
  ElementTypeOrSelf = v9;
  if (v9)
  {
    uint64_t v57 = v9;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
    uint64_t v11 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 1u);
    uint64_t v5 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 2u);
  }
  else
  {
    uint64_t v40 = *((void *)a3 + 2);
    if (!v40) {
      goto LABEL_96;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_96;
    }
    uint64_t ODSOperands = v5;
    uint64_t v11 = v5;
    if (!v41) {
      goto LABEL_96;
    }
  }
  int v12 = v71;
  if (v71 >= HIDWORD(v71))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v71 + 1, 8);
    int v12 = v71;
  }
  v70[v12] = v8;
  LODWORD(v71) = v71 + 1;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v55, 1u);
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), v14))
  {
    uint64_t v15 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
    if (!v15)
    {
LABEL_58:
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
LABEL_71:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, &ElementTypeOrSelf);
        goto LABEL_72;
      }
      goto LABEL_96;
    }
  }
  if ((mlir::DenseIntElementsAttr::classof(v15) & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v58 = v15;
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  uint64_t v21 = v19;
  if (v19 && (mlir::DenseIntElementsAttr::classof(v19) & 1) != 0)
  {
    uint64_t v59 = v21;
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
    }
    uint64_t v24 = v22;
    if (v22 && (mlir::DenseIntElementsAttr::classof(v22) & 1) != 0)
    {
      uint64_t v62 = v24;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v26))
      {
        uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
      }
      uint64_t v27 = v25;
      if (!v25 || (mlir::anec::PaddingModeAttr::classof(v25) & 1) == 0) {
        uint64_t v27 = mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
      }
      uint64_t v60 = v27;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v29))
      {
        uint64_t IntegerAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
      }
      if (!IntegerAttr
        || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      {
        IntegerCFNumberType Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
        uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL);
      }
      uint64_t v61 = IntegerAttr;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v31 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v32))
      {
        uint64_t v31 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
      }
      if (!v31 || *(_UNKNOWN **)(*(void *)v31 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id) {
        uint64_t v31 = 0;
      }
      uint64_t v63 = v31;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v33 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v34))
      {
        uint64_t v33 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
      }
      uint64_t v35 = v33;
      if (v33)
      {
        if (mlir::DenseFPElementsAttr::classof(v33)) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t v64 = v36;
      if (!*((unsigned char *)a2 + 47)
        || (uint64_t v42 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v43))
      {
        uint64_t v42 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
      }
      uint64_t v44 = v42;
      if (v42 && !mlir::DenseIntElementsAttr::classof(v42)) {
        uint64_t v44 = 0;
      }
      uint64_t v65 = v44;
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)
          && (uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v57, 0),
              uint64_t v48 = mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0),
              *(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v48 + 8) & 0xFFFFFFFFFFFFFFF8))
                           + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id))
        {
        }
        else
        {
          uint64_t v49 = *(void *)(v11 + 24);
          ElementTypeOrSelf = 0;
          uint64_t v67 = 0;
          p_ElementTypeOrSelf = &ElementTypeOrSelf;
          uint64_t v69 = v49;
          uint64_t v50 = mlir::Value::getDefiningOp((mlir::Value *)&v69);
          if (v50
            && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&p_ElementTypeOrSelf, v50)
            && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ElementTypeOrSelf) & 1) != 0)
          {
            {
              if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
                                + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
              {
LABEL_91:
                if (v36)
                {
                }
                else
                {
                  if (!v44)
                  {
                    uint64_t v54 = *(void *)(v70[1] + 24);
                    ElementTypeOrSelf = *(void **)(*v70 + 24);
                    uint64_t v67 = v54;
                    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)2, 0);
                  }
                }
              }
              else
              {
                uint64_t v51 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v56, 0);
                uint64_t v52 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v51, 0);
                while (1)
                {
                  uint64_t v52 = (void *)*v52;
                  if (!v52) {
                    break;
                  }
                  if (*(_UNKNOWN **)(*(void *)(v52[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
                    goto LABEL_91;
                  }
                }
              }
            }
            else
            {
            }
          }
          else
          {
          }
        }
        goto LABEL_72;
      }
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v37 = *((void *)a3 + 2);
      if (v37 && mlir::RewriterBase::Listener::classof(v37))
      {
        uint64_t v38 = *((void *)a2 + 3);
        goto LABEL_71;
      }
    }
  }
  else
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (v37 && mlir::RewriterBase::Listener::classof(v37))
    {
      uint64_t v38 = *((void *)a2 + 3);
      goto LABEL_71;
    }
  }
LABEL_96:
  uint64_t v16 = 0;
LABEL_97:
  if (v70 != v72) {
    free(v70);
  }
  return v16;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, x_out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_scale' failed to satisfy constraint: 'splat constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x_bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_scale' failed to satisfy constraint: 'is nullptr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_DeconvInputGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'kernel_zp' failed to satisfy constraint: 'is nullptr'");
}

void mlir::anec::anonymous namespace'::ANEC_GOCDiv::~ANEC_GOCDiv(mlir::anec::_anonymous_namespace_::ANEC_GOCDiv *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCDiv *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v85[4] = *MEMORY[0x263EF8340];
  uint64_t v77 = 0;
  uint64_t v75 = 0;
  v83 = v85;
  v85[0] = a2;
  uint64_t v84 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v74 = v5;
  long long v76 = v5;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v74, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    uint64_t v15 = v74;
    if (!mlir::RewriterBase::Listener::classof(v11)) {
      goto LABEL_81;
    }
    uint64_t v16 = *((void *)v15 + 3);
LABEL_16:
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64))(v11, v16, v17, &ElementTypeOrSelf);
    goto LABEL_17;
  }
  uint64_t v7 = DefiningOp;
  uint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
  if (v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v10 = (void *)DefiningOp;
  }
  else {
    uint64_t v10 = 0;
  }
  ElementTypeOrSelf = v10;
  if (!v9)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v78);
LABEL_17:
      uint64_t v11 = v14;
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  uint64_t v75 = DefiningOp;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 1u);
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 2u);
  int v18 = v84;
  if (v84 >= HIDWORD(v84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
    int v18 = v84;
  }
  v83[v18] = v7;
  LODWORD(v84) = v84 + 1;
  ElementTypeOrSelf = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v74, 1u) + 24);
  uint64_t v19 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v19)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    uint64_t v24 = v74;
    if (!mlir::RewriterBase::Listener::classof(v11)) {
      goto LABEL_81;
    }
    uint64_t v16 = *((void *)v24 + 3);
    goto LABEL_16;
  }
  uint64_t v20 = v19;
  uint64_t v21 = *(void **)(*(void *)(v19 + 48) + 16);
  BOOL v22 = v21 == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id;
  if (v21 == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id) {
    char v23 = (void *)v19;
  }
  else {
    char v23 = 0;
  }
  ElementTypeOrSelf = v23;
  if (!v22)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v20 + 24);
      goto LABEL_12;
    }
    goto LABEL_81;
  }
  uint64_t v77 = v19;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ElementTypeOrSelf, 0);
  if (!*(unsigned char *)(v20 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v20, (uint64_t)"epsilon", 7), !v27)) {
    uint64_t InherentAttr = mlir::DictionaryAttr::get(v20 + 56, "epsilon", 7uLL);
  }
  if (!InherentAttr
    || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_82;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v12 = *(void *)(v20 + 24);
      goto LABEL_12;
    }
    goto LABEL_81;
  }
  uint64_t v73 = ODSOperands;
  int v28 = v84;
  if (v84 >= HIDWORD(v84))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
    int v28 = v84;
  }
  v83[v28] = v20;
  LODWORD(v84) = v84 + 1;
  uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v76, 0);
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
  uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  uint64_t v31 = (uint64_t *)(*(void *)(v30 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v31) {
    goto LABEL_50;
  }
  uint64_t v32 = *v31;
  unint64_t v33 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v34 = *(unsigned int *)(v32 + 16);
  if (!v34) {
    goto LABEL_50;
  }
  uint64_t v35 = *(void **)(v32 + 8);
  uint64_t v36 = &v35[2 * v34];
  do
  {
    unint64_t v37 = v34 >> 1;
    uint64_t v38 = &v35[2 * (v34 >> 1)];
    unint64_t v40 = *v38;
    uint64_t v39 = v38 + 2;
    v34 += ~(v34 >> 1);
    if (v40 < v33) {
      uint64_t v35 = v39;
    }
    else {
      unint64_t v34 = v37;
    }
  }
  while (v34);
  if (v35 != v36 && *v35 == v33) {
    uint64_t v41 = v35[1];
  }
  else {
LABEL_50:
  }
    uint64_t v41 = 0;
  ElementTypeOrSelf = v31;
  uint64_t v80 = v41;
  uint64_t v42 = *(void *)(v30 + 72);
  unint64_t v43 = *(void *)(*(void *)(v42 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v43)
  {
    mlir::TypeID::get<mlir::ShapedType>();
    uint64_t v42 = *(void *)(v30 + 72);
  }
  uint64_t v44 = (uint64_t *)(*(void *)(*(void *)(v42 + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v44) {
    goto LABEL_62;
  }
  uint64_t v45 = *v44;
  unint64_t v46 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v47 = *(unsigned int *)(v45 + 16);
  if (!v47) {
    goto LABEL_62;
  }
  uint64_t v48 = *(void **)(v45 + 8);
  uint64_t v49 = &v48[2 * v47];
  do
  {
    unint64_t v50 = v47 >> 1;
    uint64_t v51 = &v48[2 * (v47 >> 1)];
    unint64_t v53 = *v51;
    uint64_t v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46) {
      uint64_t v48 = v52;
    }
    else {
      unint64_t v47 = v50;
    }
  }
  while (v47);
  if (v48 != v49 && *v48 == v46) {
    uint64_t v54 = (void *)v48[1];
  }
  else {
LABEL_62:
  }
    uint64_t v54 = 0;
  v78[0] = v44;
  v78[1] = v54;
  if (v31 != (uint64_t *)v43
    || (Shape = (uint64_t *)mlir::ShapedType::getShape((mlir::ShapedType *)v78),
        uint64_t NumElements = mlir::ShapedType::getNumElements(Shape, v59),
        NumElements != 1)
    && ((uint64_t v66 = NumElements,
         mlir::ShapedType::getShape((mlir::ShapedType *)&ElementTypeOrSelf),
         unint64_t IndexFromDim = mlir::anec::getIndexFromDim(1, v67),
         !v69)
     || (unint64_t v70 = IndexFromDim, mlir::ShapedType::getShape((mlir::ShapedType *)v78), v71 <= v70)
     || *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v78) + 8 * v70) != v66))
  {
    uint64_t v55 = *((void *)a3 + 2);
    if (v55 && mlir::RewriterBase::Listener::classof(v55))
    {
      uint64_t v56 = *((void *)a2 + 3);
LABEL_67:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v55 + 64))(v55, v56, v57, &ElementTypeOrSelf);
      goto LABEL_17;
    }
LABEL_81:
    uint64_t v11 = 0;
    goto LABEL_82;
  }
  uint64_t v61 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v75, 0);
  uint64_t v62 = mlir::detail::OpResultImpl::getNextResultAtOffset(v61, 0);
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v62 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
  {
    uint64_t v55 = *((void *)a3 + 2);
    if (v55 && mlir::RewriterBase::Listener::classof(v55))
    {
      uint64_t v56 = *((void *)a2 + 3);
      goto LABEL_67;
    }
    goto LABEL_81;
  }
  uint64_t v63 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v77, 0);
  uint64_t v64 = mlir::detail::OpResultImpl::getNextResultAtOffset(v63, 0);
  ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v64 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
  {
    if (mlir::matchPattern<mlir::detail::constant_op_matcher>(*(void *)(v73 + 24)))
    {
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v73 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        uint64_t v65 = *(void *)(v83[1] + 24);
        ElementTypeOrSelf = *(void **)(*v83 + 24);
        uint64_t v80 = v65;
        uint64_t v81 = *(void *)(v83[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)3, 0);
      }
    }
    else
    {
    }
  }
  else
  {
  }
LABEL_82:
  if (v83 != v85) {
    free(v83);
  }
  return v11;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::fuseGOCs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  uint64_t v114 = a3;
  uint64_t v115 = a2;
  uint64_t v113 = a9;
  uint64_t v15 = (uint64_t *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = *v15;
  unint64_t v17 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v18 = *(unsigned int *)(v16 + 16);
  if (!v18) {
    goto LABEL_10;
  }
  uint64_t v19 = *(void **)(v16 + 8);
  uint64_t v20 = &v19[2 * v18];
  do
  {
    unint64_t v21 = v18 >> 1;
    BOOL v22 = &v19[2 * (v18 >> 1)];
    unint64_t v24 = *v22;
    char v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17) {
      uint64_t v19 = v23;
    }
    else {
      unint64_t v18 = v21;
    }
  }
  while (v18);
  if (v19 != v20 && *v19 == v17) {
    uint64_t v25 = v19[1];
  }
  else {
LABEL_10:
  }
    uint64_t v25 = 0;
  v112[0] = (uint64_t)v15;
  v112[1] = v25;
  uint64_t v26 = *(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v114) + 24);
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  if (a4)
  {
    v102[0] = (uint64_t **)&v110;
    uint64_t v116 = a4;
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (DefiningOp) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, DefiningOp);
    }
  }
  if (a5)
  {
    v102[0] = (uint64_t **)&v108;
    uint64_t v116 = a5;
    uint64_t v28 = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (v28) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, v28);
    }
  }
  if (a6)
  {
    v102[0] = (uint64_t **)&v106;
    uint64_t v116 = a6;
    uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (v29) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, v29);
    }
  }
  if (a7)
  {
    v102[0] = (uint64_t **)&v104;
    uint64_t v116 = a7;
    uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&v116);
    if (v30) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(v102, v30);
    }
  }
  if (v113)
  {
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v113, (uint64_t)&v116);
    float v31 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v116);
    uint64_t v32 = (void *)v117[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v33) == v32) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v117);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v117);
    }
  }
  else
  {
    float v31 = 0.0;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v112);
  unint64_t IndexFromDim = mlir::anec::getIndexFromDim(1, v34);
  uint64_t v36 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v112) + 8 * IndexFromDim);
  uint64_t v131 = (float *)v133;
  uint64_t v132 = 0xC00000000;
  if (v110)
  {
    mlir::getIntValues<float>(v110, v111, (uint64_t)&v131, 0);
  }
  else
  {
    v133[0] = 1065353216;
    LODWORD(v132) = 1;
  }
  BOOL v128 = (float *)v130;
  uint64_t v129 = 0xC00000000;
  if (v108)
  {
    mlir::getIntValues<float>(v108, v109, (uint64_t)&v128, 0);
  }
  else
  {
    v130[0] = 0;
    LODWORD(v129) = 1;
  }
  uint64_t v125 = v127;
  uint64_t v126 = 0xC00000000;
  if (v106)
  {
    mlir::getIntValues<float>(v106, v107, (uint64_t)&v125, 0);
  }
  else
  {
    v127[0] = 1065353216;
    LODWORD(v126) = 1;
  }
  uint64_t v122 = v124;
  uint64_t v123 = 0xC00000000;
  if (v104)
  {
    mlir::getIntValues<float>(v104, v105, (uint64_t)&v122, 0);
    int v37 = v123;
  }
  else
  {
    int v37 = 1;
    v124[0] = 0;
    LODWORD(v123) = 1;
  }
  if (v37 == 1 && v126 == 1 && v129 == 1 && v132 == 1) {
    uint64_t v41 = 1;
  }
  else {
    uint64_t v41 = v36;
  }
  mlir::ShapedType::getShape((mlir::ShapedType *)v112);
  unint64_t v43 = v42;
  long long __b = v121;
  int v120 = 6;
  if (v42 < 7)
  {
    if (v42) {
      memset_pattern16(v121, &unk_211ED5510, 8 * v42);
    }
    uint64_t v44 = v121;
  }
  else
  {
    unsigned int v119 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v121, v42, 8);
    uint64_t v44 = __b;
    memset_pattern16(__b, &unk_211ED5510, 8 * v43);
  }
  unsigned int v119 = v43;
  *(void *)&v44[8 * IndexFromDim] = v41;
  uint64_t v45 = (mlir::Float32Type **)(a1 + 8);
  F32CFNumberType Type = mlir::Builder::getF32Type(v45, (mlir::MLIRContext *)v42);
  unint64_t v47 = (void *)mlir::RankedTensorType::get((uint64_t)v44, v43, F32Type, 0);
  uint64_t v48 = (uint64_t *)__b;
  uint64_t v49 = (mlir::AffineMap *)v119;
  F16CFNumberType Type = mlir::Builder::getF16Type(v45, v50);
  uint64_t v103 = mlir::MemRefType::get(v48, v49, F16Type, 0, 0, 0);
  if (v47)
  {
    uint64_t v52 = *v47;
    unint64_t v53 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v54 = *(unsigned int *)(v52 + 16);
    if (v54)
    {
      uint64_t v55 = *(void **)(v52 + 8);
      uint64_t v56 = &v55[2 * v54];
      do
      {
        unint64_t v57 = v54 >> 1;
        uint64_t v58 = &v55[2 * (v54 >> 1)];
        unint64_t v60 = *v58;
        uint64_t v59 = v58 + 2;
        v54 += ~(v54 >> 1);
        if (v60 < v53) {
          uint64_t v55 = v59;
        }
        else {
          unint64_t v54 = v57;
        }
      }
      while (v54);
      if (v55 != v56 && *v55 == v53) {
        uint64_t v61 = v55[1];
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v63 = v47;
    }
    else
    {
      uint64_t v63 = v47;
      uint64_t v61 = 0;
    }
    mlir::mps::CPUNDArray::CPUNDArray(&v116, v63, v61, 0);
    uint64_t v64 = *v47;
    unint64_t v65 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v66 = *(unsigned int *)(v64 + 16);
    if (!v66) {
      goto LABEL_80;
    }
    unint64_t v67 = *(void **)(v64 + 8);
    uint64_t v68 = &v67[2 * v66];
    do
    {
      unint64_t v69 = v66 >> 1;
      unint64_t v70 = &v67[2 * (v66 >> 1)];
      unint64_t v72 = *v70;
      unint64_t v71 = v70 + 2;
      v66 += ~(v66 >> 1);
      if (v72 < v65) {
        unint64_t v67 = v71;
      }
      else {
        unint64_t v66 = v69;
      }
    }
    while (v66);
    if (v67 != v68 && *v67 == v65) {
      uint64_t v62 = v67[1];
    }
    else {
LABEL_80:
    }
      uint64_t v62 = 0;
  }
  else
  {
    mlir::mps::CPUNDArray::CPUNDArray(&v116, 0, 0, 0);
    uint64_t v62 = 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v102, v47, v62, 0);
  if (v41)
  {
    uint64_t v73 = 0;
    uint64_t v74 = v117[4];
    uint64_t v75 = v102[5];
    int v76 = v132;
    uint64_t v77 = v131;
    int v78 = v129;
    uint64_t v79 = v128;
    int v80 = v126;
    uint64_t v81 = (float *)v125;
    int v82 = v123;
    v83 = (float *)v122;
    do
    {
      if (v76 == 1) {
        uint64_t v88 = 0;
      }
      else {
        uint64_t v88 = v73;
      }
      float v89 = v77[v88];
      if (v78 == 1) {
        uint64_t v90 = 0;
      }
      else {
        uint64_t v90 = v73;
      }
      if (v80 == 1) {
        uint64_t v91 = 0;
      }
      else {
        uint64_t v91 = v73;
      }
      float v92 = v81[v91];
      if (v82 == 1) {
        uint64_t v93 = 0;
      }
      else {
        uint64_t v93 = v73;
      }
      if (a8) {
        float v84 = v89 / (float)(v31 + v92);
      }
      else {
        float v84 = v89 * v92;
      }
      float v85 = v79[v90];
      float v86 = v83[v93];
      uint64_t v87 = 4 * v73;
      *(float *)(v74 + v87) = v84;
      *(float *)((char *)v75 + v87) = v85 + (float)(v86 / v89);
      ++v73;
    }
    while (v41 != v73);
  }
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)&v116, 0, 1);
  uint64_t v100 = v94;
  unint64_t v101 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v45, v26, &v103, &ElementsAttr);
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v102, 0, 1);
  uint64_t v100 = v95;
  unint64_t v98 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)v45, v26, &v103, &ElementsAttr);
  v96 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)v45, v26, v112, &v115, &v101, &v98);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v102);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)&v116);
  if (__b != v121) {
    free(__b);
  }
  if (v122 != v124) {
    free(v122);
  }
  if (v125 != v127) {
    free(v125);
  }
  if (v128 != (float *)v130) {
    free(v128);
  }
  if (v131 != (float *)v133) {
    free(v131);
  }
  return (char *)v96 - 16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::GOC type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 1 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Invert type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.invert' to have attribute 'epsilon' of type '::mlir::FloatAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'mult' failed to satisfy constraint: 'splat constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'goc' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'inv' failed to satisfy constraint: 'is FP16 value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'quotient' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCDiv::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'quotient' failed to satisfy constraint: 'is FP16 value'");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    void v21[2] = (uint64_t)"anec.gain_offset_control";
    v21[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, *a3, *a4, *a5 - 16, *a6 - 16);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

void mlir::anec::anonymous namespace'::ANEC_GOCGOC::~ANEC_GOCGOC(mlir::anec::_anonymous_namespace_::ANEC_GOCGOC *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCGOC *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v81[4] = *MEMORY[0x263EF8340];
  uint64_t v68 = 0;
  uint64_t v79 = v81;
  v81[0] = a2;
  uint64_t v80 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v67 = v5;
  unint64_t v69 = v5;
  uint64_t v77 = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v67, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v77);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    uint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
    if (v8 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
      uint64_t v10 = (void *)DefiningOp;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v77 = v10;
    if (!v9)
    {
      uint64_t v11 = *((void *)a3 + 2);
      if (!v11) {
        goto LABEL_77;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v12 = *(void *)(v7 + 24);
        char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
        uint64_t v15 = v76;
LABEL_15:
        uint64_t v17 = v14(v11, v12, v13, v15);
LABEL_16:
        uint64_t v11 = v17;
        goto LABEL_77;
      }
      goto LABEL_76;
    }
    uint64_t v68 = DefiningOp;
    mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v77, 0);
    mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v77, 1u);
    mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v77, 2u);
    int v18 = v80;
    if (v80 >= HIDWORD(v80))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v79, v81, v80 + 1, 8);
      int v18 = v80;
    }
    v79[v18] = v7;
    LODWORD(v80) = v80 + 1;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v67, 1u);
    uint64_t v20 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v67, 2u);
    uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v68, 0);
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
    uint64_t v23 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v69, 0);
    uint64_t v24 = mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0);
    uint64_t v25 = *(void **)(ODSOperands + 24);
    uint64_t v26 = *(void **)(v20 + 24);
    uint64_t v75 = (void *)NextResultAtOffset;
    uint64_t v74 = mlir::Value::getDefiningOp((mlir::Value *)&v75);
    Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v74);
    Bias = (void *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v74);
    v76[0] = 0;
    v76[1] = 0;
    v73[0] = 0;
    v73[1] = 0;
    v72[0] = 0;
    v72[1] = 0;
    v71[0] = 0;
    v71[1] = 0;
    unint64_t v70 = v76;
    uint64_t v77 = Filter;
    uint64_t v29 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v29) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v29);
    }
    unint64_t v70 = (void **)v73;
    uint64_t v77 = Bias;
    uint64_t v30 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v30) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v30);
    }
    unint64_t v70 = (void **)v72;
    uint64_t v77 = v25;
    uint64_t v31 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v31) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v31);
    }
    unint64_t v70 = (void **)v71;
    uint64_t v77 = v26;
    uint64_t v32 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
    if (v32) {
      mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v70, v32);
    }
    unint64_t v33 = v75;
    unint64_t v34 = (void *)*v75;
    if (*v75)
    {
      while (v34[2] - 16 == v24)
      {
        unint64_t v34 = (void *)*v34;
        if (!v34) {
          goto LABEL_38;
        }
      }
      if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76)) {
        int OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v73);
      }
      else {
        int OperandRange = 0;
      }
      int v36 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v72);
      if (v36) {
        int v36 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v71);
      }
      if (OperandRange != v36)
      {
LABEL_73:
        uint64_t v65 = *((void *)a3 + 2);
        if (v65 && mlir::RewriterBase::Listener::classof(v65))
        {
          goto LABEL_16;
        }
        goto LABEL_76;
      }
      unint64_t v33 = v75;
    }
LABEL_38:
    int v37 = (uint64_t *)(v33[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v37) {
      goto LABEL_47;
    }
    uint64_t v38 = *v37;
    unint64_t v39 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v40 = *(unsigned int *)(v38 + 16);
    if (!v40) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void **)(v38 + 8);
    unint64_t v42 = &v41[2 * v40];
    do
    {
      unint64_t v43 = v40 >> 1;
      uint64_t v44 = &v41[2 * (v40 >> 1)];
      unint64_t v46 = *v44;
      uint64_t v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39) {
        uint64_t v41 = v45;
      }
      else {
        unint64_t v40 = v43;
      }
    }
    while (v40);
    if (v41 != v42 && *v41 == v39) {
      uint64_t v47 = v41[1];
    }
    else {
LABEL_47:
    }
      uint64_t v47 = 0;
    uint64_t v77 = v37;
    v78[0] = v47;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v77)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_49;
    uint64_t v49 = (uint64_t *)(*(void *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v49) {
      goto LABEL_59;
    }
    uint64_t v50 = *v49;
    unint64_t v51 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v52 = *(unsigned int *)(v50 + 16);
    if (!v52) {
      goto LABEL_59;
    }
    unint64_t v53 = *(void **)(v50 + 8);
    unint64_t v54 = &v53[2 * v52];
    do
    {
      unint64_t v55 = v52 >> 1;
      uint64_t v56 = &v53[2 * (v52 >> 1)];
      unint64_t v58 = *v56;
      unint64_t v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51) {
        unint64_t v53 = v57;
      }
      else {
        unint64_t v52 = v55;
      }
    }
    while (v52);
    if (v53 != v54 && *v53 == v51) {
      uint64_t v59 = v53[1];
    }
    else {
LABEL_59:
    }
      uint64_t v59 = 0;
    uint64_t v77 = v49;
    v78[0] = v59;
    if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v77)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v72)
      && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v71) & 1) != 0)
    {
      mlir::ElementsAttr::getSplatValue<llvm::APFloat>((mlir::BranchOpInterface *)v72, (uint64_t)&v77);
      float v60 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v77);
      uint64_t v61 = (void *)v78[0];
      uint64_t v63 = llvm::APFloatBase::PPCDoubleDouble(v62);
      if (v63 == v61) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v78);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v78);
      }
      mlir::ElementsAttr::getSplatValue<llvm::APFloat>((mlir::BranchOpInterface *)v71, (uint64_t)&v77);
      float v64 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v77);
      if (v63 == (void *)v78[0]) {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v78);
      }
      else {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v78);
      }
      if (v60 == 1.0 && v64 == (float)(uint64_t)v64)
      {
LABEL_49:
        uint64_t v48 = *(void *)(v79[1] + 24);
        uint64_t v77 = *(void **)(*v79 + 24);
        v78[0] = v48;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v77, (mlir::MLIRContext *)2, 0);
      }
    }
    goto LABEL_73;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_77;
  }
  uint64_t v16 = v67;
  if (mlir::RewriterBase::Listener::classof(v11))
  {
    uint64_t v12 = *((void *)v16 + 3);
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
    uint64_t v15 = &v77;
    goto LABEL_15;
  }
LABEL_76:
  uint64_t v11 = 0;
LABEL_77:
  if (v79 != v81) {
    free(v79);
  }
  return v11;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::GOC type");
}

llvm::APFloatBase *mlir::ElementsAttr::getSplatValue<llvm::APFloat>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::ElementsAttr::value_begin<llvm::APFloat>(a1, (uint64_t)v9);
  if (v9[1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v11;
  }
  if (v9[0])
  {
    unint64_t v4 = (llvm::detail::IEEEFloat *)(a2 + 8);
    uint64_t v5 = (char *)v10 + 32 * v3;
    uint64_t v7 = (void *)*((void *)v5 + 1);
    uint64_t v6 = (const llvm::detail::DoubleAPFloat *)(v5 + 8);
    if (llvm::APFloatBase::PPCDoubleDouble(v10) == v7)
    {
      uint64_t result = (llvm::APFloatBase *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v4, v6);
      if (v9[0]) {
        return result;
      }
    }
    else
    {
      uint64_t result = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat(v4, v6);
      if (v9[0]) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = (llvm::APFloatBase *)(*(uint64_t (**)(void))(*(void *)v10 + 24))();
    if (v9[0]) {
      return result;
    }
  }
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result) {
    return (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::ElementsAttr::value_begin<llvm::APFloat>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = mlir::TypeID::get<llvm::APFloat>();
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v4);
  if (!v11) {
    mlir::ElementsAttr::value_begin<llvm::APFloat>((llvm *)v9, (uint64_t *)a1);
  }
  char v6 = v9[1];
  if (v9[0])
  {
    uint64_t v7 = v10;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    uint64_t v7 = v10;
  }
  *(unsigned char *)a2 = v8;
  *(unsigned char *)(a2 + 1) = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0;
  return result;
}

const char *llvm::getTypeName<llvm::APFloat>()
{
  uint64_t v5 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
  unint64_t v6 = 63;
  unint64_t v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0) {
    unint64_t v1 = v0;
  }
  else {
    unint64_t v1 = v6;
  }
  int v2 = &v5[v1];
  if (v6 - v1 >= 0x12) {
    uint64_t v3 = 18;
  }
  else {
    uint64_t v3 = v6 - v1;
  }
  return &v2[v3];
}

uint64_t mlir::TypeID::get<llvm::APFloat>()
{
  unint64_t v0 = &unk_267771000;
  {
    unint64_t v0 = (void *)&unk_267771000;
    if (v2)
    {
      uint64_t v10 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      unint64_t v11 = 63;
      unint64_t v3 = llvm::StringRef::find((uint64_t *)&v10, "DesiredTypeName = ", 0x12uLL, 0);
      if (v11 >= v3) {
        unint64_t v4 = v3;
      }
      else {
        unint64_t v4 = v11;
      }
      uint64_t v5 = &v10[v4];
      unint64_t v6 = v11 - v4;
      if (v11 - v4 >= 0x12) {
        uint64_t v7 = 18;
      }
      else {
        uint64_t v7 = v11 - v4;
      }
      unint64_t v8 = v6 - v7;
      if (v8 >= v8 - 1) {
        uint64_t v9 = v8 - 1;
      }
      else {
        uint64_t v9 = v8;
      }
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v5[v7], v9);
      unint64_t v0 = (void *)&unk_267771000;
    }
  }
  return v0[280];
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCGOC::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'goc1, goc2, scale2, bias2' failed to satisfy constraint: ''");
}

void mlir::anec::anonymous namespace'::ANEC_GOCRelu::~ANEC_GOCRelu(mlir::anec::_anonymous_namespace_::ANEC_GOCRelu *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCRelu *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v78[4] = *MEMORY[0x263EF8340];
  uint64_t v69 = 0;
  int v76 = v78;
  v78[0] = a2;
  uint64_t v77 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v68[0] = v5;
  v68[1] = v5;
  uint64_t ArgOperands = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v68, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    unint64_t v8 = *(void **)(*(void *)(DefiningOp + 48) + 16);
    BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id;
    if (v8 == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id) {
      uint64_t v10 = (void *)DefiningOp;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t ArgOperands = v10;
    if (!v9)
    {
      uint64_t v11 = *((void *)a3 + 2);
      if (!v11) {
        goto LABEL_134;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v12 = *(void *)(v7 + 24);
        char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
        p_uint64_t ArgOperands = (void **)&v74;
LABEL_15:
        uint64_t v17 = v11;
LABEL_125:
        uint64_t v11 = v14(v17, v12, v13, p_ArgOperands);
        goto LABEL_134;
      }
      goto LABEL_133;
    }
    uint64_t v69 = DefiningOp;
    uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&ArgOperands, 0);
    int v19 = v77;
    if (v77 >= HIDWORD(v77))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v78, v77 + 1, 8);
      int v19 = v77;
    }
    v76[v19] = v7;
    LODWORD(v77) = v77 + 1;
    uint64_t v20 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v68, 1u);
    uint64_t v21 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v68, 2u);
    uint64_t ArgOperands = *(void **)(ODSOperands + 24);
    uint64_t v22 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
    if (!v22 || *(_UNKNOWN **)(*(void *)(v22 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id)
    {
      uint64_t v23 = *((void *)a3 + 2);
      if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
        goto LABEL_133;
      }
      uint64_t v12 = *((void *)a2 + 3);
LABEL_124:
      uint64_t v13 = v24;
      char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v23 + 64);
      p_uint64_t ArgOperands = &ArgOperands;
      uint64_t v17 = v23;
      goto LABEL_125;
    }
    uint64_t v25 = *(void **)(v20 + 24);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v73 = &v74;
    uint64_t ArgOperands = v25;
    uint64_t v26 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
    if (!v26 || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v73, v26))
    {
LABEL_121:
      uint64_t v23 = *((void *)a3 + 2);
      if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
        goto LABEL_133;
      }
      uint64_t v12 = *((void *)a2 + 3);
      goto LABEL_124;
    }
    uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
    uint64_t v71 = v27;
    uint64_t v28 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                   + 136);
    if (v28 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v28 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      uint64_t ArgOperands = v72;
      uint64_t v71 = 0xC00000000;
      mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
      if (v71)
      {
        uint64_t v35 = 4 * v71 - 4;
        int v36 = (float *)ArgOperands;
        do
        {
          float v37 = *v36++;
          BOOL v38 = v37 >= 0.0;
          BOOL v39 = v37 < 0.0 || v35 == 0;
          v35 -= 4;
        }
        while (!v39);
      }
      else
      {
        BOOL v38 = 1;
      }
      if (ArgOperands != v72) {
        free(ArgOperands);
      }
      if (!v38) {
        goto LABEL_121;
      }
    }
    else
    {
      uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
      uint64_t v71 = v29;
      if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        goto LABEL_121;
      uint64_t ArgOperands = v72;
      uint64_t v71 = 0xC00000000;
      mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
      if (v71)
      {
        uint64_t v30 = 4 * v71 - 4;
        uint64_t v31 = (float *)ArgOperands;
        do
        {
          float v32 = *v31++;
          BOOL v33 = v32 >= 0.0;
          BOOL v34 = v32 < 0.0 || v30 == 0;
          v30 -= 4;
        }
        while (!v34);
      }
      else
      {
        BOOL v33 = 1;
      }
      if (ArgOperands != v72) {
        free(ArgOperands);
      }
      if (!v33) {
        goto LABEL_121;
      }
    }
    unint64_t v40 = *(void **)(v21 + 24);
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v73 = &v74;
    uint64_t ArgOperands = v40;
    uint64_t v41 = mlir::Value::getDefiningOp((mlir::Value *)&ArgOperands);
    if (v41 && mlir::detail::constant_op_binder<mlir::ElementsAttr>::match((uint64_t ***)&v73, v41))
    {
      uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
      uint64_t v71 = v42;
      unint64_t v43 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                     + 136);
      BOOL v52 = v43 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
         || v43 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
      if (v52
        || v43 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v43 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t ArgOperands = v72;
        uint64_t v71 = 0xC00000000;
        mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
        if (v71)
        {
          uint64_t v53 = 4 * v71 - 4;
          unint64_t v54 = (float *)ArgOperands;
          do
          {
            float v55 = *v54++;
            BOOL v56 = v55 == 0.0;
            BOOL v57 = v55 != 0.0 || v53 == 0;
            v53 -= 4;
          }
          while (!v57);
        }
        else
        {
          BOOL v56 = 1;
        }
        if (ArgOperands != v72) {
          free(ArgOperands);
        }
        if (!v56) {
          goto LABEL_130;
        }
      }
      else
      {
        uint64_t ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
        uint64_t v71 = v61;
        if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                          + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
          goto LABEL_130;
        uint64_t ArgOperands = v72;
        uint64_t v71 = 0xC00000000;
        mlir::getIntValues<float>(v74, v75, (uint64_t)&ArgOperands, 0);
        if (v71)
        {
          uint64_t v62 = 4 * v71 - 4;
          uint64_t v63 = (float *)ArgOperands;
          do
          {
            float v64 = *v63++;
            BOOL v65 = v64 == 0.0;
            BOOL v66 = v64 != 0.0 || v62 == 0;
            v62 -= 4;
          }
          while (!v66);
        }
        else
        {
          BOOL v65 = 1;
        }
        if (ArgOperands != v72) {
          free(ArgOperands);
        }
        if (!v65) {
          goto LABEL_130;
        }
      }
      uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v69, 0);
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
      uint64_t ArgOperands = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ArgOperands))
      {
        uint64_t v60 = *(void *)(v76[1] + 24);
        uint64_t ArgOperands = *(void **)(*v76 + 24);
        uint64_t v71 = v60;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ArgOperands, (mlir::MLIRContext *)2, 0);
      }
      uint64_t v23 = *((void *)a3 + 2);
      if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
        goto LABEL_133;
      }
      uint64_t v12 = *((void *)a2 + 3);
      goto LABEL_124;
    }
LABEL_130:
    uint64_t v23 = *((void *)a3 + 2);
    if (!v23 || !mlir::RewriterBase::Listener::classof(v23)) {
      goto LABEL_133;
    }
    uint64_t v12 = *((void *)a2 + 3);
    goto LABEL_124;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_134;
  }
  uint64_t v16 = v68[0];
  if (mlir::RewriterBase::Listener::classof(v11))
  {
    uint64_t v12 = *(void *)(v16 + 24);
    char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v11 + 64);
    p_uint64_t ArgOperands = &ArgOperands;
    goto LABEL_15;
  }
LABEL_133:
  uint64_t v11 = 0;
LABEL_134:
  if (v76 != v78) {
    free(v76);
  }
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,mlir::Value &,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.gain_offset_control";
    v19[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::anec::GOC::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  uint64_t v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Relu,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.relu", (const unsigned __int8 *)9, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.relu";
    v19[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v11);
  mlir::ValueRange::ValueRange(v22, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::ValueRange::ValueRange(v21, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, v22[0], v22[1], v21[0], v21[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Relu,void>::id) {
    char v14 = v13;
  }
  else {
    char v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Relu type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'is GOC input'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'scale' failed to satisfy constraint: 'is constant >= 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'bias' failed to satisfy constraint: 'is constant 0'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCRelu::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'relu_out' failed to satisfy constraint: 'is FP16 value'");
}

void mlir::anec::anonymous namespace'::CanonicalizeConcat::~CanonicalizeConcat(mlir::anec::_anonymous_namespace_::CanonicalizeConcat *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Concat>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Concat>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Concat>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeConcat::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  v152[6] = *MEMORY[0x263EF8340];
  uint64_t v139 = a2;
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&v139);
  uint64_t v7 = v6;
  unint64_t v8 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v139) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = *v8;
  unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v11 = *(unsigned int *)(v9 + 16);
  if (!v11) {
    goto LABEL_10;
  }
  char v12 = *(void **)(v9 + 8);
  uint64_t v13 = &v12[2 * v11];
  do
  {
    unint64_t v14 = v11 >> 1;
    uint64_t v15 = &v12[2 * (v11 >> 1)];
    unint64_t v17 = *v15;
    uint64_t v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10) {
      char v12 = v16;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v12 != v13 && *v12 == v10) {
    uint64_t v18 = v12[1];
  }
  else {
LABEL_10:
  }
    uint64_t v18 = 0;
  v138[0] = (uint64_t)v8;
  v138[1] = v18;
  Axis = mlir::anec::Concat::getAxis(&v139);
  if (mlir::anec::Concat::getInterleave(&v139))
  {
    __int16 v20 = "failed: interleaved concat not supported";
    goto LABEL_33;
  }
  v134[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v138);
  if (!mlir::Type::isF16((mlir::Type *)v134))
  {
    v134[0] = "failed: operation output must be F16";
    __int16 v135 = 259;
    BOOL v33 = v139;
    v133[0] = v134;
    uint64_t v34 = *(void *)(a3 + 16);
    if (v34) {
      goto LABEL_34;
    }
    return 0;
  }
  if (Axis != (uint64_t *)1)
  {
    __int16 v20 = "failed: only works when concat is applied on the channel axis";
    goto LABEL_33;
  }
  if (v7)
  {
    uint64_t v21 = (void *)(Inputs + 24);
    uint64_t v22 = v7;
    while (1)
    {
      v134[0] = *v21;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v134);
      if (!DefiningOp) {
        break;
      }
      uint64_t v24 = *(void **)(*(void *)(DefiningOp + 48) + 16);
      BOOL v25 = v24 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id;
      uint64_t v26 = v24 == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id ? DefiningOp : 0;
      v133[0] = v26;
      if (!v25) {
        break;
      }
      uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v133);
      if (*(_UNKNOWN **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(Input + 8) & 0xFFFFFFFFFFFFFFF8))
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        break;
      uint64_t v28 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v133);
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8));
      if (!mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf)) {
        break;
      }
      v21 += 4;
      if (!--v22) {
        goto LABEL_26;
      }
    }
    __int16 v20 = "failed: all inputs must be compatible";
LABEL_33:
    v134[0] = v20;
    __int16 v135 = 259;
    BOOL v33 = v139;
    v133[0] = v134;
    uint64_t v34 = *(void *)(a3 + 16);
    if (v34)
    {
LABEL_34:
      uint64_t result = mlir::RewriterBase::Listener::classof(v34);
      if (result) {
        return (*(uint64_t (**)(uint64_t, void, uint64_t (*)(void ****, uint64_t), void *))(*(void *)v34 + 64))(v34, *((void *)v33 + 3), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::Concat &>(mlir::anec::Concat &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v133);
      }
      return result;
    }
    return 0;
  }
LABEL_26:
  mlir::ShapedType::getShape((mlir::ShapedType *)v138);
  unint64_t v30 = v29;
  ElementTypeOrSelf = v152;
  int v151 = 6;
  if (v29 < 7)
  {
    if (!v29) {
      goto LABEL_40;
    }
    size_t v32 = 8 * v29;
    uint64_t v31 = v152;
  }
  else
  {
    unsigned int v150 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&ElementTypeOrSelf, v152, v29, 8);
    uint64_t v31 = ElementTypeOrSelf;
    size_t v32 = 8 * v30;
  }
  memset_pattern16(v31, &unk_211ED5510, v32);
LABEL_40:
  unsigned int v150 = v30;
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v138);
  uint64_t v37 = (uint64_t)ElementTypeOrSelf;
  ElementTypeOrSelf[1] = *(void *)(Shape + 8);
  uint64_t v38 = v150;
  F32CFNumberType Type = mlir::Builder::getF32Type((mlir::Float32Type **)(a3 + 8), v39);
  uint64_t v41 = (void *)mlir::RankedTensorType::get(v37, v38, F32Type, 0);
  uint64_t v42 = ElementTypeOrSelf;
  unint64_t v43 = (mlir::AffineMap *)v150;
  F16CFNumberType Type = mlir::Builder::getF16Type((mlir::Float16Type **)(a3 + 8), v44);
  uint64_t v137 = mlir::MemRefType::get(v42, v43, F16Type, 0, 0, 0);
  uint64_t v130 = (mlir::Builder *)(a3 + 8);
  if (v41)
  {
    uint64_t v46 = *v41;
    unint64_t v47 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v48 = *(unsigned int *)(v46 + 16);
    if (v48)
    {
      uint64_t v49 = *(void **)(v46 + 8);
      uint64_t v50 = &v49[2 * v48];
      do
      {
        unint64_t v51 = v48 >> 1;
        BOOL v52 = &v49[2 * (v48 >> 1)];
        unint64_t v54 = *v52;
        uint64_t v53 = v52 + 2;
        v48 += ~(v48 >> 1);
        if (v54 < v47) {
          uint64_t v49 = v53;
        }
        else {
          unint64_t v48 = v51;
        }
      }
      while (v48);
      if (v49 != v50 && *v49 == v47) {
        uint64_t v55 = v49[1];
      }
      else {
        uint64_t v55 = 0;
      }
      BOOL v57 = v41;
    }
    else
    {
      BOOL v57 = v41;
      uint64_t v55 = 0;
    }
    mlir::mps::CPUNDArray::CPUNDArray(v134, v57, v55, 0);
    uint64_t v58 = *v41;
    unint64_t v59 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v60 = *(unsigned int *)(v58 + 16);
    if (!v60) {
      goto LABEL_62;
    }
    uint64_t v61 = *(void **)(v58 + 8);
    uint64_t v62 = &v61[2 * v60];
    do
    {
      unint64_t v63 = v60 >> 1;
      float v64 = &v61[2 * (v60 >> 1)];
      unint64_t v66 = *v64;
      BOOL v65 = v64 + 2;
      v60 += ~(v60 >> 1);
      if (v66 < v59) {
        uint64_t v61 = v65;
      }
      else {
        unint64_t v60 = v63;
      }
    }
    while (v60);
    if (v61 != v62 && *v61 == v59) {
      uint64_t v56 = v61[1];
    }
    else {
LABEL_62:
    }
      uint64_t v56 = 0;
  }
  else
  {
    mlir::mps::CPUNDArray::CPUNDArray(v134, 0, 0, 0);
    uint64_t v56 = 0;
  }
  mlir::mps::CPUNDArray::CPUNDArray(v133, v41, v56, 0);
  unint64_t v67 = v136;
  uint64_t v68 = (float32x4_t *)v133[5];
  v146 = v148;
  uint64_t v147 = 0x600000000;
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v132 = *(ZinIrHalH13g **)(Inputs + 32 * i + 24);
      unint64_t v70 = (uint64_t *)(*((void *)v132 + 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v70) {
        goto LABEL_75;
      }
      uint64_t v71 = *v70;
      unint64_t v72 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v73 = *(unsigned int *)(v71 + 16);
      if (!v73) {
        goto LABEL_75;
      }
      uint64_t v74 = *(void **)(v71 + 8);
      uint64_t v75 = &v74[2 * v73];
      do
      {
        unint64_t v76 = v73 >> 1;
        uint64_t v77 = &v74[2 * (v73 >> 1)];
        unint64_t v79 = *v77;
        int v78 = v77 + 2;
        v73 += ~(v73 >> 1);
        if (v79 < v72) {
          uint64_t v74 = v78;
        }
        else {
          unint64_t v73 = v76;
        }
      }
      while (v73);
      if (v74 != v75 && *v74 == v72) {
        uint64_t v80 = v74[1];
      }
      else {
LABEL_75:
      }
        uint64_t v80 = 0;
      ElementsAttr = v70;
      uint64_t v144 = v80;
      uint64_t v81 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)&ElementsAttr) + 8);
      uint64_t v131 = (ZinIrHalH13g *)mlir::Value::getDefiningOp((mlir::Value *)&v132);
      uint64_t v82 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v131);
      uint64_t v83 = v147;
      if (v147 >= (unint64_t)HIDWORD(v147))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, v148, v147 + 1, 8);
        uint64_t v83 = v147;
      }
      v146[v83] = v82;
      LODWORD(v147) = v147 + 1;
      ElementsAttr = v145;
      uint64_t v144 = 0xC00000000;
      uint64_t v140 = v142;
      uint64_t v141 = 0xC00000000;
      uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v131);
      mlir::matchConstantWithFloatVector<float>(Filter, (uint64_t)&ElementsAttr);
      uint64_t Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v131);
      mlir::matchConstantWithFloatVector<float>(Bias, (uint64_t)&v140);
      uint64_t v86 = v144;
      if (v144 == 1)
      {
        if (v81 < 1) {
          goto LABEL_97;
        }
        uint64_t v87 = (__int32 *)ElementsAttr;
        if ((unint64_t)v81 < 8
          || v67 < (float32x4_t *)((char *)ElementsAttr + 4) && ElementsAttr < &v67->f32[v81])
        {
          uint64_t v88 = 0;
          float v89 = v67;
LABEL_84:
          uint64_t v90 = v81 - v88;
          unint64_t v67 = v89;
          do
          {
            v67->i32[0] = *v87;
            unint64_t v67 = (float32x4_t *)((char *)v67 + 4);
            --v90;
          }
          while (v90);
          goto LABEL_97;
        }
        uint64_t v88 = v81 & 0x7FFFFFFFFFFFFFF8;
        float v89 = (float32x4_t *)((char *)v67 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
        float32x4_t v123 = vld1q_dup_f32((const float *)ElementsAttr);
        uint64_t v124 = v67 + 1;
        unint64_t v125 = v81 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v124[-1] = v123;
          *uint64_t v124 = v123;
          v124 += 2;
          v125 -= 8;
        }
        while (v125);
        unint64_t v67 = (float32x4_t *)((char *)v67 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
        if (v81 != v88) {
          goto LABEL_84;
        }
      }
      else
      {
        if (!v144) {
          goto LABEL_97;
        }
        uint64_t v91 = (char *)ElementsAttr;
        unint64_t v92 = (v144 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v92 < 7 || (unint64_t)((char *)v67 - (unsigned char *)ElementsAttr) < 0x20)
        {
          uint64_t v95 = v67;
          v96 = (char *)ElementsAttr;
LABEL_95:
          unint64_t v101 = &v91[4 * v86];
          unint64_t v67 = v95;
          do
          {
            __int32 v102 = *(_DWORD *)v96;
            v96 += 4;
            v67->i32[0] = v102;
            unint64_t v67 = (float32x4_t *)((char *)v67 + 4);
          }
          while (v96 != v101);
          goto LABEL_97;
        }
        unint64_t v93 = v92 + 1;
        uint64_t v94 = (v92 + 1) & 0x7FFFFFFFFFFFFFF8;
        uint64_t v95 = (float32x4_t *)((char *)v67 + 4 * v94);
        v96 = (char *)ElementsAttr + 4 * v94;
        v97 = (long long *)((char *)ElementsAttr + 16);
        f32 = (_OWORD *)v67[1].f32;
        uint64_t v99 = v94;
        do
        {
          long long v100 = *v97;
          *(f32 - 1) = *(v97 - 1);
          _OWORD *f32 = v100;
          v97 += 2;
          f32 += 2;
          v99 -= 8;
        }
        while (v99);
        unint64_t v67 = (float32x4_t *)((char *)v67 + 4 * v94);
        if (v93 != v94) {
          goto LABEL_95;
        }
      }
LABEL_97:
      uint64_t v103 = v141;
      uint64_t v104 = (__int32 *)v140;
      if (v141 == 1)
      {
        if (v81 >= 1)
        {
          if ((unint64_t)v81 >= 8
            && (v68 < (float32x4_t *)((char *)v140 + 4) ? (BOOL v105 = v140 >= &v68->f32[v81]) : (BOOL v105 = 1), v105))
          {
            uint64_t v106 = v81 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v107 = (float32x4_t *)((char *)v68 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
            float32x4_t v108 = vld1q_dup_f32((const float *)v140);
            uint64_t v109 = v68 + 1;
            unint64_t v110 = v81 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v109[-1] = v108;
              float32x4_t *v109 = v108;
              v109 += 2;
              v110 -= 8;
            }
            while (v110);
            uint64_t v68 = (float32x4_t *)((char *)v68 + 4 * (v81 & 0xFFFFFFFFFFFFFFF8));
            if (v81 == v106) {
              goto LABEL_123;
            }
          }
          else
          {
            uint64_t v106 = 0;
            uint64_t v107 = v68;
          }
          uint64_t v120 = v81 - v106;
          uint64_t v68 = v107;
          do
          {
            v68->i32[0] = *v104;
            uint64_t v68 = (float32x4_t *)((char *)v68 + 4);
            --v120;
          }
          while (v120);
        }
      }
      else if (v141)
      {
        unint64_t v111 = (v141 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v111 < 7 || (unint64_t)((char *)v68 - (unsigned char *)v140) < 0x20)
        {
          uint64_t v114 = v68;
          uint64_t v115 = (__int32 *)v140;
        }
        else
        {
          unint64_t v112 = v111 + 1;
          uint64_t v113 = (v111 + 1) & 0x7FFFFFFFFFFFFFF8;
          uint64_t v114 = (float32x4_t *)((char *)v68 + 4 * v113);
          uint64_t v115 = (__int32 *)((char *)v140 + 4 * v113);
          uint64_t v116 = (long long *)((char *)v140 + 16);
          uint64_t v117 = (_OWORD *)v68[1].f32;
          uint64_t v118 = v113;
          do
          {
            long long v119 = *v116;
            *(v117 - 1) = *(v116 - 1);
            *uint64_t v117 = v119;
            v116 += 2;
            v117 += 2;
            v118 -= 8;
          }
          while (v118);
          uint64_t v68 = (float32x4_t *)((char *)v68 + 4 * v113);
          if (v112 == v113) {
            goto LABEL_123;
          }
        }
        uint64_t v121 = &v104[v103];
        uint64_t v68 = v114;
        do
        {
          __int32 v122 = *v115++;
          v68->i32[0] = v122;
          uint64_t v68 = (float32x4_t *)((char *)v68 + 4);
        }
        while (v115 != v121);
      }
LABEL_123:
      if (v104 != (__int32 *)v142) {
        free(v104);
      }
      if (ElementsAttr != v145) {
        free(ElementsAttr);
      }
    }
  }
  ElementsAttr = mlir::anec::Concat::getAxis(&v139);
  LOBYTE(v132) = mlir::anec::Concat::getInterleave(&v139);
  uint64_t v140 = mlir::OpBuilder::create<mlir::anec::Concat,llvm::SmallVector<mlir::Value,6u> &,unsigned long long,BOOL>(v130, v4, (uint64_t)&v146, (unint64_t *)&ElementsAttr, (unsigned __int8 *)&v132);
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v134, 0, 1);
  uint64_t v144 = v126;
  uint64_t v132 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(v130, v4, &v137, (void **)&ElementsAttr);
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v133, 0, 1);
  uint64_t v144 = v127;
  uint64_t v131 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(v130, v4, &v137, (void **)&ElementsAttr);
  BOOL v128 = v139;
  uint64_t v129 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::anec::Concat &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>(v130, *((void *)v139 + 3), v138, &v140, &v132, &v131);
  (*(void (**)(uint64_t, mlir::Operation *, ZinIrHalH13g *))(*(void *)a3 + 32))(a3, v128, v129);
  if (v146 != (void *)v148) {
    free(v146);
  }
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v133);
  mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v134);
  if (ElementTypeOrSelf != v152) {
    free(ElementTypeOrSelf);
  }
  return 1;
}

uint64_t mlir::matchConstantWithFloatVector<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (!a1) {
    return 0;
  }
  uint64_t v18 = (uint64_t **)&v19;
  uint64_t v21 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v21);
  if (!DefiningOp || !mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v18, DefiningOp)) {
    return 0;
  }
  v17[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19);
  v17[1] = v4;
  uint64_t v5 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v17) + 136);
  BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v7 = v6 || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v8 = v7 || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v9 = v8 || v5 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v10 = v9 || v5 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v11 = v10 || v5 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v12 = v11 || v5 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v13 = v12 || v5 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v14 = v13 || v5 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  if (!v14
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  uint64_t v15 = 1;
  mlir::getIntValues<float>(v19, v20, a2, 1);
  return v15;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Concat,llvm::SmallVector<mlir::Value,6u> &,unsigned long long,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned __int8 *a5)
{
  v22[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.concat", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    v19[2] = (uint64_t)"anec.concat";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v11);
  mlir::ValueRange::ValueRange(v21, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::Concat::build(a1, (uint64_t)v22, v21[0], v21[1], *a4, *a5);
  BOOL v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Concat,void>::id) {
    BOOL v14 = v13;
  }
  else {
    BOOL v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v14;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::anec::Concat &>(mlir::anec::Concat &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::anec::Concat &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void *a4, void *a5, void *a6)
{
  v23[38] = *MEMORY[0x263EF8340];
  uint64_t v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  uint64_t v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.gain_offset_control", (const unsigned __int8 *)0x18, Context);
  if (!v14)
  {
    __int16 v22 = 1283;
    unint64_t v21[2] = (uint64_t)"anec.gain_offset_control";
    v21[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::anec::GOC::build((uint64_t)a1, (uint64_t)v23, *a3, *a4 - 16, *a5 - 16, *a6 - 16);
  uint64_t v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((void *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

BOOL mlir::OperationPass<mlir::ModuleOp>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(unsigned char *)(a1 + 32) || v4 != *(void *)(a1 + 24)) {
    return 0;
  }
  if (v4) {
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  }
  return 1;
}

char **llvm::SmallVector<std::unique_ptr<mlir::PDLPatternConfigSet>,6u>::~SmallVector(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    size_t v4 = &v2[8 * v3];
    do
    {
      uint64_t v6 = (char **)*((void *)v4 - 1);
      v4 -= 8;
      uint64_t v5 = v6;
      *(void *)size_t v4 = 0;
      if (v6)
      {
        BOOL v7 = *v5;
        uint64_t v8 = *((unsigned int *)v5 + 2);
        if (v8)
        {
          uint64_t v9 = 8 * v8;
          BOOL v10 = v7 - 8;
          do
          {
            uint64_t v11 = *(void *)&v10[v9];
            *(void *)&v10[v9] = 0;
            if (v11) {
              (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            }
            v9 -= 8;
          }
          while (v9);
          BOOL v7 = *v5;
        }
        if (v7 != (char *)(v5 + 2)) {
          free(v7);
        }
        MEMORY[0x21667D3C0](v5, 0x1080C407559D7D1);
      }
    }
    while (v4 != v2);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

llvm::raw_ostream *OUTLINED_FUNCTION_0_11(const void *a1, size_t a2)
{
  return llvm::raw_ostream::operator<<(v2, a1, a2);
}

void mlir::anec::getANECConvCanonicalizationPatterns()
{
}

void mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::~ANEC_PadDeconvCrop1Folding(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop1Folding *this)
{
  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  int v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop1Folding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v64[4] = *MEMORY[0x263EF8340];
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((unsigned int *)a2 + 17);
    uint64_t v46 = *((void *)a2 + 9);
    uint64_t v47 = v5;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v6 = *((void *)a2 + 9);
    uint64_t v7 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  v41[0] = v6;
  v41[1] = v7;
  uint64_t v40 = 0;
  uint64_t v62 = v64;
  v64[0] = a2;
  uint64_t v63 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v38 = v8;
  BOOL v39 = v8;
  uint64_t NextResultAtOffset = *(uint64_t **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v38, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  if (!DefiningOp)
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_48;
    }
    uint64_t v19 = v38;
    if (mlir::RewriterBase::Listener::classof(v18))
    {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
  uint64_t v10 = DefiningOp;
  int v11 = v63;
  if (v63 >= HIDWORD(v63))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v64, v63 + 1, 8);
    int v11 = v63;
  }
  v62[v11] = v10;
  LODWORD(v63) = v63 + 1;
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dimension", 9), !v13))
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dimension", 9uLL);
  }
  if (!InherentAttr
    || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v14 = *((void *)a3 + 2);
    if (v14 && mlir::RewriterBase::Listener::classof(v14))
    {
      uint64_t v15 = *((void *)a2 + 3);
LABEL_18:
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t **))(*(void *)v14 + 64))(v14, v15, v16, &NextResultAtOffset);
LABEL_22:
      uint64_t v18 = v17;
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v20 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"offset", 6), !v21)) {
    uint64_t v20 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "offset", 6uLL);
  }
  if (v20 && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (!*((unsigned char *)a2 + 47) || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"size", 4), !v23)) {
      uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "size", 4uLL);
    }
    if (!v22 || *(_UNKNOWN **)(*(void *)v22 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v14 = *((void *)a3 + 2);
      if (v14 && mlir::RewriterBase::Listener::classof(v14))
      {
        uint64_t v15 = *((void *)a2 + 3);
        goto LABEL_18;
      }
      goto LABEL_47;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v24 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"step", 4), !v25)) {
      uint64_t v24 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "step", 4uLL);
    }
    if (!v24 || *(_UNKNOWN **)(*(void *)v24 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v14 = *((void *)a3 + 2);
      if (v14 && mlir::RewriterBase::Listener::classof(v14))
      {
        uint64_t v15 = *((void *)a2 + 3);
        goto LABEL_18;
      }
      goto LABEL_47;
    }
    uint64_t v53 = v24;
    uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v45, 0);
    uint64_t NextResultAtOffset = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
    uint64_t v28 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
    uint64_t v29 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v40, 0);
    uint64_t v57 = mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0);
    unint64_t v30 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v57);
    uint64_t v31 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v39, 0);
    uint64_t v37 = mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0);
    uint64_t v61 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v37);
    uint64_t v32 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v39, 0);
    BOOL v33 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0);
    {
      goto LABEL_22;
    }
    mlir::IntegerAttr::getValue((uint64_t)&v53, (llvm::APInt *)&NextResultAtOffset);
    int v34 = v59;
    if (v59 >= 0x41)
    {
      if (v34 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&NextResultAtOffset) >= 0x41)
      {
        if (NextResultAtOffset) {
          MEMORY[0x21667D390](NextResultAtOffset, 0x1000C8000313F17);
        }
        goto LABEL_62;
      }
      uint64_t v35 = *NextResultAtOffset;
      MEMORY[0x21667D390]();
      if (v35 != 1)
      {
LABEL_62:
        goto LABEL_22;
      }
    }
    else if (NextResultAtOffset != (uint64_t *)1)
    {
      goto LABEL_62;
    }
    uint64_t v36 = *(void *)(v62[1] + 24);
    uint64_t NextResultAtOffset = *(uint64_t **)(*v62 + 24);
    uint64_t v59 = v36;
    uint64_t v60 = *(void *)(v62[2] + 24);
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, &NextResultAtOffset, (mlir::MLIRContext *)3, 0);
  }
  uint64_t v14 = *((void *)a3 + 2);
  if (v14 && mlir::RewriterBase::Listener::classof(v14))
  {
    uint64_t v15 = *((void *)a2 + 3);
    goto LABEL_18;
  }
LABEL_47:
  uint64_t v18 = 0;
LABEL_48:
  if (v62 != v64) {
    free(v62);
  }
  return v18;
}

uint64_t mlir::anec::anonymous namespace'::static_dag_matcher_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, void *a16, void *a17, uint64_t *a18)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v63 = v20;
  if (!v20)
  {
    uint64_t v52 = *(void *)(a1 + 16);
    if (v52)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
      if (!result) {
        return result;
      }
      uint64_t v54 = *(void *)(a2 + 24);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
    }
    return 0;
  }
  *a6 = v20;
  uint64_t v62 = *(void *)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v63, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v62);
  if (DefiningOp)
  {
    uint64_t v27 = DefiningOp;
    {
      uint64_t v28 = *(unsigned int *)(a3 + 8);
      if (v28 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v28 + 1, 8);
        LODWORD(v28) = *(_DWORD *)(a3 + 8);
      }
      *(void *)(*(void *)a3 + 8 * v28) = v27;
      ++*(_DWORD *)(a3 + 8);
      *a17 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v63, 1u);
      a17[1] = v29;
      if (!*(unsigned char *)(a2 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"stride", 6), !v31)) {
        uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "stride", 6uLL);
      }
      uint64_t v32 = InherentAttr;
      if (InherentAttr && (mlir::DenseIntElementsAttr::classof(InherentAttr) & 1) != 0)
      {
        *a11 = v32;
        if (!*(unsigned char *)(a2 + 47) || (uint64_t v33 = mlir::Operation::getInherentAttr(a2, (uint64_t)"dilation", 8), !v34)) {
          uint64_t v33 = mlir::DictionaryAttr::get(a2 + 56, "dilation", 8uLL);
        }
        uint64_t v35 = v33;
        if (v33 && (mlir::DenseIntElementsAttr::classof(v33) & 1) != 0)
        {
          *a10 = v35;
          if (!*(unsigned char *)(a2 + 47) || (uint64_t v36 = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding", 7), !v37)) {
            uint64_t v36 = mlir::DictionaryAttr::get(a2 + 56, "padding", 7uLL);
          }
          uint64_t v38 = v36;
          if (v36 && (mlir::DenseIntElementsAttr::classof(v36) & 1) != 0)
          {
            *a12 = v38;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v39 = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding_mode", 12), !v40))
            {
              uint64_t v39 = mlir::DictionaryAttr::get(a2 + 56, "padding_mode", 0xCuLL);
            }
            uint64_t v41 = v39;
            if (!v39 || (mlir::anec::PaddingModeAttr::classof(v39) & 1) == 0) {
              uint64_t v41 = mlir::anec::BoxCoordinateModeAttr::get(*(void *)(a1 + 8), 0);
            }
            *a8 = v41;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t IntegerAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"groups", 6), !v43))
            {
              uint64_t IntegerAttr = mlir::DictionaryAttr::get(a2 + 56, "groups", 6uLL);
            }
            if (!IntegerAttr
              || *(_UNKNOWN **)(*(void *)IntegerAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
            {
              uint64_t v44 = (mlir::Builder *)(a1 + 8);
              IntegerCFNumberType Type = mlir::Builder::getIntegerType(v44, 0x40u, 0);
              uint64_t IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)v44, IntegerType, 1uLL);
            }
            *a9 = IntegerAttr;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v46 = mlir::Operation::getInherentAttr(a2, (uint64_t)"channel_wise", 12), !v47))
            {
              uint64_t v46 = mlir::DictionaryAttr::get(a2 + 56, "channel_wise", 0xCuLL);
            }
            if (!v46
              || *(_UNKNOWN **)(*(void *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
            {
              uint64_t v46 = 0;
            }
            *a5 = v46;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v48 = mlir::Operation::getInherentAttr(a2, (uint64_t)"kernel_scale", 12), !v49))
            {
              uint64_t v48 = mlir::DictionaryAttr::get(a2 + 56, "kernel_scale", 0xCuLL);
            }
            uint64_t v50 = v48;
            if (v48)
            {
              if (mlir::DenseFPElementsAttr::classof(v48)) {
                uint64_t v51 = v50;
              }
              else {
                uint64_t v51 = 0;
              }
            }
            else
            {
              uint64_t v51 = 0;
            }
            *a4 = v51;
            if (!*(unsigned char *)(a2 + 47)
              || (uint64_t v58 = mlir::Operation::getInherentAttr(a2, (uint64_t)"kernel_zero_point", 17), !v59))
            {
              uint64_t v58 = mlir::DictionaryAttr::get(a2 + 56, "kernel_zero_point", 0x11uLL);
            }
            uint64_t v60 = v58;
            if (v58)
            {
              if (mlir::DenseIntElementsAttr::classof(v58)) {
                uint64_t v61 = v60;
              }
              else {
                uint64_t v61 = 0;
              }
            }
            else
            {
              uint64_t v61 = 0;
            }
            *a15 = v61;
            return 1;
          }
          uint64_t v52 = *(void *)(a1 + 16);
          if (v52)
          {
            uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
            if (!result) {
              return result;
            }
            uint64_t v54 = *(void *)(a2 + 24);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
          }
        }
        else
        {
          uint64_t v52 = *(void *)(a1 + 16);
          if (v52)
          {
            uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
            if (!result) {
              return result;
            }
            uint64_t v54 = *(void *)(a2 + 24);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
          }
        }
      }
      else
      {
        uint64_t v52 = *(void *)(a1 + 16);
        if (v52)
        {
          uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
          if (!result) {
            return result;
          }
          uint64_t v54 = *(void *)(a2 + 24);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v52 + 64))(v52, v54, v55, &v62);
        }
      }
    }
    return 0;
  }
  uint64_t v56 = *(void *)(a1 + 16);
  if (!v56) {
    return 0;
  }
  uint64_t v57 = v63;
  uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
  if (result) {
  return result;
  }
}

uint64_t mlir::Operation::getAttrOfType<mlir::IntegerAttr>(uint64_t a1, const void *a2, size_t a3)
{
  if (!*(unsigned char *)(a1 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a1, (uint64_t)a2, a3), !v7)) {
    uint64_t result = mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  }
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)result + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::tryCanonDeconvPaddings(mlir::Operation *a1, mlir::Operation *a2, mlir::Operation **a3, uint64_t a4, void *a5, uint64_t *a6, uint64_t *a7)
{
  v124[23] = *MEMORY[0x263EF8340];
  uint64_t v109 = a2;
  unint64_t v110 = a1;
  while (1)
  {
    a5 = (void *)*a5;
    if (!a5) {
      break;
    }
    if (*(_UNKNOWN **)(*(void *)(a5[2] + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id)
    {
      int v11 = "Pattern can be further extended";
LABEL_34:
      uint64_t v120 = v11;
      v122[8] = 259;
      mlir::Operation::emitOpError((uint64_t)a1, (void ***)&v120, (uint64_t)&v123);
      uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
      if (v123) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
      return v12;
    }
  }
  uint64_t v12 = *(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v110) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)v12;
  unint64_t v14 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    uint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_14:
  }
    uint64_t v22 = 0;
  uint64_t v123 = v12;
  v124[0] = v22;
  mlir::ShapedType::getShape((mlir::ShapedType *)&v123);
  if (v23 != 4)
  {
    a1 = v110;
    int v11 = "Conv2D input must be 4D";
    goto LABEL_34;
  }
  uint64_t v120 = v122;
  uint64_t v121 = 0xA00000000;
  uint64_t PaddingSizes = mlir::anec::Padding::getPaddingSizes((mlir::anec::Padding *)&v109);
  mlir::getValues<unsigned long long>(PaddingSizes, (uint64_t)&v120);
  char v25 = (char *)v120;
  uint64_t v26 = v121 - 4;
  if (v121 != 4)
  {
    uint64_t v27 = v120;
    while (!*v27++)
    {
      if (!--v26) {
        goto LABEL_20;
      }
    }
    uint64_t v117 = "Padding on Batch / Depth / Channel dimension not supported";
    v119[8] = 259;
    mlir::Operation::emitOpError((uint64_t)v110, (void ***)&v117, (uint64_t)&v123);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
    if (v123) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
    goto LABEL_124;
  }
LABEL_20:
  uint64_t v29 = (char *)v120 + 8 * v121;
  long long v30 = *((_OWORD *)v29 - 3);
  long long v31 = *((_OWORD *)v29 - 1);
  *((_OWORD *)v120 + 1) = *((_OWORD *)v29 - 2);
  *((_OWORD *)v25 + 2) = v31;
  *(_OWORD *)char v25 = v30;
  uint64_t v32 = v120;
  unint64_t v33 = v25 - (unsigned char *)v120 + 48;
  LODWORD(v121) = v33 >> 3;
  if (!v121)
  {
LABEL_24:
    int v35 = 0;
    uint64_t v36 = 0;
    goto LABEL_25;
  }
  uint64_t v34 = 8 * (v33 >> 3);
  while (!*v32)
  {
    ++v32;
    v34 -= 8;
    if (!v34) {
      goto LABEL_24;
    }
  }
  uint64_t v117 = v119;
  uint64_t v118 = 0x500000000;
  uint64_t PaddingModes = mlir::anec::Padding::getPaddingModes((mlir::anec::Padding *)&v109);
  mlir::getValues<unsigned long long>(PaddingModes, (uint64_t)&v117);
  uint64_t v45 = (char *)v117;
  uint64_t v46 = (char *)v117 + 8 * v118;
  long long v47 = *(_OWORD *)(v46 - 24);
  *((void *)v117 + 2) = *((void *)v46 - 1);
  *(_OWORD *)uint64_t v45 = v47;
  uint64_t v48 = v117;
  LODWORD(v118) = (unint64_t)(v45 - (unsigned char *)v117 + 24) >> 3;
  if (*((void *)v120 + 2) || *((void *)v120 + 3))
  {
    if (*((void *)v120 + 4) || *((void *)v120 + 5))
    {
      char v49 = (char *)v117 + 8;
      if (*((void *)v117 + 1) != *((void *)v117 + 2))
      {
        unint64_t v111 = "Padding mode must be the same on all axes";
        __int16 v114 = 259;
        mlir::Operation::emitOpError((uint64_t)v110, (void ***)&v111, (uint64_t)&v123);
        uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
        if (v123) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
        uint64_t v36 = 0;
        int v50 = 0;
        uint64_t v48 = v117;
        goto LABEL_118;
      }
    }
    else
    {
      char v49 = (char *)v117 + 8;
    }
  }
  else
  {
    char v49 = (char *)v117 + 16;
  }
  uint64_t v36 = *(void *)v49;
  int v50 = 1;
LABEL_118:
  if (v48 != v119) {
    free(v48);
  }
  if (!v50) {
    goto LABEL_124;
  }
  if (v36 == 6)
  {
    mlir::anec::Padding::getBackgroundValue(&v109, (uint64_t)&v123);
    double v96 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v123);
    v97 = (void *)v124[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v98) == v97) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v124);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v124);
    }
    if (v96 == 0.0) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = 6;
    }
  }
  int v35 = 1;
LABEL_25:
  uint64_t v117 = v119;
  uint64_t v118 = 0x600000000;
  uint64_t Padding = mlir::anec::Deconvolution::getPadding((mlir::anec::Deconvolution *)&v110);
  mlir::getValues<unsigned long long>(Padding, (uint64_t)&v117);
  if (v118)
  {
    uint64_t v38 = (uint64_t *)v117;
    uint64_t v39 = 8 * v118 - 8;
    do
    {
      uint64_t v40 = *v38++;
      BOOL v41 = v40 != 0;
      if (v40) {
        BOOL v42 = 1;
      }
      else {
        BOOL v42 = v39 == 0;
      }
      v39 -= 8;
    }
    while (!v42);
  }
  else
  {
    BOOL v41 = 0;
  }
  uint64_t PaddingMode = mlir::anec::Deconvolution::getPaddingMode(&v110);
  if ((v35 & v41) != 1 || v36 == PaddingMode)
  {
    if (v41) {
      uint64_t v53 = PaddingMode;
    }
    else {
      uint64_t v53 = 0;
    }
    if (v35) {
      uint64_t v53 = v36;
    }
    if ((v53 & 0xFFFFFFFFFFFFFFFDLL) == 0)
    {
      uint64_t v101 = v53;
      v115[0] = v116;
      v115[1] = (void *)0x300000000;
      uint64_t Stride = mlir::anec::Deconvolution::getStride((mlir::anec::Deconvolution *)&v110);
      mlir::getValues<long long>(Stride, (uint64_t)v115);
      uint64_t v57 = *((void *)v120 + 3);
      uint64_t v58 = *((void *)v117 + 3);
      uint64_t v60 = *((void *)v115[0] + 1);
      uint64_t v59 = *((void *)v115[0] + 2);
      uint64_t v61 = *((void *)v117 + 2) + v60 * *((void *)v120 + 2);
      unint64_t v105 = 0;
      unint64_t v106 = 0;
      *(void *)&long long v107 = v61;
      *((void *)&v107 + 1) = v58 + v60 * v57;
      uint64_t v62 = *((void *)v117 + 5) + v59 * *((void *)v120 + 5);
      *(void *)&long long v108 = *((void *)v117 + 4) + v59 * *((void *)v120 + 4);
      *((void *)&v108 + 1) = v62;
      if (a4)
      {
        uint64_t v63 = &a3[a4];
        while (1)
        {
          uint64_t v104 = *a3;
          float v64 = (uint64_t *)(*(void *)(mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v104) + 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v64) {
            goto LABEL_79;
          }
          uint64_t v65 = *v64;
          unint64_t v66 = mlir::TypeID::get<mlir::ShapedType>();
          unint64_t v67 = *(unsigned int *)(v65 + 16);
          if (!v67) {
            goto LABEL_79;
          }
          uint64_t v68 = *(void **)(v65 + 8);
          uint64_t v69 = &v68[2 * v67];
          do
          {
            unint64_t v70 = v67 >> 1;
            uint64_t v71 = &v68[2 * (v67 >> 1)];
            unint64_t v73 = *v71;
            unint64_t v72 = v71 + 2;
            v67 += ~(v67 >> 1);
            if (v73 < v66) {
              uint64_t v68 = v72;
            }
            else {
              unint64_t v67 = v70;
            }
          }
          while (v67);
          if (v68 != v69 && *v68 == v66) {
            uint64_t v74 = (uint64_t *)v68[1];
          }
          else {
LABEL_79:
          }
            uint64_t v74 = 0;
          v102[0] = v64;
          v102[1] = v74;
          Dimension = mlir::anec::InputView::getDimension(&v104);
          mlir::ShapedType::getShape((mlir::ShapedType *)v102);
          uint64_t DimFromIndex = mlir::anec::getDimFromIndex((mlir::anec *)Dimension, v76);
          if ((DimFromIndex & 0xFF00000000) == 0 || (DimFromIndex - 3) >= 2) {
            break;
          }
          Offset = mlir::anec::InputView::getOffset(&v104);
          unsigned int v79 = mlir::anec::InputView::getDimension(&v104);
          uint64_t v80 = *(void *)(mlir::ShapedType::getShape((mlir::ShapedType *)v102) + 8 * v79);
          Size = mlir::anec::InputView::getSize(&v104);
          mlir::ShapedType::getShape((mlir::ShapedType *)v102);
          uint64_t v83 = (uint64_t *)(&v105 + 2 * ((void)mlir::anec::InputView::getDimension(&v104) - v82));
          float v84 = (char *)Size + (void)Offset - v80 + v83[7];
          v83[6] -= (uint64_t)Offset;
          v83[7] = (uint64_t)v84;
          if (++a3 == v63) {
            goto LABEL_85;
          }
        }
        unint64_t v111 = "Cropping on batch / depth / channel dimension not supported";
        __int16 v114 = 259;
        mlir::Operation::emitOpError((uint64_t)v110, (void ***)&v111, (uint64_t)&v123);
        uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
        if (v123) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
        }
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
      }
      else
      {
LABEL_85:
        if ((v105 & 0x8000000000000000) != 0)
        {
          unint64_t v86 = v105 >> 63;
        }
        else
        {
          unint64_t v85 = v106;
          if ((v106 & 0x8000000000000000) == 0)
          {
            unint64_t v85 = v107;
            if ((v107 & 0x8000000000000000) == 0)
            {
              unint64_t v85 = *((void *)&v107 + 1);
              if ((*((void *)&v107 + 1) & 0x8000000000000000) == 0)
              {
                unint64_t v85 = v108;
                if ((v108 & 0x8000000000000000) == 0) {
                  unint64_t v85 = *((void *)&v108 + 1);
                }
              }
            }
          }
          unint64_t v86 = v85 >> 63;
        }
        if (v86)
        {
          unint64_t v111 = "Cropping output required";
          __int16 v114 = 259;
          mlir::Operation::emitOpError((uint64_t)v110, (void ***)&v111, (uint64_t)&v123);
          uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v123);
        }
        else
        {
          v102[0] = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v110) + 8) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v123 = (uint64_t)mlir::Type::cast<mlir::ShapedType>(v102);
          v124[0] = v87;
          uint64_t Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)&v123);
          llvm::SmallVector<long long,5u>::SmallVector<long long,void>(&v111, Shape, v89);
          if (v112 <= 4)
          {
            uint64_t v123 = 1;
            llvm::SmallVectorImpl<long long>::insert_one_impl<long long>((uint64_t)&v111, (uint64_t)v111 + 16, &v123);
          }
          uint64_t v90 = *((void *)v111 + 3);
          if ((uint64_t)v107 >= v90) {
            goto LABEL_111;
          }
          if (*((uint64_t *)&v107 + 1) >= v90) {
            goto LABEL_111;
          }
          uint64_t v91 = *((void *)v111 + 4);
          if ((uint64_t)v108 >= v91 || *((uint64_t *)&v108 + 1) >= v91) {
            goto LABEL_111;
          }
          uint64_t v92 = 2 * v90;
          BOOL v93 = v90 < -1;
          uint64_t v94 = ((_BYTE)v90 + 1) & 1;
          if (v93) {
            uint64_t v94 = -v94;
          }
          if (*((void *)&v107 + 1) + (void)v107 > v92 - *((void *)v115[0] + 1) - v94) {
            goto LABEL_111;
          }
          uint64_t v95 = (v91 + 1) & 1;
          if (v91 < -1) {
            uint64_t v95 = -v95;
          }
          if (*((void *)&v108 + 1) + (void)v108 <= 2 * v91 - *((void *)v115[0] + 2) - v95)
          {
            if (a6) {
              *a6 = v101;
            }
            if (a7)
            {
              llvm::SmallVectorImpl<unsigned long long>::resize((uint64_t)a7, 6uLL);
              uint64_t v99 = *a7;
              *(void *)uint64_t v99 = 0;
              *(void *)(v99 + 8) = 0;
              long long v100 = v108;
              *(_OWORD *)(v99 + 16) = v107;
              *(_OWORD *)(v99 + 32) = v100;
            }
            uint64_t v12 = 1;
          }
          else
          {
LABEL_111:
            v102[0] = (uint64_t *)"Padding value not supported by ANEC";
            __int16 v103 = 259;
            mlir::Operation::emitOpError((uint64_t)v110, (void ***)v102, (uint64_t)&v123);
            uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
            mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v123);
          }
          if (v111 != &v113) {
            free(v111);
          }
        }
      }
      if (v115[0] != v116) {
        free(v115[0]);
      }
      goto LABEL_65;
    }
    uint64_t v54 = v110;
    uint64_t v55 = "Unsupported padding mode";
  }
  else
  {
    uint64_t v54 = v110;
    uint64_t v55 = "Padding mode of Deconv and Pad ops must be the same";
  }
  unint64_t v111 = v55;
  __int16 v114 = 259;
  mlir::Operation::emitOpError((uint64_t)v54, (void ***)&v111, (uint64_t)&v123);
  uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v123);
  if (v123) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v123);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v124);
LABEL_65:
  if (v117 != v119) {
    free(v117);
  }
LABEL_124:
  if (v120 != v122) {
    free(v120);
  }
  return v12;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

char *mlir::anec::anonymous namespace'::canonDeconvPaddings(uint64_t a1, uint64_t a2, mlir::Operation *a3, mlir::Operation *a4, mlir::Operation **a5, uint64_t a6, void *a7)
{
  v39[10] = *MEMORY[0x263EF8340];
  uint64_t v34 = a4;
  int v35 = a3;
  uint64_t v33 = 0;
  char v37 = v39;
  uint64_t v38 = 0xA00000000;
  uint64_t v36 = 6;
  uint64_t v9 = (mlir::Builder *)(a1 + 8);
  IntegerCFNumberType Type = mlir::Builder::getIntegerType(v9, 0x40u, 0);
  int v11 = (void *)mlir::RankedTensorType::get((uint64_t)&v36, 1, IntegerType, 0);
  uint64_t v12 = v11;
  if (!v11) {
    goto LABEL_10;
  }
  uint64_t v13 = *v11;
  unint64_t v14 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v15 = *(unsigned int *)(v13 + 16);
  if (!v15) {
    goto LABEL_10;
  }
  uint64_t v16 = *(void **)(v13 + 8);
  uint64_t v17 = &v16[2 * v15];
  do
  {
    unint64_t v18 = v15 >> 1;
    uint64_t v19 = &v16[2 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14) {
      uint64_t v16 = v20;
    }
    else {
      unint64_t v15 = v18;
    }
  }
  while (v15);
  if (v16 != v17 && *v16 == v14) {
    uint64_t v22 = v16[1];
  }
  else {
LABEL_10:
  }
    uint64_t v22 = 0;
  uint64_t v36 = mlir::DenseElementsAttr::getFromRawBuffer(v12, v22, v37, 8 * v38, 8, 1, 0);
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v34);
  uint64_t Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v35);
  uint64_t Stride = mlir::anec::Deconvolution::getStride((mlir::anec::Deconvolution *)&v35);
  uint64_t Dilation = mlir::anec::Deconvolution::getDilation((mlir::anec::Deconvolution *)&v35);
  unsigned int Groups = mlir::anec::Convolution::getGroups(&v35);
  BOOL ChannelWise = mlir::anec::Deconvolution::getChannelWise(&v35);
  uint64_t KernelScaleAttr = mlir::anec::Convolution::getKernelScaleAttr(&v35);
  uint64_t KernelZeroPointAttr = mlir::anec::Convolution::getKernelZeroPointAttr(&v35);
  uint64_t v23 = mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::MemRefType>,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr&,mlir::anec::PaddingMode &,unsigned long long,BOOL,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>((uint64_t *)v9, a2, &Input, &Filter, &Stride, &Dilation, &v36, (unint64_t *)&v33, (unint64_t *)&Groups, (char *)&ChannelWise, &KernelScaleAttr, &KernelZeroPointAttr);
  if (v37 != v39) {
    free(v37);
  }
  return (char *)v23 - 16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t mlir::anec::anonymous namespace'::static_dag_matcher_0(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (*(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Padding,void>::id) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v32 = v9;
  if (v9)
  {
    *a6 = v9;
    *a3 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v32, 0);
    a3[1] = v14;
    if (*(unsigned char *)(a2 + 47)
      && (uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding_modes", 13), v16))
    {
      uint64_t v17 = InherentAttr;
      if (!InherentAttr)
      {
LABEL_24:
        uint64_t v25 = *(void *)(a1 + 16);
        if (v25)
        {
          uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
          if (result) {
          return result;
          }
        }
        return 0;
      }
    }
    else
    {
      uint64_t v17 = mlir::DictionaryAttr::get(a2 + 56, "padding_modes", 0xDuLL);
      if (!v17) {
        goto LABEL_24;
      }
    }
    if ((mlir::DenseIntElementsAttr::classof(v17) & 1) == 0) {
      goto LABEL_24;
    }
    *a7 = v17;
    if (!*(unsigned char *)(a2 + 47) || (uint64_t v18 = mlir::Operation::getInherentAttr(a2, (uint64_t)"padding_sizes", 13), !v19)) {
      uint64_t v18 = mlir::DictionaryAttr::get(a2 + 56, "padding_sizes", 0xDuLL);
    }
    uint64_t v20 = v18;
    if (v18 && (mlir::DenseIntElementsAttr::classof(v18) & 1) != 0)
    {
      *a4 = v20;
      if (!*(unsigned char *)(a2 + 47) || (uint64_t v21 = mlir::Operation::getInherentAttr(a2, (uint64_t)"background_value", 16), !v22)) {
        uint64_t v21 = mlir::DictionaryAttr::get(a2 + 56, "background_value", 0x10uLL);
      }
      if (v21 && *(_UNKNOWN **)(*(void *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      {
        *a5 = v21;
        return 1;
      }
      uint64_t v23 = *(void *)(a1 + 16);
      if (!v23) {
        return 0;
      }
      uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
      if (result) {
    }
      }
    else
    {
      uint64_t v27 = *(void *)(a1 + 16);
      if (!v27) {
        return 0;
      }
      uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
      if (result) {
    }
      }
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 16);
    if (!v26) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Deconvolution type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_1>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp1");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_0>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::Padding type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_1>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.padding' to have attribute 'padding_modes' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_2>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.padding' to have attribute 'padding_sizes' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::anec::Padding &,mlir::DenseIntElementsAttr &)::$_3>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.padding' to have attribute 'background_value' of type '::mlir::FloatAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_2>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_3>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::DenseFPElementsAttr &,mlir::UnitAttr &,mlir::anec::Deconvolution &,mlir::DenseIntElementsAttr &,mlir::anec::PaddingModeAttr &,mlir::IntegerAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::FloatAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::OperandRange &,mlir::OperandRange &,mlir::anec::Padding &)::$_4>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'dimension' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'offset' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'size' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'step' of type '::mlir::IntegerAttr'");
}

void *llvm::SmallVector<long long,5u>::SmallVector<long long,void>(void *a1, const void *a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  size_t v6 = 8 * a3;
  if ((unint64_t)(8 * a3) >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, (8 * a3) >> 3, 8);
    unsigned int v7 = *((_DWORD *)a1 + 2);
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v7 = 0;
  if (a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    unsigned int v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + (v6 >> 3);
  return a1;
}

void llvm::SmallVectorImpl<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'conv_op, pad_op, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop1Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'iv1_step' failed to satisfy constraint: ''");
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::anec::Deconvolution,mlir::detail::TypedValue<mlir::MemRefType>,mlir::detail::TypedValue<mlir::MemRefType>,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr,mlir::DenseIntElementsAttr&,mlir::anec::PaddingMode &,unsigned long long,BOOL,mlir::DenseFPElementsAttr,mlir::DenseIntElementsAttr>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unint64_t *a8, unint64_t *a9, char *a10, uint64_t *a11, uint64_t *a12)
{
  v31[38] = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  uint64_t v21 = mlir::RegisteredOperationName::lookup((int8x16_t *)"anec.deconvolution", (const unsigned __int8 *)0x12, Context);
  if (!v22)
  {
    __int16 v30 = 1283;
    v29[2] = (uint64_t)"anec.deconvolution";
    v29[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v28 = 259;
    llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)v31);
    llvm::report_fatal_error((llvm::Twine *)v31, 1);
  }
  mlir::OperationState::OperationState(v31, a2, v21);
  mlir::anec::Deconvolution::build(a1, (uint64_t)v31, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10, *a11, *a12);
  uint64_t v23 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v31);
  if (*(_UNKNOWN **)(*((void *)v23 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v31);
  return v24;
}

void mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::~ANEC_PadDeconvCrop2Folding(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop2Folding *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvCrop2Folding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v85[4] = *MEMORY[0x263EF8340];
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    uint64_t v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v65[0] = v5;
  v65[1] = v6;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  v62[0] = v5;
  v62[1] = v6;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  uint64_t v83 = v85;
  v85[0] = a2;
  uint64_t v84 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v57 = v7;
  uint64_t v58 = v7;
  int v78 = *(uint64_t **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v57, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v78);
  if (!DefiningOp)
  {
    uint64_t v13 = *((void *)a3 + 2);
    if (!v13) {
      goto LABEL_85;
    }
    uint64_t v17 = v57;
    if (mlir::RewriterBase::Listener::classof(v13))
    {
      goto LABEL_18;
    }
    goto LABEL_84;
  }
  uint64_t v9 = DefiningOp;
  uint64_t v10 = *(void **)(*(void *)(DefiningOp + 48) + 16);
  BOOL v11 = v10 == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id;
  if (v10 == &mlir::detail::TypeIDResolver<mlir::anec::InputView,void>::id) {
    uint64_t v12 = (uint64_t *)DefiningOp;
  }
  else {
    uint64_t v12 = 0;
  }
  int v78 = v12;
  if (!v11)
  {
    uint64_t v13 = *((void *)a3 + 2);
    if (!v13) {
      goto LABEL_85;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v14 = *(void *)(v9 + 24);
LABEL_14:
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t *))(*(void *)v13 + 64))(v13, v14, v15, &NextResultAtOffset);
LABEL_18:
      uint64_t v13 = v16;
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  uint64_t v60 = DefiningOp;
  uint64_t NextResultAtOffset = *(void *)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v78, 0) + 24);
  uint64_t v18 = mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  if (!v18)
  {
    uint64_t v13 = *((void *)a3 + 2);
    if (!v13) {
      goto LABEL_85;
    }
    uint64_t v23 = v78;
    if (mlir::RewriterBase::Listener::classof(v13))
    {
      uint64_t v14 = v23[3];
      goto LABEL_14;
    }
    goto LABEL_84;
  }
  uint64_t v19 = v18;
  {
    int v20 = v84;
    if (v84 >= HIDWORD(v84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
      int v20 = v84;
    }
    v83[v20] = v19;
    LODWORD(v84) = v84 + 1;
    if (!*(unsigned char *)(v9 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v9, (uint64_t)"dimension", 9), !v22)) {
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v9 + 56, "dimension", 9uLL);
    }
    if (!InherentAttr
      || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v13 = *((void *)a3 + 2);
      if (!v13) {
        goto LABEL_85;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v14 = *(void *)(v9 + 24);
        goto LABEL_14;
      }
      goto LABEL_84;
    }
    if (!*(unsigned char *)(v9 + 47) || (uint64_t v24 = mlir::Operation::getInherentAttr(v9, (uint64_t)"offset", 6), !v25)) {
      uint64_t v24 = mlir::DictionaryAttr::get(v9 + 56, "offset", 6uLL);
    }
    if (!v24 || *(_UNKNOWN **)(*(void *)v24 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v13 = *((void *)a3 + 2);
      if (!v13) {
        goto LABEL_85;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v14 = *(void *)(v9 + 24);
        goto LABEL_14;
      }
      goto LABEL_84;
    }
    if (!*(unsigned char *)(v9 + 47) || (uint64_t v26 = mlir::Operation::getInherentAttr(v9, (uint64_t)"size", 4), !v27)) {
      uint64_t v26 = mlir::DictionaryAttr::get(v9 + 56, "size", 4uLL);
    }
    if (!v26 || *(_UNKNOWN **)(*(void *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      goto LABEL_18;
    }
    uint64_t v28 = mlir::Operation::getAttrOfType<mlir::IntegerAttr>(v9, "step", 4uLL);
    if (!v28)
    {
      goto LABEL_18;
    }
    uint64_t v68 = v28;
    llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v83, v9);
    if (!*((unsigned char *)a2 + 47) || (uint64_t v29 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dimension", 9), !v30)) {
      uint64_t v29 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dimension", 9uLL);
    }
    if (!v29 || *(_UNKNOWN **)(*(void *)v29 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
LABEL_57:
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t **))(*(void *)v31 + 64))(v31, v32, v33, &v78);
      goto LABEL_18;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v34 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"offset", 6), !v35)) {
      uint64_t v34 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "offset", 6uLL);
    }
    if (!v34 || *(_UNKNOWN **)(*(void *)v34 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
      goto LABEL_57;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v36 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"size", 4), !v37)) {
      uint64_t v36 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "size", 4uLL);
    }
    if (!v36 || *(_UNKNOWN **)(*(void *)v36 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
      goto LABEL_57;
    }
    if (!*((unsigned char *)a2 + 47) || (uint64_t v38 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"step", 4), !v39)) {
      uint64_t v38 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "step", 4uLL);
    }
    if (!v38 || *(_UNKNOWN **)(*(void *)v38 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v31 = *((void *)a3 + 2);
      if (!v31 || !mlir::RewriterBase::Listener::classof(v31)) {
        goto LABEL_84;
      }
      uint64_t v32 = *((void *)a2 + 3);
      goto LABEL_57;
    }
    uint64_t v74 = v38;
    uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v63, 0);
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
    BOOL v42 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
    uint64_t v43 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v61, 0);
    uint64_t v82 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
    uint64_t v44 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v82);
    uint64_t v45 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v60, 0);
    uint64_t v56 = mlir::detail::OpResultImpl::getNextResultAtOffset(v45, 0);
    int v78 = (uint64_t *)mlir::Value::getDefiningOp((mlir::Value *)&v56);
    uint64_t v46 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
    uint64_t v55 = mlir::detail::OpResultImpl::getNextResultAtOffset(v46, 0);
    uint64_t v79 = mlir::Value::getDefiningOp((mlir::Value *)&v55);
    uint64_t v47 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v58, 0);
    uint64_t v48 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v47, 0);
    {
      goto LABEL_18;
    }
    mlir::IntegerAttr::getValue((uint64_t)&v68, (llvm::APInt *)&v78);
    int v49 = v79;
    if (v79 >= 0x41)
    {
      if (v49 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) >= 0x41)
      {
        if (v78) {
          MEMORY[0x21667D390](v78, 0x1000C8000313F17);
        }
        goto LABEL_100;
      }
      uint64_t v50 = *v78;
      MEMORY[0x21667D390]();
      if (v50 != 1)
      {
LABEL_100:
        goto LABEL_18;
      }
    }
    else if (v78 != (uint64_t *)1)
    {
      goto LABEL_100;
    }
    mlir::IntegerAttr::getValue((uint64_t)&v74, (llvm::APInt *)&v78);
    int v51 = v79;
    if (v79 >= 0x41)
    {
      if (v51 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) >= 0x41)
      {
        if (v78) {
          MEMORY[0x21667D390](v78, 0x1000C8000313F17);
        }
        goto LABEL_106;
      }
      uint64_t v52 = *v78;
      MEMORY[0x21667D390]();
      if (v52 != 1)
      {
LABEL_106:
        goto LABEL_18;
      }
    }
    else if (v78 != (uint64_t *)1)
    {
      goto LABEL_106;
    }
    uint64_t v53 = *(void *)(v83[1] + 24);
    int v78 = *(uint64_t **)(*v83 + 24);
    uint64_t v79 = v53;
    uint64_t v54 = *(void *)(v83[3] + 24);
    uint64_t v80 = *(void *)(v83[2] + 24);
    uint64_t v81 = v54;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, &v78, (mlir::MLIRContext *)4, 0);
  }
LABEL_84:
  uint64_t v13 = 0;
LABEL_85:
  if (v83 != v85) {
    free(v83);
  }
  return v13;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#12}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#13}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#14}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3 || !mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16))) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), uint64_t))(*(void *)v3 + 64);
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "castedOp1 is not ::mlir::anec::InputView type");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp1");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'dimension' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'offset' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'size' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'step' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'dimension' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'offset' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'size' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#11}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.input_view' to have attribute 'step' of type '::mlir::IntegerAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#12}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'conv_op, pad_op, crop_op, out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#13}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'iv1_step' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvCrop2Folding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#14}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'iv2_step' failed to satisfy constraint: ''");
}

void mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::~ANEC_PadDeconvFolding(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvFolding *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_PadDeconvFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v52[4] = *MEMORY[0x263EF8340];
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    uint64_t v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v44[0] = v5;
  v44[1] = v6;
  uint64_t v42 = 0;
  uint64_t v50 = v52;
  v52[0] = a2;
  uint64_t v51 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Deconvolution,void>::id) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = 0;
  }
  BOOL v41 = v7;
  uint64_t v43 = v7;
  v49[0] = *(void **)(mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v41, 0) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v49);
  if (!DefiningOp)
  {
    uint64_t v34 = *((void *)a3 + 2);
    if (!v34) {
      goto LABEL_70;
    }
    char v35 = v41;
    if (mlir::RewriterBase::Listener::classof(v34))
    {
LABEL_65:
      uint64_t v34 = v36;
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  uint64_t v9 = DefiningOp;
  int v10 = v51;
  if (v51 >= HIDWORD(v51))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, v51 + 1, 8);
    int v10 = v51;
  }
  v50[v10] = v9;
  LODWORD(v51) = v51 + 1;
  mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v41, 1u);
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"stride", 6), !v12))
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "stride", 6uLL);
  }
  if (!InherentAttr || (mlir::DenseIntElementsAttr::classof(InherentAttr) & 1) == 0)
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (!v37 || !mlir::RewriterBase::Listener::classof(v37)) {
      goto LABEL_69;
    }
    uint64_t v38 = *((void *)a2 + 3);
    goto LABEL_64;
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v13 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"dilation", 8), !v14)) {
    uint64_t v13 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "dilation", 8uLL);
  }
  if (!v13 || (mlir::DenseIntElementsAttr::classof(v13) & 1) == 0)
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (!v37 || !mlir::RewriterBase::Listener::classof(v37)) {
      goto LABEL_69;
    }
    uint64_t v38 = *((void *)a2 + 3);
    goto LABEL_64;
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v15 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding", 7), !v16)) {
    uint64_t v15 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding", 7uLL);
  }
  if (!v15 || (mlir::DenseIntElementsAttr::classof(v15) & 1) == 0)
  {
    uint64_t v37 = *((void *)a3 + 2);
    if (!v37 || !mlir::RewriterBase::Listener::classof(v37)) {
      goto LABEL_69;
    }
    uint64_t v38 = *((void *)a2 + 3);
LABEL_64:
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v37 + 64))(v37, v38, v39, v49);
    goto LABEL_65;
  }
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t v17 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"padding_mode", 12), !v18))
  {
    uint64_t v17 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "padding_mode", 0xCuLL);
  }
  if (!v17 || (mlir::anec::PaddingModeAttr::classof(v17) & 1) == 0) {
    mlir::anec::BoxCoordinateModeAttr::get(*((void *)a3 + 1), 0);
  }
  if (!*((unsigned char *)a2 + 47) || (uint64_t v19 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"groups", 6), !v20)) {
    uint64_t v19 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "groups", 6uLL);
  }
  if (!v19 || *(_UNKNOWN **)(*(void *)v19 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    IntegerCFNumberType Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 0x40u, 0);
    mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL);
  }
  if (!*((unsigned char *)a2 + 47) || (mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"channel_wise", 12), !v22)) {
    mlir::DictionaryAttr::get((uint64_t)a2 + 56, "channel_wise", 0xCuLL);
  }
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t v23 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_scale", 12), !v24))
  {
    uint64_t v23 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_scale", 0xCuLL);
  }
  if (v23) {
    mlir::DenseFPElementsAttr::classof(v23);
  }
  if (!*((unsigned char *)a2 + 47)
    || (uint64_t v25 = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"kernel_zero_point", 17), !v26))
  {
    uint64_t v25 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "kernel_zero_point", 0x11uLL);
  }
  if (v25) {
    mlir::DenseIntElementsAttr::classof(v25);
  }
  uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v43, 0);
  v49[0] = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
  uint64_t v28 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v49);
  uint64_t v29 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v42, 0);
  uint64_t NextResultAtOffset = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v29, 0);
  char v30 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset);
  uint64_t v31 = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v43, 0);
  uint64_t v32 = (void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0);
  {
    uint64_t v33 = *(void **)(v50[1] + 24);
    v49[0] = *(void **)(*v50 + 24);
    v49[1] = v33;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v49, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v37 = *((void *)a3 + 2);
  if (v37 && mlir::RewriterBase::Listener::classof(v37))
  {
    uint64_t v38 = *((void *)a2 + 3);
    goto LABEL_64;
  }
LABEL_69:
  uint64_t v34 = 0;
LABEL_70:
  if (v50 != v52) {
    free(v50);
  }
  return v34;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "There's no operation that defines operand 0 of castedOp0");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'stride' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'dilation' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.deconvolution' to have attribute 'padding' of type '::mlir::DenseIntElementsAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_PadDeconvFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out, pad_op' failed to satisfy constraint: ''");
}

void mlir::anec::getANECLateCanonicalizationPatterns()
{
}

void mlir::anec::anonymous namespace'::ANEC_GOCFolding::~ANEC_GOCFolding(mlir::anec::_anonymous_namespace_::ANEC_GOCFolding *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_GOCFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::GOC,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v23[0] = v5;
  v23[1] = v5;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v23, 0);
  uint64_t v7 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v23, 1u);
  uint64_t v8 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v23, 2u);
  char v24 = *(void **)(ODSOperands + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp
    || (uint64_t v10 = DefiningOp,
        uint64_t v11 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        ((*(uint64_t (**)(void, uint64_t))(**(void **)(v10 + 48) + 32))(*(void *)(v10 + 48), v11) & 1) == 0))
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18 || !mlir::RewriterBase::Listener::classof(v18)) {
      goto LABEL_21;
    }
    uint64_t v19 = *((void *)a2 + 3);
    goto LABEL_20;
  }
  char v24 = *(void **)(v7 + 24);
  uint64_t v12 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!v12
    || (uint64_t v13 = v12,
        uint64_t v14 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        ((*(uint64_t (**)(void, uint64_t))(**(void **)(v13 + 48) + 32))(*(void *)(v13 + 48), v14) & 1) == 0))
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18 || !mlir::RewriterBase::Listener::classof(v18)) {
      goto LABEL_21;
    }
    uint64_t v19 = *((void *)a2 + 3);
LABEL_20:
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v18 + 64))(v18, v19, v20, &v24);
    goto LABEL_22;
  }
  char v24 = *(void **)(v8 + 24);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v16 + 48) + 32))(*(void *)(v16 + 48), v17))
    {
      char v24 = *(void **)(*v25 + 24);
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)1, 0);
    }
  }
  uint64_t v18 = *((void *)a3 + 2);
  if (v18 && mlir::RewriterBase::Listener::classof(v18))
  {
    uint64_t v19 = *((void *)a2 + 3);
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v21 = 0;
LABEL_22:
  if (v25 != v27) {
    free(v25);
  }
  return v21;
}

char *mlir::anec::anonymous namespace'::foldGOCLike(uint64_t a1, uint64_t a2, uint64_t *a3, mlir::AffineMap *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v118[6] = *MEMORY[0x263EF8340];
  uint64_t v106 = a5;
  uint64_t v116 = (float *)v118;
  uint64_t v117 = 0xC00000000;
  uint64_t v113 = (float *)v115;
  uint64_t v114 = 0xC00000000;
  unint64_t v110 = v112;
  uint64_t v111 = 0xC00000000;
  uint64_t v12 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(a7 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::matchConstantWithFloatVector<float>(a7, (uint64_t)&v116);
  }
  else
  {
    mlir::matchConstantWithIntVector<float>(a7, (uint64_t)&v116);
  }
  char v24 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(a8 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v24 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v24 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::matchConstantWithFloatVector<float>(a8, (uint64_t)&v113);
    if (!a9) {
      goto LABEL_87;
    }
  }
  else
  {
    mlir::matchConstantWithIntVector<float>(a8, (uint64_t)&v113);
    if (!a9) {
      goto LABEL_87;
    }
  }
  uint64_t v36 = *(void **)(*(void *)mlir::getElementTypeOrSelf((void *)(*(void *)(a9 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v36 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v36 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    mlir::matchConstantWithFloatVector<float>(a9, (uint64_t)&v110);
  }
  else
  {
    mlir::matchConstantWithIntVector<float>(a9, (uint64_t)&v110);
  }
LABEL_87:
  if (a6 < 1)
  {
    uint64_t v40 = 1;
    uint64_t v37 = a3;
    unint64_t v38 = (unint64_t)a4;
    goto LABEL_96;
  }
  uint64_t v37 = a3;
  unint64_t v38 = (unint64_t)a4;
  if (a6 == 1)
  {
    unint64_t v39 = 0;
    uint64_t v40 = 1;
LABEL_94:
    unint64_t v45 = a6 - v39;
    uint64_t v46 = &a3[v39];
    do
    {
      uint64_t v47 = *v46++;
      v40 *= v47;
      --v45;
    }
    while (v45);
    goto LABEL_96;
  }
  unint64_t v39 = a6 & 0xFFFFFFFFFFFFFFFELL;
  BOOL v41 = a3 + 1;
  uint64_t v42 = 1;
  unint64_t v43 = a6 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v44 = 1;
  do
  {
    v42 *= *(v41 - 1);
    v44 *= *v41;
    v41 += 2;
    v43 -= 2;
  }
  while (v43);
  uint64_t v40 = v44 * v42;
  if (v39 != a6) {
    goto LABEL_94;
  }
LABEL_96:
  uint64_t v48 = a6 + 1;
  if (a6 + 1 >= v38)
  {
    uint64_t v50 = 1;
    goto LABEL_105;
  }
  unint64_t v49 = v38 + ~a6;
  if (v49 < 2)
  {
    uint64_t v50 = 1;
LABEL_103:
    unint64_t v55 = v38 - v48;
    uint64_t v56 = &v37[v48];
    do
    {
      uint64_t v57 = *v56++;
      v50 *= v57;
      --v55;
    }
    while (v55);
    goto LABEL_105;
  }
  v48 += v49 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v51 = &v37[a6 + 2];
  uint64_t v52 = 1;
  unint64_t v53 = v49 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v54 = 1;
  do
  {
    v52 *= *(v51 - 1);
    v54 *= *v51;
    v51 += 2;
    v53 -= 2;
  }
  while (v53);
  uint64_t v50 = v54 * v52;
  if (v49 != (v49 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_103;
  }
LABEL_105:
  uint64_t v58 = v37[a6];
  long long v107 = v109;
  uint64_t v108 = 0xC00000000;
  if (v40 >= 1)
  {
    uint64_t v59 = 0;
    unsigned int v60 = 0;
    for (uint64_t i = 0; i != v40; ++i)
    {
      if (v58 >= 1)
      {
        uint64_t v62 = 0;
        uint64_t v63 = v59;
        do
        {
          uint64_t v64 = v50;
          uint64_t v65 = v63;
          if (v50 >= 1)
          {
            do
            {
              if (v117 == 1) {
                uint64_t v66 = 0;
              }
              else {
                uint64_t v66 = v65;
              }
              float v67 = v116[v66];
              if (v111)
              {
                if (v111 == 1) {
                  uint64_t v68 = 0;
                }
                else {
                  uint64_t v68 = v62;
                }
                float v67 = v67 + *((float *)v110 + v68);
              }
              if (v114 == 1) {
                uint64_t v69 = 0;
              }
              else {
                uint64_t v69 = v62;
              }
              float v70 = v113[v69];
              if (v60 >= HIDWORD(v108))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v109, v60 + 1, 4);
                unsigned int v60 = v108;
              }
              *((float *)v107 + v60) = v67 * v70;
              unsigned int v60 = v108 + 1;
              LODWORD(v108) = v108 + 1;
              ++v65;
              --v64;
            }
            while (v64);
          }
          ++v62;
          v63 += v50;
        }
        while (v62 != v58);
      }
      v59 += v50 * v58;
    }
  }
  if (mlir::Type::isF16((mlir::Type *)&v106))
  {
    uint64_t v104 = (void *)mlir::MemRefType::get(a3, a4, v106, 0, 0, 0);
    F32CFNumberType Type = mlir::Builder::getF32Type((mlir::Float32Type **)(a1 + 8), v71);
    uint64_t v73 = (void *)mlir::RankedTensorType::get((uint64_t)a3, (uint64_t)a4, F32Type, 0);
    v102[0] = mlir::createRawElementsAttr(v73, v107, (const void *)(4 * v108));
    v102[1] = v74;
    uint64_t v75 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a1 + 8), a2, (uint64_t *)&v104, v102);
  }
  else
  {
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    uint64_t v76 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)a3, (uint64_t)a4, v106, 0);
    uint64_t v77 = (uint64_t)v76;
    if (!v76) {
      goto LABEL_138;
    }
    uint64_t v78 = *v76;
    unint64_t v79 = mlir::TypeID::get<mlir::ShapedType>();
    unint64_t v80 = *(unsigned int *)(v78 + 16);
    if (!v80) {
      goto LABEL_138;
    }
    uint64_t v81 = *(void **)(v78 + 8);
    uint64_t v82 = &v81[2 * v80];
    do
    {
      unint64_t v83 = v80 >> 1;
      uint64_t v84 = &v81[2 * (v80 >> 1)];
      unint64_t v86 = *v84;
      unint64_t v85 = v84 + 2;
      v80 += ~(v80 >> 1);
      if (v86 < v79) {
        uint64_t v81 = v85;
      }
      else {
        unint64_t v80 = v83;
      }
    }
    while (v80);
    if (v81 != v82 && *v81 == v79) {
      uint64_t v87 = v81[1];
    }
    else {
LABEL_138:
    }
      uint64_t v87 = 0;
    mlir::mps::CPUNDArray::tryMakeAliasedArray(v77, v87, (uint64_t)&v104, (uint64_t)v102);
    if (mlir::Type::isSignedInteger((mlir::Type *)&v106, 8))
    {
      if (v108)
      {
        unint64_t v88 = 0;
        uint64_t v89 = v103;
        do
        {
          uint64_t v90 = llroundf(*((float *)v107 + v88));
          if (v90 >= 127) {
            uint64_t v90 = 127;
          }
          if (v90 <= -128) {
            LOBYTE(v90) = 0x80;
          }
          *(unsigned char *)(v89 + v88++) = v90;
        }
        while (v88 < v108);
      }
    }
    else
    {
      mlir::Type::isUnsignedInteger((mlir::Type *)&v106, 8);
      if (v108)
      {
        unint64_t v91 = 0;
        uint64_t v92 = v103;
        do
        {
          uint64_t v93 = llroundf(*((float *)v107 + v91));
          if (v93 >= 255) {
            uint64_t v93 = 255;
          }
          *(unsigned char *)(v92 + v91++) = v93 & ~(v93 >> 63);
        }
        while (v91 < v108);
      }
    }
    ElementsAttr = v104;
    if (v104) {
      uint64_t v95 = v105;
    }
    else {
      ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v102, 0, 0);
    }
    uint64_t v104 = ElementsAttr;
    uint64_t v105 = v95;
    uint64_t v101 = mlir::MemRefType::get(a3, a4, v106, 0, 0, 0);
    uint64_t v75 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a1 + 8), a2, &v101, &v104);
    mlir::mps::CPUNDArray::~CPUNDArray((mlir::mps::CPUNDArray *)v102);
  }
  if (v107 != v109) {
    free(v107);
  }
  if (v110 != v112) {
    free(v110);
  }
  if (v113 != (float *)v115) {
    free(v113);
  }
  if (v116 != (float *)v118) {
    free(v116);
  }
  return (char *)v75 - 16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'scale' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_GOCFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'bias' failed to satisfy constraint: 'constant value'");
}

uint64_t mlir::matchConstantWithIntVector<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!a1) {
    return 0;
  }
  uint64_t v8 = (uint64_t **)&v9;
  uint64_t v11 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp) {
    return 0;
  }
  if (!mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v8, DefiningOp)) {
    return 0;
  }
  v7[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v9);
  v7[1] = v4;
  if (*(_UNKNOWN **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return 0;
  }
  uint64_t v5 = 1;
  mlir::getIntValues<float>(v9, v10, a2, 1);
  return v5;
}

void mlir::anec::anonymous namespace'::ANEC_InvertFolding::~ANEC_InvertFolding(mlir::anec::_anonymous_namespace_::ANEC_InvertFolding *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_InvertFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  uint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::Invert,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v21[0] = v5;
  v21[1] = v5;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)v21, 0);
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"epsilon", 7), v8))
  {
    if (!InherentAttr) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "epsilon", 7uLL);
    if (!InherentAttr)
    {
LABEL_10:
      uint64_t v9 = *((void *)a3 + 2);
      if (v9 && mlir::RewriterBase::Listener::classof(v9))
      {
        uint64_t v10 = *((void *)a2 + 3);
LABEL_13:
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v9 + 64))(v9, v10, v11, &ElementTypeOrSelf);
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    goto LABEL_10;
  }
  uint64_t v22 = InherentAttr;
  Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v22, (uint64_t)&ElementTypeOrSelf);
  uint64_t v14 = (void *)v27[0];
  if (llvm::APFloatBase::PPCDoubleDouble(Value) == v14)
  {
    int v19 = *(unsigned char *)(v27[1] + 28) & 7;
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v27);
    if (v19 == 3)
    {
LABEL_16:
      ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(ODSOperands + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
      {
        ElementTypeOrSelf = *(void **)(ODSOperands + 24);
        uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
        if (DefiningOp)
        {
          uint64_t v17 = DefiningOp;
          uint64_t v18 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
          if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v17 + 48) + 32))(*(void *)(v17 + 48), v18))
          {
            ElementTypeOrSelf = *(void **)(*(void *)v23 + 24);
            mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)1, 0);
          }
        }
        uint64_t v9 = *((void *)a3 + 2);
        if (v9 && mlir::RewriterBase::Listener::classof(v9))
        {
          uint64_t v10 = *((void *)a2 + 3);
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v9 = *((void *)a3 + 2);
        if (v9 && mlir::RewriterBase::Listener::classof(v9))
        {
          uint64_t v10 = *((void *)a2 + 3);
          goto LABEL_13;
        }
      }
      goto LABEL_30;
    }
  }
  else
  {
    int v15 = v28 & 7;
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v27);
    if (v15 == 3) {
      goto LABEL_16;
    }
  }
  uint64_t v9 = *((void *)a3 + 2);
  if (v9 && mlir::RewriterBase::Listener::classof(v9))
  {
    uint64_t v10 = *((void *)a2 + 3);
    goto LABEL_13;
  }
LABEL_30:
  uint64_t v12 = 0;
LABEL_31:
  if (v23 != v25) {
    free(v23);
  }
  return v12;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "expected op 'anec.invert' to have attribute 'epsilon' of type '::mlir::FloatAttr'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'attr' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_InvertFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'constant value'");
}

void mlir::anec::anonymous namespace'::ANEC_MulFolding::~ANEC_MulFolding(mlir::anec::_anonymous_namespace_::ANEC_MulFolding *this)
{
  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  unint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::anec::_anonymous_namespace_::ANEC_MulFolding *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::anec::ElementwiseMult,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v22 = v5;
  uint64_t v23 = v5;
  uint64_t ODSOperands = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v22, 0);
  uint64_t v7 = mlir::anec::Convolution::getODSOperands((mlir::anec::Convolution *)&v22, 1u);
  uint64_t ODSResults = mlir::anec::Convolution::getODSResults((mlir::anec::Convolution *)&v23, 0);
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(ODSResults, 0);
  if (!v10)
  {
    uint64_t v17 = *((void *)a3 + 2);
    if (!v17 || !mlir::RewriterBase::Listener::classof(v17)) {
      goto LABEL_20;
    }
    uint64_t v18 = *((void *)a2 + 3);
    goto LABEL_19;
  }
  uint64_t v24 = *(void **)(ODSOperands + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp
    || (uint64_t v12 = DefiningOp,
        uint64_t v13 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
        ((*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 48) + 32))(*(void *)(v12 + 48), v13) & 1) == 0))
  {
    uint64_t v17 = *((void *)a3 + 2);
    if (!v17 || !mlir::RewriterBase::Listener::classof(v17)) {
      goto LABEL_20;
    }
    uint64_t v18 = *((void *)a2 + 3);
LABEL_19:
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(int, uint64_t), void **))(*(void *)v17 + 64))(v17, v18, v19, &v24);
    goto LABEL_21;
  }
  uint64_t v24 = *(void **)(v7 + 24);
  uint64_t v14 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v15 + 48) + 32))(*(void *)(v15 + 48), v16))
    {
      uint64_t v24 = *(void **)(*v25 + 24);
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)1, 0);
    }
  }
  uint64_t v17 = *((void *)a3 + 2);
  if (v17 && mlir::RewriterBase::Listener::classof(v17))
  {
    uint64_t v18 = *((void *)a2 + 3);
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v20 = 0;
LABEL_21:
  if (v25 != v27) {
    free(v25);
  }
  return v20;
}

uint64_t mlir::anec::anonymous namespace'::getMultBroadcastAxis(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v21);
  unint64_t v1 = (uint64_t *)(*(void *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&DefiningOp) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v1) {
    goto LABEL_10;
  }
  uint64_t v2 = *v1;
  unint64_t v3 = mlir::TypeID::get<mlir::ShapedType>();
  unint64_t v4 = *(unsigned int *)(v2 + 16);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void **)(v2 + 8);
  uint64_t v6 = &v5[2 * v4];
  do
  {
    unint64_t v7 = v4 >> 1;
    char v8 = &v5[2 * (v4 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v4);
  if (v5 != v6 && *v5 == v3) {
    uint64_t v11 = v5[1];
  }
  else {
LABEL_10:
  }
    uint64_t v11 = 0;
  v19[0] = v1;
  v19[1] = v11;
  uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)v19);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v13;
    uint64_t v16 = -1;
    while (1)
    {
      if (*(void *)(Shape + 8 * v14) != 1)
      {
        BOOL v17 = v16 == -1;
        uint64_t v16 = v14;
        if (!v17) {
          break;
        }
      }
      ++v14;
      v15 -= 8;
      if (!v15) {
        return v16 & ~(v16 >> 63);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v16 = -1;
    return v16 & ~(v16 >> 63);
  }
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'out' failed to satisfy constraint: ''");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'x' failed to satisfy constraint: 'constant value'");
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::anec::anonymous namespace'::ANEC_MulFolding::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(int a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, "entities 'scale' failed to satisfy constraint: 'constant value'");
}

void mlir::anec::anonymous namespace'::CanonicalizeCast::~CanonicalizeCast(mlir::anec::_anonymous_namespace_::CanonicalizeCast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Cast>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Cast>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::anec::Cast>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t mlir::anec::anonymous namespace'::CanonicalizeCast::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float16Type **a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v21 = a2;
  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)&v21);
  unint64_t v19 = *(void *)(mlir::anec::Convolution::getResult((mlir::anec::Convolution *)&v21) + 8) & 0xFFFFFFFFFFFFFFF8;
  long long v22 = xmmword_211F09730;
  long long v23 = unk_211F09740;
  F16CFNumberType Type = mlir::Builder::getF16Type(a3 + 1, v4);
  uint64_t v6 = (void *)mlir::RankedTensorType::get((uint64_t)&v22, 4, F16Type, 0);
  long long v22 = xmmword_211F09730;
  long long v23 = unk_211F09740;
  uint64_t v8 = mlir::Builder::getF16Type(a3 + 1, v7);
  uint64_t v18 = mlir::MemRefType::get((uint64_t *)&v22, (mlir::AffineMap *)4, v8, 0, 0, 0);
  uint64_t v9 = *(void *)(v21 + 24);
  *(void *)&long long v22 = mlir::createSplatF16ElementsAttr(v6, 1.0);
  *((void *)&v22 + 1) = v10;
  BOOL v17 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 1), v9, &v18, (void **)&v22);
  uint64_t v11 = *(void *)(v21 + 24);
  *(void *)&long long v22 = mlir::createSplatF16ElementsAttr(v6, 0.0);
  *((void *)&v22 + 1) = v12;
  uint64_t v16 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 1), v11, &v18, (void **)&v22);
  uint64_t v13 = v21;
  uint64_t v14 = mlir::OpBuilder::create<mlir::anec::GOC,mlir::ShapedType &,mlir::Value &,mlir::mps::ConstantOp &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(void *)(v21 + 24), (uint64_t *)&v19, &Input, &v17, &v16);
  (*((void (**)(mlir::Float16Type **, uint64_t, ZinIrHalH13g *))*a3 + 4))(a3, v13, v14);
  return 1;
}

uint64_t mlir::anec::writeSingleRegionPlist(uint64_t a1, void *a2, uint64_t a3)
{
  v121[1] = *MEMORY[0x263EF8340];
  if (a1) {
    mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a1);
  }
  unint64_t v6 = *(unsigned int *)(a1 + 44);
  if ((v6 & 0x7FFFFF) != 0) {
    unint64_t v7 = (void *)(((a1 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
  }
                  + 32 * *(unsigned int *)(a1 + 40));
  else {
    unint64_t v7 = 0;
  }
  if ((void *)*v7 != v7)
  {
    uint64_t v8 = v7[1];
    uint64_t v9 = v8 ? v8 - 8 : 0;
    uint64_t v10 = *(uint64_t **)(v9 + 48);
    uint64_t v11 = *(void *)(v9 + 56) - (void)v10;
    if (v11)
    {
      for (uint64_t i = 8 * (v11 >> 3); i; i -= 8)
      {
        uint64_t v13 = *v10;
        uint64_t v14 = (std::__shared_weak_count *)a2[1];
        v108[0] = *a2;
        v108[1] = v14;
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            if (!v15) {
              return 0;
            }
          }
          else
          {
            int v16 = v15;
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
            if (!v16) {
              return 0;
            }
          }
        }
        {
          return 0;
        }
        ++v10;
      }
    }
  }
  *(void *)&v117[0] = a2;
  *((void *)&v117[0] + 1) = a3;
  if (!mlir::detail::walk<mlir::ForwardIterator>((mlir::ForwardIterator *)a1, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::anec::writeSingleRegionPlist(mlir::Operation *,std::shared_ptr<mlir::anec::ANECIRNetwork> const&,mlir::anec::ANECIRWeights &)::$_0>, (uint64_t)v117, 1))return 0; {
  BOOL v17 = (mlir::ForwardIterator *)a1;
  }
  do
  {
    uint64_t v18 = (mlir::Block *)*((void *)v17 + 2);
    if (!v18)
    {
      BOOL v17 = 0;
      if (!*(unsigned char *)(a1 + 47)) {
        goto LABEL_34;
      }
      goto LABEL_29;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v18);
    BOOL v17 = (mlir::ForwardIterator *)ParentOp;
  }
  while (ParentOp
       && *(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id);
  if (!*(unsigned char *)(a1 + 47))
  {
LABEL_34:
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a1 + 56, "sym_name", 8uLL);
    if (!InherentAttr) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(a1, (uint64_t)"sym_name", 8);
  if (!v22) {
    goto LABEL_34;
  }
  if (!InherentAttr)
  {
LABEL_35:
    uint64_t v23 = 0;
    goto LABEL_36;
  }
LABEL_31:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v23 = InherentAttr;
  }
  else {
    uint64_t v23 = 0;
  }
LABEL_36:
  uint64_t v112 = v23;
  long long v119 = v121;
  uint64_t v120 = 0x100000000;
  *(void *)&v117[0] = &v112;
  *((void *)&v117[0] + 1) = &v119;
  v114[0] = (mlir::Operation *)v117;
  uint64_t v20 = 1;
  mlir::detail::walk<mlir::ForwardIterator>(v17, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_120updateNetworkIOTypesES3_RKNSt3__110shared_ptrINSB_13ANECIRNetworkEEEE3__0NS1_9placement10RegionCallEvEENSD_9enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESS_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)v114, 1);
  if (v120)
  {
    if (v120 == 1)
    {
      uint64_t v24 = *v119;
      uint64_t v25 = *(uint64_t **)(*a2 + 8);
      uint64_t v26 = *(unsigned int *)(*a2 + 16);
      char v27 = *(uint64_t **)(*a2 + 104);
      uint64_t v28 = *(unsigned int *)(*a2 + 112);
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = 0x7800000000;
      if (*(unsigned char *)(a1 + 47) && (uint64_t v29 = mlir::Operation::getInherentAttr(a1, (uint64_t)"io_info", 7), v30))
      {
        if (!v29) {
          goto LABEL_54;
        }
      }
      else if (!mlir::DictionaryAttr::contains(a1 + 56, "io_info", 7uLL))
      {
LABEL_54:
        if (v26)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 32 * v26;
          do
          {
            uint64_t v39 = *v25;
            uint64_t v40 = *v25 + 8;
            int v41 = *(char *)(*v25 + 31);
            if (v41 >= 0) {
              uint64_t v42 = (int8x16_t *)(*v25 + 8);
            }
            else {
              uint64_t v42 = *(int8x16_t **)(*v25 + 8);
            }
            if (v41 >= 0) {
              unint64_t v43 = (const unsigned __int8 *)*(unsigned __int8 *)(*v25 + 31);
            }
            else {
              unint64_t v43 = *(const unsigned __int8 **)(v39 + 16);
            }
            int Key = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v42, v43);
            if (Key == -1 || Key == (unint64_t)v110)
            {
              *(void *)&v117[0] = *(void *)(*(void *)(v24 + 72) + v34 + 24);
              uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v117);
              if (DefiningOp)
              {
                uint64_t v46 = DefiningOp;
                uint64_t v47 = *(void **)(*(void *)(DefiningOp + 48) + 16);
                BOOL v48 = v47 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id;
                unint64_t v49 = v47 == &mlir::detail::TypeIDResolver<mlir::placement::TensorToMemref,void>::id
                    ? (mlir::Operation *)DefiningOp
                    : 0;
                v114[0] = v49;
                if (v48)
                {
                  uint64_t Input = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v114);
                  uint64_t v51 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v114);
                  if ((v52 & 0xFF00000000) == 0)
                  {
LABEL_146:
                    uint64_t v20 = 0;
                    goto LABEL_147;
                  }
                  *(_DWORD *)(v39 + 104) = v52;
                  *(void *)&v117[0] = mlir::placement::MemrefToTensor::getInterleaveAttr(v114);
                  if (*(void *)&v117[0])
                  {
                    uint64_t UInt = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)v117);
                    unsigned int ANENextSupportedInterleaveValue = mlir::getANENextSupportedInterleaveValue(UInt);
                  }
                  else
                  {
                    unsigned int ANENextSupportedInterleaveValue = 1;
                  }
                  *(void *)(v39 + 96) = ANENextSupportedInterleaveValue;
                }
              }
            }
            else
            {
              int v55 = *(char *)(v39 + 31);
              if (v55 >= 0) {
                uint64_t v56 = (int8x16_t *)v40;
              }
              else {
                uint64_t v56 = *(int8x16_t **)(v39 + 8);
              }
              if (v55 >= 0) {
                uint64_t v57 = (const unsigned __int8 *)*(unsigned __int8 *)(v39 + 31);
              }
              else {
                uint64_t v57 = *(const unsigned __int8 **)(v39 + 16);
              }
              int v58 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v56, v57);
              if (v58 != -1 && v58 != (unint64_t)v110)
              {
                int v59 = *(char *)(v39 + 31);
                if (v59 >= 0) {
                  unsigned int v60 = (int8x16_t *)v40;
                }
                else {
                  unsigned int v60 = *(int8x16_t **)(v39 + 8);
                }
                if (v59 >= 0) {
                  uint64_t v61 = (const unsigned __int8 *)*(unsigned __int8 *)(v39 + 31);
                }
                else {
                  uint64_t v61 = *(const unsigned __int8 **)(v39 + 16);
                }
                int v62 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v60, v61);
                uint64_t v63 = v62;
                if (v62 == -1) {
                  uint64_t v63 = v110;
                }
                uint64_t v64 = *((void *)v109 + v63);
                *(void *)(v39 + 96) = *(void *)(v64 + 104);
                uint64_t v65 = *(void *)(v64 + 56);
                if (*(_DWORD *)(v64 + 64) == 5)
                {
                  int8x16_t v66 = *(int8x16_t *)(v65 + 16);
                  *(int8x16_t *)(v39 + 168) = vextq_s8(*(int8x16_t *)v65, *(int8x16_t *)v65, 8uLL);
                }
                else
                {
                  int8x16_t v66 = *(int8x16_t *)(v65 + 8);
                }
                *(int8x16_t *)(v39 + 152) = vextq_s8(v66, v66, 8uLL);
                *(_DWORD *)(v39 + 104) = *(_DWORD *)(v64 + 112);
                float v67 = *(uint64_t **)(v64 + 8);
                uint64_t v68 = *(unsigned int *)(v64 + 16);
                if (v68 == 5) {
                  *(void *)(v39 + 144) = v67[1];
                }
                uint64_t v36 = (int8x16_t *)&v67[v68];
                uint64_t v37 = v36[-2].i64[1];
                uint64_t v38 = *v67;
                *(int8x16_t *)(v39 + 112) = vextq_s8(v36[-1], v36[-1], 8uLL);
                *(void *)(v39 + 128) = v37;
                *(void *)(v39 + 136) = v38;
              }
            }
            v34 += 32;
            v25 += 2;
          }
          while (v35 != v34);
        }
        if (v28)
        {
          unint64_t v69 = 0;
          uint64_t v70 = v24 - 96;
          uint64_t v71 = (uint64_t *)(v24 - 16);
          do
          {
            uint64_t v73 = *v27;
            uint64_t v74 = *v27 + 8;
            int v75 = *(char *)(*v27 + 31);
            if (v75 >= 0) {
              uint64_t v76 = (int8x16_t *)(*v27 + 8);
            }
            else {
              uint64_t v76 = *(int8x16_t **)(*v27 + 8);
            }
            if (v75 >= 0) {
              uint64_t v77 = (const unsigned __int8 *)*(unsigned __int8 *)(*v27 + 31);
            }
            else {
              uint64_t v77 = *(const unsigned __int8 **)(v73 + 16);
            }
            int v78 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v76, v77);
            if (v78 != -1 && v78 != (unint64_t)v110)
            {
              int v86 = *(char *)(v73 + 31);
              if (v86 >= 0) {
                uint64_t v87 = (int8x16_t *)v74;
              }
              else {
                uint64_t v87 = *(int8x16_t **)(v73 + 8);
              }
              if (v86 >= 0) {
                unint64_t v88 = (const unsigned __int8 *)*(unsigned __int8 *)(v73 + 31);
              }
              else {
                unint64_t v88 = *(const unsigned __int8 **)(v73 + 16);
              }
              int v89 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v87, v88);
              if (v89 != -1 && v89 != (unint64_t)v110)
              {
                int v90 = *(char *)(v73 + 31);
                if (v90 >= 0) {
                  unint64_t v91 = (int8x16_t *)v74;
                }
                else {
                  unint64_t v91 = *(int8x16_t **)(v73 + 8);
                }
                if (v90 >= 0) {
                  uint64_t v92 = (const unsigned __int8 *)*(unsigned __int8 *)(v73 + 31);
                }
                else {
                  uint64_t v92 = *(const unsigned __int8 **)(v73 + 16);
                }
                int v93 = llvm::StringMapImpl::FindKey((uint64_t *)&v109, v91, v92);
                uint64_t v94 = v93;
                if (v93 == -1) {
                  uint64_t v94 = v110;
                }
                uint64_t v95 = *((void *)v109 + v94);
                *(void *)(v73 + 96) = *(void *)(v95 + 104);
                double v96 = *(int8x16_t **)(v95 + 56);
                uint64_t v97 = *(unsigned int *)(v95 + 64);
                if (v97 == 5)
                {
                  uint64_t v99 = v96[1].i64[0];
                  uint64_t v98 = v96[1].i64[1];
                  *(int8x16_t *)(v73 + 152) = vextq_s8(*v96, *v96, 8uLL);
                }
                else
                {
                  uint64_t v98 = v96[-1].i64[v97];
                  if (v97 <= 2) {
                    uint64_t v100 = v97 - 2;
                  }
                  else {
                    uint64_t v100 = v97 - 3;
                  }
                  uint64_t v99 = v96->i64[v100];
                }
                *(void *)(v73 + 136) = v98;
                *(void *)(v73 + 144) = v99;
                *(_DWORD *)(v73 + 128) = *(_DWORD *)(v95 + 112);
              }
              goto LABEL_102;
            }
            if (v69 > 5)
            {
              uint64_t v79 = *(void *)(v70 - 24 * (v69 - 5));
              if (!v79) {
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v79 = *v71;
              if (!*v71) {
                goto LABEL_102;
              }
            }
            unint64_t v80 = *(mlir::Operation **)(v79 + 16);
            if (*(_UNKNOWN **)(*((void *)v80 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::MemrefToTensor,void>::id) {
              uint64_t v81 = v80;
            }
            else {
              uint64_t v81 = 0;
            }
            v114[0] = v81;
            if (v81)
            {
              uint64_t v82 = mlir::anec::Convolution::getResult((mlir::anec::Convolution *)v114);
              uint64_t v83 = mlir::anec::Deconvolution::getInput((mlir::anec::Deconvolution *)v114);
              if ((v84 & 0xFF00000000) == 0) {
                goto LABEL_146;
              }
              *(_DWORD *)(v73 + 128) = v84;
              *(void *)&v117[0] = mlir::placement::MemrefToTensor::getInterleaveAttr(v114);
              if (*(void *)&v117[0])
              {
                uint64_t v85 = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)v117);
                unsigned int v72 = mlir::getANENextSupportedInterleaveValue(v85);
              }
              else
              {
                unsigned int v72 = 1;
              }
              *(void *)(v73 + 96) = v72;
            }
LABEL_102:
            ++v69;
            v71 -= 2;
            v27 += 2;
          }
          while (v28 != v69);
        }
        uint64_t v20 = 1;
LABEL_147:
        if (HIDWORD(v110) && v110)
        {
          uint64_t v101 = 0;
          do
          {
            __int32 v102 = *(llvm **)((char *)v109 + v101);
            if (v102 != (llvm *)-8 && v102 != 0)
            {
              uint64_t v104 = *(void *)v102;
              uint64_t v105 = (void *)*((void *)v102 + 7);
              if (v105 != (void *)((char *)v102 + 72)) {
                free(v105);
              }
              uint64_t v106 = (void *)*((void *)v102 + 1);
              if (v106 != (void *)((char *)v102 + 24)) {
                free(v106);
              }
              llvm::deallocate_buffer(v102, (void *)(v104 + 121));
            }
            v101 += 8;
          }
          while (8 * v110 != v101);
        }
        free(v109);
        goto LABEL_161;
      }
      if (!*(unsigned char *)(a1 + 47) || (uint64_t v31 = mlir::Operation::getInherentAttr(a1, (uint64_t)"io_info", 7), !v32)) {
        uint64_t v31 = mlir::DictionaryAttr::get(a1 + 56, "io_info", 7uLL);
      }
      uint64_t v113 = v31;
      uint64_t v33 = (uint64_t *)mlir::DictionaryAttr::get((uint64_t)&v113, "input", 5uLL);
      mlir::DictionaryAttr::get((uint64_t)&v113, "output", 6uLL);
      int v118 = 0;
      memset(v117, 0, sizeof(v117));
      v114[0] = (mlir::Operation *)&unk_26C3230F0;
      v114[1] = (mlir::Operation *)&v109;
      uint64_t v115 = v114;
      *((void *)&v117[0] + 1) = std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<mlir::WalkResult ()(mlir::Attribute)>>((char **)v117, v114);
      if (v115 == v114)
      {
        (*((void (**)(mlir::Operation **))v114[0] + 4))(v114);
      }
      else if (v115)
      {
        (*((void (**)(void))*v115 + 5))();
      }
      mlir::AttrTypeWalker::walkImpl(v117, v33, 1u);
      mlir::AttrTypeWalker::~AttrTypeWalker((llvm **)v117);
    }
    v114[0] = (mlir::Operation *)"Found more than one call to the same region";
    __int16 v116 = 259;
    mlir::Operation::emitError(a1, (uint64_t)v114, (uint64_t)v117);
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v117);
    if (*(void *)&v117[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v117);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v117 + 8);
  }
LABEL_161:
  if (v119 != v121) {
    free(v119);
  }
  return v20;
}

uint64_t mlir::anec::anonymous namespace'::addInputToNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if ((mlir::anec::getANECIRDataType(a2) & 0xFF00000000) != 0)
  {
    mlir::anec::getANECInputName(a2, &__p);
    operator new();
  }
  return 0;
}

void mlir::anec::createWriteMultiFunctionPass()
{
}

void mlir::anec::getRegionConversionInfo()
{
}

void mlir::anec::ANECIRInput::~ANECIRInput(mlir::anec::ANECIRInput *this)
{
  *((void *)this + 5) = &unk_26C37EFE0;
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)this + 6));
LABEL_3:
  *(void *)this = &unk_26C37EA18;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this + 5) = &unk_26C37EFE0;
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if ((*((char *)this + 71) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*((void **)this + 6));
LABEL_3:
  *(void *)this = &unk_26C37EA18;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21667D3C0);
}

void non-virtual thunk to'mlir::anec::ANECIRInput::~ANECIRInput(void **this)
{
  *this = &unk_26C37EFE0;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
LABEL_3:
  *(this - 5) = &unk_26C37EA18;
  if (*((char *)this - 9) < 0) {
    operator delete(*(this - 4));
  }
}

{
  uint64_t vars8;

  *this = &unk_26C37EFE0;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
LABEL_3:
  *(this - 5) = &unk_26C37EA18;
  if (*((char *)this - 9) < 0) {
    operator delete(*(this - 4));
  }

  JUMPOUT(0x21667D3C0);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRInput *,std::shared_ptr<mlir::anec::ANECIRInput>::__shared_ptr_default_delete<mlir::anec::ANECIRInput,mlir::anec::ANECIRInput>,std::allocator<mlir::anec::ANECIRInput>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<mlir::anec::ANECIRInput *,std::shared_ptr<mlir::anec::ANECIRInput>::__shared_ptr_default_delete<mlir::anec::ANECIRInput,mlir::anec::ANECIRInput>,std::allocator<mlir::anec::ANECIRInput>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)(v1 + 40) = &unk_26C37EFE0;
    if (*(char *)(v1 + 95) < 0)
    {
      operator delete(*(void **)(v1 + 72));
      if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(v1 + 48));
LABEL_4:
    *(void *)uint64_t v1 = &unk_26C37EA18;
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

uint64_t mlir::anec::anonymous namespace'::updateNetworkIOTypes(mlir::Operation *,std::shared_ptr<mlir::anec::ANECIRNetwork> const&)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4)
{
  v29[23] = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(a2);
  uint64_t v27 = ElementTypeOrSelf;
  uint64_t v26 = mlir::getElementTypeOrSelf(a3);
  if (ElementTypeOrSelf == v26)
  {
    return mlir::anec::getANECIRDataType(ElementTypeOrSelf);
  }
  else
  {
    if (mlir::Type::isF32((mlir::Type *)&v27) && mlir::Type::isF16((mlir::Type *)&v26))
    {
      uint64_t v8 = (void *)(*(void *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v8) {
        goto LABEL_13;
      }
      uint64_t v9 = *v8;
      unint64_t v10 = mlir::TypeID::get<mlir::ShapedType>();
      unint64_t v11 = *(unsigned int *)(v9 + 16);
      if (!v11) {
        goto LABEL_13;
      }
      uint64_t v12 = *(void **)(v9 + 8);
      uint64_t v13 = &v12[2 * v11];
      do
      {
        unint64_t v14 = v11 >> 1;
        unsigned __int8 v15 = &v12[2 * (v11 >> 1)];
        unint64_t v17 = *v15;
        int v16 = v15 + 2;
        v11 += ~(v11 >> 1);
        if (v17 < v10) {
          uint64_t v12 = v16;
        }
        else {
          unint64_t v11 = v14;
        }
      }
      while (v11);
      if (v12 != v13 && *v12 == v10) {
        uint64_t v18 = v12[1];
      }
      else {
LABEL_13:
      }
        uint64_t v18 = 0;
      uint64_t v28 = v8;
      v29[0] = v18;
      uint64_t Shape = mlir::ShapedType::getShape((mlir::ShapedType *)&v28);
      uint64_t v21 = *(void *)(Shape + 8 * v20 - 8);
      if (v21 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v27) >> 3) <= a4) {
        return mlir::anec::getANECIRDataType(v27);
      }
      char v22 = "Invalid input strides: row stride must be large enough to represent the whole F32 row";
    }
    else
    {
      char v22 = "Only F16 <-> F32 ANE / host type conversion is supported";
    }
    uint64_t v24 = v22;
    __int16 v25 = 259;
    mlir::Operation::emitError(a1, (uint64_t)&v24, (uint64_t)&v28);
    if (v28) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
    return 0;
  }
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4anec12_GLOBAL__N_120updateNetworkIOTypesES3_RKNSt3__110shared_ptrINSB_13ANECIRNetworkEEEE3__0NS1_9placement10RegionCallEvEENSD_9enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESS_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t *a1, mlir::Operation *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    {
      uint64_t v2 = *a1;
      unint64_t v11 = a2;
      uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData(*(mlir::OpaqueAttr **)v2);
      size_t v5 = v4;
      Callee = (const void *)mlir::placement::RegionCall::getCallee(&v11);
      if (v5 == v7 && (!v5 || !memcmp(AttrData, Callee, v5)))
      {
        uint64_t v8 = *(void *)(v2 + 8);
        uint64_t v9 = v11;
        uint64_t v10 = *(unsigned int *)(v8 + 8);
        if (v10 >= *(_DWORD *)(v8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(*(void *)(v2 + 8), (void *)(v8 + 16), v10 + 1, 8);
          LODWORD(v10) = *(_DWORD *)(v8 + 8);
        }
        *(void *)(*(void *)v8 + 8 * v10) = v9;
        ++*(_DWORD *)(v8 + 8);
      }
    }
  }
}

char *std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<mlir::WalkResult ()(mlir::Attribute)>>(char **a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (v2 - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 4 > v4) {
    unint64_t v4 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 59) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(32 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[32 * v3];
  unint64_t v11 = (void *)a2[3];
  if (v11)
  {
    if (v11 == a2)
    {
      *((void *)v10 + 3) = v10;
      (*(void (**)(void *, char *))(*a2 + 24))(a2, v10);
      uint64_t v2 = a1[1];
    }
    else
    {
      *((void *)v10 + 3) = v11;
      a2[3] = 0;
    }
  }
  else
  {
    *((void *)v10 + 3) = 0;
  }
  uint64_t v12 = &v9[32 * v8];
  uint64_t v13 = v10 + 32;
  unint64_t v14 = *a1;
  if (v2 != *a1)
  {
    do
    {
      unsigned __int8 v15 = v10;
      v10 -= 32;
      int v16 = v2 - 32;
      unint64_t v17 = (char *)*((void *)v2 - 1);
      if (v17)
      {
        if (v16 == v17)
        {
          *((void *)v15 - 1) = v10;
          (*(void (**)(void, char *))(**((void **)v2 - 1) + 24))(*((void *)v2 - 1), v10);
        }
        else
        {
          *((void *)v15 - 1) = v17;
          *((void *)v2 - 1) = 0;
        }
      }
      else
      {
        *((void *)v15 - 1) = 0;
      }
      v2 -= 32;
    }
    while (v16 != v14);
    uint64_t v2 = *a1;
  }
  uint64_t v18 = a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v12;
  if (v18 != v2)
  {
    unint64_t v19 = v18 - 32;
    uint64_t v20 = v18 - 32;
    do
    {
      char v22 = (char *)*((void *)v20 + 3);
      if (v20 == v22)
      {
        (*(void (**)(char *))(*(void *)v20 + 32))(v20);
      }
      else if (v22)
      {
        (*(void (**)(char *))(*(void *)v22 + 40))(v22);
      }
      v19 -= 32;
      BOOL v21 = v20 == v2;
      v20 -= 32;
    }
    while (!v21);
  }
  if (v2) {
    operator delete(v2);
  }
  return v13;
}

void _ZNSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIRZNS2_4anec12_GLOBAL__N_130ParseCustomIOInfoFromAttributeEPNS2_9OperationEE3__0NS2_14DictionaryAttrENS2_9AttributeEvEENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSC_E_NS_9allocatorISL_EEFNS2_10WalkResultESC_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIRZNS2_4anec12_GLOBAL__N_130ParseCustomIOInfoFromAttributeEPNS2_9OperationEE3__0NS2_14DictionaryAttrENS2_9AttributeEvEENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSC_E_NS_9allocatorISL_EEFNS2_10WalkResultESC_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C3230F0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIRZNS2_4anec12_GLOBAL__N_130ParseCustomIOInfoFromAttributeEPNS2_9OperationEE3__0NS2_14DictionaryAttrENS2_9AttributeEvEENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSC_E_NS_9allocatorISL_EEFNS2_10WalkResultESC_EE7__cloneEPNS0_6__baseISP_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C3230F0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIRZNS2_4anec12_GLOBAL__N_130ParseCustomIOInfoFromAttributeEPNS2_9OperationEE3__0NS2_14DictionaryAttrENS2_9AttributeEvEENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSC_E_NS_9allocatorISL_EEFNS2_10WalkResultESC_EEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)*a2 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    return 1;
  }
  uint64_t v36 = *a2;
  __src = v39;
  uint64_t v38 = 0x400000000;
  uint64_t v40 = v42;
  uint64_t v41 = 0x400000000;
  uint64_t UInt = 1;
  uint64_t v3 = mlir::DictionaryAttr::get((uint64_t)&v36, "name", 4uLL);
  if (v3)
  {
    if (*(_UNKNOWN **)(*(void *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v35 = v4;
  uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v35);
  uint64_t v7 = v6;
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v36, "interleave", 0xAuLL);
  if (v8)
  {
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v35 = v9;
  uint64_t UInt = mlir::IntegerAttr::getUInt((mlir::IntegerAttr *)&v35);
  uint64_t v10 = mlir::DictionaryAttr::get((uint64_t)&v36, "shape", 5uLL);
  if (v10)
  {
    uint64_t v11 = v10;
    if (mlir::DenseIntElementsAttr::classof(v10)) {
      uint64_t v10 = v11;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  mlir::getValues<long long>(v10, (uint64_t)&__src);
  uint64_t v12 = mlir::DictionaryAttr::get((uint64_t)&v36, "strides", 7uLL);
  if (v12)
  {
    uint64_t v13 = v12;
    if (mlir::DenseIntElementsAttr::classof(v12)) {
      uint64_t v12 = v13;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  mlir::getValues<long long>(v12, (uint64_t)&v40);
  uint64_t v14 = mlir::DictionaryAttr::get((uint64_t)&v36, "elementType", 0xBuLL);
  if (v14)
  {
    if (*(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v35 = v15;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v35);
  ANECIRDataCFNumberType Type = mlir::anec::getANECIRDataType(Value);
  uint64_t v17 = *(void *)(a1 + 8);
  unsigned int v18 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)v17, AttrData, v7);
  uint64_t v19 = *(void *)v17;
  uint64_t v20 = v18;
  uint64_t v21 = *(void *)(*(void *)v17 + 8 * v18);
  if (v21 == -8)
  {
    --*(_DWORD *)(v17 + 16);
  }
  else if (v21)
  {
    goto LABEL_27;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(v7 + 121), (std::align_val_t)8uLL);
  uint64_t v26 = buffer;
  uint64_t v27 = buffer + 120;
  if (v7) {
    memcpy(buffer + 120, AttrData, (size_t)v7);
  }
  v7[(void)v27] = 0;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(void *)uint64_t v26 = v7;
  *((void *)v26 + 1) = v26 + 24;
  *((void *)v26 + 2) = 0x400000000;
  *((void *)v26 + 7) = v26 + 72;
  *((_DWORD *)v26 + 17) = 4;
  *((void *)v26 + 13) = 1;
  *(void *)(v19 + 8 * v20) = v26;
  ++*(_DWORD *)(v17 + 12);
  for (uint64_t i = (uint64_t *)(*(void *)v17
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v17, v20)); ; ++i)
  {
    uint64_t v21 = *i;
    if (*i && v21 != -8) {
      break;
    }
  }
LABEL_27:
  char v22 = (void **)(v21 + 8);
  if ((void **)(v21 + 8) != &__src)
  {
    unint64_t v23 = v38;
    uint64_t v24 = *(unsigned int *)(v21 + 16);
    if (v24 >= v38)
    {
      if (v38) {
        memmove(*v22, __src, 8 * v38);
      }
LABEL_48:
      *(_DWORD *)(v21 + 16) = v23;
      char v30 = (void **)(v21 + 56);
      unint64_t v31 = v41;
      uint64_t v32 = *(unsigned int *)(v21 + 64);
      if (v32 >= v41)
      {
        if (v41) {
          memmove(*v30, v40, 8 * v41);
        }
        goto LABEL_58;
      }
      if (*(_DWORD *)(v21 + 68) >= v41)
      {
        if (v32)
        {
          memmove(*v30, v40, 8 * v32);
          goto LABEL_56;
        }
      }
      else
      {
        *(_DWORD *)(v21 + 64) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v21 + 56, (void *)(v21 + 72), v31, 8);
      }
      uint64_t v32 = 0;
LABEL_56:
      if (v32 != v41) {
        memcpy((char *)*v30 + 8 * v32, (char *)v40 + 8 * v32, 8 * v41 - 8 * v32);
      }
LABEL_58:
      *(_DWORD *)(v21 + 64) = v31;
      goto LABEL_59;
    }
    if (*(_DWORD *)(v21 + 20) >= v38)
    {
      if (v24)
      {
        memmove(*v22, __src, 8 * v24);
        goto LABEL_46;
      }
    }
    else
    {
      *(_DWORD *)(v21 + 16) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v21 + 8, (void *)(v21 + 24), v23, 8);
    }
    uint64_t v24 = 0;
LABEL_46:
    if (v24 != v38) {
      memcpy((char *)*v22 + 8 * v24, (char *)__src + 8 * v24, 8 * v38 - 8 * v24);
    }
    goto LABEL_48;
  }
LABEL_59:
  uint64_t v33 = v40;
  *(void *)(v21 + 104) = UInt;
  *(_DWORD *)(v21 + 112) = ANECIRDataType;
  if (v33 != v42) {
    free(v33);
  }
  if (__src != v39) {
    free(__src);
  }
  return 1;
}

void mlir::AttrTypeWalker::~AttrTypeWalker(llvm **this)
{
}

void mlir::anec::ANECIRNetwork::~ANECIRNetwork(mlir::anec::ANECIRNetwork *this)
{
  mlir::anec::ANECIRNetwork::~ANECIRNetwork(this);

  JUMPOUT(0x21667D3C0);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  *(void *)this = &unk_26C37EF78;
  uint64_t v2 = *((void *)this + 31);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 32);
    uint64_t v4 = (void *)*((void *)this + 31);
    if (v3 != v2)
    {
      do
      {
        size_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 31);
    }
    *((void *)this + 32) = v2;
    operator delete(v4);
  }
  unint64_t v6 = *((void *)this + 28);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 29);
    uint64_t v8 = (void *)*((void *)this + 28);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)*((void *)this + 28);
    }
    *((void *)this + 29) = v6;
    operator delete(v8);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  uint64_t v10 = (char *)*((void *)this + 13);
  uint64_t v11 = *((unsigned int *)this + 28);
  if (v11)
  {
    uint64_t v12 = v10 - 8;
    uint64_t v13 = 16 * v11;
    do
    {
      uint64_t v14 = *(std::__shared_weak_count **)&v12[v13];
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      v13 -= 16;
    }
    while (v13);
    uint64_t v10 = (char *)*((void *)this + 13);
  }
  if (v10 != (char *)this + 120) {
    free(v10);
  }
  uint64_t v15 = (char *)*((void *)this + 1);
  int v16 = *((unsigned int *)this + 4);
  if (v16)
  {
    uint64_t v17 = v15 - 8;
    unsigned int v18 = 16 * v16;
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)&v17[v18];
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      v18 -= 16;
    }
    while (v18);
    uint64_t v15 = (char *)*((void *)this + 1);
  }
  if (v15 != (char *)this + 24) {
    free(v15);
  }
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRNetwork *,std::shared_ptr<mlir::anec::ANECIRNetwork>::__shared_ptr_default_delete<mlir::anec::ANECIRNetwork,mlir::anec::ANECIRNetwork>,std::allocator<mlir::anec::ANECIRNetwork>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<mlir::anec::ANECIRNetwork *,std::shared_ptr<mlir::anec::ANECIRNetwork>::__shared_ptr_default_delete<mlir::anec::ANECIRNetwork,mlir::anec::ANECIRNetwork>,std::allocator<mlir::anec::ANECIRNetwork>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::anec::writeSingleRegionPlist(mlir::Operation *,std::shared_ptr<mlir::anec::ANECIRNetwork> const&,mlir::anec::ANECIRWeights &)::$_0>(uint64_t a1, mlir::anec::_anonymous_namespace_ *a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(void *, uint64_t))(**((void **)a2 + 6) + 32))(*((void **)a2 + 6), v4)
  {
    if (!mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2))
    {
      uint64_t v7 = 0;
      uint64_t InterfaceFor = 0;
      return 1;
    }
    uint64_t v7 = a2;
    uint64_t InterfaceFor = mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
    if (!a2
      || mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)&v7, **(void **)a1, *(void *)(a1 + 8)))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::anec::anonymous namespace'::addConstToNetwork(mlir::anec::_anonymous_namespace_ *this, mlir::Operation *a2, mlir::anec::ANECIRNetwork *a3, mlir::anec::ANECIRWeights *a4)
{
  v23[23] = *MEMORY[0x263EF8340];
  if (mlir::anec::ANECIRWeights::hasConstant(a3, this) || (mlir::isOpTriviallyDead((void ***)this, v6) & 1) != 0) {
    return 1;
  }
  unint64_t v21 = *((void *)this - 1) & 0xFFFFFFFFFFFFFFF8;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v21);
  unint64_t v10 = v9;
  unint64_t v20 = v9;
  mlir::anec::computeOpKeyString(this, &__p);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v22 = (uint64_t **)&v17;
  if (mlir::detail::constant_op_binder<mlir::ElementsAttr>::match(&v22, (uint64_t)this))
  {
    if (mlir::ElementsAttr::getNumElements(v17, v18))
    {
      if (v10 < 6)
      {
        mlir::anec::ANECIRWeights::addConstant(a3, this);
        for (uint64_t i = (void *)*((void *)this - 2); i; uint64_t i = (void *)*i)
        {
          uint64_t v13 = i[2];
          uint64_t v14 = mlir::TypeID::get<mlir::OpTrait::anec::HasWeights<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::anec::HasWeights>(void)::Empty>>();
          if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(v13 + 48) + 32))(*(void *)(v13 + 48), v14))
          {
            char v22 = (uint64_t **)&v20;
            v23[0] = &v21;
            mlir::anec::ANECIRConstant::Create();
          }
        }
        uint64_t v7 = 1;
        goto LABEL_14;
      }
      uint64_t v11 = "Weights should have a rank less than or equal to 5";
    }
    else
    {
      uint64_t v11 = "Weights should have 1 or more elements";
    }
  }
  else
  {
    uint64_t v11 = "Unable to get Elements from the constant op";
  }
  uint64_t v15 = (void **)v11;
  __int16 v16 = 259;
  mlir::Operation::emitOpError((uint64_t)this, &v15, (uint64_t)&v22);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v22);
  if (v22) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v22);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void mlir::anec::ANECIRConstant::Create()
{
}

uint64_t mlir::anec::anonymous namespace'::addConstToNetwork(mlir::Operation *,mlir::anec::ANECIRNetwork *,mlir::anec::ANECIRWeights &)::$_1::operator()(uint64_t a1, int a2)
{
  unsigned int IndexFromDim = mlir::anec::getIndexFromDim(a2, **(void **)a1);
  if (v4) {
    return *(void *)(mlir::ArrayAttr::getValue(*(mlir::ArrayAttr **)(a1 + 8)) + 8 * IndexFromDim);
  }
  else {
    return 1;
  }
}

_OWORD *mlir::anec::ANECIRNetwork::AddConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 256);
  if ((unint64_t)v3 >= *(void *)(a1 + 264))
  {
    uint64_t result = std::vector<std::shared_ptr<mlir::anec::ANECIRUnit>>::__push_back_slow_path<std::shared_ptr<mlir::anec::ANECIRUnit> const&>(a1 + 248, (long long *)a2);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t result = v3 + 2;
  }
  *(void *)(a1 + 256) = result;
  return result;
}

void mlir::anec::ANECIRConstant::~ANECIRConstant(void **this)
{
  *this = &unk_26C37EA18;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C37EA18;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x21667D3C0);
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRConstant *,std::shared_ptr<mlir::anec::ANECIRConstant>::__shared_ptr_default_delete<mlir::anec::ANECIRConstant,mlir::anec::ANECIRConstant>,std::allocator<mlir::anec::ANECIRConstant>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t std::__shared_ptr_pointer<mlir::anec::ANECIRConstant *,std::shared_ptr<mlir::anec::ANECIRConstant>::__shared_ptr_default_delete<mlir::anec::ANECIRConstant,mlir::anec::ANECIRConstant>,std::allocator<mlir::anec::ANECIRConstant>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    *(void *)uint64_t v1 = &unk_26C37EA18;
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

uint64_t mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void **)(v1 + 16);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  if (v3)
  {
    uint64_t v22 = *(void *)(v1 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v22);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = mlir::TypeID::get<mlir::anec::PlistGeneratorInterface>();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 104))(v20, v21, v1);
    }
  }
  else
  {
    unint64_t v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    unint64_t v7 = mlir::TypeID::get<mlir::anec::PlistGeneratorInterface>();
    unint64_t v8 = *(unsigned int *)(v6 + 40);
    if (!v8) {
      goto LABEL_14;
    }
    unint64_t v9 = *(void **)(v6 + 32);
    unint64_t v10 = &v9[2 * v8];
    do
    {
      unint64_t v11 = v8 >> 1;
      uint64_t v12 = &v9[2 * (v8 >> 1)];
      unint64_t v14 = *v12;
      uint64_t v13 = v12 + 2;
      v8 += ~(v8 >> 1);
      if (v14 < v7) {
        unint64_t v9 = v13;
      }
      else {
        unint64_t v8 = v11;
      }
    }
    while (v8);
    if (v9 == v10 || *v9 != v7 || (uint64_t result = v9[1]) == 0)
    {
LABEL_14:
      uint64_t v16 = *(void *)(v6 + 24);
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = mlir::TypeID::get<mlir::anec::PlistGeneratorInterface>();
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 104);
      return v19(v16, v18, v17);
    }
  }
  return result;
}

void *mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>(void *a1, void *a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  v30[0] = a3;
  v30[1] = a4;
  v33[0] = a2;
  uint64_t v7 = llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>((uint64_t)a1, (uint64_t)v30, v33, a5);
  uint64_t v8 = v7 + 232;
  *(unsigned char *)(v7 + 240) = 0;
  *(void *)uint64_t v7 = &unk_26C37F4E0;
  *(void *)(v7 + 232) = &unk_26C37F560;
  unint64_t v10 = (uint64_t *)a2[21];
  unint64_t v9 = a2[22];
  unint64_t v11 = v10;
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v13 = (uint64_t *)a2[20];
    uint64_t v14 = v10 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v9 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v18 = (char *)operator new(8 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (uint64_t *)&v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *uint64_t v19 = v8;
    uint64_t v12 = v19 + 1;
    if (v10 != v13)
    {
      unint64_t v21 = (char *)v10 - (char *)v13 - 8;
      if (v21 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v13 - v18) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v22 = (v21 >> 3) + 1;
      uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v11 = &v10[v23 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v19 = (uint64_t *)((char *)v19 - v23);
      uint64_t v24 = &v18[8 * v14 - 16];
      __int16 v25 = v10 - 2;
      uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
        *(_OWORD *)uint64_t v24 = v27;
        v24 -= 32;
        v25 -= 4;
        v26 -= 4;
      }
      while (v26);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v28 = *--v11;
          *--uint64_t v19 = v28;
        }
        while (v11 != v13);
      }
      unint64_t v11 = (uint64_t *)a2[20];
    }
    a2[20] = v19;
    a2[21] = v12;
    a2[22] = v20;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *unint64_t v10 = v8;
    uint64_t v12 = v10 + 1;
  }
  a2[21] = v12;
  v31[0] = &unk_26C387AD8;
  v31[1] = a1;
  uint64_t v34 = v33;
  uint64_t v32 = v31;
  v33[0] = &unk_26C387AD8;
  v33[1] = a1;
  std::__function::__value_func<void ()(std::string const&)>::swap[abi:nn180100](v33, a1 + 25);
  if (v34 == v33)
  {
    (*((void (**)(const void **))v33[0] + 4))(v33);
  }
  else if (v34)
  {
    (*((void (**)(void))*v34 + 5))();
  }
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
  }
  else if (v32)
  {
    (*(void (**)(void))(*v32 + 40))();
  }
  return a1;
}

void mlir::Pass::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1);

  JUMPOUT(0x21667D3C0);
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::print(void *a1, llvm::raw_ostream *this)
{
  uint64_t v4 = (const void *)a1[2];
  size_t v5 = a1[3];
  unint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      unint64_t v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    uint64_t v7 = this;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    unint64_t v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *unint64_t v6 = 61;
  }
  unint64_t v10 = (const char *)a1[16];
  unint64_t v9 = (const char *)(a1 + 16);
  uint64_t v8 = v10;
  int v11 = v9[23];
  if (v11 >= 0) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v8;
  }
  if (v11 >= 0) {
    size_t v13 = *((unsigned __int8 *)v9 + 23);
  }
  else {
    size_t v13 = *((void *)v9 + 1);
  }

  return llvm::raw_ostream::write(this, v12, v13);
}

std::string *mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 - 104));
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t non-virtual thunk to'mlir::Pass::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);
}

void non-virtual thunk to'mlir::Pass::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);

  JUMPOUT(0x21667D3C0);
}

llvm::raw_ostream *non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4 = *(const void **)(a1 - 216);
  size_t v5 = *(void *)(a1 - 208);
  unint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      unint64_t v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    uint64_t v7 = this;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    unint64_t v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *unint64_t v6 = 61;
  }
  unint64_t v10 = *(const char **)(a1 - 104);
  uint64_t v9 = a1 - 104;
  uint64_t v8 = v10;
  int v11 = *(char *)(v9 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (const char *)v9;
  }
  else {
    uint64_t v12 = v8;
  }
  if (v11 >= 0) {
    size_t v13 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v13 = *(void *)(v9 + 8);
  }

  return llvm::raw_ostream::write(this, v12, v13);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::getOption(uint64_t a1)
{
  return a1 - 232;
}

std::string *non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::copyValueFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::string::operator=((std::string *)(a1 - 104), (const std::string *)(a2 - 104));
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4)
{
  *(void *)a1 = &unk_26C35BFE8;
  *(_WORD *)(a1 + 8) = 0;
  __int16 v8 = *(_WORD *)(a1 + 10);
  uint64_t v9 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v10 = a1 + 64;
  *(_WORD *)(a1 + 10) = v8 & 0x8000;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 88) = a1 + 120;
  int v11 = (llvm::SmallPtrSetImplBase *)(a1 + 88);
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v9, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 152) = &unk_26C35BCB8;
  *(void *)(a1 + 160) = 0;
  *(void *)a1 = &unk_26C35BDE0;
  *(void *)(a1 + 192) = &unk_26C35C0A0;
  *(void *)(a1 + 200) = &unk_26C380CF8;
  *(void *)(a1 + 224) = a1 + 200;
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  uint64_t v14 = *a3;
  uint64_t v15 = *(void *)(a1 + 96);
  if (v15 != *(void *)(a1 + 88))
  {
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big(v11, v14);
    goto LABEL_5;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 108);
  if (!v17)
  {
LABEL_14:
    if (v17 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v17 + 1;
      *(void *)(v15 + 8 * v17) = v14;
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 8 * v17;
  uint64_t v20 = *(void **)(a1 + 96);
  while ((const void *)*v20 != v14)
  {
    if (*v20 == -2) {
      uint64_t v18 = v20;
    }
    ++v20;
    v19 -= 8;
    if (!v19)
    {
      if (!v18) {
        goto LABEL_14;
      }
      void *v18 = v14;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_5:
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1);

  JUMPOUT(0x21667D3C0);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);
}

void non-virtual thunk to'mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(a1 - 232);

  JUMPOUT(0x21667D3C0);
}

void std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C380CF8;
  return result;
}

void std::__function::__func<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C380CF8;
}

void *std::__function::__value_func<void ()(std::string const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    BOOL v3 = result;
    uint64_t v4 = (void *)result[3];
    size_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISR_EEFvRKSB_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISR_EEFvRKSB_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C387AD8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISR_EEFvRKSB_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C387AD8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4llvm2cl6parserISB_EEEC1IJNSD_4descEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS9_ISR_EEFvRKSB_EEclESU_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 240) = 1;
  return result;
}

uint64_t mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option(uint64_t a1)
{
  *(void *)a1 = &unk_26C35BDE0;
  uint64_t v2 = a1 + 200;
  uint64_t v3 = *(void *)(a1 + 224);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  *(void *)(a1 + 152) = &unk_26C35BD58;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if ((*(char *)(a1 + 151) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 128));
LABEL_7:
  *(void *)a1 = &unk_26C35BFE8;
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4 != *(void **)(a1 + 88)) {
    free(v4);
  }
  size_t v5 = *(void **)(a1 + 64);
  if (v5 != (void *)(a1 + 80)) {
    free(v5);
  }
  return a1;
}

void *mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(void *a1, void *a2, uint64_t a3, uint64_t a4, __n128 *a5, unsigned char **a6, _WORD *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  v32[0] = a3;
  v32[1] = a4;
  v35[0] = a2;
  uint64_t v9 = llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((uint64_t)a1, (uint64_t)v32, v35, a5, a6, a7);
  uint64_t v10 = v9 + 192;
  *(unsigned char *)(v9 + 200) = 0;
  *(void *)uint64_t v9 = &unk_26C37F5A0;
  *(void *)(v9 + 192) = &unk_26C37F620;
  uint64_t v12 = (uint64_t *)a2[21];
  unint64_t v11 = a2[22];
  uint64_t v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v15 = (uint64_t *)a2[20];
    uint64_t v16 = v12 - v15;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      abort();
    }
    uint64_t v18 = v11 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = (uint64_t *)&v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    *unint64_t v21 = v10;
    uint64_t v14 = v21 + 1;
    if (v12 != v15)
    {
      unint64_t v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v15 - v20) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v21 = (uint64_t *)((char *)v21 - v25);
      uint64_t v26 = &v20[8 * v16 - 16];
      long long v27 = v12 - 2;
      uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)uint64_t v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v30 = *--v13;
          *--unint64_t v21 = v30;
        }
        while (v13 != v15);
      }
      uint64_t v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v12 = v10;
    uint64_t v14 = v12 + 1;
  }
  a2[21] = v14;
  v33[0] = &unk_26C387B68;
  v33[1] = a1;
  uint64_t v36 = v35;
  uint64_t v34 = v33;
  v35[0] = &unk_26C387B68;
  v35[1] = a1;
  std::__function::__value_func<void ()(BOOL const&)>::swap[abi:nn180100](v35, a1 + 20);
  if (v36 == v35)
  {
    (*((void (**)(const void **))v35[0] + 4))(v35);
  }
  else if (v36)
  {
    (*((void (**)(void))*v36 + 5))();
  }
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  return a1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, unsigned char **a5, _WORD *a6)
{
  *(void *)a1 = &unk_26C35BFE8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  uint64_t v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_26C35BCD8;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_26C35BE48;
  *(void *)(a1 + 152) = &unk_26C35C0D0;
  *(void *)(a1 + 160) = &unk_26C380D40;
  *(void *)(a1 + 184) = a1 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, unsigned char **a5, _WORD *a6)
{
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  unint64_t v11 = *a3;
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 != *(void *)(a1 + 88))
  {
LABEL_2:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
    goto LABEL_3;
  }
  uint64_t v15 = *(unsigned int *)(a1 + 108);
  if (!v15)
  {
LABEL_12:
    if (v15 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v15 + 1;
      *(void *)(v12 + 8 * v15) = v11;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 8 * v15;
  uint64_t v18 = *(void **)(a1 + 96);
  while ((const void *)*v18 != v11)
  {
    if (*v18 == -2) {
      uint64_t v16 = v18;
    }
    ++v18;
    v17 -= 8;
    if (!v17)
    {
      if (!v16) {
        goto LABEL_12;
      }
      *uint64_t v16 = v11;
      --*(_DWORD *)(a1 + 112);
      break;
    }
  }
LABEL_3:
  __n128 result = *a4;
  *(__n128 *)(a1 + 32) = *a4;
  uint64_t v14 = *a5;
  *(unsigned char *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v14;
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKbEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKbEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C387B68;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKbEE7__cloneEPNS0_6__baseIST_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C387B68;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIbN4llvm2cl6parserIbEEEC1IJNS7_4descENS7_11initializerIbEENS7_12OptionHiddenEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISO_EEFvRKbEEclESS_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 200) = 1;
  return result;
}

void std::__shared_ptr_pointer<mlir::anec::ANECIRTop *,std::shared_ptr<mlir::anec::ANECIRTop>::__shared_ptr_default_delete<mlir::anec::ANECIRTop,mlir::anec::ANECIRTop>,std::allocator<mlir::anec::ANECIRTop>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21667D3C0);
}

mlir::anec::ANECIRTop *std::__shared_ptr_pointer<mlir::anec::ANECIRTop *,std::shared_ptr<mlir::anec::ANECIRTop>::__shared_ptr_default_delete<mlir::anec::ANECIRTop,mlir::anec::ANECIRTop>,std::allocator<mlir::anec::ANECIRTop>>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(mlir::anec::ANECIRTop **)(a1 + 24);
  if (result)
  {
    mlir::anec::ANECIRTop::~ANECIRTop(result);
    JUMPOUT(0x21667D3C0);
  }
  return result;
}

void mlir::anec::ANECIRTop::~ANECIRTop(mlir::anec::ANECIRTop *this)
{
  uint64_t v2 = (char *)*((void *)this + 13);
  uint64_t v3 = *((unsigned int *)this + 28);
  if (v3)
  {
    uint64_t v4 = v2 - 8;
    uint64_t v5 = 16 * v3;
    do
    {
      unint64_t v6 = *(std::__shared_weak_count **)&v4[v5];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      v5 -= 16;
    }
    while (v5);
    uint64_t v2 = (char *)*((void *)this + 13);
  }
  if (v2 != (char *)this + 120) {
    free(v2);
  }
  uint64_t v7 = (char *)*((void *)this + 9);
  uint64_t v8 = *((unsigned int *)this + 20);
  if (v8)
  {
    uint64_t v9 = v7 - 8;
    uint64_t v10 = 16 * v8;
    do
    {
      unint64_t v11 = *(std::__shared_weak_count **)&v9[v10];
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 -= 16;
    }
    while (v10);
    uint64_t v7 = (char *)*((void *)this + 9);
  }
  if (v7 != (char *)this + 88) {
    free(v7);
  }
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if ((*((char *)this + 47) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_25:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0) {
    goto LABEL_25;
  }
}

uint64_t mlir::anec::WriteMultiFunctionPassBase<mlir::anec::anonymous namespace'::WriteMultiFunctionPass>::WriteMultiFunctionPassBase(uint64_t a1)
{
  v10[20] = *MEMORY[0x263EF8340];
  *(void *)(a1 + 16) = "builtin.module";
  *(void *)(a1 + 24) = 14;
  *(unsigned char *)(a1 + 32) = 1;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v2 = (void *)(a1 + 152);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 200;
  *(void *)(a1 + 192) = 0x400000000;
  *(void *)(a1 + 232) = a1 + 248;
  *(void *)(a1 + 240) = 0x400000000;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x1000000000;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(void *)a1 = &unk_26C38C908;
  v9.n128_u64[0] = (unint64_t)"The directory in which to place generated plists and the weights file.";
  v9.n128_u64[1] = 70;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 344), (void *)(a1 + 152), (uint64_t)"destination-directory", 21, &v9);
  *(void *)(a1 + 344) = &unk_26C37E5C0;
  *(void *)(a1 + 576) = &unk_26C37E640;
  v9.n128_u64[0] = (unint64_t)"The prefix name for the generated plists and the weights file.";
  v9.n128_u64[1] = 62;
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::Option<llvm::cl::desc>((void *)(a1 + 592), v2, (uint64_t)"output_file_name_prefix", 23, &v9);
  *(void *)(a1 + 592) = &unk_26C37E5C0;
  *(void *)(a1 + 824) = &unk_26C37E640;
  *(void *)&long long v8 = "The family to target for ANEC region formation (default A12).";
  *((void *)&v8 + 1) = 61;
  int v6 = 0;
  uint64_t v7 = &v6;
  v9.n128_u64[0] = (unint64_t)v10;
  v9.n128_u64[1] = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v9, v10, 6uLL, 40);
  unsigned __int32 v3 = v9.n128_u32[2];
  unint64_t v4 = v9.n128_u64[0] + 40 * v9.n128_u32[2];
  *(void *)unint64_t v4 = "A12";
  *(void *)(v4 + 8) = 3;
  *(_DWORD *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = "A12 family";
  *(void *)(v4 + 32) = 10;
  *(void *)(v4 + 40) = "A13";
  *(void *)(v4 + 48) = 3;
  *(_DWORD *)(v4 + 56) = 1;
  *(void *)(v4 + 64) = "A13 family";
  *(void *)(v4 + 72) = 10;
  *(void *)(v4 + 80) = "A14";
  *(void *)(v4 + 88) = 3;
  *(_DWORD *)(v4 + 96) = 2;
  *(void *)(v4 + 104) = "A14 family";
  *(void *)(v4 + 112) = 10;
  *(void *)(v4 + 120) = "A15";
  *(void *)(v4 + 128) = 3;
  *(_DWORD *)(v4 + 136) = 3;
  *(void *)(v4 + 144) = "A15 family";
  *(void *)(v4 + 152) = 10;
  *(void *)(v4 + 160) = "A16";
  *(void *)(v4 + 168) = 3;
  *(_DWORD *)(v4 + 176) = 4;
  *(void *)(v4 + 184) = "A16 family";
  *(void *)(v4 + 192) = 10;
  *(void *)(v4 + 200) = "A11Legacy";
  *(void *)(v4 + 208) = 9;
  *(_DWORD *)(v4 + 216) = 6;
  *(void *)(v4 + 224) = "A11 Legacy family";
  *(void *)(v4 + 232) = 17;
  v9.n128_u32[2] = v3 + 6;
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((void *)(a1 + 840), v2, (uint64_t)"family", 6, &v8, &v7, (uint64_t *)&v9);
  *(void *)(a1 + 840) = &unk_26C37E500;
  *(void *)(a1 + 1440) = &unk_26C37E580;
  if ((void *)v9.n128_u64[0] != v10) {
    free((void *)v9.n128_u64[0]);
  }
  v9.n128_u64[0] = (unint64_t)"Force the pass to overwrite any files that already exist. Testing only.";
  v9.n128_u64[1] = 71;
  LOBYTE(v6) = 0;
  *(void *)&long long v8 = &v6;
  LODWORD(v7) = 1;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>,llvm::cl::OptionHidden>((void *)(a1 + 1456), v2, (uint64_t)"force-overwrite", 15, &v9, (unsigned char **)&v8, &v7);
  *(void *)(a1 + 1456) = &unk_26C37E680;
  *(void *)(a1 + 1648) = &unk_26C37E700;
                                     "ame. It's only usefull for debugging. If false, all those attributes are erased.";
  v9.n128_u64[1] = 163;
  LOBYTE(v7) = 1;
  *(void *)&long long v8 = &v7;
  mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>((void *)(a1 + 1664), v2, (uint64_t)"keep-unit-name-attrs", 20, &v9, (unsigned char **)&v8);
  *(void *)(a1 + 1664) = &unk_26C37E680;
  *(void *)(a1 + 1856) = &unk_26C37E700;
  return a1;
}

void mlir::anec::anonymous namespace'::WriteMultiFunctionPass::~WriteMultiFunctionPass(mlir::anec::_anonymous_namespace_::WriteMultiFunctionPass *this)
{
  *(void *)this = &unk_26C38C908;
  *((void *)this + 208) = &unk_26C35BE48;
  uint64_t v2 = (char *)this + 1824;
  unsigned __int32 v3 = (char *)*((void *)this + 231);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  *((void *)this + 208) = &unk_26C35BFE8;
  unint64_t v4 = (void *)*((void *)this + 220);
  if (v4 != *((void **)this + 219)) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 216);
  if (v5 != (char *)this + 1744) {
    free(v5);
  }
  *((void *)this + 182) = &unk_26C35BE48;
  int v6 = (mlir::anec::_anonymous_namespace_::WriteMultiFunctionPass *)*((void *)this + 205);
  if (v6 == (mlir::anec::_anonymous_namespace_::WriteMultiFunctionPass *)((char *)this + 1616))
  {
    (*(void (**)(char *))(*((void *)this + 202) + 32))((char *)this + 1616);
  }
  else if (v6)
  {
    (*(void (**)(mlir::anec::_anonymous_namespace_::WriteMultiFunctionPass *))(*(void *)v6 + 40))(v6);
  }
  *((void *)this + 182) = &unk_26C35BFE8;
  uint64_t v7 = (void *)*((void *)this + 194);
  if (v7 != *((void **)this + 193)) {
    free(v7);
  }
  long long v8 = (char *)*((void *)this + 190);
  if (v8 != (char *)this + 1536) {
    free(v8);
  }
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)this + 105);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 592);
  mlir::detail::PassOptions::Option<std::string,llvm::cl::parser<std::string>>::~Option((uint64_t)this + 344);

  mlir::Pass::~Pass(this);
}

{
  uint64_t vars8;

  JUMPOUT(0x21667D3C0);
}

const char *mlir::anec::WriteMultiFunctionPassBase<mlir::anec::anonymous namespace'::WriteMultiFunctionPass>::getName()
{
  return "WriteMultiFunctionPass";
}

const char *mlir::anec::WriteMultiFunctionPassBase<mlir::anec::anonymous namespace'::WriteMultiFunctionPass>::getArgument()
{
  return "write-multi-function";
}

const char *mlir::anec::WriteMultiFunctionPassBase<mlir::anec::anonymous namespace'::WriteMultiFunctionPass>::getDescription()
{
  return "Write multi function output for ANEC dialect";
}

void mlir::anec::anonymous namespace'::WriteMultiFunctionPass::runOnOperation(mlir::anec::_anonymous_namespace_::WriteMultiFunctionPass *this)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  switch(*((_DWORD *)this + 242))
  {
    case 0:
      unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v54 = v2;
      mlir::Region::getOps<mlir::anec::A12>((mlir::Region *)(v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 32 * *(unsigned int *)(v2 + 40)+ 64), (uint64_t)&v50);
      if ((void)v51 == v53) {
        return;
      }
      BOOL v48 = this;
      unint64_t v49 = &v54;
      if (*((char *)this + 495) < 0)
      {
        if (!*((void *)this + 60)) {
          goto LABEL_97;
        }
      }
      else if (!*((unsigned char *)this + 495))
      {
        goto LABEL_97;
      }
      char v4 = *((unsigned char *)this + 743);
      if (v4 < 0)
      {
        uint64_t v5 = (char *)this + 720;
        if (*((void *)this + 91)) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v5 = (char *)this + 720;
        if (*((unsigned char *)this + 743))
        {
LABEL_37:
          if (v4 >= 0) {
            int v6 = v5;
          }
          else {
            int v6 = (const char *)*((void *)this + 90);
          }
          if (v4 >= 0) {
            uint64_t v7 = *((unsigned __int8 *)this + 743);
          }
          else {
            uint64_t v7 = *((void *)this + 91);
          }
LABEL_104:
          if (v47)
          {
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v46;
            }
            uint64_t v33 = (std::string *)*((void *)this + 234);
            if (v33) {
              std::string::operator=(v33, &__str);
            }
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            mlir::openOutputFile();
          }
          goto LABEL_137;
        }
      }
      int v6 = "network";
      uint64_t v7 = 7;
      goto LABEL_104;
    case 1:
      unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v54 = v2;
      mlir::Region::getOps<mlir::anec::A13>((mlir::Region *)(v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 32 * *(unsigned int *)(v2 + 40)+ 64), (uint64_t)&v50);
      if ((void)v51 == v53) {
        return;
      }
      BOOL v48 = this;
      unint64_t v49 = &v54;
      if (*((char *)this + 495) < 0)
      {
        if (!*((void *)this + 60)) {
          goto LABEL_97;
        }
      }
      else if (!*((unsigned char *)this + 495))
      {
        goto LABEL_97;
      }
      char v8 = *((unsigned char *)this + 743);
      if (v8 < 0)
      {
        __n128 v9 = (char *)this + 720;
        if (*((void *)this + 91))
        {
LABEL_46:
          if (v8 >= 0) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = (const char *)*((void *)this + 90);
          }
          if (v8 >= 0) {
            uint64_t v11 = *((unsigned __int8 *)this + 743);
          }
          else {
            uint64_t v11 = *((void *)this + 91);
          }
LABEL_109:
          if (v47)
          {
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v46;
            }
            uint64_t v34 = (std::string *)*((void *)this + 234);
            if (v34) {
              std::string::operator=(v34, &__str);
            }
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            mlir::openOutputFile();
          }
          goto LABEL_137;
        }
      }
      else
      {
        __n128 v9 = (char *)this + 720;
        if (*((unsigned char *)this + 743)) {
          goto LABEL_46;
        }
      }
      uint64_t v10 = "network";
      uint64_t v11 = 7;
      goto LABEL_109;
    case 2:
      unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v54 = v2;
      mlir::Region::getOps<mlir::anec::A14>((mlir::Region *)(v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 32 * *(unsigned int *)(v2 + 40)+ 64), (uint64_t)&v50);
      if ((void)v51 == v53) {
        return;
      }
      BOOL v48 = this;
      unint64_t v49 = &v54;
      if (*((char *)this + 495) < 0)
      {
        if (!*((void *)this + 60)) {
          goto LABEL_97;
        }
      }
      else if (!*((unsigned char *)this + 495))
      {
        goto LABEL_97;
      }
      char v12 = *((unsigned char *)this + 743);
      if (v12 < 0)
      {
        uint64_t v13 = (char *)this + 720;
        if (*((void *)this + 91))
        {
LABEL_55:
          if (v12 >= 0) {
            uint64_t v14 = v13;
          }
          else {
            uint64_t v14 = (const char *)*((void *)this + 90);
          }
          if (v12 >= 0) {
            uint64_t v15 = *((unsigned __int8 *)this + 743);
          }
          else {
            uint64_t v15 = *((void *)this + 91);
          }
LABEL_114:
          if (v47)
          {
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v46;
            }
            uint64_t v35 = (std::string *)*((void *)this + 234);
            if (v35) {
              std::string::operator=(v35, &__str);
            }
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            mlir::openOutputFile();
          }
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v13 = (char *)this + 720;
        if (*((unsigned char *)this + 743)) {
          goto LABEL_55;
        }
      }
      uint64_t v14 = "network";
      uint64_t v15 = 7;
      goto LABEL_114;
    case 3:
      unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v54 = v2;
      mlir::Region::getOps<mlir::anec::A15>((mlir::Region *)(v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 32 * *(unsigned int *)(v2 + 40)+ 64), (uint64_t)&v50);
      if ((void)v51 == v53) {
        return;
      }
      BOOL v48 = this;
      unint64_t v49 = &v54;
      if (*((char *)this + 495) < 0)
      {
        if (!*((void *)this + 60)) {
          goto LABEL_97;
        }
      }
      else if (!*((unsigned char *)this + 495))
      {
        goto LABEL_97;
      }
      char v16 = *((unsigned char *)this + 743);
      if (v16 < 0)
      {
        uint64_t v17 = (char *)this + 720;
        if (*((void *)this + 91))
        {
LABEL_64:
          if (v16 >= 0) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = (const char *)*((void *)this + 90);
          }
          if (v16 >= 0) {
            uint64_t v19 = *((unsigned __int8 *)this + 743);
          }
          else {
            uint64_t v19 = *((void *)this + 91);
          }
LABEL_119:
          if (v47)
          {
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v46;
            }
            uint64_t v36 = (std::string *)*((void *)this + 234);
            if (v36) {
              std::string::operator=(v36, &__str);
            }
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            mlir::openOutputFile();
          }
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v17 = (char *)this + 720;
        if (*((unsigned char *)this + 743)) {
          goto LABEL_64;
        }
      }
      uint64_t v18 = "network";
      uint64_t v19 = 7;
      goto LABEL_119;
    case 4:
      unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v54 = v2;
      mlir::Region::getOps<mlir::anec::A16>((mlir::Region *)(v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 32 * *(unsigned int *)(v2 + 40)+ 64), (uint64_t)&v50);
      if ((void)v51 == v53) {
        return;
      }
      BOOL v48 = this;
      unint64_t v49 = &v54;
      if (*((char *)this + 495) < 0)
      {
        if (!*((void *)this + 60)) {
          goto LABEL_97;
        }
      }
      else if (!*((unsigned char *)this + 495))
      {
        goto LABEL_97;
      }
      char v20 = *((unsigned char *)this + 743);
      if (v20 < 0)
      {
        unint64_t v21 = (char *)this + 720;
        if (*((void *)this + 91))
        {
LABEL_73:
          if (v20 >= 0) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = (const char *)*((void *)this + 90);
          }
          if (v20 >= 0) {
            uint64_t v23 = *((unsigned __int8 *)this + 743);
          }
          else {
            uint64_t v23 = *((void *)this + 91);
          }
LABEL_124:
          if (v47)
          {
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v46;
            }
            uint64_t v37 = (std::string *)*((void *)this + 234);
            if (v37) {
              std::string::operator=(v37, &__str);
            }
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            mlir::openOutputFile();
          }
          goto LABEL_137;
        }
      }
      else
      {
        unint64_t v21 = (char *)this + 720;
        if (*((unsigned char *)this + 743)) {
          goto LABEL_73;
        }
      }
      uint64_t v22 = "network";
      uint64_t v23 = 7;
      goto LABEL_124;
    case 5:
      unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v54 = v2;
      mlir::Region::getOps<mlir::anec::A17>((mlir::Region *)(v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 32 * *(unsigned int *)(v2 + 40)+ 64), (uint64_t)&v50);
      if ((void)v51 == v53) {
        return;
      }
      BOOL v48 = this;
      unint64_t v49 = &v54;
      if (*((char *)this + 495) < 0)
      {
        if (!*((void *)this + 60)) {
          goto LABEL_97;
        }
      }
      else if (!*((unsigned char *)this + 495))
      {
        goto LABEL_97;
      }
      char v24 = *((unsigned char *)this + 743);
      if (v24 < 0)
      {
        uint64_t v25 = (char *)this + 720;
        if (*((void *)this + 91))
        {
LABEL_82:
          if (v24 >= 0) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = (const char *)*((void *)this + 90);
          }
          if (v24 >= 0) {
            uint64_t v27 = *((unsigned __int8 *)this + 743);
          }
          else {
            uint64_t v27 = *((void *)this + 91);
          }
LABEL_129:
          if (v47)
          {
            if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v46;
            }
            uint64_t v38 = (std::string *)*((void *)this + 234);
            if (v38) {
              std::string::operator=(v38, &__str);
            }
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            mlir::openOutputFile();
          }
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v25 = (char *)this + 720;
        if (*((unsigned char *)this + 743)) {
          goto LABEL_82;
        }
      }
      uint64_t v26 = "network";
      uint64_t v27 = 7;
      goto LABEL_129;
    case 6:
      unint64_t v2 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v54 = v2;
      mlir::Region::getOps<mlir::anec::A11Legacy>((mlir::Region *)(v2+ 16 * (((unint64_t)*(unsigned int *)(v2 + 44) >> 23) & 1)+ (((unint64_t)*(unsigned int *)(v2 + 44) >> 21) & 0x7F8)+ 32 * *(unsigned int *)(v2 + 40)+ 64), (uint64_t)&v50);
      if ((void)v51 == v53) {
        return;
      }
      BOOL v48 = this;
      unint64_t v49 = &v54;
      if (*((char *)this + 495) < 0)
      {
        if (!*((void *)this + 60))
        {
LABEL_97:
          LOWORD(v41) = 257;
          mlir::Operation::emitError(v2, (uint64_t)&v40, (uint64_t)__p);
          if (__p[0]) {
            mlir::Diagnostic::operator<<((uint64_t)&__p[1], "Missing destination directory");
          }
          char v32 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)__p);
          if (__p[0]) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__p);
          }
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&__p[1]);
          goto LABEL_166;
        }
      }
      else if (!*((unsigned char *)this + 495))
      {
        goto LABEL_97;
      }
      char v28 = *((unsigned char *)this + 743);
      if (v28 < 0)
      {
        long long v29 = (char *)this + 720;
        if (*((void *)this + 91)) {
          goto LABEL_91;
        }
LABEL_133:
        uint64_t v30 = "network";
        uint64_t v31 = 7;
        goto LABEL_134;
      }
      long long v29 = (char *)this + 720;
      if (!*((unsigned char *)this + 743)) {
        goto LABEL_133;
      }
LABEL_91:
      if (v28 >= 0) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = (const char *)*((void *)this + 90);
      }
      if (v28 >= 0) {
        uint64_t v31 = *((unsigned __int8 *)this + 743);
      }
      else {
        uint64_t v31 = *((void *)this + 91);
      }
LABEL_134:
      if (v47)
      {
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__str, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
        }
        else {
          std::string __str = v46;
        }
        uint64_t v39 = (std::string *)*((void *)this + 234);
        if (v39) {
          std::string::operator=(v39, &__str);
        }
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        mlir::openOutputFile();
      }
LABEL_137:
      char v32 = 0;
LABEL_166:
      if (!v32) {
LABEL_167:
      }
        *((void *)this + 5) |= 4uLL;
      return;
    default:
      unint64_t v3 = *((void *)this + 5) & 0xFFFFFFFFFFFFFFF8;
      LOWORD(v52) = 257;
      mlir::Operation::emitOpError(v3, (void ***)&v50, (uint64_t)__p);
      if (__p[0])
      {
        mlir::Diagnostic::operator<<((uint64_t)&__p[1], "Unsupported ANE architecture");
        if (__p[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)__p);
        }
      }
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&__p[1]);
      goto LABEL_167;
  }
}

void mlir::anec::WriteMultiFunctionPassBase<mlir::anec::anonymous namespace'::WriteMultiFunctionPass>::clonePass()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::Option<llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(void *a1, void *a2, uint64_t a3, uint64_t a4, _OWORD *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  v32[0] = a3;
  v32[1] = a4;
  v35[0] = a2;
  uint64_t v9 = llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>((uint64_t)a1, (uint64_t)v32, v35, a5, a6, a7);
  uint64_t v10 = v9 + 600;
  *(unsigned char *)(v9 + 608) = 0;
  *(void *)uint64_t v9 = &unk_26C37F420;
  *(void *)(v9 + 600) = &unk_26C37F4A0;
  char v12 = (uint64_t *)a2[21];
  unint64_t v11 = a2[22];
  uint64_t v13 = v12;
  if ((unint64_t)v12 >= v11)
  {
    uint64_t v15 = (uint64_t *)a2[20];
    uint64_t v16 = v12 - v15;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61) {
      abort();
    }
    uint64_t v18 = v11 - (void)v15;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      char v20 = (char *)operator new(8 * v19);
    }
    else
    {
      char v20 = 0;
    }
    unint64_t v21 = (uint64_t *)&v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    *unint64_t v21 = v10;
    uint64_t v14 = v21 + 1;
    if (v12 != v15)
    {
      unint64_t v23 = (char *)v12 - (char *)v15 - 8;
      if (v23 < 0x58) {
        goto LABEL_36;
      }
      if ((unint64_t)((char *)v15 - v20) < 0x20) {
        goto LABEL_36;
      }
      uint64_t v24 = (v23 >> 3) + 1;
      uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &v12[v25 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v21 = (uint64_t *)((char *)v21 - v25);
      uint64_t v26 = &v20[8 * v16 - 16];
      uint64_t v27 = v12 - 2;
      uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)uint64_t v26 = v29;
        v26 -= 32;
        v27 -= 4;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_36:
        do
        {
          uint64_t v30 = *--v13;
          *--unint64_t v21 = v30;
        }
        while (v13 != v15);
      }
      uint64_t v13 = (uint64_t *)a2[20];
    }
    a2[20] = v21;
    a2[21] = v14;
    a2[22] = v22;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *char v12 = v10;
    uint64_t v14 = v12 + 1;
  }
  a2[21] = v14;
  v33[0] = &unk_26C387A90;
  v33[1] = a1;
  uint64_t v36 = v35;
  uint64_t v34 = v33;
  v35[0] = &unk_26C387A90;
  v35[1] = a1;
  std::__function::__value_func<void ()(mlir::anec::Family const&)>::swap[abi:nn180100](v35, a1 + 71);
  if (v36 == v35)
  {
    (*((void (**)(const void **))v35[0] + 4))(v35);
  }
  else if (v36)
  {
    (*((void (**)(void))*v36 + 5))();
  }
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  return a1;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::handleOccurrence(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  int v12 = 0;
  uint64_t v8 = llvm::cl::parser<mlir::anec::Family>::parse(a1 + 152, (void *)a1, a3, a4, a5, a6, &v12);
  if (v8) {
    return v8;
  }
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v9 + 48))(v9, &v12);
    return v8;
  }
  uint64_t v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(v11);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getValueExpectedFlagDefault(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(void *a1)
{
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(a1);

  JUMPOUT(0x21667D3C0);
}

unint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOptionWidth(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  if ((a3 & 1) != 0 || !*((unsigned char *)result + 148) || *((_DWORD *)result + 36) != *((_DWORD *)result + 32))
  {
    int v3 = *((_DWORD *)result + 32);
    char v4 = &unk_26C35BC98;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::setDefault(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getExtraOptionNames(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(a1 + 160) + 24))
  {
    uint64_t v3 = a1 + 152;
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 152) + 16))(a1 + 152);
    if (v4)
    {
      int v5 = v4;
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, v6);
        uint64_t v9 = v8;
        unint64_t v10 = *(unsigned int *)(a2 + 8);
        if (v10 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10 + 1, 16);
          unint64_t v10 = *(unsigned int *)(a2 + 8);
        }
        uint64_t v11 = (uint64_t *)(*(void *)a2 + 16 * v10);
        *uint64_t v11 = v7;
        v11[1] = v9;
        ++*(_DWORD *)(a2 + 8);
        uint64_t v6 = (v6 + 1);
      }
      while (v5 != v6);
    }
  }
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  int v4 = *(const void **)(a1 + 16);
  size_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = (unsigned char *)*((void *)this + 4);
  if (v5 <= *((void *)this + 3) - (void)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      uint64_t v6 = (unsigned char *)(*((void *)this + 4) + v5);
      *((void *)this + 4) = v6;
    }
    uint64_t v7 = this;
  }
  else
  {
    uint64_t v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    uint64_t v6 = (unsigned char *)*((void *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((void *)v7 + 4) = v6 + 1;
    *uint64_t v6 = 61;
  }
  uint64_t v8 = (unsigned char *)(*(void *)(a1 + 168) + 44);
  uint64_t v9 = 48 * *(unsigned int *)(a1 + 176);
  while (1)
  {
    v9 -= 48;
    if (*v8)
    {
      if (*((_DWORD *)v8 - 1) == *(_DWORD *)(a1 + 128)) {
        break;
      }
    }
    v8 += 48;
  }
  unint64_t v10 = *(const void **)(v8 - 44);
  size_t v11 = *(void *)(v8 - 36);
  __n128 result = (llvm::raw_ostream *)*((void *)this + 4);
  if (v11 <= *((void *)this + 3) - (void)result)
  {
    if (v11)
    {
      __n128 result = (llvm::raw_ostream *)memcpy(result, v10, v11);
      *((void *)this + 4) += v11;
    }
  }
  else
  {
    size_t v13 = *(void *)(v8 - 36);
    return llvm::raw_ostream::write(this, (const char *)v10, v13);
  }
  return result;
}

uint64_t mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 - 472);
  *(unsigned char *)(result + 608) = *(unsigned char *)(a2 + 8);
  return result;
}

void *non-virtual thunk to'mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));
}

void non-virtual thunk to'mlir::Pass::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));

  JUMPOUT(0x21667D3C0);
}

llvm::raw_ostream *non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::print(a1 - 600, a2);
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::getOption(uint64_t a1)
{
  return a1 - 600;
}

uint64_t non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result - 472) = *(_DWORD *)(a2 - 472);
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  *(void *)a1 = &unk_26C35BFE8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  int v12 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_26C35BC98;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_26C35BD78;
  *(void *)(a1 + 160) = a1;
  *(void *)(a1 + 168) = a1 + 184;
  *(void *)(a1 + 176) = 0x800000000;
  *(void *)(a1 + 152) = &unk_26C37F3D0;
  *(void *)(a1 + 568) = &unk_26C380CB0;
  *(void *)(a1 + 592) = a1 + 568;
  llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(a1, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(void *a1)
{
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(a1);

  JUMPOUT(0x21667D3C0);
}

void *non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  return mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));
}

void non-virtual thunk to'mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(uint64_t a1)
{
  mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option((void *)(a1 - 600));

  JUMPOUT(0x21667D3C0);
}

void llvm::cl::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<mlir::anec::Family>,llvm::cl::ValuesClass>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4, _DWORD **a5, uint64_t *a6)
{
  llvm::cl::Option::setArgStr(a1, *(int8x16_t **)a2, *(const unsigned __int8 **)(a2 + 8));
  size_t v11 = *a3;
  uint64_t v12 = *(void *)(a1 + 96);
  if (v12 != *(void *)(a1 + 88)) {
    goto LABEL_2;
  }
  uint64_t v14 = *(unsigned int *)(a1 + 108);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 8 * v14;
    unint64_t v17 = *(void **)(a1 + 96);
    while ((const void *)*v17 != v11)
    {
      if (*v17 == -2) {
        uint64_t v15 = v17;
      }
      ++v17;
      v16 -= 8;
      if (!v16)
      {
        if (!v15) {
          goto LABEL_14;
        }
        void *v15 = v11;
        --*(_DWORD *)(a1 + 112);
        break;
      }
    }
  }
  else
  {
LABEL_14:
    if (v14 >= *(_DWORD *)(a1 + 104))
    {
LABEL_2:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 88), v11);
      goto LABEL_3;
    }
    *(_DWORD *)(a1 + 108) = v14 + 1;
    *(void *)(v12 + 8 * v14) = v11;
  }
LABEL_3:
  *(_OWORD *)(a1 + 32) = *a4;
  uint64_t v13 = *a5;
  *(_DWORD *)(a1 + 128) = **a5;
  *(unsigned char *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v13;

  llvm::cl::ValuesClass::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>>(a6, a1);
}

void *llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(void *a1)
{
  *a1 = &unk_26C35BD78;
  unint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_26C35C050;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_26C35BFE8;
  size_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }
  return a1;
}

void llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~opt(void *a1)
{
  *a1 = &unk_26C35BD78;
  unint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_26C35C050;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_26C35BFE8;
  size_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }

  JUMPOUT(0x21667D3C0);
}

BOOL llvm::cl::OptionValueCopy<mlir::anec::Family>::compare(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

void *mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(void *a1)
{
  *a1 = &unk_26C35C050;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>::~GenericOptionParser(void *a1)
{
  *a1 = &unk_26C35C050;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getNumOptions(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOption(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getDescription(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t llvm::cl::parser<mlir::anec::Family>::getOptionValue(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

void *llvm::cl::parser<mlir::anec::Family>::~parser(void *a1)
{
  *a1 = &unk_26C35C050;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void llvm::cl::parser<mlir::anec::Family>::~parser(void *a1)
{
  *a1 = &unk_26C35C050;
  unint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x21667D3C0);
}

void std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::~__func()
{
}

void *std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C380CB0;
  return result;
}

void std::__function::__func<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1},std::allocator<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::{lambda(mlir::anec::Family const&)#1}>,void ()(mlir::anec::Family const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C380CB0;
}

void llvm::cl::ValuesClass::apply<llvm::cl::opt<mlir::anec::Family,false,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 40 * v2;
    uint64_t v6 = a2 + 168;
    do
    {
      uint64_t v8 = *(const unsigned __int8 **)(v4 + 8);
      long long v9 = *(_OWORD *)(v4 + 24);
      int v10 = *(_DWORD *)(v4 + 16);
      v15[0] = *(void *)v4;
      uint64_t v7 = (int8x16_t *)v15[0];
      v15[1] = v8;
      long long v16 = v9;
      unint64_t v17 = &unk_26C35BC98;
      char v19 = 1;
      int v18 = v10;
      Address = llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(v6, (unint64_t)v15, 1);
      uint64_t v12 = *(void *)(a2 + 168) + 48 * *(unsigned int *)(a2 + 176);
      long long v13 = *((_OWORD *)Address + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)Address;
      *(_OWORD *)(v12 + 16) = v13;
      *(void *)(v12 + 32) = &unk_26C35BD38;
      char v14 = Address[44];
      *(_DWORD *)(v12 + 40) = *((_DWORD *)Address + 10);
      *(unsigned char *)(v12 + 44) = v14;
      *(void *)(v12 + 32) = &unk_26C35BC98;
      ++*(_DWORD *)(a2 + 176);
      llvm::cl::AddLiteralOption(*(void *)(a2 + 160), v7, v8);
      v4 += 40;
    }
    while (v4 != v5);
  }
}

char *llvm::SmallVectorTemplateBase<llvm::cl::parser<mlir::anec::Family>::OptionInfo,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 48 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v20 = (uint64_t)(a2 - *(void *)a1) >> 4;
      unint64_t v32 = 0;
      unint64_t v21 = (char *)(a1 + 16);
      uint64_t v22 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v32);
      unint64_t v23 = *(char **)a1;
      unsigned int v24 = *(_DWORD *)(a1 + 8);
      if (v24)
      {
        uint64_t v25 = &v23[48 * v24];
        uint64_t v26 = v22 + 32;
        uint64_t v27 = v22;
        do
        {
          long long v28 = *((_OWORD *)v23 + 1);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v23;
          *((_OWORD *)v27 + 1) = v28;
          *((void *)v27 + 4) = &unk_26C35BD38;
          int v29 = *((_DWORD *)v23 + 10);
          v27[44] = v23[44];
          *((_DWORD *)v27 + 10) = v29;
          *((void *)v27 + 4) = &unk_26C35BC98;
          v26 += 48;
          v23 += 48;
          v27 += 48;
        }
        while (v23 != v25);
        unint64_t v23 = *(char **)a1;
      }
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * v20;
      int v31 = v32;
      if (v23 != v21) {
        free(v23);
      }
      *(void *)a1 = v22;
      *(_DWORD *)(a1 + 12) = v31;
      return &v22[48 * v30];
    }
    else
    {
      unint64_t v32 = 0;
      int v10 = (char *)(a1 + 16);
      size_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 48, &v32);
      uint64_t v12 = *(char **)a1;
      unsigned int v13 = *(_DWORD *)(a1 + 8);
      if (v13)
      {
        char v14 = &v12[48 * v13];
        uint64_t v15 = v11 + 32;
        long long v16 = v11;
        do
        {
          long long v17 = *((_OWORD *)v12 + 1);
          *(_OWORD *)long long v16 = *(_OWORD *)v12;
          *((_OWORD *)v16 + 1) = v17;
          *((void *)v16 + 4) = &unk_26C35BD38;
          int v18 = *((_DWORD *)v12 + 10);
          v16[44] = v12[44];
          *((_DWORD *)v16 + 10) = v18;
          *((void *)v16 + 4) = &unk_26C35BC98;
          v15 += 48;
          v12 += 48;
          v16 += 48;
        }
        while (v12 != v14);
        uint64_t v12 = *(char **)a1;
      }
      int v19 = v32;
      if (v12 != v10) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v19;
    }
  }
  return (char *)v3;
}

void *std::__function::__value_func<void ()(mlir::anec::Family const&)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C387A90;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EE7__cloneEPNS0_6__baseISV_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C387A90;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionINS2_4anec6FamilyENS4_19GenericOptionParserIS7_EEEC1IJN4llvm2cl4descENSD_11initializerIS7_EENSD_11ValuesClassEEEERS4_NSC_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISQ_EEFvRKS7_EEclESU_(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 608) = 1;
  return result;
}

void *mlir::detail::PassOptions::Option<mlir::anec::Family,mlir::detail::PassOptions::GenericOptionParser<mlir::anec::Family>>::~Option(void *a1)
{
  *a1 = &unk_26C35BD78;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_26C35C050;
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  *a1 = &unk_26C35BFE8;
  unint64_t v5 = (void *)a1[12];
  if (v5 != (void *)a1[11]) {
    free(v5);
  }
  uint64_t v6 = (void *)a1[8];
  if (v6 != a1 + 10) {
    free(v6);
  }
  return a1;
}

uint64_t llvm::cl::parser<mlir::anec::Family>::parse(uint64_t a1, void *a2, const void *a3, size_t a4, const void *a5, size_t a6, _DWORD *a7)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v8) {
    a3 = a5;
  }
  if (v8) {
    a4 = a6;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    while (1)
    {
      if (*(void *)(v13 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v13, a3, a4);
        if (!a1) {
          break;
        }
      }
      v13 += 48;
      if (!--v11) {
        goto LABEL_14;
      }
    }
    uint64_t result = 0;
    *a7 = *(_DWORD *)(v13 + 40);
  }
  else
  {
LABEL_14:
    __int16 v17 = 1283;
    v16[0] = "Cannot find option named '";
    v16[2] = a3;
    v16[3] = a4;
    v18[0] = v16;
    v18[2] = "'!";
    __int16 v19 = 770;
    uint64_t v15 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)v18, 0, 0, v15);
  }
  return result;
}

void mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A12>(mlir::ModuleOp)::{lambda(llvm::StringRef,llvm::StringRef)#1}::operator()(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  v11[0] = *a1 + 472;
  v11[2] = "/";
  __int16 v12 = 772;
  v13[0] = v11;
  v13[2] = a2;
  v13[3] = a3;
  __int16 v14 = 1282;
  v16[0] = (void **)v13;
  v16[2] = (void **)".";
  __int16 v17 = 770;
  p_p = v16;
  v19[1] = a4;
  void v19[2] = a5;
  __int16 v20 = 1282;
  llvm::Twine::str((llvm::Twine *)&p_p, &__p);
  __int16 v20 = 260;
  p_p = (void ***)&__p;
  if (llvm::sys::fs::access((unsigned __int8 *)&p_p, 0) || *(unsigned char *)(v8 + 1584))
  {
    *a6 = __p;
    a6[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    uint64_t v9 = *(void *)a1[1];
    __int16 v14 = 257;
    mlir::Operation::emitError(v9, (uint64_t)v13, (uint64_t)&p_p);
    if (p_p
      && (mlir::Diagnostic::operator<<((uint64_t)v19, "File "), p_p)
      && (__int16 v17 = 260, v16[0] = (void **)&__p, mlir::Diagnostic::operator<<((uint64_t)v19, v16), p_p))
    {
      mlir::Diagnostic::operator<<((uint64_t)v19, " already exists");
      int v10 = p_p;
      a6->__r_.__value_.__s.__data_[0] = 0;
      a6[1].__r_.__value_.__s.__data_[0] = 0;
      if (v10) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&p_p);
      }
    }
    else
    {
      a6->__r_.__value_.__s.__data_[0] = 0;
      a6[1].__r_.__value_.__s.__data_[0] = 0;
    }
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void mlir::anec::ANECIRTop::Create()
{
}

double mlir::Region::getOps<mlir::anec::A12>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&unsigned __int8 v12[8] = v18;
  uint64_t v4 = v10;
  *(void *)__int16 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::anec::A12,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        uint64_t v4 = *(ZinIrHalH13g **)v12)
  {
    unint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  __int16 v17 = i;
  *(void *)uint64_t v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::anec::A12,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::anec::A12,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::anec::A12,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::anec::A12,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::anec::A12,void>::id;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A12>(mlir::ModuleOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<mlir::Operation *,std::string>,std::__unordered_map_hasher<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::string>,std::hash<mlir::Operation *>,std::equal_to<mlir::Operation *>,true>,std::__unordered_map_equal<mlir::Operation *,std::__hash_value_type<mlir::Operation *,std::string>,std::equal_to<mlir::Operation *>,std::hash<mlir::Operation *>,true>,std::allocator<std::__hash_value_type<mlir::Operation *,std::string>>>::__emplace_unique_key_args<mlir::Operation *,std::piecewise_construct_t const&,std::tuple<mlir::Operation *&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    __int16 v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_41;
    }
    if (prime < v10)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v10) {
LABEL_41:
      }
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    void *i = *v25;
LABEL_55:
    void *v25 = i;
    goto LABEL_56;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return i;
}

double mlir::Region::getOps<mlir::anec::A13>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&unsigned __int8 v12[8] = v18;
  unint64_t v4 = v10;
  *(void *)__int16 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::anec::A13,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        unint64_t v4 = *(ZinIrHalH13g **)v12)
  {
    unint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  BOOL v17 = i;
  *(void *)unint64_t v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::anec::A13,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::anec::A13,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::anec::A13,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::anec::A13,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::anec::A13,void>::id;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A13>(mlir::ModuleOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

double mlir::Region::getOps<mlir::anec::A14>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&unsigned __int8 v12[8] = v18;
  char v4 = v10;
  *(void *)__int16 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::anec::A14,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        char v4 = *(ZinIrHalH13g **)v12)
  {
    unint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  BOOL v17 = i;
  *(void *)__int16 v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::anec::A14,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::anec::A14,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::anec::A14,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::anec::A14,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::anec::A14,void>::id;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A14>(mlir::ModuleOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

double mlir::Region::getOps<mlir::anec::A15>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&unsigned __int8 v12[8] = v18;
  char v4 = v10;
  *(void *)__int16 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::anec::A15,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        char v4 = *(ZinIrHalH13g **)v12)
  {
    unint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  BOOL v17 = i;
  *(void *)__int16 v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::anec::A15,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::anec::A15,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::anec::A15,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::anec::A15,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::anec::A15,void>::id;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A15>(mlir::ModuleOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

double mlir::Region::getOps<mlir::anec::A16>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&unsigned __int8 v12[8] = v18;
  char v4 = v10;
  *(void *)__int16 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::anec::A16,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        char v4 = *(ZinIrHalH13g **)v12)
  {
    unint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  BOOL v17 = i;
  *(void *)__int16 v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::anec::A16,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::anec::A16,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::anec::A16,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::anec::A16,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::anec::A16,void>::id;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A16>(mlir::ModuleOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

double mlir::Region::getOps<mlir::anec::A17>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&unsigned __int8 v12[8] = v18;
  char v4 = v10;
  *(void *)__int16 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::anec::A17,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        char v4 = *(ZinIrHalH13g **)v12)
  {
    unint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  BOOL v17 = i;
  *(void *)__int16 v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::anec::A17,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::anec::A17,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::anec::A17,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::anec::A17,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::anec::A17,void>::id;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A17>(mlir::ModuleOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

double mlir::Region::getOps<mlir::anec::A11Legacy>@<D0>(mlir::Region *a1@<X0>, uint64_t a2@<X8>)
{
  mlir::Region::OpIterator::OpIterator(&v18, a1, 1);
  mlir::Region::OpIterator::OpIterator(&v9, a1, 0);
  *(_OWORD *)&unsigned __int8 v12[8] = v18;
  char v4 = v10;
  *(void *)__int16 v12 = v10;
  long long v11 = v9;
  *(void *)&v12[24] = v19;
  for (uint64_t i = mlir::detail::op_filter_iterator<mlir::anec::A11Legacy,mlir::Region::OpIterator>::filter;
        *(void *)v12 != *(void *)&v12[24];
        char v4 = *(ZinIrHalH13g **)v12)
  {
    unint64_t v5 = (uint64_t (*)(void))i;
    ZinIrHalH13g::~ZinIrHalH13g(v4);
    if (v5()) {
      break;
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v11);
  }
  long long v14 = v11;
  long long v15 = *(_OWORD *)v12;
  long long v16 = *(_OWORD *)&v12[16];
  BOOL v17 = i;
  *(void *)__int16 v8 = v19;
  *(_OWORD *)&v8[8] = v18;
  *(void *)&v8[24] = v19;
  *(_OWORD *)(a2 + 64) = v18;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v8;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v8[16];
  long long v6 = v15;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v6;
  double result = *(double *)&v16;
  *(_OWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 48) = v17;
  *(void *)(a2 + 56) = mlir::detail::op_iterator<mlir::anec::A11Legacy,mlir::Region::OpIterator>::unwrap;
  *(void *)(a2 + 112) = mlir::detail::op_filter_iterator<mlir::anec::A11Legacy,mlir::Region::OpIterator>::filter;
  *(void *)(a2 + 120) = mlir::detail::op_iterator<mlir::anec::A11Legacy,mlir::Region::OpIterator>::unwrap;
  return result;
}

BOOL mlir::detail::op_filter_iterator<mlir::anec::A11Legacy,mlir::Region::OpIterator>::filter(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 48) + 16) == (void)&mlir::detail::TypeIDResolver<mlir::anec::A11Legacy,void>::id;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult mlir::anec::anonymous namespace'::WriteMultiFunctionPass::writeMultiFunctionPlists<mlir::anec::A11Legacy>(mlir::ModuleOp)::{lambda(mlir::Operation *)#1}>(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 47) || (uint64_t result = mlir::Operation::getInherentAttr(a2, (uint64_t)"name", 4), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::contains(a2 + 56, "name", 4uLL);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  if (result)
  {
LABEL_6:
    Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    __int16 v8 = 261;
    v7[0] = "name";
    v7[1] = 4;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
    return mlir::Operation::removeAttr(a2, v6);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::anec::getRegionConversionInfo(mlir::Operation *,mlir::anec::ANECIRWeights &,std::shared_ptr<mlir::anec::RegionConversionInfo> &,llvm::DenseMap<long long,std::shared_ptr<mlir::anec::ANECIRConstant>,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseMapPair<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>> &)::$_0>(uint64_t a1, void **a2)
{
  uint64_t v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(void *, uint64_t))(*a2[6] + 32))(a2[6], v4)) {
    goto LABEL_50;
  }
  if (!mlir::anec::ANECIRWeights::hasConstant(*(mlir::anec::ANECIRWeights **)a1, (mlir::Operation *)a2))
  {
    if (!(_BYTE)result) {
      return result;
    }
    uint64_t v31 = mlir::anec::ANECIRWeights::lookupConstant(*(mlir::anec::ANECIRWeights **)a1, (mlir::Operation *)a2);
    uint64_t v33 = *(void *)(**(void **)(a1 + 24) + 256);
    if (v33 == *(void *)(**(void **)(a1 + 24) + 248)) {
      goto LABEL_50;
    }
    uint64_t v34 = *(void *)(v33 - 16);
    uint64_t v35 = *(std::__shared_weak_count **)(v33 - 8);
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v34 || *(void *)(v34 + 40) != v31)
    {
LABEL_47:
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      goto LABEL_50;
    }
    uint64_t v36 = *(void *)(a1 + 8);
    uint64_t v71 = (const char *)v31;
    uint64_t v72 = v34;
    uint64_t v73 = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v37 = *(_DWORD *)(v36 + 16);
    if (v37)
    {
      int v38 = v37 - 1;
      unsigned int v39 = v38 & (37 * v31);
      uint64_t v40 = (void *)(*(void *)v36 + 24 * v39);
      uint64_t v41 = *v40;
      uint64_t v42 = v35;
      if (v31 == *v40)
      {
LABEL_44:
        if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v42->__on_zero_shared)(v42, v32);
          std::__shared_weak_count::__release_weak(v42);
        }
        goto LABEL_47;
      }
      uint64_t v43 = 0;
      LODWORD(v32) = 1;
      while (v41 != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v43) {
          BOOL v44 = 0;
        }
        else {
          BOOL v44 = v41 == 0x8000000000000000;
        }
        if (v44) {
          uint64_t v43 = v40;
        }
        int v45 = v39 + v32;
        uint64_t v32 = (v32 + 1);
        unsigned int v39 = v45 & v38;
        uint64_t v40 = (void *)(*(void *)v36 + 24 * v39);
        uint64_t v41 = *v40;
        if (v31 == *v40)
        {
          uint64_t v42 = v35;
          goto LABEL_44;
        }
      }
      if (v43) {
        uint64_t v54 = (uint64_t)v43;
      }
      else {
        uint64_t v54 = (uint64_t)v40;
      }
    }
    else
    {
      uint64_t v54 = 0;
    }
    llvm::DenseMapBase<llvm::DenseMap<long long,std::shared_ptr<mlir::anec::ANECIRConstant>,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseMapPair<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>>,long long,std::shared_ptr<mlir::anec::ANECIRConstant>,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseMapPair<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>>::InsertIntoBucket<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>(v36, v54, (uint64_t *)&v71, (uint64_t)&v72);
    uint64_t v42 = v73;
    goto LABEL_44;
  }
  uint64_t v6 = mlir::anec::ANECIRWeights::lookupConstant(*(mlir::anec::ANECIRWeights **)a1, (mlir::Operation *)a2);
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  unsigned int v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    uint64_t v9 = *v7;
    int v10 = 37 * v6;
    unsigned int v11 = v8 - 1;
    unsigned int v12 = (v8 - 1) & (37 * v6);
    uint64_t v13 = (void *)(v9 + 24 * v12);
    uint64_t v14 = *v13;
    if (v6 != *v13)
    {
      int v56 = 1;
      uint64_t v57 = *v13;
      unsigned int v58 = v11 & v10;
      while (v57 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v59 = v58 + v56++;
        unsigned int v58 = v59 & v11;
        uint64_t v57 = *(void *)(v9 + 24 * v58);
        if (v6 == v57)
        {
          int v60 = 1;
          while (v14 != 0x7FFFFFFFFFFFFFFFLL)
          {
            unsigned int v61 = v12 + v60++;
            unsigned int v12 = v61 & v11;
            uint64_t v13 = (void *)(v9 + 24 * v12);
            uint64_t v14 = *v13;
            if (v6 == *v13) {
              goto LABEL_73;
            }
          }
          uint64_t v13 = (void *)(v9 + 24 * v8);
LABEL_73:
          uint64_t v15 = **(void **)(a1 + 16);
          goto LABEL_6;
        }
      }
      goto LABEL_50;
    }
    uint64_t v15 = **(void **)(a1 + 16);
LABEL_6:
    BOOL v17 = (unint64_t *)(v15 + 64);
    unint64_t v16 = *(void *)(v15 + 64);
    long long v18 = (char *)(v13 + 1);
    uint64_t v19 = *(unsigned int *)(v15 + 72);
    if (v19 >= *(_DWORD *)(v15 + 76))
    {
      uint64_t v66 = v6;
      uint64_t v67 = v15;
      unint64_t v62 = v19 + 1;
      uint64_t v65 = (char *)(v13 + 1);
      if (v16 <= (unint64_t)v18 && v16 + 16 * v19 > (unint64_t)v18)
      {
        uint64_t v64 = &v65[-v16];
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow((uint64_t)v17, v62);
        unint64_t v16 = *v17;
        long long v18 = &v64[*v17];
        uint64_t v6 = v66;
        uint64_t v15 = v67;
      }
      else
      {
        llvm::SmallVectorTemplateBase<std::shared_ptr<mlir::anec::ANECIROutput>,false>::grow((uint64_t)v17, v62);
        unint64_t v16 = *v17;
        uint64_t v6 = v66;
        uint64_t v15 = v67;
        long long v18 = v65;
      }
    }
    uint64_t v20 = *(unsigned int *)(v15 + 72);
    long long v21 = *(_OWORD *)v18;
    *(_OWORD *)(v16 + 16 * v20) = *(_OWORD *)v18;
    if (*((void *)&v21 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 1uLL, memory_order_relaxed);
      LODWORD(v20) = *(_DWORD *)(v15 + 72);
    }
    *(_DWORD *)(v15 + 72) = v20 + 1;
    uint8x8_t v22 = *(uint64_t **)(a1 + 8);
    uint64_t v23 = *v22;
    unsigned int v24 = *((_DWORD *)v22 + 4);
    if (v24)
    {
      unsigned int v25 = (v24 - 1) & v10;
      unint64_t v26 = (uint64_t *)(v23 + 24 * v25);
      uint64_t v27 = *v26;
      if (v6 == *v26)
      {
LABEL_35:
        uint64_t v46 = v26[1];
        if (*(char *)(v46 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v46 + 8), *(void *)(v46 + 16));
        }
        else
        {
          long long v47 = *(_OWORD *)(v46 + 8);
          v70.__r_.__value_.__r.__words[2] = *(void *)(v46 + 24);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v47;
        }
        Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 3));
        std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        long long v50 = &v70;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
          long long v50 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        __int16 v69 = 261;
        v68[0] = v50;
        v68[1] = size;
        uint64_t v51 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v68);
        long long v52 = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 3));
        __int16 v74 = 261;
        uint64_t v71 = "name";
        uint64_t v72 = 4;
        uint64_t v53 = mlir::StringAttr::get(v52, (mlir::MLIRContext *)&v71);
        mlir::Operation::setAttr((uint64_t)a2, v53, v51);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        goto LABEL_50;
      }
      int v28 = 1;
      while (v27 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v29 = v25 + v28++;
        unsigned int v25 = v29 & (v24 - 1);
        unint64_t v26 = (uint64_t *)(v23 + 24 * v25);
        uint64_t v27 = *v26;
        if (v6 == *v26) {
          goto LABEL_35;
        }
      }
    }
    unint64_t v26 = (uint64_t *)(v23 + 24 * v24);
    goto LABEL_35;
  }
LABEL_50:
  uint64_t result = mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
  if (result)
  {
    if (a2)
    {
      uint64_t InterfaceFor = mlir::OpInterface<mlir::anec::PlistGeneratorInterface,mlir::anec::detail::PlistGeneratorInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)a2);
      uint64_t v71 = (const char *)a2;
      uint64_t v72 = InterfaceFor;
      return mlir::anec::PlistGeneratorInterface::addOpToNetwork((uint64_t)&v71, **(void **)(a1 + 24), *(void *)a1);
    }
    else
    {
      uint64_t result = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
    }
  }
  else
  {
    uint64_t v71 = 0;
    uint64_t v72 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<long long,std::shared_ptr<mlir::anec::ANECIRConstant>,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseMapPair<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>>,long long,std::shared_ptr<mlir::anec::ANECIRConstant>,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseMapPair<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>>::InsertIntoBucket<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    uint64_t v10 = *(void *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<long long,std::shared_ptr<mlir::anec::ANECIRConstant>,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseMapPair<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>>::grow(a1, v9);
  uint64_t v10 = *a3;
  int v12 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v13 = (37 * *a3) & v12;
  a2 = *(void *)a1 + 24 * v13;
  uint64_t v14 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v14 == 0x8000000000000000;
      }
      if (v17) {
        uint64_t v15 = a2;
      }
      unsigned int v18 = v13 + v16++;
      unsigned int v13 = v18 & v12;
      a2 = *(void *)a1 + 24 * (v18 & v12);
      uint64_t v14 = *(void *)a2;
      if (v10 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v15) {
      a2 = v15;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != 0x7FFFFFFFFFFFFFFFLL) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  return a2;
}

void *llvm::DenseMap<long long,std::shared_ptr<mlir::anec::ANECIRConstant>,llvm::DenseMapInfo<long long,void>,llvm::detail::DenseMapPair<long long,std::shared_ptr<mlir::anec::ANECIRConstant>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      int v12 = &result[3 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      unsigned int v18 = result;
      do
      {
        void *v18 = 0x7FFFFFFFFFFFFFFFLL;
        v18[3] = 0x7FFFFFFFFFFFFFFFLL;
        v18 += 6;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = v4;
          do
          {
            uint64_t v26 = *(void *)v20;
            if ((unint64_t)(*(void *)v20 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
            {
              int v27 = *(_DWORD *)(a1 + 16) - 1;
              unsigned int v28 = v27 & (37 * v26);
              uint64_t v25 = *(void *)a1 + 24 * v28;
              uint64_t v29 = *(void *)v25;
              if (v26 != *(void *)v25)
              {
                uint64_t v30 = 0;
                int v31 = 1;
                while (v29 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  if (v30) {
                    BOOL v32 = 0;
                  }
                  else {
                    BOOL v32 = v29 == 0x8000000000000000;
                  }
                  if (v32) {
                    uint64_t v30 = v25;
                  }
                  unsigned int v33 = v28 + v31++;
                  unsigned int v28 = v33 & v27;
                  uint64_t v25 = *(void *)a1 + 24 * (v33 & v27);
                  uint64_t v29 = *(void *)v25;
                  if (v26 == *(void *)v25) {
                    goto LABEL_26;
                  }
                }
                if (v30) {
                  uint64_t v25 = v30;
                }
              }
LABEL_26:
              *(void *)uint64_t v25 = v26;
              *(_OWORD *)(v25 + 8) = *(_OWORD *)((char *)v20 + 8);
              *((void *)v20 + 1) = 0;
              *((void *)v20 + 2) = 0;
              ++*(_DWORD *)(a1 + 8);
            }
            uint64_t v20 = (llvm *)((char *)v20 + 24);
          }
          while (v20 != (llvm *)((char *)v4 + 24 * v3));
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      int v12 = result;
    }
    uint64_t v19 = &result[3 * v10];
    do
    {
      *int v12 = 0x7FFFFFFFFFFFFFFFLL;
      v12 += 3;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      uint64_t v15 = result;
LABEL_21:
      unsigned int v24 = &result[3 * v13];
      do
      {
        void *v15 = 0x7FFFFFFFFFFFFFFFLL;
        v15 += 3;
      }
      while (v15 != v24);
      return result;
    }
    unint64_t v21 = v14 / 0x18 + 1;
    uint64_t v15 = &result[3 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v22 = v21 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v23 = result;
    do
    {
      void *v23 = 0x7FFFFFFFFFFFFFFFLL;
      v23[3] = 0x7FFFFFFFFFFFFFFFLL;
      v23 += 6;
      v22 -= 2;
    }
    while (v22);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t mlir::arith::invertPredicate(uint64_t a1)
{
  return qword_211F09F88[a1];
}

void mlir::arith::ConstantOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  v41[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)a1 - 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  if (v6) {
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v6 + 8);
  }
  int v7 = *(void **)(*(void *)v6 + 136);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v38 = v9;
  if (v8)
  {
    unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(void *)(v5 & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
      unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFF8;
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v37 = v13;
    if (v13 && mlir::IntegerType::getWidth((mlir::IntegerType *)&v37) == 1)
    {
      if (*(_DWORD *)(*(void *)a1 + 36)) {
        uint64_t v14 = *(void *)a1 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
      uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v38);
      if (Int) {
        uint64_t v17 = 4;
      }
      else {
        uint64_t v17 = 5;
      }
      if (Int) {
        unsigned int v18 = "true";
      }
      else {
        unsigned int v18 = "false";
      }
      a2(a3, NextResultAtOffset, v18, v17);
    }
    else
    {
      unsigned int v39 = v41;
      long long v40 = xmmword_211F09750;
      int v29 = 0;
      char v33 = 0;
      uint64_t v34 = 0;
      int v35 = 1;
      unint64_t v31 = 0;
      BOOL v32 = 0;
      uint64_t v30 = 0;
      unsigned int v28 = &unk_26C35BBC8;
      uint64_t v36 = &v39;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v28, 0, 0, 0);
      uint64_t v19 = v32;
      if ((unint64_t)v32 >= v31)
      {
        uint64_t v20 = llvm::raw_ostream::write((llvm::raw_ostream *)&v28, 99);
      }
      else
      {
        ++v32;
        *uint64_t v19 = 99;
        uint64_t v20 = (llvm::raw_ostream *)&v28;
      }
      mlir::IntegerAttr::getValue((uint64_t)&v38, (llvm::APInt *)&v26);
      llvm::APInt::print((llvm::APInt *)&v26, v20, 1);
      if (v27 >= 0x41 && v26) {
        MEMORY[0x21667D390](v26, 0x1000C8000313F17);
      }
      if (v37)
      {
        unint64_t v21 = v32;
        if ((unint64_t)v32 >= v31)
        {
          uint64_t v22 = llvm::raw_ostream::write((llvm::raw_ostream *)&v28, 95);
        }
        else
        {
          ++v32;
          *unint64_t v21 = 95;
          uint64_t v22 = (llvm::raw_ostream *)&v28;
        }
        unint64_t v26 = v12;
        mlir::Type::print((llvm::raw_ostream *)&v26, v22);
      }
      if (*(_DWORD *)(*(void *)a1 + 36)) {
        uint64_t v23 = *(void *)a1 - 16;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = mlir::detail::OpResultImpl::getNextResultAtOffset(v23, 0);
      a2(a3, v24, (const char *)*v36, (uint64_t)v36[1]);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v28);
      if (v39 != v41) {
        free(v39);
      }
    }
  }
  else
  {
    if (*(_DWORD *)(*(void *)a1 + 36)) {
      uint64_t v10 = *(void *)a1 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
    a2(a3, v11, "cst", 3);
  }
}

void *mlir::arith::ConstantOp::getValue(mlir::arith::ConstantOp *this)
{
  int v1 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (!v1) {
    return 0;
  }
  mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v1 + 8);
  return v1;
}

uint64_t mlir::arith::ConstantOp::verify(mlir::arith::ConstantOp *this)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  unint64_t v2 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v3 + 8);
    uint64_t v66 = v3;
    uint64_t v67 = v4;
    if (mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v66) != v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    if (mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v66) != v2)
    {
LABEL_3:
      __int16 v62 = 257;
      mlir::OpState::emitOpError((uint64_t *)this, v61, (uint64_t)&v66);
      if (v66)
      {
        int v63 = 3;
        uint64_t v64 = "value type ";
        uint64_t v65 = 11;
        uint64_t v5 = &v63;
        uint64_t v6 = (char *)v68;
        if (v69 >= v70)
        {
          unint64_t v50 = v69 + 1;
          if (v68 <= &v63 && (char *)v68 + 24 * v69 > (char *)&v63)
          {
            int64_t v55 = (char *)&v63 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v50, 24);
            uint64_t v6 = (char *)v68;
            uint64_t v5 = (int *)((char *)v68 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v50, 24);
            uint64_t v5 = &v63;
            uint64_t v6 = (char *)v68;
          }
        }
        int v7 = &v6[24 * v69];
        long long v8 = *(_OWORD *)v5;
        *((void *)v7 + 2) = *((void *)v5 + 2);
        *(_OWORD *)int v7 = v8;
        ++v69;
      }
      uint64_t v9 = *(void **)(*(void *)this
                      + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                      + 64);
      if (v9)
      {
        uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
        unsigned int v59 = v9;
        uint64_t v60 = v10;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v59);
        if (!v66) {
          goto LABEL_26;
        }
      }
      else
      {
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v59);
        if (!v66) {
          goto LABEL_26;
        }
      }
      unint64_t v16 = &v63;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v63, canMapOperands);
      uint64_t v17 = (char *)v68;
      if (v69 >= v70)
      {
        unint64_t v51 = v69 + 1;
        if (v68 <= &v63 && (char *)v68 + 24 * v69 > (char *)&v63)
        {
          int64_t v56 = (char *)&v63 - (unsigned char *)v68;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v51, 24);
          uint64_t v17 = (char *)v68;
          unint64_t v16 = (int *)((char *)v68 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v51, 24);
          unint64_t v16 = &v63;
          uint64_t v17 = (char *)v68;
        }
      }
      unsigned int v18 = &v17[24 * v69];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = *((void *)v16 + 2);
      *(_OWORD *)unsigned int v18 = v19;
      uint64_t v20 = ++v69;
      if (v66)
      {
        int v63 = 3;
        uint64_t v64 = " must match return type: ";
        uint64_t v65 = 25;
        unint64_t v21 = &v63;
        uint64_t v22 = (char *)v68;
        if (v20 >= v70)
        {
          unint64_t v52 = v20 + 1;
          BOOL v53 = (char *)v68 + 24 * v20 > (char *)&v63;
          if (v68 <= &v63 && v53)
          {
            int64_t v57 = (char *)&v63 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v52, 24);
            uint64_t v22 = (char *)v68;
            unint64_t v21 = (int *)((char *)v68 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v52, 24);
            unint64_t v21 = &v63;
            uint64_t v22 = (char *)v68;
          }
        }
        uint64_t v23 = &v22[24 * v69];
        long long v24 = *(_OWORD *)v21;
        *((void *)v23 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v23 = v24;
        ++v69;
        if (v66)
        {
          uint64_t v25 = &v63;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v63, v2);
          unint64_t v26 = (char *)v68;
          if (v69 >= v70)
          {
            unint64_t v54 = v69 + 1;
            if (v68 <= &v63 && (char *)v68 + 24 * v69 > (char *)&v63)
            {
              int64_t v58 = (char *)&v63 - (unsigned char *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
              unint64_t v26 = (char *)v68;
              uint64_t v25 = (int *)((char *)v68 + v58);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v54, 24);
              uint64_t v25 = &v63;
              unint64_t v26 = (char *)v68;
            }
          }
          unsigned int v27 = &v26[24 * v69];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = *((void *)v25 + 2);
          *(_OWORD *)unsigned int v27 = v28;
          ++v69;
        }
      }
LABEL_26:
      uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
      if (v66) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
      }
      if (v76)
      {
        int v29 = __p;
        if (__p)
        {
          uint64_t v30 = v75;
          unint64_t v31 = __p;
          if (v75 != __p)
          {
            do
              uint64_t v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
            while (v30 != v29);
            unint64_t v31 = __p;
          }
          int v75 = v29;
          operator delete(v31);
        }
        BOOL v32 = v72;
        if (!v72) {
          goto LABEL_71;
        }
        char v33 = v73;
        uint64_t v34 = v72;
        if (v73 == v72)
        {
LABEL_70:
          uint64_t v73 = v32;
          operator delete(v34);
LABEL_71:
          if (v68 != v71) {
            free(v68);
          }
          return v15;
        }
        do
        {
          uint64_t v36 = *--v33;
          uint64_t v35 = v36;
          void *v33 = 0;
          if (v36) {
            MEMORY[0x21667D390](v35, 0x1000C8077774924);
          }
        }
        while (v33 != v32);
LABEL_69:
        uint64_t v34 = v72;
        goto LABEL_70;
      }
      return v15;
    }
  }
  if (*(_UNKNOWN **)(*(void *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    && (uint64_t v66 = (void *)v2, mlir::IntegerType::getSignedness((mlir::IntegerType *)&v66)))
  {
    v61[0] = (void **)"integer return type must be signless";
    __int16 v62 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v61, (uint64_t)&v66);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
    if (v66) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
    }
    if (v76)
    {
      unint64_t v37 = __p;
      if (__p)
      {
        uint64_t v38 = v75;
        unsigned int v39 = __p;
        if (v75 != __p)
        {
          do
            uint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          unsigned int v39 = __p;
        }
        int v75 = v37;
        operator delete(v39);
      }
      BOOL v32 = v72;
      if (!v72) {
        goto LABEL_71;
      }
      long long v40 = v73;
      uint64_t v34 = v72;
      if (v73 == v72) {
        goto LABEL_70;
      }
      do
      {
        uint64_t v42 = *--v40;
        uint64_t v41 = v42;
        void *v40 = 0;
        if (v42) {
          MEMORY[0x21667D390](v41, 0x1000C8077774924);
        }
      }
      while (v40 != v32);
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(*(void *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                    + 64);
    if (v12) {
      mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v12 + 8);
    }
    unint64_t v13 = *(void **)(*(void *)v12 + 136);
    BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
       || v13 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
    if (v14 || mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12 + 8)) {
      return 1;
    }
    v61[0] = (void **)"value must be an integer, float, or elements attribute";
    __int16 v62 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v61, (uint64_t)&v66);
    uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v66);
    if (v66) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
    }
    if (v76)
    {
      uint64_t v43 = __p;
      if (__p)
      {
        BOOL v44 = v75;
        int v45 = __p;
        if (v75 != __p)
        {
          do
            BOOL v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          int v45 = __p;
        }
        int v75 = v43;
        operator delete(v45);
      }
      BOOL v32 = v72;
      if (!v72) {
        goto LABEL_71;
      }
      uint64_t v46 = v73;
      uint64_t v34 = v72;
      if (v73 == v72) {
        goto LABEL_70;
      }
      do
      {
        uint64_t v48 = *--v46;
        uint64_t v47 = v48;
        void *v46 = 0;
        if (v48) {
          MEMORY[0x21667D390](v47, 0x1000C8077774924);
        }
      }
      while (v46 != v32);
      goto LABEL_69;
    }
  }
  return v15;
}

BOOL mlir::arith::ConstantOp::isBuildableWith(uint64_t a1, uint64_t a2)
{
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)a1 + 8))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    return 0;
  }
  uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)a1 + 8);
  uint64_t v9 = a1;
  uint64_t v10 = v4;
  if (!a1) {
    return 0;
  }
  if (mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v9) != a2) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    uint64_t v8 = a2;
    if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v8)) {
      return 0;
    }
  }
  uint64_t v6 = *(void **)(*(void *)a1 + 136);
  return v6 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || v6 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
      || mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)a1 + 8) != 0;
}

ZinIrHalH13g *mlir::arith::ConstantOp::materialize(mlir::OpBuilder *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!mlir::arith::ConstantOp::isBuildableWith((uint64_t)a2, a3)) {
    return 0;
  }
  if (a2) {
    uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a2 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  v9[0] = (uint64_t)a2;
  v9[1] = v7;
  return mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::TypedAttr>(a1, a4, v9);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::TypedAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  v17[38] = *MEMORY[0x263EF8340];
  uint64_t v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    __int16 v16 = 1283;
    void v15[2] = (uint64_t)"arith.constant";
    v15[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v17, *a3, a3[1]);
  uint64_t v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((void *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

unint64_t mlir::arith::ConstantOp::fold(uint64_t a1)
{
  unint64_t v1 = *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64);
  if (v1) {
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v1 + 8);
  }
  return v1 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::ConstantIntOp::build(mlir::Builder *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  IntegerCFNumberType Type = mlir::Builder::getIntegerType(a1, a4);
  uint64_t IntegerAttr = (void *)mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a3);
  uint64_t v9 = IntegerAttr;
  if (!IntegerAttr)
  {
    unint64_t v13 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
    *unint64_t v13 = 0;
    v13[1] = 0;
    uint64_t v12 = *(unsigned int *)(a2 + 72);
    if (v12 < *(_DWORD *)(a2 + 76)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IntegerAttr + 8);
  uint64_t v11 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  *uint64_t v11 = v9;
  v11[1] = v10;
  uint64_t v12 = *(unsigned int *)(a2 + 72);
  if (v12 >= *(_DWORD *)(a2 + 76))
  {
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
LABEL_4:
  *(void *)(*(void *)(a2 + 64) + 8 * v12) = IntegerType;
  ++*(_DWORD *)(a2 + 72);
}

void mlir::arith::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  *uint64_t v9 = a4;
  v9[1] = a5;
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v10) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::arith::ConstantIntOp::classof(BOOL this, mlir::Operation *a2)
{
  if (this)
  {
    if (*(_UNKNOWN **)(*(void *)(this + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      unint64_t v2 = *(void *)(this - 8) & 0xFFFFFFFFFFFFFFF8;
      return mlir::Type::isSignlessInteger((mlir::Type *)&v2);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

void mlir::arith::ConstantIndexOp::build(mlir::IndexType **a1, uint64_t a2, mlir::MLIRContext *a3)
{
  IndexCFNumberType Type = mlir::Builder::getIndexType(a1, (mlir::MLIRContext *)a2);
  IndexAttr = (void *)mlir::Builder::getIndexAttr(a1, a3);
  char v8 = IndexAttr;
  if (!IndexAttr)
  {
    uint64_t v12 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v12 = 0;
    v12[1] = 0;
    uint64_t v11 = *(unsigned int *)(a2 + 72);
    if (v11 < *(_DWORD *)(a2 + 76)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IndexAttr + 8);
  uint64_t v10 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  *uint64_t v10 = v8;
  v10[1] = v9;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
LABEL_3:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
LABEL_4:
  *(void *)(*(void *)(a2 + 64) + 8 * v11) = IndexType;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::arith::ConstantIndexOp::classof(BOOL this, mlir::Operation *a2)
{
  if (this)
  {
    if (*(_UNKNOWN **)(*(void *)(this + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      unint64_t v2 = *(void *)(this - 8) & 0xFFFFFFFFFFFFFFF8;
      return mlir::Type::isIndex((mlir::Type *)&v2);
    }
    else
    {
      return 0;
    }
  }
  return this;
}

uint64_t mlir::arith::AddIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v4) {
    goto LABEL_16;
  }
  DWORD2(v81) = 1;
  *(void *)&long long v81 = 0;
  *(void *)&long long v79 = &v81;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v79, v4);
  int v6 = DWORD2(v81);
  if (v5)
  {
    if (DWORD2(v81) < 0x41)
    {
      BOOL v7 = (void)v81 == 0;
      goto LABEL_11;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v81) > 0x40)
    {
      if ((void)v81) {
        MEMORY[0x21667D390](v81, 0x1000C8000313F17);
      }
      goto LABEL_16;
    }
    BOOL v7 = *(void *)v81 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (DWORD2(v81) < 0x41) {
      goto LABEL_11;
    }
  }
  if (!(void)v81)
  {
LABEL_11:
    if (v7) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  MEMORY[0x21667D390](v81, 0x1000C8000313F17);
  if (v7)
  {
LABEL_12:
    uint64_t v8 = *(void *)(*a1 + 72);
    return *(void *)(v8 + 24) | 4;
  }
LABEL_16:
  *(void *)&long long v81 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v81);
  if (DefiningOp)
  {
    uint64_t v11 = *a1;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    {
      uint64_t v12 = *(void *)(DefiningOp + 72);
      if (*(void *)(*(void *)(v11 + 72) + 56) == *(void *)(v12 + 56)) {
        return *(void *)(v12 + 24) | 4;
      }
    }
  }
  else
  {
    uint64_t v11 = *a1;
  }
  *(void *)&long long v81 = *(void *)(*(void *)(v11 + 72) + 56);
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v81);
  if (v13)
  {
    if (*(_UNKNOWN **)(*(void *)(v13 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    {
      uint64_t v8 = *(void *)(v13 + 72);
      if (*(void *)(*(void *)(*a1 + 72) + 24) == *(void *)(v8 + 56)) {
        return *(void *)(v8 + 24) | 4;
      }
    }
  }
  __int16 v14 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v14;
  if (*v14
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v16 = *v14;
  }
  else
  {
    uint64_t v16 = v14[1];
    if (!v16 || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v81 = canMapOperands;
          *((void *)&v81 + 1) = v17;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v81);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v81 = 0uLL;
        }
      }
      else
      {
        long long v81 = 0uLL;
      }
      uint64_t v16 = v14[1];
      if (v16)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8))
        {
          uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8);
          *(void *)&long long v81 = v16;
          *((void *)&v81 + 1) = v18;
          uint64_t v19 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v81);
          uint64_t v16 = 0;
          if (canMapOperands && v19 && canMapOperands == v19)
          {
            uint64_t v20 = *v14;
            if (*v14
              && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v16 = *v14;
            }
            else
            {
              uint64_t v21 = v14[1];
              if (v21)
              {
                uint64_t v22 = *(void **)(*(void *)v21 + 136);
                if (v22 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  uint64_t v16 = v14[1];
                }
                else {
                  uint64_t v16 = 0;
                }
                if (!v20 || v22 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  return v16 & 0xFFFFFFFFFFFFFFFBLL;
                }
                if (v22 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                  && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                {
                  uint64_t v62 = *v14;
                  uint64_t v59 = v21;
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
                  if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59))
                  {
                    mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v68);
                    mlir::IntegerAttr::getValue((uint64_t)&v59, (llvm::APInt *)&v65);
                    DWORD2(v79) = v69;
                    if (v69 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v79, (const llvm::APInt *)&v68);
                    }
                    *(void *)&long long v79 = v68;
                    DWORD2(v81) = v69;
                    *(void *)&long long v81 = v68;
                    DWORD2(v79) = 0;
                    llvm::APInt::operator+=((uint64_t)&v81, &v65);
                    LOBYTE(v82[0]) = 1;
                    if (DWORD2(v79) >= 0x41 && (void)v79) {
                      MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                    }
                    if (v66 >= 0x41 && v65) {
                      MEMORY[0x21667D390](v65, 0x1000C8000313F17);
                    }
                    if (v69 >= 0x41 && v68) {
                      MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                    }
                    uint64_t v16 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v81);
                    if (!LOBYTE(v82[0])) {
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    goto LABEL_84;
                  }
                }
                else
                {
                  if (mlir::DenseElementsAttr::classof(*v14)) {
                    uint64_t v24 = v20;
                  }
                  else {
                    uint64_t v24 = 0;
                  }
                  *(void *)&long long v81 = v24;
                  if (v24
                    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v81)
                    && ((v25 = v14[1], !mlir::DenseElementsAttr::classof(v25)) ? (uint64_t v26 = 0) : (uint64_t v26 = v25),
                        (*(void *)&long long v81 = v26) != 0
                     && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v81)))
                  {
                    uint64_t v27 = v14[1];
                    uint64_t v62 = *v14;
                    uint64_t v59 = v27;
                    uint64_t v28 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62);
                    if (v28 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59))
                    {
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v62, (uint64_t)&v81);
                      long long v79 = v81;
                      long long v80 = v82[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v79, (llvm::APInt *)&v68);
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v59, (uint64_t)&v81);
                      long long v79 = v81;
                      long long v80 = v82[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v79, (llvm::APInt *)&v65);
                      DWORD2(v79) = v69;
                      if (v69 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v79, (const llvm::APInt *)&v68);
                      }
                      *(void *)&long long v79 = v68;
                      DWORD2(v81) = v69;
                      *(void *)&long long v81 = v68;
                      DWORD2(v79) = 0;
                      llvm::APInt::operator+=((uint64_t)&v81, &v65);
                      LOBYTE(v82[0]) = 1;
                      if (DWORD2(v79) >= 0x41 && (void)v79) {
                        MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                      }
                      if (v66 >= 0x41 && v65) {
                        MEMORY[0x21667D390](v65, 0x1000C8000313F17);
                      }
                      if (v69 >= 0x41 && v68) {
                        MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                      }
                      uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                      uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v54, (llvm::APInt *)&v81, 1);
                      if (!LOBYTE(v82[0])) {
                        return v16 & 0xFFFFFFFFFFFFFFFBLL;
                      }
LABEL_84:
                      if (DWORD2(v81) >= 0x41)
                      {
                        if ((void)v81) {
                          MEMORY[0x21667D390](v81, 0x1000C8000313F17);
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                  else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v14 + 8) {
                         && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v14[1] + 8))
                  }
                  {
                    int v29 = (void *)*v14;
                    uint64_t v30 = *v14 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v29 + 8) : 0;
                    uint64_t v73 = v29;
                    uint64_t v74 = v30;
                    unint64_t v31 = (void *)v14[1];
                    uint64_t v32 = v31 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8) : 0;
                    v72[0] = v31;
                    v72[1] = v32;
                    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v73);
                    if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v72))
                    {
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v73, (uint64_t)&v79);
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v72, (uint64_t)&v68);
                      uint64_t v16 = 0;
                      int v34 = v71;
                      if (BYTE8(v80) && v71)
                      {
                        LOWORD(v65) = v79;
                        if ((_BYTE)v79) {
                          uint64_t v66 = *((void *)&v79 + 1);
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v79 + 1) + 16))(&v66);
                        }
                        uint64_t v67 = v80;
                        LOWORD(v62) = v68;
                        if ((_BYTE)v68) {
                          uint64_t v63 = v69;
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v69 + 16))(&v63);
                        }
                        uint64_t v64 = v70;
                        *(void *)&long long v81 = v82;
                        *((void *)&v81 + 1) = 0x400000000;
                        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
                        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v81, NumElements);
                        uint64_t v36 = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
                        if (v36)
                        {
                          uint64_t v37 = v36;
                          uint64_t v38 = v67;
                          while (1)
                          {
                            uint64_t v39 = BYTE1(v65) ? 0 : v38;
                            if ((_BYTE)v65)
                            {
                              long long v40 = (const llvm::APInt *)(v66 + 16 * v39);
                              unsigned int v58 = *((_DWORD *)v40 + 2);
                              if (v58 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v57, v40);
                              }
                              uint64_t v57 = *(void *)v40;
                            }
                            else
                            {
                              (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 24))(&v57);
                            }
                            uint64_t v41 = BYTE1(v62) ? 0 : v64;
                            if ((_BYTE)v62)
                            {
                              uint64_t v42 = (const llvm::APInt *)(v63 + 16 * v41);
                              unsigned int v56 = *((_DWORD *)v42 + 2);
                              if (v56 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v55, v42);
                              }
                              int64_t v55 = *(void **)v42;
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v63 + 24))(&v55);
                            }
                            unsigned int v76 = v58;
                            if (v58 > 0x40) {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v75, (const llvm::APInt *)&v57);
                            }
                            uint64_t v75 = v57;
                            unsigned int v78 = v58;
                            uint64_t v77 = v57;
                            unsigned int v76 = 0;
                            llvm::APInt::operator+=((uint64_t)&v77, &v55);
                            unsigned int v60 = v78;
                            uint64_t v59 = v77;
                            char v61 = 1;
                            if (v76 >= 0x41 && v75) {
                              MEMORY[0x21667D390](v75, 0x1000C8000313F17);
                            }
                            if (v56 >= 0x41 && v55) {
                              MEMORY[0x21667D390](v55, 0x1000C8000313F17);
                            }
                            if (v58 >= 0x41 && v57) {
                              MEMORY[0x21667D390](v57, 0x1000C8000313F17);
                            }
                            if (!v61) {
                              break;
                            }
                            Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v81, (unint64_t)&v59, 1);
                            BOOL v44 = (llvm::APInt *)(v81 + 16 * DWORD2(v81));
                            unsigned int v45 = *((_DWORD *)Address + 2);
                            *((_DWORD *)v44 + 2) = v45;
                            if (v45 > 0x40) {
                              llvm::APInt::initSlowCase(v44, (const llvm::APInt *)Address);
                            }
                            *(void *)BOOL v44 = *(void *)Address;
                            ++DWORD2(v81);
                            if (v61 && v60 >= 0x41 && v59) {
                              MEMORY[0x21667D390](v59, 0x1000C8000313F17);
                            }
                            uint64_t v38 = ++v67;
                            ++v64;
                            if (!--v37) {
                              goto LABEL_141;
                            }
                          }
                          uint64_t v16 = 0;
                        }
                        else
                        {
LABEL_141:
                          uint64_t v46 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                          uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v46, (llvm::APInt *)v81, DWORD2(v81));
                        }
                        uint64_t v47 = (char *)v81;
                        if (DWORD2(v81))
                        {
                          uint64_t v48 = 16 * DWORD2(v81);
                          do
                          {
                            if (*(_DWORD *)&v47[v48 - 8] >= 0x41u)
                            {
                              uint64_t v49 = *(void *)&v47[v48 - 16];
                              if (v49) {
                                MEMORY[0x21667D390](v49, 0x1000C8000313F17);
                              }
                            }
                            v48 -= 16;
                          }
                          while (v48);
                          uint64_t v47 = (char *)v81;
                        }
                        if (v47 != (char *)v82) {
                          free(v47);
                        }
                        if (!(_BYTE)v62)
                        {
                          uint64_t v50 = v63;
                          uint64_t v63 = 0;
                          if (v50) {
                            (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
                          }
                        }
                        if (!(_BYTE)v65)
                        {
                          uint64_t v51 = v66;
                          uint64_t v66 = 0;
                          if (v51) {
                            (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
                          }
                        }
                        int v34 = v71;
                      }
                      if (v34)
                      {
                        if (!(_BYTE)v68)
                        {
                          uint64_t v52 = v69;
                          uint64_t v69 = 0;
                          if (v52) {
                            (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
                          }
                        }
                      }
                      if (BYTE8(v80))
                      {
                        if (!(_BYTE)v79)
                        {
                          uint64_t v53 = *((void *)&v79 + 1);
                          *((void *)&v79 + 1) = 0;
                          if (v53) {
                            (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
                          }
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                }
              }
              uint64_t v16 = 0;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
          long long v81 = 0uLL;
        }
      }
      else
      {
        long long v81 = 0uLL;
      }
    }
  }
  return v16 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::AddIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::arith::AddUIExtendedOp::getShapeForUnroll(mlir::arith::AddUIExtendedOp *this@<X0>, uint64_t a2@<X8>)
{
  void v16[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(void *)v3 + 136) != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
    unint64_t v3 = 0;
  }
  unint64_t v13 = v3;
  if (!v3)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
    return;
  }
  uint64_t Value = (const void *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v13);
  unint64_t v6 = v4;
  __int16 v14 = v16;
  uint64_t v15 = 0x400000000;
  size_t v7 = 8 * v4;
  if (8 * v4 < 0x21)
  {
    int v8 = 0;
    uint64_t v9 = v16;
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v4, 8);
  int v8 = v15;
  uint64_t v9 = v14;
  if (v6)
  {
LABEL_9:
    memcpy(&v9[v8], Value, v7);
    int v8 = v15;
    uint64_t v9 = v14;
  }
LABEL_10:
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  unint64_t v10 = (v8 + v6);
  LODWORD(v15) = v10;
  if (v10 && &v14 != (void **)a2)
  {
    if (v9 == v16)
    {
      unsigned int v12 = v10;
      uint64_t v9 = v16;
      if (v10 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v10, 8),
            unsigned int v12 = v15,
            uint64_t v9 = v14,
            v15))
      {
        memcpy(*(void **)a2, v9, 8 * v12);
        uint64_t v9 = v14;
      }
      *(_DWORD *)(a2 + 8) = v10;
    }
    else
    {
      *(void *)a2 = v9;
      int v11 = HIDWORD(v15);
      *(_DWORD *)(a2 + 8) = v10;
      *(_DWORD *)(a2 + 12) = v11;
      __int16 v14 = v16;
      HIDWORD(v15) = 0;
      uint64_t v9 = v16;
    }
    LODWORD(v15) = 0;
  }
  *(unsigned char *)(a2 + 48) = 1;
  if (v9 != v16) {
    free(v9);
  }
}

uint64_t mlir::arith::AddUIExtendedOp::fold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v19)(char **__return_ptr, uint64_t *, uint64_t *);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *canMapOperands;
  void *I1SameShape;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t Value;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t Type;
  int v42;
  unint64_t NumElements;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const llvm::APInt *v48;
  uint64_t v49;
  const llvm::APInt *v50;
  char *Address;
  llvm::APInt *v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  char v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)@<X0>(const llvm::APInt *@<X0>, const llvm::APInt *@<X1>, uint64_t@<X8>);
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  void v80[2];
  void *v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  void *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  long long v95;
  long long v96;
  long long v97;
  _OWORD v98[4];
  uint64_t v99;

  uint64_t v99 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v6 = *(void *)a1 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 1);
  uint64_t v8 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0) + 8);
  uint64_t v9 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
  *(void *)&uint64_t v95 = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
  *(void *)&uint64_t v97 = v9;
  uint64_t DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v97);
  if (!DefiningOp
    || !mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v95, DefiningOp))
  {
    uint64_t v18 = *(uint64_t **)(a2 + 40);
    uint64_t v19 = (void (*)(char **__return_ptr, uint64_t *, uint64_t *))*v18;
    if (*v18 && *(_UNKNOWN **)(*(void *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      uint64_t v20 = *v18;
      goto LABEL_21;
    }
    uint64_t v20 = v18[1];
    if (v20 && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
LABEL_21:
      *(void *)&uint64_t v97 = v20;
      *((void *)&v97 + 1) = **(void **)(a2 + 40);
      uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v20 + 8);
      *(void *)&uint64_t v95 = v20;
      *((void *)&v95 + 1) = v24;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v95);
      I1Sameuint64_t Shape = (void *)getI1SameShape(canMapOperands);
      unsigned int v76 = calculateUnsignedOverflow;
      uint64_t result = mlir::constFoldBinaryOpConditional<mlir::IntegerAttr,llvm::APInt,void,mlir::Attribute mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,void,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&)>(llvm::ArrayRef<mlir::Attribute>,mlir::Type,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&) &&)::{lambda(llvm::APInt,llvm::APInt)#1}>((uint64_t *)&v97, 2, I1SameShape, (void (**)(char **__return_ptr, uint64_t *, uint64_t *))&v76);
      if (!result) {
        return result;
      }
      unint64_t ZeroAttr = result;
      unint64_t v12 = v20 & 0xFFFFFFFFFFFFFFFBLL;
      uint64_t v13 = *(unsigned int *)(a3 + 8);
      if (v13 < *(_DWORD *)(a3 + 12)) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
    if (v19)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8))
      {
        uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8);
        *(void *)&uint64_t v97 = v19;
        *((void *)&v97 + 1) = v21;
        uint64_t v19 = (void (*)(char **__return_ptr, uint64_t *, uint64_t *))mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v97 = 0uLL;
      }
    }
    else
    {
      uint64_t v97 = 0uLL;
    }
    uint64_t v22 = (void *)v18[1];
    if (v22)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v22 + 8))
      {
        uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v22 + 8);
        *(void *)&uint64_t v97 = v22;
        *((void *)&v97 + 1) = v23;
        uint64_t v27 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
        uint64_t result = 0;
        if (!v19 || !v27 || v19 != (void (*)(char **__return_ptr, uint64_t *, uint64_t *))v27) {
          return result;
        }
        uint64_t v20 = *v18;
        if (*v18
          && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          goto LABEL_21;
        }
        uint64_t v28 = v18[1];
        if (v28)
        {
          int v29 = *(void **)(*(void *)v28 + 136);
          if (v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v30 = v18[1];
          }
          else {
            uint64_t v30 = 0;
          }
          if (!v20 || v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            goto LABEL_81;
          }
          if (v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v20 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            unsigned int v76 = (uint64_t (*)@<X0>(const llvm::APInt *@<X0>, const llvm::APInt *@<X1>, uint64_t@<X8>))*v18;
            uint64_t v73 = v28;
            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76);
            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73))
            {
              mlir::IntegerAttr::getValue((uint64_t)&v76, (llvm::APInt *)&v89);
              mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v87);
              DWORD2(v95) = v90;
              if (v90 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v95, (const llvm::APInt *)&v89);
              }
              *(void *)&uint64_t v95 = v89;
              DWORD2(v97) = v90;
              *(void *)&uint64_t v97 = v89;
              DWORD2(v95) = 0;
              llvm::APInt::operator+=((uint64_t)&v97, &v87);
              LOBYTE(v98[0]) = 1;
              if (DWORD2(v95) >= 0x41 && (void)v95) {
                MEMORY[0x21667D390](v95, 0x1000C8000313F17);
              }
              if (v88 >= 0x41 && v87) {
                MEMORY[0x21667D390](v87, 0x1000C8000313F17);
              }
              if (v90 >= 0x41 && v89) {
                MEMORY[0x21667D390](v89, 0x1000C8000313F17);
              }
              uint64_t v30 = mlir::IntegerAttr::get((uint64_t)v19, (const llvm::APInt *)&v97);
              if (LOBYTE(v98[0]))
              {
LABEL_72:
                if (DWORD2(v97) >= 0x41 && (void)v97) {
                  MEMORY[0x21667D390](v97, 0x1000C8000313F17);
                }
              }
LABEL_81:
              uint64_t v20 = v30;
              if (!v30) {
                return 0;
              }
              goto LABEL_21;
            }
          }
          else
          {
            if (mlir::DenseElementsAttr::classof(*v18)) {
              uint64_t v32 = v20;
            }
            else {
              uint64_t v32 = 0;
            }
            *(void *)&uint64_t v97 = v32;
            if (v32
              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97)
              && ((char v33 = v18[1], !mlir::DenseElementsAttr::classof(v33)) ? (v34 = 0) : (v34 = v33),
                  (*(void *)&uint64_t v97 = v34) != 0
               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97)))
            {
              uint64_t v35 = v18[1];
              unsigned int v76 = (uint64_t (*)@<X0>(const llvm::APInt *@<X0>, const llvm::APInt *@<X1>, uint64_t@<X8>))*v18;
              uint64_t v73 = v35;
              uint64_t v36 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76);
              if (v36 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73))
              {
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v97);
                uint64_t v95 = v97;
                double v96 = v98[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v95, (llvm::APInt *)&v85);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v97);
                uint64_t v95 = v97;
                double v96 = v98[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v95, (llvm::APInt *)&v83);
                DWORD2(v95) = v86;
                if (v86 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v95, (const llvm::APInt *)&v85);
                }
                *(void *)&uint64_t v95 = v85;
                DWORD2(v97) = v86;
                *(void *)&uint64_t v97 = v85;
                DWORD2(v95) = 0;
                llvm::APInt::operator+=((uint64_t)&v97, &v83);
                LOBYTE(v98[0]) = 1;
                if (DWORD2(v95) >= 0x41 && (void)v95) {
                  MEMORY[0x21667D390](v95, 0x1000C8000313F17);
                }
                if (v84 >= 0x41 && v83) {
                  MEMORY[0x21667D390](v83, 0x1000C8000313F17);
                }
                if (v86 >= 0x41 && v85) {
                  MEMORY[0x21667D390](v85, 0x1000C8000313F17);
                }
                uint64_t v62 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v19 + 8);
                uint64_t v30 = mlir::DenseElementsAttr::get((uint64_t)v19, v62, (llvm::APInt *)&v97, 1);
                if (LOBYTE(v98[0])) {
                  goto LABEL_72;
                }
                goto LABEL_81;
              }
            }
            else
            {
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v18 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v18[1] + 8))
              {
                return 0;
              }
              uint64_t v37 = (void *)*v18;
              if (*v18) {
                uint64_t v38 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v37 + 8);
              }
              else {
                uint64_t v38 = 0;
              }
              long long v81 = v37;
              uint64_t v82 = v38;
              uint64_t v39 = (void *)v18[1];
              if (v39) {
                long long v40 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v39 + 8);
              }
              else {
                long long v40 = 0;
              }
              v80[0] = v39;
              v80[1] = v40;
              uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v81);
              if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v80))
              {
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v81, (uint64_t)&v95);
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v80, (uint64_t)&v76);
                uint64_t v30 = 0;
                uint64_t v42 = v79;
                if (BYTE8(v96) && v79)
                {
                  LOWORD(v73) = v95;
                  if ((_BYTE)v95) {
                    uint64_t v74 = *((void *)&v95 + 1);
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v95 + 1) + 16))(&v74);
                  }
                  uint64_t v75 = v96;
                  uint64_t v70 = (__int16)v76;
                  if ((_BYTE)v76) {
                    unsigned __int8 v71 = v77;
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 16))(&v71);
                  }
                  uint64_t v72 = v78;
                  *(void *)&uint64_t v97 = v98;
                  *((void *)&v97 + 1) = 0x400000000;
                  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v81, v82);
                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v97, NumElements);
                  BOOL v44 = mlir::ElementsAttr::getNumElements((uint64_t)v81, v82);
                  if (v44)
                  {
                    unsigned int v45 = v44;
                    uint64_t v46 = v75;
                    while (1)
                    {
                      uint64_t v47 = BYTE1(v73) ? 0 : v46;
                      if ((_BYTE)v73)
                      {
                        uint64_t v48 = (const llvm::APInt *)(v74 + 16 * v47);
                        uint64_t v66 = *((_DWORD *)v48 + 2);
                        if (v66 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v65, v48);
                        }
                        uint64_t v65 = *(void *)v48;
                      }
                      else
                      {
                        (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 24))(&v65);
                      }
                      uint64_t v49 = HIBYTE(v70) ? 0 : v72;
                      if ((_BYTE)v70)
                      {
                        uint64_t v50 = (const llvm::APInt *)(v71 + 16 * v49);
                        uint64_t v64 = *((_DWORD *)v50 + 2);
                        if (v64 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v63, v50);
                        }
                        uint64_t v63 = *(void **)v50;
                      }
                      else
                      {
                        (*(void (**)(void **__return_ptr))(*(void *)v71 + 24))(&v63);
                      }
                      uint64_t v92 = v66;
                      if (v66 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v91, (const llvm::APInt *)&v65);
                      }
                      unint64_t v91 = v65;
                      uint64_t v94 = v66;
                      int v93 = v65;
                      uint64_t v92 = 0;
                      llvm::APInt::operator+=((uint64_t)&v93, &v63);
                      uint64_t v68 = v94;
                      uint64_t v67 = v93;
                      uint64_t v69 = 1;
                      if (v92 >= 0x41 && v91) {
                        MEMORY[0x21667D390](v91, 0x1000C8000313F17);
                      }
                      if (v64 >= 0x41 && v63) {
                        MEMORY[0x21667D390](v63, 0x1000C8000313F17);
                      }
                      if (v66 >= 0x41 && v65) {
                        MEMORY[0x21667D390](v65, 0x1000C8000313F17);
                      }
                      if (!v69) {
                        break;
                      }
                      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v97, (unint64_t)&v67, 1);
                      uint64_t v52 = (llvm::APInt *)(v97 + 16 * DWORD2(v97));
                      uint64_t v53 = *((_DWORD *)Address + 2);
                      *((_DWORD *)v52 + 2) = v53;
                      if (v53 > 0x40) {
                        llvm::APInt::initSlowCase(v52, (const llvm::APInt *)Address);
                      }
                      *(void *)uint64_t v52 = *(void *)Address;
                      ++DWORD2(v97);
                      if (v69 && v68 >= 0x41 && v67) {
                        MEMORY[0x21667D390](v67, 0x1000C8000313F17);
                      }
                      uint64_t v46 = ++v75;
                      ++v72;
                      if (!--v45) {
                        goto LABEL_131;
                      }
                    }
                    uint64_t v30 = 0;
                  }
                  else
                  {
LABEL_131:
                    uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v19 + 8);
                    uint64_t v30 = mlir::DenseElementsAttr::get((uint64_t)v19, v54, (llvm::APInt *)v97, DWORD2(v97));
                  }
                  int64_t v55 = (char *)v97;
                  if (DWORD2(v97))
                  {
                    unsigned int v56 = 16 * DWORD2(v97);
                    do
                    {
                      if (*(_DWORD *)&v55[v56 - 8] >= 0x41u)
                      {
                        uint64_t v57 = *(void *)&v55[v56 - 16];
                        if (v57) {
                          MEMORY[0x21667D390](v57, 0x1000C8000313F17);
                        }
                      }
                      v56 -= 16;
                    }
                    while (v56);
                    int64_t v55 = (char *)v97;
                  }
                  if (v55 != (char *)v98) {
                    free(v55);
                  }
                  if (!(_BYTE)v70)
                  {
                    unsigned int v58 = v71;
                    unsigned __int8 v71 = 0;
                    if (v58) {
                      (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
                    }
                  }
                  if (!(_BYTE)v73)
                  {
                    uint64_t v59 = v74;
                    uint64_t v74 = 0;
                    if (v59) {
                      (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
                    }
                  }
                  uint64_t v42 = v79;
                }
                if (v42)
                {
                  if (!(_BYTE)v76)
                  {
                    unsigned int v60 = v77;
                    uint64_t v77 = 0;
                    if (v60) {
                      (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
                    }
                  }
                }
                if (BYTE8(v96))
                {
                  if (!(_BYTE)v95)
                  {
                    char v61 = *((void *)&v95 + 1);
                    *((void *)&v95 + 1) = 0;
                    if (v61) {
                      (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
                    }
                  }
                }
                goto LABEL_81;
              }
            }
          }
          uint64_t v30 = 0;
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v97 = 0uLL;
      }
    }
    else
    {
      uint64_t v97 = 0uLL;
    }
    return 0;
  }
  *(void *)&uint64_t v97 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
  unint64_t ZeroAttr = (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v97, (mlir::MLIRContext *)(v8 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v12 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
  uint64_t v13 = *(unsigned int *)(a3 + 8);
  if (v13 >= *(_DWORD *)(a3 + 12))
  {
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a3 + 8);
  }
LABEL_7:
  *(void *)(*(void *)a3 + 8 * v13) = v12;
  unsigned int v14 = *(_DWORD *)(a3 + 12);
  uint64_t v15 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v15;
  unint64_t v16 = ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
  if (v15 >= v14)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v15) = v16;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

uint64_t getI1SameShape(void *a1)
{
  unint64_t v10 = a1;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v10);
  uint64_t v2 = mlir::IntegerType::get(Context, 1u, 0);
  unint64_t v3 = v10;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8))
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    if (v3)
    {
      LOBYTE(v6) = 0;
      char v7 = 0;
      return mlir::ShapedType::cloneWith((uint64_t *)&v8, &v6, v2);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  if (*(_UNKNOWN **)(*v10 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return mlir::UnrankedTensorType::get(v2);
  }
  else {
    return v2;
  }
}

uint64_t calculateUnsignedOverflow@<X0>(const llvm::APInt *a1@<X0>, const llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::APInt::compare(a1, a2);
  *(_DWORD *)(a3 + 8) = 1;
  *(void *)a3 = result >> 31;
  return result;
}

void mlir::arith::AddUIExtendedOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::SubIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56))
  {
    *(void *)&long long v85 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    return (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v85, (mlir::MLIRContext *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v6) {
    goto LABEL_13;
  }
  DWORD2(v85) = 1;
  *(void *)&long long v85 = 0;
  *(void *)&long long v83 = &v85;
  int v7 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v83, v6);
  int v8 = DWORD2(v85);
  if (!v7)
  {
    BOOL v9 = 0;
    if (DWORD2(v85) < 0x41) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (DWORD2(v85) >= 0x41)
  {
    if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v85) >= 0x41)
    {
      BOOL v9 = 0;
      uint64_t v11 = v85;
      if (!(void)v85) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    BOOL v9 = *(void *)v85 == 0;
LABEL_8:
    uint64_t v11 = v85;
    if (!(void)v85) {
      goto LABEL_10;
    }
LABEL_9:
    MEMORY[0x21667D390](v11, 0x1000C8000313F17);
    goto LABEL_10;
  }
  BOOL v9 = (void)v85 == 0;
LABEL_10:
  uint64_t v12 = *a1;
  if (v9) {
    return *(void *)(*(void *)(v12 + 72) + 24) | 4;
  }
  uint64_t v4 = *(void *)(*(void *)(v12 + 72) + 24);
LABEL_13:
  *(void *)&long long v85 = v4;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v85);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
  {
    uint64_t v19 = *(void *)(*(void *)(*a1 + 72) + 56);
    uint64_t v20 = *(void *)(DefiningOp + 72);
    uint64_t v21 = *(void *)(v20 + 56);
    uint64_t v22 = *(void *)(v20 + 24);
    if (v19 == v21) {
      return v22 | 4;
    }
    if (v19 == v22) {
      return v21 | 4;
    }
  }
  unsigned int v14 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v14;
  if (*v14
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v16 = *v14;
  }
  else
  {
    uint64_t v16 = v14[1];
    if (!v16 || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v85 = canMapOperands;
          *((void *)&v85 + 1) = v17;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v85);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v85 = 0uLL;
        }
      }
      else
      {
        long long v85 = 0uLL;
      }
      uint64_t v16 = v14[1];
      if (v16)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8))
        {
          uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v16 + 8);
          *(void *)&long long v85 = v16;
          *((void *)&v85 + 1) = v18;
          uint64_t v23 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v85);
          uint64_t v16 = 0;
          if (canMapOperands && v23 && canMapOperands == v23)
          {
            uint64_t v24 = *v14;
            if (*v14
              && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v16 = *v14;
            }
            else
            {
              uint64_t v25 = v14[1];
              if (v25)
              {
                uint64_t v26 = *(void **)(*(void *)v25 + 136);
                if (v26 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  uint64_t v16 = v14[1];
                }
                else {
                  uint64_t v16 = 0;
                }
                if (!v24 || v26 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  return v16 & 0xFFFFFFFFFFFFFFFBLL;
                }
                if (v26 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                  && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                {
                  uint64_t v66 = *v14;
                  uint64_t v63 = v25;
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
                  if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v63))
                  {
                    mlir::IntegerAttr::getValue((uint64_t)&v66, (llvm::APInt *)&v72);
                    mlir::IntegerAttr::getValue((uint64_t)&v63, (llvm::APInt *)&v69);
                    DWORD2(v83) = v73;
                    if (v73 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v72);
                    }
                    *(void *)&long long v83 = v72;
                    DWORD2(v85) = v73;
                    *(void *)&long long v85 = v72;
                    DWORD2(v83) = 0;
                    llvm::APInt::operator-=((uint64_t)&v85, &v69);
                    LOBYTE(v86[0]) = 1;
                    if (DWORD2(v83) >= 0x41 && (void)v83) {
                      MEMORY[0x21667D390](v83, 0x1000C8000313F17);
                    }
                    if (v70 >= 0x41 && v69) {
                      MEMORY[0x21667D390](v69, 0x1000C8000313F17);
                    }
                    if (v73 >= 0x41 && v72) {
                      MEMORY[0x21667D390](v72, 0x1000C8000313F17);
                    }
                    uint64_t v16 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v85);
                    if (!LOBYTE(v86[0])) {
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    goto LABEL_83;
                  }
                }
                else
                {
                  if (mlir::DenseElementsAttr::classof(*v14)) {
                    uint64_t v28 = v24;
                  }
                  else {
                    uint64_t v28 = 0;
                  }
                  *(void *)&long long v85 = v28;
                  if (v28
                    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v85)
                    && ((uint64_t v29 = v14[1], !mlir::DenseElementsAttr::classof(v29)) ? (v30 = 0) : (v30 = v29),
                        (*(void *)&long long v85 = v30) != 0
                     && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v85)))
                  {
                    uint64_t v31 = v14[1];
                    uint64_t v66 = *v14;
                    uint64_t v63 = v31;
                    uint64_t v32 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v66);
                    if (v32 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v63))
                    {
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v66, (uint64_t)&v85);
                      long long v83 = v85;
                      long long v84 = v86[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v83, (llvm::APInt *)&v72);
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v63, (uint64_t)&v85);
                      long long v83 = v85;
                      long long v84 = v86[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v83, (llvm::APInt *)&v69);
                      DWORD2(v83) = v73;
                      if (v73 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v72);
                      }
                      *(void *)&long long v83 = v72;
                      DWORD2(v85) = v73;
                      *(void *)&long long v85 = v72;
                      DWORD2(v83) = 0;
                      llvm::APInt::operator-=((uint64_t)&v85, &v69);
                      LOBYTE(v86[0]) = 1;
                      if (DWORD2(v83) >= 0x41 && (void)v83) {
                        MEMORY[0x21667D390](v83, 0x1000C8000313F17);
                      }
                      if (v70 >= 0x41 && v69) {
                        MEMORY[0x21667D390](v69, 0x1000C8000313F17);
                      }
                      if (v73 >= 0x41 && v72) {
                        MEMORY[0x21667D390](v72, 0x1000C8000313F17);
                      }
                      uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                      uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)&v85, 1);
                      if (!LOBYTE(v86[0])) {
                        return v16 & 0xFFFFFFFFFFFFFFFBLL;
                      }
LABEL_83:
                      if (DWORD2(v85) >= 0x41)
                      {
                        if ((void)v85) {
                          MEMORY[0x21667D390](v85, 0x1000C8000313F17);
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                  else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v14 + 8) {
                         && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v14[1] + 8))
                  }
                  {
                    char v33 = (void *)*v14;
                    uint64_t v34 = *v14 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8) : 0;
                    uint64_t v77 = v33;
                    uint64_t v78 = v34;
                    uint64_t v35 = (void *)v14[1];
                    uint64_t v36 = v35 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v35 + 8) : 0;
                    v76[0] = v35;
                    v76[1] = v36;
                    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v77);
                    if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v76))
                    {
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v77, (uint64_t)&v83);
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v76, (uint64_t)&v72);
                      uint64_t v16 = 0;
                      int v38 = v75;
                      if (BYTE8(v84) && v75)
                      {
                        LOWORD(v69) = v83;
                        if ((_BYTE)v83) {
                          uint64_t v70 = *((void *)&v83 + 1);
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v83 + 1) + 16))(&v70);
                        }
                        uint64_t v71 = v84;
                        LOWORD(v66) = v72;
                        if ((_BYTE)v72) {
                          uint64_t v67 = v73;
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v73 + 16))(&v67);
                        }
                        uint64_t v68 = v74;
                        *(void *)&long long v85 = v86;
                        *((void *)&v85 + 1) = 0x400000000;
                        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
                        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v85, NumElements);
                        uint64_t v40 = mlir::ElementsAttr::getNumElements((uint64_t)v77, v78);
                        if (v40)
                        {
                          uint64_t v41 = v40;
                          uint64_t v42 = v71;
                          while (1)
                          {
                            uint64_t v43 = BYTE1(v69) ? 0 : v42;
                            if ((_BYTE)v69)
                            {
                              BOOL v44 = (const llvm::APInt *)(v70 + 16 * v43);
                              unsigned int v62 = *((_DWORD *)v44 + 2);
                              if (v62 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v61, v44);
                              }
                              uint64_t v61 = *(void *)v44;
                            }
                            else
                            {
                              (*(void (**)(uint64_t *__return_ptr))(*(void *)v70 + 24))(&v61);
                            }
                            uint64_t v45 = BYTE1(v66) ? 0 : v68;
                            if ((_BYTE)v66)
                            {
                              uint64_t v46 = (const llvm::APInt *)(v67 + 16 * v45);
                              unsigned int v60 = *((_DWORD *)v46 + 2);
                              if (v60 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v59, v46);
                              }
                              uint64_t v59 = *(void **)v46;
                            }
                            else
                            {
                              (*(void (**)(void **__return_ptr))(*(void *)v67 + 24))(&v59);
                            }
                            unsigned int v80 = v62;
                            if (v62 > 0x40) {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v79, (const llvm::APInt *)&v61);
                            }
                            uint64_t v79 = v61;
                            unsigned int v82 = v62;
                            uint64_t v81 = v61;
                            unsigned int v80 = 0;
                            llvm::APInt::operator-=((uint64_t)&v81, &v59);
                            unsigned int v64 = v82;
                            uint64_t v63 = v81;
                            char v65 = 1;
                            if (v80 >= 0x41 && v79) {
                              MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                            }
                            if (v60 >= 0x41 && v59) {
                              MEMORY[0x21667D390](v59, 0x1000C8000313F17);
                            }
                            if (v62 >= 0x41 && v61) {
                              MEMORY[0x21667D390](v61, 0x1000C8000313F17);
                            }
                            if (!v65) {
                              break;
                            }
                            Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v85, (unint64_t)&v63, 1);
                            uint64_t v48 = (llvm::APInt *)(v85 + 16 * DWORD2(v85));
                            unsigned int v49 = *((_DWORD *)Address + 2);
                            *((_DWORD *)v48 + 2) = v49;
                            if (v49 > 0x40) {
                              llvm::APInt::initSlowCase(v48, (const llvm::APInt *)Address);
                            }
                            *(void *)uint64_t v48 = *(void *)Address;
                            ++DWORD2(v85);
                            if (v65 && v64 >= 0x41 && v63) {
                              MEMORY[0x21667D390](v63, 0x1000C8000313F17);
                            }
                            uint64_t v42 = ++v71;
                            ++v68;
                            if (!--v41) {
                              goto LABEL_140;
                            }
                          }
                          uint64_t v16 = 0;
                        }
                        else
                        {
LABEL_140:
                          uint64_t v50 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                          uint64_t v16 = mlir::DenseElementsAttr::get(canMapOperands, v50, (llvm::APInt *)v85, DWORD2(v85));
                        }
                        uint64_t v51 = (char *)v85;
                        if (DWORD2(v85))
                        {
                          uint64_t v52 = 16 * DWORD2(v85);
                          do
                          {
                            if (*(_DWORD *)&v51[v52 - 8] >= 0x41u)
                            {
                              uint64_t v53 = *(void *)&v51[v52 - 16];
                              if (v53) {
                                MEMORY[0x21667D390](v53, 0x1000C8000313F17);
                              }
                            }
                            v52 -= 16;
                          }
                          while (v52);
                          uint64_t v51 = (char *)v85;
                        }
                        if (v51 != (char *)v86) {
                          free(v51);
                        }
                        if (!(_BYTE)v66)
                        {
                          uint64_t v54 = v67;
                          uint64_t v67 = 0;
                          if (v54) {
                            (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
                          }
                        }
                        if (!(_BYTE)v69)
                        {
                          uint64_t v55 = v70;
                          uint64_t v70 = 0;
                          if (v55) {
                            (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
                          }
                        }
                        int v38 = v75;
                      }
                      if (v38)
                      {
                        if (!(_BYTE)v72)
                        {
                          uint64_t v56 = v73;
                          uint64_t v73 = 0;
                          if (v56) {
                            (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
                          }
                        }
                      }
                      if (BYTE8(v84))
                      {
                        if (!(_BYTE)v83)
                        {
                          uint64_t v57 = *((void *)&v83 + 1);
                          *((void *)&v83 + 1) = 0;
                          if (v57) {
                            (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
                          }
                        }
                      }
                      return v16 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                }
              }
              uint64_t v16 = 0;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
          long long v85 = 0uLL;
        }
      }
      else
      {
        long long v85 = 0uLL;
      }
    }
  }
  return v16 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::SubIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::MulIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_29;
  }
  DWORD2(v78) = 1;
  *(void *)&long long v78 = 0;
  *(void *)&long long v76 = &v78;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v76, v4);
  int v7 = DWORD2(v78);
  if (v6)
  {
    if (DWORD2(v78) < 0x41)
    {
      BOOL v8 = (void)v78 == 0;
      goto LABEL_11;
    }
    if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) > 0x40)
    {
      if ((void)v78) {
        MEMORY[0x21667D390](v78, 0x1000C8000313F17);
      }
      goto LABEL_15;
    }
    BOOL v8 = *(void *)v78 == 0;
  }
  else
  {
    BOOL v8 = 0;
    if (DWORD2(v78) < 0x41) {
      goto LABEL_11;
    }
  }
  if (!(void)v78)
  {
LABEL_11:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 56) | 4;
    }
    goto LABEL_15;
  }
  MEMORY[0x21667D390](v78, 0x1000C8000313F17);
  if (v8) {
    return *(void *)(*(void *)(*(void *)a1 + 72) + 56) | 4;
  }
LABEL_15:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v10 = v3[1];
  if (v10)
  {
    DWORD2(v78) = 1;
    *(void *)&long long v78 = 0;
    *(void *)&long long v76 = &v78;
    int v11 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v76, v10);
    int v12 = DWORD2(v78);
    if (v11)
    {
      if (DWORD2(v78) < 0x41)
      {
        BOOL v13 = (void)v78 == 1;
        goto LABEL_22;
      }
      if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v78) > 0x40)
      {
        if ((void)v78) {
          MEMORY[0x21667D390](v78, 0x1000C8000313F17);
        }
LABEL_28:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_29;
      }
      BOOL v13 = *(void *)v78 == 1;
    }
    else
    {
      BOOL v13 = 0;
      if (DWORD2(v78) < 0x41) {
        goto LABEL_22;
      }
    }
    if ((void)v78) {
      MEMORY[0x21667D390](v78, 0x1000C8000313F17);
    }
LABEL_22:
    if (v13) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v15 = *v3;
  }
  else
  {
    uint64_t v15 = v3[1];
    if (!v15 || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v78 = canMapOperands;
          *((void *)&v78 + 1) = v16;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v78);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v78 = 0uLL;
        }
      }
      else
      {
        long long v78 = 0uLL;
      }
      uint64_t v15 = v3[1];
      if (v15)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v15 + 8))
        {
          uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v15 + 8);
          *(void *)&long long v78 = v15;
          *((void *)&v78 + 1) = v17;
          uint64_t v18 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v78);
          uint64_t v15 = 0;
          if (canMapOperands && v18 && canMapOperands == v18)
          {
            uint64_t v19 = *v3;
            if (*v3
              && *(_UNKNOWN **)(*(void *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v15 = *v3;
            }
            else
            {
              uint64_t v20 = v3[1];
              if (v20)
              {
                uint64_t v21 = *(void **)(*(void *)v20 + 136);
                if (v21 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  uint64_t v15 = v3[1];
                }
                else {
                  uint64_t v15 = 0;
                }
                if (!v19 || v21 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  return v15 & 0xFFFFFFFFFFFFFFFBLL;
                }
                if (v21 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                  && *(_UNKNOWN **)(*(void *)v19 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                {
                  uint64_t v61 = *v3;
                  uint64_t v58 = v20;
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61);
                  if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v58))
                  {
                    mlir::IntegerAttr::getValue((uint64_t)&v61, (llvm::APInt *)&v67);
                    mlir::IntegerAttr::getValue((uint64_t)&v58, (llvm::APInt *)&v64);
                    llvm::APInt::operator*((uint64_t)&v67, &v64, (uint64_t)&v76);
                    DWORD2(v78) = DWORD2(v76);
                    *(void *)&long long v78 = v76;
                    LOBYTE(v79[0]) = 1;
                    if (v65 >= 0x41 && v64) {
                      MEMORY[0x21667D390](v64, 0x1000C8000313F17);
                    }
                    if (v68 >= 0x41 && v67) {
                      MEMORY[0x21667D390](v67, 0x1000C8000313F17);
                    }
                    uint64_t v15 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v78);
                    if (!LOBYTE(v79[0])) {
                      return v15 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    goto LABEL_65;
                  }
                }
                else
                {
                  if (mlir::DenseElementsAttr::classof(*v3)) {
                    uint64_t v23 = v19;
                  }
                  else {
                    uint64_t v23 = 0;
                  }
                  *(void *)&long long v78 = v23;
                  if (v23
                    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v78)
                    && ((uint64_t v24 = v3[1], !mlir::DenseElementsAttr::classof(v24)) ? (v25 = 0) : (v25 = v24),
                        (*(void *)&long long v78 = v25) != 0
                     && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v78)))
                  {
                    uint64_t v26 = v3[1];
                    uint64_t v61 = *v3;
                    uint64_t v58 = v26;
                    uint64_t v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61);
                    if (v27 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58))
                    {
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v61, (uint64_t)&v78);
                      long long v76 = v78;
                      long long v77 = v79[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v76, (llvm::APInt *)&v67);
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v58, (uint64_t)&v78);
                      long long v76 = v78;
                      long long v77 = v79[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v76, (llvm::APInt *)&v64);
                      llvm::APInt::operator*((uint64_t)&v67, &v64, (uint64_t)&v76);
                      DWORD2(v78) = DWORD2(v76);
                      *(void *)&long long v78 = v76;
                      LOBYTE(v79[0]) = 1;
                      if (v65 >= 0x41 && v64) {
                        MEMORY[0x21667D390](v64, 0x1000C8000313F17);
                      }
                      if (v68 >= 0x41 && v67) {
                        MEMORY[0x21667D390](v67, 0x1000C8000313F17);
                      }
                      uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                      uint64_t v15 = mlir::DenseElementsAttr::get(canMapOperands, v28, (llvm::APInt *)&v78, 1);
                      if (!LOBYTE(v79[0])) {
                        return v15 & 0xFFFFFFFFFFFFFFFBLL;
                      }
LABEL_65:
                      if (DWORD2(v78) >= 0x41)
                      {
                        if ((void)v78) {
                          MEMORY[0x21667D390](v78, 0x1000C8000313F17);
                        }
                      }
                      return v15 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                  else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
                         && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
                  }
                  {
                    uint64_t v29 = (void *)*v3;
                    uint64_t v30 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v29 + 8) : 0;
                    uint64_t v72 = v29;
                    uint64_t v73 = v30;
                    uint64_t v31 = (void *)v3[1];
                    uint64_t v32 = v31 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8) : 0;
                    v71[0] = v31;
                    v71[1] = v32;
                    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v72);
                    if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v71))
                    {
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v72, (uint64_t)&v76);
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v71, (uint64_t)&v67);
                      uint64_t v15 = 0;
                      int v34 = v70;
                      if (BYTE8(v77) && v70)
                      {
                        LOWORD(v64) = v76;
                        if ((_BYTE)v76) {
                          uint64_t v65 = *((void *)&v76 + 1);
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v76 + 1) + 16))(&v65);
                        }
                        uint64_t v66 = v77;
                        LOWORD(v61) = v67;
                        if ((_BYTE)v67) {
                          uint64_t v62 = v68;
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v68 + 16))(&v62);
                        }
                        uint64_t v63 = v69;
                        *(void *)&long long v78 = v79;
                        *((void *)&v78 + 1) = 0x400000000;
                        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
                        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v78, NumElements);
                        uint64_t v36 = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
                        if (v36)
                        {
                          uint64_t v37 = v36;
                          uint64_t v38 = v66;
                          while (1)
                          {
                            uint64_t v39 = BYTE1(v64) ? 0 : v38;
                            if ((_BYTE)v64)
                            {
                              uint64_t v40 = (const llvm::APInt *)(v65 + 16 * v39);
                              unsigned int v57 = *((_DWORD *)v40 + 2);
                              if (v57 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v56, v40);
                              }
                              uint64_t v56 = *(void *)v40;
                            }
                            else
                            {
                              (*(void (**)(uint64_t *__return_ptr))(*(void *)v65 + 24))(&v56);
                            }
                            uint64_t v41 = BYTE1(v61) ? 0 : v63;
                            if ((_BYTE)v61)
                            {
                              uint64_t v42 = (const llvm::APInt *)(v62 + 16 * v41);
                              unsigned int v55 = *((_DWORD *)v42 + 2);
                              if (v55 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v54, v42);
                              }
                              uint64_t v54 = *(void *)v42;
                            }
                            else
                            {
                              (*(void (**)(uint64_t *__return_ptr))(*(void *)v62 + 24))(&v54);
                            }
                            llvm::APInt::operator*((uint64_t)&v56, &v54, (uint64_t)&v74);
                            unsigned int v59 = v75;
                            uint64_t v58 = v74;
                            char v60 = 1;
                            if (v55 >= 0x41 && v54) {
                              MEMORY[0x21667D390](v54, 0x1000C8000313F17);
                            }
                            if (v57 >= 0x41 && v56) {
                              MEMORY[0x21667D390](v56, 0x1000C8000313F17);
                            }
                            if (!v60) {
                              break;
                            }
                            Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v78, (unint64_t)&v58, 1);
                            BOOL v44 = (llvm::APInt *)(v78 + 16 * DWORD2(v78));
                            unsigned int v45 = *((_DWORD *)Address + 2);
                            *((_DWORD *)v44 + 2) = v45;
                            if (v45 > 0x40) {
                              llvm::APInt::initSlowCase(v44, (const llvm::APInt *)Address);
                            }
                            *(void *)BOOL v44 = *(void *)Address;
                            ++DWORD2(v78);
                            if (v60 && v59 >= 0x41 && v58) {
                              MEMORY[0x21667D390](v58, 0x1000C8000313F17);
                            }
                            uint64_t v38 = ++v66;
                            ++v63;
                            if (!--v37) {
                              goto LABEL_140;
                            }
                          }
                          uint64_t v15 = 0;
                        }
                        else
                        {
LABEL_140:
                          uint64_t v46 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                          uint64_t v15 = mlir::DenseElementsAttr::get(canMapOperands, v46, (llvm::APInt *)v78, DWORD2(v78));
                        }
                        uint64_t v47 = (char *)v78;
                        if (DWORD2(v78))
                        {
                          uint64_t v48 = 16 * DWORD2(v78);
                          do
                          {
                            if (*(_DWORD *)&v47[v48 - 8] >= 0x41u)
                            {
                              uint64_t v49 = *(void *)&v47[v48 - 16];
                              if (v49) {
                                MEMORY[0x21667D390](v49, 0x1000C8000313F17);
                              }
                            }
                            v48 -= 16;
                          }
                          while (v48);
                          uint64_t v47 = (char *)v78;
                        }
                        if (v47 != (char *)v79) {
                          free(v47);
                        }
                        if (!(_BYTE)v61)
                        {
                          uint64_t v50 = v62;
                          uint64_t v62 = 0;
                          if (v50) {
                            (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
                          }
                        }
                        if (!(_BYTE)v64)
                        {
                          uint64_t v51 = v65;
                          uint64_t v65 = 0;
                          if (v51) {
                            (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
                          }
                        }
                        int v34 = v70;
                      }
                      if (v34)
                      {
                        if (!(_BYTE)v67)
                        {
                          uint64_t v52 = v68;
                          uint64_t v68 = 0;
                          if (v52) {
                            (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
                          }
                        }
                      }
                      if (BYTE8(v77))
                      {
                        if (!(_BYTE)v76)
                        {
                          uint64_t v53 = *((void *)&v76 + 1);
                          *((void *)&v76 + 1) = 0;
                          if (v53) {
                            (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
                          }
                        }
                      }
                      return v15 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                }
              }
              uint64_t v15 = 0;
            }
          }
        }
        else
        {
          uint64_t v15 = 0;
          long long v78 = 0uLL;
        }
      }
      else
      {
        long long v78 = 0uLL;
      }
    }
  }
  return v15 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::MulIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::MulSIExtendedOp::fold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  int v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = v5[1];
  if (!v6)
  {
LABEL_17:
    uint64_t v14 = *v5;
    if (*v5 && *(_UNKNOWN **)(*(void *)v14 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      uint64_t v15 = *v5;
      goto LABEL_28;
    }
    uint64_t v15 = v5[1];
    if (v15 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
LABEL_28:
      uint64_t v19 = *(uint64_t **)(a2 + 40);
      uint64_t canMapOperands = *v19;
      if (*v19
        && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v21 = *v19;
        goto LABEL_162;
      }
      uint64_t v21 = v19[1];
      if (v21 && *(_UNKNOWN **)(*(void *)v21 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
        goto LABEL_162;
      }
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v22 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v130 = canMapOperands;
          *((void *)&v130 + 1) = v22;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v130);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v130 = 0uLL;
        }
      }
      else
      {
        long long v130 = 0uLL;
      }
      uint64_t v21 = v19[1];
      if (!v21)
      {
        long long v130 = 0uLL;
        goto LABEL_162;
      }
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v21 + 8))
      {
        uint64_t v21 = 0;
        long long v130 = 0uLL;
        goto LABEL_162;
      }
      uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v21 + 8);
      *(void *)&long long v130 = v21;
      *((void *)&v130 + 1) = v23;
      uint64_t v30 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v130);
      uint64_t v21 = 0;
      if (!canMapOperands || !v30 || canMapOperands != v30) {
        goto LABEL_162;
      }
      uint64_t v31 = *v19;
      if (*v19
        && *(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v21 = *v19;
        goto LABEL_162;
      }
      uint64_t v32 = v19[1];
      if (v32)
      {
        char v33 = *(void **)(*(void *)v32 + 136);
        if (v33 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v21 = v19[1];
        }
        else {
          uint64_t v21 = 0;
        }
        if (!v31 || v33 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          goto LABEL_162;
        }
        if (v33 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          uint64_t v117 = *v19;
          uint64_t v114 = v32;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v117);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v114))
          {
            mlir::IntegerAttr::getValue((uint64_t)&v117, (llvm::APInt *)&v128);
            mlir::IntegerAttr::getValue((uint64_t)&v114, (llvm::APInt *)&v120);
            mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v130, (llvm::APInt *)&v128, (uint64_t)&v120);
            if (v121 >= 0x41 && v120) {
              MEMORY[0x21667D390](v120, 0x1000C8000313F17);
            }
            if (DWORD2(v128) >= 0x41 && (void)v128) {
              MEMORY[0x21667D390](v128, 0x1000C8000313F17);
            }
            if (LOBYTE(v131[0]))
            {
              uint64_t v21 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v130);
              if (LOBYTE(v131[0]))
              {
LABEL_93:
                if (DWORD2(v130) >= 0x41 && (void)v130) {
                  MEMORY[0x21667D390](v130, 0x1000C8000313F17);
                }
              }
LABEL_162:
              uint64_t v58 = *(unsigned int *)(a3 + 8);
              if (v58 >= *(_DWORD *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v58 + 1, 8);
                LODWORD(v58) = *(_DWORD *)(a3 + 8);
              }
              *(void *)(*(void *)a3 + 8 * v58) = v15 & 0xFFFFFFFFFFFFFFFBLL;
              unsigned int v12 = *(_DWORD *)(a3 + 12);
              uint64_t v13 = (*(_DWORD *)(a3 + 8) + 1);
              *(_DWORD *)(a3 + 8) = v13;
              unint64_t v10 = v21 & 0xFFFFFFFFFFFFFFFBLL;
              goto LABEL_165;
            }
          }
        }
        else
        {
          if (mlir::DenseElementsAttr::classof(*v19)) {
            uint64_t v43 = v31;
          }
          else {
            uint64_t v43 = 0;
          }
          *(void *)&long long v130 = v43;
          if (v43
            && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v130)
            && ((uint64_t v44 = v19[1], !mlir::DenseElementsAttr::classof(v44)) ? (v45 = 0) : (v45 = v44),
                (*(void *)&long long v130 = v45) != 0
             && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v130)))
          {
            uint64_t v46 = v19[1];
            uint64_t v114 = *v19;
            uint64_t v111 = v46;
            uint64_t v47 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v114);
            if (v47 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v111))
            {
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v114, (uint64_t)&v130);
              long long v128 = v130;
              long long v129 = v131[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*(&v128, (llvm::APInt *)&v120);
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v111, (uint64_t)&v130);
              long long v128 = v130;
              long long v129 = v131[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*(&v128, (llvm::APInt *)&v117);
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v130, (llvm::APInt *)&v120, (uint64_t)&v117);
              if (v118 >= 0x41 && v117) {
                MEMORY[0x21667D390](v117, 0x1000C8000313F17);
              }
              if (v121 >= 0x41 && v120) {
                MEMORY[0x21667D390](v120, 0x1000C8000313F17);
              }
              if (LOBYTE(v131[0]))
              {
                uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                uint64_t v21 = mlir::DenseElementsAttr::get(canMapOperands, v48, (llvm::APInt *)&v130, 1);
                if (LOBYTE(v131[0])) {
                  goto LABEL_93;
                }
                goto LABEL_162;
              }
            }
          }
          else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v19 + 8) {
                 && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v19[1] + 8))
          }
          {
            uint64_t v49 = (void *)*v19;
            uint64_t v50 = *v19 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v49 + 8) : 0;
            uint64_t v126 = v49;
            uint64_t v127 = v50;
            unsigned int v55 = (void *)v19[1];
            uint64_t v56 = v55 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v55 + 8) : 0;
            uint64_t v124 = v55;
            uint64_t v125 = v56;
            uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v126);
            if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v124))
            {
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v126, (uint64_t)&v128);
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v124, (uint64_t)&v120);
              uint64_t v21 = 0;
              int v59 = v123;
              if (BYTE8(v129) && v123)
              {
                LOWORD(v117) = v128;
                if ((_BYTE)v128) {
                  uint64_t v118 = *((void *)&v128 + 1);
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(**((void **)&v128 + 1) + 16))(&v118);
                }
                uint64_t v119 = v129;
                LOWORD(v114) = v120;
                if ((_BYTE)v120) {
                  uint64_t v115 = v121;
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v121 + 16))(&v115);
                }
                uint64_t v116 = v122;
                *(void *)&long long v130 = v131;
                *((void *)&v130 + 1) = 0x400000000;
                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v126, v127);
                llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v130, NumElements);
                uint64_t v80 = mlir::ElementsAttr::getNumElements((uint64_t)v126, v127);
                if (v80)
                {
                  uint64_t v81 = v80;
                  uint64_t v82 = v119;
                  while (1)
                  {
                    uint64_t v83 = BYTE1(v117) ? 0 : v82;
                    if ((_BYTE)v117)
                    {
                      long long v84 = (const llvm::APInt *)(v118 + 16 * v83);
                      unsigned int v110 = *((_DWORD *)v84 + 2);
                      if (v110 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v109, v84);
                      }
                      uint64_t v109 = *(void *)v84;
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v118 + 24))(&v109);
                    }
                    uint64_t v85 = BYTE1(v114) ? 0 : v116;
                    if ((_BYTE)v114)
                    {
                      int v86 = (const llvm::APInt *)(v115 + 16 * v85);
                      unsigned int v108 = *((_DWORD *)v86 + 2);
                      if (v108 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v107, v86);
                      }
                      uint64_t v107 = *(void *)v86;
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v115 + 24))(&v107);
                    }
                    mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v111, (llvm::APInt *)&v109, (uint64_t)&v107);
                    if (v108 >= 0x41 && v107) {
                      MEMORY[0x21667D390](v107, 0x1000C8000313F17);
                    }
                    if (v110 >= 0x41 && v109) {
                      MEMORY[0x21667D390](v109, 0x1000C8000313F17);
                    }
                    if (!v113) {
                      break;
                    }
                    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v130, (unint64_t)&v111, 1);
                    unint64_t v88 = (llvm::APInt *)(v130 + 16 * DWORD2(v130));
                    unsigned int v89 = *((_DWORD *)Address + 2);
                    *((_DWORD *)v88 + 2) = v89;
                    if (v89 > 0x40) {
                      llvm::APInt::initSlowCase(v88, (const llvm::APInt *)Address);
                    }
                    *(void *)unint64_t v88 = *(void *)Address;
                    ++DWORD2(v130);
                    if (v113 && v112 >= 0x41 && v111) {
                      MEMORY[0x21667D390](v111, 0x1000C8000313F17);
                    }
                    uint64_t v82 = ++v119;
                    ++v116;
                    if (!--v81) {
                      goto LABEL_273;
                    }
                  }
                  uint64_t v21 = 0;
                }
                else
                {
LABEL_273:
                  uint64_t v90 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                  uint64_t v21 = mlir::DenseElementsAttr::get(canMapOperands, v90, (llvm::APInt *)v130, DWORD2(v130));
                }
                unint64_t v91 = (char *)v130;
                if (DWORD2(v130))
                {
                  uint64_t v92 = 16 * DWORD2(v130);
                  do
                  {
                    if (*(_DWORD *)&v91[v92 - 8] >= 0x41u)
                    {
                      uint64_t v93 = *(void *)&v91[v92 - 16];
                      if (v93) {
                        MEMORY[0x21667D390](v93, 0x1000C8000313F17);
                      }
                    }
                    v92 -= 16;
                  }
                  while (v92);
                  unint64_t v91 = (char *)v130;
                }
                if (v91 != (char *)v131) {
                  free(v91);
                }
                if (!(_BYTE)v114)
                {
                  uint64_t v94 = v115;
                  uint64_t v115 = 0;
                  if (v94) {
                    (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
                  }
                }
                if (!(_BYTE)v117)
                {
                  uint64_t v95 = v118;
                  uint64_t v118 = 0;
                  if (v95) {
                    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
                  }
                }
                int v59 = v123;
              }
              if (v59)
              {
                if (!(_BYTE)v120)
                {
                  uint64_t v96 = v121;
                  uint64_t v121 = 0;
                  if (v96) {
                    (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
                  }
                }
              }
              if (BYTE8(v129))
              {
                if (!(_BYTE)v128)
                {
                  uint64_t v97 = *((void *)&v128 + 1);
                  *((void *)&v128 + 1) = 0;
                  if (v97) {
                    (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
                  }
                }
              }
              goto LABEL_162;
            }
          }
        }
      }
      uint64_t v21 = 0;
      goto LABEL_162;
    }
    if (v14)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
      {
        uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
        *(void *)&long long v130 = v14;
        *((void *)&v130 + 1) = v16;
        uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v130);
      }
      else
      {
        uint64_t v14 = 0;
        long long v130 = 0uLL;
      }
    }
    else
    {
      long long v130 = 0uLL;
    }
    uint64_t v17 = (void *)v5[1];
    if (v17)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v17 + 8))
      {
        uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v17 + 8);
        *(void *)&long long v130 = v17;
        *((void *)&v130 + 1) = v18;
        uint64_t v24 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v130);
        uint64_t result = 0;
        if (!v14 || !v24 || v14 != v24) {
          return result;
        }
        uint64_t v15 = *v5;
        if (*v5
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          goto LABEL_28;
        }
        uint64_t v26 = v5[1];
        if (v26)
        {
          uint64_t v27 = *(void **)(*(void *)v26 + 136);
          if (v27 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v28 = v5[1];
          }
          else {
            uint64_t v28 = 0;
          }
          if (!v15 || v27 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            goto LABEL_150;
          }
          if (v27 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v120 = *v5;
            uint64_t v117 = v26;
            uint64_t v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v120);
            if (v29 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v117))
            {
              mlir::IntegerAttr::getValue((uint64_t)&v120, (llvm::APInt *)&v124);
              mlir::IntegerAttr::getValue((uint64_t)&v117, (llvm::APInt *)&v109);
              llvm::APInt::operator*((uint64_t)&v124, &v109, (uint64_t)&v128);
              DWORD2(v130) = DWORD2(v128);
              *(void *)&long long v130 = v128;
              LOBYTE(v131[0]) = 1;
              if (v110 >= 0x41 && v109) {
                MEMORY[0x21667D390](v109, 0x1000C8000313F17);
              }
              if (v125 >= 0x41 && v124) {
                MEMORY[0x21667D390](v124, 0x1000C8000313F17);
              }
              uint64_t v28 = mlir::IntegerAttr::get(v14, (const llvm::APInt *)&v130);
              if (LOBYTE(v131[0]))
              {
LABEL_63:
                if (DWORD2(v130) >= 0x41 && (void)v130) {
                  MEMORY[0x21667D390](v130, 0x1000C8000313F17);
                }
              }
LABEL_150:
              uint64_t v15 = v28;
              if (!v28) {
                return 0;
              }
              goto LABEL_28;
            }
          }
          else
          {
            if (mlir::DenseElementsAttr::classof(*v5)) {
              uint64_t v35 = v15;
            }
            else {
              uint64_t v35 = 0;
            }
            *(void *)&long long v130 = v35;
            if (v35
              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v130)
              && ((uint64_t v36 = v5[1], !mlir::DenseElementsAttr::classof(v36)) ? (v37 = 0) : (v37 = v36),
                  (*(void *)&long long v130 = v37) != 0
               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v130)))
            {
              uint64_t v38 = v5[1];
              uint64_t v120 = *v5;
              uint64_t v117 = v38;
              uint64_t v39 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v120);
              if (v39 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v117))
              {
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v120, (uint64_t)&v130);
                long long v128 = v130;
                long long v129 = v131[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v128, (llvm::APInt *)&v107);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v117, (uint64_t)&v130);
                long long v128 = v130;
                long long v129 = v131[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v128, (llvm::APInt *)&v105);
                llvm::APInt::operator*((uint64_t)&v107, &v105, (uint64_t)&v128);
                DWORD2(v130) = DWORD2(v128);
                *(void *)&long long v130 = v128;
                LOBYTE(v131[0]) = 1;
                if (v106 >= 0x41 && v105) {
                  MEMORY[0x21667D390](v105, 0x1000C8000313F17);
                }
                if (v108 >= 0x41 && v107) {
                  MEMORY[0x21667D390](v107, 0x1000C8000313F17);
                }
                uint64_t v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8);
                uint64_t v28 = mlir::DenseElementsAttr::get(v14, v40, (llvm::APInt *)&v130, 1);
                if (LOBYTE(v131[0])) {
                  goto LABEL_63;
                }
                goto LABEL_150;
              }
            }
            else
            {
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
              {
                return 0;
              }
              uint64_t v41 = (void *)*v5;
              if (*v5) {
                uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v41 + 8);
              }
              else {
                uint64_t v42 = 0;
              }
              uint64_t v103 = v41;
              uint64_t v104 = v42;
              uint64_t v51 = (void *)v5[1];
              if (v51) {
                uint64_t v52 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v51 + 8);
              }
              else {
                uint64_t v52 = 0;
              }
              v102[0] = v51;
              v102[1] = v52;
              uint64_t v53 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v103);
              if (v53 == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v102))
              {
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v103, (uint64_t)&v128);
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v102, (uint64_t)&v120);
                uint64_t v28 = 0;
                int v54 = v123;
                if (BYTE8(v129) && v123)
                {
                  LOWORD(v117) = v128;
                  if ((_BYTE)v128) {
                    uint64_t v118 = *((void *)&v128 + 1);
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v128 + 1) + 16))(&v118);
                  }
                  uint64_t v119 = v129;
                  LOWORD(v114) = v120;
                  if ((_BYTE)v120) {
                    uint64_t v115 = v121;
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v121 + 16))(&v115);
                  }
                  uint64_t v116 = v122;
                  *(void *)&long long v130 = v131;
                  *((void *)&v130 + 1) = 0x400000000;
                  unint64_t v60 = mlir::ElementsAttr::getNumElements((uint64_t)v103, v104);
                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v130, v60);
                  uint64_t v61 = mlir::ElementsAttr::getNumElements((uint64_t)v103, v104);
                  if (v61)
                  {
                    uint64_t v62 = v61;
                    uint64_t v63 = v119;
                    while (1)
                    {
                      uint64_t v64 = BYTE1(v117) ? 0 : v63;
                      if ((_BYTE)v117)
                      {
                        uint64_t v65 = (const llvm::APInt *)(v118 + 16 * v64);
                        unsigned int v101 = *((_DWORD *)v65 + 2);
                        if (v101 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v100, v65);
                        }
                        uint64_t v100 = *(void *)v65;
                      }
                      else
                      {
                        (*(void (**)(uint64_t *__return_ptr))(*(void *)v118 + 24))(&v100);
                      }
                      uint64_t v66 = BYTE1(v114) ? 0 : v116;
                      if ((_BYTE)v114)
                      {
                        uint64_t v67 = (const llvm::APInt *)(v115 + 16 * v66);
                        unsigned int v99 = *((_DWORD *)v67 + 2);
                        if (v99 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v98, v67);
                        }
                        uint64_t v98 = *(void *)v67;
                      }
                      else
                      {
                        (*(void (**)(uint64_t *__return_ptr))(*(void *)v115 + 24))(&v98);
                      }
                      llvm::APInt::operator*((uint64_t)&v100, &v98, (uint64_t)&v126);
                      unsigned int v112 = v127;
                      uint64_t v111 = (uint64_t)v126;
                      char v113 = 1;
                      if (v99 >= 0x41 && v98) {
                        MEMORY[0x21667D390](v98, 0x1000C8000313F17);
                      }
                      if (v101 >= 0x41 && v100) {
                        MEMORY[0x21667D390](v100, 0x1000C8000313F17);
                      }
                      if (!v113) {
                        break;
                      }
                      uint64_t v68 = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v130, (unint64_t)&v111, 1);
                      uint64_t v69 = (llvm::APInt *)(v130 + 16 * DWORD2(v130));
                      unsigned int v70 = *((_DWORD *)v68 + 2);
                      *((_DWORD *)v69 + 2) = v70;
                      if (v70 > 0x40) {
                        llvm::APInt::initSlowCase(v69, (const llvm::APInt *)v68);
                      }
                      *(void *)uint64_t v69 = *(void *)v68;
                      ++DWORD2(v130);
                      if (v113 && v112 >= 0x41 && v111) {
                        MEMORY[0x21667D390](v111, 0x1000C8000313F17);
                      }
                      uint64_t v63 = ++v119;
                      ++v116;
                      if (!--v62) {
                        goto LABEL_210;
                      }
                    }
                    uint64_t v28 = 0;
                  }
                  else
                  {
LABEL_210:
                    uint64_t v71 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v14 + 8);
                    uint64_t v28 = mlir::DenseElementsAttr::get(v14, v71, (llvm::APInt *)v130, DWORD2(v130));
                  }
                  uint64_t v72 = (char *)v130;
                  if (DWORD2(v130))
                  {
                    uint64_t v73 = 16 * DWORD2(v130);
                    do
                    {
                      if (*(_DWORD *)&v72[v73 - 8] >= 0x41u)
                      {
                        uint64_t v74 = *(void *)&v72[v73 - 16];
                        if (v74) {
                          MEMORY[0x21667D390](v74, 0x1000C8000313F17);
                        }
                      }
                      v73 -= 16;
                    }
                    while (v73);
                    uint64_t v72 = (char *)v130;
                  }
                  if (v72 != (char *)v131) {
                    free(v72);
                  }
                  if (!(_BYTE)v114)
                  {
                    uint64_t v75 = v115;
                    uint64_t v115 = 0;
                    if (v75) {
                      (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
                    }
                  }
                  if (!(_BYTE)v117)
                  {
                    uint64_t v76 = v118;
                    uint64_t v118 = 0;
                    if (v76) {
                      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
                    }
                  }
                  int v54 = v123;
                }
                if (v54)
                {
                  if (!(_BYTE)v120)
                  {
                    uint64_t v77 = v121;
                    uint64_t v121 = 0;
                    if (v77) {
                      (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
                    }
                  }
                }
                if (BYTE8(v129))
                {
                  if (!(_BYTE)v128)
                  {
                    uint64_t v78 = *((void *)&v128 + 1);
                    *((void *)&v128 + 1) = 0;
                    if (v78) {
                      (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
                    }
                  }
                }
                goto LABEL_150;
              }
            }
          }
          uint64_t v28 = 0;
          goto LABEL_150;
        }
      }
      else
      {
        long long v130 = 0uLL;
      }
    }
    else
    {
      long long v130 = 0uLL;
    }
    return 0;
  }
  DWORD2(v130) = 1;
  *(void *)&long long v130 = 0;
  *(void *)&long long v128 = &v130;
  int v7 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v128, v6);
  int v8 = DWORD2(v130);
  if (v7)
  {
    if (DWORD2(v130) < 0x41)
    {
      BOOL v9 = (void)v130 == 0;
      goto LABEL_8;
    }
    if (v8 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v130) > 0x40)
    {
      if ((void)v130) {
        MEMORY[0x21667D390](v130, 0x1000C8000313F17);
      }
      goto LABEL_16;
    }
    BOOL v9 = *(void *)v130 == 0;
  }
  else
  {
    BOOL v9 = 0;
    if (DWORD2(v130) < 0x41) {
      goto LABEL_8;
    }
  }
  if ((void)v130) {
    MEMORY[0x21667D390](v130, 0x1000C8000313F17);
  }
LABEL_8:
  if (!v9)
  {
LABEL_16:
    int v5 = *(uint64_t **)(a2 + 40);
    goto LABEL_17;
  }
  unint64_t v10 = *(void *)(*(void *)(a2 + 40) + 8) & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v11 = *(unsigned int *)(a3 + 8);
  if (v11 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v11) = v10;
  unsigned int v12 = *(_DWORD *)(a3 + 12);
  uint64_t v13 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v13;
LABEL_165:
  if (v13 >= v12)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v13) = v10;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

void mlir::arith::MulSIExtendedOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::MulUIExtendedOp::fold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  int v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = v5[1];
  if (!v6) {
    goto LABEL_31;
  }
  DWORD2(v139) = 1;
  *(void *)&long long v139 = 0;
  *(void *)&long long v137 = &v139;
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v137, v6);
  int v9 = DWORD2(v139);
  if (!v8)
  {
    BOOL v10 = 0;
    if (DWORD2(v139) < 0x41) {
      goto LABEL_22;
    }
    goto LABEL_6;
  }
  if (DWORD2(v139) < 0x41)
  {
    BOOL v10 = (void)v139 == 0;
    goto LABEL_22;
  }
  if (v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v139) < 0x41)
  {
    BOOL v10 = *(void *)v139 == 0;
LABEL_6:
    uint64_t v11 = v139;
    if ((void)v139) {
      goto LABEL_7;
    }
LABEL_22:
    int v5 = *(uint64_t **)(a2 + 40);
    uint64_t v12 = v5[1];
    if (v10) {
      goto LABEL_23;
    }
LABEL_8:
    if (v12)
    {
      DWORD2(v139) = 1;
      *(void *)&long long v139 = 0;
      *(void *)&long long v137 = &v139;
      int v13 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v137, v12);
      int v14 = DWORD2(v139);
      if (v13)
      {
        if (DWORD2(v139) < 0x41)
        {
          BOOL v15 = (void)v139 == 1;
          goto LABEL_17;
        }
        if (v14 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v139) > 0x40)
        {
          if ((void)v139) {
            MEMORY[0x21667D390](v139, 0x1000C8000313F17);
          }
LABEL_30:
          int v5 = *(uint64_t **)(a2 + 40);
          goto LABEL_31;
        }
        BOOL v15 = *(void *)v139 == 1;
      }
      else
      {
        BOOL v15 = 0;
        if (DWORD2(v139) < 0x41) {
          goto LABEL_17;
        }
      }
      if ((void)v139) {
        MEMORY[0x21667D390](v139, 0x1000C8000313F17);
      }
LABEL_17:
      if (v15)
      {
        *(void *)&long long v139 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
        unint64_t ZeroAttr = (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v139, (mlir::MLIRContext *)(*(void *)(*(void *)(*(void *)(*(void *)a1 + 72)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v17 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
        uint64_t v18 = *(unsigned int *)(a3 + 8);
        if (v18 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v18 + 1, 8);
          LODWORD(v18) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v18) = v17;
        unsigned int v19 = *(_DWORD *)(a3 + 12);
        uint64_t v20 = (*(_DWORD *)(a3 + 8) + 1);
        *(_DWORD *)(a3 + 8) = v20;
        unint64_t v21 = ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        goto LABEL_179;
      }
      goto LABEL_30;
    }
LABEL_31:
    uint64_t v23 = *v5;
    if (*v5 && *(_UNKNOWN **)(*(void *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      uint64_t v24 = *v5;
      goto LABEL_42;
    }
    uint64_t v24 = v5[1];
    if (v24 && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
LABEL_42:
      uint64_t v28 = *(uint64_t **)(a2 + 40);
      uint64_t canMapOperands = *v28;
      if (*v28
        && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v30 = *v28;
        goto LABEL_176;
      }
      uint64_t v30 = v28[1];
      if (v30 && *(_UNKNOWN **)(*(void *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
        goto LABEL_176;
      }
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v31 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v139 = canMapOperands;
          *((void *)&v139 + 1) = v31;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v139 = 0uLL;
        }
      }
      else
      {
        long long v139 = 0uLL;
      }
      uint64_t v30 = v28[1];
      if (!v30)
      {
        long long v139 = 0uLL;
        goto LABEL_176;
      }
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v30 + 8))
      {
        uint64_t v30 = 0;
        long long v139 = 0uLL;
        goto LABEL_176;
      }
      uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v30 + 8);
      *(void *)&long long v139 = v30;
      *((void *)&v139 + 1) = v32;
      uint64_t v39 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
      uint64_t v30 = 0;
      if (!canMapOperands || !v39 || canMapOperands != v39) {
        goto LABEL_176;
      }
      uint64_t v40 = *v28;
      if (*v28
        && *(_UNKNOWN **)(*(void *)v40 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        uint64_t v30 = *v28;
        goto LABEL_176;
      }
      uint64_t v41 = v28[1];
      if (v41)
      {
        uint64_t v42 = *(void **)(*(void *)v41 + 136);
        if (v42 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v30 = v28[1];
        }
        else {
          uint64_t v30 = 0;
        }
        if (!v40 || v42 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          goto LABEL_176;
        }
        if (v42 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v40 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          uint64_t v126 = *v28;
          uint64_t v123 = v41;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v126);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v123))
          {
            mlir::IntegerAttr::getValue((uint64_t)&v126, (llvm::APInt *)&v137);
            mlir::IntegerAttr::getValue((uint64_t)&v123, (llvm::APInt *)&v129);
            mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v139, (llvm::APInt *)&v137, &v129);
            if (v130 >= 0x41 && v129) {
              MEMORY[0x21667D390](v129, 0x1000C8000313F17);
            }
            if (DWORD2(v137) >= 0x41 && (void)v137) {
              MEMORY[0x21667D390](v137, 0x1000C8000313F17);
            }
            if (LOBYTE(v140[0]))
            {
              uint64_t v30 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v139);
              if (LOBYTE(v140[0]))
              {
LABEL_107:
                if (DWORD2(v139) >= 0x41 && (void)v139) {
                  MEMORY[0x21667D390](v139, 0x1000C8000313F17);
                }
              }
LABEL_176:
              uint64_t v67 = *(unsigned int *)(a3 + 8);
              if (v67 >= *(_DWORD *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v67 + 1, 8);
                LODWORD(v67) = *(_DWORD *)(a3 + 8);
              }
              *(void *)(*(void *)a3 + 8 * v67) = v24 & 0xFFFFFFFFFFFFFFFBLL;
              unsigned int v19 = *(_DWORD *)(a3 + 12);
              uint64_t v20 = (*(_DWORD *)(a3 + 8) + 1);
              *(_DWORD *)(a3 + 8) = v20;
              unint64_t v21 = v30 & 0xFFFFFFFFFFFFFFFBLL;
              goto LABEL_179;
            }
          }
        }
        else
        {
          if (mlir::DenseElementsAttr::classof(*v28)) {
            uint64_t v52 = v40;
          }
          else {
            uint64_t v52 = 0;
          }
          *(void *)&long long v139 = v52;
          if (v52
            && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)
            && ((uint64_t v53 = v28[1], !mlir::DenseElementsAttr::classof(v53)) ? (v54 = 0) : (v54 = v53),
                (*(void *)&long long v139 = v54) != 0
             && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)))
          {
            uint64_t v55 = v28[1];
            uint64_t v123 = *v28;
            uint64_t v120 = v55;
            uint64_t v56 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v123);
            if (v56 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v120))
            {
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v123, (uint64_t)&v139);
              long long v137 = v139;
              long long v138 = v140[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*(&v137, (llvm::APInt *)&v129);
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v120, (uint64_t)&v139);
              long long v137 = v139;
              long long v138 = v140[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*(&v137, (llvm::APInt *)&v126);
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v139, (llvm::APInt *)&v129, &v126);
              if (v127 >= 0x41 && v126) {
                MEMORY[0x21667D390](v126, 0x1000C8000313F17);
              }
              if (v130 >= 0x41 && v129) {
                MEMORY[0x21667D390](v129, 0x1000C8000313F17);
              }
              if (LOBYTE(v140[0]))
              {
                uint64_t v57 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                uint64_t v30 = mlir::DenseElementsAttr::get(canMapOperands, v57, (llvm::APInt *)&v139, 1);
                if (LOBYTE(v140[0])) {
                  goto LABEL_107;
                }
                goto LABEL_176;
              }
            }
          }
          else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v28 + 8) {
                 && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v28[1] + 8))
          }
          {
            uint64_t v58 = (void *)*v28;
            uint64_t v59 = *v28 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v58 + 8) : 0;
            __int16 v135 = v58;
            uint64_t v136 = v59;
            uint64_t v64 = (void *)v28[1];
            uint64_t v65 = v64 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v64 + 8) : 0;
            float v133 = v64;
            uint64_t v134 = v65;
            uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v135);
            if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v133))
            {
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v135, (uint64_t)&v137);
              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v133, (uint64_t)&v129);
              uint64_t v30 = 0;
              int v68 = v132;
              if (BYTE8(v138) && v132)
              {
                LOWORD(v126) = v137;
                if ((_BYTE)v137) {
                  uint64_t v127 = *((void *)&v137 + 1);
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(**((void **)&v137 + 1) + 16))(&v127);
                }
                uint64_t v128 = v138;
                LOWORD(v123) = v129;
                if ((_BYTE)v129) {
                  uint64_t v124 = v130;
                }
                else {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v130 + 16))(&v124);
                }
                uint64_t v125 = v131;
                *(void *)&long long v139 = v140;
                *((void *)&v139 + 1) = 0x400000000;
                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v135, v136);
                llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v139, NumElements);
                uint64_t v89 = mlir::ElementsAttr::getNumElements((uint64_t)v135, v136);
                if (v89)
                {
                  uint64_t v90 = v89;
                  uint64_t v91 = v128;
                  while (1)
                  {
                    uint64_t v92 = BYTE1(v126) ? 0 : v91;
                    if ((_BYTE)v126)
                    {
                      uint64_t v93 = (const llvm::APInt *)(v127 + 16 * v92);
                      unsigned int v119 = *((_DWORD *)v93 + 2);
                      if (v119 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v118, v93);
                      }
                      uint64_t v118 = *(void *)v93;
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v127 + 24))(&v118);
                    }
                    uint64_t v94 = BYTE1(v123) ? 0 : v125;
                    if ((_BYTE)v123)
                    {
                      uint64_t v95 = (const llvm::APInt *)(v124 + 16 * v94);
                      unsigned int v117 = *((_DWORD *)v95 + 2);
                      if (v117 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v116, v95);
                      }
                      uint64_t v116 = *(void *)v95;
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v124 + 24))(&v116);
                    }
                    mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v120, (llvm::APInt *)&v118, &v116);
                    if (v117 >= 0x41 && v116) {
                      MEMORY[0x21667D390](v116, 0x1000C8000313F17);
                    }
                    if (v119 >= 0x41 && v118) {
                      MEMORY[0x21667D390](v118, 0x1000C8000313F17);
                    }
                    if (!v122) {
                      break;
                    }
                    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v139, (unint64_t)&v120, 1);
                    uint64_t v97 = (llvm::APInt *)(v139 + 16 * DWORD2(v139));
                    unsigned int v98 = *((_DWORD *)Address + 2);
                    *((_DWORD *)v97 + 2) = v98;
                    if (v98 > 0x40) {
                      llvm::APInt::initSlowCase(v97, (const llvm::APInt *)Address);
                    }
                    *(void *)uint64_t v97 = *(void *)Address;
                    ++DWORD2(v139);
                    if (v122 && v121 >= 0x41 && v120) {
                      MEMORY[0x21667D390](v120, 0x1000C8000313F17);
                    }
                    uint64_t v91 = ++v128;
                    ++v125;
                    if (!--v90) {
                      goto LABEL_287;
                    }
                  }
                  uint64_t v30 = 0;
                }
                else
                {
LABEL_287:
                  uint64_t v99 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                  uint64_t v30 = mlir::DenseElementsAttr::get(canMapOperands, v99, (llvm::APInt *)v139, DWORD2(v139));
                }
                uint64_t v100 = (char *)v139;
                if (DWORD2(v139))
                {
                  uint64_t v101 = 16 * DWORD2(v139);
                  do
                  {
                    if (*(_DWORD *)&v100[v101 - 8] >= 0x41u)
                    {
                      uint64_t v102 = *(void *)&v100[v101 - 16];
                      if (v102) {
                        MEMORY[0x21667D390](v102, 0x1000C8000313F17);
                      }
                    }
                    v101 -= 16;
                  }
                  while (v101);
                  uint64_t v100 = (char *)v139;
                }
                if (v100 != (char *)v140) {
                  free(v100);
                }
                if (!(_BYTE)v123)
                {
                  uint64_t v103 = v124;
                  uint64_t v124 = 0;
                  if (v103) {
                    (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
                  }
                }
                if (!(_BYTE)v126)
                {
                  uint64_t v104 = v127;
                  uint64_t v127 = 0;
                  if (v104) {
                    (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
                  }
                }
                int v68 = v132;
              }
              if (v68)
              {
                if (!(_BYTE)v129)
                {
                  uint64_t v105 = v130;
                  uint64_t v130 = 0;
                  if (v105) {
                    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
                  }
                }
              }
              if (BYTE8(v138))
              {
                if (!(_BYTE)v137)
                {
                  uint64_t v106 = *((void *)&v137 + 1);
                  *((void *)&v137 + 1) = 0;
                  if (v106) {
                    (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
                  }
                }
              }
              goto LABEL_176;
            }
          }
        }
      }
      uint64_t v30 = 0;
      goto LABEL_176;
    }
    if (v23)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8))
      {
        uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8);
        *(void *)&long long v139 = v23;
        *((void *)&v139 + 1) = v25;
        uint64_t v23 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
      }
      else
      {
        uint64_t v23 = 0;
        long long v139 = 0uLL;
      }
    }
    else
    {
      long long v139 = 0uLL;
    }
    uint64_t v26 = (void *)v5[1];
    if (v26)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v26 + 8))
      {
        uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v26 + 8);
        *(void *)&long long v139 = v26;
        *((void *)&v139 + 1) = v27;
        uint64_t v33 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v139);
        uint64_t result = 0;
        if (!v23 || !v33 || v23 != v33) {
          return result;
        }
        uint64_t v24 = *v5;
        if (*v5
          && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          goto LABEL_42;
        }
        uint64_t v35 = v5[1];
        if (v35)
        {
          uint64_t v36 = *(void **)(*(void *)v35 + 136);
          if (v36 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v37 = v5[1];
          }
          else {
            uint64_t v37 = 0;
          }
          if (!v24 || v36 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            goto LABEL_164;
          }
          if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v24 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v129 = *v5;
            uint64_t v126 = v35;
            uint64_t v38 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v129);
            if (v38 == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v126))
            {
              mlir::IntegerAttr::getValue((uint64_t)&v129, (llvm::APInt *)&v133);
              mlir::IntegerAttr::getValue((uint64_t)&v126, (llvm::APInt *)&v118);
              llvm::APInt::operator*((uint64_t)&v133, &v118, (uint64_t)&v137);
              DWORD2(v139) = DWORD2(v137);
              *(void *)&long long v139 = v137;
              LOBYTE(v140[0]) = 1;
              if (v119 >= 0x41 && v118) {
                MEMORY[0x21667D390](v118, 0x1000C8000313F17);
              }
              if (v134 >= 0x41 && v133) {
                MEMORY[0x21667D390](v133, 0x1000C8000313F17);
              }
              uint64_t v37 = mlir::IntegerAttr::get(v23, (const llvm::APInt *)&v139);
              if (LOBYTE(v140[0]))
              {
LABEL_77:
                if (DWORD2(v139) >= 0x41 && (void)v139) {
                  MEMORY[0x21667D390](v139, 0x1000C8000313F17);
                }
              }
LABEL_164:
              uint64_t v24 = v37;
              if (!v37) {
                return 0;
              }
              goto LABEL_42;
            }
          }
          else
          {
            if (mlir::DenseElementsAttr::classof(*v5)) {
              uint64_t v44 = v24;
            }
            else {
              uint64_t v44 = 0;
            }
            *(void *)&long long v139 = v44;
            if (v44
              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)
              && ((uint64_t v45 = v5[1], !mlir::DenseElementsAttr::classof(v45)) ? (v46 = 0) : (v46 = v45),
                  (*(void *)&long long v139 = v46) != 0
               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v139)))
            {
              uint64_t v47 = v5[1];
              uint64_t v129 = *v5;
              uint64_t v126 = v47;
              uint64_t v48 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v129);
              if (v48 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v126))
              {
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v129, (uint64_t)&v139);
                long long v137 = v139;
                long long v138 = v140[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v137, (llvm::APInt *)&v116);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v126, (uint64_t)&v139);
                long long v137 = v139;
                long long v138 = v140[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v137, (llvm::APInt *)&v114);
                llvm::APInt::operator*((uint64_t)&v116, &v114, (uint64_t)&v137);
                DWORD2(v139) = DWORD2(v137);
                *(void *)&long long v139 = v137;
                LOBYTE(v140[0]) = 1;
                if (v115 >= 0x41 && v114) {
                  MEMORY[0x21667D390](v114, 0x1000C8000313F17);
                }
                if (v117 >= 0x41 && v116) {
                  MEMORY[0x21667D390](v116, 0x1000C8000313F17);
                }
                uint64_t v49 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
                uint64_t v37 = mlir::DenseElementsAttr::get(v23, v49, (llvm::APInt *)&v139, 1);
                if (LOBYTE(v140[0])) {
                  goto LABEL_77;
                }
                goto LABEL_164;
              }
            }
            else
            {
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
              {
                return 0;
              }
              uint64_t v50 = (void *)*v5;
              if (*v5) {
                uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v50 + 8);
              }
              else {
                uint64_t v51 = 0;
              }
              unsigned int v112 = v50;
              uint64_t v113 = v51;
              unint64_t v60 = (void *)v5[1];
              if (v60) {
                uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v60 + 8);
              }
              else {
                uint64_t v61 = 0;
              }
              v111[0] = v60;
              v111[1] = v61;
              uint64_t v62 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v112);
              if (v62 == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v111))
              {
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v112, (uint64_t)&v137);
                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v111, (uint64_t)&v129);
                uint64_t v37 = 0;
                int v63 = v132;
                if (BYTE8(v138) && v132)
                {
                  LOWORD(v126) = v137;
                  if ((_BYTE)v137) {
                    uint64_t v127 = *((void *)&v137 + 1);
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v137 + 1) + 16))(&v127);
                  }
                  uint64_t v128 = v138;
                  LOWORD(v123) = v129;
                  if ((_BYTE)v129) {
                    uint64_t v124 = v130;
                  }
                  else {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v130 + 16))(&v124);
                  }
                  uint64_t v125 = v131;
                  *(void *)&long long v139 = v140;
                  *((void *)&v139 + 1) = 0x400000000;
                  unint64_t v69 = mlir::ElementsAttr::getNumElements((uint64_t)v112, v113);
                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v139, v69);
                  uint64_t v70 = mlir::ElementsAttr::getNumElements((uint64_t)v112, v113);
                  if (v70)
                  {
                    uint64_t v71 = v70;
                    uint64_t v72 = v128;
                    while (1)
                    {
                      uint64_t v73 = BYTE1(v126) ? 0 : v72;
                      if ((_BYTE)v126)
                      {
                        uint64_t v74 = (const llvm::APInt *)(v127 + 16 * v73);
                        unsigned int v110 = *((_DWORD *)v74 + 2);
                        if (v110 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v109, v74);
                        }
                        uint64_t v109 = *(void *)v74;
                      }
                      else
                      {
                        (*(void (**)(uint64_t *__return_ptr))(*(void *)v127 + 24))(&v109);
                      }
                      uint64_t v75 = BYTE1(v123) ? 0 : v125;
                      if ((_BYTE)v123)
                      {
                        uint64_t v76 = (const llvm::APInt *)(v124 + 16 * v75);
                        unsigned int v108 = *((_DWORD *)v76 + 2);
                        if (v108 > 0x40) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v107, v76);
                        }
                        uint64_t v107 = *(void *)v76;
                      }
                      else
                      {
                        (*(void (**)(uint64_t *__return_ptr))(*(void *)v124 + 24))(&v107);
                      }
                      llvm::APInt::operator*((uint64_t)&v109, &v107, (uint64_t)&v135);
                      unsigned int v121 = v136;
                      uint64_t v120 = (uint64_t)v135;
                      char v122 = 1;
                      if (v108 >= 0x41 && v107) {
                        MEMORY[0x21667D390](v107, 0x1000C8000313F17);
                      }
                      if (v110 >= 0x41 && v109) {
                        MEMORY[0x21667D390](v109, 0x1000C8000313F17);
                      }
                      if (!v122) {
                        break;
                      }
                      uint64_t v77 = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v139, (unint64_t)&v120, 1);
                      uint64_t v78 = (llvm::APInt *)(v139 + 16 * DWORD2(v139));
                      unsigned int v79 = *((_DWORD *)v77 + 2);
                      *((_DWORD *)v78 + 2) = v79;
                      if (v79 > 0x40) {
                        llvm::APInt::initSlowCase(v78, (const llvm::APInt *)v77);
                      }
                      *(void *)uint64_t v78 = *(void *)v77;
                      ++DWORD2(v139);
                      if (v122 && v121 >= 0x41 && v120) {
                        MEMORY[0x21667D390](v120, 0x1000C8000313F17);
                      }
                      uint64_t v72 = ++v128;
                      ++v125;
                      if (!--v71) {
                        goto LABEL_224;
                      }
                    }
                    uint64_t v37 = 0;
                  }
                  else
                  {
LABEL_224:
                    uint64_t v80 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v23 + 8);
                    uint64_t v37 = mlir::DenseElementsAttr::get(v23, v80, (llvm::APInt *)v139, DWORD2(v139));
                  }
                  uint64_t v81 = (char *)v139;
                  if (DWORD2(v139))
                  {
                    uint64_t v82 = 16 * DWORD2(v139);
                    do
                    {
                      if (*(_DWORD *)&v81[v82 - 8] >= 0x41u)
                      {
                        uint64_t v83 = *(void *)&v81[v82 - 16];
                        if (v83) {
                          MEMORY[0x21667D390](v83, 0x1000C8000313F17);
                        }
                      }
                      v82 -= 16;
                    }
                    while (v82);
                    uint64_t v81 = (char *)v139;
                  }
                  if (v81 != (char *)v140) {
                    free(v81);
                  }
                  if (!(_BYTE)v123)
                  {
                    uint64_t v84 = v124;
                    uint64_t v124 = 0;
                    if (v84) {
                      (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
                    }
                  }
                  if (!(_BYTE)v126)
                  {
                    uint64_t v85 = v127;
                    uint64_t v127 = 0;
                    if (v85) {
                      (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
                    }
                  }
                  int v63 = v132;
                }
                if (v63)
                {
                  if (!(_BYTE)v129)
                  {
                    uint64_t v86 = v130;
                    uint64_t v130 = 0;
                    if (v86) {
                      (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
                    }
                  }
                }
                if (BYTE8(v138))
                {
                  if (!(_BYTE)v137)
                  {
                    uint64_t v87 = *((void *)&v137 + 1);
                    *((void *)&v137 + 1) = 0;
                    if (v87) {
                      (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
                    }
                  }
                }
                goto LABEL_164;
              }
            }
          }
          uint64_t v37 = 0;
          goto LABEL_164;
        }
      }
      else
      {
        long long v139 = 0uLL;
      }
    }
    else
    {
      long long v139 = 0uLL;
    }
    return 0;
  }
  BOOL v10 = 0;
  uint64_t v11 = v139;
  if (!(void)v139) {
    goto LABEL_22;
  }
LABEL_7:
  MEMORY[0x21667D390](v11, 0x1000C8000313F17);
  int v5 = *(uint64_t **)(a2 + 40);
  uint64_t v12 = v5[1];
  if (!v10) {
    goto LABEL_8;
  }
LABEL_23:
  unint64_t v21 = v12 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v22 = *(unsigned int *)(a3 + 8);
  if (v22 >= *(_DWORD *)(a3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v22 + 1, 8);
    LODWORD(v22) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v22) = v21;
  unsigned int v19 = *(_DWORD *)(a3 + 12);
  uint64_t v20 = (*(_DWORD *)(a3 + 8) + 1);
  *(_DWORD *)(a3 + 8) = v20;
LABEL_179:
  if (v20 >= v19)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a3 + 8);
  }
  *(void *)(*(void *)a3 + 8 * v20) = v21;
  ++*(_DWORD *)(a3 + 8);
  return 1;
}

void mlir::arith::MulUIExtendedOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::DivUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v89) = 1;
    *(void *)&long long v89 = 0;
    *(void *)&long long v87 = &v89;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v87, v4);
    unsigned int v7 = DWORD2(v89);
    if (v6)
    {
      if (DWORD2(v89) >= 0x41)
      {
        if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v89) > 0x40)
        {
          if ((void)v89) {
            MEMORY[0x21667D390](v89, 0x1000C8000313F17);
          }
LABEL_16:
          uint64_t v3 = *(uint64_t **)(a2 + 40);
          goto LABEL_17;
        }
        int v8 = (long long *)v89;
      }
      else
      {
        int v8 = &v89;
      }
      BOOL v9 = *(void *)v8 == 1;
      if (v7 < 0x41)
      {
LABEL_12:
        if (v9) {
          return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
        }
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v9 = 0;
      if (DWORD2(v89) < 0x41) {
        goto LABEL_12;
      }
    }
    if ((void)v89) {
      MEMORY[0x21667D390](v89, 0x1000C8000313F17);
    }
    goto LABEL_12;
  }
LABEL_17:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v12 = *v3;
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v12 = v3[1];
  if (v12 && *(_UNKNOWN **)(*(void *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v89 = canMapOperands;
      *((void *)&v89 + 1) = v13;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v89);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v89 = 0uLL;
    }
  }
  else
  {
    long long v89 = 0uLL;
  }
  uint64_t v12 = v3[1];
  if (!v12)
  {
    long long v89 = 0uLL;
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v12 + 8))
  {
    uint64_t v12 = 0;
    long long v89 = 0uLL;
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v12 + 8);
  *(void *)&long long v89 = v12;
  *((void *)&v89 + 1) = v14;
  uint64_t v15 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v89);
  uint64_t v12 = 0;
  if (!canMapOperands || !v15 || canMapOperands != v15) {
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v16 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v12 = *v3;
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = v3[1];
  if (!v17)
  {
LABEL_92:
    uint64_t v12 = 0;
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v18 = *(void **)(*(void *)v17 + 136);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v12 = v3[1];
  }
  else {
    uint64_t v12 = 0;
  }
  if (!v16 || v18 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v12 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v18 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v16 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = 0;
    }
    *(void *)&long long v89 = v20;
    if (v20 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v89))
    {
      uint64_t v21 = v3[1];
      uint64_t v22 = mlir::DenseElementsAttr::classof(v21) ? v21 : 0;
      *(void *)&long long v89 = v22;
      if (v22)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v89))
        {
          uint64_t v23 = v3[1];
          uint64_t v65 = *v3;
          uint64_t v62 = v23;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62)) {
            goto LABEL_90;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v65, (uint64_t)&v89);
          long long v87 = v89;
          long long v88 = v90[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v87, (llvm::APInt *)&v77);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v62, (uint64_t)&v89);
          long long v87 = v89;
          long long v88 = v90[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v87, (llvm::APInt *)&v75);
          LODWORD(v69) = v78;
          if (v78 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const llvm::APInt *)&v77);
          }
          int v68 = v77;
          unsigned int v53 = v76;
          if (v76 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v75) != v53)
            {
LABEL_178:
              llvm::APInt::udiv(&v68, (const llvm::APInt *)&v75, (uint64_t)&v87);
              int v28 = 0;
              DWORD2(v89) = DWORD2(v87);
              *(void *)&long long v89 = v87;
              DWORD2(v87) = 0;
              LOBYTE(v90[0]) = 1;
              if (v69 >= 0x41)
              {
                if (v68) {
                  MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                }
                int v28 = 0;
              }
LABEL_184:
              if (v76 >= 0x41 && v75) {
                MEMORY[0x21667D390](v75, 0x1000C8000313F17);
              }
              if (v78 >= 0x41 && v77) {
                MEMORY[0x21667D390](v77, 0x1000C8000313F17);
              }
              uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
              uint64_t v12 = mlir::DenseElementsAttr::get(canMapOperands, v54, (llvm::APInt *)&v89, 1);
              if (LOBYTE(v90[0])) {
                goto LABEL_82;
              }
              goto LABEL_91;
            }
          }
          else if (v75)
          {
            goto LABEL_178;
          }
          DWORD2(v89) = v69;
          *(void *)&long long v89 = v68;
          int v28 = 1;
          LOBYTE(v90[0]) = 1;
          goto LABEL_184;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_92;
    }
    uint64_t v25 = (void *)*v3;
    if (*v3) {
      uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8);
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v73 = v25;
    uint64_t v74 = v26;
    uint64_t v29 = (void *)v3[1];
    if (v29) {
      uint64_t v30 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v29 + 8);
    }
    else {
      uint64_t v30 = 0;
    }
    v72[0] = v29;
    v72[1] = v30;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v73);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v72)) {
      goto LABEL_90;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v73, (uint64_t)&v87);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v72, (uint64_t)&v68);
    uint64_t v12 = 0;
    int v28 = 0;
    int v32 = v71;
    if (BYTE8(v88) && v71)
    {
      LOWORD(v65) = v87;
      if ((_BYTE)v87) {
        uint64_t v66 = *((void *)&v87 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v87 + 1) + 16))(&v66);
      }
      uint64_t v67 = v88;
      LOWORD(v62) = (_WORD)v68;
      if ((_BYTE)v68) {
        uint64_t v63 = v69;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v69 + 16))(&v63);
      }
      uint64_t v64 = v70;
      *(void *)&long long v89 = v90;
      *((void *)&v89 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v89, NumElements);
      uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
      if (v34)
      {
        uint64_t v35 = v34;
        int v28 = 0;
        uint64_t v36 = v67;
        while (1)
        {
          uint64_t v37 = BYTE1(v65) ? 0 : v36;
          if ((_BYTE)v65)
          {
            uint64_t v38 = (const llvm::APInt *)(v66 + 16 * v37);
            unsigned int v58 = *((_DWORD *)v38 + 2);
            if (v58 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v57, v38);
            }
            uint64_t v57 = *(const void **)v38;
          }
          else
          {
            (*(void (**)(const void **__return_ptr))(*(void *)v66 + 24))(&v57);
          }
          uint64_t v39 = BYTE1(v62) ? 0 : v64;
          if ((_BYTE)v62)
          {
            uint64_t v40 = (const llvm::APInt *)(v63 + 16 * v39);
            unsigned int v56 = *((_DWORD *)v40 + 2);
            if (v56 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v55, v40);
            }
            uint64_t v55 = *(void *)v40;
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 24))(&v55);
          }
          unsigned int v84 = v58;
          if (v58 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v57);
          }
          uint64_t v83 = v57;
          if (v28) {
            break;
          }
          unsigned int v44 = v56;
          if (v56 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v55) == v44) {
              break;
            }
          }
          else if (!v55)
          {
            break;
          }
          llvm::APInt::udiv(&v83, (const llvm::APInt *)&v55, (uint64_t)&v85);
          int v28 = 0;
          unsigned int v60 = v86;
          uint64_t v59 = v85;
          unsigned int v86 = 0;
          char v61 = 1;
          if (v84 >= 0x41)
          {
            if (v83) {
              MEMORY[0x21667D390](v83, 0x1000C8000313F17);
            }
            int v28 = 0;
          }
LABEL_126:
          if (v56 >= 0x41 && v55) {
            MEMORY[0x21667D390](v55, 0x1000C8000313F17);
          }
          if (v58 >= 0x41 && v57) {
            MEMORY[0x21667D390](v57, 0x1000C8000313F17);
          }
          if (!v61)
          {
            uint64_t v12 = 0;
            goto LABEL_151;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v89, (unint64_t)&v59, 1);
          uint64_t v42 = (llvm::APInt *)(v89 + 16 * DWORD2(v89));
          unsigned int v43 = *((_DWORD *)Address + 2);
          *((_DWORD *)v42 + 2) = v43;
          if (v43 > 0x40) {
            llvm::APInt::initSlowCase(v42, (const llvm::APInt *)Address);
          }
          *(void *)uint64_t v42 = *(void *)Address;
          ++DWORD2(v89);
          if (v61 && v60 >= 0x41 && v59) {
            MEMORY[0x21667D390](v59, 0x1000C8000313F17);
          }
          uint64_t v36 = ++v67;
          ++v64;
          if (!--v35) {
            goto LABEL_149;
          }
        }
        unsigned int v60 = v84;
        uint64_t v59 = v83;
        int v28 = 1;
        char v61 = 1;
        goto LABEL_126;
      }
      int v28 = 0;
LABEL_149:
      uint64_t v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v12 = mlir::DenseElementsAttr::get(canMapOperands, v45, (llvm::APInt *)v89, DWORD2(v89));
LABEL_151:
      uint64_t v46 = (char *)v89;
      if (DWORD2(v89))
      {
        uint64_t v47 = 16 * DWORD2(v89);
        do
        {
          if (*(_DWORD *)&v46[v47 - 8] >= 0x41u)
          {
            uint64_t v48 = *(void *)&v46[v47 - 16];
            if (v48) {
              MEMORY[0x21667D390](v48, 0x1000C8000313F17);
            }
          }
          v47 -= 16;
        }
        while (v47);
        uint64_t v46 = (char *)v89;
      }
      if (v46 != (char *)v90) {
        free(v46);
      }
      if (!(_BYTE)v62)
      {
        uint64_t v49 = v63;
        uint64_t v63 = 0;
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
      }
      if (!(_BYTE)v65)
      {
        uint64_t v50 = v66;
        uint64_t v66 = 0;
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
        }
      }
      int v32 = v71;
    }
    if (v32)
    {
      if (!(_BYTE)v68)
      {
        uint64_t v51 = v69;
        uint64_t v69 = 0;
        if (v51) {
          (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
        }
      }
    }
    if (BYTE8(v88))
    {
      if (!(_BYTE)v87)
      {
        uint64_t v52 = *((void *)&v87 + 1);
        *((void *)&v87 + 1) = 0;
        if (v52) {
          (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
        }
      }
    }
    goto LABEL_91;
  }
  uint64_t v65 = *v3;
  uint64_t v62 = v17;
  uint64_t v19 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
  if (v19 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62))
  {
LABEL_90:
    int v28 = 0;
    uint64_t v12 = 0;
    goto LABEL_91;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v65, (llvm::APInt *)&v81);
  mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v79);
  LODWORD(v69) = v82;
  if (v82 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const llvm::APInt *)&v81);
  }
  int v68 = v81;
  unsigned int v27 = v80;
  if (v80 <= 0x40)
  {
    if (v79) {
      goto LABEL_69;
    }
LABEL_74:
    DWORD2(v89) = v69;
    *(void *)&long long v89 = v68;
    int v28 = 1;
    LOBYTE(v90[0]) = 1;
    goto LABEL_75;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v79) == v27) {
    goto LABEL_74;
  }
LABEL_69:
  llvm::APInt::udiv(&v68, (const llvm::APInt *)&v79, (uint64_t)&v87);
  int v28 = 0;
  DWORD2(v89) = DWORD2(v87);
  *(void *)&long long v89 = v87;
  DWORD2(v87) = 0;
  LOBYTE(v90[0]) = 1;
  if (v69 >= 0x41)
  {
    if (v68) {
      MEMORY[0x21667D390](v68, 0x1000C8000313F17);
    }
    int v28 = 0;
  }
LABEL_75:
  if (v80 >= 0x41 && v79) {
    MEMORY[0x21667D390](v79, 0x1000C8000313F17);
  }
  if (v82 >= 0x41 && v81) {
    MEMORY[0x21667D390](v81, 0x1000C8000313F17);
  }
  uint64_t v12 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v89);
  if (LOBYTE(v90[0]))
  {
LABEL_82:
    if (DWORD2(v89) >= 0x41)
    {
      if ((void)v89) {
        MEMORY[0x21667D390](v89, 0x1000C8000313F17);
      }
    }
  }
LABEL_91:
  if (v28) {
    goto LABEL_92;
  }
  return v12 & 0xFFFFFFFFFFFFFFFBLL;
}

mlir::Operation *mlir::arith::DivUIOp::getSpeculatability(mlir::arith::DivUIOp *this)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)this + 72) + 56);
  uint64_t v3 = mlir::m_NonZero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
  uint64_t v4 = v1;
  uint64_t result = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v4);
  if (result) {
    return (mlir::Operation *)mlir::detail::constant_int_predicate_matcher::match((uint64_t (**)(uint64_t *))&v3, result);
  }
  return result;
}

unint64_t mlir::arith::DivSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v80) = 1;
    *(void *)&long long v80 = 0;
    *(void *)&long long v78 = &v80;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v78, v4);
    int v7 = DWORD2(v80);
    if (v6)
    {
      if (DWORD2(v80) < 0x41)
      {
        BOOL v8 = (void)v80 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
      {
        if ((void)v80) {
          MEMORY[0x21667D390](v80, 0x1000C8000313F17);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v80 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v80) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v80) {
      MEMORY[0x21667D390](v80, 0x1000C8000313F17);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  BOOL v53 = 0;
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_85;
  }
  uint64_t v11 = v3[1];
  if (!v11 || *(_UNKNOWN **)(*(void *)v11 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    if (canMapOperands)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
      {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
        *(void *)&long long v80 = canMapOperands;
        *((void *)&v80 + 1) = v12;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v80);
      }
      else
      {
        uint64_t canMapOperands = 0;
        long long v80 = 0uLL;
      }
    }
    else
    {
      long long v80 = 0uLL;
    }
    uint64_t v11 = v3[1];
    if (!v11)
    {
      long long v80 = 0uLL;
      goto LABEL_85;
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
    {
      uint64_t v11 = 0;
      long long v80 = 0uLL;
      goto LABEL_85;
    }
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
    *(void *)&long long v80 = v11;
    *((void *)&v80 + 1) = v13;
    uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v80);
    uint64_t v11 = 0;
    if (canMapOperands)
    {
      if (v14 && canMapOperands == v14)
      {
        uint64_t v15 = *v3;
        if (*v3
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v11 = *v3;
          goto LABEL_85;
        }
        uint64_t v16 = v3[1];
        if (!v16) {
          goto LABEL_84;
        }
        uint64_t v17 = *(void **)(*(void *)v16 + 136);
        if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v11 = v3[1];
        }
        else {
          uint64_t v11 = 0;
        }
        if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          goto LABEL_85;
        }
        if (v17 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          uint64_t v58 = *v3;
          uint64_t v76 = v16;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v58);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v76))
          {
            mlir::IntegerAttr::getValue((uint64_t)&v58, (llvm::APInt *)&v64);
            mlir::IntegerAttr::getValue((uint64_t)&v76, (llvm::APInt *)&v61);
            LODWORD(v68) = v65;
            if (v65 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v67, (const llvm::APInt *)&v64);
            }
            uint64_t v67 = v64;
            int v26 = v62;
            if (v62 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v61) == v26)
              {
LABEL_65:
                BOOL v53 = 1;
                DWORD2(v80) = v68;
                *(void *)&long long v80 = v67;
                LOBYTE(v81[0]) = 1;
                goto LABEL_66;
              }
            }
            else if (!v61)
            {
              goto LABEL_65;
            }
            llvm::APInt::sdiv_ov((llvm::APInt *)&v67, (const llvm::APInt *)&v61, &v53, (uint64_t)&v78);
            DWORD2(v80) = DWORD2(v78);
            *(void *)&long long v80 = v78;
            DWORD2(v78) = 0;
            LOBYTE(v81[0]) = 1;
            if (v68 >= 0x41 && v67) {
              MEMORY[0x21667D390](v67, 0x1000C8000313F17);
            }
LABEL_66:
            if (v62 >= 0x41 && v61) {
              MEMORY[0x21667D390](v61, 0x1000C8000313F17);
            }
            if (v65 >= 0x41 && v64) {
              MEMORY[0x21667D390](v64, 0x1000C8000313F17);
            }
            uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v80);
            if (!LOBYTE(v81[0])) {
              goto LABEL_85;
            }
            goto LABEL_73;
          }
LABEL_84:
          uint64_t v11 = 0;
          goto LABEL_85;
        }
        if (mlir::DenseElementsAttr::classof(*v3)) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = 0;
        }
        *(void *)&long long v80 = v19;
        if (v19 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v80))
        {
          uint64_t v20 = v3[1];
          uint64_t v21 = mlir::DenseElementsAttr::classof(v20) ? v20 : 0;
          *(void *)&long long v80 = v21;
          if (v21)
          {
            if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v80))
            {
              uint64_t v22 = v3[1];
              uint64_t v58 = *v3;
              uint64_t v76 = v22;
              uint64_t v23 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v58);
              if (v23 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v76)) {
                goto LABEL_84;
              }
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v58, (uint64_t)&v80);
              long long v78 = v80;
              long long v79 = v81[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*(&v78, (llvm::APInt *)&v64);
              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v76, (uint64_t)&v80);
              long long v78 = v80;
              long long v79 = v81[0];
              mlir::DenseElementsAttr::IntElementIterator::operator*(&v78, (llvm::APInt *)&v61);
              LODWORD(v68) = v65;
              if (v65 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v67, (const llvm::APInt *)&v64);
              }
              uint64_t v67 = v64;
              int v52 = v62;
              if (v62 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v61) == v52)
                {
LABEL_172:
                  BOOL v53 = 1;
                  DWORD2(v80) = v68;
                  *(void *)&long long v80 = v67;
                  LOBYTE(v81[0]) = 1;
                  goto LABEL_173;
                }
              }
              else if (!v61)
              {
                goto LABEL_172;
              }
              llvm::APInt::sdiv_ov((llvm::APInt *)&v67, (const llvm::APInt *)&v61, &v53, (uint64_t)&v78);
              DWORD2(v80) = DWORD2(v78);
              *(void *)&long long v80 = v78;
              DWORD2(v78) = 0;
              LOBYTE(v81[0]) = 1;
              if (v68 >= 0x41 && v67) {
                MEMORY[0x21667D390](v67, 0x1000C8000313F17);
              }
LABEL_173:
              if (v62 >= 0x41 && v61) {
                MEMORY[0x21667D390](v61, 0x1000C8000313F17);
              }
              if (v65 >= 0x41 && v64) {
                MEMORY[0x21667D390](v64, 0x1000C8000313F17);
              }
              uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
              uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v51, (llvm::APInt *)&v80, 1);
              if (!LOBYTE(v81[0])) {
                goto LABEL_85;
              }
LABEL_73:
              if (DWORD2(v80) >= 0x41 && (void)v80) {
                MEMORY[0x21667D390](v80, 0x1000C8000313F17);
              }
              goto LABEL_85;
            }
          }
        }
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
          || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
        {
          goto LABEL_84;
        }
        uint64_t v24 = (void *)*v3;
        uint64_t v25 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v24 + 8) : 0;
        uint64_t v72 = v24;
        uint64_t v73 = v25;
        unsigned int v27 = (void *)v3[1];
        uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
        v71[0] = v27;
        v71[1] = v28;
        uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v72);
        if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v71)) {
          goto LABEL_84;
        }
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v72, (uint64_t)&v78);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v71, (uint64_t)&v67);
        uint64_t v11 = 0;
        int v30 = v70;
        if (!BYTE8(v79) || !v70) {
          goto LABEL_163;
        }
        LOWORD(v64) = v78;
        if ((_BYTE)v78) {
          uint64_t v65 = *((void *)&v78 + 1);
        }
        else {
          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v78 + 1) + 16))(&v65);
        }
        uint64_t v66 = v79;
        LOWORD(v61) = v67;
        if ((_BYTE)v67) {
          uint64_t v62 = v68;
        }
        else {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v68 + 16))(&v62);
        }
        uint64_t v63 = v69;
        *(void *)&long long v80 = v81;
        *((void *)&v80 + 1) = 0x400000000;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v80, NumElements);
        uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v72, v73);
        if (!v32)
        {
LABEL_145:
          uint64_t v43 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v43, (llvm::APInt *)v80, DWORD2(v80));
          goto LABEL_147;
        }
        uint64_t v33 = v32;
        uint64_t v34 = v66;
        while (1)
        {
          uint64_t v35 = BYTE1(v64) ? 0 : v34;
          if ((_BYTE)v64)
          {
            uint64_t v36 = (const llvm::APInt *)(v65 + 16 * v35);
            unsigned int v57 = *((_DWORD *)v36 + 2);
            if (v57 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v56, v36);
            }
            uint64_t v56 = *(void *)v36;
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v65 + 24))(&v56);
          }
          uint64_t v37 = BYTE1(v61) ? 0 : v63;
          if ((_BYTE)v61)
          {
            uint64_t v38 = (const llvm::APInt *)(v62 + 16 * v37);
            unsigned int v55 = *((_DWORD *)v38 + 2);
            if (v55 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v54, v38);
            }
            uint64_t v54 = *(void *)v38;
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v62 + 24))(&v54);
          }
          unsigned int v75 = v57;
          if (v57 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v74, (const llvm::APInt *)&v56);
          }
          uint64_t v74 = v56;
          if (v53) {
            break;
          }
          unsigned int v42 = v55;
          if (v55 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v54) == v42) {
              break;
            }
          }
          else if (!v54)
          {
            break;
          }
          llvm::APInt::sdiv_ov((llvm::APInt *)&v74, (const llvm::APInt *)&v54, &v53, (uint64_t)&v76);
          unsigned int v59 = v77;
          uint64_t v58 = v76;
          unsigned int v77 = 0;
          char v60 = 1;
          if (v75 >= 0x41 && v74) {
            MEMORY[0x21667D390](v74, 0x1000C8000313F17);
          }
LABEL_124:
          if (v55 >= 0x41 && v54) {
            MEMORY[0x21667D390](v54, 0x1000C8000313F17);
          }
          if (v57 >= 0x41 && v56) {
            MEMORY[0x21667D390](v56, 0x1000C8000313F17);
          }
          if (!v60)
          {
            uint64_t v11 = 0;
LABEL_147:
            unsigned int v44 = (char *)v80;
            if (DWORD2(v80))
            {
              uint64_t v45 = 16 * DWORD2(v80);
              do
              {
                if (*(_DWORD *)&v44[v45 - 8] >= 0x41u)
                {
                  uint64_t v46 = *(void *)&v44[v45 - 16];
                  if (v46) {
                    MEMORY[0x21667D390](v46, 0x1000C8000313F17);
                  }
                }
                v45 -= 16;
              }
              while (v45);
              unsigned int v44 = (char *)v80;
            }
            if (v44 != (char *)v81) {
              free(v44);
            }
            if (!(_BYTE)v61)
            {
              uint64_t v47 = v62;
              uint64_t v62 = 0;
              if (v47) {
                (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
              }
            }
            if (!(_BYTE)v64)
            {
              uint64_t v48 = v65;
              uint64_t v65 = 0;
              if (v48) {
                (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
              }
            }
            int v30 = v70;
LABEL_163:
            if (v30)
            {
              if (!(_BYTE)v67)
              {
                uint64_t v49 = v68;
                uint64_t v68 = 0;
                if (v49) {
                  (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
                }
              }
            }
            if (BYTE8(v79))
            {
              if (!(_BYTE)v78)
              {
                uint64_t v50 = *((void *)&v78 + 1);
                *((void *)&v78 + 1) = 0;
                if (v50) {
                  (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
                }
              }
            }
            goto LABEL_85;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v80, (unint64_t)&v58, 1);
          uint64_t v40 = (llvm::APInt *)(v80 + 16 * DWORD2(v80));
          unsigned int v41 = *((_DWORD *)Address + 2);
          *((_DWORD *)v40 + 2) = v41;
          if (v41 > 0x40) {
            llvm::APInt::initSlowCase(v40, (const llvm::APInt *)Address);
          }
          *(void *)uint64_t v40 = *(void *)Address;
          ++DWORD2(v80);
          if (v60 && v59 >= 0x41 && v58) {
            MEMORY[0x21667D390](v58, 0x1000C8000313F17);
          }
          uint64_t v34 = ++v66;
          ++v63;
          if (!--v33) {
            goto LABEL_145;
          }
        }
        BOOL v53 = 1;
        unsigned int v59 = v75;
        uint64_t v58 = v74;
        char v60 = 1;
        goto LABEL_124;
      }
    }
  }
LABEL_85:
  if (v53) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

BOOL mlir::arith::DivSIOp::getSpeculatability(mlir::arith::DivSIOp *this)
{
  v19[1] = *MEMORY[0x263EF8340];
  unsigned int v16 = 1;
  uint64_t v1 = *(void *)(*(void *)(*(void *)this + 72) + 56);
  uint64_t v14 = &v15;
  uint64_t v15 = 0;
  uint64_t v17 = v1;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
  if (!DefiningOp) {
    goto LABEL_27;
  }
  uint64_t v3 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_27;
  }
  v18[0] = v19;
  v18[1] = (void *)0x100000000;
  mlir::Operation::fold(v3, 0, 0, (uint64_t)v18);
  unint64_t v4 = *(void *)v18[0] & 0xFFFFFFFFFFFFFFF8;
  if (v18[0] != v19) {
    free(v18[0]);
  }
  if (!v4
    || ((int v5 = *(void **)(*(void *)(*(void *)(v3 - 8) & 0xFFFFFFFFFFFFFFF8) + 136),
         v5 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      ? (BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      : (BOOL v6 = 1),
        !v6 ? (BOOL v7 = v5 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v8 = 1),
        !v8))
  {
LABEL_27:
    unsigned int v10 = v16;
LABEL_28:
    BOOL v12 = 0;
    if (v10 < 0x41) {
      return v12;
    }
    goto LABEL_29;
  }
  int v9 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v14, v4);
  unsigned int v10 = v16;
  if (!v9) {
    goto LABEL_28;
  }
  if (!v16) {
    return 0;
  }
  if (v16 > 0x40)
  {
    BOOL v12 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v15) != v10
       && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v15) != v10;
LABEL_29:
    if (v15) {
      MEMORY[0x21667D390](v15, 0x1000C8000313F17);
    }
    return v12;
  }
  return v15 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v16 && v15 != 0;
}

unint64_t mlir::arith::CeilDivUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v74) = 1;
    *(void *)&long long v74 = 0;
    *(void *)&long long v72 = &v74;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v72, v4);
    int v7 = DWORD2(v74);
    if (v6)
    {
      if (DWORD2(v74) < 0x41)
      {
        BOOL v8 = (void)v74 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) > 0x40)
      {
        if ((void)v74) {
          MEMORY[0x21667D390](v74, 0x1000C8000313F17);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v74 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v74) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v74) {
      MEMORY[0x21667D390](v74, 0x1000C8000313F17);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  char v51 = 0;
  uint64_t v50 = (BOOL *)&v51;
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v11 = v3[1];
  if (v11 && *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v74 = canMapOperands;
      *((void *)&v74 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v74 = 0uLL;
    }
  }
  else
  {
    long long v74 = 0uLL;
  }
  uint64_t v11 = v3[1];
  if (!v11)
  {
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
  {
    uint64_t v11 = 0;
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
  uint64_t v11 = 0;
  if (!canMapOperands || !v14 || canMapOperands != v14) {
    goto LABEL_86;
  }
  uint64_t v15 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v16 = v3[1];
  if (!v16) {
    goto LABEL_85;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v11 = v3[1];
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v74 = v19;
    if (v19
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)
      && ((uint64_t v20 = v3[1], !mlir::DenseElementsAttr::classof(v20)) ? (v21 = 0) : (v21 = v20),
          (*(void *)&long long v74 = v21) != 0
       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)))
    {
      uint64_t v22 = v3[1];
      uint64_t v59 = *v3;
      uint64_t v56 = v22;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
      {
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v59, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*(&v72, (llvm::APInt *)&v65);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v56, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*(&v72, (llvm::APInt *)&v62);
        mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&v65, (llvm::APInt *)&v62);
        if (v63 >= 0x41 && v62) {
          MEMORY[0x21667D390](v62, 0x1000C8000313F17);
        }
        if (v66 >= 0x41 && v65) {
          MEMORY[0x21667D390](v65, 0x1000C8000313F17);
        }
        if (LOBYTE(v75[0]))
        {
          uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v24, (llvm::APInt *)&v74, 1);
          if (LOBYTE(v75[0])) {
            goto LABEL_52;
          }
          goto LABEL_86;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v25 = (void *)*v3;
      uint64_t v26 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
      unsigned __int8 v70 = v25;
      uint64_t v71 = v26;
      unsigned int v27 = (void *)v3[1];
      uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v69[0] = v27;
      v69[1] = v28;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v69))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v70, (uint64_t)&v72);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v69, (uint64_t)&v65);
        uint64_t v11 = 0;
        int v30 = v68;
        if (BYTE8(v73) && v68)
        {
          LOWORD(v62) = v72;
          if ((_BYTE)v72) {
            uint64_t v63 = *((void *)&v72 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v72 + 1) + 16))(&v63);
          }
          uint64_t v64 = v73;
          LOWORD(v59) = v65;
          if ((_BYTE)v65) {
            uint64_t v60 = v66;
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 16))(&v60);
          }
          uint64_t v61 = v67;
          *(void *)&long long v74 = v75;
          *((void *)&v74 + 1) = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v74, NumElements);
          uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = v64;
            while (1)
            {
              uint64_t v35 = BYTE1(v62) ? 0 : v34;
              if ((_BYTE)v62)
              {
                uint64_t v36 = (const llvm::APInt *)(v63 + 16 * v35);
                unsigned int v55 = *((_DWORD *)v36 + 2);
                if (v55 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v54, v36);
                }
                uint64_t v54 = *(void *)v36;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 24))(&v54);
              }
              uint64_t v37 = BYTE1(v59) ? 0 : v61;
              if ((_BYTE)v59)
              {
                uint64_t v38 = (const llvm::APInt *)(v60 + 16 * v37);
                unsigned int v53 = *((_DWORD *)v38 + 2);
                if (v53 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v52, v38);
                }
                uint64_t v52 = *(void *)v38;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v60 + 24))(&v52);
              }
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v56, &v50, (llvm::APInt *)&v54, (llvm::APInt *)&v52);
              if (v53 >= 0x41 && v52) {
                MEMORY[0x21667D390](v52, 0x1000C8000313F17);
              }
              if (v55 >= 0x41 && v54) {
                MEMORY[0x21667D390](v54, 0x1000C8000313F17);
              }
              if (!v58) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v74, (unint64_t)&v56, 1);
              uint64_t v40 = (llvm::APInt *)(v74 + 16 * DWORD2(v74));
              unsigned int v41 = *((_DWORD *)Address + 2);
              *((_DWORD *)v40 + 2) = v41;
              if (v41 > 0x40) {
                llvm::APInt::initSlowCase(v40, (const llvm::APInt *)Address);
              }
              *(void *)uint64_t v40 = *(void *)Address;
              ++DWORD2(v74);
              if (v58 && v57 >= 0x41 && v56) {
                MEMORY[0x21667D390](v56, 0x1000C8000313F17);
              }
              uint64_t v34 = ++v64;
              ++v61;
              if (!--v33) {
                goto LABEL_130;
              }
            }
            uint64_t v11 = 0;
          }
          else
          {
LABEL_130:
            uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v42, (llvm::APInt *)v74, DWORD2(v74));
          }
          uint64_t v43 = (char *)v74;
          if (DWORD2(v74))
          {
            uint64_t v44 = 16 * DWORD2(v74);
            do
            {
              if (*(_DWORD *)&v43[v44 - 8] >= 0x41u)
              {
                uint64_t v45 = *(void *)&v43[v44 - 16];
                if (v45) {
                  MEMORY[0x21667D390](v45, 0x1000C8000313F17);
                }
              }
              v44 -= 16;
            }
            while (v44);
            uint64_t v43 = (char *)v74;
          }
          if (v43 != (char *)v75) {
            free(v43);
          }
          if (!(_BYTE)v59)
          {
            uint64_t v46 = v60;
            uint64_t v60 = 0;
            if (v46) {
              (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
            }
          }
          if (!(_BYTE)v62)
          {
            uint64_t v47 = v63;
            uint64_t v63 = 0;
            if (v47) {
              (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
            }
          }
          int v30 = v68;
        }
        if (v30)
        {
          if (!(_BYTE)v65)
          {
            uint64_t v48 = v66;
            uint64_t v66 = 0;
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
          }
        }
        if (BYTE8(v73))
        {
          if (!(_BYTE)v72)
          {
            uint64_t v49 = *((void *)&v72 + 1);
            *((void *)&v72 + 1) = 0;
            if (v49) {
              (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
            }
          }
        }
        goto LABEL_86;
      }
    }
LABEL_85:
    uint64_t v11 = 0;
    goto LABEL_86;
  }
  uint64_t v62 = *v3;
  uint64_t v59 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59)) {
    goto LABEL_85;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v72);
  mlir::IntegerAttr::getValue((uint64_t)&v59, (llvm::APInt *)&v65);
  mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&v72, (llvm::APInt *)&v65);
  if (v66 >= 0x41 && v65) {
    MEMORY[0x21667D390](v65, 0x1000C8000313F17);
  }
  if (DWORD2(v72) >= 0x41 && (void)v72) {
    MEMORY[0x21667D390](v72, 0x1000C8000313F17);
  }
  if (!LOBYTE(v75[0])) {
    goto LABEL_85;
  }
  uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v74);
  if (LOBYTE(v75[0]))
  {
LABEL_52:
    if (DWORD2(v74) >= 0x41 && (void)v74) {
      MEMORY[0x21667D390](v74, 0x1000C8000313F17);
    }
  }
LABEL_86:
  if (v51) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

unint64_t mlir::arith::CeilDivSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v74) = 1;
    *(void *)&long long v74 = 0;
    *(void *)&long long v72 = &v74;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v72, v4);
    int v7 = DWORD2(v74);
    if (v6)
    {
      if (DWORD2(v74) < 0x41)
      {
        BOOL v8 = (void)v74 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) > 0x40)
      {
        if ((void)v74) {
          MEMORY[0x21667D390](v74, 0x1000C8000313F17);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v74 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v74) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v74) {
      MEMORY[0x21667D390](v74, 0x1000C8000313F17);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  char v51 = 0;
  uint64_t v50 = (BOOL *)&v51;
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v11 = v3[1];
  if (v11 && *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v74 = canMapOperands;
      *((void *)&v74 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v74 = 0uLL;
    }
  }
  else
  {
    long long v74 = 0uLL;
  }
  uint64_t v11 = v3[1];
  if (!v11)
  {
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
  {
    uint64_t v11 = 0;
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
  uint64_t v11 = 0;
  if (!canMapOperands || !v14 || canMapOperands != v14) {
    goto LABEL_86;
  }
  uint64_t v15 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v16 = v3[1];
  if (!v16) {
    goto LABEL_85;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v11 = v3[1];
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v74 = v19;
    if (v19
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)
      && ((uint64_t v20 = v3[1], !mlir::DenseElementsAttr::classof(v20)) ? (v21 = 0) : (v21 = v20),
          (*(void *)&long long v74 = v21) != 0
       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)))
    {
      uint64_t v22 = v3[1];
      uint64_t v59 = *v3;
      uint64_t v56 = v22;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
      {
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v59, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*(&v72, (llvm::APInt *)&v65);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v56, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*(&v72, (llvm::APInt *)&v62);
        mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t *)&v74, &v50, (llvm::APInt *)&v65, (llvm::APInt *)&v62);
        if (v63 >= 0x41 && v62) {
          MEMORY[0x21667D390](v62, 0x1000C8000313F17);
        }
        if (v66 >= 0x41 && v65) {
          MEMORY[0x21667D390](v65, 0x1000C8000313F17);
        }
        if (LOBYTE(v75[0]))
        {
          uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v24, (llvm::APInt *)&v74, 1);
          if (LOBYTE(v75[0])) {
            goto LABEL_52;
          }
          goto LABEL_86;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v25 = (void *)*v3;
      uint64_t v26 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
      unsigned __int8 v70 = v25;
      uint64_t v71 = v26;
      unsigned int v27 = (void *)v3[1];
      uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v69[0] = v27;
      v69[1] = v28;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v69))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v70, (uint64_t)&v72);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v69, (uint64_t)&v65);
        uint64_t v11 = 0;
        int v30 = v68;
        if (BYTE8(v73) && v68)
        {
          LOWORD(v62) = v72;
          if ((_BYTE)v72) {
            uint64_t v63 = *((void *)&v72 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v72 + 1) + 16))(&v63);
          }
          uint64_t v64 = v73;
          LOWORD(v59) = v65;
          if ((_BYTE)v65) {
            uint64_t v60 = v66;
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 16))(&v60);
          }
          uint64_t v61 = v67;
          *(void *)&long long v74 = v75;
          *((void *)&v74 + 1) = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v74, NumElements);
          uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = v64;
            while (1)
            {
              uint64_t v35 = BYTE1(v62) ? 0 : v34;
              if ((_BYTE)v62)
              {
                uint64_t v36 = (const llvm::APInt *)(v63 + 16 * v35);
                unsigned int v55 = *((_DWORD *)v36 + 2);
                if (v55 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v54, v36);
                }
                uint64_t v54 = *(void *)v36;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 24))(&v54);
              }
              uint64_t v37 = BYTE1(v59) ? 0 : v61;
              if ((_BYTE)v59)
              {
                uint64_t v38 = (const llvm::APInt *)(v60 + 16 * v37);
                unsigned int v53 = *((_DWORD *)v38 + 2);
                if (v53 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v52, v38);
                }
                uint64_t v52 = *(void *)v38;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v60 + 24))(&v52);
              }
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(&v56, &v50, (llvm::APInt *)&v54, (llvm::APInt *)&v52);
              if (v53 >= 0x41 && v52) {
                MEMORY[0x21667D390](v52, 0x1000C8000313F17);
              }
              if (v55 >= 0x41 && v54) {
                MEMORY[0x21667D390](v54, 0x1000C8000313F17);
              }
              if (!v58) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v74, (unint64_t)&v56, 1);
              uint64_t v40 = (llvm::APInt *)(v74 + 16 * DWORD2(v74));
              unsigned int v41 = *((_DWORD *)Address + 2);
              *((_DWORD *)v40 + 2) = v41;
              if (v41 > 0x40) {
                llvm::APInt::initSlowCase(v40, (const llvm::APInt *)Address);
              }
              *(void *)uint64_t v40 = *(void *)Address;
              ++DWORD2(v74);
              if (v58 && v57 >= 0x41 && v56) {
                MEMORY[0x21667D390](v56, 0x1000C8000313F17);
              }
              uint64_t v34 = ++v64;
              ++v61;
              if (!--v33) {
                goto LABEL_130;
              }
            }
            uint64_t v11 = 0;
          }
          else
          {
LABEL_130:
            uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v42, (llvm::APInt *)v74, DWORD2(v74));
          }
          uint64_t v43 = (char *)v74;
          if (DWORD2(v74))
          {
            uint64_t v44 = 16 * DWORD2(v74);
            do
            {
              if (*(_DWORD *)&v43[v44 - 8] >= 0x41u)
              {
                uint64_t v45 = *(void *)&v43[v44 - 16];
                if (v45) {
                  MEMORY[0x21667D390](v45, 0x1000C8000313F17);
                }
              }
              v44 -= 16;
            }
            while (v44);
            uint64_t v43 = (char *)v74;
          }
          if (v43 != (char *)v75) {
            free(v43);
          }
          if (!(_BYTE)v59)
          {
            uint64_t v46 = v60;
            uint64_t v60 = 0;
            if (v46) {
              (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
            }
          }
          if (!(_BYTE)v62)
          {
            uint64_t v47 = v63;
            uint64_t v63 = 0;
            if (v47) {
              (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
            }
          }
          int v30 = v68;
        }
        if (v30)
        {
          if (!(_BYTE)v65)
          {
            uint64_t v48 = v66;
            uint64_t v66 = 0;
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
          }
        }
        if (BYTE8(v73))
        {
          if (!(_BYTE)v72)
          {
            uint64_t v49 = *((void *)&v72 + 1);
            *((void *)&v72 + 1) = 0;
            if (v49) {
              (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
            }
          }
        }
        goto LABEL_86;
      }
    }
LABEL_85:
    uint64_t v11 = 0;
    goto LABEL_86;
  }
  uint64_t v62 = *v3;
  uint64_t v59 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59)) {
    goto LABEL_85;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v72);
  mlir::IntegerAttr::getValue((uint64_t)&v59, (llvm::APInt *)&v65);
  mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t *)&v74, &v50, (llvm::APInt *)&v72, (llvm::APInt *)&v65);
  if (v66 >= 0x41 && v65) {
    MEMORY[0x21667D390](v65, 0x1000C8000313F17);
  }
  if (DWORD2(v72) >= 0x41 && (void)v72) {
    MEMORY[0x21667D390](v72, 0x1000C8000313F17);
  }
  if (!LOBYTE(v75[0])) {
    goto LABEL_85;
  }
  uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v74);
  if (LOBYTE(v75[0]))
  {
LABEL_52:
    if (DWORD2(v74) >= 0x41 && (void)v74) {
      MEMORY[0x21667D390](v74, 0x1000C8000313F17);
    }
  }
LABEL_86:
  if (v51) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

unint64_t mlir::arith::FloorDivSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (v4)
  {
    DWORD2(v74) = 1;
    *(void *)&long long v74 = 0;
    *(void *)&long long v72 = &v74;
    int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v72, v4);
    int v7 = DWORD2(v74);
    if (v6)
    {
      if (DWORD2(v74) < 0x41)
      {
        BOOL v8 = (void)v74 == 1;
        goto LABEL_8;
      }
      if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v74) > 0x40)
      {
        if ((void)v74) {
          MEMORY[0x21667D390](v74, 0x1000C8000313F17);
        }
LABEL_14:
        uint64_t v3 = *(uint64_t **)(a2 + 40);
        goto LABEL_15;
      }
      BOOL v8 = *(void *)v74 == 1;
    }
    else
    {
      BOOL v8 = 0;
      if (DWORD2(v74) < 0x41) {
        goto LABEL_8;
      }
    }
    if ((void)v74) {
      MEMORY[0x21667D390](v74, 0x1000C8000313F17);
    }
LABEL_8:
    if (v8) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_14;
  }
LABEL_15:
  char v51 = 0;
  uint64_t v50 = (BOOL *)&v51;
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v11 = v3[1];
  if (v11 && *(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v74 = canMapOperands;
      *((void *)&v74 + 1) = v12;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v74 = 0uLL;
    }
  }
  else
  {
    long long v74 = 0uLL;
  }
  uint64_t v11 = v3[1];
  if (!v11)
  {
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8))
  {
    uint64_t v11 = 0;
    long long v74 = 0uLL;
    goto LABEL_86;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v11 + 8);
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v74);
  uint64_t v11 = 0;
  if (!canMapOperands || !v14 || canMapOperands != v14) {
    goto LABEL_86;
  }
  uint64_t v15 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v11 = *v3;
    goto LABEL_86;
  }
  uint64_t v16 = v3[1];
  if (!v16) {
    goto LABEL_85;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v11 = v3[1];
  }
  else {
    uint64_t v11 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_86;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v74 = v19;
    if (v19
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)
      && ((uint64_t v20 = v3[1], !mlir::DenseElementsAttr::classof(v20)) ? (v21 = 0) : (v21 = v20),
          (*(void *)&long long v74 = v21) != 0
       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v74)))
    {
      uint64_t v22 = v3[1];
      uint64_t v59 = *v3;
      uint64_t v56 = v22;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v59);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56))
      {
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v59, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*(&v72, (llvm::APInt *)&v65);
        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v56, (uint64_t)&v74);
        long long v72 = v74;
        long long v73 = v75[0];
        mlir::DenseElementsAttr::IntElementIterator::operator*(&v72, (llvm::APInt *)&v62);
        mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&v65, (llvm::APInt *)&v62);
        if (v63 >= 0x41 && v62) {
          MEMORY[0x21667D390](v62, 0x1000C8000313F17);
        }
        if (v66 >= 0x41 && v65) {
          MEMORY[0x21667D390](v65, 0x1000C8000313F17);
        }
        if (LOBYTE(v75[0]))
        {
          uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v24, (llvm::APInt *)&v74, 1);
          if (LOBYTE(v75[0])) {
            goto LABEL_52;
          }
          goto LABEL_86;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v25 = (void *)*v3;
      uint64_t v26 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
      unsigned __int8 v70 = v25;
      uint64_t v71 = v26;
      unsigned int v27 = (void *)v3[1];
      uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
      v69[0] = v27;
      v69[1] = v28;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v70);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v69))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v70, (uint64_t)&v72);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v69, (uint64_t)&v65);
        uint64_t v11 = 0;
        int v30 = v68;
        if (BYTE8(v73) && v68)
        {
          LOWORD(v62) = v72;
          if ((_BYTE)v72) {
            uint64_t v63 = *((void *)&v72 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v72 + 1) + 16))(&v63);
          }
          uint64_t v64 = v73;
          LOWORD(v59) = v65;
          if ((_BYTE)v65) {
            uint64_t v60 = v66;
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 16))(&v60);
          }
          uint64_t v61 = v67;
          *(void *)&long long v74 = v75;
          *((void *)&v74 + 1) = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v74, NumElements);
          uint64_t v32 = mlir::ElementsAttr::getNumElements((uint64_t)v70, v71);
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = v64;
            while (1)
            {
              uint64_t v35 = BYTE1(v62) ? 0 : v34;
              if ((_BYTE)v62)
              {
                uint64_t v36 = (const llvm::APInt *)(v63 + 16 * v35);
                unsigned int v55 = *((_DWORD *)v36 + 2);
                if (v55 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v54, v36);
                }
                uint64_t v54 = *(void *)v36;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 24))(&v54);
              }
              uint64_t v37 = BYTE1(v59) ? 0 : v61;
              if ((_BYTE)v59)
              {
                uint64_t v38 = (const llvm::APInt *)(v60 + 16 * v37);
                unsigned int v53 = *((_DWORD *)v38 + 2);
                if (v53 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v52, v38);
                }
                uint64_t v52 = *(void *)v38;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v60 + 24))(&v52);
              }
              mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v56, &v50, (llvm::APInt *)&v54, (llvm::APInt *)&v52);
              if (v53 >= 0x41 && v52) {
                MEMORY[0x21667D390](v52, 0x1000C8000313F17);
              }
              if (v55 >= 0x41 && v54) {
                MEMORY[0x21667D390](v54, 0x1000C8000313F17);
              }
              if (!v58) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v74, (unint64_t)&v56, 1);
              uint64_t v40 = (llvm::APInt *)(v74 + 16 * DWORD2(v74));
              unsigned int v41 = *((_DWORD *)Address + 2);
              *((_DWORD *)v40 + 2) = v41;
              if (v41 > 0x40) {
                llvm::APInt::initSlowCase(v40, (const llvm::APInt *)Address);
              }
              *(void *)uint64_t v40 = *(void *)Address;
              ++DWORD2(v74);
              if (v58 && v57 >= 0x41 && v56) {
                MEMORY[0x21667D390](v56, 0x1000C8000313F17);
              }
              uint64_t v34 = ++v64;
              ++v61;
              if (!--v33) {
                goto LABEL_130;
              }
            }
            uint64_t v11 = 0;
          }
          else
          {
LABEL_130:
            uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v11 = mlir::DenseElementsAttr::get(canMapOperands, v42, (llvm::APInt *)v74, DWORD2(v74));
          }
          uint64_t v43 = (char *)v74;
          if (DWORD2(v74))
          {
            uint64_t v44 = 16 * DWORD2(v74);
            do
            {
              if (*(_DWORD *)&v43[v44 - 8] >= 0x41u)
              {
                uint64_t v45 = *(void *)&v43[v44 - 16];
                if (v45) {
                  MEMORY[0x21667D390](v45, 0x1000C8000313F17);
                }
              }
              v44 -= 16;
            }
            while (v44);
            uint64_t v43 = (char *)v74;
          }
          if (v43 != (char *)v75) {
            free(v43);
          }
          if (!(_BYTE)v59)
          {
            uint64_t v46 = v60;
            uint64_t v60 = 0;
            if (v46) {
              (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
            }
          }
          if (!(_BYTE)v62)
          {
            uint64_t v47 = v63;
            uint64_t v63 = 0;
            if (v47) {
              (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
            }
          }
          int v30 = v68;
        }
        if (v30)
        {
          if (!(_BYTE)v65)
          {
            uint64_t v48 = v66;
            uint64_t v66 = 0;
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
          }
        }
        if (BYTE8(v73))
        {
          if (!(_BYTE)v72)
          {
            uint64_t v49 = *((void *)&v72 + 1);
            *((void *)&v72 + 1) = 0;
            if (v49) {
              (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
            }
          }
        }
        goto LABEL_86;
      }
    }
LABEL_85:
    uint64_t v11 = 0;
    goto LABEL_86;
  }
  uint64_t v62 = *v3;
  uint64_t v59 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59)) {
    goto LABEL_85;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v72);
  mlir::IntegerAttr::getValue((uint64_t)&v59, (llvm::APInt *)&v65);
  mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()((uint64_t)&v74, &v50, (llvm::APInt *)&v72, (llvm::APInt *)&v65);
  if (v66 >= 0x41 && v65) {
    MEMORY[0x21667D390](v65, 0x1000C8000313F17);
  }
  if (DWORD2(v72) >= 0x41 && (void)v72) {
    MEMORY[0x21667D390](v72, 0x1000C8000313F17);
  }
  if (!LOBYTE(v75[0])) {
    goto LABEL_85;
  }
  uint64_t v11 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v74);
  if (LOBYTE(v75[0]))
  {
LABEL_52:
    if (DWORD2(v74) >= 0x41 && (void)v74) {
      MEMORY[0x21667D390](v74, 0x1000C8000313F17);
    }
  }
LABEL_86:
  if (v51) {
    return 0;
  }
  else {
    return v11 & 0xFFFFFFFFFFFFFFFBLL;
  }
}

unint64_t mlir::arith::RemUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_17;
  }
  DWORD2(v89) = 1;
  *(void *)&long long v89 = 0;
  *(void *)&long long v87 = &v89;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v87, v4);
  unsigned int v7 = DWORD2(v89);
  if (!v6)
  {
    BOOL v9 = 0;
    if (DWORD2(v89) < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (DWORD2(v89) < 0x41)
  {
    BOOL v8 = &v89;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v89) <= 0x40)
  {
    BOOL v8 = (long long *)v89;
LABEL_9:
    BOOL v9 = *(void *)v8 == 1;
    if (v7 < 0x41) {
      goto LABEL_12;
    }
LABEL_10:
    if ((void)v89) {
      MEMORY[0x21667D390](v89, 0x1000C8000313F17);
    }
LABEL_12:
    if (v9)
    {
      *(void *)&long long v89 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
      uint64_t ZeroAttr = (uint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v89, (mlir::MLIRContext *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_16;
  }
  if ((void)v89) {
    MEMORY[0x21667D390](v89, 0x1000C8000313F17);
  }
LABEL_16:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t ZeroAttr = *v3;
    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t ZeroAttr = v3[1];
  if (!ZeroAttr
    || *(_UNKNOWN **)(*(void *)ZeroAttr + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    if (canMapOperands)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
      {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
        *(void *)&long long v89 = canMapOperands;
        *((void *)&v89 + 1) = v12;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v89);
      }
      else
      {
        uint64_t canMapOperands = 0;
        long long v89 = 0uLL;
      }
    }
    else
    {
      long long v89 = 0uLL;
    }
    uint64_t ZeroAttr = v3[1];
    if (!ZeroAttr)
    {
      long long v89 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8))
    {
      uint64_t ZeroAttr = 0;
      long long v89 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8);
    *(void *)&long long v89 = ZeroAttr;
    *((void *)&v89 + 1) = v13;
    uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v89);
    uint64_t ZeroAttr = 0;
    if (canMapOperands)
    {
      if (v14 && canMapOperands == v14)
      {
        uint64_t v15 = *v3;
        if (*v3
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t ZeroAttr = *v3;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v16 = v3[1];
        if (!v16)
        {
LABEL_92:
          uint64_t ZeroAttr = 0;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v17 = *(void **)(*(void *)v16 + 136);
        uint64_t ZeroAttr = v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id ? v3[1] : 0;
        if (v15 && v17 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          if (v17 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v65 = *v3;
            uint64_t v62 = v16;
            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62))
            {
              mlir::IntegerAttr::getValue((uint64_t)&v65, (llvm::APInt *)&v81);
              mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v79);
              LODWORD(v69) = v82;
              if (v82 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const llvm::APInt *)&v81);
              }
              unsigned __int8 v68 = v81;
              unsigned int v26 = v80;
              if (v80 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v79) != v26)
                {
LABEL_69:
                  llvm::APInt::urem(&v68, (const llvm::APInt *)&v79, (uint64_t)&v87);
                  int v27 = 0;
                  DWORD2(v89) = DWORD2(v87);
                  *(void *)&long long v89 = v87;
                  DWORD2(v87) = 0;
                  LOBYTE(v90[0]) = 1;
                  if (v69 >= 0x41)
                  {
                    if (v68) {
                      MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                    }
                    int v27 = 0;
                  }
LABEL_75:
                  if (v80 >= 0x41 && v79) {
                    MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                  }
                  if (v82 >= 0x41 && v81) {
                    MEMORY[0x21667D390](v81, 0x1000C8000313F17);
                  }
                  uint64_t ZeroAttr = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v89);
                  if (LOBYTE(v90[0]))
                  {
LABEL_82:
                    if (DWORD2(v89) >= 0x41 && (void)v89) {
                      MEMORY[0x21667D390](v89, 0x1000C8000313F17);
                    }
                  }
LABEL_91:
                  if (!v27) {
                    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
                  }
                  goto LABEL_92;
                }
              }
              else if (v79)
              {
                goto LABEL_69;
              }
              DWORD2(v89) = v69;
              *(void *)&long long v89 = v68;
              int v27 = 1;
              LOBYTE(v90[0]) = 1;
              goto LABEL_75;
            }
LABEL_90:
            int v27 = 0;
            uint64_t ZeroAttr = 0;
            goto LABEL_91;
          }
          if (mlir::DenseElementsAttr::classof(*v3)) {
            uint64_t v19 = v15;
          }
          else {
            uint64_t v19 = 0;
          }
          *(void *)&long long v89 = v19;
          if (v19 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v89))
          {
            uint64_t v20 = v3[1];
            uint64_t v21 = mlir::DenseElementsAttr::classof(v20) ? v20 : 0;
            *(void *)&long long v89 = v21;
            if (v21)
            {
              if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v89))
              {
                uint64_t v22 = v3[1];
                uint64_t v65 = *v3;
                uint64_t v62 = v22;
                uint64_t v23 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
                if (v23 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62)) {
                  goto LABEL_90;
                }
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v65, (uint64_t)&v89);
                long long v87 = v89;
                long long v88 = v90[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v87, (llvm::APInt *)&v77);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v62, (uint64_t)&v89);
                long long v87 = v89;
                long long v88 = v90[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v87, (llvm::APInt *)&v75);
                LODWORD(v69) = v78;
                if (v78 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const llvm::APInt *)&v77);
                }
                unsigned __int8 v68 = v77;
                unsigned int v53 = v76;
                if (v76 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v75) != v53)
                  {
LABEL_178:
                    llvm::APInt::urem(&v68, (const llvm::APInt *)&v75, (uint64_t)&v87);
                    int v27 = 0;
                    DWORD2(v89) = DWORD2(v87);
                    *(void *)&long long v89 = v87;
                    DWORD2(v87) = 0;
                    LOBYTE(v90[0]) = 1;
                    if (v69 >= 0x41)
                    {
                      if (v68) {
                        MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                      }
                      int v27 = 0;
                    }
LABEL_184:
                    if (v76 >= 0x41 && v75) {
                      MEMORY[0x21667D390](v75, 0x1000C8000313F17);
                    }
                    if (v78 >= 0x41 && v77) {
                      MEMORY[0x21667D390](v77, 0x1000C8000313F17);
                    }
                    uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                    uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v54, (llvm::APInt *)&v89, 1);
                    if (LOBYTE(v90[0])) {
                      goto LABEL_82;
                    }
                    goto LABEL_91;
                  }
                }
                else if (v75)
                {
                  goto LABEL_178;
                }
                DWORD2(v89) = v69;
                *(void *)&long long v89 = v68;
                int v27 = 1;
                LOBYTE(v90[0]) = 1;
                goto LABEL_184;
              }
            }
          }
          if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
            || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
          {
            goto LABEL_92;
          }
          uint64_t v24 = (void *)*v3;
          if (*v3) {
            uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v24 + 8);
          }
          else {
            uint64_t v25 = 0;
          }
          long long v73 = v24;
          uint64_t v74 = v25;
          uint64_t v28 = (void *)v3[1];
          if (v28) {
            uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8);
          }
          else {
            uint64_t v29 = 0;
          }
          v72[0] = v28;
          v72[1] = v29;
          uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v73);
          if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v72)) {
            goto LABEL_90;
          }
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v73, (uint64_t)&v87);
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v72, (uint64_t)&v68);
          uint64_t ZeroAttr = 0;
          int v27 = 0;
          int v32 = v71;
          if (BYTE8(v88) && v71)
          {
            LOWORD(v65) = v87;
            if ((_BYTE)v87) {
              uint64_t v66 = *((void *)&v87 + 1);
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(**((void **)&v87 + 1) + 16))(&v66);
            }
            uint64_t v67 = v88;
            LOWORD(v62) = (_WORD)v68;
            if ((_BYTE)v68) {
              uint64_t v63 = v69;
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)v69 + 16))(&v63);
            }
            uint64_t v64 = v70;
            *(void *)&long long v89 = v90;
            *((void *)&v89 + 1) = 0x400000000;
            unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
            llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v89, NumElements);
            uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
            if (v34)
            {
              uint64_t v35 = v34;
              int v27 = 0;
              uint64_t v36 = v67;
              while (1)
              {
                uint64_t v37 = BYTE1(v65) ? 0 : v36;
                if ((_BYTE)v65)
                {
                  uint64_t v38 = (const llvm::APInt *)(v66 + 16 * v37);
                  unsigned int v58 = *((_DWORD *)v38 + 2);
                  if (v58 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v38);
                  }
                  unsigned int v57 = *(const void **)v38;
                }
                else
                {
                  (*(void (**)(const void **__return_ptr))(*(void *)v66 + 24))(&v57);
                }
                uint64_t v39 = BYTE1(v62) ? 0 : v64;
                if ((_BYTE)v62)
                {
                  uint64_t v40 = (const llvm::APInt *)(v63 + 16 * v39);
                  unsigned int v56 = *((_DWORD *)v40 + 2);
                  if (v56 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v55, v40);
                  }
                  uint64_t v55 = *(void *)v40;
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 24))(&v55);
                }
                unsigned int v84 = v58;
                if (v58 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v57);
                }
                uint64_t v83 = v57;
                if (v27) {
                  break;
                }
                unsigned int v44 = v56;
                if (v56 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v55) == v44) {
                    break;
                  }
                }
                else if (!v55)
                {
                  break;
                }
                llvm::APInt::urem(&v83, (const llvm::APInt *)&v55, (uint64_t)&v85);
                int v27 = 0;
                unsigned int v60 = v86;
                uint64_t v59 = v85;
                unsigned int v86 = 0;
                char v61 = 1;
                if (v84 >= 0x41)
                {
                  if (v83) {
                    MEMORY[0x21667D390](v83, 0x1000C8000313F17);
                  }
                  int v27 = 0;
                }
LABEL_126:
                if (v56 >= 0x41 && v55) {
                  MEMORY[0x21667D390](v55, 0x1000C8000313F17);
                }
                if (v58 >= 0x41 && v57) {
                  MEMORY[0x21667D390](v57, 0x1000C8000313F17);
                }
                if (!v61)
                {
                  uint64_t ZeroAttr = 0;
                  goto LABEL_151;
                }
                Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v89, (unint64_t)&v59, 1);
                uint64_t v42 = (llvm::APInt *)(v89 + 16 * DWORD2(v89));
                unsigned int v43 = *((_DWORD *)Address + 2);
                *((_DWORD *)v42 + 2) = v43;
                if (v43 > 0x40) {
                  llvm::APInt::initSlowCase(v42, (const llvm::APInt *)Address);
                }
                *(void *)uint64_t v42 = *(void *)Address;
                ++DWORD2(v89);
                if (v61 && v60 >= 0x41 && v59) {
                  MEMORY[0x21667D390](v59, 0x1000C8000313F17);
                }
                uint64_t v36 = ++v67;
                ++v64;
                if (!--v35) {
                  goto LABEL_149;
                }
              }
              unsigned int v60 = v84;
              uint64_t v59 = v83;
              int v27 = 1;
              char v61 = 1;
              goto LABEL_126;
            }
            int v27 = 0;
LABEL_149:
            uint64_t v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v45, (llvm::APInt *)v89, DWORD2(v89));
LABEL_151:
            uint64_t v46 = (char *)v89;
            if (DWORD2(v89))
            {
              uint64_t v47 = 16 * DWORD2(v89);
              do
              {
                if (*(_DWORD *)&v46[v47 - 8] >= 0x41u)
                {
                  uint64_t v48 = *(void *)&v46[v47 - 16];
                  if (v48) {
                    MEMORY[0x21667D390](v48, 0x1000C8000313F17);
                  }
                }
                v47 -= 16;
              }
              while (v47);
              uint64_t v46 = (char *)v89;
            }
            if (v46 != (char *)v90) {
              free(v46);
            }
            if (!(_BYTE)v62)
            {
              uint64_t v49 = v63;
              uint64_t v63 = 0;
              if (v49) {
                (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
              }
            }
            if (!(_BYTE)v65)
            {
              uint64_t v50 = v66;
              uint64_t v66 = 0;
              if (v50) {
                (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
              }
            }
            int v32 = v71;
          }
          if (v32)
          {
            if (!(_BYTE)v68)
            {
              uint64_t v51 = v69;
              uint64_t v69 = 0;
              if (v51) {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
            }
          }
          if (BYTE8(v88))
          {
            if (!(_BYTE)v87)
            {
              uint64_t v52 = *((void *)&v87 + 1);
              *((void *)&v87 + 1) = 0;
              if (v52) {
                (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
              }
            }
          }
          goto LABEL_91;
        }
      }
    }
  }
  return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::RemSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_17;
  }
  DWORD2(v89) = 1;
  *(void *)&long long v89 = 0;
  *(void *)&long long v87 = &v89;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v87, v4);
  unsigned int v7 = DWORD2(v89);
  if (!v6)
  {
    BOOL v9 = 0;
    if (DWORD2(v89) < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (DWORD2(v89) < 0x41)
  {
    BOOL v8 = &v89;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v89) <= 0x40)
  {
    BOOL v8 = (long long *)v89;
LABEL_9:
    BOOL v9 = *(void *)v8 == 1;
    if (v7 < 0x41) {
      goto LABEL_12;
    }
LABEL_10:
    if ((void)v89) {
      MEMORY[0x21667D390](v89, 0x1000C8000313F17);
    }
LABEL_12:
    if (v9)
    {
      *(void *)&long long v89 = mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
      uint64_t ZeroAttr = (uint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v89, (mlir::MLIRContext *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_16;
  }
  if ((void)v89) {
    MEMORY[0x21667D390](v89, 0x1000C8000313F17);
  }
LABEL_16:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t ZeroAttr = *v3;
    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t ZeroAttr = v3[1];
  if (!ZeroAttr
    || *(_UNKNOWN **)(*(void *)ZeroAttr + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    if (canMapOperands)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
      {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
        *(void *)&long long v89 = canMapOperands;
        *((void *)&v89 + 1) = v12;
        uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v89);
      }
      else
      {
        uint64_t canMapOperands = 0;
        long long v89 = 0uLL;
      }
    }
    else
    {
      long long v89 = 0uLL;
    }
    uint64_t ZeroAttr = v3[1];
    if (!ZeroAttr)
    {
      long long v89 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8))
    {
      uint64_t ZeroAttr = 0;
      long long v89 = 0uLL;
      return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)ZeroAttr + 8);
    *(void *)&long long v89 = ZeroAttr;
    *((void *)&v89 + 1) = v13;
    uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v89);
    uint64_t ZeroAttr = 0;
    if (canMapOperands)
    {
      if (v14 && canMapOperands == v14)
      {
        uint64_t v15 = *v3;
        if (*v3
          && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t ZeroAttr = *v3;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v16 = v3[1];
        if (!v16)
        {
LABEL_92:
          uint64_t ZeroAttr = 0;
          return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v17 = *(void **)(*(void *)v16 + 136);
        uint64_t ZeroAttr = v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id ? v3[1] : 0;
        if (v15 && v17 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          if (v17 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
            && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
          {
            uint64_t v65 = *v3;
            uint64_t v62 = v16;
            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65);
            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v62))
            {
              mlir::IntegerAttr::getValue((uint64_t)&v65, (llvm::APInt *)&v81);
              mlir::IntegerAttr::getValue((uint64_t)&v62, (llvm::APInt *)&v79);
              LODWORD(v69) = v82;
              if (v82 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const llvm::APInt *)&v81);
              }
              uint64_t v68 = v81;
              unsigned int v26 = v80;
              if (v80 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v79) != v26)
                {
LABEL_69:
                  llvm::APInt::srem((llvm::APInt *)&v68, (const llvm::APInt *)&v79, (uint64_t)&v87);
                  int v27 = 0;
                  DWORD2(v89) = DWORD2(v87);
                  *(void *)&long long v89 = v87;
                  DWORD2(v87) = 0;
                  LOBYTE(v90[0]) = 1;
                  if (v69 >= 0x41)
                  {
                    if (v68) {
                      MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                    }
                    int v27 = 0;
                  }
LABEL_75:
                  if (v80 >= 0x41 && v79) {
                    MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                  }
                  if (v82 >= 0x41 && v81) {
                    MEMORY[0x21667D390](v81, 0x1000C8000313F17);
                  }
                  uint64_t ZeroAttr = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v89);
                  if (LOBYTE(v90[0]))
                  {
LABEL_82:
                    if (DWORD2(v89) >= 0x41 && (void)v89) {
                      MEMORY[0x21667D390](v89, 0x1000C8000313F17);
                    }
                  }
LABEL_91:
                  if (!v27) {
                    return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
                  }
                  goto LABEL_92;
                }
              }
              else if (v79)
              {
                goto LABEL_69;
              }
              DWORD2(v89) = v69;
              *(void *)&long long v89 = v68;
              int v27 = 1;
              LOBYTE(v90[0]) = 1;
              goto LABEL_75;
            }
LABEL_90:
            int v27 = 0;
            uint64_t ZeroAttr = 0;
            goto LABEL_91;
          }
          if (mlir::DenseElementsAttr::classof(*v3)) {
            uint64_t v19 = v15;
          }
          else {
            uint64_t v19 = 0;
          }
          *(void *)&long long v89 = v19;
          if (v19 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v89))
          {
            uint64_t v20 = v3[1];
            uint64_t v21 = mlir::DenseElementsAttr::classof(v20) ? v20 : 0;
            *(void *)&long long v89 = v21;
            if (v21)
            {
              if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v89))
              {
                uint64_t v22 = v3[1];
                uint64_t v65 = *v3;
                uint64_t v62 = v22;
                uint64_t v23 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65);
                if (v23 != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v62)) {
                  goto LABEL_90;
                }
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v65, (uint64_t)&v89);
                long long v87 = v89;
                long long v88 = v90[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v87, (llvm::APInt *)&v77);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v62, (uint64_t)&v89);
                long long v87 = v89;
                long long v88 = v90[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v87, (llvm::APInt *)&v75);
                LODWORD(v69) = v78;
                if (v78 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v68, (const llvm::APInt *)&v77);
                }
                uint64_t v68 = v77;
                unsigned int v53 = v76;
                if (v76 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v75) != v53)
                  {
LABEL_178:
                    llvm::APInt::srem((llvm::APInt *)&v68, (const llvm::APInt *)&v75, (uint64_t)&v87);
                    int v27 = 0;
                    DWORD2(v89) = DWORD2(v87);
                    *(void *)&long long v89 = v87;
                    DWORD2(v87) = 0;
                    LOBYTE(v90[0]) = 1;
                    if (v69 >= 0x41)
                    {
                      if (v68) {
                        MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                      }
                      int v27 = 0;
                    }
LABEL_184:
                    if (v76 >= 0x41 && v75) {
                      MEMORY[0x21667D390](v75, 0x1000C8000313F17);
                    }
                    if (v78 >= 0x41 && v77) {
                      MEMORY[0x21667D390](v77, 0x1000C8000313F17);
                    }
                    uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                    uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v54, (llvm::APInt *)&v89, 1);
                    if (LOBYTE(v90[0])) {
                      goto LABEL_82;
                    }
                    goto LABEL_91;
                  }
                }
                else if (v75)
                {
                  goto LABEL_178;
                }
                DWORD2(v89) = v69;
                *(void *)&long long v89 = v68;
                int v27 = 1;
                LOBYTE(v90[0]) = 1;
                goto LABEL_184;
              }
            }
          }
          if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
            || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
          {
            goto LABEL_92;
          }
          uint64_t v24 = (void *)*v3;
          if (*v3) {
            uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v24 + 8);
          }
          else {
            uint64_t v25 = 0;
          }
          long long v73 = v24;
          uint64_t v74 = v25;
          uint64_t v28 = (void *)v3[1];
          if (v28) {
            uint64_t v29 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8);
          }
          else {
            uint64_t v29 = 0;
          }
          v72[0] = v28;
          v72[1] = v29;
          uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v73);
          if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v72)) {
            goto LABEL_90;
          }
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v73, (uint64_t)&v87);
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v72, (uint64_t)&v68);
          uint64_t ZeroAttr = 0;
          int v27 = 0;
          int v32 = v71;
          if (BYTE8(v88) && v71)
          {
            LOWORD(v65) = v87;
            if ((_BYTE)v87) {
              uint64_t v66 = *((void *)&v87 + 1);
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(**((void **)&v87 + 1) + 16))(&v66);
            }
            uint64_t v67 = v88;
            LOWORD(v62) = v68;
            if ((_BYTE)v68) {
              uint64_t v63 = v69;
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(*(void *)v69 + 16))(&v63);
            }
            uint64_t v64 = v70;
            *(void *)&long long v89 = v90;
            *((void *)&v89 + 1) = 0x400000000;
            unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
            llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v89, NumElements);
            uint64_t v34 = mlir::ElementsAttr::getNumElements((uint64_t)v73, v74);
            if (v34)
            {
              uint64_t v35 = v34;
              int v27 = 0;
              uint64_t v36 = v67;
              while (1)
              {
                uint64_t v37 = BYTE1(v65) ? 0 : v36;
                if ((_BYTE)v65)
                {
                  uint64_t v38 = (const llvm::APInt *)(v66 + 16 * v37);
                  unsigned int v58 = *((_DWORD *)v38 + 2);
                  if (v58 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v38);
                  }
                  uint64_t v57 = *(void *)v38;
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v66 + 24))(&v57);
                }
                uint64_t v39 = BYTE1(v62) ? 0 : v64;
                if ((_BYTE)v62)
                {
                  uint64_t v40 = (const llvm::APInt *)(v63 + 16 * v39);
                  unsigned int v56 = *((_DWORD *)v40 + 2);
                  if (v56 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v55, v40);
                  }
                  uint64_t v55 = *(void *)v40;
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 24))(&v55);
                }
                unsigned int v84 = v58;
                if (v58 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v57);
                }
                uint64_t v83 = v57;
                if (v27) {
                  break;
                }
                unsigned int v44 = v56;
                if (v56 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v55) == v44) {
                    break;
                  }
                }
                else if (!v55)
                {
                  break;
                }
                llvm::APInt::srem((llvm::APInt *)&v83, (const llvm::APInt *)&v55, (uint64_t)&v85);
                int v27 = 0;
                unsigned int v60 = v86;
                uint64_t v59 = v85;
                unsigned int v86 = 0;
                char v61 = 1;
                if (v84 >= 0x41)
                {
                  if (v83) {
                    MEMORY[0x21667D390](v83, 0x1000C8000313F17);
                  }
                  int v27 = 0;
                }
LABEL_126:
                if (v56 >= 0x41 && v55) {
                  MEMORY[0x21667D390](v55, 0x1000C8000313F17);
                }
                if (v58 >= 0x41 && v57) {
                  MEMORY[0x21667D390](v57, 0x1000C8000313F17);
                }
                if (!v61)
                {
                  uint64_t ZeroAttr = 0;
                  goto LABEL_151;
                }
                Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v89, (unint64_t)&v59, 1);
                uint64_t v42 = (llvm::APInt *)(v89 + 16 * DWORD2(v89));
                unsigned int v43 = *((_DWORD *)Address + 2);
                *((_DWORD *)v42 + 2) = v43;
                if (v43 > 0x40) {
                  llvm::APInt::initSlowCase(v42, (const llvm::APInt *)Address);
                }
                *(void *)uint64_t v42 = *(void *)Address;
                ++DWORD2(v89);
                if (v61 && v60 >= 0x41 && v59) {
                  MEMORY[0x21667D390](v59, 0x1000C8000313F17);
                }
                uint64_t v36 = ++v67;
                ++v64;
                if (!--v35) {
                  goto LABEL_149;
                }
              }
              unsigned int v60 = v84;
              uint64_t v59 = v83;
              int v27 = 1;
              char v61 = 1;
              goto LABEL_126;
            }
            int v27 = 0;
LABEL_149:
            uint64_t v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t ZeroAttr = mlir::DenseElementsAttr::get(canMapOperands, v45, (llvm::APInt *)v89, DWORD2(v89));
LABEL_151:
            uint64_t v46 = (char *)v89;
            if (DWORD2(v89))
            {
              uint64_t v47 = 16 * DWORD2(v89);
              do
              {
                if (*(_DWORD *)&v46[v47 - 8] >= 0x41u)
                {
                  uint64_t v48 = *(void *)&v46[v47 - 16];
                  if (v48) {
                    MEMORY[0x21667D390](v48, 0x1000C8000313F17);
                  }
                }
                v47 -= 16;
              }
              while (v47);
              uint64_t v46 = (char *)v89;
            }
            if (v46 != (char *)v90) {
              free(v46);
            }
            if (!(_BYTE)v62)
            {
              uint64_t v49 = v63;
              uint64_t v63 = 0;
              if (v49) {
                (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
              }
            }
            if (!(_BYTE)v65)
            {
              uint64_t v50 = v66;
              uint64_t v66 = 0;
              if (v50) {
                (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
              }
            }
            int v32 = v71;
          }
          if (v32)
          {
            if (!(_BYTE)v68)
            {
              uint64_t v51 = v69;
              uint64_t v69 = 0;
              if (v51) {
                (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
              }
            }
          }
          if (BYTE8(v88))
          {
            if (!(_BYTE)v87)
            {
              uint64_t v52 = *((void *)&v87 + 1);
              *((void *)&v87 + 1) = 0;
              if (v52) {
                (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
              }
            }
          }
          goto LABEL_91;
        }
      }
    }
  }
  return ZeroAttr & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::AndIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v4)
  {
    unsigned int v75 = 1;
    uint64_t v74 = 0;
    goto LABEL_21;
  }
  DWORD2(v100) = 1;
  *(void *)&long long v100 = 0;
  *(void *)&long long v98 = &v100;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v98, v4);
  int v6 = DWORD2(v100);
  if (v5)
  {
    if (DWORD2(v100) < 0x41)
    {
      BOOL v7 = (void)v100 == 0;
      goto LABEL_12;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v100) > 0x40)
    {
      if ((void)v100) {
        MEMORY[0x21667D390](v100, 0x1000C8000313F17);
      }
      goto LABEL_16;
    }
    BOOL v7 = *(void *)v100 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (DWORD2(v100) < 0x41) {
      goto LABEL_12;
    }
  }
  if (!(void)v100)
  {
LABEL_12:
    if (v7) {
      return *(void *)(*(void *)(*a1 + 72) + 56) | 4;
    }
    goto LABEL_16;
  }
  MEMORY[0x21667D390](v100, 0x1000C8000313F17);
  if (v7) {
    return *(void *)(*(void *)(*a1 + 72) + 56) | 4;
  }
LABEL_16:
  uint64_t v9 = *(void *)(*(void *)(a2 + 40) + 8);
  unsigned int v75 = 1;
  uint64_t v74 = 0;
  *(void *)&long long v100 = &v74;
  if (v9 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v100, v9))
  {
    unsigned int v10 = v75;
    if (v75)
    {
      if (v75 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v74) != v10) {
          goto LABEL_21;
        }
      }
      else if (v74 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v75)
      {
        goto LABEL_21;
      }
    }
    unint64_t v8 = *(void *)(*(void *)(*a1 + 72) + 24) | 4;
    if (v75 < 0x41) {
      return v8;
    }
    goto LABEL_94;
  }
LABEL_21:
  uint64_t v11 = *(void *)(*a1 + 72);
  uint64_t v12 = *(void *)(v11 + 56);
  *(void *)&long long v100 = *(void *)(v11 + 24);
  *((void *)&v100 + 1) = &v74;
  *(void *)&long long v98 = v12;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v98);
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id
      && (*(unsigned char *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      uint64_t v14 = *(void *)(*(void *)(DefiningOp + 72) + 24);
      uint64_t v15 = v100;
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(DefiningOp, 1u, (uint64_t *)&v100 + 1))
      {
        if (v15 == v14)
        {
          unsigned int v16 = v75;
          if (!v75) {
            goto LABEL_98;
          }
          if (v75 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v74) == v16) {
              goto LABEL_98;
            }
          }
          else if (v74 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v75)
          {
LABEL_98:
            *(void *)&long long v100 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
            unint64_t v8 = (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v100, (mlir::MLIRContext *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFFBLL;
            if (v75 < 0x41) {
              return v8;
            }
            goto LABEL_94;
          }
        }
      }
    }
  }
  uint64_t v17 = *(void *)(*a1 + 72);
  uint64_t v18 = *(void *)(v17 + 24);
  *(void *)&long long v100 = *(void *)(v17 + 56);
  *((void *)&v100 + 1) = &v74;
  *(void *)&long long v98 = v18;
  uint64_t v19 = mlir::Value::getDefiningOp((mlir::Value *)&v98);
  if (v19)
  {
    if (*(_UNKNOWN **)(*(void *)(v19 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id
      && (*(unsigned char *)(v19 + 46) & 0x80) != 0
      && *(_DWORD *)(v19 + 68) == 2)
    {
      uint64_t v20 = *(void *)(*(void *)(v19 + 72) + 24);
      uint64_t v21 = v100;
      if (mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v19, 1u, (uint64_t *)&v100 + 1))
      {
        if (v21 == v20)
        {
          unsigned int v22 = v75;
          if (!v75) {
            goto LABEL_98;
          }
          if (v75 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v74) == v22) {
              goto LABEL_98;
            }
          }
          else if (v74 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v75)
          {
            goto LABEL_98;
          }
        }
      }
    }
  }
  uint64_t v23 = *a1;
  *(void *)&long long v100 = *(void *)(*(void *)(v23 + 72) + 24);
  uint64_t v24 = mlir::Value::getDefiningOp((mlir::Value *)&v100);
  if (!v24)
  {
    uint64_t v25 = *(void *)(v23 + 72);
    goto LABEL_50;
  }
  uint64_t v25 = *(void *)(v23 + 72);
  if (*(_UNKNOWN **)(*(void *)(v24 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id
    || (uint64_t v26 = *(void *)(v25 + 56), v27 = *(void *)(v24 + 72), v26 != *(void *)(v27 + 24))
    && v26 != *(void *)(v27 + 56))
  {
LABEL_50:
    *(void *)&long long v100 = *(void *)(v25 + 56);
    uint64_t v24 = mlir::Value::getDefiningOp((mlir::Value *)&v100);
    if (!v24) {
      goto LABEL_60;
    }
    if (*(_UNKNOWN **)(*(void *)(v24 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id) {
      goto LABEL_60;
    }
    uint64_t v28 = *(void *)(*(void *)(v23 + 72) + 24);
    uint64_t v29 = *(void *)(v24 + 72);
    if (v28 != *(void *)(v29 + 24) && v28 != *(void *)(v29 + 56)) {
      goto LABEL_60;
    }
  }
  if (*(_DWORD *)(v24 + 36)) {
    uint64_t v30 = v24 - 16;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v30, 0);
  if (NextResultAtOffset)
  {
    unint64_t v8 = NextResultAtOffset | 4;
    if (v75 < 0x41) {
      return v8;
    }
    goto LABEL_94;
  }
LABEL_60:
  int v32 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v32;
  if (*v32
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    unint64_t v8 = canMapOperands & 0xFFFFFFFFFFFFFFFBLL;
    if (v75 < 0x41) {
      return v8;
    }
    goto LABEL_94;
  }
  uint64_t v34 = v32[1];
  if (v34 && *(_UNKNOWN **)(*(void *)v34 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_93;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v100 = canMapOperands;
      *((void *)&v100 + 1) = v35;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v100 = 0uLL;
    }
  }
  else
  {
    long long v100 = 0uLL;
  }
  uint64_t v34 = v32[1];
  if (!v34)
  {
    long long v100 = 0uLL;
    goto LABEL_93;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v34 + 8))
  {
    uint64_t v34 = 0;
    long long v100 = 0uLL;
    goto LABEL_93;
  }
  uint64_t v36 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v34 + 8);
  *(void *)&long long v100 = v34;
  *((void *)&v100 + 1) = v36;
  uint64_t v37 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v34 = 0;
  if (!canMapOperands || !v37 || canMapOperands != v37)
  {
LABEL_93:
    unint64_t v8 = v34 & 0xFFFFFFFFFFFFFFFBLL;
    if (v75 < 0x41) {
      return v8;
    }
    goto LABEL_94;
  }
  uint64_t v38 = *v32;
  if (*v32 && *(_UNKNOWN **)(*(void *)v38 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v34 = *v32;
    goto LABEL_93;
  }
  uint64_t v39 = v32[1];
  if (!v39) {
    goto LABEL_134;
  }
  uint64_t v40 = *(void **)(*(void *)v39 + 136);
  if (v40 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v34 = v32[1];
  }
  else {
    uint64_t v34 = 0;
  }
  if (!v38 || v40 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_93;
  }
  if (v40 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(void *)v38 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v83 = *v32;
    uint64_t v80 = v39;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80))
    {
      mlir::IntegerAttr::getValue((uint64_t)&v83, (llvm::APInt *)&v89);
      mlir::IntegerAttr::getValue((uint64_t)&v80, (llvm::APInt *)&v86);
      DWORD2(v98) = v90;
      if (v90 > 0x40) {
        llvm::APInt::initSlowCase((llvm::APInt *)&v98, (const llvm::APInt *)&v89);
      }
      DWORD2(v100) = v90;
      *(void *)&long long v100 = v86 & v89;
      LOBYTE(v101[0]) = 1;
      if (v87 >= 0x41 && v86) {
        MEMORY[0x21667D390](v86, 0x1000C8000313F17);
      }
      if (v90 >= 0x41 && v89) {
        MEMORY[0x21667D390](v89, 0x1000C8000313F17);
      }
      uint64_t v34 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v100);
      if (!LOBYTE(v101[0])) {
        goto LABEL_93;
      }
LABEL_125:
      if (DWORD2(v100) >= 0x41 && (void)v100)
      {
        MEMORY[0x21667D390](v100, 0x1000C8000313F17);
        unint64_t v8 = v34 & 0xFFFFFFFFFFFFFFFBLL;
        if (v75 < 0x41) {
          return v8;
        }
        goto LABEL_94;
      }
      goto LABEL_93;
    }
    goto LABEL_134;
  }
  if (mlir::DenseElementsAttr::classof(*v32)) {
    uint64_t v43 = v38;
  }
  else {
    uint64_t v43 = 0;
  }
  *(void *)&long long v100 = v43;
  if (v43 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100))
  {
    uint64_t v44 = v32[1];
    uint64_t v45 = mlir::DenseElementsAttr::classof(v44) ? v44 : 0;
    *(void *)&long long v100 = v45;
    if (v45)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100))
      {
        uint64_t v46 = v32[1];
        uint64_t v83 = *v32;
        uint64_t v80 = v46;
        uint64_t v47 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
        if (v47 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80))
        {
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v83, (uint64_t)&v100);
          long long v98 = v100;
          long long v99 = v101[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v98, (llvm::APInt *)&v89);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v80, (uint64_t)&v100);
          long long v98 = v100;
          long long v99 = v101[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v98, (llvm::APInt *)&v86);
          DWORD2(v98) = v90;
          if (v90 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v98, (const llvm::APInt *)&v89);
          }
          DWORD2(v100) = v90;
          *(void *)&long long v100 = v86 & v89;
          LOBYTE(v101[0]) = 1;
          if (v87 >= 0x41 && v86) {
            MEMORY[0x21667D390](v86, 0x1000C8000313F17);
          }
          if (v90 >= 0x41 && v89) {
            MEMORY[0x21667D390](v89, 0x1000C8000313F17);
          }
          uint64_t v73 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v34 = mlir::DenseElementsAttr::get(canMapOperands, v73, (llvm::APInt *)&v100, 1);
          if (!LOBYTE(v101[0])) {
            goto LABEL_93;
          }
          goto LABEL_125;
        }
        goto LABEL_134;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v32 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v32[1] + 8))
  {
    goto LABEL_134;
  }
  uint64_t v48 = (void *)*v32;
  uint64_t v49 = *v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v48 + 8) : 0;
  uint64_t v94 = v48;
  uint64_t v95 = v49;
  uint64_t v50 = (void *)v32[1];
  uint64_t v51 = v50 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v50 + 8) : 0;
  v93[0] = v50;
  v93[1] = v51;
  uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v94);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v93))
  {
LABEL_134:
    unint64_t v8 = 0;
    if (v75 < 0x41) {
      return v8;
    }
    goto LABEL_94;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v94, (uint64_t)&v98);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v93, (uint64_t)&v89);
  uint64_t v34 = 0;
  int v53 = v92;
  if (BYTE8(v99) && v92)
  {
    LOWORD(v86) = v98;
    if ((_BYTE)v98) {
      uint64_t v87 = *((void *)&v98 + 1);
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(**((void **)&v98 + 1) + 16))(&v87);
    }
    uint64_t v88 = v99;
    LOWORD(v83) = v89;
    if ((_BYTE)v89) {
      uint64_t v84 = v90;
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v90 + 16))(&v84);
    }
    uint64_t v85 = v91;
    *(void *)&long long v100 = v101;
    *((void *)&v100 + 1) = 0x400000000;
    unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v94, v95);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v100, NumElements);
    uint64_t v55 = mlir::ElementsAttr::getNumElements((uint64_t)v94, v95);
    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v57 = v88;
      while (1)
      {
        uint64_t v58 = BYTE1(v86) ? 0 : v57;
        if ((_BYTE)v86)
        {
          uint64_t v59 = (const llvm::APInt *)(v87 + 16 * v58);
          unsigned int v79 = *((_DWORD *)v59 + 2);
          if (v79 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v78, v59);
          }
          uint64_t v78 = *(void *)v59;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v87 + 24))(&v78);
        }
        uint64_t v60 = BYTE1(v83) ? 0 : v85;
        if ((_BYTE)v83)
        {
          char v61 = (const llvm::APInt *)(v84 + 16 * v60);
          unsigned int v77 = *((_DWORD *)v61 + 2);
          if (v77 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v76, v61);
          }
          uint64_t v76 = *(void *)v61;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v84 + 24))(&v76);
        }
        unsigned int v97 = v79;
        if (v79 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v96, (const llvm::APInt *)&v78);
        }
        unsigned int v81 = v79;
        uint64_t v80 = v76 & v78;
        char v82 = 1;
        if (v77 >= 0x41 && v76) {
          MEMORY[0x21667D390](v76, 0x1000C8000313F17);
        }
        if (v79 >= 0x41 && v78) {
          MEMORY[0x21667D390](v78, 0x1000C8000313F17);
        }
        if (!v82) {
          break;
        }
        Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v100, (unint64_t)&v80, 1);
        uint64_t v63 = (llvm::APInt *)(v100 + 16 * DWORD2(v100));
        unsigned int v64 = *((_DWORD *)Address + 2);
        *((_DWORD *)v63 + 2) = v64;
        if (v64 > 0x40) {
          llvm::APInt::initSlowCase(v63, (const llvm::APInt *)Address);
        }
        *(void *)uint64_t v63 = *(void *)Address;
        ++DWORD2(v100);
        if (v82 && v81 >= 0x41 && v80) {
          MEMORY[0x21667D390](v80, 0x1000C8000313F17);
        }
        uint64_t v57 = ++v88;
        ++v85;
        if (!--v56) {
          goto LABEL_180;
        }
      }
      uint64_t v34 = 0;
    }
    else
    {
LABEL_180:
      uint64_t v65 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v34 = mlir::DenseElementsAttr::get(canMapOperands, v65, (llvm::APInt *)v100, DWORD2(v100));
    }
    uint64_t v66 = (char *)v100;
    if (DWORD2(v100))
    {
      uint64_t v67 = 16 * DWORD2(v100);
      do
      {
        if (*(_DWORD *)&v66[v67 - 8] >= 0x41u)
        {
          uint64_t v68 = *(void *)&v66[v67 - 16];
          if (v68) {
            MEMORY[0x21667D390](v68, 0x1000C8000313F17);
          }
        }
        v67 -= 16;
      }
      while (v67);
      uint64_t v66 = (char *)v100;
    }
    if (v66 != (char *)v101) {
      free(v66);
    }
    if (!(_BYTE)v83)
    {
      uint64_t v69 = v84;
      uint64_t v84 = 0;
      if (v69) {
        (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
      }
    }
    if (!(_BYTE)v86)
    {
      uint64_t v70 = v87;
      uint64_t v87 = 0;
      if (v70) {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
      }
    }
    int v53 = v92;
  }
  if (v53)
  {
    if (!(_BYTE)v89)
    {
      uint64_t v71 = v90;
      uint64_t v90 = 0;
      if (v71) {
        (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
      }
    }
  }
  if (!BYTE8(v99)) {
    goto LABEL_93;
  }
  if ((_BYTE)v98) {
    goto LABEL_93;
  }
  uint64_t v72 = *((void *)&v98 + 1);
  *((void *)&v98 + 1) = 0;
  if (!v72) {
    goto LABEL_93;
  }
  (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  unint64_t v8 = v34 & 0xFFFFFFFFFFFFFFFBLL;
  if (v75 < 0x41) {
    return v8;
  }
LABEL_94:
  if (v74) {
    MEMORY[0x21667D390](v74, 0x1000C8000313F17);
  }
  return v8;
}

unint64_t mlir::arith::OrIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  DWORD2(v92) = 1;
  *(void *)&long long v92 = 0;
  uint64_t v5 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v90 = &v92;
  if (!v5) {
    goto LABEL_16;
  }
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v90, v5);
  char v7 = v6;
  unsigned int v8 = DWORD2(v92);
  if (v6)
  {
    if (DWORD2(v92) > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v92) != v8)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v92) != v8)
        {
          if ((void)v92) {
            MEMORY[0x21667D390](v92, 0x1000C8000313F17);
          }
          goto LABEL_16;
        }
LABEL_14:
        unint64_t v2 = *(void *)(*(void *)(a2 + 40) + 8) & 0xFFFFFFFFFFFFFFFBLL;
        if (v8 < 0x41) {
          goto LABEL_15;
        }
        goto LABEL_11;
      }
    }
    else if ((void)v92)
    {
      if (DWORD2(v92) && (void)v92 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v92)) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }
    unint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
  }
  if (v8 < 0x41) {
    goto LABEL_15;
  }
LABEL_11:
  if ((void)v92) {
    MEMORY[0x21667D390](v92, 0x1000C8000313F17);
  }
LABEL_15:
  if (v7) {
    return v2;
  }
LABEL_16:
  unsigned int v67 = 1;
  uint64_t v66 = 0;
  uint64_t v9 = *(void *)(*(void *)a1 + 72);
  uint64_t v10 = *(void *)(v9 + 56);
  *(void *)&long long v92 = *(void *)(v9 + 24);
  *((void *)&v92 + 1) = &v66;
  *(void *)&long long v90 = v10;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v90);
  if (!DefiningOp) {
    goto LABEL_25;
  }
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    goto LABEL_25;
  }
  if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0) {
    goto LABEL_25;
  }
  if (*(_DWORD *)(DefiningOp + 68) != 2) {
    goto LABEL_25;
  }
  uint64_t v12 = *(void *)(*(void *)(DefiningOp + 72) + 24);
  uint64_t v13 = v92;
  if (!mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(DefiningOp, 1u, (uint64_t *)&v92 + 1)|| v13 != v12)
  {
    goto LABEL_25;
  }
  unsigned int v14 = v67;
  if (!v67) {
    goto LABEL_87;
  }
  if (v67 <= 0x40)
  {
    if (v66 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v67) {
      goto LABEL_25;
    }
LABEL_87:
    uint64_t v37 = *(void *)(*(void *)(*(void *)a1 + 72) + 56);
    goto LABEL_94;
  }
  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v66) == v14) {
    goto LABEL_87;
  }
LABEL_25:
  uint64_t v15 = *(void *)(*(void *)a1 + 72);
  uint64_t v16 = *(void *)(v15 + 24);
  *(void *)&long long v92 = *(void *)(v15 + 56);
  *((void *)&v92 + 1) = &v66;
  *(void *)&long long v90 = v16;
  uint64_t v17 = mlir::Value::getDefiningOp((mlir::Value *)&v90);
  if (!v17) {
    goto LABEL_34;
  }
  if (*(_UNKNOWN **)(*(void *)(v17 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    goto LABEL_34;
  }
  if ((*(unsigned char *)(v17 + 46) & 0x80) == 0) {
    goto LABEL_34;
  }
  if (*(_DWORD *)(v17 + 68) != 2) {
    goto LABEL_34;
  }
  uint64_t v18 = *(void *)(*(void *)(v17 + 72) + 24);
  uint64_t v19 = v92;
  if (!mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(v17, 1u, (uint64_t *)&v92 + 1)|| v19 != v18)
  {
    goto LABEL_34;
  }
  unsigned int v20 = v67;
  if (v67)
  {
    if (v67 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v66) != v20)
      {
LABEL_34:
        uint64_t v21 = *(uint64_t **)(a2 + 40);
        uint64_t canMapOperands = *v21;
        if (*v21
          && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          unint64_t v2 = canMapOperands & 0xFFFFFFFFFFFFFFFBLL;
          if (v67 < 0x41) {
            return v2;
          }
          goto LABEL_70;
        }
        uint64_t v23 = v21[1];
        if (v23
          && *(_UNKNOWN **)(*(void *)v23 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          goto LABEL_69;
        }
        if (canMapOperands)
        {
          if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
          {
            uint64_t v24 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
            *(void *)&long long v92 = canMapOperands;
            *((void *)&v92 + 1) = v24;
            uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
          }
          else
          {
            uint64_t canMapOperands = 0;
            long long v92 = 0uLL;
          }
        }
        else
        {
          long long v92 = 0uLL;
        }
        uint64_t v23 = v21[1];
        if (!v23)
        {
          long long v92 = 0uLL;
          goto LABEL_69;
        }
        if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8))
        {
          uint64_t v23 = 0;
          long long v92 = 0uLL;
          goto LABEL_69;
        }
        uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v23 + 8);
        *(void *)&long long v92 = v23;
        *((void *)&v92 + 1) = v25;
        uint64_t v26 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
        uint64_t v23 = 0;
        if (!canMapOperands || !v26 || canMapOperands != v26)
        {
LABEL_69:
          unint64_t v2 = v23 & 0xFFFFFFFFFFFFFFFBLL;
          if (v67 < 0x41) {
            return v2;
          }
          goto LABEL_70;
        }
        uint64_t v27 = *v21;
        if (*v21
          && *(_UNKNOWN **)(*(void *)v27 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v23 = *v21;
          goto LABEL_69;
        }
        uint64_t v28 = v21[1];
        if (!v28) {
          goto LABEL_116;
        }
        uint64_t v29 = *(void **)(*(void *)v28 + 136);
        if (v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          uint64_t v23 = v21[1];
        }
        else {
          uint64_t v23 = 0;
        }
        if (!v27 || v29 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
          goto LABEL_69;
        }
        if (v29 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
          && *(_UNKNOWN **)(*(void *)v27 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        {
          uint64_t v75 = *v21;
          uint64_t v72 = v28;
          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75);
          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v72))
          {
            mlir::IntegerAttr::getValue((uint64_t)&v75, (llvm::APInt *)&v81);
            mlir::IntegerAttr::getValue((uint64_t)&v72, (llvm::APInt *)&v78);
            DWORD2(v90) = v82;
            if (v82 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v81);
            }
            DWORD2(v92) = v82;
            *(void *)&long long v92 = v78 | v81;
            LOBYTE(v93[0]) = 1;
            if (v79 >= 0x41 && v78) {
              MEMORY[0x21667D390](v78, 0x1000C8000313F17);
            }
            if (v82 >= 0x41 && v81) {
              MEMORY[0x21667D390](v81, 0x1000C8000313F17);
            }
            uint64_t v23 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v92);
            if (!LOBYTE(v93[0])) {
              goto LABEL_69;
            }
LABEL_107:
            if (DWORD2(v92) >= 0x41 && (void)v92)
            {
              MEMORY[0x21667D390](v92, 0x1000C8000313F17);
              unint64_t v2 = v23 & 0xFFFFFFFFFFFFFFFBLL;
              if (v67 < 0x41) {
                return v2;
              }
              goto LABEL_70;
            }
            goto LABEL_69;
          }
          goto LABEL_116;
        }
        if (mlir::DenseElementsAttr::classof(*v21)) {
          uint64_t v32 = v27;
        }
        else {
          uint64_t v32 = 0;
        }
        *(void *)&long long v92 = v32;
        if (v32 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
        {
          uint64_t v33 = v21[1];
          uint64_t v34 = mlir::DenseElementsAttr::classof(v33) ? v33 : 0;
          *(void *)&long long v92 = v34;
          if (v34)
          {
            if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
            {
              uint64_t v35 = v21[1];
              uint64_t v75 = *v21;
              uint64_t v72 = v35;
              uint64_t v36 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v75);
              if (v36 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72))
              {
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v75, (uint64_t)&v92);
                long long v90 = v92;
                long long v91 = v93[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v81);
                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v72, (uint64_t)&v92);
                long long v90 = v92;
                long long v91 = v93[0];
                mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v78);
                DWORD2(v90) = v82;
                if (v82 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v81);
                }
                DWORD2(v92) = v82;
                *(void *)&long long v92 = v78 | v81;
                LOBYTE(v93[0]) = 1;
                if (v79 >= 0x41 && v78) {
                  MEMORY[0x21667D390](v78, 0x1000C8000313F17);
                }
                if (v82 >= 0x41 && v81) {
                  MEMORY[0x21667D390](v81, 0x1000C8000313F17);
                }
                uint64_t v65 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                uint64_t v23 = mlir::DenseElementsAttr::get(canMapOperands, v65, (llvm::APInt *)&v92, 1);
                if (!LOBYTE(v93[0])) {
                  goto LABEL_69;
                }
                goto LABEL_107;
              }
              goto LABEL_116;
            }
          }
        }
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v21 + 8)
          || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v21[1] + 8))
        {
          goto LABEL_116;
        }
        uint64_t v38 = (void *)*v21;
        uint64_t v39 = *v21 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
        uint64_t v86 = v38;
        uint64_t v87 = v39;
        uint64_t v42 = (void *)v21[1];
        uint64_t v43 = v42 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v42 + 8) : 0;
        v85[0] = v42;
        v85[1] = v43;
        uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v86);
        if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v85))
        {
LABEL_116:
          unint64_t v2 = 0;
          if (v67 < 0x41) {
            return v2;
          }
          goto LABEL_70;
        }
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v86, (uint64_t)&v90);
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v85, (uint64_t)&v81);
        uint64_t v23 = 0;
        int v45 = v84;
        if (BYTE8(v91) && v84)
        {
          LOWORD(v78) = v90;
          if ((_BYTE)v90) {
            uint64_t v79 = *((void *)&v90 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v90 + 1) + 16))(&v79);
          }
          uint64_t v80 = v91;
          LOWORD(v75) = v81;
          if ((_BYTE)v81) {
            uint64_t v76 = v82;
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v82 + 16))(&v76);
          }
          uint64_t v77 = v83;
          *(void *)&long long v92 = v93;
          *((void *)&v92 + 1) = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v86, v87);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v92, NumElements);
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v86, v87);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v80;
            while (1)
            {
              uint64_t v50 = BYTE1(v78) ? 0 : v49;
              if ((_BYTE)v78)
              {
                uint64_t v51 = (const llvm::APInt *)(v79 + 16 * v50);
                unsigned int v71 = *((_DWORD *)v51 + 2);
                if (v71 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v70, v51);
                }
                uint64_t v70 = *(void *)v51;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v70);
              }
              uint64_t v52 = BYTE1(v75) ? 0 : v77;
              if ((_BYTE)v75)
              {
                int v53 = (const llvm::APInt *)(v76 + 16 * v52);
                unsigned int v69 = *((_DWORD *)v53 + 2);
                if (v69 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v68, v53);
                }
                uint64_t v68 = *(void *)v53;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v76 + 24))(&v68);
              }
              unsigned int v89 = v71;
              if (v71 > 0x40) {
                llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const llvm::APInt *)&v70);
              }
              unsigned int v73 = v71;
              uint64_t v72 = v68 | v70;
              char v74 = 1;
              if (v69 >= 0x41 && v68) {
                MEMORY[0x21667D390](v68, 0x1000C8000313F17);
              }
              if (v71 >= 0x41 && v70) {
                MEMORY[0x21667D390](v70, 0x1000C8000313F17);
              }
              if (!v74) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v92, (unint64_t)&v72, 1);
              uint64_t v55 = (llvm::APInt *)(v92 + 16 * DWORD2(v92));
              unsigned int v56 = *((_DWORD *)Address + 2);
              *((_DWORD *)v55 + 2) = v56;
              if (v56 > 0x40) {
                llvm::APInt::initSlowCase(v55, (const llvm::APInt *)Address);
              }
              *(void *)uint64_t v55 = *(void *)Address;
              ++DWORD2(v92);
              if (v74 && v73 >= 0x41 && v72) {
                MEMORY[0x21667D390](v72, 0x1000C8000313F17);
              }
              uint64_t v49 = ++v80;
              ++v77;
              if (!--v48) {
                goto LABEL_162;
              }
            }
            uint64_t v23 = 0;
          }
          else
          {
LABEL_162:
            uint64_t v57 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v23 = mlir::DenseElementsAttr::get(canMapOperands, v57, (llvm::APInt *)v92, DWORD2(v92));
          }
          uint64_t v58 = (char *)v92;
          if (DWORD2(v92))
          {
            uint64_t v59 = 16 * DWORD2(v92);
            do
            {
              if (*(_DWORD *)&v58[v59 - 8] >= 0x41u)
              {
                uint64_t v60 = *(void *)&v58[v59 - 16];
                if (v60) {
                  MEMORY[0x21667D390](v60, 0x1000C8000313F17);
                }
              }
              v59 -= 16;
            }
            while (v59);
            uint64_t v58 = (char *)v92;
          }
          if (v58 != (char *)v93) {
            free(v58);
          }
          if (!(_BYTE)v75)
          {
            uint64_t v61 = v76;
            uint64_t v76 = 0;
            if (v61) {
              (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
            }
          }
          if (!(_BYTE)v78)
          {
            uint64_t v62 = v79;
            uint64_t v79 = 0;
            if (v62) {
              (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
            }
          }
          int v45 = v84;
        }
        if (v45)
        {
          if (!(_BYTE)v81)
          {
            uint64_t v63 = v82;
            uint64_t v82 = 0;
            if (v63) {
              (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
            }
          }
        }
        if (!BYTE8(v91)) {
          goto LABEL_69;
        }
        if ((_BYTE)v90) {
          goto LABEL_69;
        }
        uint64_t v64 = *((void *)&v90 + 1);
        *((void *)&v90 + 1) = 0;
        if (!v64) {
          goto LABEL_69;
        }
        (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
        unint64_t v2 = v23 & 0xFFFFFFFFFFFFFFFBLL;
        if (v67 < 0x41) {
          return v2;
        }
LABEL_70:
        if (v66) {
          MEMORY[0x21667D390](v66, 0x1000C8000313F17);
        }
        return v2;
      }
    }
    else if (v66 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v67)
    {
      goto LABEL_34;
    }
  }
  uint64_t v37 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
LABEL_94:
  *(void *)&long long v92 = v37;
  uint64_t v40 = mlir::Value::getDefiningOp((mlir::Value *)&v92);
  if (*(_UNKNOWN **)(*(void *)(v40 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  unint64_t v2 = *(void *)(*(void *)(v41 + 72) + 56) | 4;
  if (v67 >= 0x41) {
    goto LABEL_70;
  }
  return v2;
}

uint64_t mlir::arith::XOrIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v4) {
    goto LABEL_15;
  }
  DWORD2(v85) = 1;
  *(void *)&long long v85 = 0;
  *(void *)&long long v83 = &v85;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v83, v4);
  int v6 = DWORD2(v85);
  if (v5)
  {
    if (DWORD2(v85) < 0x41)
    {
      BOOL v7 = (void)v85 == 0;
      goto LABEL_11;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v85) > 0x40)
    {
      if ((void)v85) {
        MEMORY[0x21667D390](v85, 0x1000C8000313F17);
      }
      goto LABEL_15;
    }
    BOOL v7 = *(void *)v85 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (DWORD2(v85) < 0x41) {
      goto LABEL_11;
    }
  }
  if (!(void)v85)
  {
LABEL_11:
    if (v7) {
      return *(void *)(*(void *)(*a1 + 72) + 24) | 4;
    }
    goto LABEL_15;
  }
  MEMORY[0x21667D390](v85, 0x1000C8000313F17);
  if (v7) {
    return *(void *)(*(void *)(*a1 + 72) + 24) | 4;
  }
LABEL_15:
  uint64_t v9 = *(void *)(*a1 + 72);
  if (*(void *)(v9 + 24) == *(void *)(v9 + 56))
  {
    *(void *)&long long v85 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
    return (unint64_t)mlir::Builder::getZeroAttr((mlir::IndexType **)&v85, (mlir::MLIRContext *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFFBLL;
  }
  *(void *)&long long v85 = *(void *)(v9 + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v85);
  if (DefiningOp)
  {
    uint64_t v11 = *a1;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
    {
      uint64_t v12 = *(void *)(DefiningOp + 72);
      uint64_t v13 = *(void *)(v12 + 56);
      uint64_t v14 = *(void *)(*(void *)(v11 + 72) + 56);
      uint64_t v15 = *(void *)(v12 + 24);
      if (v13 == v14) {
        return v15 | 4;
      }
      if (v15 == v14) {
        return v13 | 4;
      }
    }
  }
  else
  {
    uint64_t v11 = *a1;
  }
  *(void *)&long long v85 = *(void *)(*(void *)(v11 + 72) + 56);
  uint64_t v16 = mlir::Value::getDefiningOp((mlir::Value *)&v85);
  if (v16
    && *(_UNKNOWN **)(*(void *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id)
  {
    uint64_t v22 = *(void *)(v16 + 72);
    uint64_t v23 = *(void *)(v22 + 56);
    uint64_t v24 = *(void *)(*(void *)(*a1 + 72) + 24);
    uint64_t v13 = *(void *)(v22 + 24);
    if (v23 == v24) {
      return v13 | 4;
    }
    if (v13 == v24) {
      return v23 | 4;
    }
  }
  uint64_t v17 = *(uint64_t **)(a2 + 40);
  uint64_t canMapOperands = *v17;
  if (*v17
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v19 = *v17;
  }
  else
  {
    uint64_t v19 = v17[1];
    if (!v19 || *(_UNKNOWN **)(*(void *)v19 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v20 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          *(void *)&long long v85 = canMapOperands;
          *((void *)&v85 + 1) = v20;
          uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v85);
        }
        else
        {
          uint64_t canMapOperands = 0;
          long long v85 = 0uLL;
        }
      }
      else
      {
        long long v85 = 0uLL;
      }
      uint64_t v19 = v17[1];
      if (v19)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8))
        {
          uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v19 + 8);
          *(void *)&long long v85 = v19;
          *((void *)&v85 + 1) = v21;
          uint64_t v25 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v85);
          uint64_t v19 = 0;
          if (canMapOperands && v25 && canMapOperands == v25)
          {
            uint64_t v26 = *v17;
            if (*v17
              && *(_UNKNOWN **)(*(void *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v19 = *v17;
            }
            else
            {
              uint64_t v27 = v17[1];
              if (v27)
              {
                uint64_t v28 = *(void **)(*(void *)v27 + 136);
                if (v28 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  uint64_t v19 = v17[1];
                }
                else {
                  uint64_t v19 = 0;
                }
                if (!v26 || v28 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                  return v19 & 0xFFFFFFFFFFFFFFFBLL;
                }
                if (v28 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                  && *(_UNKNOWN **)(*(void *)v26 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                {
                  uint64_t v68 = *v17;
                  uint64_t v65 = v27;
                  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v68);
                  if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v65))
                  {
                    mlir::IntegerAttr::getValue((uint64_t)&v68, (llvm::APInt *)&v74);
                    mlir::IntegerAttr::getValue((uint64_t)&v65, (llvm::APInt *)&v71);
                    DWORD2(v83) = v75;
                    if (v75 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v74);
                    }
                    DWORD2(v85) = v75;
                    *(void *)&long long v85 = v71 ^ v74;
                    LOBYTE(v86[0]) = 1;
                    if (v72 >= 0x41 && v71) {
                      MEMORY[0x21667D390](v71, 0x1000C8000313F17);
                    }
                    if (v75 >= 0x41 && v74) {
                      MEMORY[0x21667D390](v74, 0x1000C8000313F17);
                    }
                    uint64_t v19 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v85);
                    if (!LOBYTE(v86[0])) {
                      return v19 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                    goto LABEL_87;
                  }
                }
                else
                {
                  if (mlir::DenseElementsAttr::classof(*v17)) {
                    uint64_t v30 = v26;
                  }
                  else {
                    uint64_t v30 = 0;
                  }
                  *(void *)&long long v85 = v30;
                  if (v30
                    && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v85)
                    && ((uint64_t v31 = v17[1], !mlir::DenseElementsAttr::classof(v31)) ? (v32 = 0) : (v32 = v31),
                        (*(void *)&long long v85 = v32) != 0
                     && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v85)))
                  {
                    uint64_t v33 = v17[1];
                    uint64_t v68 = *v17;
                    uint64_t v65 = v33;
                    uint64_t v34 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v68);
                    if (v34 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v65))
                    {
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v68, (uint64_t)&v85);
                      long long v83 = v85;
                      long long v84 = v86[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v83, (llvm::APInt *)&v74);
                      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v65, (uint64_t)&v85);
                      long long v83 = v85;
                      long long v84 = v86[0];
                      mlir::DenseElementsAttr::IntElementIterator::operator*(&v83, (llvm::APInt *)&v71);
                      DWORD2(v83) = v75;
                      if (v75 > 0x40) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v83, (const llvm::APInt *)&v74);
                      }
                      DWORD2(v85) = v75;
                      *(void *)&long long v85 = v71 ^ v74;
                      LOBYTE(v86[0]) = 1;
                      if (v72 >= 0x41 && v71) {
                        MEMORY[0x21667D390](v71, 0x1000C8000313F17);
                      }
                      if (v75 >= 0x41 && v74) {
                        MEMORY[0x21667D390](v74, 0x1000C8000313F17);
                      }
                      uint64_t v60 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                      uint64_t v19 = mlir::DenseElementsAttr::get(canMapOperands, v60, (llvm::APInt *)&v85, 1);
                      if (!LOBYTE(v86[0])) {
                        return v19 & 0xFFFFFFFFFFFFFFFBLL;
                      }
LABEL_87:
                      if (DWORD2(v85) >= 0x41)
                      {
                        if ((void)v85) {
                          MEMORY[0x21667D390](v85, 0x1000C8000313F17);
                        }
                      }
                      return v19 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                  else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v17 + 8) {
                         && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v17[1] + 8))
                  }
                  {
                    uint64_t v35 = (void *)*v17;
                    uint64_t v36 = *v17 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v35 + 8) : 0;
                    uint64_t v79 = v35;
                    uint64_t v80 = v36;
                    uint64_t v37 = (void *)v17[1];
                    uint64_t v38 = v37 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v37 + 8) : 0;
                    v78[0] = v37;
                    v78[1] = v38;
                    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v79);
                    if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78))
                    {
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v79, (uint64_t)&v83);
                      mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v78, (uint64_t)&v74);
                      uint64_t v19 = 0;
                      int v40 = v77;
                      if (BYTE8(v84) && v77)
                      {
                        LOWORD(v71) = v83;
                        if ((_BYTE)v83) {
                          uint64_t v72 = *((void *)&v83 + 1);
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(**((void **)&v83 + 1) + 16))(&v72);
                        }
                        uint64_t v73 = v84;
                        LOWORD(v68) = v74;
                        if ((_BYTE)v74) {
                          uint64_t v69 = v75;
                        }
                        else {
                          (*(void (**)(uint64_t *__return_ptr))(*(void *)v75 + 16))(&v69);
                        }
                        uint64_t v70 = v76;
                        *(void *)&long long v85 = v86;
                        *((void *)&v85 + 1) = 0x400000000;
                        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v79, v80);
                        llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v85, NumElements);
                        uint64_t v42 = mlir::ElementsAttr::getNumElements((uint64_t)v79, v80);
                        if (v42)
                        {
                          uint64_t v43 = v42;
                          uint64_t v44 = v73;
                          while (1)
                          {
                            uint64_t v45 = BYTE1(v71) ? 0 : v44;
                            if ((_BYTE)v71)
                            {
                              uint64_t v46 = (const llvm::APInt *)(v72 + 16 * v45);
                              unsigned int v64 = *((_DWORD *)v46 + 2);
                              if (v64 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v63, v46);
                              }
                              uint64_t v63 = *(void *)v46;
                            }
                            else
                            {
                              (*(void (**)(uint64_t *__return_ptr))(*(void *)v72 + 24))(&v63);
                            }
                            uint64_t v47 = BYTE1(v68) ? 0 : v70;
                            if ((_BYTE)v68)
                            {
                              uint64_t v48 = (const llvm::APInt *)(v69 + 16 * v47);
                              unsigned int v62 = *((_DWORD *)v48 + 2);
                              if (v62 > 0x40) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v61, v48);
                              }
                              uint64_t v61 = *(void *)v48;
                            }
                            else
                            {
                              (*(void (**)(uint64_t *__return_ptr))(*(void *)v69 + 24))(&v61);
                            }
                            unsigned int v82 = v64;
                            if (v64 > 0x40) {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v81, (const llvm::APInt *)&v63);
                            }
                            unsigned int v66 = v64;
                            uint64_t v65 = v61 ^ v63;
                            char v67 = 1;
                            if (v62 >= 0x41 && v61) {
                              MEMORY[0x21667D390](v61, 0x1000C8000313F17);
                            }
                            if (v64 >= 0x41 && v63) {
                              MEMORY[0x21667D390](v63, 0x1000C8000313F17);
                            }
                            if (!v67) {
                              break;
                            }
                            Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v85, (unint64_t)&v65, 1);
                            uint64_t v50 = (llvm::APInt *)(v85 + 16 * DWORD2(v85));
                            unsigned int v51 = *((_DWORD *)Address + 2);
                            *((_DWORD *)v50 + 2) = v51;
                            if (v51 > 0x40) {
                              llvm::APInt::initSlowCase(v50, (const llvm::APInt *)Address);
                            }
                            *(void *)uint64_t v50 = *(void *)Address;
                            ++DWORD2(v85);
                            if (v67 && v66 >= 0x41 && v65) {
                              MEMORY[0x21667D390](v65, 0x1000C8000313F17);
                            }
                            uint64_t v44 = ++v73;
                            ++v70;
                            if (!--v43) {
                              goto LABEL_141;
                            }
                          }
                          uint64_t v19 = 0;
                        }
                        else
                        {
LABEL_141:
                          uint64_t v52 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                          uint64_t v19 = mlir::DenseElementsAttr::get(canMapOperands, v52, (llvm::APInt *)v85, DWORD2(v85));
                        }
                        int v53 = (char *)v85;
                        if (DWORD2(v85))
                        {
                          uint64_t v54 = 16 * DWORD2(v85);
                          do
                          {
                            if (*(_DWORD *)&v53[v54 - 8] >= 0x41u)
                            {
                              uint64_t v55 = *(void *)&v53[v54 - 16];
                              if (v55) {
                                MEMORY[0x21667D390](v55, 0x1000C8000313F17);
                              }
                            }
                            v54 -= 16;
                          }
                          while (v54);
                          int v53 = (char *)v85;
                        }
                        if (v53 != (char *)v86) {
                          free(v53);
                        }
                        if (!(_BYTE)v68)
                        {
                          uint64_t v56 = v69;
                          uint64_t v69 = 0;
                          if (v56) {
                            (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
                          }
                        }
                        if (!(_BYTE)v71)
                        {
                          uint64_t v57 = v72;
                          uint64_t v72 = 0;
                          if (v57) {
                            (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
                          }
                        }
                        int v40 = v77;
                      }
                      if (v40)
                      {
                        if (!(_BYTE)v74)
                        {
                          uint64_t v58 = v75;
                          uint64_t v75 = 0;
                          if (v58) {
                            (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
                          }
                        }
                      }
                      if (BYTE8(v84))
                      {
                        if (!(_BYTE)v83)
                        {
                          uint64_t v59 = *((void *)&v83 + 1);
                          *((void *)&v83 + 1) = 0;
                          if (v59) {
                            (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
                          }
                        }
                      }
                      return v19 & 0xFFFFFFFFFFFFFFFBLL;
                    }
                  }
                }
              }
              uint64_t v19 = 0;
            }
          }
        }
        else
        {
          uint64_t v19 = 0;
          long long v85 = 0uLL;
        }
      }
      else
      {
        long long v85 = 0uLL;
      }
    }
  }
  return v19 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::XOrIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::NegFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v72 = *(void ***)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v72);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    return *(void *)(*(void *)(DefiningOp + 72) + 24) | 4;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 48);
  uint64_t v5 = *v4;
  if (*v4)
  {
    int v6 = *(void **)(*(void *)v5 + 136);
    if (v6 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (v6 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
      {
        if (mlir::DenseElementsAttr::classof(*v4)) {
          uint64_t v7 = v5;
        }
        else {
          uint64_t v7 = 0;
        }
        uint64_t v72 = (void **)v7;
        if (v7 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v72))
        {
          uint64_t v61 = *v4;
          mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v61, (uint64_t)&v69);
          mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(&v72, (uint64_t)&v69);
          unsigned int v8 = (void *)v70[0];
          uint64_t v10 = llvm::APFloatBase::PPCDoubleDouble(v9);
          if (v10 != v8)
          {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v70);
            if (!v75) {
              goto LABEL_33;
            }
            goto LABEL_30;
          }
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v70);
          if (v75)
          {
LABEL_30:
            uint64_t Value = (llvm::APFloatBase *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v61);
            uint64_t v5 = mlir::DenseElementsAttr::get(Value, v19, (uint64_t)&v72, 1);
            if (!v75) {
              return v5 & 0xFFFFFFFFFFFFFFFBLL;
            }
            if (v10 == (void *)v73) {
              goto LABEL_32;
            }
            goto LABEL_25;
          }
LABEL_33:
          uint64_t v5 = 0;
          return v5 & 0xFFFFFFFFFFFFFFFBLL;
        }
        if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v4 + 8)) {
          goto LABEL_33;
        }
        uint64_t v12 = (void *)*v4;
        if (v12)
        {
          uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
          uint64_t v65 = v12;
          uint64_t v66 = v13;
          mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v65, (uint64_t)&v61);
          if (!v64) {
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v65, (uint64_t)&v61);
          if (!v64) {
            goto LABEL_33;
          }
        }
        __int16 v58 = v61;
        if ((_BYTE)v61) {
          uint64_t v59 = v62;
        }
        else {
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v62 + 16))(&v59);
        }
        uint64_t v60 = v63;
        uint64_t v72 = (void **)v74;
        uint64_t v73 = 0x100000000;
        unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v65, v66);
        if (NumElements > HIDWORD(v73))
        {
          unint64_t v69 = 0;
          uint64_t v21 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v72, v74, NumElements, 32, &v69);
          uint64_t v22 = (uint64_t)v21;
          uint64_t v23 = v72;
          uint64_t v24 = v73;
          if (v73)
          {
            uint64_t v25 = llvm::APFloatBase::PPCDoubleDouble(v21);
            uint64_t v26 = (void *)(v22 + 8);
            uint64_t v27 = 32 * v24;
            uint64_t v28 = v23 + 1;
            do
            {
              while (v25 == *v28)
              {
                uint64_t v26 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v26, v28) + 4;
                v28 += 4;
                v27 -= 32;
                if (!v27) {
                  goto LABEL_42;
                }
              }
              uint64_t v26 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v26, (uint64_t)v28) + 32);
              v28 += 4;
              v27 -= 32;
            }
            while (v27);
LABEL_42:
            uint64_t v23 = v72;
            if (v73)
            {
              uint64_t v29 = v72 - 3;
              uint64_t v30 = 4 * v73;
              do
              {
                while (1)
                {
                  uint64_t v31 = (llvm::detail::DoubleAPFloat *)&v29[v30];
                  if (v25 != v29[v30]) {
                    break;
                  }
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat(v31);
                  v30 -= 4;
                  if (!(v30 * 8)) {
                    goto LABEL_47;
                  }
                }
                llvm::detail::IEEEFloat::~IEEEFloat(v31);
                v30 -= 4;
              }
              while (v30 * 8);
LABEL_47:
              uint64_t v23 = v72;
            }
          }
          int v32 = v69;
          if (v23 != (void **)v74) {
            free(v23);
          }
          uint64_t v72 = (void **)v22;
          HIDWORD(v73) = v32;
        }
        uint64_t v33 = mlir::ElementsAttr::getNumElements((uint64_t)v65, v66);
        if (!v33)
        {
LABEL_73:
          uint64_t ArgOperands = (llvm::APFloatBase *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v65);
          uint64_t v43 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(ArgOperands, v49, (uint64_t)v72, v73);
          uint64_t v5 = (uint64_t)v43;
          uint64_t v50 = v72;
          uint64_t v51 = v73;
          if (v73)
          {
LABEL_76:
            uint64_t v52 = llvm::APFloatBase::PPCDoubleDouble(v43);
            int v53 = (char *)(v50 - 3);
            uint64_t v54 = 32 * v51;
            do
            {
              while (1)
              {
                uint64_t v55 = (llvm::detail::DoubleAPFloat *)&v53[v54];
                if (v52 != *(void **)&v53[v54]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v55);
                v54 -= 32;
                if (!v54) {
                  goto LABEL_80;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v55);
              v54 -= 32;
            }
            while (v54);
LABEL_80:
            uint64_t v50 = v72;
          }
LABEL_81:
          if (v50 != (void **)v74) {
            free(v50);
          }
          if (!(_BYTE)v58)
          {
            uint64_t v56 = v59;
            uint64_t v59 = 0;
            if (v56) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v56 + 8))(v56);
            }
          }
          if (v64 && !(_BYTE)v61)
          {
            uint64_t v57 = v62;
            unsigned int v62 = 0;
            if (v57) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v57 + 8))(v57);
            }
          }
          return v5 & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v34 = v33;
        uint64_t v35 = v60;
        while (1)
        {
          if (HIBYTE(v58)) {
            uint64_t v36 = 0;
          }
          else {
            uint64_t v36 = v35;
          }
          if ((_BYTE)v58)
          {
            uint64_t v37 = (char *)v59 + 32 * v36;
            uint64_t v39 = (void *)*((void *)v37 + 1);
            uint64_t v38 = (const llvm::detail::DoubleAPFloat *)(v37 + 8);
            if (llvm::APFloatBase::PPCDoubleDouble(v59) == v39) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(v68, v38);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v68, v38);
            }
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v59 + 24))(&v67);
          }
          mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(&v69, (uint64_t)&v67);
          int v40 = (void *)v68[0];
          uint64_t v42 = llvm::APFloatBase::PPCDoubleDouble(v41);
          if (v42 == v40)
          {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v68);
            if (!v71)
            {
LABEL_75:
              uint64_t v5 = 0;
              uint64_t v50 = v72;
              uint64_t v51 = v73;
              if (v73) {
                goto LABEL_76;
              }
              goto LABEL_81;
            }
          }
          else
          {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v68);
            if (!v71) {
              goto LABEL_75;
            }
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v72, (unint64_t)&v69, 1);
          uint64_t v45 = (llvm::detail::IEEEFloat *)&v72[4 * v73 + 1];
          uint64_t v47 = (void *)*((void *)Address + 1);
          uint64_t v46 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
          if (v42 == v47)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v45, v46);
            LODWORD(v73) = v73 + 1;
            if (v71)
            {
LABEL_71:
              if (v42 == (void *)v70[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v70);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v70);
              }
            }
          }
          else
          {
            llvm::detail::IEEEFloat::IEEEFloat(v45, v46);
            LODWORD(v73) = v73 + 1;
            if (v71) {
              goto LABEL_71;
            }
          }
          uint64_t v35 = ++v60;
          if (!--v34) {
            goto LABEL_73;
          }
        }
      }
      uint64_t v61 = *v4;
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v61, (uint64_t)&v69);
      mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(&v72, (uint64_t)&v69);
      uint64_t v14 = (void *)v70[0];
      uint64_t v16 = llvm::APFloatBase::PPCDoubleDouble(v15);
      if (v16 == v14)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v70);
        if (!v75) {
          goto LABEL_33;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v70);
        if (!v75) {
          goto LABEL_33;
        }
      }
      uint64_t v17 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v61);
      uint64_t v5 = mlir::FloatAttr::get(v17, (uint64_t)&v72);
      if (v75)
      {
        if (v16 == (void *)v73)
        {
LABEL_32:
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v73);
          return v5 & 0xFFFFFFFFFFFFFFFBLL;
        }
LABEL_25:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v73);
      }
    }
  }
  return v5 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::AddFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  long long v99 = mlir::m_NegZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      long long v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    long long v99 = 0;
    uint64_t v100 = 0;
  }
  uint64_t v10 = (void *)v3[1];
  if (!v10)
  {
    long long v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    long long v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  long long v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v20 = v13;
    }
    else {
      uint64_t v20 = 0;
    }
    long long v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (long long v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        uint64_t v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      long long v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            long long v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            uint64_t v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          long long v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            uint64_t v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              uint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              int v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              uint64_t v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  int v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                int v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                uint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            long long v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                uint64_t v51 = (char *)v83 + 32 * v50;
                int v53 = (void *)*((void *)v51 + 1);
                uint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                uint64_t v55 = (char *)v79 + 32 * v54;
                uint64_t v57 = (void *)*((void *)v55 + 1);
                uint64_t v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              __int16 v58 = (void *)v93[0];
              uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::IEEEFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              char v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          uint64_t v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            unint64_t v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            uint64_t v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                uint64_t v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            uint64_t v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            uint64_t v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            uint64_t v74 = v83;
            long long v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            char v75 = v86;
            uint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::SubFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  long long v99 = mlir::m_PosZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      long long v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    long long v99 = 0;
    uint64_t v100 = 0;
  }
  uint64_t v10 = (void *)v3[1];
  if (!v10)
  {
    long long v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    long long v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  long long v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v20 = v13;
    }
    else {
      uint64_t v20 = 0;
    }
    long long v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (long long v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        uint64_t v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      long long v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            long long v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            uint64_t v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          long long v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            uint64_t v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              uint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              int v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              uint64_t v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  int v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                int v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                uint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            long long v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                uint64_t v51 = (char *)v83 + 32 * v50;
                int v53 = (void *)*((void *)v51 + 1);
                uint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                uint64_t v55 = (char *)v79 + 32 * v54;
                uint64_t v57 = (void *)*((void *)v55 + 1);
                uint64_t v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              __int16 v58 = (void *)v93[0];
              uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::IEEEFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              char v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          uint64_t v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            unint64_t v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            uint64_t v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                uint64_t v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            uint64_t v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            uint64_t v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            uint64_t v74 = v83;
            long long v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            char v75 = v86;
            uint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MaximumFOp::fold(uint64_t a1, uint64_t a2)
{
  v108[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 == *(void *)(v2 + 56)) {
    return v3 | 4;
  }
  uint64_t v5 = *(uint64_t **)(a2 + 48);
  uint64_t v6 = v5[1];
  uint64_t v100 = mlir::m_NegInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
      return v3 | 4;
    }
    uint64_t v5 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v100 = canMapOperands;
      uint64_t v101 = v11;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
    }
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
  }
  uint64_t v12 = (void *)v5[1];
  if (!v12)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    uint64_t v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v10 = v5[1];
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5)) {
      uint64_t v22 = v15;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (uint64_t v24 = 0) : (uint64_t v24 = (void *)v23),
          (uint64_t v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      uint64_t v25 = v5[1];
      uint64_t v86 = *v5;
      uint64_t v95 = v25;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        uint64_t v27 = (llvm::APFloatBase *)llvm::maximum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        uint64_t v28 = (void *)v98[0];
        uint64_t v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        }
        char v103 = 1;
        if (v29 == (void *)v98[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        }
        if (v29 == (void *)v105[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        }
        if (v29 == (void *)v108[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        }
        if (v103)
        {
          uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103) {
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v29 != (void *)v101) {
            goto LABEL_69;
          }
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
    }
    {
      uint64_t v30 = (void *)*v5;
      uint64_t v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      uint64_t v91 = v30;
      uint64_t v92 = v31;
      int v32 = (void *)v5[1];
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        uint64_t v10 = 0;
        int v35 = v89;
        if (v106 && v89)
        {
          char v82 = v104[0];
          char v83 = v104[1];
          if (v104[0]) {
            uint64_t v84 = (llvm::APFloatBase *)v105[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v105[0] + 16))(&v84);
          }
          uint64_t v85 = v105[1];
          __int16 v79 = v86;
          if ((_BYTE)v86) {
            uint64_t v80 = v87;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v87 + 16))(&v80);
          }
          uint64_t v81 = v88;
          uint64_t v100 = v102;
          uint64_t v101 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            unint64_t v97 = 0;
            uint64_t v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            uint64_t v38 = v37;
            uint64_t v39 = (void **)v100;
            uint64_t v40 = v101;
            if (v101)
            {
              uint64_t v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              uint64_t v42 = (void *)((char *)v38 + 8);
              uint64_t v43 = 32 * v40;
              uint64_t v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  uint64_t v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43) {
                    goto LABEL_91;
                  }
                }
                uint64_t v42 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              uint64_t v39 = (void **)v100;
              if (v101)
              {
                uint64_t v45 = (char *)v100 - 24;
                uint64_t v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    uint64_t v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46) {
                      goto LABEL_96;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                uint64_t v39 = (void **)v100;
              }
            }
            int v48 = v97;
            if (v39 != (void **)v102) {
              free(v39);
            }
            uint64_t v100 = v38;
            HIDWORD(v101) = v48;
          }
          uint64_t v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = v85;
            while (1)
            {
              uint64_t v52 = v83 ? 0 : v51;
              if (v82)
              {
                int v53 = (char *)v84 + 32 * v52;
                uint64_t v55 = (void *)*((void *)v53 + 1);
                uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v96, v54);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v84 + 24))(&v95);
              }
              uint64_t v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                uint64_t v57 = (char *)v80 + 32 * v56;
                uint64_t v59 = (void *)*((void *)v57 + 1);
                __int16 v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v94, v58);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
                }
              }
              else
              {
                uint64_t v61 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v80 + 24))(&v93);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::maximum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              }
              char v99 = 1;
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              }
              if (v60 == (void *)v94[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              }
              if (v60 == (void *)v96[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              }
              if (!v99) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              char v64 = (llvm::detail::IEEEFloat *)((char *)v100 + 32 * v101 + 8);
              uint64_t v66 = (void *)*((void *)Address + 1);
              uint64_t v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              }
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
                }
              }
              uint64_t v51 = ++v85;
              ++v81;
              if (!--v50) {
                goto LABEL_139;
              }
            }
            uint64_t v10 = 0;
          }
          else
          {
LABEL_139:
            uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            unsigned int v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            uint64_t v10 = (uint64_t)v62;
          }
          uint64_t v68 = (char *)v100;
          uint64_t v69 = v101;
          if (v101)
          {
            uint64_t v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            uint64_t v71 = v68 - 24;
            uint64_t v72 = 32 * v69;
            do
            {
              while (1)
              {
                uint64_t v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72) {
                  goto LABEL_146;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            uint64_t v68 = (char *)v100;
          }
          if (v68 != v102) {
            free(v68);
          }
          if (!(_BYTE)v79)
          {
            uint64_t v74 = v80;
            uint64_t v80 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          if (!v82)
          {
            char v75 = v84;
            uint64_t v84 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
          int v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            uint64_t v76 = v87;
            uint64_t v87 = 0;
            if (v76) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v76 + 8))(v76);
            }
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            uint64_t v77 = v105[0];
            v105[0] = 0;
            if (v77) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  uint64_t v86 = *v5;
  uint64_t v95 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95)) {
    goto LABEL_75;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  uint64_t v19 = (llvm::APFloatBase *)llvm::maximum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  uint64_t v20 = (void *)v98[0];
  uint64_t v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  }
  char v103 = 1;
  if (v21 == (void *)v98[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  }
  if (v21 == (void *)v105[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  }
  if (v21 == (void *)v108[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  }
  if (!v103) {
    goto LABEL_75;
  }
  uint64_t v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MaxSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v90) = 1;
  *(void *)&long long v90 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v88 = &v90;
  if (!v6)
  {
LABEL_21:
    uint64_t v12 = *(uint64_t **)(a2 + 40);
    uint64_t canMapOperands = *v12;
    if (*v12
      && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      uint64_t v14 = *v12;
    }
    else
    {
      uint64_t v14 = v12[1];
      if (!v14
        || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
      {
        if (canMapOperands)
        {
          if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
          {
            uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
            *(void *)&long long v90 = canMapOperands;
            *((void *)&v90 + 1) = v15;
            uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
          }
          else
          {
            uint64_t canMapOperands = 0;
            long long v90 = 0uLL;
          }
        }
        else
        {
          long long v90 = 0uLL;
        }
        uint64_t v14 = v12[1];
        if (v14)
        {
          if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
          {
            uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
            *(void *)&long long v90 = v14;
            *((void *)&v90 + 1) = v16;
            uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
            uint64_t v14 = 0;
            if (canMapOperands && v17 && canMapOperands == v17)
            {
              uint64_t v18 = *v12;
              if (*v12
                && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
              {
                uint64_t v14 = *v12;
              }
              else
              {
                uint64_t v19 = v12[1];
                if (v19)
                {
                  uint64_t v20 = *(void **)(*(void *)v19 + 136);
                  if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                    uint64_t v14 = v12[1];
                  }
                  else {
                    uint64_t v14 = 0;
                  }
                  if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                    return v14 & 0xFFFFFFFFFFFFFFFBLL;
                  }
                  if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                    && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                  {
                    uint64_t v73 = *v12;
                    uint64_t v70 = v19;
                    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
                    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
                    {
                      mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v79);
                      mlir::IntegerAttr::getValue((uint64_t)&v70, (llvm::APInt *)&v76);
                      int v22 = llvm::APInt::compareSigned((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                      if (v22 <= 0) {
                        uint64_t v23 = (const llvm::APInt *)&v76;
                      }
                      else {
                        uint64_t v23 = (const llvm::APInt *)&v79;
                      }
                      unsigned int v24 = v80;
                      if (v22 <= 0) {
                        unsigned int v24 = v77;
                      }
                      DWORD2(v88) = v24;
                      if (v24 >= 0x41) {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v88, v23);
                      }
                      uint64_t v25 = *(void *)v23;
                      DWORD2(v90) = v24;
                      *(void *)&long long v90 = v25;
                      LOBYTE(v91[0]) = 1;
                      if (v77 >= 0x41 && v76) {
                        MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                      }
                      if (v80 >= 0x41 && v79) {
                        MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                      }
                      uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v90);
                      if (!LOBYTE(v91[0])) {
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    if (mlir::DenseElementsAttr::classof(*v12)) {
                      uint64_t v26 = v18;
                    }
                    else {
                      uint64_t v26 = 0;
                    }
                    *(void *)&long long v90 = v26;
                    if (v26
                      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)
                      && ((v27 = v12[1], !mlir::DenseElementsAttr::classof(v27)) ? (uint64_t v28 = 0) : (uint64_t v28 = v27),
                          (*(void *)&long long v90 = v28) != 0
                       && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)))
                    {
                      uint64_t v29 = v12[1];
                      uint64_t v73 = *v12;
                      uint64_t v70 = v29;
                      uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
                      if (v30 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70))
                      {
                        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v90);
                        long long v88 = v90;
                        long long v89 = v91[0];
                        mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v79);
                        mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v90);
                        long long v88 = v90;
                        long long v89 = v91[0];
                        mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v76);
                        int v31 = llvm::APInt::compareSigned((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                        if (v31 <= 0) {
                          int v32 = (const llvm::APInt *)&v76;
                        }
                        else {
                          int v32 = (const llvm::APInt *)&v79;
                        }
                        unsigned int v33 = v80;
                        if (v31 <= 0) {
                          unsigned int v33 = v77;
                        }
                        DWORD2(v88) = v33;
                        if (v33 >= 0x41) {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v88, v32);
                        }
                        uint64_t v34 = *(void *)v32;
                        DWORD2(v90) = v33;
                        *(void *)&long long v90 = v34;
                        LOBYTE(v91[0]) = 1;
                        if (v77 >= 0x41 && v76) {
                          MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                        }
                        if (v80 >= 0x41 && v79) {
                          MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                        }
                        uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                        uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v35, (llvm::APInt *)&v90, 1);
                        if (!LOBYTE(v91[0])) {
                          return v14 & 0xFFFFFFFFFFFFFFFBLL;
                        }
LABEL_64:
                        if (DWORD2(v90) >= 0x41 && (void)v90) {
                          MEMORY[0x21667D390](v90, 0x1000C8000313F17);
                        }
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                    }
                    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                    }
                    {
                      uint64_t v36 = (void *)*v12;
                      uint64_t v37 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v36 + 8) : 0;
                      uint64_t v84 = v36;
                      uint64_t v85 = v37;
                      uint64_t v38 = (void *)v12[1];
                      uint64_t v39 = v38 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                      v83[0] = v38;
                      v83[1] = v39;
                      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v84);
                      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v83))
                      {
                        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v84, (uint64_t)&v88);
                        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v83, (uint64_t)&v79);
                        uint64_t v14 = 0;
                        int v42 = v82;
                        if (BYTE8(v89) && v82)
                        {
                          LOWORD(v76) = v88;
                          if ((_BYTE)v88) {
                            uint64_t v77 = *((void *)&v88 + 1);
                          }
                          else {
                            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v88 + 1) + 16))(&v77);
                          }
                          uint64_t v78 = v89;
                          LOWORD(v73) = v79;
                          if ((_BYTE)v79) {
                            uint64_t v74 = v80;
                          }
                          else {
                            (*(void (**)(uint64_t *__return_ptr))(*(void *)v80 + 16))(&v74);
                          }
                          uint64_t v75 = v81;
                          *(void *)&long long v90 = v91;
                          *((void *)&v90 + 1) = 0x400000000;
                          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v90, NumElements);
                          uint64_t v44 = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                          if (v44)
                          {
                            uint64_t v45 = v44;
                            uint64_t v46 = v78;
                            while (1)
                            {
                              uint64_t v47 = BYTE1(v76) ? 0 : v46;
                              if ((_BYTE)v76)
                              {
                                int v48 = (const llvm::APInt *)(v77 + 16 * v47);
                                unsigned int v69 = *((_DWORD *)v48 + 2);
                                if (v69 > 0x40) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v68, v48);
                                }
                                uint64_t v68 = *(void *)v48;
                              }
                              else
                              {
                                (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 24))(&v68);
                              }
                              uint64_t v49 = BYTE1(v73) ? 0 : v75;
                              if ((_BYTE)v73)
                              {
                                uint64_t v50 = (const llvm::APInt *)(v74 + 16 * v49);
                                unsigned int v67 = *((_DWORD *)v50 + 2);
                                if (v67 > 0x40) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v66, v50);
                                }
                                uint64_t v66 = *(void *)v50;
                              }
                              else
                              {
                                (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 24))(&v66);
                              }
                              int v51 = llvm::APInt::compareSigned((llvm::APInt *)&v68, (const llvm::APInt *)&v66);
                              if (v51 <= 0) {
                                uint64_t v52 = (const llvm::APInt *)&v66;
                              }
                              else {
                                uint64_t v52 = (const llvm::APInt *)&v68;
                              }
                              unsigned int v53 = v69;
                              if (v51 <= 0) {
                                unsigned int v53 = v67;
                              }
                              unsigned int v87 = v53;
                              if (v53 >= 0x41) {
                                llvm::APInt::initSlowCase((llvm::APInt *)v86, v52);
                              }
                              uint64_t v54 = *(void *)v52;
                              unsigned int v71 = v53;
                              uint64_t v70 = v54;
                              char v72 = 1;
                              if (v67 >= 0x41 && v66) {
                                MEMORY[0x21667D390](v66, 0x1000C8000313F17);
                              }
                              if (v69 >= 0x41 && v68) {
                                MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                              }
                              if (!v72) {
                                break;
                              }
                              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v90, (unint64_t)&v70, 1);
                              uint64_t v56 = (llvm::APInt *)(v90 + 16 * DWORD2(v90));
                              unsigned int v57 = *((_DWORD *)Address + 2);
                              *((_DWORD *)v56 + 2) = v57;
                              if (v57 > 0x40) {
                                llvm::APInt::initSlowCase(v56, (const llvm::APInt *)Address);
                              }
                              *(void *)uint64_t v56 = *(void *)Address;
                              ++DWORD2(v90);
                              if (v72 && v71 >= 0x41 && v70) {
                                MEMORY[0x21667D390](v70, 0x1000C8000313F17);
                              }
                              uint64_t v46 = ++v78;
                              ++v75;
                              if (!--v45) {
                                goto LABEL_154;
                              }
                            }
                            uint64_t v14 = 0;
                          }
                          else
                          {
LABEL_154:
                            uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                            uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)v90, DWORD2(v90));
                          }
                          uint64_t v59 = (char *)v90;
                          if (DWORD2(v90))
                          {
                            uint64_t v60 = 16 * DWORD2(v90);
                            do
                            {
                              if (*(_DWORD *)&v59[v60 - 8] >= 0x41u)
                              {
                                uint64_t v61 = *(void *)&v59[v60 - 16];
                                if (v61) {
                                  MEMORY[0x21667D390](v61, 0x1000C8000313F17);
                                }
                              }
                              v60 -= 16;
                            }
                            while (v60);
                            uint64_t v59 = (char *)v90;
                          }
                          if (v59 != (char *)v91) {
                            free(v59);
                          }
                          if (!(_BYTE)v73)
                          {
                            uint64_t v62 = v74;
                            uint64_t v74 = 0;
                            if (v62) {
                              (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
                            }
                          }
                          if (!(_BYTE)v76)
                          {
                            uint64_t v63 = v77;
                            uint64_t v77 = 0;
                            if (v63) {
                              (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
                            }
                          }
                          int v42 = v82;
                        }
                        if (v42)
                        {
                          if (!(_BYTE)v79)
                          {
                            uint64_t v64 = v80;
                            uint64_t v80 = 0;
                            if (v64) {
                              (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
                            }
                          }
                        }
                        if (BYTE8(v89))
                        {
                          if (!(_BYTE)v88)
                          {
                            uint64_t v65 = *((void *)&v88 + 1);
                            *((void *)&v88 + 1) = 0;
                            if (v65) {
                              (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                            }
                          }
                        }
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                    }
                  }
                }
                uint64_t v14 = 0;
              }
            }
          }
          else
          {
            uint64_t v14 = 0;
            long long v90 = 0uLL;
          }
        }
        else
        {
          long long v90 = 0uLL;
        }
      }
    }
    return v14 & 0xFFFFFFFFFFFFFFFBLL;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v88, v6);
  unsigned int v9 = DWORD2(v90);
  if (v8)
  {
    if (DWORD2(v90) <= 0x40)
    {
      if ((void)v90 == ~(-1 << (BYTE8(v90) - 1)))
      {
        uint64_t v10 = 1;
LABEL_14:
        uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v10 + 24) | 4;
        goto LABEL_15;
      }
      if ((void)v90 != 1 << (BYTE8(v90) - 1)) {
        goto LABEL_21;
      }
LABEL_12:
      uint64_t v10 = 0;
      goto LABEL_14;
    }
    uint64_t v2 = (DWORD2(v90) - 1);
    if ((*(void *)(v90 + 8 * (v2 >> 6)) >> (BYTE8(v90) - 1)))
    {
      if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v90) == v2) {
        goto LABEL_12;
      }
      LODWORD(v10) = 1;
    }
    else
    {
      uint64_t v10 = 1;
      if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v90) == v2) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = v90;
    if ((void)v90) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
LABEL_15:
  LODWORD(v10) = v8 ^ 1;
  if (v9 < 0x41 || (uint64_t v11 = v90) == 0)
  {
LABEL_20:
    if (!v10) {
      return v2;
    }
    goto LABEL_21;
  }
LABEL_17:
  MEMORY[0x21667D390](v11, 0x1000C8000313F17);
  if (v10) {
    goto LABEL_21;
  }
  return v2;
}

uint64_t mlir::arith::MaxUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v90) = 1;
  *(void *)&long long v90 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v88 = &v90;
  if (!v6) {
    goto LABEL_17;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v88, v6);
  char v9 = v8;
  unsigned int v10 = DWORD2(v90);
  if (v8)
  {
    if (DWORD2(v90))
    {
      if (DWORD2(v90) > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v90) != v10)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v90) != v10)
          {
            if ((void)v90) {
              MEMORY[0x21667D390](v90, 0x1000C8000313F17);
            }
LABEL_17:
            uint64_t v12 = *(uint64_t **)(a2 + 40);
            uint64_t canMapOperands = *v12;
            if (*v12
              && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              uint64_t v14 = *v12;
            }
            else
            {
              uint64_t v14 = v12[1];
              if (!v14
                || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
              {
                if (canMapOperands)
                {
                  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
                  {
                    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
                    *(void *)&long long v90 = canMapOperands;
                    *((void *)&v90 + 1) = v15;
                    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
                  }
                  else
                  {
                    uint64_t canMapOperands = 0;
                    long long v90 = 0uLL;
                  }
                }
                else
                {
                  long long v90 = 0uLL;
                }
                uint64_t v14 = v12[1];
                if (v14)
                {
                  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
                  {
                    uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
                    *(void *)&long long v90 = v14;
                    *((void *)&v90 + 1) = v16;
                    uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
                    uint64_t v14 = 0;
                    if (canMapOperands && v17 && canMapOperands == v17)
                    {
                      uint64_t v18 = *v12;
                      if (*v12
                        && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                      {
                        uint64_t v14 = *v12;
                      }
                      else
                      {
                        uint64_t v19 = v12[1];
                        if (v19)
                        {
                          uint64_t v20 = *(void **)(*(void *)v19 + 136);
                          if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                            uint64_t v14 = v12[1];
                          }
                          else {
                            uint64_t v14 = 0;
                          }
                          if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                          if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                            && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                          {
                            uint64_t v73 = *v12;
                            uint64_t v70 = v19;
                            uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
                            if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
                            {
                              mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v79);
                              mlir::IntegerAttr::getValue((uint64_t)&v70, (llvm::APInt *)&v76);
                              int v22 = llvm::APInt::compare((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                              if (v22 <= 0) {
                                uint64_t v23 = (const llvm::APInt *)&v76;
                              }
                              else {
                                uint64_t v23 = (const llvm::APInt *)&v79;
                              }
                              unsigned int v24 = v80;
                              if (v22 <= 0) {
                                unsigned int v24 = v77;
                              }
                              DWORD2(v88) = v24;
                              if (v24 >= 0x41) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v88, v23);
                              }
                              uint64_t v25 = *(void *)v23;
                              DWORD2(v90) = v24;
                              *(void *)&long long v90 = v25;
                              LOBYTE(v91[0]) = 1;
                              if (v77 >= 0x41 && v76) {
                                MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                              }
                              if (v80 >= 0x41 && v79) {
                                MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                              }
                              uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v90);
                              if (!LOBYTE(v91[0])) {
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                              goto LABEL_60;
                            }
                          }
                          else
                          {
                            if (mlir::DenseElementsAttr::classof(*v12)) {
                              uint64_t v26 = v18;
                            }
                            else {
                              uint64_t v26 = 0;
                            }
                            *(void *)&long long v90 = v26;
                            if (v26
                              && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)
                              && ((v27 = v12[1], !mlir::DenseElementsAttr::classof(v27)) ? (uint64_t v28 = 0) : (uint64_t v28 = v27),
                                  (*(void *)&long long v90 = v28) != 0
                               && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)))
                            {
                              uint64_t v29 = v12[1];
                              uint64_t v73 = *v12;
                              uint64_t v70 = v29;
                              uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
                              if (v30 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70))
                              {
                                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v90);
                                long long v88 = v90;
                                long long v89 = v91[0];
                                mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v79);
                                mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v90);
                                long long v88 = v90;
                                long long v89 = v91[0];
                                mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v76);
                                int v31 = llvm::APInt::compare((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                                if (v31 <= 0) {
                                  int v32 = (const llvm::APInt *)&v76;
                                }
                                else {
                                  int v32 = (const llvm::APInt *)&v79;
                                }
                                unsigned int v33 = v80;
                                if (v31 <= 0) {
                                  unsigned int v33 = v77;
                                }
                                DWORD2(v88) = v33;
                                if (v33 >= 0x41) {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v88, v32);
                                }
                                uint64_t v34 = *(void *)v32;
                                DWORD2(v90) = v33;
                                *(void *)&long long v90 = v34;
                                LOBYTE(v91[0]) = 1;
                                if (v77 >= 0x41 && v76) {
                                  MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                                }
                                if (v80 >= 0x41 && v79) {
                                  MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                                }
                                uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v35, (llvm::APInt *)&v90, 1);
                                if (!LOBYTE(v91[0])) {
                                  return v14 & 0xFFFFFFFFFFFFFFFBLL;
                                }
LABEL_60:
                                if (DWORD2(v90) >= 0x41 && (void)v90) {
                                  MEMORY[0x21667D390](v90, 0x1000C8000313F17);
                                }
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                            }
                            else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                                   && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                            }
                            {
                              uint64_t v36 = (void *)*v12;
                              uint64_t v37 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v36 + 8) : 0;
                              uint64_t v84 = v36;
                              uint64_t v85 = v37;
                              uint64_t v38 = (void *)v12[1];
                              uint64_t v39 = v38 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                              v83[0] = v38;
                              v83[1] = v39;
                              uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v84);
                              if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v83))
                              {
                                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v84, (uint64_t)&v88);
                                mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v83, (uint64_t)&v79);
                                uint64_t v14 = 0;
                                int v42 = v82;
                                if (BYTE8(v89) && v82)
                                {
                                  LOWORD(v76) = v88;
                                  if ((_BYTE)v88) {
                                    uint64_t v77 = *((void *)&v88 + 1);
                                  }
                                  else {
                                    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v88 + 1) + 16))(&v77);
                                  }
                                  uint64_t v78 = v89;
                                  LOWORD(v73) = v79;
                                  if ((_BYTE)v79) {
                                    uint64_t v74 = v80;
                                  }
                                  else {
                                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v80 + 16))(&v74);
                                  }
                                  uint64_t v75 = v81;
                                  *(void *)&long long v90 = v91;
                                  *((void *)&v90 + 1) = 0x400000000;
                                  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                                  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v90, NumElements);
                                  uint64_t v44 = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                                  if (v44)
                                  {
                                    uint64_t v45 = v44;
                                    uint64_t v46 = v78;
                                    while (1)
                                    {
                                      uint64_t v47 = BYTE1(v76) ? 0 : v46;
                                      if ((_BYTE)v76)
                                      {
                                        int v48 = (const llvm::APInt *)(v77 + 16 * v47);
                                        unsigned int v69 = *((_DWORD *)v48 + 2);
                                        if (v69 > 0x40) {
                                          llvm::APInt::initSlowCase((llvm::APInt *)&v68, v48);
                                        }
                                        uint64_t v68 = *(void *)v48;
                                      }
                                      else
                                      {
                                        (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 24))(&v68);
                                      }
                                      uint64_t v49 = BYTE1(v73) ? 0 : v75;
                                      if ((_BYTE)v73)
                                      {
                                        uint64_t v50 = (const llvm::APInt *)(v74 + 16 * v49);
                                        unsigned int v67 = *((_DWORD *)v50 + 2);
                                        if (v67 > 0x40) {
                                          llvm::APInt::initSlowCase((llvm::APInt *)&v66, v50);
                                        }
                                        uint64_t v66 = *(void *)v50;
                                      }
                                      else
                                      {
                                        (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 24))(&v66);
                                      }
                                      int v51 = llvm::APInt::compare((llvm::APInt *)&v68, (const llvm::APInt *)&v66);
                                      if (v51 <= 0) {
                                        uint64_t v52 = (const llvm::APInt *)&v66;
                                      }
                                      else {
                                        uint64_t v52 = (const llvm::APInt *)&v68;
                                      }
                                      unsigned int v53 = v69;
                                      if (v51 <= 0) {
                                        unsigned int v53 = v67;
                                      }
                                      unsigned int v87 = v53;
                                      if (v53 >= 0x41) {
                                        llvm::APInt::initSlowCase((llvm::APInt *)v86, v52);
                                      }
                                      uint64_t v54 = *(void *)v52;
                                      unsigned int v71 = v53;
                                      uint64_t v70 = v54;
                                      char v72 = 1;
                                      if (v67 >= 0x41 && v66) {
                                        MEMORY[0x21667D390](v66, 0x1000C8000313F17);
                                      }
                                      if (v69 >= 0x41 && v68) {
                                        MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                                      }
                                      if (!v72) {
                                        break;
                                      }
                                      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v90, (unint64_t)&v70, 1);
                                      uint64_t v56 = (llvm::APInt *)(v90 + 16 * DWORD2(v90));
                                      unsigned int v57 = *((_DWORD *)Address + 2);
                                      *((_DWORD *)v56 + 2) = v57;
                                      if (v57 > 0x40) {
                                        llvm::APInt::initSlowCase(v56, (const llvm::APInt *)Address);
                                      }
                                      *(void *)uint64_t v56 = *(void *)Address;
                                      ++DWORD2(v90);
                                      if (v72 && v71 >= 0x41 && v70) {
                                        MEMORY[0x21667D390](v70, 0x1000C8000313F17);
                                      }
                                      uint64_t v46 = ++v78;
                                      ++v75;
                                      if (!--v45) {
                                        goto LABEL_154;
                                      }
                                    }
                                    uint64_t v14 = 0;
                                  }
                                  else
                                  {
LABEL_154:
                                    uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                    uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)v90, DWORD2(v90));
                                  }
                                  uint64_t v59 = (char *)v90;
                                  if (DWORD2(v90))
                                  {
                                    uint64_t v60 = 16 * DWORD2(v90);
                                    do
                                    {
                                      if (*(_DWORD *)&v59[v60 - 8] >= 0x41u)
                                      {
                                        uint64_t v61 = *(void *)&v59[v60 - 16];
                                        if (v61) {
                                          MEMORY[0x21667D390](v61, 0x1000C8000313F17);
                                        }
                                      }
                                      v60 -= 16;
                                    }
                                    while (v60);
                                    uint64_t v59 = (char *)v90;
                                  }
                                  if (v59 != (char *)v91) {
                                    free(v59);
                                  }
                                  if (!(_BYTE)v73)
                                  {
                                    uint64_t v62 = v74;
                                    uint64_t v74 = 0;
                                    if (v62) {
                                      (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
                                    }
                                  }
                                  if (!(_BYTE)v76)
                                  {
                                    uint64_t v63 = v77;
                                    uint64_t v77 = 0;
                                    if (v63) {
                                      (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
                                    }
                                  }
                                  int v42 = v82;
                                }
                                if (v42)
                                {
                                  if (!(_BYTE)v79)
                                  {
                                    uint64_t v64 = v80;
                                    uint64_t v80 = 0;
                                    if (v64) {
                                      (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
                                    }
                                  }
                                }
                                if (BYTE8(v89))
                                {
                                  if (!(_BYTE)v88)
                                  {
                                    uint64_t v65 = *((void *)&v88 + 1);
                                    *((void *)&v88 + 1) = 0;
                                    if (v65) {
                                      (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                                    }
                                  }
                                }
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
                            }
                          }
                        }
                        uint64_t v14 = 0;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v14 = 0;
                    long long v90 = 0uLL;
                  }
                }
                else
                {
                  long long v90 = 0uLL;
                }
              }
            }
            return v14 & 0xFFFFFFFFFFFFFFFBLL;
          }
          uint64_t v11 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v11 = v90;
        if ((void)v90 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v90))
        {
          if ((void)v90) {
            goto LABEL_17;
          }
          goto LABEL_12;
        }
      }
    }
    uint64_t v11 = 1;
LABEL_12:
    uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v11 + 24) | 4;
  }
  if (v10 >= 0x41 && (void)v90) {
    MEMORY[0x21667D390](v90, 0x1000C8000313F17);
  }
  if ((v9 & 1) == 0) {
    goto LABEL_17;
  }
  return v2;
}

uint64_t mlir::arith::MinimumFOp::fold(uint64_t a1, uint64_t a2)
{
  v108[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 == *(void *)(v2 + 56)) {
    return v3 | 4;
  }
  uint64_t v5 = *(uint64_t **)(a2 + 48);
  uint64_t v6 = v5[1];
  uint64_t v100 = mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
      return v3 | 4;
    }
    uint64_t v5 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v100 = canMapOperands;
      uint64_t v101 = v11;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
    }
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
  }
  uint64_t v12 = (void *)v5[1];
  if (!v12)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    uint64_t v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v10 = v5[1];
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5)) {
      int v22 = v15;
    }
    else {
      int v22 = 0;
    }
    uint64_t v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (unsigned int v24 = 0) : (unsigned int v24 = (void *)v23),
          (uint64_t v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      uint64_t v25 = v5[1];
      uint64_t v86 = *v5;
      uint64_t v95 = v25;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        uint64_t v27 = (llvm::APFloatBase *)llvm::minimum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        uint64_t v28 = (void *)v98[0];
        uint64_t v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        }
        char v103 = 1;
        if (v29 == (void *)v98[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        }
        if (v29 == (void *)v105[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        }
        if (v29 == (void *)v108[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        }
        if (v103)
        {
          uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103) {
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v29 != (void *)v101) {
            goto LABEL_69;
          }
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
    }
    {
      uint64_t v30 = (void *)*v5;
      uint64_t v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      uint64_t v91 = v30;
      uint64_t v92 = v31;
      int v32 = (void *)v5[1];
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        uint64_t v10 = 0;
        int v35 = v89;
        if (v106 && v89)
        {
          char v82 = v104[0];
          char v83 = v104[1];
          if (v104[0]) {
            uint64_t v84 = (llvm::APFloatBase *)v105[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v105[0] + 16))(&v84);
          }
          uint64_t v85 = v105[1];
          __int16 v79 = v86;
          if ((_BYTE)v86) {
            uint64_t v80 = v87;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v87 + 16))(&v80);
          }
          uint64_t v81 = v88;
          uint64_t v100 = v102;
          uint64_t v101 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            unint64_t v97 = 0;
            uint64_t v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            uint64_t v38 = v37;
            uint64_t v39 = (void **)v100;
            uint64_t v40 = v101;
            if (v101)
            {
              uint64_t v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              int v42 = (void *)((char *)v38 + 8);
              uint64_t v43 = 32 * v40;
              uint64_t v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  int v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43) {
                    goto LABEL_91;
                  }
                }
                int v42 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              uint64_t v39 = (void **)v100;
              if (v101)
              {
                uint64_t v45 = (char *)v100 - 24;
                uint64_t v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    uint64_t v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46) {
                      goto LABEL_96;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                uint64_t v39 = (void **)v100;
              }
            }
            int v48 = v97;
            if (v39 != (void **)v102) {
              free(v39);
            }
            uint64_t v100 = v38;
            HIDWORD(v101) = v48;
          }
          uint64_t v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = v85;
            while (1)
            {
              uint64_t v52 = v83 ? 0 : v51;
              if (v82)
              {
                unsigned int v53 = (char *)v84 + 32 * v52;
                uint64_t v55 = (void *)*((void *)v53 + 1);
                uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v96, v54);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v84 + 24))(&v95);
              }
              uint64_t v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                unsigned int v57 = (char *)v80 + 32 * v56;
                uint64_t v59 = (void *)*((void *)v57 + 1);
                uint64_t v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v94, v58);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
                }
              }
              else
              {
                uint64_t v61 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v80 + 24))(&v93);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::minimum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              }
              char v99 = 1;
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              }
              if (v60 == (void *)v94[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              }
              if (v60 == (void *)v96[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              }
              if (!v99) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              uint64_t v64 = (llvm::detail::IEEEFloat *)((char *)v100 + 32 * v101 + 8);
              uint64_t v66 = (void *)*((void *)Address + 1);
              uint64_t v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              }
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
                }
              }
              uint64_t v51 = ++v85;
              ++v81;
              if (!--v50) {
                goto LABEL_139;
              }
            }
            uint64_t v10 = 0;
          }
          else
          {
LABEL_139:
            uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            uint64_t v10 = (uint64_t)v62;
          }
          uint64_t v68 = (char *)v100;
          uint64_t v69 = v101;
          if (v101)
          {
            uint64_t v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            unsigned int v71 = v68 - 24;
            uint64_t v72 = 32 * v69;
            do
            {
              while (1)
              {
                uint64_t v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72) {
                  goto LABEL_146;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            uint64_t v68 = (char *)v100;
          }
          if (v68 != v102) {
            free(v68);
          }
          if (!(_BYTE)v79)
          {
            uint64_t v74 = v80;
            uint64_t v80 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          if (!v82)
          {
            uint64_t v75 = v84;
            uint64_t v84 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
          int v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            uint64_t v76 = v87;
            unsigned int v87 = 0;
            if (v76) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v76 + 8))(v76);
            }
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            uint64_t v77 = v105[0];
            v105[0] = 0;
            if (v77) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  uint64_t v86 = *v5;
  uint64_t v95 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95)) {
    goto LABEL_75;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  uint64_t v19 = (llvm::APFloatBase *)llvm::minimum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  uint64_t v20 = (void *)v98[0];
  uint64_t v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  }
  char v103 = 1;
  if (v21 == (void *)v98[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  }
  if (v21 == (void *)v105[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  }
  if (v21 == (void *)v108[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  }
  if (!v103) {
    goto LABEL_75;
  }
  uint64_t v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MinNumFOp::fold(uint64_t a1, uint64_t a2)
{
  v108[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void *)(v2 + 24);
  if (v3 == *(void *)(v2 + 56)) {
    return v3 | 4;
  }
  uint64_t v5 = *(uint64_t **)(a2 + 48);
  uint64_t v6 = v5[1];
  uint64_t v100 = mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v6)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v100, v6))
    {
      uint64_t v3 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
      return v3 | 4;
    }
    uint64_t v5 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v5;
  if (*v5
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v10 = v5[1];
  if (v10 && *(_UNKNOWN **)(*(void *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      uint64_t v100 = canMapOperands;
      uint64_t v101 = v11;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
    }
    else
    {
      uint64_t canMapOperands = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
    }
  }
  else
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
  }
  uint64_t v12 = (void *)v5[1];
  if (!v12)
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8))
  {
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    goto LABEL_75;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  uint64_t v14 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v100);
  uint64_t v10 = 0;
  if (!canMapOperands || !v14 || canMapOperands != (void *)v14) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = (void *)*v5;
  if (*v5 && *(_UNKNOWN **)(*(void *)v15 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v10 = *v5;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v16 = v5[1];
  if (!v16)
  {
LABEL_75:
    uint64_t v10 = 0;
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v10 = v5[1];
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v15 || v17 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v17 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v15 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v5)) {
      int v22 = v15;
    }
    else {
      int v22 = 0;
    }
    uint64_t v100 = v22;
    if (v22
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)
      && ((v23 = v5[1], !mlir::DenseElementsAttr::classof(v23)) ? (unsigned int v24 = 0) : (unsigned int v24 = (void *)v23),
          (uint64_t v100 = v24) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v100)))
    {
      uint64_t v25 = v5[1];
      uint64_t v86 = *v5;
      uint64_t v95 = v25;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v86);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v95))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v86, (uint64_t)v107);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v95, (uint64_t)v104);
        uint64_t v27 = (llvm::APFloatBase *)llvm::minnum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
        uint64_t v28 = (void *)v98[0];
        uint64_t v29 = llvm::APFloatBase::PPCDoubleDouble(v27);
        if (v29 == v28) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
        }
        char v103 = 1;
        if (v29 == (void *)v98[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
        }
        if (v29 == (void *)v105[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
        }
        if (v29 == (void *)v108[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
        }
        if (v103)
        {
          uint64_t v78 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v10 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v78, (uint64_t)&v100, 1);
          if (!v103) {
            return v10 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v29 != (void *)v101) {
            goto LABEL_69;
          }
          goto LABEL_177;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v5[1] + 8))
    }
    {
      uint64_t v30 = (void *)*v5;
      uint64_t v31 = *v5 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      uint64_t v91 = v30;
      uint64_t v92 = v31;
      int v32 = (void *)v5[1];
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v32 + 8) : 0;
      v90[0] = v32;
      v90[1] = v33;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v90))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v91, (uint64_t)v104);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v90, (uint64_t)&v86);
        uint64_t v10 = 0;
        int v35 = v89;
        if (v106 && v89)
        {
          char v82 = v104[0];
          char v83 = v104[1];
          if (v104[0]) {
            uint64_t v84 = (llvm::APFloatBase *)v105[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v105[0] + 16))(&v84);
          }
          uint64_t v85 = v105[1];
          __int16 v79 = v86;
          if ((_BYTE)v86) {
            uint64_t v80 = v87;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v87 + 16))(&v80);
          }
          uint64_t v81 = v88;
          uint64_t v100 = v102;
          uint64_t v101 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (NumElements > HIDWORD(v101))
          {
            unint64_t v97 = 0;
            uint64_t v37 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v100, v102, NumElements, 32, &v97);
            uint64_t v38 = v37;
            uint64_t v39 = (void **)v100;
            uint64_t v40 = v101;
            if (v101)
            {
              uint64_t v41 = llvm::APFloatBase::PPCDoubleDouble(v37);
              int v42 = (void *)((char *)v38 + 8);
              uint64_t v43 = 32 * v40;
              uint64_t v44 = v39 + 1;
              do
              {
                while (v41 == *v44)
                {
                  int v42 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v42, v44) + 4;
                  v44 += 4;
                  v43 -= 32;
                  if (!v43) {
                    goto LABEL_91;
                  }
                }
                int v42 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v42, (uint64_t)v44) + 32);
                v44 += 4;
                v43 -= 32;
              }
              while (v43);
LABEL_91:
              uint64_t v39 = (void **)v100;
              if (v101)
              {
                uint64_t v45 = (char *)v100 - 24;
                uint64_t v46 = 32 * v101;
                do
                {
                  while (1)
                  {
                    uint64_t v47 = (llvm::detail::DoubleAPFloat *)&v45[v46];
                    if (v41 != *(void **)&v45[v46]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v47);
                    v46 -= 32;
                    if (!v46) {
                      goto LABEL_96;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v47);
                  v46 -= 32;
                }
                while (v46);
LABEL_96:
                uint64_t v39 = (void **)v100;
              }
            }
            int v48 = v97;
            if (v39 != (void **)v102) {
              free(v39);
            }
            uint64_t v100 = v38;
            HIDWORD(v101) = v48;
          }
          uint64_t v49 = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = v85;
            while (1)
            {
              uint64_t v52 = v83 ? 0 : v51;
              if (v82)
              {
                unsigned int v53 = (char *)v84 + 32 * v52;
                uint64_t v55 = (void *)*((void *)v53 + 1);
                uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v84) == v55) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v96, v54);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v96, v54);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v84 + 24))(&v95);
              }
              uint64_t v56 = HIBYTE(v79) ? 0 : v81;
              if ((_BYTE)v79)
              {
                unsigned int v57 = (char *)v80 + 32 * v56;
                uint64_t v59 = (void *)*((void *)v57 + 1);
                uint64_t v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 8);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v80);
                if (v60 == v59) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v94, v58);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v94, v58);
                }
              }
              else
              {
                uint64_t v61 = (llvm::APFloatBase *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v80 + 24))(&v93);
                uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v61);
              }
              llvm::minnum((llvm *)&v95, (const llvm::APFloat *)&v93, (uint64_t)v107);
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v98, v108);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v98, (uint64_t)v108);
              }
              char v99 = 1;
              if (v60 == (void *)v108[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
              }
              if (v60 == (void *)v94[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v94);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v94);
              }
              if (v60 == (void *)v96[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v96);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v96);
              }
              if (!v99) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v100, (unint64_t)&v97, 1);
              uint64_t v64 = (llvm::detail::IEEEFloat *)((char *)v100 + 32 * v101 + 8);
              uint64_t v66 = (void *)*((void *)Address + 1);
              uint64_t v65 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v66) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v64, v65);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v64, v65);
              }
              LODWORD(v101) = v101 + 1;
              if (v99)
              {
                if (v60 == (void *)v98[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
                }
              }
              uint64_t v51 = ++v85;
              ++v81;
              if (!--v50) {
                goto LABEL_139;
              }
            }
            uint64_t v10 = 0;
          }
          else
          {
LABEL_139:
            uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v62 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v67, (uint64_t)v100, v101);
            uint64_t v10 = (uint64_t)v62;
          }
          uint64_t v68 = (char *)v100;
          uint64_t v69 = v101;
          if (v101)
          {
            uint64_t v70 = llvm::APFloatBase::PPCDoubleDouble(v62);
            unsigned int v71 = v68 - 24;
            uint64_t v72 = 32 * v69;
            do
            {
              while (1)
              {
                uint64_t v73 = (llvm::detail::DoubleAPFloat *)&v71[v72];
                if (v70 != *(void **)&v71[v72]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v73);
                v72 -= 32;
                if (!v72) {
                  goto LABEL_146;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v73);
              v72 -= 32;
            }
            while (v72);
LABEL_146:
            uint64_t v68 = (char *)v100;
          }
          if (v68 != v102) {
            free(v68);
          }
          if (!(_BYTE)v79)
          {
            uint64_t v74 = v80;
            uint64_t v80 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          if (!v82)
          {
            uint64_t v75 = v84;
            uint64_t v84 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
          int v35 = v89;
        }
        if (v35)
        {
          if (!(_BYTE)v86)
          {
            uint64_t v76 = v87;
            unsigned int v87 = 0;
            if (v76) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v76 + 8))(v76);
            }
          }
        }
        if (v106)
        {
          if (!v104[0])
          {
            uint64_t v77 = v105[0];
            v105[0] = 0;
            if (v77) {
              (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            }
          }
        }
        return v10 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_75;
  }
  uint64_t v86 = *v5;
  uint64_t v95 = v16;
  uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v86);
  if (v18 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v95)) {
    goto LABEL_75;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v86, (uint64_t)v107);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v95, (uint64_t)v104);
  uint64_t v19 = (llvm::APFloatBase *)llvm::minnum((llvm *)v107, (const llvm::APFloat *)v104, (uint64_t)&v97);
  uint64_t v20 = (void *)v98[0];
  uint64_t v21 = llvm::APFloatBase::PPCDoubleDouble(v19);
  if (v21 == v20) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v101, v98);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v101, (uint64_t)v98);
  }
  char v103 = 1;
  if (v21 == (void *)v98[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v98);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v98);
  }
  if (v21 == (void *)v105[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v105);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v105);
  }
  if (v21 == (void *)v108[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v108);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v108);
  }
  if (!v103) {
    goto LABEL_75;
  }
  uint64_t v10 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v100);
  if (v103)
  {
    if (v21 != (void *)v101)
    {
LABEL_69:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v101);
      return v10 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_177:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v101);
  }
  return v10 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::MinSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v90) = 1;
  *(void *)&long long v90 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v88 = &v90;
  if (!v6) {
    goto LABEL_22;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v88, v6);
  unsigned int v9 = DWORD2(v90);
  if (!v8) {
    goto LABEL_16;
  }
  if (DWORD2(v90) <= 0x40)
  {
    uint64_t v10 = 1;
    if ((void)v90 != 1 << (BYTE8(v90) - 1))
    {
      if ((void)v90 != ~(-1 << (BYTE8(v90) - 1))) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
LABEL_15:
    uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v10 + 24) | 4;
LABEL_16:
    LODWORD(v10) = v8 ^ 1;
    if (v9 >= 0x41)
    {
      uint64_t v11 = v90;
      if ((void)v90)
      {
LABEL_18:
        MEMORY[0x21667D390](v11, 0x1000C8000313F17);
        if ((v10 & 1) == 0) {
          return v2;
        }
LABEL_22:
        uint64_t v12 = *(uint64_t **)(a2 + 40);
        uint64_t canMapOperands = *v12;
        if (*v12
          && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v14 = *v12;
        }
        else
        {
          uint64_t v14 = v12[1];
          if (!v14
            || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            if (canMapOperands)
            {
              if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
              {
                uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
                *(void *)&long long v90 = canMapOperands;
                *((void *)&v90 + 1) = v15;
                uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
              }
              else
              {
                uint64_t canMapOperands = 0;
                long long v90 = 0uLL;
              }
            }
            else
            {
              long long v90 = 0uLL;
            }
            uint64_t v14 = v12[1];
            if (v14)
            {
              if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
              {
                uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
                *(void *)&long long v90 = v14;
                *((void *)&v90 + 1) = v16;
                uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
                uint64_t v14 = 0;
                if (canMapOperands && v17 && canMapOperands == v17)
                {
                  uint64_t v18 = *v12;
                  if (*v12
                    && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                  {
                    uint64_t v14 = *v12;
                  }
                  else
                  {
                    uint64_t v19 = v12[1];
                    if (v19)
                    {
                      uint64_t v20 = *(void **)(*(void *)v19 + 136);
                      if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                        uint64_t v14 = v12[1];
                      }
                      else {
                        uint64_t v14 = 0;
                      }
                      if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                        return v14 & 0xFFFFFFFFFFFFFFFBLL;
                      }
                      if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                        && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                      {
                        uint64_t v73 = *v12;
                        uint64_t v70 = v19;
                        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
                        if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
                        {
                          mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v79);
                          mlir::IntegerAttr::getValue((uint64_t)&v70, (llvm::APInt *)&v76);
                          int v22 = llvm::APInt::compareSigned((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                          if (v22 >= 0) {
                            uint64_t v23 = (const llvm::APInt *)&v76;
                          }
                          else {
                            uint64_t v23 = (const llvm::APInt *)&v79;
                          }
                          unsigned int v24 = v80;
                          if (v22 >= 0) {
                            unsigned int v24 = v77;
                          }
                          DWORD2(v88) = v24;
                          if (v24 >= 0x41) {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v88, v23);
                          }
                          uint64_t v25 = *(void *)v23;
                          DWORD2(v90) = v24;
                          *(void *)&long long v90 = v25;
                          LOBYTE(v91[0]) = 1;
                          if (v77 >= 0x41 && v76) {
                            MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                          }
                          if (v80 >= 0x41 && v79) {
                            MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                          }
                          uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v90);
                          if (!LOBYTE(v91[0])) {
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                          goto LABEL_65;
                        }
                      }
                      else
                      {
                        if (mlir::DenseElementsAttr::classof(*v12)) {
                          uint64_t v26 = v18;
                        }
                        else {
                          uint64_t v26 = 0;
                        }
                        *(void *)&long long v90 = v26;
                        if (v26
                          && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)
                          && ((v27 = v12[1], !mlir::DenseElementsAttr::classof(v27)) ? (uint64_t v28 = 0) : (uint64_t v28 = v27),
                              (*(void *)&long long v90 = v28) != 0
                           && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)))
                        {
                          uint64_t v29 = v12[1];
                          uint64_t v73 = *v12;
                          uint64_t v70 = v29;
                          uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
                          if (v30 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70))
                          {
                            mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v90);
                            long long v88 = v90;
                            long long v89 = v91[0];
                            mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v79);
                            mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v90);
                            long long v88 = v90;
                            long long v89 = v91[0];
                            mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v76);
                            int v31 = llvm::APInt::compareSigned((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                            if (v31 >= 0) {
                              int v32 = (const llvm::APInt *)&v76;
                            }
                            else {
                              int v32 = (const llvm::APInt *)&v79;
                            }
                            unsigned int v33 = v80;
                            if (v31 >= 0) {
                              unsigned int v33 = v77;
                            }
                            DWORD2(v88) = v33;
                            if (v33 >= 0x41) {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v88, v32);
                            }
                            uint64_t v34 = *(void *)v32;
                            DWORD2(v90) = v33;
                            *(void *)&long long v90 = v34;
                            LOBYTE(v91[0]) = 1;
                            if (v77 >= 0x41 && v76) {
                              MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                            }
                            if (v80 >= 0x41 && v79) {
                              MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                            }
                            uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                            uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v35, (llvm::APInt *)&v90, 1);
                            if (!LOBYTE(v91[0])) {
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
LABEL_65:
                            if (DWORD2(v90) >= 0x41 && (void)v90) {
                              MEMORY[0x21667D390](v90, 0x1000C8000313F17);
                            }
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                        }
                        else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                               && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                        }
                        {
                          uint64_t v36 = (void *)*v12;
                          uint64_t v37 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v36 + 8) : 0;
                          uint64_t v84 = v36;
                          uint64_t v85 = v37;
                          uint64_t v38 = (void *)v12[1];
                          uint64_t v39 = v38 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                          v83[0] = v38;
                          v83[1] = v39;
                          uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v84);
                          if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v83))
                          {
                            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v84, (uint64_t)&v88);
                            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v83, (uint64_t)&v79);
                            uint64_t v14 = 0;
                            int v42 = v82;
                            if (BYTE8(v89) && v82)
                            {
                              LOWORD(v76) = v88;
                              if ((_BYTE)v88) {
                                uint64_t v77 = *((void *)&v88 + 1);
                              }
                              else {
                                (*(void (**)(uint64_t *__return_ptr))(**((void **)&v88 + 1) + 16))(&v77);
                              }
                              uint64_t v78 = v89;
                              LOWORD(v73) = v79;
                              if ((_BYTE)v79) {
                                uint64_t v74 = v80;
                              }
                              else {
                                (*(void (**)(uint64_t *__return_ptr))(*(void *)v80 + 16))(&v74);
                              }
                              uint64_t v75 = v81;
                              *(void *)&long long v90 = v91;
                              *((void *)&v90 + 1) = 0x400000000;
                              unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                              llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v90, NumElements);
                              uint64_t v44 = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                              if (v44)
                              {
                                uint64_t v45 = v44;
                                uint64_t v46 = v78;
                                while (1)
                                {
                                  uint64_t v47 = BYTE1(v76) ? 0 : v46;
                                  if ((_BYTE)v76)
                                  {
                                    int v48 = (const llvm::APInt *)(v77 + 16 * v47);
                                    unsigned int v69 = *((_DWORD *)v48 + 2);
                                    if (v69 > 0x40) {
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v68, v48);
                                    }
                                    uint64_t v68 = *(void *)v48;
                                  }
                                  else
                                  {
                                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 24))(&v68);
                                  }
                                  uint64_t v49 = BYTE1(v73) ? 0 : v75;
                                  if ((_BYTE)v73)
                                  {
                                    uint64_t v50 = (const llvm::APInt *)(v74 + 16 * v49);
                                    unsigned int v67 = *((_DWORD *)v50 + 2);
                                    if (v67 > 0x40) {
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v66, v50);
                                    }
                                    uint64_t v66 = *(void *)v50;
                                  }
                                  else
                                  {
                                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 24))(&v66);
                                  }
                                  int v51 = llvm::APInt::compareSigned((llvm::APInt *)&v68, (const llvm::APInt *)&v66);
                                  if (v51 >= 0) {
                                    uint64_t v52 = (const llvm::APInt *)&v66;
                                  }
                                  else {
                                    uint64_t v52 = (const llvm::APInt *)&v68;
                                  }
                                  unsigned int v53 = v69;
                                  if (v51 >= 0) {
                                    unsigned int v53 = v67;
                                  }
                                  unsigned int v87 = v53;
                                  if (v53 >= 0x41) {
                                    llvm::APInt::initSlowCase((llvm::APInt *)v86, v52);
                                  }
                                  uint64_t v54 = *(void *)v52;
                                  unsigned int v71 = v53;
                                  uint64_t v70 = v54;
                                  char v72 = 1;
                                  if (v67 >= 0x41 && v66) {
                                    MEMORY[0x21667D390](v66, 0x1000C8000313F17);
                                  }
                                  if (v69 >= 0x41 && v68) {
                                    MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                                  }
                                  if (!v72) {
                                    break;
                                  }
                                  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v90, (unint64_t)&v70, 1);
                                  uint64_t v56 = (llvm::APInt *)(v90 + 16 * DWORD2(v90));
                                  unsigned int v57 = *((_DWORD *)Address + 2);
                                  *((_DWORD *)v56 + 2) = v57;
                                  if (v57 > 0x40) {
                                    llvm::APInt::initSlowCase(v56, (const llvm::APInt *)Address);
                                  }
                                  *(void *)uint64_t v56 = *(void *)Address;
                                  ++DWORD2(v90);
                                  if (v72 && v71 >= 0x41 && v70) {
                                    MEMORY[0x21667D390](v70, 0x1000C8000313F17);
                                  }
                                  uint64_t v46 = ++v78;
                                  ++v75;
                                  if (!--v45) {
                                    goto LABEL_155;
                                  }
                                }
                                uint64_t v14 = 0;
                              }
                              else
                              {
LABEL_155:
                                uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)v90, DWORD2(v90));
                              }
                              uint64_t v59 = (char *)v90;
                              if (DWORD2(v90))
                              {
                                uint64_t v60 = 16 * DWORD2(v90);
                                do
                                {
                                  if (*(_DWORD *)&v59[v60 - 8] >= 0x41u)
                                  {
                                    uint64_t v61 = *(void *)&v59[v60 - 16];
                                    if (v61) {
                                      MEMORY[0x21667D390](v61, 0x1000C8000313F17);
                                    }
                                  }
                                  v60 -= 16;
                                }
                                while (v60);
                                uint64_t v59 = (char *)v90;
                              }
                              if (v59 != (char *)v91) {
                                free(v59);
                              }
                              if (!(_BYTE)v73)
                              {
                                uint64_t v62 = v74;
                                uint64_t v74 = 0;
                                if (v62) {
                                  (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
                                }
                              }
                              if (!(_BYTE)v76)
                              {
                                uint64_t v63 = v77;
                                uint64_t v77 = 0;
                                if (v63) {
                                  (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
                                }
                              }
                              int v42 = v82;
                            }
                            if (v42)
                            {
                              if (!(_BYTE)v79)
                              {
                                uint64_t v64 = v80;
                                uint64_t v80 = 0;
                                if (v64) {
                                  (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
                                }
                              }
                            }
                            if (BYTE8(v89))
                            {
                              if (!(_BYTE)v88)
                              {
                                uint64_t v65 = *((void *)&v88 + 1);
                                *((void *)&v88 + 1) = 0;
                                if (v65) {
                                  (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                                }
                              }
                            }
                            return v14 & 0xFFFFFFFFFFFFFFFBLL;
                          }
                        }
                      }
                    }
                    uint64_t v14 = 0;
                  }
                }
              }
              else
              {
                uint64_t v14 = 0;
                long long v90 = 0uLL;
              }
            }
            else
            {
              long long v90 = 0uLL;
            }
          }
        }
        return v14 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_21;
  }
  uint64_t v2 = (DWORD2(v90) - 1);
  if ((*(void *)(v90 + 8 * (v2 >> 6)) >> (BYTE8(v90) - 1)))
  {
    uint64_t v10 = 1;
    if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v90) == v2) {
      goto LABEL_15;
    }
    uint64_t v11 = v90;
    if ((void)v90) {
      goto LABEL_18;
    }
  }
  else
  {
    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v90) == v2)
    {
LABEL_14:
      uint64_t v10 = 0;
      goto LABEL_15;
    }
    LODWORD(v10) = 1;
    uint64_t v11 = v90;
    if ((void)v90) {
      goto LABEL_18;
    }
  }
LABEL_21:
  if (v10) {
    goto LABEL_22;
  }
  return v2;
}

uint64_t mlir::arith::MinUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 == *(void *)(v3 + 56)) {
    return v4 | 4;
  }
  DWORD2(v90) = 1;
  *(void *)&long long v90 = 0;
  uint64_t v6 = *(void *)(*(void *)(a2 + 40) + 8);
  *(void *)&long long v88 = &v90;
  if (!v6) {
    goto LABEL_19;
  }
  int v8 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v88, v6);
  char v9 = v8;
  unsigned int v10 = DWORD2(v90);
  if (v8)
  {
    if (DWORD2(v90) > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v90) != v10)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v90) != v10)
        {
          if ((void)v90) {
            MEMORY[0x21667D390](v90, 0x1000C8000313F17);
          }
LABEL_19:
          uint64_t v12 = *(uint64_t **)(a2 + 40);
          uint64_t canMapOperands = *v12;
          if (*v12
            && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            uint64_t v14 = *v12;
          }
          else
          {
            uint64_t v14 = v12[1];
            if (!v14
              || *(_UNKNOWN **)(*(void *)v14 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
            {
              if (canMapOperands)
              {
                if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
                {
                  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
                  *(void *)&long long v90 = canMapOperands;
                  *((void *)&v90 + 1) = v15;
                  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
                }
                else
                {
                  uint64_t canMapOperands = 0;
                  long long v90 = 0uLL;
                }
              }
              else
              {
                long long v90 = 0uLL;
              }
              uint64_t v14 = v12[1];
              if (v14)
              {
                if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8))
                {
                  uint64_t v16 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)v14 + 8);
                  *(void *)&long long v90 = v14;
                  *((void *)&v90 + 1) = v16;
                  uint64_t v17 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v90);
                  uint64_t v14 = 0;
                  if (canMapOperands && v17 && canMapOperands == v17)
                  {
                    uint64_t v18 = *v12;
                    if (*v12
                      && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
                    {
                      uint64_t v14 = *v12;
                    }
                    else
                    {
                      uint64_t v19 = v12[1];
                      if (v19)
                      {
                        uint64_t v20 = *(void **)(*(void *)v19 + 136);
                        if (v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                          uint64_t v14 = v12[1];
                        }
                        else {
                          uint64_t v14 = 0;
                        }
                        if (!v18 || v20 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
                          return v14 & 0xFFFFFFFFFFFFFFFBLL;
                        }
                        if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
                          && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
                        {
                          uint64_t v73 = *v12;
                          uint64_t v70 = v19;
                          uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
                          if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
                          {
                            mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v79);
                            mlir::IntegerAttr::getValue((uint64_t)&v70, (llvm::APInt *)&v76);
                            int v22 = llvm::APInt::compare((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                            if (v22 >= 0) {
                              uint64_t v23 = (const llvm::APInt *)&v76;
                            }
                            else {
                              uint64_t v23 = (const llvm::APInt *)&v79;
                            }
                            unsigned int v24 = v80;
                            if (v22 >= 0) {
                              unsigned int v24 = v77;
                            }
                            DWORD2(v88) = v24;
                            if (v24 >= 0x41) {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v88, v23);
                            }
                            uint64_t v25 = *(void *)v23;
                            DWORD2(v90) = v24;
                            *(void *)&long long v90 = v25;
                            LOBYTE(v91[0]) = 1;
                            if (v77 >= 0x41 && v76) {
                              MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                            }
                            if (v80 >= 0x41 && v79) {
                              MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                            }
                            uint64_t v14 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v90);
                            if (!LOBYTE(v91[0])) {
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                            goto LABEL_62;
                          }
                        }
                        else
                        {
                          if (mlir::DenseElementsAttr::classof(*v12)) {
                            uint64_t v26 = v18;
                          }
                          else {
                            uint64_t v26 = 0;
                          }
                          *(void *)&long long v90 = v26;
                          if (v26
                            && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)
                            && ((v27 = v12[1], !mlir::DenseElementsAttr::classof(v27)) ? (uint64_t v28 = 0) : (uint64_t v28 = v27),
                                (*(void *)&long long v90 = v28) != 0
                             && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v90)))
                          {
                            uint64_t v29 = v12[1];
                            uint64_t v73 = *v12;
                            uint64_t v70 = v29;
                            uint64_t v30 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
                            if (v30 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70))
                            {
                              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v90);
                              long long v88 = v90;
                              long long v89 = v91[0];
                              mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v79);
                              mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v90);
                              long long v88 = v90;
                              long long v89 = v91[0];
                              mlir::DenseElementsAttr::IntElementIterator::operator*(&v88, (llvm::APInt *)&v76);
                              int v31 = llvm::APInt::compare((llvm::APInt *)&v79, (const llvm::APInt *)&v76);
                              if (v31 >= 0) {
                                int v32 = (const llvm::APInt *)&v76;
                              }
                              else {
                                int v32 = (const llvm::APInt *)&v79;
                              }
                              unsigned int v33 = v80;
                              if (v31 >= 0) {
                                unsigned int v33 = v77;
                              }
                              DWORD2(v88) = v33;
                              if (v33 >= 0x41) {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v88, v32);
                              }
                              uint64_t v34 = *(void *)v32;
                              DWORD2(v90) = v33;
                              *(void *)&long long v90 = v34;
                              LOBYTE(v91[0]) = 1;
                              if (v77 >= 0x41 && v76) {
                                MEMORY[0x21667D390](v76, 0x1000C8000313F17);
                              }
                              if (v80 >= 0x41 && v79) {
                                MEMORY[0x21667D390](v79, 0x1000C8000313F17);
                              }
                              uint64_t v35 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                              uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v35, (llvm::APInt *)&v90, 1);
                              if (!LOBYTE(v91[0])) {
                                return v14 & 0xFFFFFFFFFFFFFFFBLL;
                              }
LABEL_62:
                              if (DWORD2(v90) >= 0x41 && (void)v90) {
                                MEMORY[0x21667D390](v90, 0x1000C8000313F17);
                              }
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                          }
                          else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v12 + 8) {
                                 && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v12[1] + 8))
                          }
                          {
                            uint64_t v36 = (void *)*v12;
                            uint64_t v37 = *v12 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v36 + 8) : 0;
                            uint64_t v84 = v36;
                            uint64_t v85 = v37;
                            uint64_t v38 = (void *)v12[1];
                            uint64_t v39 = v38 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v38 + 8) : 0;
                            v83[0] = v38;
                            v83[1] = v39;
                            uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v84);
                            if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v83))
                            {
                              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v84, (uint64_t)&v88);
                              mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v83, (uint64_t)&v79);
                              uint64_t v14 = 0;
                              int v42 = v82;
                              if (BYTE8(v89) && v82)
                              {
                                LOWORD(v76) = v88;
                                if ((_BYTE)v88) {
                                  uint64_t v77 = *((void *)&v88 + 1);
                                }
                                else {
                                  (*(void (**)(uint64_t *__return_ptr))(**((void **)&v88 + 1) + 16))(&v77);
                                }
                                uint64_t v78 = v89;
                                LOWORD(v73) = v79;
                                if ((_BYTE)v79) {
                                  uint64_t v74 = v80;
                                }
                                else {
                                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v80 + 16))(&v74);
                                }
                                uint64_t v75 = v81;
                                *(void *)&long long v90 = v91;
                                *((void *)&v90 + 1) = 0x400000000;
                                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                                llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v90, NumElements);
                                uint64_t v44 = mlir::ElementsAttr::getNumElements((uint64_t)v84, v85);
                                if (v44)
                                {
                                  uint64_t v45 = v44;
                                  uint64_t v46 = v78;
                                  while (1)
                                  {
                                    uint64_t v47 = BYTE1(v76) ? 0 : v46;
                                    if ((_BYTE)v76)
                                    {
                                      int v48 = (const llvm::APInt *)(v77 + 16 * v47);
                                      unsigned int v69 = *((_DWORD *)v48 + 2);
                                      if (v69 > 0x40) {
                                        llvm::APInt::initSlowCase((llvm::APInt *)&v68, v48);
                                      }
                                      uint64_t v68 = *(void *)v48;
                                    }
                                    else
                                    {
                                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 24))(&v68);
                                    }
                                    uint64_t v49 = BYTE1(v73) ? 0 : v75;
                                    if ((_BYTE)v73)
                                    {
                                      uint64_t v50 = (const llvm::APInt *)(v74 + 16 * v49);
                                      unsigned int v67 = *((_DWORD *)v50 + 2);
                                      if (v67 > 0x40) {
                                        llvm::APInt::initSlowCase((llvm::APInt *)&v66, v50);
                                      }
                                      uint64_t v66 = *(void *)v50;
                                    }
                                    else
                                    {
                                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 24))(&v66);
                                    }
                                    int v51 = llvm::APInt::compare((llvm::APInt *)&v68, (const llvm::APInt *)&v66);
                                    if (v51 >= 0) {
                                      uint64_t v52 = (const llvm::APInt *)&v66;
                                    }
                                    else {
                                      uint64_t v52 = (const llvm::APInt *)&v68;
                                    }
                                    unsigned int v53 = v69;
                                    if (v51 >= 0) {
                                      unsigned int v53 = v67;
                                    }
                                    unsigned int v87 = v53;
                                    if (v53 >= 0x41) {
                                      llvm::APInt::initSlowCase((llvm::APInt *)v86, v52);
                                    }
                                    uint64_t v54 = *(void *)v52;
                                    unsigned int v71 = v53;
                                    uint64_t v70 = v54;
                                    char v72 = 1;
                                    if (v67 >= 0x41 && v66) {
                                      MEMORY[0x21667D390](v66, 0x1000C8000313F17);
                                    }
                                    if (v69 >= 0x41 && v68) {
                                      MEMORY[0x21667D390](v68, 0x1000C8000313F17);
                                    }
                                    if (!v72) {
                                      break;
                                    }
                                    Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v90, (unint64_t)&v70, 1);
                                    uint64_t v56 = (llvm::APInt *)(v90 + 16 * DWORD2(v90));
                                    unsigned int v57 = *((_DWORD *)Address + 2);
                                    *((_DWORD *)v56 + 2) = v57;
                                    if (v57 > 0x40) {
                                      llvm::APInt::initSlowCase(v56, (const llvm::APInt *)Address);
                                    }
                                    *(void *)uint64_t v56 = *(void *)Address;
                                    ++DWORD2(v90);
                                    if (v72 && v71 >= 0x41 && v70) {
                                      MEMORY[0x21667D390](v70, 0x1000C8000313F17);
                                    }
                                    uint64_t v46 = ++v78;
                                    ++v75;
                                    if (!--v45) {
                                      goto LABEL_154;
                                    }
                                  }
                                  uint64_t v14 = 0;
                                }
                                else
                                {
LABEL_154:
                                  uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                                  uint64_t v14 = mlir::DenseElementsAttr::get(canMapOperands, v58, (llvm::APInt *)v90, DWORD2(v90));
                                }
                                uint64_t v59 = (char *)v90;
                                if (DWORD2(v90))
                                {
                                  uint64_t v60 = 16 * DWORD2(v90);
                                  do
                                  {
                                    if (*(_DWORD *)&v59[v60 - 8] >= 0x41u)
                                    {
                                      uint64_t v61 = *(void *)&v59[v60 - 16];
                                      if (v61) {
                                        MEMORY[0x21667D390](v61, 0x1000C8000313F17);
                                      }
                                    }
                                    v60 -= 16;
                                  }
                                  while (v60);
                                  uint64_t v59 = (char *)v90;
                                }
                                if (v59 != (char *)v91) {
                                  free(v59);
                                }
                                if (!(_BYTE)v73)
                                {
                                  uint64_t v62 = v74;
                                  uint64_t v74 = 0;
                                  if (v62) {
                                    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
                                  }
                                }
                                if (!(_BYTE)v76)
                                {
                                  uint64_t v63 = v77;
                                  uint64_t v77 = 0;
                                  if (v63) {
                                    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
                                  }
                                }
                                int v42 = v82;
                              }
                              if (v42)
                              {
                                if (!(_BYTE)v79)
                                {
                                  uint64_t v64 = v80;
                                  uint64_t v80 = 0;
                                  if (v64) {
                                    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
                                  }
                                }
                              }
                              if (BYTE8(v89))
                              {
                                if (!(_BYTE)v88)
                                {
                                  uint64_t v65 = *((void *)&v88 + 1);
                                  *((void *)&v88 + 1) = 0;
                                  if (v65) {
                                    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
                                  }
                                }
                              }
                              return v14 & 0xFFFFFFFFFFFFFFFBLL;
                            }
                          }
                        }
                      }
                      uint64_t v14 = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v14 = 0;
                  long long v90 = 0uLL;
                }
              }
              else
              {
                long long v90 = 0uLL;
              }
            }
          }
          return v14 & 0xFFFFFFFFFFFFFFFBLL;
        }
        uint64_t v11 = 0;
        goto LABEL_14;
      }
    }
    else if ((void)v90)
    {
      uint64_t v11 = 0;
      if (DWORD2(v90) && (void)v90 != 0xFFFFFFFFFFFFFFFFLL >> -BYTE8(v90)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }
    uint64_t v11 = 1;
LABEL_14:
    uint64_t v2 = *(void *)(*(void *)(*(void *)a1 + 72) + 32 * v11 + 24) | 4;
  }
  if (v10 >= 0x41 && (void)v90) {
    MEMORY[0x21667D390](v90, 0x1000C8000313F17);
  }
  if ((v9 & 1) == 0) {
    goto LABEL_19;
  }
  return v2;
}

uint64_t mlir::arith::MulFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  char v99 = mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      char v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      char v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    char v99 = 0;
    uint64_t v100 = 0;
  }
  unsigned int v10 = (void *)v3[1];
  if (!v10)
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  char v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v20 = v13;
    }
    else {
      uint64_t v20 = 0;
    }
    char v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (char v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        uint64_t v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      long long v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            char v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            uint64_t v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          char v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            uint64_t v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              uint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              uint64_t v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              int v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  uint64_t v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                uint64_t v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                uint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            char v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                int v51 = (char *)v83 + 32 * v50;
                unsigned int v53 = (void *)*((void *)v51 + 1);
                uint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                uint64_t v55 = (char *)v79 + 32 * v54;
                unsigned int v57 = (void *)*((void *)v55 + 1);
                uint64_t v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              uint64_t v58 = (void *)v93[0];
              uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::IEEEFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              uint64_t v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          unsigned int v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            unsigned int v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            uint64_t v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                char v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            unsigned int v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            uint64_t v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            uint64_t v74 = v83;
            char v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            uint64_t v75 = v86;
            uint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::MulFOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::DivFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = v3[1];
  char v99 = mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke;
  if (v4)
  {
    if (mlir::detail::constant_float_predicate_matcher::match((llvm::APFloatBase *)&v99, v4)) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    uint64_t v3 = *(uint64_t **)(a2 + 48);
  }
  uint64_t canMapOperands = (void *)*v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = v3[1];
  if (v8 && *(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      char v99 = canMapOperands;
      uint64_t v100 = v9;
      uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
    }
    else
    {
      uint64_t canMapOperands = 0;
      char v99 = 0;
      uint64_t v100 = 0;
    }
  }
  else
  {
    char v99 = 0;
    uint64_t v100 = 0;
  }
  unsigned int v10 = (void *)v3[1];
  if (!v10)
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8))
  {
    char v99 = 0;
    uint64_t v100 = 0;
    goto LABEL_67;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
  char v99 = v10;
  uint64_t v100 = v11;
  uint64_t v12 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v99);
  uint64_t v8 = 0;
  if (!canMapOperands || !v12 || canMapOperands != (void *)v12) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = (void *)*v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v13 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v8 = *v3;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v14 = v3[1];
  if (!v14)
  {
LABEL_67:
    uint64_t v8 = 0;
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v15 = *(void **)(*(void *)v14 + 136);
  if (v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    uint64_t v8 = v3[1];
  }
  else {
    uint64_t v8 = 0;
  }
  if (!v13 || v15 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (v15 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v13 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v20 = v13;
    }
    else {
      uint64_t v20 = 0;
    }
    char v99 = v20;
    if (v20
      && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)
      && ((uint64_t v21 = v3[1], !mlir::DenseElementsAttr::classof(v21)) ? (v22 = 0) : (v22 = (void *)v21),
          (char v99 = v22) != 0 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v99)))
    {
      uint64_t v23 = v3[1];
      uint64_t v85 = *v3;
      uint64_t v94 = v23;
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v85);
      if (Value == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v94))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v85, (uint64_t)&v96);
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v94, (uint64_t)v103);
        mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
        uint64_t v25 = (void *)v104[0];
        uint64_t v27 = llvm::APFloatBase::PPCDoubleDouble(v26);
        if (v27 == v25) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
        }
        if (v27 == (void *)v97[0]) {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
        }
        else {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
        }
        if (v102)
        {
          uint64_t v77 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v8 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v77, (uint64_t)&v99, 1);
          if (!v102) {
            return v8 & 0xFFFFFFFFFFFFFFFBLL;
          }
          if (v27 != (void *)v100) {
            goto LABEL_61;
          }
          goto LABEL_157;
        }
      }
    }
    else if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8) {
           && mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    }
    {
      uint64_t v28 = (void *)*v3;
      uint64_t v29 = *v3 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v28 + 8) : 0;
      long long v90 = v28;
      uint64_t v91 = v29;
      uint64_t v30 = (void *)v3[1];
      uint64_t v31 = v30 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v30 + 8) : 0;
      v89[0] = v30;
      v89[1] = v31;
      uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v90);
      if (Type == mlir::ElementsAttr::getType((mlir::ElementsAttr *)v89))
      {
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v90, (uint64_t)v103);
        mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v89, (uint64_t)&v85);
        uint64_t v8 = 0;
        int v33 = v88;
        if (v105 && v88)
        {
          char v81 = v103[0];
          char v82 = v103[1];
          if (v103[0]) {
            char v83 = (llvm::APFloatBase *)v104[0];
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v104[0] + 16))(&v83);
          }
          uint64_t v84 = v104[1];
          __int16 v78 = v85;
          if ((_BYTE)v85) {
            uint64_t v79 = v86;
          }
          else {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v86 + 16))(&v79);
          }
          uint64_t v80 = v87;
          char v99 = v101;
          uint64_t v100 = 0x400000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (NumElements > HIDWORD(v100))
          {
            unint64_t v96 = 0;
            uint64_t v35 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v99, v101, NumElements, 32, &v96);
            uint64_t v36 = v35;
            uint64_t v37 = (void **)v99;
            uint64_t v38 = v100;
            if (v100)
            {
              uint64_t v39 = llvm::APFloatBase::PPCDoubleDouble(v35);
              uint64_t v40 = (void *)((char *)v36 + 8);
              uint64_t v41 = 32 * v38;
              int v42 = v37 + 1;
              do
              {
                while (v39 == *v42)
                {
                  uint64_t v40 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v40, v42) + 4;
                  v42 += 4;
                  v41 -= 32;
                  if (!v41) {
                    goto LABEL_83;
                  }
                }
                uint64_t v40 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v40, (uint64_t)v42) + 32);
                v42 += 4;
                v41 -= 32;
              }
              while (v41);
LABEL_83:
              uint64_t v37 = (void **)v99;
              if (v100)
              {
                uint64_t v43 = (char *)v99 - 24;
                uint64_t v44 = 32 * v100;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = (llvm::detail::DoubleAPFloat *)&v43[v44];
                    if (v39 != *(void **)&v43[v44]) {
                      break;
                    }
                    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v45);
                    v44 -= 32;
                    if (!v44) {
                      goto LABEL_88;
                    }
                  }
                  llvm::detail::IEEEFloat::~IEEEFloat(v45);
                  v44 -= 32;
                }
                while (v44);
LABEL_88:
                uint64_t v37 = (void **)v99;
              }
            }
            int v46 = v96;
            if (v37 != (void **)v101) {
              free(v37);
            }
            char v99 = v36;
            HIDWORD(v100) = v46;
          }
          uint64_t v47 = mlir::ElementsAttr::getNumElements((uint64_t)v90, v91);
          if (v47)
          {
            uint64_t v48 = v47;
            uint64_t v49 = v84;
            while (1)
            {
              uint64_t v50 = v82 ? 0 : v49;
              if (v81)
              {
                int v51 = (char *)v83 + 32 * v50;
                unsigned int v53 = (void *)*((void *)v51 + 1);
                uint64_t v52 = (const llvm::detail::DoubleAPFloat *)(v51 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v83) == v53) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v95, v52);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v95, v52);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v83 + 24))(&v94);
              }
              uint64_t v54 = HIBYTE(v78) ? 0 : v80;
              if ((_BYTE)v78)
              {
                uint64_t v55 = (char *)v79 + 32 * v54;
                unsigned int v57 = (void *)*((void *)v55 + 1);
                uint64_t v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v79) == v57) {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v56);
                }
                else {
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v56);
                }
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v79 + 24))(&v92);
              }
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v96, (uint64_t)&v94, (uint64_t)&v92);
              uint64_t v58 = (void *)v93[0];
              uint64_t v60 = llvm::APFloatBase::PPCDoubleDouble(v59);
              if (v60 == v58) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
              }
              if (v60 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v98) {
                break;
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v99, (unint64_t)&v96, 1);
              uint64_t v63 = (llvm::detail::IEEEFloat *)((char *)v99 + 32 * v100 + 8);
              uint64_t v65 = (void *)*((void *)Address + 1);
              uint64_t v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              if (v60 == v65) {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
              }
              else {
                llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
              }
              LODWORD(v100) = v100 + 1;
              if (v98)
              {
                if (v60 == (void *)v97[0]) {
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
                }
                else {
                  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
                }
              }
              uint64_t v49 = ++v84;
              ++v80;
              if (!--v48) {
                goto LABEL_125;
              }
            }
            uint64_t v8 = 0;
          }
          else
          {
LABEL_125:
            uint64_t v66 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
            uint64_t v61 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v66, (uint64_t)v99, v100);
            uint64_t v8 = (uint64_t)v61;
          }
          unsigned int v67 = (char *)v99;
          uint64_t v68 = v100;
          if (v100)
          {
            unsigned int v69 = llvm::APFloatBase::PPCDoubleDouble(v61);
            uint64_t v70 = v67 - 24;
            uint64_t v71 = 32 * v68;
            do
            {
              while (1)
              {
                char v72 = (llvm::detail::DoubleAPFloat *)&v70[v71];
                if (v69 != *(void **)&v70[v71]) {
                  break;
                }
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v72);
                v71 -= 32;
                if (!v71) {
                  goto LABEL_132;
                }
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v72);
              v71 -= 32;
            }
            while (v71);
LABEL_132:
            unsigned int v67 = (char *)v99;
          }
          if (v67 != v101) {
            free(v67);
          }
          if (!(_BYTE)v78)
          {
            uint64_t v73 = v79;
            uint64_t v79 = 0;
            if (v73) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
            }
          }
          if (!v81)
          {
            uint64_t v74 = v83;
            char v83 = 0;
            if (v74) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v74 + 8))(v74);
            }
          }
          int v33 = v88;
        }
        if (v33)
        {
          if (!(_BYTE)v85)
          {
            uint64_t v75 = v86;
            uint64_t v86 = 0;
            if (v75) {
              (*(void (**)(llvm::APFloatBase *))(*(void *)v75 + 8))(v75);
            }
          }
        }
        if (v105)
        {
          if (!v103[0])
          {
            uint64_t v76 = v104[0];
            v104[0] = 0;
            if (v76) {
              (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
            }
          }
        }
        return v8 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    goto LABEL_67;
  }
  uint64_t v85 = *v3;
  uint64_t v94 = v14;
  uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v85);
  if (v16 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v94)) {
    goto LABEL_67;
  }
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v85, (uint64_t)&v96);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v94, (uint64_t)v103);
  mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v99, (uint64_t)&v96, (uint64_t)v103);
  uint64_t v17 = (void *)v104[0];
  uint64_t v19 = llvm::APFloatBase::PPCDoubleDouble(v18);
  if (v19 == v17) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v104);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v104);
  }
  if (v19 == (void *)v97[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v97);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v97);
  }
  if (!v102) {
    goto LABEL_67;
  }
  uint64_t v8 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v99);
  if (v102)
  {
    if (v19 != (void *)v100)
    {
LABEL_61:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v100);
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_157:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v100);
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::DivFOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

unint64_t mlir::arith::RemFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a2 + 48);
  uint64_t canMapOperands = (void *)*v2;
  if (*v2
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    uint64_t v4 = *v2;
  }
  else
  {
    uint64_t v4 = v2[1];
    if (!v4 || *(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
    {
      if (canMapOperands)
      {
        if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
        {
          uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
          unint64_t v97 = canMapOperands;
          uint64_t v98 = v5;
          uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
        }
        else
        {
          uint64_t canMapOperands = 0;
          unint64_t v97 = 0;
          uint64_t v98 = 0;
        }
      }
      else
      {
        unint64_t v97 = 0;
        uint64_t v98 = 0;
      }
      uint64_t v6 = (void *)v2[1];
      if (!v6)
      {
        unint64_t v97 = 0;
        uint64_t v98 = 0;
        goto LABEL_65;
      }
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v6 + 8))
      {
        unint64_t v97 = 0;
        uint64_t v98 = 0;
        goto LABEL_65;
      }
      uint64_t v7 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v6 + 8);
      unint64_t v97 = v6;
      uint64_t v98 = v7;
      uint64_t v8 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v97);
      uint64_t v4 = 0;
      if (canMapOperands && v8 && canMapOperands == (void *)v8)
      {
        uint64_t v9 = (void *)*v2;
        if (*v2
          && *(_UNKNOWN **)(*(void *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
        {
          uint64_t v4 = *v2;
        }
        else
        {
          uint64_t v10 = v2[1];
          if (!v10) {
            goto LABEL_65;
          }
          uint64_t v11 = *(void **)(*(void *)v10 + 136);
          if (v11 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
            uint64_t v4 = v2[1];
          }
          else {
            uint64_t v4 = 0;
          }
          if (v9 && v11 != &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
          {
            if (v11 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id
              && *(void *)(*(void *)v9 + 136) == (void)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
            {
              uint64_t v83 = *v2;
              uint64_t v92 = v10;
              uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v83);
              if (Value != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v92)) {
                goto LABEL_65;
              }
              mlir::FloatAttr::getValue((mlir::FloatAttr *)&v83, (uint64_t)&v94);
              mlir::FloatAttr::getValue((mlir::FloatAttr *)&v92, (uint64_t)v101);
              mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v97, (uint64_t)&v94, (uint64_t)v101);
              int v22 = (void *)v102[0];
              unsigned int v24 = llvm::APFloatBase::PPCDoubleDouble(v23);
              if (v24 == v22) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
              }
              if (v24 == (void *)v95[0]) {
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
              }
              else {
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
              }
              if (!v100) {
                goto LABEL_65;
              }
              uint64_t v4 = mlir::FloatAttr::get((uint64_t)canMapOperands, (uint64_t)&v97);
              if (v100)
              {
                if (v24 == (void *)v98)
                {
LABEL_155:
                  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v98);
                  return v4 & 0xFFFFFFFFFFFFFFFBLL;
                }
LABEL_59:
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v98);
              }
            }
            else
            {
              if (mlir::DenseElementsAttr::classof(*v2)) {
                uint64_t v13 = v9;
              }
              else {
                uint64_t v13 = 0;
              }
              unint64_t v97 = v13;
              if (v13 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97))
              {
                uint64_t v14 = v2[1];
                uint64_t v15 = mlir::DenseElementsAttr::classof(v14) ? (void *)v14 : 0;
                unint64_t v97 = v15;
                if (v15)
                {
                  if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v97))
                  {
                    uint64_t v16 = v2[1];
                    uint64_t v83 = *v2;
                    uint64_t v92 = v16;
                    uint64_t v17 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v83);
                    if (v17 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v92))
                    {
                      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v83, (uint64_t)&v94);
                      mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v92, (uint64_t)v101);
                      mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v97, (uint64_t)&v94, (uint64_t)v101);
                      uint64_t v18 = (void *)v102[0];
                      uint64_t v20 = llvm::APFloatBase::PPCDoubleDouble(v19);
                      if (v20 == v18) {
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
                      }
                      else {
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
                      }
                      if (v20 == (void *)v95[0]) {
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
                      }
                      else {
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
                      }
                      if (v100)
                      {
                        uint64_t v75 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                        uint64_t v4 = mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v75, (uint64_t)&v97, 1);
                        if (!v100) {
                          return v4 & 0xFFFFFFFFFFFFFFFBLL;
                        }
                        if (v20 == (void *)v98) {
                          goto LABEL_155;
                        }
                        goto LABEL_59;
                      }
                    }
LABEL_65:
                    uint64_t v4 = 0;
                    return v4 & 0xFFFFFFFFFFFFFFFBLL;
                  }
                }
              }
              if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v2 + 8)
                || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v2[1] + 8))
              {
                goto LABEL_65;
              }
              uint64_t v25 = (void *)*v2;
              uint64_t v26 = *v2 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v25 + 8) : 0;
              unsigned __int8 v88 = v25;
              uint64_t v89 = v26;
              uint64_t v27 = (void *)v2[1];
              uint64_t v28 = v27 ? mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v27 + 8) : 0;
              v87[0] = v27;
              v87[1] = v28;
              uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v88);
              if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v87)) {
                goto LABEL_65;
              }
              mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v88, (uint64_t)v101);
              mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v87, (uint64_t)&v83);
              uint64_t v4 = 0;
              int v31 = v86;
              if (v103 && v86)
              {
                char v79 = v101[0];
                char v80 = v101[1];
                if (v101[0]) {
                  char v81 = (llvm::APFloatBase *)v102[0];
                }
                else {
                  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v102[0] + 16))(&v81);
                }
                uint64_t v82 = v102[1];
                __int16 v76 = v83;
                if ((_BYTE)v83) {
                  uint64_t v77 = v84;
                }
                else {
                  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v84 + 16))(&v77);
                }
                uint64_t v78 = v85;
                unint64_t v97 = v99;
                uint64_t v98 = 0x400000000;
                unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v88, v89);
                if (NumElements > HIDWORD(v98))
                {
                  unint64_t v94 = 0;
                  int v33 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v97, v99, NumElements, 32, &v94);
                  uint64_t v34 = v33;
                  uint64_t v35 = (void **)v97;
                  uint64_t v36 = v98;
                  if (v98)
                  {
                    uint64_t v37 = llvm::APFloatBase::PPCDoubleDouble(v33);
                    uint64_t v38 = (void *)((char *)v34 + 8);
                    uint64_t v39 = 32 * v36;
                    uint64_t v40 = v35 + 1;
                    do
                    {
                      while (v37 == *v40)
                      {
                        uint64_t v38 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v38, v40) + 4;
                        v40 += 4;
                        v39 -= 32;
                        if (!v39) {
                          goto LABEL_81;
                        }
                      }
                      uint64_t v38 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v38, (uint64_t)v40) + 32);
                      v40 += 4;
                      v39 -= 32;
                    }
                    while (v39);
LABEL_81:
                    uint64_t v35 = (void **)v97;
                    if (v98)
                    {
                      uint64_t v41 = (char *)v97 - 24;
                      uint64_t v42 = 32 * v98;
                      do
                      {
                        while (1)
                        {
                          uint64_t v43 = (llvm::detail::DoubleAPFloat *)&v41[v42];
                          if (v37 != *(void **)&v41[v42]) {
                            break;
                          }
                          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v43);
                          v42 -= 32;
                          if (!v42) {
                            goto LABEL_86;
                          }
                        }
                        llvm::detail::IEEEFloat::~IEEEFloat(v43);
                        v42 -= 32;
                      }
                      while (v42);
LABEL_86:
                      uint64_t v35 = (void **)v97;
                    }
                  }
                  int v44 = v94;
                  if (v35 != (void **)v99) {
                    free(v35);
                  }
                  unint64_t v97 = v34;
                  HIDWORD(v98) = v44;
                }
                uint64_t v45 = mlir::ElementsAttr::getNumElements((uint64_t)v88, v89);
                if (v45)
                {
                  uint64_t v46 = v45;
                  uint64_t v47 = v82;
                  while (1)
                  {
                    uint64_t v48 = v80 ? 0 : v47;
                    if (v79)
                    {
                      uint64_t v49 = (char *)v81 + 32 * v48;
                      int v51 = (void *)*((void *)v49 + 1);
                      uint64_t v50 = (const llvm::detail::DoubleAPFloat *)(v49 + 8);
                      if (llvm::APFloatBase::PPCDoubleDouble(v81) == v51) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(v93, v50);
                      }
                      else {
                        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v93, v50);
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v81 + 24))(&v92);
                    }
                    uint64_t v52 = HIBYTE(v76) ? 0 : v78;
                    if ((_BYTE)v76)
                    {
                      unsigned int v53 = (char *)v77 + 32 * v52;
                      uint64_t v55 = (void *)*((void *)v53 + 1);
                      uint64_t v54 = (const llvm::detail::DoubleAPFloat *)(v53 + 8);
                      if (llvm::APFloatBase::PPCDoubleDouble(v77) == v55) {
                        llvm::detail::DoubleAPFloat::DoubleAPFloat(v91, v54);
                      }
                      else {
                        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v91, v54);
                      }
                    }
                    else
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(void *)v77 + 24))(&v90);
                    }
                    mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(&v94, (uint64_t)&v92, (uint64_t)&v90);
                    uint64_t v56 = (void *)v91[0];
                    uint64_t v58 = llvm::APFloatBase::PPCDoubleDouble(v57);
                    if (v58 == v56) {
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v91);
                    }
                    else {
                      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v91);
                    }
                    if (v58 == (void *)v93[0]) {
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v93);
                    }
                    else {
                      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v93);
                    }
                    if (!v96) {
                      break;
                    }
                    Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v97, (unint64_t)&v94, 1);
                    uint64_t v61 = (llvm::detail::IEEEFloat *)((char *)v97 + 32 * v98 + 8);
                    uint64_t v63 = (void *)*((void *)Address + 1);
                    uint64_t v62 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
                    if (v58 == v63) {
                      llvm::detail::DoubleAPFloat::DoubleAPFloat(v61, v62);
                    }
                    else {
                      llvm::detail::IEEEFloat::IEEEFloat(v61, v62);
                    }
                    LODWORD(v98) = v98 + 1;
                    if (v96)
                    {
                      if (v58 == (void *)v95[0]) {
                        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v95);
                      }
                      else {
                        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v95);
                      }
                    }
                    uint64_t v47 = ++v82;
                    ++v78;
                    if (!--v46) {
                      goto LABEL_123;
                    }
                  }
                  uint64_t v4 = 0;
                }
                else
                {
LABEL_123:
                  uint64_t v64 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
                  uint64_t v59 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get((llvm::APFloatBase *)canMapOperands, v64, (uint64_t)v97, v98);
                  uint64_t v4 = (uint64_t)v59;
                }
                uint64_t v65 = (char *)v97;
                uint64_t v66 = v98;
                if (v98)
                {
                  unsigned int v67 = llvm::APFloatBase::PPCDoubleDouble(v59);
                  uint64_t v68 = v65 - 24;
                  uint64_t v69 = 32 * v66;
                  do
                  {
                    while (1)
                    {
                      uint64_t v70 = (llvm::detail::DoubleAPFloat *)&v68[v69];
                      if (v67 != *(void **)&v68[v69]) {
                        break;
                      }
                      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v70);
                      v69 -= 32;
                      if (!v69) {
                        goto LABEL_130;
                      }
                    }
                    llvm::detail::IEEEFloat::~IEEEFloat(v70);
                    v69 -= 32;
                  }
                  while (v69);
LABEL_130:
                  uint64_t v65 = (char *)v97;
                }
                if (v65 != v99) {
                  free(v65);
                }
                if (!(_BYTE)v76)
                {
                  uint64_t v71 = v77;
                  uint64_t v77 = 0;
                  if (v71) {
                    (*(void (**)(llvm::APFloatBase *))(*(void *)v71 + 8))(v71);
                  }
                }
                if (!v79)
                {
                  char v72 = v81;
                  char v81 = 0;
                  if (v72) {
                    (*(void (**)(llvm::APFloatBase *))(*(void *)v72 + 8))(v72);
                  }
                }
                int v31 = v86;
              }
              if (v31)
              {
                if (!(_BYTE)v83)
                {
                  uint64_t v73 = v84;
                  uint64_t v84 = 0;
                  if (v73) {
                    (*(void (**)(llvm::APFloatBase *))(*(void *)v73 + 8))(v73);
                  }
                }
              }
              if (v103)
              {
                if (!v101[0])
                {
                  uint64_t v74 = v102[0];
                  v102[0] = 0;
                  if (v74) {
                    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v4 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ExtUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  v45[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v45);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    v45[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v45);
    uint64_t v6 = *(uint64_t **)(a2 + 40);
    uint64_t v7 = *v6;
    if (!*v6) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    uint64_t v8 = *(void **)(*(void *)v7 + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    unsigned int v9 = Width;
    uint64_t v10 = (void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v38 = *v6;
      mlir::IntegerAttr::getValue((uint64_t)&v38, (llvm::APInt *)&v43);
      llvm::APInt::zext((uint64_t *)&v43, v9, (uint64_t)v45);
      if (DWORD2(v43) >= 0x41 && (void)v43) {
        MEMORY[0x21667D390](v43, 0x1000C8000313F17);
      }
      uint64_t v7 = mlir::IntegerAttr::get((uint64_t)v10, (const llvm::APInt *)v45);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    else
    {
      if (mlir::DenseElementsAttr::classof(*v6)) {
        uint64_t v11 = (void *)v7;
      }
      else {
        uint64_t v11 = 0;
      }
      v45[0] = v11;
      if (!v11 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v45))
      {
        uint64_t v7 = *v6;
        if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v6 + 8))
        {
          uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v7 + 8);
          uint64_t v41 = v7;
          uint64_t v42 = v18;
          if (v7)
          {
            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v41, (uint64_t)&v43);
            if (BYTE8(v44))
            {
              LOWORD(v38) = v43;
              if ((_BYTE)v43) {
                uint64_t v39 = *((void *)&v43 + 1);
              }
              else {
                (*(void (**)(uint64_t *__return_ptr))(**((void **)&v43 + 1) + 16))(&v39);
              }
              uint64_t v40 = v44;
              v45[0] = v46;
              v45[1] = (void *)0x300000000;
              unint64_t NumElements = mlir::ElementsAttr::getNumElements(v41, v42);
              llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v45, NumElements);
              uint64_t v20 = mlir::ElementsAttr::getNumElements(v41, v42);
              if (v20)
              {
                uint64_t v21 = v20;
                uint64_t v22 = v40;
                do
                {
                  if (BYTE1(v38)) {
                    uint64_t v23 = 0;
                  }
                  else {
                    uint64_t v23 = v22;
                  }
                  if ((_BYTE)v38)
                  {
                    unsigned int v24 = (const llvm::APInt *)(v39 + 16 * v23);
                    unsigned int v35 = *((_DWORD *)v24 + 2);
                    if (v35 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v34, v24);
                    }
                    uint64_t v34 = *(void *)v24;
                  }
                  else
                  {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v39 + 24))(&v34);
                  }
                  llvm::APInt::zext(&v34, v9, (uint64_t)&v36);
                  if (v35 >= 0x41 && v34) {
                    MEMORY[0x21667D390](v34, 0x1000C8000313F17);
                  }
                  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v45, (unint64_t)&v36, 1);
                  uint64_t v26 = (llvm::APInt *)((char *)v45[0] + 16 * LODWORD(v45[1]));
                  unsigned int v27 = *((_DWORD *)Address + 2);
                  *((_DWORD *)v26 + 2) = v27;
                  if (v27 > 0x40) {
                    llvm::APInt::initSlowCase(v26, (const llvm::APInt *)Address);
                  }
                  *(void *)uint64_t v26 = *(void *)Address;
                  ++LODWORD(v45[1]);
                  if (v37 >= 0x41 && v36) {
                    MEMORY[0x21667D390](v36, 0x1000C8000313F17);
                  }
                  uint64_t v22 = ++v40;
                  --v21;
                }
                while (v21);
              }
              if (v10) {
                uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v28, (llvm::APInt *)v45[0], LODWORD(v45[1]));
              uint64_t v29 = (char *)v45[0];
              if (LODWORD(v45[1]))
              {
                uint64_t v30 = 16 * LODWORD(v45[1]);
                do
                {
                  if (*(_DWORD *)&v29[v30 - 8] >= 0x41u)
                  {
                    uint64_t v31 = *(void *)&v29[v30 - 16];
                    if (v31) {
                      MEMORY[0x21667D390](v31, 0x1000C8000313F17);
                    }
                  }
                  v30 -= 16;
                }
                while (v30);
                uint64_t v29 = (char *)v45[0];
              }
              if (v29 != (char *)v46) {
                free(v29);
              }
              if (!(_BYTE)v38)
              {
                uint64_t v32 = v39;
                uint64_t v39 = 0;
                if (v32) {
                  (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
                }
              }
              if (BYTE8(v44))
              {
                if (!(_BYTE)v43)
                {
                  uint64_t v33 = *((void *)&v43 + 1);
                  *((void *)&v43 + 1) = 0;
                  if (v33) {
                    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
                  }
                }
              }
            }
            else
            {
              uint64_t v7 = 0;
            }
          }
        }
        else
        {
          uint64_t v7 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
        }
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
      uint64_t v41 = *v6;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v41, (uint64_t)v45);
      long long v43 = *(_OWORD *)v45;
      long long v44 = v46[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v43, (llvm::APInt *)&v38);
      llvm::APInt::zext(&v38, v9, (uint64_t)v45);
      if (v39 >= 0x41 && v38) {
        MEMORY[0x21667D390](v38, 0x1000C8000313F17);
      }
      if (v10) {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v45, 1);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    if (v45[0]) {
      MEMORY[0x21667D390](v45[0], 0x1000C8000313F17);
    }
    return v7 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = *(uint64_t **)(*(void *)a1 + 72);
  uint64_t v14 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
  uint64_t v15 = (uint64_t *)v13[1];
  if (v15)
  {
    uint64_t *v15 = *v13;
    if (*v13) {
      *(void *)(*v13 + 8) = v13[1];
    }
  }
  v13[3] = (uint64_t)v14;
  v13[1] = (uint64_t)v14;
  uint64_t v16 = *v14;
  *uint64_t v13 = *v14;
  if (v16) {
    *(void *)(v16 + 8) = v13;
  }
  *uint64_t v14 = (uint64_t)v13;
  return (*(void *)a1 - 16) | 4;
}

BOOL checkWidthChangeCast<std::greater,mlir::IntegerType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((uint64_t v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v12 = ElementTypeOrSelf;
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v22 = v12;
    uint64_t v13 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8)
      || ((uint64_t v14 = *(void **)(*v13 + 136), v14 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v15 = v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v15 = 1),
          !v15 ? (BOOL v16 = v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v16 = 1),
          v16))
    {
      uint64_t v17 = mlir::getElementTypeOrSelf(v13);
      if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v21 = v18;
      if (v12) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        return 0;
      }
      else
      {
        IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
        return IntOrFloatBitWidth > mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v22);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::ExtUIOp::verify(mlir::arith::ExtUIOp *this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v36 = *(void *)this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*(void *)(v36 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(void *)(v36 - 8) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v40);
  v34[0] = v2;
  if (Width < mlir::IntegerType::getWidth((mlir::IntegerType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    uint64_t v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    uint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v6 = (char *)v41;
        uint64_t v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v5 = &v37;
        uint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      uint64_t v38 = " must be wider than operand type ";
      uint64_t v39 = 33;
      BOOL v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v11 = (char *)v41;
          BOOL v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          BOOL v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        uint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        BOOL v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            BOOL v15 = (char *)v41;
            uint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v14 = &v37;
            BOOL v15 = (char *)v41;
          }
        }
        BOOL v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)BOOL v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      BOOL v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          BOOL v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

uint64_t mlir::arith::ExtSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  v45[0] = *(void **)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v45);
  if (!DefiningOp
    || *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    v45[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v45);
    uint64_t v6 = *(uint64_t **)(a2 + 40);
    uint64_t v7 = *v6;
    if (!*v6) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    long long v8 = *(void **)(*(void *)v7 + 136);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      return v7 & 0xFFFFFFFFFFFFFFFBLL;
    }
    unsigned int v9 = Width;
    BOOL v10 = (void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (v8 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      uint64_t v38 = *v6;
      mlir::IntegerAttr::getValue((uint64_t)&v38, (llvm::APInt *)&v43);
      llvm::APInt::sext((uint64_t)&v43, v9, (uint64_t)v45);
      if (DWORD2(v43) >= 0x41 && (void)v43) {
        MEMORY[0x21667D390](v43, 0x1000C8000313F17);
      }
      uint64_t v7 = mlir::IntegerAttr::get((uint64_t)v10, (const llvm::APInt *)v45);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    else
    {
      if (mlir::DenseElementsAttr::classof(*v6)) {
        uint64_t v11 = (void *)v7;
      }
      else {
        uint64_t v11 = 0;
      }
      v45[0] = v11;
      if (!v11 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v45))
      {
        uint64_t v7 = *v6;
        if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v6 + 8))
        {
          uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v7 + 8);
          uint64_t v41 = v7;
          uint64_t v42 = v18;
          if (v7)
          {
            mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v41, (uint64_t)&v43);
            if (BYTE8(v44))
            {
              LOWORD(v38) = v43;
              if ((_BYTE)v43) {
                uint64_t v39 = *((void *)&v43 + 1);
              }
              else {
                (*(void (**)(uint64_t *__return_ptr))(**((void **)&v43 + 1) + 16))(&v39);
              }
              uint64_t v40 = v44;
              v45[0] = v46;
              v45[1] = (void *)0x300000000;
              unint64_t NumElements = mlir::ElementsAttr::getNumElements(v41, v42);
              llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v45, NumElements);
              uint64_t v20 = mlir::ElementsAttr::getNumElements(v41, v42);
              if (v20)
              {
                uint64_t v21 = v20;
                uint64_t v22 = v40;
                do
                {
                  if (BYTE1(v38)) {
                    uint64_t v23 = 0;
                  }
                  else {
                    uint64_t v23 = v22;
                  }
                  if ((_BYTE)v38)
                  {
                    uint64_t v24 = (const llvm::APInt *)(v39 + 16 * v23);
                    unsigned int v35 = *((_DWORD *)v24 + 2);
                    if (v35 > 0x40) {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v34, v24);
                    }
                    uint64_t v34 = *(void *)v24;
                  }
                  else
                  {
                    (*(void (**)(uint64_t *__return_ptr))(*(void *)v39 + 24))(&v34);
                  }
                  llvm::APInt::sext((uint64_t)&v34, v9, (uint64_t)&v36);
                  if (v35 >= 0x41 && v34) {
                    MEMORY[0x21667D390](v34, 0x1000C8000313F17);
                  }
                  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v45, (unint64_t)&v36, 1);
                  uint64_t v26 = (llvm::APInt *)((char *)v45[0] + 16 * LODWORD(v45[1]));
                  unsigned int v27 = *((_DWORD *)Address + 2);
                  *((_DWORD *)v26 + 2) = v27;
                  if (v27 > 0x40) {
                    llvm::APInt::initSlowCase(v26, (const llvm::APInt *)Address);
                  }
                  *(void *)uint64_t v26 = *(void *)Address;
                  ++LODWORD(v45[1]);
                  if (v37 >= 0x41 && v36) {
                    MEMORY[0x21667D390](v36, 0x1000C8000313F17);
                  }
                  uint64_t v22 = ++v40;
                  --v21;
                }
                while (v21);
              }
              if (v10) {
                uint64_t v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v28, (llvm::APInt *)v45[0], LODWORD(v45[1]));
              BOOL v29 = (char *)v45[0];
              if (LODWORD(v45[1]))
              {
                uint64_t v30 = 16 * LODWORD(v45[1]);
                do
                {
                  if (*(_DWORD *)&v29[v30 - 8] >= 0x41u)
                  {
                    uint64_t v31 = *(void *)&v29[v30 - 16];
                    if (v31) {
                      MEMORY[0x21667D390](v31, 0x1000C8000313F17);
                    }
                  }
                  v30 -= 16;
                }
                while (v30);
                BOOL v29 = (char *)v45[0];
              }
              if (v29 != (char *)v46) {
                free(v29);
              }
              if (!(_BYTE)v38)
              {
                uint64_t v32 = v39;
                uint64_t v39 = 0;
                if (v32) {
                  (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
                }
              }
              if (BYTE8(v44))
              {
                if (!(_BYTE)v43)
                {
                  uint64_t v33 = *((void *)&v43 + 1);
                  *((void *)&v43 + 1) = 0;
                  if (v33) {
                    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
                  }
                }
              }
            }
            else
            {
              uint64_t v7 = 0;
            }
          }
        }
        else
        {
          uint64_t v7 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
        }
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
      uint64_t v41 = *v6;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v41, (uint64_t)v45);
      long long v43 = *(_OWORD *)v45;
      long long v44 = v46[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v43, (llvm::APInt *)&v38);
      llvm::APInt::sext((uint64_t)&v38, v9, (uint64_t)v45);
      if (v39 >= 0x41 && v38) {
        MEMORY[0x21667D390](v38, 0x1000C8000313F17);
      }
      if (v10) {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v7 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v45, 1);
      if (LODWORD(v45[1]) < 0x41) {
        return v7 & 0xFFFFFFFFFFFFFFFBLL;
      }
    }
    if (v45[0]) {
      MEMORY[0x21667D390](v45[0], 0x1000C8000313F17);
    }
    return v7 & 0xFFFFFFFFFFFFFFFBLL;
  }
  long long v13 = *(uint64_t **)(*(void *)a1 + 72);
  uint64_t v14 = *(uint64_t **)(*(void *)(DefiningOp + 72) + 24);
  BOOL v15 = (uint64_t *)v13[1];
  if (v15)
  {
    uint64_t *v15 = *v13;
    if (*v13) {
      *(void *)(*v13 + 8) = v13[1];
    }
  }
  v13[3] = (uint64_t)v14;
  v13[1] = (uint64_t)v14;
  uint64_t v16 = *v14;
  *long long v13 = *v14;
  if (v16) {
    *(void *)(v16 + 8) = v13;
  }
  *uint64_t v14 = (uint64_t)v13;
  return (*(void *)a1 - 16) | 4;
}

void mlir::arith::ExtSIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

unint64_t mlir::arith::ExtFOp::fold(void *a1, uint64_t a2)
{
  unint64_t v11[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = **(void **)(a2 + 40);
  if (!v2) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v9 = v2;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v9, (uint64_t)v10);
  double v4 = llvm::APFloat::convertToDouble((llvm::APFloat *)v10);
  uint64_t v5 = mlir::FloatAttr::get(v3, v4);
  unint64_t v6 = (unint64_t)v5 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v7 = (void *)v11[0];
  if (llvm::APFloatBase::PPCDoubleDouble(v5) == v7) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
  }
  return v6;
}

void llvm::APFloat::~APFloat(llvm::APFloat *this)
{
  uint64_t v1 = (llvm::APFloat *)((char *)this + 8);
  uint64_t v2 = (void *)*((void *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(v1);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat(v1);
  }
}

BOOL mlir::arith::ExtFOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((long long v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      uint64_t v12 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t v29 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v29 = 0;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v31 = v29;
    uint64_t v24 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if ((!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8)
       || (uint64_t v25 = *(void **)(*v24 + 136), v25 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
       || v25 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v25 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      && ((uint64_t v26 = mlir::getElementTypeOrSelf(v24),
           unsigned int v27 = *(void **)(*(void *)v26 + 136),
           v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      && (uint64_t v30 = v26, v29))
    {
      IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v30);
      return IntOrFloatBitWidth > mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::ExtFOp::verify(mlir::arith::ExtFOp *this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v36 = *(void *)this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*(void *)(v36 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(void *)(v36 - 8) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)v40);
  v34[0] = v2;
  if (Width < mlir::FloatType::getWidth((mlir::FloatType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    uint64_t v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    unint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unint64_t v6 = (char *)v41;
        uint64_t v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v5 = &v37;
        unint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      uint64_t v38 = " must be wider than operand type ";
      uint64_t v39 = 33;
      BOOL v10 = &v37;
      uint64_t v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v11 = (char *)v41;
          BOOL v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          BOOL v10 = &v37;
          uint64_t v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        uint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        BOOL v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            BOOL v15 = (char *)v41;
            uint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v14 = &v37;
            BOOL v15 = (char *)v41;
          }
        }
        uint64_t v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      BOOL v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          BOOL v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      uint64_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

uint64_t mlir::arith::TruncIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  *(void *)&long long v50 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v50);
  if (DefiningOp
    && *(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id
    || (*(void *)&long long v50 = *(void *)(*(void *)(*(void *)a1 + 72) + 24),
        (uint64_t v5 = mlir::Value::getDefiningOp((mlir::Value *)&v50)) != 0)
    && *(_UNKNOWN **)(*(void *)(v5 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    *(void *)&long long v50 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
    unint64_t v15 = *(void *)(*(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v50) + 72) + 24);
    uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v17 = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
    *(void *)&long long v50 = ElementTypeOrSelf;
    LODWORD(ElementTypeOrSelf) = mlir::IntegerType::getWidth((mlir::IntegerType *)&v50);
    *(void *)&long long v48 = v17;
    if (ElementTypeOrSelf <= mlir::IntegerType::getWidth((mlir::IntegerType *)&v48)) {
      return v15 | 4;
    }
    uint64_t v18 = *(void **)(*(void *)a1 + 72);
    BOOL v19 = (void *)v18[1];
    if (v19)
    {
      *BOOL v19 = *v18;
      if (*v18) {
        *(void *)(*v18 + 8) = v18[1];
      }
    }
    v18[3] = v15;
    v18[1] = v15;
    uint64_t v20 = *(void *)v15;
    void *v18 = *(void *)v15;
    if (v20) {
      *(void *)(v20 + 8) = v18;
    }
    *(void *)unint64_t v15 = v18;
    return (*(void *)a1 - 16) | 4;
  }
  *(void *)&long long v50 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
  uint64_t v6 = mlir::Value::getDefiningOp((mlir::Value *)&v50);
  if (v6
    && *(_UNKNOWN **)(*(void *)(v6 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id)
  {
    *(void *)&long long v50 = *(void *)(*(void *)(*(void *)a1 + 72) + 24);
    uint64_t v22 = *(uint64_t **)(*(void *)(mlir::Value::getDefiningOp((mlir::Value *)&v50) + 72) + 24);
    uint64_t v23 = *(uint64_t **)(*(void *)a1 + 72);
    uint64_t v24 = (uint64_t *)v23[1];
    if (v24)
    {
      *uint64_t v24 = *v23;
      if (*v23) {
        *(void *)(*v23 + 8) = v23[1];
      }
    }
    v23[3] = (uint64_t)v22;
    v23[1] = (uint64_t)v22;
    uint64_t v25 = *v22;
    uint64_t *v23 = *v22;
    if (v25) {
      *(void *)(v25 + 8) = v23;
    }
    *uint64_t v22 = (uint64_t)v23;
    return (*(void *)a1 - 16) | 4;
  }
  *(void *)&long long v50 = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v50);
  long long v8 = *(uint64_t **)(a2 + 40);
  uint64_t v9 = *v8;
  if (!*v8) {
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  BOOL v10 = *(void **)(*(void *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unsigned int v11 = Width;
  uint64_t v12 = (void *)(*(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v43 = *v8;
    mlir::IntegerAttr::getValue((uint64_t)&v43, (llvm::APInt *)&v48);
    llvm::APInt::trunc((uint64_t)&v48, v11, (uint64_t)&v50);
    if (DWORD2(v48) >= 0x41 && (void)v48) {
      MEMORY[0x21667D390](v48, 0x1000C8000313F17);
    }
    uint64_t v9 = mlir::IntegerAttr::get((uint64_t)v12, (const llvm::APInt *)&v50);
    if (DWORD2(v50) < 0x41) {
      return v9 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_50:
    if ((void)v50) {
      MEMORY[0x21667D390](v50, 0x1000C8000313F17);
    }
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v8)) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 0;
  }
  *(void *)&long long v50 = v13;
  if (!v13 || !mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v50))
  {
    uint64_t v9 = *v8;
    if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v8 + 8))
    {
      uint64_t v26 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v9 + 8);
      uint64_t v46 = v9;
      uint64_t v47 = v26;
      if (v9)
      {
        mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v46, (uint64_t)&v48);
        if (BYTE8(v49))
        {
          LOWORD(v43) = v48;
          if ((_BYTE)v48) {
            uint64_t v44 = *((void *)&v48 + 1);
          }
          else {
            (*(void (**)(uint64_t *__return_ptr))(**((void **)&v48 + 1) + 16))(&v44);
          }
          uint64_t v45 = v49;
          *(void *)&long long v50 = &v51;
          *((void *)&v50 + 1) = 0x300000000;
          unint64_t NumElements = mlir::ElementsAttr::getNumElements(v46, v47);
          llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v50, NumElements);
          uint64_t v28 = mlir::ElementsAttr::getNumElements(v46, v47);
          if (v28)
          {
            uint64_t v29 = v28;
            uint64_t v30 = v45;
            do
            {
              if (BYTE1(v43)) {
                uint64_t v31 = 0;
              }
              else {
                uint64_t v31 = v30;
              }
              if ((_BYTE)v43)
              {
                int64_t v32 = (const llvm::APInt *)(v44 + 16 * v31);
                unsigned int v40 = *((_DWORD *)v32 + 2);
                if (v40 > 0x40) {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v39, v32);
                }
                uint64_t v39 = *(void *)v32;
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v44 + 24))(&v39);
              }
              llvm::APInt::trunc((uint64_t)&v39, v11, (uint64_t)&v41);
              if (v40 >= 0x41 && v39) {
                MEMORY[0x21667D390](v39, 0x1000C8000313F17);
              }
              Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v50, (unint64_t)&v41, 1);
              uint64_t v34 = (llvm::APInt *)(v50 + 16 * DWORD2(v50));
              unsigned int v35 = *((_DWORD *)Address + 2);
              *((_DWORD *)v34 + 2) = v35;
              if (v35 > 0x40) {
                llvm::APInt::initSlowCase(v34, (const llvm::APInt *)Address);
              }
              *(void *)uint64_t v34 = *(void *)Address;
              ++DWORD2(v50);
              if (v42 >= 0x41 && v41) {
                MEMORY[0x21667D390](v41, 0x1000C8000313F17);
              }
              uint64_t v30 = ++v45;
              --v29;
            }
            while (v29);
          }
          if (v12) {
            uint64_t v36 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v9 = mlir::DenseElementsAttr::get((uint64_t)v12, v36, (llvm::APInt *)v50, DWORD2(v50));
          llvm::SmallVector<llvm::APInt,4u>::~SmallVector((char **)&v50);
          if (!(_BYTE)v43)
          {
            uint64_t v37 = v44;
            uint64_t v44 = 0;
            if (v37) {
              (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
            }
          }
          if (BYTE8(v49))
          {
            if (!(_BYTE)v48)
            {
              uint64_t v38 = *((void *)&v48 + 1);
              *((void *)&v48 + 1) = 0;
              if (v38) {
                (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
              }
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    return v9 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v46 = *v8;
  mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v46, (uint64_t)&v50);
  long long v48 = v50;
  long long v49 = v51;
  mlir::DenseElementsAttr::IntElementIterator::operator*(&v48, (llvm::APInt *)&v43);
  llvm::APInt::trunc((uint64_t)&v43, v11, (uint64_t)&v50);
  if (v44 >= 0x41 && v43) {
    MEMORY[0x21667D390](v43, 0x1000C8000313F17);
  }
  if (v12) {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v12 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v9 = mlir::DenseElementsAttr::get((uint64_t)v12, v14, (llvm::APInt *)&v50, 1);
  if (DWORD2(v50) >= 0x41) {
    goto LABEL_50;
  }
  return v9 & 0xFFFFFFFFFFFFFFFBLL;
}

BOOL mlir::arith::TruncIOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((long long v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v12 = ElementTypeOrSelf;
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v22 = v12;
    uint64_t v13 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8)
      || ((uint64_t v14 = *(void **)(*v13 + 136), v14 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v15 = v14 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v15 = 1),
          !v15 ? (BOOL v16 = v14 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v16 = 1),
          v16))
    {
      uint64_t v17 = mlir::getElementTypeOrSelf(v13);
      if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v21 = v18;
      if (v12) {
        BOOL v19 = v18 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19)
      {
        return 0;
      }
      else
      {
        IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
        return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v22);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void mlir::arith::TruncIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::TruncIOp::verify(mlir::arith::TruncIOp *this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v36 = *(void *)this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*(void *)(v36 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(void *)(v36 - 8) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v40);
  v34[0] = v2;
  if (Width > mlir::IntegerType::getWidth((mlir::IntegerType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    uint64_t v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    uint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v6 = (char *)v41;
        uint64_t v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v5 = &v37;
        uint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      uint64_t v38 = " must be shorter than operand type ";
      uint64_t v39 = 35;
      BOOL v10 = &v37;
      unsigned int v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          unsigned int v11 = (char *)v41;
          BOOL v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          BOOL v10 = &v37;
          unsigned int v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        uint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        BOOL v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            BOOL v15 = (char *)v41;
            uint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v14 = &v37;
            BOOL v15 = (char *)v41;
          }
        }
        BOOL v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)BOOL v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      BOOL v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          BOOL v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      long long v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

unint64_t mlir::arith::TruncFOp::fold(void *a1, uint64_t a2)
{
  v12[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = **(void **)(a2 + 40);
  if (!v2 || *(_UNKNOWN **)(*(void *)v2 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    return 0;
  }
  BOOL v10 = **(llvm::APFloatBase ***)(a2 + 40);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v10, (uint64_t)v11);
  double v5 = llvm::APFloat::convertToDouble((llvm::APFloat *)v11);
  uint64_t v6 = (void *)v12[0];
  long long v8 = llvm::APFloatBase::PPCDoubleDouble(v7);
  if (v8 == v6) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  }
  BOOL v10 = mlir::FloatAttr::get(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8, v5);
  mlir::FloatAttr::getValue((mlir::FloatAttr *)&v10, (uint64_t)v11);
  double v9 = llvm::APFloat::convertToDouble((llvm::APFloat *)v11);
  if (v8 == (void *)v12[0]) {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v12);
  }
  else {
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v12);
  }
  if (v5 == v9) {
    return (unint64_t)v10 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else {
    return 0;
  }
}

BOOL mlir::arith::TruncFOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((long long v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v10 = 1),
          v10))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      uint64_t v12 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v12 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t v29 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v29 = 0;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v31 = v29;
    uint64_t v24 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if ((!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8)
       || (uint64_t v25 = *(void **)(*v24 + 136), v25 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
       || v25 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
       || v25 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      && ((uint64_t v26 = mlir::getElementTypeOrSelf(v24),
           unint64_t v27 = *(void **)(*(void *)v26 + 136),
           v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v27 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      && (uint64_t v30 = v26, v29))
    {
      IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v30);
      return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v31);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::arith::TruncFOp::verify(mlir::arith::TruncFOp *this)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v36 = *(void *)this;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(*(void *)(v36 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v2 = mlir::getElementTypeOrSelf((void *)(*(void *)(v36 - 8) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = ElementTypeOrSelf;
  unsigned int Width = mlir::FloatType::getWidth((mlir::FloatType *)v40);
  v34[0] = v2;
  if (Width > mlir::FloatType::getWidth((mlir::FloatType *)v34)) {
    return 1;
  }
  v34[0] = "result type ";
  __int16 v35 = 259;
  mlir::OpState::emitError(&v36, (uint64_t)v34, (uint64_t)v40);
  if (v40[0])
  {
    double v5 = &v37;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, v2);
    uint64_t v6 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v31 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v6 = (char *)v41;
        double v5 = (int *)((char *)v41 + v31);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        double v5 = &v37;
        uint64_t v6 = (char *)v41;
      }
    }
    uint64_t v7 = &v6[24 * v42];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v42;
    if (v40[0])
    {
      int v37 = 3;
      uint64_t v38 = " must be shorter than operand type ";
      uint64_t v39 = 35;
      BOOL v10 = &v37;
      unsigned int v11 = (char *)v41;
      if (v9 >= v43)
      {
        unint64_t v28 = v9 + 1;
        BOOL v29 = (char *)v41 + 24 * v9 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v32 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          unsigned int v11 = (char *)v41;
          BOOL v10 = (int *)((char *)v41 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          BOOL v10 = &v37;
          unsigned int v11 = (char *)v41;
        }
      }
      uint64_t v12 = &v11[24 * v42];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v12 = v13;
      ++v42;
      if (v40[0])
      {
        uint64_t v14 = &v37;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v37, ElementTypeOrSelf);
        BOOL v15 = (char *)v41;
        if (v42 >= v43)
        {
          unint64_t v30 = v42 + 1;
          if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
          {
            int64_t v33 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            BOOL v15 = (char *)v41;
            uint64_t v14 = (int *)((char *)v41 + v33);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v14 = &v37;
            BOOL v15 = (char *)v41;
          }
        }
        BOOL v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)BOOL v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    uint64_t v18 = __p;
    if (__p)
    {
      BOOL v19 = v48;
      uint64_t v20 = __p;
      if (v48 != __p)
      {
        do
          BOOL v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        uint64_t v20 = __p;
      }
      long long v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      uint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          uint64_t v25 = *--v22;
          uint64_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            MEMORY[0x21667D390](v24, 0x1000C8077774924);
          }
        }
        while (v22 != v21);
        uint64_t v23 = v45;
      }
      uint64_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v4;
}

void mlir::arith::AndIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void mlir::arith::OrIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

BOOL checkIntFloatCast<mlir::IntegerType,mlir::FloatType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    long long v8 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8)
      || ((uint64_t v9 = *(void **)(*v8 + 136), v9 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v10 = v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v10 = 1),
          !v10 ? (BOOL v11 = v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v11 = 1),
          v11))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
      if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v13 = ElementTypeOrSelf;
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)mlir::TypeRange::dereference_iterator(a3, a4 - 1);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v14 + 8))
    {
      BOOL v15 = *(void **)(*v14 + 136);
      BOOL v16 = v15 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v15 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (!v16 && v15 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        goto LABEL_61;
      }
    }
    uint64_t v18 = mlir::getElementTypeOrSelf(v14);
    BOOL v19 = *(void **)(*(void *)v18 + 136);
    BOOL v20 = v19 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    BOOL v21 = v20 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    BOOL v22 = v21 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    BOOL v23 = v22 || v19 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    BOOL v24 = v23 || v19 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    BOOL v25 = v24 || v19 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    BOOL v26 = v25 || v19 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    BOOL v27 = v26 || v19 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    BOOL v28 = v27 || v19 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    BOOL v29 = v28 || v19 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    if (v29 || v19 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      if (!v13) {
        return 0;
      }
    }
    else
    {
LABEL_61:
      uint64_t v18 = 0;
      if (!v13) {
        return 0;
      }
    }
    return v18 != 0;
  }
  return result;
}

unint64_t mlir::arith::UIToFPOp::fold(void *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  double v5 = *(uint64_t **)(a2 + 40);
  unint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = ElementTypeOrSelf;
  uint64_t v9 = (llvm::APFloatBase *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v60 = *v5;
    mlir::IntegerAttr::getValue((uint64_t)&v60, (llvm::APInt *)&v58);
    mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)v62, v8, (unsigned int *)&v58);
    if (DWORD2(v58) >= 0x41 && (void)v58) {
      MEMORY[0x21667D390](v58, 0x1000C8000313F17);
    }
    unint64_t v6 = mlir::FloatAttr::get((uint64_t)v9, (uint64_t)v62);
    uint64_t v14 = (llvm::detail::IEEEFloat *)&v62[1];
    BOOL v15 = v62[1];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v15) {
      goto LABEL_29;
    }
LABEL_21:
    llvm::detail::IEEEFloat::~IEEEFloat(v14);
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  v62[0] = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62))
  {
    uint64_t v53 = *v5;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v53, (uint64_t)v62);
    long long v58 = *(_OWORD *)v62;
    long long v59 = v63[0];
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v58, (llvm::APInt *)v62);
    mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (unsigned int *)v62);
    if (LODWORD(v62[1]) >= 0x41 && v62[0]) {
      MEMORY[0x21667D390](v62[0], 0x1000C8000313F17);
    }
    if (v9) {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v6 = mlir::DenseElementsAttr::get(v9, v11, (uint64_t)&v60, 1);
    uint64_t v14 = (llvm::detail::IEEEFloat *)v61;
    BOOL v16 = (void *)v61[0];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v16)
    {
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_21;
  }
  uint64_t v12 = (void *)*v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8))
  {
    uint64_t v56 = 0;
    uint64_t v57 = 0;
LABEL_26:
    unint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
  uint64_t v56 = v12;
  uint64_t v57 = v13;
  if (!v12) {
    goto LABEL_26;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v56, (uint64_t)&v58);
  if (!BYTE8(v59)) {
    goto LABEL_26;
  }
  LOWORD(v53) = v58;
  if ((_BYTE)v58) {
    uint64_t v54 = *((void *)&v58 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v58 + 1) + 16))(&v54);
  }
  uint64_t v55 = v59;
  v62[0] = v63;
  v62[1] = (void *)0x100000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (NumElements > HIDWORD(v62[1]))
  {
    uint64_t v60 = 0;
    BOOL v19 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v62, v63, NumElements, 32, (unint64_t *)&v60);
    BOOL v20 = v19;
    BOOL v21 = (void **)v62[0];
    uint64_t v22 = LODWORD(v62[1]);
    if (LODWORD(v62[1]))
    {
      BOOL v23 = llvm::APFloatBase::PPCDoubleDouble(v19);
      BOOL v24 = (void *)((char *)v20 + 8);
      uint64_t v25 = 32 * v22;
      BOOL v26 = v21 + 1;
      do
      {
        while (v23 == *v26)
        {
          BOOL v24 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v24, v26) + 4;
          v26 += 4;
          v25 -= 32;
          if (!v25) {
            goto LABEL_38;
          }
        }
        BOOL v24 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v24, (uint64_t)v26) + 32);
        v26 += 4;
        v25 -= 32;
      }
      while (v25);
LABEL_38:
      BOOL v21 = (void **)v62[0];
      if (LODWORD(v62[1]))
      {
        BOOL v27 = (char *)v62[0] - 24;
        uint64_t v28 = 32 * LODWORD(v62[1]);
        do
        {
          while (1)
          {
            BOOL v29 = (llvm::detail::DoubleAPFloat *)&v27[v28];
            if (v23 != *(void **)&v27[v28]) {
              break;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v29);
            v28 -= 32;
            if (!v28) {
              goto LABEL_43;
            }
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v29);
          v28 -= 32;
        }
        while (v28);
LABEL_43:
        BOOL v21 = (void **)v62[0];
      }
    }
    int v30 = v60;
    if (v21 != (void **)v63) {
      free(v21);
    }
    v62[0] = v20;
    HIDWORD(v62[1]) = v30;
  }
  uint64_t v31 = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = v55;
    do
    {
      while (1)
      {
        uint64_t v34 = BYTE1(v53) ? 0 : v33;
        if ((_BYTE)v53)
        {
          __int16 v35 = (const llvm::APInt *)(v54 + 16 * v34);
          unsigned int v52 = *((_DWORD *)v35 + 2);
          if (v52 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v51, v35);
          }
          uint64_t v51 = *(void *)v35;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v54 + 24))(&v51);
        }
        mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (unsigned int *)&v51);
        if (v52 >= 0x41 && v51) {
          MEMORY[0x21667D390](v51, 0x1000C8000313F17);
        }
        Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)v62, (unint64_t)&v60, 1);
        int v37 = (llvm::detail::IEEEFloat *)((char *)v62[0] + 32 * LODWORD(v62[1]) + 8);
        uint64_t v38 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
        uint64_t v39 = (void *)*((void *)Address + 1);
        unsigned int v40 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
        if (v40 == v39) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v38);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat(v37, v38);
        }
        ++LODWORD(v62[1]);
        if (v40 != (void *)v61[0]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        uint64_t v33 = ++v55;
        if (!--v32) {
          goto LABEL_66;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
      uint64_t v33 = ++v55;
      --v32;
    }
    while (v32);
  }
LABEL_66:
  if (v9) {
    uint64_t v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
  }
  else {
    uint64_t v41 = 0;
  }
  unsigned int v42 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(v9, v41, (uint64_t)v62[0], LODWORD(v62[1]));
  unint64_t v6 = (unint64_t)v42;
  unsigned int v43 = (char *)v62[0];
  uint64_t v44 = LODWORD(v62[1]);
  if (LODWORD(v62[1]))
  {
    uint64_t v45 = llvm::APFloatBase::PPCDoubleDouble(v42);
    uint64_t v46 = v43 - 24;
    uint64_t v47 = 32 * v44;
    do
    {
      while (1)
      {
        long long v48 = (llvm::detail::DoubleAPFloat *)&v46[v47];
        if (v45 != *(void **)&v46[v47]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v48);
        v47 -= 32;
        if (!v47) {
          goto LABEL_74;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v48);
      v47 -= 32;
    }
    while (v47);
LABEL_74:
    unsigned int v43 = (char *)v62[0];
  }
  if (v43 != (char *)v63) {
    free(v43);
  }
  if (!(_BYTE)v53)
  {
    uint64_t v49 = v54;
    uint64_t v54 = 0;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
  }
  if (BYTE8(v59))
  {
    if (!(_BYTE)v58)
    {
      uint64_t v50 = *((void *)&v58 + 1);
      *((void *)&v58 + 1) = 0;
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::SIToFPOp::fold(void *a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  double v5 = *(uint64_t **)(a2 + 40);
  unint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v8 = ElementTypeOrSelf;
  uint64_t v9 = (llvm::APFloatBase *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v60 = *v5;
    mlir::IntegerAttr::getValue((uint64_t)&v60, (llvm::APInt *)&v58);
    mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)v62, v8, (unsigned int *)&v58);
    if (DWORD2(v58) >= 0x41 && (void)v58) {
      MEMORY[0x21667D390](v58, 0x1000C8000313F17);
    }
    unint64_t v6 = mlir::FloatAttr::get((uint64_t)v9, (uint64_t)v62);
    uint64_t v14 = (llvm::detail::IEEEFloat *)&v62[1];
    BOOL v15 = v62[1];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v15) {
      goto LABEL_29;
    }
LABEL_21:
    llvm::detail::IEEEFloat::~IEEEFloat(v14);
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  v62[0] = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v62))
  {
    uint64_t v53 = *v5;
    mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v53, (uint64_t)v62);
    long long v58 = *(_OWORD *)v62;
    long long v59 = v63[0];
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v58, (llvm::APInt *)v62);
    mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (unsigned int *)v62);
    if (LODWORD(v62[1]) >= 0x41 && v62[0]) {
      MEMORY[0x21667D390](v62[0], 0x1000C8000313F17);
    }
    if (v9) {
      uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v6 = mlir::DenseElementsAttr::get(v9, v11, (uint64_t)&v60, 1);
    uint64_t v14 = (llvm::detail::IEEEFloat *)v61;
    BOOL v16 = (void *)v61[0];
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v6) == v16)
    {
LABEL_29:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_21;
  }
  uint64_t v12 = (void *)*v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8))
  {
    uint64_t v56 = 0;
    uint64_t v57 = 0;
LABEL_26:
    unint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v12 + 8);
  uint64_t v56 = v12;
  uint64_t v57 = v13;
  if (!v12) {
    goto LABEL_26;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v56, (uint64_t)&v58);
  if (!BYTE8(v59)) {
    goto LABEL_26;
  }
  LOWORD(v53) = v58;
  if ((_BYTE)v58) {
    uint64_t v54 = *((void *)&v58 + 1);
  }
  else {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)&v58 + 1) + 16))(&v54);
  }
  uint64_t v55 = v59;
  v62[0] = v63;
  v62[1] = (void *)0x100000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (NumElements > HIDWORD(v62[1]))
  {
    uint64_t v60 = 0;
    BOOL v19 = (llvm::APFloatBase *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v62, v63, NumElements, 32, (unint64_t *)&v60);
    BOOL v20 = v19;
    BOOL v21 = (void **)v62[0];
    uint64_t v22 = LODWORD(v62[1]);
    if (LODWORD(v62[1]))
    {
      BOOL v23 = llvm::APFloatBase::PPCDoubleDouble(v19);
      BOOL v24 = (void *)((char *)v20 + 8);
      uint64_t v25 = 32 * v22;
      BOOL v26 = v21 + 1;
      do
      {
        while (v23 == *v26)
        {
          BOOL v24 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v24, v26) + 4;
          v26 += 4;
          v25 -= 32;
          if (!v25) {
            goto LABEL_38;
          }
        }
        BOOL v24 = (void *)(llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v24, (uint64_t)v26) + 32);
        v26 += 4;
        v25 -= 32;
      }
      while (v25);
LABEL_38:
      BOOL v21 = (void **)v62[0];
      if (LODWORD(v62[1]))
      {
        BOOL v27 = (char *)v62[0] - 24;
        uint64_t v28 = 32 * LODWORD(v62[1]);
        do
        {
          while (1)
          {
            BOOL v29 = (llvm::detail::DoubleAPFloat *)&v27[v28];
            if (v23 != *(void **)&v27[v28]) {
              break;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v29);
            v28 -= 32;
            if (!v28) {
              goto LABEL_43;
            }
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v29);
          v28 -= 32;
        }
        while (v28);
LABEL_43:
        BOOL v21 = (void **)v62[0];
      }
    }
    int v30 = v60;
    if (v21 != (void **)v63) {
      free(v21);
    }
    v62[0] = v20;
    HIDWORD(v62[1]) = v30;
  }
  uint64_t v31 = mlir::ElementsAttr::getNumElements((uint64_t)v56, v57);
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = v55;
    do
    {
      while (1)
      {
        uint64_t v34 = BYTE1(v53) ? 0 : v33;
        if ((_BYTE)v53)
        {
          __int16 v35 = (const llvm::APInt *)(v54 + 16 * v34);
          unsigned int v52 = *((_DWORD *)v35 + 2);
          if (v52 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v51, v35);
          }
          uint64_t v51 = *(void *)v35;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v54 + 24))(&v51);
        }
        mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()((uint64_t)&v60, v8, (unsigned int *)&v51);
        if (v52 >= 0x41 && v51) {
          MEMORY[0x21667D390](v51, 0x1000C8000313F17);
        }
        Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)v62, (unint64_t)&v60, 1);
        int v37 = (llvm::detail::IEEEFloat *)((char *)v62[0] + 32 * LODWORD(v62[1]) + 8);
        uint64_t v38 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
        uint64_t v39 = (void *)*((void *)Address + 1);
        unsigned int v40 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
        if (v40 == v39) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v37, v38);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat(v37, v38);
        }
        ++LODWORD(v62[1]);
        if (v40 != (void *)v61[0]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v61);
        uint64_t v33 = ++v55;
        if (!--v32) {
          goto LABEL_66;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v61);
      uint64_t v33 = ++v55;
      --v32;
    }
    while (v32);
  }
LABEL_66:
  if (v9) {
    uint64_t v41 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
  }
  else {
    uint64_t v41 = 0;
  }
  unsigned int v42 = (llvm::APFloatBase *)mlir::DenseElementsAttr::get(v9, v41, (uint64_t)v62[0], LODWORD(v62[1]));
  unint64_t v6 = (unint64_t)v42;
  unsigned int v43 = (char *)v62[0];
  uint64_t v44 = LODWORD(v62[1]);
  if (LODWORD(v62[1]))
  {
    uint64_t v45 = llvm::APFloatBase::PPCDoubleDouble(v42);
    uint64_t v46 = v43 - 24;
    uint64_t v47 = 32 * v44;
    do
    {
      while (1)
      {
        long long v48 = (llvm::detail::DoubleAPFloat *)&v46[v47];
        if (v45 != *(void **)&v46[v47]) {
          break;
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v48);
        v47 -= 32;
        if (!v47) {
          goto LABEL_74;
        }
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v48);
      v47 -= 32;
    }
    while (v47);
LABEL_74:
    unsigned int v43 = (char *)v62[0];
  }
  if (v43 != (char *)v63) {
    free(v43);
  }
  if (!(_BYTE)v53)
  {
    uint64_t v49 = v54;
    uint64_t v54 = 0;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
  }
  if (BYTE8(v59))
  {
    if (!(_BYTE)v58)
    {
      uint64_t v50 = *((void *)&v58 + 1);
      *((void *)&v58 + 1) = 0;
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

BOOL checkIntFloatCast<mlir::FloatType,mlir::IntegerType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8)
      || ((uint64_t v9 = *(void **)(*v8 + 136), v9 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v10 = v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        : (BOOL v10 = 1),
          !v10 ? (BOOL v11 = v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v11 = 1),
          v11))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v8);
      uint64_t v13 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        uint64_t v25 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    BOOL v26 = (void *)mlir::TypeRange::dereference_iterator(a3, a4 - 1);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v26 + 8)
      || (BOOL v27 = *(void **)(*v26 + 136), v27 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      || v27 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v27 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      uint64_t v29 = mlir::getElementTypeOrSelf(v26);
      if (*(_UNKNOWN **)(*(void *)v29 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
        uint64_t v28 = v29;
      }
      else {
        uint64_t v28 = 0;
      }
      if (!v25) {
        return 0;
      }
    }
    else
    {
      uint64_t v28 = 0;
      if (!v25) {
        return 0;
      }
    }
    return v28 != 0;
  }
  return result;
}

unint64_t mlir::arith::FPToUIOp::fold(void *a1, uint64_t a2)
{
  v58[6] = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementTypeOrSelf);
  double v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unsigned int v8 = Width;
  uint64_t v9 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v54 = *v5;
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v47);
    }
    uint64_t v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 1;
    uint64_t v12 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    int v13 = (int)v12;
    uint64_t v14 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v12) == v14)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
      if (v13 == 1) {
        goto LABEL_30;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v13 == 1) {
        goto LABEL_30;
      }
    }
    uint64_t v15 = mlir::IntegerAttr::get((uint64_t)v9, (const llvm::APInt *)&v47);
    goto LABEL_86;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t ElementTypeOrSelf = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ElementTypeOrSelf))
  {
    uint64_t v54 = *v5;
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v47);
    }
    uint64_t v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 1;
    BOOL v16 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    int v17 = (int)v16;
    uint64_t v18 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v16) != v18)
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v17 == 1) {
        goto LABEL_30;
      }
      goto LABEL_33;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
    if (v17 != 1)
    {
LABEL_33:
      if (v9) {
        uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v15 = mlir::DenseElementsAttr::get((uint64_t)v9, v19, (llvm::APInt *)&v47, 1);
LABEL_86:
      uint64_t v6 = v15;
      if (v48 < 0x41) {
        return v6 & 0xFFFFFFFFFFFFFFFBLL;
      }
LABEL_87:
      if (v47) {
        MEMORY[0x21667D390](v47, 0x1000C8000313F17);
      }
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_30:
    uint64_t v6 = 0;
    if (v48 < 0x41) {
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_87;
  }
  uint64_t v6 = *v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8))
  {
    uint64_t v6 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
  uint64_t v51 = v6;
  uint64_t v52 = v11;
  if (!v6) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v51, (uint64_t)&v47);
  if (!v50)
  {
    uint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  __int16 v44 = v47;
  if ((_BYTE)v47) {
    uint64_t v45 = v48;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v48 + 16))(&v45);
  }
  uint64_t v46 = v49;
  uint64_t ElementTypeOrSelf = v58;
  uint64_t v57 = 0x300000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements(v51, v52);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&ElementTypeOrSelf, NumElements);
  uint64_t v21 = mlir::ElementsAttr::getNumElements(v51, v52);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = v46;
    do
    {
      if (HIBYTE(v44)) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      if ((_BYTE)v44)
      {
        uint64_t v25 = (char *)v45 + 32 * v24;
        BOOL v27 = (void *)*((void *)v25 + 1);
        BOOL v26 = (const llvm::detail::DoubleAPFloat *)(v25 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v45) == v27)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v55, v26);
          unsigned int v42 = v8;
          if (v8 > 0x40) {
LABEL_46:
          }
            llvm::APInt::initSlowCase((llvm::APInt *)&v41);
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v55, v26);
          unsigned int v42 = v8;
          if (v8 > 0x40) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v45 + 24))(&v54);
        unsigned int v42 = v8;
        if (v8 > 0x40) {
          goto LABEL_46;
        }
      }
      uint64_t v41 = 0;
      char v53 = 0;
      char v43 = 1;
      uint64_t v28 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&v54, (uint64_t)&v41, 0, &v53);
      int v29 = (int)v28;
      int v30 = (void *)v55[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v28) == v30)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v55);
        if (v29 == 1)
        {
LABEL_49:
          if (v42 < 0x41) {
            goto LABEL_58;
          }
LABEL_56:
          if (v41) {
            MEMORY[0x21667D390](v41, 0x1000C8000313F17);
          }
          goto LABEL_58;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v55);
        if (v29 == 1) {
          goto LABEL_49;
        }
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&ElementTypeOrSelf, (unint64_t)&v41, 1);
      uint64_t v32 = (llvm::APInt *)((char *)ElementTypeOrSelf + 16 * v57);
      unsigned int v33 = *((_DWORD *)Address + 2);
      *((_DWORD *)v32 + 2) = v33;
      if (v33 > 0x40) {
        llvm::APInt::initSlowCase(v32, (const llvm::APInt *)Address);
      }
      *(void *)uint64_t v32 = *(void *)Address;
      LODWORD(v57) = v57 + 1;
      if (v42 >= 0x41) {
        goto LABEL_56;
      }
LABEL_58:
      if (v29 == 1)
      {
        uint64_t v6 = 0;
        goto LABEL_68;
      }
      uint64_t v23 = ++v46;
      --v22;
    }
    while (v22);
  }
  if (v9) {
    uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v34, (llvm::APInt *)ElementTypeOrSelf, v57);
LABEL_68:
  __int16 v35 = (char *)ElementTypeOrSelf;
  if (v57)
  {
    uint64_t v36 = 16 * v57;
    do
    {
      if (*(_DWORD *)&v35[v36 - 8] >= 0x41u)
      {
        uint64_t v37 = *(void *)&v35[v36 - 16];
        if (v37) {
          MEMORY[0x21667D390](v37, 0x1000C8000313F17);
        }
      }
      v36 -= 16;
    }
    while (v36);
    __int16 v35 = (char *)ElementTypeOrSelf;
  }
  if (v35 != (char *)v58) {
    free(v35);
  }
  if (!(_BYTE)v44)
  {
    uint64_t v38 = v45;
    uint64_t v45 = 0;
    if (v38) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v38 + 8))(v38);
    }
  }
  if (v50)
  {
    if (!(_BYTE)v47)
    {
      uint64_t v39 = v48;
      long long v48 = 0;
      if (v39) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v39 + 8))(v39);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

unint64_t mlir::arith::FPToSIOp::fold(void *a1, uint64_t a2)
{
  v58[6] = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&ElementTypeOrSelf);
  double v5 = *(uint64_t **)(a2 + 40);
  uint64_t v6 = *v5;
  if (!*v5) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v7 = *(void **)(*(void *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  unsigned int v8 = Width;
  uint64_t v9 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    uint64_t v54 = *v5;
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v47);
    }
    uint64_t v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 0;
    uint64_t v12 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    int v13 = (int)v12;
    uint64_t v14 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v12) == v14)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
      if (v13 == 1) {
        goto LABEL_30;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v13 == 1) {
        goto LABEL_30;
      }
    }
    uint64_t v15 = mlir::IntegerAttr::get((uint64_t)v9, (const llvm::APInt *)&v47);
    goto LABEL_86;
  }
  if (mlir::DenseElementsAttr::classof(*v5)) {
    BOOL v10 = (void *)v6;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t ElementTypeOrSelf = v10;
  if (v10 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&ElementTypeOrSelf))
  {
    uint64_t v54 = *v5;
    mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v54, (uint64_t)&ElementTypeOrSelf);
    LODWORD(v48) = v8;
    if (v8 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v47);
    }
    uint64_t v47 = 0;
    LOBYTE(v44) = 0;
    BYTE4(v48) = 0;
    BOOL v16 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&ElementTypeOrSelf, (uint64_t)&v47, 0, &v44);
    int v17 = (int)v16;
    uint64_t v18 = (void *)v57;
    if (llvm::APFloatBase::PPCDoubleDouble(v16) != v18)
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v57);
      if (v17 == 1) {
        goto LABEL_30;
      }
      goto LABEL_33;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v57);
    if (v17 != 1)
    {
LABEL_33:
      if (v9) {
        uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v15 = mlir::DenseElementsAttr::get((uint64_t)v9, v19, (llvm::APInt *)&v47, 1);
LABEL_86:
      uint64_t v6 = v15;
      if (v48 < 0x41) {
        return v6 & 0xFFFFFFFFFFFFFFFBLL;
      }
LABEL_87:
      if (v47) {
        MEMORY[0x21667D390](v47, 0x1000C8000313F17);
      }
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
LABEL_30:
    uint64_t v6 = 0;
    if (v48 < 0x41) {
      return v6 & 0xFFFFFFFFFFFFFFFBLL;
    }
    goto LABEL_87;
  }
  uint64_t v6 = *v5;
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v5 + 8))
  {
    uint64_t v6 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v11 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v6 + 8);
  uint64_t v51 = v6;
  uint64_t v52 = v11;
  if (!v6) {
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v51, (uint64_t)&v47);
  if (!v50)
  {
    uint64_t v6 = 0;
    return v6 & 0xFFFFFFFFFFFFFFFBLL;
  }
  __int16 v44 = v47;
  if ((_BYTE)v47) {
    uint64_t v45 = v48;
  }
  else {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(void *)v48 + 16))(&v45);
  }
  uint64_t v46 = v49;
  uint64_t ElementTypeOrSelf = v58;
  uint64_t v57 = 0x300000000;
  unint64_t NumElements = mlir::ElementsAttr::getNumElements(v51, v52);
  llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&ElementTypeOrSelf, NumElements);
  uint64_t v21 = mlir::ElementsAttr::getNumElements(v51, v52);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = v46;
    do
    {
      if (HIBYTE(v44)) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = v23;
      }
      if ((_BYTE)v44)
      {
        uint64_t v25 = (char *)v45 + 32 * v24;
        BOOL v27 = (void *)*((void *)v25 + 1);
        BOOL v26 = (const llvm::detail::DoubleAPFloat *)(v25 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v45) == v27)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(v55, v26);
          unsigned int v42 = v8;
          if (v8 > 0x40) {
LABEL_46:
          }
            llvm::APInt::initSlowCase((llvm::APInt *)&v41);
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v55, v26);
          unsigned int v42 = v8;
          if (v8 > 0x40) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v45 + 24))(&v54);
        unsigned int v42 = v8;
        if (v8 > 0x40) {
          goto LABEL_46;
        }
      }
      uint64_t v41 = 0;
      char v53 = 0;
      char v43 = 0;
      uint64_t v28 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger((uint64_t)&v54, (uint64_t)&v41, 0, &v53);
      int v29 = (int)v28;
      int v30 = (void *)v55[0];
      if (llvm::APFloatBase::PPCDoubleDouble(v28) == v30)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v55);
        if (v29 == 1)
        {
LABEL_49:
          if (v42 < 0x41) {
            goto LABEL_58;
          }
LABEL_56:
          if (v41) {
            MEMORY[0x21667D390](v41, 0x1000C8000313F17);
          }
          goto LABEL_58;
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v55);
        if (v29 == 1) {
          goto LABEL_49;
        }
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&ElementTypeOrSelf, (unint64_t)&v41, 1);
      uint64_t v32 = (llvm::APInt *)((char *)ElementTypeOrSelf + 16 * v57);
      unsigned int v33 = *((_DWORD *)Address + 2);
      *((_DWORD *)v32 + 2) = v33;
      if (v33 > 0x40) {
        llvm::APInt::initSlowCase(v32, (const llvm::APInt *)Address);
      }
      *(void *)uint64_t v32 = *(void *)Address;
      LODWORD(v57) = v57 + 1;
      if (v42 >= 0x41) {
        goto LABEL_56;
      }
LABEL_58:
      if (v29 == 1)
      {
        uint64_t v6 = 0;
        goto LABEL_68;
      }
      uint64_t v23 = ++v46;
      --v22;
    }
    while (v22);
  }
  if (v9) {
    uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v9 + 8);
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v6 = mlir::DenseElementsAttr::get((uint64_t)v9, v34, (llvm::APInt *)ElementTypeOrSelf, v57);
LABEL_68:
  __int16 v35 = (char *)ElementTypeOrSelf;
  if (v57)
  {
    uint64_t v36 = 16 * v57;
    do
    {
      if (*(_DWORD *)&v35[v36 - 8] >= 0x41u)
      {
        uint64_t v37 = *(void *)&v35[v36 - 16];
        if (v37) {
          MEMORY[0x21667D390](v37, 0x1000C8000313F17);
        }
      }
      v36 -= 16;
    }
    while (v36);
    __int16 v35 = (char *)ElementTypeOrSelf;
  }
  if (v35 != (char *)v58) {
    free(v35);
  }
  if (!(_BYTE)v44)
  {
    uint64_t v38 = v45;
    uint64_t v45 = 0;
    if (v38) {
      (*(void (**)(llvm::APFloatBase *))(*(void *)v38 + 8))(v38);
    }
  }
  if (v50)
  {
    if (!(_BYTE)v47)
    {
      uint64_t v39 = v48;
      long long v48 = 0;
      if (v39) {
        (*(void (**)(llvm::APFloatBase *))(*(void *)v39 + 8))(v39);
      }
    }
  }
  return v6 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t areIndexCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8)
      || ((unsigned int v8 = *(void **)(*v7 + 136), v8 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
        ? (BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        : (BOOL v9 = 1),
          !v9 ? (BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v10 = 1),
          !v10 ? (BOOL v11 = v8 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) : (BOOL v11 = 1),
          v11))
    {
      uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
      int v13 = *(void **)(*(void *)ElementTypeOrSelf + 136);
      if (v13 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
        || v13 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        uint64_t v26 = ElementTypeOrSelf;
      }
      else
      {
        uint64_t v26 = 0;
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v28 = v26;
    uint64_t v15 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v15 + 8))
    {
      BOOL v16 = *(void **)(*v15 + 136);
      BOOL v17 = v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v16 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
      BOOL v18 = v17 || v16 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (!v18 && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        return 0;
      }
    }
    uint64_t v20 = mlir::getElementTypeOrSelf(v15);
    uint64_t v21 = *(void **)(*(void *)v20 + 136);
    BOOL v22 = v21 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
       || v21 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
    uint64_t v23 = v22 ? v20 : 0;
    uint64_t v27 = v23;
    if (!v26 || v23 == 0)
    {
      return 0;
    }
    else
    {
      BOOL isIndex = mlir::Type::isIndex((mlir::Type *)&v28);
      if (isIndex && mlir::Type::isSignlessInteger((mlir::Type *)&v27))
      {
        return 1;
      }
      else
      {
        uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&v28);
        if (result) {
          return mlir::Type::isIndex((mlir::Type *)&v27);
        }
      }
    }
  }
  return result;
}

unint64_t mlir::arith::IndexCastOp::fold(void *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    double v5 = (void *)ElementTypeOrSelf;
  }
  else {
    double v5 = 0;
  }
  v41[0] = v5;
  if (v5)
  {
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v41);
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    unsigned int Width = 64;
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  BOOL v9 = *(void **)(*(void *)v8 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  BOOL v10 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v34 = v8;
    mlir::IntegerAttr::getValue((uint64_t)&v34, (llvm::APInt *)&v39);
    llvm::APInt::sextOrTrunc((uint64_t)&v39, Width, (uint64_t)v41);
    if (DWORD2(v39) >= 0x41 && (void)v39) {
      MEMORY[0x21667D390](v39, 0x1000C8000313F17);
    }
    uint64_t v8 = mlir::IntegerAttr::get((uint64_t)v10, (const llvm::APInt *)v41);
    if (LODWORD(v41[1]) >= 0x41) {
      goto LABEL_35;
    }
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(v8)) {
      BOOL v11 = (void *)v8;
    }
    else {
      BOOL v11 = 0;
    }
    v41[0] = v11;
    if (v11 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v41))
    {
      uint64_t v37 = *v7;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v37, (uint64_t)v41);
      long long v39 = *(_OWORD *)v41;
      long long v40 = v42[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v39, (llvm::APInt *)&v34);
      llvm::APInt::sextOrTrunc((uint64_t)&v34, Width, (uint64_t)v41);
      if (v35 >= 0x41 && v34) {
        MEMORY[0x21667D390](v34, 0x1000C8000313F17);
      }
      if (v10) {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v41, 1);
      if (LODWORD(v41[1]) >= 0x41)
      {
LABEL_35:
        if (v41[0]) {
          MEMORY[0x21667D390](v41[0], 0x1000C8000313F17);
        }
      }
    }
    else
    {
      uint64_t v8 = *v7;
      if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v7 + 8))
      {
        uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v8 + 8);
        uint64_t v37 = v8;
        uint64_t v38 = v13;
        if (v8)
        {
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v37, (uint64_t)&v39);
          if (BYTE8(v40))
          {
            LOWORD(v34) = v39;
            if ((_BYTE)v39) {
              uint64_t v35 = *((void *)&v39 + 1);
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(**((void **)&v39 + 1) + 16))(&v35);
            }
            uint64_t v36 = v40;
            v41[0] = v42;
            v41[1] = (void *)0x300000000;
            unint64_t NumElements = mlir::ElementsAttr::getNumElements(v37, v38);
            llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v41, NumElements);
            uint64_t v15 = mlir::ElementsAttr::getNumElements(v37, v38);
            if (v15)
            {
              uint64_t v16 = v15;
              uint64_t v17 = v36;
              do
              {
                if (BYTE1(v34)) {
                  uint64_t v18 = 0;
                }
                else {
                  uint64_t v18 = v17;
                }
                if ((_BYTE)v34)
                {
                  uint64_t v19 = (const llvm::APInt *)(v35 + 16 * v18);
                  unsigned int v31 = *((_DWORD *)v19 + 2);
                  if (v31 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v30, v19);
                  }
                  uint64_t v30 = *(void *)v19;
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v35 + 24))(&v30);
                }
                llvm::APInt::sextOrTrunc((uint64_t)&v30, Width, (uint64_t)&v32);
                if (v31 >= 0x41 && v30) {
                  MEMORY[0x21667D390](v30, 0x1000C8000313F17);
                }
                Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v41, (unint64_t)&v32, 1);
                uint64_t v21 = (llvm::APInt *)((char *)v41[0] + 16 * LODWORD(v41[1]));
                unsigned int v22 = *((_DWORD *)Address + 2);
                *((_DWORD *)v21 + 2) = v22;
                if (v22 > 0x40) {
                  llvm::APInt::initSlowCase(v21, (const llvm::APInt *)Address);
                }
                *(void *)uint64_t v21 = *(void *)Address;
                ++LODWORD(v41[1]);
                if (v33 >= 0x41 && v32) {
                  MEMORY[0x21667D390](v32, 0x1000C8000313F17);
                }
                uint64_t v17 = ++v36;
                --v16;
              }
              while (v16);
            }
            if (v10) {
              uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v23, (llvm::APInt *)v41[0], LODWORD(v41[1]));
            uint64_t v24 = (char *)v41[0];
            if (LODWORD(v41[1]))
            {
              uint64_t v25 = 16 * LODWORD(v41[1]);
              do
              {
                if (*(_DWORD *)&v24[v25 - 8] >= 0x41u)
                {
                  uint64_t v26 = *(void *)&v24[v25 - 16];
                  if (v26) {
                    MEMORY[0x21667D390](v26, 0x1000C8000313F17);
                  }
                }
                v25 -= 16;
              }
              while (v25);
              uint64_t v24 = (char *)v41[0];
            }
            if (v24 != (char *)v42) {
              free(v24);
            }
            if (!(_BYTE)v34)
            {
              uint64_t v27 = v35;
              uint64_t v35 = 0;
              if (v27) {
                (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
              }
            }
            if (BYTE8(v40))
            {
              if (!(_BYTE)v39)
              {
                uint64_t v28 = *((void *)&v39 + 1);
                *((void *)&v39 + 1) = 0;
                if (v28) {
                  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
                }
              }
            }
          }
          else
          {
            uint64_t v8 = 0;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::IndexCastOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

unint64_t mlir::arith::IndexCastUIOp::fold(void *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (*(_UNKNOWN **)(*(void *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    double v5 = (void *)ElementTypeOrSelf;
  }
  else {
    double v5 = 0;
  }
  v41[0] = v5;
  if (v5)
  {
    unsigned int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)v41);
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  else
  {
    unsigned int Width = 64;
    uint64_t v7 = *(uint64_t **)(a2 + 40);
    uint64_t v8 = *v7;
    if (!*v7) {
      return v8 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  BOOL v9 = *(void **)(*(void *)v8 + 136);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v8 & 0xFFFFFFFFFFFFFFFBLL;
  }
  BOOL v10 = (void *)(*(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (v9 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v34 = v8;
    mlir::IntegerAttr::getValue((uint64_t)&v34, (llvm::APInt *)&v39);
    llvm::APInt::zextOrTrunc((uint64_t *)&v39, Width, (uint64_t)v41);
    if (DWORD2(v39) >= 0x41 && (void)v39) {
      MEMORY[0x21667D390](v39, 0x1000C8000313F17);
    }
    uint64_t v8 = mlir::IntegerAttr::get((uint64_t)v10, (const llvm::APInt *)v41);
    if (LODWORD(v41[1]) >= 0x41) {
      goto LABEL_35;
    }
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(v8)) {
      BOOL v11 = (void *)v8;
    }
    else {
      BOOL v11 = 0;
    }
    v41[0] = v11;
    if (v11 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v41))
    {
      uint64_t v37 = *v7;
      mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v37, (uint64_t)v41);
      long long v39 = *(_OWORD *)v41;
      long long v40 = v42[0];
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v39, (llvm::APInt *)&v34);
      llvm::APInt::zextOrTrunc(&v34, Width, (uint64_t)v41);
      if (v35 >= 0x41 && v34) {
        MEMORY[0x21667D390](v34, 0x1000C8000313F17);
      }
      if (v10) {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v12, (llvm::APInt *)v41, 1);
      if (LODWORD(v41[1]) >= 0x41)
      {
LABEL_35:
        if (v41[0]) {
          MEMORY[0x21667D390](v41[0], 0x1000C8000313F17);
        }
      }
    }
    else
    {
      uint64_t v8 = *v7;
      if (mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v7 + 8))
      {
        uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v8 + 8);
        uint64_t v37 = v8;
        uint64_t v38 = v13;
        if (v8)
        {
          mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v37, (uint64_t)&v39);
          if (BYTE8(v40))
          {
            LOWORD(v34) = v39;
            if ((_BYTE)v39) {
              uint64_t v35 = *((void *)&v39 + 1);
            }
            else {
              (*(void (**)(uint64_t *__return_ptr))(**((void **)&v39 + 1) + 16))(&v35);
            }
            uint64_t v36 = v40;
            v41[0] = v42;
            v41[1] = (void *)0x300000000;
            unint64_t NumElements = mlir::ElementsAttr::getNumElements(v37, v38);
            llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v41, NumElements);
            uint64_t v15 = mlir::ElementsAttr::getNumElements(v37, v38);
            if (v15)
            {
              uint64_t v16 = v15;
              uint64_t v17 = v36;
              do
              {
                if (BYTE1(v34)) {
                  uint64_t v18 = 0;
                }
                else {
                  uint64_t v18 = v17;
                }
                if ((_BYTE)v34)
                {
                  uint64_t v19 = (const llvm::APInt *)(v35 + 16 * v18);
                  unsigned int v31 = *((_DWORD *)v19 + 2);
                  if (v31 > 0x40) {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v30, v19);
                  }
                  uint64_t v30 = *(void *)v19;
                }
                else
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v35 + 24))(&v30);
                }
                llvm::APInt::zextOrTrunc(&v30, Width, (uint64_t)&v32);
                if (v31 >= 0x41 && v30) {
                  MEMORY[0x21667D390](v30, 0x1000C8000313F17);
                }
                Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v41, (unint64_t)&v32, 1);
                uint64_t v21 = (llvm::APInt *)((char *)v41[0] + 16 * LODWORD(v41[1]));
                unsigned int v22 = *((_DWORD *)Address + 2);
                *((_DWORD *)v21 + 2) = v22;
                if (v22 > 0x40) {
                  llvm::APInt::initSlowCase(v21, (const llvm::APInt *)Address);
                }
                *(void *)uint64_t v21 = *(void *)Address;
                ++LODWORD(v41[1]);
                if (v33 >= 0x41 && v32) {
                  MEMORY[0x21667D390](v32, 0x1000C8000313F17);
                }
                uint64_t v17 = ++v36;
                --v16;
              }
              while (v16);
            }
            if (v10) {
              uint64_t v23 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v10 + 8);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v8 = mlir::DenseElementsAttr::get((uint64_t)v10, v23, (llvm::APInt *)v41[0], LODWORD(v41[1]));
            uint64_t v24 = (char *)v41[0];
            if (LODWORD(v41[1]))
            {
              uint64_t v25 = 16 * LODWORD(v41[1]);
              do
              {
                if (*(_DWORD *)&v24[v25 - 8] >= 0x41u)
                {
                  uint64_t v26 = *(void *)&v24[v25 - 16];
                  if (v26) {
                    MEMORY[0x21667D390](v26, 0x1000C8000313F17);
                  }
                }
                v25 -= 16;
              }
              while (v25);
              uint64_t v24 = (char *)v41[0];
            }
            if (v24 != (char *)v42) {
              free(v24);
            }
            if (!(_BYTE)v34)
            {
              uint64_t v27 = v35;
              uint64_t v35 = 0;
              if (v27) {
                (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
              }
            }
            if (BYTE8(v40))
            {
              if (!(_BYTE)v39)
              {
                uint64_t v28 = *((void *)&v39 + 1);
                *((void *)&v39 + 1) = 0;
                if (v28) {
                  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
                }
              }
            }
          }
          else
          {
            uint64_t v8 = 0;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
  }
  return v8 & 0xFFFFFFFFFFFFFFFBLL;
}

void mlir::arith::IndexCastUIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

BOOL mlir::arith::BitcastOp::areCastCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = areValidCastInputsAndOutputs(a1, a2, a3, a4);
  if (result)
  {
    uint64_t v7 = (void *)mlir::TypeRange::dereference_iterator(a1, 0);
    uint64_t v12 = getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(v7);
    uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a3, 0);
    uint64_t v9 = getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(v8);
    BOOL result = 0;
    uint64_t v11 = v9;
    if (v12)
    {
      if (v9)
      {
        IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v12);
        return IntOrFloatBitWidth == mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v11);
      }
    }
  }
  return result;
}

BOOL areValidCastInputsAndOutputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 0;
  v16[2] = *MEMORY[0x263EF8340];
  if (a2 == 1 && a4 == 1)
  {
    unint64_t v7 = mlir::TypeRange::dereference_iterator(a1, 0);
    unint64_t v8 = mlir::TypeRange::dereference_iterator(a3, 0);
    if (*(_UNKNOWN **)(*(void *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = 0;
    }
    unint64_t v14 = v9;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = 0;
    }
    unint64_t v13 = v10;
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11
      || (uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v14),
          Values == mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v13)))
    {
      unint64_t v14 = mlir::TypeRange::dereference_iterator(a1, 0);
      mlir::ValueRange::ValueRange(v16, (uint64_t)&v14, 1uLL);
      unint64_t v13 = mlir::TypeRange::dereference_iterator(a3, 0);
      mlir::ValueRange::ValueRange(v15, (uint64_t)&v13, 1uLL);
      return mlir::verifyCompatibleShapes(v16[0], v16[1], v15[0], v15[1]) != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t getTypeIfLikeOrMemRef<mlir::IntegerType,mlir::IndexType,mlir::FloatType>(void *a1)
{
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    uint64_t v2 = *(void **)(*a1 + 136);
    BOOL v3 = v2 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
      || v2 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
    BOOL v4 = v3 || v2 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
    if (!v4 && v2 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
      return 0;
    }
  }
  uint64_t result = mlir::getElementTypeOrSelf(a1);
  unint64_t v7 = *(void **)(*(void *)result + 136);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    || v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  BOOL v9 = v8 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
  BOOL v10 = v9 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  BOOL v11 = v10 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  BOOL v12 = v11 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  BOOL v13 = v12 || v7 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  BOOL v14 = v13 || v7 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  BOOL v15 = v14 || v7 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  BOOL v16 = v15 || v7 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  BOOL v17 = v16 || v7 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  BOOL v18 = v17 || v7 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  BOOL v19 = v18 || v7 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  if (!v19 && v7 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id) {
    return 0;
  }
  return result;
}

unint64_t mlir::arith::BitcastOp::fold(void *a1, uint64_t a2)
{
  void v33[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = **(const llvm::APInt ***)(a2 + 40);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  BOOL v4 = mlir::DenseElementsAttr::classof(**(void **)(a2 + 40));
  if (v4) {
    double v5 = v2;
  }
  else {
    double v5 = 0;
  }
  uint64_t v30 = v5;
  if (v4)
  {
    if (v3) {
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    unint64_t v32 = v3;
    v33[0] = v6;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v32);
    return mlir::DenseElementsAttr::bitcast((uint64_t)&v30, OperandRange) & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v3 + 8)) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v2 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    unint64_t v29 = (unint64_t)v2;
    uint64_t Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v29, (uint64_t)&v32);
    BOOL v11 = (void *)v33[0];
    BOOL v12 = llvm::APFloatBase::PPCDoubleDouble(Value);
    if (v12 == v11)
    {
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v33, (uint64_t)&v30);
      if (v12 != (void *)v33[0]) {
        goto LABEL_17;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::bitcastToAPInt(v33, (uint64_t)&v30);
      if (v12 != (void *)v33[0])
      {
LABEL_17:
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
        goto LABEL_20;
      }
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
    goto LABEL_20;
  }
  uint64_t v28 = v2;
  mlir::IntegerAttr::getValue((uint64_t)&v28, (llvm::APInt *)&v30);
LABEL_20:
  BOOL v13 = *(void **)(*(void *)v3 + 136);
  BOOL v24 = v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  if (v24 && (unint64_t v29 = v3) != 0)
  {
    FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v29);
    uint64_t v26 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(FloatSemantics);
    if (v26 == FloatSemantics) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v33, (uint64_t)v26);
    }
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v33, FloatSemantics, &v30);
    uint64_t v27 = mlir::FloatAttr::get(v3, (uint64_t)&v32);
    if (v26 == (llvm::APFloatBase *)v33[0])
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v33);
      unint64_t v7 = v27 & 0xFFFFFFFFFFFFFFFBLL;
      if (v31 < 0x41) {
        return v7;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v33);
      unint64_t v7 = v27 & 0xFFFFFFFFFFFFFFFBLL;
      if (v31 < 0x41) {
        return v7;
      }
    }
  }
  else
  {
    unint64_t v7 = mlir::IntegerAttr::get(v3, (const llvm::APInt *)&v30) & 0xFFFFFFFFFFFFFFFBLL;
    if (v31 < 0x41) {
      return v7;
    }
  }
  if (v30) {
    MEMORY[0x21667D390](v30, 0x1000C8000313F17);
  }
  return v7;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2, const llvm::APInt **a3)
{
  uint64_t v6 = (llvm::APFloatBase *)((char *)a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v6, (uint64_t)a2);
  }
  llvm::detail::IEEEFloat::IEEEFloat(v6, a2, a3);
  return a1;
}

void mlir::arith::BitcastOp::getCanonicalizationPatterns()
{
}

uint64_t mlir::arith::applyCmpPredicate(uint64_t a1, const void **this, const void **a3)
{
  switch(a1)
  {
    case 1:
      if (*((_DWORD *)this + 2) > 0x40u) {
        uint64_t result = !llvm::APInt::equalSlowCase(this, a3);
      }
      else {
        uint64_t result = *this != *a3;
      }
      break;
    case 2:
      uint64_t result = llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) >> 31;
      break;
    case 3:
      uint64_t result = (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) < 1;
      break;
    case 4:
      uint64_t result = (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) > 0;
      break;
    case 5:
      uint64_t result = (int)llvm::APInt::compareSigned((llvm::APInt *)this, (const llvm::APInt *)a3) >= 0;
      break;
    case 6:
      uint64_t result = llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) >> 31;
      break;
    case 7:
      uint64_t result = (int)llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) < 1;
      break;
    case 8:
      uint64_t result = (int)llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) > 0;
      break;
    case 9:
      uint64_t result = (int)llvm::APInt::compare((llvm::APInt *)this, (const llvm::APInt *)a3) >= 0;
      break;
    default:
      if (*((_DWORD *)this + 2) > 0x40u)
      {
        uint64_t result = llvm::APInt::equalSlowCase(this, a3);
      }
      else
      {
        uint64_t result = *this == *a3;
      }
      break;
  }
  return result;
}

uint64_t mlir::arith::CmpIOp::fold(uint64_t *a1, uint64_t a2)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  if (*(void *)(*(void *)(*a1 + 72) + 24) == *(void *)(*(void *)(*a1 + 72) + 56))
  {
    *(void *)unsigned int v119 = *(void *)(*a1 + 80);
    BOOL v8 = (mlir::MLIRContext *)((0x2A9u >> mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119)) & 1);
    *(void *)unsigned int v119 = *(void *)(*a1 - 8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v119);
    I1Sameuint64_t Shape = mlir::BoolAttr::get(Context, v8);
    *(void *)&long long v117 = I1SameShape;
    BOOL v11 = *(void **)v119;
    if (*(void *)v119)
    {
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(**(void **)v119 + 8))
      {
        uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v11 + 8);
        if (v11) {
          I1Sameuint64_t Shape = mlir::DenseElementsAttr::get((uint64_t)v11, v12, (uint64_t *)&v117, 1uLL);
        }
      }
    }
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 48) + 8);
  if (!v4) {
    goto LABEL_50;
  }
  *(_DWORD *)&v119[8] = 1;
  *(void *)unsigned int v119 = 0;
  *(void *)&long long v117 = v119;
  int v5 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v117, v4);
  int v6 = *(_DWORD *)&v119[8];
  if (v5)
  {
    if (*(_DWORD *)&v119[8] < 0x41u)
    {
      BOOL v7 = *(void *)v119 == 0;
      goto LABEL_17;
    }
    if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v119) > 0x40)
    {
      if (*(void *)v119) {
        MEMORY[0x21667D390](*(void *)v119, 0x1000C8000313F17);
      }
      goto LABEL_50;
    }
    BOOL v7 = **(void **)v119 == 0;
  }
  else
  {
    BOOL v7 = 0;
    if (*(_DWORD *)&v119[8] < 0x41u) {
      goto LABEL_17;
    }
  }
  if (!*(void *)v119)
  {
LABEL_17:
    if (!v7) {
      goto LABEL_50;
    }
    goto LABEL_18;
  }
  MEMORY[0x21667D390](*(void *)v119, 0x1000C8000313F17);
  if (!v7) {
    goto LABEL_50;
  }
LABEL_18:
  *(void *)unsigned int v119 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v119);
  if (!DefiningOp) {
    goto LABEL_20;
  }
  uint64_t v14 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id) {
    goto LABEL_20;
  }
  unint64_t v19 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void **)(*(void *)v19 + 136);
  if (v20 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    unint64_t v21 = *(void *)(*(void *)(*(void *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v21 = 0;
  }
  *(void *)unsigned int v119 = v21;
  if (!v21)
  {
    if (v20 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
      unint64_t v19 = 0;
    }
    *(void *)unsigned int v119 = v19;
    if (!v19) {
      goto LABEL_20;
    }
    *(void *)&long long v117 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v119);
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v117) != 1) {
      goto LABEL_20;
    }
LABEL_42:
    *(void *)unsigned int v119 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119) == 1) {
      return *(void *)(*(void *)(v14 + 72) + 24) | 4;
    }
    goto LABEL_20;
  }
  if (mlir::IntegerType::getWidth((mlir::IntegerType *)v119) == 1) {
    goto LABEL_42;
  }
LABEL_20:
  *(void *)unsigned int v119 = *(void *)(*(void *)(*a1 + 72) + 24);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v119);
  if (!v15) {
    goto LABEL_50;
  }
  uint64_t v14 = v15;
  if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id) {
    goto LABEL_50;
  }
  unint64_t v16 = *(void *)(*(void *)(*(void *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  BOOL v17 = *(void **)(*(void *)v16 + 136);
  if (v17 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    unint64_t v18 = *(void *)(*(void *)(*(void *)(v15 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v18 = 0;
  }
  *(void *)unsigned int v119 = v18;
  if (v18)
  {
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)v119) != 1) {
      goto LABEL_50;
    }
  }
  else
  {
    if (v17 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
      unint64_t v16 = 0;
    }
    *(void *)unsigned int v119 = v16;
    if (!v16) {
      goto LABEL_50;
    }
    *(void *)&long long v117 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)v119);
    if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v117) != 1) {
      goto LABEL_50;
    }
  }
  *(void *)unsigned int v119 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119) == 1) {
    return *(void *)(*(void *)(v14 + 72) + 24) | 4;
  }
LABEL_50:
  uint64_t v23 = *(void *)(a2 + 48);
  BOOL v24 = *(void **)v23;
  if (!*(void *)v23)
  {
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    return 0;
  }
  if (!*(void *)(v23 + 8))
  {
    *(int64x2_t *)&v119[8] = vdupq_n_s64(4uLL);
    *(_OWORD *)&_WORD v119[24] = xmmword_211F09760;
    int64x2_t v120 = vdupq_n_s64(5uLL);
    long long v121 = xmmword_211F09770;
    int64x2_t v122 = vdupq_n_s64(8uLL);
    long long v123 = xmmword_211F09780;
    int64x2_t v124 = vdupq_n_s64(9uLL);
    v126[0] = 0;
    v126[1] = 0;
    uint64_t v125 = 7;
    int64x2_t v127 = vdupq_n_s64(1uLL);
    *(void *)&long long v117 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
    uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v117);
    uint64_t v26 = (int64x2_t *)v119;
    switch(result)
    {
      case 0:
        uint64_t v26 = (int64x2_t *)v126;
        goto LABEL_94;
      case 1:
        uint64_t v26 = &v127;
        goto LABEL_94;
      case 2:
        goto LABEL_94;
      case 3:
        uint64_t v26 = (int64x2_t *)&v119[32];
        goto LABEL_94;
      case 4:
        uint64_t v26 = (int64x2_t *)&v119[16];
        goto LABEL_94;
      case 5:
        uint64_t v26 = (int64x2_t *)&v120.u64[1];
        goto LABEL_94;
      case 6:
        uint64_t v26 = (int64x2_t *)((char *)&v121 + 8);
        goto LABEL_94;
      case 7:
        uint64_t v26 = (int64x2_t *)((char *)&v123 + 8);
        goto LABEL_94;
      case 8:
        uint64_t v26 = (int64x2_t *)&v122.u64[1];
        goto LABEL_94;
      case 9:
        uint64_t v26 = (int64x2_t *)&v124.u64[1];
LABEL_94:
        unint64_t v43 = v26->u64[1];
        uint64_t v44 = *a1;
        uint64_t v45 = **(void **)(*(void *)(*a1 + 48) + 96);
        uint64_t v46 = mlir::Attribute::getContext((mlir::Attribute *)(*a1 + 24));
        uint64_t v47 = mlir::IntegerType::get(v46, 0x40u, 0);
        uint64_t v48 = mlir::IntegerAttr::get(v47, v43);
        mlir::Operation::setAttr(v44, v45, v48);
        uint64_t v49 = *(uint64_t **)(*a1 + 72);
        char v50 = (uint64_t *)v49[3];
        uint64_t v51 = (uint64_t *)v49[7];
        uint64_t v52 = (uint64_t *)v49[1];
        if (v52)
        {
          uint64_t *v52 = *v49;
          if (*v49) {
            *(void *)(*v49 + 8) = v49[1];
          }
        }
        v49[3] = (uint64_t)v51;
        v49[1] = (uint64_t)v51;
        uint64_t v53 = *v51;
        uint64_t *v49 = *v51;
        if (v53) {
          *(void *)(v53 + 8) = v49;
        }
        uint64_t *v51 = (uint64_t)v49;
        uint64_t v54 = *(void **)(*a1 + 72);
        uint64_t v55 = v54 + 4;
        uint64_t v56 = (void *)v54[5];
        if (v56)
        {
          void *v56 = *v55;
          if (*v55) {
            *(void *)(*v55 + 8) = v54[5];
          }
        }
        v54[7] = v50;
        v54[5] = v50;
        uint64_t v57 = *v50;
        v54[4] = *v50;
        if (v57) {
          *(void *)(v57 + 8) = v55;
        }
        uint64_t *v50 = (uint64_t)v55;
        if (*(_DWORD *)(*a1 + 36)) {
          uint64_t v58 = *a1 - 16;
        }
        else {
          uint64_t v58 = 0;
        }
        uint64_t result = mlir::detail::OpResultImpl::getNextResultAtOffset(v58, 0) | 4;
        break;
      default:
        return result;
    }
    return result;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v24 + 8))
  {
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    return 0;
  }
  uint64_t v25 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v24 + 8);
  uint64_t v87 = v24;
  uint64_t v88 = v25;
  if (!v24) {
    return 0;
  }
  uint64_t v27 = *(uint64_t **)(a2 + 48);
  uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v87);
  I1Sameuint64_t Shape = getI1SameShape(canMapOperands);
  *(void *)unsigned int v119 = *(void *)(*a1 + 16 * (((unint64_t)*(unsigned int *)(*a1 + 44) >> 23) & 1) + 64);
  uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v119);
  if (!I1SameShape) {
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v30 = *v27;
  if (!*v27) {
    goto LABEL_109;
  }
  uint64_t v31 = v27[1];
  if (!v31) {
    goto LABEL_109;
  }
  uint64_t v32 = Int;
  if (*(_UNKNOWN **)(*(void *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(void *)v31 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *(void *)&long long v117 = *v27;
    uint64_t v102 = v31;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v117);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v102))
    {
      mlir::IntegerAttr::getValue((uint64_t)&v117, (llvm::APInt *)&v115);
      mlir::IntegerAttr::getValue((uint64_t)&v102, (llvm::APInt *)&v113);
      unsigned int v65 = mlir::arith::applyCmpPredicate(v32, &v115, &v113);
      *(_DWORD *)&v119[8] = 1;
      *(void *)unsigned int v119 = v65;
      v119[16] = 1;
      if (v114 >= 0x41 && v113) {
        MEMORY[0x21667D390](v113, 0x1000C8000313F17);
      }
      if (v116 >= 0x41 && v115) {
        MEMORY[0x21667D390](v115, 0x1000C8000313F17);
      }
      uint64_t v40 = mlir::IntegerAttr::get(I1SameShape, (const llvm::APInt *)v119);
      goto LABEL_128;
    }
    goto LABEL_109;
  }
  if (mlir::DenseElementsAttr::classof(*v27)) {
    uint64_t v33 = v30;
  }
  else {
    uint64_t v33 = 0;
  }
  *(void *)unsigned int v119 = v33;
  if (v33 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v119))
  {
    uint64_t v34 = v27[1];
    uint64_t v35 = mlir::DenseElementsAttr::classof(v34) ? v34 : 0;
    *(void *)unsigned int v119 = v35;
    if (v35)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)v119))
      {
        uint64_t v36 = v27[1];
        uint64_t v102 = *v27;
        uint64_t v99 = v36;
        uint64_t v37 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
        if (v37 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v99))
        {
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v102, (uint64_t)v119);
          long long v117 = *(_OWORD *)v119;
          long long v118 = *(_OWORD *)&v119[16];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v117, (llvm::APInt *)&v111);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v99, (uint64_t)v119);
          long long v117 = *(_OWORD *)v119;
          long long v118 = *(_OWORD *)&v119[16];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v117, (llvm::APInt *)&v109);
          unsigned int v38 = mlir::arith::applyCmpPredicate(v32, &v111, &v109);
          *(_DWORD *)&v119[8] = 1;
          *(void *)unsigned int v119 = v38;
          v119[16] = 1;
          if (v110 >= 0x41 && v109) {
            MEMORY[0x21667D390](v109, 0x1000C8000313F17);
          }
          if (v112 >= 0x41 && v111) {
            MEMORY[0x21667D390](v111, 0x1000C8000313F17);
          }
          uint64_t v39 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)I1SameShape + 8);
          uint64_t v40 = mlir::DenseElementsAttr::get(I1SameShape, v39, (llvm::APInt *)v119, 1);
LABEL_128:
          I1Sameuint64_t Shape = v40;
          if (v119[16] && *(_DWORD *)&v119[8] >= 0x41u)
          {
            if (*(void *)v119) {
              MEMORY[0x21667D390](*(void *)v119, 0x1000C8000313F17);
            }
          }
          return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
        }
        goto LABEL_109;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v27 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v27[1] + 8))
  {
LABEL_109:
    I1Sameuint64_t Shape = 0;
    return I1SameShape & 0xFFFFFFFFFFFFFFFBLL;
  }
  uint64_t v41 = (void *)*v27;
  if (*v27) {
    uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v41 + 8);
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v107 = v41;
  uint64_t v108 = v42;
  uint64_t v60 = (void *)v27[1];
  if (v60) {
    uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v60 + 8);
  }
  else {
    uint64_t v61 = 0;
  }
  v106[0] = v60;
  v106[1] = v61;
  uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v107);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v106)) {
    return 0;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v107, (uint64_t)&v117);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v106, (uint64_t)&v102);
  uint64_t v63 = 0;
  int v64 = v105;
  if (BYTE8(v118) && v105)
  {
    LOWORD(v99) = v117;
    if ((_BYTE)v117) {
      uint64_t v100 = *((void *)&v117 + 1);
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(**((void **)&v117 + 1) + 16))(&v100);
    }
    uint64_t v101 = v118;
    __int16 v96 = v102;
    if ((_BYTE)v102) {
      uint64_t v97 = v103;
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v103 + 16))(&v97);
    }
    uint64_t v98 = v104;
    *(void *)unsigned int v119 = &v119[16];
    *(void *)&v119[8] = 0x400000000;
    unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v107, v108);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)v119, NumElements);
    uint64_t v67 = mlir::ElementsAttr::getNumElements((uint64_t)v107, v108);
    if (v67)
    {
      uint64_t v68 = v67;
      uint64_t v69 = v101;
      while (1)
      {
        uint64_t v70 = BYTE1(v99) ? 0 : v69;
        if ((_BYTE)v99)
        {
          uint64_t v71 = (const llvm::APInt *)(v100 + 16 * v70);
          unsigned int v92 = *((_DWORD *)v71 + 2);
          if (v92 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v91, v71);
          }
          uint64_t v91 = *(const void **)v71;
        }
        else
        {
          (*(void (**)(const void **__return_ptr))(*(void *)v100 + 24))(&v91);
        }
        uint64_t v72 = HIBYTE(v96) ? 0 : v98;
        if ((_BYTE)v96)
        {
          uint64_t v73 = (const llvm::APInt *)(v97 + 16 * v72);
          unsigned int v74 = *((_DWORD *)v73 + 2);
          unsigned int v90 = v74;
          if (v74 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v89, v73);
          }
          uint64_t v89 = *(const void **)v73;
        }
        else
        {
          (*(void (**)(const void **__return_ptr))(*(void *)v97 + 24))(&v89);
          unsigned int v74 = v90;
        }
        unsigned int v75 = mlir::arith::applyCmpPredicate(v32, &v91, &v89);
        unsigned int v94 = 1;
        uint64_t v93 = v75;
        char v95 = 1;
        if (v74 >= 0x41 && v89) {
          MEMORY[0x21667D390](v89, 0x1000C8000313F17);
        }
        if (v92 >= 0x41 && v91) {
          MEMORY[0x21667D390](v91, 0x1000C8000313F17);
        }
        if (!v95) {
          break;
        }
        Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)v119, (unint64_t)&v93, 1);
        uint64_t v77 = (llvm::APInt *)(*(void *)v119 + 16 * *(unsigned int *)&v119[8]);
        unsigned int v78 = *((_DWORD *)Address + 2);
        *((_DWORD *)v77 + 2) = v78;
        if (v78 > 0x40) {
          llvm::APInt::initSlowCase(v77, (const llvm::APInt *)Address);
        }
        *(void *)uint64_t v77 = *(void *)Address;
        ++*(_DWORD *)&v119[8];
        if (v95 && v94 >= 0x41 && v93) {
          MEMORY[0x21667D390](v93, 0x1000C8000313F17);
        }
        uint64_t v69 = ++v101;
        ++v98;
        if (!--v68) {
          goto LABEL_169;
        }
      }
      uint64_t v63 = 0;
    }
    else
    {
LABEL_169:
      uint64_t v79 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)I1SameShape + 8);
      uint64_t v63 = mlir::DenseElementsAttr::get(I1SameShape, v79, *(llvm::APInt **)v119, *(unsigned int *)&v119[8]);
    }
    char v80 = *(char **)v119;
    if (*(_DWORD *)&v119[8])
    {
      uint64_t v81 = 16 * *(unsigned int *)&v119[8];
      do
      {
        if (*(_DWORD *)&v80[v81 - 8] >= 0x41u)
        {
          uint64_t v82 = *(void *)&v80[v81 - 16];
          if (v82) {
            MEMORY[0x21667D390](v82, 0x1000C8000313F17);
          }
        }
        v81 -= 16;
      }
      while (v81);
      char v80 = *(char **)v119;
    }
    if (v80 != &v119[16]) {
      free(v80);
    }
    if (!(_BYTE)v96)
    {
      uint64_t v83 = v97;
      uint64_t v97 = 0;
      if (v83) {
        (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
      }
    }
    if (!(_BYTE)v99)
    {
      uint64_t v84 = v100;
      uint64_t v100 = 0;
      if (v84) {
        (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
      }
    }
    int v64 = v105;
  }
  if (v64)
  {
    if (!(_BYTE)v102)
    {
      uint64_t v85 = v103;
      uint64_t v103 = 0;
      if (v85) {
        (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
      }
    }
  }
  if (BYTE8(v118))
  {
    if (!(_BYTE)v117)
    {
      uint64_t v86 = *((void *)&v117 + 1);
      *((void *)&v117 + 1) = 0;
      if (v86) {
        (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
      }
    }
  }
  return v63 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::CmpIOp::getPredicate(mlir::arith::CmpIOp *this)
{
  uint64_t v2 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v2);
}

void mlir::arith::CmpIOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::applyCmpPredicate(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  int v6 = *(void **)(a2 + 8);
  BOOL v7 = llvm::APFloatBase::PPCDoubleDouble(a1);
  BOOL v8 = (const llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v7 == v6) {
    unsigned int v9 = llvm::detail::DoubleAPFloat::compare(v5, v8);
  }
  else {
    unsigned int v9 = llvm::detail::IEEEFloat::compare(v5, v8);
  }
  unsigned int v10 = v9;
  uint64_t result = 0;
  switch((unint64_t)a1)
  {
    case 1uLL:
      uint64_t result = v10 == 1;
      break;
    case 2uLL:
      uint64_t result = v10 == 2;
      break;
    case 3uLL:
      uint64_t result = v10 - 1 < 2;
      break;
    case 4uLL:
      uint64_t result = v10 == 0;
      break;
    case 5uLL:
      uint64_t result = v10 < 2;
      break;
    case 6uLL:
      uint64_t result = (v10 & 0xFFFFFFFD) != 1;
      break;
    case 7uLL:
      uint64_t result = v10 != 3;
      break;
    case 8uLL:
      uint64_t result = (v10 & 0xFFFFFFFD) == 1;
      break;
    case 9uLL:
      uint64_t result = (v10 & 0xFFFFFFFE) == 2;
      break;
    case 0xAuLL:
      uint64_t result = v10 == 1 || (v10 & 0xFFFFFFFE) == 2;
      break;
    case 0xBuLL:
      uint64_t result = v10 == 3 || v10 == 0;
      break;
    case 0xCuLL:
      BOOL v14 = v10 >= 4;
      unsigned int v15 = (0xBu >> (v10 & 0xF)) & 1;
      if (v14) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = v15;
      }
      break;
    case 0xDuLL:
      uint64_t result = v10 != 1;
      break;
    case 0xEuLL:
      uint64_t result = v10 == 3;
      break;
    case 0xFuLL:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t mlir::arith::CmpFOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(uint64_t **)(a2 + 48);
  uint64_t v4 = *v3;
  if (*v3 && *(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v4 = 0;
  }
  uint64_t v25 = v4;
  uint64_t v5 = v3[1];
  if (!v5)
  {
    uint64_t v6 = 0;
    uint64_t v24 = 0;
    if (!v4) {
      goto LABEL_16;
    }
LABEL_11:
    uint64_t Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v25, (uint64_t)&v28);
    BOOL v8 = v29;
    unsigned int v9 = llvm::APFloatBase::PPCDoubleDouble(Value);
    unsigned int v10 = v30;
    if (v9 != v8) {
      unsigned int v10 = &v28;
    }
    int v11 = *((unsigned char *)v10 + 28) & 7;
    if (v9 == v8)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v29);
      if (v11 != 1) {
        goto LABEL_16;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v29);
      if (v11 != 1) {
        goto LABEL_16;
      }
    }
    uint64_t v6 = v25;
    uint64_t v24 = v25;
    goto LABEL_16;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v24 = v6;
  if (v4) {
    goto LABEL_11;
  }
LABEL_16:
  if (v6)
  {
    uint64_t v12 = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v24, (uint64_t)&v28);
    BOOL v13 = v29;
    BOOL v14 = llvm::APFloatBase::PPCDoubleDouble(v12);
    unsigned int v15 = v30;
    if (v14 != v13) {
      unsigned int v15 = &v28;
    }
    int v16 = *((unsigned char *)v15 + 28) & 7;
    if (v14 == v13)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v29);
      if (v16 == 1)
      {
LABEL_21:
        uint64_t v17 = v24;
        uint64_t v25 = v24;
        unint64_t result = 0;
        if (!v24) {
          return result;
        }
LABEL_29:
        if (!v17) {
          return result;
        }
        uint64_t v28 = *(void *)(*(void *)a1
                        + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                        + 64);
        uint64_t Int = (llvm::APFloatBase *)mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28);
        mlir::FloatAttr::getValue((mlir::FloatAttr *)&v25, (uint64_t)&v28);
        mlir::FloatAttr::getValue((mlir::FloatAttr *)&v24, (uint64_t)v26);
        uint64_t v20 = (llvm::APFloatBase *)mlir::arith::applyCmpPredicate(Int, (uint64_t)&v28, (uint64_t)v26);
        unint64_t v21 = (void *)v27[0];
        unsigned int v22 = llvm::APFloatBase::PPCDoubleDouble(v20);
        if (v22 == v21)
        {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v27);
          if (v22 != v29) {
            goto LABEL_32;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v27);
          if (v22 != v29)
          {
LABEL_32:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v29);
LABEL_35:
            uint64_t Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)(*(void *)a1 + 24));
            return mlir::BoolAttr::get(Context, v20) & 0xFFFFFFFFFFFFFFFBLL;
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v29);
        goto LABEL_35;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v29);
      if (v16 == 1) {
        goto LABEL_21;
      }
    }
    uint64_t v17 = v24;
    unint64_t result = 0;
    if (!v25) {
      return result;
    }
    goto LABEL_29;
  }
  uint64_t v17 = 0;
  unint64_t result = 0;
  if (v25) {
    goto LABEL_29;
  }
  return result;
}

void mlir::arith::CmpFOp::getCanonicalizationPatterns()
{
}

void mlir::arith::SelectOp::getCanonicalizationPatterns()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

uint64_t mlir::arith::SelectOp::fold(uint64_t a1, uint64_t a2)
{
  v82[6] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(*(void *)a1 + 72);
  uint64_t v3 = v2[7];
  uint64_t v4 = v2[11];
  if (v3 == v4) {
    return v3 | 4;
  }
  uint64_t v7 = v2[3];
  uint64_t v74 = v7;
  BOOL v8 = *(uint64_t **)(a2 + 40);
  uint64_t v9 = *v8;
  if (!*v8) {
    goto LABEL_25;
  }
  LODWORD(v81) = 1;
  char v80 = 0;
  v75.n128_u64[0] = (unint64_t)&v80;
  int v10 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v9);
  int v11 = v81;
  if (!v10)
  {
    BOOL v12 = 0;
    if (v81 < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (v81 < 0x41)
  {
    BOOL v12 = v80 == (void *)1;
    goto LABEL_12;
  }
  if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) <= 0x40)
  {
    BOOL v12 = *(void *)v80 == 1;
LABEL_7:
    if (v80)
    {
      MEMORY[0x21667D390](v80, 0x1000C8000313F17);
      if (!v12) {
        goto LABEL_16;
      }
      return v3 | 4;
    }
LABEL_12:
    if (!v12) {
      goto LABEL_16;
    }
    return v3 | 4;
  }
  if (v80) {
    MEMORY[0x21667D390](v80, 0x1000C8000313F17);
  }
LABEL_16:
  BOOL v8 = *(uint64_t **)(a2 + 40);
  uint64_t v13 = *v8;
  if (*v8)
  {
    LODWORD(v81) = 1;
    char v80 = 0;
    v75.n128_u64[0] = (unint64_t)&v80;
    int v14 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v13);
    int v15 = v81;
    if (v14)
    {
      if (v81 < 0x41)
      {
        BOOL v16 = v80 == 0;
        goto LABEL_23;
      }
      if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
      {
        if (v80) {
          MEMORY[0x21667D390](v80, 0x1000C8000313F17);
        }
LABEL_24:
        BOOL v8 = *(uint64_t **)(a2 + 40);
        goto LABEL_25;
      }
      BOOL v16 = *(void *)v80 == 0;
    }
    else
    {
      BOOL v16 = 0;
      if (v81 < 0x41) {
        goto LABEL_23;
      }
    }
    if (v80) {
      MEMORY[0x21667D390](v80, 0x1000C8000313F17);
    }
LABEL_23:
    if (v16) {
      return v4 | 4;
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v17 = v8[1];
  if (v17 && *(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v4 | 4;
  }
  uint64_t v18 = v8[2];
  if (v18 && *(_UNKNOWN **)(*(void *)v18 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    return v3 | 4;
  }
  unint64_t v68 = *(void *)(*(void *)a1 - 8) & 0xFFFFFFFFFFFFFFF8;
  if (!mlir::Type::isInteger((mlir::Type *)&v68, 1)) {
    goto LABEL_60;
  }
  uint64_t v19 = *(void *)(*(void *)(a2 + 40) + 8);
  if (!v19) {
    goto LABEL_60;
  }
  LODWORD(v81) = 1;
  char v80 = 0;
  v75.n128_u64[0] = (unint64_t)&v80;
  int v20 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v19);
  unsigned int v21 = v81;
  if (!v20)
  {
    BOOL v24 = 0;
    if (v81 >= 0x41) {
      goto LABEL_43;
    }
LABEL_46:
    if (!v24) {
      goto LABEL_60;
    }
LABEL_47:
    uint64_t v25 = *(void *)(*(void *)(a2 + 40) + 16);
    if (v25)
    {
      LODWORD(v81) = 1;
      char v80 = 0;
      v75.n128_u64[0] = (unint64_t)&v80;
      if (mlir::detail::constant_int_value_binder::match((uint64_t *)&v75, v25)) {
        BOOL v26 = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke((llvm::APInt *)&v80);
      }
      else {
        BOOL v26 = 0;
      }
      if (v81 >= 0x41 && v80) {
        MEMORY[0x21667D390](v80, 0x1000C8000313F17);
      }
      if (v26) {
        return v7 | 4;
      }
    }
    goto LABEL_60;
  }
  if (v81 >= 0x41)
  {
    if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
    {
      if (v80) {
        MEMORY[0x21667D390](v80, 0x1000C8000313F17);
      }
      goto LABEL_60;
    }
    unsigned int v22 = v80;
  }
  else
  {
    unsigned int v22 = &v80;
  }
  BOOL v24 = *v22 == 1;
  if (v21 < 0x41) {
    goto LABEL_46;
  }
LABEL_43:
  if (!v80) {
    goto LABEL_46;
  }
  MEMORY[0x21667D390](v80, 0x1000C8000313F17);
  if (v24) {
    goto LABEL_47;
  }
LABEL_60:
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v74);
  if (!DefiningOp) {
    goto LABEL_71;
  }
  uint64_t v28 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    goto LABEL_71;
  }
  char v80 = *(void **)(DefiningOp + 16 * (((unint64_t)*(unsigned int *)(DefiningOp + 44) >> 23) & 1) + 64);
  unint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v80);
  if (Int > 1) {
    goto LABEL_71;
  }
  uint64_t v30 = *(void *)(v28 + 72);
  uint64_t v31 = *(void *)(v30 + 24);
  uint64_t v32 = *(void *)(v30 + 56);
  BOOL v33 = v31 == v3 && v32 == v4;
  if (v33 || (v31 == v4 ? (BOOL v34 = v32 == v3) : (BOOL v34 = 0), v34))
  {
    if (Int == 1) {
      uint64_t v58 = v3;
    }
    else {
      uint64_t v58 = v4;
    }
    return v58 | 4;
  }
  else
  {
LABEL_71:
    uint64_t v35 = *(uint64_t **)(a2 + 40);
    uint64_t v36 = *v35;
    if (!*v35) {
      return 0;
    }
    BOOL v37 = mlir::DenseElementsAttr::classof(*v35);
    uint64_t v38 = v37 ? v36 : 0;
    uint64_t v73 = v38;
    if (!v37) {
      return 0;
    }
    uint64_t v39 = *(void *)(a2 + 40);
    uint64_t v40 = *(void *)(v39 + 8);
    if (!v40) {
      return 0;
    }
    BOOL v41 = mlir::DenseElementsAttr::classof(*(void *)(v39 + 8));
    uint64_t v42 = v41 ? v40 : 0;
    if ((uint64_t v72 = v42, v41)
      && (uint64_t v43 = *(void *)(a2 + 40), (v44 = *(void *)(v43 + 16)) != 0)
      && (!(BOOL v45 = mlir::DenseElementsAttr::classof(*(void *)(v43 + 16))) ? (v46 = 0) : (v46 = v44), v71 = v46, v45))
    {
      char v80 = v82;
      uint64_t v81 = 0x600000000;
      unint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v73);
      if (NumElements > HIDWORD(v81)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, NumElements, 8);
      }
      mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>((mlir::ArrayAttr *)&v73, &v75);
      __n128 v48 = v75;
      mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>((mlir::ArrayAttr *)&v73, &v75);
      uint64_t v49 = v76;
      unint64_t v50 = v77;
      uint64_t v51 = mlir::DenseElementsAttr::value_begin<mlir::Attribute>((mlir::ArrayAttr *)&v72);
      unint64_t v53 = v52;
      mlir::DenseElementsAttr::value_end<mlir::Attribute>((mlir::ArrayAttr *)&v72);
      uint64_t v54 = mlir::DenseElementsAttr::value_begin<mlir::Attribute>((mlir::ArrayAttr *)&v71);
      uint64_t v56 = v55;
      mlir::DenseElementsAttr::value_end<mlir::Attribute>((mlir::ArrayAttr *)&v71);
      __n128 v75 = v48;
      uint64_t v76 = v51;
      unint64_t v77 = v53;
      uint64_t v78 = v54;
      uint64_t v79 = v56;
      if (*(_OWORD *)&v48 != __PAIR128__(v50, v49))
      {
        do
        {
          uint64_t v59 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v75);
          uint64_t v60 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v76);
          uint64_t v61 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v78);
          unint64_t v68 = v59;
          uint64_t v69 = v60;
          uint64_t v70 = v61;
          if (mlir::BoolAttr::getValue((mlir::BoolAttr *)&v68)) {
            uint64_t v62 = &v69;
          }
          else {
            uint64_t v62 = &v70;
          }
          uint64_t v63 = *v62;
          uint64_t v64 = v81;
          if (v81 >= (unint64_t)HIDWORD(v81))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, v81 + 1, 8);
            uint64_t v64 = v81;
          }
          *((void *)v80 + v64) = v63;
          LODWORD(v81) = v81 + 1;
          unint64_t v65 = ++v75.n128_u64[1];
          ++v77;
          ++v79;
        }
        while (v75.n128_u64[0] != v49 || v65 != v50);
      }
      uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v72);
      unint64_t v23 = mlir::DenseElementsAttr::get(Value, v67, (uint64_t *)v80, v81) & 0xFFFFFFFFFFFFFFFBLL;
      if (v80 != v82) {
        free(v80);
      }
    }
    else
    {
      return 0;
    }
  }
  return v23;
}

uint64_t mlir::DenseElementsAttr::value_begin<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v6, *(void *)a1, 0);
  uint64_t v2 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v5, v2, NumElements);
  return v6;
}

uint64_t mlir::DenseElementsAttr::value_end<mlir::Attribute>(mlir::ArrayAttr *a1)
{
  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v6, *(void *)a1, 0);
  uint64_t v2 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v5, v2, NumElements);
  return v5;
}

uint64_t mlir::arith::SelectOp::parse(uint64_t a1, uint64_t a2)
{
  v15[12] = *MEMORY[0x263EF8340];
  uint64_t v12 = 0;
  v14[0] = v15;
  v14[1] = (void *)0x300000000;
  if ((*(unsigned __int8 (**)(uint64_t, void **, void, uint64_t, uint64_t))(*(void *)a1 + 688))(a1, v14, 0, 1, 3)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)&& (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 544))(a1, &v12))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 128))(a1))
    {
      I1uint64_t Type = v12;
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v12)) {
        goto LABEL_6;
      }
    }
    else
    {
      BOOL v8 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      I1uint64_t Type = mlir::Builder::getI1Type(v8);
    }
    uint64_t v9 = *(unsigned int *)(a2 + 72);
    if (v9 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 72);
    }
    *(void *)(*(void *)(a2 + 64) + 8 * v9) = v12;
    ++*(_DWORD *)(a2 + 72);
    v13[0] = I1Type;
    v13[1] = v12;
    v13[2] = v12;
    v11[0] = v13;
    v11[1] = 3;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    uint64_t v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(a1, (uint64_t *)v14, v11, v10, a2 + 16);
    uint64_t v6 = v14[0];
    if (v14[0] != v15) {
      goto LABEL_7;
    }
    return v5;
  }
LABEL_6:
  uint64_t v5 = 0;
  uint64_t v6 = v14[0];
  if (v14[0] != v15) {
LABEL_7:
  }
    free(v6);
  return v5;
}

void mlir::OperationState::addTypes(uint64_t a1, void *__src, uint64_t a3)
{
  size_t v6 = 8 * a3;
  uint64_t v7 = *(unsigned int *)(a1 + 72);
  unint64_t v8 = v7 + ((8 * a3) >> 3);
  if (v8 > *(unsigned int *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (void *)(a1 + 80), v8, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  if (a3)
  {
    memcpy((void *)(*(void *)(a1 + 64) + 8 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  *(_DWORD *)(a1 + 72) = v7 + (v6 >> 3);
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  size_t v6 = (const char *)*((unsigned int *)a2 + 2);
  uint64_t v7 = (const char *)a3[1];
  if (v7 == v6)
  {
    if (v6)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = (void *)*a3;
      uint64_t v11 = 32 * (void)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    __int16 v45 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      int v46 = 5;
      uint64_t v47 = v6;
      uint64_t v13 = &v46;
      int v14 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v41 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          int v14 = (char *)v50;
          uint64_t v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          uint64_t v13 = &v46;
          int v14 = (char *)v50;
        }
      }
      int v15 = &v14[24 * v51];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)int v15 = v16;
      uint64_t v17 = ++v51;
      if (v49[0])
      {
        int v46 = 3;
        uint64_t v47 = " operands present, but expected ";
        uint64_t v48 = 32;
        uint64_t v18 = &v46;
        uint64_t v19 = (char *)v50;
        if (v17 >= v52)
        {
          unint64_t v37 = v17 + 1;
          BOOL v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            int64_t v42 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            uint64_t v19 = (char *)v50;
            uint64_t v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            uint64_t v18 = &v46;
            uint64_t v19 = (char *)v50;
          }
        }
        int v20 = &v19[24 * v51];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = *((void *)v18 + 2);
        *(_OWORD *)int v20 = v21;
        uint64_t v22 = ++v51;
        if (v49[0])
        {
          int v46 = 5;
          uint64_t v47 = v7;
          unint64_t v23 = &v46;
          BOOL v24 = (char *)v50;
          if (v22 >= v52)
          {
            unint64_t v39 = v22 + 1;
            BOOL v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              int64_t v43 = (char *)&v46 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              BOOL v24 = (char *)v50;
              unint64_t v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              unint64_t v23 = &v46;
              BOOL v24 = (char *)v50;
            }
          }
          uint64_t v25 = &v24[24 * v51];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)uint64_t v25 = v26;
          ++v51;
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = __p;
      if (__p)
      {
        uint64_t v28 = v57;
        unint64_t v29 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          unint64_t v29 = __p;
        }
        uint64_t v57 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v54;
      if (v54)
      {
        uint64_t v31 = v55;
        uint64_t v32 = v54;
        if (v55 != v54)
        {
          do
          {
            uint64_t v34 = *--v31;
            uint64_t v33 = v34;
            *uint64_t v31 = 0;
            if (v34) {
              MEMORY[0x21667D390](v33, 0x1000C8077774924);
            }
          }
          while (v31 != v30);
          uint64_t v32 = v54;
        }
        uint64_t v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53) {
        free(v50);
      }
    }
  }
  return v12;
}

uint64_t mlir::arith::SelectOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
    size_t v6 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *uint64_t v5 = 32;
    ++*((void *)v4 + 4);
    size_t v6 = *this;
    if ((*((unsigned char *)*this + 46) & 0x80) != 0)
    {
LABEL_3:
      uint64_t v7 = *((void *)v6 + 9);
      uint64_t v8 = *((unsigned int *)v6 + 17);
      goto LABEL_4;
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
LABEL_4:
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  v20[0] = ", ";
  v20[1] = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v7, 0, v7, v8, (uint64_t)a2, v9, (uint64_t)v20);
  uint64_t v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    v20[0] = mlir::Operation::getAttrDictionary(v10);
    uint64_t v11 = (mlir::ArrayAttr *)v20;
  }
  else
  {
    uint64_t v11 = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(v11);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void, void))(*(void *)a2 + 192))(a2, Value, v13, 0, 0);
  int v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = *((void *)v14 + 4);
  if ((unint64_t)(*((void *)v14 + 3) - v15) > 2)
  {
    *(unsigned char *)(v15 + 2) = 32;
    *(_WORD *)uint64_t v15 = 14880;
    *((void *)v14 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v14, " : ", 3uLL);
  }
  long long v16 = (void *)(*(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8))
  {
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v16 + 8);
    if (v16)
    {
      (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 32))(a2, v16);
      uint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v18 = (_WORD *)*((void *)v17 + 4);
      if (*((void *)v17 + 3) - (void)v18 > 1uLL)
      {
        _WORD *v18 = 8236;
        *((void *)v17 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v17, ", ", 2uLL);
      }
    }
  }
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *((void *)*this - 1) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t mlir::arith::SelectOp::verify(mlir::arith::SelectOp *this)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  unint64_t v64 = *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v2 = 1;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v64, 1)) {
    return v2;
  }
  uint64_t v3 = (void *)(*(void *)(*(void *)this - 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = *(void **)(*v3 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    I1Sameuint64_t Shape = getI1SameShape(v3);
    if (v64 != I1SameShape)
    {
      uint64_t v8 = I1SameShape;
      __int16 v63 = 257;
      mlir::OpState::emitOpError((uint64_t *)this, v62, (uint64_t)v68);
      if (v68[0])
      {
        int v65 = 3;
        uint64_t v66 = "expected condition type to have the same shape as the result type, expected ";
        uint64_t v67 = 76;
        uint64_t v9 = &v65;
        uint64_t v10 = (char *)v69;
        if (v70 >= v71)
        {
          unint64_t v50 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            int64_t v57 = (char *)&v65 - (unsigned char *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v50, 24);
            uint64_t v10 = (char *)v69;
            uint64_t v9 = (int *)((char *)v69 + v57);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v50, 24);
            uint64_t v9 = &v65;
            uint64_t v10 = (char *)v69;
          }
        }
        uint64_t v11 = &v10[24 * v70];
        long long v12 = *(_OWORD *)v9;
        *((void *)v11 + 2) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v11 = v12;
        ++v70;
        if (v68[0])
        {
          uint64_t v13 = &v65;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v8);
          int v14 = (char *)v69;
          if (v70 >= v71)
          {
            unint64_t v52 = v70 + 1;
            if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
            {
              int64_t v59 = (char *)&v65 - (unsigned char *)v69;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v52, 24);
              int v14 = (char *)v69;
              uint64_t v13 = (int *)((char *)v69 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v52, 24);
              uint64_t v13 = &v65;
              int v14 = (char *)v69;
            }
          }
          uint64_t v15 = &v14[24 * v70];
          long long v16 = *(_OWORD *)v13;
          *((void *)v15 + 2) = *((void *)v13 + 2);
          *(_OWORD *)uint64_t v15 = v16;
          uint64_t v17 = ++v70;
          if (v68[0])
          {
            int v65 = 3;
            uint64_t v66 = ", but got ";
            uint64_t v67 = 10;
            uint64_t v18 = &v65;
            uint64_t v19 = (char *)v69;
            if (v17 >= v71)
            {
              unint64_t v53 = v17 + 1;
              BOOL v54 = (char *)v69 + 24 * v17 > (char *)&v65;
              if (v69 <= &v65 && v54)
              {
                int64_t v60 = (char *)&v65 - (unsigned char *)v69;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
                uint64_t v19 = (char *)v69;
                uint64_t v18 = (int *)((char *)v69 + v60);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v53, 24);
                uint64_t v18 = &v65;
                uint64_t v19 = (char *)v69;
              }
            }
            int v20 = &v19[24 * v70];
            long long v21 = *(_OWORD *)v18;
            *((void *)v20 + 2) = *((void *)v18 + 2);
            *(_OWORD *)int v20 = v21;
            ++v70;
            if (v68[0])
            {
              uint64_t v22 = &v65;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v64);
              unint64_t v23 = (char *)v69;
              if (v70 >= v71)
              {
                unint64_t v55 = v70 + 1;
                if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
                {
                  int64_t v61 = (char *)&v65 - (unsigned char *)v69;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v55, 24);
                  unint64_t v23 = (char *)v69;
                  uint64_t v22 = (int *)((char *)v69 + v61);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v55, 24);
                  uint64_t v22 = &v65;
                  unint64_t v23 = (char *)v69;
                }
              }
              BOOL v24 = &v23[24 * v70];
              long long v25 = *(_OWORD *)v22;
              *((void *)v24 + 2) = *((void *)v22 + 2);
              *(_OWORD *)BOOL v24 = v25;
              ++v70;
            }
          }
        }
      }
      uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
      if (v68[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
      }
      if (v77)
      {
        long long v26 = __p;
        if (__p)
        {
          uint64_t v27 = v76;
          uint64_t v28 = __p;
          if (v76 != __p)
          {
            do
              uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            uint64_t v28 = __p;
          }
          uint64_t v76 = v26;
          operator delete(v28);
        }
        unint64_t v29 = v73;
        if (!v73) {
          goto LABEL_55;
        }
        uint64_t v30 = v74;
        uint64_t v31 = v73;
        if (v74 == v73) {
          goto LABEL_54;
        }
        do
        {
          uint64_t v33 = *--v30;
          uint64_t v32 = v33;
          *uint64_t v30 = 0;
          if (v33) {
            MEMORY[0x21667D390](v32, 0x1000C8077774924);
          }
        }
        while (v30 != v29);
        goto LABEL_53;
      }
    }
  }
  else
  {
    __int16 v63 = 257;
    mlir::OpState::emitOpError((uint64_t *)this, v62, (uint64_t)v68);
    if (v68[0])
    {
      int v65 = 3;
      uint64_t v66 = "expected condition to be a signless i1, but got ";
      uint64_t v67 = 48;
      uint64_t v34 = &v65;
      uint64_t v35 = (char *)v69;
      if (v70 >= v71)
      {
        unint64_t v49 = v70 + 1;
        if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
        {
          int64_t v56 = (char *)&v65 - (unsigned char *)v69;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v49, 24);
          uint64_t v35 = (char *)v69;
          uint64_t v34 = (int *)((char *)v69 + v56);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v49, 24);
          uint64_t v34 = &v65;
          uint64_t v35 = (char *)v69;
        }
      }
      unint64_t v36 = &v35[24 * v70];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = *((void *)v34 + 2);
      *(_OWORD *)unint64_t v36 = v37;
      ++v70;
      if (v68[0])
      {
        BOOL v38 = &v65;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v65, v64);
        unint64_t v39 = (char *)v69;
        if (v70 >= v71)
        {
          unint64_t v51 = v70 + 1;
          if (v69 <= &v65 && (char *)v69 + 24 * v70 > (char *)&v65)
          {
            int64_t v58 = (char *)&v65 - (unsigned char *)v69;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v51, 24);
            unint64_t v39 = (char *)v69;
            BOOL v38 = (int *)((char *)v69 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v72, v51, 24);
            BOOL v38 = &v65;
            unint64_t v39 = (char *)v69;
          }
        }
        BOOL v40 = &v39[24 * v70];
        long long v41 = *(_OWORD *)v38;
        *((void *)v40 + 2) = *((void *)v38 + 2);
        *(_OWORD *)BOOL v40 = v41;
        ++v70;
      }
    }
    uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v68);
    if (v68[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v68);
    }
    if (v77)
    {
      int64_t v42 = __p;
      if (__p)
      {
        int64_t v43 = v76;
        uint64_t v44 = __p;
        if (v76 != __p)
        {
          do
            int64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          uint64_t v44 = __p;
        }
        uint64_t v76 = v42;
        operator delete(v44);
      }
      unint64_t v29 = v73;
      if (!v73) {
        goto LABEL_55;
      }
      __int16 v45 = v74;
      uint64_t v31 = v73;
      if (v74 == v73)
      {
LABEL_54:
        uint64_t v74 = v29;
        operator delete(v31);
LABEL_55:
        if (v69 != v72) {
          free(v69);
        }
        return v2;
      }
      do
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        *__int16 v45 = 0;
        if (v47) {
          MEMORY[0x21667D390](v46, 0x1000C8077774924);
        }
      }
      while (v45 != v29);
LABEL_53:
      uint64_t v31 = v73;
      goto LABEL_54;
    }
  }
  return v2;
}

uint64_t mlir::arith::ShLIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_17;
  }
  DWORD2(v92) = 1;
  *(void *)&long long v92 = 0;
  *(void *)&long long v90 = &v92;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v90, v4);
  unsigned int v7 = DWORD2(v92);
  if (!v6)
  {
    BOOL v9 = 0;
    if (DWORD2(v92) < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (DWORD2(v92) < 0x41)
  {
    uint64_t v8 = &v92;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v92) <= 0x40)
  {
    uint64_t v8 = (long long *)v92;
LABEL_9:
    BOOL v9 = *(void *)v8 == 0;
    if (v7 < 0x41) {
      goto LABEL_12;
    }
LABEL_10:
    if ((void)v92) {
      MEMORY[0x21667D390](v92, 0x1000C8000313F17);
    }
LABEL_12:
    if (v9) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_16;
  }
  if ((void)v92) {
    MEMORY[0x21667D390](v92, 0x1000C8000313F17);
  }
LABEL_16:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_70;
  }
  uint64_t v12 = v3[1];
  if (v12)
  {
    if (*(_UNKNOWN **)(*(void *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_70;
    }
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v92 = canMapOperands;
      *((void *)&v92 + 1) = v13;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v92 = 0uLL;
    }
  }
  else
  {
    long long v92 = 0uLL;
  }
  int v14 = (void *)v3[1];
  if (!v14)
  {
    long long v92 = 0uLL;
LABEL_70:
    uint64_t v36 = 0;
    return v36 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8))
  {
    long long v92 = 0uLL;
    goto LABEL_70;
  }
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8);
  *(void *)&long long v92 = v14;
  *((void *)&v92 + 1) = v15;
  uint64_t v16 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
  if (!canMapOperands) {
    goto LABEL_70;
  }
  if (!v16) {
    goto LABEL_70;
  }
  if (canMapOperands != v16) {
    goto LABEL_70;
  }
  uint64_t v17 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_70;
    }
  }
  uint64_t v18 = v3[1];
  if (!v18) {
    goto LABEL_70;
  }
  if (!v17) {
    goto LABEL_70;
  }
  uint64_t v19 = *(void **)(*(void *)v18 + 136);
  if (v19 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_70;
  }
  if (v19 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v17 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v24 = v17;
    }
    else {
      uint64_t v24 = 0;
    }
    *(void *)&long long v92 = v24;
    if (v24 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
    {
      uint64_t v25 = v3[1];
      uint64_t v26 = mlir::DenseElementsAttr::classof(v25) ? v25 : 0;
      *(void *)&long long v92 = v26;
      if (v26)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
        {
          uint64_t v27 = v3[1];
          uint64_t v73 = *v3;
          uint64_t v70 = v27;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70)) {
            goto LABEL_68;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v92);
          long long v90 = v92;
          long long v91 = v93[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v82);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v92);
          long long v90 = v92;
          long long v91 = v93[0];
          unint64_t v29 = (unint64_t *)&v80;
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v80);
          unint64_t v30 = v81;
          if (v81 >= 0x41)
          {
            if (v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
            {
              BOOL v23 = 0;
              goto LABEL_166;
            }
            unint64_t v29 = v80;
          }
          BOOL v23 = *v29 <= v30;
LABEL_166:
          DWORD2(v90) = v83;
          if (v83 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v82);
          }
          *(void *)&long long v90 = v82;
          llvm::APInt::operator<<=((uint64_t)&v90, (uint64_t)&v80);
          DWORD2(v92) = DWORD2(v90);
          *(void *)&long long v92 = v90;
          LOBYTE(v93[0]) = 1;
          if (v81 >= 0x41 && v80) {
            MEMORY[0x21667D390](v80, 0x1000C8000313F17);
          }
          if (v83 >= 0x41 && v82) {
            MEMORY[0x21667D390](v82, 0x1000C8000313F17);
          }
          uint64_t v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v36 = mlir::DenseElementsAttr::get(canMapOperands, v59, (llvm::APInt *)&v92, 1);
          if (LOBYTE(v93[0])) {
            goto LABEL_88;
          }
          goto LABEL_69;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_70;
    }
    uint64_t v31 = (void *)*v3;
    if (*v3) {
      uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v78 = v31;
    uint64_t v79 = v32;
    uint64_t v33 = (void *)v3[1];
    if (v33) {
      uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8);
    }
    else {
      uint64_t v34 = 0;
    }
    v77[0] = v33;
    v77[1] = v34;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v78);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77)) {
      goto LABEL_68;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v78, (uint64_t)&v90);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v77, (uint64_t)&v73);
    uint64_t v36 = 0;
    BOOL v23 = 0;
    int v37 = v76;
    if (BYTE8(v91) && v76)
    {
      LOWORD(v70) = v90;
      if ((_BYTE)v90) {
        uint64_t v71 = *((void *)&v90 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v90 + 1) + 16))(&v71);
      }
      uint64_t v72 = v91;
      __int16 v67 = v73;
      if ((_BYTE)v73) {
        uint64_t v68 = v74;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 16))(&v68);
      }
      uint64_t v69 = v75;
      *(void *)&long long v92 = v93;
      *((void *)&v92 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v92, NumElements);
      uint64_t v39 = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = v72;
        while (1)
        {
          if (BYTE1(v70)) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = v41;
          }
          if ((_BYTE)v70)
          {
            int64_t v43 = (const llvm::APInt *)(v71 + 16 * v42);
            unsigned int v63 = *((_DWORD *)v43 + 2);
            if (v63 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v62, v43);
            }
            uint64_t v62 = *(void *)v43;
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v71 + 24))(&v62);
          }
          if (HIBYTE(v67)) {
            uint64_t v44 = 0;
          }
          else {
            uint64_t v44 = v69;
          }
          if ((_BYTE)v67)
          {
            __int16 v45 = (const llvm::APInt *)(v68 + 16 * v44);
            unsigned int v46 = *((_DWORD *)v45 + 2);
            unsigned int v61 = v46;
            if (v46 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v60, v45);
            }
            int64_t v60 = *(void **)v45;
            uint64_t v47 = &v60;
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v68 + 24))(&v60);
            unsigned int v46 = v61;
            if (v61 >= 0x41)
            {
              if (v46 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v60) > 0x40)
              {
                BOOL v23 = 0;
                goto LABEL_120;
              }
              uint64_t v47 = v60;
            }
            else
            {
              uint64_t v47 = &v60;
            }
          }
          BOOL v23 = *v47 <= (unint64_t)v46;
LABEL_120:
          unsigned int v89 = v63;
          if (v63 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const llvm::APInt *)&v62);
          }
          uint64_t v88 = v62;
          llvm::APInt::operator<<=((uint64_t)&v88, (uint64_t)&v60);
          unsigned int v65 = v89;
          uint64_t v64 = v88;
          char v66 = 1;
          if (v61 >= 0x41 && v60) {
            MEMORY[0x21667D390](v60, 0x1000C8000313F17);
          }
          if (v63 >= 0x41 && v62) {
            MEMORY[0x21667D390](v62, 0x1000C8000313F17);
          }
          if (!v66)
          {
            uint64_t v36 = 0;
            goto LABEL_140;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v92, (unint64_t)&v64, 1);
          unint64_t v49 = (llvm::APInt *)(v92 + 16 * DWORD2(v92));
          unsigned int v50 = *((_DWORD *)Address + 2);
          *((_DWORD *)v49 + 2) = v50;
          if (v50 > 0x40) {
            llvm::APInt::initSlowCase(v49, (const llvm::APInt *)Address);
          }
          *(void *)unint64_t v49 = *(void *)Address;
          ++DWORD2(v92);
          if (v66 && v65 >= 0x41 && v64) {
            MEMORY[0x21667D390](v64, 0x1000C8000313F17);
          }
          uint64_t v41 = ++v72;
          ++v69;
          if (!--v40) {
            goto LABEL_138;
          }
        }
      }
      BOOL v23 = 0;
LABEL_138:
      uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v36 = mlir::DenseElementsAttr::get(canMapOperands, v51, (llvm::APInt *)v92, DWORD2(v92));
LABEL_140:
      unint64_t v52 = (char *)v92;
      if (DWORD2(v92))
      {
        uint64_t v53 = 16 * DWORD2(v92);
        do
        {
          if (*(_DWORD *)&v52[v53 - 8] >= 0x41u)
          {
            uint64_t v54 = *(void *)&v52[v53 - 16];
            if (v54) {
              MEMORY[0x21667D390](v54, 0x1000C8000313F17);
            }
          }
          v53 -= 16;
        }
        while (v53);
        unint64_t v52 = (char *)v92;
      }
      if (v52 != (char *)v93) {
        free(v52);
      }
      if (!(_BYTE)v67)
      {
        uint64_t v55 = v68;
        uint64_t v68 = 0;
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
        }
      }
      if (!(_BYTE)v70)
      {
        uint64_t v56 = v71;
        uint64_t v71 = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
      int v37 = v76;
    }
    if (v37)
    {
      if (!(_BYTE)v73)
      {
        uint64_t v57 = v74;
        uint64_t v74 = 0;
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
      }
    }
    if (BYTE8(v91))
    {
      if (!(_BYTE)v90)
      {
        uint64_t v58 = *((void *)&v90 + 1);
        *((void *)&v90 + 1) = 0;
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
      }
    }
    goto LABEL_69;
  }
  uint64_t v73 = *v3;
  uint64_t v70 = v18;
  uint64_t v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
  if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
  {
LABEL_68:
    BOOL v23 = 0;
    uint64_t v36 = 0;
    goto LABEL_69;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v86);
  long long v21 = (unint64_t *)&v84;
  mlir::IntegerAttr::getValue((uint64_t)&v70, (llvm::APInt *)&v84);
  unint64_t v22 = v85;
  if (v85 >= 0x41)
  {
    if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v84) > 0x40)
    {
      BOOL v23 = 0;
      goto LABEL_78;
    }
    long long v21 = v84;
  }
  BOOL v23 = *v21 <= v22;
LABEL_78:
  DWORD2(v90) = v87;
  if (v87 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v86);
  }
  *(void *)&long long v90 = v86;
  llvm::APInt::operator<<=((uint64_t)&v90, (uint64_t)&v84);
  DWORD2(v92) = DWORD2(v90);
  *(void *)&long long v92 = v90;
  LOBYTE(v93[0]) = 1;
  if (v85 >= 0x41 && v84) {
    MEMORY[0x21667D390](v84, 0x1000C8000313F17);
  }
  if (v87 >= 0x41 && v86) {
    MEMORY[0x21667D390](v86, 0x1000C8000313F17);
  }
  uint64_t v36 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v92);
  if (LOBYTE(v93[0]))
  {
LABEL_88:
    if (DWORD2(v92) >= 0x41)
    {
      if ((void)v92) {
        MEMORY[0x21667D390](v92, 0x1000C8000313F17);
      }
    }
  }
LABEL_69:
  if (!v23) {
    goto LABEL_70;
  }
  return v36 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ShRUIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_17;
  }
  DWORD2(v92) = 1;
  *(void *)&long long v92 = 0;
  *(void *)&long long v90 = &v92;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v90, v4);
  unsigned int v7 = DWORD2(v92);
  if (!v6)
  {
    BOOL v9 = 0;
    if (DWORD2(v92) < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (DWORD2(v92) < 0x41)
  {
    uint64_t v8 = &v92;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v92) <= 0x40)
  {
    uint64_t v8 = (long long *)v92;
LABEL_9:
    BOOL v9 = *(void *)v8 == 0;
    if (v7 < 0x41) {
      goto LABEL_12;
    }
LABEL_10:
    if ((void)v92) {
      MEMORY[0x21667D390](v92, 0x1000C8000313F17);
    }
LABEL_12:
    if (v9) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_16;
  }
  if ((void)v92) {
    MEMORY[0x21667D390](v92, 0x1000C8000313F17);
  }
LABEL_16:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_70;
  }
  uint64_t v12 = v3[1];
  if (v12)
  {
    if (*(_UNKNOWN **)(*(void *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_70;
    }
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v92 = canMapOperands;
      *((void *)&v92 + 1) = v13;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v92 = 0uLL;
    }
  }
  else
  {
    long long v92 = 0uLL;
  }
  int v14 = (void *)v3[1];
  if (!v14)
  {
    long long v92 = 0uLL;
LABEL_70:
    uint64_t v36 = 0;
    return v36 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8))
  {
    long long v92 = 0uLL;
    goto LABEL_70;
  }
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8);
  *(void *)&long long v92 = v14;
  *((void *)&v92 + 1) = v15;
  uint64_t v16 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
  if (!canMapOperands) {
    goto LABEL_70;
  }
  if (!v16) {
    goto LABEL_70;
  }
  if (canMapOperands != v16) {
    goto LABEL_70;
  }
  uint64_t v17 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_70;
    }
  }
  uint64_t v18 = v3[1];
  if (!v18) {
    goto LABEL_70;
  }
  if (!v17) {
    goto LABEL_70;
  }
  uint64_t v19 = *(void **)(*(void *)v18 + 136);
  if (v19 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_70;
  }
  if (v19 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v17 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v24 = v17;
    }
    else {
      uint64_t v24 = 0;
    }
    *(void *)&long long v92 = v24;
    if (v24 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
    {
      uint64_t v25 = v3[1];
      uint64_t v26 = mlir::DenseElementsAttr::classof(v25) ? v25 : 0;
      *(void *)&long long v92 = v26;
      if (v26)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
        {
          uint64_t v27 = v3[1];
          uint64_t v73 = *v3;
          uint64_t v70 = v27;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70)) {
            goto LABEL_68;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v92);
          long long v90 = v92;
          long long v91 = v93[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v82);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v92);
          long long v90 = v92;
          long long v91 = v93[0];
          unint64_t v29 = (unint64_t *)&v80;
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v80);
          unint64_t v30 = v81;
          if (v81 >= 0x41)
          {
            if (v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
            {
              BOOL v23 = 0;
              goto LABEL_166;
            }
            unint64_t v29 = v80;
          }
          BOOL v23 = *v29 <= v30;
LABEL_166:
          DWORD2(v90) = v83;
          if (v83 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v82);
          }
          *(void *)&long long v90 = v82;
          llvm::APInt::lshrInPlace((llvm::APInt *)&v90, (const llvm::APInt *)&v80);
          DWORD2(v92) = DWORD2(v90);
          *(void *)&long long v92 = v90;
          LOBYTE(v93[0]) = 1;
          if (v81 >= 0x41 && v80) {
            MEMORY[0x21667D390](v80, 0x1000C8000313F17);
          }
          if (v83 >= 0x41 && v82) {
            MEMORY[0x21667D390](v82, 0x1000C8000313F17);
          }
          uint64_t v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v36 = mlir::DenseElementsAttr::get(canMapOperands, v59, (llvm::APInt *)&v92, 1);
          if (LOBYTE(v93[0])) {
            goto LABEL_88;
          }
          goto LABEL_69;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_70;
    }
    uint64_t v31 = (void *)*v3;
    if (*v3) {
      uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v78 = v31;
    uint64_t v79 = v32;
    uint64_t v33 = (void *)v3[1];
    if (v33) {
      uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8);
    }
    else {
      uint64_t v34 = 0;
    }
    v77[0] = v33;
    v77[1] = v34;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v78);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77)) {
      goto LABEL_68;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v78, (uint64_t)&v90);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v77, (uint64_t)&v73);
    uint64_t v36 = 0;
    BOOL v23 = 0;
    int v37 = v76;
    if (BYTE8(v91) && v76)
    {
      LOWORD(v70) = v90;
      if ((_BYTE)v90) {
        uint64_t v71 = *((void *)&v90 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v90 + 1) + 16))(&v71);
      }
      uint64_t v72 = v91;
      __int16 v67 = v73;
      if ((_BYTE)v73) {
        uint64_t v68 = v74;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 16))(&v68);
      }
      uint64_t v69 = v75;
      *(void *)&long long v92 = v93;
      *((void *)&v92 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v92, NumElements);
      uint64_t v39 = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = v72;
        while (1)
        {
          if (BYTE1(v70)) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = v41;
          }
          if ((_BYTE)v70)
          {
            int64_t v43 = (const llvm::APInt *)(v71 + 16 * v42);
            unsigned int v63 = *((_DWORD *)v43 + 2);
            if (v63 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v62, v43);
            }
            uint64_t v62 = *(void *)v43;
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v71 + 24))(&v62);
          }
          if (HIBYTE(v67)) {
            uint64_t v44 = 0;
          }
          else {
            uint64_t v44 = v69;
          }
          if ((_BYTE)v67)
          {
            __int16 v45 = (const llvm::APInt *)(v68 + 16 * v44);
            unsigned int v46 = *((_DWORD *)v45 + 2);
            unsigned int v61 = v46;
            if (v46 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v60, v45);
            }
            int64_t v60 = *(void **)v45;
            uint64_t v47 = &v60;
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(void *)v68 + 24))(&v60);
            unsigned int v46 = v61;
            if (v61 >= 0x41)
            {
              if (v46 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v60) > 0x40)
              {
                BOOL v23 = 0;
                goto LABEL_120;
              }
              uint64_t v47 = v60;
            }
            else
            {
              uint64_t v47 = &v60;
            }
          }
          BOOL v23 = *v47 <= (unint64_t)v46;
LABEL_120:
          unsigned int v89 = v63;
          if (v63 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const llvm::APInt *)&v62);
          }
          uint64_t v88 = v62;
          llvm::APInt::lshrInPlace((llvm::APInt *)&v88, (const llvm::APInt *)&v60);
          unsigned int v65 = v89;
          uint64_t v64 = v88;
          char v66 = 1;
          if (v61 >= 0x41 && v60) {
            MEMORY[0x21667D390](v60, 0x1000C8000313F17);
          }
          if (v63 >= 0x41 && v62) {
            MEMORY[0x21667D390](v62, 0x1000C8000313F17);
          }
          if (!v66)
          {
            uint64_t v36 = 0;
            goto LABEL_140;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v92, (unint64_t)&v64, 1);
          unint64_t v49 = (llvm::APInt *)(v92 + 16 * DWORD2(v92));
          unsigned int v50 = *((_DWORD *)Address + 2);
          *((_DWORD *)v49 + 2) = v50;
          if (v50 > 0x40) {
            llvm::APInt::initSlowCase(v49, (const llvm::APInt *)Address);
          }
          *(void *)unint64_t v49 = *(void *)Address;
          ++DWORD2(v92);
          if (v66 && v65 >= 0x41 && v64) {
            MEMORY[0x21667D390](v64, 0x1000C8000313F17);
          }
          uint64_t v41 = ++v72;
          ++v69;
          if (!--v40) {
            goto LABEL_138;
          }
        }
      }
      BOOL v23 = 0;
LABEL_138:
      uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v36 = mlir::DenseElementsAttr::get(canMapOperands, v51, (llvm::APInt *)v92, DWORD2(v92));
LABEL_140:
      unint64_t v52 = (char *)v92;
      if (DWORD2(v92))
      {
        uint64_t v53 = 16 * DWORD2(v92);
        do
        {
          if (*(_DWORD *)&v52[v53 - 8] >= 0x41u)
          {
            uint64_t v54 = *(void *)&v52[v53 - 16];
            if (v54) {
              MEMORY[0x21667D390](v54, 0x1000C8000313F17);
            }
          }
          v53 -= 16;
        }
        while (v53);
        unint64_t v52 = (char *)v92;
      }
      if (v52 != (char *)v93) {
        free(v52);
      }
      if (!(_BYTE)v67)
      {
        uint64_t v55 = v68;
        uint64_t v68 = 0;
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
        }
      }
      if (!(_BYTE)v70)
      {
        uint64_t v56 = v71;
        uint64_t v71 = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
      int v37 = v76;
    }
    if (v37)
    {
      if (!(_BYTE)v73)
      {
        uint64_t v57 = v74;
        uint64_t v74 = 0;
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
      }
    }
    if (BYTE8(v91))
    {
      if (!(_BYTE)v90)
      {
        uint64_t v58 = *((void *)&v90 + 1);
        *((void *)&v90 + 1) = 0;
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
      }
    }
    goto LABEL_69;
  }
  uint64_t v73 = *v3;
  uint64_t v70 = v18;
  uint64_t v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
  if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
  {
LABEL_68:
    BOOL v23 = 0;
    uint64_t v36 = 0;
    goto LABEL_69;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v86);
  long long v21 = (unint64_t *)&v84;
  mlir::IntegerAttr::getValue((uint64_t)&v70, (llvm::APInt *)&v84);
  unint64_t v22 = v85;
  if (v85 >= 0x41)
  {
    if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v84) > 0x40)
    {
      BOOL v23 = 0;
      goto LABEL_78;
    }
    long long v21 = v84;
  }
  BOOL v23 = *v21 <= v22;
LABEL_78:
  DWORD2(v90) = v87;
  if (v87 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v86);
  }
  *(void *)&long long v90 = v86;
  llvm::APInt::lshrInPlace((llvm::APInt *)&v90, (const llvm::APInt *)&v84);
  DWORD2(v92) = DWORD2(v90);
  *(void *)&long long v92 = v90;
  LOBYTE(v93[0]) = 1;
  if (v85 >= 0x41 && v84) {
    MEMORY[0x21667D390](v84, 0x1000C8000313F17);
  }
  if (v87 >= 0x41 && v86) {
    MEMORY[0x21667D390](v86, 0x1000C8000313F17);
  }
  uint64_t v36 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v92);
  if (LOBYTE(v93[0]))
  {
LABEL_88:
    if (DWORD2(v92) >= 0x41)
    {
      if ((void)v92) {
        MEMORY[0x21667D390](v92, 0x1000C8000313F17);
      }
    }
  }
LABEL_69:
  if (!v23) {
    goto LABEL_70;
  }
  return v36 & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::arith::ShRSIOp::fold(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(a2 + 40);
  uint64_t v4 = v3[1];
  if (!v4) {
    goto LABEL_17;
  }
  DWORD2(v92) = 1;
  *(void *)&long long v92 = 0;
  *(void *)&long long v90 = &v92;
  int v6 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v90, v4);
  unsigned int v7 = DWORD2(v92);
  if (!v6)
  {
    BOOL v9 = 0;
    if (DWORD2(v92) < 0x41) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (DWORD2(v92) < 0x41)
  {
    uint64_t v8 = &v92;
    goto LABEL_9;
  }
  if (v7 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v92) <= 0x40)
  {
    uint64_t v8 = (long long *)v92;
LABEL_9:
    BOOL v9 = *(void *)v8 == 0;
    if (v7 < 0x41) {
      goto LABEL_12;
    }
LABEL_10:
    if ((void)v92) {
      MEMORY[0x21667D390](v92, 0x1000C8000313F17);
    }
LABEL_12:
    if (v9) {
      return *(void *)(*(void *)(*(void *)a1 + 72) + 24) | 4;
    }
    goto LABEL_16;
  }
  if ((void)v92) {
    MEMORY[0x21667D390](v92, 0x1000C8000313F17);
  }
LABEL_16:
  uint64_t v3 = *(uint64_t **)(a2 + 40);
LABEL_17:
  uint64_t canMapOperands = *v3;
  if (*v3
    && *(_UNKNOWN **)(*(void *)canMapOperands + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id)
  {
    goto LABEL_70;
  }
  uint64_t v12 = v3[1];
  if (v12)
  {
    if (*(_UNKNOWN **)(*(void *)v12 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_70;
    }
  }
  if (canMapOperands)
  {
    if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8))
    {
      uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*(void *)canMapOperands + 8);
      *(void *)&long long v92 = canMapOperands;
      *((void *)&v92 + 1) = v13;
      uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
    }
    else
    {
      uint64_t canMapOperands = 0;
      long long v92 = 0uLL;
    }
  }
  else
  {
    long long v92 = 0uLL;
  }
  int v14 = (void *)v3[1];
  if (!v14)
  {
    long long v92 = 0uLL;
LABEL_70:
    uint64_t v36 = 0;
    return v36 & 0xFFFFFFFFFFFFFFFBLL;
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8))
  {
    long long v92 = 0uLL;
    goto LABEL_70;
  }
  uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v14 + 8);
  *(void *)&long long v92 = v14;
  *((void *)&v92 + 1) = v15;
  uint64_t v16 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v92);
  if (!canMapOperands) {
    goto LABEL_70;
  }
  if (!v16) {
    goto LABEL_70;
  }
  if (canMapOperands != v16) {
    goto LABEL_70;
  }
  uint64_t v17 = *v3;
  if (*v3)
  {
    if (*(_UNKNOWN **)(*(void *)v17 + 136) == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
      goto LABEL_70;
    }
  }
  uint64_t v18 = v3[1];
  if (!v18) {
    goto LABEL_70;
  }
  if (!v17) {
    goto LABEL_70;
  }
  uint64_t v19 = *(void **)(*(void *)v18 + 136);
  if (v19 == &mlir::detail::TypeIDResolver<mlir::ub::PoisonAttr,void>::id) {
    goto LABEL_70;
  }
  if (v19 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    || *(_UNKNOWN **)(*(void *)v17 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    if (mlir::DenseElementsAttr::classof(*v3)) {
      uint64_t v24 = v17;
    }
    else {
      uint64_t v24 = 0;
    }
    *(void *)&long long v92 = v24;
    if (v24 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
    {
      uint64_t v25 = v3[1];
      uint64_t v26 = mlir::DenseElementsAttr::classof(v25) ? v25 : 0;
      *(void *)&long long v92 = v26;
      if (v26)
      {
        if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v92))
        {
          uint64_t v27 = v3[1];
          uint64_t v73 = *v3;
          uint64_t v70 = v27;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v73);
          if (Value != mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v70)) {
            goto LABEL_68;
          }
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v73, (uint64_t)&v92);
          long long v90 = v92;
          long long v91 = v93[0];
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v82);
          mlir::DenseElementsAttr::getValues<llvm::APInt>((mlir::DenseElementsAttr *)&v70, (uint64_t)&v92);
          long long v90 = v92;
          long long v91 = v93[0];
          unint64_t v29 = (unint64_t **)&v80;
          mlir::DenseElementsAttr::IntElementIterator::operator*(&v90, (llvm::APInt *)&v80);
          unint64_t v30 = v81;
          if (v81 >= 0x41)
          {
            if (v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v80) > 0x40)
            {
              BOOL v23 = 0;
              goto LABEL_166;
            }
            unint64_t v29 = v80;
          }
          BOOL v23 = (unint64_t)*v29 <= v30;
LABEL_166:
          DWORD2(v90) = v83;
          if (v83 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v82);
          }
          *(void *)&long long v90 = v82;
          llvm::APInt::ashrInPlace((unsigned int *)&v90, (unint64_t **)&v80);
          DWORD2(v92) = DWORD2(v90);
          *(void *)&long long v92 = v90;
          LOBYTE(v93[0]) = 1;
          if (v81 >= 0x41 && v80) {
            MEMORY[0x21667D390](v80, 0x1000C8000313F17);
          }
          if (v83 >= 0x41 && v82) {
            MEMORY[0x21667D390](v82, 0x1000C8000313F17);
          }
          uint64_t v59 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
          uint64_t v36 = mlir::DenseElementsAttr::get(canMapOperands, v59, (llvm::APInt *)&v92, 1);
          if (LOBYTE(v93[0])) {
            goto LABEL_88;
          }
          goto LABEL_69;
        }
      }
    }
    if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*v3 + 8)
      || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)v3[1] + 8))
    {
      goto LABEL_70;
    }
    uint64_t v31 = (void *)*v3;
    if (*v3) {
      uint64_t v32 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v31 + 8);
    }
    else {
      uint64_t v32 = 0;
    }
    uint64_t v78 = v31;
    uint64_t v79 = v32;
    uint64_t v33 = (void *)v3[1];
    if (v33) {
      uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v33 + 8);
    }
    else {
      uint64_t v34 = 0;
    }
    v77[0] = v33;
    v77[1] = v34;
    uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v78);
    if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77)) {
      goto LABEL_68;
    }
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v78, (uint64_t)&v90);
    mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v77, (uint64_t)&v73);
    uint64_t v36 = 0;
    BOOL v23 = 0;
    int v37 = v76;
    if (BYTE8(v91) && v76)
    {
      LOWORD(v70) = v90;
      if ((_BYTE)v90) {
        uint64_t v71 = *((void *)&v90 + 1);
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)&v90 + 1) + 16))(&v71);
      }
      uint64_t v72 = v91;
      __int16 v67 = v73;
      if ((_BYTE)v73) {
        uint64_t v68 = v74;
      }
      else {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v74 + 16))(&v68);
      }
      uint64_t v69 = v75;
      *(void *)&long long v92 = v93;
      *((void *)&v92 + 1) = 0x400000000;
      unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v92, NumElements);
      uint64_t v39 = mlir::ElementsAttr::getNumElements((uint64_t)v78, v79);
      if (v39)
      {
        uint64_t v40 = v39;
        uint64_t v41 = v72;
        while (1)
        {
          if (BYTE1(v70)) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = v41;
          }
          if ((_BYTE)v70)
          {
            int64_t v43 = (const llvm::APInt *)(v71 + 16 * v42);
            unsigned int v63 = *((_DWORD *)v43 + 2);
            if (v63 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v62, v43);
            }
            uint64_t v62 = *(void *)v43;
          }
          else
          {
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v71 + 24))(&v62);
          }
          if (HIBYTE(v67)) {
            uint64_t v44 = 0;
          }
          else {
            uint64_t v44 = v69;
          }
          if ((_BYTE)v67)
          {
            __int16 v45 = (const llvm::APInt *)(v68 + 16 * v44);
            unsigned int v46 = *((_DWORD *)v45 + 2);
            unsigned int v61 = v46;
            if (v46 > 0x40) {
              llvm::APInt::initSlowCase((llvm::APInt *)&v60, v45);
            }
            int64_t v60 = *(unint64_t ***)v45;
            uint64_t v47 = (unint64_t **)&v60;
          }
          else
          {
            (*(void (**)(unint64_t ***__return_ptr))(*(void *)v68 + 24))(&v60);
            unsigned int v46 = v61;
            if (v61 >= 0x41)
            {
              if (v46 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v60) > 0x40)
              {
                BOOL v23 = 0;
                goto LABEL_120;
              }
              uint64_t v47 = v60;
            }
            else
            {
              uint64_t v47 = (unint64_t **)&v60;
            }
          }
          BOOL v23 = (unint64_t)*v47 <= v46;
LABEL_120:
          unsigned int v89 = v63;
          if (v63 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v88, (const llvm::APInt *)&v62);
          }
          uint64_t v88 = v62;
          llvm::APInt::ashrInPlace((unsigned int *)&v88, (unint64_t **)&v60);
          unsigned int v65 = v89;
          uint64_t v64 = v88;
          char v66 = 1;
          if (v61 >= 0x41 && v60) {
            MEMORY[0x21667D390](v60, 0x1000C8000313F17);
          }
          if (v63 >= 0x41 && v62) {
            MEMORY[0x21667D390](v62, 0x1000C8000313F17);
          }
          if (!v66)
          {
            uint64_t v36 = 0;
            goto LABEL_140;
          }
          Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress((uint64_t)&v92, (unint64_t)&v64, 1);
          unint64_t v49 = (llvm::APInt *)(v92 + 16 * DWORD2(v92));
          unsigned int v50 = *((_DWORD *)Address + 2);
          *((_DWORD *)v49 + 2) = v50;
          if (v50 > 0x40) {
            llvm::APInt::initSlowCase(v49, (const llvm::APInt *)Address);
          }
          *(void *)unint64_t v49 = *(void *)Address;
          ++DWORD2(v92);
          if (v66 && v65 >= 0x41 && v64) {
            MEMORY[0x21667D390](v64, 0x1000C8000313F17);
          }
          uint64_t v41 = ++v72;
          ++v69;
          if (!--v40) {
            goto LABEL_138;
          }
        }
      }
      BOOL v23 = 0;
LABEL_138:
      uint64_t v51 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)canMapOperands + 8);
      uint64_t v36 = mlir::DenseElementsAttr::get(canMapOperands, v51, (llvm::APInt *)v92, DWORD2(v92));
LABEL_140:
      unint64_t v52 = (char *)v92;
      if (DWORD2(v92))
      {
        uint64_t v53 = 16 * DWORD2(v92);
        do
        {
          if (*(_DWORD *)&v52[v53 - 8] >= 0x41u)
          {
            uint64_t v54 = *(void *)&v52[v53 - 16];
            if (v54) {
              MEMORY[0x21667D390](v54, 0x1000C8000313F17);
            }
          }
          v53 -= 16;
        }
        while (v53);
        unint64_t v52 = (char *)v92;
      }
      if (v52 != (char *)v93) {
        free(v52);
      }
      if (!(_BYTE)v67)
      {
        uint64_t v55 = v68;
        uint64_t v68 = 0;
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
        }
      }
      if (!(_BYTE)v70)
      {
        uint64_t v56 = v71;
        uint64_t v71 = 0;
        if (v56) {
          (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
        }
      }
      int v37 = v76;
    }
    if (v37)
    {
      if (!(_BYTE)v73)
      {
        uint64_t v57 = v74;
        uint64_t v74 = 0;
        if (v57) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
      }
    }
    if (BYTE8(v91))
    {
      if (!(_BYTE)v90)
      {
        uint64_t v58 = *((void *)&v90 + 1);
        *((void *)&v90 + 1) = 0;
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
      }
    }
    goto LABEL_69;
  }
  uint64_t v73 = *v3;
  uint64_t v70 = v18;
  uint64_t v20 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v73);
  if (v20 != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v70))
  {
LABEL_68:
    BOOL v23 = 0;
    uint64_t v36 = 0;
    goto LABEL_69;
  }
  mlir::IntegerAttr::getValue((uint64_t)&v73, (llvm::APInt *)&v86);
  long long v21 = (unint64_t **)&v84;
  mlir::IntegerAttr::getValue((uint64_t)&v70, (llvm::APInt *)&v84);
  unint64_t v22 = v85;
  if (v85 >= 0x41)
  {
    if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v84) > 0x40)
    {
      BOOL v23 = 0;
      goto LABEL_78;
    }
    long long v21 = v84;
  }
  BOOL v23 = (unint64_t)*v21 <= v22;
LABEL_78:
  DWORD2(v90) = v87;
  if (v87 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const llvm::APInt *)&v86);
  }
  *(void *)&long long v90 = v86;
  llvm::APInt::ashrInPlace((unsigned int *)&v90, (unint64_t **)&v84);
  DWORD2(v92) = DWORD2(v90);
  *(void *)&long long v92 = v90;
  LOBYTE(v93[0]) = 1;
  if (v85 >= 0x41 && v84) {
    MEMORY[0x21667D390](v84, 0x1000C8000313F17);
  }
  if (v87 >= 0x41 && v86) {
    MEMORY[0x21667D390](v86, 0x1000C8000313F17);
  }
  uint64_t v36 = mlir::IntegerAttr::get(canMapOperands, (const llvm::APInt *)&v92);
  if (LOBYTE(v93[0]))
  {
LABEL_88:
    if (DWORD2(v92) >= 0x41)
    {
      if ((void)v92) {
        MEMORY[0x21667D390](v92, 0x1000C8000313F17);
      }
    }
  }
LABEL_69:
  if (!v23) {
    goto LABEL_70;
  }
  return v36 & 0xFFFFFFFFFFFFFFFBLL;
}

void llvm::APFloat::getLargest(llvm::APFloatBase *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void **)(a3 + 8);
  int v6 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(a1);
  if (v6 == a1) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v5, (uint64_t)a1);
  }
  unsigned int v7 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v5, (uint64_t)a1);
  if (v6 == *v5)
  {
    llvm::detail::DoubleAPFloat::makeLargest(v7, a2);
  }
  else
  {
    llvm::detail::IEEEFloat::makeLargest(v7, a2);
  }
}

uint64_t llvm::APInt::getSignedMinValue@<X0>(uint64_t this@<X0>, llvm::APInt *a2@<X8>)
{
  *((_DWORD *)a2 + 2) = this;
  if (this > 0x40) {
    llvm::APInt::initSlowCase(a2);
  }
  *(void *)a2 = 0;
  *(void *)a2 |= 1 << (this - 1);
  return this;
}

uint64_t llvm::APInt::getSignedMaxValue@<X0>(uint64_t this@<X0>, llvm::APInt *a2@<X8>)
{
  *((_DWORD *)a2 + 2) = this;
  if (this > 0x40) {
    llvm::APInt::initSlowCase(a2);
  }
  unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)this;
  if (!this) {
    unint64_t v3 = 0;
  }
  *(void *)a2 = v3;
  *(void *)a2 &= ~(1 << (this - 1));
  return this;
}

uint64_t llvm::APInt::getMaxValue@<X0>(uint64_t this@<X0>, llvm::APInt *a2@<X8>)
{
  *((_DWORD *)a2 + 2) = this;
  if (this > 0x40) {
    llvm::APInt::initSlowCase(a2);
  }
  unint64_t v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)this;
  if (!this) {
    unint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  return this;
}

uint64_t mlir::emitOptionalError<char const(&)[39]>(uint64_t a1, char a2, const char *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  mlir::emitError(a1, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    long long v21 = a3;
    size_t v22 = strlen(a3);
    uint64_t v4 = &v20;
    uint64_t v5 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v18 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v19 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v18, 24);
        uint64_t v5 = (char *)v24;
        uint64_t v4 = (int *)((char *)v24 + v19);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v18, 24);
        uint64_t v4 = &v20;
        uint64_t v5 = (char *)v24;
      }
    }
    int v6 = &v5[24 * v25];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)int v6 = v7;
    ++v25;
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    BOOL v9 = __p;
    if (__p)
    {
      uint64_t v10 = v31;
      uint64_t v11 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        uint64_t v11 = __p;
      }
      uint64_t v31 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v28;
    if (v28)
    {
      uint64_t v13 = v29;
      int v14 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v16 = *--v13;
          uint64_t v15 = v16;
          *uint64_t v13 = 0;
          if (v16) {
            MEMORY[0x21667D390](v15, 0x1000C8077774924);
          }
        }
        while (v13 != v12);
        int v14 = v28;
      }
      unint64_t v29 = v12;
      operator delete(v14);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::OrIOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.ori", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.ori";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::AndIOp::build(v11, (uint64_t)v20, *a3, *a4);
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

uint64_t mlir::arith::detail::AddFOpGenericAdaptorBase::AddFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.addf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::AddFOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      int v44 = 3;
      __int16 v45 = "expected DictionaryAttr to set properties";
      uint64_t v46 = 41;
      unsigned int v26 = &v44;
      uint64_t v27 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          uint64_t v27 = (char *)v48;
          unsigned int v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          unsigned int v26 = &v44;
          uint64_t v27 = (char *)v48;
        }
      }
      uint64_t v28 = &v27[24 * v49];
      long long v29 = *(_OWORD *)v26;
      *((void *)v28 + 2) = *((void *)v26 + 2);
      *(_OWORD *)uint64_t v28 = v29;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
    if (!v56) {
      return 0;
    }
    unint64_t v30 = __p;
    if (__p)
    {
      uint64_t v31 = v55;
      char v32 = __p;
      if (v55 != __p)
      {
        do
          uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        char v32 = __p;
      }
      uint64_t v55 = v30;
      operator delete(v32);
    }
    long long v21 = v52;
    if (!v52) {
      goto LABEL_43;
    }
    uint64_t v33 = v53;
    BOOL v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v35 = *--v33;
      uint64_t v34 = v35;
      void *v33 = 0;
      if (v35) {
        MEMORY[0x21667D390](v34, 0x1000C8077774924);
      }
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "fastmath", 8uLL);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    int v44 = 3;
    uint64_t v46 = 53;
    char v10 = &v44;
    uint64_t v11 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v41 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        uint64_t v11 = (char *)v48;
        char v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        char v10 = &v44;
        uint64_t v11 = (char *)v48;
      }
    }
    uint64_t v12 = &v11[24 * v49];
    long long v13 = *(_OWORD *)v10;
    *((void *)v12 + 2) = *((void *)v10 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    ++v49;
    if (v47[0])
    {
      int v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      uint64_t v15 = (char *)v48;
      if (v49 >= v50)
      {
        unint64_t v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          int64_t v42 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          uint64_t v15 = (char *)v48;
          int v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          int v14 = &v44;
          uint64_t v15 = (char *)v48;
        }
      }
      uint64_t v16 = &v15[24 * v49];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = *((void *)v14 + 2);
      *(_OWORD *)uint64_t v16 = v17;
      ++v49;
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
    }
  }
  if (!v56) {
    return 0;
  }
  unint64_t v18 = __p;
  if (__p)
  {
    __int16 v19 = v55;
    int v20 = __p;
    if (v55 != __p)
    {
      do
        __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      int v20 = __p;
    }
    uint64_t v55 = v18;
    operator delete(v20);
  }
  long long v21 = v52;
  if (v52)
  {
    size_t v22 = v53;
    BOOL v23 = v52;
    if (v53 == v52) {
      goto LABEL_42;
    }
    do
    {
      uint64_t v25 = *--v22;
      uint64_t v24 = v25;
      *size_t v22 = 0;
      if (v25) {
        MEMORY[0x21667D390](v24, 0x1000C8077774924);
      }
    }
    while (v22 != v21);
LABEL_41:
    BOOL v23 = v52;
LABEL_42:
    uint64_t v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51) {
    free(v48);
  }
  return 0;
}

uint64_t mlir::arith::AddFOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  long long v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"fastmath", 8, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::AddFOp::computePropertiesHash(unint64_t *a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = &unk_267770000;
  {
    unint64_t v16 = v1;
    unint64_t v1 = v16;
    unint64_t v2 = &unk_267770000;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v1 = v16;
      unint64_t v2 = (void *)&unk_267770000;
    }
  }
  uint64_t v3 = v2[385];
  {
    uint64_t v15 = v3;
    unint64_t v17 = v1;
    uint64_t v3 = v15;
    unint64_t v1 = v17;
    unint64_t v2 = &unk_267770000;
    if (v13)
    {
      unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v14 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v14;
      uint64_t v3 = v15;
      unint64_t v1 = v17;
      unint64_t v2 = (void *)&unk_267770000;
    }
  }
  unint64_t v4 = HIDWORD(v1);
  uint64_t v5 = (v3 + 8 * v1) ^ HIDWORD(v1);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * v5) >> 47) ^ (0x9DDFEA08EB382D69 * v5));
  unint64_t v7 = v6 ^ (v6 >> 47);
  unint64_t v8 = v2[385] ^ ((0x9DDFEA08EB382D69 * v7) >> 32);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (((0x759C16B48 * v7) & 0x7FFFFFFF8) + 8));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
}

unint64_t mlir::arith::AddFOp::getInherentAttr(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4 == 8 && *a3 == 0x6874616D74736166) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

void *mlir::arith::AddFOp::setInherentAttr(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 8 && *a2 == 0x6874616D74736166)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(void *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
        uint64_t v4 = a4;
      }
      else {
        uint64_t v4 = 0;
      }
      mlir::Operation *result = v4;
    }
    else
    {
      mlir::Operation *result = 0;
    }
  }
  return result;
}

void mlir::arith::AddFOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"fastmath", 8, *a2);
  }
}

BOOL mlir::arith::AddFOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a1
    || *(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
  {
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    unint64_t v30 = "attribute '";
    uint64_t v31 = 11;
    unint64_t v7 = &v29;
    unint64_t v8 = (char *)v35;
    if (v36 >= v37)
    {
      unint64_t v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        int64_t v27 = (char *)&v29 - (unsigned char *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        unint64_t v8 = (char *)v35;
        unint64_t v7 = (void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        unint64_t v7 = &v29;
        unint64_t v8 = (char *)v35;
      }
    }
    unint64_t v9 = &v8[24 * v36];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = v7[2];
    *(_OWORD *)unint64_t v9 = v10;
    ++v36;
    if (v33)
    {
      __int16 v32 = 261;
      long long v29 = a2;
      unint64_t v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        unint64_t v30 = "' failed to satisfy constraint: Floating point fast math flags";
        uint64_t v31 = 62;
        int v11 = &v29;
        unint64_t v12 = (char *)v35;
        if (v36 >= v37)
        {
          unint64_t v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            int64_t v28 = (char *)&v29 - (unsigned char *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            unint64_t v12 = (char *)v35;
            int v11 = (void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            int v11 = &v29;
            unint64_t v12 = (char *)v35;
          }
        }
        int v13 = &v12[24 * v36];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)int v13 = v14;
        ++v36;
      }
    }
  }
  uint64_t v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  }
  if (v43)
  {
    unint64_t v16 = __p;
    if (__p)
    {
      unint64_t v17 = v42;
      unint64_t v18 = __p;
      if (v42 != __p)
      {
        do
          unint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        unint64_t v18 = __p;
      }
      int64_t v42 = v16;
      operator delete(v18);
    }
    __int16 v19 = v39;
    if (v39)
    {
      int v20 = v40;
      long long v21 = v39;
      if (v40 != v39)
      {
        do
        {
          uint64_t v23 = *--v20;
          uint64_t v22 = v23;
          *int v20 = 0;
          if (v23) {
            MEMORY[0x21667D390](v22, 0x1000C8077774924);
          }
        }
        while (v20 != v19);
        long long v21 = v39;
      }
      int64_t v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38) {
      free(v35);
    }
  }
  return v15;
}

BOOL mlir::arith::AddFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (!v39) {
    return 1;
  }
  uint64_t v5 = *(void **)(*(void *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
    uint64_t v4 = 0;
  }
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v6 = &v40;
    unint64_t v7 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        unint64_t v7 = (char *)v46;
        uint64_t v6 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v6 = &v40;
        unint64_t v7 = (char *)v46;
      }
    }
    unint64_t v8 = &v7[24 * v47];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = v6[2];
    *(_OWORD *)unint64_t v8 = v9;
    ++v47;
  }
  int64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::FastMathFlagsAttr]";
  unint64_t v41 = 80;
  unint64_t v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v41;
    }
    uint64_t v12 = 18;
    if (v41 - v11 < 0x12) {
      uint64_t v12 = v41 - v11;
    }
    unint64_t v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1) {
      --v13;
    }
    __int16 v43 = 261;
    int64_t v40 = (void **)((char *)v40 + v11 + v12);
    unint64_t v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      long long v14 = &v40;
      uint64_t v15 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v15 = (char *)v46;
          long long v14 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          long long v14 = &v40;
          uint64_t v15 = (char *)v46;
        }
      }
      unint64_t v16 = &v15[24 * v47];
      long long v17 = *(_OWORD *)v14;
      *((void *)v16 + 2) = v14[2];
      *(_OWORD *)unint64_t v16 = v17;
      ++v47;
      if (v44)
      {
        unint64_t v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        __int16 v19 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            __int16 v19 = (char *)v46;
            unint64_t v18 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v18 = &v40;
            __int16 v19 = (char *)v46;
          }
        }
        int v20 = &v19[24 * v47];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = v18[2];
        *(_OWORD *)int v20 = v21;
        ++v47;
      }
    }
  }
  uint64_t v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v23 = __p;
    if (__p)
    {
      uint64_t v24 = v53;
      unint64_t v25 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        unint64_t v25 = __p;
      }
      uint64_t v53 = v23;
      operator delete(v25);
    }
    unint64_t v26 = v50;
    if (v50)
    {
      int64_t v27 = v51;
      int64_t v28 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v30 = *--v27;
          uint64_t v29 = v30;
          void *v27 = 0;
          if (v30) {
            MEMORY[0x21667D390](v29, 0x1000C8077774924);
          }
        }
        while (v27 != v26);
        int64_t v28 = v50;
      }
      uint64_t v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v22;
}

uint64_t mlir::arith::AddFOp::writeProperties(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64));
}

uint64_t mlir::arith::AddFOp::getFastmathAttr(mlir::arith::AddFOp *this)
{
  return *(void *)(*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
}

uint64_t mlir::arith::AddFOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v14[2] = *MEMORY[0x263EF8340];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

mlir::MLIRContext *mlir::arith::AddFOp::populateDefaultProperties(uint64_t a1, mlir::MLIRContext **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v4);
  if (!*a2)
  {
    uint64_t result = (mlir::MLIRContext *)mlir::arith::FastMathFlagsAttr::get(result, 0);
    *a2 = result;
  }
  return result;
}

BOOL mlir::arith::AddFOp::verifyInvariantsImpl(mlir::arith::AddFOp *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v4 = *(void *)this - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(uint64_t a1, void **a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v6 = (void *)*((void *)*a2 + 17);
  if (v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  if (v6 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    unsigned int v61 = a3;
    uint64_t v63 = a4;
    uint64_t v65 = a1;
    uint64_t v71 = a2;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v71);
    uint64_t v5 = *a2;
    if (v47 < 1)
    {
      a4 = v63;
      a1 = v65;
      a3 = v61;
    }
    else
    {
      uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v5 + 1));
      v74[0] = a2;
      v74[1] = v48;
      unsigned int v49 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v74)
                     + 136);
      a4 = v63;
      a1 = v65;
      a3 = v61;
      if (v49 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v49 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 1;
      }
      uint64_t v5 = *a2;
    }
  }
  __int16 v19 = (void *)v5[17];
  if (v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    int64_t v60 = a3;
    uint64_t v62 = a4;
    uint64_t v64 = a1;
    uint64_t v68 = a2;
    uint64_t v69 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)(v5 + 1));
    uint64_t v46 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68) + 136);
    if (v46 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v46 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
    {
      uint64_t v16 = 1;
      a4 = v62;
      a1 = v64;
      a3 = v60;
      if (v46 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v46 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return v16;
      }
      goto LABEL_39;
    }
    return 1;
  }
LABEL_39:
  __int16 v70 = 261;
  uint64_t v68 = a3;
  uint64_t v69 = a4;
  mlir::Operation::emitOpError(a1, &v68, (uint64_t)v74);
  if (v74[0])
  {
    LODWORD(v71) = 3;
    uint64_t v72 = " #";
    uint64_t v73 = 2;
    int v20 = &v71;
    long long v21 = (char *)v75;
    if (v76 >= v77)
    {
      unint64_t v50 = v76 + 1;
      if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
      {
        int64_t v56 = (char *)&v71 - (unsigned char *)v75;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v50, 24);
        long long v21 = (char *)v75;
        int v20 = (void ***)((char *)v75 + v56);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v50, 24);
        int v20 = &v71;
        long long v21 = (char *)v75;
      }
    }
    uint64_t v22 = &v21[24 * v76];
    long long v23 = *(_OWORD *)v20;
    *((void *)v22 + 2) = v20[2];
    *(_OWORD *)uint64_t v22 = v23;
    uint64_t v24 = ++v76;
    if (v74[0])
    {
      LODWORD(v71) = 5;
      uint64_t v72 = (const char *)a5;
      unint64_t v25 = &v71;
      unint64_t v26 = (char *)v75;
      if (v24 >= v77)
      {
        unint64_t v51 = v24 + 1;
        BOOL v52 = (char *)v75 + 24 * v24 > (char *)&v71;
        if (v75 <= &v71 && v52)
        {
          int64_t v57 = (char *)&v71 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v51, 24);
          unint64_t v26 = (char *)v75;
          unint64_t v25 = (void ***)((char *)v75 + v57);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v51, 24);
          unint64_t v25 = &v71;
          unint64_t v26 = (char *)v75;
        }
      }
      int64_t v27 = &v26[24 * v76];
      long long v28 = *(_OWORD *)v25;
      *((void *)v27 + 2) = v25[2];
      *(_OWORD *)int64_t v27 = v28;
      uint64_t v29 = ++v76;
      if (v74[0])
      {
        LODWORD(v71) = 3;
        uint64_t v72 = " must be floating-point-like, but got ";
        uint64_t v73 = 38;
        uint64_t v30 = &v71;
        uint64_t v31 = (char *)v75;
        if (v29 >= v77)
        {
          unint64_t v53 = v29 + 1;
          BOOL v54 = (char *)v75 + 24 * v29 > (char *)&v71;
          if (v75 <= &v71 && v54)
          {
            int64_t v58 = (char *)&v71 - (unsigned char *)v75;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
            uint64_t v31 = (char *)v75;
            uint64_t v30 = (void ***)((char *)v75 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v53, 24);
            uint64_t v30 = &v71;
            uint64_t v31 = (char *)v75;
          }
        }
        unint64_t v32 = &v31[24 * v76];
        long long v33 = *(_OWORD *)v30;
        *((void *)v32 + 2) = v30[2];
        *(_OWORD *)unint64_t v32 = v33;
        ++v76;
        if (v74[0])
        {
          unint64_t v34 = &v71;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v71, (uint64_t)a2);
          int64_t v35 = (char *)v75;
          if (v76 >= v77)
          {
            unint64_t v55 = v76 + 1;
            if (v75 <= &v71 && (char *)v75 + 24 * v76 > (char *)&v71)
            {
              int64_t v59 = (char *)&v71 - (unsigned char *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
              int64_t v35 = (char *)v75;
              unint64_t v34 = (void ***)((char *)v75 + v59);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
              unint64_t v34 = &v71;
              int64_t v35 = (char *)v75;
            }
          }
          int64_t v36 = &v35[24 * v76];
          long long v37 = *(_OWORD *)v34;
          *((void *)v36 + 2) = v34[2];
          *(_OWORD *)int64_t v36 = v37;
          ++v76;
        }
      }
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v74);
  if (v74[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v74);
  }
  if (v83)
  {
    unint64_t v38 = __p;
    if (__p)
    {
      uint64_t v39 = v82;
      int64_t v40 = __p;
      if (v82 != __p)
      {
        do
          uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        int64_t v40 = __p;
      }
      uint64_t v82 = v38;
      operator delete(v40);
    }
    unint64_t v41 = v79;
    if (v79)
    {
      uint64_t v42 = v80;
      __int16 v43 = v79;
      if (v80 != v79)
      {
        do
        {
          uint64_t v45 = *--v42;
          uint64_t v44 = v45;
          *uint64_t v42 = 0;
          if (v45) {
            MEMORY[0x21667D390](v44, 0x1000C8077774924);
          }
        }
        while (v42 != v41);
        __int16 v43 = v79;
      }
      char v80 = v41;
      operator delete(v43);
    }
    if (v75 != v78) {
      free(v75);
    }
  }
  return v16;
}

BOOL mlir::arith::AddFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::AddFOpGenericAdaptorBase::Properties>(a2);
      *uint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::AddFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v20 = 0;
  v21[0] = a1;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, uint64_t, BOOL (*)(mlir::AsmParser **, uint64_t *), void *))(*(void *)a1 + 416))(a1, &v20, a3, _ZN4llvm12function_refIFN4mlir11ParseResultERNS1_9AttributeENS1_4TypeEEE11callback_fnIZNS1_9AsmParser32parseCustomAttributeWithFallbackINS1_5arith17FastMathFlagsAttrEEENSt3__19enable_ifIXsr23detect_has_parse_methodIT_EE5valueES2_E4typeERSF_S5_EUlS4_S5_E_EES2_lS4_S5_, v21))return 0; {
  uint64_t v7 = v20;
  }
  if (*(_UNKNOWN **)(*(void *)v20 + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  if (v7) {
    return 1;
  }
  unint64_t v18 = "invalid kind of attribute specified";
  __int16 v19 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, const char **))(*(void *)a1 + 24))(v21, a1, v6, &v18);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v28)
  {
    uint64_t v10 = __p;
    if (__p)
    {
      int v11 = v27;
      unsigned int v12 = __p;
      if (v27 != __p)
      {
        do
          int v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unsigned int v12 = __p;
      }
      int64_t v27 = v10;
      operator delete(v12);
    }
    unint64_t v13 = v24;
    if (v24)
    {
      long long v14 = v25;
      uint64_t v15 = v24;
      if (v25 != v24)
      {
        do
        {
          uint64_t v17 = *--v14;
          uint64_t v16 = v17;
          *long long v14 = 0;
          if (v17) {
            MEMORY[0x21667D390](v16, 0x1000C8077774924);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v24;
      }
      unint64_t v25 = v13;
      operator delete(v15);
    }
    if (v22 != &v23) {
      free(v22);
    }
  }
  return v8;
}

void mlir::arith::AddFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v37[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *uint64_t v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v10 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v10)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v10 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      unsigned int v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      unint64_t v13 = (unsigned char *)*((void *)v12 + 4);
      if ((unint64_t)v13 >= *((void *)v12 + 3))
      {
        llvm::raw_ostream::write(v12, 32);
      }
      else
      {
        *((void *)v12 + 4) = v13 + 1;
        *unint64_t v13 = 32;
      }
      long long v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v15 = (void *)*((void *)v14 + 4);
      if (*((void *)v14 + 3) - (void)v15 > 7uLL)
      {
        void *v15 = 0x6874616D74736166;
        *((void *)v14 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v14, "fastmath", 8uLL);
      }
      int64_t v35 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 104))(a2))
      {
        uint64_t v16 = (void *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v17 = (*(uint64_t (**)(void *))(*v16 + 80))(v16) + v16[4] - v16[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v35, a2);
        if (v17 == (*(uint64_t (**)(void *))(*v16 + 80))(v16) + v16[4] - v16[2]) {
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v35);
        }
      }
    }
  }
  int64_t v35 = v37;
  v37[0] = "fastmath";
  v37[1] = 8;
  uint64_t v36 = 0x200000001;
  unint64_t v18 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v19 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v19 && v19 == mlir::arith::FastMathFlagsAttr::get(v18, 0))
  {
    unsigned int v22 = v36;
    if (v36 >= HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v36 + 1, 16);
      unsigned int v22 = v36;
    }
    uint64_t v23 = (char *)v35 + 16 * v22;
    void *v23 = "fastmath";
    v23[1] = 8;
    LODWORD(v36) = v36 + 1;
    uint64_t v20 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v20 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_24:
      p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
      goto LABEL_29;
    }
  }
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v20);
  p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_29:
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v25, v35, v36);
  unint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  int64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    unsigned char *v27 = 32;
  }
  char v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v29 = (unsigned char *)*((void *)v28 + 4);
  if (*((unsigned char **)v28 + 3) == v29)
  {
    llvm::raw_ostream::write(v28, ":", 1uLL);
  }
  else
  {
    *uint64_t v29 = 58;
    ++*((void *)v28 + 4);
  }
  uint64_t v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v31 = (unsigned char *)*((void *)v30 + 4);
  if ((unint64_t)v31 >= *((void *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((void *)v30 + 4) = v31 + 1;
    *uint64_t v31 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v32 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v35 != v37) {
    free(v35);
  }
}

uint64_t mlir::arith::detail::AddIOpGenericAdaptorBase::AddIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.addi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::AddIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  void v23[2] = *MEMORY[0x263EF8340];
  mlir::OperationState::addOperands(a2, a3, a4);
  *(void *)(a2 + 192) = 0;
  uint64_t v11 = *(unsigned int *)(a2 + 120);
  if (a6 + v11 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a6 + v11, 16);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  if (a6)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v11), a5, 16 * a6);
    LODWORD(v11) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v11 + a6;
  __src = v22;
  uint64_t v21 = 0x200000000;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v19, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v23[0] = a3;
  v23[1] = a4;
  if (v21 != 1)
  {
    if (!v21)
    {
      if (HIDWORD(v21))
      {
        unsigned int v13 = 0;
LABEL_10:
        bzero((char *)__src + 8 * v13, 8 - 8 * v13);
        goto LABEL_11;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v22, 1uLL, 8);
      unsigned int v13 = v21;
      if (v21 != 1) {
        goto LABEL_10;
      }
    }
LABEL_11:
    LODWORD(v21) = 1;
  }
  uint64_t v14 = mlir::ValueRange::dereference_iterator(v23, 0);
  *(void *)__src = *(void *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = __src;
  uint64_t v16 = v21;
  uint64_t v17 = *(unsigned int *)(a2 + 72);
  unint64_t v18 = v17 + v21;
  if (v18 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  if (v16)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v17), v15, 8 * v16);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v17 + v16;
  if (__src != v22) {
    free(__src);
  }
}

BOOL mlir::arith::AddIOp::verifyInvariantsImpl(mlir::arith::AddIOp *this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 1u))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v2 = *(void *)this - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  int64_t v57 = (void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v57)) {
    return 1;
  }
  uint64_t v11 = v57;
  if (*((_UNKNOWN **)*v57 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v56 = (uint64_t)v57;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    uint64_t v11 = v57;
    if (v41 >= 1)
    {
      if (v57) {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v57 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      v61[0] = v11;
      v61[1] = v42;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
        return 1;
      }
      uint64_t v11 = v57;
    }
  }
  unsigned int v12 = *v11;
  unsigned int v13 = (void *)*((void *)*v11 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    unint64_t v53 = v11;
    uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
  }
  __int16 v55 = 261;
  unint64_t v53 = a3;
  uint64_t v54 = a4;
  mlir::Operation::emitOpError(a1, &v53, (uint64_t)v61);
  if (v61[0])
  {
    LODWORD(OperandRange) = 3;
    int64_t v59 = " #";
    uint64_t v60 = 2;
    p_uint64_t OperandRange = &OperandRange;
    uint64_t v16 = (char *)v62;
    if (v63 >= v64)
    {
      unint64_t v43 = v63 + 1;
      if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
      {
        int64_t v49 = (char *)&OperandRange - (unsigned char *)v62;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
        uint64_t v16 = (char *)v62;
        p_uint64_t OperandRange = (uint64_t *)((char *)v62 + v49);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
        p_uint64_t OperandRange = &OperandRange;
        uint64_t v16 = (char *)v62;
      }
    }
    uint64_t v17 = &v16[24 * v63];
    long long v18 = *(_OWORD *)p_OperandRange;
    *((void *)v17 + 2) = p_OperandRange[2];
    *(_OWORD *)uint64_t v17 = v18;
    uint64_t v19 = ++v63;
    if (v61[0])
    {
      LODWORD(OperandRange) = 5;
      int64_t v59 = (const char *)a5;
      uint64_t v20 = &OperandRange;
      uint64_t v21 = (char *)v62;
      if (v19 >= v64)
      {
        unint64_t v44 = v19 + 1;
        BOOL v45 = (char *)v62 + 24 * v19 > (char *)&OperandRange;
        if (v62 <= &OperandRange && v45)
        {
          int64_t v50 = (char *)&OperandRange - (unsigned char *)v62;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
          uint64_t v21 = (char *)v62;
          uint64_t v20 = (uint64_t *)((char *)v62 + v50);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
          uint64_t v20 = &OperandRange;
          uint64_t v21 = (char *)v62;
        }
      }
      unsigned int v22 = &v21[24 * v63];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)unsigned int v22 = v23;
      uint64_t v24 = ++v63;
      if (v61[0])
      {
        LODWORD(OperandRange) = 3;
        int64_t v59 = " must be signless-integer-like, but got ";
        uint64_t v60 = 40;
        uint64_t v25 = &OperandRange;
        unint64_t v26 = (char *)v62;
        if (v24 >= v64)
        {
          unint64_t v46 = v24 + 1;
          BOOL v47 = (char *)v62 + 24 * v24 > (char *)&OperandRange;
          if (v62 <= &OperandRange && v47)
          {
            int64_t v51 = (char *)&OperandRange - (unsigned char *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
            unint64_t v26 = (char *)v62;
            uint64_t v25 = (uint64_t *)((char *)v62 + v51);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
            uint64_t v25 = &OperandRange;
            unint64_t v26 = (char *)v62;
          }
        }
        int64_t v27 = &v26[24 * v63];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = v25[2];
        *(_OWORD *)int64_t v27 = v28;
        ++v63;
        if (v61[0])
        {
          uint64_t v29 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v57);
          uint64_t v30 = (char *)v62;
          if (v63 >= v64)
          {
            unint64_t v48 = v63 + 1;
            if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
            {
              int64_t v52 = (char *)&OperandRange - (unsigned char *)v62;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
              uint64_t v30 = (char *)v62;
              uint64_t v29 = (uint64_t *)((char *)v62 + v52);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
              uint64_t v29 = &OperandRange;
              uint64_t v30 = (char *)v62;
            }
          }
          uint64_t v31 = &v30[24 * v63];
          long long v32 = *(_OWORD *)v29;
          *((void *)v31 + 2) = v29[2];
          *(_OWORD *)uint64_t v31 = v32;
          ++v63;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
  if (v61[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
  }
  if (v70)
  {
    long long v33 = __p;
    if (__p)
    {
      unint64_t v34 = v69;
      int64_t v35 = __p;
      if (v69 != __p)
      {
        do
          unint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        int64_t v35 = __p;
      }
      uint64_t v69 = v33;
      operator delete(v35);
    }
    uint64_t v36 = v66;
    if (v66)
    {
      long long v37 = v67;
      unint64_t v38 = v66;
      if (v67 != v66)
      {
        do
        {
          uint64_t v40 = *--v37;
          uint64_t v39 = v40;
          *long long v37 = 0;
          if (v40) {
            MEMORY[0x21667D390](v39, 0x1000C8077774924);
          }
        }
        while (v37 != v36);
        unint64_t v38 = v66;
      }
      __int16 v67 = v36;
      operator delete(v38);
    }
    if (v62 != v65) {
      free(v62);
    }
  }
  return v9;
}

BOOL mlir::arith::AddIOp::parse(uint64_t a1, uint64_t a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::AddIOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v25[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *uint64_t v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  long long v23 = v25;
  uint64_t v24 = 0x200000000;
  uint64_t v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v23, v24);
  uint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    unsigned char *v17 = 58;
    ++*((void *)v16 + 4);
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *uint64_t v19 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v20 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v23 != v25) {
    free(v23);
  }
}

uint64_t mlir::arith::detail::AddUIExtendedOpGenericAdaptorBase::AddUIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.addui_extended", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::AddUIExtendedOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v5 = *(void *)a1 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "sum", 3);
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v7 = *(void *)a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);

  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v9, "overflow", 8);
}

uint64_t mlir::arith::AddUIExtendedOp::verifyInvariantsImpl(mlir::arith::AddUIExtendedOp *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 1u))
  {
    return 0;
  }
  uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0))return 0; {
  uint64_t v4 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  }
  uint64_t v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  uint64_t v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*(void *)this, *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 1u))return 0; {
  uint64_t v7 = *(void *)this;
  }
  uint64_t v8 = *(void *)(*(void *)this + 72);
  unint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v9 == (*(void *)(*(void *)(v8 + 56) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    int v10 = *(_DWORD *)(v7 + 36);
    uint64_t v11 = v7 - 16;
    uint64_t v12 = v10 ? v11 : 0;
    if (v9 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v13 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
      if ((*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)) {
        return 1;
      }
    }
  }
  uint64_t v24 = (void **)"failed to verify that all of {lhs, rhs, sum} have same type";
  __int16 v25 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v24, (uint64_t)v26);
  uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  }
  if (v33)
  {
    uint64_t v15 = __p;
    if (__p)
    {
      uint64_t v16 = v32;
      uint64_t v17 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      long long v32 = v15;
      operator delete(v17);
    }
    long long v18 = v29;
    if (v29)
    {
      uint64_t v19 = v30;
      uint64_t v20 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v22 = *--v19;
          uint64_t v21 = v22;
          *uint64_t v19 = 0;
          if (v22) {
            MEMORY[0x21667D390](v21, 0x1000C8077774924);
          }
        }
        while (v19 != v18);
        uint64_t v20 = v29;
      }
      uint64_t v30 = v18;
      operator delete(v20);
    }
    if (v27 != &v28) {
      free(v27);
    }
  }
  return v14;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  int64_t v57 = (void **)a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v57, 1)) {
    return 1;
  }
  uint64_t v11 = v57;
  if (*((_UNKNOWN **)*v57 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v56 = (uint64_t)v57;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v56);
    uint64_t v11 = v57;
    if (v41 >= 1)
    {
      if (v57) {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v57 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      v61[0] = v11;
      v61[1] = v42;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v61);
      if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)) {
        return 1;
      }
      uint64_t v11 = v57;
    }
  }
  uint64_t v12 = *v11;
  uint64_t v13 = (void *)*((void *)*v11 + 17);
  BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
     || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  if (!v14
    || (unint64_t v53 = v11,
        uint64_t v54 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8),
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v53),
        uint64_t v9 = 1,
        !mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)))
  {
    __int16 v55 = 261;
    unint64_t v53 = a3;
    uint64_t v54 = a4;
    mlir::Operation::emitOpError(a1, &v53, (uint64_t)v61);
    if (v61[0])
    {
      LODWORD(OperandRange) = 3;
      int64_t v59 = " #";
      uint64_t v60 = 2;
      p_uint64_t OperandRange = &OperandRange;
      uint64_t v16 = (char *)v62;
      if (v63 >= v64)
      {
        unint64_t v43 = v63 + 1;
        if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
        {
          int64_t v49 = (char *)&OperandRange - (unsigned char *)v62;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
          uint64_t v16 = (char *)v62;
          p_uint64_t OperandRange = (uint64_t *)((char *)v62 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v43, 24);
          p_uint64_t OperandRange = &OperandRange;
          uint64_t v16 = (char *)v62;
        }
      }
      uint64_t v17 = &v16[24 * v63];
      long long v18 = *(_OWORD *)p_OperandRange;
      *((void *)v17 + 2) = p_OperandRange[2];
      *(_OWORD *)uint64_t v17 = v18;
      uint64_t v19 = ++v63;
      if (v61[0])
      {
        LODWORD(OperandRange) = 5;
        int64_t v59 = (const char *)a5;
        uint64_t v20 = &OperandRange;
        uint64_t v21 = (char *)v62;
        if (v19 >= v64)
        {
          unint64_t v44 = v19 + 1;
          BOOL v45 = (char *)v62 + 24 * v19 > (char *)&OperandRange;
          if (v62 <= &OperandRange && v45)
          {
            int64_t v50 = (char *)&OperandRange - (unsigned char *)v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
            uint64_t v21 = (char *)v62;
            uint64_t v20 = (uint64_t *)((char *)v62 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v44, 24);
            uint64_t v20 = &OperandRange;
            uint64_t v21 = (char *)v62;
          }
        }
        uint64_t v22 = &v21[24 * v63];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        uint64_t v24 = ++v63;
        if (v61[0])
        {
          LODWORD(OperandRange) = 3;
          int64_t v59 = " must be BOOL-like, but got ";
          uint64_t v60 = 28;
          __int16 v25 = &OperandRange;
          unint64_t v26 = (char *)v62;
          if (v24 >= v64)
          {
            unint64_t v46 = v24 + 1;
            BOOL v47 = (char *)v62 + 24 * v24 > (char *)&OperandRange;
            if (v62 <= &OperandRange && v47)
            {
              int64_t v51 = (char *)&OperandRange - (unsigned char *)v62;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
              unint64_t v26 = (char *)v62;
              __int16 v25 = (uint64_t *)((char *)v62 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v46, 24);
              __int16 v25 = &OperandRange;
              unint64_t v26 = (char *)v62;
            }
          }
          int64_t v27 = &v26[24 * v63];
          long long v28 = *(_OWORD *)v25;
          *((void *)v27 + 2) = v25[2];
          *(_OWORD *)int64_t v27 = v28;
          ++v63;
          if (v61[0])
          {
            uint64_t v29 = &OperandRange;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v57);
            uint64_t v30 = (char *)v62;
            if (v63 >= v64)
            {
              unint64_t v48 = v63 + 1;
              if (v62 <= &OperandRange && (char *)v62 + 24 * v63 > (char *)&OperandRange)
              {
                int64_t v52 = (char *)&OperandRange - (unsigned char *)v62;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
                uint64_t v30 = (char *)v62;
                uint64_t v29 = (uint64_t *)((char *)v62 + v52);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, v65, v48, 24);
                uint64_t v29 = &OperandRange;
                uint64_t v30 = (char *)v62;
              }
            }
            uint64_t v31 = &v30[24 * v63];
            long long v32 = *(_OWORD *)v29;
            *((void *)v31 + 2) = v29[2];
            *(_OWORD *)uint64_t v31 = v32;
            ++v63;
          }
        }
      }
    }
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v61);
    if (v61[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v61);
    }
    if (v70)
    {
      char v33 = __p;
      if (__p)
      {
        uint64_t v34 = v69;
        int64_t v35 = __p;
        if (v69 != __p)
        {
          do
            uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
          while (v34 != v33);
          int64_t v35 = __p;
        }
        uint64_t v69 = v33;
        operator delete(v35);
      }
      uint64_t v36 = v66;
      if (v66)
      {
        long long v37 = v67;
        unint64_t v38 = v66;
        if (v67 != v66)
        {
          do
          {
            uint64_t v40 = *--v37;
            uint64_t v39 = v40;
            *long long v37 = 0;
            if (v40) {
              MEMORY[0x21667D390](v39, 0x1000C8077774924);
            }
          }
          while (v37 != v36);
          unint64_t v38 = v66;
        }
        __int16 v67 = v36;
        operator delete(v38);
      }
      if (v62 != v65) {
        free(v62);
      }
    }
  }
  return v9;
}

BOOL mlir::arith::AddUIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  memset(v9, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v7))
    && (uint64_t __src = v7, (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1))
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t v7 = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &v7, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v10, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::AddUIExtendedOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *uint64_t v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *uint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v30 = v32;
  uint64_t v31 = 0x200000000;
  int v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v30, v31);
  BOOL v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    unsigned char *v17 = 58;
    ++*((void *)v16 + 4);
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *uint64_t v19 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v20 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v23 = (unsigned char *)*((void *)v22 + 4);
  if (*((unsigned char **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ",", 1uLL);
  }
  else
  {
    unsigned char *v23 = 44;
    ++*((void *)v22 + 4);
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  __int16 v25 = (unsigned char *)*((void *)v24 + 4);
  if ((unint64_t)v25 >= *((void *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((void *)v24 + 4) = v25 + 1;
    unsigned char *v25 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v26 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 1);
  uint64_t v28 = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(v28 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::arith::detail::AndIOpGenericAdaptorBase::AndIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.andi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::AndIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v12 = a4;
  uint64_t v13 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  uint64_t __src = v18;
  uint64_t v17 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v15, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v14, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v19 = v15;
  if (v17 != 1)
  {
    if (!v17)
    {
      if (HIDWORD(v17))
      {
        unsigned int v6 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v6, 8 - 8 * v6);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v18, 1uLL, 8);
      unsigned int v6 = v17;
      if (v17 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v17) = 1;
  }
  uint64_t v7 = mlir::ValueRange::dereference_iterator(&v19, 0);
  *(void *)uint64_t __src = *(void *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = __src;
  uint64_t v9 = v17;
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  unint64_t v11 = v10 + v17;
  if (v11 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  if (v9)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v10), v8, 8 * v9);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v10 + v9;
  if (__src != v18) {
    free(__src);
  }
}

BOOL mlir::arith::AndIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::BitcastOpGenericAdaptorBase::BitcastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.bitcast", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::BitcastOp::verifyInvariantsImpl(mlir::arith::BitcastOp *this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps3(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  char v80 = (void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v80)) {
    return 1;
  }
  uint64_t v9 = v80;
  if (*((_UNKNOWN **)*v80 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v79 = (uint64_t)v80;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    uint64_t v9 = v80;
    if (v26 >= 1)
    {
      if (v80) {
        uint64_t v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v80 + 8);
      }
      else {
        uint64_t v27 = 0;
      }
      v85[0] = v9;
      v85[1] = v27;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v85);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
        return 1;
      }
      uint64_t v9 = v80;
    }
  }
  uint64_t v10 = (void *)*((void *)*v9 + 17);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v9 + 8);
    uint64_t v73 = v9;
    uint64_t v74 = v12;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
    uint64_t v9 = v80;
    uint64_t v10 = (void *)*((void *)*v80 + 17);
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    || v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 1;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v78 = v9;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v78);
    uint64_t v9 = v80;
    if (v60 >= 1)
    {
      if (v80) {
        uint64_t v61 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v80 + 8);
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v82 = v9;
      uint64_t v83 = v61;
      uint64_t v62 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v82)
                     + 136);
      if (v62 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v62 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 1;
      }
      uint64_t v9 = v80;
    }
  }
  uint64_t v28 = *v9;
  uint64_t v29 = (void *)*((void *)*v9 + 17);
  if (v29 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v29 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v56 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v28 + 8);
    v77[0] = v9;
    v77[1] = v56;
    int64_t v57 = *(void **)(*(void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v77) + 136);
    if (v57 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v57 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return 1;
    }
    uint64_t v9 = v80;
    uint64_t v28 = *v80;
    if (*((_UNKNOWN **)*v80 + 17) != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
      goto LABEL_57;
    }
    goto LABEL_93;
  }
  if (v29 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
LABEL_93:
    uint64_t v58 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v28 + 8);
    v76[0] = v9;
    v76[1] = v58;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v76);
    if (!mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange))
    {
      int64_t v59 = *(void **)(*(void *)OperandRange + 136);
      if (v59 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v59 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
      {
        uint64_t v24 = 1;
        if (v59 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          || v59 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          return v24;
        }
        goto LABEL_57;
      }
    }
    return 1;
  }
LABEL_57:
  __int16 v75 = 261;
  uint64_t v73 = a3;
  uint64_t v74 = a4;
  mlir::Operation::emitOpError(a1, &v73, (uint64_t)v85);
  if (v85[0])
  {
    LODWORD(v82) = 3;
    uint64_t v83 = (uint64_t)" #";
    uint64_t v84 = 2;
    uint64_t v30 = &v82;
    uint64_t v31 = (char *)v86;
    if (v87 >= v88)
    {
      unint64_t v63 = v87 + 1;
      if (v86 <= &v82 && (char *)v86 + 24 * v87 > (char *)&v82)
      {
        int64_t v69 = (char *)&v82 - (unsigned char *)v86;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v63, 24);
        uint64_t v31 = (char *)v86;
        uint64_t v30 = (void ***)((char *)v86 + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v63, 24);
        uint64_t v30 = &v82;
        uint64_t v31 = (char *)v86;
      }
    }
    long long v32 = &v31[24 * v87];
    long long v33 = *(_OWORD *)v30;
    *((void *)v32 + 2) = v30[2];
    *(_OWORD *)long long v32 = v33;
    uint64_t v34 = ++v87;
    if (v85[0])
    {
      LODWORD(v82) = 5;
      uint64_t v83 = a5;
      int64_t v35 = &v82;
      uint64_t v36 = (char *)v86;
      if (v34 >= v88)
      {
        unint64_t v64 = v34 + 1;
        BOOL v65 = (char *)v86 + 24 * v34 > (char *)&v82;
        if (v86 <= &v82 && v65)
        {
          int64_t v70 = (char *)&v82 - (unsigned char *)v86;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v64, 24);
          uint64_t v36 = (char *)v86;
          int64_t v35 = (void ***)((char *)v86 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v64, 24);
          int64_t v35 = &v82;
          uint64_t v36 = (char *)v86;
        }
      }
      long long v37 = &v36[24 * v87];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = v35[2];
      *(_OWORD *)long long v37 = v38;
      uint64_t v39 = ++v87;
      if (v85[0])
      {
        LODWORD(v82) = 3;
        uint64_t v83 = (uint64_t)" must be signless-integer-or-float-like or memref of signless-integer or float, but got ";
        uint64_t v84 = 88;
        uint64_t v40 = &v82;
        uint64_t v41 = (char *)v86;
        if (v39 >= v88)
        {
          unint64_t v66 = v39 + 1;
          BOOL v67 = (char *)v86 + 24 * v39 > (char *)&v82;
          if (v86 <= &v82 && v67)
          {
            int64_t v71 = (char *)&v82 - (unsigned char *)v86;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v66, 24);
            uint64_t v41 = (char *)v86;
            uint64_t v40 = (void ***)((char *)v86 + v71);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v66, 24);
            uint64_t v40 = &v82;
            uint64_t v41 = (char *)v86;
          }
        }
        uint64_t v42 = &v41[24 * v87];
        long long v43 = *(_OWORD *)v40;
        *((void *)v42 + 2) = v40[2];
        *(_OWORD *)uint64_t v42 = v43;
        ++v87;
        if (v85[0])
        {
          unint64_t v44 = &v82;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v82, (uint64_t)v80);
          BOOL v45 = (char *)v86;
          if (v87 >= v88)
          {
            unint64_t v68 = v87 + 1;
            if (v86 <= &v82 && (char *)v86 + 24 * v87 > (char *)&v82)
            {
              int64_t v72 = (char *)&v82 - (unsigned char *)v86;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v68, 24);
              BOOL v45 = (char *)v86;
              unint64_t v44 = (void ***)((char *)v86 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v89, v68, 24);
              unint64_t v44 = &v82;
              BOOL v45 = (char *)v86;
            }
          }
          unint64_t v46 = &v45[24 * v87];
          long long v47 = *(_OWORD *)v44;
          *((void *)v46 + 2) = v44[2];
          *(_OWORD *)unint64_t v46 = v47;
          ++v87;
        }
      }
    }
  }
  uint64_t v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v85);
  if (v85[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v85);
  }
  if (v94)
  {
    unint64_t v48 = __p;
    if (__p)
    {
      int64_t v49 = v93;
      int64_t v50 = __p;
      if (v93 != __p)
      {
        do
          int64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
        while (v49 != v48);
        int64_t v50 = __p;
      }
      uint64_t v93 = v48;
      operator delete(v50);
    }
    int64_t v51 = v90;
    if (v90)
    {
      int64_t v52 = v91;
      unint64_t v53 = v90;
      if (v91 != v90)
      {
        do
        {
          uint64_t v55 = *--v52;
          uint64_t v54 = v55;
          void *v52 = 0;
          if (v55) {
            MEMORY[0x21667D390](v54, 0x1000C8077774924);
          }
        }
        while (v52 != v51);
        unint64_t v53 = v90;
      }
      long long v91 = v51;
      operator delete(v53);
    }
    if (v86 != v89) {
      free(v86);
    }
  }
  return v24;
}

BOOL mlir::arith::BitcastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v6 = (const char *)a2[1];
  uint64_t v7 = (const char *)a3[1];
  if (v6 == v7)
  {
    if (v6)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = (void *)*a3;
      uint64_t v11 = 32 * (void)v6;
      while ((*(unsigned __int8 (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 696))(a1, v9, *v10, a5))
      {
        v9 += 32;
        ++v10;
        v11 -= 32;
        if (!v11) {
          return 1;
        }
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    __int16 v45 = 257;
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a1 + 24))(v49, a1, a4, v44);
    if (v49[0])
    {
      int v46 = 5;
      long long v47 = v6;
      uint64_t v13 = &v46;
      unint64_t v14 = (char *)v50;
      if (v51 >= v52)
      {
        unint64_t v36 = v51 + 1;
        if (v50 <= &v46 && (char *)v50 + 24 * v51 > (char *)&v46)
        {
          int64_t v41 = (char *)&v46 - (unsigned char *)v50;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          unint64_t v14 = (char *)v50;
          uint64_t v13 = (int *)((char *)v50 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v36, 24);
          uint64_t v13 = &v46;
          unint64_t v14 = (char *)v50;
        }
      }
      long long v15 = &v14[24 * v51];
      long long v16 = *(_OWORD *)v13;
      *((void *)v15 + 2) = *((void *)v13 + 2);
      *(_OWORD *)long long v15 = v16;
      uint64_t v17 = ++v51;
      if (v49[0])
      {
        int v46 = 3;
        long long v47 = " operands present, but expected ";
        uint64_t v48 = 32;
        long long v18 = &v46;
        long long v19 = (char *)v50;
        if (v17 >= v52)
        {
          unint64_t v37 = v17 + 1;
          BOOL v38 = (char *)v50 + 24 * v17 > (char *)&v46;
          if (v50 <= &v46 && v38)
          {
            int64_t v42 = (char *)&v46 - (unsigned char *)v50;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            long long v19 = (char *)v50;
            long long v18 = (int *)((char *)v50 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v37, 24);
            long long v18 = &v46;
            long long v19 = (char *)v50;
          }
        }
        uint64_t v20 = &v19[24 * v51];
        long long v21 = *(_OWORD *)v18;
        *((void *)v20 + 2) = *((void *)v18 + 2);
        *(_OWORD *)uint64_t v20 = v21;
        uint64_t v22 = ++v51;
        if (v49[0])
        {
          int v46 = 5;
          long long v47 = v7;
          long long v23 = &v46;
          uint64_t v24 = (char *)v50;
          if (v22 >= v52)
          {
            unint64_t v39 = v22 + 1;
            BOOL v40 = (char *)v50 + 24 * v22 > (char *)&v46;
            if (v50 <= &v46 && v40)
            {
              int64_t v43 = (char *)&v46 - (unsigned char *)v50;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              uint64_t v24 = (char *)v50;
              long long v23 = (int *)((char *)v50 + v43);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v53, v39, 24);
              long long v23 = &v46;
              uint64_t v24 = (char *)v50;
            }
          }
          __int16 v25 = &v24[24 * v51];
          long long v26 = *(_OWORD *)v23;
          *((void *)v25 + 2) = *((void *)v23 + 2);
          *(_OWORD *)__int16 v25 = v26;
          ++v51;
        }
      }
    }
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v49);
    if (v49[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v49);
    }
    if (v58)
    {
      uint64_t v27 = __p;
      if (__p)
      {
        uint64_t v28 = v57;
        uint64_t v29 = __p;
        if (v57 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          uint64_t v29 = __p;
        }
        int64_t v57 = v27;
        operator delete(v29);
      }
      uint64_t v30 = v54;
      if (v54)
      {
        uint64_t v31 = v55;
        long long v32 = v54;
        if (v55 != v54)
        {
          do
          {
            uint64_t v34 = *--v31;
            uint64_t v33 = v34;
            *uint64_t v31 = 0;
            if (v34) {
              MEMORY[0x21667D390](v33, 0x1000C8077774924);
            }
          }
          while (v31 != v30);
          long long v32 = v54;
        }
        uint64_t v55 = v30;
        operator delete(v32);
      }
      if (v50 != v53) {
        free(v50);
      }
    }
  }
  return v12;
}

void mlir::arith::BitcastOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v27[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  __int16 v25 = v27;
  uint64_t v26 = 0x200000000;
  uint64_t v6 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v9, v25, v26);
  uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v11 = (unsigned char *)*((void *)v10 + 4);
  if ((unint64_t)v11 >= *((void *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((void *)v10 + 4) = v11 + 1;
    *uint64_t v11 = 32;
  }
  uint64_t v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (unsigned char *)*((void *)v12 + 4);
  if (*((unsigned char **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *uint64_t v13 = 58;
    ++*((void *)v12 + 4);
  }
  unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if ((unint64_t)v17 >= *((void *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 32;
  }
  long long v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v19 = (_WORD *)*((void *)v18 + 4);
  if (*((void *)v18 + 3) - (void)v19 > 1uLL)
  {
    *long long v19 = 28532;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, "to", 2uLL);
  }
  uint64_t v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v21 = (unsigned char *)*((void *)v20 + 4);
  if ((unint64_t)v21 >= *((void *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((void *)v20 + 4) = v21 + 1;
    *long long v21 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v22 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v25 != v27) {
    free(v25);
  }
}

uint64_t mlir::arith::detail::CeilDivSIOpGenericAdaptorBase::CeilDivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.ceildivsi", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::CeilDivSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::CeilDivUIOpGenericAdaptorBase::CeilDivUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.ceildivui", 15, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::CeilDivUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::CmpFOpGenericAdaptorBase::CmpFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.cmpf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::CmpFOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v11 = &v56;
      uint64_t v12 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v12 = (char *)v60;
          uint64_t v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v11 = &v56;
          uint64_t v12 = (char *)v60;
        }
      }
      uint64_t v13 = &v12[24 * v61];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)uint64_t v13 = v14;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    long long v15 = __p;
    if (__p)
    {
      long long v16 = v67;
      uint64_t v17 = __p;
      if (v67 != __p)
      {
        do
          long long v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        uint64_t v17 = __p;
      }
      BOOL v67 = v15;
      operator delete(v17);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    long long v19 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v22 = *--v19;
      uint64_t v21 = v22;
      *long long v19 = 0;
      if (v22) {
        MEMORY[0x21667D390](v21, 0x1000C8077774924);
      }
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "predicate", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for predicate in DictionaryAttr to set Properties.";
      uint64_t v58 = 69;
      long long v23 = &v56;
      uint64_t v24 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v52 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v24 = (char *)v60;
          long long v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          long long v23 = &v56;
          uint64_t v24 = (char *)v60;
        }
      }
      __int16 v25 = &v24[24 * v61];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)__int16 v25 = v26;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    uint64_t v27 = __p;
    if (__p)
    {
      uint64_t v28 = v67;
      uint64_t v29 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        uint64_t v29 = __p;
      }
      BOOL v67 = v27;
      operator delete(v29);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v30 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v32 = *--v30;
      uint64_t v31 = v32;
      *uint64_t v30 = 0;
      if (v32) {
        MEMORY[0x21667D390](v31, 0x1000C8077774924);
      }
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::arith::CmpFPredicateAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 54;
    uint64_t v33 = &v56;
    uint64_t v34 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v53 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v34 = (char *)v60;
        uint64_t v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v33 = &v56;
        uint64_t v34 = (char *)v60;
      }
    }
    int64_t v35 = &v34[24 * v61];
    long long v36 = *(_OWORD *)v33;
    *((void *)v35 + 2) = *((void *)v33 + 2);
    *(_OWORD *)int64_t v35 = v36;
    ++v61;
    if (v59[0])
    {
      unint64_t v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      BOOL v38 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          BOOL v38 = (char *)v60;
          unint64_t v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unint64_t v37 = &v56;
          BOOL v38 = (char *)v60;
        }
      }
      unint64_t v39 = &v38[24 * v61];
      long long v40 = *(_OWORD *)v37;
      *((void *)v39 + 2) = *((void *)v37 + 2);
      *(_OWORD *)unint64_t v39 = v40;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    int64_t v41 = __p;
    if (__p)
    {
      int64_t v42 = v67;
      int64_t v43 = __p;
      if (v67 != __p)
      {
        do
          int64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        int64_t v43 = __p;
      }
      BOOL v67 = v41;
      operator delete(v43);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    unint64_t v44 = v65;
    uint64_t v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      BOOL v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v46 = *--v44;
      uint64_t v45 = v46;
      *unint64_t v44 = 0;
      if (v46) {
        MEMORY[0x21667D390](v45, 0x1000C8077774924);
      }
    }
    while (v44 != v18);
LABEL_58:
    uint64_t v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::CmpFOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  uint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"predicate", 9, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::CmpFOp::getInherentAttr(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 9 && (*(void *)a3 == 0x7461636964657270 ? (BOOL v4 = *(unsigned char *)(a3 + 8) == 101) : (BOOL v4 = 0), v4)) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

uint64_t mlir::arith::CmpFOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 9 && *(void *)a2 == 0x7461636964657270 && *(unsigned char *)(a2 + 8) == 101)
  {
    uint64_t v6 = (void *)result;
    if (a4)
    {
      uint64_t result = mlir::arith::CmpFPredicateAttr::classof(a4);
      if (result) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    *uint64_t v6 = v7;
  }
  return result;
}

void mlir::arith::CmpFOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"predicate", 9, *a2);
  }
}

BOOL mlir::arith::CmpFOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(v6, (void **)"predicate", (const char *)9, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1 || (mlir::arith::CmpFPredicateAttr::classof(a1) & 1) != 0) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v11 = &v31;
    uint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v12 = (char *)v37;
        uint64_t v11 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v11 = &v31;
        uint64_t v12 = (char *)v37;
      }
    }
    uint64_t v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)uint64_t v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1"
              "1, 12, 13, 14, 15";
        uint64_t v33 = 123;
        long long v15 = &v31;
        long long v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v16 = (char *)v37;
            long long v15 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v15 = &v31;
            long long v16 = (char *)v37;
          }
        }
        uint64_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)uint64_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    long long v19 = __p;
    if (__p)
    {
      uint64_t v20 = v44;
      uint64_t v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      unint64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      long long v23 = v42;
      uint64_t v24 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v41;
      }
      int64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::arith::CmpFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpFPredicateAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpFPredicateAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::arith::CmpFPredicateAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    BOOL v8 = &v40;
    uint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v9 = (char *)v46;
        BOOL v8 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        BOOL v8 = &v40;
        uint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  long long v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::CmpFPredicateAttr]";
  unint64_t v41 = 80;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    long long v40 = (void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      long long v16 = &v40;
      uint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v17 = (char *)v46;
          long long v16 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          long long v16 = &v40;
          uint64_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            uint64_t v20 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v24 = __p;
    if (__p)
    {
      uint64_t v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      int64_t v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      int64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::arith::CmpFOp::writeProperties(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1) + 64));
}

uint64_t mlir::arith::CmpFOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v15[2] = *MEMORY[0x263EF8340];
  v15[0] = a4;
  v15[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  uint64_t v13 = mlir::ValueRange::dereference_iterator(v15, 0);
  **(void **)a11 = getI1SameShape((void *)(*(void *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8));
  return 1;
}

uint64_t mlir::arith::CmpFOp::verifyInvariantsImpl(mlir::arith::CmpFOp *this)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v26[0] = v2;
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(v3, (void **)"predicate", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v26)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 1u))
    {
      return 0;
    }
    if (*(_DWORD *)(*(void *)this + 36)) {
      uint64_t v4 = *(void *)this - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
    if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0))return 0; {
    I1Sameuint64_t Shape = getI1SameShape((void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    }
    if (*(_DWORD *)(*(void *)this + 36)) {
      uint64_t v7 = *(void *)this - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    if (I1SameShape == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
      return 1;
    }
    v24[0] = (void **)"failed to verify that result type has i1 element type and same shape as operands";
    __int16 v25 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v9 = __p;
      if (__p)
      {
        uint64_t v10 = v32;
        int v11 = __p;
        if (v32 != __p)
        {
          do
            uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          int v11 = __p;
        }
        unint64_t v32 = v9;
        operator delete(v11);
      }
      unsigned int v12 = v29;
      if (!v29) {
        goto LABEL_44;
      }
      uint64_t v13 = v30;
      uint64_t v14 = v29;
      if (v30 == v29)
      {
LABEL_43:
        uint64_t v30 = v12;
        operator delete(v14);
LABEL_44:
        if (v27 != &v28) {
          free(v27);
        }
        return v8;
      }
      do
      {
        uint64_t v16 = *--v13;
        uint64_t v15 = v16;
        *uint64_t v13 = 0;
        if (v16) {
          MEMORY[0x21667D390](v15, 0x1000C8077774924);
        }
      }
      while (v13 != v12);
LABEL_42:
      uint64_t v14 = v29;
      goto LABEL_43;
    }
  }
  else
  {
    v24[0] = (void **)"requires attribute 'predicate'";
    __int16 v25 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v24, (uint64_t)v26);
    uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v33)
    {
      uint64_t v17 = __p;
      if (__p)
      {
        long long v18 = v32;
        long long v19 = __p;
        if (v32 != __p)
        {
          do
            long long v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          long long v19 = __p;
        }
        unint64_t v32 = v17;
        operator delete(v19);
      }
      unsigned int v12 = v29;
      if (!v29) {
        goto LABEL_44;
      }
      uint64_t v20 = v30;
      uint64_t v14 = v29;
      if (v30 == v29) {
        goto LABEL_43;
      }
      do
      {
        uint64_t v22 = *--v20;
        uint64_t v21 = v22;
        *uint64_t v20 = 0;
        if (v22) {
          MEMORY[0x21667D390](v21, 0x1000C8077774924);
        }
      }
      while (v20 != v12);
      goto LABEL_42;
    }
  }
  return v8;
}

BOOL mlir::arith::CmpFOp::parse(uint64_t a1, void *a2)
{
  _OWORD v81[4] = *MEMORY[0x263EF8340];
  memset(v81, 0, 24);
  v59[0] = (uint64_t)v81;
  v59[1] = 1;
  memset(v80, 0, 24);
  v58[0] = &v79;
  v58[1] = 1;
  uint64_t AttrData = 0;
  int64_t v57 = 0;
  __int16 v75 = v77;
  uint64_t v76 = 0x400000000;
  uint64_t v78 = 4;
  uint64_t v79 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  long long v71 = xmmword_26418C9B8;
  long long v72 = *(_OWORD *)&off_26418C9C8;
  long long v73 = xmmword_26418C9D8;
  long long v74 = *(_OWORD *)&off_26418C9E8;
  *(_OWORD *)BOOL v67 = xmmword_26418C978;
  long long v68 = *(_OWORD *)&off_26418C988;
  *(_OWORD *)std::string __p = xmmword_26418C998;
  long long v70 = *(_OWORD *)&off_26418C9A8;
  v66[2] = xmmword_26418C938;
  v66[3] = *(_OWORD *)&off_26418C948;
  v66[4] = xmmword_26418C958;
  v66[5] = *(_OWORD *)&off_26418C968;
  long long __src = xmmword_26418C8F8;
  *(_OWORD *)BOOL v65 = *(_OWORD *)&off_26418C908;
  v66[0] = xmmword_26418C918;
  v66[1] = *(_OWORD *)&off_26418C928;
  if ((*(unsigned __int8 (**)(uint64_t, void ***, long long *, uint64_t))(*(void *)a1 + 392))(a1, &AttrData, &__src, 16))
  {
    uint64_t v5 = (uint64_t)v57;
    if (!v57) {
      goto LABEL_3;
    }
    goto LABEL_50;
  }
  v54[0] = 0;
  long long v18 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Noneuint64_t Type = mlir::Builder::getNoneType(v18, v19);
  unsigned __int16 v21 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, v54, NoneType);
  if (v21 >= 0x100u && (_BYTE)v21)
  {
    mlir::NamedAttrList::append((uint64_t)&v75, (uint64_t)"predicate", 9, v54[0]);
  }
  else
  {
    if (v21 < 0x100u)
    {
      uint64_t v60 = (void **)"expected string or keyword containing one of the following enum values for attribute 'predicate' [f"
                     "alse, oeq, ogt, oge, olt, ole, one, ord, ueq, ugt, uge, ult, ule, une, uno, true]";
      __int16 v63 = 259;
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void ***))(*(void *)a1 + 24))(&__src, a1, v4, &v60);
      uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
      if ((void)__src) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
      }
      if (!BYTE8(v70))
      {
LABEL_76:
        uint64_t v46 = v75;
        if (v75 == v77) {
          return v17;
        }
LABEL_77:
        free(v46);
        return v17;
      }
      uint64_t v22 = __p[0];
      if (__p[0])
      {
        long long v23 = __p[1];
        uint64_t v24 = __p[0];
        if (__p[1] != __p[0])
        {
          do
            long long v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          uint64_t v24 = __p[0];
        }
        __p[1] = v22;
        operator delete(v24);
      }
      __int16 v25 = v67[1];
      if (!v67[1])
      {
LABEL_74:
        if (v65[1] != (char *)v66 + 8) {
          free(v65[1]);
        }
        goto LABEL_76;
      }
      uint64_t v26 = (void *)v68;
      unint64_t v27 = v67[1];
      if ((void *)v68 == v67[1])
      {
LABEL_73:
        *(void *)&long long v68 = v25;
        operator delete(v27);
        goto LABEL_74;
      }
      do
      {
        uint64_t v29 = *--v26;
        uint64_t v28 = v29;
        *uint64_t v26 = 0;
        if (v29) {
          MEMORY[0x21667D390](v28, 0x1000C8077774924);
        }
      }
      while (v26 != v25);
LABEL_72:
      unint64_t v27 = v67[1];
      goto LABEL_73;
    }
    if (!(_BYTE)v21)
    {
      uint64_t v17 = 0;
      uint64_t v46 = v75;
      if (v75 == v77) {
        return v17;
      }
      goto LABEL_77;
    }
  }
  uint64_t AttrData = (void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v54);
  int64_t v57 = (const char *)v5;
  if (v5)
  {
LABEL_50:
    uint64_t v30 = mlir::arith::symbolizeCmpFPredicate((uint64_t)AttrData, v5);
    if (v31)
    {
      unint64_t v32 = v30;
      char v33 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t v34 = mlir::IntegerType::get(*v33, 0x40u, 0);
      uint64_t v35 = mlir::IntegerAttr::get(v34, v32);
      *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpFOpGenericAdaptorBase::Properties>((uint64_t)a2) = v35;
      uint64_t v6 = v75;
      if (v75 == v77) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    v54[0] = (uint64_t)"invalid ";
    __int16 v55 = 259;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(&__src, a1, v4, v54);
    if ((void)__src)
    {
      LODWORD(v60) = 3;
      unsigned int v61 = "predicate attribute specification: \"";
      uint64_t v62 = 36;
      int64_t v36 = &v60;
      int64_t v37 = (char *)v65[1];
      if (LODWORD(v66[0]) >= DWORD1(v66[0]))
      {
        unint64_t v52 = LODWORD(v66[0]) + 1;
        if (v65[1] <= &v60 && (char *)v65[1] + 24 * LODWORD(v66[0]) > (char *)&v60)
        {
          int64_t v53 = (char *)&v60 - (char *)v65[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65[1], (char *)v66 + 8, v52, 24);
          int64_t v37 = (char *)v65[1];
          int64_t v36 = (void ***)((char *)v65[1] + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65[1], (char *)v66 + 8, v52, 24);
          int64_t v36 = &v60;
          int64_t v37 = (char *)v65[1];
        }
      }
      unsigned int v38 = &v37[24 * LODWORD(v66[0])];
      long long v39 = *(_OWORD *)v36;
      *((void *)v38 + 2) = v36[2];
      *(_OWORD *)unsigned int v38 = v39;
      ++LODWORD(v66[0]);
      if ((void)__src)
      {
        __int16 v63 = 261;
        uint64_t v60 = AttrData;
        unsigned int v61 = v57;
        mlir::Diagnostic::operator<<((uint64_t)&__src + 8, &v60);
        if ((void)__src) {
          mlir::Diagnostic::operator<<((uint64_t)&__src + 8, 34);
        }
      }
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if ((void)__src) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    }
    if (!BYTE8(v70)) {
      goto LABEL_76;
    }
    long long v40 = __p[0];
    if (__p[0])
    {
      unint64_t v41 = __p[1];
      uint64_t v42 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p[0];
      }
      __p[1] = v40;
      operator delete(v42);
    }
    __int16 v25 = v67[1];
    if (!v67[1]) {
      goto LABEL_74;
    }
    __int16 v43 = (void *)v68;
    unint64_t v27 = v67[1];
    if ((void *)v68 == v67[1]) {
      goto LABEL_73;
    }
    do
    {
      uint64_t v45 = *--v43;
      uint64_t v44 = v45;
      *__int16 v43 = 0;
      if (v45) {
        MEMORY[0x21667D390](v44, 0x1000C8077774924);
      }
    }
    while (v43 != v25);
    goto LABEL_72;
  }
LABEL_3:
  uint64_t v6 = v75;
  if (v75 != v77) {
LABEL_4:
  }
    free(v6);
LABEL_5:
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v81, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v80, 1)) {
    return 0;
  }
  __int16 v75 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    return 0;
  }
  uint64_t v8 = a2[1];
  *(void *)&long long __src = a1;
  *((void *)&__src + 1) = &v75;
  v65[0] = a2;
  if (!mlir::arith::CmpFOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    return 0;
  *(void *)&long long __src = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a1 + 504))(a1, &__src)) {
    return 0;
  }
  uint64_t v9 = (_WORD *)__src;
  uint64_t v79 = (void *)__src;
  uint64_t v60 = (void **)__src;
  uint64_t v10 = *(void **)(*(void *)__src + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id) {
    goto LABEL_82;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    v54[0] = __src;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)v54);
    if (v47 >= 1)
    {
      uint64_t v48 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
      *(void *)&long long __src = v9;
      *((void *)&__src + 1) = v48;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
      if (mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(OperandRange)) {
        goto LABEL_82;
      }
    }
  }
  int v11 = *(void **)(*(void *)v9 + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    uint64_t v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(void *)v9 + 8);
    __int16 v75 = v9;
    uint64_t v76 = v12;
    uint64_t v13 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75);
    if (mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(v13))
    {
LABEL_82:
      *(void *)&long long __src = getI1SameShape(v79);
      mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
      uint64_t v50 = (uint64_t)(a2 + 2);
      if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v59, v58, v7, v50))return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v80, *(void *)v58[0], v50) != 0; {
      return 0;
      }
    }
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v77[8] = 257;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, _WORD **))(*(void *)a1 + 24))(&__src, a1, v14, &v75);
  uint64_t v15 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'lhs' must be floating-point-like, but got ");
  uint64_t v16 = mlir::InFlightDiagnostic::append<mlir::Type &>(v15, (uint64_t *)&v60);
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v16);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
  return v17;
}

uint64_t mlir::arith::symbolizeCmpFPredicate(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 25967 && *(unsigned char *)(a1 + 2) == 113)
      {
        return 1;
      }
      else if (*(_WORD *)a1 == 26479 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 2;
      }
      else if (*(_WORD *)a1 == 26479 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 3;
      }
      else if (*(_WORD *)a1 == 27759 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 4;
      }
      else if (*(_WORD *)a1 == 27759 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 5;
      }
      else if (*(_WORD *)a1 == 28271 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 6;
      }
      else if (*(_WORD *)a1 == 29295 && *(unsigned char *)(a1 + 2) == 100)
      {
        return 7;
      }
      else if (*(_WORD *)a1 == 25973 && *(unsigned char *)(a1 + 2) == 113)
      {
        return 8;
      }
      else if (*(_WORD *)a1 == 26485 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 9;
      }
      else if (*(_WORD *)a1 == 26485 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 10;
      }
      else if (*(_WORD *)a1 == 27765 && *(unsigned char *)(a1 + 2) == 116)
      {
        return 11;
      }
      else if (*(_WORD *)a1 == 27765 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 12;
      }
      else if (*(_WORD *)a1 == 28277 && *(unsigned char *)(a1 + 2) == 101)
      {
        return 13;
      }
      else
      {
        if (*(_WORD *)a1 != 28277 || *(unsigned char *)(a1 + 2) != 111) {
          return 0;
        }
        return 14;
      }
    case 4:
      if (*(_DWORD *)a1 == 1702195828) {
        return 15;
      }
      else {
        return 0;
      }
    case 5:
      if (*(_DWORD *)a1 != 1936482662 || *(unsigned char *)(a1 + 4) != 101) {
        return 0;
      }
      return 0;
    default:
      return 0;
  }
}

BOOL mlir::arith::CmpFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_1::operator()(uint64_t a1)
{
  unint64_t v1 = *(void **)(*(void *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  BOOL result = 1;
  if (v1 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v1 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  }
  return result;
}

uint64_t mlir::InFlightDiagnostic::operator<<<char const(&)[44]>(uint64_t a1, char *__s)
{
  if (*(void *)a1)
  {
    size_t v4 = strlen(__s);
    uint64_t v5 = a1 + 24;
    unint64_t v6 = *(void *)(a1 + 24);
    int v15 = 3;
    uint64_t v16 = __s;
    size_t v17 = v4;
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    uint64_t v8 = &v15;
    if (v7 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v12 = v7 + 1;
      BOOL v13 = v6 + 24 * v7 > (unint64_t)&v15;
      if (v6 <= (unint64_t)&v15 && v13)
      {
        uint64_t v14 = (char *)&v15 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = (int *)&v14[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 40), v12, 24);
        unint64_t v6 = *(void *)(a1 + 24);
        uint64_t v8 = &v15;
      }
    }
    uint64_t v9 = v6 + 24 * *(unsigned int *)(a1 + 32);
    long long v10 = *(_OWORD *)v8;
    *(void *)(v9 + 16) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void mlir::arith::CmpFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  size_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  uint64_t v30 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  char v6 = 0;
  uint64_t v7 = "false";
  size_t v8 = 5;
  switch(mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30))
  {
    case 0:
      break;
    case 1:
      char v6 = 0;
      uint64_t v7 = "oeq";
      size_t v8 = 3;
      break;
    case 2:
      char v6 = 0;
      uint64_t v7 = "ogt";
      size_t v8 = 3;
      break;
    case 3:
      char v6 = 0;
      uint64_t v7 = "oge";
      size_t v8 = 3;
      break;
    case 4:
      char v6 = 0;
      uint64_t v7 = "olt";
      size_t v8 = 3;
      break;
    case 5:
      char v6 = 0;
      uint64_t v7 = "ole";
      size_t v8 = 3;
      break;
    case 6:
      char v6 = 0;
      uint64_t v7 = "one";
      size_t v8 = 3;
      break;
    case 7:
      char v6 = 0;
      uint64_t v7 = "ord";
      size_t v8 = 3;
      break;
    case 8:
      char v6 = 0;
      uint64_t v7 = "ueq";
      size_t v8 = 3;
      break;
    case 9:
      char v6 = 0;
      uint64_t v7 = "ugt";
      size_t v8 = 3;
      break;
    case 10:
      char v6 = 0;
      uint64_t v7 = "uge";
      size_t v8 = 3;
      break;
    case 11:
      char v6 = 0;
      uint64_t v7 = "ult";
      size_t v8 = 3;
      break;
    case 12:
      char v6 = 0;
      uint64_t v7 = "ule";
      size_t v8 = 3;
      break;
    case 13:
      char v6 = 0;
      uint64_t v7 = "une";
      size_t v8 = 3;
      break;
    case 14:
      char v6 = 0;
      uint64_t v7 = "uno";
      size_t v8 = 3;
      break;
    case 15:
      char v6 = 0;
      uint64_t v7 = "true";
      size_t v8 = 4;
      break;
    default:
      size_t v8 = 0;
      uint64_t v7 = &byte_211F4AA5D;
      char v6 = 1;
      break;
  }
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v10 = (void *)*((void *)v9 + 4);
  if (v8 <= *((void *)v9 + 3) - (void)v10)
  {
    if ((v6 & 1) == 0)
    {
      memcpy(v10, v7, v8);
      *((void *)v9 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, v7, v8);
  }
  int v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v12 = (unsigned char *)*((void *)v11 + 4);
  if (*((unsigned char **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ",", 1uLL);
  }
  else
  {
    *unint64_t v12 = 44;
    ++*((void *)v11 + 4);
  }
  BOOL v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *uint64_t v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  int v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ",", 1uLL);
  }
  else
  {
    *uint64_t v16 = 44;
    ++*((void *)v15 + 4);
  }
  size_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v30 = v32;
  v32[0] = "predicate";
  v32[1] = 9;
  uint64_t v31 = 0x200000001;
  long long v19 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v19);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v19 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v22, v30, v31);
  long long v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
  if ((unint64_t)v24 >= *((void *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((void *)v23 + 4) = v24 + 1;
    *uint64_t v24 = 32;
  }
  __int16 v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
  if (*((unsigned char **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    *uint64_t v26 = 58;
    ++*((void *)v25 + 4);
  }
  unint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (unsigned char *)*((void *)v27 + 4);
  if ((unint64_t)v28 >= *((void *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((void *)v27 + 4) = v28 + 1;
    unsigned char *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::arith::detail::CmpIOpGenericAdaptorBase::CmpIOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.cmpi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::CmpIOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected DictionaryAttr to set properties";
      uint64_t v58 = 41;
      uint64_t v11 = &v56;
      unint64_t v12 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v51 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unint64_t v12 = (char *)v60;
          uint64_t v11 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          uint64_t v11 = &v56;
          unint64_t v12 = (char *)v60;
        }
      }
      BOOL v13 = &v12[24 * v61];
      long long v14 = *(_OWORD *)v11;
      *((void *)v13 + 2) = *((void *)v11 + 2);
      *(_OWORD *)BOOL v13 = v14;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    int v15 = __p;
    if (__p)
    {
      uint64_t v16 = v67;
      size_t v17 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        size_t v17 = __p;
      }
      BOOL v67 = v15;
      operator delete(v17);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    long long v19 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v22 = *--v19;
      uint64_t v21 = v22;
      *long long v19 = 0;
      if (v22) {
        MEMORY[0x21667D390](v21, 0x1000C8077774924);
      }
    }
    while (v19 != v18);
    goto LABEL_58;
  }
  uint64_t v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "predicate", 9uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      int v56 = 3;
      int64_t v57 = "expected key entry for predicate in DictionaryAttr to set Properties.";
      uint64_t v58 = 69;
      long long v23 = &v56;
      uint64_t v24 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v48 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v52 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          uint64_t v24 = (char *)v60;
          long long v23 = (int *)((char *)v60 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
          long long v23 = &v56;
          uint64_t v24 = (char *)v60;
        }
      }
      __int16 v25 = &v24[24 * v61];
      long long v26 = *(_OWORD *)v23;
      *((void *)v25 + 2) = *((void *)v23 + 2);
      *(_OWORD *)__int16 v25 = v26;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
    if (!v68) {
      return 0;
    }
    unint64_t v27 = __p;
    if (__p)
    {
      uint64_t v28 = v67;
      uint64_t v29 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        uint64_t v29 = __p;
      }
      BOOL v67 = v27;
      operator delete(v29);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v30 = v65;
    uint64_t v20 = v64;
    if (v65 == v64) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v32 = *--v30;
      uint64_t v31 = v32;
      *uint64_t v30 = 0;
      if (v32) {
        MEMORY[0x21667D390](v31, 0x1000C8077774924);
      }
    }
    while (v30 != v18);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::arith::CmpIPredicateAttr::classof(v8))
  {
    *a1 = v9;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    int v56 = 3;
    uint64_t v58 = 54;
    char v33 = &v56;
    uint64_t v34 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v49 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        int64_t v53 = (char *)&v56 - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        uint64_t v34 = (char *)v60;
        char v33 = (int *)((char *)v60 + v53);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
        char v33 = &v56;
        uint64_t v34 = (char *)v60;
      }
    }
    uint64_t v35 = &v34[24 * v61];
    long long v36 = *(_OWORD *)v33;
    *((void *)v35 + 2) = *((void *)v33 + 2);
    *(_OWORD *)uint64_t v35 = v36;
    ++v61;
    if (v59[0])
    {
      int64_t v37 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      unsigned int v38 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          int64_t v54 = (char *)&v56 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          unsigned int v38 = (char *)v60;
          int64_t v37 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          int64_t v37 = &v56;
          unsigned int v38 = (char *)v60;
        }
      }
      long long v39 = &v38[24 * v61];
      long long v40 = *(_OWORD *)v37;
      *((void *)v39 + 2) = *((void *)v37 + 2);
      *(_OWORD *)long long v39 = v40;
      ++v61;
      if (v59[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
      }
    }
  }
  if (v68)
  {
    unint64_t v41 = __p;
    if (__p)
    {
      uint64_t v42 = v67;
      __int16 v43 = __p;
      if (v67 != __p)
      {
        do
          uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        __int16 v43 = __p;
      }
      BOOL v67 = v41;
      operator delete(v43);
    }
    long long v18 = v64;
    if (!v64) {
      goto LABEL_60;
    }
    uint64_t v44 = v65;
    uint64_t v20 = v64;
    if (v65 == v64)
    {
LABEL_59:
      BOOL v65 = v18;
      operator delete(v20);
LABEL_60:
      if (v60 != v63) {
        free(v60);
      }
      return 0;
    }
    do
    {
      uint64_t v46 = *--v44;
      uint64_t v45 = v46;
      *uint64_t v44 = 0;
      if (v46) {
        MEMORY[0x21667D390](v45, 0x1000C8077774924);
      }
    }
    while (v44 != v18);
LABEL_58:
    uint64_t v20 = v64;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::CmpIOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 9 && *(void *)a2 == 0x7461636964657270 && *(unsigned char *)(a2 + 8) == 101)
  {
    uint64_t v6 = (void *)result;
    if (a4)
    {
      BOOL result = mlir::arith::CmpIPredicateAttr::classof(a4);
      if (result) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    *uint64_t v6 = v7;
  }
  return result;
}

BOOL mlir::arith::CmpIOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(v6, (void **)"predicate", (const char *)9, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(uint64_t a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1 || (mlir::arith::CmpIPredicateAttr::classof(a1) & 1) != 0) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    uint64_t v11 = &v31;
    unint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        unint64_t v12 = (char *)v37;
        uint64_t v11 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v11 = &v31;
        unint64_t v12 = (char *)v37;
      }
    }
    BOOL v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)BOOL v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9";
        uint64_t v33 = 99;
        int v15 = &v31;
        uint64_t v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v16 = (char *)v37;
            int v15 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            int v15 = &v31;
            uint64_t v16 = (char *)v37;
          }
        }
        size_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)size_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    long long v19 = __p;
    if (__p)
    {
      uint64_t v20 = v44;
      uint64_t v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      long long v23 = v42;
      uint64_t v24 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        uint64_t v24 = v41;
      }
      uint64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::arith::CmpIOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpIPredicateAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::arith::CmpIPredicateAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::arith::CmpIPredicateAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    uint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v9 = (char *)v46;
        uint64_t v8 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        uint64_t v9 = (char *)v46;
      }
    }
    long long v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)long long v10 = v11;
    ++v47;
  }
  long long v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::arith::CmpIPredicateAttr]";
  unint64_t v41 = 80;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    long long v40 = (void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      size_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          size_t v17 = (char *)v46;
          uint64_t v16 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          size_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            uint64_t v20 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    uint64_t v24 = __p;
    if (__p)
    {
      uint64_t v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      int64_t v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      int64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

void mlir::arith::CmpIOp::build(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v18 = a5;
  uint64_t v19 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v19, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  uint64_t v8 = mlir::IntegerType::get(*a1, 0x40u, 0);
  uint64_t v9 = mlir::IntegerAttr::get(v8, a3);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>(a2) = v9;
  long long __src = v24;
  uint64_t v23 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v21, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v20, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v25 = v21;
  if (v23 != 1)
  {
    if (!v23)
    {
      if (HIDWORD(v23))
      {
        unsigned int v11 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v11, 8 - 8 * v11);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v24, 1uLL, 8);
      unsigned int v11 = v23;
      if (v23 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v23) = 1;
  }
  uint64_t v12 = mlir::ValueRange::dereference_iterator(&v25, 0);
  I1Sameuint64_t Shape = getI1SameShape((void *)(*(void *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  *(void *)long long __src = I1SameShape;
  uint64_t v14 = __src;
  uint64_t v15 = v23;
  uint64_t v16 = *(unsigned int *)(a2 + 72);
  unint64_t v17 = v16 + v23;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if (v15)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v24) {
    free(__src);
  }
}

void mlir::arith::CmpIOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8)
{
  mlir::OperationState::addOperands(a2, a5, a6);
  *(void *)(a2 + 192) = 0;
  uint64_t v13 = *(unsigned int *)(a2 + 120);
  if (a8 + v13 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, (void *)(a2 + 128), a8 + v13, 16);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  if (a8)
  {
    memcpy((void *)(*(void *)(a2 + 112) + 16 * v13), a7, 16 * a8);
    LODWORD(v13) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v13 + a8;
  uint64_t v14 = *(unsigned int *)(a2 + 72);
  if (a4 + v14 > (unint64_t)*(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), a4 + v14, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  if (a4)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a2 + 64) + 8 * v14;
    do
    {
      *(void *)(v16 + 8 * v15) = mlir::TypeRange::dereference_iterator(a3, v15);
      ++v15;
    }
    while (a4 != v15);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v14 + a4;
}

uint64_t mlir::arith::CmpIOp::verifyInvariantsImpl(mlir::arith::CmpIOp *this)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v73[0] = v2;
    if (mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(v3, (void **)"predicate", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v73)&& mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0)&& mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 1u))
    {
      uint64_t v4 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      uint64_t v6 = *(void *)this;
      unint64_t v69 = *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (mlir::Type::isSignlessInteger((mlir::Type *)&v69, 1)) {
        goto LABEL_57;
      }
      uint64_t v7 = (void **)v69;
      uint64_t v8 = *(void *)v69;
      uint64_t v9 = *(void **)(*(void *)v69 + 136);
      if (v9 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      {
        uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v8 + 8);
        v73[0] = v7;
        v73[1] = v10;
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v73);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)) {
          goto LABEL_57;
        }
        uint64_t v7 = (void **)v69;
        uint64_t v8 = *(void *)v69;
        uint64_t v9 = *(void **)(*(void *)v69 + 136);
      }
      if (v9 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v9 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        unint64_t v66 = v7;
        uint64_t v67 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v8 + 8);
        uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)) {
          goto LABEL_57;
        }
      }
      __int16 v68 = 261;
      unint64_t v66 = (void **)"result";
      uint64_t v67 = 6;
      mlir::Operation::emitOpError(v6, &v66, (uint64_t)v73);
      if (v73[0])
      {
        LODWORD(OperandRange) = 3;
        long long v71 = " #";
        uint64_t v72 = 2;
        p_uint64_t OperandRange = &OperandRange;
        uint64_t v12 = (char *)v74;
        if (v75 >= v76)
        {
          unint64_t v56 = v75 + 1;
          if (v74 <= &OperandRange && (char *)v74 + 24 * v75 > (char *)&OperandRange)
          {
            int64_t v62 = (char *)&OperandRange - (unsigned char *)v74;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v56, 24);
            uint64_t v12 = (char *)v74;
            p_uint64_t OperandRange = (uint64_t *)((char *)v74 + v62);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v56, 24);
            p_uint64_t OperandRange = &OperandRange;
            uint64_t v12 = (char *)v74;
          }
        }
        uint64_t v13 = &v12[24 * v75];
        long long v14 = *(_OWORD *)p_OperandRange;
        *((void *)v13 + 2) = p_OperandRange[2];
        *(_OWORD *)uint64_t v13 = v14;
        uint64_t v15 = ++v75;
        if (v73[0])
        {
          LODWORD(OperandRange) = 5;
          long long v71 = 0;
          uint64_t v16 = &OperandRange;
          unint64_t v17 = (char *)v74;
          if (v15 >= v76)
          {
            unint64_t v57 = v15 + 1;
            BOOL v58 = (char *)v74 + 24 * v15 > (char *)&OperandRange;
            if (v74 <= &OperandRange && v58)
            {
              int64_t v63 = (char *)&OperandRange - (unsigned char *)v74;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v57, 24);
              unint64_t v17 = (char *)v74;
              uint64_t v16 = (uint64_t *)((char *)v74 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v57, 24);
              uint64_t v16 = &OperandRange;
              unint64_t v17 = (char *)v74;
            }
          }
          uint64_t v18 = &v17[24 * v75];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = v16[2];
          *(_OWORD *)uint64_t v18 = v19;
          uint64_t v20 = ++v75;
          if (v73[0])
          {
            LODWORD(OperandRange) = 3;
            long long v71 = " must be BOOL-like, but got ";
            uint64_t v72 = 28;
            long long v21 = &OperandRange;
            uint64_t v22 = (char *)v74;
            if (v20 >= v76)
            {
              unint64_t v59 = v20 + 1;
              BOOL v60 = (char *)v74 + 24 * v20 > (char *)&OperandRange;
              if (v74 <= &OperandRange && v60)
              {
                int64_t v64 = (char *)&OperandRange - (unsigned char *)v74;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v59, 24);
                uint64_t v22 = (char *)v74;
                long long v21 = (uint64_t *)((char *)v74 + v64);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v59, 24);
                long long v21 = &OperandRange;
                uint64_t v22 = (char *)v74;
              }
            }
            uint64_t v23 = &v22[24 * v75];
            long long v24 = *(_OWORD *)v21;
            *((void *)v23 + 2) = v21[2];
            *(_OWORD *)uint64_t v23 = v24;
            ++v75;
            if (v73[0])
            {
              long long v25 = &OperandRange;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, v69);
              uint64_t v26 = (char *)v74;
              if (v75 >= v76)
              {
                unint64_t v61 = v75 + 1;
                if (v74 <= &OperandRange && (char *)v74 + 24 * v75 > (char *)&OperandRange)
                {
                  int64_t v65 = (char *)&OperandRange - (unsigned char *)v74;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v61, 24);
                  uint64_t v26 = (char *)v74;
                  long long v25 = (uint64_t *)((char *)v74 + v65);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v77, v61, 24);
                  long long v25 = &OperandRange;
                  uint64_t v26 = (char *)v74;
                }
              }
              unint64_t v27 = &v26[24 * v75];
              long long v28 = *(_OWORD *)v25;
              *((void *)v27 + 2) = v25[2];
              *(_OWORD *)unint64_t v27 = v28;
              ++v75;
            }
          }
        }
      }
      char v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
      if (v73[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
      }
      if (v82)
      {
        uint64_t v30 = __p;
        if (__p)
        {
          uint64_t v31 = v81;
          unint64_t v32 = __p;
          if (v81 != __p)
          {
            do
              uint64_t v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            unint64_t v32 = __p;
          }
          unsigned int v81 = v30;
          operator delete(v32);
        }
        unint64_t v33 = v78;
        if (v78)
        {
          unint64_t v34 = v79;
          int64_t v35 = v78;
          if (v79 != v78)
          {
            do
            {
              uint64_t v46 = *--v34;
              uint64_t v45 = v46;
              void *v34 = 0;
              if (v46) {
                MEMORY[0x21667D390](v45, 0x1000C8077774924);
              }
            }
            while (v34 != v33);
            int64_t v35 = v78;
          }
          uint64_t v79 = v33;
          operator delete(v35);
        }
        if (v74 != v77) {
          free(v74);
        }
      }
      if (v29)
      {
LABEL_57:
        I1Sameuint64_t Shape = getI1SameShape((void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
        if (*(_DWORD *)(*(void *)this + 36)) {
          uint64_t v48 = *(void *)this - 16;
        }
        else {
          uint64_t v48 = 0;
        }
        if (I1SameShape == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v48, 0) + 8) & 0xFFFFFFFFFFFFFFF8)) {
          return 1;
        }
        unint64_t v66 = (void **)"failed to verify that result type has i1 element type and same shape as operands";
        __int16 v68 = 259;
        mlir::OpState::emitOpError((uint64_t *)this, &v66, (uint64_t)v73);
        uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
        if (v73[0]) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
        }
        if (v82)
        {
          unint64_t v49 = __p;
          if (__p)
          {
            unint64_t v50 = v81;
            int64_t v51 = __p;
            if (v81 != __p)
            {
              do
                unint64_t v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
              while (v50 != v49);
              int64_t v51 = __p;
            }
            unsigned int v81 = v49;
            operator delete(v51);
          }
          long long v40 = v78;
          if (!v78) {
            goto LABEL_78;
          }
          int64_t v52 = v79;
          uint64_t v42 = v78;
          if (v79 == v78)
          {
LABEL_77:
            uint64_t v79 = v40;
            operator delete(v42);
LABEL_78:
            if (v74 != v77) {
              free(v74);
            }
            return v36;
          }
          do
          {
            uint64_t v54 = *--v52;
            uint64_t v53 = v54;
            void *v52 = 0;
            if (v54) {
              MEMORY[0x21667D390](v53, 0x1000C8077774924);
            }
          }
          while (v52 != v40);
LABEL_76:
          uint64_t v42 = v78;
          goto LABEL_77;
        }
        return v36;
      }
    }
    return 0;
  }
  unint64_t v66 = (void **)"requires attribute 'predicate'";
  __int16 v68 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v66, (uint64_t)v73);
  uint64_t v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v73);
  if (v73[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v73);
  }
  if (v82)
  {
    int64_t v37 = __p;
    if (__p)
    {
      unsigned int v38 = v81;
      uint64_t v39 = __p;
      if (v81 != __p)
      {
        do
          unsigned int v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
        while (v38 != v37);
        uint64_t v39 = __p;
      }
      unsigned int v81 = v37;
      operator delete(v39);
    }
    long long v40 = v78;
    if (!v78) {
      goto LABEL_78;
    }
    unint64_t v41 = v79;
    uint64_t v42 = v78;
    if (v79 == v78) {
      goto LABEL_77;
    }
    do
    {
      uint64_t v44 = *--v41;
      uint64_t v43 = v44;
      *unint64_t v41 = 0;
      if (v44) {
        MEMORY[0x21667D390](v43, 0x1000C8077774924);
      }
    }
    while (v41 != v40);
    goto LABEL_76;
  }
  return v36;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps4(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v55 = (void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v55)) {
    return 1;
  }
  unsigned int v11 = v55;
  uint64_t v12 = *v55;
  uint64_t v13 = (void *)*((void *)*v55 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    v59[0] = v11;
    v59[1] = v14;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
    unsigned int v11 = v55;
    uint64_t v12 = *v55;
    uint64_t v13 = (void *)*((void *)*v55 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    int64_t v52 = v11;
    uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
  }
  __int16 v54 = 261;
  int64_t v52 = a3;
  uint64_t v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v59);
  if (v59[0])
  {
    LODWORD(OperandRange) = 3;
    unint64_t v57 = " #";
    uint64_t v58 = 2;
    p_uint64_t OperandRange = &OperandRange;
    unint64_t v17 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v42 = v61 + 1;
      if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
      {
        int64_t v48 = (char *)&OperandRange - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        unint64_t v17 = (char *)v60;
        p_uint64_t OperandRange = (uint64_t *)((char *)v60 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        p_uint64_t OperandRange = &OperandRange;
        unint64_t v17 = (char *)v60;
      }
    }
    uint64_t v18 = &v17[24 * v61];
    long long v19 = *(_OWORD *)p_OperandRange;
    *((void *)v18 + 2) = p_OperandRange[2];
    *(_OWORD *)uint64_t v18 = v19;
    uint64_t v20 = ++v61;
    if (v59[0])
    {
      LODWORD(OperandRange) = 5;
      unint64_t v57 = (const char *)a5;
      long long v21 = &OperandRange;
      uint64_t v22 = (char *)v60;
      if (v20 >= v62)
      {
        unint64_t v43 = v20 + 1;
        BOOL v44 = (char *)v60 + 24 * v20 > (char *)&OperandRange;
        if (v60 <= &OperandRange && v44)
        {
          int64_t v49 = (char *)&OperandRange - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          uint64_t v22 = (char *)v60;
          long long v21 = (uint64_t *)((char *)v60 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          long long v21 = &OperandRange;
          uint64_t v22 = (char *)v60;
        }
      }
      uint64_t v23 = &v22[24 * v61];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = v21[2];
      *(_OWORD *)uint64_t v23 = v24;
      uint64_t v25 = ++v61;
      if (v59[0])
      {
        LODWORD(OperandRange) = 3;
        unint64_t v57 = " must be signless-integer-like, but got ";
        uint64_t v58 = 40;
        uint64_t v26 = &OperandRange;
        unint64_t v27 = (char *)v60;
        if (v25 >= v62)
        {
          unint64_t v45 = v25 + 1;
          BOOL v46 = (char *)v60 + 24 * v25 > (char *)&OperandRange;
          if (v60 <= &OperandRange && v46)
          {
            int64_t v50 = (char *)&OperandRange - (unsigned char *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            unint64_t v27 = (char *)v60;
            uint64_t v26 = (uint64_t *)((char *)v60 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            uint64_t v26 = &OperandRange;
            unint64_t v27 = (char *)v60;
          }
        }
        long long v28 = &v27[24 * v61];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = v26[2];
        *(_OWORD *)long long v28 = v29;
        ++v61;
        if (v59[0])
        {
          uint64_t v30 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v55);
          uint64_t v31 = (char *)v60;
          if (v61 >= v62)
          {
            unint64_t v47 = v61 + 1;
            if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
            {
              int64_t v51 = (char *)&OperandRange - (unsigned char *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              uint64_t v31 = (char *)v60;
              uint64_t v30 = (uint64_t *)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              uint64_t v30 = &OperandRange;
              uint64_t v31 = (char *)v60;
            }
          }
          unint64_t v32 = &v31[24 * v61];
          long long v33 = *(_OWORD *)v30;
          *((void *)v32 + 2) = v30[2];
          *(_OWORD *)unint64_t v32 = v33;
          ++v61;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  }
  if (v68)
  {
    unint64_t v34 = __p;
    if (__p)
    {
      int64_t v35 = v67;
      uint64_t v36 = __p;
      if (v67 != __p)
      {
        do
          int64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        uint64_t v36 = __p;
      }
      uint64_t v67 = v34;
      operator delete(v36);
    }
    int64_t v37 = v64;
    if (v64)
    {
      unsigned int v38 = v65;
      uint64_t v39 = v64;
      if (v65 != v64)
      {
        do
        {
          uint64_t v41 = *--v38;
          uint64_t v40 = v41;
          *unsigned int v38 = 0;
          if (v41) {
            MEMORY[0x21667D390](v40, 0x1000C8077774924);
          }
        }
        while (v38 != v37);
        uint64_t v39 = v64;
      }
      int64_t v65 = v37;
      operator delete(v39);
    }
    if (v60 != v63) {
      free(v60);
    }
  }
  return v9;
}

BOOL mlir::arith::CmpIOp::parse(uint64_t a1, void *a2)
{
  _OWORD v75[4] = *MEMORY[0x263EF8340];
  memset(v75, 0, 24);
  v56[0] = (uint64_t)v75;
  v56[1] = 1;
  memset(v74, 0, 24);
  v55[0] = &v73;
  v55[1] = 1;
  uint64_t AttrData = 0;
  __int16 v54 = 0;
  uint64_t v69 = v71;
  uint64_t v70 = 0x400000000;
  uint64_t v72 = 4;
  uint64_t v73 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  _OWORD v63[4] = xmmword_26418CA58;
  v63[5] = *(_OWORD *)&off_26418CA68;
  *(_OWORD *)int64_t v64 = xmmword_26418CA78;
  long long v65 = *(_OWORD *)&off_26418CA88;
  v63[0] = xmmword_26418CA18;
  v63[1] = *(_OWORD *)&off_26418CA28;
  v63[2] = xmmword_26418CA38;
  v63[3] = *(_OWORD *)&off_26418CA48;
  long long __src = xmmword_26418C9F8;
  *(_OWORD *)unsigned int v62 = *(_OWORD *)&off_26418CA08;
  if ((*(unsigned __int8 (**)(uint64_t, unsigned __int16 **, long long *, uint64_t))(*(void *)a1 + 392))(a1, &AttrData, &__src, 10))
  {
    uint64_t v5 = (uint64_t)v54;
    if (!v54) {
      goto LABEL_3;
    }
    goto LABEL_37;
  }
  v51[0] = 0;
  unsigned int v11 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  Noneuint64_t Type = mlir::Builder::getNoneType(v11, v12);
  unsigned __int16 v14 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 440))(a1, v51, NoneType);
  if (v14 >= 0x100u && (_BYTE)v14)
  {
    mlir::NamedAttrList::append((uint64_t)&v69, (uint64_t)"predicate", 9, v51[0]);
  }
  else
  {
    if (v14 < 0x100u)
    {
      uint64_t OperandRange = (void **)"expected string or keyword containing one of the following enum values for attribute 'pred"
                              "icate' [eq, ne, slt, sle, sgt, sge, ult, ule, ugt, uge]";
      __int16 v60 = 259;
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void ***))(*(void *)a1 + 24))(&__src, a1, v4, &OperandRange);
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
      if ((void)__src) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
      }
      if (!v68)
      {
LABEL_63:
        uint64_t v39 = v69;
        if (v69 == v71) {
          return v10;
        }
LABEL_64:
        free(v39);
        return v10;
      }
      uint64_t v15 = __p;
      if (__p)
      {
        uint64_t v16 = v67;
        unint64_t v17 = __p;
        if (v67 != __p)
        {
          do
            uint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          unint64_t v17 = __p;
        }
        uint64_t v67 = v15;
        operator delete(v17);
      }
      uint64_t v18 = v64[1];
      if (!v64[1])
      {
LABEL_61:
        if (v62[1] != (char *)v63 + 8) {
          free(v62[1]);
        }
        goto LABEL_63;
      }
      long long v19 = (void *)v65;
      uint64_t v20 = v64[1];
      if ((void *)v65 == v64[1])
      {
LABEL_60:
        *(void *)&long long v65 = v18;
        operator delete(v20);
        goto LABEL_61;
      }
      do
      {
        uint64_t v22 = *--v19;
        uint64_t v21 = v22;
        *long long v19 = 0;
        if (v22) {
          MEMORY[0x21667D390](v21, 0x1000C8077774924);
        }
      }
      while (v19 != v18);
LABEL_59:
      uint64_t v20 = v64[1];
      goto LABEL_60;
    }
    if (!(_BYTE)v14)
    {
      uint64_t v10 = 0;
      uint64_t v39 = v69;
      if (v69 == v71) {
        return v10;
      }
      goto LABEL_64;
    }
  }
  uint64_t AttrData = (unsigned __int16 *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v51);
  __int16 v54 = (const char *)v5;
  if (v5)
  {
LABEL_37:
    uint64_t v23 = mlir::arith::symbolizeCmpIPredicate(AttrData, v5);
    if (v24)
    {
      unint64_t v25 = v23;
      uint64_t v26 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
      uint64_t v27 = mlir::IntegerType::get(*v26, 0x40u, 0);
      uint64_t v28 = mlir::IntegerAttr::get(v27, v25);
      *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::CmpIOpGenericAdaptorBase::Properties>((uint64_t)a2) = v28;
      uint64_t v6 = v69;
      if (v69 == v71) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    v51[0] = (uint64_t)"invalid ";
    __int16 v52 = 259;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 24))(&__src, a1, v4, v51);
    if ((void)__src)
    {
      LODWORD(OperandRange) = 3;
      uint64_t v58 = "predicate attribute specification: \"";
      uint64_t v59 = 36;
      long long v29 = &OperandRange;
      uint64_t v30 = (char *)v62[1];
      if (LODWORD(v63[0]) >= DWORD1(v63[0]))
      {
        unint64_t v49 = LODWORD(v63[0]) + 1;
        if (v62[1] <= &OperandRange && (char *)v62[1] + 24 * LODWORD(v63[0]) > (char *)&OperandRange)
        {
          int64_t v50 = (char *)&OperandRange - (char *)v62[1];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62[1], (char *)v63 + 8, v49, 24);
          uint64_t v30 = (char *)v62[1];
          long long v29 = (void ***)((char *)v62[1] + v50);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62[1], (char *)v63 + 8, v49, 24);
          long long v29 = &OperandRange;
          uint64_t v30 = (char *)v62[1];
        }
      }
      uint64_t v31 = &v30[24 * LODWORD(v63[0])];
      long long v32 = *(_OWORD *)v29;
      *((void *)v31 + 2) = v29[2];
      *(_OWORD *)uint64_t v31 = v32;
      ++LODWORD(v63[0]);
      if ((void)__src)
      {
        __int16 v60 = 261;
        uint64_t OperandRange = (void **)AttrData;
        uint64_t v58 = v54;
        mlir::Diagnostic::operator<<((uint64_t)&__src + 8, &OperandRange);
        if ((void)__src) {
          mlir::Diagnostic::operator<<((uint64_t)&__src + 8, 34);
        }
      }
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if ((void)__src) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    }
    if (!v68) {
      goto LABEL_63;
    }
    long long v33 = __p;
    if (__p)
    {
      unint64_t v34 = v67;
      int64_t v35 = __p;
      if (v67 != __p)
      {
        do
          unint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        int64_t v35 = __p;
      }
      uint64_t v67 = v33;
      operator delete(v35);
    }
    uint64_t v18 = v64[1];
    if (!v64[1]) {
      goto LABEL_61;
    }
    uint64_t v36 = (void *)v65;
    uint64_t v20 = v64[1];
    if ((void *)v65 == v64[1]) {
      goto LABEL_60;
    }
    do
    {
      uint64_t v38 = *--v36;
      uint64_t v37 = v38;
      *uint64_t v36 = 0;
      if (v38) {
        MEMORY[0x21667D390](v37, 0x1000C8077774924);
      }
    }
    while (v36 != v18);
    goto LABEL_59;
  }
LABEL_3:
  uint64_t v6 = v69;
  if (v69 != v71) {
LABEL_4:
  }
    free(v6);
LABEL_5:
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v75, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v74, 1)) {
    return 0;
  }
  uint64_t v69 = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 456))(a1, a2 + 14)) {
    return 0;
  }
  uint64_t v8 = a2[1];
  *(void *)&long long __src = a1;
  *((void *)&__src + 1) = &v69;
  v62[0] = a2;
  if (!mlir::arith::CmpIOp::verifyInherentAttrs(v8, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::CmpIOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&__src))return 0; {
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
  }
    return 0;
  *(void *)&long long __src = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, long long *))(*(void *)a1 + 504))(a1, &__src)) {
    return 0;
  }
  uint64_t v73 = __src;
  v51[0] = __src;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)v51)) {
    goto LABEL_14;
  }
  uint64_t v41 = v51[0];
  uint64_t v42 = *(void *)v51[0];
  unint64_t v43 = *(void **)(*(void *)v51[0] + 136);
  if (v43 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v44 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v42 + 8);
    *(void *)&long long __src = v41;
    *((void *)&__src + 1) = v44;
    uint64_t OperandRange = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&__src);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      goto LABEL_14;
    }
    uint64_t v41 = v51[0];
    uint64_t v42 = *(void *)v51[0];
    unint64_t v43 = *(void **)(*(void *)v51[0] + 136);
  }
  if (v43 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v43 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || (uint64_t v45 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v42 + 8),
        uint64_t v69 = (_WORD *)v41,
        uint64_t v70 = v45,
        uint64_t OperandRange = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v69),
        !mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)))
  {
    uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    v71[8] = 257;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, _WORD **))(*(void *)a1 + 24))(&__src, a1, v46, &v69);
    uint64_t v47 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&__src, "'lhs' must be signless-integer-like, but got ");
    uint64_t v48 = mlir::InFlightDiagnostic::append<mlir::Type &>(v47, v51);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v48);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__src);
    return v10;
  }
LABEL_14:
  *(void *)&long long __src = getI1SameShape(*(void **)v55[0]);
  mlir::OperationState::addTypes((uint64_t)a2, &__src, 1);
  uint64_t v9 = (uint64_t)(a2 + 2);
  if (!mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v56, v55, v7, v9))return 0; {
  return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v74, *(void *)v55[0], v9) != 0;
  }
}

uint64_t mlir::arith::symbolizeCmpIPredicate(unsigned __int16 *a1, uint64_t a2)
{
  if (a2 == 3)
  {
    if (*a1 == 27763 && *((unsigned char *)a1 + 2) == 116)
    {
      return 2;
    }
    else if (*a1 == 27763 && *((unsigned char *)a1 + 2) == 101)
    {
      return 3;
    }
    else if (*a1 == 26483 && *((unsigned char *)a1 + 2) == 116)
    {
      return 4;
    }
    else if (*a1 == 26483 && *((unsigned char *)a1 + 2) == 101)
    {
      return 5;
    }
    else if (*a1 == 27765 && *((unsigned char *)a1 + 2) == 116)
    {
      return 6;
    }
    else if (*a1 == 27765 && *((unsigned char *)a1 + 2) == 101)
    {
      return 7;
    }
    else if (*a1 == 26485 && *((unsigned char *)a1 + 2) == 116)
    {
      return 8;
    }
    else if (*a1 ^ 0x6775 | *((unsigned __int8 *)a1 + 2) ^ 0x65)
    {
      return 0;
    }
    else
    {
      return 9;
    }
  }
  else
  {
    if (a2 != 2) {
      return 0;
    }
    return *a1 != 29029 && *a1 == 25966;
  }
}

void mlir::arith::CmpIOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  uint64_t v30 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  char v6 = 0;
  uint64_t v7 = "eq";
  size_t v8 = 2;
  switch(mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v30))
  {
    case 0:
      break;
    case 1:
      char v6 = 0;
      uint64_t v7 = "ne";
      size_t v8 = 2;
      break;
    case 2:
      char v6 = 0;
      uint64_t v7 = "slt";
      goto LABEL_15;
    case 3:
      char v6 = 0;
      uint64_t v7 = "sle";
      goto LABEL_15;
    case 4:
      char v6 = 0;
      uint64_t v7 = "sgt";
      goto LABEL_15;
    case 5:
      char v6 = 0;
      uint64_t v7 = "sge";
      goto LABEL_15;
    case 6:
      char v6 = 0;
      uint64_t v7 = "ult";
      goto LABEL_15;
    case 7:
      char v6 = 0;
      uint64_t v7 = "ule";
      goto LABEL_15;
    case 8:
      char v6 = 0;
      uint64_t v7 = "ugt";
      goto LABEL_15;
    case 9:
      char v6 = 0;
      uint64_t v7 = "uge";
LABEL_15:
      size_t v8 = 3;
      break;
    default:
      size_t v8 = 0;
      uint64_t v7 = &byte_211F4AA5D;
      char v6 = 1;
      break;
  }
  uint64_t v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v10 = (void *)*((void *)v9 + 4);
  if (v8 <= *((void *)v9 + 3) - (void)v10)
  {
    if ((v6 & 1) == 0)
    {
      memcpy(v10, v7, v8);
      *((void *)v9 + 4) += v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, v7, v8);
  }
  unsigned int v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v12 = (unsigned char *)*((void *)v11 + 4);
  if (*((unsigned char **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, ",", 1uLL);
  }
  else
  {
    *uint64_t v12 = 44;
    ++*((void *)v11 + 4);
  }
  uint64_t v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unsigned __int16 v14 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v14 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((void *)v13 + 4) = v14 + 1;
    *unsigned __int16 v14 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
  if (*((unsigned char **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ",", 1uLL);
  }
  else
  {
    *uint64_t v16 = 44;
    ++*((void *)v15 + 4);
  }
  unint64_t v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v18 = (unsigned char *)*((void *)v17 + 4);
  if ((unint64_t)v18 >= *((void *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((void *)v17 + 4) = v18 + 1;
    unsigned char *v18 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v30 = v32;
  v32[0] = "predicate";
  v32[1] = 9;
  uint64_t v31 = 0x200000001;
  long long v19 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v19);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v19 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v22, v30, v31);
  uint64_t v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  char v24 = (unsigned char *)*((void *)v23 + 4);
  if ((unint64_t)v24 >= *((void *)v23 + 3))
  {
    llvm::raw_ostream::write(v23, 32);
  }
  else
  {
    *((void *)v23 + 4) = v24 + 1;
    *char v24 = 32;
  }
  unint64_t v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
  if (*((unsigned char **)v25 + 3) == v26)
  {
    llvm::raw_ostream::write(v25, ":", 1uLL);
  }
  else
  {
    *uint64_t v26 = 58;
    ++*((void *)v25 + 4);
  }
  uint64_t v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v28 = (unsigned char *)*((void *)v27 + 4);
  if ((unint64_t)v28 >= *((void *)v27 + 3))
  {
    llvm::raw_ostream::write(v27, 32);
  }
  else
  {
    *((void *)v27 + 4) = v28 + 1;
    unsigned char *v28 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v30 != v32) {
    free(v30);
  }
}

uint64_t mlir::arith::detail::ConstantOpGenericAdaptorBase::ConstantOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (_OWORD *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = ((a2 + 16 * ((v4 >> 23) & 1) + 64 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v11, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  long long v8 = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 40) = v8;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.constant", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::ConstantOp::setPropertiesFromAttr(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      int v57 = 3;
      uint64_t v58 = "expected DictionaryAttr to set properties";
      uint64_t v59 = 41;
      uint64_t v12 = &v57;
      uint64_t v13 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v52 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          uint64_t v13 = (char *)v61;
          uint64_t v12 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          uint64_t v12 = &v57;
          uint64_t v13 = (char *)v61;
        }
      }
      unsigned __int16 v14 = &v13[24 * v62];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = *((void *)v12 + 2);
      *(_OWORD *)unsigned __int16 v14 = v15;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
    if (!v69) {
      return 0;
    }
    uint64_t v16 = __p;
    if (__p)
    {
      unint64_t v17 = v68;
      uint64_t v18 = __p;
      if (v68 != __p)
      {
        do
          unint64_t v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        uint64_t v18 = __p;
      }
      char v68 = v16;
      operator delete(v18);
    }
    long long v19 = v65;
    if (!v65) {
      goto LABEL_60;
    }
    uint64_t v20 = v66;
    uint64_t v21 = v65;
    if (v66 == v65) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v23 = *--v20;
      uint64_t v22 = v23;
      *uint64_t v20 = 0;
      if (v23) {
        MEMORY[0x21667D390](v22, 0x1000C8077774924);
      }
    }
    while (v20 != v19);
    goto LABEL_58;
  }
  long long v8 = (void *)mlir::DictionaryAttr::get((uint64_t)&v56, "value", 5uLL);
  if (!v8)
  {
    a3(v60, a4);
    if (v60[0])
    {
      int v57 = 3;
      uint64_t v58 = "expected key entry for value in DictionaryAttr to set Properties.";
      uint64_t v59 = 65;
      char v24 = &v57;
      unint64_t v25 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v49 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v53 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
          unint64_t v25 = (char *)v61;
          char v24 = (int *)((char *)v61 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
          char v24 = &v57;
          unint64_t v25 = (char *)v61;
        }
      }
      uint64_t v26 = &v25[24 * v62];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = *((void *)v24 + 2);
      *(_OWORD *)uint64_t v26 = v27;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
    if (!v69) {
      return 0;
    }
    uint64_t v28 = __p;
    if (__p)
    {
      long long v29 = v68;
      uint64_t v30 = __p;
      if (v68 != __p)
      {
        do
          long long v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        uint64_t v30 = __p;
      }
      char v68 = v28;
      operator delete(v30);
    }
    long long v19 = v65;
    if (!v65) {
      goto LABEL_60;
    }
    uint64_t v31 = v66;
    uint64_t v21 = v65;
    if (v66 == v65) {
      goto LABEL_59;
    }
    do
    {
      uint64_t v33 = *--v31;
      uint64_t v32 = v33;
      *uint64_t v31 = 0;
      if (v33) {
        MEMORY[0x21667D390](v32, 0x1000C8077774924);
      }
    }
    while (v31 != v19);
    goto LABEL_58;
  }
  uint64_t v9 = v8;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v8 + 8))
  {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
    *a1 = v9;
    a1[1] = v10;
    return 1;
  }
  a3(v60, a4);
  if (v60[0])
  {
    int v57 = 3;
    uint64_t v59 = 50;
    unint64_t v34 = &v57;
    int64_t v35 = (char *)v61;
    if (v62 >= v63)
    {
      unint64_t v50 = v62 + 1;
      if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
      {
        int64_t v54 = (char *)&v57 - (unsigned char *)v61;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
        int64_t v35 = (char *)v61;
        unint64_t v34 = (int *)((char *)v61 + v54);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
        unint64_t v34 = &v57;
        int64_t v35 = (char *)v61;
      }
    }
    uint64_t v36 = &v35[24 * v62];
    long long v37 = *(_OWORD *)v34;
    *((void *)v36 + 2) = *((void *)v34 + 2);
    *(_OWORD *)uint64_t v36 = v37;
    ++v62;
    if (v60[0])
    {
      uint64_t v38 = &v57;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, (uint64_t)v9);
      uint64_t v39 = (char *)v61;
      if (v62 >= v63)
      {
        unint64_t v51 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          int64_t v55 = (char *)&v57 - (unsigned char *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
          uint64_t v39 = (char *)v61;
          uint64_t v38 = (int *)((char *)v61 + v55);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
          uint64_t v38 = &v57;
          uint64_t v39 = (char *)v61;
        }
      }
      uint64_t v40 = &v39[24 * v62];
      long long v41 = *(_OWORD *)v38;
      *((void *)v40 + 2) = *((void *)v38 + 2);
      *(_OWORD *)uint64_t v40 = v41;
      ++v62;
      if (v60[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
    }
  }
  if (v69)
  {
    uint64_t v42 = __p;
    if (__p)
    {
      unint64_t v43 = v68;
      uint64_t v44 = __p;
      if (v68 != __p)
      {
        do
          unint64_t v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        uint64_t v44 = __p;
      }
      char v68 = v42;
      operator delete(v44);
    }
    long long v19 = v65;
    if (!v65) {
      goto LABEL_60;
    }
    uint64_t v45 = v66;
    uint64_t v21 = v65;
    if (v66 == v65)
    {
LABEL_59:
      unint64_t v66 = v19;
      operator delete(v21);
LABEL_60:
      if (v61 != v64) {
        free(v61);
      }
      return 0;
    }
    do
    {
      uint64_t v47 = *--v45;
      uint64_t v46 = v47;
      *uint64_t v45 = 0;
      if (v47) {
        MEMORY[0x21667D390](v46, 0x1000C8077774924);
      }
    }
    while (v45 != v19);
LABEL_58:
    uint64_t v21 = v65;
    goto LABEL_59;
  }
  return 0;
}

uint64_t mlir::arith::ConstantOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  uint64_t v13 = v15;
  uint64_t v14 = 0x300000000;
  if (!*a2) {
    return 0;
  }
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"value", 5, *a2);
  uint64_t v4 = v3;
  unsigned int v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    unsigned int v5 = v14;
  }
  uint64_t v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *uint64_t v6 = NamedAttr;
  v6[1] = v4;
  uint64_t v7 = v13;
  BOOL v8 = __CFADD__(v14, 1);
  uint64_t v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    uint64_t DictionaryAttr = 0;
    if (v13 == v15) {
      return DictionaryAttr;
    }
    goto LABEL_10;
  }
  uint64_t DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (uint64_t *)v13, v9);
  uint64_t v7 = v13;
  if (v13 != v15) {
LABEL_10:
  }
    free(v7);
  return DictionaryAttr;
}

unint64_t mlir::arith::ConstantOp::getInherentAttr(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (BOOL v4 = *(unsigned char *)(a3 + 4) == 101) : (BOOL v4 = 0), v4)) {
    return *a2 & 0xFFFFFFFFFFFFFF00 | *a2;
  }
  else {
    return 0;
  }
}

uint64_t mlir::arith::ConstantOp::setInherentAttr(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 == 5 && *(_DWORD *)a2 == 1970037110 && *(unsigned char *)(a2 + 4) == 101)
  {
    unsigned int v5 = a4;
    uint64_t v6 = (void *)result;
    if (a4)
    {
      uint64_t result = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a4 + 8);
      if (result) {
        uint64_t result = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v5 + 8);
      }
      else {
        unsigned int v5 = 0;
      }
    }
    else
    {
      uint64_t result = 0;
    }
    *uint64_t v6 = v5;
    v6[1] = result;
  }
  return result;
}

void mlir::arith::ConstantOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2) {
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, *a2);
  }
}

BOOL mlir::arith::ConstantOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6 = (void *)mlir::NamedAttrList::get(a2, **(void **)(a1 + 96));
  return !v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v6, (void **)"value", (const char *)5, a3, a4);
}

uint64_t mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(void *a1, void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!a1 || mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a1 + 8)) {
    return 1;
  }
  a4(&v35, a5);
  if (v35)
  {
    LODWORD(v31) = 3;
    uint64_t v32 = "attribute '";
    uint64_t v33 = 11;
    unsigned int v11 = &v31;
    uint64_t v12 = (char *)v37;
    if (v38 >= v39)
    {
      unint64_t v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        int64_t v29 = (char *)&v31 - (unsigned char *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        uint64_t v12 = (char *)v37;
        unsigned int v11 = (void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        unsigned int v11 = &v31;
        uint64_t v12 = (char *)v37;
      }
    }
    uint64_t v13 = &v12[24 * v38];
    long long v14 = *(_OWORD *)v11;
    *((void *)v13 + 2) = v11[2];
    *(_OWORD *)uint64_t v13 = v14;
    ++v38;
    if (v35)
    {
      __int16 v34 = 261;
      uint64_t v31 = a2;
      uint64_t v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (v35)
      {
        LODWORD(v31) = 3;
        uint64_t v32 = "' failed to satisfy constraint: TypedAttr instance";
        uint64_t v33 = 50;
        long long v15 = &v31;
        uint64_t v16 = (char *)v37;
        if (v38 >= v39)
        {
          unint64_t v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            int64_t v30 = (char *)&v31 - (unsigned char *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            uint64_t v16 = (char *)v37;
            long long v15 = (void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            long long v15 = &v31;
            uint64_t v16 = (char *)v37;
          }
        }
        unint64_t v17 = &v16[24 * v38];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = v15[2];
        *(_OWORD *)unint64_t v17 = v18;
        ++v38;
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v35);
  if (v35) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v35);
  }
  if (v45)
  {
    long long v19 = __p;
    if (__p)
    {
      uint64_t v20 = v44;
      uint64_t v21 = __p;
      if (v44 != __p)
      {
        do
          uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        uint64_t v21 = __p;
      }
      uint64_t v44 = v19;
      operator delete(v21);
    }
    uint64_t v22 = v41;
    if (v41)
    {
      uint64_t v23 = v42;
      char v24 = v41;
      if (v42 != v41)
      {
        do
        {
          uint64_t v26 = *--v23;
          uint64_t v25 = v26;
          void *v23 = 0;
          if (v26) {
            MEMORY[0x21667D390](v25, 0x1000C8077774924);
          }
        }
        while (v23 != v22);
        char v24 = v41;
      }
      uint64_t v42 = v22;
      operator delete(v24);
    }
    if (v37 != v40) {
      free(v37);
    }
  }
  return v9;
}

BOOL mlir::arith::ConstantOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::TypedAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::TypedAttr>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  unsigned int v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  BOOL v4 = v39;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v39 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v4 + 8);
    *a2 = v4;
    a2[1] = v5;
    if (v4) {
      return 1;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    BOOL v8 = &v40;
    uint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v9 = (char *)v46;
        BOOL v8 = (void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        BOOL v8 = &v40;
        uint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  uint64_t v40 = (void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
  unint64_t v41 = 65;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    uint64_t v40 = (void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      unint64_t v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          unint64_t v17 = (char *)v46;
          uint64_t v16 = (void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          unint64_t v17 = (char *)v46;
        }
      }
      long long v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)long long v18 = v19;
      ++v47;
      if (v44)
      {
        uint64_t v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            uint64_t v20 = (void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    char v24 = __p;
    if (__p)
    {
      uint64_t v25 = v53;
      uint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        uint64_t v26 = __p;
      }
      int64_t v53 = v24;
      operator delete(v26);
    }
    unint64_t v27 = v50;
    if (v50)
    {
      unint64_t v28 = v51;
      int64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = *--v28;
          uint64_t v30 = v31;
          void *v28 = 0;
          if (v31) {
            MEMORY[0x21667D390](v30, 0x1000C8077774924);
          }
        }
        while (v28 != v27);
        int64_t v29 = v50;
      }
      unint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

void mlir::arith::ConstantOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v27[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
  *uint64_t v7 = a3;
  v7[1] = a4;
  long long __src = v27;
  uint64_t v26 = 0x200000000;
  mlir::ValueRange::ValueRange(&v24, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  uint64_t v10 = *(long long **)(a2 + 256);
  long long v11 = mlir::ValueRange::ValueRange(&v23, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::arith::ConstantOp::inferReturnTypes((uint64_t)v11, v12, v13, v14, v15, Dictionary, v10, v16, v21, v22, (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1); {
  unint64_t v17 = __src;
  }
  uint64_t v18 = v26;
  uint64_t v19 = *(unsigned int *)(a2 + 72);
  unint64_t v20 = v19 + v26;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if (v18)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v27) {
    free(__src);
  }
}

uint64_t mlir::arith::ConstantOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = a6;
  int v12 = *(_DWORD *)(a11 + 8);
  if (v12 != 1)
  {
    if (!v12)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v13 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v13), 8 - 8 * v13);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v13 = *(_DWORD *)(a11 + 8);
      if (v13 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  if (a7)
  {
    long long v17 = *a7;
    if ((void)v17)
    {
LABEL_10:
      **(void **)a11 = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v17);
      return 1;
    }
  }
  else
  {
    uint64_t v15 = (void *)mlir::DictionaryAttr::get((uint64_t)&v18, "value", 5uLL);
    uint64_t v16 = v15;
    if (v15)
    {
      if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v15 + 8))
      {
        long long v17 = 0uLL;
        return 0;
      }
      uint64_t v15 = (void *)mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8);
    }
    *(void *)&long long v17 = v16;
    *((void *)&v17 + 1) = v15;
    if (v16) {
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t mlir::arith::ConstantOp::verifyInvariantsImpl(mlir::arith::ConstantOp *this)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void **)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  if (v3)
  {
    v32[0] = v2;
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v3, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v32))return 0; {
    if (*(_DWORD *)(*(void *)this + 36))
    }
      uint64_t v4 = *(void *)this - 16;
    else {
      uint64_t v4 = 0;
    }
    mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
    uint64_t v5 = *(void **)(*(void *)this
                    + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                    + 64);
    if (v5) {
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v5 + 8);
    }
    else {
      uint64_t v6 = 0;
    }
    v32[0] = v5;
    v32[1] = v6;
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v32);
    if (*(_DWORD *)(*(void *)this + 36)) {
      uint64_t v17 = *(void *)this - 16;
    }
    else {
      uint64_t v17 = 0;
    }
    if (canMapOperands == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      if (*(_DWORD *)(*(void *)this + 36)) {
        uint64_t v18 = *(void *)this - 16;
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v19 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v20 = *(void ***)(*(void *)this
                      + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                      + 64);
      if (v20)
      {
        uint64_t v21 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>((uint64_t)*v20 + 8);
        int64_t v29 = v20;
        uint64_t v30 = v21;
        if (v19 != mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v29)) {
          goto LABEL_33;
        }
        return 1;
      }
      int64_t v29 = 0;
      uint64_t v30 = 0;
      if (v19 == mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v29)) {
        return 1;
      }
    }
LABEL_33:
    int64_t v29 = (void **)"failed to verify that all of {value, result} have same type";
    __int16 v31 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v29, (uint64_t)v32);
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
    if (v32[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
    }
    if (v39)
    {
      uint64_t v22 = __p;
      if (__p)
      {
        unint64_t v23 = v38;
        unint64_t v24 = __p;
        if (v38 != __p)
        {
          do
            unint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          unint64_t v24 = __p;
        }
        unsigned int v38 = v22;
        operator delete(v24);
      }
      long long v11 = v35;
      if (!v35) {
        goto LABEL_49;
      }
      uint64_t v25 = v36;
      unsigned int v13 = v35;
      if (v36 == v35)
      {
LABEL_48:
        int64_t v36 = v11;
        operator delete(v13);
LABEL_49:
        if (v33 != &v34) {
          free(v33);
        }
        return v7;
      }
      do
      {
        uint64_t v27 = *--v25;
        uint64_t v26 = v27;
        void *v25 = 0;
        if (v27) {
          MEMORY[0x21667D390](v26, 0x1000C8077774924);
        }
      }
      while (v25 != v11);
LABEL_47:
      unsigned int v13 = v35;
      goto LABEL_48;
    }
    return v7;
  }
  int64_t v29 = (void **)"requires attribute 'value'";
  __int16 v31 = 259;
  mlir::OpState::emitOpError((uint64_t *)this, &v29, (uint64_t)v32);
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v32);
  if (v32[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v32);
  }
  if (v39)
  {
    BOOL v8 = __p;
    if (__p)
    {
      uint64_t v9 = v38;
      uint64_t v10 = __p;
      if (v38 != __p)
      {
        do
          uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      unsigned int v38 = v8;
      operator delete(v10);
    }
    long long v11 = v35;
    if (!v35) {
      goto LABEL_49;
    }
    int v12 = v36;
    unsigned int v13 = v35;
    if (v36 == v35) {
      goto LABEL_48;
    }
    do
    {
      uint64_t v15 = *--v12;
      uint64_t v14 = v15;
      *int v12 = 0;
      if (v15) {
        MEMORY[0x21667D390](v14, 0x1000C8077774924);
      }
    }
    while (v12 != v11);
    goto LABEL_47;
  }
  return v7;
}

uint64_t mlir::arith::ConstantOp::parse(uint64_t a1, uint64_t a2)
{
  long long v12 = 0uLL;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  v10[0] = a1;
  v10[1] = &v11;
  unint64_t v10[2] = a2;
  uint64_t v5 = (void *)mlir::NamedAttrList::get(a2 + 112, **(void **)(v4 + 96));
  if (v5)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(v5, (void **)"value", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::ConstantOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v10))return 0; {
  }
    }
  if (!mlir::AsmParser::parseAttribute<mlir::TypedAttr>(a1, &v12, 0)) {
    return 0;
  }
  if ((void)v12)
  {
    uint64_t v6 = (_OWORD *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v6 = v12;
  }
  uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v12);
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = canMapOperands;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::arith::ConstantOp::print(mlir::arith::ConstantOp *this, mlir::OpAsmPrinter *a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  long long v12 = v14;
  v14[0] = "value";
  v14[1] = 5;
  uint64_t v13 = 0x200000001;
  uint64_t v4 = *(unsigned char **)this;
  if (v4[47])
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v7, v12, v13);
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
    uint64_t v10 = *(void **)(*(void *)this
                     + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                     + 64);
    if (!v10) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  *((void *)v8 + 4) = v9 + 1;
  *uint64_t v9 = 32;
  uint64_t v10 = *(void **)(*(void *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1)
                   + 64);
  if (v10) {
LABEL_8:
  }
    mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v10 + 8);
LABEL_9:
  (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v10);
  if (v12 != v14) {
    free(v12);
  }
}

uint64_t mlir::arith::detail::DivFOpGenericAdaptorBase::DivFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.divf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::DivFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::DivFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::DivFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::DivSIOpGenericAdaptorBase::DivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.divsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::DivUIOpGenericAdaptorBase::DivUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.divui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::DivUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ExtFOpGenericAdaptorBase::ExtFOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.extf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtFOp::verifyInvariantsImpl(mlir::arith::ExtFOp *this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::ExtFOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ExtSIOpGenericAdaptorBase::ExtSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.extsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtSIOp::verifyInvariantsImpl(mlir::arith::ExtSIOp *this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v55 = (void **)a2;
  if (mlir::Type::isSignlessInteger((mlir::Type *)&v55)) {
    return 1;
  }
  uint64_t v11 = v55;
  __int16 v12 = *v55;
  uint64_t v13 = (void *)*((void *)*v55 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    v59[0] = v11;
    v59[1] = v14;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v59);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)) {
      return 1;
    }
    uint64_t v11 = v55;
    __int16 v12 = *v55;
    uint64_t v13 = (void *)*((void *)*v55 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    int64_t v52 = v11;
    uint64_t v53 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)) {
      return 1;
    }
  }
  __int16 v54 = 261;
  int64_t v52 = a3;
  uint64_t v53 = a4;
  mlir::Operation::emitOpError(a1, &v52, (uint64_t)v59);
  if (v59[0])
  {
    LODWORD(OperandRange) = 3;
    int v57 = " #";
    uint64_t v58 = 2;
    p_uint64_t OperandRange = &OperandRange;
    uint64_t v17 = (char *)v60;
    if (v61 >= v62)
    {
      unint64_t v42 = v61 + 1;
      if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
      {
        int64_t v48 = (char *)&OperandRange - (unsigned char *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        uint64_t v17 = (char *)v60;
        p_uint64_t OperandRange = (uint64_t *)((char *)v60 + v48);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v42, 24);
        p_uint64_t OperandRange = &OperandRange;
        uint64_t v17 = (char *)v60;
      }
    }
    uint64_t v18 = &v17[24 * v61];
    long long v19 = *(_OWORD *)p_OperandRange;
    *((void *)v18 + 2) = p_OperandRange[2];
    *(_OWORD *)uint64_t v18 = v19;
    uint64_t v20 = ++v61;
    if (v59[0])
    {
      LODWORD(OperandRange) = 5;
      int v57 = (const char *)a5;
      uint64_t v21 = &OperandRange;
      uint64_t v22 = (char *)v60;
      if (v20 >= v62)
      {
        unint64_t v43 = v20 + 1;
        BOOL v44 = (char *)v60 + 24 * v20 > (char *)&OperandRange;
        if (v60 <= &OperandRange && v44)
        {
          int64_t v49 = (char *)&OperandRange - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          uint64_t v22 = (char *)v60;
          uint64_t v21 = (uint64_t *)((char *)v60 + v49);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v43, 24);
          uint64_t v21 = &OperandRange;
          uint64_t v22 = (char *)v60;
        }
      }
      unint64_t v23 = &v22[24 * v61];
      long long v24 = *(_OWORD *)v21;
      *((void *)v23 + 2) = v21[2];
      *(_OWORD *)unint64_t v23 = v24;
      uint64_t v25 = ++v61;
      if (v59[0])
      {
        LODWORD(OperandRange) = 3;
        int v57 = " must be signless-fixed-width-integer-like, but got ";
        uint64_t v58 = 52;
        uint64_t v26 = &OperandRange;
        uint64_t v27 = (char *)v60;
        if (v25 >= v62)
        {
          unint64_t v45 = v25 + 1;
          BOOL v46 = (char *)v60 + 24 * v25 > (char *)&OperandRange;
          if (v60 <= &OperandRange && v46)
          {
            int64_t v50 = (char *)&OperandRange - (unsigned char *)v60;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            uint64_t v27 = (char *)v60;
            uint64_t v26 = (uint64_t *)((char *)v60 + v50);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v45, 24);
            uint64_t v26 = &OperandRange;
            uint64_t v27 = (char *)v60;
          }
        }
        unint64_t v28 = &v27[24 * v61];
        long long v29 = *(_OWORD *)v26;
        *((void *)v28 + 2) = v26[2];
        *(_OWORD *)unint64_t v28 = v29;
        ++v61;
        if (v59[0])
        {
          uint64_t v30 = &OperandRange;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&OperandRange, (uint64_t)v55);
          __int16 v31 = (char *)v60;
          if (v61 >= v62)
          {
            unint64_t v47 = v61 + 1;
            if (v60 <= &OperandRange && (char *)v60 + 24 * v61 > (char *)&OperandRange)
            {
              int64_t v51 = (char *)&OperandRange - (unsigned char *)v60;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              __int16 v31 = (char *)v60;
              uint64_t v30 = (uint64_t *)((char *)v60 + v51);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
              uint64_t v30 = &OperandRange;
              __int16 v31 = (char *)v60;
            }
          }
          unint64_t v32 = &v31[24 * v61];
          long long v33 = *(_OWORD *)v30;
          *((void *)v32 + 2) = v30[2];
          *(_OWORD *)unint64_t v32 = v33;
          ++v61;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v59);
  if (v59[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
  }
  if (v68)
  {
    uint64_t v34 = __p;
    if (__p)
    {
      int64_t v35 = v67;
      int64_t v36 = __p;
      if (v67 != __p)
      {
        do
          int64_t v35 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v35 - 1);
        while (v35 != v34);
        int64_t v36 = __p;
      }
      uint64_t v67 = v34;
      operator delete(v36);
    }
    int64_t v37 = v64;
    if (v64)
    {
      unsigned int v38 = v65;
      char v39 = v64;
      if (v65 != v64)
      {
        do
        {
          uint64_t v41 = *--v38;
          uint64_t v40 = v41;
          *unsigned int v38 = 0;
          if (v41) {
            MEMORY[0x21667D390](v40, 0x1000C8077774924);
          }
        }
        while (v38 != v37);
        char v39 = v64;
      }
      long long v65 = v37;
      operator delete(v39);
    }
    if (v60 != v63) {
      free(v60);
    }
  }
  return v9;
}

BOOL mlir::arith::ExtSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ExtUIOpGenericAdaptorBase::ExtUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.extui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ExtUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FPToSIOpGenericAdaptorBase::FPToSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.fptosi", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FPToSIOp::verifyInvariantsImpl(mlir::arith::FPToSIOp *this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::FPToSIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FPToUIOpGenericAdaptorBase::FPToUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.fptoui", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FPToUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::FloorDivSIOpGenericAdaptorBase::FloorDivSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.floordivsi", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::FloorDivSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::IndexCastOpGenericAdaptorBase::IndexCastOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.index_cast", 16, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::IndexCastOp::verifyInvariantsImpl(mlir::arith::IndexCastOp *this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0) != 0;
}

uint64_t mlir::arith::__mlir_ods_local_type_constraint_ArithOps8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v58 = (void **)a2;
  if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&v58)) {
    return 1;
  }
  uint64_t v11 = v58;
  if (*((_UNKNOWN **)*v58 + 17) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
  {
    uint64_t v57 = (uint64_t)v58;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v57);
    uint64_t v11 = v58;
    if (v41 >= 1)
    {
      if (v58) {
        uint64_t v42 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v58 + 8);
      }
      else {
        uint64_t v42 = 0;
      }
      v63[0] = v11;
      v63[1] = v42;
      uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
      if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
        return 1;
      }
      uint64_t v11 = v58;
    }
  }
  __int16 v12 = *v11;
  uint64_t v13 = (void *)*((void *)*v11 + 17);
  if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    __int16 v54 = v11;
    uint64_t v55 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v54);
    if (mlir::Type::isSignlessIntOrIndex((mlir::Type *)&OperandRange)) {
      return 1;
    }
    uint64_t v11 = v58;
    __int16 v12 = *v58;
    uint64_t v13 = (void *)*((void *)*v58 + 17);
  }
  if (v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
  {
    uint64_t v43 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v12 + 8);
    __int16 v60 = v11;
    uint64_t v61 = v43;
    uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v60);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange)
      || *(_UNKNOWN **)(*(void *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
    {
      return 1;
    }
  }
  __int16 v56 = 261;
  __int16 v54 = a3;
  uint64_t v55 = a4;
  mlir::Operation::emitOpError(a1, &v54, (uint64_t)v63);
  if (v63[0])
  {
    LODWORD(v60) = 3;
    uint64_t v61 = (uint64_t)" #";
    uint64_t v62 = 2;
    uint64_t v15 = &v60;
    uint64_t v16 = (char *)v64;
    if (v65 >= v66)
    {
      unint64_t v44 = v65 + 1;
      if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
      {
        int64_t v50 = (char *)&v60 - (unsigned char *)v64;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v44, 24);
        uint64_t v16 = (char *)v64;
        uint64_t v15 = (void ***)((char *)v64 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v44, 24);
        uint64_t v15 = &v60;
        uint64_t v16 = (char *)v64;
      }
    }
    uint64_t v17 = &v16[24 * v65];
    long long v18 = *(_OWORD *)v15;
    *((void *)v17 + 2) = v15[2];
    *(_OWORD *)uint64_t v17 = v18;
    uint64_t v19 = ++v65;
    if (v63[0])
    {
      LODWORD(v60) = 5;
      uint64_t v61 = a5;
      uint64_t v20 = &v60;
      uint64_t v21 = (char *)v64;
      if (v19 >= v66)
      {
        unint64_t v45 = v19 + 1;
        BOOL v46 = (char *)v64 + 24 * v19 > (char *)&v60;
        if (v64 <= &v60 && v46)
        {
          int64_t v51 = (char *)&v60 - (unsigned char *)v64;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v45, 24);
          uint64_t v21 = (char *)v64;
          uint64_t v20 = (void ***)((char *)v64 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v45, 24);
          uint64_t v20 = &v60;
          uint64_t v21 = (char *)v64;
        }
      }
      uint64_t v22 = &v21[24 * v65];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = v20[2];
      *(_OWORD *)uint64_t v22 = v23;
      uint64_t v24 = ++v65;
      if (v63[0])
      {
        LODWORD(v60) = 3;
        uint64_t v61 = (uint64_t)" must be signless-integer-like or memref of signless-integer, but got ";
        uint64_t v62 = 70;
        uint64_t v25 = &v60;
        uint64_t v26 = (char *)v64;
        if (v24 >= v66)
        {
          unint64_t v47 = v24 + 1;
          BOOL v48 = (char *)v64 + 24 * v24 > (char *)&v60;
          if (v64 <= &v60 && v48)
          {
            int64_t v52 = (char *)&v60 - (unsigned char *)v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            uint64_t v26 = (char *)v64;
            uint64_t v25 = (void ***)((char *)v64 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v47, 24);
            uint64_t v25 = &v60;
            uint64_t v26 = (char *)v64;
          }
        }
        uint64_t v27 = &v26[24 * v65];
        long long v28 = *(_OWORD *)v25;
        *((void *)v27 + 2) = v25[2];
        *(_OWORD *)uint64_t v27 = v28;
        ++v65;
        if (v63[0])
        {
          long long v29 = &v60;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v60, (uint64_t)v58);
          uint64_t v30 = (char *)v64;
          if (v65 >= v66)
          {
            unint64_t v49 = v65 + 1;
            if (v64 <= &v60 && (char *)v64 + 24 * v65 > (char *)&v60)
            {
              int64_t v53 = (char *)&v60 - (unsigned char *)v64;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              uint64_t v30 = (char *)v64;
              long long v29 = (void ***)((char *)v64 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v67, v49, 24);
              long long v29 = &v60;
              uint64_t v30 = (char *)v64;
            }
          }
          __int16 v31 = &v30[24 * v65];
          long long v32 = *(_OWORD *)v29;
          *((void *)v31 + 2) = v29[2];
          *(_OWORD *)__int16 v31 = v32;
          ++v65;
        }
      }
    }
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v63);
  if (v63[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v63);
  }
  if (v72)
  {
    long long v33 = __p;
    if (__p)
    {
      uint64_t v34 = v71;
      int64_t v35 = __p;
      if (v71 != __p)
      {
        do
          uint64_t v34 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v34 - 1);
        while (v34 != v33);
        int64_t v35 = __p;
      }
      long long v71 = v33;
      operator delete(v35);
    }
    int64_t v36 = v68;
    if (v68)
    {
      int64_t v37 = v69;
      unsigned int v38 = v68;
      if (v69 != v68)
      {
        do
        {
          uint64_t v40 = *--v37;
          uint64_t v39 = v40;
          *int64_t v37 = 0;
          if (v40) {
            MEMORY[0x21667D390](v39, 0x1000C8077774924);
          }
        }
        while (v37 != v36);
        unsigned int v38 = v68;
      }
      uint64_t v69 = v36;
      operator delete(v38);
    }
    if (v64 != v67) {
      free(v64);
    }
  }
  return v9;
}

BOOL mlir::arith::IndexCastOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::IndexCastUIOpGenericAdaptorBase::IndexCastUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.index_castui", 18, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::IndexCastUIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::MaxNumFOpGenericAdaptorBase::MaxNumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maxnumf", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxNumFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::MaxNumFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaxNumFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaxNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MaxSIOpGenericAdaptorBase::MaxSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maxsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MaxUIOpGenericAdaptorBase::MaxUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maxui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaxUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MaximumFOpGenericAdaptorBase::MaximumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.maximumf", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MaximumFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::MaximumFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MaximumFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MaximumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MinNumFOpGenericAdaptorBase::MinNumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minnumf", 13, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinNumFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::MinNumFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinNumFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinNumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MinSIOpGenericAdaptorBase::MinSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MinUIOpGenericAdaptorBase::MinUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MinimumFOpGenericAdaptorBase::MinimumFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.minimumf", 14, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MinimumFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::MinimumFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MinimumFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MinimumFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MulFOpGenericAdaptorBase::MulFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.mulf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::MulFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::MulFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::MulFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::MulIOpGenericAdaptorBase::MulIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.muli", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::MulSIExtendedOpGenericAdaptorBase::MulSIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.mulsi_extended", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::arith::MulSIExtendedOp::getAsmResultNames(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a3)
{
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v5 = *(void *)a1 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  a2(a3, NextResultAtOffset, "low", 3);
  if (*(_DWORD *)(*(void *)a1 + 36)) {
    uint64_t v7 = *(void *)a1 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 1);
  uint64_t v9 = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);

  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a2)(a3, v9, "high", 4);
}

void mlir::arith::MulSIExtendedOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v13 = a4;
  uint64_t v14 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  uint64_t __src = v19;
  uint64_t v18 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v16, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v15, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v20 = v16;
  unsigned int v6 = v18;
  if (v18 != 2)
  {
    if (v18 <= 2)
    {
      if (HIDWORD(v18) > 1
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v19, 2uLL, 8), unsigned int v6 = v18, v18 != 2))
      {
        bzero((char *)__src + 8 * v6, 16 - 8 * v6);
      }
    }
    LODWORD(v18) = 2;
  }
  unint64_t v7 = *(void *)(mlir::ValueRange::dereference_iterator(&v20, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(mlir::ValueRange::dereference_iterator(&v20, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t __src = v7;
  uint64_t v9 = __src;
  *((void *)__src + 1) = v8;
  uint64_t v10 = v18;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  unint64_t v12 = v11 + v18;
  if (v12 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (v10)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v11), v9, 8 * v10);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v10;
  if (__src != v19) {
    free(__src);
  }
}

uint64_t mlir::arith::MulSIExtendedOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  unint64_t v15[2] = *MEMORY[0x263EF8340];
  v15[0] = a4;
  v15[1] = a5;
  unsigned int v11 = a11[2];
  if (v11 != 2)
  {
    if (v11 <= 2)
    {
      if (a11[3] > 1u
        || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a11, a11 + 4, 2uLL, 8), unsigned int v11 = a11[2], v11 != 2))
      {
        bzero((void *)(*(void *)a11 + 8 * v11), 16 - 8 * v11);
      }
    }
    a11[2] = 2;
  }
  unint64_t v12 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = *(void *)(mlir::ValueRange::dereference_iterator(v15, 1) + 8) & 0xFFFFFFFFFFFFFFF8;
  **(void **)a11 = v12;
  *(void *)(*(void *)a11 + 8) = v13;
  return 1;
}

uint64_t mlir::arith::MulSIExtendedOp::verifyInvariantsImpl(mlir::arith::MulSIExtendedOp *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 1u))
  {
    return 0;
  }
  uint64_t v2 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 0))return 0; {
  uint64_t v4 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
  }
  uint64_t v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  uint64_t v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps1(*(void *)this, *(void *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"result", 6, 1u))return 0; {
  uint64_t v7 = *(void *)this;
  }
  uint64_t v8 = *(void *)(*(void *)this + 72);
  unint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != (*(void *)(*(void *)(v8 + 56) + 8) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_27;
  }
  int v10 = *(_DWORD *)(v7 + 36);
  uint64_t v11 = v7 - 16;
  uint64_t v12 = v10 ? v11 : 0;
  if (v9 != (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0) + 8) & 0xFFFFFFFFFFFFFFF8)
    || (*(_DWORD *)(*(void *)this + 36) ? (uint64_t v13 = *(void *)this - 16) : (uint64_t v13 = 0),
        (unint64_t v14 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v13, 0) + 8) & 0xFFFFFFFFFFFFFFF8,
         *(_DWORD *)(*(void *)this + 36))
      ? (uint64_t v15 = *(void *)this - 16)
      : (uint64_t v15 = 0),
        (uint64_t v16 = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 1),
         v14 != (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v16, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
     || (*(_DWORD *)(*(void *)this + 36) ? (uint64_t v17 = *(void *)this - 16) : (uint64_t v17 = 0),
         uint64_t v18 = 1,
         uint64_t v19 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 1),
         (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8))))
  {
LABEL_27:
    long long v29 = (void **)"failed to verify that all of {lhs, rhs, low, high} have same type";
    __int16 v30 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, &v29, (uint64_t)v31);
    uint64_t v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
    if (v31[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
    }
    if (v38)
    {
      long long v20 = __p;
      if (__p)
      {
        uint64_t v21 = v37;
        uint64_t v22 = __p;
        if (v37 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          uint64_t v22 = __p;
        }
        int64_t v37 = v20;
        operator delete(v22);
      }
      long long v23 = v34;
      if (v34)
      {
        uint64_t v24 = v35;
        uint64_t v25 = v34;
        if (v35 != v34)
        {
          do
          {
            uint64_t v27 = *--v24;
            uint64_t v26 = v27;
            *uint64_t v24 = 0;
            if (v27) {
              MEMORY[0x21667D390](v26, 0x1000C8077774924);
            }
          }
          while (v24 != v23);
          uint64_t v25 = v34;
        }
        int64_t v35 = v23;
        operator delete(v25);
      }
      if (v32 != &v33) {
        free(v32);
      }
    }
  }
  return v18;
}

BOOL mlir::arith::MulSIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x263EF8340];
  memset(v12, 0, 24);
  v9[0] = (uint64_t)v12;
  v9[1] = 1;
  memset(v11, 0, 24);
  uint64_t __src = 0;
  v8[0] = &__src;
  v8[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v11, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v7))
    && (uint64_t __src = v7,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v5 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v9, v8, v4, v5)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v11, *(void *)v8[0], v5) != 0;
  }
  else
  {
    return 0;
  }
}

void mlir::arith::MulSIExtendedOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  v23[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if (*((unsigned char **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, ",", 1uLL);
  }
  else
  {
    *uint64_t v7 = 44;
    ++*((void *)v6 + 4);
  }
  uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  unint64_t v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 32);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    *unint64_t v9 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 56));
  uint64_t v21 = v23;
  uint64_t v22 = 0x200000000;
  int v10 = *this;
  if (*((unsigned char *)*this + 47))
  {
    unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v10);
    p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v10 + 56);
  }
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v13, v21, v22);
  unint64_t v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v15 = (unsigned char *)*((void *)v14 + 4);
  if ((unint64_t)v15 >= *((void *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((void *)v14 + 4) = v15 + 1;
    unsigned char *v15 = 32;
  }
  uint64_t v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v17 = (unsigned char *)*((void *)v16 + 4);
  if (*((unsigned char **)v16 + 3) == v17)
  {
    llvm::raw_ostream::write(v16, ":", 1uLL);
  }
  else
  {
    unsigned char *v17 = 58;
    ++*((void *)v16 + 4);
  }
  uint64_t v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v19 = (unsigned char *)*((void *)v18 + 4);
  if ((unint64_t)v19 >= *((void *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 32);
  }
  else
  {
    *((void *)v18 + 4) = v19 + 1;
    *uint64_t v19 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(*(void *)(*((void *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v21 != v23) {
    free(v21);
  }
}

uint64_t mlir::arith::detail::MulUIExtendedOpGenericAdaptorBase::MulUIExtendedOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.mului_extended", 20, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::MulUIExtendedOp::parse(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x263EF8340];
  memset(v12, 0, 24);
  v9[0] = (uint64_t)v12;
  v9[1] = 1;
  memset(v11, 0, 24);
  uint64_t __src = 0;
  v8[0] = &__src;
  v8[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v11, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v7 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v7))
    && (uint64_t __src = v7,
        mlir::OperationState::addTypes(a2, &__src, 1),
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v5 = a2 + 16,
        mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v9, v8, v4, v5)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v11, *(void *)v8[0], v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::NegFOpGenericAdaptorBase::NegFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  uint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.negf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::NegFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

void mlir::arith::NegFOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v11 = a4;
  mlir::OperationState::addOperands(a2, (uint64_t)&v11, 1);
  uint64_t v9 = mlir::arith::FastMathFlagsAttr::get(*a1, a5);
  *(void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(a2) = v9;
  uint64_t v10 = *(unsigned int *)(a2 + 72);
  if (v10 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v10) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::arith::NegFOp::verifyInvariantsImpl(mlir::arith::NegFOp *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *(void *)(*(void *)this + 16 * (((unint64_t)*(unsigned int *)(*(void *)this + 44) >> 23) & 1) + 64);
  uint64_t v7 = v2;
  if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v3, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)|| !mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"operand", 7, 0))
  {
    return 0;
  }
  if (*(_DWORD *)(*(void *)this + 36)) {
    uint64_t v4 = *(void *)this - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::NegFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  uint64_t v12 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8)) {
    goto LABEL_6;
  }
  if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v12, 0))return 0; {
  if (v12)
  }
  {
    uint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::NegFOpGenericAdaptorBase::Properties>(a2);
    *uint64_t v4 = v12;
  }
LABEL_6:
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  v10[0] = a1;
  v10[1] = &v11;
  unint64_t v10[2] = a2;
  uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
  if (v6)
  {
    if (!mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::NegFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v10))return 0; {
  }
    }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  v10[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, v10)) {
    return 0;
  }
  uint64_t v7 = v10[0];
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v8 + 1, 8);
    LODWORD(v8) = *(_DWORD *)(a2 + 72);
  }
  *(void *)(*(void *)(a2 + 64) + 8 * v8) = v7;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v13, v7, a2 + 16) != 0;
}

void mlir::arith::NegFOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  void v33[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *uint64_t v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, void))(*(void *)a2 + 160))(a2, *(void *)(*((void *)*this + 9) + 24));
  uint64_t v6 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v6)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
    if (v6 != mlir::arith::FastMathFlagsAttr::get(Context, 0))
    {
      uint64_t v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v9 = (unsigned char *)*((void *)v8 + 4);
      if ((unint64_t)v9 >= *((void *)v8 + 3))
      {
        llvm::raw_ostream::write(v8, 32);
      }
      else
      {
        *((void *)v8 + 4) = v9 + 1;
        *uint64_t v9 = 32;
      }
      uint64_t v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
      uint64_t v11 = (void *)*((void *)v10 + 4);
      if (*((void *)v10 + 3) - (void)v11 > 7uLL)
      {
        *uint64_t v11 = 0x6874616D74736166;
        *((void *)v10 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v10, "fastmath", 8uLL);
      }
      __int16 v31 = (void *)*((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
      if (!(*(unsigned __int8 (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 104))(a2))
      {
        uint64_t v12 = (void *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
        uint64_t v13 = (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2];
        mlir::arith::FastMathFlagsAttr::print((mlir::arith::FastMathFlagsAttr *)&v31, a2);
        if (v13 == (*(uint64_t (**)(void *))(*v12 + 80))(v12) + v12[4] - v12[2]) {
          (*(void (**)(mlir::OpAsmPrinter *, void *))(*(void *)a2 + 40))(a2, v31);
        }
      }
    }
  }
  __int16 v31 = v33;
  v33[0] = "fastmath";
  v33[1] = 8;
  uint64_t v32 = 0x200000001;
  unint64_t v14 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  uint64_t v15 = *((void *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v15 && v15 == mlir::arith::FastMathFlagsAttr::get(v14, 0))
  {
    unsigned int v18 = v32;
    if (v32 >= HIDWORD(v32))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v33, v32 + 1, 16);
      unsigned int v18 = v32;
    }
    uint64_t v19 = (char *)v31 + 16 * v18;
    *uint64_t v19 = "fastmath";
    v19[1] = 8;
    LODWORD(v32) = v32 + 1;
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47)) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v16 = *this;
    if (!*((unsigned char *)*this + 47))
    {
LABEL_18:
      p_unint64_t AttrDictionary = (mlir::Operation *)((char *)v16 + 56);
      goto LABEL_23;
    }
  }
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary(v16);
  p_unint64_t AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
LABEL_23:
  uint64_t Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, void))(*(void *)a2 + 192))(a2, Value, v21, v31, v32);
  uint64_t v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  long long v23 = (unsigned char *)*((void *)v22 + 4);
  if ((unint64_t)v23 >= *((void *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 32);
  }
  else
  {
    *((void *)v22 + 4) = v23 + 1;
    unsigned char *v23 = 32;
  }
  uint64_t v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v25 = (unsigned char *)*((void *)v24 + 4);
  if (*((unsigned char **)v24 + 3) == v25)
  {
    llvm::raw_ostream::write(v24, ":", 1uLL);
  }
  else
  {
    unsigned char *v25 = 58;
    ++*((void *)v24 + 4);
  }
  uint64_t v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(void *)a2 + 16))(a2);
  uint64_t v27 = (unsigned char *)*((void *)v26 + 4);
  if ((unint64_t)v27 >= *((void *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    unsigned char *v27 = 32;
  }
  if (*((_DWORD *)*this + 9)) {
    uint64_t v28 = (uint64_t)*this - 16;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v28, 0);
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(void *)a2 + 32))(a2, *(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v31 != v33) {
    free(v31);
  }
}

uint64_t mlir::arith::detail::OrIOpGenericAdaptorBase::OrIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.ori", 9, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::OrIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::RemFOpGenericAdaptorBase::RemFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.remf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::RemFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::RemFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::RemFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::RemSIOpGenericAdaptorBase::RemSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.remsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::RemUIOpGenericAdaptorBase::RemUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.remui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::RemUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SIToFPOpGenericAdaptorBase::SIToFPOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.sitofp", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SIToFPOp::verifyInvariantsImpl(mlir::arith::SIToFPOp *this)
{
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps7(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::arith::__mlir_ods_local_type_constraint_ArithOps0(*(void *)this, (void **)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8), (void **)"result", 6, 0) != 0;
}

BOOL mlir::arith::SIToFPOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::ShLIOpGenericAdaptorBase::ShLIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.shli", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShLIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ShRSIOpGenericAdaptorBase::ShRSIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.shrsi", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShRSIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::ShRUIOpGenericAdaptorBase::ShRUIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.shrui", 11, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::ShRUIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SubFOpGenericAdaptorBase::SubFOpGenericAdaptorBase(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = *(unsigned int *)(a2 + 44);
  unint64_t v5 = (void *)(a2 + 16 * ((v4 >> 23) & 1) + 64);
  unint64_t v6 = v4 & 0x7FFFFF;
  if ((v4 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)v5 + ((v4 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8) + 32 * *(unsigned int *)(a2 + 40);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v10;
  if (v3)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.subf", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SubFOp::readProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::arith::FastMathFlagsAttr>(a1, v3) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 256);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL mlir::arith::SubFOp::parse(uint64_t a1, uint64_t a2)
{
  void v13[4] = *MEMORY[0x263EF8340];
  memset(v13, 0, 24);
  memset(v12, 0, 24);
  uint64_t v10 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v13, 1)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v12, 1)) {
    return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(void *)a1 + 376))(a1, "fastmath", 8))
  {
    if (!mlir::AsmParser::parseCustomAttributeWithFallback<mlir::arith::FastMathFlagsAttr>(a1, &v10, 0))return 0; {
    if (v10)
    }
    {
      unint64_t v4 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::SubFOpGenericAdaptorBase::Properties>(a2);
      *unint64_t v4 = v10;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    __src[0] = a1;
    __src[1] = &v9;
    __src[2] = a2;
    uint64_t v6 = mlir::NamedAttrList::get(a2 + 112, **(void **)(v5 + 96));
    if (!v6
      || mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(v6, (void **)"fastmath", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::SubFOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)__src))
    {
      if ((*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1))
      {
        uint64_t v9 = 0;
        if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v9))
        {
          __src[0] = v9;
          mlir::OperationState::addTypes(a2, __src, 1);
          uint64_t v7 = a2 + 16;
          if ((*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v13, __src[0], v7))
          {
            return (*(unsigned __int8 (**)(uint64_t, void *, void, uint64_t))(*(void *)a1 + 696))(a1, v12, __src[0], v7) != 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::arith::detail::SubIOpGenericAdaptorBase::SubIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.subi", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::SubIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::TruncFOpGenericAdaptorBase::TruncFOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.truncf", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::TruncFOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::TruncIOpGenericAdaptorBase::TruncIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.trunci", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::TruncIOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::UIToFPOpGenericAdaptorBase::UIToFPOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.uitofp", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::UIToFPOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(v10, 0, 24);
  v8[0] = (uint64_t)v10;
  v8[1] = 1;
  uint64_t v9 = 0;
  v7[0] = &v9;
  v7[1] = 1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v10, 1)) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112)) {
    return 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)) {
    return 0;
  }
  __src[0] = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void *))(*(void *)a1 + 504))(a1, __src)) {
    return 0;
  }
  uint64_t v9 = __src[0];
  __int16 v12 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void *))(*(void *)a1 + 368))(a1, "to", 2, __src))return 0; {
  uint64_t v6 = 0;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6)) {
    return 0;
  }
  __src[0] = v6;
  mlir::OperationState::addTypes(a2, __src, 1);
  return mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v8, v7, v4, a2 + 16) != 0;
}

uint64_t mlir::arith::detail::XOrIOpGenericAdaptorBase::XOrIOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.xori", 10, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::arith::XOrIOp::parse(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, 24);
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v9, 1)
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 120))(a1)
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 672))(a1, v8, 1))
    && ((*(void (**)(uint64_t))(*(void *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)a1 + 456))(a1, a2 + 112))
    && (*(unsigned __int8 (**)(uint64_t))(*(void *)a1 + 104))(a1)
    && (uint64_t v6 = 0, (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 504))(a1, &v6))
    && (uint64_t __src = v6,
        mlir::OperationState::addTypes(a2, &__src, 1),
        uint64_t v4 = a2 + 16,
        (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v9, __src, v4)))
  {
    return (*(unsigned __int8 (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 696))(a1, v8, __src, v4) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::arith::detail::SelectOpGenericAdaptorBase::SelectOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  unint64_t v5 = a2[11];
  unint64_t v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(void *)a1 = AttrDictionary;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(unsigned char *)(a1 + 16)) {
      *(unsigned char *)(a1 + 16) = 0;
    }
    mlir::OperationName::OperationName(a1 + 8, "arith.select", 12, Context);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void mlir::arith::SelectOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v13 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v13, 1);
  uint64_t __src = v20;
  uint64_t v19 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v17, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v16, *(void *)(a2 + 224), *(unsigned int *)(a2 + 232));
  long long v21 = v17;
  if (v19 != 1)
  {
    if (!v19)
    {
      if (HIDWORD(v19))
      {
        unsigned int v7 = 0;
LABEL_6:
        bzero((char *)__src + 8 * v7, 8 - 8 * v7);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v20, 1uLL, 8);
      unsigned int v7 = v19;
      if (v19 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    LODWORD(v19) = 1;
  }
  uint64_t v8 = mlir::ValueRange::dereference_iterator(&v21, 2);
  *(void *)uint64_t __src = *(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = __src;
  uint64_t v10 = v19;
  uint64_t v11 = *(unsigned int *)(a2 + 72);
  unint64_t v12 = v11 + v19;
  if (v12 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v12, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (v10)
  {
    memcpy((void *)(*(void *)(a2 + 64) + 8 * v11), v9, 8 * v10);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v10;
  if (__src != v20) {
    free(__src);
  }
}

uint64_t mlir::arith::SelectOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void v14[2] = *MEMORY[0x263EF8340];
  v14[0] = a4;
  v14[1] = a5;
  int v11 = *(_DWORD *)(a11 + 8);
  if (v11 != 1)
  {
    if (!v11)
    {
      if (*(_DWORD *)(a11 + 12))
      {
        unsigned int v12 = 0;
LABEL_6:
        bzero((void *)(*(void *)a11 + 8 * v12), 8 - 8 * v12);
        goto LABEL_7;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
      unsigned int v12 = *(_DWORD *)(a11 + 8);
      if (v12 != 1) {
        goto LABEL_6;
      }
    }
LABEL_7:
    *(_DWORD *)(a11 + 8) = 1;
  }
  **(void **)a11 = *(void *)(mlir::ValueRange::dereference_iterator(v14, 2) + 8) & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

uint64_t mlir::arith::SelectOp::verifyInvariantsImpl(mlir::arith::SelectOp *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!mlir::arith::__mlir_ods_local_type_constraint_ArithOps2(*(void *)this, *(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (void **)"operand", 7, 0))return 0; {
  if (*(_DWORD *)(*(void *)this + 36))
  }
    uint64_t v2 = *(void *)this - 16;
  else {
    uint64_t v2 = 0;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(void *)(*(void *)this + 72);
  unint64_t v5 = *(void *)(*(void *)(v4 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v5 == (*(void *)(*(void *)(v4 + 88) + 8) & 0xFFFFFFFFFFFFFFF8)
    && ((int v6 = *(_DWORD *)(v3 + 36), v7 = v3 - 16, v6) ? (v8 = v7) : (v8 = 0),
        v5 == (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0) + 8) & 0xFFFFFFFFFFFFFFF8)
     && (*(_DWORD *)(*(void *)this + 36) ? (uint64_t v9 = *(void *)this - 16) : (uint64_t v9 = 0),
         uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 0),
         uint64_t v11 = *(void *)(*(void *)this + 72),
         (*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v11 + 56) + 8) & 0xFFFFFFFFFFFFFFF8))))
  {
    unint64_t v50 = *(void *)(*(void *)(v11 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (mlir::Type::isSignlessInteger((mlir::Type *)&v50, 1)) {
      return 1;
    }
    long long v21 = (void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v21 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v21 + 8) : 0;
    v53[0] = v21;
    v53[1] = v22;
    uint64_t Shape = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v53);
    uint64_t v25 = v24;
    uint64_t v26 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
    uint64_t v27 = (void **)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = v27 ? (void **)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v27 + 8) : 0;
    v51[0] = v27;
    v51[1] = v28;
    long long v29 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v51);
    if (v25 == v30 && !memcmp(Shape, v29, 8 * v25))
    {
      uint64_t v31 = *(_DWORD *)(*(void *)this + 36) ? *(void *)this - 16 : 0;
      uint64_t v32 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v33 = v32 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v32 + 8) : 0;
      v49[0] = v32;
      v49[1] = v33;
      uint64_t v34 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v49);
      uint64_t v36 = v35;
      int64_t v37 = (void *)(*(void *)(*(void *)(*(void *)(*(void *)this + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v38 = v37 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v37 + 8) : 0;
      v48[0] = v37;
      v48[1] = v38;
      uint64_t v39 = (const void *)mlir::ShapedType::getShape((mlir::ShapedType *)v48);
      if (v36 == v40 && !memcmp(v34, v39, 8 * v36)) {
        return 1;
      }
    }
    v51[0] = (void **)"failed to verify that condition is scalar or has matching shape";
    __int16 v52 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v51, (uint64_t)v53);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (v60)
    {
      uint64_t v41 = __p;
      if (__p)
      {
        uint64_t v42 = v59;
        uint64_t v43 = __p;
        if (v59 != __p)
        {
          do
            uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
          while (v42 != v41);
          uint64_t v43 = __p;
        }
        uint64_t v59 = v41;
        operator delete(v43);
      }
      unint64_t v16 = v56;
      if (!v56) {
        goto LABEL_69;
      }
      unint64_t v44 = v57;
      unsigned int v18 = v56;
      if (v57 == v56) {
        goto LABEL_68;
      }
      do
      {
        uint64_t v46 = *--v44;
        uint64_t v45 = v46;
        *unint64_t v44 = 0;
        if (v46) {
          MEMORY[0x21667D390](v45, 0x1000C8077774924);
        }
      }
      while (v44 != v16);
      goto LABEL_67;
    }
  }
  else
  {
    v51[0] = (void **)"failed to verify that all of {true_value, false_value, result} have same type";
    __int16 v52 = 259;
    mlir::OpState::emitOpError((uint64_t *)this, v51, (uint64_t)v53);
    uint64_t v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
    if (v53[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
    }
    if (v60)
    {
      uint64_t v13 = __p;
      if (__p)
      {
        uint64_t v14 = v59;
        uint64_t v15 = __p;
        if (v59 != __p)
        {
          do
            uint64_t v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          uint64_t v15 = __p;
        }
        uint64_t v59 = v13;
        operator delete(v15);
      }
      unint64_t v16 = v56;
      if (!v56) {
        goto LABEL_69;
      }
      long long v17 = v57;
      unsigned int v18 = v56;
      if (v57 == v56)
      {
LABEL_68:
        uint64_t v57 = v16;
        operator delete(v18);
LABEL_69:
        if (v54 != &v55) {
          free(v54);
        }
        return v12;
      }
      do
      {
        uint64_t v20 = *--v17;
        uint64_t v19 = v20;
        void *v17 = 0;
        if (v20) {
          MEMORY[0x21667D390](v19, 0x1000C8077774924);
        }
      }
      while (v17 != v16);
LABEL_67:
      unsigned int v18 = v56;
      goto LABEL_68;
    }
  }
  return v12;
}

uint64_t mlir::arith::CmpFPredicateAttr::classof(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 0;
  }
  uint64_t v19 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v19);
  uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if (result)
  {
    uint64_t v18 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v18))
    {
      uint64_t v17 = a1;
      uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v17);
      if (result == 1) {
        return result;
      }
      uint64_t v16 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v16) != 2)
      {
        uint64_t v15 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15) != 3)
        {
          uint64_t v14 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14) != 4)
          {
            uint64_t v13 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) != 5)
            {
              uint64_t v12 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) != 6)
              {
                uint64_t v11 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) != 7)
                {
                  uint64_t v10 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 8)
                  {
                    uint64_t v9 = a1;
                    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 9)
                    {
                      uint64_t v8 = a1;
                      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 10)
                      {
                        uint64_t v7 = a1;
                        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 11)
                        {
                          uint64_t v6 = a1;
                          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 12)
                          {
                            uint64_t v5 = a1;
                            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 13)
                            {
                              uint64_t v4 = a1;
                              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 14)
                              {
                                uint64_t v3 = a1;
                                return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 15;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

uint64_t mlir::arith::CmpIPredicateAttr::classof(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 0;
  }
  uint64_t v13 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
  uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if (result)
  {
    uint64_t v12 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12))
    {
      uint64_t v11 = a1;
      uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11);
      if (result == 1) {
        return result;
      }
      uint64_t v10 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 2)
      {
        uint64_t v9 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 3)
        {
          uint64_t v8 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 4)
          {
            uint64_t v7 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 5)
            {
              uint64_t v6 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 6)
              {
                uint64_t v5 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 7)
                {
                  uint64_t v4 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 8)
                  {
                    uint64_t v3 = a1;
                    return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 9;
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

char *mlir::arith::stringifyAtomicRMWKind(unint64_t a1)
{
  if (a1 > 0xE) {
    return &byte_211F4AA5D;
  }
  else {
    return (&off_26418CCD8)[a1];
  }
}

uint64_t mlir::arith::symbolizeAtomicRMWKind(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 29295 || *(unsigned char *)(a1 + 2) != 105) {
        goto LABEL_33;
      }
      uint64_t result = 11;
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x66646461:
          uint64_t result = 0;
          break;
        case 0x69646461:
          uint64_t result = 1;
          break;
        case 0x7378616D:
          uint64_t result = 4;
          break;
        case 0x7578616D:
          uint64_t result = 5;
          break;
        case 0x736E696D:
          uint64_t result = 7;
          break;
        case 0x756E696D:
          uint64_t result = 8;
          break;
        case 0x666C756D:
          uint64_t result = 9;
          break;
        case 0x696C756D:
          uint64_t result = 10;
          break;
        case 0x69646E61:
          uint64_t result = 12;
          break;
        default:
          goto LABEL_33;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 != 1769173857 || *(_WORD *)(a1 + 4) != 28263) {
        goto LABEL_33;
      }
      uint64_t result = 2;
      break;
    case 7:
      if (*(_DWORD *)a1 == 1853383021 && *(_DWORD *)(a1 + 3) == 1718449518)
      {
        uint64_t result = 13;
      }
      else if (*(_DWORD *)a1 ^ 0x6E6E696D | *(_DWORD *)(a1 + 3) ^ 0x666D756E)
      {
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = 14;
      }
      break;
    case 8:
      if (*(void *)a1 == 0x666D756D6978616DLL)
      {
        uint64_t result = 3;
      }
      else
      {
        if (*(void *)a1 != 0x666D756D696E696DLL) {
          goto LABEL_33;
        }
        uint64_t result = 6;
      }
      break;
    default:
LABEL_33:
      uint64_t result = 0;
      break;
  }
  return result;
}

unint64_t mlir::arith::symbolizeAtomicRMWKind(unint64_t this)
{
  if (this >= 0xF) {
    return 0;
  }
  return this;
}

uint64_t mlir::arith::AtomicRMWKindAttr::classof(uint64_t a1)
{
  if (*(_UNKNOWN **)(*(void *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    return 0;
  }
  uint64_t v18 = a1;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18);
  uint64_t result = mlir::Type::isSignlessInteger((mlir::Type *)&Value, 64);
  if (result)
  {
    uint64_t v17 = a1;
    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v17))
    {
      uint64_t v16 = a1;
      uint64_t result = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v16);
      if (result == 1) {
        return result;
      }
      uint64_t v15 = a1;
      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v15) != 2)
      {
        uint64_t v14 = a1;
        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v14) != 3)
        {
          uint64_t v13 = a1;
          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v13) != 4)
          {
            uint64_t v12 = a1;
            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v12) != 5)
            {
              uint64_t v11 = a1;
              if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v11) != 6)
              {
                uint64_t v10 = a1;
                if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v10) != 7)
                {
                  uint64_t v9 = a1;
                  if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v9) != 8)
                  {
                    uint64_t v8 = a1;
                    if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v8) != 9)
                    {
                      uint64_t v7 = a1;
                      if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v7) != 10)
                      {
                        uint64_t v6 = a1;
                        if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v6) != 11)
                        {
                          uint64_t v5 = a1;
                          if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v5) != 12)
                          {
                            uint64_t v4 = a1;
                            if (mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v4) != 13)
                            {
                              uint64_t v3 = a1;
                              return mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v3) == 14;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return 1;
  }
  return result;
}

void mlir::arith::stringifyFastMathFlags(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    *(unsigned char *)(a2 + 23) = 4;
    strcpy((char *)a2, "none");
    return;
  }
  char v3 = a1;
  uint64_t v28 = &v30;
  uint64_t v29 = 0x200000000;
  if ((~a1 & 0x7F) == 0)
  {
    uint64_t v30 = "fast";
    uint64_t v31 = 4;
    LODWORD(v29) = 1;
    uint64_t v4 = (char *)v28;
    uint64_t v5 = (char *)v28 + 16;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    unsigned int v6 = 1;
    std::string::size_type v7 = 0;
    unint64_t v8 = v5 - v4 - 16;
    uint64_t v9 = v4;
    if (v8 >= 0x40) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  if (a1)
  {
    uint64_t v30 = "reassoc";
    uint64_t v31 = 7;
    unsigned int v6 = 1;
    LODWORD(v29) = 1;
    if ((a1 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unsigned int v6 = 0;
  if ((a1 & 2) != 0)
  {
LABEL_10:
    uint64_t v10 = &(&v30)[2 * v6];
    *uint64_t v10 = "nnan";
    v10[1] = (const char *)4;
    unsigned int v6 = v29 + 1;
    LODWORD(v29) = v29 + 1;
  }
LABEL_11:
  if ((a1 & 4) != 0)
  {
    if (v6 >= HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
      unsigned int v6 = v29;
    }
    uint64_t v11 = (char *)v28 + 16 * v6;
    *uint64_t v11 = "ninf";
    v11[1] = 4;
    unsigned int v6 = v29 + 1;
    LODWORD(v29) = v29 + 1;
    if ((v3 & 8) == 0)
    {
LABEL_13:
      if ((v3 & 0x10) == 0) {
        goto LABEL_14;
      }
      goto LABEL_24;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_13;
  }
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    unsigned int v6 = v29;
  }
  uint64_t v12 = (char *)v28 + 16 * v6;
  *uint64_t v12 = "nsz";
  v12[1] = 3;
  unsigned int v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x10) == 0)
  {
LABEL_14:
    if ((v3 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_24:
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    unsigned int v6 = v29;
  }
  uint64_t v13 = (char *)v28 + 16 * v6;
  *uint64_t v13 = "arcp";
  v13[1] = 4;
  unsigned int v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x20) == 0)
  {
LABEL_15:
    if ((v3 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_30:
    if (v6 >= HIDWORD(v29))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
      unsigned int v6 = v29;
    }
    uint64_t v15 = (char *)v28 + 16 * v6;
    void *v15 = "afn";
    v15[1] = 3;
    LODWORD(v29) = v29 + 1;
    unsigned int v6 = v29;
    uint64_t v4 = (char *)v28;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (!v6) {
      goto LABEL_43;
    }
LABEL_33:
    uint64_t v5 = &v4[16 * v6];
    std::string::size_type v7 = v6 - 1;
    unint64_t v8 = 16 * v6 - 16;
    uint64_t v9 = v4;
    if (v8 >= 0x40)
    {
LABEL_34:
      uint64_t v16 = (v8 >> 4) + 1;
      uint64_t v17 = v16 & 3;
      if ((v16 & 3) == 0) {
        uint64_t v17 = 4;
      }
      uint64_t v18 = v16 - v17;
      uint64_t v9 = &v4[16 * v18];
      int64x2_t v19 = 0uLL;
      int64x2_t v20 = (int64x2_t)v7;
      long long v21 = (const double *)(v4 + 40);
      do
      {
        uint64_t v22 = v21 - 4;
        unsigned long long v23 = (unsigned __int128)vld2q_f64(v22);
        unsigned long long v24 = (unsigned __int128)vld2q_f64(v21);
        int64x2_t v20 = vaddq_s64((int64x2_t)v23, v20);
        int64x2_t v19 = vaddq_s64((int64x2_t)v24, v19);
        v21 += 8;
        v18 -= 4;
      }
      while (v18);
      std::string::size_type v7 = vaddvq_s64(vaddq_s64(v19, v20));
      goto LABEL_39;
    }
    do
    {
LABEL_39:
      v7 += *((void *)v9 + 1);
      v9 += 16;
    }
    while (v9 != v5);
    std::string::reserve((std::string *)a2, v7);
    std::string::append((std::string *)a2, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    if (v6 != 1)
    {
      uint64_t v25 = v4 + 16;
      do
      {
        std::string::append((std::string *)a2, ",", 1uLL);
        uint64_t v26 = *(const std::string::value_type **)v25;
        std::string::size_type v27 = *((void *)v25 + 1);
        v25 += 16;
        std::string::append((std::string *)a2, v26, v27);
      }
      while (v25 != v5);
    }
    goto LABEL_43;
  }
LABEL_27:
  if (v6 >= HIDWORD(v29))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, &v30, v6 + 1, 16);
    unsigned int v6 = v29;
  }
  uint64_t v14 = (char *)v28 + 16 * v6;
  *uint64_t v14 = "contract";
  v14[1] = 8;
  unsigned int v6 = v29 + 1;
  LODWORD(v29) = v29 + 1;
  if ((v3 & 0x40) != 0) {
    goto LABEL_30;
  }
LABEL_16:
  uint64_t v4 = (char *)v28;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v6) {
    goto LABEL_33;
  }
LABEL_43:
  if (v28 != &v30) {
    free(v28);
  }
}

uint64_t mlir::arith::symbolizeFastMathFlags(_DWORD *a1, uint64_t a2)
{
  v24[4] = *MEMORY[0x263EF8340];
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = a2;
  if (a2 == 4 && *a1 == 1701736302)
  {
    unsigned __int8 v2 = 0;
    uint64_t v15 = 0x100000000;
    return v15 & 0x100000000 | v2;
  }
  uint64_t v22 = v24;
  uint64_t v23 = 0x200000000;
  llvm::StringRef::split(&v19, (uint64_t)&v22, ",", 1uLL, -1, 1);
  if (!v23)
  {
    unsigned __int8 v2 = 0;
LABEL_43:
    uint64_t v15 = 0x100000000;
    uint64_t v16 = v22;
    if (v22 != v24) {
      goto LABEL_44;
    }
    return v15 & 0x100000000 | v2;
  }
  unsigned __int8 v2 = 0;
  uint64_t v3 = 16 * v23;
  uint64_t v4 = (long long *)v22;
  while (2)
  {
    long long v18 = *v4;
    unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v18, " \t\n\v\f\r", 6, 0);
    if (first_not_of >= *((void *)&v18 + 1)) {
      unint64_t v7 = *((void *)&v18 + 1);
    }
    else {
      unint64_t v7 = first_not_of;
    }
    unint64_t v8 = *((void *)&v18 + 1) - v7;
    uint64_t v20 = v18 + v7;
    unint64_t v21 = *((void *)&v18 + 1) - v7;
    uint64_t last_not_of = llvm::StringRef::find_last_not_of(&v20, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    if (last_not_of + 1 < v21) {
      unint64_t v10 = last_not_of + 1;
    }
    else {
      unint64_t v10 = v21;
    }
    unint64_t v11 = v21 - v8 + v10;
    if (v21 < v11) {
      unint64_t v11 = v21;
    }
    switch(v11)
    {
      case 3uLL:
        if (*(_WORD *)v20 == 29550 && *(unsigned char *)(v20 + 2) == 122)
        {
          char v5 = 8;
          goto LABEL_6;
        }
        if (*(_WORD *)v20 == 26209 && *(unsigned char *)(v20 + 2) == 110)
        {
          char v5 = 64;
          goto LABEL_6;
        }
        goto LABEL_46;
      case 4uLL:
        switch(*(_DWORD *)v20)
        {
          case 0x6E616E6E:
            char v5 = 2;
LABEL_6:
            v2 |= v5;
            ++v4;
            v3 -= 16;
            if (!v3) {
              goto LABEL_43;
            }
            continue;
          case 0x666E696E:
            char v5 = 4;
            goto LABEL_6;
          case 0x70637261:
            char v5 = 16;
            goto LABEL_6;
          case 0x74736166:
            char v5 = 127;
            goto LABEL_6;
        }
LABEL_46:
        uint64_t v15 = 0;
        unsigned __int8 v2 = 0;
        uint64_t v16 = v22;
        if (v22 == v24) {
          return v15 & 0x100000000 | v2;
        }
LABEL_44:
        free(v16);
        return v15 & 0x100000000 | v2;
      case 7uLL:
        if (*(_DWORD *)v20 != 1935762802 || *(_DWORD *)(v20 + 3) != 1668248435) {
          goto LABEL_46;
        }
        char v5 = 1;
        goto LABEL_6;
      case 8uLL:
        if (*(void *)v20 != 0x74636172746E6F63) {
          goto LABEL_46;
        }
        char v5 = 32;
        goto LABEL_6;
      default:
        goto LABEL_46;
    }
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(uint64_t a1)
{
  unint64_t v1 = &unk_267771000;
  {
    uint64_t v20 = a1;
    unint64_t v1 = (void *)&unk_267771000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypedAttr]";
      unint64_t v22 = 65;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::TypedAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = (void *)&unk_267771000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[278];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

BOOL mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  unint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41) {
    return *(void *)v1 == 0;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    unint64_t v1 = *(llvm::APInt **)v1;
    return *(void *)v1 == 0;
  }
  return 0;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(uint64_t a1)
{
  unint64_t v1 = &unk_267770000;
  {
    uint64_t v20 = a1;
    unint64_t v1 = (void *)&unk_267770000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      unint64_t v22 = 66;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = (void *)&unk_267770000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[381];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      uint64_t v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

BOOL mlir::m_One(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  unint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41) {
    return *(void *)v1 == 1;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    unint64_t v1 = *(llvm::APInt **)v1;
    return *(void *)v1 == 1;
  }
  return 0;
}

BOOL mlir::m_NonZero(void)::{lambda(llvm::APInt const&)#1}::__invoke(llvm::APInt *this)
{
  unint64_t v1 = this;
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 < 0x41) {
    return *(void *)v1 != 0;
  }
  if (v2 - llvm::APInt::countLeadingZerosSlowCase(this) <= 0x40)
  {
    unint64_t v1 = *(llvm::APInt **)v1;
    return *(void *)v1 != 0;
  }
  return 1;
}

uint64_t mlir::m_NegZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 7) == 3) {
      return (v3 >> 3) & 1;
    }
  }
  else
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
    if ((v3 & 7) == 3) {
      return (v3 >> 3) & 1;
    }
  }
  return 0;
}

BOOL mlir::m_PosZeroFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    char v3 = *(unsigned char *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 7) == 3) {
      return (v3 & 8) == 0;
    }
  }
  else
  {
    char v3 = *(unsigned char *)(a1 + 28);
    if ((v3 & 7) == 3) {
      return (v3 & 8) == 0;
    }
  }
  return 0;
}

BOOL mlir::m_NegInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    char v3 = *(unsigned char *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 8) == 0) {
      return 0;
    }
  }
  else
  {
    char v3 = *(unsigned char *)(a1 + 28);
    if ((v3 & 8) == 0) {
      return 0;
    }
  }
  return (v3 & 7) == 0;
}

BOOL mlir::m_PosInfFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v2)
  {
    char v3 = *(unsigned char *)(*(void *)(a1 + 16) + 28);
    if ((v3 & 8) == 0) {
      return (v3 & 7) == 0;
    }
  }
  else
  {
    char v3 = *(unsigned char *)(a1 + 28);
    if ((v3 & 8) == 0) {
      return (v3 & 7) == 0;
    }
  }
  return 0;
}

BOOL mlir::m_OneFloat(void)::{lambda(llvm::APFloat const&)#1}::__invoke(void *a1)
{
  v7[3] = *MEMORY[0x263EF8340];
  unint64_t v1 = (const llvm::detail::DoubleAPFloat *)(a1 + 1);
  uint64_t v2 = a1[1];
  char v3 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v3 == (void *)v2) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v2);
  }
  uint64_t v4 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, v2, (llvm::APInt *)1);
  if (v3 == (void *)v7[0])
  {
    int v5 = llvm::detail::DoubleAPFloat::compare(v4, v1);
    if (v3 != (void *)v7[0]) {
      goto LABEL_4;
    }
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v7);
    return v5 == 1;
  }
  int v5 = llvm::detail::IEEEFloat::compare(v4, v1);
  if (v3 == (void *)v7[0]) {
    goto LABEL_7;
  }
LABEL_4:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v7);
  return v5 == 1;
}

BOOL llvm::APFloat::operator==(void *a1, uint64_t a2)
{
  char v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  uint64_t v4 = (void *)a1[1];
  int v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  unint64_t v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4) {
    return llvm::detail::DoubleAPFloat::compare(v3, v6) == 1;
  }
  else {
    return llvm::detail::IEEEFloat::compare(v3, v6) == 1;
  }
}

__n128 mlir::DenseElementsAttr::tryGetValues<mlir::BoolAttr,void>@<Q0>(mlir::ArrayAttr *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t Value = mlir::ArrayAttr::getValue(a1);
  unint64_t v6 = v5;
  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(v15, *(void *)a1, 0);
  uint64_t v7 = *(void *)a1;
  uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v14, v7, NumElements);
  unint64_t v9 = v15[0];
  unint64_t v10 = v15[1];
  mlir::ArrayAttr::getValue(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(v15, *(void *)a1, 0);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = mlir::DenseElementsAttr::getNumElements(a1);
  ZinMirCacheTensors::ZinMirCacheTensors(&v14, v11, v12);
  __n128 result = v14;
  a2->n128_u64[0] = v9;
  a2->n128_u64[1] = v10;
  a2[1] = result;
  a2[2].n128_u64[0] = Value;
  a2[2].n128_u64[1] = v6;
  a2[3].n128_u8[0] = 1;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::arith::__mlir_ods_local_attr_constraint_ArithOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  __int16 v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::detail::constant_int_value_binder::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  char v3 = *(void **)(*(void *)a2 + 136);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v17[0] = v5;
  if (v4)
  {
    mlir::IntegerAttr::getValue((uint64_t)v17, (llvm::APInt *)&v18);
    if (*(_DWORD *)(v2 + 8) >= 0x41u && *(void *)v2) {
      MEMORY[0x21667D390](*(void *)v2, 0x1000C8000313F17);
    }
    *(void *)uint64_t v2 = v18;
    *(_DWORD *)(v2 + 8) = v19;
    return 1;
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(a2)) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v18 = v7;
    if (v7
      && (!mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v18) ? (uint64_t v7 = 0) : (uint64_t v7 = a2),
          (uint64_t v16 = v7) != 0))
    {
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v16);
      ZinMirCacheTensors::ZinMirCacheTensors(&v18, v16, 0);
      uint64_t v8 = v16;
      uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v16);
      ZinMirCacheTensors::ZinMirCacheTensors(v17, v8, NumElements);
      uint64_t v10 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v18);
      uint64_t v11 = *(void **)(*(void *)v10 + 136);
      BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
      BOOL v13 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
      if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        uint64_t v14 = v10;
      }
      else {
        uint64_t v14 = 0;
      }
      v17[0] = v14;
      if (v12)
      {
        mlir::IntegerAttr::getValue((uint64_t)v17, (llvm::APInt *)&v18);
        if (*(_DWORD *)(v2 + 8) >= 0x41u)
        {
          if (*(void *)v2) {
            MEMORY[0x21667D390](*(void *)v2, 0x1000C8000313F17);
          }
        }
        *(void *)uint64_t v2 = v18;
        *(_DWORD *)(v2 + 8) = v19;
      }
      return v13;
    }
    else
    {
      return v7 & a2;
    }
  }
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(uint64_t a1)
{
  unint64_t v1 = &unk_267770000;
  {
    uint64_t v20 = a1;
    unint64_t v1 = (void *)&unk_267770000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ElementsAttr]";
      unint64_t v22 = 68;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::ElementsAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = (void *)&unk_267770000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v1[415];
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    uint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    uint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void *mlir::DenseElementsAttr::getSplatValue<llvm::APInt>@<X0>(mlir::DenseElementsAttr *a1@<X0>, llvm::APInt *a2@<X8>)
{
  mlir::DenseElementsAttr::getValues<llvm::APInt>(a1, (uint64_t)v5);
  v4[0] = v5[0];
  v4[1] = v5[1];
  return mlir::DenseElementsAttr::IntElementIterator::operator*(v4, a2);
}

uint64_t mlir::ElementsAttr::try_value_begin<llvm::APInt>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = &unk_267771000;
  {
    uint64_t v17 = a1;
    unint64_t v3 = (void *)&unk_267771000;
    int v9 = v8;
    a1 = v17;
    if (v9)
    {
      unint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APInt]";
      unint64_t v19 = 61;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v19;
      }
      int v12 = &v18[v11];
      unint64_t v13 = v19 - v11;
      if (v19 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v19 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<llvm::APInt,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      unint64_t v3 = (void *)&unk_267771000;
      a1 = v17;
    }
  }
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v3[284]);
  if (v20)
  {
    char v5 = BYTE1(v18);
    if ((_BYTE)v18)
    {
      unint64_t v6 = v19;
      *(unsigned char *)a2 = (_BYTE)v18;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v6;
    }
    else
    {
      unint64_t v7 = v19;
      unint64_t v19 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v7;
    }
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

void llvm::SmallVectorImpl<llvm::APInt>::reserve(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 12) < a2)
  {
    unint64_t v15 = 0;
    unint64_t v3 = (_DWORD *)(a1 + 16);
    BOOL v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v15);
    char v5 = v4;
    unint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      int v8 = v4 + 8;
      uint64_t v9 = 16 * v7;
      unint64_t v10 = v6 + 2;
      do
      {
        *int v8 = *v10;
        *((void *)v8 - 1) = *((void *)v10 - 1);
        *unint64_t v10 = 0;
        v10 += 4;
        v8 += 4;
        v9 -= 16;
      }
      while (v9);
      unint64_t v6 = *(_DWORD **)a1;
      uint64_t v11 = *(unsigned int *)(a1 + 8);
      if (v11)
      {
        uint64_t v12 = 4 * v11;
        do
        {
          if (v6[v12 - 2] >= 0x41u)
          {
            uint64_t v13 = *(void *)&v6[v12 - 4];
            if (v13) {
              MEMORY[0x21667D390](v13, 0x1000C8000313F17);
            }
          }
          v12 -= 4;
        }
        while (v12 * 4);
        unint64_t v6 = *(_DWORD **)a1;
      }
    }
    int v14 = v15;
    if (v6 != v3) {
      free(v6);
    }
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v14;
  }
}

llvm::APInt *llvm::SmallVectorTemplateBase<llvm::APInt,false>::push_back(uint64_t a1, unint64_t a2)
{
  Address = llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress(a1, a2, 1);
  uint64_t result = (llvm::APInt *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 8));
  unsigned int v5 = *((_DWORD *)Address + 2);
  *((_DWORD *)result + 2) = v5;
  if (v5 > 0x40) {
    llvm::APInt::initSlowCase(result, (const llvm::APInt *)Address);
  }
  *(void *)uint64_t result = *(void *)Address;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

char **llvm::SmallVector<llvm::APInt,4u>::~SmallVector(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 8] >= 0x41u)
      {
        uint64_t v5 = *(void *)&v2[v4 - 16];
        if (v5) {
          MEMORY[0x21667D390](v5, 0x1000C8000313F17);
        }
      }
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

double mlir::DenseElementsAttr::getValues<llvm::APInt>@<D0>(mlir::DenseElementsAttr *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *(void *)unint64_t v19 = mlir::DenseElementsAttr::getElementType(a1);
  if (mlir::Type::isIntOrIndex((mlir::Type *)v19))
  {
    uint64_t Value = mlir::ArrayAttr::getValue(a1);
    uint64_t v2 = v6;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v14, *(void *)a1, 0);
    uint64_t v7 = *(void *)a1;
    uint64_t NumElements = mlir::DenseElementsAttr::getNumElements(a1);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v12, v7, NumElements);
    char v9 = v14;
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v15;
    *(_OWORD *)&v19[15] = *(_OWORD *)&v15[15];
    *(_OWORD *)&v19[31] = v12;
    *(_OWORD *)&v19[47] = v13;
    *(_OWORD *)&v18[15] = v13;
    long long v16 = *(_OWORD *)v19;
    long long v17 = *(_OWORD *)&v19[16];
    *(_OWORD *)unint64_t v18 = *(_OWORD *)&v19[32];
  }
  else
  {
    char v9 = 0;
  }
  *(unsigned char *)a2 = v9;
  long long v10 = v17;
  *(_OWORD *)(a2 + 1) = v16;
  *(_OWORD *)(a2 + 17) = v10;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)v18;
  double result = *(double *)&v18[15];
  *(_OWORD *)(a2 + 48) = *(_OWORD *)&v18[15];
  *(void *)(a2 + 64) = Value;
  *(void *)(a2 + 72) = v2;
  return result;
}

char *llvm::SmallVectorTemplateBase<llvm::APInt,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v8 = *(void *)a1 + 16 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v22 = a2 - *(void *)a1;
      unint64_t v36 = 0;
      uint64_t v23 = (_DWORD *)(a1 + 16);
      unsigned long long v24 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v36);
      uint64_t v25 = v24;
      uint64_t v26 = *(_DWORD **)a1;
      uint64_t v27 = *(unsigned int *)(a1 + 8);
      if (v27)
      {
        uint64_t v28 = v24 + 8;
        uint64_t v29 = 16 * v27;
        uint64_t v30 = v26 + 2;
        do
        {
          _DWORD *v28 = *v30;
          *((void *)v28 - 1) = *((void *)v30 - 1);
          *uint64_t v30 = 0;
          v30 += 4;
          v28 += 4;
          v29 -= 16;
        }
        while (v29);
        uint64_t v26 = *(_DWORD **)a1;
        uint64_t v31 = *(unsigned int *)(a1 + 8);
        if (v31)
        {
          uint64_t v32 = 4 * v31;
          do
          {
            if (v26[v32 - 2] >= 0x41u)
            {
              uint64_t v33 = *(void *)&v26[v32 - 4];
              if (v33) {
                MEMORY[0x21667D390](v33, 0x1000C8000313F17);
              }
            }
            v32 -= 4;
          }
          while (v32 * 4);
          uint64_t v26 = *(_DWORD **)a1;
        }
      }
      uint64_t v34 = v22 >> 4;
      int v35 = v36;
      if (v26 != v23) {
        free(v26);
      }
      *(void *)a1 = v25;
      *(_DWORD *)(a1 + 12) = v35;
      return &v25[16 * v34];
    }
    else
    {
      unint64_t v36 = 0;
      long long v10 = (_DWORD *)(a1 + 16);
      uint64_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v36);
      long long v12 = v11;
      long long v13 = *(_DWORD **)a1;
      uint64_t v14 = *(unsigned int *)(a1 + 8);
      if (v14)
      {
        unint64_t v15 = v11 + 8;
        uint64_t v16 = 16 * v14;
        long long v17 = v13 + 2;
        do
        {
          _DWORD *v15 = *v17;
          *((void *)v15 - 1) = *((void *)v17 - 1);
          _DWORD *v17 = 0;
          v17 += 4;
          v15 += 4;
          v16 -= 16;
        }
        while (v16);
        long long v13 = *(_DWORD **)a1;
        uint64_t v18 = *(unsigned int *)(a1 + 8);
        if (v18)
        {
          uint64_t v19 = 4 * v18;
          do
          {
            if (v13[v19 - 2] >= 0x41u)
            {
              uint64_t v20 = *(void *)&v13[v19 - 4];
              if (v20) {
                MEMORY[0x21667D390](v20, 0x1000C8000313F17);
              }
            }
            v19 -= 4;
          }
          while (v19 * 4);
          long long v13 = *(_DWORD **)a1;
        }
      }
      int v21 = v36;
      if (v13 != v10) {
        free(v13);
      }
      *(void *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v21;
    }
  }
  return (char *)v3;
}

void anonymous namespace'::AddIAddConstant::~AddIAddConstant(_anonymous_namespace_::AddIAddConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AddIAddConstant::matchAndRewrite(_anonymous_namespace_::AddIAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  uint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        long long v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      long long v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      long long v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  long long v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

uint64_t anonymous namespace'::static_dag_matcher_1(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
      uint64_t v9 = *(void *)(a2 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
    *a4 = v9;
    a4[1] = 1;
    uint64_t v17 = *(void *)(*(void *)(a2 + 72) + 56);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
    if (DefiningOp)
    {
      uint64_t v11 = DefiningOp;
      {
        uint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        return 1;
      }
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 16);
    if (!v15) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    if (!v14) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

uint64_t anonymous namespace'::static_dag_matcher_2(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v15[1] = *MEMORY[0x263EF8340];
  uint64_t v12 = (void **)(a2 - 16);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp) {
    goto LABEL_11;
  }
  uint64_t v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_11;
  }
  long long v13 = v15;
  uint64_t v14 = 0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)&v13);
  unint64_t v8 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
  if (v13 != v15) {
    free(v13);
  }
  if (v8)
  {
    *a3 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    long long v13 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    uint64_t v14 = 176;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      return 1;
    }
    uint64_t v12 = &v13;
    if (v9 && mlir::RewriterBase::Listener::classof(v9)) {
    return 0;
    }
  }
  else
  {
LABEL_11:
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(v11);
    if (result) {
  }
    }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::IntegerAttr &>(mlir::OpBuilder *a1, uint64_t a2, void **a3)
{
  v19[38] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v8)
  {
    __int16 v18 = 1283;
    void v17[2] = (uint64_t)"arith.constant";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v7);
  uint64_t v9 = *a3;
  if (v9) {
    uint64_t v10 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  mlir::arith::ConstantOp::build((uint64_t)a1, (uint64_t)v19, (uint64_t)v9, v10);
  uint64_t v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((void *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::AddIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.addi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.addi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    long long v13 = v12;
  }
  else {
    long long v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t anonymous namespace'::static_dag_matcher_0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v15[1] = *MEMORY[0x263EF8340];
  int v12 = (void **)(a2 - 16);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!DefiningOp) {
    goto LABEL_11;
  }
  uint64_t v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_11;
  }
  long long v13 = v15;
  uint64_t v14 = 0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)&v13);
  unint64_t v8 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
  if (v13 != v15) {
    free(v13);
  }
  if (v8)
  {
    *a3 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    long long v13 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Constant(&"
          "$0)))' failed to satisfy constraint: 'arbitrary integer attribute'";
    uint64_t v14 = 176;
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      return 1;
    }
    int v12 = &v13;
    if (v9 && mlir::RewriterBase::Listener::classof(v9)) {
    return 0;
    }
  }
  else
  {
LABEL_11:
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(v11);
    if (result) {
  }
    }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "castedOp1 is not ::mlir::arith::AddIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_1(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>(void *a1)
{
  unint64_t v1 = &unk_267770000;
  {
    int v12 = a1;
    unint64_t v1 = (void *)&unk_267770000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      long long v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ConstantLike<Empty>]";
      unint64_t v14 = 84;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = (void *)&unk_267770000;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, void))(*(void *)*a1 + 32))(*a1, v1[387]);
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_0(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization0(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(void ****a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  __int16 v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  uint64_t v4 = mlir::Diagnostic::operator<<(a2, v14);
  uint64_t v5 = v4 + 16;
  unint64_t v6 = *(void *)(v4 + 16);
  int v16 = 3;
  __int16 v17 = ": arbitrary integer attribute";
  uint64_t v18 = 29;
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  unint64_t v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    unint64_t v11 = v7 + 1;
    BOOL v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      long long v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      unint64_t v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      unint64_t v8 = (__n128 *)&v16;
    }
  }
  unint64_t v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  __n128 result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *unint64_t v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_2(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  long long v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t applyToIntegerAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *), uint64_t a5)
{
  uint64_t v13 = a2;
  mlir::IntegerAttr::getValue((uint64_t)&v13, (llvm::APInt *)&v15);
  uint64_t v11 = a3;
  mlir::IntegerAttr::getValue((uint64_t)&v11, (llvm::APInt *)&v13);
  a4(&v11, a5, &v15, &v13);
  uint64_t v9 = mlir::IntegerAttr::get(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8, (const llvm::APInt *)&v11);
  if (v12 >= 0x41 && v11) {
    MEMORY[0x21667D390](v11, 0x1000C8000313F17);
  }
  if (v14 >= 0x41 && v13) {
    MEMORY[0x21667D390](v13, 0x1000C8000313F17);
  }
  if (v16 >= 0x41 && v15) {
    MEMORY[0x21667D390](v15, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::plus<llvm::APInt>>@<X0>(const llvm::APInt *a1@<X1>, void **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)a1 + 2);
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v5, a1);
  }
  uint64_t v5 = *(void *)a1;
  uint64_t result = llvm::APInt::operator+=((uint64_t)&v5, a2);
  *(_DWORD *)(a3 + 8) = v6;
  *(void *)a3 = v5;
  return result;
}

void anonymous namespace'::AddISubConstantRHS::~AddISubConstantRHS(_anonymous_namespace_::AddISubConstantRHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AddISubConstantRHS::matchAndRewrite(_anonymous_namespace_::AddISubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  uint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      __int16 v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      __int16 v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  __int16 v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

uint64_t anonymous namespace'::static_dag_matcher_5(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
      uint64_t v9 = *(void *)(a2 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
    *a4 = v9;
    a4[1] = 1;
    uint64_t v17 = *(void *)(*(void *)(a2 + 72) + 56);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v17);
    if (DefiningOp)
    {
      uint64_t v11 = DefiningOp;
      {
        uint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        return 1;
      }
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 16);
    if (!v15) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  else
  {
    uint64_t v14 = *(void *)(a1 + 16);
    if (!v14) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_5(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_5(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &,mlir::Attribute &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::minus<llvm::APInt>>@<X0>(const llvm::APInt *a1@<X1>, void **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)a1 + 2);
  if (v6 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v5, a1);
  }
  uint64_t v5 = *(void *)a1;
  uint64_t result = llvm::APInt::operator-=((uint64_t)&v5, a2);
  *(_DWORD *)(a3 + 8) = v6;
  *(void *)a3 = v5;
  return result;
}

void anonymous namespace'::AddISubConstantLHS::~AddISubConstantLHS(_anonymous_namespace_::AddISubConstantLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AddISubConstantLHS::matchAndRewrite(_anonymous_namespace_::AddISubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v19[0] = v4;
  v19[1] = v5;
  uint64_t v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

uint64_t anonymous namespace'::static_dag_matcher_4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void *a5)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
  {
    uint64_t v18 = *(void *)(*(void *)(a2 + 72) + 24);
    uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v18);
    if (DefiningOp)
    {
      uint64_t v11 = DefiningOp;
      {
        uint64_t v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(a3 + 8);
        }
        *(void *)(*(void *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
          uint64_t v13 = *(void *)(a2 + 72);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t result = 1;
        *a5 = v13 + 32;
        a5[1] = 1;
        return result;
      }
      return 0;
    }
    uint64_t v16 = *(void *)(a1 + 16);
    if (!v16) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  else
  {
    uint64_t v15 = *(void *)(a1 + 16);
    if (!v15) {
      return 0;
    }
    uint64_t result = mlir::RewriterBase::Listener::classof(*(void *)(a1 + 16));
    if (result) {
  }
    }
  return result;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::SubIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.subi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.subi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_4(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_4(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &,mlir::OperandRange &)::$_1>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddISubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::AddIMulNegativeOneRhs::~AddIMulNegativeOneRhs(_anonymous_namespace_::AddIMulNegativeOneRhs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(_anonymous_namespace_::AddIMulNegativeOneRhs *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v36[4] = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  uint64_t v34 = v36;
  v36[0] = a2;
  uint64_t v35 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v28 = *(void **)(*((void *)v5 + 9) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, &v28);
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  uint64_t v28 = *(void **)(*(void *)(DefiningOp + 72) + 56);
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (v13)
  {
    uint64_t v14 = v13;
    {
      int v15 = v35;
      if (v35 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        int v15 = v35;
      }
      v34[v15] = v14;
      uint64_t v16 = (v35 + 1);
      LODWORD(v35) = v16;
      if (v16 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16 + 1, 8);
        LODWORD(v16) = v35;
      }
      v34[v16] = v7;
      LODWORD(v35) = v35 + 1;
      uint64_t v17 = v27;
      LODWORD(v29) = 1;
      uint64_t v28 = 0;
      uint64_t v32 = &v28;
      if (v27)
      {
        char v18 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v32, v27);
        unsigned int v19 = v29;
        if (v18)
        {
          unint64_t v20 = v28;
          LODWORD(v33) = 1;
          uint64_t v32 = 0;
          uint64_t v31 = &v32;
          int v21 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v31, v17);
          int v22 = v33;
          if (v21)
          {
            LODWORD(v29) = v33;
            uint64_t v28 = v32;
            LOBYTE(v30) = 1;
          }
          else
          {
            LOBYTE(v28) = 0;
            LOBYTE(v30) = 0;
            if (v33 >= 0x41)
            {
              if (v32) {
                MEMORY[0x21667D390](v32, 0x1000C8000313F17);
              }
              goto LABEL_37;
            }
          }
          if (!v33)
          {
            if (v19 >= 0x41 && v20) {
              MEMORY[0x21667D390](v20, 0x1000C8000313F17);
            }
            goto LABEL_54;
          }
          if (v33 <= 0x40)
          {
            BOOL v23 = v28 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33);
            goto LABEL_40;
          }
LABEL_37:
          BOOL v23 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v28) == v22;
          if (v21 && v28) {
            MEMORY[0x21667D390](v28, 0x1000C8000313F17);
          }
LABEL_40:
          if (v19 >= 0x41 && v20) {
            MEMORY[0x21667D390](v20, 0x1000C8000313F17);
          }
          if (!v23) {
            goto LABEL_44;
          }
LABEL_54:
          uint64_t v26 = *(void *)(v34[1] + 24);
          uint64_t v28 = *(void **)(*v34 + 24);
          uint64_t v29 = v26;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v28, (mlir::MLIRContext *)2, 0);
        }
        if (v29 >= 0x41 && v28) {
          MEMORY[0x21667D390](v28, 0x1000C8000313F17);
        }
      }
LABEL_44:
      uint64_t v24 = *((void *)a3 + 2);
      if (v24 && mlir::RewriterBase::Listener::classof(v24))
      {
LABEL_13:
        uint64_t v8 = v11;
        int v12 = v34;
        if (v34 == v36) {
          return v8;
        }
        goto LABEL_49;
      }
    }
  }
  else
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
      goto LABEL_12;
    }
  }
LABEL_47:
  uint64_t v8 = 0;
LABEL_48:
  int v12 = v34;
  if (v34 != v36) {
LABEL_49:
  }
    free(v12);
  return v8;
}

uint64_t anonymous namespace'::static_dag_matcher_3(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  v13[1] = *MEMORY[0x263EF8340];
  uint64_t v11 = a2 - 16;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp) {
    goto LABEL_7;
  }
  uint64_t v7 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48))) {
    goto LABEL_7;
  }
  v12[0] = v13;
  v12[1] = (void *)0x100000000;
  mlir::Operation::fold(v7, 0, 0, (uint64_t)v12);
  unint64_t v8 = *(void *)v12[0] & 0xFFFFFFFFFFFFFFF8;
  if (v12[0] != v13) {
    free(v12[0]);
  }
  if (v8)
  {
    *a3 = v8;
    return 1;
  }
  else
  {
LABEL_7:
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      uint64_t result = mlir::RewriterBase::Listener::classof(v10);
      if (result) {
    }
      }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_3(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::Attribute &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "::mlir::success(::mlir::matchPattern(op0->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneRhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'c0' failed to satisfy constraint: ''";
  uint64_t v14 = 46;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::AddIMulNegativeOneLhs::~AddIMulNegativeOneLhs(_anonymous_namespace_::AddIMulNegativeOneLhs *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(_anonymous_namespace_::AddIMulNegativeOneLhs *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v36[4] = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  uint64_t v34 = v36;
  v36[0] = a2;
  uint64_t v35 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v28 = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, &v28);
      goto LABEL_13;
    }
    goto LABEL_47;
  }
  uint64_t v28 = *(void **)(*(void *)(DefiningOp + 72) + 56);
  uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v28);
  if (v13)
  {
    uint64_t v14 = v13;
    {
      int v15 = v35;
      if (v35 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v35 + 1, 8);
        int v15 = v35;
      }
      v34[v15] = v14;
      uint64_t v16 = (v35 + 1);
      LODWORD(v35) = v16;
      if (v16 >= HIDWORD(v35))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16 + 1, 8);
        LODWORD(v16) = v35;
      }
      v34[v16] = v7;
      LODWORD(v35) = v35 + 1;
      uint64_t v17 = v27;
      LODWORD(v29) = 1;
      uint64_t v28 = 0;
      uint64_t v32 = &v28;
      if (v27)
      {
        char v18 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v32, v27);
        unsigned int v19 = v29;
        if (v18)
        {
          unint64_t v20 = v28;
          LODWORD(v33) = 1;
          uint64_t v32 = 0;
          uint64_t v31 = &v32;
          int v21 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v31, v17);
          int v22 = v33;
          if (v21)
          {
            LODWORD(v29) = v33;
            uint64_t v28 = v32;
            LOBYTE(v30) = 1;
          }
          else
          {
            LOBYTE(v28) = 0;
            LOBYTE(v30) = 0;
            if (v33 >= 0x41)
            {
              if (v32) {
                MEMORY[0x21667D390](v32, 0x1000C8000313F17);
              }
              goto LABEL_37;
            }
          }
          if (!v33)
          {
            if (v19 >= 0x41 && v20) {
              MEMORY[0x21667D390](v20, 0x1000C8000313F17);
            }
            goto LABEL_54;
          }
          if (v33 <= 0x40)
          {
            BOOL v23 = v28 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33);
            goto LABEL_40;
          }
LABEL_37:
          BOOL v23 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v28) == v22;
          if (v21 && v28) {
            MEMORY[0x21667D390](v28, 0x1000C8000313F17);
          }
LABEL_40:
          if (v19 >= 0x41 && v20) {
            MEMORY[0x21667D390](v20, 0x1000C8000313F17);
          }
          if (!v23) {
            goto LABEL_44;
          }
LABEL_54:
          uint64_t v26 = *(void *)(v34[1] + 24);
          uint64_t v28 = *(void **)(*v34 + 24);
          uint64_t v29 = v26;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v28, (mlir::MLIRContext *)2, 0);
        }
        if (v29 >= 0x41 && v28) {
          MEMORY[0x21667D390](v28, 0x1000C8000313F17);
        }
      }
LABEL_44:
      uint64_t v24 = *((void *)a3 + 2);
      if (v24 && mlir::RewriterBase::Listener::classof(v24))
      {
LABEL_13:
        uint64_t v8 = v11;
        int v12 = v34;
        if (v34 == v36) {
          return v8;
        }
        goto LABEL_49;
      }
    }
  }
  else
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_48;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
      goto LABEL_12;
    }
  }
LABEL_47:
  uint64_t v8 = 0;
LABEL_48:
  int v12 = v34;
  if (v34 != v36) {
LABEL_49:
  }
    free(v12);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddIMulNegativeOneLhs::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'c0' failed to satisfy constraint: ''";
  uint64_t v14 = 46;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::detail::constant_int_predicate_matcher::match(uint64_t (**this)(uint64_t *), mlir::Operation *a2)
{
  v15[1] = *MEMORY[0x263EF8340];
  unsigned int v13 = 1;
  uint64_t v11 = &v12;
  uint64_t v12 = 0;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)a2 + 6)) {
    goto LABEL_19;
  }
  v14[0] = v15;
  v14[1] = (void *)0x100000000;
  mlir::Operation::fold((uint64_t)a2, 0, 0, (uint64_t)v14);
  unint64_t v4 = *(void *)v14[0] & 0xFFFFFFFFFFFFFFF8;
  if (v14[0] != v15) {
    free(v14[0]);
  }
  if (v4
    && ((uint64_t v5 = *(void **)(*(void *)(*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 136),
         v5 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      ? (BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      : (BOOL v6 = 1),
        !v6 ? (BOOL v7 = v5 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v7 = 1),
        !v7 ? (BOOL v8 = v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) : (BOOL v8 = 1),
        v8 && mlir::detail::constant_int_value_binder::match((uint64_t *)&v11, v4)))
  {
    uint64_t v9 = (*this)(&v12);
    if (v13 < 0x41) {
      return v9;
    }
  }
  else
  {
LABEL_19:
    uint64_t v9 = 0;
    if (v13 < 0x41) {
      return v9;
    }
  }
  if (v12) {
    MEMORY[0x21667D390](v12, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t mlir::constFoldBinaryOpConditional<mlir::IntegerAttr,llvm::APInt,void,mlir::Attribute mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,void,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&)>(llvm::ArrayRef<mlir::Attribute>,mlir::Type,llvm::APInt (&)(llvm::APInt const&,llvm::APInt const&) &&)::{lambda(llvm::APInt,llvm::APInt)#1}>(uint64_t *a1, uint64_t a2, void *a3, void (**a4)(char **__return_ptr, uint64_t *, uint64_t *))
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v6 = a1[1];
  if (!v6) {
    return 0;
  }
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && *(_UNKNOWN **)(*(void *)v6 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    uint64_t v52 = *a1;
    uint64_t v49 = v6;
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v52);
    if (Value == mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v49))
    {
      mlir::IntegerAttr::getValue((uint64_t)&v52, (llvm::APInt *)&v69);
      mlir::IntegerAttr::getValue((uint64_t)&v49, (llvm::APInt *)&v67);
      (*a4)(&v56, &v69, &v67);
      LODWORD(v74) = v57;
      uint64_t v73 = (llvm::APInt *)v56;
      char v75 = 1;
      if (v68 >= 0x41 && v67) {
        MEMORY[0x21667D390](v67, 0x1000C8000313F17);
      }
      if (v70 >= 0x41 && v69) {
        MEMORY[0x21667D390](v69, 0x1000C8000313F17);
      }
      uint64_t v15 = mlir::IntegerAttr::get((uint64_t)a3, (const llvm::APInt *)&v73);
      goto LABEL_37;
    }
    return 0;
  }
  if (mlir::DenseElementsAttr::classof(*a1)) {
    uint64_t v9 = (char *)v5;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v73 = (llvm::APInt *)v9;
  if (v9 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v73))
  {
    uint64_t v10 = a1[1];
    uint64_t v11 = mlir::DenseElementsAttr::classof(v10) ? (char *)v10 : 0;
    uint64_t v73 = (llvm::APInt *)v11;
    if (v11)
    {
      if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v73))
      {
        uint64_t v12 = a1[1];
        uint64_t v52 = *a1;
        uint64_t v49 = v12;
        uint64_t v13 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v52);
        if (v13 == mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v49))
        {
          mlir::DenseElementsAttr::getSplatValue<llvm::APInt>((mlir::DenseElementsAttr *)&v52, (llvm::APInt *)&v65);
          mlir::DenseElementsAttr::getSplatValue<llvm::APInt>((mlir::DenseElementsAttr *)&v49, (llvm::APInt *)&v63);
          (*a4)(&v56, &v65, &v63);
          LODWORD(v74) = v57;
          uint64_t v73 = (llvm::APInt *)v56;
          char v75 = 1;
          if (v64 >= 0x41 && v63) {
            MEMORY[0x21667D390](v63, 0x1000C8000313F17);
          }
          if (v66 >= 0x41 && v65) {
            MEMORY[0x21667D390](v65, 0x1000C8000313F17);
          }
          uint64_t v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
          uint64_t v15 = mlir::DenseElementsAttr::get((uint64_t)a3, v14, (llvm::APInt *)&v73, 1);
LABEL_37:
          uint64_t v21 = v15;
          if (v75 && v74 >= 0x41 && v73) {
            MEMORY[0x21667D390](v73, 0x1000C8000313F17);
          }
          return v21;
        }
        return 0;
      }
    }
  }
  if (!mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)*a1 + 8)
    || !mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*(void *)a1[1] + 8))
  {
    return 0;
  }
  uint64_t v16 = (void *)*a1;
  if (*a1)
  {
    uint64_t v17 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v16 + 8);
    uint64_t v61 = v16;
    uint64_t v62 = v17;
    char v18 = (void *)a1[1];
    if (v18)
    {
LABEL_28:
      uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v18 + 8);
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    char v18 = (void *)a1[1];
    if (v18) {
      goto LABEL_28;
    }
  }
  uint64_t v19 = 0;
LABEL_43:
  v60[0] = v18;
  v60[1] = v19;
  uint64_t Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v61);
  if (Type != mlir::ElementsAttr::getType((mlir::ElementsAttr *)v60)) {
    return 0;
  }
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v61, (uint64_t)&v56);
  mlir::ElementsAttr::try_value_begin<llvm::APInt>((mlir::BranchOpInterface *)v60, (uint64_t)&v52);
  uint64_t v21 = 0;
  int v24 = v55;
  if (v59 && v55)
  {
    LOWORD(v49) = (_WORD)v56;
    if ((_BYTE)v56) {
      uint64_t v50 = v57;
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v57 + 16))(&v50);
    }
    uint64_t v51 = v58;
    __int16 v46 = v52;
    if ((_BYTE)v52) {
      uint64_t v47 = v53;
    }
    else {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v53 + 16))(&v47);
    }
    uint64_t v48 = v54;
    uint64_t v73 = (llvm::APInt *)&v75;
    uint64_t v74 = 0x400000000;
    unint64_t NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v61, v62);
    llvm::SmallVectorImpl<llvm::APInt>::reserve((uint64_t)&v73, NumElements);
    uint64_t v26 = mlir::ElementsAttr::getNumElements((uint64_t)v61, v62);
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = v51;
      do
      {
        if (BYTE1(v49)) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = v28;
        }
        if ((_BYTE)v49)
        {
          uint64_t v30 = (const llvm::APInt *)(v50 + 16 * v29);
          unsigned int v42 = *((_DWORD *)v30 + 2);
          if (v42 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v41, v30);
          }
          uint64_t v41 = *(void *)v30;
          uint64_t v31 = v47;
          if (HIBYTE(v46)) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = v48;
          }
          if (!(_BYTE)v46)
          {
LABEL_74:
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v31 + 24))(&v39);
            goto LABEL_76;
          }
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v50 + 24))(&v41);
          uint64_t v31 = v47;
          if (HIBYTE(v46)) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = v48;
          }
          if (!(_BYTE)v46) {
            goto LABEL_74;
          }
        }
        uint64_t v33 = (const llvm::APInt *)(v31 + 16 * v32);
        unsigned int v40 = *((_DWORD *)v33 + 2);
        if (v40 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v39, v33);
        }
        uint64_t v39 = *(void *)v33;
LABEL_76:
        (*a4)((char **)&v71, &v41, &v39);
        unsigned int v44 = v72;
        uint64_t v43 = v71;
        char v45 = 1;
        if (v40 >= 0x41 && v39) {
          MEMORY[0x21667D390](v39, 0x1000C8000313F17);
        }
        if (v42 >= 0x41 && v41) {
          MEMORY[0x21667D390](v41, 0x1000C8000313F17);
        }
        if (!v45)
        {
          uint64_t v21 = 0;
          goto LABEL_89;
        }
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::push_back((uint64_t)&v73, (unint64_t)&v43);
        if (v45 && v44 >= 0x41 && v43) {
          MEMORY[0x21667D390](v43, 0x1000C8000313F17);
        }
        uint64_t v28 = ++v51;
        ++v48;
        --v27;
      }
      while (v27);
    }
    uint64_t v34 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
    uint64_t v21 = mlir::DenseElementsAttr::get((uint64_t)a3, v34, v73, v74);
LABEL_89:
    llvm::SmallVector<llvm::APInt,4u>::~SmallVector((char **)&v73);
    if (!(_BYTE)v46)
    {
      uint64_t v35 = v47;
      uint64_t v47 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
    }
    if (!(_BYTE)v49)
    {
      uint64_t v36 = v50;
      uint64_t v50 = 0;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
    }
    int v24 = v55;
  }
  if (v24)
  {
    if (!(_BYTE)v52)
    {
      uint64_t v37 = v53;
      uint64_t v53 = 0;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
    }
  }
  if (v59)
  {
    if (!(_BYTE)v56)
    {
      uint64_t v38 = v57;
      uint64_t v57 = 0;
      if (v38) {
        (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
      }
    }
  }
  return v21;
}

void anonymous namespace'::AddUIExtendedToAddI::~AddUIExtendedToAddI(_anonymous_namespace_::AddUIExtendedToAddI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AddUIExtendedToAddI::matchAndRewrite(_anonymous_namespace_::AddUIExtendedToAddI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  uint64_t v15 = v17;
  v17[0] = a2;
  uint64_t v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AddUIExtendedOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *((_DWORD *)v5 + 9);
  BOOL v7 = (char *)v5 - 16;
  if (v6) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    uint64_t v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  uint64_t v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    uint64_t v12 = v15;
    if (v15 == v17) {
      return v11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v15;
  if (v15 != v17) {
LABEL_13:
  }
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AddUIExtendedToAddI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'res__1' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubIRHSAddConstant::~SubIRHSAddConstant(_anonymous_namespace_::SubIRHSAddConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(_anonymous_namespace_::SubIRHSAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  BOOL v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubILHSAddConstant::~SubILHSAddConstant(_anonymous_namespace_::SubILHSAddConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubILHSAddConstant::matchAndRewrite(_anonymous_namespace_::SubILHSAddConstant *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v21[0] = v4;
  v21[1] = v5;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  BOOL v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
      goto LABEL_23;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSAddConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubIRHSSubConstantRHS::~SubIRHSSubConstantRHS(_anonymous_namespace_::SubIRHSSubConstantRHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(_anonymous_namespace_::SubIRHSSubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  BOOL v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubIRHSSubConstantLHS::~SubIRHSSubConstantLHS(_anonymous_namespace_::SubIRHSSubConstantLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(_anonymous_namespace_::SubIRHSSubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v19[0] = v4;
  v19[1] = v5;
  BOOL v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubIRHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubILHSSubConstantRHS::~SubILHSSubConstantRHS(_anonymous_namespace_::SubILHSSubConstantRHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(_anonymous_namespace_::SubILHSSubConstantRHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v21[0] = v4;
  v21[1] = v5;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  BOOL v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
      goto LABEL_23;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantRHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubILHSSubConstantLHS::~SubILHSSubConstantLHS(_anonymous_namespace_::SubILHSSubConstantLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(_anonymous_namespace_::SubILHSSubConstantLHS *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v21 = 0;
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    uint64_t v5 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  v20[0] = v4;
  v20[1] = v5;
  unint64_t v19 = 0;
  BOOL v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  v22[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (DefiningOp)
  {
    uint64_t v8 = DefiningOp;
      goto LABEL_23;
    int v9 = v24;
    if (v24 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
      int v9 = v24;
    }
    v23[v9] = v8;
    LODWORD(v24) = v24 + 1;
    v22[0] = *(void **)(*((void *)v6 + 9) + 56);
    uint64_t v10 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v10)
    {
      uint64_t v11 = v10;
      {
        int v12 = v24;
        if (v24 >= HIDWORD(v24))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
          int v12 = v24;
        }
        v23[v12] = v11;
        LODWORD(v24) = v24 + 1;
        uint64_t v13 = *(void **)(v23[1] + 24);
        v22[0] = *(void **)(*v23 + 24);
        v22[1] = v13;
        mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
      }
LABEL_23:
      uint64_t v14 = 0;
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
LABEL_21:
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v14 + 64))(v14, v15, v16, v22);
      uint64_t v17 = v23;
      if (v23 == v25) {
        return v14;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t)a3[2];
    if (v14)
    {
      if (!mlir::RewriterBase::Listener::classof(v14)) {
        goto LABEL_23;
      }
      uint64_t v15 = *((void *)v6 + 3);
      goto LABEL_21;
    }
  }
  uint64_t v17 = v23;
  if (v23 != v25) {
LABEL_26:
  }
    free(v17);
  return v14;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubILHSSubConstantLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  BOOL v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *BOOL v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::SubISubILHSRHSLHS::~SubISubILHSRHSLHS(_anonymous_namespace_::SubISubILHSRHSLHS *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(_anonymous_namespace_::SubISubILHSRHSLHS *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  unint64_t v19 = v21;
  v21[0] = a2;
  uint64_t v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v18[0] = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::SubIOp,void>::id)
    {
      uint64_t v8 = *((void *)a3 + 2);
      if (!v8) {
        goto LABEL_22;
      }
      if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
      {
        uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
        uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, v18);
        goto LABEL_13;
      }
      goto LABEL_21;
    }
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v13 = *(void *)(DefiningOp + 72);
      uint64_t v14 = v20;
      if (v20 < HIDWORD(v20)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = v20;
      if (v20 < HIDWORD(v20)) {
        goto LABEL_17;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v14 + 1, 8);
    LODWORD(v14) = v20;
LABEL_17:
    v19[v14] = v7;
    LODWORD(v20) = v20 + 1;
    if (*(void *)(v13 + 24) == *(void *)(*((void *)v5 + 9) + 56))
    {
      uint64_t v17 = *(void **)(v19[1] + 24);
      v18[0] = *(void **)(*v19 + 24);
      v18[1] = v17;
      mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v18, (mlir::MLIRContext *)2, 0);
    }
    uint64_t v15 = *((void *)a3 + 2);
    if (v15 && mlir::RewriterBase::Listener::classof(v15))
    {
LABEL_13:
      uint64_t v8 = v11;
      int v12 = v19;
      if (v19 == v21) {
        return v8;
      }
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (!v8) {
    goto LABEL_22;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v9 = *((void *)v5 + 3);
    goto LABEL_12;
  }
LABEL_21:
  uint64_t v8 = 0;
LABEL_22:
  int v12 = v19;
  if (v19 != v21) {
LABEL_23:
  }
    free(v12);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::SubIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::SubISubILHSRHSLHS::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "Operands 'x' and 'x0' must be equal";
  uint64_t v14 = 35;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::MulIMulIConstant::~MulIMulIConstant(_anonymous_namespace_::MulIMulIConstant *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::MulIMulIConstant::matchAndRewrite(_anonymous_namespace_::MulIMulIConstant *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v25[4] = *MEMORY[0x263EF8340];
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  BOOL v23 = v25;
  v25[0] = a2;
  uint64_t v24 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  v22[0] = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v22);
  if (!DefiningOp)
  {
    uint64_t v7 = *((void *)a3 + 2);
    if (!v7) {
      goto LABEL_33;
    }
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *((void *)v4 + 3);
      goto LABEL_12;
    }
    goto LABEL_31;
  }
  uint64_t v6 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    v22[0] = *(void **)(*(void *)(DefiningOp + 72) + 56);
    uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)v22);
    if (v11)
    {
      uint64_t v12 = v11;
        goto LABEL_31;
      int v13 = v24;
      if (v24 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
        int v13 = v24;
      }
      v23[v13] = v12;
      uint64_t v14 = (v24 + 1);
      LODWORD(v24) = v14;
      if (v14 >= HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v14 + 1, 8);
        LODWORD(v14) = v24;
      }
      v23[v14] = v6;
      LODWORD(v24) = v24 + 1;
      v22[0] = *(void **)(*((void *)v4 + 9) + 56);
      uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v22);
      if (v15)
      {
        uint64_t v16 = v15;
        {
          int v17 = v24;
          if (v24 >= HIDWORD(v24))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 8);
            int v17 = v24;
          }
          v23[v17] = v16;
          LODWORD(v24) = v24 + 1;
          char v18 = *(void **)(v23[1] + 24);
          v22[0] = *(void **)(*v23 + 24);
          v22[1] = v18;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v22, (mlir::MLIRContext *)2, 0);
        }
        goto LABEL_31;
      }
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_33;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *((void *)v4 + 3);
LABEL_12:
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v7 + 64))(v7, v8, v9, v22);
        BOOL v10 = v23;
        if (v23 == v25) {
          return v7;
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_33;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *(void *)(v6 + 24);
        goto LABEL_12;
      }
    }
LABEL_31:
    uint64_t v7 = 0;
    BOOL v10 = v23;
    if (v23 == v25) {
      return v7;
    }
    goto LABEL_34;
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *(void *)(v6 + 24);
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_33:
  BOOL v10 = v23;
  if (v23 != v25) {
LABEL_34:
  }
    free(v10);
  return v7;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.muli", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.muli";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "castedOp1 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulIMulIConstant::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t llvm::function_ref<llvm::APInt ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<std::multiplies<llvm::APInt>>@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  return llvm::APInt::operator*(a1, a2, a3);
}

uint64_t *mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulSIExtendedOp::fold(mlir::arith::MulSIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, llvm::APInt *this, uint64_t a3)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  llvm::APInt::sext((uint64_t)this, 2 * v5, (uint64_t)&v9);
  llvm::APInt::sext(a3, 2 * v5, (uint64_t)&v7);
  llvm::APInt::operator*((uint64_t)&v9, &v7, (uint64_t)&v11);
  if (v8 >= 0x41 && v7) {
    MEMORY[0x21667D390](v7, 0x1000C8000313F17);
  }
  if (v10 >= 0x41 && v9) {
    MEMORY[0x21667D390](v9, 0x1000C8000313F17);
  }
  __n128 result = llvm::APInt::extractBits((uint64_t *)&v11, v5, v5, (uint64_t)&v9);
  if (v12 >= 0x41)
  {
    __n128 result = v11;
    if (v11) {
      __n128 result = (uint64_t *)MEMORY[0x21667D390](v11, 0x1000C8000313F17);
    }
  }
  *(_DWORD *)(a1 + 8) = v10;
  *(void *)a1 = v9;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void anonymous namespace'::MulSIExtendedToMulI::~MulSIExtendedToMulI(_anonymous_namespace_::MulSIExtendedToMulI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::MulSIExtendedToMulI::matchAndRewrite(_anonymous_namespace_::MulSIExtendedToMulI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  uint64_t v15 = v17;
  v17[0] = a2;
  uint64_t v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = 0;
  }
  int v6 = *((_DWORD *)v5 + 9);
  uint64_t v7 = (char *)v5 - 16;
  if (v6) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    uint64_t v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  uint64_t v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    unsigned int v12 = v15;
    if (v15 == v17) {
      return v11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  unsigned int v12 = v15;
  if (v15 != v17) {
LABEL_13:
  }
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedToMulI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "entities 'res__1' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::MulSIExtendedRHSOne::~MulSIExtendedRHSOne(_anonymous_namespace_::MulSIExtendedRHSOne *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(_anonymous_namespace_::MulSIExtendedRHSOne *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v31[4] = *MEMORY[0x263EF8340];
  uint64_t v29 = v31;
  v31[0] = a2;
  uint64_t v30 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v24 = *(void **)(*((void *)v5 + 9) + 56);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    uint64_t v27 = (void **)(DefiningOp - 16);
    uint64_t v8 = mlir::Value::getDefiningOp((mlir::Value *)&v27);
    if (v8)
    {
      uint64_t v9 = v8;
      if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v8 + 48)))
      {
        uint64_t v24 = v26;
        uint64_t v25 = 0x100000000;
        mlir::Operation::fold(v9, 0, 0, (uint64_t)&v24);
        unint64_t v10 = *(void *)v24 & 0xFFFFFFFFFFFFFFF8;
        if (v24 != v26) {
          free(v24);
        }
        if (v10)
        {
          int v11 = v30;
          if (v30 >= HIDWORD(v30))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v30 + 1, 8);
            int v11 = v30;
          }
          v29[v11] = v7;
          LODWORD(v30) = v30 + 1;
          LODWORD(v25) = 1;
          uint64_t v24 = 0;
          uint64_t v27 = &v24;
          char v12 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v27, v10);
          unsigned int v13 = v25;
          if ((v12 & 1) == 0)
          {
            if (v25 >= 0x41 && v24) {
              MEMORY[0x21667D390](v24, 0x1000C8000313F17);
            }
LABEL_45:
            uint64_t v22 = *((void *)a3 + 2);
            if (v22 && mlir::RewriterBase::Listener::classof(v22))
            {
LABEL_22:
              uint64_t v15 = v18;
              __int16 v19 = v29;
              if (v29 == v31) {
                return v15;
              }
              goto LABEL_50;
            }
            goto LABEL_48;
          }
          uint64_t v14 = v24;
          LODWORD(v28) = 1;
          uint64_t v27 = 0;
          uint64_t v24 = &v27;
          if (mlir::detail::constant_int_value_binder::match((uint64_t *)&v24, v10))
          {
            LODWORD(v25) = v28;
            uint64_t v24 = v27;
            v26[0] = 1;
          }
          else
          {
            LOBYTE(v24) = 0;
            v26[0] = 0;
            if (v28 >= 0x41 && v27) {
              MEMORY[0x21667D390](v27, 0x1000C8000313F17);
            }
          }
          unsigned int v20 = v25;
          if (v25 >= 0x41)
          {
            if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v24) > 0x40)
            {
              BOOL v21 = 0;
              if (!v26[0]) {
                goto LABEL_40;
              }
            }
            else
            {
              BOOL v21 = *(void *)v24 == 1;
              if (!v26[0])
              {
LABEL_40:
                if (v13 >= 0x41 && v14) {
                  MEMORY[0x21667D390](v14, 0x1000C8000313F17);
                }
                if (v21)
                {
                  uint64_t v24 = *(void **)(*v29 + 24);
                  mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)1, 0);
                }
                goto LABEL_45;
              }
            }
          }
          else
          {
            BOOL v21 = v24 == (void *)1;
            if (!v26[0]) {
              goto LABEL_40;
            }
          }
          if (v20 >= 0x41 && v24) {
            MEMORY[0x21667D390](v24, 0x1000C8000313F17);
          }
          goto LABEL_40;
        }
      }
    }
    uint64_t v15 = *((void *)a3 + 2);
    if (!v15) {
      goto LABEL_49;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_48;
    }
    uint64_t v16 = *(void *)(v7 + 24);
LABEL_21:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v15 + 64))(v15, v16, v17, &v24);
    goto LABEL_22;
  }
  uint64_t v15 = *((void *)a3 + 2);
  if (!v15) {
    goto LABEL_49;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v16 = *((void *)v5 + 3);
    goto LABEL_21;
  }
LABEL_48:
  uint64_t v15 = 0;
LABEL_49:
  __int16 v19 = v29;
  if (v29 != v31) {
LABEL_50:
  }
    free(v19);
  return v15;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::Value &>(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v16 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    __int16 v20 = 1283;
    void v19[2] = (uint64_t)"arith.cmpi";
    void v19[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::arith::CmpIOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  unsigned int v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtSIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extsi", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.extsi";
    void v20[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  unsigned int v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "::mlir::success(::mlir::matchPattern(op1->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulSIExtendedRHSOne::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "entities 'c1' failed to satisfy constraint: ''";
  uint64_t v14 = 46;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t *mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulUIExtendedOp::fold(mlir::arith::MulUIExtendedOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_1 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, llvm::APInt *this, uint64_t *a3)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  llvm::APInt::zext((uint64_t *)this, 2 * v5, (uint64_t)&v9);
  llvm::APInt::zext(a3, 2 * v5, (uint64_t)&v7);
  llvm::APInt::operator*((uint64_t)&v9, &v7, (uint64_t)&v11);
  if (v8 >= 0x41 && v7) {
    MEMORY[0x21667D390](v7, 0x1000C8000313F17);
  }
  if (v10 >= 0x41 && v9) {
    MEMORY[0x21667D390](v9, 0x1000C8000313F17);
  }
  __n128 result = llvm::APInt::extractBits((uint64_t *)&v11, v5, v5, (uint64_t)&v9);
  if (v12 >= 0x41)
  {
    __n128 result = v11;
    if (v11) {
      __n128 result = (uint64_t *)MEMORY[0x21667D390](v11, 0x1000C8000313F17);
    }
  }
  *(_DWORD *)(a1 + 8) = v10;
  *(void *)a1 = v9;
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void anonymous namespace'::MulUIExtendedToMulI::~MulUIExtendedToMulI(_anonymous_namespace_::MulUIExtendedToMulI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::MulUIExtendedToMulI::matchAndRewrite(_anonymous_namespace_::MulUIExtendedToMulI *this, mlir::Operation *a2, mlir::UnknownLoc **a3)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  uint64_t v15 = v17;
  v17[0] = a2;
  uint64_t v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulUIExtendedOp,void>::id) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = 0;
  }
  int v6 = *((_DWORD *)v5 + 9);
  uint64_t v7 = (char *)v5 - 16;
  if (v6) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 1);
  if (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0))
  {
    uint64_t v14 = *(void **)(*v15 + 24);
    mlir::Builder::getFusedLoc(a3 + 1, (uint64_t **)&v14, (mlir::MLIRContext *)1, 0);
  }
  uint64_t v10 = (uint64_t)a3[2];
  if (v10 && mlir::RewriterBase::Listener::classof(v10))
  {
    unsigned int v12 = v15;
    if (v15 == v17) {
      return v11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = 0;
  unsigned int v12 = v15;
  if (v15 != v17) {
LABEL_13:
  }
    free(v12);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulUIExtendedToMulI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  unsigned int v13 = "entities 'res__1' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivUIOp::fold(mlir::arith::CeilDivUIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, BOOL **a2, llvm::APInt *a3, llvm::APInt *a4)
{
  unsigned int v15 = *((_DWORD *)a3 + 2);
  if (v15 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, a3);
  }
  uint64_t v14 = *(const void **)a3;
  uint64_t v7 = *a2;
  if (**a2) {
    goto LABEL_12;
  }
  unsigned int v8 = *((_DWORD *)a4 + 2);
  if (v8 <= 0x40)
  {
    if (*(void *)a4) {
      goto LABEL_7;
    }
LABEL_12:
    *uint64_t v7 = 1;
    BOOL v10 = v14;
    *(_DWORD *)(a1 + 8) = v15;
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(a4) == v8) {
    goto LABEL_12;
  }
LABEL_7:
  llvm::APInt::udiv(&v14, a4, (uint64_t)&v20);
  llvm::APInt::urem(&v14, a4, (uint64_t)&v18);
  unsigned int v9 = v19;
  if (v19 > 0x40)
  {
    int v11 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v18);
    if (v18) {
      MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
    if (v11 != v9) {
      goto LABEL_9;
    }
  }
  else if (v18)
  {
LABEL_9:
    unsigned int v19 = v15;
    if (v15 > 0x40) {
      llvm::APInt::initSlowCase((llvm::APInt *)&v18);
    }
    BOOL v18 = v15 != 0;
    llvm::APInt::uadd_ov((uint64_t)&v20, (const llvm::APInt *)&v18, *a2, (uint64_t)&v16);
    if (v19 >= 0x41 && v18) {
      MEMORY[0x21667D390](v18, 0x1000C8000313F17);
    }
    if (v21 >= 0x41 && v20) {
      MEMORY[0x21667D390](v20, 0x1000C8000313F17);
    }
    goto LABEL_25;
  }
  unsigned int v17 = v21;
  uint64_t v16 = v20;
LABEL_25:
  uint64_t v12 = v16;
  unsigned int v13 = v15;
  *(_DWORD *)(a1 + 8) = v17;
  *(void *)a1 = v12;
  unsigned int v17 = 0;
  *(unsigned char *)(a1 + 16) = 1;
  if (v13 >= 0x41)
  {
    if (v14) {
      MEMORY[0x21667D390](v14, 0x1000C8000313F17);
    }
  }
}

uint64_t *mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::CeilDivSIOp::fold(mlir::arith::CeilDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t *result, BOOL **a2, llvm::APInt *a3, llvm::APInt *this)
{
  uint64_t v6 = (uint64_t)result;
  unsigned int v20 = *((_DWORD *)a3 + 2);
  if (v20 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, a3);
  }
  unsigned int v19 = *(uint64_t **)a3;
  uint64_t v7 = *a2;
  if (**a2) {
    goto LABEL_10;
  }
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 <= 0x40)
  {
    if (*(void *)this) {
      goto LABEL_7;
    }
LABEL_10:
    *uint64_t v7 = 1;
    unsigned int v9 = v20;
    BOOL v10 = v19;
    goto LABEL_11;
  }
  __n128 result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(this);
  if (result == v8) {
    goto LABEL_10;
  }
LABEL_7:
  unsigned int v9 = v20;
  BOOL v10 = v19;
  if (!v19)
  {
LABEL_11:
    *(_DWORD *)(v6 + 8) = v9;
    *(void *)uint64_t v6 = v10;
    *(unsigned char *)(v6 + 16) = 1;
    return result;
  }
  unsigned int v28 = v20;
  uint64_t v27 = 0;
  int v11 = llvm::APInt::compareSigned((llvm::APInt *)&v19, (const llvm::APInt *)&v27);
  int v12 = llvm::APInt::compareSigned(this, (const llvm::APInt *)&v27);
  BOOL v13 = v12 < 1;
  if (v11 < 1 || v12 < 1)
  {
    if (v11 > 0 || v12 > 0)
    {
      if (v11 > 0) {
        BOOL v13 = 1;
      }
      if (v13)
      {
        llvm::APInt::ssub_ov((uint64_t *)&v27, this, *a2, (uint64_t)&v25);
        uint64_t v14 = *a2;
        unsigned int v15 = &v19;
        uint64_t v16 = (const llvm::APInt *)&v25;
      }
      else
      {
        llvm::APInt::ssub_ov((uint64_t *)&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
        uint64_t v14 = *a2;
        unsigned int v15 = &v25;
        uint64_t v16 = this;
      }
      llvm::APInt::sdiv_ov((llvm::APInt *)v15, v16, v14, (uint64_t)v23);
      __n128 result = llvm::APInt::ssub_ov((uint64_t *)&v27, (const llvm::APInt *)v23, *a2, (uint64_t)&v21);
    }
    else
    {
      llvm::APInt::ssub_ov((uint64_t *)&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
      llvm::APInt::ssub_ov((uint64_t *)&v27, this, *a2, (uint64_t)v23);
      __n128 result = signedCeilNonnegInputs((const llvm::APInt *)&v21, (const llvm::APInt *)&v25, (const llvm::APInt *)v23, *a2);
    }
    if (v24 >= 0x41)
    {
      __n128 result = *(uint64_t **)v23;
      if (*(void *)v23) {
        __n128 result = (uint64_t *)MEMORY[0x21667D390](*(void *)v23, 0x1000C8000313F17);
      }
    }
    if (v26 >= 0x41)
    {
      __n128 result = v25;
      if (v25) {
        __n128 result = (uint64_t *)MEMORY[0x21667D390](v25, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    __n128 result = signedCeilNonnegInputs((const llvm::APInt *)&v21, (const llvm::APInt *)&v19, this, *a2);
  }
  if (v28 >= 0x41)
  {
    __n128 result = v27;
    if (v27) {
      __n128 result = (uint64_t *)MEMORY[0x21667D390](v27, 0x1000C8000313F17);
    }
  }
  uint64_t v17 = v21;
  unsigned int v18 = v20;
  *(_DWORD *)(v6 + 8) = v22;
  *(void *)uint64_t v6 = v17;
  int v22 = 0;
  *(unsigned char *)(v6 + 16) = 1;
  if (v18 >= 0x41)
  {
    __n128 result = v19;
    if (v19) {
      return (uint64_t *)MEMORY[0x21667D390](v19, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t *signedCeilNonnegInputs(const llvm::APInt *a1, const llvm::APInt *this, const llvm::APInt *a3, BOOL *a4)
{
  unsigned int v7 = *((_DWORD *)this + 2);
  unsigned int v14 = v7;
  if (v7 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v13);
  }
  BOOL v13 = v7 != 0;
  llvm::APInt::ssub_ov((uint64_t *)this, (const llvm::APInt *)&v13, a4, (uint64_t)&v9);
  llvm::APInt::sdiv_ov((llvm::APInt *)&v9, a3, a4, (uint64_t)&v11);
  if (v10 >= 0x41 && v9) {
    MEMORY[0x21667D390](v9, 0x1000C8000313F17);
  }
  __n128 result = llvm::APInt::sadd_ov((uint64_t *)&v11, (const llvm::APInt *)&v13, a4, (uint64_t)a1);
  if (v12 >= 0x41)
  {
    __n128 result = v11;
    if (v11) {
      __n128 result = (uint64_t *)MEMORY[0x21667D390](v11, 0x1000C8000313F17);
    }
  }
  if (v14 >= 0x41)
  {
    __n128 result = (uint64_t *)v13;
    if (v13) {
      return (uint64_t *)MEMORY[0x21667D390](v13, 0x1000C8000313F17);
    }
  }
  return result;
}

void mlir::constFoldBinaryOp<mlir::IntegerAttr,llvm::APInt,mlir::ub::PoisonAttr,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::FloorDivSIOp::fold(mlir::arith::FloorDivSIOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APInt,llvm::APInt)#1}::operator()(uint64_t a1, BOOL **a2, llvm::APInt *a3, llvm::APInt *this)
{
  unsigned int v20 = *((_DWORD *)a3 + 2);
  if (v20 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, a3);
  }
  uint64_t v19 = *(void *)a3;
  unsigned int v7 = *a2;
  if (**a2) {
    goto LABEL_10;
  }
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 <= 0x40)
  {
    if (*(void *)this) {
      goto LABEL_7;
    }
LABEL_10:
    *unsigned int v7 = 1;
    unsigned int v9 = v20;
    uint64_t v10 = v19;
    goto LABEL_11;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) == v8) {
    goto LABEL_10;
  }
LABEL_7:
  unsigned int v9 = v20;
  uint64_t v10 = v19;
  if (!v19)
  {
LABEL_11:
    *(_DWORD *)(a1 + 8) = v9;
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 16) = 1;
    return;
  }
  unsigned int v28 = v20;
  uint64_t v27 = 0;
  int v11 = llvm::APInt::compareSigned((llvm::APInt *)&v19, (const llvm::APInt *)&v27);
  int v12 = llvm::APInt::compareSigned(this, (const llvm::APInt *)&v27);
  BOOL v13 = v12 < 1;
  if (v11 < 1 || v12 < 1)
  {
    if (v11 > 0 || v12 > 0)
    {
      if (v11 > 0) {
        BOOL v13 = 1;
      }
      if (v13)
      {
        llvm::APInt::ssub_ov(&v27, this, *a2, (uint64_t)&v25);
        unsigned int v14 = *a2;
        unsigned int v15 = (const llvm::APInt *)&v19;
        uint64_t v16 = (const llvm::APInt *)&v25;
      }
      else
      {
        llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
        unsigned int v14 = *a2;
        unsigned int v15 = (const llvm::APInt *)&v25;
        uint64_t v16 = this;
      }
      signedCeilNonnegInputs((const llvm::APInt *)&v23, v15, v16, v14);
      llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v23, *a2, (uint64_t)&v21);
    }
    else
    {
      llvm::APInt::ssub_ov(&v27, (const llvm::APInt *)&v19, *a2, (uint64_t)&v25);
      llvm::APInt::ssub_ov(&v27, this, *a2, (uint64_t)&v23);
      llvm::APInt::sdiv_ov((llvm::APInt *)&v25, (const llvm::APInt *)&v23, *a2, (uint64_t)&v21);
    }
    if (v24 >= 0x41 && v23) {
      MEMORY[0x21667D390](v23, 0x1000C8000313F17);
    }
    if (v26 >= 0x41 && v25) {
      MEMORY[0x21667D390](v25, 0x1000C8000313F17);
    }
  }
  else
  {
    llvm::APInt::sdiv_ov((llvm::APInt *)&v19, this, *a2, (uint64_t)&v21);
  }
  if (v28 >= 0x41 && v27) {
    MEMORY[0x21667D390](v27, 0x1000C8000313F17);
  }
  uint64_t v17 = v21;
  unsigned int v18 = v20;
  *(_DWORD *)(a1 + 8) = v22;
  *(void *)a1 = v17;
  int v22 = 0;
  *(unsigned char *)(a1 + 16) = 1;
  if (v18 >= 0x41)
  {
    if (v19) {
      MEMORY[0x21667D390](v19, 0x1000C8000313F17);
    }
  }
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::constant_int_value_binder>(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  v12[1] = *MEMORY[0x263EF8340];
  v11[0] = *(void **)(*(void *)(a1 + 72) + 32 * a2 + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)v11);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(result + 48));
    if (result)
    {
      v11[0] = v12;
      v11[1] = (void *)0x100000000;
      mlir::Operation::fold(v5, 0, 0, (uint64_t)v11);
      unint64_t v6 = *(void *)v11[0] & 0xFFFFFFFFFFFFFFF8;
      if (v11[0] != v12) {
        free(v11[0]);
      }
      if (v6)
      {
        unsigned int v7 = *(void **)(*(void *)(*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
          || v7 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          return mlir::detail::constant_int_value_binder::match(a3, v6);
        }
        else
        {
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void anonymous namespace'::XOrINotCmpI::~XOrINotCmpI(_anonymous_namespace_::XOrINotCmpI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::XOrINotCmpI::matchAndRewrite(_anonymous_namespace_::XOrINotCmpI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v30[4] = *MEMORY[0x263EF8340];
  unsigned int v28 = v30;
  v30[0] = a2;
  uint64_t v29 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  unsigned int v24 = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v24);
  if (!DefiningOp)
  {
    uint64_t v7 = *((void *)a3 + 2);
    if (!v7) {
      goto LABEL_45;
    }
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *((void *)v4 + 3);
      goto LABEL_35;
    }
    goto LABEL_43;
  }
  uint64_t v6 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id)
  {
    if (!*(unsigned char *)(DefiningOp + 47)
      || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(DefiningOp, (uint64_t)"predicate", 9), !v11))
    {
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v6 + 56, "predicate", 9uLL);
    }
    if (!InherentAttr || (mlir::arith::CmpIPredicateAttr::classof(InherentAttr) & 1) == 0)
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *(void *)(v6 + 24);
        goto LABEL_35;
      }
      goto LABEL_43;
    }
    if ((*(unsigned char *)(v6 + 46) & 0x80) != 0)
    {
      uint64_t v12 = v29;
      if (v29 < HIDWORD(v29)) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v12 = v29;
      if (v29 < HIDWORD(v29)) {
        goto LABEL_19;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v12 + 1, 8);
    LODWORD(v12) = v29;
LABEL_19:
    v28[v12] = v6;
    LODWORD(v29) = v29 + 1;
    unsigned int v24 = *(void **)(*((void *)v4 + 9) + 56);
    uint64_t v13 = mlir::Value::getDefiningOp((mlir::Value *)&v24);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v27 = (void **)(v13 - 16);
      uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)&v27);
      if (v15)
      {
        uint64_t v16 = v15;
        if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v15 + 48)))
        {
          unsigned int v24 = v26;
          uint64_t v25 = 0x100000000;
          mlir::Operation::fold(v16, 0, 0, (uint64_t)&v24);
          unint64_t v17 = *(void *)v24 & 0xFFFFFFFFFFFFFFF8;
          if (v24 != v26) {
            free(v24);
          }
          if (v17)
          {
            unsigned int v24 = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::m_Co"
                  "nstant(&$0)))' failed to satisfy constraint: 'constant attribute 1'";
            uint64_t v25 = 169;
            Integeruint64_t Type = mlir::Builder::getIntegerType((mlir::PatternRewriter *)((char *)a3 + 8), 1u);
            if (v17 == mlir::Builder::getIntegerAttr((uint64_t)a3 + 8, IntegerType, 1uLL) {
              || (v27 = &v24, (uint64_t v19 = *((void *)a3 + 2)) != 0)
            }
              && mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
            {
              int v20 = v29;
              if (v29 >= HIDWORD(v29))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v30, v29 + 1, 8);
                int v20 = v29;
              }
              v28[v20] = v14;
              LODWORD(v29) = v29 + 1;
              uint64_t v21 = *(void *)(v28[1] + 24);
              unsigned int v24 = *(void **)(*v28 + 24);
              uint64_t v25 = v21;
              mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&v24, (mlir::MLIRContext *)2, 0);
            }
            goto LABEL_43;
          }
        }
      }
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *(void *)(v14 + 24);
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7) {
        goto LABEL_45;
      }
      if (mlir::RewriterBase::Listener::classof(v7))
      {
        uint64_t v8 = *((void *)v4 + 3);
LABEL_35:
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v7 + 64))(v7, v8, v9, &v24);
        int v22 = v28;
        if (v28 == v30) {
          return v7;
        }
        goto LABEL_46;
      }
    }
LABEL_43:
    uint64_t v7 = 0;
    int v22 = v28;
    if (v28 == v30) {
      return v7;
    }
    goto LABEL_46;
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *(void *)(v6 + 24);
      goto LABEL_35;
    }
    goto LABEL_43;
  }
LABEL_45:
  int v22 = v28;
  if (v28 != v30) {
LABEL_46:
  }
    free(v22);
  return v7;
}

uint64_t llvm::SmallVectorImpl<mlir::NamedAttribute>::emplace_back<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    return llvm::SmallVectorTemplateBase<mlir::NamedAttribute,true>::growAndEmplaceBack<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(a1, a2, a3);
  }
  else
  {
    ZinMirCacheTensors::ZinMirCacheTensors((void *)(*(void *)a1 + 16 * v4), *a2, *a3);
    unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v5;
    return *(void *)a1 + 16 * v5 - 16;
  }
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::CmpIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.cmpi", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.cmpi";
    void v20[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::CmpIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "expected op 'arith.cmpi' to have attribute 'predicate' of type '::mlir::arith::CmpIPredicateAttr'";
  uint64_t v14 = 97;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrINotCmpI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "::mlir::success(::mlir::matchPattern(op1->getResult(0), ::mlir::m_Constant(&arg1_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization3(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(void ****a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  __int16 v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  uint64_t v4 = mlir::Diagnostic::operator<<(a2, v14);
  uint64_t v5 = v4 + 16;
  unint64_t v6 = *(void *)(v4 + 16);
  int v16 = 3;
  uint64_t v17 = ": constant attribute 1";
  uint64_t v18 = 22;
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  uint64_t v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    unint64_t v11 = v7 + 1;
    BOOL v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      uint64_t v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      uint64_t v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      uint64_t v8 = (__n128 *)&v16;
    }
  }
  unint64_t v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  __n128 result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *unint64_t v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::NamedAttribute,true>::growAndEmplaceBack<mlir::StringAttr,mlir::arith::CmpIPredicateAttr &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  ZinMirCacheTensors::ZinMirCacheTensors(&v9, *a2, *a3);
  long long v4 = v9;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    long long v8 = v9;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5 + 1, 16);
    long long v4 = v8;
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(void *)a1 + 16 * v5) = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return *(void *)a1 + 16 * v6 - 16;
}

void anonymous namespace'::XOrIOfExtUI::~XOrIOfExtUI(_anonymous_namespace_::XOrIOfExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::XOrIOfExtUI::matchAndRewrite(_anonymous_namespace_::XOrIOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::XOrIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.xori", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.xori";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ExtUIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.extui", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.extui";
    void v20[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_8(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_9(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::XOrIOfExtSI::~XOrIOfExtSI(_anonymous_namespace_::XOrIOfExtSI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::XOrIOfExtSI::matchAndRewrite(_anonymous_namespace_::XOrIOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::XOrIOp,void>::id) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_6(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_7(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::XOrIOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unsigned int v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unsigned int v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldUnaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::NegFOp::fold(mlir::arith::NegFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2)
{
  v8[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  unint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v5 == v4)
  {
    unsigned int v6 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v8, v3);
    if (v5 != (void *)v8[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::changeSign(v6);
      uint64_t v7 = a1 + 8;
      if (v5 != (void *)v8[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v8);
      a1[32] = 1;
      if (v5 != (void *)v8[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v8);
      return;
    }
  }
  else
  {
    unsigned int v6 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v8, v3);
    if (v5 != (void *)v8[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::changeSign(v6);
  uint64_t v7 = a1 + 8;
  if (v5 == (void *)v8[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, (uint64_t)v8);
  a1[32] = 1;
  if (v5 == (void *)v8[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v8);
}

uint64_t mlir::ElementsAttr::try_value_begin<llvm::APFloat>@<X0>(mlir::BranchOpInterface *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = &unk_267771000;
  {
    uint64_t v17 = a1;
    uint64_t v3 = (void *)&unk_267771000;
    int v9 = v8;
    a1 = v17;
    if (v9)
    {
      uint64_t v18 = "StringRef llvm::getTypeName() [DesiredTypeName = llvm::APFloat]";
      unint64_t v19 = 63;
      unint64_t v10 = llvm::StringRef::find((uint64_t *)&v18, "DesiredTypeName = ", 0x12uLL, 0);
      if (v19 >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = v19;
      }
      int v12 = &v18[v11];
      unint64_t v13 = v19 - v11;
      if (v19 - v11 >= 0x12) {
        uint64_t v14 = 18;
      }
      else {
        uint64_t v14 = v19 - v11;
      }
      unint64_t v15 = v13 - v14;
      if (v15 >= v15 - 1) {
        uint64_t v16 = v15 - 1;
      }
      else {
        uint64_t v16 = v15;
      }
      mlir::detail::TypeIDResolver<llvm::APFloat,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v12[v14], v16);
      uint64_t v3 = (void *)&unk_267771000;
      a1 = v17;
    }
  }
  uint64_t result = mlir::BranchOpInterface::getSuccessorOperands(a1, v3[280]);
  if (v20)
  {
    char v5 = BYTE1(v18);
    if ((_BYTE)v18)
    {
      unint64_t v6 = v19;
      *(unsigned char *)a2 = (_BYTE)v18;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v6;
    }
    else
    {
      unint64_t v7 = v19;
      unint64_t v19 = 0;
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 1) = v5;
      *(void *)(a2 + 8) = v7;
    }
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return result;
}

char *llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1[2];
  unint64_t v5 = v4 + a3;
  if (v5 > a1[3])
  {
    unint64_t v8 = *(void *)a1 + 32 * v4;
    if (*(void *)a1 <= a2 && v8 > a2)
    {
      uint64_t v13 = (uint64_t)(a2 - *(void *)a1) >> 5;
      unint64_t v17 = 0;
      uint64_t v14 = a1 + 4;
      unint64_t v15 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 32, &v17);
      llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v15);
      unsigned int v16 = v17;
      if (*(unsigned int **)a1 != v14) {
        free(*(void **)a1);
      }
      *(void *)a1 = v15;
      a1[3] = v16;
      return &v15[32 * v13];
    }
    else
    {
      unint64_t v17 = 0;
      unint64_t v10 = a1 + 4;
      unint64_t v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v5, 32, &v17);
      llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v11);
      unsigned int v12 = v17;
      if (*(unsigned int **)a1 != v10) {
        free(*(void **)a1);
      }
      *(void *)a1 = v11;
      a1[3] = v12;
    }
  }
  return (char *)v3;
}

uint64_t mlir::detail::constant_float_predicate_matcher::match(llvm::APFloatBase *a1, uint64_t a2)
{
  unint64_t v10[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::APFloatBase *)llvm::APFloatBase::Bogus(a1);
  unint64_t v5 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v4);
  if (v5 == v4) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (uint64_t)v4);
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v4);
  unint64_t v8 = v9;
  if (!mlir::detail::constant_float_value_binder::match((uint64_t *)&v8, a2))
  {
    uint64_t v6 = 0;
    if (v5 != (llvm::APFloatBase *)v10[0]) {
      goto LABEL_4;
    }
LABEL_8:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v10);
    return v6;
  }
  uint64_t v6 = (*(uint64_t (**)(unsigned char *))a1)(v9);
  if (v5 == (llvm::APFloatBase *)v10[0]) {
    goto LABEL_8;
  }
LABEL_4:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v10);
  return v6;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2)
{
  uint64_t v4 = (void *)((char *)a1 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == a2) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v4, (uint64_t)a2);
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v4, (uint64_t)a2);
  return a1;
}

uint64_t mlir::detail::constant_float_value_binder::match(uint64_t *a1, uint64_t a2)
{
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  unint64_t v3 = *(void **)(*(void *)a2 + 136);
  uint64_t v4 = &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  BOOL v5 = v3 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v20[0] = v6;
  if (v5)
  {
    mlir::FloatAttr::getValue((mlir::FloatAttr *)v20, (uint64_t)&v21);
    unsigned int v16 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v2 + 8), (llvm::APFloatBase *)v22);
    unint64_t v17 = (void *)v22[0];
    if (llvm::APFloatBase::PPCDoubleDouble(v16) == v17) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
    }
    return 1;
  }
  else
  {
    if (mlir::DenseElementsAttr::classof(a2)) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v21 = v8;
    if (v8)
    {
      uint64_t v8 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v21) ? a2 : 0;
      uint64_t v19 = v8;
      if (v8)
      {
        mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v19);
        ZinMirCacheTensors::ZinMirCacheTensors(&v21, v19, 0);
        uint64_t v9 = v19;
        uint64_t NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v19);
        ZinMirCacheTensors::ZinMirCacheTensors(v20, v9, NumElements);
        uint64_t v11 = mlir::DenseElementsAttr::AttributeElementIterator::operator*(&v21);
        BOOL v12 = *(void *)(*(void *)v11 + 136) == (void)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
        LODWORD(v4) = v12;
        if (*(_UNKNOWN **)(*(void *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id) {
          uint64_t v13 = v11;
        }
        else {
          uint64_t v13 = 0;
        }
        v20[0] = v13;
        if (v12)
        {
          mlir::FloatAttr::getValue((mlir::FloatAttr *)v20, (uint64_t)&v21);
          uint64_t v14 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v2 + 8), (llvm::APFloatBase *)v22);
          unint64_t v15 = (void *)v22[0];
          if (llvm::APFloatBase::PPCDoubleDouble(v14) == v15) {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
          }
          else {
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v22);
          }
        }
        LODWORD(v8) = 1;
      }
    }
    return v8 & v4;
  }
}

llvm::APFloatBase *llvm::APFloat::Storage::operator=(llvm::APFloatBase *a1, llvm::APFloatBase *a2)
{
  uint64_t v4 = *(void **)a1;
  BOOL v5 = llvm::APFloatBase::PPCDoubleDouble(a1);
  uint64_t v6 = *(void **)a2;
  if (v5 != v4 && v5 != v6)
  {
    llvm::detail::IEEEFloat::operator=((uint64_t)a1, (uint64_t)a2);
    return a1;
  }
  uint64_t v8 = v5;
  if (v5 != v4)
  {
    if (a1 == a2) {
      return a1;
    }
    llvm::detail::IEEEFloat::~IEEEFloat(a1);
    if (v8 == *(void **)a2) {
      goto LABEL_17;
    }
LABEL_14:
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v9, (uint64_t)a2);
    return a1;
  }
  if (v4 == v6)
  {
    if (a1 == a2) {
      return a1;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
  }
  else
  {
    if (a1 == a2) {
      return a1;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    if (v8 != *(void **)a2) {
      goto LABEL_14;
    }
  }
LABEL_17:
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v9, a2);
  return a1;
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::AddFOp::fold(mlir::arith::AddFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x263EF8340];
  BOOL v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::add(v8, v9, 1);
      unint64_t v10 = a1 + 8;
      if (v7 != (void *)v11[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::add((uint64_t *)v8, (uint64_t *)v9, 1);
  unint64_t v10 = a1 + 8;
  if (v7 == (void *)v11[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::SubFOp::fold(mlir::arith::SubFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x263EF8340];
  BOOL v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::subtract(v8, v9, 1);
      unint64_t v10 = a1 + 8;
      if (v7 != (void *)v11[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    uint64_t v8 = (unsigned __int8 *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    uint64_t v9 = (unsigned __int8 *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::subtract((llvm::detail::DoubleAPFloat *)v8, (uint64_t *)v9, 1);
  unint64_t v10 = a1 + 8;
  if (v7 == (void *)v11[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void *llvm::maximum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = (llvm *)((char *)this + 8);
  uint64_t v8 = (void *)*((void *)this + 1);
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  unint64_t v10 = v9;
  if (v9 == v8)
  {
    if ((*(unsigned char *)(*((void *)this + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      BOOL v12 = v7;
      goto LABEL_9;
    }
  }
  else if ((*((unsigned char *)this + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    BOOL v12 = v7;
LABEL_4:
    return (void *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  BOOL v12 = (const llvm::APFloat *)((char *)a2 + 8);
  uint64_t v14 = (void *)*((void *)a2 + 1);
  if (v9 == v14)
  {
    if ((*(unsigned char *)(*((void *)a2 + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((unsigned char *)a2 + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    return (void *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  unint64_t v15 = (llvm *)*((void *)this + 2);
  if (v9 != v8) {
    unint64_t v15 = this;
  }
  unsigned int v16 = *((unsigned __int8 *)v15 + 28);
  if ((v16 & 7) == 3
    && (v9 != v14 ? (unint64_t v17 = a2) : (unint64_t v17 = (const llvm::APFloat *)*((void *)a2 + 2)),
        (char v18 = *((unsigned char *)v17 + 28), (v18 & 7) == 3) && ((v16 >> 3) & 1) != (v18 & 8) >> 3))
  {
    if ((v16 & 8) != 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = this;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    char v20 = (void *)*((void *)v19 + 1);
    BOOL v12 = (llvm *)((char *)v19 + 8);
    if (v10 != v20) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v9 == v8) {
      int v21 = llvm::detail::DoubleAPFloat::compare(v7, v12);
    }
    else {
      int v21 = llvm::detail::IEEEFloat::compare(v7, v12);
    }
    if (v21) {
      int v22 = this;
    }
    else {
      int v22 = a2;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    uint64_t v23 = (void *)*((void *)v22 + 1);
    BOOL v12 = (llvm *)((char *)v22 + 8);
    if (v10 != v23) {
      goto LABEL_4;
    }
  }
LABEL_9:

  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

BOOL llvm::APFloat::operator<(void *a1, uint64_t a2)
{
  unint64_t v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  uint64_t v4 = (void *)a1[1];
  BOOL v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  uint64_t v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4) {
    return llvm::detail::DoubleAPFloat::compare(v3, v6) == 0;
  }
  else {
    return llvm::detail::IEEEFloat::compare(v3, v6) == 0;
  }
}

void *llvm::minimum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = (llvm *)((char *)this + 8);
  uint64_t v8 = (void *)*((void *)this + 1);
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  unint64_t v10 = v9;
  if (v9 == v8)
  {
    if ((*(unsigned char *)(*((void *)this + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      BOOL v12 = v7;
      goto LABEL_9;
    }
  }
  else if ((*((unsigned char *)this + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    BOOL v12 = v7;
LABEL_4:
    return (void *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  BOOL v12 = (const llvm::APFloat *)((char *)a2 + 8);
  uint64_t v14 = (void *)*((void *)a2 + 1);
  if (v9 == v14)
  {
    if ((*(unsigned char *)(*((void *)a2 + 2) + 28) & 7) == 1)
    {
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
    }
  }
  else if ((*((unsigned char *)a2 + 28) & 7) == 1)
  {
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    return (void *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
  unint64_t v15 = (llvm *)*((void *)this + 2);
  if (v9 != v8) {
    unint64_t v15 = this;
  }
  unsigned int v16 = *((unsigned __int8 *)v15 + 28);
  if ((v16 & 7) != 3) {
    goto LABEL_33;
  }
  unint64_t v17 = (const llvm::APFloat *)*((void *)a2 + 2);
  if (v9 != v14) {
    unint64_t v17 = a2;
  }
  char v18 = *((unsigned char *)v17 + 28);
  if ((v18 & 7) == 3 && ((v16 >> 3) & 1) != (v18 & 8) >> 3)
  {
    if ((v16 & 8) != 0) {
      uint64_t v19 = this;
    }
    else {
      uint64_t v19 = a2;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    char v20 = (void *)*((void *)v19 + 1);
    BOOL v12 = (llvm *)((char *)v19 + 8);
    if (v10 != v20) {
      goto LABEL_4;
    }
  }
  else
  {
LABEL_33:
    int v21 = (const llvm::APFloat *)((char *)a2 + 8);
    if (v10 == v14)
    {
      if (llvm::detail::DoubleAPFloat::compare(v21, v7)) {
        unsigned int v24 = this;
      }
      else {
        unsigned int v24 = a2;
      }
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      uint64_t v25 = (void *)*((void *)v24 + 1);
      BOOL v12 = (llvm *)((char *)v24 + 8);
      if (v10 != v25) {
        goto LABEL_4;
      }
    }
    else
    {
      if (llvm::detail::IEEEFloat::compare(v21, v7)) {
        int v22 = this;
      }
      else {
        int v22 = a2;
      }
      uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
      uint64_t v23 = (void *)*((void *)v22 + 1);
      BOOL v12 = (llvm *)((char *)v22 + 8);
      if (v10 != v23) {
        goto LABEL_4;
      }
    }
  }
LABEL_9:

  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

void *llvm::minnum@<X0>(llvm *this@<X0>, const llvm::APFloat *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = (llvm *)((char *)this + 8);
  uint64_t v8 = (void *)*((void *)this + 1);
  uint64_t v9 = llvm::APFloatBase::PPCDoubleDouble(this);
  unint64_t v10 = (llvm *)*((void *)this + 2);
  if (v9 != v8) {
    unint64_t v10 = this;
  }
  if ((*((unsigned char *)v10 + 28) & 7) != 1)
  {
    uint64_t v14 = (const llvm::APFloat *)((char *)a2 + 8);
    if (v9 == *((void **)a2 + 1))
    {
      if ((*(unsigned char *)(*((void *)a2 + 2) + 28) & 7) != 1)
      {
        int v15 = llvm::detail::DoubleAPFloat::compare(v14, v7);
LABEL_17:
        if (v15) {
          unsigned int v16 = this;
        }
        else {
          unsigned int v16 = a2;
        }
        uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
        unint64_t v17 = (void *)*((void *)v16 + 1);
        BOOL v12 = (llvm *)((char *)v16 + 8);
        if (v9 != v17) {
          goto LABEL_5;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 28) & 7) != 1)
    {
      int v15 = llvm::detail::IEEEFloat::compare(v14, v7);
      goto LABEL_17;
    }
    uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
    BOOL v12 = v7;
    if (v9 != v8) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  uint64_t v11 = (llvm::detail::IEEEFloat *)(a3 + 8);
  BOOL v12 = (const llvm::APFloat *)((char *)a2 + 8);
  if (v9 != *((void **)a2 + 1))
  {
LABEL_5:
    return (void *)llvm::detail::IEEEFloat::IEEEFloat(v11, v12);
  }
LABEL_13:

  return llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v12);
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::MulFOp::fold(mlir::arith::MulFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x263EF8340];
  BOOL v5 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  unint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 == v6)
  {
    uint64_t v8 = (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
    uint64_t v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0])
    {
LABEL_3:
      llvm::detail::IEEEFloat::multiply(v8, v9, 1);
      unint64_t v10 = a1 + 8;
      if (v7 != (void *)v11[0]) {
        goto LABEL_4;
      }
LABEL_9:
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
      a1[32] = 1;
      if (v7 != (void *)v11[0]) {
        goto LABEL_5;
      }
LABEL_10:
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
      return;
    }
  }
  else
  {
    uint64_t v8 = (llvm::detail::IEEEFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    uint64_t v9 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
  }
  llvm::detail::DoubleAPFloat::multiply(v8, (uint64_t *)v9, 1);
  unint64_t v10 = a1 + 8;
  if (v7 == (void *)v11[0]) {
    goto LABEL_9;
  }
LABEL_4:
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void anonymous namespace'::MulFOfNegF::~MulFOfNegF(_anonymous_namespace_::MulFOfNegF *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::MulFOfNegF::matchAndRewrite(_anonymous_namespace_::MulFOfNegF *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v29[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    uint64_t v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v25[0] = v5;
  v25[1] = v6;
  v24[0] = v5;
  v24[1] = v6;
  uint64_t v27 = v29;
  v29[0] = a2;
  uint64_t v28 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = 0;
  }
  v26[0] = *(void **)(*((void *)v7 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!DefiningOp)
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_34;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_33;
    }
    uint64_t v19 = *((void *)v7 + 3);
LABEL_30:
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v18 + 64))(v18, v19, v20, v26);
LABEL_31:
    uint64_t v18 = v17;
    int v21 = v27;
    if (v27 == v29) {
      return v18;
    }
    goto LABEL_35;
  }
  uint64_t v9 = DefiningOp;
  {
    int v10 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
      int v10 = v28;
    }
    v27[v10] = v9;
    LODWORD(v28) = v28 + 1;
    v26[0] = *(void **)(*((void *)v7 + 9) + 56);
    uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)v26);
    if (v11)
    {
      uint64_t v12 = v11;
      {
        int v13 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
          int v13 = v28;
        }
        v27[v13] = v12;
        LODWORD(v28) = v28 + 1;
        if (!*((unsigned char *)a2 + 47)
          || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"fastmath", 8), !v15))
        {
          uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "fastmath", 8uLL);
        }
        if (!InherentAttr
          || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        {
          mlir::arith::FastMathFlagsAttr::get(*((mlir::MLIRContext **)a3 + 1), 0);
        }
        if ((*(void *)(*(void *)(v24[0] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v25[0] + 24)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v23 = *(void **)(v27[1] + 24);
          v26[0] = *(void **)(*v27 + 24);
          v26[1] = v23;
          v26[2] = *(void **)(v27[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v26, (mlir::MLIRContext *)3, 0);
        }
        uint64_t v16 = *((void *)a3 + 2);
        if (v16)
        {
          if (mlir::RewriterBase::Listener::classof(v16))
          {
            goto LABEL_31;
          }
        }
      }
      goto LABEL_33;
    }
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_34;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v19 = *((void *)v7 + 3);
      goto LABEL_30;
    }
  }
LABEL_33:
  uint64_t v18 = 0;
LABEL_34:
  int v21 = v27;
  if (v27 != v29) {
LABEL_35:
  }
    free(v21);
  return v18;
}

uint64_t anonymous namespace'::static_dag_matcher_10(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      *a3 = *(void *)(a2 + 72);
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"fastmath", 8);
    if (v6)
    {
      if (!InherentAttr) {
        goto LABEL_16;
      }
LABEL_15:
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
        return 1;
      }
LABEL_16:
      mlir::arith::FastMathFlagsAttr::get(*(mlir::MLIRContext **)(a1 + 8), 0);
      return 1;
    }
LABEL_14:
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "fastmath", 8uLL);
    if (!InherentAttr) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v7);
  if (result) {
  return result;
  }
}

uint64_t anonymous namespace'::static_dag_matcher_11(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && *(_UNKNOWN **)(*(void *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::NegFOp,void>::id)
  {
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
      *a3 = *(void *)(a2 + 72);
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 1;
      if (!*(unsigned char *)(a2 + 47)) {
        goto LABEL_14;
      }
    }
    uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"fastmath", 8);
    if (v6)
    {
      if (!InherentAttr) {
        goto LABEL_16;
      }
LABEL_15:
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id) {
        return 1;
      }
LABEL_16:
      mlir::arith::FastMathFlagsAttr::get(*(mlir::MLIRContext **)(a1 + 8), 0);
      return 1;
    }
LABEL_14:
    uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "fastmath", 8uLL);
    if (!InherentAttr) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t result = mlir::RewriterBase::Listener::classof(v7);
  if (result) {
  return result;
  }
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulFOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.mulf", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.mulf";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulFOp,void>::id) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_10(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "castedOp1 is not ::mlir::arith::NegFOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::static_dag_matcher_11(mlir::PatternRewriter &,mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u> &,mlir::OperandRange &)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "castedOp1 is not ::mlir::arith::NegFOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::MulFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  char v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      char v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::DivFOp::fold(mlir::arith::DivFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  char v6 = *(void **)(a2 + 8);
  uint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 != v6)
  {
    uint64_t v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    unint64_t v9 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
LABEL_8:
    llvm::detail::DoubleAPFloat::divide(v8, v9, 1);
  }
  uint64_t v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
  unint64_t v9 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v7 == (void *)v11[0]) {
    goto LABEL_8;
  }
LABEL_3:
  llvm::detail::IEEEFloat::divide(v8, v9, 1);
  BOOL v10 = a1 + 8;
  if (v7 == (void *)v11[0])
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
    a1[32] = 1;
    if (v7 != (void *)v11[0]) {
      goto LABEL_5;
    }
LABEL_10:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
    return;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void anonymous namespace'::DivFOfNegF::~DivFOfNegF(_anonymous_namespace_::DivFOfNegF *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::DivFOfNegF::matchAndRewrite(_anonymous_namespace_::DivFOfNegF *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v29[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0)
  {
    uint64_t v5 = *((void *)a2 + 9);
    uint64_t v6 = *((unsigned int *)a2 + 17);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  v25[0] = v5;
  v25[1] = v6;
  v24[0] = v5;
  v24[1] = v6;
  uint64_t v27 = v29;
  v29[0] = a2;
  uint64_t v28 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::DivFOp,void>::id) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = 0;
  }
  v26[0] = *(void **)(*((void *)v7 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v26);
  if (!DefiningOp)
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_34;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_33;
    }
    uint64_t v19 = *((void *)v7 + 3);
LABEL_30:
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v18 + 64))(v18, v19, v20, v26);
LABEL_31:
    uint64_t v18 = v17;
    int v21 = v27;
    if (v27 == v29) {
      return v18;
    }
    goto LABEL_35;
  }
  uint64_t v9 = DefiningOp;
  {
    int v10 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
      int v10 = v28;
    }
    v27[v10] = v9;
    LODWORD(v28) = v28 + 1;
    v26[0] = *(void **)(*((void *)v7 + 9) + 56);
    uint64_t v11 = mlir::Value::getDefiningOp((mlir::Value *)v26);
    if (v11)
    {
      uint64_t v12 = v11;
      {
        int v13 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 8);
          int v13 = v28;
        }
        v27[v13] = v12;
        LODWORD(v28) = v28 + 1;
        if (!*((unsigned char *)a2 + 47)
          || (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"fastmath", 8), !v15))
        {
          uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "fastmath", 8uLL);
        }
        if (!InherentAttr
          || *(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::arith::FastMathFlagsAttr,void>::id)
        {
          mlir::arith::FastMathFlagsAttr::get(*((mlir::MLIRContext **)a3 + 1), 0);
        }
        if ((*(void *)(*(void *)(v24[0] + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v25[0] + 24)
                                                                                                  + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v23 = *(void **)(v27[1] + 24);
          v26[0] = *(void **)(*v27 + 24);
          v26[1] = v23;
          v26[2] = *(void **)(v27[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v26, (mlir::MLIRContext *)3, 0);
        }
        uint64_t v16 = *((void *)a3 + 2);
        if (v16)
        {
          if (mlir::RewriterBase::Listener::classof(v16))
          {
            goto LABEL_31;
          }
        }
      }
      goto LABEL_33;
    }
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_34;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v19 = *((void *)v7 + 3);
      goto LABEL_30;
    }
  }
LABEL_33:
  uint64_t v18 = 0;
LABEL_34:
  int v21 = v27;
  if (v27 != v29) {
LABEL_35:
  }
    free(v21);
  return v18;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::DivFOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.divf", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.divf";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::DivFOp,void>::id) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::DivFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::DivFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::DivFOfNegF::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::constFoldBinaryOp<mlir::FloatAttr,llvm::APFloat,mlir::ub::PoisonAttr,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0>(llvm::ArrayRef<mlir::Attribute>,mlir::arith::RemFOp::fold(mlir::arith::RemFOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0 &&)::{lambda(llvm::APFloat,llvm::APFloat)#1}::operator()(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v11[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  if (v7 != v6)
  {
    uint64_t v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v11, v5);
    unint64_t v9 = (const llvm::detail::DoubleAPFloat *)(a3 + 8);
    if (v7 != (void *)v11[0]) {
      goto LABEL_3;
    }
LABEL_8:
    llvm::detail::DoubleAPFloat::remainder(v8, v9);
  }
  uint64_t v8 = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(v11, v5);
  unint64_t v9 = (const llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v7 == (void *)v11[0]) {
    goto LABEL_8;
  }
LABEL_3:
  llvm::detail::IEEEFloat::remainder((long long **)v8, v9);
  BOOL v10 = a1 + 8;
  if (v7 == (void *)v11[0])
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v11);
    a1[32] = 1;
    if (v7 != (void *)v11[0]) {
      goto LABEL_5;
    }
LABEL_10:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v11);
    return;
  }
  llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v10, (uint64_t)v11);
  a1[32] = 1;
  if (v7 == (void *)v11[0]) {
    goto LABEL_10;
  }
LABEL_5:
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v11);
}

void anonymous namespace'::ExtSIOfExtUI::~ExtSIOfExtUI(_anonymous_namespace_::ExtSIOfExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::ExtSIOfExtUI::matchAndRewrite(_anonymous_namespace_::ExtSIOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v16[4] = *MEMORY[0x263EF8340];
  uint64_t v14 = v16;
  v16[0] = a2;
  uint64_t v15 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  v13[0] = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v13);
  if (DefiningOp)
  {
    uint64_t v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
      {
        uint64_t v10 = v15;
        if (v15 < HIDWORD(v15)) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
LABEL_14:
        uint64_t v8 = 0;
        unint64_t v9 = v14;
        if (v14 == v16) {
          return v8;
        }
        goto LABEL_20;
      }
    }
    uint64_t v10 = v15;
    if (v15 < HIDWORD(v15)) {
      goto LABEL_18;
    }
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v10 + 1, 8);
    LODWORD(v10) = v15;
LABEL_18:
    v14[v10] = v6;
    LODWORD(v15) = v15 + 1;
    uint64_t v11 = *(void **)(v14[1] + 24);
    v13[0] = *(void **)(*v14 + 24);
    v13[1] = v11;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v13, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(v8))
    {
      unint64_t v9 = v14;
      if (v14 == v16) {
        return v8;
      }
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v9 = v14;
  if (v14 != v16) {
LABEL_20:
  }
    free(v9);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::ExtSIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  int v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::TruncIExtSIToExtSI::~TruncIExtSIToExtSI(_anonymous_namespace_::TruncIExtSIToExtSI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(_anonymous_namespace_::TruncIExtSIToExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v34[4] = *MEMORY[0x263EF8340];
  uint64_t v32 = v34;
  v34[0] = a2;
  uint64_t v33 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v31[0] = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v31);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_56;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_55;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_56;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, v31);
      goto LABEL_42;
    }
    goto LABEL_55;
  }
  if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
  {
    uint64_t v12 = *(void *)(DefiningOp + 72);
    uint64_t v13 = v33;
    if (v33 < HIDWORD(v33)) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = v33;
    if (v33 < HIDWORD(v33)) {
      goto LABEL_15;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v13 + 1, 8);
  LODWORD(v13) = v33;
LABEL_15:
  v32[v13] = v7;
  LODWORD(v33) = v33 + 1;
  if (*(_DWORD *)(v7 + 36)) {
    uint64_t v14 = v7 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31)) {
    IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  }
  else {
    IntOrFloatBitunsigned int Width = -1;
  }
  if (*((_DWORD *)v5 + 9)) {
    uint64_t v17 = (uint64_t)v5 - 16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
  {
    if (IntOrFloatBitWidth <= mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31)) {
      goto LABEL_38;
    }
  }
  else if (IntOrFloatBitWidth <= -1)
  {
    goto LABEL_38;
  }
  if (*((_DWORD *)v5 + 9)) {
    uint64_t v19 = (uint64_t)v5 - 16;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::Type::isIntOrFloat((mlir::Type *)v31)
    || !mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
  {
LABEL_38:
    uint64_t v24 = *((void *)a3 + 2);
    if (v24 && mlir::RewriterBase::Listener::classof(v24))
    {
      uint64_t v25 = *((void *)a2 + 3);
LABEL_41:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v24 + 64))(v24, v25, v26, v31);
LABEL_42:
      uint64_t v8 = v11;
      uint64_t v27 = v32;
      if (v32 == v34) {
        return v8;
      }
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (*((_DWORD *)v5 + 9)) {
    uint64_t v21 = (uint64_t)v5 - 16;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31)) {
    uint64_t v23 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  }
  else {
    uint64_t v23 = -1;
  }
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31)) {
    uint64_t v28 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  }
  else {
    uint64_t v28 = -1;
  }
  if (v23 > v28)
  {
    v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
      {
        uint64_t v29 = *(void **)(v32[1] + 24);
        v31[0] = *(void **)(*v32 + 24);
        v31[1] = v29;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v31, (mlir::MLIRContext *)2, 0);
      }
    }
  }
  uint64_t v24 = *((void *)a3 + 2);
  if (v24 && mlir::RewriterBase::Listener::classof(v24))
  {
    uint64_t v25 = *((void *)a2 + 3);
    goto LABEL_41;
  }
LABEL_55:
  uint64_t v8 = 0;
LABEL_56:
  uint64_t v27 = v32;
  if (v32 != v34) {
LABEL_57:
  }
    free(v27);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'ext, tr' failed to satisfy constraint: ''";
  uint64_t v14 = 51;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtSIToExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'tr, x' failed to satisfy constraint: ''";
  uint64_t v14 = 49;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::TruncIExtUIToExtUI::~TruncIExtUIToExtUI(_anonymous_namespace_::TruncIExtUIToExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(_anonymous_namespace_::TruncIExtUIToExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v34[4] = *MEMORY[0x263EF8340];
  uint64_t v32 = v34;
  v34[0] = a2;
  uint64_t v33 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v31[0] = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v31);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_56;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_12;
    }
    goto LABEL_55;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_56;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_12:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, v31);
      goto LABEL_42;
    }
    goto LABEL_55;
  }
  if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
  {
    uint64_t v12 = *(void *)(DefiningOp + 72);
    uint64_t v13 = v33;
    if (v33 < HIDWORD(v33)) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = v33;
    if (v33 < HIDWORD(v33)) {
      goto LABEL_15;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v13 + 1, 8);
  LODWORD(v13) = v33;
LABEL_15:
  v32[v13] = v7;
  LODWORD(v33) = v33 + 1;
  if (*(_DWORD *)(v7 + 36)) {
    uint64_t v14 = v7 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31)) {
    IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  }
  else {
    IntOrFloatBitunsigned int Width = -1;
  }
  if (*((_DWORD *)v5 + 9)) {
    uint64_t v17 = (uint64_t)v5 - 16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = mlir::detail::OpResultImpl::getNextResultAtOffset(v17, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
  {
    if (IntOrFloatBitWidth <= mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31)) {
      goto LABEL_38;
    }
  }
  else if (IntOrFloatBitWidth <= -1)
  {
    goto LABEL_38;
  }
  if (*((_DWORD *)v5 + 9)) {
    uint64_t v19 = (uint64_t)v5 - 16;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = mlir::detail::OpResultImpl::getNextResultAtOffset(v19, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::Type::isIntOrFloat((mlir::Type *)v31)
    || !mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
  {
LABEL_38:
    uint64_t v24 = *((void *)a3 + 2);
    if (v24 && mlir::RewriterBase::Listener::classof(v24))
    {
      uint64_t v25 = *((void *)a2 + 3);
LABEL_41:
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v24 + 64))(v24, v25, v26, v31);
LABEL_42:
      uint64_t v8 = v11;
      uint64_t v27 = v32;
      if (v32 == v34) {
        return v8;
      }
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (*((_DWORD *)v5 + 9)) {
    uint64_t v21 = (uint64_t)v5 - 16;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = mlir::detail::OpResultImpl::getNextResultAtOffset(v21, 0);
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31)) {
    uint64_t v23 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  }
  else {
    uint64_t v23 = -1;
  }
  v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)v31)) {
    uint64_t v28 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31);
  }
  else {
    uint64_t v28 = -1;
  }
  if (v23 > v28)
  {
    v31[0] = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)v31))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v31))
      {
        uint64_t v29 = *(void **)(v32[1] + 24);
        v31[0] = *(void **)(*v32 + 24);
        v31[1] = v29;
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v31, (mlir::MLIRContext *)2, 0);
      }
    }
  }
  uint64_t v24 = *((void *)a3 + 2);
  if (v24 && mlir::RewriterBase::Listener::classof(v24))
  {
    uint64_t v25 = *((void *)a2 + 3);
    goto LABEL_41;
  }
LABEL_55:
  uint64_t v8 = 0;
LABEL_56:
  uint64_t v27 = v32;
  if (v32 != v34) {
LABEL_57:
  }
    free(v27);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'ext, tr' failed to satisfy constraint: ''";
  uint64_t v14 = 51;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIExtUIToExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'tr, x' failed to satisfy constraint: ''";
  uint64_t v14 = 49;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::TruncIShrSIToTrunciShrUI::~TruncIShrSIToTrunciShrUI(_anonymous_namespace_::TruncIShrSIToTrunciShrUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(_anonymous_namespace_::TruncIShrSIToTrunciShrUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v43[4] = *MEMORY[0x263EF8340];
  uint64_t v41 = v43;
  v43[0] = a2;
  uint64_t v42 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t ElementTypeOrSelf = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_73;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
      goto LABEL_32;
    }
    goto LABEL_72;
  }
  uint64_t v7 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ShRSIOp,void>::id)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_73;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
LABEL_32:
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, &ElementTypeOrSelf);
      goto LABEL_33;
    }
    goto LABEL_72;
  }
  uint64_t v11 = *(void *)(DefiningOp + 72);
  uint64_t ElementTypeOrSelf = *(void **)(v11 + 56);
  uint64_t v12 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v12)
  {
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_73;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v7 + 24);
      goto LABEL_32;
    }
    goto LABEL_72;
  }
  uint64_t v13 = v12;
  uint64_t v39 = (void **)(v12 - 16);
  uint64_t v14 = mlir::Value::getDefiningOp((mlir::Value *)&v39);
  if (!v14) {
    goto LABEL_26;
  }
  uint64_t v15 = v14;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(v14 + 48))) {
    goto LABEL_26;
  }
  uint64_t ElementTypeOrSelf = v38;
  uint64_t v37 = 0x100000000;
  mlir::Operation::fold(v15, 0, 0, (uint64_t)&ElementTypeOrSelf);
  uint64_t v16 = (void *)(*(void *)ElementTypeOrSelf & 0xFFFFFFFFFFFFFFF8);
  if (ElementTypeOrSelf != v38) {
    free(ElementTypeOrSelf);
  }
  if (!v16)
  {
LABEL_26:
    uint64_t v8 = *((void *)a3 + 2);
    if (!v8) {
      goto LABEL_73;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *(void *)(v13 + 24);
      goto LABEL_32;
    }
    goto LABEL_72;
  }
  uint64_t ElementTypeOrSelf = "operand 0 of native code call '::mlir::success(::mlir::matchPattern($_self->getResult(0), ::mlir::"
                      "m_Constant(&$0)))' failed to satisfy constraint: 'TypedAttr instance'";
  uint64_t v37 = 167;
  if (mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v16 + 8) {
    || (v39 = &ElementTypeOrSelf, (uint64_t v25 = *((void *)a3 + 2)) != 0)
  }
    && mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
  {
    int v17 = v42;
    if (v42 >= HIDWORD(v42))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v42 + 1, 8);
      int v17 = v42;
    }
    v41[v17] = v13;
    uint64_t v18 = (v42 + 1);
    LODWORD(v42) = v18;
    if (v18 >= HIDWORD(v42))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v18 + 1, 8);
      LODWORD(v18) = v42;
    }
    v41[v18] = v7;
    LODWORD(v42) = v42 + 1;
    LODWORD(v37) = 1;
    uint64_t ElementTypeOrSelf = 0;
    uint64_t v39 = &ElementTypeOrSelf;
    char v19 = mlir::detail::constant_int_value_binder::match((uint64_t *)&v39, (uint64_t)v16);
    unsigned int v20 = v37;
    if ((v19 & 1) == 0)
    {
      if (v37 >= 0x41 && ElementTypeOrSelf) {
        MEMORY[0x21667D390](ElementTypeOrSelf, 0x1000C8000313F17);
      }
LABEL_69:
      uint64_t v33 = *((void *)a3 + 2);
      if (v33 && mlir::RewriterBase::Listener::classof(v33))
      {
LABEL_33:
        uint64_t v8 = v23;
        uint64_t v24 = v41;
        if (v41 == v43) {
          return v8;
        }
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    uint64_t v21 = ElementTypeOrSelf;
    uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v11 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v35 = v21;
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
      IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
    }
    else {
      IntOrFloatBitunsigned int Width = -1;
    }
    if (*((_DWORD *)v5 + 9)) {
      uint64_t v26 = (uint64_t)v5 - 16;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v26, 0);
    uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
      uint64_t v28 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
    }
    else {
      uint64_t v28 = -1;
    }
    LODWORD(v40) = 1;
    uint64_t v39 = 0;
    uint64_t ElementTypeOrSelf = &v39;
    if (mlir::detail::constant_int_value_binder::match((uint64_t *)&ElementTypeOrSelf, (uint64_t)v16))
    {
      LODWORD(v37) = v40;
      uint64_t ElementTypeOrSelf = v39;
      v38[0] = 1;
    }
    else
    {
      LOBYTE(ElementTypeOrSelf) = 0;
      v38[0] = 0;
      if (v40 >= 0x41 && v39) {
        MEMORY[0x21667D390](v39, 0x1000C8000313F17);
      }
    }
    unsigned int v29 = v37;
    if (v37 >= 0x41)
    {
      if (v29 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&ElementTypeOrSelf) > 0x40)
      {
        BOOL v31 = 0;
LABEL_60:
        if (v38[0] && v29 >= 0x41 && ElementTypeOrSelf) {
          MEMORY[0x21667D390](ElementTypeOrSelf, 0x1000C8000313F17);
        }
        if (v20 >= 0x41 && v35) {
          MEMORY[0x21667D390](v35, 0x1000C8000313F17);
        }
        if (v31)
        {
          uint64_t v32 = *(void *)(v41[1] + 24);
          uint64_t ElementTypeOrSelf = *(void **)(*v41 + 24);
          uint64_t v37 = v32;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)2, 0);
        }
        goto LABEL_69;
      }
      p_uint64_t ElementTypeOrSelf = ElementTypeOrSelf;
    }
    else
    {
      p_uint64_t ElementTypeOrSelf = &ElementTypeOrSelf;
    }
    BOOL v31 = *p_ElementTypeOrSelf == IntOrFloatBitWidth - v28;
    goto LABEL_60;
  }
LABEL_72:
  uint64_t v8 = 0;
LABEL_73:
  uint64_t v24 = v41;
  if (v41 != v43) {
LABEL_74:
  }
    free(v24);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ShRUIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.shrui", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.shrui";
    v18[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::TruncIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.trunci", (const unsigned __int8 *)0xC, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.trunci";
    void v20[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ShRSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "::mlir::success(::mlir::matchPattern(op2->getResult(0), ::mlir::m_Constant(&arg2_0))) return ::mlir::failure";
  uint64_t v14 = 108;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::__mlir_ods_local_attr_constraint_ArithCanonicalization2(mlir::PatternRewriter &,mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(void ****a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  __int16 v15 = 261;
  v14[0] = v3;
  v14[1] = v2;
  uint64_t v4 = mlir::Diagnostic::operator<<(a2, v14);
  uint64_t v5 = v4 + 16;
  unint64_t v6 = *(void *)(v4 + 16);
  int v16 = 3;
  uint64_t v17 = ": TypedAttr instance";
  uint64_t v18 = 20;
  uint64_t v7 = *(unsigned int *)(v4 + 24);
  uint64_t v8 = (__n128 *)&v16;
  if (v7 >= *(_DWORD *)(v4 + 28))
  {
    unint64_t v11 = v7 + 1;
    BOOL v12 = v6 + 24 * v7 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v12)
    {
      uint64_t v13 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      uint64_t v8 = (__n128 *)&v13[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v4 + 32), v11, 24);
      unint64_t v6 = *(void *)(v4 + 16);
      uint64_t v8 = (__n128 *)&v16;
    }
  }
  unint64_t v9 = (__n128 *)(v6 + 24 * *(unsigned int *)(v4 + 24));
  __n128 result = *v8;
  v9[1].n128_u64[0] = v8[1].n128_u64[0];
  *unint64_t v9 = result;
  ++*(_DWORD *)(v4 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrSIToTrunciShrUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, tr, c0' failed to satisfy constraint: ''";
  uint64_t v14 = 53;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  unint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      unint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::TruncIShrUIMulIToMulSIExtended::~TruncIShrUIMulIToMulSIExtended(_anonymous_namespace_::TruncIShrUIMulIToMulSIExtended *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(_anonymous_namespace_::TruncIShrUIMulIToMulSIExtended *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v66[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v56 = 0;
  unsigned int v64 = v66;
  v66[0] = a2;
  uint64_t v65 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = 0;
  }
  uint64_t ElementTypeOrSelf = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *((void *)v6 + 3);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v8 + 24);
LABEL_14:
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v9 + 64))(v9, v10, v11, &ElementTypeOrSelf);
      goto LABEL_15;
    }
    goto LABEL_123;
  }
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(DefiningOp + 72) + 24);
  uint64_t v14 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v14)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v15 = v14;
  if (*(_UNKNOWN **)(*(void *)(v14 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(v14 + 72) + 24);
  uint64_t v16 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v16)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v17 = v16;
  if (*(_UNKNOWN **)(*(void *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(unsigned char *)(v16 + 46) & 0x80) == 0)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v65;
      if (v65 < HIDWORD(v65)) {
        goto LABEL_37;
      }
      goto LABEL_100;
    }
    uint64_t v20 = *(void *)(v16 + 72);
  }
  else
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_123;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_123;
    }
    uint64_t v20 = v5;
    if (!v19) {
      goto LABEL_123;
    }
  }
  uint64_t v21 = v65;
  if (v65 < HIDWORD(v65)) {
    goto LABEL_37;
  }
LABEL_100:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v21 + 1, 8);
  LODWORD(v21) = v65;
LABEL_37:
  *((void *)v64 + v21) = v17;
  LODWORD(v65) = v65 + 1;
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(v15 + 72) + 56);
  uint64_t v22 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v22)
  {
    uint64_t v13 = v64;
    if (v64 == v66) {
      return v9;
    }
    goto LABEL_125;
  }
  uint64_t v23 = v22;
  if (*(_UNKNOWN **)(*(void *)(v22 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(unsigned char *)(v22 + 46) & 0x80) == 0)
    {
      uint64_t v5 = 0;
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v22);
      uint64_t v27 = v65;
      if (v65 < HIDWORD(v65)) {
        goto LABEL_48;
      }
      goto LABEL_130;
    }
    uint64_t v5 = *(void *)(v22 + 72);
  }
  else
  {
    uint64_t v24 = v20;
    uint64_t v25 = *((void *)a3 + 2);
    if (!v25) {
      goto LABEL_123;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_123;
    }
    uint64_t v20 = v24;
    if (!v26) {
      goto LABEL_123;
    }
  }
  llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v23);
  uint64_t v27 = v65;
  if (v65 < HIDWORD(v65)) {
    goto LABEL_48;
  }
LABEL_130:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v27 + 1, 8);
  LODWORD(v27) = v65;
LABEL_48:
  *((void *)v64 + v27) = v15;
  LODWORD(v65) = v65 + 1;
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(v8 + 72) + 56);
  uint64_t v28 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v28)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v29 = v28;
    goto LABEL_123;
  unsigned int v30 = v65;
  if (v65 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v65 + 1, 8);
    unsigned int v30 = v65;
  }
  *((void *)v64 + v30) = v29;
  uint64_t v31 = (v65 + 1);
  LODWORD(v65) = v31;
  if (v31 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v31 + 1, 8);
    LODWORD(v31) = v65;
  }
  *((void *)v64 + v31) = v8;
  LODWORD(v65) = v65 + 1;
  if (*((_DWORD *)v6 + 9)) {
    uint64_t v32 = (uint64_t)v6 - 16;
  }
  else {
    uint64_t v32 = 0;
  }
  unint64_t v33 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if ((*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33
    || (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33)
  {
    uint64_t v34 = *((void *)a3 + 2);
    if (v34 && mlir::RewriterBase::Listener::classof(v34))
    {
      uint64_t v35 = *((void *)a2 + 3);
LABEL_62:
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v34 + 64))(v34, v35, v36, &ElementTypeOrSelf);
LABEL_15:
      uint64_t v9 = v12;
      uint64_t v13 = v64;
      if (v64 == v66) {
        return v9;
      }
      goto LABEL_125;
    }
    goto LABEL_123;
  }
  if (*(_DWORD *)(v15 + 36)) {
    uint64_t v37 = v15 - 16;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
    IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  }
  else {
    IntOrFloatBitunsigned int Width = -1;
  }
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
    uint64_t v40 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  }
  else {
    uint64_t v40 = -1;
  }
  if (IntOrFloatBitWidth > v40)
  {
    uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf))
      {
        LODWORD(v60) = 1;
        uint64_t ElementTypeOrSelf = 0;
        p_uint64_t ElementTypeOrSelf = &ElementTypeOrSelf;
        if (v56)
        {
          char v41 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_ElementTypeOrSelf, v56);
          unsigned int v42 = v60;
          if (v41)
          {
            unsigned __int8 v55 = ElementTypeOrSelf;
            if (*(_DWORD *)(v15 + 36)) {
              uint64_t v43 = v15 - 16;
            }
            else {
              uint64_t v43 = 0;
            }
            uint64_t v44 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
            uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
              uint64_t v45 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            }
            else {
              uint64_t v45 = -1;
            }
            uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
              uint64_t v46 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            }
            else {
              uint64_t v46 = -1;
            }
            LODWORD(v58) = 1;
            p_uint64_t ElementTypeOrSelf = 0;
            uint64_t ElementTypeOrSelf = &p_ElementTypeOrSelf;
            if (v56)
            {
              if (mlir::detail::constant_int_value_binder::match((uint64_t *)&ElementTypeOrSelf, v56))
              {
                LODWORD(v60) = v58;
                uint64_t ElementTypeOrSelf = p_ElementTypeOrSelf;
                char v47 = 1;
                LOBYTE(v61) = 1;
              }
              else
              {
                char v47 = 0;
                LOBYTE(ElementTypeOrSelf) = 0;
                LOBYTE(v61) = 0;
                if (v58 >= 0x41)
                {
                  if (p_ElementTypeOrSelf) {
                    MEMORY[0x21667D390](p_ElementTypeOrSelf, 0x1000C8000313F17);
                  }
                  char v47 = 0;
                }
              }
            }
            else
            {
              char v47 = 0;
              LOBYTE(ElementTypeOrSelf) = 0;
              LOBYTE(v61) = 0;
            }
            unsigned int v48 = v60;
            if (v60 >= 0x41)
            {
              if (v48 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&ElementTypeOrSelf) > 0x40)
              {
                BOOL v50 = 1;
LABEL_112:
                char v51 = v47 ^ 1;
                if (v48 < 0x41) {
                  char v51 = 1;
                }
                if ((v51 & 1) == 0 && ElementTypeOrSelf) {
                  MEMORY[0x21667D390](ElementTypeOrSelf, 0x1000C8000313F17);
                }
                if (v42 >= 0x41 && v55)
                {
                  MEMORY[0x21667D390](v55, 0x1000C8000313F17);
                  if (v50) {
                    goto LABEL_120;
                  }
                }
                else if (v50)
                {
                  goto LABEL_120;
                }
                uint64_t v53 = *(void *)(*((void *)v64 + 1) + 24);
                uint64_t ElementTypeOrSelf = *(void **)(*(void *)v64 + 24);
                uint64_t v60 = v53;
                uint64_t v54 = *(void *)(*((void *)v64 + 3) + 24);
                uint64_t v61 = *(void *)(*((void *)v64 + 2) + 24);
                uint64_t v62 = v54;
                uint64_t v63 = *(void *)(*((void *)v64 + 4) + 24);
                mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)5, 0);
              }
              uint64_t v49 = ElementTypeOrSelf;
            }
            else
            {
              uint64_t v49 = &ElementTypeOrSelf;
            }
            BOOL v50 = *v49 != v45 - v46;
            goto LABEL_112;
          }
          if (v60 >= 0x41 && ElementTypeOrSelf) {
            MEMORY[0x21667D390](ElementTypeOrSelf, 0x1000C8000313F17);
          }
        }
LABEL_120:
        uint64_t v34 = *((void *)a3 + 2);
        if (v34 && mlir::RewriterBase::Listener::classof(v34))
        {
          uint64_t v35 = *((void *)a2 + 3);
          goto LABEL_62;
        }
        goto LABEL_123;
      }
    }
  }
  uint64_t v34 = *((void *)a3 + 2);
  if (v34 && mlir::RewriterBase::Listener::classof(v34))
  {
    uint64_t v35 = *((void *)a2 + 3);
    goto LABEL_62;
  }
LABEL_123:
  uint64_t v9 = 0;
LABEL_124:
  uint64_t v13 = v64;
  if (v64 != v66) {
LABEL_125:
  }
    free(v13);
  return v9;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !mlir::RewriterBase::Listener::classof(a1)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), uint64_t))(*(void *)a1 + 64);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulSIExtendedOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.mulsi_extended", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.mulsi_extended";
    v18[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::MulSIExtendedOp::build(v11, (uint64_t)v20, *a3, *a4);
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulSIExtendedOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ShRUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp2 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp2";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp2";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'tr, x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 52;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'mul, x' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulSIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'mul, x, c0' failed to satisfy constraint: ''";
  uint64_t v14 = 54;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::TruncIShrUIMulIToMulUIExtended::~TruncIShrUIMulIToMulUIExtended(_anonymous_namespace_::TruncIShrUIMulIToMulUIExtended *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(_anonymous_namespace_::TruncIShrUIMulIToMulUIExtended *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v66[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v56 = 0;
  unsigned int v64 = v66;
  v66[0] = a2;
  uint64_t v65 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::TruncIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t ElementTypeOrSelf = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *((void *)v6 + 3);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ShRUIOp,void>::id)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v8 + 24);
LABEL_14:
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v9 + 64))(v9, v10, v11, &ElementTypeOrSelf);
      goto LABEL_15;
    }
    goto LABEL_123;
  }
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(DefiningOp + 72) + 24);
  uint64_t v14 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v14)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v15 = v14;
  if (*(_UNKNOWN **)(*(void *)(v14 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::MulIOp,void>::id)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(v14 + 72) + 24);
  uint64_t v16 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v16)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v15 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v17 = v16;
  if (*(_UNKNOWN **)(*(void *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(unsigned char *)(v16 + 46) & 0x80) == 0)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v65;
      if (v65 < HIDWORD(v65)) {
        goto LABEL_37;
      }
      goto LABEL_100;
    }
    uint64_t v20 = *(void *)(v16 + 72);
  }
  else
  {
    uint64_t v18 = *((void *)a3 + 2);
    if (!v18) {
      goto LABEL_123;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_123;
    }
    uint64_t v20 = v5;
    if (!v19) {
      goto LABEL_123;
    }
  }
  uint64_t v21 = v65;
  if (v65 < HIDWORD(v65)) {
    goto LABEL_37;
  }
LABEL_100:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v21 + 1, 8);
  LODWORD(v21) = v65;
LABEL_37:
  *((void *)v64 + v21) = v17;
  LODWORD(v65) = v65 + 1;
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(v15 + 72) + 56);
  uint64_t v22 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v22)
  {
    uint64_t v13 = v64;
    if (v64 == v66) {
      return v9;
    }
    goto LABEL_125;
  }
  uint64_t v23 = v22;
  if (*(_UNKNOWN **)(*(void *)(v22 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(unsigned char *)(v22 + 46) & 0x80) == 0)
    {
      uint64_t v5 = 0;
      llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v22);
      uint64_t v27 = v65;
      if (v65 < HIDWORD(v65)) {
        goto LABEL_48;
      }
      goto LABEL_130;
    }
    uint64_t v5 = *(void *)(v22 + 72);
  }
  else
  {
    uint64_t v24 = v20;
    uint64_t v25 = *((void *)a3 + 2);
    if (!v25) {
      goto LABEL_123;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_123;
    }
    uint64_t v20 = v24;
    if (!v26) {
      goto LABEL_123;
    }
  }
  llvm::SmallVectorTemplateBase<mlir::Type,true>::push_back((uint64_t)&v64, v23);
  uint64_t v27 = v65;
  if (v65 < HIDWORD(v65)) {
    goto LABEL_48;
  }
LABEL_130:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v27 + 1, 8);
  LODWORD(v27) = v65;
LABEL_48:
  *((void *)v64 + v27) = v15;
  LODWORD(v65) = v65 + 1;
  uint64_t ElementTypeOrSelf = *(void **)(*(void *)(v8 + 72) + 56);
  uint64_t v28 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v28)
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_124;
    }
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v10 = *(void *)(v8 + 24);
      goto LABEL_14;
    }
    goto LABEL_123;
  }
  uint64_t v29 = v28;
    goto LABEL_123;
  unsigned int v30 = v65;
  if (v65 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v65 + 1, 8);
    unsigned int v30 = v65;
  }
  *((void *)v64 + v30) = v29;
  uint64_t v31 = (v65 + 1);
  LODWORD(v65) = v31;
  if (v31 >= HIDWORD(v65))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, v66, v31 + 1, 8);
    LODWORD(v31) = v65;
  }
  *((void *)v64 + v31) = v8;
  LODWORD(v65) = v65 + 1;
  if (*((_DWORD *)v6 + 9)) {
    uint64_t v32 = (uint64_t)v6 - 16;
  }
  else {
    uint64_t v32 = 0;
  }
  unint64_t v33 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v32, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  if ((*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33
    || (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != v33)
  {
    uint64_t v34 = *((void *)a3 + 2);
    if (v34 && mlir::RewriterBase::Listener::classof(v34))
    {
      uint64_t v35 = *((void *)a2 + 3);
LABEL_62:
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v34 + 64))(v34, v35, v36, &ElementTypeOrSelf);
LABEL_15:
      uint64_t v9 = v12;
      uint64_t v13 = v64;
      if (v64 == v66) {
        return v9;
      }
      goto LABEL_125;
    }
    goto LABEL_123;
  }
  if (*(_DWORD *)(v15 + 36)) {
    uint64_t v37 = v15 - 16;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v37, 0);
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
    IntOrFloatBitunsigned int Width = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  }
  else {
    IntOrFloatBitunsigned int Width = -1;
  }
  uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
    uint64_t v40 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
  }
  else {
    uint64_t v40 = -1;
  }
  if (IntOrFloatBitWidth > v40)
  {
    uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
    if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf))
    {
      if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf))
      {
        LODWORD(v60) = 1;
        uint64_t ElementTypeOrSelf = 0;
        p_uint64_t ElementTypeOrSelf = &ElementTypeOrSelf;
        if (v56)
        {
          char v41 = mlir::detail::constant_int_value_binder::match((uint64_t *)&p_ElementTypeOrSelf, v56);
          unsigned int v42 = v60;
          if (v41)
          {
            unsigned __int8 v55 = ElementTypeOrSelf;
            if (*(_DWORD *)(v15 + 36)) {
              uint64_t v43 = v15 - 16;
            }
            else {
              uint64_t v43 = 0;
            }
            uint64_t v44 = mlir::detail::OpResultImpl::getNextResultAtOffset(v43, 0);
            uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(v44 + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
              uint64_t v45 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            }
            else {
              uint64_t v45 = -1;
            }
            uint64_t ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf((void *)(*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
            if (mlir::Type::isIntOrFloat((mlir::Type *)&ElementTypeOrSelf)) {
              uint64_t v46 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf);
            }
            else {
              uint64_t v46 = -1;
            }
            LODWORD(v58) = 1;
            p_uint64_t ElementTypeOrSelf = 0;
            uint64_t ElementTypeOrSelf = &p_ElementTypeOrSelf;
            if (v56)
            {
              if (mlir::detail::constant_int_value_binder::match((uint64_t *)&ElementTypeOrSelf, v56))
              {
                LODWORD(v60) = v58;
                uint64_t ElementTypeOrSelf = p_ElementTypeOrSelf;
                char v47 = 1;
                LOBYTE(v61) = 1;
              }
              else
              {
                char v47 = 0;
                LOBYTE(ElementTypeOrSelf) = 0;
                LOBYTE(v61) = 0;
                if (v58 >= 0x41)
                {
                  if (p_ElementTypeOrSelf) {
                    MEMORY[0x21667D390](p_ElementTypeOrSelf, 0x1000C8000313F17);
                  }
                  char v47 = 0;
                }
              }
            }
            else
            {
              char v47 = 0;
              LOBYTE(ElementTypeOrSelf) = 0;
              LOBYTE(v61) = 0;
            }
            unsigned int v48 = v60;
            if (v60 >= 0x41)
            {
              if (v48 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&ElementTypeOrSelf) > 0x40)
              {
                BOOL v50 = 1;
LABEL_112:
                char v51 = v47 ^ 1;
                if (v48 < 0x41) {
                  char v51 = 1;
                }
                if ((v51 & 1) == 0 && ElementTypeOrSelf) {
                  MEMORY[0x21667D390](ElementTypeOrSelf, 0x1000C8000313F17);
                }
                if (v42 >= 0x41 && v55)
                {
                  MEMORY[0x21667D390](v55, 0x1000C8000313F17);
                  if (v50) {
                    goto LABEL_120;
                  }
                }
                else if (v50)
                {
                  goto LABEL_120;
                }
                uint64_t v53 = *(void *)(*((void *)v64 + 1) + 24);
                uint64_t ElementTypeOrSelf = *(void **)(*(void *)v64 + 24);
                uint64_t v60 = v53;
                uint64_t v54 = *(void *)(*((void *)v64 + 3) + 24);
                uint64_t v61 = *(void *)(*((void *)v64 + 2) + 24);
                uint64_t v62 = v54;
                uint64_t v63 = *(void *)(*((void *)v64 + 4) + 24);
                mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)&ElementTypeOrSelf, (mlir::MLIRContext *)5, 0);
              }
              uint64_t v49 = ElementTypeOrSelf;
            }
            else
            {
              uint64_t v49 = &ElementTypeOrSelf;
            }
            BOOL v50 = *v49 != v45 - v46;
            goto LABEL_112;
          }
          if (v60 >= 0x41 && ElementTypeOrSelf) {
            MEMORY[0x21667D390](ElementTypeOrSelf, 0x1000C8000313F17);
          }
        }
LABEL_120:
        uint64_t v34 = *((void *)a3 + 2);
        if (v34 && mlir::RewriterBase::Listener::classof(v34))
        {
          uint64_t v35 = *((void *)a2 + 3);
          goto LABEL_62;
        }
        goto LABEL_123;
      }
    }
  }
  uint64_t v34 = *((void *)a3 + 2);
  if (v34 && mlir::RewriterBase::Listener::classof(v34))
  {
    uint64_t v35 = *((void *)a2 + 3);
    goto LABEL_62;
  }
LABEL_123:
  uint64_t v9 = 0;
LABEL_124:
  uint64_t v13 = v64;
  if (v64 != v66) {
LABEL_125:
  }
    free(v13);
  return v9;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !mlir::RewriterBase::Listener::classof(a1)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), uint64_t))(*(void *)a1 + 64);
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::MulUIExtendedOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v20[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.mului_extended", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.mului_extended";
    v18[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
    llvm::report_fatal_error((llvm::Twine *)v20, 1);
  }
  mlir::OperationState::OperationState(v20, a2, v9);
  mlir::arith::MulSIExtendedOp::build(v11, (uint64_t)v20, *a3, *a4);
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v20);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::MulUIExtendedOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v20);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ShRUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp2 is not ::mlir::arith::MulIOp type";
  uint64_t v14 = 43;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp2";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp2";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp1";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#8}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'tr, x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 52;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#9}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'mul, x' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::TruncIShrUIMulIToMulUIExtended::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#10}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'mul, x, c0' failed to satisfy constraint: ''";
  uint64_t v14 = 54;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::AndOfExtUI::~AndOfExtUI(_anonymous_namespace_::AndOfExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AndOfExtUI::matchAndRewrite(_anonymous_namespace_::AndOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        void v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::AndIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.andi", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.andi";
    v18[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AndOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AndOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AndOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::AndOfExtSI::~AndOfExtSI(_anonymous_namespace_::AndOfExtSI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::AndOfExtSI::matchAndRewrite(_anonymous_namespace_::AndOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::AndIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        void v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AndOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AndOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::AndOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::OrOfExtUI::~OrOfExtUI(_anonymous_namespace_::OrOfExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::OrOfExtUI::matchAndRewrite(_anonymous_namespace_::OrOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        void v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::OrIOp,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[38] = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.ori", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    __int16 v19 = 1283;
    v18[2] = (uint64_t)"arith.ori";
    v18[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v17 = 259;
    llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v9);
  uint64_t v11 = mlir::ValueRange::ValueRange(v20, *(void *)a3, *(unsigned int *)(a3 + 8));
  mlir::arith::AddIOp::build((uint64_t)v11, (uint64_t)v21, v20[0], v20[1], *(const void **)a4, *(unsigned int *)(a4 + 8));
  uint64_t v12 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((void *)v12 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v13;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::OrOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::OrOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::OrOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::OrOfExtSI::~OrOfExtSI(_anonymous_namespace_::OrOfExtSI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::OrOfExtSI::matchAndRewrite(_anonymous_namespace_::OrOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v27[4] = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    uint64_t v5 = *((void *)a2 + 9);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v25 = v27;
  v27[0] = a2;
  uint64_t v26 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::OrIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  v24[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (!DefiningOp)
  {
    uint64_t v11 = *((void *)a3 + 2);
    if (!v11) {
      goto LABEL_38;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v12 = *((void *)v6 + 3);
    goto LABEL_27;
  }
  uint64_t v8 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v14 = v26;
      if (v26 < HIDWORD(v26)) {
        goto LABEL_18;
      }
      goto LABEL_44;
    }
    uint64_t v10 = *(void *)(DefiningOp + 72);
  }
  else
  {
    uint64_t v9 = *((void *)a3 + 2);
    if (!v9) {
      goto LABEL_37;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_37;
    }
    uint64_t v10 = v5;
  }
  uint64_t v14 = v26;
  if (v26 < HIDWORD(v26)) {
    goto LABEL_18;
  }
LABEL_44:
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v14 + 1, 8);
  LODWORD(v14) = v26;
LABEL_18:
  v25[v14] = v8;
  LODWORD(v26) = v26 + 1;
  v24[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v15 = mlir::Value::getDefiningOp((mlir::Value *)v24);
  if (v15)
  {
    uint64_t v16 = v15;
    if (*(_UNKNOWN **)(*(void *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(unsigned char *)(v15 + 46) & 0x80) == 0)
      {
        uint64_t v5 = 0;
        uint64_t v20 = v26;
        if (v26 < HIDWORD(v26)) {
          goto LABEL_33;
        }
        goto LABEL_46;
      }
      uint64_t v5 = *(void *)(v15 + 72);
    }
    else
    {
      uint64_t v17 = *((void *)a3 + 2);
      if (!v17 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
        goto LABEL_37;
      }
    }
    uint64_t v20 = v26;
    if (v26 < HIDWORD(v26))
    {
LABEL_33:
      v25[v20] = v16;
      LODWORD(v26) = v26 + 1;
      if ((*(void *)(*(void *)(v10 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v5 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v23 = *(void **)(v25[1] + 24);
        v24[0] = *(void **)(*v25 + 24);
        v24[1] = v23;
        void v24[2] = *(void **)(v25[2] + 24);
        mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v24, (mlir::MLIRContext *)3, 0);
      }
      uint64_t v21 = *((void *)a3 + 2);
      if (!v21 || !mlir::RewriterBase::Listener::classof(v21)) {
        goto LABEL_37;
      }
LABEL_28:
      uint64_t v11 = v18;
      __int16 v19 = v25;
      if (v25 == v27) {
        return v11;
      }
      goto LABEL_39;
    }
LABEL_46:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v20 + 1, 8);
    LODWORD(v20) = v26;
    goto LABEL_33;
  }
  uint64_t v11 = *((void *)a3 + 2);
  if (!v11) {
    goto LABEL_38;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v12 = *((void *)v6 + 3);
LABEL_27:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v11 + 64))(v11, v12, v13, v24);
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v11 = 0;
LABEL_38:
  __int16 v19 = v25;
  if (v25 != v27) {
LABEL_39:
  }
    free(v19);
  return v11;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::OrOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::OrOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::OrOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'x, y' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t mlir::arith::UIToFPOp::fold(mlir::arith::UIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v12 = a2;
  FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v12);
  unsigned int Width = (llvm::APFloatBase *)mlir::FloatType::getWidth((mlir::FloatType *)&v12);
  unsigned int v11 = Width;
  if (Width > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v10);
  }
  BOOL v10 = 0;
  uint64_t v7 = (llvm::detail::IEEEFloat *)(a1 + 8);
  uint64_t v8 = llvm::APFloatBase::PPCDoubleDouble(Width);
  if (v8 == FloatSemantics) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (uint64_t)FloatSemantics);
  }
  llvm::detail::IEEEFloat::IEEEFloat(v7, FloatSemantics, &v10);
  if (v11 >= 0x41 && v10) {
    MEMORY[0x21667D390](v10, 0x1000C8000313F17);
  }
  if (v8 == *(void **)v7) {
    llvm::detail::DoubleAPFloat::convertFromAPInt();
  }
  return llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)v7, a3, 0, 1);
}

uint64_t llvm::APFloat::convertFromAPInt(llvm::APFloatBase *a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v7 = (uint64_t)a1 + 8;
  uint64_t v8 = (void *)*((void *)a1 + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v8)
  {
    llvm::detail::DoubleAPFloat::convertFromAPInt();
  }

  return llvm::detail::IEEEFloat::convertFromAPInt(v7, a2, a3, a4);
}

uint64_t mlir::arith::SIToFPOp::fold(mlir::arith::SIToFPOpGenericAdaptor<llvm::ArrayRef<mlir::Attribute>>)::$_0::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v12 = a2;
  FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v12);
  unsigned int Width = (llvm::APFloatBase *)mlir::FloatType::getWidth((mlir::FloatType *)&v12);
  unsigned int v11 = Width;
  if (Width > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v10);
  }
  BOOL v10 = 0;
  uint64_t v7 = (llvm::detail::IEEEFloat *)(a1 + 8);
  uint64_t v8 = llvm::APFloatBase::PPCDoubleDouble(Width);
  if (v8 == FloatSemantics) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, (uint64_t)FloatSemantics);
  }
  llvm::detail::IEEEFloat::IEEEFloat(v7, FloatSemantics, &v10);
  if (v11 >= 0x41 && v10) {
    MEMORY[0x21667D390](v10, 0x1000C8000313F17);
  }
  if (v8 == *(void **)v7) {
    llvm::detail::DoubleAPFloat::convertFromAPInt();
  }
  return llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)v7, a3, 1, 1);
}

void anonymous namespace'::IndexCastOfIndexCast::~IndexCastOfIndexCast(_anonymous_namespace_::IndexCastOfIndexCast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(_anonymous_namespace_::IndexCastOfIndexCast *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  __int16 v19 = v21;
  v21[0] = a2;
  uint64_t v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v18[0] = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id)
    {
      uint64_t v8 = *((void *)a3 + 2);
      if (v8)
      {
        if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
        {
          uint64_t v9 = *(void *)(v7 + 24);
          goto LABEL_12;
        }
LABEL_24:
        uint64_t v8 = 0;
        unsigned int v11 = v19;
        if (v19 == v21) {
          return v8;
        }
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v12 = *(void *)(DefiningOp + 72);
      uint64_t v13 = v20;
      if (v20 < HIDWORD(v20))
      {
LABEL_16:
        *((void *)v19 + v13) = v7;
        LODWORD(v20) = v20 + 1;
        if (*((_DWORD *)v5 + 9)) {
          uint64_t v14 = (uint64_t)v5 - 16;
        }
        else {
          uint64_t v14 = 0;
        }
        if ((*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v16 = *(void **)(*((void *)v19 + 1) + 24);
          v18[0] = *(void **)(*(void *)v19 + 24);
          v18[1] = v16;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v18, (mlir::MLIRContext *)2, 0);
        }
        uint64_t v15 = *((void *)a3 + 2);
        if (v15)
        {
          if (mlir::RewriterBase::Listener::classof(v15))
          {
            unsigned int v11 = v19;
            if (v19 == v21) {
              return v8;
            }
            goto LABEL_29;
          }
          goto LABEL_24;
        }
        uint64_t v8 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = v20;
      if (v20 < HIDWORD(v20)) {
        goto LABEL_16;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v13 + 1, 8);
    LODWORD(v13) = v20;
    goto LABEL_16;
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
LABEL_12:
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, v18);
      unsigned int v11 = v19;
      if (v19 == v21) {
        return v8;
      }
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_28:
  unsigned int v11 = v19;
  if (v19 != v21) {
LABEL_29:
  }
    free(v11);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unsigned int v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::IndexCastOp type";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unsigned int v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastOfIndexCast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'res, x' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      unsigned int v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::IndexCastOfExtSI::~IndexCastOfExtSI(_anonymous_namespace_::IndexCastOfExtSI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::IndexCastOfExtSI::matchAndRewrite(_anonymous_namespace_::IndexCastOfExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v16[4] = *MEMORY[0x263EF8340];
  uint64_t v14 = v16;
  v16[0] = a2;
  uint64_t v15 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  v13[0] = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v13);
  if (DefiningOp)
  {
    uint64_t v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
      {
        uint64_t v10 = v15;
        if (v15 < HIDWORD(v15)) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
LABEL_14:
        uint64_t v8 = 0;
        unint64_t v9 = v14;
        if (v14 == v16) {
          return v8;
        }
        goto LABEL_20;
      }
    }
    uint64_t v10 = v15;
    if (v15 < HIDWORD(v15)) {
      goto LABEL_18;
    }
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v10 + 1, 8);
    LODWORD(v10) = v15;
LABEL_18:
    v14[v10] = v6;
    LODWORD(v15) = v15 + 1;
    unsigned int v11 = *(void **)(v14[1] + 24);
    v13[0] = *(void **)(*v14 + 24);
    v13[1] = v11;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v13, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(v8))
    {
      unint64_t v9 = v14;
      if (v14 == v16) {
        return v8;
      }
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v9 = v14;
  if (v14 != v16) {
LABEL_20:
  }
    free(v9);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::IndexCastOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.index_cast", (const unsigned __int8 *)0x10, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.index_cast";
    void v20[3] = 16;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastOfExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::IndexCastUIOfIndexCastUI::~IndexCastUIOfIndexCastUI(_anonymous_namespace_::IndexCastUIOfIndexCastUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(_anonymous_namespace_::IndexCastUIOfIndexCastUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v21[4] = *MEMORY[0x263EF8340];
  __int16 v19 = v21;
  v21[0] = a2;
  uint64_t v20 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  v18[0] = *(void **)(*((void *)v5 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v18);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id)
    {
      uint64_t v8 = *((void *)a3 + 2);
      if (v8)
      {
        if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
        {
          uint64_t v9 = *(void *)(v7 + 24);
          goto LABEL_12;
        }
LABEL_24:
        uint64_t v8 = 0;
        uint64_t v11 = v19;
        if (v19 == v21) {
          return v8;
        }
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v12 = *(void *)(DefiningOp + 72);
      uint64_t v13 = v20;
      if (v20 < HIDWORD(v20))
      {
LABEL_16:
        *((void *)v19 + v13) = v7;
        LODWORD(v20) = v20 + 1;
        if (*((_DWORD *)v5 + 9)) {
          uint64_t v14 = (uint64_t)v5 - 16;
        }
        else {
          uint64_t v14 = 0;
        }
        if ((*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v14, 0) + 8) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)(v12 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v16 = *(void **)(*((void *)v19 + 1) + 24);
          v18[0] = *(void **)(*(void *)v19 + 24);
          v18[1] = v16;
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v18, (mlir::MLIRContext *)2, 0);
        }
        uint64_t v15 = *((void *)a3 + 2);
        if (v15)
        {
          if (mlir::RewriterBase::Listener::classof(v15))
          {
            uint64_t v11 = v19;
            if (v19 == v21) {
              return v8;
            }
            goto LABEL_29;
          }
          goto LABEL_24;
        }
        uint64_t v8 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = v20;
      if (v20 < HIDWORD(v20)) {
        goto LABEL_16;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v13 + 1, 8);
    LODWORD(v13) = v20;
    goto LABEL_16;
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
    {
      uint64_t v9 = *((void *)v5 + 3);
LABEL_12:
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v8 + 64))(v8, v9, v10, v18);
      uint64_t v11 = v19;
      if (v19 == v21) {
        return v8;
      }
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_28:
  uint64_t v11 = v19;
  if (v19 != v21) {
LABEL_29:
  }
    free(v11);
  return v8;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::IndexCastUIOp type";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastUIOfIndexCastUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'res, x' failed to satisfy constraint: ''";
  uint64_t v14 = 50;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::IndexCastUIOfExtUI::~IndexCastUIOfExtUI(_anonymous_namespace_::IndexCastUIOfExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::IndexCastUIOfExtUI::matchAndRewrite(_anonymous_namespace_::IndexCastUIOfExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  void v16[4] = *MEMORY[0x263EF8340];
  uint64_t v14 = v16;
  v16[0] = a2;
  uint64_t v15 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  v13[0] = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v13);
  if (DefiningOp)
  {
    uint64_t v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      if ((*(unsigned char *)(DefiningOp + 46) & 0x80) == 0)
      {
        uint64_t v10 = v15;
        if (v15 < HIDWORD(v15)) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (!v7 {
        || !mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))
      }
      {
LABEL_14:
        uint64_t v8 = 0;
        unint64_t v9 = v14;
        if (v14 == v16) {
          return v8;
        }
        goto LABEL_20;
      }
    }
    uint64_t v10 = v15;
    if (v15 < HIDWORD(v15)) {
      goto LABEL_18;
    }
LABEL_23:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v10 + 1, 8);
    LODWORD(v10) = v15;
LABEL_18:
    v14[v10] = v6;
    LODWORD(v15) = v15 + 1;
    uint64_t v11 = *(void **)(v14[1] + 24);
    v13[0] = *(void **)(*v14 + 24);
    v13[1] = v11;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v13, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v8 = *((void *)a3 + 2);
  if (v8)
  {
    if (mlir::RewriterBase::Listener::classof(v8))
    {
      unint64_t v9 = v14;
      if (v14 == v16) {
        return v8;
      }
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v9 = v14;
  if (v14 != v16) {
LABEL_20:
  }
    free(v9);
  return v8;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::IndexCastUIOp,llvm::SmallVector<mlir::Type,4u> &,llvm::SmallVector<mlir::Value,4u> &,llvm::SmallVector<mlir::NamedAttribute,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[38] = *MEMORY[0x263EF8340];
  uint64_t v17 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.index_castui", (const unsigned __int8 *)0x12, Context);
  if (!v12)
  {
    __int16 v21 = 1283;
    unint64_t v20[2] = (uint64_t)"arith.index_castui";
    void v20[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  mlir::ValueRange::ValueRange(v23, *(void *)a3, *(unsigned int *)(a3 + 8));
  uint64_t v13 = mlir::ValueRange::ValueRange(v22, *(void *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)v13, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(unsigned int *)(a5 + 8));
  uint64_t v14 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((void *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::IndexCastUIOp,void>::id) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v15;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::IndexCastUIOfExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::BitcastOfBitcast::~BitcastOfBitcast(_anonymous_namespace_::BitcastOfBitcast *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::BitcastOfBitcast::matchAndRewrite(_anonymous_namespace_::BitcastOfBitcast *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  uint64_t v17[4] = *MEMORY[0x263EF8340];
  uint64_t v15 = v17;
  v17[0] = a2;
  uint64_t v16 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = 0;
  }
  v14[0] = *(void **)(*((void *)v4 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v14);
  if (DefiningOp)
  {
    uint64_t v6 = DefiningOp;
    if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::BitcastOp,void>::id)
    {
      uint64_t v7 = *((void *)a3 + 2);
      if (v7)
      {
        if (mlir::RewriterBase::Listener::classof(v7))
        {
          uint64_t v8 = *(void *)(v6 + 24);
          goto LABEL_12;
        }
        uint64_t v7 = 0;
      }
      goto LABEL_18;
    }
    if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
    {
      uint64_t v11 = v16;
      if (v16 < HIDWORD(v16)) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v11 = v16;
      if (v16 < HIDWORD(v16)) {
        goto LABEL_16;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v11 + 1, 8);
    LODWORD(v11) = v16;
LABEL_16:
    *((void *)v15 + v11) = v6;
    LODWORD(v16) = v16 + 1;
    int v12 = *(void **)(*((void *)v15 + 1) + 24);
    v14[0] = *(void **)(*(void *)v15 + 24);
    v14[1] = v12;
    mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v14, (mlir::MLIRContext *)2, 0);
  }
  uint64_t v7 = *((void *)a3 + 2);
  if (v7)
  {
    if (mlir::RewriterBase::Listener::classof(v7))
    {
      uint64_t v8 = *((void *)v4 + 3);
LABEL_12:
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v7 + 64))(v7, v8, v9, v14);
      BOOL v10 = v15;
      if (v15 == v17) {
        return v7;
      }
      goto LABEL_19;
    }
    uint64_t v7 = 0;
    BOOL v10 = v15;
    if (v15 == v17) {
      return v7;
    }
LABEL_19:
    free(v10);
    return v7;
  }
LABEL_18:
  BOOL v10 = v15;
  if (v15 != v17) {
    goto LABEL_19;
  }
  return v7;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::BitcastOfBitcast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::BitcastOfBitcast::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::BitcastOp type";
  uint64_t v14 = 46;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::CmpIExtSI::~CmpIExtSI(_anonymous_namespace_::CmpIExtSI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::CmpIExtSI::matchAndRewrite(_anonymous_namespace_::CmpIExtSI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v32[4] = *MEMORY[0x263EF8340];
  int v5 = *((unsigned __int8 *)a2 + 47);
  uint64_t v28 = 0;
  unsigned int v30 = v32;
  v32[0] = a2;
  uint64_t v31 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5 && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"predicate", 9), v8))
  {
    uint64_t v9 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "predicate", 9uLL);
    if (!v9)
    {
LABEL_15:
      uint64_t v15 = *((void *)a3 + 2);
      if (v15 && mlir::RewriterBase::Listener::classof(v15))
      {
        uint64_t v16 = *((void *)a2 + 3);
LABEL_18:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v15 + 64))(v15, v16, v17, v29);
        goto LABEL_23;
      }
      goto LABEL_41;
    }
  }
  if ((mlir::arith::CmpIPredicateAttr::classof(v9) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v28 = v9;
  v29[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (!DefiningOp)
  {
    uint64_t v12 = *((void *)a3 + 2);
    if (!v12) {
      goto LABEL_42;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_41;
    }
    uint64_t v13 = *((void *)v6 + 3);
    goto LABEL_22;
  }
  uint64_t v11 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
  {
    uint64_t v12 = *((void *)a3 + 2);
    if (!v12) {
      goto LABEL_42;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_41;
    }
    uint64_t v13 = *(void *)(v11 + 24);
    goto LABEL_22;
  }
  if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
  {
    uint64_t v20 = *(void *)(DefiningOp + 72);
    uint64_t v21 = v31;
    if (v31 < HIDWORD(v31)) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = v31;
    if (v31 < HIDWORD(v31)) {
      goto LABEL_27;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v21 + 1, 8);
  LODWORD(v21) = v31;
LABEL_27:
  v30[v21] = v11;
  LODWORD(v31) = v31 + 1;
  v29[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v22 = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (v22)
  {
    uint64_t v23 = v22;
    if (*(_UNKNOWN **)(*(void *)(v22 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtSIOp,void>::id)
    {
      uint64_t v12 = *((void *)a3 + 2);
      if (!v12) {
        goto LABEL_42;
      }
      if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
        goto LABEL_41;
      }
      uint64_t v13 = *(void *)(v23 + 24);
      goto LABEL_22;
    }
    if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
    {
      uint64_t v24 = *(void *)(v22 + 72);
      uint64_t v25 = v31;
      if (v31 < HIDWORD(v31))
      {
LABEL_37:
        v30[v25] = v23;
        LODWORD(v31) = v31 + 1;
        if ((*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)(v24 + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v15 = *((void *)a3 + 2);
          if (v15 && mlir::RewriterBase::Listener::classof(v15))
          {
            uint64_t v16 = *((void *)a2 + 3);
            goto LABEL_18;
          }
          goto LABEL_41;
        }
        if (!mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28)
          || mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28) == 1)
        {
          uint64_t v27 = *(void **)(v30[1] + 24);
          v29[0] = *(void **)(*v30 + 24);
          v29[1] = v27;
          v29[2] = *(void **)(v30[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v29, (mlir::MLIRContext *)3, 0);
        }
LABEL_23:
        uint64_t v12 = v18;
        __int16 v19 = v30;
        if (v30 == v32) {
          return v12;
        }
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = v31;
      if (v31 < HIDWORD(v31)) {
        goto LABEL_37;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v25 + 1, 8);
    LODWORD(v25) = v31;
    goto LABEL_37;
  }
  uint64_t v12 = *((void *)a3 + 2);
  if (!v12) {
    goto LABEL_42;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v13 = *((void *)v6 + 3);
LABEL_22:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v12 + 64))(v12, v13, v14, v29);
    goto LABEL_23;
  }
LABEL_41:
  uint64_t v12 = 0;
LABEL_42:
  __int16 v19 = v30;
  if (v30 != v32) {
LABEL_43:
  }
    free(v19);
  return v12;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !mlir::RewriterBase::Listener::classof(a1)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), uint64_t))(*(void *)a1 + 64);
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "expected op 'arith.cmpi' to have attribute 'predicate' of type '::mlir::arith::CmpIPredicateAttr'";
  uint64_t v14 = 97;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtSIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'a, b' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtSI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'pred' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void anonymous namespace'::CmpIExtUI::~CmpIExtUI(_anonymous_namespace_::CmpIExtUI *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t anonymous namespace'::CmpIExtUI::matchAndRewrite(_anonymous_namespace_::CmpIExtUI *this, mlir::Operation *a2, mlir::PatternRewriter *a3)
{
  v32[4] = *MEMORY[0x263EF8340];
  int v5 = *((unsigned __int8 *)a2 + 47);
  uint64_t v28 = 0;
  unsigned int v30 = v32;
  v32[0] = a2;
  uint64_t v31 = 0x400000001;
  if (*(_UNKNOWN **)(*((void *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::CmpIOp,void>::id) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5 && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"predicate", 9), v8))
  {
    uint64_t v9 = InherentAttr;
    if (!InherentAttr) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v9 = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "predicate", 9uLL);
    if (!v9)
    {
LABEL_15:
      uint64_t v15 = *((void *)a3 + 2);
      if (v15 && mlir::RewriterBase::Listener::classof(v15))
      {
        uint64_t v16 = *((void *)a2 + 3);
LABEL_18:
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v15 + 64))(v15, v16, v17, v29);
        goto LABEL_23;
      }
      goto LABEL_41;
    }
  }
  if ((mlir::arith::CmpIPredicateAttr::classof(v9) & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v28 = v9;
  v29[0] = *(void **)(*((void *)v6 + 9) + 24);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (!DefiningOp)
  {
    uint64_t v12 = *((void *)a3 + 2);
    if (!v12) {
      goto LABEL_42;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_41;
    }
    uint64_t v13 = *((void *)v6 + 3);
    goto LABEL_22;
  }
  uint64_t v11 = DefiningOp;
  if (*(_UNKNOWN **)(*(void *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
  {
    uint64_t v12 = *((void *)a3 + 2);
    if (!v12) {
      goto LABEL_42;
    }
    if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
      goto LABEL_41;
    }
    uint64_t v13 = *(void *)(v11 + 24);
    goto LABEL_22;
  }
  if ((*(unsigned char *)(DefiningOp + 46) & 0x80) != 0)
  {
    uint64_t v20 = *(void *)(DefiningOp + 72);
    uint64_t v21 = v31;
    if (v31 < HIDWORD(v31)) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = v31;
    if (v31 < HIDWORD(v31)) {
      goto LABEL_27;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v21 + 1, 8);
  LODWORD(v21) = v31;
LABEL_27:
  v30[v21] = v11;
  LODWORD(v31) = v31 + 1;
  v29[0] = *(void **)(*((void *)v6 + 9) + 56);
  uint64_t v22 = mlir::Value::getDefiningOp((mlir::Value *)v29);
  if (v22)
  {
    uint64_t v23 = v22;
    if (*(_UNKNOWN **)(*(void *)(v22 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::ExtUIOp,void>::id)
    {
      uint64_t v12 = *((void *)a3 + 2);
      if (!v12) {
        goto LABEL_42;
      }
      if (!mlir::RewriterBase::Listener::classof(*((void *)a3 + 2))) {
        goto LABEL_41;
      }
      uint64_t v13 = *(void *)(v23 + 24);
      goto LABEL_22;
    }
    if ((*(unsigned char *)(v22 + 46) & 0x80) != 0)
    {
      uint64_t v24 = *(void *)(v22 + 72);
      uint64_t v25 = v31;
      if (v31 < HIDWORD(v31))
      {
LABEL_37:
        v30[v25] = v23;
        LODWORD(v31) = v31 + 1;
        if ((*(void *)(*(void *)(v20 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)(v24 + 24)
                                                                                             + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v15 = *((void *)a3 + 2);
          if (v15 && mlir::RewriterBase::Listener::classof(v15))
          {
            uint64_t v16 = *((void *)a2 + 3);
            goto LABEL_18;
          }
          goto LABEL_41;
        }
        if (!mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28)
          || mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v28) == 1)
        {
          uint64_t v27 = *(void **)(v30[1] + 24);
          v29[0] = *(void **)(*v30 + 24);
          v29[1] = v27;
          v29[2] = *(void **)(v30[2] + 24);
          mlir::Builder::getFusedLoc((mlir::UnknownLoc **)a3 + 1, (uint64_t **)v29, (mlir::MLIRContext *)3, 0);
        }
LABEL_23:
        uint64_t v12 = v18;
        __int16 v19 = v30;
        if (v30 == v32) {
          return v12;
        }
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = v31;
      if (v31 < HIDWORD(v31)) {
        goto LABEL_37;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v32, v25 + 1, 8);
    LODWORD(v25) = v31;
    goto LABEL_37;
  }
  uint64_t v12 = *((void *)a3 + 2);
  if (!v12) {
    goto LABEL_42;
  }
  if (mlir::RewriterBase::Listener::classof(*((void *)a3 + 2)))
  {
    uint64_t v13 = *((void *)v6 + 3);
LABEL_22:
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), void **))(*(void *)v12 + 64))(v12, v13, v14, v29);
    goto LABEL_23;
  }
LABEL_41:
  uint64_t v12 = 0;
LABEL_42:
  __int16 v19 = v30;
  if (v30 != v32) {
LABEL_43:
  }
    free(v19);
  return v12;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !mlir::RewriterBase::Listener::classof(a1)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128 (*)(uint64_t, uint64_t), uint64_t))(*(void *)a1 + 64);
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "expected op 'arith.cmpi' to have attribute 'predicate' of type '::mlir::arith::CmpIPredicateAttr'";
  uint64_t v14 = 97;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#2}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 0 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#3}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#4}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "There's no operation that defines operand 1 of castedOp0";
  uint64_t v14 = 56;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#5}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "castedOp1 is not ::mlir::arith::ExtUIOp type";
  uint64_t v14 = 44;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#6}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'a, b' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

__n128 llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<anonymous namespace'::CmpIExtUI::matchAndRewrite(mlir::Operation *,mlir::PatternRewriter &)::{lambda(mlir::Diagnostic &)#7}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  unint64_t v4 = *(void *)(a2 + 16);
  int v12 = 3;
  uint64_t v13 = "entities 'pred' failed to satisfy constraint: ''";
  uint64_t v14 = 48;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  uint64_t v6 = (__n128 *)&v12;
  if (v5 >= *(_DWORD *)(a2 + 28))
  {
    unint64_t v9 = v5 + 1;
    BOOL v10 = v4 + 24 * v5 > (unint64_t)&v12;
    if (v4 <= (unint64_t)&v12 && v10)
    {
      uint64_t v11 = (char *)&v12 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v11[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a2 + 32), v9, 24);
      unint64_t v4 = *(void *)(a2 + 16);
      uint64_t v6 = (__n128 *)&v12;
    }
  }
  uint64_t v7 = (__n128 *)(v4 + 24 * *(unsigned int *)(a2 + 24));
  __n128 result = *v6;
  v7[1].n128_u64[0] = v6[1].n128_u64[0];
  *uint64_t v7 = result;
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void mlir::RewritePatternSet::addImpl<CmpFIntToFPConst,mlir::MLIRContext *&>()
{
}

void mlir::RewritePattern::create<CmpFIntToFPConst,mlir::MLIRContext *&>()
{
}

void CmpFIntToFPConst::~CmpFIntToFPConst(CmpFIntToFPConst *this)
{
  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }
}

{
  char *v2;
  char *v3;
  uint64_t vars8;

  uint64_t v2 = (char *)*((void *)this + 10);
  if (v2 != (char *)this + 96) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 4);
  if (v3 != (char *)this + 48) {
    free(v3);
  }

  JUMPOUT(0x21667D3C0);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::CmpFOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::CmpFOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::arith::CmpFOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 64))();
}

uint64_t CmpFIntToFPConst::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void v62[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(*(void *)(a2 + 72) + 56);
  unint64_t v58 = 0;
  *(void *)char v59 = v5;
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v59);
  if (DefiningOp)
  {
    uint64_t v7 = DefiningOp;
    if (mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(DefiningOp + 48)))
    {
      uint64_t v60 = v62;
      uint64_t v61 = 0x100000000;
      mlir::Operation::fold(v7, 0, 0, (uint64_t)&v60);
      BOOL v8 = (*(void *)v60 & 0xFFFFFFFFFFFFFFF8) == 0
        || *(void *)(*(void *)(*(void *)v60 & 0xFFFFFFFFFFFFFFF8) + 136) != (void)&mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id;
      if (!v8) {
        unint64_t v58 = *(void *)v60 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v60 != v62) {
        free(v60);
      }
      if (!v8)
      {
        uint64_t Value = (llvm::APFloatBase *)mlir::FloatAttr::getValue((mlir::FloatAttr *)&v58, (uint64_t)&v60);
        uint64_t v12 = v61;
        uint64_t v13 = llvm::APFloatBase::PPCDoubleDouble(Value);
        uint64_t v14 = (void **)v62[0];
        if (v13 != (void *)v12) {
          uint64_t v14 = &v60;
        }
        if ((*((unsigned char *)v14 + 28) & 7) == 1)
        {
          uint64_t v9 = 0;
          if (v13 != (void *)v12)
          {
LABEL_17:
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v61);
            return v9;
          }
LABEL_25:
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v61);
          return v9;
        }
        unint64_t v57 = *(void *)(*(void *)(*(void *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
        FPMantissauint64_t Width = mlir::FloatType::getFPMantissaWidth((mlir::FloatType *)&v57);
        if (FPMantissaWidth < 1) {
          goto LABEL_23;
        }
        int v16 = FPMantissaWidth;
        *(void *)char v59 = *(void *)(*(void *)(a2 + 72) + 24);
        uint64_t v17 = mlir::Value::getDefiningOp((mlir::Value *)v59);
        if (v17
          && *(_UNKNOWN **)(*(void *)(v17 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::SIToFPOp,void>::id)
        {
          int v18 = 0;
        }
        else
        {
          *(void *)char v59 = *(void *)(*(void *)(a2 + 72) + 24);
          uint64_t v17 = mlir::Value::getDefiningOp((mlir::Value *)v59);
          if (!v17
            || *(_UNKNOWN **)(*(void *)(v17 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::arith::UIToFPOp,void>::id)
          {
            goto LABEL_23;
          }
          int v18 = 1;
        }
        uint64_t v19 = *(void *)(*(void *)(v17 + 72) + 24);
        unint64_t v55 = *(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v56 = v19;
        uint64_t Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v55);
        uint64_t v22 = Width;
        int v46 = v18 ^ 1;
        if ((int)Width > v16)
        {
          int v23 = Width - v46;
          if (v13 == (void *)v61) {
            uint64_t v24 = (llvm::detail *)(v62[0] + 8);
          }
          else {
            uint64_t v24 = (llvm::detail *)&v61;
          }
          int v25 = llvm::detail::ilogb(v24, v21);
          if (v25 == 0x7FFFFFFF)
          {
            llvm::APFloat::getLargest((llvm::APFloatBase *)v61, 0, (uint64_t)v59);
            int v27 = llvm::ilogb((llvm *)v59, v26);
            llvm::APFloat::~APFloat((llvm::APFloat *)v59);
            uint64_t v9 = 0;
            if (v27 < v23) {
              goto LABEL_24;
            }
          }
          else if (v16 <= v25 && v25 <= v23)
          {
LABEL_23:
            uint64_t v9 = 0;
            goto LABEL_24;
          }
        }
        *(void *)char v59 = *(void *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
        uint64_t Int = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v59);
        if (Int == 14)
        {
          LOBYTE(v51) = 0;
          uint64_t v9 = 1;
          goto LABEL_41;
        }
        if (Int == 7)
        {
          uint64_t v9 = 1;
          LOBYTE(v51) = 1;
LABEL_41:
          v59[0] = 1;
          mlir::RewriterBase::replaceOpWithNewOp<mlir::arith::ConstantIntOp,BOOL,int>((uint64_t)a3, a2, (unsigned __int8 *)&v51, v59);
          goto LABEL_24;
        }
        *(void *)char v59 = *(void *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
        uint64_t v29 = mlir::IntegerAttr::getInt((mlir::IntegerAttr *)v59);
        unint64_t v30 = CmpFIntToFPConst::convertToIntegerPredicate(v29, v18);
        unint64_t v54 = v30;
        if (v18)
        {
          llvm::APFloat::APFloat((llvm::APFloatBase *)v59, (void *)v61);
          llvm::APInt::getMaxValue(v22, (llvm::APInt *)&v51);
          llvm::APFloat::convertFromAPInt((llvm::APFloatBase *)v59, (unsigned int *)&v51, 0, 1);
          if (v52 >= 0x41 && v51) {
            MEMORY[0x21667D390](v51, 0x1000C8000313F17);
          }
          if (llvm::APFloat::operator<(v59, (uint64_t)&v60))
          {
            if (v30 <= 7)
            {
              uint64_t v31 = 1 << v30;
              uint64_t v32 = 194;
              goto LABEL_70;
            }
LABEL_74:
            LOBYTE(v48) = 0;
            goto LABEL_75;
          }
          llvm::APFloat::~APFloat((llvm::APFloat *)v59);
          llvm::APFloat::APFloat((llvm::APFloatBase *)v59, (void *)v61);
          unsigned int v52 = v22;
          if (v22 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v51);
          }
          uint64_t v51 = 0;
          llvm::APFloat::convertFromAPInt((llvm::APFloatBase *)v59, (unsigned int *)&v51, 0, 1);
          if (v52 >= 0x41 && v51) {
            MEMORY[0x21667D390](v51, 0x1000C8000313F17);
          }
          if (llvm::APFloat::operator>(v59, (uint64_t)&v60))
          {
            if (v30 > 9) {
              goto LABEL_74;
            }
            uint64_t v31 = 1 << v30;
            uint64_t v32 = 770;
            goto LABEL_70;
          }
        }
        else
        {
          llvm::APFloat::APFloat((llvm::APFloatBase *)v59, (void *)v61);
          llvm::APInt::getSignedMaxValue(v22, (llvm::APInt *)&v51);
          llvm::APFloat::convertFromAPInt((llvm::APFloatBase *)v59, (unsigned int *)&v51, 1, 1);
          if (v52 >= 0x41 && v51) {
            MEMORY[0x21667D390](v51, 0x1000C8000313F17);
          }
          if (llvm::APFloat::operator<(v59, (uint64_t)&v60))
          {
            if (v30 - 1 <= 2)
            {
              LOBYTE(v48) = 1;
LABEL_75:
              LODWORD(v51) = 1;
              goto LABEL_76;
            }
            goto LABEL_74;
          }
          llvm::APFloat::~APFloat((llvm::APFloat *)v59);
          llvm::APFloat::APFloat((llvm::APFloatBase *)v59, (void *)v61);
          llvm::APInt::getSignedMinValue(v22, (llvm::APInt *)&v51);
          llvm::APFloat::convertFromAPInt((llvm::APFloatBase *)v59, (unsigned int *)&v51, 1, 1);
          if (v52 >= 0x41 && v51) {
            MEMORY[0x21667D390](v51, 0x1000C8000313F17);
          }
          if (llvm::APFloat::operator>(v59, (uint64_t)&v60))
          {
            if (v30 > 5) {
              goto LABEL_74;
            }
            uint64_t v31 = 1 << v30;
            uint64_t v32 = 50;
LABEL_70:
            if ((v31 & v32) != 0)
            {
              LOBYTE(v48) = 1;
              LODWORD(v51) = 1;
LABEL_76:
              mlir::RewriterBase::replaceOpWithNewOp<mlir::arith::ConstantIntOp,BOOL,int>((uint64_t)a3, a2, (unsigned __int8 *)&v48, (unsigned int *)&v51);
              llvm::APFloat::~APFloat((llvm::APFloat *)v59);
              uint64_t v9 = 1;
              goto LABEL_24;
            }
            goto LABEL_74;
          }
        }
        llvm::APFloat::~APFloat((llvm::APFloat *)v59);
        char v50 = 0;
        unsigned int v52 = v22;
        if (v22 > 0x40) {
          llvm::APInt::initSlowCase((llvm::APInt *)&v51);
        }
        uint64_t v51 = 0;
        char v53 = v18;
        int v33 = llvm::APFloat::convertToInteger((uint64_t)&v60, (uint64_t)&v51, 0, &v50);
        uint64_t v9 = 0;
        if (v33 == 1)
        {
LABEL_127:
          if (v52 >= 0x41 && v51) {
            MEMORY[0x21667D390](v51, 0x1000C8000313F17);
          }
LABEL_24:
          if (v13 != (void *)v61) {
            goto LABEL_17;
          }
          goto LABEL_25;
        }
        if (v13 == (void *)v61) {
          uint64_t v34 = (void **)v62[0];
        }
        else {
          uint64_t v34 = &v60;
        }
        if ((*((unsigned char *)v34 + 28) & 7) != 3)
        {
          FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v57);
          unsigned int v49 = mlir::FloatType::getWidth((mlir::FloatType *)&v57);
          if (v49 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v48);
          }
          unsigned int v48 = 0;
          llvm::APFloat::APFloat((llvm::APFloatBase *)v59, FloatSemantics, &v48);
          if (v49 >= 0x41 && v48) {
            MEMORY[0x21667D390](v48, 0x1000C8000313F17);
          }
          llvm::APFloat::convertFromAPInt((llvm::APFloatBase *)v59, (unsigned int *)&v51, v46, 1);
          if (!llvm::APFloat::operator==(v59, (uint64_t)&v60))
          {
            switch(v30)
            {
              case 0uLL:
                goto LABEL_114;
              case 1uLL:
                goto LABEL_130;
              case 2uLL:
                uint64_t v36 = &v60;
                if (v13 == (void *)v61) {
                  uint64_t v36 = (void **)v62[0];
                }
                if ((*((unsigned char *)v36 + 28) & 8) != 0) {
                  goto LABEL_124;
                }
                unint64_t v37 = 3;
                goto LABEL_123;
              case 3uLL:
                uint64_t v38 = &v60;
                if (v13 == (void *)v61) {
                  uint64_t v38 = (void **)v62[0];
                }
                if ((*((unsigned char *)v38 + 28) & 8) == 0) {
                  goto LABEL_124;
                }
                unint64_t v37 = 2;
                goto LABEL_123;
              case 4uLL:
                uint64_t v39 = &v60;
                if (v13 == (void *)v61) {
                  uint64_t v39 = (void **)v62[0];
                }
                if ((*((unsigned char *)v39 + 28) & 8) == 0) {
                  goto LABEL_124;
                }
                unint64_t v37 = 5;
                goto LABEL_123;
              case 5uLL:
                uint64_t v40 = &v60;
                if (v13 == (void *)v61) {
                  uint64_t v40 = (void **)v62[0];
                }
                if ((*((unsigned char *)v40 + 28) & 8) != 0) {
                  goto LABEL_124;
                }
                unint64_t v37 = 4;
                goto LABEL_123;
              case 6uLL:
                char v41 = &v60;
                if (v13 == (void *)v61) {
                  char v41 = (void **)v62[0];
                }
                if ((*((unsigned char *)v41 + 28) & 8) != 0) {
                  goto LABEL_114;
                }
                unint64_t v37 = 7;
                goto LABEL_123;
              case 7uLL:
                unsigned int v42 = &v60;
                if (v13 == (void *)v61) {
                  unsigned int v42 = (void **)v62[0];
                }
                if ((*((unsigned char *)v42 + 28) & 8) == 0) {
                  goto LABEL_124;
                }
LABEL_114:
                LOBYTE(IntegerAttr) = 0;
                goto LABEL_131;
              case 8uLL:
                uint64_t v43 = &v60;
                if (v13 == (void *)v61) {
                  uint64_t v43 = (void **)v62[0];
                }
                if ((*((unsigned char *)v43 + 28) & 8) == 0) {
                  goto LABEL_124;
                }
                goto LABEL_130;
              case 9uLL:
                uint64_t v44 = &v60;
                if (v13 == (void *)v61) {
                  uint64_t v44 = (void **)v62[0];
                }
                if ((*((unsigned char *)v44 + 28) & 8) == 0)
                {
                  unint64_t v37 = 8;
LABEL_123:
                  unint64_t v54 = v37;
                  goto LABEL_124;
                }
LABEL_130:
                LOBYTE(IntegerAttr) = 1;
LABEL_131:
                LODWORD(v48) = 1;
                mlir::RewriterBase::replaceOpWithNewOp<mlir::arith::ConstantIntOp,BOOL,int>((uint64_t)a3, a2, (unsigned __int8 *)&IntegerAttr, (unsigned int *)&v48);
                llvm::APFloat::~APFloat((llvm::APFloat *)v59);
                break;
              default:
                goto LABEL_124;
            }
            goto LABEL_126;
          }
LABEL_124:
          llvm::APFloat::~APFloat((llvm::APFloat *)v59);
        }
        uint64_t v45 = *(void *)(a2 + 24);
        unsigned int v48 = (const llvm::APInt *)(*(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8);
        uint64_t IntegerAttr = (void *)mlir::Builder::getIntegerAttr((uint64_t)(a3 + 1), (uint64_t)v48, (const llvm::APInt *)&v51);
        *(void *)char v59 = mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type,mlir::IntegerAttr>((mlir::OpBuilder *)(a3 + 1), v45, (uint64_t *)&v48, &IntegerAttr);
        mlir::RewriterBase::replaceOpWithNewOp<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::arith::ConstantOp>(a3, a2, &v54, &v56, v59);
LABEL_126:
        uint64_t v9 = 1;
        goto LABEL_127;
      }
    }
  }
  return 0;
}

uint64_t llvm::ilogb(llvm *this, const llvm::APFloat *a2)
{
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v3) {
    uint64_t v5 = (llvm::detail *)(*((void *)v2 + 1) + 8);
  }
  else {
    uint64_t v5 = (llvm::detail *)v2;
  }

  return llvm::detail::ilogb(v5, v4);
}

ZinIrHalH13g *mlir::RewriterBase::replaceOpWithNewOp<mlir::arith::ConstantIntOp,BOOL,int>(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int *a4)
{
  uint64_t v6 = mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>((mlir::Builder *)(a1 + 8), *(void *)(a2 + 24), a3, a4);
  (*(void (**)(uint64_t, uint64_t, ZinIrHalH13g *))(*(void *)a1 + 32))(a1, a2, v6);
  return v6;
}

uint64_t CmpFIntToFPConst::convertToIntegerPredicate(uint64_t a1, int a2)
{
  uint64_t v2 = a1 - 1;
  uint64_t result = 0;
  switch(v2)
  {
    case 1:
    case 8:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 4;
      uint64_t v6 = 8;
      goto LABEL_6;
    case 2:
    case 9:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 5;
      uint64_t v6 = 9;
      goto LABEL_6;
    case 3:
    case 10:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 2;
      uint64_t v6 = 6;
      goto LABEL_6;
    case 4:
    case 11:
      BOOL v4 = a2 == 0;
      uint64_t v5 = 3;
      uint64_t v6 = 7;
LABEL_6:
      if (v4) {
        uint64_t result = v5;
      }
      else {
        uint64_t result = v6;
      }
      break;
    case 5:
    case 12:
      uint64_t result = 1;
      break;
    case 6:
      __break(1u);
      JUMPOUT(0x2114FE218);
    default:
      return result;
  }
  return result;
}

BOOL llvm::APFloat::operator>(void *a1, uint64_t a2)
{
  uint64_t v3 = (llvm::detail::DoubleAPFloat *)(a1 + 1);
  BOOL v4 = (void *)a1[1];
  uint64_t v5 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
  uint64_t v6 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v5 == v4) {
    return llvm::detail::DoubleAPFloat::compare(v3, v6) == 2;
  }
  else {
    return llvm::detail::IEEEFloat::compare(v3, v6) == 2;
  }
}

ZinIrHalH13g *mlir::RewriterBase::replaceOpWithNewOp<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::arith::ConstantOp>(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = mlir::OpBuilder::create<mlir::arith::CmpIOp,mlir::arith::CmpIPredicate &,mlir::Value &,mlir::arith::ConstantOp>(a1 + 1, *(void *)(a2 + 24), a3, a4, a5);
  (*(void (**)(uint64_t *, uint64_t, ZinIrHalH13g *))(*a1 + 32))(a1, a2, v7);
  return v7;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantOp,mlir::Type,mlir::IntegerAttr>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, void **a4)
{
  v29[28] = *MEMORY[0x263EF8340];
  uint64_t v20 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v24 = 1283;
    unint64_t v23[2] = (uint64_t)"arith.constant";
    void v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v9);
  uint64_t v11 = *a3;
  uint64_t v12 = *a4;
  if (*a4)
  {
    uint64_t v13 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*v12 + 8);
    uint64_t v14 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((uint64_t)v25);
    *uint64_t v14 = v12;
    v14[1] = v13;
    uint64_t v15 = v27;
    if (v27 < v28) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v19 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((uint64_t)v25);
  *uint64_t v19 = 0;
  v19[1] = 0;
  uint64_t v15 = v27;
  if (v27 >= v28)
  {
LABEL_4:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v15 + 1, 8);
    LODWORD(v15) = v27;
  }
LABEL_5:
  *(void *)(v26 + 8 * v15) = v11;
  ++v27;
  int v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((void *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

ZinIrHalH13g *mlir::OpBuilder::create<mlir::arith::ConstantIntOp,BOOL,int>(mlir::Builder *a1, uint64_t a2, unsigned __int8 *a3, unsigned int *a4)
{
  v31[28] = *MEMORY[0x263EF8340];
  uint64_t v22 = a2;
  uint64_t Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  uint64_t v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"arith.constant", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    __int16 v26 = 1283;
    void v25[2] = (uint64_t)"arith.constant";
    v25[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    __int16 v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v9);
  unint64_t v11 = *a3;
  Integeruint64_t Type = mlir::Builder::getIntegerType(a1, *a4);
  uint64_t IntegerAttr = (void *)mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, v11);
  uint64_t v14 = IntegerAttr;
  if (IntegerAttr)
  {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*IntegerAttr + 8);
    int v16 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((uint64_t)v27);
    *int v16 = v14;
    v16[1] = v15;
    uint64_t v17 = v29;
    if (v29 < v30) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v20 = (void *)mlir::OperationState::getOrAddProperties<mlir::arith::detail::ConstantOpGenericAdaptorBase::Properties>((uint64_t)v27);
  *uint64_t v20 = 0;
  v20[1] = 0;
  uint64_t v17 = v29;
  if (v29 >= v30)
  {
LABEL_4:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v17 + 1, 8);
    LODWORD(v17) = v29;
  }
LABEL_5:
  *(void *)(v28 + 8 * v17) = IntegerType;
  ++v29;
  int v18 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v27);
  uint64_t v19 = v18;
  if (v18)
  {
    if (*(_UNKNOWN **)(*((void *)v18 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::arith::ConstantOp,void>::id)
    {
      v25[0] = *((void *)v18 - 1) & 0xFFFFFFFFFFFFFFF8;
      if (!mlir::Type::isSignlessInteger((mlir::Type *)v25)) {
        uint64_t v19 = 0;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v19;
}